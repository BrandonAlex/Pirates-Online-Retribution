//Cg
//
//Cg profile arbvp1 arbfp1


#define enable_half_display 0


void vshader(float4 vtx_position : POSITION, 
             float2 vtx_texcoord0 : TEXCOORD0,
             out float4 l_position : POSITION,
             out float2 l_texcoord0 : TEXCOORD0,
             uniform float4x4 mat_modelproj)
{
  l_position = mul (mat_modelproj, vtx_position);
  l_texcoord0 = vtx_texcoord0;
}

void fshader(uniform float4 k_parameters,
             uniform float4 k_factors,
             uniform float4 k_parameters2,
             float2 l_texcoord0 : TEXCOORD0,
             out float4 o_color : COLOR,
             uniform sampler2D tex_0 : TEXUNIT0,
             uniform sampler2D k_original : TEXUNIT1,
             uniform sampler2D k_average : TEXUNIT2)
{
  float4 color;
  float4 original_color;
  float4 blurred_color;

  float c_exposure;
  float c_gamma;
  float c_exposure2;

  float c_factor;
  float c_factor2;

  float minimum_exposure;
  float maximum_exposure;

  c_exposure = k_parameters.x;
  c_gamma = k_parameters.y;
  c_exposure2 = k_parameters.z;

  c_factor = k_factors.x;
  c_factor2 = k_factors.y;

  minimum_exposure = k_factors.z;
  maximum_exposure = k_factors.w;

  // use average scene luminance to adjust exposure
  if (k_parameters.w > 0)
  {
    float exposure;
    float4 average_color;

    float luminance;
    float3 luminance_constants = float3 (0.2125, 0.7154, 0.0721);

    average_color = tex2D (k_average, float2 (0.0, 0.0));
    luminance = dot (average_color.xyz, luminance_constants);
    
    exposure = 0.5 / luminance;
    if (exposure < minimum_exposure)
    {
      exposure = minimum_exposure;
    }
    if (exposure > maximum_exposure)
    {
      exposure = maximum_exposure;
    }

    c_exposure = exposure;
    c_exposure2 = exposure;
  }

  original_color = tex2D (k_original, l_texcoord0);
  if (enable_half_display && l_texcoord0.x < 0.5)
  {
    color.xyz = original_color.xyz;
  }
  else
  {
    blurred_color = tex2D (tex_0, l_texcoord0);  
    blurred_color.xyz = blurred_color.xyz * c_exposure2;

    color.xyz = (original_color.xyz * c_exposure * c_factor) + (blurred_color.xyz * c_factor2);

    color.xyz = lerp(original_color.xyz, color.xyz, k_parameters2.x);
  }
    
  color.xyz = pow (color.xyz, c_gamma);
  color.w = 1.0;

  o_color = color;
}
