1436948378
2 3
16 libp3parametrics 4 UKlv 12 panda3d.core 
243
266 8 is_valid 0 6 509 25 ParametricCurve::is_valid 0 1 1 415
////////////////////////////////////////////////////////////////////
//     Function: ParametricCurve::is_valid
//       Access: Published, Virtual
//  Description: Returns true if the curve is defined.  This base
//               class function always returns true; derived classes
//               might override this to sometimes return false.
////////////////////////////////////////////////////////////////////
51
virtual bool ParametricCurve::is_valid(void) const;

267 9 get_max_t 0 6 509 26 ParametricCurve::get_max_t 0 1 2 522
////////////////////////////////////////////////////////////////////
//     Function: ParametricCurve::get_max_t
//       Access: Published, Virtual
//  Description: Returns the upper bound of t for the entire curve.
//               The curve is defined in the range 0.0f <= t <=
//               get_max_t().  This base class function always returns
//               1.0f; derived classes might override this to return
//               something else.
////////////////////////////////////////////////////////////////////
59
virtual PN_stdfloat ParametricCurve::get_max_t(void) const;

268 14 set_curve_type 0 4 509 31 ParametricCurve::set_curve_type 0 1 3 731
////////////////////////////////////////////////////////////////////
//     Function: ParametricCurve::set_curve_type
//       Access: Published
//  Description: Sets the flag indicating the use to which the curve
//               is intended to be put.  This flag is optional and
//               only serves to provide a hint to the egg reader and
//               writer code; it has no effect on the curve's
//               behavior.
//
//               Setting the curve type also sets the num_dimensions
//               to 3 or 1 according to the type.
//
//               THis flag may have one of the values PCT_XYZ,
//               PCT_HPR, or PCT_T.
////////////////////////////////////////////////////////////////////
47
void ParametricCurve::set_curve_type(int type);

269 14 get_curve_type 0 4 509 31 ParametricCurve::get_curve_type 0 1 4 325
////////////////////////////////////////////////////////////////////
//     Function: ParametricCurve::get_curve_type
//       Access: Published
//  Description: Returns the flag indicating the use to which the curve
//               is intended to be put.
////////////////////////////////////////////////////////////////////
48
int ParametricCurve::get_curve_type(void) const;

270 18 set_num_dimensions 0 4 509 35 ParametricCurve::set_num_dimensions 0 1 5 622
////////////////////////////////////////////////////////////////////
//     Function: ParametricCurve::set_num_dimensions
//       Access: Published
//  Description: Specifies the number of significant dimensions in the
//               curve's vertices.  This should be one of 1, 2, or 3.
//               Normally, XYZ and HPR curves have three dimensions;
//               time curves should always have one dimension.  This
//               only serves as a hint to the mopath editor, and also
//               controls how the curve is written out.
////////////////////////////////////////////////////////////////////
50
void ParametricCurve::set_num_dimensions(int num);

271 18 get_num_dimensions 0 4 509 35 ParametricCurve::get_num_dimensions 0 1 6 550
////////////////////////////////////////////////////////////////////
//     Function: ParametricCurve::get_num_dimensions
//       Access: Published
//  Description: Returns the number of significant dimensions in the
//               curve's vertices, as set by a previous call to
//               set_num_dimensions().  This is only a hint as to how
//               the curve is intended to be used; the actual number
//               of dimensions of any curve is always three.
////////////////////////////////////////////////////////////////////
52
int ParametricCurve::get_num_dimensions(void) const;

272 11 calc_length 0 4 509 28 ParametricCurve::calc_length 0 2 7 8 653
////////////////////////////////////////////////////////////////////
//     Function: ParametricCurve::calc_length
//       Access: Published
//  Description: Approximates the length of the entire curve to within
//               a few decimal places.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ParametricCurve::calc_length
//       Access: Published
//  Description: Approximates the length of the curve segment from
//               parametric time 'from' to time 'to'.
////////////////////////////////////////////////////////////////////
135
PN_stdfloat ParametricCurve::calc_length(void) const;
PN_stdfloat ParametricCurve::calc_length(PN_stdfloat from, PN_stdfloat to) const;

273 11 find_length 0 4 509 28 ParametricCurve::find_length 0 1 9 717
////////////////////////////////////////////////////////////////////
//     Function: ParametricCurve::find_length
//       Access: Published
//  Description: Returns the parametric value corresponding to the
//               indicated distance along the curve from the starting
//               parametric value.
//
//               This is the inverse of calc_length(): rather than
//               determining the length along the curve between two
//               parametric points, it determines the position in
//               parametric time of a point n units along the curve.
//
//               The search distance must not be negative.
////////////////////////////////////////////////////////////////////
95
PN_stdfloat ParametricCurve::find_length(PN_stdfloat start_t, PN_stdfloat length_offset) const;

274 9 get_point 0 6 509 26 ParametricCurve::get_point 0 1 10 0
83
virtual bool ParametricCurve::get_point(PN_stdfloat t, LVecBase3 &point) const = 0;

275 11 get_tangent 0 6 509 28 ParametricCurve::get_tangent 0 1 11 0
87
virtual bool ParametricCurve::get_tangent(PN_stdfloat t, LVecBase3 &tangent) const = 0;

276 6 get_pt 0 6 509 23 ParametricCurve::get_pt 0 1 12 0
100
virtual bool ParametricCurve::get_pt(PN_stdfloat t, LVecBase3 &point, LVecBase3 &tangent) const = 0;

277 14 get_2ndtangent 0 6 509 31 ParametricCurve::get_2ndtangent 0 1 13 0
91
virtual bool ParametricCurve::get_2ndtangent(PN_stdfloat t, LVecBase3 &tangent2) const = 0;

278 12 adjust_point 0 6 509 29 ParametricCurve::adjust_point 0 1 14 402
////////////////////////////////////////////////////////////////////
//     Function: ParametricCurve::adjust_point
//       Access: Published, Virtual
//  Description: Recomputes the curve such that it passes through the
//               point (px, py, pz) at time t, but keeps the same
//               tangent value at that point.
////////////////////////////////////////////////////////////////////
106
virtual bool ParametricCurve::adjust_point(PN_stdfloat t, PN_stdfloat px, PN_stdfloat py, PN_stdfloat pz);

279 14 adjust_tangent 0 6 509 31 ParametricCurve::adjust_tangent 0 1 15 389
////////////////////////////////////////////////////////////////////
//     Function: ParametricCurve::adjust_tangent
//       Access: Published, Virtual
//  Description: Recomputes the curve such that it has the tangent
//               (tx, ty, tz) at time t, but keeps the same position
//               at the point.
////////////////////////////////////////////////////////////////////
108
virtual bool ParametricCurve::adjust_tangent(PN_stdfloat t, PN_stdfloat tx, PN_stdfloat ty, PN_stdfloat tz);

280 9 adjust_pt 0 6 509 26 ParametricCurve::adjust_pt 0 1 16 354
////////////////////////////////////////////////////////////////////
//     Function: ParametricCurve::adjust_pt
//       Access: Published, Virtual
//  Description: Recomputes the curve such that it passes through the
//               point (px, py, pz) with the tangent (tx, ty, tz).
////////////////////////////////////////////////////////////////////
151
virtual bool ParametricCurve::adjust_pt(PN_stdfloat t, PN_stdfloat px, PN_stdfloat py, PN_stdfloat pz, PN_stdfloat tx, PN_stdfloat ty, PN_stdfloat tz);

281 9 recompute 0 6 509 26 ParametricCurve::recompute 0 1 17 370
////////////////////////////////////////////////////////////////////
//     Function: ParametricCurve::recompute
//       Access: Published, Virtual
//  Description: Recalculates the curve, if necessary.  Returns
//               true if the resulting curve is valid, false
//               otherwise.
////////////////////////////////////////////////////////////////////
46
virtual bool ParametricCurve::recompute(void);

282 6 stitch 0 6 509 23 ParametricCurve::stitch 0 1 18 537
////////////////////////////////////////////////////////////////////
//     Function: ParametricCurve::stitch
//       Access: Published, Virtual
//  Description: Regenerates this curve as one long curve: the first
//               curve connected end-to-end with the second one.
//               Either a or b may be the same as 'this'.
//
//               Returns true if successful, false on failure or if
//               the curve type does not support stitching.
////////////////////////////////////////////////////////////////////
89
virtual bool ParametricCurve::stitch(ParametricCurve const *a, ParametricCurve const *b);

283 9 write_egg 0 4 509 26 ParametricCurve::write_egg 0 2 19 20 774
////////////////////////////////////////////////////////////////////
//     Function: ParametricCurve::write_egg
//       Access: Published
//  Description: Writes an egg description of the nurbs curve to the
//               specified output file.  Returns true if the file is
//               successfully written.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ParametricCurve::write_egg
//       Access: Published
//  Description: Writes an egg description of the nurbs curve to the
//               specified output stream.  Returns true if the file is
//               successfully written.
////////////////////////////////////////////////////////////////////
181
bool ParametricCurve::write_egg(Filename filename, CoordinateSystem cs = ::CS_default);
bool ParametricCurve::write_egg(ostream &out, Filename const &filename, CoordinateSystem cs);

284 14 get_class_type 0 4 509 31 ParametricCurve::get_class_type 0 1 21 0
56
static TypeHandle ParametricCurve::get_class_type(void);

285 14 get_class_type 0 4 511 29 CubicCurveseg::get_class_type 0 1 22 0
54
static TypeHandle CubicCurveseg::get_class_type(void);

286 25 ParametricCurveCollection 0 4 512 52 ParametricCurveCollection::ParametricCurveCollection 0 1 23 237
////////////////////////////////////////////////////////////////////
//     Function: ParametricCurveCollection::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
59
ParametricCurveCollection::ParametricCurveCollection(void);

287 9 add_curve 0 4 512 36 ParametricCurveCollection::add_curve 0 2 24 25 604
////////////////////////////////////////////////////////////////////
//     Function: ParametricCurveCollection::add_curve
//       Access: Published
//  Description: Adds a new ParametricCurve to the collection.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ParametricCurveCollection::add_curve
//       Access: Published
//  Description: Adds a new ParametricCurve to the collection at the
//               indicated index.
////////////////////////////////////////////////////////////////////
144
void ParametricCurveCollection::add_curve(ParametricCurve *curve);
void ParametricCurveCollection::add_curve(ParametricCurve *curve, int index);

288 10 add_curves 0 4 512 37 ParametricCurveCollection::add_curves 0 1 26 378
////////////////////////////////////////////////////////////////////
//     Function: ParametricCurveCollection::add_curves
//       Access: Published
//  Description: Adds all the curves found in the scene graph rooted
//               at the given node.  Returns the number of curves
//               found.
////////////////////////////////////////////////////////////////////
59
int ParametricCurveCollection::add_curves(PandaNode *node);

289 12 remove_curve 0 4 512 39 ParametricCurveCollection::remove_curve 0 2 27 28 756
////////////////////////////////////////////////////////////////////
//     Function: ParametricCurveCollection::remove_curve
//       Access: Published
//  Description: Removes the indicated ParametricCurve from the
//               collection.  Returns true if the curve was removed,
//               false if it was not a member of the collection.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ParametricCurveCollection::remove_curve
//       Access: Published
//  Description: Removes the indicated ParametricCurve from the
//               collection, by its index number.
////////////////////////////////////////////////////////////////////
126
bool ParametricCurveCollection::remove_curve(ParametricCurve *curve);
void ParametricCurveCollection::remove_curve(int index);

290 9 has_curve 0 4 512 36 ParametricCurveCollection::has_curve 0 1 29 343
////////////////////////////////////////////////////////////////////
//     Function: ParametricCurveCollection::has_curve
//       Access: Published
//  Description: Returns true if the indicated ParametricCurve appears in
//               this collection, false otherwise.
////////////////////////////////////////////////////////////////////
72
bool ParametricCurveCollection::has_curve(ParametricCurve *curve) const;

291 5 clear 0 4 512 32 ParametricCurveCollection::clear 0 1 30 281
////////////////////////////////////////////////////////////////////
//     Function: ParametricCurveCollection::clear
//       Access: Published
//  Description: Removes all ParametricCurves from the collection.
////////////////////////////////////////////////////////////////////
44
void ParametricCurveCollection::clear(void);

292 15 clear_timewarps 0 4 512 42 ParametricCurveCollection::clear_timewarps 0 1 31 294
////////////////////////////////////////////////////////////////////
//     Function: ParametricCurveCollection::clear_timewarps
//       Access: Published
//  Description: Removes all the timewarp curves from the collection.
////////////////////////////////////////////////////////////////////
54
void ParametricCurveCollection::clear_timewarps(void);

293 14 get_num_curves 0 4 512 41 ParametricCurveCollection::get_num_curves 0 1 32 298
////////////////////////////////////////////////////////////////////
//     Function: ParametricCurveCollection::get_num_curves
//       Access: Published
//  Description: Returns the number of ParametricCurves in the collection.
////////////////////////////////////////////////////////////////////
65
inline int ParametricCurveCollection::get_num_curves(void) const;

294 9 get_curve 0 4 512 36 ParametricCurveCollection::get_curve 0 1 33 286
////////////////////////////////////////////////////////////////////
//     Function: ParametricCurveCollection::get_curve
//       Access: Published
//  Description: Returns the nth ParametricCurve in the collection.
////////////////////////////////////////////////////////////////////
78
inline ParametricCurve *ParametricCurveCollection::get_curve(int index) const;

295 13 get_xyz_curve 0 4 512 40 ParametricCurveCollection::get_xyz_curve 0 1 34 338
////////////////////////////////////////////////////////////////////
//     Function: ParametricCurveCollection::get_xyz_curve
//       Access: Published
//  Description: Returns the first XYZ curve in the collection, if
//               any, or NULL if there are none.
////////////////////////////////////////////////////////////////////
70
ParametricCurve *ParametricCurveCollection::get_xyz_curve(void) const;

296 13 get_hpr_curve 0 4 512 40 ParametricCurveCollection::get_hpr_curve 0 1 35 338
////////////////////////////////////////////////////////////////////
//     Function: ParametricCurveCollection::get_hpr_curve
//       Access: Published
//  Description: Returns the first HPR curve in the collection, if
//               any, or NULL if there are none.
////////////////////////////////////////////////////////////////////
70
ParametricCurve *ParametricCurveCollection::get_hpr_curve(void) const;

297 17 get_default_curve 0 4 512 44 ParametricCurveCollection::get_default_curve 0 1 36 458
////////////////////////////////////////////////////////////////////
//     Function: ParametricCurveCollection::get_default_curve
//       Access: Published
//  Description: If there is an XYZ curve in the collection, returns
//               it; otherwise, returns the first curve whose type is
//               unspecified.  Returns NULL if no curve meets the
//               criteria.
////////////////////////////////////////////////////////////////////
74
ParametricCurve *ParametricCurveCollection::get_default_curve(void) const;

298 17 get_num_timewarps 0 4 512 44 ParametricCurveCollection::get_num_timewarps 0 1 37 317
////////////////////////////////////////////////////////////////////
//     Function: ParametricCurveCollection::get_num_timewarps
//       Access: Published
//  Description: Returns the number of timewarp curves in the
//               collection.
////////////////////////////////////////////////////////////////////
61
int ParametricCurveCollection::get_num_timewarps(void) const;

299 18 get_timewarp_curve 0 4 512 45 ParametricCurveCollection::get_timewarp_curve 0 1 38 294
////////////////////////////////////////////////////////////////////
//     Function: ParametricCurveCollection::get_timewarp_curve
//       Access: Published
//  Description: Returns the nth timewarp curve in the collection.
////////////////////////////////////////////////////////////////////
76
ParametricCurve *ParametricCurveCollection::get_timewarp_curve(int n) const;

300 9 get_max_t 0 4 512 36 ParametricCurveCollection::get_max_t 0 1 39 423
////////////////////////////////////////////////////////////////////
//     Function: ParametricCurveCollection::get_max_t
//       Access: Published
//  Description: Returns the maximum T value associated with the
//               *last* curve in the collection.  Normally, this will
//               be either the XYZ or HPR curve, or a timewarp curve.
////////////////////////////////////////////////////////////////////
68
inline PN_stdfloat ParametricCurveCollection::get_max_t(void) const;

301 9 make_even 0 4 512 36 ParametricCurveCollection::make_even 0 1 40 913
////////////////////////////////////////////////////////////////////
//     Function: ParametricCurveCollection::make_even
//       Access: Published
//  Description: Discards all existing timewarp curves and recomputes
//               a new timewarp curve that maps distance along the
//               curve to parametric time, so that the distance
//               between any two points in parametric time is
//               proportional to the approximate distance of those
//               same two points along the XYZ curve.
//
//               segments_per_unit represents the number of segments to
//               take per each unit of parametric time of the original
//               XYZ curve.
//
//               The new timewarp curve (and thus, the apparent range
//               of the collection) will range from 0 to max_t.
////////////////////////////////////////////////////////////////////
92
void ParametricCurveCollection::make_even(PN_stdfloat max_t, PN_stdfloat segments_per_unit);

302 12 face_forward 0 4 512 39 ParametricCurveCollection::face_forward 0 1 41 452
////////////////////////////////////////////////////////////////////
//     Function: ParametricCurveCollection::face_forward
//       Access: Published
//  Description: Discards the existing HPR curve and generates a new
//               one that looks in the direction of travel along the
//               XYZ curve, based on the XYZ curve's tangent at each
//               point.
////////////////////////////////////////////////////////////////////
76
void ParametricCurveCollection::face_forward(PN_stdfloat segments_per_unit);

303 11 reset_max_t 0 4 512 38 ParametricCurveCollection::reset_max_t 0 1 42 563
////////////////////////////////////////////////////////////////////
//     Function: ParametricCurveCollection::reset_max_t
//       Access: Published
//  Description: Adjusts the apparent length of the curve by applying
//               a new timewarp that maps the range [0..max_t] to the
//               range [0..get_max_t()].  After this call, the curve
//               collection will contain one more timewarp curve, and
//               get_max_t() will return the given max_t value.
////////////////////////////////////////////////////////////////////
63
void ParametricCurveCollection::reset_max_t(PN_stdfloat max_t);

304 8 evaluate 0 4 512 35 ParametricCurveCollection::evaluate 0 2 43 44 1656
////////////////////////////////////////////////////////////////////
//     Function: ParametricCurveCollection::evaluate
//       Access: Published
//  Description: Computes the position and rotation represented by the
//               first XYZ and HPR curves in the collection at the
//               given point t, after t has been modified by all the
//               timewarp curves in the collection applied in
//               sequence, from back to front.
//
//               Returns true if the point is valid (i.e. t is within
//               the bounds indicated by all the timewarp curves and
//               within the bounds of the curves themselves), or false
//               otherwise.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ParametricCurveCollection::evaluate
//       Access: Published
//  Description: Computes the transform matrix representing
//               translation to the position indicated by the first
//               XYZ curve in the collection and the rotation
//               indicated by the first HPR curve in the collection,
//               after t has been modified by all the timewarp curves
//               in the collection applied in sequence, from back to
//               front.
//
//               Returns true if the point is valid (i.e. t is within
//               the bounds indicated by all the timewarp curves and
//               within the bounds of the curves themselves), or false
//               otherwise.
////////////////////////////////////////////////////////////////////
211
bool ParametricCurveCollection::evaluate(PN_stdfloat t, LVecBase3 &xyz, LVecBase3 &hpr) const;
bool ParametricCurveCollection::evaluate(PN_stdfloat t, LMatrix4 &result, CoordinateSystem cs = ::CS_default) const;

305 10 evaluate_t 0 4 512 37 ParametricCurveCollection::evaluate_t 0 1 45 490
////////////////////////////////////////////////////////////////////
//     Function: ParametricCurveCollection::evaluate_t
//       Access: Published
//  Description: Determines the value of t that should be passed to
//               the XYZ and HPR curves, after applying the given
//               value of t to all the timewarps.  Return -1.0f if the
//               value of t exceeds one of the timewarps' ranges.
////////////////////////////////////////////////////////////////////
71
PN_stdfloat ParametricCurveCollection::evaluate_t(PN_stdfloat t) const;

306 12 evaluate_xyz 0 4 512 39 ParametricCurveCollection::evaluate_xyz 0 1 46 314
////////////////////////////////////////////////////////////////////
//     Function: ParametricCurveCollection::evaluate_xyz
//       Access: Published
//  Description: Computes only the XYZ part of the curves.  See
//               evaluate().
////////////////////////////////////////////////////////////////////
89
inline bool ParametricCurveCollection::evaluate_xyz(PN_stdfloat t, LVecBase3 &xyz) const;

307 12 evaluate_hpr 0 4 512 39 ParametricCurveCollection::evaluate_hpr 0 1 47 314
////////////////////////////////////////////////////////////////////
//     Function: ParametricCurveCollection::evaluate_hpr
//       Access: Published
//  Description: Computes only the HPR part of the curves.  See
//               evaluate().
////////////////////////////////////////////////////////////////////
89
inline bool ParametricCurveCollection::evaluate_hpr(PN_stdfloat t, LVecBase3 &hpr) const;

308 10 adjust_xyz 0 4 512 37 ParametricCurveCollection::adjust_xyz 0 2 48 49 958
////////////////////////////////////////////////////////////////////
//     Function: ParametricCurveCollection::adjust_xyz
//       Access: Published
//  Description: Adjust the XYZ curve at the indicated time to the new
//               value.  The curve shape will change correspondingly.
//               Returns true if successful, false if unable to make
//               the adjustment for some reason.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ParametricCurveCollection::adjust_xyz
//       Access: Published
//  Description: Adjust the XYZ curve at the indicated time to the new
//               value.  The curve shape will change correspondingly.
//               Returns true if successful, false if unable to make
//               the adjustment for some reason.
////////////////////////////////////////////////////////////////////
191
inline bool ParametricCurveCollection::adjust_xyz(PN_stdfloat t, PN_stdfloat x, PN_stdfloat y, PN_stdfloat z);
bool ParametricCurveCollection::adjust_xyz(PN_stdfloat t, LVecBase3 const &xyz);

309 10 adjust_hpr 0 4 512 37 ParametricCurveCollection::adjust_hpr 0 2 50 51 958
////////////////////////////////////////////////////////////////////
//     Function: ParametricCurveCollection::adjust_hpr
//       Access: Published
//  Description: Adjust the HPR curve at the indicated time to the new
//               value.  The curve shape will change correspondingly.
//               Returns true if successful, false if unable to make
//               the adjustment for some reason.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ParametricCurveCollection::adjust_hpr
//       Access: Published
//  Description: Adjust the HPR curve at the indicated time to the new
//               value.  The curve shape will change correspondingly.
//               Returns true if successful, false if unable to make
//               the adjustment for some reason.
////////////////////////////////////////////////////////////////////
191
inline bool ParametricCurveCollection::adjust_hpr(PN_stdfloat t, PN_stdfloat h, PN_stdfloat p, PN_stdfloat r);
bool ParametricCurveCollection::adjust_hpr(PN_stdfloat t, LVecBase3 const &xyz);

310 9 recompute 0 4 512 36 ParametricCurveCollection::recompute 0 1 52 409
////////////////////////////////////////////////////////////////////
//     Function: ParametricCurveCollection::recompute
//       Access: Published
//  Description: Ensures all the curves are freshly computed and
//               up-to-date.  Returns true if everything is valid,
//               false if at least one curve is incorrect.
////////////////////////////////////////////////////////////////////
48
bool ParametricCurveCollection::recompute(void);

311 6 stitch 0 4 512 33 ParametricCurveCollection::stitch 0 1 53 541
////////////////////////////////////////////////////////////////////
//     Function: ParametricCurveCollection::stitch
//       Access: Published
//  Description: Regenerates this curve as one long curve: the first
//               curve connected end-to-end with the second one.
//               Either a or b may be the same as 'this'.  This will
//               lose any timewarps on the input curves.
//
//               Returns true if successful, false on failure.
////////////////////////////////////////////////////////////////////
111
bool ParametricCurveCollection::stitch(ParametricCurveCollection const *a, ParametricCurveCollection const *b);

312 6 output 0 4 512 33 ParametricCurveCollection::output 0 1 54 350
////////////////////////////////////////////////////////////////////
//     Function: ParametricCurveCollection::output
//       Access: Published
//  Description: Writes a brief one-line description of the
//               ParametricCurveCollection to the indicated output stream.
////////////////////////////////////////////////////////////////////
59
void ParametricCurveCollection::output(ostream &out) const;

313 5 write 0 4 512 32 ParametricCurveCollection::write 0 1 55 354
////////////////////////////////////////////////////////////////////
//     Function: ParametricCurveCollection::write
//       Access: Published
//  Description: Writes a complete multi-line description of the
//               ParametricCurveCollection to the indicated output stream.
////////////////////////////////////////////////////////////////////
80
void ParametricCurveCollection::write(ostream &out, int indent_level = 0) const;

314 9 write_egg 0 4 512 36 ParametricCurveCollection::write_egg 0 2 56 57 840
////////////////////////////////////////////////////////////////////
//     Function: ParametricCurveCollection::write_egg
//       Access: Published
//  Description: Writes an egg description of all the nurbs curves in
//               the collection to the specified output file.  Returns
//               true if the file is successfully written.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ParametricCurveCollection::write_egg
//       Access: Published
//  Description: Writes an egg description of all the nurbs curves in
//               the collection to the specified output stream.  Returns
//               true if the file is successfully written.
////////////////////////////////////////////////////////////////////
201
bool ParametricCurveCollection::write_egg(Filename filename, CoordinateSystem cs = ::CS_default);
bool ParametricCurveCollection::write_egg(ostream &out, Filename const &filename, CoordinateSystem cs);

315 11 CurveFitter 0 4 514 24 CurveFitter::CurveFitter 0 1 58 220
////////////////////////////////////////////////////////////////////
//     Function: CurveFitter::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
31
CurveFitter::CurveFitter(void);

316 12 ~CurveFitter 0 4 514 25 CurveFitter::~CurveFitter 0 0 219
////////////////////////////////////////////////////////////////////
//     Function: CurveFitter::Destructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
32
CurveFitter::~CurveFitter(void);

317 5 reset 0 4 514 18 CurveFitter::reset 0 1 59 332
////////////////////////////////////////////////////////////////////
//     Function: CurveFitter::reset
//       Access: Public
//  Description: Removes all the data points previously added to the
//               CurveFitter, and initializes it for a new curve.
////////////////////////////////////////////////////////////////////
30
void CurveFitter::reset(void);

318 7 add_xyz 0 4 514 20 CurveFitter::add_xyz 0 1 60 242
////////////////////////////////////////////////////////////////////
//     Function: CurveFitter::add_xyz
//       Access: Public
//  Description: Adds a single sample xyz.
////////////////////////////////////////////////////////////////////
63
void CurveFitter::add_xyz(PN_stdfloat t, LVecBase3 const &xyz);

319 7 add_hpr 0 4 514 20 CurveFitter::add_hpr 0 1 61 242
////////////////////////////////////////////////////////////////////
//     Function: CurveFitter::add_hpr
//       Access: Public
//  Description: Adds a single sample hpr.
////////////////////////////////////////////////////////////////////
63
void CurveFitter::add_hpr(PN_stdfloat t, LVecBase3 const &hpr);

320 11 add_xyz_hpr 0 4 514 24 CurveFitter::add_xyz_hpr 0 1 62 267
////////////////////////////////////////////////////////////////////
//     Function: CurveFitter::add_xyz_hpr
//       Access: Public
//  Description: Adds a single sample xyz & hpr simultaneously.
////////////////////////////////////////////////////////////////////
89
void CurveFitter::add_xyz_hpr(PN_stdfloat t, LVecBase3 const &xyz, LVecBase3 const &hpr);

321 15 get_num_samples 0 4 514 28 CurveFitter::get_num_samples 0 1 63 299
////////////////////////////////////////////////////////////////////
//     Function: CurveFitter::get_num_samples
//       Access: Public
//  Description: Returns the number of sample points that have been
//               added.
////////////////////////////////////////////////////////////////////
45
int CurveFitter::get_num_samples(void) const;

322 12 get_sample_t 0 4 514 25 CurveFitter::get_sample_t 0 1 64 275
////////////////////////////////////////////////////////////////////
//     Function: CurveFitter::get_sample_t
//       Access: Public
//  Description: Returns the parametric value of the nth sample added.
////////////////////////////////////////////////////////////////////
51
PN_stdfloat CurveFitter::get_sample_t(int n) const;

323 14 get_sample_xyz 0 4 514 27 CurveFitter::get_sample_xyz 0 1 65 275
////////////////////////////////////////////////////////////////////
//     Function: CurveFitter::get_sample_xyz
//       Access: Public
//  Description: Returns the point in space of the nth sample added.
////////////////////////////////////////////////////////////////////
51
LVecBase3 CurveFitter::get_sample_xyz(int n) const;

324 14 get_sample_hpr 0 4 514 27 CurveFitter::get_sample_hpr 0 1 66 272
////////////////////////////////////////////////////////////////////
//     Function: CurveFitter::get_sample_hpr
//       Access: Public
//  Description: Returns the orientation of the nth sample added.
////////////////////////////////////////////////////////////////////
51
LVecBase3 CurveFitter::get_sample_hpr(int n) const;

325 18 get_sample_tangent 0 4 514 31 CurveFitter::get_sample_tangent 0 1 67 391
////////////////////////////////////////////////////////////////////
//     Function: CurveFitter::get_sample_tangent
//       Access: Public
//  Description: Returns the tangent associated with the nth sample
//               added.  This is only meaningful if compute_tangents()
//               has already been called.
////////////////////////////////////////////////////////////////////
55
LVecBase3 CurveFitter::get_sample_tangent(int n) const;

326 14 remove_samples 0 4 514 27 CurveFitter::remove_samples 0 1 68 335
////////////////////////////////////////////////////////////////////
//     Function: CurveFitter::remove_samples
//       Access: Public
//  Description: Eliminates all samples from index begin, up to but not
//               including index end, from the database.
////////////////////////////////////////////////////////////////////
53
void CurveFitter::remove_samples(int begin, int end);

327 6 sample 0 4 514 19 CurveFitter::sample 0 1 69 473
////////////////////////////////////////////////////////////////////
//     Function: CurveFitter::sample
//       Access: Public
//  Description: Generates a series of data points by sampling the
//               given curve (or xyz/hpr curves) the indicated number
//               of times.  The sampling is made evenly in parametric
//               time, and then the timewarps, if any, are applied.
////////////////////////////////////////////////////////////////////
71
void CurveFitter::sample(ParametricCurveCollection *curves, int count);

328 8 wrap_hpr 0 4 514 21 CurveFitter::wrap_hpr 0 1 70 400
////////////////////////////////////////////////////////////////////
//     Function: CurveFitter::wrap_hpr
//       Access: Public
//  Description: Resets each HPR data point so that the maximum delta
//               between any two consecutive points is 180 degrees,
//               which should prevent incorrect HPR wrapping.
////////////////////////////////////////////////////////////////////
33
void CurveFitter::wrap_hpr(void);

329 11 sort_points 0 4 514 24 CurveFitter::sort_points 0 1 71 339
////////////////////////////////////////////////////////////////////
//     Function: CurveFitter::sort_points
//       Access: Public
//  Description: Sorts all the data points in order by parametric
//               time, in case they were added in an incorrect order.
////////////////////////////////////////////////////////////////////
36
void CurveFitter::sort_points(void);

330 8 desample 0 4 514 21 CurveFitter::desample 0 1 72 428
////////////////////////////////////////////////////////////////////
//     Function: CurveFitter::desample
//       Access: Public
//  Description: Removes sample points in order to reduce the
//               complexity of a sampled curve.  Keeps one out of
//               every factor samples.  Also keeps the first and the
//               last samples.
////////////////////////////////////////////////////////////////////
47
void CurveFitter::desample(PN_stdfloat factor);

331 16 compute_tangents 0 4 514 29 CurveFitter::compute_tangents 0 1 73 508
////////////////////////////////////////////////////////////////////
//     Function: CurveFitter::compute_tangents
//       Access: Public
//  Description: Once a set of points has been built, and prior to
//               calling MakeHermite() or MakeNurbs(),
//               ComputeTangents() must be called to set up the
//               tangents correctly (unless the tangents were defined
//               as the points were added).
////////////////////////////////////////////////////////////////////
54
void CurveFitter::compute_tangents(PN_stdfloat scale);

332 12 make_hermite 0 4 514 25 CurveFitter::make_hermite 0 1 74 300
////////////////////////////////////////////////////////////////////
//     Function: CurveFitter::make_hermite
//       Access: Public
//  Description: Converts the current set of data points into a
//               Hermite curve.
////////////////////////////////////////////////////////////////////
77
PointerTo< ParametricCurveCollection > CurveFitter::make_hermite(void) const;

333 10 make_nurbs 0 4 514 23 CurveFitter::make_nurbs 0 1 75 374
////////////////////////////////////////////////////////////////////
//     Function: CurveFitter::make_nurbs
//       Access: Public
//  Description: Converts the current set of data points into a
//               NURBS curve.  This gives a smoother curve than
//               produced by MakeHermite().
////////////////////////////////////////////////////////////////////
75
PointerTo< ParametricCurveCollection > CurveFitter::make_nurbs(void) const;

334 6 output 0 4 514 19 CurveFitter::output 0 1 76 215
////////////////////////////////////////////////////////////////////
//     Function: CurveFitter::output
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
45
void CurveFitter::output(ostream &out) const;

335 5 write 0 4 514 18 CurveFitter::write 0 1 77 214
////////////////////////////////////////////////////////////////////
//     Function: CurveFitter::write
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
44
void CurveFitter::write(ostream &out) const;

336 14 get_class_type 0 4 514 27 CurveFitter::get_class_type 0 1 78 0
52
static TypeHandle CurveFitter::get_class_type(void);

337 14 PiecewiseCurve 0 4 515 30 PiecewiseCurve::PiecewiseCurve 0 1 79 223
////////////////////////////////////////////////////////////////////
//     Function: PiecewiseCurve::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
37
PiecewiseCurve::PiecewiseCurve(void);

338 14 get_class_type 0 4 515 30 PiecewiseCurve::get_class_type 0 1 80 0
55
static TypeHandle PiecewiseCurve::get_class_type(void);

339 12 HermiteCurve 0 4 516 26 HermiteCurve::HermiteCurve 0 2 81 82 542
////////////////////////////////////////////////////////////////////
//     Function: HermiteCurve::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: HermiteCurve::Copy Constructor
//       Access: Published
//  Description: Constructs a Hermite from the indicated (possibly
//               non-hermite) curve.
////////////////////////////////////////////////////////////////////
88
HermiteCurve::HermiteCurve(void);
HermiteCurve::HermiteCurve(ParametricCurve const &pc);

340 11 get_num_cvs 0 4 516 25 HermiteCurve::get_num_cvs 0 1 83 265
////////////////////////////////////////////////////////////////////
//     Function: HermiteCurve::get_num_cvs
//       Access: Published
//  Description: Returns the number of CV's in the curve.
////////////////////////////////////////////////////////////////////
42
int HermiteCurve::get_num_cvs(void) const;

341 9 insert_cv 0 4 516 23 HermiteCurve::insert_cv 0 1 84 908
////////////////////////////////////////////////////////////////////
//     Function: HermiteCurve::insert_cv
//       Access: Published
//  Description: Inserts a new CV at the given parametric point along
//               the curve.  If this parametric point is already on
//               the curve, the CV is assigned an index between its
//               two neighbors and the indices of all following CV's
//               are incremented by 1; its in and out tangents are
//               chosen to keep the curve consistent.  If the new
//               parametric point is beyond the end of the existing
//               curve, the curve is extended to meet it and the new
//               CV's position, in tangent, and out tangent are set to
//               zero.
//
//               The index number of the new CV is returned.
////////////////////////////////////////////////////////////////////
43
int HermiteCurve::insert_cv(PN_stdfloat t);

342 9 append_cv 0 4 516 23 HermiteCurve::append_cv 0 2 85 86 392
////////////////////////////////////////////////////////////////////
//     Function: HermiteCurve::append_cv
//       Access: Published
//  Description: Adds a new CV to the end of the curve.  The new CV is
//               given initial in/out tangents of 0.  The return value
//               is the index of the new CV.
////////////////////////////////////////////////////////////////////
149
int HermiteCurve::append_cv(int type, PN_stdfloat x, PN_stdfloat y, PN_stdfloat z);
inline int HermiteCurve::append_cv(int type, LVecBase3 const &v);

343 9 remove_cv 0 4 516 23 HermiteCurve::remove_cv 0 1 87 326
////////////////////////////////////////////////////////////////////
//     Function: HermiteCurve::remove_cv
//       Access: Published
//  Description: Removes the given CV from the curve.  Returns true if
//               the CV existed, false otherwise.
////////////////////////////////////////////////////////////////////
36
bool HermiteCurve::remove_cv(int n);

344 14 remove_all_cvs 0 4 516 28 HermiteCurve::remove_all_cvs 0 1 88 260
////////////////////////////////////////////////////////////////////
//     Function: HermiteCurve::remove_all_cvs
//       Access: Published
//  Description: Removes all CV's from the curve.
////////////////////////////////////////////////////////////////////
40
void HermiteCurve::remove_all_cvs(void);

345 11 set_cv_type 0 4 516 25 HermiteCurve::set_cv_type 0 1 89 907
////////////////////////////////////////////////////////////////////
//     Function: HermiteCurve::set_cv_type
//       Access: Published
//  Description: Changes the given CV's continuity type.  Legal values
//               are HC_CUT, HC_FREE, HC_G1, or HC_SMOOTH.
//
//               Other than HC_CUT, these have no effect on the actual
//               curve; it remains up to user software to impose the
//               constraints these imply.
//
//               HC_CUT implies a disconnection of the curve; HC_FREE
//               imposes no constraints on the tangents; HC_G1
//               forces the tangents to be collinear, and HC_SMOOTH
//               forces the tangents to be identical.  Setting type
//               type to HC_G1 or HC_SMOOTH may adjust the out
//               tangent to match the in tangent.
////////////////////////////////////////////////////////////////////
48
bool HermiteCurve::set_cv_type(int n, int type);

346 12 set_cv_point 0 4 516 26 HermiteCurve::set_cv_point 0 2 90 91 258
////////////////////////////////////////////////////////////////////
//     Function: HermiteCurve::set_cv_point
//       Access: Published
//  Description: Changes the given CV's position.
////////////////////////////////////////////////////////////////////
151
bool HermiteCurve::set_cv_point(int n, PN_stdfloat x, PN_stdfloat y, PN_stdfloat z);
inline bool HermiteCurve::set_cv_point(int n, LVecBase3 const &v);

347 9 set_cv_in 0 4 516 23 HermiteCurve::set_cv_in 0 2 92 93 364
////////////////////////////////////////////////////////////////////
//     Function: HermiteCurve::set_cv_in
//       Access: Published
//  Description: Changes the given CV's in tangent.  Depending on the
//               continuity type, this may also adjust the out
//               tangent.
////////////////////////////////////////////////////////////////////
145
bool HermiteCurve::set_cv_in(int n, PN_stdfloat x, PN_stdfloat y, PN_stdfloat z);
inline bool HermiteCurve::set_cv_in(int n, LVecBase3 const &v);

348 10 set_cv_out 0 4 516 24 HermiteCurve::set_cv_out 0 2 94 95 365
////////////////////////////////////////////////////////////////////
//     Function: HermiteCurve::set_cv_out
//       Access: Published
//  Description: Changes the given CV's out tangent.  Depending on the
//               continuity type, this may also adjust the in
//               tangent.
////////////////////////////////////////////////////////////////////
147
bool HermiteCurve::set_cv_out(int n, PN_stdfloat x, PN_stdfloat y, PN_stdfloat z);
inline bool HermiteCurve::set_cv_out(int n, LVecBase3 const &v);

349 13 set_cv_tstart 0 4 516 27 HermiteCurve::set_cv_tstart 0 1 96 332
////////////////////////////////////////////////////////////////////
//     Function: HermiteCurve::set_cv_tstart
//       Access: Published
//  Description: Changes the given CV's parametric starting time.
//               This may affect the shape of the curve.
////////////////////////////////////////////////////////////////////
60
bool HermiteCurve::set_cv_tstart(int n, PN_stdfloat tstart);

350 11 set_cv_name 0 4 516 25 HermiteCurve::set_cv_name 0 1 97 274
////////////////////////////////////////////////////////////////////
//     Function: HermiteCurve::set_cv_name
//       Access: Published
//  Description: Changes the name associated with a particular CV.
////////////////////////////////////////////////////////////////////
56
bool HermiteCurve::set_cv_name(int n, char const *name);

351 11 get_cv_type 0 4 516 25 HermiteCurve::get_cv_type 0 1 98 365
////////////////////////////////////////////////////////////////////
//     Function: HermiteCurve::get_cv_type
//       Access: Published
//  Description: Returns the given CV's continuity type, HC_CUT,
//               HC_FREE, HC_G1, or HC_SMOOTH, or 0 if there is
//               no such CV.
////////////////////////////////////////////////////////////////////
43
int HermiteCurve::get_cv_type(int n) const;

352 12 get_cv_point 0 4 516 26 HermiteCurve::get_cv_point 0 2 99 100 263
////////////////////////////////////////////////////////////////////
//     Function: HermiteCurve::get_cv_point
//       Access: Published
//  Description: Returns the position of the given CV.
////////////////////////////////////////////////////////////////////
117
LVecBase3 const &HermiteCurve::get_cv_point(int n) const;
void HermiteCurve::get_cv_point(int n, LVecBase3 &v) const;

353 9 get_cv_in 0 4 516 23 HermiteCurve::get_cv_in 0 2 101 102 262
////////////////////////////////////////////////////////////////////
//     Function: HermiteCurve::get_cv_in
//       Access: Published
//  Description: Returns the in tangent of the given CV.
////////////////////////////////////////////////////////////////////
111
LVecBase3 const &HermiteCurve::get_cv_in(int n) const;
void HermiteCurve::get_cv_in(int n, LVecBase3 &v) const;

354 10 get_cv_out 0 4 516 24 HermiteCurve::get_cv_out 0 2 103 104 264
////////////////////////////////////////////////////////////////////
//     Function: HermiteCurve::get_cv_out
//       Access: Published
//  Description: Returns the out tangent of the given CV.
////////////////////////////////////////////////////////////////////
113
LVecBase3 const &HermiteCurve::get_cv_out(int n) const;
void HermiteCurve::get_cv_out(int n, LVecBase3 &v) const;

355 13 get_cv_tstart 0 4 516 27 HermiteCurve::get_cv_tstart 0 1 105 307
////////////////////////////////////////////////////////////////////
//     Function: HermiteCurve::get_cv_tstart
//       Access: Published
//  Description: Returns the starting point in parametric space of the
//               given CV.
////////////////////////////////////////////////////////////////////
53
PN_stdfloat HermiteCurve::get_cv_tstart(int n) const;

356 11 get_cv_name 0 4 516 25 HermiteCurve::get_cv_name 0 1 106 267
////////////////////////////////////////////////////////////////////
//     Function: HermiteCurve::get_cv_name
//       Access: Published
//  Description: Returns the name of the given CV, or NULL.
////////////////////////////////////////////////////////////////////
46
string HermiteCurve::get_cv_name(int n) const;

357 8 write_cv 0 4 516 22 HermiteCurve::write_cv 0 1 107 221
////////////////////////////////////////////////////////////////////
//     Function: HermiteCurve::write_cv
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
55
void HermiteCurve::write_cv(ostream &out, int n) const;

358 14 get_class_type 0 4 516 28 HermiteCurve::get_class_type 0 1 108 0
53
static TypeHandle HermiteCurve::get_class_type(void);

359 20 ~NurbsCurveInterface 0 6 517 41 NurbsCurveInterface::~NurbsCurveInterface 0 0 240
////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveInterface::Destructor
//       Access: Published, Virtual
//  Description: 
////////////////////////////////////////////////////////////////////
56
virtual NurbsCurveInterface::~NurbsCurveInterface(void);

360 9 set_order 0 6 517 30 NurbsCurveInterface::set_order 0 1 109 0
59
virtual void NurbsCurveInterface::set_order(int order) = 0;

361 9 get_order 0 6 517 30 NurbsCurveInterface::get_order 0 1 110 0
59
virtual int NurbsCurveInterface::get_order(void) const = 0;

362 11 get_num_cvs 0 6 517 32 NurbsCurveInterface::get_num_cvs 0 1 111 0
61
virtual int NurbsCurveInterface::get_num_cvs(void) const = 0;

363 13 get_num_knots 0 6 517 34 NurbsCurveInterface::get_num_knots 0 1 112 0
63
virtual int NurbsCurveInterface::get_num_knots(void) const = 0;

364 9 insert_cv 0 6 517 30 NurbsCurveInterface::insert_cv 0 1 113 0
63
virtual bool NurbsCurveInterface::insert_cv(PN_stdfloat t) = 0;

365 9 append_cv 0 4 517 30 NurbsCurveInterface::append_cv 0 3 114 115 116 691
////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveInterface::append_cv
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveInterface::append_cv
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveInterface::append_cv
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
213
inline int NurbsCurveInterface::append_cv(PN_stdfloat x, PN_stdfloat y, PN_stdfloat z);
inline int NurbsCurveInterface::append_cv(LVecBase3 const &v);
inline int NurbsCurveInterface::append_cv(LVecBase4 const &v);

366 9 remove_cv 0 6 517 30 NurbsCurveInterface::remove_cv 0 1 117 0
55
virtual bool NurbsCurveInterface::remove_cv(int n) = 0;

367 14 remove_all_cvs 0 6 517 35 NurbsCurveInterface::remove_all_cvs 0 1 118 0
59
virtual void NurbsCurveInterface::remove_all_cvs(void) = 0;

368 12 set_cv_point 0 4 517 33 NurbsCurveInterface::set_cv_point 0 2 119 120 662
////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveInterface::set_cv_point
//       Access: Public, Scheme
//  Description: Repositions the indicated CV.  Returns true if
//               successful, false otherwise.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveInterface::set_cv_point
//       Access: Public, Scheme
//  Description: Repositions the indicated CV.  Returns true if
//               successful, false otherwise.
////////////////////////////////////////////////////////////////////
172
inline bool NurbsCurveInterface::set_cv_point(int n, PN_stdfloat x, PN_stdfloat y, PN_stdfloat z);
inline bool NurbsCurveInterface::set_cv_point(int n, LVecBase3 const &v);

369 12 get_cv_point 0 4 517 33 NurbsCurveInterface::get_cv_point 0 1 121 279
////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveInterface::get_cv_point
//       Access: Public, Scheme
//  Description: Returns the position of the indicated CV.
////////////////////////////////////////////////////////////////////
64
inline LVecBase3 NurbsCurveInterface::get_cv_point(int n) const;

370 13 set_cv_weight 0 4 517 34 NurbsCurveInterface::set_cv_weight 0 1 122 331
////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveInterface::set_cv_weight
//       Access: Published
//  Description: Sets the weight of the indicated CV without affecting
//               its position in 3-d space.
////////////////////////////////////////////////////////////////////
62
bool NurbsCurveInterface::set_cv_weight(int n, PN_stdfloat w);

371 13 get_cv_weight 0 4 517 34 NurbsCurveInterface::get_cv_weight 0 1 123 273
////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveInterface::get_cv_weight
//       Access: Published
//  Description: Returns the weight of the indicated CV.
////////////////////////////////////////////////////////////////////
67
inline PN_stdfloat NurbsCurveInterface::get_cv_weight(int n) const;

372 6 set_cv 0 6 517 27 NurbsCurveInterface::set_cv 0 1 124 0
72
virtual bool NurbsCurveInterface::set_cv(int n, LVecBase4 const &v) = 0;

373 6 get_cv 0 6 517 27 NurbsCurveInterface::get_cv 0 1 125 0
63
virtual LVecBase4 NurbsCurveInterface::get_cv(int n) const = 0;

374 8 set_knot 0 6 517 29 NurbsCurveInterface::set_knot 0 1 126 0
69
virtual bool NurbsCurveInterface::set_knot(int n, PN_stdfloat t) = 0;

375 8 get_knot 0 6 517 29 NurbsCurveInterface::get_knot 0 1 127 0
67
virtual PN_stdfloat NurbsCurveInterface::get_knot(int n) const = 0;

376 8 write_cv 0 4 517 29 NurbsCurveInterface::write_cv 0 1 128 228
////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveInterface::write_cv
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
62
void NurbsCurveInterface::write_cv(ostream &out, int n) const;

377 14 get_class_type 0 4 517 35 NurbsCurveInterface::get_class_type 0 1 129 0
60
static TypeHandle NurbsCurveInterface::get_class_type(void);

378 24 upcast_to_PiecewiseCurve 0 12 518 36 NurbsCurve::upcast_to_PiecewiseCurve 0 1 133 40
upcast from NurbsCurve to PiecewiseCurve
59
PiecewiseCurve *NurbsCurve::upcast_to_PiecewiseCurve(void);

379 22 downcast_to_NurbsCurve 0 12 515 38 PiecewiseCurve::downcast_to_NurbsCurve 0 1 134 42
downcast from PiecewiseCurve to NurbsCurve
57
NurbsCurve *PiecewiseCurve::downcast_to_NurbsCurve(void);

380 29 upcast_to_NurbsCurveInterface 0 12 518 41 NurbsCurve::upcast_to_NurbsCurveInterface 0 1 135 45
upcast from NurbsCurve to NurbsCurveInterface
69
NurbsCurveInterface *NurbsCurve::upcast_to_NurbsCurveInterface(void);

381 22 downcast_to_NurbsCurve 0 12 517 43 NurbsCurveInterface::downcast_to_NurbsCurve 0 1 136 47
downcast from NurbsCurveInterface to NurbsCurve
62
NurbsCurve *NurbsCurveInterface::downcast_to_NurbsCurve(void);

382 10 NurbsCurve 0 4 518 22 NurbsCurve::NurbsCurve 0 2 130 131 860
////////////////////////////////////////////////////////////////////
//     Function: NurbsCurve::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NurbsCurve::Copy Constructor
//       Access: Published
//  Description: Constructs a NURBS curve equivalent to the indicated
//               (possibly non-NURBS) curve.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NurbsCurve::Constructor
//       Access: Published
//  Description: Constructs a NURBS curve according to the indicated
//               NURBS parameters.
////////////////////////////////////////////////////////////////////
80
NurbsCurve::NurbsCurve(void);
NurbsCurve::NurbsCurve(ParametricCurve const &pc);

383 11 ~NurbsCurve 0 6 518 23 NurbsCurve::~NurbsCurve 0 0 230
////////////////////////////////////////////////////////////////////
//     Function: NurbsCurve::Destructor
//       Access: Published, Virtual
//  Description:
////////////////////////////////////////////////////////////////////
38
virtual NurbsCurve::~NurbsCurve(void);

384 14 get_class_type 0 4 518 26 NurbsCurve::get_class_type 0 1 132 0
51
static TypeHandle NurbsCurve::get_class_type(void);

385 11 get_start_t 0 4 519 29 NurbsCurveResult::get_start_t 0 1 137 315
////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveResult::get_start_t
//       Access: Published
//  Description: Returns the first legal value of t on the curve.
//               Usually this is 0.0.
////////////////////////////////////////////////////////////////////
61
inline PN_stdfloat NurbsCurveResult::get_start_t(void) const;

386 9 get_end_t 0 4 519 27 NurbsCurveResult::get_end_t 0 1 138 274
////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveResult::get_end_t
//       Access: Published
//  Description: Returns the last legal value of t on the curve.
////////////////////////////////////////////////////////////////////
59
inline PN_stdfloat NurbsCurveResult::get_end_t(void) const;

387 10 eval_point 0 4 519 28 NurbsCurveResult::eval_point 0 1 139 406
////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveResult::eval_point
//       Access: Published
//  Description: Computes the point on the curve corresponding to the
//               indicated value in parametric time.  Returns true if
//               the t value is valid, false otherwise.
////////////////////////////////////////////////////////////////////
74
inline bool NurbsCurveResult::eval_point(PN_stdfloat t, LVecBase3 &point);

388 12 eval_tangent 0 4 519 30 NurbsCurveResult::eval_tangent 0 1 140 456
////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveResult::eval_tangent
//       Access: Published
//  Description: Computes the tangent to the curve at the indicated
//               point in parametric time.  This tangent vector will
//               not necessarily be normalized, and could be zero.
//               See also eval_point().
////////////////////////////////////////////////////////////////////
78
inline bool NurbsCurveResult::eval_tangent(PN_stdfloat t, LVecBase3 &tangent);

389 19 eval_extended_point 0 4 519 37 NurbsCurveResult::eval_extended_point 0 1 141 402
////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveResult::eval_extended_point
//       Access: Published
//  Description: Evaluates the curve in n-dimensional space according
//               to the extended vertices associated with the curve in
//               the indicated dimension.
////////////////////////////////////////////////////////////////////
79
inline PN_stdfloat NurbsCurveResult::eval_extended_point(PN_stdfloat t, int d);

390 20 eval_extended_points 0 4 519 38 NurbsCurveResult::eval_extended_points 0 1 142 534
////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveResult::eval_extended_points
//       Access: Published
//  Description: Simultaneously performs eval_extended_point on a
//               contiguous sequence of dimensions.  The dimensions
//               evaluated are d through (d + num_values - 1); the
//               results are filled into the num_values elements in
//               the indicated result array.
////////////////////////////////////////////////////////////////////
111
inline bool NurbsCurveResult::eval_extended_points(PN_stdfloat t, int d, PN_stdfloat result[], int num_values);

391 16 get_num_segments 0 4 519 34 NurbsCurveResult::get_num_segments 0 1 143 438
////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveResult::get_num_segments
//       Access: Published
//  Description: Returns the number of piecewise continuous segments
//               within the curve.  This number is usually not
//               important unless you plan to call
//               eval_segment_point().
////////////////////////////////////////////////////////////////////
58
inline int NurbsCurveResult::get_num_segments(void) const;

392 18 eval_segment_point 0 4 519 36 NurbsCurveResult::eval_segment_point 0 1 144 1042
////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveResult::eval_segment_point
//       Access: Published
//  Description: Evaluates the point on the curve corresponding to the
//               indicated value in parametric time within the
//               indicated curve segment.  t should be in the range
//               [0, 1].
//
//               The curve is internally represented as a number of
//               connected (or possibly unconnected) piecewise
//               continuous segments.  The exact number of segments
//               for a particular curve depends on the knot vector,
//               and is returned by get_num_segments().  Normally,
//               eval_point() is used to evaluate a point along the
//               continuous curve, but when you care more about local
//               continuity, you can use eval_segment_point() to
//               evaluate the points along each segment.
////////////////////////////////////////////////////////////////////
94
void NurbsCurveResult::eval_segment_point(int segment, PN_stdfloat t, LVecBase3 &point) const;

393 20 eval_segment_tangent 0 4 519 38 NurbsCurveResult::eval_segment_tangent 0 1 145 479
////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveResult::eval_segment_tangent
//       Access: Published
//  Description: As eval_segment_point, but computes the tangent to
//               the curve at the indicated point.  The tangent vector
//               will not necessarily be normalized, and could be
//               zero, particularly at the endpoints.
////////////////////////////////////////////////////////////////////
98
void NurbsCurveResult::eval_segment_tangent(int segment, PN_stdfloat t, LVecBase3 &tangent) const;

394 27 eval_segment_extended_point 0 4 519 45 NurbsCurveResult::eval_segment_extended_point 0 1 146 410
////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveResult::eval_segment_extended_point
//       Access: Published
//  Description: Evaluates the curve in n-dimensional space according
//               to the extended vertices associated with the curve in
//               the indicated dimension.
////////////////////////////////////////////////////////////////////
99
PN_stdfloat NurbsCurveResult::eval_segment_extended_point(int segment, PN_stdfloat t, int d) const;

395 28 eval_segment_extended_points 0 4 519 46 NurbsCurveResult::eval_segment_extended_points 0 1 147 542
////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveResult::eval_segment_extended_points
//       Access: Published
//  Description: Simultaneously performs eval_extended_point on a
//               contiguous sequence of dimensions.  The dimensions
//               evaluated are d through (d + num_values - 1); the
//               results are filled into the num_values elements in
//               the indicated result array.
////////////////////////////////////////////////////////////////////
131
void NurbsCurveResult::eval_segment_extended_points(int segment, PN_stdfloat t, int d, PN_stdfloat result[], int num_values) const;

396 13 get_segment_t 0 4 519 31 NurbsCurveResult::get_segment_t 0 1 148 482
////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveResult::get_segment_t
//       Access: Published
//  Description: Accepts a t value in the range [0, 1], and assumed to
//               be relative to the indicated segment (as in
//               eval_segment_point()), and returns the corresponding
//               t value in the entire curve (as in eval_point()).
////////////////////////////////////////////////////////////////////
85
inline PN_stdfloat NurbsCurveResult::get_segment_t(int segment, PN_stdfloat t) const;

397 15 adaptive_sample 0 4 519 33 NurbsCurveResult::adaptive_sample 0 1 149 642
////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveResult::adaptive_sample
//       Access: Published
//  Description: Determines the set of subdivisions necessary to
//               approximate the curve with a set of linear segments,
//               no point of which is farther than tolerance units
//               from the actual curve.
//
//               After this call, you may walk through the resulting
//               set of samples with get_num_samples(),
//               get_sample_t(), and get_sample_point().
////////////////////////////////////////////////////////////////////
62
void NurbsCurveResult::adaptive_sample(PN_stdfloat tolerance);

398 15 get_num_samples 0 4 519 33 NurbsCurveResult::get_num_samples 0 1 150 338
////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveResult::get_num_samples
//       Access: Published
//  Description: Returns the number of sample points generated by the
//               previous call to adaptive_sample().
////////////////////////////////////////////////////////////////////
57
inline int NurbsCurveResult::get_num_samples(void) const;

399 12 get_sample_t 0 4 519 30 NurbsCurveResult::get_sample_t 0 1 151 343
////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveResult::get_sample_t
//       Access: Published
//  Description: Returns the t value of the nth sample point generated
//               by the previous call to adaptive_sample().
////////////////////////////////////////////////////////////////////
63
inline PN_stdfloat NurbsCurveResult::get_sample_t(int n) const;

400 16 get_sample_point 0 4 519 34 NurbsCurveResult::get_sample_point 0 1 152 551
////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveResult::get_sample_point
//       Access: Published
//  Description: Returns the point on the curve of the nth sample
//               point generated by the previous call to
//               adaptive_sample().
//
//               For tangents, or extended points, you should use
//               get_sample_t() and pass it into eval_tangent() or
//               eval_extended_point().
////////////////////////////////////////////////////////////////////
70
inline LPoint3 const &NurbsCurveResult::get_sample_point(int n) const;

401 19 NurbsCurveEvaluator 0 4 520 40 NurbsCurveEvaluator::NurbsCurveEvaluator 0 1 153 231
////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveEvaluator::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
47
NurbsCurveEvaluator::NurbsCurveEvaluator(void);

402 9 set_order 0 4 520 30 NurbsCurveEvaluator::set_order 0 1 154 502
////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveEvaluator::set_order
//       Access: Published
//  Description: Sets the order of the curve.  This resets the knot
//               vector to the default knot vector for the number of
//               vertices.
//
//               The order must be 1, 2, 3, or 4, and the value is one
//               more than the degree of the curve.
////////////////////////////////////////////////////////////////////
54
inline void NurbsCurveEvaluator::set_order(int order);

403 9 get_order 0 4 520 30 NurbsCurveEvaluator::get_order 0 1 155 319
////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveEvaluator::get_order
//       Access: Published
//  Description: Returns the order of the curve as set by a previous
//               call to set_order().
////////////////////////////////////////////////////////////////////
54
inline int NurbsCurveEvaluator::get_order(void) const;

404 5 reset 0 4 520 26 NurbsCurveEvaluator::reset 0 1 156 508
////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveEvaluator::reset
//       Access: Published
//  Description: Resets all the vertices and knots to their default
//               values, and sets the curve up with the indicated
//               number of vertices.  You must then call set_vertex()
//               repeatedly to fill in all of the vertex values
//               appropriately.
////////////////////////////////////////////////////////////////////
50
void NurbsCurveEvaluator::reset(int num_vertices);

405 16 get_num_vertices 0 4 520 37 NurbsCurveEvaluator::get_num_vertices 0 1 157 378
////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveEvaluator::get_num_vertices
//       Access: Published
//  Description: Returns the number of control vertices in the curve.
//               This is the number passed to the last call to
//               reset().
////////////////////////////////////////////////////////////////////
61
inline int NurbsCurveEvaluator::get_num_vertices(void) const;

406 10 set_vertex 0 4 520 31 NurbsCurveEvaluator::set_vertex 0 2 158 159 985
////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveEvaluator::set_vertex
//       Access: Published
//  Description: Sets the nth control vertex of the curve, as a vertex
//               in 4-d homogeneous space.  In this form, the first
//               three components of the vertex should already have
//               been scaled by the fourth component, which is the
//               homogeneous weight.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveEvaluator::set_vertex
//       Access: Published
//  Description: Sets the nth control vertex of the curve.  This
//               flavor sets the vertex as a 3-d coordinate and a
//               weight; the 3-d coordinate values are implicitly
//               scaled up by the weight factor.
////////////////////////////////////////////////////////////////////
179
inline void NurbsCurveEvaluator::set_vertex(int i, LVecBase4 const &vertex);
inline void NurbsCurveEvaluator::set_vertex(int i, LVecBase3 const &vertex, PN_stdfloat weight = 1.0);

407 10 get_vertex 0 4 520 31 NurbsCurveEvaluator::get_vertex 0 2 160 161 670
////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveEvaluator::get_vertex
//       Access: Published
//  Description: Returns the nth control vertex of the curve, relative
//               to its indicated coordinate space.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveEvaluator::get_vertex
//       Access: Published
//  Description: Returns the nth control vertex of the curve, relative
//               to the given coordinate space.
////////////////////////////////////////////////////////////////////
156
inline LVecBase4 const &NurbsCurveEvaluator::get_vertex(int i) const;
inline LVecBase4 NurbsCurveEvaluator::get_vertex(int i, NodePath const &rel_to) const;

408 16 set_vertex_space 0 4 520 37 NurbsCurveEvaluator::set_vertex_space 0 2 162 163 1436
////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveEvaluator::set_vertex_space
//       Access: Published
//  Description: Sets the coordinate space of the nth control vertex.
//               If this is not specified, or is set to an empty
//               NodePath, the nth control vertex is deemed to be in
//               the coordinate space passed to evaluate().
//
//               This specifies the space as a fixed NodePath, which
//               is always the same NodePath.  Also see setting the
//               space as a path string, which can specify a different
//               NodePath for different instances of the curve.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveEvaluator::set_vertex_space
//       Access: Published
//  Description: Sets the coordinate space of the nth control vertex.
//               If this is not specified, or is set to an empty
//               string, the nth control vertex is deemed to be in
//               the coordinate space passed to evaluate().
//
//               This specifies the space as a string, which describes
//               the path to find the node relative to the rel_to
//               NodePath when the curve is evaluated.
////////////////////////////////////////////////////////////////////
159
inline void NurbsCurveEvaluator::set_vertex_space(int i, NodePath const &space);
inline void NurbsCurveEvaluator::set_vertex_space(int i, string const &space);

409 16 get_vertex_space 0 4 520 37 NurbsCurveEvaluator::get_vertex_space 0 1 164 347
////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveEvaluator::get_vertex_space
//       Access: Published
//  Description: Returns the coordinate space of the nth control
//               vertex of the curve, expressed as a NodePath.
////////////////////////////////////////////////////////////////////
84
NodePath NurbsCurveEvaluator::get_vertex_space(int i, NodePath const &rel_to) const;

410 19 set_extended_vertex 0 4 520 40 NurbsCurveEvaluator::set_extended_vertex 0 1 165 1219
////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveEvaluator::set_extended_vertex
//       Access: Public
//  Description: Sets an n-dimensional vertex value.  This allows
//               definition of a NURBS surface or curve in a sparse
//               n-dimensional space, typically used for associating
//               additional properties (like color or joint
//               membership) with each vertex of a surface.
//
//               The value d is an arbitrary integer value and
//               specifies the dimension of question for this
//               particular vertex.  Any number of dimensions may be
//               specified, and they need not be consecutive.  If a
//               value for a given dimension is not specified, is it
//               implicitly 0.0.
//
//               The value is implicitly scaled by the homogenous
//               weight value--that is, the fourth component of the
//               value passed to set_vertex().  This means the
//               ordinary vertex must be set first, before the
//               extended vertices can be set.
////////////////////////////////////////////////////////////////////
86
inline void NurbsCurveEvaluator::set_extended_vertex(int i, int d, PN_stdfloat value);

411 19 get_extended_vertex 0 4 520 40 NurbsCurveEvaluator::get_extended_vertex 0 1 166 443
////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveEvaluator::get_extended_vertex
//       Access: Public
//  Description: Returns an n-dimensional vertex value.  See
//               set_extended_vertex().  This returns the value set
//               for the indicated dimension, or 0.0 if nothing has
//               been set.
////////////////////////////////////////////////////////////////////
80
inline PN_stdfloat NurbsCurveEvaluator::get_extended_vertex(int i, int d) const;

412 21 set_extended_vertices 0 4 520 42 NurbsCurveEvaluator::set_extended_vertices 0 1 167 546
////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveEvaluator::set_extended_vertices
//       Access: Public
//  Description: Simultaneously sets several extended values in the
//               slots d through (d + num_values - 1) from the
//               num_values elements of the indicated array.  This is
//               equivalent to calling set_extended_vertex()
//               num_values times.  See set_extended_vertex().
////////////////////////////////////////////////////////////////////
106
void NurbsCurveEvaluator::set_extended_vertices(int i, int d, PN_stdfloat const values[], int num_values);

413 13 get_num_knots 0 4 520 34 NurbsCurveEvaluator::get_num_knots 0 1 168 354
////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveEvaluator::get_num_knots
//       Access: Published
//  Description: Returns the number of knot values in the curve.  This
//               is based on the number of vertices and the order.
////////////////////////////////////////////////////////////////////
58
inline int NurbsCurveEvaluator::get_num_knots(void) const;

414 8 set_knot 0 4 520 29 NurbsCurveEvaluator::set_knot 0 1 169 447
////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveEvaluator::set_knot
//       Access: Published
//  Description: Sets the value of the nth knot.  Each knot value
//               should be greater than or equal to the preceding
//               value.  If no knot values are set, a default knot
//               vector is supplied.
////////////////////////////////////////////////////////////////////
60
void NurbsCurveEvaluator::set_knot(int i, PN_stdfloat knot);

415 8 get_knot 0 4 520 29 NurbsCurveEvaluator::get_knot 0 1 170 263
////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveEvaluator::get_knot
//       Access: Published
//  Description: Returns the value of the nth knot.
////////////////////////////////////////////////////////////////////
55
PN_stdfloat NurbsCurveEvaluator::get_knot(int i) const;

416 15 normalize_knots 0 4 520 36 NurbsCurveEvaluator::normalize_knots 0 1 171 334
////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveEvaluator::normalize_knots
//       Access: Published
//  Description: Normalizes the knot sequence so that the parametric
//               range of the curve is 0 .. 1.
////////////////////////////////////////////////////////////////////
48
void NurbsCurveEvaluator::normalize_knots(void);

417 16 get_num_segments 0 4 520 37 NurbsCurveEvaluator::get_num_segments 0 1 172 354
////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveEvaluator::get_num_segments
//       Access: Published
//  Description: Returns the number of piecewise continuous segments
//               in the curve.  This is based on the knot vector.
////////////////////////////////////////////////////////////////////
61
inline int NurbsCurveEvaluator::get_num_segments(void) const;

418 8 evaluate 0 4 520 29 NurbsCurveEvaluator::evaluate 0 2 173 174 987
////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveEvaluator::evaluate
//       Access: Published
//  Description: Returns a NurbsCurveResult object that represents the
//               result of applying the knots to all of the current
//               values of the vertices, transformed into the
//               indicated coordinate space.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveEvaluator::evaluate
//       Access: Published
//  Description: Returns a NurbsCurveResult object that represents the
//               result of applying the knots to all of the current
//               values of the vertices, transformed into the
//               indicated coordinate space, and then further
//               transformed by the indicated matrix.
////////////////////////////////////////////////////////////////////
215
PointerTo< NurbsCurveResult > NurbsCurveEvaluator::evaluate(NodePath const &rel_to = NodePath()) const;
PointerTo< NurbsCurveResult > NurbsCurveEvaluator::evaluate(NodePath const &rel_to, LMatrix4 const &mat) const;

419 6 output 0 4 520 27 NurbsCurveEvaluator::output 0 1 175 227
////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveEvaluator::output
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
53
void NurbsCurveEvaluator::output(ostream &out) const;

420 11 get_start_u 0 4 521 31 NurbsSurfaceResult::get_start_u 0 1 176 316
////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceResult::get_start_u
//       Access: Public
//  Description: Returns the first legal value of u on the surface.
//               Usually this is 0.0.
////////////////////////////////////////////////////////////////////
63
inline PN_stdfloat NurbsSurfaceResult::get_start_u(void) const;

421 9 get_end_u 0 4 521 29 NurbsSurfaceResult::get_end_u 0 1 177 275
////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceResult::get_end_u
//       Access: Public
//  Description: Returns the last legal value of u on the surface.
////////////////////////////////////////////////////////////////////
61
inline PN_stdfloat NurbsSurfaceResult::get_end_u(void) const;

422 11 get_start_v 0 4 521 31 NurbsSurfaceResult::get_start_v 0 1 178 316
////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceResult::get_start_v
//       Access: Public
//  Description: Returns the first legal value of v on the surface.
//               Usually this is 0.0.
////////////////////////////////////////////////////////////////////
63
inline PN_stdfloat NurbsSurfaceResult::get_start_v(void) const;

423 9 get_end_v 0 4 521 29 NurbsSurfaceResult::get_end_v 0 1 179 275
////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceResult::get_end_v
//       Access: Public
//  Description: Returns the last legal value of v on the surface.
////////////////////////////////////////////////////////////////////
61
inline PN_stdfloat NurbsSurfaceResult::get_end_v(void) const;

424 10 eval_point 0 4 521 30 NurbsSurfaceResult::eval_point 0 1 180 415
////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceResult::eval_point
//       Access: Published
//  Description: Computes the point on the surface corresponding to the
//               indicated value in parametric time.  Returns true if
//               the u, v values are valid, false otherwise.
////////////////////////////////////////////////////////////////////
91
inline bool NurbsSurfaceResult::eval_point(PN_stdfloat u, PN_stdfloat v, LVecBase3 &point);

425 11 eval_normal 0 4 521 31 NurbsSurfaceResult::eval_normal 0 1 181 457
////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceResult::eval_normal
//       Access: Published
//  Description: Computes the normal to the surface at the indicated
//               point in parametric time.  This normal vector will
//               not necessarily be normalized, and could be zero.
//               See also eval_point().
////////////////////////////////////////////////////////////////////
93
inline bool NurbsSurfaceResult::eval_normal(PN_stdfloat u, PN_stdfloat v, LVecBase3 &normal);

426 19 eval_extended_point 0 4 521 39 NurbsSurfaceResult::eval_extended_point 0 1 182 408
////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceResult::eval_extended_point
//       Access: Published
//  Description: Evaluates the surface in n-dimensional space according
//               to the extended vertices associated with the surface in
//               the indicated dimension.
////////////////////////////////////////////////////////////////////
96
inline PN_stdfloat NurbsSurfaceResult::eval_extended_point(PN_stdfloat u, PN_stdfloat v, int d);

427 20 eval_extended_points 0 4 521 40 NurbsSurfaceResult::eval_extended_points 0 1 183 536
////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceResult::eval_extended_points
//       Access: Published
//  Description: Simultaneously performs eval_extended_point on a
//               contiguous sequence of dimensions.  The dimensions
//               evaluated are d through (d + num_values - 1); the
//               results are filled into the num_values elements in
//               the indicated result array.
////////////////////////////////////////////////////////////////////
128
inline bool NurbsSurfaceResult::eval_extended_points(PN_stdfloat u, PN_stdfloat v, int d, PN_stdfloat result[], int num_values);

428 18 get_num_u_segments 0 4 521 38 NurbsSurfaceResult::get_num_u_segments 0 1 184 460
////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceResult::get_num_u_segments
//       Access: Public
//  Description: Returns the number of piecewise continuous segments
//               within the surface in the U direction.  This number
//               is usually not important unless you plan to call
//               eval_segment_point().
////////////////////////////////////////////////////////////////////
62
inline int NurbsSurfaceResult::get_num_u_segments(void) const;

429 18 get_num_v_segments 0 4 521 38 NurbsSurfaceResult::get_num_v_segments 0 1 185 460
////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceResult::get_num_v_segments
//       Access: Public
//  Description: Returns the number of piecewise continuous segments
//               within the surface in the V direction.  This number
//               is usually not important unless you plan to call
//               eval_segment_point().
////////////////////////////////////////////////////////////////////
62
inline int NurbsSurfaceResult::get_num_v_segments(void) const;

430 18 eval_segment_point 0 4 521 38 NurbsSurfaceResult::eval_segment_point 0 1 186 1060
////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceResult::eval_segment_point
//       Access: Published
//  Description: Evaluates the point on the surface corresponding to the
//               indicated value in parametric time within the
//               indicated surface segment.  u and v should be in the
//               range [0, 1].
//
//               The surface is internally represented as a number of
//               connected (or possibly unconnected) piecewise
//               continuous segments.  The exact number of segments
//               for a particular surface depends on the knot vector,
//               and is returned by get_num_segments().  Normally,
//               eval_point() is used to evaluate a point along the
//               continuous surface, but when you care more about local
//               continuity, you can use eval_segment_point() to
//               evaluate the points along each segment.
////////////////////////////////////////////////////////////////////
114
void NurbsSurfaceResult::eval_segment_point(int ui, int vi, PN_stdfloat u, PN_stdfloat v, LVecBase3 &point) const;

431 19 eval_segment_normal 0 4 521 39 NurbsSurfaceResult::eval_segment_normal 0 1 187 449
////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceResult::eval_segment_normal
//       Access: Published
//  Description: As eval_segment_point, but computes the normal to
//               the surface at the indicated point.  The normal vector
//               will not necessarily be normalized, and could be
//               zero.
////////////////////////////////////////////////////////////////////
116
void NurbsSurfaceResult::eval_segment_normal(int ui, int vi, PN_stdfloat u, PN_stdfloat v, LVecBase3 &normal) const;

432 27 eval_segment_extended_point 0 4 521 47 NurbsSurfaceResult::eval_segment_extended_point 0 1 188 416
////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceResult::eval_segment_extended_point
//       Access: Published
//  Description: Evaluates the surface in n-dimensional space according
//               to the extended vertices associated with the surface in
//               the indicated dimension.
////////////////////////////////////////////////////////////////////
119
PN_stdfloat NurbsSurfaceResult::eval_segment_extended_point(int ui, int vi, PN_stdfloat u, PN_stdfloat v, int d) const;

433 28 eval_segment_extended_points 0 4 521 48 NurbsSurfaceResult::eval_segment_extended_points 0 1 189 544
////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceResult::eval_segment_extended_points
//       Access: Published
//  Description: Simultaneously performs eval_extended_point on a
//               contiguous sequence of dimensions.  The dimensions
//               evaluated are d through (d + num_values - 1); the
//               results are filled into the num_values elements in
//               the indicated result array.
////////////////////////////////////////////////////////////////////
151
void NurbsSurfaceResult::eval_segment_extended_points(int ui, int vi, PN_stdfloat u, PN_stdfloat v, int d, PN_stdfloat result[], int num_values) const;

434 13 get_segment_u 0 4 521 33 NurbsSurfaceResult::get_segment_u 0 1 190 483
////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceResult::get_segment_u
//       Access: Public
//  Description: Accepts a u value in the range [0, 1], and assumed to
//               be relative to the indicated segment (as in
//               eval_segment_point()), and returns the corresponding
//               u value in the entire surface (as in eval_point()).
////////////////////////////////////////////////////////////////////
82
inline PN_stdfloat NurbsSurfaceResult::get_segment_u(int ui, PN_stdfloat u) const;

435 13 get_segment_v 0 4 521 33 NurbsSurfaceResult::get_segment_v 0 1 191 483
////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceResult::get_segment_v
//       Access: Public
//  Description: Accepts a v value in the range [0, 1], and assumed to
//               be relative to the indicated segment (as in
//               eval_segment_point()), and returns the corresponding
//               v value in the entire surface (as in eval_point()).
////////////////////////////////////////////////////////////////////
82
inline PN_stdfloat NurbsSurfaceResult::get_segment_v(int vi, PN_stdfloat v) const;

436 21 NurbsSurfaceEvaluator 0 4 522 44 NurbsSurfaceEvaluator::NurbsSurfaceEvaluator 0 1 192 233
////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceEvaluator::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
51
NurbsSurfaceEvaluator::NurbsSurfaceEvaluator(void);

437 11 set_u_order 0 4 522 34 NurbsSurfaceEvaluator::set_u_order 0 1 193 528
////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceEvaluator::set_u_order
//       Access: Published
//  Description: Sets the order of the surface in the U direction.
//               This resets the knot vector to the default knot
//               vector for the number of vertices.
//
//               The order must be 1, 2, 3, or 4, and the value is one
//               more than the degree of the surface.
////////////////////////////////////////////////////////////////////
60
inline void NurbsSurfaceEvaluator::set_u_order(int u_order);

438 11 get_u_order 0 4 522 34 NurbsSurfaceEvaluator::get_u_order 0 1 194 346
////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceEvaluator::get_u_order
//       Access: Published
//  Description: Returns the order of the surface in the U direction
//               as set by a previous call to set_u_order().
////////////////////////////////////////////////////////////////////
58
inline int NurbsSurfaceEvaluator::get_u_order(void) const;

439 11 set_v_order 0 4 522 34 NurbsSurfaceEvaluator::set_v_order 0 1 195 528
////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceEvaluator::set_v_order
//       Access: Published
//  Description: Sets the order of the surface in the V direction.
//               This resets the knot vector to the default knot
//               vector for the number of vertices.
//
//               The order must be 1, 2, 3, or 4, and the value is one
//               more than the degree of the surface.
////////////////////////////////////////////////////////////////////
60
inline void NurbsSurfaceEvaluator::set_v_order(int v_order);

440 11 get_v_order 0 4 522 34 NurbsSurfaceEvaluator::get_v_order 0 1 196 346
////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceEvaluator::get_v_order
//       Access: Published
//  Description: Returns the order of the surface in the V direction
//               as set by a previous call to set_v_order().
////////////////////////////////////////////////////////////////////
58
inline int NurbsSurfaceEvaluator::get_v_order(void) const;

441 5 reset 0 4 522 28 NurbsSurfaceEvaluator::reset 0 1 197 512
////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceEvaluator::reset
//       Access: Published
//  Description: Resets all the vertices and knots to their default
//               values, and sets the surface up with the indicated
//               number of vertices.  You must then call set_vertex()
//               repeatedly to fill in all of the vertex values
//               appropriately.
////////////////////////////////////////////////////////////////////
74
void NurbsSurfaceEvaluator::reset(int num_u_vertices, int num_v_vertices);

442 18 get_num_u_vertices 0 4 522 41 NurbsSurfaceEvaluator::get_num_u_vertices 0 1 198 404
////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceEvaluator::get_num_u_vertices
//       Access: Published
//  Description: Returns the number of control vertices in the U
//               direction on the surface.  This is the number passed
//               to the last call to reset().
////////////////////////////////////////////////////////////////////
65
inline int NurbsSurfaceEvaluator::get_num_u_vertices(void) const;

443 18 get_num_v_vertices 0 4 522 41 NurbsSurfaceEvaluator::get_num_v_vertices 0 1 199 404
////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceEvaluator::get_num_v_vertices
//       Access: Published
//  Description: Returns the number of control vertices in the V
//               direction on the surface.  This is the number passed
//               to the last call to reset().
////////////////////////////////////////////////////////////////////
65
inline int NurbsSurfaceEvaluator::get_num_v_vertices(void) const;

444 10 set_vertex 0 4 522 33 NurbsSurfaceEvaluator::set_vertex 0 2 200 201 993
////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceEvaluator::set_vertex
//       Access: Published
//  Description: Sets the nth control vertex of the surface, as a vertex
//               in 4-d homogeneous space.  In this form, the first
//               three components of the vertex should already have
//               been scaled by the fourth component, which is the
//               homogeneous weight.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceEvaluator::set_vertex
//       Access: Published
//  Description: Sets the nth control vertex of the surface.  This
//               flavor sets the vertex as a 3-d coordinate and a
//               weight; the 3-d coordinate values are implicitly
//               scaled up by the weight factor.
////////////////////////////////////////////////////////////////////
201
inline void NurbsSurfaceEvaluator::set_vertex(int ui, int vi, LVecBase4 const &vertex);
inline void NurbsSurfaceEvaluator::set_vertex(int ui, int vi, LVecBase3 const &vertex, PN_stdfloat weight = 1.0);

445 10 get_vertex 0 4 522 33 NurbsSurfaceEvaluator::get_vertex 0 2 202 203 678
////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceEvaluator::get_vertex
//       Access: Published
//  Description: Returns the nth control vertex of the surface, relative
//               to its indicated coordinate space.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceEvaluator::get_vertex
//       Access: Published
//  Description: Returns the nth control vertex of the surface, relative
//               to the given coordinate space.
////////////////////////////////////////////////////////////////////
178
inline LVecBase4 const &NurbsSurfaceEvaluator::get_vertex(int ui, int vi) const;
inline LVecBase4 NurbsSurfaceEvaluator::get_vertex(int ui, int vi, NodePath const &rel_to) const;

446 16 set_vertex_space 0 4 522 39 NurbsSurfaceEvaluator::set_vertex_space 0 2 204 205 1444
////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceEvaluator::set_vertex_space
//       Access: Published
//  Description: Sets the coordinate space of the nth control vertex.
//               If this is not specified, or is set to an empty
//               NodePath, the nth control vertex is deemed to be in
//               the coordinate space passed to evaluate().
//
//               This specifies the space as a fixed NodePath, which
//               is always the same NodePath.  Also see setting the
//               space as a path string, which can specify a different
//               NodePath for different instances of the surface.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceEvaluator::set_vertex_space
//       Access: Published
//  Description: Sets the coordinate space of the nth control vertex.
//               If this is not specified, or is set to an empty
//               string, the nth control vertex is deemed to be in
//               the coordinate space passed to evaluate().
//
//               This specifies the space as a string, which describes
//               the path to find the node relative to the rel_to
//               NodePath when the surface is evaluated.
////////////////////////////////////////////////////////////////////
181
inline void NurbsSurfaceEvaluator::set_vertex_space(int ui, int vi, NodePath const &space);
inline void NurbsSurfaceEvaluator::set_vertex_space(int ui, int vi, string const &space);

447 16 get_vertex_space 0 4 522 39 NurbsSurfaceEvaluator::get_vertex_space 0 1 206 351
////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceEvaluator::get_vertex_space
//       Access: Published
//  Description: Returns the coordinate space of the nth control
//               vertex of the surface, expressed as a NodePath.
////////////////////////////////////////////////////////////////////
95
NodePath NurbsSurfaceEvaluator::get_vertex_space(int ui, int vi, NodePath const &rel_to) const;

448 19 set_extended_vertex 0 4 522 42 NurbsSurfaceEvaluator::set_extended_vertex 0 1 207 1223
////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceEvaluator::set_extended_vertex
//       Access: Public
//  Description: Sets an n-dimensional vertex value.  This allows
//               definition of a NURBS surface or surface in a sparse
//               n-dimensional space, typically used for associating
//               additional properties (like color or joint
//               membership) with each vertex of a surface.
//
//               The value d is an arbitrary integer value and
//               specifies the dimension of question for this
//               particular vertex.  Any number of dimensions may be
//               specified, and they need not be consecutive.  If a
//               value for a given dimension is not specified, is it
//               implicitly 0.0.
//
//               The value is implicitly scaled by the homogenous
//               weight value--that is, the fourth component of the
//               value passed to set_vertex().  This means the
//               ordinary vertex must be set first, before the
//               extended vertices can be set.
////////////////////////////////////////////////////////////////////
97
inline void NurbsSurfaceEvaluator::set_extended_vertex(int ui, int vi, int d, PN_stdfloat value);

449 19 get_extended_vertex 0 4 522 42 NurbsSurfaceEvaluator::get_extended_vertex 0 1 208 445
////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceEvaluator::get_extended_vertex
//       Access: Public
//  Description: Returns an n-dimensional vertex value.  See
//               set_extended_vertex().  This returns the value set
//               for the indicated dimension, or 0.0 if nothing has
//               been set.
////////////////////////////////////////////////////////////////////
91
inline PN_stdfloat NurbsSurfaceEvaluator::get_extended_vertex(int ui, int vi, int d) const;

450 21 set_extended_vertices 0 4 522 44 NurbsSurfaceEvaluator::set_extended_vertices 0 1 209 548
////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceEvaluator::set_extended_vertices
//       Access: Public
//  Description: Simultaneously sets several extended values in the
//               slots d through (d + num_values - 1) from the
//               num_values elements of the indicated array.  This is
//               equivalent to calling set_extended_vertex()
//               num_values times.  See set_extended_vertex().
////////////////////////////////////////////////////////////////////
117
void NurbsSurfaceEvaluator::set_extended_vertices(int ui, int vi, int d, PN_stdfloat const values[], int num_values);

451 15 get_num_u_knots 0 4 522 38 NurbsSurfaceEvaluator::get_num_u_knots 0 1 210 396
////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceEvaluator::get_num_u_knots
//       Access: Published
//  Description: Returns the number of knot values in the surface in
//               the U direction.  This is based on the number of
//               vertices and the order.
////////////////////////////////////////////////////////////////////
62
inline int NurbsSurfaceEvaluator::get_num_u_knots(void) const;

452 10 set_u_knot 0 4 522 33 NurbsSurfaceEvaluator::set_u_knot 0 1 211 451
////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceEvaluator::set_u_knot
//       Access: Published
//  Description: Sets the value of the nth knot.  Each knot value
//               should be greater than or equal to the preceding
//               value.  If no knot values are set, a default knot
//               vector is supplied.
////////////////////////////////////////////////////////////////////
64
void NurbsSurfaceEvaluator::set_u_knot(int i, PN_stdfloat knot);

453 10 get_u_knot 0 4 522 33 NurbsSurfaceEvaluator::get_u_knot 0 1 212 267
////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceEvaluator::get_u_knot
//       Access: Published
//  Description: Returns the value of the nth knot.
////////////////////////////////////////////////////////////////////
59
PN_stdfloat NurbsSurfaceEvaluator::get_u_knot(int i) const;

454 17 normalize_u_knots 0 4 522 40 NurbsSurfaceEvaluator::normalize_u_knots 0 1 213 359
////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceEvaluator::normalize_u_knots
//       Access: Published
//  Description: Normalizes the knot sequence so that the parametric
//               range of the surface in the U direction is 0 .. 1.
////////////////////////////////////////////////////////////////////
52
void NurbsSurfaceEvaluator::normalize_u_knots(void);

455 15 get_num_v_knots 0 4 522 38 NurbsSurfaceEvaluator::get_num_v_knots 0 1 214 396
////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceEvaluator::get_num_v_knots
//       Access: Published
//  Description: Returns the number of knot values in the surface in
//               the V direction.  This is based on the number of
//               vertices and the order.
////////////////////////////////////////////////////////////////////
62
inline int NurbsSurfaceEvaluator::get_num_v_knots(void) const;

456 10 set_v_knot 0 4 522 33 NurbsSurfaceEvaluator::set_v_knot 0 1 215 451
////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceEvaluator::set_v_knot
//       Access: Published
//  Description: Sets the value of the nth knot.  Each knot value
//               should be greater than or equal to the preceding
//               value.  If no knot values are set, a default knot
//               vector is supplied.
////////////////////////////////////////////////////////////////////
64
void NurbsSurfaceEvaluator::set_v_knot(int i, PN_stdfloat knot);

457 10 get_v_knot 0 4 522 33 NurbsSurfaceEvaluator::get_v_knot 0 1 216 267
////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceEvaluator::get_v_knot
//       Access: Published
//  Description: Returns the value of the nth knot.
////////////////////////////////////////////////////////////////////
59
PN_stdfloat NurbsSurfaceEvaluator::get_v_knot(int i) const;

458 17 normalize_v_knots 0 4 522 40 NurbsSurfaceEvaluator::normalize_v_knots 0 1 217 359
////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceEvaluator::normalize_v_knots
//       Access: Published
//  Description: Normalizes the knot sequence so that the parametric
//               range of the surface in the U direction is 0 .. 1.
////////////////////////////////////////////////////////////////////
52
void NurbsSurfaceEvaluator::normalize_v_knots(void);

459 18 get_num_u_segments 0 4 522 41 NurbsSurfaceEvaluator::get_num_u_segments 0 1 218 396
////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceEvaluator::get_num_u_segments
//       Access: Published
//  Description: Returns the number of piecewise continuous segments
//               in the surface in the U direction.  This is based on
//               the knot vector.
////////////////////////////////////////////////////////////////////
65
inline int NurbsSurfaceEvaluator::get_num_u_segments(void) const;

460 18 get_num_v_segments 0 4 522 41 NurbsSurfaceEvaluator::get_num_v_segments 0 1 219 396
////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceEvaluator::get_num_v_segments
//       Access: Published
//  Description: Returns the number of piecewise continuous segments
//               in the surface in the V direction.  This is based on
//               the knot vector.
////////////////////////////////////////////////////////////////////
65
inline int NurbsSurfaceEvaluator::get_num_v_segments(void) const;

461 8 evaluate 0 4 522 31 NurbsSurfaceEvaluator::evaluate 0 1 220 461
////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceEvaluator::evaluate
//       Access: Published
//  Description: Returns a NurbsSurfaceResult object that represents the
//               result of applying the knots to all of the current
//               values of the vertices, transformed into the
//               indicated coordinate space.
////////////////////////////////////////////////////////////////////
107
PointerTo< NurbsSurfaceResult > NurbsSurfaceEvaluator::evaluate(NodePath const &rel_to = NodePath()) const;

462 6 output 0 4 522 29 NurbsSurfaceEvaluator::output 0 1 221 229
////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceEvaluator::output
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
55
void NurbsSurfaceEvaluator::output(ostream &out) const;

463 8 RopeNode 0 4 523 18 RopeNode::RopeNode 0 1 222 444
////////////////////////////////////////////////////////////////////
//     Function: RopeNode::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: RopeNode::Copy Constructor
//       Access: Protected
//  Description:
////////////////////////////////////////////////////////////////////
39
RopeNode::RopeNode(string const &name);

464 9 set_curve 0 4 523 19 RopeNode::set_curve 0 1 223 280
////////////////////////////////////////////////////////////////////
//     Function: set_curve
//       Access: Published
//  Description: Sets the particular curve represented by the
//               RopeNode.
////////////////////////////////////////////////////////////////////
60
inline void RopeNode::set_curve(NurbsCurveEvaluator *curve);

465 9 get_curve 0 4 523 19 RopeNode::get_curve 0 1 224 255
////////////////////////////////////////////////////////////////////
//     Function: get_curve
//       Access: Published
//  Description: Returns the curve represented by the RopeNode.
////////////////////////////////////////////////////////////////////
60
inline NurbsCurveEvaluator *RopeNode::get_curve(void) const;

466 15 set_render_mode 0 4 523 25 RopeNode::set_render_mode 0 1 225 365
////////////////////////////////////////////////////////////////////
//     Function: set_render_mode
//       Access: Published
//  Description: Specifies the method used to render the rope.  The
//               simplest is RM_thread, which just draws a one-pixel
//               line segment.
////////////////////////////////////////////////////////////////////
72
inline void RopeNode::set_render_mode(RopeNode::RenderMode render_mode);

467 15 get_render_mode 0 4 523 25 RopeNode::get_render_mode 0 1 226 299
////////////////////////////////////////////////////////////////////
//     Function: get_render_mode
//       Access: Published
//  Description: Returns the method used to render the rope.  See
//               set_render_mode().
////////////////////////////////////////////////////////////////////
66
inline RopeNode::RenderMode RopeNode::get_render_mode(void) const;

468 11 set_uv_mode 0 4 523 21 RopeNode::set_uv_mode 0 1 227 289
////////////////////////////////////////////////////////////////////
//     Function: set_uv_mode
//       Access: Published
//  Description: Specifies the algorithm to use to generate UV's for
//               the rope.
////////////////////////////////////////////////////////////////////
60
inline void RopeNode::set_uv_mode(RopeNode::UVMode uv_mode);

469 11 get_uv_mode 0 4 523 21 RopeNode::get_uv_mode 0 1 228 287
////////////////////////////////////////////////////////////////////
//     Function: get_uv_mode
//       Access: Published
//  Description: Returns the algorithm to use to generate UV's for the
//               rope.
////////////////////////////////////////////////////////////////////
58
inline RopeNode::UVMode RopeNode::get_uv_mode(void) const;

470 16 set_uv_direction 0 4 523 26 RopeNode::set_uv_direction 0 1 229 334
////////////////////////////////////////////////////////////////////
//     Function: set_uv_direction
//       Access: Published
//  Description: Specify true to vary the U coordinate down the length
//               of the rope, or false to vary the V coordinate.
////////////////////////////////////////////////////////////////////
56
inline void RopeNode::set_uv_direction(bool u_dominant);

471 16 get_uv_direction 0 4 523 26 RopeNode::get_uv_direction 0 1 230 360
////////////////////////////////////////////////////////////////////
//     Function: get_uv_direction
//       Access: Published
//  Description: Returns true if the rope runs down the U coordinate
//               of the texture, or false if it runs down the V
//               coordinate.
////////////////////////////////////////////////////////////////////
51
inline bool RopeNode::get_uv_direction(void) const;

472 12 set_uv_scale 0 4 523 22 RopeNode::set_uv_scale 0 1 231 452
////////////////////////////////////////////////////////////////////
//     Function: set_uv_scale
//       Access: Published
//  Description: Specifies an additional scaling factor to apply to
//               generated UV's along the rope.  This scale factor is
//               applied in whichever direction is along the rope, as
//               specified by set_uv_direction().
////////////////////////////////////////////////////////////////////
54
inline void RopeNode::set_uv_scale(PN_stdfloat scale);

473 12 get_uv_scale 0 4 523 22 RopeNode::get_uv_scale 0 1 232 296
////////////////////////////////////////////////////////////////////
//     Function: get_uv_scale
//       Access: Published
//  Description: Returns the scaling factor to apply to generated UV's
//               for the rope.
////////////////////////////////////////////////////////////////////
54
inline PN_stdfloat RopeNode::get_uv_scale(void) const;

474 15 set_normal_mode 0 4 523 25 RopeNode::set_normal_mode 0 1 233 441
////////////////////////////////////////////////////////////////////
//     Function: set_normal_mode
//       Access: Published
//  Description: Specifies the kind of normals to generate for the
//               rope.  This is only applicable when the RenderMode is
//               set to RM_tube; in the other render modes, normals
//               are never generated.
////////////////////////////////////////////////////////////////////
72
inline void RopeNode::set_normal_mode(RopeNode::NormalMode normal_mode);

475 15 get_normal_mode 0 4 523 25 RopeNode::get_normal_mode 0 1 234 365
////////////////////////////////////////////////////////////////////
//     Function: get_normal_mode
//       Access: Published
//  Description: Returns the kind of normals to generate for the rope.
//               This is only applicable when the RenderMode is set to
//               RM_tube.
////////////////////////////////////////////////////////////////////
66
inline RopeNode::NormalMode RopeNode::get_normal_mode(void) const;

476 11 set_tube_up 0 4 523 21 RopeNode::set_tube_up 0 1 235 723
////////////////////////////////////////////////////////////////////
//     Function: set_tube_up
//       Access: Published
//  Description: Specifies a normal vector, generally perpendicular to
//               the main axis of the starting point of the curve,
//               that controls the "top" of the curve, when RenderMode
//               is RM_tube.  This is used to orient the vertices that
//               make up the tube.  If this vector is too nearly
//               parallel with the starting direction of the curve,
//               there may be a tendency for the whole tube to
//               gimble-lock around its primary axis.
////////////////////////////////////////////////////////////////////
59
inline void RopeNode::set_tube_up(LVector3 const &tube_up);

477 11 get_tube_up 0 4 523 21 RopeNode::get_tube_up 0 1 236 358
////////////////////////////////////////////////////////////////////
//     Function: get_tube_up
//       Access: Published
//  Description: Returns the normal vector used to control the "top"
//               of the curve, when RenderMode is RM_tube.  See
//               set_tube_up().
////////////////////////////////////////////////////////////////////
57
inline LVector3 const &RopeNode::get_tube_up(void) const;

478 20 set_use_vertex_color 0 4 523 30 RopeNode::set_use_vertex_color 0 1 237 667
////////////////////////////////////////////////////////////////////
//     Function: set_use_vertex_color
//       Access: Published
//  Description: Sets the "use vertex color" flag.  When this is true,
//               the R, G, B, A vertex color is assumed to be stored
//               as the dimensions n + 0, n + 1, n + 2, n + 3,
//               respectively, of the extended vertex values, where n
//               is the value returned by
//               get_vertex_color_dimension().  Use
//               NurbsCurveEvaluator::set_extended_vertex() to set
//               these values.
////////////////////////////////////////////////////////////////////
54
inline void RopeNode::set_use_vertex_color(bool flag);

479 20 get_use_vertex_color 0 4 523 30 RopeNode::get_use_vertex_color 0 1 238 302
////////////////////////////////////////////////////////////////////
//     Function: get_use_vertex_color
//       Access: Published
//  Description: Returns the "use vertex color" flag.  See
//               set_use_vertex_color().
////////////////////////////////////////////////////////////////////
55
inline bool RopeNode::get_use_vertex_color(void) const;

480 26 get_vertex_color_dimension 0 4 523 36 RopeNode::get_vertex_color_dimension 0 1 239 506
////////////////////////////////////////////////////////////////////
//     Function: get_vertex_color_dimension
//       Access: Published, Static
//  Description: Returns the numeric extended dimension in which the
//               color components should be found.  See
//               NurbsCurveEvaluator::set_extended_vertex().
//
//               The color components will be expected at (n, n + 1, n
//               + 2, n + 3).
////////////////////////////////////////////////////////////////////
61
static inline int RopeNode::get_vertex_color_dimension(void);

481 14 set_num_subdiv 0 4 523 24 RopeNode::set_num_subdiv 0 1 240 388
////////////////////////////////////////////////////////////////////
//     Function: set_num_subdiv
//       Access: Published
//  Description: Specifies the number of subdivisions per cubic
//               segment (that is, per unique knot value) to draw in a
//               fixed uniform tesselation of the curve.
////////////////////////////////////////////////////////////////////
53
inline void RopeNode::set_num_subdiv(int num_subdiv);

482 14 get_num_subdiv 0 4 523 24 RopeNode::get_num_subdiv 0 1 241 315
////////////////////////////////////////////////////////////////////
//     Function: get_num_subdiv
//       Access: Published
//  Description: Returns the number of subdivisions per cubic segment
//               to draw.  See set_num_subdiv().
////////////////////////////////////////////////////////////////////
48
inline int RopeNode::get_num_subdiv(void) const;

483 14 set_num_slices 0 4 523 24 RopeNode::set_num_slices 0 1 242 711
////////////////////////////////////////////////////////////////////
//     Function: set_num_slices
//       Access: Published
//  Description: Specifies the number of radial subdivisions to make
//               if RenderMode is RM_tube.  It is ignored in the other
//               render modes.
//
//               Increasing this number increases the roundness of a
//               cross-section of the tube.  The minimum value for a
//               dimensional tube is 3; setting it to 2 will get you a
//               thin piece of tape (which is similar to RM_billboard,
//               except it won't rotate to face the camera).
////////////////////////////////////////////////////////////////////
53
inline void RopeNode::set_num_slices(int num_slices);

484 14 get_num_slices 0 4 523 24 RopeNode::get_num_slices 0 1 243 388
////////////////////////////////////////////////////////////////////
//     Function: get_num_slices
//       Access: Published
//  Description: Returns the number of radial subdivisions to make if
//               RenderMode is RM_tube.  It is ignored in the other
//               render modes.  See set_num_slices().
////////////////////////////////////////////////////////////////////
48
inline int RopeNode::get_num_slices(void) const;

485 24 set_use_vertex_thickness 0 4 523 34 RopeNode::set_use_vertex_thickness 0 1 244 752
////////////////////////////////////////////////////////////////////
//     Function: set_use_vertex_thickness
//       Access: Published
//  Description: Sets the "use vertex thickness" flag.  When this is true,
//               the vertex thickness is assumed to be stored as the
//               dimension get_vertex_thickness_dimension(), of the
//               extended vertex values.  Use
//               NurbsCurveEvaluator::set_extended_vertex() to set
//               these values.
//
//               In this mode, the overall thickness is also applied
//               as a scale to the vertex thickness.  Not all render
//               modes support vertex thickness.
////////////////////////////////////////////////////////////////////
58
inline void RopeNode::set_use_vertex_thickness(bool flag);

486 24 get_use_vertex_thickness 0 4 523 34 RopeNode::get_use_vertex_thickness 0 1 245 314
////////////////////////////////////////////////////////////////////
//     Function: get_use_vertex_thickness
//       Access: Published
//  Description: Returns the "use vertex thickness" flag.  See
//               set_use_vertex_thickness().
////////////////////////////////////////////////////////////////////
59
inline bool RopeNode::get_use_vertex_thickness(void) const;

487 30 get_vertex_thickness_dimension 0 4 523 40 RopeNode::get_vertex_thickness_dimension 0 1 246 409
////////////////////////////////////////////////////////////////////
//     Function: get_vertex_thickness_dimension
//       Access: Published, Static
//  Description: Returns the numeric extended dimension in which the
//               thickness component should be found.  See
//               NurbsCurveEvaluator::set_extended_vertex().
////////////////////////////////////////////////////////////////////
65
static inline int RopeNode::get_vertex_thickness_dimension(void);

488 13 set_thickness 0 4 523 23 RopeNode::set_thickness 0 1 247 497
////////////////////////////////////////////////////////////////////
//     Function: set_thickness
//       Access: Published
//  Description: Specifies the thickness of the rope, in pixels or in
//               spatial units, depending on the render mode.  See
//               set_render_mode().
//
//               The thickness may also be specified on a per-vertex
//               basis.  See set_use_vertex_thickness().
////////////////////////////////////////////////////////////////////
59
inline void RopeNode::set_thickness(PN_stdfloat thickness);

489 13 get_thickness 0 4 523 23 RopeNode::get_thickness 0 1 248 286
////////////////////////////////////////////////////////////////////
//     Function: get_thickness
//       Access: Published
//  Description: Returns the thickness of the rope.  See
//               set_thickness().
////////////////////////////////////////////////////////////////////
55
inline PN_stdfloat RopeNode::get_thickness(void) const;

490 10 set_matrix 0 4 523 20 RopeNode::set_matrix 0 1 249 451
////////////////////////////////////////////////////////////////////
//     Function: set_matrix
//       Access: Published
//  Description: Specifies an optional matrix which is used to
//               transform each control vertex after it has been
//               transformed into the RopeNode's coordinate space, but
//               before the polygon vertices are generated.
////////////////////////////////////////////////////////////////////
57
inline void RopeNode::set_matrix(LMatrix4 const &matrix);

491 12 clear_matrix 0 4 523 22 RopeNode::clear_matrix 0 1 250 285
////////////////////////////////////////////////////////////////////
//     Function: clear_matrix
//       Access: Published
//  Description: Resets the node's matrix to identity.  See
//               set_matrix().
////////////////////////////////////////////////////////////////////
41
inline void RopeNode::clear_matrix(void);

492 10 has_matrix 0 4 523 20 RopeNode::has_matrix 0 1 251 305
////////////////////////////////////////////////////////////////////
//     Function: has_matrix
//       Access: Published
//  Description: Returns true if the node has a matrix set, false
//               otherwise.  See set_matrix().
////////////////////////////////////////////////////////////////////
45
inline bool RopeNode::has_matrix(void) const;

493 10 get_matrix 0 4 523 20 RopeNode::get_matrix 0 1 252 450
////////////////////////////////////////////////////////////////////
//     Function: get_matrix
//       Access: Published
//  Description: Returns the optional matrix which is used to
//               transform each control vertex after it has been
//               transformed into the RopeNode's coordinate space, but
//               before the polygon vertices are generated.
////////////////////////////////////////////////////////////////////
56
inline LMatrix4 const &RopeNode::get_matrix(void) const;

494 11 reset_bound 0 4 523 21 RopeNode::reset_bound 0 1 253 461
////////////////////////////////////////////////////////////////////
//     Function: RopeNode::reset_bound
//       Access: Published
//  Description: Recomputes the bounding volume.  This is normally
//               called automatically, but it must occasionally be
//               called explicitly when the curve has changed
//               properties outside of this node's knowledge.
////////////////////////////////////////////////////////////////////
51
void RopeNode::reset_bound(NodePath const &rel_to);

495 14 get_class_type 0 4 523 24 RopeNode::get_class_type 0 1 254 0
49
static TypeHandle RopeNode::get_class_type(void);

496 9 ~RopeNode 0 4 523 19 RopeNode::~RopeNode 0 0 0
26
RopeNode::~RopeNode(void);

497 9 SheetNode 0 4 527 20 SheetNode::SheetNode 0 1 255 446
////////////////////////////////////////////////////////////////////
//     Function: SheetNode::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: SheetNode::Copy Constructor
//       Access: Protected
//  Description:
////////////////////////////////////////////////////////////////////
41
SheetNode::SheetNode(string const &name);

498 11 set_surface 0 4 527 22 SheetNode::set_surface 0 1 256 282
////////////////////////////////////////////////////////////////////
//     Function: set_surface
//       Access: Public
//  Description: Sets the particular surface represented by the
//               SheetNode.
////////////////////////////////////////////////////////////////////
67
inline void SheetNode::set_surface(NurbsSurfaceEvaluator *surface);

499 11 get_surface 0 4 527 22 SheetNode::get_surface 0 1 257 257
////////////////////////////////////////////////////////////////////
//     Function: get_surface
//       Access: Public
//  Description: Returns the surface represented by the SheetNode.
////////////////////////////////////////////////////////////////////
65
inline NurbsSurfaceEvaluator *SheetNode::get_surface(void) const;

500 20 set_use_vertex_color 0 4 527 31 SheetNode::set_use_vertex_color 0 1 258 551
////////////////////////////////////////////////////////////////////
//     Function: set_use_vertex_color
//       Access: Public
//  Description: Sets the "use vertex color" flag.  When this is true,
//               the R, G, B, A vertex color is assumed to be stored
//               as the dimensions 0, 1, 2, 3, respectively, of the
//               extended vertex values.  Use
//               NurbsCurveEvaluator::set_extended_vertex() to set
//               these values.
////////////////////////////////////////////////////////////////////
55
inline void SheetNode::set_use_vertex_color(bool flag);

501 20 get_use_vertex_color 0 4 527 31 SheetNode::get_use_vertex_color 0 1 259 299
////////////////////////////////////////////////////////////////////
//     Function: get_use_vertex_color
//       Access: Public
//  Description: Returns the "use vertex color" flag.  See
//               set_use_vertex_color().
////////////////////////////////////////////////////////////////////
56
inline bool SheetNode::get_use_vertex_color(void) const;

502 16 set_num_u_subdiv 0 4 527 27 SheetNode::set_num_u_subdiv 0 1 260 425
////////////////////////////////////////////////////////////////////
//     Function: set_num_u_subdiv
//       Access: Public
//  Description: Specifies the number of subdivisions per cubic
//               segment (that is, per unique knot value) to draw in a
//               fixed uniform tesselation of the surface in the U
//               direction.
////////////////////////////////////////////////////////////////////
58
inline void SheetNode::set_num_u_subdiv(int num_u_subdiv);

503 16 get_num_u_subdiv 0 4 527 27 SheetNode::get_num_u_subdiv 0 1 261 335
////////////////////////////////////////////////////////////////////
//     Function: get_num_u_subdiv
//       Access: Public
//  Description: Returns the number of subdivisions per cubic segment
//               to draw in the U direction.  See set_num_u_subdiv().
////////////////////////////////////////////////////////////////////
51
inline int SheetNode::get_num_u_subdiv(void) const;

504 16 set_num_v_subdiv 0 4 527 27 SheetNode::set_num_v_subdiv 0 1 262 425
////////////////////////////////////////////////////////////////////
//     Function: set_num_v_subdiv
//       Access: Public
//  Description: Specifies the number of subdivisions per cubic
//               segment (that is, per unique knot value) to draw in a
//               fixed uniform tesselation of the surface in the V
//               direction.
////////////////////////////////////////////////////////////////////
58
inline void SheetNode::set_num_v_subdiv(int num_v_subdiv);

505 16 get_num_v_subdiv 0 4 527 27 SheetNode::get_num_v_subdiv 0 1 263 335
////////////////////////////////////////////////////////////////////
//     Function: get_num_v_subdiv
//       Access: Public
//  Description: Returns the number of subdivisions per cubic segment
//               to draw in the V direction.  See set_num_v_subdiv().
////////////////////////////////////////////////////////////////////
51
inline int SheetNode::get_num_v_subdiv(void) const;

506 11 reset_bound 0 4 527 22 SheetNode::reset_bound 0 1 264 464
////////////////////////////////////////////////////////////////////
//     Function: SheetNode::reset_bound
//       Access: Published
//  Description: Recomputes the bounding volume.  This is normally
//               called automatically, but it must occasionally be
//               called explicitly when the surface has changed
//               properties outside of this node's knowledge.
////////////////////////////////////////////////////////////////////
52
void SheetNode::reset_bound(NodePath const &rel_to);

507 14 get_class_type 0 4 527 25 SheetNode::get_class_type 0 1 265 0
50
static TypeHandle SheetNode::get_class_type(void);

508 10 ~SheetNode 0 4 527 21 SheetNode::~SheetNode 0 0 0
28
SheetNode::~SheetNode(void);

265
1 0 0 6 3 531 0 0 415 ////////////////////////////////////////////////////////////////////
//     Function: ParametricCurve::is_valid
//       Access: Published, Virtual
//  Description: Returns true if the curve is defined.  This base
//               class function always returns true; derived classes
//               might override this to sometimes return false.
//////////////////////////////////////////////////////////////////// 1 4 this 3 529  
2 0 0 6 4 532 0 0 522 ////////////////////////////////////////////////////////////////////
//     Function: ParametricCurve::get_max_t
//       Access: Published, Virtual
//  Description: Returns the upper bound of t for the entire curve.
//               The curve is defined in the range 0.0f <= t <=
//               get_max_t().  This base class function always returns
//               1.0f; derived classes might override this to return
//               something else.
//////////////////////////////////////////////////////////////////// 1 4 this 3 529  
3 0 0 4 5 535 0 0 731 ////////////////////////////////////////////////////////////////////
//     Function: ParametricCurve::set_curve_type
//       Access: Published
//  Description: Sets the flag indicating the use to which the curve
//               is intended to be put.  This flag is optional and
//               only serves to provide a hint to the egg reader and
//               writer code; it has no effect on the curve's
//               behavior.
//
//               Setting the curve type also sets the num_dimensions
//               to 3 or 1 according to the type.
//
//               THis flag may have one of the values PCT_XYZ,
//               PCT_HPR, or PCT_T.
//////////////////////////////////////////////////////////////////// 2 4 this 3 534  4 type 1 528  
4 0 0 6 6 528 0 0 325 ////////////////////////////////////////////////////////////////////
//     Function: ParametricCurve::get_curve_type
//       Access: Published
//  Description: Returns the flag indicating the use to which the curve
//               is intended to be put.
//////////////////////////////////////////////////////////////////// 1 4 this 3 529  
5 0 0 4 7 535 0 0 622 ////////////////////////////////////////////////////////////////////
//     Function: ParametricCurve::set_num_dimensions
//       Access: Published
//  Description: Specifies the number of significant dimensions in the
//               curve's vertices.  This should be one of 1, 2, or 3.
//               Normally, XYZ and HPR curves have three dimensions;
//               time curves should always have one dimension.  This
//               only serves as a hint to the mopath editor, and also
//               controls how the curve is written out.
//////////////////////////////////////////////////////////////////// 2 4 this 3 534  3 num 1 528  
6 0 0 6 8 528 0 0 550 ////////////////////////////////////////////////////////////////////
//     Function: ParametricCurve::get_num_dimensions
//       Access: Published
//  Description: Returns the number of significant dimensions in the
//               curve's vertices, as set by a previous call to
//               set_num_dimensions().  This is only a hint as to how
//               the curve is intended to be used; the actual number
//               of dimensions of any curve is always three.
//////////////////////////////////////////////////////////////////// 1 4 this 3 529  
7 0 0 6 9 532 0 0 320 ////////////////////////////////////////////////////////////////////
//     Function: ParametricCurve::calc_length
//       Access: Published
//  Description: Approximates the length of the entire curve to within
//               a few decimal places.
//////////////////////////////////////////////////////////////////// 1 4 this 3 529  
8 0 0 6 9 532 0 0 331 ////////////////////////////////////////////////////////////////////
//     Function: ParametricCurve::calc_length
//       Access: Published
//  Description: Approximates the length of the curve segment from
//               parametric time 'from' to time 'to'.
//////////////////////////////////////////////////////////////////// 3 4 this 3 529  4 from 1 532  2 to 1 532  
9 0 0 6 10 532 0 0 717 ////////////////////////////////////////////////////////////////////
//     Function: ParametricCurve::find_length
//       Access: Published
//  Description: Returns the parametric value corresponding to the
//               indicated distance along the curve from the starting
//               parametric value.
//
//               This is the inverse of calc_length(): rather than
//               determining the length along the curve between two
//               parametric points, it determines the position in
//               parametric time of a point n units along the curve.
//
//               The search distance must not be negative.
//////////////////////////////////////////////////////////////////// 3 4 this 3 529  7 start_t 1 532  13 length_offset 1 532  
10 0 0 6 11 531 0 0 0 3 4 this 3 529  1 t 1 532  5 point 1 536  
11 0 0 6 12 531 0 0 0 3 4 this 3 529  1 t 1 532  7 tangent 1 536  
12 0 0 6 13 531 0 0 0 4 4 this 3 529  1 t 1 532  5 point 1 536  7 tangent 1 536  
13 0 0 6 14 531 0 0 0 3 4 this 3 529  1 t 1 532  8 tangent2 1 536  
14 0 0 6 15 531 0 0 402 ////////////////////////////////////////////////////////////////////
//     Function: ParametricCurve::adjust_point
//       Access: Published, Virtual
//  Description: Recomputes the curve such that it passes through the
//               point (px, py, pz) at time t, but keeps the same
//               tangent value at that point.
//////////////////////////////////////////////////////////////////// 5 4 this 3 534  1 t 1 532  2 px 1 532  2 py 1 532  2 pz 1 532  
15 0 0 6 16 531 0 0 389 ////////////////////////////////////////////////////////////////////
//     Function: ParametricCurve::adjust_tangent
//       Access: Published, Virtual
//  Description: Recomputes the curve such that it has the tangent
//               (tx, ty, tz) at time t, but keeps the same position
//               at the point.
//////////////////////////////////////////////////////////////////// 5 4 this 3 534  1 t 1 532  2 tx 1 532  2 ty 1 532  2 tz 1 532  
16 0 0 6 17 531 0 0 354 ////////////////////////////////////////////////////////////////////
//     Function: ParametricCurve::adjust_pt
//       Access: Published, Virtual
//  Description: Recomputes the curve such that it passes through the
//               point (px, py, pz) with the tangent (tx, ty, tz).
//////////////////////////////////////////////////////////////////// 8 4 this 3 534  1 t 1 532  2 px 1 532  2 py 1 532  2 pz 1 532  2 tx 1 532  2 ty 1 532  2 tz 1 532  
17 0 0 6 18 531 0 0 370 ////////////////////////////////////////////////////////////////////
//     Function: ParametricCurve::recompute
//       Access: Published, Virtual
//  Description: Recalculates the curve, if necessary.  Returns
//               true if the resulting curve is valid, false
//               otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 534  
18 0 0 6 19 531 0 0 537 ////////////////////////////////////////////////////////////////////
//     Function: ParametricCurve::stitch
//       Access: Published, Virtual
//  Description: Regenerates this curve as one long curve: the first
//               curve connected end-to-end with the second one.
//               Either a or b may be the same as 'this'.
//
//               Returns true if successful, false on failure or if
//               the curve type does not support stitching.
//////////////////////////////////////////////////////////////////// 3 4 this 3 534  1 a 1 529  1 b 1 529  
19 0 0 6 20 531 0 0 385 ////////////////////////////////////////////////////////////////////
//     Function: ParametricCurve::write_egg
//       Access: Published
//  Description: Writes an egg description of the nurbs curve to the
//               specified output file.  Returns true if the file is
//               successfully written.
//////////////////////////////////////////////////////////////////// 3 4 this 3 534  8 filename 1 539  2 cs 1 541  
20 0 0 6 20 531 0 0 387 ////////////////////////////////////////////////////////////////////
//     Function: ParametricCurve::write_egg
//       Access: Published
//  Description: Writes an egg description of the nurbs curve to the
//               specified output stream.  Returns true if the file is
//               successfully written.
//////////////////////////////////////////////////////////////////// 4 4 this 3 534  3 out 1 542  8 filename 1 544  2 cs 1 541  
21 0 0 7 21 547 0 0 0 0 
22 0 0 7 23 547 0 0 0 0 
23 0 0 7 26 548 0 0 237 ////////////////////////////////////////////////////////////////////
//     Function: ParametricCurveCollection::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
24 0 0 4 27 535 0 0 281 ////////////////////////////////////////////////////////////////////
//     Function: ParametricCurveCollection::add_curve
//       Access: Published
//  Description: Adds a new ParametricCurve to the collection.
//////////////////////////////////////////////////////////////////// 2 4 this 3 548  5 curve 1 534  
25 0 0 4 27 535 0 0 321 ////////////////////////////////////////////////////////////////////
//     Function: ParametricCurveCollection::add_curve
//       Access: Published
//  Description: Adds a new ParametricCurve to the collection at the
//               indicated index.
//////////////////////////////////////////////////////////////////// 3 4 this 3 548  5 curve 1 534  5 index 1 528  
26 0 0 6 28 528 0 0 378 ////////////////////////////////////////////////////////////////////
//     Function: ParametricCurveCollection::add_curves
//       Access: Published
//  Description: Adds all the curves found in the scene graph rooted
//               at the given node.  Returns the number of curves
//               found.
//////////////////////////////////////////////////////////////////// 2 4 this 3 548  4 node 1 549  
27 0 0 6 29 531 0 0 419 ////////////////////////////////////////////////////////////////////
//     Function: ParametricCurveCollection::remove_curve
//       Access: Published
//  Description: Removes the indicated ParametricCurve from the
//               collection.  Returns true if the curve was removed,
//               false if it was not a member of the collection.
//////////////////////////////////////////////////////////////////// 2 4 this 3 548  5 curve 1 534  
28 0 0 4 29 535 0 0 335 ////////////////////////////////////////////////////////////////////
//     Function: ParametricCurveCollection::remove_curve
//       Access: Published
//  Description: Removes the indicated ParametricCurve from the
//               collection, by its index number.
//////////////////////////////////////////////////////////////////// 2 4 this 3 548  5 index 1 528  
29 0 0 6 30 531 0 0 343 ////////////////////////////////////////////////////////////////////
//     Function: ParametricCurveCollection::has_curve
//       Access: Published
//  Description: Returns true if the indicated ParametricCurve appears in
//               this collection, false otherwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 550  5 curve 1 534  
30 0 0 4 31 535 0 0 281 ////////////////////////////////////////////////////////////////////
//     Function: ParametricCurveCollection::clear
//       Access: Published
//  Description: Removes all ParametricCurves from the collection.
//////////////////////////////////////////////////////////////////// 1 4 this 3 548  
31 0 0 4 32 535 0 0 294 ////////////////////////////////////////////////////////////////////
//     Function: ParametricCurveCollection::clear_timewarps
//       Access: Published
//  Description: Removes all the timewarp curves from the collection.
//////////////////////////////////////////////////////////////////// 1 4 this 3 548  
32 0 0 6 33 528 0 0 298 ////////////////////////////////////////////////////////////////////
//     Function: ParametricCurveCollection::get_num_curves
//       Access: Published
//  Description: Returns the number of ParametricCurves in the collection.
//////////////////////////////////////////////////////////////////// 1 4 this 3 550  
33 0 0 7 34 534 0 0 286 ////////////////////////////////////////////////////////////////////
//     Function: ParametricCurveCollection::get_curve
//       Access: Published
//  Description: Returns the nth ParametricCurve in the collection.
//////////////////////////////////////////////////////////////////// 2 4 this 3 550  5 index 1 528  
34 0 0 7 35 534 0 0 338 ////////////////////////////////////////////////////////////////////
//     Function: ParametricCurveCollection::get_xyz_curve
//       Access: Published
//  Description: Returns the first XYZ curve in the collection, if
//               any, or NULL if there are none.
//////////////////////////////////////////////////////////////////// 1 4 this 3 550  
35 0 0 7 36 534 0 0 338 ////////////////////////////////////////////////////////////////////
//     Function: ParametricCurveCollection::get_hpr_curve
//       Access: Published
//  Description: Returns the first HPR curve in the collection, if
//               any, or NULL if there are none.
//////////////////////////////////////////////////////////////////// 1 4 this 3 550  
36 0 0 7 37 534 0 0 458 ////////////////////////////////////////////////////////////////////
//     Function: ParametricCurveCollection::get_default_curve
//       Access: Published
//  Description: If there is an XYZ curve in the collection, returns
//               it; otherwise, returns the first curve whose type is
//               unspecified.  Returns NULL if no curve meets the
//               criteria.
//////////////////////////////////////////////////////////////////// 1 4 this 3 550  
37 0 0 6 38 528 0 0 317 ////////////////////////////////////////////////////////////////////
//     Function: ParametricCurveCollection::get_num_timewarps
//       Access: Published
//  Description: Returns the number of timewarp curves in the
//               collection.
//////////////////////////////////////////////////////////////////// 1 4 this 3 550  
38 0 0 7 39 534 0 0 294 ////////////////////////////////////////////////////////////////////
//     Function: ParametricCurveCollection::get_timewarp_curve
//       Access: Published
//  Description: Returns the nth timewarp curve in the collection.
//////////////////////////////////////////////////////////////////// 2 4 this 3 550  1 n 1 528  
39 0 0 6 40 532 0 0 423 ////////////////////////////////////////////////////////////////////
//     Function: ParametricCurveCollection::get_max_t
//       Access: Published
//  Description: Returns the maximum T value associated with the
//               *last* curve in the collection.  Normally, this will
//               be either the XYZ or HPR curve, or a timewarp curve.
//////////////////////////////////////////////////////////////////// 1 4 this 3 550  
40 0 0 4 41 535 0 0 913 ////////////////////////////////////////////////////////////////////
//     Function: ParametricCurveCollection::make_even
//       Access: Published
//  Description: Discards all existing timewarp curves and recomputes
//               a new timewarp curve that maps distance along the
//               curve to parametric time, so that the distance
//               between any two points in parametric time is
//               proportional to the approximate distance of those
//               same two points along the XYZ curve.
//
//               segments_per_unit represents the number of segments to
//               take per each unit of parametric time of the original
//               XYZ curve.
//
//               The new timewarp curve (and thus, the apparent range
//               of the collection) will range from 0 to max_t.
//////////////////////////////////////////////////////////////////// 3 4 this 3 548  5 max_t 1 532  17 segments_per_unit 1 532  
41 0 0 4 42 535 0 0 452 ////////////////////////////////////////////////////////////////////
//     Function: ParametricCurveCollection::face_forward
//       Access: Published
//  Description: Discards the existing HPR curve and generates a new
//               one that looks in the direction of travel along the
//               XYZ curve, based on the XYZ curve's tangent at each
//               point.
//////////////////////////////////////////////////////////////////// 2 4 this 3 548  17 segments_per_unit 1 532  
42 0 0 4 43 535 0 0 563 ////////////////////////////////////////////////////////////////////
//     Function: ParametricCurveCollection::reset_max_t
//       Access: Published
//  Description: Adjusts the apparent length of the curve by applying
//               a new timewarp that maps the range [0..max_t] to the
//               range [0..get_max_t()].  After this call, the curve
//               collection will contain one more timewarp curve, and
//               get_max_t() will return the given max_t value.
//////////////////////////////////////////////////////////////////// 2 4 this 3 548  5 max_t 1 532  
43 0 0 6 44 531 0 0 880 ////////////////////////////////////////////////////////////////////
//     Function: ParametricCurveCollection::evaluate
//       Access: Published
//  Description: Computes the transform matrix representing
//               translation to the position indicated by the first
//               XYZ curve in the collection and the rotation
//               indicated by the first HPR curve in the collection,
//               after t has been modified by all the timewarp curves
//               in the collection applied in sequence, from back to
//               front.
//
//               Returns true if the point is valid (i.e. t is within
//               the bounds indicated by all the timewarp curves and
//               within the bounds of the curves themselves), or false
//               otherwise.
//////////////////////////////////////////////////////////////////// 4 4 this 3 550  1 t 1 532  6 result 1 552  2 cs 1 541  
44 0 0 6 44 531 0 0 774 ////////////////////////////////////////////////////////////////////
//     Function: ParametricCurveCollection::evaluate
//       Access: Published
//  Description: Computes the position and rotation represented by the
//               first XYZ and HPR curves in the collection at the
//               given point t, after t has been modified by all the
//               timewarp curves in the collection applied in
//               sequence, from back to front.
//
//               Returns true if the point is valid (i.e. t is within
//               the bounds indicated by all the timewarp curves and
//               within the bounds of the curves themselves), or false
//               otherwise.
//////////////////////////////////////////////////////////////////// 4 4 this 3 550  1 t 1 532  3 xyz 1 536  3 hpr 1 536  
45 0 0 6 45 532 0 0 490 ////////////////////////////////////////////////////////////////////
//     Function: ParametricCurveCollection::evaluate_t
//       Access: Published
//  Description: Determines the value of t that should be passed to
//               the XYZ and HPR curves, after applying the given
//               value of t to all the timewarps.  Return -1.0f if the
//               value of t exceeds one of the timewarps' ranges.
//////////////////////////////////////////////////////////////////// 2 4 this 3 550  1 t 1 532  
46 0 0 6 46 531 0 0 314 ////////////////////////////////////////////////////////////////////
//     Function: ParametricCurveCollection::evaluate_xyz
//       Access: Published
//  Description: Computes only the XYZ part of the curves.  See
//               evaluate().
//////////////////////////////////////////////////////////////////// 3 4 this 3 550  1 t 1 532  3 xyz 1 536  
47 0 0 6 47 531 0 0 314 ////////////////////////////////////////////////////////////////////
//     Function: ParametricCurveCollection::evaluate_hpr
//       Access: Published
//  Description: Computes only the HPR part of the curves.  See
//               evaluate().
//////////////////////////////////////////////////////////////////// 3 4 this 3 550  1 t 1 532  3 hpr 1 536  
48 0 0 6 48 531 0 0 478 ////////////////////////////////////////////////////////////////////
//     Function: ParametricCurveCollection::adjust_xyz
//       Access: Published
//  Description: Adjust the XYZ curve at the indicated time to the new
//               value.  The curve shape will change correspondingly.
//               Returns true if successful, false if unable to make
//               the adjustment for some reason.
//////////////////////////////////////////////////////////////////// 3 4 this 3 548  1 t 1 532  3 xyz 1 555  
49 0 0 6 48 531 0 0 478 ////////////////////////////////////////////////////////////////////
//     Function: ParametricCurveCollection::adjust_xyz
//       Access: Published
//  Description: Adjust the XYZ curve at the indicated time to the new
//               value.  The curve shape will change correspondingly.
//               Returns true if successful, false if unable to make
//               the adjustment for some reason.
//////////////////////////////////////////////////////////////////// 5 4 this 3 548  1 t 1 532  1 x 1 532  1 y 1 532  1 z 1 532  
50 0 0 6 49 531 0 0 478 ////////////////////////////////////////////////////////////////////
//     Function: ParametricCurveCollection::adjust_hpr
//       Access: Published
//  Description: Adjust the HPR curve at the indicated time to the new
//               value.  The curve shape will change correspondingly.
//               Returns true if successful, false if unable to make
//               the adjustment for some reason.
//////////////////////////////////////////////////////////////////// 3 4 this 3 548  1 t 1 532  3 xyz 1 555  
51 0 0 6 49 531 0 0 478 ////////////////////////////////////////////////////////////////////
//     Function: ParametricCurveCollection::adjust_hpr
//       Access: Published
//  Description: Adjust the HPR curve at the indicated time to the new
//               value.  The curve shape will change correspondingly.
//               Returns true if successful, false if unable to make
//               the adjustment for some reason.
//////////////////////////////////////////////////////////////////// 5 4 this 3 548  1 t 1 532  1 h 1 532  1 p 1 532  1 r 1 532  
52 0 0 6 50 531 0 0 409 ////////////////////////////////////////////////////////////////////
//     Function: ParametricCurveCollection::recompute
//       Access: Published
//  Description: Ensures all the curves are freshly computed and
//               up-to-date.  Returns true if everything is valid,
//               false if at least one curve is incorrect.
//////////////////////////////////////////////////////////////////// 1 4 this 3 548  
53 0 0 6 51 531 0 0 541 ////////////////////////////////////////////////////////////////////
//     Function: ParametricCurveCollection::stitch
//       Access: Published
//  Description: Regenerates this curve as one long curve: the first
//               curve connected end-to-end with the second one.
//               Either a or b may be the same as 'this'.  This will
//               lose any timewarps on the input curves.
//
//               Returns true if successful, false on failure.
//////////////////////////////////////////////////////////////////// 3 4 this 3 548  1 a 1 550  1 b 1 550  
54 0 0 4 52 535 0 0 350 ////////////////////////////////////////////////////////////////////
//     Function: ParametricCurveCollection::output
//       Access: Published
//  Description: Writes a brief one-line description of the
//               ParametricCurveCollection to the indicated output stream.
//////////////////////////////////////////////////////////////////// 2 4 this 3 550  3 out 1 542  
55 0 0 4 53 535 0 0 354 ////////////////////////////////////////////////////////////////////
//     Function: ParametricCurveCollection::write
//       Access: Published
//  Description: Writes a complete multi-line description of the
//               ParametricCurveCollection to the indicated output stream.
//////////////////////////////////////////////////////////////////// 3 4 this 3 550  3 out 1 542  12 indent_level 1 528  
56 0 0 6 54 531 0 0 418 ////////////////////////////////////////////////////////////////////
//     Function: ParametricCurveCollection::write_egg
//       Access: Published
//  Description: Writes an egg description of all the nurbs curves in
//               the collection to the specified output file.  Returns
//               true if the file is successfully written.
//////////////////////////////////////////////////////////////////// 3 4 this 3 548  8 filename 1 539  2 cs 1 541  
57 0 0 6 54 531 0 0 420 ////////////////////////////////////////////////////////////////////
//     Function: ParametricCurveCollection::write_egg
//       Access: Published
//  Description: Writes an egg description of all the nurbs curves in
//               the collection to the specified output stream.  Returns
//               true if the file is successfully written.
//////////////////////////////////////////////////////////////////// 4 4 this 3 548  3 out 1 542  8 filename 1 544  2 cs 1 541  
58 0 0 7 56 557 316 0 220 ////////////////////////////////////////////////////////////////////
//     Function: CurveFitter::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
59 0 0 4 58 535 0 0 332 ////////////////////////////////////////////////////////////////////
//     Function: CurveFitter::reset
//       Access: Public
//  Description: Removes all the data points previously added to the
//               CurveFitter, and initializes it for a new curve.
//////////////////////////////////////////////////////////////////// 1 4 this 3 557  
60 0 0 4 59 535 0 0 242 ////////////////////////////////////////////////////////////////////
//     Function: CurveFitter::add_xyz
//       Access: Public
//  Description: Adds a single sample xyz.
//////////////////////////////////////////////////////////////////// 3 4 this 3 557  1 t 1 532  3 xyz 1 555  
61 0 0 4 60 535 0 0 242 ////////////////////////////////////////////////////////////////////
//     Function: CurveFitter::add_hpr
//       Access: Public
//  Description: Adds a single sample hpr.
//////////////////////////////////////////////////////////////////// 3 4 this 3 557  1 t 1 532  3 hpr 1 555  
62 0 0 4 61 535 0 0 267 ////////////////////////////////////////////////////////////////////
//     Function: CurveFitter::add_xyz_hpr
//       Access: Public
//  Description: Adds a single sample xyz & hpr simultaneously.
//////////////////////////////////////////////////////////////////// 4 4 this 3 557  1 t 1 532  3 xyz 1 555  3 hpr 1 555  
63 0 0 6 62 528 0 0 299 ////////////////////////////////////////////////////////////////////
//     Function: CurveFitter::get_num_samples
//       Access: Public
//  Description: Returns the number of sample points that have been
//               added.
//////////////////////////////////////////////////////////////////// 1 4 this 3 558  
64 0 0 6 63 532 0 0 275 ////////////////////////////////////////////////////////////////////
//     Function: CurveFitter::get_sample_t
//       Access: Public
//  Description: Returns the parametric value of the nth sample added.
//////////////////////////////////////////////////////////////////// 2 4 this 3 558  1 n 1 528  
65 0 0 7 64 536 0 0 275 ////////////////////////////////////////////////////////////////////
//     Function: CurveFitter::get_sample_xyz
//       Access: Public
//  Description: Returns the point in space of the nth sample added.
//////////////////////////////////////////////////////////////////// 2 4 this 3 558  1 n 1 528  
66 0 0 7 65 536 0 0 272 ////////////////////////////////////////////////////////////////////
//     Function: CurveFitter::get_sample_hpr
//       Access: Public
//  Description: Returns the orientation of the nth sample added.
//////////////////////////////////////////////////////////////////// 2 4 this 3 558  1 n 1 528  
67 0 0 7 66 536 0 0 391 ////////////////////////////////////////////////////////////////////
//     Function: CurveFitter::get_sample_tangent
//       Access: Public
//  Description: Returns the tangent associated with the nth sample
//               added.  This is only meaningful if compute_tangents()
//               has already been called.
//////////////////////////////////////////////////////////////////// 2 4 this 3 558  1 n 1 528  
68 0 0 4 67 535 0 0 335 ////////////////////////////////////////////////////////////////////
//     Function: CurveFitter::remove_samples
//       Access: Public
//  Description: Eliminates all samples from index begin, up to but not
//               including index end, from the database.
//////////////////////////////////////////////////////////////////// 3 4 this 3 557  5 begin 1 528  3 end 1 528  
69 0 0 4 68 535 0 0 473 ////////////////////////////////////////////////////////////////////
//     Function: CurveFitter::sample
//       Access: Public
//  Description: Generates a series of data points by sampling the
//               given curve (or xyz/hpr curves) the indicated number
//               of times.  The sampling is made evenly in parametric
//               time, and then the timewarps, if any, are applied.
//////////////////////////////////////////////////////////////////// 3 4 this 3 557  6 curves 1 548  5 count 1 528  
70 0 0 4 69 535 0 0 400 ////////////////////////////////////////////////////////////////////
//     Function: CurveFitter::wrap_hpr
//       Access: Public
//  Description: Resets each HPR data point so that the maximum delta
//               between any two consecutive points is 180 degrees,
//               which should prevent incorrect HPR wrapping.
//////////////////////////////////////////////////////////////////// 1 4 this 3 557  
71 0 0 4 70 535 0 0 339 ////////////////////////////////////////////////////////////////////
//     Function: CurveFitter::sort_points
//       Access: Public
//  Description: Sorts all the data points in order by parametric
//               time, in case they were added in an incorrect order.
//////////////////////////////////////////////////////////////////// 1 4 this 3 557  
72 0 0 4 71 535 0 0 428 ////////////////////////////////////////////////////////////////////
//     Function: CurveFitter::desample
//       Access: Public
//  Description: Removes sample points in order to reduce the
//               complexity of a sampled curve.  Keeps one out of
//               every factor samples.  Also keeps the first and the
//               last samples.
//////////////////////////////////////////////////////////////////// 2 4 this 3 557  6 factor 1 532  
73 0 0 4 72 535 0 0 508 ////////////////////////////////////////////////////////////////////
//     Function: CurveFitter::compute_tangents
//       Access: Public
//  Description: Once a set of points has been built, and prior to
//               calling MakeHermite() or MakeNurbs(),
//               ComputeTangents() must be called to set up the
//               tangents correctly (unless the tangents were defined
//               as the points were added).
//////////////////////////////////////////////////////////////////// 2 4 this 3 557  5 scale 1 532  
74 0 0 7 73 548 0 0 300 ////////////////////////////////////////////////////////////////////
//     Function: CurveFitter::make_hermite
//       Access: Public
//  Description: Converts the current set of data points into a
//               Hermite curve.
//////////////////////////////////////////////////////////////////// 1 4 this 3 558  
75 0 0 7 74 548 0 0 374 ////////////////////////////////////////////////////////////////////
//     Function: CurveFitter::make_nurbs
//       Access: Public
//  Description: Converts the current set of data points into a
//               NURBS curve.  This gives a smoother curve than
//               produced by MakeHermite().
//////////////////////////////////////////////////////////////////// 1 4 this 3 558  
76 0 0 4 75 535 0 0 215 ////////////////////////////////////////////////////////////////////
//     Function: CurveFitter::output
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 558  3 out 1 542  
77 0 0 4 76 535 0 0 214 ////////////////////////////////////////////////////////////////////
//     Function: CurveFitter::write
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 558  3 out 1 542  
78 0 0 7 77 547 0 0 0 0 
79 0 0 7 79 560 0 0 223 ////////////////////////////////////////////////////////////////////
//     Function: PiecewiseCurve::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
80 0 0 7 80 547 0 0 0 0 
81 0 0 7 82 561 0 0 224 ////////////////////////////////////////////////////////////////////
//     Function: HermiteCurve::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
82 0 0 7 82 561 0 0 316 ////////////////////////////////////////////////////////////////////
//     Function: HermiteCurve::Copy Constructor
//       Access: Published
//  Description: Constructs a Hermite from the indicated (possibly
//               non-hermite) curve.
//////////////////////////////////////////////////////////////////// 1 2 pc 1 529  
83 0 0 6 83 528 0 0 265 ////////////////////////////////////////////////////////////////////
//     Function: HermiteCurve::get_num_cvs
//       Access: Published
//  Description: Returns the number of CV's in the curve.
//////////////////////////////////////////////////////////////////// 1 4 this 3 562  
84 0 0 6 84 528 0 0 908 ////////////////////////////////////////////////////////////////////
//     Function: HermiteCurve::insert_cv
//       Access: Published
//  Description: Inserts a new CV at the given parametric point along
//               the curve.  If this parametric point is already on
//               the curve, the CV is assigned an index between its
//               two neighbors and the indices of all following CV's
//               are incremented by 1; its in and out tangents are
//               chosen to keep the curve consistent.  If the new
//               parametric point is beyond the end of the existing
//               curve, the curve is extended to meet it and the new
//               CV's position, in tangent, and out tangent are set to
//               zero.
//
//               The index number of the new CV is returned.
//////////////////////////////////////////////////////////////////// 2 4 this 3 561  1 t 1 532  
85 0 0 6 85 528 0 0 0 3 4 this 3 561  4 type 1 528  1 v 1 555  
86 0 0 6 85 528 0 0 392 ////////////////////////////////////////////////////////////////////
//     Function: HermiteCurve::append_cv
//       Access: Published
//  Description: Adds a new CV to the end of the curve.  The new CV is
//               given initial in/out tangents of 0.  The return value
//               is the index of the new CV.
//////////////////////////////////////////////////////////////////// 5 4 this 3 561  4 type 1 528  1 x 1 532  1 y 1 532  1 z 1 532  
87 0 0 6 86 531 0 0 326 ////////////////////////////////////////////////////////////////////
//     Function: HermiteCurve::remove_cv
//       Access: Published
//  Description: Removes the given CV from the curve.  Returns true if
//               the CV existed, false otherwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 561  1 n 1 528  
88 0 0 4 87 535 0 0 260 ////////////////////////////////////////////////////////////////////
//     Function: HermiteCurve::remove_all_cvs
//       Access: Published
//  Description: Removes all CV's from the curve.
//////////////////////////////////////////////////////////////////// 1 4 this 3 561  
89 0 0 6 88 531 0 0 907 ////////////////////////////////////////////////////////////////////
//     Function: HermiteCurve::set_cv_type
//       Access: Published
//  Description: Changes the given CV's continuity type.  Legal values
//               are HC_CUT, HC_FREE, HC_G1, or HC_SMOOTH.
//
//               Other than HC_CUT, these have no effect on the actual
//               curve; it remains up to user software to impose the
//               constraints these imply.
//
//               HC_CUT implies a disconnection of the curve; HC_FREE
//               imposes no constraints on the tangents; HC_G1
//               forces the tangents to be collinear, and HC_SMOOTH
//               forces the tangents to be identical.  Setting type
//               type to HC_G1 or HC_SMOOTH may adjust the out
//               tangent to match the in tangent.
//////////////////////////////////////////////////////////////////// 3 4 this 3 561  1 n 1 528  4 type 1 528  
90 0 0 6 89 531 0 0 0 3 4 this 3 561  1 n 1 528  1 v 1 555  
91 0 0 6 89 531 0 0 258 ////////////////////////////////////////////////////////////////////
//     Function: HermiteCurve::set_cv_point
//       Access: Published
//  Description: Changes the given CV's position.
//////////////////////////////////////////////////////////////////// 5 4 this 3 561  1 n 1 528  1 x 1 532  1 y 1 532  1 z 1 532  
92 0 0 6 90 531 0 0 0 3 4 this 3 561  1 n 1 528  1 v 1 555  
93 0 0 6 90 531 0 0 364 ////////////////////////////////////////////////////////////////////
//     Function: HermiteCurve::set_cv_in
//       Access: Published
//  Description: Changes the given CV's in tangent.  Depending on the
//               continuity type, this may also adjust the out
//               tangent.
//////////////////////////////////////////////////////////////////// 5 4 this 3 561  1 n 1 528  1 x 1 532  1 y 1 532  1 z 1 532  
94 0 0 6 91 531 0 0 0 3 4 this 3 561  1 n 1 528  1 v 1 555  
95 0 0 6 91 531 0 0 365 ////////////////////////////////////////////////////////////////////
//     Function: HermiteCurve::set_cv_out
//       Access: Published
//  Description: Changes the given CV's out tangent.  Depending on the
//               continuity type, this may also adjust the in
//               tangent.
//////////////////////////////////////////////////////////////////// 5 4 this 3 561  1 n 1 528  1 x 1 532  1 y 1 532  1 z 1 532  
96 0 0 6 92 531 0 0 332 ////////////////////////////////////////////////////////////////////
//     Function: HermiteCurve::set_cv_tstart
//       Access: Published
//  Description: Changes the given CV's parametric starting time.
//               This may affect the shape of the curve.
//////////////////////////////////////////////////////////////////// 3 4 this 3 561  1 n 1 528  6 tstart 1 532  
97 0 0 6 93 531 0 0 274 ////////////////////////////////////////////////////////////////////
//     Function: HermiteCurve::set_cv_name
//       Access: Published
//  Description: Changes the name associated with a particular CV.
//////////////////////////////////////////////////////////////////// 3 4 this 3 561  1 n 1 528  4 name 1 564  
98 0 0 6 94 528 0 0 365 ////////////////////////////////////////////////////////////////////
//     Function: HermiteCurve::get_cv_type
//       Access: Published
//  Description: Returns the given CV's continuity type, HC_CUT,
//               HC_FREE, HC_G1, or HC_SMOOTH, or 0 if there is
//               no such CV.
//////////////////////////////////////////////////////////////////// 2 4 this 3 562  1 n 1 528  
99 0 0 6 95 555 0 0 263 ////////////////////////////////////////////////////////////////////
//     Function: HermiteCurve::get_cv_point
//       Access: Published
//  Description: Returns the position of the given CV.
//////////////////////////////////////////////////////////////////// 2 4 this 3 562  1 n 1 528  
100 0 0 4 95 535 0 0 0 3 4 this 3 562  1 n 1 528  1 v 1 536  
101 0 0 6 96 555 0 0 262 ////////////////////////////////////////////////////////////////////
//     Function: HermiteCurve::get_cv_in
//       Access: Published
//  Description: Returns the in tangent of the given CV.
//////////////////////////////////////////////////////////////////// 2 4 this 3 562  1 n 1 528  
102 0 0 4 96 535 0 0 0 3 4 this 3 562  1 n 1 528  1 v 1 536  
103 0 0 6 97 555 0 0 264 ////////////////////////////////////////////////////////////////////
//     Function: HermiteCurve::get_cv_out
//       Access: Published
//  Description: Returns the out tangent of the given CV.
//////////////////////////////////////////////////////////////////// 2 4 this 3 562  1 n 1 528  
104 0 0 4 97 535 0 0 0 3 4 this 3 562  1 n 1 528  1 v 1 536  
105 0 0 6 98 532 0 0 307 ////////////////////////////////////////////////////////////////////
//     Function: HermiteCurve::get_cv_tstart
//       Access: Published
//  Description: Returns the starting point in parametric space of the
//               given CV.
//////////////////////////////////////////////////////////////////// 2 4 this 3 562  1 n 1 528  
106 0 0 6 99 564 0 0 267 ////////////////////////////////////////////////////////////////////
//     Function: HermiteCurve::get_cv_name
//       Access: Published
//  Description: Returns the name of the given CV, or NULL.
//////////////////////////////////////////////////////////////////// 2 4 this 3 562  1 n 1 528  
107 0 0 4 100 535 0 0 221 ////////////////////////////////////////////////////////////////////
//     Function: HermiteCurve::write_cv
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 562  3 out 1 542  1 n 1 528  
108 0 0 7 101 547 0 0 0 0 
109 0 0 4 104 535 0 0 0 2 4 this 3 565  5 order 1 528  
110 0 0 6 105 528 0 0 0 1 4 this 3 566  
111 0 0 6 106 528 0 0 0 1 4 this 3 566  
112 0 0 6 107 528 0 0 0 1 4 this 3 566  
113 0 0 6 108 531 0 0 0 2 4 this 3 565  1 t 1 532  
114 0 0 6 109 528 0 0 229 ////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveInterface::append_cv
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 565  1 v 1 555  
115 0 0 6 109 528 0 0 229 ////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveInterface::append_cv
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 565  1 v 1 568  
116 0 0 6 109 528 0 0 229 ////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveInterface::append_cv
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 4 4 this 3 565  1 x 1 532  1 y 1 532  1 z 1 532  
117 0 0 6 110 531 0 0 0 2 4 this 3 565  1 n 1 528  
118 0 0 4 111 535 0 0 0 1 4 this 3 565  
119 0 0 6 112 531 0 0 330 ////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveInterface::set_cv_point
//       Access: Public, Scheme
//  Description: Repositions the indicated CV.  Returns true if
//               successful, false otherwise.
//////////////////////////////////////////////////////////////////// 3 4 this 3 565  1 n 1 528  1 v 1 555  
120 0 0 6 112 531 0 0 330 ////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveInterface::set_cv_point
//       Access: Public, Scheme
//  Description: Repositions the indicated CV.  Returns true if
//               successful, false otherwise.
//////////////////////////////////////////////////////////////////// 5 4 this 3 565  1 n 1 528  1 x 1 532  1 y 1 532  1 z 1 532  
121 0 0 7 113 536 0 0 279 ////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveInterface::get_cv_point
//       Access: Public, Scheme
//  Description: Returns the position of the indicated CV.
//////////////////////////////////////////////////////////////////// 2 4 this 3 566  1 n 1 528  
122 0 0 6 114 531 0 0 331 ////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveInterface::set_cv_weight
//       Access: Published
//  Description: Sets the weight of the indicated CV without affecting
//               its position in 3-d space.
//////////////////////////////////////////////////////////////////// 3 4 this 3 565  1 n 1 528  1 w 1 532  
123 0 0 6 115 532 0 0 273 ////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveInterface::get_cv_weight
//       Access: Published
//  Description: Returns the weight of the indicated CV.
//////////////////////////////////////////////////////////////////// 2 4 this 3 566  1 n 1 528  
124 0 0 6 116 531 0 0 0 3 4 this 3 565  1 n 1 528  1 v 1 568  
125 0 0 7 117 572 0 0 0 2 4 this 3 566  1 n 1 528  
126 0 0 6 118 531 0 0 0 3 4 this 3 565  1 n 1 528  1 t 1 532  
127 0 0 6 119 532 0 0 0 2 4 this 3 566  1 n 1 528  
128 0 0 4 120 535 0 0 228 ////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveInterface::write_cv
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 566  3 out 1 542  1 n 1 528  
129 0 0 7 121 547 0 0 0 0 
130 0 0 7 127 573 383 0 222 ////////////////////////////////////////////////////////////////////
//     Function: NurbsCurve::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
131 0 0 7 127 573 383 0 325 ////////////////////////////////////////////////////////////////////
//     Function: NurbsCurve::Copy Constructor
//       Access: Published
//  Description: Constructs a NURBS curve equivalent to the indicated
//               (possibly non-NURBS) curve.
//////////////////////////////////////////////////////////////////// 1 2 pc 1 529  
132 0 0 7 129 547 0 0 0 0 
133 0 0 7 123 560 0 0 0 1 4 this 3 573  
134 0 0 7 124 573 383 0 0 1 4 this 3 560  
135 0 0 6 125 565 0 0 0 1 4 this 3 573  
136 0 0 7 126 573 383 0 0 1 4 this 3 565  
137 0 0 6 131 532 0 0 315 ////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveResult::get_start_t
//       Access: Published
//  Description: Returns the first legal value of t on the curve.
//               Usually this is 0.0.
//////////////////////////////////////////////////////////////////// 1 4 this 3 574  
138 0 0 6 132 532 0 0 274 ////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveResult::get_end_t
//       Access: Published
//  Description: Returns the last legal value of t on the curve.
//////////////////////////////////////////////////////////////////// 1 4 this 3 574  
139 0 0 6 133 531 0 0 406 ////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveResult::eval_point
//       Access: Published
//  Description: Computes the point on the curve corresponding to the
//               indicated value in parametric time.  Returns true if
//               the t value is valid, false otherwise.
//////////////////////////////////////////////////////////////////// 3 4 this 3 576  1 t 1 532  5 point 1 536  
140 0 0 6 134 531 0 0 456 ////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveResult::eval_tangent
//       Access: Published
//  Description: Computes the tangent to the curve at the indicated
//               point in parametric time.  This tangent vector will
//               not necessarily be normalized, and could be zero.
//               See also eval_point().
//////////////////////////////////////////////////////////////////// 3 4 this 3 576  1 t 1 532  7 tangent 1 536  
141 0 0 6 135 532 0 0 402 ////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveResult::eval_extended_point
//       Access: Published
//  Description: Evaluates the curve in n-dimensional space according
//               to the extended vertices associated with the curve in
//               the indicated dimension.
//////////////////////////////////////////////////////////////////// 3 4 this 3 576  1 t 1 532  1 d 1 528  
142 0 0 6 136 531 0 0 534 ////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveResult::eval_extended_points
//       Access: Published
//  Description: Simultaneously performs eval_extended_point on a
//               contiguous sequence of dimensions.  The dimensions
//               evaluated are d through (d + num_values - 1); the
//               results are filled into the num_values elements in
//               the indicated result array.
//////////////////////////////////////////////////////////////////// 5 4 this 3 576  1 t 1 532  1 d 1 528  6 result 1 577  10 num_values 1 528  
143 0 0 6 137 528 0 0 438 ////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveResult::get_num_segments
//       Access: Published
//  Description: Returns the number of piecewise continuous segments
//               within the curve.  This number is usually not
//               important unless you plan to call
//               eval_segment_point().
//////////////////////////////////////////////////////////////////// 1 4 this 3 574  
144 0 0 4 138 535 0 0 1042 ////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveResult::eval_segment_point
//       Access: Published
//  Description: Evaluates the point on the curve corresponding to the
//               indicated value in parametric time within the
//               indicated curve segment.  t should be in the range
//               [0, 1].
//
//               The curve is internally represented as a number of
//               connected (or possibly unconnected) piecewise
//               continuous segments.  The exact number of segments
//               for a particular curve depends on the knot vector,
//               and is returned by get_num_segments().  Normally,
//               eval_point() is used to evaluate a point along the
//               continuous curve, but when you care more about local
//               continuity, you can use eval_segment_point() to
//               evaluate the points along each segment.
//////////////////////////////////////////////////////////////////// 4 4 this 3 574  7 segment 1 528  1 t 1 532  5 point 1 536  
145 0 0 4 139 535 0 0 479 ////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveResult::eval_segment_tangent
//       Access: Published
//  Description: As eval_segment_point, but computes the tangent to
//               the curve at the indicated point.  The tangent vector
//               will not necessarily be normalized, and could be
//               zero, particularly at the endpoints.
//////////////////////////////////////////////////////////////////// 4 4 this 3 574  7 segment 1 528  1 t 1 532  7 tangent 1 536  
146 0 0 6 140 532 0 0 410 ////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveResult::eval_segment_extended_point
//       Access: Published
//  Description: Evaluates the curve in n-dimensional space according
//               to the extended vertices associated with the curve in
//               the indicated dimension.
//////////////////////////////////////////////////////////////////// 4 4 this 3 574  7 segment 1 528  1 t 1 532  1 d 1 528  
147 0 0 4 141 535 0 0 542 ////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveResult::eval_segment_extended_points
//       Access: Published
//  Description: Simultaneously performs eval_extended_point on a
//               contiguous sequence of dimensions.  The dimensions
//               evaluated are d through (d + num_values - 1); the
//               results are filled into the num_values elements in
//               the indicated result array.
//////////////////////////////////////////////////////////////////// 6 4 this 3 574  7 segment 1 528  1 t 1 532  1 d 1 528  6 result 1 577  10 num_values 1 528  
148 0 0 6 142 532 0 0 482 ////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveResult::get_segment_t
//       Access: Published
//  Description: Accepts a t value in the range [0, 1], and assumed to
//               be relative to the indicated segment (as in
//               eval_segment_point()), and returns the corresponding
//               t value in the entire curve (as in eval_point()).
//////////////////////////////////////////////////////////////////// 3 4 this 3 574  7 segment 1 528  1 t 1 532  
149 0 0 4 143 535 0 0 642 ////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveResult::adaptive_sample
//       Access: Published
//  Description: Determines the set of subdivisions necessary to
//               approximate the curve with a set of linear segments,
//               no point of which is farther than tolerance units
//               from the actual curve.
//
//               After this call, you may walk through the resulting
//               set of samples with get_num_samples(),
//               get_sample_t(), and get_sample_point().
//////////////////////////////////////////////////////////////////// 2 4 this 3 576  9 tolerance 1 532  
150 0 0 6 144 528 0 0 338 ////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveResult::get_num_samples
//       Access: Published
//  Description: Returns the number of sample points generated by the
//               previous call to adaptive_sample().
//////////////////////////////////////////////////////////////////// 1 4 this 3 574  
151 0 0 6 145 532 0 0 343 ////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveResult::get_sample_t
//       Access: Published
//  Description: Returns the t value of the nth sample point generated
//               by the previous call to adaptive_sample().
//////////////////////////////////////////////////////////////////// 2 4 this 3 574  1 n 1 528  
152 0 0 6 146 578 0 0 551 ////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveResult::get_sample_point
//       Access: Published
//  Description: Returns the point on the curve of the nth sample
//               point generated by the previous call to
//               adaptive_sample().
//
//               For tangents, or extended points, you should use
//               get_sample_t() and pass it into eval_tangent() or
//               eval_extended_point().
//////////////////////////////////////////////////////////////////// 2 4 this 3 574  1 n 1 528  
153 0 0 7 148 582 0 0 231 ////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveEvaluator::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
154 0 0 4 149 535 0 0 502 ////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveEvaluator::set_order
//       Access: Published
//  Description: Sets the order of the curve.  This resets the knot
//               vector to the default knot vector for the number of
//               vertices.
//
//               The order must be 1, 2, 3, or 4, and the value is one
//               more than the degree of the curve.
//////////////////////////////////////////////////////////////////// 2 4 this 3 582  5 order 1 528  
155 0 0 6 150 528 0 0 319 ////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveEvaluator::get_order
//       Access: Published
//  Description: Returns the order of the curve as set by a previous
//               call to set_order().
//////////////////////////////////////////////////////////////////// 1 4 this 3 583  
156 0 0 4 151 535 0 0 508 ////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveEvaluator::reset
//       Access: Published
//  Description: Resets all the vertices and knots to their default
//               values, and sets the curve up with the indicated
//               number of vertices.  You must then call set_vertex()
//               repeatedly to fill in all of the vertex values
//               appropriately.
//////////////////////////////////////////////////////////////////// 2 4 this 3 582  12 num_vertices 1 528  
157 0 0 6 152 528 0 0 378 ////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveEvaluator::get_num_vertices
//       Access: Published
//  Description: Returns the number of control vertices in the curve.
//               This is the number passed to the last call to
//               reset().
//////////////////////////////////////////////////////////////////// 1 4 this 3 583  
158 0 0 4 153 535 0 0 459 ////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveEvaluator::set_vertex
//       Access: Published
//  Description: Sets the nth control vertex of the curve.  This
//               flavor sets the vertex as a 3-d coordinate and a
//               weight; the 3-d coordinate values are implicitly
//               scaled up by the weight factor.
//////////////////////////////////////////////////////////////////// 4 4 this 3 582  1 i 1 528  6 vertex 1 555  6 weight 1 532  
159 0 0 4 153 535 0 0 524 ////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveEvaluator::set_vertex
//       Access: Published
//  Description: Sets the nth control vertex of the curve, as a vertex
//               in 4-d homogeneous space.  In this form, the first
//               three components of the vertex should already have
//               been scaled by the fourth component, which is the
//               homogeneous weight.
//////////////////////////////////////////////////////////////////// 3 4 this 3 582  1 i 1 528  6 vertex 1 568  
160 0 0 6 154 568 0 0 336 ////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveEvaluator::get_vertex
//       Access: Published
//  Description: Returns the nth control vertex of the curve, relative
//               to its indicated coordinate space.
//////////////////////////////////////////////////////////////////// 2 4 this 3 583  1 i 1 528  
161 0 0 7 154 572 0 0 332 ////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveEvaluator::get_vertex
//       Access: Published
//  Description: Returns the nth control vertex of the curve, relative
//               to the given coordinate space.
//////////////////////////////////////////////////////////////////// 3 4 this 3 583  1 i 1 528  6 rel_to 1 585  
162 0 0 4 155 535 0 0 758 ////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveEvaluator::set_vertex_space
//       Access: Published
//  Description: Sets the coordinate space of the nth control vertex.
//               If this is not specified, or is set to an empty
//               NodePath, the nth control vertex is deemed to be in
//               the coordinate space passed to evaluate().
//
//               This specifies the space as a fixed NodePath, which
//               is always the same NodePath.  Also see setting the
//               space as a path string, which can specify a different
//               NodePath for different instances of the curve.
//////////////////////////////////////////////////////////////////// 3 4 this 3 582  1 i 1 528  5 space 1 585  
163 0 0 4 155 535 0 0 676 ////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveEvaluator::set_vertex_space
//       Access: Published
//  Description: Sets the coordinate space of the nth control vertex.
//               If this is not specified, or is set to an empty
//               string, the nth control vertex is deemed to be in
//               the coordinate space passed to evaluate().
//
//               This specifies the space as a string, which describes
//               the path to find the node relative to the rel_to
//               NodePath when the curve is evaluated.
//////////////////////////////////////////////////////////////////// 3 4 this 3 582  1 i 1 528  5 space 1 564  
164 0 0 7 156 588 0 0 347 ////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveEvaluator::get_vertex_space
//       Access: Published
//  Description: Returns the coordinate space of the nth control
//               vertex of the curve, expressed as a NodePath.
//////////////////////////////////////////////////////////////////// 3 4 this 3 583  1 i 1 528  6 rel_to 1 585  
165 0 0 4 157 535 0 0 1219 ////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveEvaluator::set_extended_vertex
//       Access: Public
//  Description: Sets an n-dimensional vertex value.  This allows
//               definition of a NURBS surface or curve in a sparse
//               n-dimensional space, typically used for associating
//               additional properties (like color or joint
//               membership) with each vertex of a surface.
//
//               The value d is an arbitrary integer value and
//               specifies the dimension of question for this
//               particular vertex.  Any number of dimensions may be
//               specified, and they need not be consecutive.  If a
//               value for a given dimension is not specified, is it
//               implicitly 0.0.
//
//               The value is implicitly scaled by the homogenous
//               weight value--that is, the fourth component of the
//               value passed to set_vertex().  This means the
//               ordinary vertex must be set first, before the
//               extended vertices can be set.
//////////////////////////////////////////////////////////////////// 4 4 this 3 582  1 i 1 528  1 d 1 528  5 value 1 532  
166 0 0 6 158 532 0 0 443 ////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveEvaluator::get_extended_vertex
//       Access: Public
//  Description: Returns an n-dimensional vertex value.  See
//               set_extended_vertex().  This returns the value set
//               for the indicated dimension, or 0.0 if nothing has
//               been set.
//////////////////////////////////////////////////////////////////// 3 4 this 3 583  1 i 1 528  1 d 1 528  
167 0 0 4 159 535 0 0 546 ////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveEvaluator::set_extended_vertices
//       Access: Public
//  Description: Simultaneously sets several extended values in the
//               slots d through (d + num_values - 1) from the
//               num_values elements of the indicated array.  This is
//               equivalent to calling set_extended_vertex()
//               num_values times.  See set_extended_vertex().
//////////////////////////////////////////////////////////////////// 5 4 this 3 582  1 i 1 528  1 d 1 528  6 values 1 589  10 num_values 1 528  
168 0 0 6 160 528 0 0 354 ////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveEvaluator::get_num_knots
//       Access: Published
//  Description: Returns the number of knot values in the curve.  This
//               is based on the number of vertices and the order.
//////////////////////////////////////////////////////////////////// 1 4 this 3 583  
169 0 0 4 161 535 0 0 447 ////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveEvaluator::set_knot
//       Access: Published
//  Description: Sets the value of the nth knot.  Each knot value
//               should be greater than or equal to the preceding
//               value.  If no knot values are set, a default knot
//               vector is supplied.
//////////////////////////////////////////////////////////////////// 3 4 this 3 582  1 i 1 528  4 knot 1 532  
170 0 0 6 162 532 0 0 263 ////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveEvaluator::get_knot
//       Access: Published
//  Description: Returns the value of the nth knot.
//////////////////////////////////////////////////////////////////// 2 4 this 3 583  1 i 1 528  
171 0 0 4 163 535 0 0 334 ////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveEvaluator::normalize_knots
//       Access: Published
//  Description: Normalizes the knot sequence so that the parametric
//               range of the curve is 0 .. 1.
//////////////////////////////////////////////////////////////////// 1 4 this 3 582  
172 0 0 6 164 528 0 0 354 ////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveEvaluator::get_num_segments
//       Access: Published
//  Description: Returns the number of piecewise continuous segments
//               in the curve.  This is based on the knot vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 583  
173 0 0 7 165 576 0 0 457 ////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveEvaluator::evaluate
//       Access: Published
//  Description: Returns a NurbsCurveResult object that represents the
//               result of applying the knots to all of the current
//               values of the vertices, transformed into the
//               indicated coordinate space.
//////////////////////////////////////////////////////////////////// 2 4 this 3 583  6 rel_to 1 585  
174 0 0 7 165 576 0 0 528 ////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveEvaluator::evaluate
//       Access: Published
//  Description: Returns a NurbsCurveResult object that represents the
//               result of applying the knots to all of the current
//               values of the vertices, transformed into the
//               indicated coordinate space, and then further
//               transformed by the indicated matrix.
//////////////////////////////////////////////////////////////////// 3 4 this 3 583  6 rel_to 1 585  3 mat 1 591  
175 0 0 4 166 535 0 0 227 ////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveEvaluator::output
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 583  3 out 1 542  
176 0 0 6 168 532 0 0 316 ////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceResult::get_start_u
//       Access: Public
//  Description: Returns the first legal value of u on the surface.
//               Usually this is 0.0.
//////////////////////////////////////////////////////////////////// 1 4 this 3 593  
177 0 0 6 169 532 0 0 275 ////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceResult::get_end_u
//       Access: Public
//  Description: Returns the last legal value of u on the surface.
//////////////////////////////////////////////////////////////////// 1 4 this 3 593  
178 0 0 6 170 532 0 0 316 ////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceResult::get_start_v
//       Access: Public
//  Description: Returns the first legal value of v on the surface.
//               Usually this is 0.0.
//////////////////////////////////////////////////////////////////// 1 4 this 3 593  
179 0 0 6 171 532 0 0 275 ////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceResult::get_end_v
//       Access: Public
//  Description: Returns the last legal value of v on the surface.
//////////////////////////////////////////////////////////////////// 1 4 this 3 593  
180 0 0 6 172 531 0 0 415 ////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceResult::eval_point
//       Access: Published
//  Description: Computes the point on the surface corresponding to the
//               indicated value in parametric time.  Returns true if
//               the u, v values are valid, false otherwise.
//////////////////////////////////////////////////////////////////// 4 4 this 3 595  1 u 1 532  1 v 1 532  5 point 1 536  
181 0 0 6 173 531 0 0 457 ////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceResult::eval_normal
//       Access: Published
//  Description: Computes the normal to the surface at the indicated
//               point in parametric time.  This normal vector will
//               not necessarily be normalized, and could be zero.
//               See also eval_point().
//////////////////////////////////////////////////////////////////// 4 4 this 3 595  1 u 1 532  1 v 1 532  6 normal 1 536  
182 0 0 6 174 532 0 0 408 ////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceResult::eval_extended_point
//       Access: Published
//  Description: Evaluates the surface in n-dimensional space according
//               to the extended vertices associated with the surface in
//               the indicated dimension.
//////////////////////////////////////////////////////////////////// 4 4 this 3 595  1 u 1 532  1 v 1 532  1 d 1 528  
183 0 0 6 175 531 0 0 536 ////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceResult::eval_extended_points
//       Access: Published
//  Description: Simultaneously performs eval_extended_point on a
//               contiguous sequence of dimensions.  The dimensions
//               evaluated are d through (d + num_values - 1); the
//               results are filled into the num_values elements in
//               the indicated result array.
//////////////////////////////////////////////////////////////////// 6 4 this 3 595  1 u 1 532  1 v 1 532  1 d 1 528  6 result 1 577  10 num_values 1 528  
184 0 0 6 176 528 0 0 460 ////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceResult::get_num_u_segments
//       Access: Public
//  Description: Returns the number of piecewise continuous segments
//               within the surface in the U direction.  This number
//               is usually not important unless you plan to call
//               eval_segment_point().
//////////////////////////////////////////////////////////////////// 1 4 this 3 593  
185 0 0 6 177 528 0 0 460 ////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceResult::get_num_v_segments
//       Access: Public
//  Description: Returns the number of piecewise continuous segments
//               within the surface in the V direction.  This number
//               is usually not important unless you plan to call
//               eval_segment_point().
//////////////////////////////////////////////////////////////////// 1 4 this 3 593  
186 0 0 4 178 535 0 0 1060 ////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceResult::eval_segment_point
//       Access: Published
//  Description: Evaluates the point on the surface corresponding to the
//               indicated value in parametric time within the
//               indicated surface segment.  u and v should be in the
//               range [0, 1].
//
//               The surface is internally represented as a number of
//               connected (or possibly unconnected) piecewise
//               continuous segments.  The exact number of segments
//               for a particular surface depends on the knot vector,
//               and is returned by get_num_segments().  Normally,
//               eval_point() is used to evaluate a point along the
//               continuous surface, but when you care more about local
//               continuity, you can use eval_segment_point() to
//               evaluate the points along each segment.
//////////////////////////////////////////////////////////////////// 6 4 this 3 593  2 ui 1 528  2 vi 1 528  1 u 1 532  1 v 1 532  5 point 1 536  
187 0 0 4 179 535 0 0 449 ////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceResult::eval_segment_normal
//       Access: Published
//  Description: As eval_segment_point, but computes the normal to
//               the surface at the indicated point.  The normal vector
//               will not necessarily be normalized, and could be
//               zero.
//////////////////////////////////////////////////////////////////// 6 4 this 3 593  2 ui 1 528  2 vi 1 528  1 u 1 532  1 v 1 532  6 normal 1 536  
188 0 0 6 180 532 0 0 416 ////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceResult::eval_segment_extended_point
//       Access: Published
//  Description: Evaluates the surface in n-dimensional space according
//               to the extended vertices associated with the surface in
//               the indicated dimension.
//////////////////////////////////////////////////////////////////// 6 4 this 3 593  2 ui 1 528  2 vi 1 528  1 u 1 532  1 v 1 532  1 d 1 528  
189 0 0 4 181 535 0 0 544 ////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceResult::eval_segment_extended_points
//       Access: Published
//  Description: Simultaneously performs eval_extended_point on a
//               contiguous sequence of dimensions.  The dimensions
//               evaluated are d through (d + num_values - 1); the
//               results are filled into the num_values elements in
//               the indicated result array.
//////////////////////////////////////////////////////////////////// 8 4 this 3 593  2 ui 1 528  2 vi 1 528  1 u 1 532  1 v 1 532  1 d 1 528  6 result 1 577  10 num_values 1 528  
190 0 0 6 182 532 0 0 483 ////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceResult::get_segment_u
//       Access: Public
//  Description: Accepts a u value in the range [0, 1], and assumed to
//               be relative to the indicated segment (as in
//               eval_segment_point()), and returns the corresponding
//               u value in the entire surface (as in eval_point()).
//////////////////////////////////////////////////////////////////// 3 4 this 3 593  2 ui 1 528  1 u 1 532  
191 0 0 6 183 532 0 0 483 ////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceResult::get_segment_v
//       Access: Public
//  Description: Accepts a v value in the range [0, 1], and assumed to
//               be relative to the indicated segment (as in
//               eval_segment_point()), and returns the corresponding
//               v value in the entire surface (as in eval_point()).
//////////////////////////////////////////////////////////////////// 3 4 this 3 593  2 vi 1 528  1 v 1 532  
192 0 0 7 185 596 0 0 233 ////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceEvaluator::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
193 0 0 4 186 535 0 0 528 ////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceEvaluator::set_u_order
//       Access: Published
//  Description: Sets the order of the surface in the U direction.
//               This resets the knot vector to the default knot
//               vector for the number of vertices.
//
//               The order must be 1, 2, 3, or 4, and the value is one
//               more than the degree of the surface.
//////////////////////////////////////////////////////////////////// 2 4 this 3 596  7 u_order 1 528  
194 0 0 6 187 528 0 0 346 ////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceEvaluator::get_u_order
//       Access: Published
//  Description: Returns the order of the surface in the U direction
//               as set by a previous call to set_u_order().
//////////////////////////////////////////////////////////////////// 1 4 this 3 597  
195 0 0 4 188 535 0 0 528 ////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceEvaluator::set_v_order
//       Access: Published
//  Description: Sets the order of the surface in the V direction.
//               This resets the knot vector to the default knot
//               vector for the number of vertices.
//
//               The order must be 1, 2, 3, or 4, and the value is one
//               more than the degree of the surface.
//////////////////////////////////////////////////////////////////// 2 4 this 3 596  7 v_order 1 528  
196 0 0 6 189 528 0 0 346 ////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceEvaluator::get_v_order
//       Access: Published
//  Description: Returns the order of the surface in the V direction
//               as set by a previous call to set_v_order().
//////////////////////////////////////////////////////////////////// 1 4 this 3 597  
197 0 0 4 190 535 0 0 512 ////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceEvaluator::reset
//       Access: Published
//  Description: Resets all the vertices and knots to their default
//               values, and sets the surface up with the indicated
//               number of vertices.  You must then call set_vertex()
//               repeatedly to fill in all of the vertex values
//               appropriately.
//////////////////////////////////////////////////////////////////// 3 4 this 3 596  14 num_u_vertices 1 528  14 num_v_vertices 1 528  
198 0 0 6 191 528 0 0 404 ////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceEvaluator::get_num_u_vertices
//       Access: Published
//  Description: Returns the number of control vertices in the U
//               direction on the surface.  This is the number passed
//               to the last call to reset().
//////////////////////////////////////////////////////////////////// 1 4 this 3 597  
199 0 0 6 192 528 0 0 404 ////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceEvaluator::get_num_v_vertices
//       Access: Published
//  Description: Returns the number of control vertices in the V
//               direction on the surface.  This is the number passed
//               to the last call to reset().
//////////////////////////////////////////////////////////////////// 1 4 this 3 597  
200 0 0 4 193 535 0 0 463 ////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceEvaluator::set_vertex
//       Access: Published
//  Description: Sets the nth control vertex of the surface.  This
//               flavor sets the vertex as a 3-d coordinate and a
//               weight; the 3-d coordinate values are implicitly
//               scaled up by the weight factor.
//////////////////////////////////////////////////////////////////// 5 4 this 3 596  2 ui 1 528  2 vi 1 528  6 vertex 1 555  6 weight 1 532  
201 0 0 4 193 535 0 0 528 ////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceEvaluator::set_vertex
//       Access: Published
//  Description: Sets the nth control vertex of the surface, as a vertex
//               in 4-d homogeneous space.  In this form, the first
//               three components of the vertex should already have
//               been scaled by the fourth component, which is the
//               homogeneous weight.
//////////////////////////////////////////////////////////////////// 4 4 this 3 596  2 ui 1 528  2 vi 1 528  6 vertex 1 568  
202 0 0 6 194 568 0 0 340 ////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceEvaluator::get_vertex
//       Access: Published
//  Description: Returns the nth control vertex of the surface, relative
//               to its indicated coordinate space.
//////////////////////////////////////////////////////////////////// 3 4 this 3 597  2 ui 1 528  2 vi 1 528  
203 0 0 7 194 572 0 0 336 ////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceEvaluator::get_vertex
//       Access: Published
//  Description: Returns the nth control vertex of the surface, relative
//               to the given coordinate space.
//////////////////////////////////////////////////////////////////// 4 4 this 3 597  2 ui 1 528  2 vi 1 528  6 rel_to 1 585  
204 0 0 4 195 535 0 0 762 ////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceEvaluator::set_vertex_space
//       Access: Published
//  Description: Sets the coordinate space of the nth control vertex.
//               If this is not specified, or is set to an empty
//               NodePath, the nth control vertex is deemed to be in
//               the coordinate space passed to evaluate().
//
//               This specifies the space as a fixed NodePath, which
//               is always the same NodePath.  Also see setting the
//               space as a path string, which can specify a different
//               NodePath for different instances of the surface.
//////////////////////////////////////////////////////////////////// 4 4 this 3 596  2 ui 1 528  2 vi 1 528  5 space 1 585  
205 0 0 4 195 535 0 0 680 ////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceEvaluator::set_vertex_space
//       Access: Published
//  Description: Sets the coordinate space of the nth control vertex.
//               If this is not specified, or is set to an empty
//               string, the nth control vertex is deemed to be in
//               the coordinate space passed to evaluate().
//
//               This specifies the space as a string, which describes
//               the path to find the node relative to the rel_to
//               NodePath when the surface is evaluated.
//////////////////////////////////////////////////////////////////// 4 4 this 3 596  2 ui 1 528  2 vi 1 528  5 space 1 564  
206 0 0 7 196 588 0 0 351 ////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceEvaluator::get_vertex_space
//       Access: Published
//  Description: Returns the coordinate space of the nth control
//               vertex of the surface, expressed as a NodePath.
//////////////////////////////////////////////////////////////////// 4 4 this 3 597  2 ui 1 528  2 vi 1 528  6 rel_to 1 585  
207 0 0 4 197 535 0 0 1223 ////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceEvaluator::set_extended_vertex
//       Access: Public
//  Description: Sets an n-dimensional vertex value.  This allows
//               definition of a NURBS surface or surface in a sparse
//               n-dimensional space, typically used for associating
//               additional properties (like color or joint
//               membership) with each vertex of a surface.
//
//               The value d is an arbitrary integer value and
//               specifies the dimension of question for this
//               particular vertex.  Any number of dimensions may be
//               specified, and they need not be consecutive.  If a
//               value for a given dimension is not specified, is it
//               implicitly 0.0.
//
//               The value is implicitly scaled by the homogenous
//               weight value--that is, the fourth component of the
//               value passed to set_vertex().  This means the
//               ordinary vertex must be set first, before the
//               extended vertices can be set.
//////////////////////////////////////////////////////////////////// 5 4 this 3 596  2 ui 1 528  2 vi 1 528  1 d 1 528  5 value 1 532  
208 0 0 6 198 532 0 0 445 ////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceEvaluator::get_extended_vertex
//       Access: Public
//  Description: Returns an n-dimensional vertex value.  See
//               set_extended_vertex().  This returns the value set
//               for the indicated dimension, or 0.0 if nothing has
//               been set.
//////////////////////////////////////////////////////////////////// 4 4 this 3 597  2 ui 1 528  2 vi 1 528  1 d 1 528  
209 0 0 4 199 535 0 0 548 ////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceEvaluator::set_extended_vertices
//       Access: Public
//  Description: Simultaneously sets several extended values in the
//               slots d through (d + num_values - 1) from the
//               num_values elements of the indicated array.  This is
//               equivalent to calling set_extended_vertex()
//               num_values times.  See set_extended_vertex().
//////////////////////////////////////////////////////////////////// 6 4 this 3 596  2 ui 1 528  2 vi 1 528  1 d 1 528  6 values 1 589  10 num_values 1 528  
210 0 0 6 200 528 0 0 396 ////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceEvaluator::get_num_u_knots
//       Access: Published
//  Description: Returns the number of knot values in the surface in
//               the U direction.  This is based on the number of
//               vertices and the order.
//////////////////////////////////////////////////////////////////// 1 4 this 3 597  
211 0 0 4 201 535 0 0 451 ////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceEvaluator::set_u_knot
//       Access: Published
//  Description: Sets the value of the nth knot.  Each knot value
//               should be greater than or equal to the preceding
//               value.  If no knot values are set, a default knot
//               vector is supplied.
//////////////////////////////////////////////////////////////////// 3 4 this 3 596  1 i 1 528  4 knot 1 532  
212 0 0 6 202 532 0 0 267 ////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceEvaluator::get_u_knot
//       Access: Published
//  Description: Returns the value of the nth knot.
//////////////////////////////////////////////////////////////////// 2 4 this 3 597  1 i 1 528  
213 0 0 4 203 535 0 0 359 ////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceEvaluator::normalize_u_knots
//       Access: Published
//  Description: Normalizes the knot sequence so that the parametric
//               range of the surface in the U direction is 0 .. 1.
//////////////////////////////////////////////////////////////////// 1 4 this 3 596  
214 0 0 6 204 528 0 0 396 ////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceEvaluator::get_num_v_knots
//       Access: Published
//  Description: Returns the number of knot values in the surface in
//               the V direction.  This is based on the number of
//               vertices and the order.
//////////////////////////////////////////////////////////////////// 1 4 this 3 597  
215 0 0 4 205 535 0 0 451 ////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceEvaluator::set_v_knot
//       Access: Published
//  Description: Sets the value of the nth knot.  Each knot value
//               should be greater than or equal to the preceding
//               value.  If no knot values are set, a default knot
//               vector is supplied.
//////////////////////////////////////////////////////////////////// 3 4 this 3 596  1 i 1 528  4 knot 1 532  
216 0 0 6 206 532 0 0 267 ////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceEvaluator::get_v_knot
//       Access: Published
//  Description: Returns the value of the nth knot.
//////////////////////////////////////////////////////////////////// 2 4 this 3 597  1 i 1 528  
217 0 0 4 207 535 0 0 359 ////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceEvaluator::normalize_v_knots
//       Access: Published
//  Description: Normalizes the knot sequence so that the parametric
//               range of the surface in the U direction is 0 .. 1.
//////////////////////////////////////////////////////////////////// 1 4 this 3 596  
218 0 0 6 208 528 0 0 396 ////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceEvaluator::get_num_u_segments
//       Access: Published
//  Description: Returns the number of piecewise continuous segments
//               in the surface in the U direction.  This is based on
//               the knot vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 597  
219 0 0 6 209 528 0 0 396 ////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceEvaluator::get_num_v_segments
//       Access: Published
//  Description: Returns the number of piecewise continuous segments
//               in the surface in the V direction.  This is based on
//               the knot vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 597  
220 0 0 7 210 595 0 0 461 ////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceEvaluator::evaluate
//       Access: Published
//  Description: Returns a NurbsSurfaceResult object that represents the
//               result of applying the knots to all of the current
//               values of the vertices, transformed into the
//               indicated coordinate space.
//////////////////////////////////////////////////////////////////// 2 4 this 3 597  6 rel_to 1 585  
221 0 0 4 211 535 0 0 229 ////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceEvaluator::output
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 597  3 out 1 542  
222 0 0 7 213 599 496 0 217 ////////////////////////////////////////////////////////////////////
//     Function: RopeNode::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 name 1 564  
223 0 0 4 217 535 0 0 280 ////////////////////////////////////////////////////////////////////
//     Function: set_curve
//       Access: Published
//  Description: Sets the particular curve represented by the
//               RopeNode.
//////////////////////////////////////////////////////////////////// 2 4 this 3 599  5 curve 1 582  
224 0 0 7 218 582 0 0 255 ////////////////////////////////////////////////////////////////////
//     Function: get_curve
//       Access: Published
//  Description: Returns the curve represented by the RopeNode.
//////////////////////////////////////////////////////////////////// 1 4 this 3 600  
225 0 0 4 219 535 0 0 365 ////////////////////////////////////////////////////////////////////
//     Function: set_render_mode
//       Access: Published
//  Description: Specifies the method used to render the rope.  The
//               simplest is RM_thread, which just draws a one-pixel
//               line segment.
//////////////////////////////////////////////////////////////////// 2 4 this 3 599  11 render_mode 1 524  
226 0 0 6 220 524 0 0 299 ////////////////////////////////////////////////////////////////////
//     Function: get_render_mode
//       Access: Published
//  Description: Returns the method used to render the rope.  See
//               set_render_mode().
//////////////////////////////////////////////////////////////////// 1 4 this 3 600  
227 0 0 4 221 535 0 0 289 ////////////////////////////////////////////////////////////////////
//     Function: set_uv_mode
//       Access: Published
//  Description: Specifies the algorithm to use to generate UV's for
//               the rope.
//////////////////////////////////////////////////////////////////// 2 4 this 3 599  7 uv_mode 1 525  
228 0 0 6 222 525 0 0 287 ////////////////////////////////////////////////////////////////////
//     Function: get_uv_mode
//       Access: Published
//  Description: Returns the algorithm to use to generate UV's for the
//               rope.
//////////////////////////////////////////////////////////////////// 1 4 this 3 600  
229 0 0 4 223 535 0 0 334 ////////////////////////////////////////////////////////////////////
//     Function: set_uv_direction
//       Access: Published
//  Description: Specify true to vary the U coordinate down the length
//               of the rope, or false to vary the V coordinate.
//////////////////////////////////////////////////////////////////// 2 4 this 3 599  10 u_dominant 1 531  
230 0 0 6 224 531 0 0 360 ////////////////////////////////////////////////////////////////////
//     Function: get_uv_direction
//       Access: Published
//  Description: Returns true if the rope runs down the U coordinate
//               of the texture, or false if it runs down the V
//               coordinate.
//////////////////////////////////////////////////////////////////// 1 4 this 3 600  
231 0 0 4 225 535 0 0 452 ////////////////////////////////////////////////////////////////////
//     Function: set_uv_scale
//       Access: Published
//  Description: Specifies an additional scaling factor to apply to
//               generated UV's along the rope.  This scale factor is
//               applied in whichever direction is along the rope, as
//               specified by set_uv_direction().
//////////////////////////////////////////////////////////////////// 2 4 this 3 599  5 scale 1 532  
232 0 0 6 226 532 0 0 296 ////////////////////////////////////////////////////////////////////
//     Function: get_uv_scale
//       Access: Published
//  Description: Returns the scaling factor to apply to generated UV's
//               for the rope.
//////////////////////////////////////////////////////////////////// 1 4 this 3 600  
233 0 0 4 227 535 0 0 441 ////////////////////////////////////////////////////////////////////
//     Function: set_normal_mode
//       Access: Published
//  Description: Specifies the kind of normals to generate for the
//               rope.  This is only applicable when the RenderMode is
//               set to RM_tube; in the other render modes, normals
//               are never generated.
//////////////////////////////////////////////////////////////////// 2 4 this 3 599  11 normal_mode 1 526  
234 0 0 6 228 526 0 0 365 ////////////////////////////////////////////////////////////////////
//     Function: get_normal_mode
//       Access: Published
//  Description: Returns the kind of normals to generate for the rope.
//               This is only applicable when the RenderMode is set to
//               RM_tube.
//////////////////////////////////////////////////////////////////// 1 4 this 3 600  
235 0 0 4 229 535 0 0 723 ////////////////////////////////////////////////////////////////////
//     Function: set_tube_up
//       Access: Published
//  Description: Specifies a normal vector, generally perpendicular to
//               the main axis of the starting point of the curve,
//               that controls the "top" of the curve, when RenderMode
//               is RM_tube.  This is used to orient the vertices that
//               make up the tube.  If this vector is too nearly
//               parallel with the starting direction of the curve,
//               there may be a tendency for the whole tube to
//               gimble-lock around its primary axis.
//////////////////////////////////////////////////////////////////// 2 4 this 3 599  7 tube_up 1 602  
236 0 0 6 230 602 0 0 358 ////////////////////////////////////////////////////////////////////
//     Function: get_tube_up
//       Access: Published
//  Description: Returns the normal vector used to control the "top"
//               of the curve, when RenderMode is RM_tube.  See
//               set_tube_up().
//////////////////////////////////////////////////////////////////// 1 4 this 3 600  
237 0 0 4 231 535 0 0 667 ////////////////////////////////////////////////////////////////////
//     Function: set_use_vertex_color
//       Access: Published
//  Description: Sets the "use vertex color" flag.  When this is true,
//               the R, G, B, A vertex color is assumed to be stored
//               as the dimensions n + 0, n + 1, n + 2, n + 3,
//               respectively, of the extended vertex values, where n
//               is the value returned by
//               get_vertex_color_dimension().  Use
//               NurbsCurveEvaluator::set_extended_vertex() to set
//               these values.
//////////////////////////////////////////////////////////////////// 2 4 this 3 599  4 flag 1 531  
238 0 0 6 232 531 0 0 302 ////////////////////////////////////////////////////////////////////
//     Function: get_use_vertex_color
//       Access: Published
//  Description: Returns the "use vertex color" flag.  See
//               set_use_vertex_color().
//////////////////////////////////////////////////////////////////// 1 4 this 3 600  
239 0 0 6 233 528 0 0 506 ////////////////////////////////////////////////////////////////////
//     Function: get_vertex_color_dimension
//       Access: Published, Static
//  Description: Returns the numeric extended dimension in which the
//               color components should be found.  See
//               NurbsCurveEvaluator::set_extended_vertex().
//
//               The color components will be expected at (n, n + 1, n
//               + 2, n + 3).
//////////////////////////////////////////////////////////////////// 0 
240 0 0 4 234 535 0 0 388 ////////////////////////////////////////////////////////////////////
//     Function: set_num_subdiv
//       Access: Published
//  Description: Specifies the number of subdivisions per cubic
//               segment (that is, per unique knot value) to draw in a
//               fixed uniform tesselation of the curve.
//////////////////////////////////////////////////////////////////// 2 4 this 3 599  10 num_subdiv 1 528  
241 0 0 6 235 528 0 0 315 ////////////////////////////////////////////////////////////////////
//     Function: get_num_subdiv
//       Access: Published
//  Description: Returns the number of subdivisions per cubic segment
//               to draw.  See set_num_subdiv().
//////////////////////////////////////////////////////////////////// 1 4 this 3 600  
242 0 0 4 236 535 0 0 711 ////////////////////////////////////////////////////////////////////
//     Function: set_num_slices
//       Access: Published
//  Description: Specifies the number of radial subdivisions to make
//               if RenderMode is RM_tube.  It is ignored in the other
//               render modes.
//
//               Increasing this number increases the roundness of a
//               cross-section of the tube.  The minimum value for a
//               dimensional tube is 3; setting it to 2 will get you a
//               thin piece of tape (which is similar to RM_billboard,
//               except it won't rotate to face the camera).
//////////////////////////////////////////////////////////////////// 2 4 this 3 599  10 num_slices 1 528  
243 0 0 6 237 528 0 0 388 ////////////////////////////////////////////////////////////////////
//     Function: get_num_slices
//       Access: Published
//  Description: Returns the number of radial subdivisions to make if
//               RenderMode is RM_tube.  It is ignored in the other
//               render modes.  See set_num_slices().
//////////////////////////////////////////////////////////////////// 1 4 this 3 600  
244 0 0 4 238 535 0 0 752 ////////////////////////////////////////////////////////////////////
//     Function: set_use_vertex_thickness
//       Access: Published
//  Description: Sets the "use vertex thickness" flag.  When this is true,
//               the vertex thickness is assumed to be stored as the
//               dimension get_vertex_thickness_dimension(), of the
//               extended vertex values.  Use
//               NurbsCurveEvaluator::set_extended_vertex() to set
//               these values.
//
//               In this mode, the overall thickness is also applied
//               as a scale to the vertex thickness.  Not all render
//               modes support vertex thickness.
//////////////////////////////////////////////////////////////////// 2 4 this 3 599  4 flag 1 531  
245 0 0 6 239 531 0 0 314 ////////////////////////////////////////////////////////////////////
//     Function: get_use_vertex_thickness
//       Access: Published
//  Description: Returns the "use vertex thickness" flag.  See
//               set_use_vertex_thickness().
//////////////////////////////////////////////////////////////////// 1 4 this 3 600  
246 0 0 6 240 528 0 0 409 ////////////////////////////////////////////////////////////////////
//     Function: get_vertex_thickness_dimension
//       Access: Published, Static
//  Description: Returns the numeric extended dimension in which the
//               thickness component should be found.  See
//               NurbsCurveEvaluator::set_extended_vertex().
//////////////////////////////////////////////////////////////////// 0 
247 0 0 4 241 535 0 0 497 ////////////////////////////////////////////////////////////////////
//     Function: set_thickness
//       Access: Published
//  Description: Specifies the thickness of the rope, in pixels or in
//               spatial units, depending on the render mode.  See
//               set_render_mode().
//
//               The thickness may also be specified on a per-vertex
//               basis.  See set_use_vertex_thickness().
//////////////////////////////////////////////////////////////////// 2 4 this 3 599  9 thickness 1 532  
248 0 0 6 242 532 0 0 286 ////////////////////////////////////////////////////////////////////
//     Function: get_thickness
//       Access: Published
//  Description: Returns the thickness of the rope.  See
//               set_thickness().
//////////////////////////////////////////////////////////////////// 1 4 this 3 600  
249 0 0 4 243 535 0 0 451 ////////////////////////////////////////////////////////////////////
//     Function: set_matrix
//       Access: Published
//  Description: Specifies an optional matrix which is used to
//               transform each control vertex after it has been
//               transformed into the RopeNode's coordinate space, but
//               before the polygon vertices are generated.
//////////////////////////////////////////////////////////////////// 2 4 this 3 599  6 matrix 1 591  
250 0 0 4 244 535 0 0 285 ////////////////////////////////////////////////////////////////////
//     Function: clear_matrix
//       Access: Published
//  Description: Resets the node's matrix to identity.  See
//               set_matrix().
//////////////////////////////////////////////////////////////////// 1 4 this 3 599  
251 0 0 6 245 531 0 0 305 ////////////////////////////////////////////////////////////////////
//     Function: has_matrix
//       Access: Published
//  Description: Returns true if the node has a matrix set, false
//               otherwise.  See set_matrix().
//////////////////////////////////////////////////////////////////// 1 4 this 3 600  
252 0 0 6 246 591 0 0 450 ////////////////////////////////////////////////////////////////////
//     Function: get_matrix
//       Access: Published
//  Description: Returns the optional matrix which is used to
//               transform each control vertex after it has been
//               transformed into the RopeNode's coordinate space, but
//               before the polygon vertices are generated.
//////////////////////////////////////////////////////////////////// 1 4 this 3 600  
253 0 0 4 247 535 0 0 461 ////////////////////////////////////////////////////////////////////
//     Function: RopeNode::reset_bound
//       Access: Published
//  Description: Recomputes the bounding volume.  This is normally
//               called automatically, but it must occasionally be
//               called explicitly when the curve has changed
//               properties outside of this node's knowledge.
//////////////////////////////////////////////////////////////////// 2 4 this 3 599  6 rel_to 1 585  
254 0 0 7 248 547 0 0 0 0 
255 0 0 7 251 606 508 0 218 ////////////////////////////////////////////////////////////////////
//     Function: SheetNode::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 name 1 564  
256 0 0 4 252 535 0 0 282 ////////////////////////////////////////////////////////////////////
//     Function: set_surface
//       Access: Public
//  Description: Sets the particular surface represented by the
//               SheetNode.
//////////////////////////////////////////////////////////////////// 2 4 this 3 606  7 surface 1 596  
257 0 0 7 253 596 0 0 257 ////////////////////////////////////////////////////////////////////
//     Function: get_surface
//       Access: Public
//  Description: Returns the surface represented by the SheetNode.
//////////////////////////////////////////////////////////////////// 1 4 this 3 607  
258 0 0 4 254 535 0 0 551 ////////////////////////////////////////////////////////////////////
//     Function: set_use_vertex_color
//       Access: Public
//  Description: Sets the "use vertex color" flag.  When this is true,
//               the R, G, B, A vertex color is assumed to be stored
//               as the dimensions 0, 1, 2, 3, respectively, of the
//               extended vertex values.  Use
//               NurbsCurveEvaluator::set_extended_vertex() to set
//               these values.
//////////////////////////////////////////////////////////////////// 2 4 this 3 606  4 flag 1 531  
259 0 0 6 255 531 0 0 299 ////////////////////////////////////////////////////////////////////
//     Function: get_use_vertex_color
//       Access: Public
//  Description: Returns the "use vertex color" flag.  See
//               set_use_vertex_color().
//////////////////////////////////////////////////////////////////// 1 4 this 3 607  
260 0 0 4 256 535 0 0 425 ////////////////////////////////////////////////////////////////////
//     Function: set_num_u_subdiv
//       Access: Public
//  Description: Specifies the number of subdivisions per cubic
//               segment (that is, per unique knot value) to draw in a
//               fixed uniform tesselation of the surface in the U
//               direction.
//////////////////////////////////////////////////////////////////// 2 4 this 3 606  12 num_u_subdiv 1 528  
261 0 0 6 257 528 0 0 335 ////////////////////////////////////////////////////////////////////
//     Function: get_num_u_subdiv
//       Access: Public
//  Description: Returns the number of subdivisions per cubic segment
//               to draw in the U direction.  See set_num_u_subdiv().
//////////////////////////////////////////////////////////////////// 1 4 this 3 607  
262 0 0 4 258 535 0 0 425 ////////////////////////////////////////////////////////////////////
//     Function: set_num_v_subdiv
//       Access: Public
//  Description: Specifies the number of subdivisions per cubic
//               segment (that is, per unique knot value) to draw in a
//               fixed uniform tesselation of the surface in the V
//               direction.
//////////////////////////////////////////////////////////////////// 2 4 this 3 606  12 num_v_subdiv 1 528  
263 0 0 6 259 528 0 0 335 ////////////////////////////////////////////////////////////////////
//     Function: get_num_v_subdiv
//       Access: Public
//  Description: Returns the number of subdivisions per cubic segment
//               to draw in the V direction.  See set_num_v_subdiv().
//////////////////////////////////////////////////////////////////// 1 4 this 3 607  
264 0 0 4 260 535 0 0 464 ////////////////////////////////////////////////////////////////////
//     Function: SheetNode::reset_bound
//       Access: Published
//  Description: Recomputes the bounding volume.  This is normally
//               called automatically, but it must occasionally be
//               called explicitly when the surface has changed
//               properties outside of this node's knowledge.
//////////////////////////////////////////////////////////////////// 2 4 this 3 606  6 rel_to 1 585  
265 0 0 7 261 547 0 0 0 0 
100
509 15 ParametricCurve 0 75777 15 ParametricCurve 15 ParametricCurve 0 0 0 0 0 0 19 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 0 0 1 0 510 0 0 0 0 370
////////////////////////////////////////////////////////////////////
//       Class : ParametricCurve
// Description : A virtual base class for parametric curves.
//               This encapsulates all curves in 3-d space defined
//               for a single parameter t in the range [0,get_max_t()].
////////////////////////////////////////////////////////////////////

510 9 PandaNode 0 2049 9 PandaNode 9 PandaNode 0 0 0 0 0 0 0 3 617 618 619 0 0 0 0 374
////////////////////////////////////////////////////////////////////
//       Class : PandaNode
// Description : A basic node of the scene graph or data graph.  This
//               is the base class of all specialized nodes, and also
//               serves as a generic node with no special properties.
////////////////////////////////////////////////////////////////////

511 13 CubicCurveseg 0 75777 13 CubicCurveseg 13 CubicCurveseg 0 0 0 0 0 0 1 285 0 0 1 0 509 0 0 0 0 1386
////////////////////////////////////////////////////////////////////
//       Class : CubicCurveseg
// Description : A CubicCurveseg is any curve that can be completely
//               described by four 4-valued basis vectors, one for
//               each dimension in three-space, and one for the
//               homogeneous coordinate.  This includes Beziers,
//               Hermites, and NURBS.
//
//               This class encapsulates a single curve segment of the
//               cubic curve.  Normally, when we think of Bezier and
//               Hermite curves, we think of a piecewise collection of
//               such segments.
//
//               Although this class includes methods such as
//               hermite_basis() and nurbs_basis(), to generate a
//               Hermite and NURBS curve segment, respectively, only
//               the final basis vectors are stored: the product of
//               the basis matrix of the corresponding curve type, and
//               its geometry vectors.  This is the minimum
//               information needed to evaluate the curve.  However,
//               the individual CV's that were used to compute these
//               basis vectors are not retained; this might be handled
//               in a subclass (for instance, HermiteCurve).
////////////////////////////////////////////////////////////////////

512 25 ParametricCurveCollection 0 75777 25 ParametricCurveCollection 25 ParametricCurveCollection 0 0 0 1 286 0 0 28 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 2 620 621 0 1 0 513 0 0 0 0 620
////////////////////////////////////////////////////////////////////
//       Class : ParametricCurveCollection
// Description : This is a set of zero or more ParametricCurves, which
//               may or may not be related.  If they are related, the
//               set should contain no more than one XYZ curve, no
//               more than one HPR curve, and zero or more Timewarp
//               curves, which can then be evaluated as a unit to
//               return a single transformation matrix for a given
//               unit of time.
////////////////////////////////////////////////////////////////////

513 14 ReferenceCount 0 2049 14 ReferenceCount 14 ReferenceCount 0 0 0 0 0 0 0 0 0 0 0 0 425
////////////////////////////////////////////////////////////////////
//       Class : ReferenceCount
// Description : A base class for all things that want to be
//               reference-counted.  ReferenceCount works in
//               conjunction with PointerTo to automatically delete
//               objects when the last pointer to them goes away.
////////////////////////////////////////////////////////////////////

514 11 CurveFitter 0 26625 11 CurveFitter 11 CurveFitter 0 0 0 1 315 316 0 20 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 0 0 0 0 0 183
////////////////////////////////////////////////////////////////////
//       Class : CurveFitter
// Description :
////////////////////////////////////////////////////////////////////

515 14 PiecewiseCurve 0 75777 14 PiecewiseCurve 14 PiecewiseCurve 0 0 0 1 337 0 0 1 338 0 0 1 0 509 0 0 0 0 405
////////////////////////////////////////////////////////////////////
//       Class : PiecewiseCurve
// Description : A PiecewiseCurve is a curve made up of several curve
//               segments, connected in a head-to-tail fashion.  The
//               length of each curve segment in parametric space is
//               definable.
////////////////////////////////////////////////////////////////////

516 12 HermiteCurve 0 75777 12 HermiteCurve 12 HermiteCurve 0 0 0 1 339 0 0 19 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 0 0 1 0 515 0 0 0 0 700
////////////////////////////////////////////////////////////////////
//       Class : HermiteCurve
// Description : A parametric curve defined by a sequence of control
//               vertices, each with an in and out tangent.
//
//               This class is actually implemented as a
//               PiecewiseCurve made up of several CubicCurvesegs,
//               each of which is created using the hermite_basis()
//               method.  The HermiteCurve class itself keeps its own
//               list of the CV's that are used to define the curve
//               (since the CubicCurveseg class doesn't retain these).
////////////////////////////////////////////////////////////////////

517 19 NurbsCurveInterface 0 26625 19 NurbsCurveInterface 19 NurbsCurveInterface 0 0 0 0 359 0 18 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 2 622 623 0 0 0 0 454
////////////////////////////////////////////////////////////////////
//       Class : NurbsCurveInterface
// Description : This abstract class defines the interface only for a
//               Nurbs-style curve, with knots and coordinates in
//               homogeneous space.
//
//               The NurbsCurve class inherits both from this and from
//               ParametricCurve.
////////////////////////////////////////////////////////////////////

518 10 NurbsCurve 0 26625 10 NurbsCurve 10 NurbsCurve 0 0 0 1 382 383 0 1 384 0 0 2 3 515 378 379 3 517 380 381 0 0 1243
////////////////////////////////////////////////////////////////////
//       Class : NurbsCurve
// Description : A Nonuniform Rational B-Spline.
//
//               This class is actually implemented as a
//               PiecewiseCurve made up of several CubicCurvesegs,
//               each of which is created using the nurbs_basis()
//               method.  The list of CV's and knots is kept here,
//               within the NurbsCurve class.
//
//               This class is the original Panda-native
//               implementation of a NURBS curve.  It is typedeffed as
//               "NurbsCurve" and performs all NURBS curve functions
//               if we do not have the NURBS++ library available.
//
//               However, if we *do* have the NURBS++ library, another
//               class exists, the NurbsPPCurve, which is a wrapper
//               around that library and provides some additional
//               functionality.  In that case, the other class is
//               typedeffed to "NurbsCurve" instead of this one, and
//               performs most of the NURBS curve functions.  This
//               class then becomes vestigial.
////////////////////////////////////////////////////////////////////

519 16 NurbsCurveResult 0 75777 16 NurbsCurveResult 16 NurbsCurveResult 0 0 0 0 0 0 16 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 2 624 625 0 1 0 513 0 0 0 0 748
////////////////////////////////////////////////////////////////////
//       Class : NurbsCurveResult
// Description : The result of a NurbsCurveEvaluator.  This object
//               represents a curve in a particular coordinate space.
//               It can return the point and/or tangent to the curve
//               at any point.
//
//               This is not related to NurbsCurve, CubicCurveseg or
//               any of the ParametricCurve-derived objects in this
//               module.  It is a completely parallel implementation
//               of NURBS curves, and will probably eventually replace
//               the whole ParametricCurve class hierarchy.
////////////////////////////////////////////////////////////////////

520 19 NurbsCurveEvaluator 0 75777 19 NurbsCurveEvaluator 19 NurbsCurveEvaluator 0 0 0 1 401 0 0 18 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 2 626 627 0 1 0 513 0 0 0 0 808
////////////////////////////////////////////////////////////////////
//       Class : NurbsCurveEvaluator
// Description : This class is an abstraction for evaluating NURBS
//               curves.  It accepts an array of vertices, each of
//               which may be in a different coordinate space (as
//               defined by a NodePath), as well as an optional knot
//               vector.
//
//               This is not related to NurbsCurve, CubicCurveseg or
//               any of the ParametricCurve-derived objects in this
//               module.  It is a completely parallel implementation
//               of NURBS curves, and will probably eventually replace
//               the whole ParametricCurve class hierarchy.
////////////////////////////////////////////////////////////////////

521 18 NurbsSurfaceResult 0 75777 18 NurbsSurfaceResult 18 NurbsSurfaceResult 0 0 0 0 0 0 16 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 0 0 1 0 513 0 0 0 0 415
////////////////////////////////////////////////////////////////////
//       Class : NurbsSurfaceResult
// Description : The result of a NurbsSurfaceEvaluator.  This object
//               represents a surface in a particular coordinate space.
//               It can return the point and/or normal to the surface
//               at any point.
////////////////////////////////////////////////////////////////////

522 21 NurbsSurfaceEvaluator 0 75777 21 NurbsSurfaceEvaluator 21 NurbsSurfaceEvaluator 0 0 0 1 436 0 0 26 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 2 628 629 0 1 0 513 0 0 0 0 472
////////////////////////////////////////////////////////////////////
//       Class : NurbsSurfaceEvaluator
// Description : This class is an abstraction for evaluating NURBS
//               surfaces.  It accepts an array of vertices, each of
//               which may be in a different coordinate space (as
//               defined by a NodePath), as well as an optional knot
//               vector.
////////////////////////////////////////////////////////////////////

523 8 RopeNode 0 141313 8 RopeNode 8 RopeNode 0 0 0 1 463 496 0 32 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 0 0 1 0 510 0 0 0 3 524 525 526 702
////////////////////////////////////////////////////////////////////
//       Class : RopeNode
// Description : This class draws a visible representation of the
//               NURBS curve stored in its NurbsCurveEvaluator.  It
//               automatically recomputes the curve every frame.
//
//               This is not related to NurbsCurve, CubicCurveseg or
//               any of the ParametricCurve-derived objects in this
//               module.  It is a completely parallel implementation
//               of NURBS curves, and will probably eventually replace
//               the whole ParametricCurve class hierarchy.
////////////////////////////////////////////////////////////////////

524 10 RenderMode 0 794624 20 RopeNode::RenderMode 20 RopeNode::RenderMode 523 0 0 0 0 0 0 0 0 0 4 9 RM_thread 19 RopeNode::RM_thread 59
// Render the rope as a one-pixel thread using a linestrip.
0 7 RM_tape 17 RopeNode::RM_tape 93
// Render the rope as a triangle strip oriented to be
// perpendicular to the tube_up vector.
1 12 RM_billboard 22 RopeNode::RM_billboard 90
// Render the rope as a triangle strip oriented to be
// perpendicular to the view vector.
2 7 RM_tube 17 RopeNode::RM_tube 62
// Render the rope as a hollow tube extruded along its length.
3 0 0

525 6 UVMode 0 794624 16 RopeNode::UVMode 16 RopeNode::UVMode 523 0 0 0 0 0 0 0 0 0 4 7 UV_none 17 RopeNode::UV_none 39
// Don't generate UV's along the curve.
0 13 UV_parametric 23 RopeNode::UV_parametric 72
// Generate UV's based on the parametric coordinates along the
// curve.
1 11 UV_distance 21 RopeNode::UV_distance 143
// Generate UV's in proportion to spatial distance along the
// curve, by using the distance function to compute the length of
// each segment.
2 12 UV_distance2 22 RopeNode::UV_distance2 311
// As above, but don't bother to take the square root of each
// segment.  The distance is then in proportion to the
// sum-of-squares of the segments along the rope.  If the segments
// are similar in length, this approximates the proportion of
// UV_distance while avoiding hundreds of square root operations.
3 0 0

526 10 NormalMode 0 794624 20 RopeNode::NormalMode 20 RopeNode::NormalMode 523 0 0 0 0 0 0 0 0 0 2 7 NM_none 17 RopeNode::NM_none 26
// Don't generate normals.
0 9 NM_vertex 19 RopeNode::NM_vertex 43
// Generate vertex (smooth-shaded) normals.
1 0 0

527 9 SheetNode 0 141313 9 SheetNode 9 SheetNode 0 0 0 1 497 508 0 10 498 499 500 501 502 503 504 505 506 507 0 0 1 0 510 0 0 0 0 736
////////////////////////////////////////////////////////////////////
//       Class : SheetNode
// Description : This class draws a visible representation of the
//               NURBS surface stored in its NurbsSurfaceEvaluator.  It
//               automatically recomputes the surface every frame.
//
//               This is not related to NurbsSurface, CubicSurfaceseg
//               or any of the ParametricSurface-derived objects in
//               this module.  It is a completely parallel
//               implementation of NURBS surfaces, and will probably
//               eventually replace the whole ParametricSurface class
//               hierarchy.
////////////////////////////////////////////////////////////////////

528 3 int 0 8194 3 int 3 int 0 1 0 0 0 0 0 0 0 0 0 0 0

529 23 ParametricCurve const * 0 8576 23 ParametricCurve const * 23 ParametricCurve const * 0 0 530 0 0 0 0 0 0 0 0 0 0

530 21 ParametricCurve const 0 8832 21 ParametricCurve const 21 ParametricCurve const 0 0 509 0 0 0 0 0 0 0 0 0 0

531 4 bool 0 8194 4 bool 4 bool 0 4 0 0 0 0 0 0 0 0 0 0 0

532 11 PN_stdfloat 0 2105344 11 PN_stdfloat 11 PN_stdfloat 0 0 533 0 0 0 0 0 0 0 0 0 0

533 5 float 0 8194 5 float 5 float 0 2 0 0 0 0 0 0 0 0 0 0 0

534 17 ParametricCurve * 0 8576 17 ParametricCurve * 17 ParametricCurve * 0 0 509 0 0 0 0 0 0 0 0 0 0

535 4 void 0 8194 4 void 4 void 0 6 0 0 0 0 0 0 0 0 0 0 0

536 11 LVecBase3 * 0 8576 11 LVecBase3 * 11 LVecBase3 * 0 0 537 0 0 0 0 0 0 0 0 0 0

537 9 LVecBase3 0 2105344 9 LVecBase3 9 LVecBase3 0 0 538 0 0 0 0 0 0 0 0 0 0

538 10 LVecBase3f 0 2048 10 LVecBase3f 10 LVecBase3f 0 0 0 0 0 0 0 0 0 0 0 0 265
////////////////////////////////////////////////////////////////////
//       Class : LVecBase3
// Description : This is the base class for all three-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

539 10 Filename * 0 8576 10 Filename * 10 Filename * 0 0 540 0 0 0 0 0 0 0 0 0 0

540 8 Filename 0 2048 8 Filename 8 Filename 0 0 0 0 0 0 0 0 0 0 0 0 869
////////////////////////////////////////////////////////////////////
//       Class : Filename
// Description : The name of a file, such as a texture file or an Egg
//               file.  Stores the full pathname, and includes
//               functions for extracting out the directory prefix
//               part and the file extension and stuff.
//
//               A Filename is also aware of the mapping between the
//               Unix-like filename convention we use internally, and
//               the local OS's specific filename convention, and it
//               knows how to perform basic OS-specific I/O, like
//               testing for file existence and searching a
//               searchpath, as well as the best way to open an
//               fstream for reading or writing.
////////////////////////////////////////////////////////////////////

541 16 CoordinateSystem 0 532480 16 CoordinateSystem 16 CoordinateSystem 0 0 0 0 0 0 0 0 0 0 6 10 CS_default 10 CS_default 213
// The CS_default entry does not refer to a particular coordinate
// system, but rather to the value stored in
// default_coordinate_system, which in turn is loaded from the
// config variable "coordinate-system".
0 12 CS_zup_right 12 CS_zup_right 0
1 12 CS_yup_right 12 CS_yup_right 0
2 11 CS_zup_left 11 CS_zup_left 0
3 11 CS_yup_left 11 CS_yup_left 0
4 10 CS_invalid 10 CS_invalid 155
// CS_invalid is not a coordinate system at all.  It can be used in
// user-input processing code to indicate a contradictory coordinate
// system request.
5 0 0

542 9 ostream * 0 8576 9 ostream * 9 ostream * 0 0 543 0 0 0 0 0 0 0 0 0 0

543 7 ostream 0 2048 7 ostream 7 ostream 0 0 0 0 0 0 0 0 0 0 0 0 0

544 16 Filename const * 0 8576 16 Filename const * 16 Filename const * 0 0 545 0 0 0 0 0 0 0 0 0 0

545 14 Filename const 0 8832 14 Filename const 14 Filename const 0 0 540 0 0 0 0 0 0 0 0 0 0

546 10 TypeHandle 0 2048 10 TypeHandle 10 TypeHandle 0 0 0 0 0 0 0 0 0 0 0 0 1098
////////////////////////////////////////////////////////////////////
//       Class : TypeHandle
// Description : TypeHandle is the identifier used to differentiate
//               C++ class types.  Any C++ classes that inherit from
//               some base class, and must be differentiated at run
//               time, should store a static TypeHandle object that
//               can be queried through a static member function
//               named get_class_type().  Most of the time, it is also
//               desirable to inherit from TypedObject, which provides
//               some virtual functions to return the TypeHandle for a
//               particular instance.
//
//               At its essence, a TypeHandle is simply a unique
//               identifier that is assigned by the TypeRegistry.  The
//               TypeRegistry stores a tree of TypeHandles, so that
//               ancestry of a particular type may be queried, and the
//               type name may be retrieved for run-time display.
////////////////////////////////////////////////////////////////////

547 12 TypeHandle * 0 8576 12 TypeHandle * 12 TypeHandle * 0 0 546 0 0 0 0 0 0 0 0 0 0

548 27 ParametricCurveCollection * 0 8576 27 ParametricCurveCollection * 27 ParametricCurveCollection * 0 0 512 0 0 0 0 0 0 0 0 0 0

549 11 PandaNode * 0 8576 11 PandaNode * 11 PandaNode * 0 0 510 0 0 0 0 0 0 0 0 0 0

550 33 ParametricCurveCollection const * 0 8576 33 ParametricCurveCollection const * 33 ParametricCurveCollection const * 0 0 551 0 0 0 0 0 0 0 0 0 0

551 31 ParametricCurveCollection const 0 8832 31 ParametricCurveCollection const 31 ParametricCurveCollection const 0 0 512 0 0 0 0 0 0 0 0 0 0

552 10 LMatrix4 * 0 8576 10 LMatrix4 * 10 LMatrix4 * 0 0 553 0 0 0 0 0 0 0 0 0 0

553 8 LMatrix4 0 2105344 8 LMatrix4 8 LMatrix4 0 0 554 0 0 0 0 0 0 0 0 0 0

554 9 LMatrix4f 0 2048 9 LMatrix4f 9 LMatrix4f 0 0 0 0 0 0 0 3 630 631 632 0 0 0 0 215
////////////////////////////////////////////////////////////////////
//       Class : LMatrix4
// Description : This is a 4-by-4 transform matrix.
////////////////////////////////////////////////////////////////////

555 17 LVecBase3 const * 0 8576 17 LVecBase3 const * 17 LVecBase3 const * 0 0 556 0 0 0 0 0 0 0 0 0 0

556 15 LVecBase3 const 0 8832 15 LVecBase3 const 15 LVecBase3 const 0 0 537 0 0 0 0 0 0 0 0 0 0

557 13 CurveFitter * 0 8576 13 CurveFitter * 13 CurveFitter * 0 0 514 0 0 0 0 0 0 0 0 0 0

558 19 CurveFitter const * 0 8576 19 CurveFitter const * 19 CurveFitter const * 0 0 559 0 0 0 0 0 0 0 0 0 0

559 17 CurveFitter const 0 8832 17 CurveFitter const 17 CurveFitter const 0 0 514 0 0 0 0 0 0 0 0 0 0

560 16 PiecewiseCurve * 0 8576 16 PiecewiseCurve * 16 PiecewiseCurve * 0 0 515 0 0 0 0 0 0 0 0 0 0

561 14 HermiteCurve * 0 8576 14 HermiteCurve * 14 HermiteCurve * 0 0 516 0 0 0 0 0 0 0 0 0 0

562 20 HermiteCurve const * 0 8576 20 HermiteCurve const * 20 HermiteCurve const * 0 0 563 0 0 0 0 0 0 0 0 0 0

563 18 HermiteCurve const 0 8832 18 HermiteCurve const 18 HermiteCurve const 0 0 516 0 0 0 0 0 0 0 0 0 0

564 13 atomic string 0 2 13 atomic string 13 atomic string 0 7 0 0 0 0 0 0 0 0 0 0 0

565 21 NurbsCurveInterface * 0 8576 21 NurbsCurveInterface * 21 NurbsCurveInterface * 0 0 517 0 0 0 0 0 0 0 0 0 0

566 27 NurbsCurveInterface const * 0 8576 27 NurbsCurveInterface const * 27 NurbsCurveInterface const * 0 0 567 0 0 0 0 0 0 0 0 0 0

567 25 NurbsCurveInterface const 0 8832 25 NurbsCurveInterface const 25 NurbsCurveInterface const 0 0 517 0 0 0 0 0 0 0 0 0 0

568 17 LVecBase4 const * 0 8576 17 LVecBase4 const * 17 LVecBase4 const * 0 0 569 0 0 0 0 0 0 0 0 0 0

569 15 LVecBase4 const 0 8832 15 LVecBase4 const 15 LVecBase4 const 0 0 570 0 0 0 0 0 0 0 0 0 0

570 9 LVecBase4 0 2105344 9 LVecBase4 9 LVecBase4 0 0 571 0 0 0 0 0 0 0 0 0 0

571 10 LVecBase4f 0 2048 10 LVecBase4f 10 LVecBase4f 0 0 0 0 0 0 0 0 0 0 0 0 265
////////////////////////////////////////////////////////////////////
//       Class : LVecBase4
// Description : This is the base class for all three-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

572 11 LVecBase4 * 0 8576 11 LVecBase4 * 11 LVecBase4 * 0 0 570 0 0 0 0 0 0 0 0 0 0

573 12 NurbsCurve * 0 8576 12 NurbsCurve * 12 NurbsCurve * 0 0 518 0 0 0 0 0 0 0 0 0 0

574 24 NurbsCurveResult const * 0 8576 24 NurbsCurveResult const * 24 NurbsCurveResult const * 0 0 575 0 0 0 0 0 0 0 0 0 0

575 22 NurbsCurveResult const 0 8832 22 NurbsCurveResult const 22 NurbsCurveResult const 0 0 519 0 0 0 0 0 0 0 0 0 0

576 18 NurbsCurveResult * 0 8576 18 NurbsCurveResult * 18 NurbsCurveResult * 0 0 519 0 0 0 0 0 0 0 0 0 0

577 14 PN_stdfloat [] 0 4202496 14 PN_stdfloat [] 14 PN_stdfloat [] 0 0 532 -1 0 0 0 0 0 0 0 0 0 0

578 15 LPoint3 const * 0 8576 15 LPoint3 const * 15 LPoint3 const * 0 0 579 0 0 0 0 0 0 0 0 0 0

579 13 LPoint3 const 0 8832 13 LPoint3 const 13 LPoint3 const 0 0 580 0 0 0 0 0 0 0 0 0 0

580 7 LPoint3 0 2105344 7 LPoint3 7 LPoint3 0 0 581 0 0 0 0 0 0 0 0 0 0

581 8 LPoint3f 0 2048 8 LPoint3f 8 LPoint3f 0 0 0 0 0 0 0 0 0 0 0 0 596
////////////////////////////////////////////////////////////////////
//       Class : LPoint3
// Description : This is a three-component point in space (as opposed
//               to a three-component vector, which represents a
//               direction and a distance).  Some of the methods are
//               slightly different between LPoint3 and LVector3; in
//               particular, subtraction of two points yields a
//               vector, while addition of a vector and a point yields
//               a point.
////////////////////////////////////////////////////////////////////

582 21 NurbsCurveEvaluator * 0 8576 21 NurbsCurveEvaluator * 21 NurbsCurveEvaluator * 0 0 520 0 0 0 0 0 0 0 0 0 0

583 27 NurbsCurveEvaluator const * 0 8576 27 NurbsCurveEvaluator const * 27 NurbsCurveEvaluator const * 0 0 584 0 0 0 0 0 0 0 0 0 0

584 25 NurbsCurveEvaluator const 0 8832 25 NurbsCurveEvaluator const 25 NurbsCurveEvaluator const 0 0 520 0 0 0 0 0 0 0 0 0 0

585 16 NodePath const * 0 8576 16 NodePath const * 16 NodePath const * 0 0 586 0 0 0 0 0 0 0 0 0 0

586 14 NodePath const 0 8832 14 NodePath const 14 NodePath const 0 0 587 0 0 0 0 0 0 0 0 0 0

587 8 NodePath 0 2048 8 NodePath 8 NodePath 0 0 0 0 0 0 0 2 633 634 0 0 0 0 1139
////////////////////////////////////////////////////////////////////
//       Class : NodePath
// Description : NodePath is the fundamental system for disambiguating
//               instances, and also provides a higher-level interface
//               for manipulating the scene graph.
//
//               A NodePath is a list of connected nodes from the root
//               of the graph to any sub-node.  Each NodePath
//               therefore uniquely describes one instance of a node.
//
//               NodePaths themselves are lightweight objects that may
//               easily be copied and passed by value.  Their data is
//               stored as a series of NodePathComponents that are
//               stored on the nodes.  Holding a NodePath will keep a
//               reference count to all the nodes in the path.
//               However, if any node in the path is removed or
//               reparented (perhaps through a different NodePath),
//               the NodePath will automatically be updated to reflect
//               the changes.
////////////////////////////////////////////////////////////////////

588 10 NodePath * 0 8576 10 NodePath * 10 NodePath * 0 0 587 0 0 0 0 0 0 0 0 0 0

589 20 PN_stdfloat const [] 0 4202496 20 PN_stdfloat const [] 20 PN_stdfloat const [] 0 0 590 -1 0 0 0 0 0 0 0 0 0 0

590 17 PN_stdfloat const 0 8832 17 PN_stdfloat const 17 PN_stdfloat const 0 0 532 0 0 0 0 0 0 0 0 0 0

591 16 LMatrix4 const * 0 8576 16 LMatrix4 const * 16 LMatrix4 const * 0 0 592 0 0 0 0 0 0 0 0 0 0

592 14 LMatrix4 const 0 8832 14 LMatrix4 const 14 LMatrix4 const 0 0 553 0 0 0 0 0 0 0 0 0 0

593 26 NurbsSurfaceResult const * 0 8576 26 NurbsSurfaceResult const * 26 NurbsSurfaceResult const * 0 0 594 0 0 0 0 0 0 0 0 0 0

594 24 NurbsSurfaceResult const 0 8832 24 NurbsSurfaceResult const 24 NurbsSurfaceResult const 0 0 521 0 0 0 0 0 0 0 0 0 0

595 20 NurbsSurfaceResult * 0 8576 20 NurbsSurfaceResult * 20 NurbsSurfaceResult * 0 0 521 0 0 0 0 0 0 0 0 0 0

596 23 NurbsSurfaceEvaluator * 0 8576 23 NurbsSurfaceEvaluator * 23 NurbsSurfaceEvaluator * 0 0 522 0 0 0 0 0 0 0 0 0 0

597 29 NurbsSurfaceEvaluator const * 0 8576 29 NurbsSurfaceEvaluator const * 29 NurbsSurfaceEvaluator const * 0 0 598 0 0 0 0 0 0 0 0 0 0

598 27 NurbsSurfaceEvaluator const 0 8832 27 NurbsSurfaceEvaluator const 27 NurbsSurfaceEvaluator const 0 0 522 0 0 0 0 0 0 0 0 0 0

599 10 RopeNode * 0 8576 10 RopeNode * 10 RopeNode * 0 0 523 0 0 0 0 0 0 0 0 0 0

600 16 RopeNode const * 0 8576 16 RopeNode const * 16 RopeNode const * 0 0 601 0 0 0 0 0 0 0 0 0 0

601 14 RopeNode const 0 8832 14 RopeNode const 14 RopeNode const 0 0 523 0 0 0 0 0 0 0 0 0 0

602 16 LVector3 const * 0 8576 16 LVector3 const * 16 LVector3 const * 0 0 603 0 0 0 0 0 0 0 0 0 0

603 14 LVector3 const 0 8832 14 LVector3 const 14 LVector3 const 0 0 604 0 0 0 0 0 0 0 0 0 0

604 8 LVector3 0 2105344 8 LVector3 8 LVector3 0 0 605 0 0 0 0 0 0 0 0 0 0

605 9 LVector3f 0 2048 9 LVector3f 9 LVector3f 0 0 0 0 0 0 0 0 0 0 0 0 598
////////////////////////////////////////////////////////////////////
//       Class : LVector3
// Description : This is a three-component vector distance (as opposed
//               to a three-component point, which represents a
//               particular point in space).  Some of the methods are
//               slightly different between LPoint3 and LVector3; in
//               particular, subtraction of two points yields a
//               vector, while addition of a vector and a point yields
//               a point.
////////////////////////////////////////////////////////////////////

606 11 SheetNode * 0 8576 11 SheetNode * 11 SheetNode * 0 0 527 0 0 0 0 0 0 0 0 0 0

607 17 SheetNode const * 0 8576 17 SheetNode const * 17 SheetNode const * 0 0 608 0 0 0 0 0 0 0 0 0 0

608 15 SheetNode const 0 8832 15 SheetNode const 15 SheetNode const 0 0 527 0 0 0 0 0 0 0 0 0 0

8
609 6 HC_CUT 0 5 1 528 0 1 1 
610 7 HC_FREE 0 5 2 528 0 1 2 
611 5 HC_G1 0 5 3 528 0 1 3 
612 9 HC_SMOOTH 0 5 4 528 0 1 4 
613 7 PCT_HPR 0 5 2 528 0 1 2 
614 8 PCT_NONE 0 5 0 528 0 1 0 
615 5 PCT_T 0 5 3 528 0 1 3 
616 7 PCT_XYZ 0 5 1 528 0 1 1 
0
18
617 0 0 2 11 get_parents 15 get_num_parents 10 get_parent 
618 0 0 2 12 get_children 16 get_num_children 9 get_child 
619 0 0 2 11 get_stashed 15 get_num_stashed 11 get_stashed 
620 0 0 24 10 get_curves 14 get_num_curves 9 get_curve 
621 0 0 24 19 get_timewarp_curves 17 get_num_timewarps 18 get_timewarp_curve 
622 0 0 102 7 get_cvs 11 get_num_cvs 6 get_cv 
623 0 0 102 9 get_knots 13 get_num_knots 8 get_knot 
624 0 0 130 13 get_sample_ts 15 get_num_samples 12 get_sample_t 
625 0 0 130 17 get_sample_points 15 get_num_samples 17 get_sample_points 
626 0 0 147 12 get_vertices 16 get_num_vertices 10 get_vertex 
627 0 0 147 9 get_knots 13 get_num_knots 8 get_knot 
628 0 0 184 11 get_u_knots 15 get_num_u_knots 10 get_u_knot 
629 0 0 184 11 get_v_knots 15 get_num_v_knots 10 get_v_knot 
630 0 0 343 8 get_rows 4 size 7 get_row 
631 0 0 343 8 get_cols 4 size 7 get_col 
632 0 0 343 9 get_row3s 4 size 8 get_row3 
633 0 0 500 9 get_nodes 13 get_num_nodes 8 get_node 
634 0 0 500 13 get_ancestors 13 get_num_nodes 12 get_ancestor 
