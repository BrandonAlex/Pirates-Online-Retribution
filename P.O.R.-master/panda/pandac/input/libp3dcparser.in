1412104967
2 2
13 libp3dcparser 4 zIbG 14 panda3d.direct 
231
246 18 ~DCPackerInterface 0 6 479 37 DCPackerInterface::~DCPackerInterface 0 0 235
////////////////////////////////////////////////////////////////////
//     Function: DCPackerInterface::Destructor
//       Access: Public, Virtual
//  Description: 
////////////////////////////////////////////////////////////////////
52
virtual DCPackerInterface::~DCPackerInterface(void);

247 8 get_name 0 4 479 27 DCPackerInterface::get_name 0 1 1 809
// Filename: dcPackerInterface.I
// Created by:  drose (18Jun04)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: DCPackerInterface::get_name
//       Access: Published
//  Description: Returns the name of this field, or empty string
//               if the field is unnamed.
////////////////////////////////////////////////////////////////////
75
inline basic_string< char > const &DCPackerInterface::get_name(void) const;

248 15 find_seek_index 0 4 479 34 DCPackerInterface::find_seek_index 0 1 2 849
////////////////////////////////////////////////////////////////////
//     Function: DCPackerInterface::find_seek_index
//       Access: Published
//  Description: Returns the index number to be passed to a future
//               call to DCPacker::seek() to seek directly to the
//               named field without having to look up the field name
//               in a table later, or -1 if the named field cannot be
//               found.
//
//               If the named field is nested within a switch or some
//               similar dynamic structure that reveals different
//               fields based on the contents of the data, this
//               mechanism cannot be used to pre-fetch the field index
//               number--you must seek for the field by name.
////////////////////////////////////////////////////////////////////
79
int DCPackerInterface::find_seek_index(basic_string< char > const &name) const;

249 8 as_field 0 6 479 27 DCPackerInterface::as_field 0 2 3 4 474
////////////////////////////////////////////////////////////////////
//     Function: DCPackerInterface::as_field
//       Access: Published, Virtual
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: DCPackerInterface::as_field
//       Access: Published, Virtual
//  Description: 
////////////////////////////////////////////////////////////////////
115
virtual DCField *DCPackerInterface::as_field(void);
virtual DCField const *DCPackerInterface::as_field(void) const;

250 19 as_switch_parameter 0 6 479 38 DCPackerInterface::as_switch_parameter 0 2 5 6 496
////////////////////////////////////////////////////////////////////
//     Function: DCPackerInterface::as_switch_parameter
//       Access: Published, Virtual
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: DCPackerInterface::as_switch_parameter
//       Access: Published, Virtual
//  Description: 
////////////////////////////////////////////////////////////////////
157
virtual DCSwitchParameter *DCPackerInterface::as_switch_parameter(void);
virtual DCSwitchParameter const *DCPackerInterface::as_switch_parameter(void) const;

251 18 as_class_parameter 0 6 479 37 DCPackerInterface::as_class_parameter 0 2 7 8 494
////////////////////////////////////////////////////////////////////
//     Function: DCPackerInterface::as_class_parameter
//       Access: Published, Virtual
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: DCPackerInterface::as_class_parameter
//       Access: Published, Virtual
//  Description: 
////////////////////////////////////////////////////////////////////
153
virtual DCClassParameter *DCPackerInterface::as_class_parameter(void);
virtual DCClassParameter const *DCPackerInterface::as_class_parameter(void) const;

252 11 check_match 0 4 479 30 DCPackerInterface::check_match 0 3 9 10 11 1138
////////////////////////////////////////////////////////////////////
//     Function: DCPackerInterface::check_match
//       Access: Published
//  Description: Returns true if the other interface is bitwise the
//               same as this one--that is, a uint32 only matches a
//               uint32, etc. Names of components, and range limits,
//               are not compared.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: DCPackerInterface::check_match
//       Access: Published
//  Description: Returns true if this interface is bitwise the same as
//               the interface described with the indicated formatted
//               string, e.g. "(uint8, uint8, int16)", or false
//               otherwise.
//
//               If DCFile is not NULL, it specifies the DCFile that
//               was previously loaded, from which some predefined
//               structs and typedefs may be referenced in the
//               description string.
////////////////////////////////////////////////////////////////////
197
inline bool DCPackerInterface::check_match(DCPackerInterface const *other) const;
bool DCPackerInterface::check_match(basic_string< char > const &description, DCFile *dcfile = ((void *)(0))) const;

253 14 ~DCKeywordList 0 4 480 29 DCKeywordList::~DCKeywordList 0 0 221
////////////////////////////////////////////////////////////////////
//     Function: DCKeywordList::Destructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
36
DCKeywordList::~DCKeywordList(void);

254 11 has_keyword 0 4 480 26 DCKeywordList::has_keyword 0 2 12 13 636
////////////////////////////////////////////////////////////////////
//     Function: DCKeywordList::has_keyword
//       Access: Published
//  Description: Returns true if this list includes the indicated
//               keyword, false otherwise.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: DCKeywordList::has_keyword
//       Access: Published
//  Description: Returns true if this list includes the indicated
//               keyword, false otherwise.
////////////////////////////////////////////////////////////////////
137
bool DCKeywordList::has_keyword(basic_string< char > const &name) const;
bool DCKeywordList::has_keyword(DCKeyword const *keyword) const;

255 16 get_num_keywords 0 4 480 31 DCKeywordList::get_num_keywords 0 1 14 274
////////////////////////////////////////////////////////////////////
//     Function: DCKeywordList::get_num_keywords
//       Access: Published
//  Description: Returns the number of keywords in the list.
////////////////////////////////////////////////////////////////////
48
int DCKeywordList::get_num_keywords(void) const;

256 11 get_keyword 0 4 480 26 DCKeywordList::get_keyword 0 1 15 262
////////////////////////////////////////////////////////////////////
//     Function: DCKeywordList::get_keyword
//       Access: Published
//  Description: Returns the nth keyword in the list.
////////////////////////////////////////////////////////////////////
57
DCKeyword const *DCKeywordList::get_keyword(int n) const;

257 19 get_keyword_by_name 0 4 480 34 DCKeywordList::get_keyword_by_name 0 1 16 383
////////////////////////////////////////////////////////////////////
//     Function: DCKeywordList::get_keyword_by_name
//       Access: Published
//  Description: Returns the keyword in the list with the indicated
//               name, or NULL if there is no keyword in the list with
//               that name.
////////////////////////////////////////////////////////////////////
92
DCKeyword const *DCKeywordList::get_keyword_by_name(basic_string< char > const &name) const;

258 16 compare_keywords 0 4 480 31 DCKeywordList::compare_keywords 0 1 17 397
////////////////////////////////////////////////////////////////////
//     Function: DCKeywordList::compare_keywords
//       Access: Published
//  Description: Returns true if this list has the same keywords
//               as the other list, false if some keywords differ.
//               Order is not considered important.
////////////////////////////////////////////////////////////////////
71
bool DCKeywordList::compare_keywords(DCKeywordList const &other) const;

259 27 upcast_to_DCPackerInterface 0 12 481 36 DCField::upcast_to_DCPackerInterface 0 1 52 40
upcast from DCField to DCPackerInterface
62
DCPackerInterface *DCField::upcast_to_DCPackerInterface(void);

260 19 downcast_to_DCField 0 12 479 38 DCPackerInterface::downcast_to_DCField 0 1 53 42
downcast from DCPackerInterface to DCField
54
DCField *DCPackerInterface::downcast_to_DCField(void);

261 23 upcast_to_DCKeywordList 0 12 481 32 DCField::upcast_to_DCKeywordList 0 1 54 36
upcast from DCField to DCKeywordList
54
DCKeywordList *DCField::upcast_to_DCKeywordList(void);

262 19 downcast_to_DCField 0 12 480 34 DCKeywordList::downcast_to_DCField 0 1 55 38
downcast from DCKeywordList to DCField
50
DCField *DCKeywordList::downcast_to_DCField(void);

263 8 ~DCField 0 6 481 17 DCField::~DCField 0 0 224
////////////////////////////////////////////////////////////////////
//     Function: DCField::Destructor
//       Access: Public, Virtual
//  Description:
////////////////////////////////////////////////////////////////////
32
virtual DCField::~DCField(void);

264 10 get_number 0 4 481 19 DCField::get_number 0 1 18 852
// Filename: dcField.I
// Created by:  drose (10Jan06)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: DCField::get_number
//       Access: Published
//  Description: Returns a unique index number associated with this
//               field.  This is defined implicitly when the .dc
//               file(s) are read.
////////////////////////////////////////////////////////////////////
43
inline int DCField::get_number(void) const;

265 9 get_class 0 4 481 18 DCField::get_class 0 1 19 302
////////////////////////////////////////////////////////////////////
//     Function: DCField::get_class
//       Access: Published
//  Description: Returns the DCClass pointer for the class that
//               contains this field.
////////////////////////////////////////////////////////////////////
47
inline DCClass *DCField::get_class(void) const;

266 8 as_field 0 6 481 17 DCField::as_field 0 2 20 21 454
////////////////////////////////////////////////////////////////////
//     Function: DCField::as_field
//       Access: Published, Virtual
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: DCField::as_field
//       Access: Published, Virtual
//  Description: 
////////////////////////////////////////////////////////////////////
95
virtual DCField *DCField::as_field(void);
virtual DCField const *DCField::as_field(void) const;

267 15 as_atomic_field 0 6 481 24 DCField::as_atomic_field 0 2 22 23 794
////////////////////////////////////////////////////////////////////
//     Function: DCField::as_atomic_field
//       Access: Published, Virtual
//  Description: Returns the same field pointer converted to an atomic
//               field pointer, if this is in fact an atomic field;
//               otherwise, returns NULL.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: DCField::as_atomic_field
//       Access: Published, Virtual
//  Description: Returns the same field pointer converted to an atomic
//               field pointer, if this is in fact an atomic field;
//               otherwise, returns NULL.
////////////////////////////////////////////////////////////////////
121
virtual DCAtomicField *DCField::as_atomic_field(void);
virtual DCAtomicField const *DCField::as_atomic_field(void) const;

268 18 as_molecular_field 0 6 481 27 DCField::as_molecular_field 0 2 24 25 808
////////////////////////////////////////////////////////////////////
//     Function: DCField::as_molecular_field
//       Access: Published, Virtual
//  Description: Returns the same field pointer converted to a
//               molecular field pointer, if this is in fact a
//               molecular field; otherwise, returns NULL.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: DCField::as_molecular_field
//       Access: Published, Virtual
//  Description: Returns the same field pointer converted to a
//               molecular field pointer, if this is in fact a
//               molecular field; otherwise, returns NULL.
////////////////////////////////////////////////////////////////////
133
virtual DCMolecularField *DCField::as_molecular_field(void);
virtual DCMolecularField const *DCField::as_molecular_field(void) const;

269 12 as_parameter 0 6 481 21 DCField::as_parameter 0 2 26 27 462
////////////////////////////////////////////////////////////////////
//     Function: DCField::as_parameter
//       Access: Published, Virtual
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: DCField::as_parameter
//       Access: Published, Virtual
//  Description: 
////////////////////////////////////////////////////////////////////
111
virtual DCParameter *DCField::as_parameter(void);
virtual DCParameter const *DCField::as_parameter(void) const;

270 11 format_data 0 4 481 20 DCField::format_data 0 2 28 29 412
////////////////////////////////////////////////////////////////////
//     Function: DCField::format_data
//       Access: Published
//  Description: Given a blob that represents the packed data for this
//               field, returns a string formatting it for human
//               consumption.  Returns empty string if there is an error.
////////////////////////////////////////////////////////////////////
112
basic_string< char > DCField::format_data(basic_string< char > const &packed_data, bool show_field_names = (1));

271 12 parse_string 0 4 481 21 DCField::parse_string 0 1 30 515
////////////////////////////////////////////////////////////////////
//     Function: DCField::parse_string
//       Access: Published
//  Description: Given a human-formatted string (for instance, as
//               returned by format_data(), above) that represents the
//               value of this field, parse the string and return the
//               corresponding packed data.  Returns empty string if
//               there is an error.
////////////////////////////////////////////////////////////////////
89
basic_string< char > DCField::parse_string(basic_string< char > const &formatted_string);

272 15 validate_ranges 0 4 481 24 DCField::validate_ranges 0 1 31 479
////////////////////////////////////////////////////////////////////
//     Function: DCField::validate_ranges
//       Access: Published
//  Description: Verifies that all of the packed values in the field
//               data are within the specified ranges and that there
//               are no extra bytes on the end of the record.  Returns
//               true if all fields are valid, false otherwise.
////////////////////////////////////////////////////////////////////
77
bool DCField::validate_ranges(basic_string< char > const &packed_data) const;

273 17 has_default_value 0 4 481 26 DCField::has_default_value 0 1 32 339
////////////////////////////////////////////////////////////////////
//     Function: DCField::has_default_value
//       Access: Published
//  Description: Returns true if a default value has been explicitly
//               established for this field, false otherwise.
////////////////////////////////////////////////////////////////////
51
inline bool DCField::has_default_value(void) const;

274 17 get_default_value 0 4 481 26 DCField::get_default_value 0 1 33 494
////////////////////////////////////////////////////////////////////
//     Function: DCField::get_default_value
//       Access: Published
//  Description: Returns the default value for this field.  If a
//               default value has been explicitly set
//               (e.g. has_default_value() returns true), returns that
//               value; otherwise, returns an implicit default for the
//               field.
////////////////////////////////////////////////////////////////////
74
inline basic_string< char > const &DCField::get_default_value(void) const;

275 14 is_bogus_field 0 4 481 23 DCField::is_bogus_field 0 1 34 522
////////////////////////////////////////////////////////////////////
//     Function: DCField::is_bogus_field
//       Access: Published
//  Description: Returns true if the field has been flagged as a bogus
//               field.  This is set for fields that are generated by
//               the parser as placeholder for missing fields, as
//               when reading a partial file; it should not occur in a
//               normal valid dc file.
////////////////////////////////////////////////////////////////////
48
inline bool DCField::is_bogus_field(void) const;

276 11 is_required 0 4 481 20 DCField::is_required 0 1 35 312
////////////////////////////////////////////////////////////////////
//     Function: DCField::is_required
//       Access: Published
//  Description: Returns true if the "required" flag is set for this
//               field, false otherwise.
////////////////////////////////////////////////////////////////////
45
inline bool DCField::is_required(void) const;

277 12 is_broadcast 0 4 481 21 DCField::is_broadcast 0 1 36 314
////////////////////////////////////////////////////////////////////
//     Function: DCField::is_broadcast
//       Access: Published
//  Description: Returns true if the "broadcast" flag is set for this
//               field, false otherwise.
////////////////////////////////////////////////////////////////////
46
inline bool DCField::is_broadcast(void) const;

278 6 is_ram 0 4 481 15 DCField::is_ram 0 1 37 302
////////////////////////////////////////////////////////////////////
//     Function: DCField::is_ram
//       Access: Published
//  Description: Returns true if the "ram" flag is set for this
//               field, false otherwise.
////////////////////////////////////////////////////////////////////
40
inline bool DCField::is_ram(void) const;

279 5 is_db 0 4 481 14 DCField::is_db 0 1 38 300
////////////////////////////////////////////////////////////////////
//     Function: DCField::is_db
//       Access: Published
//  Description: Returns true if the "db" flag is set for this
//               field, false otherwise.
////////////////////////////////////////////////////////////////////
39
inline bool DCField::is_db(void) const;

280 9 is_clsend 0 4 481 18 DCField::is_clsend 0 1 39 308
////////////////////////////////////////////////////////////////////
//     Function: DCField::is_clsend
//       Access: Published
//  Description: Returns true if the "clsend" flag is set for this
//               field, false otherwise.
////////////////////////////////////////////////////////////////////
43
inline bool DCField::is_clsend(void) const;

281 9 is_clrecv 0 4 481 18 DCField::is_clrecv 0 1 40 308
////////////////////////////////////////////////////////////////////
//     Function: DCField::is_clrecv
//       Access: Published
//  Description: Returns true if the "clrecv" flag is set for this
//               field, false otherwise.
////////////////////////////////////////////////////////////////////
43
inline bool DCField::is_clrecv(void) const;

282 10 is_ownsend 0 4 481 19 DCField::is_ownsend 0 1 41 310
////////////////////////////////////////////////////////////////////
//     Function: DCField::is_ownsend
//       Access: Published
//  Description: Returns true if the "ownsend" flag is set for this
//               field, false otherwise.
////////////////////////////////////////////////////////////////////
44
inline bool DCField::is_ownsend(void) const;

283 10 is_ownrecv 0 4 481 19 DCField::is_ownrecv 0 1 42 310
////////////////////////////////////////////////////////////////////
//     Function: DCField::is_ownrecv
//       Access: Published
//  Description: Returns true if the "ownrecv" flag is set for this
//               field, false otherwise.
////////////////////////////////////////////////////////////////////
44
inline bool DCField::is_ownrecv(void) const;

284 9 is_airecv 0 4 481 18 DCField::is_airecv 0 1 43 308
////////////////////////////////////////////////////////////////////
//     Function: DCField::is_airecv
//       Access: Published
//  Description: Returns true if the "airecv" flag is set for this
//               field, false otherwise.
////////////////////////////////////////////////////////////////////
43
inline bool DCField::is_airecv(void) const;

285 6 output 0 4 481 15 DCField::output 0 1 44 292
////////////////////////////////////////////////////////////////////
//     Function : DCField::output
//       Access : Published
//  Description : Write a string representation of this instance to
//                <out>.
////////////////////////////////////////////////////////////////////
48
inline void DCField::output(ostream &out) const;

286 5 write 0 4 481 14 DCField::write 0 1 45 286
////////////////////////////////////////////////////////////////////
//     Function : DCField::
//       Access : Published
//  Description : Write a string representation of this instance to
//                <out>.
////////////////////////////////////////////////////////////////////
65
inline void DCField::write(ostream &out, int indent_level) const;

287 9 pack_args 0 4 481 18 DCField::pack_args 0 1 46 470
////////////////////////////////////////////////////////////////////
//     Function: DCField::pack_args
//       Access: Published
//  Description: Packs the Python arguments from the indicated tuple
//               into the packer.  Returns true on success, false on
//               failure.
//
//               It is assumed that the packer is currently positioned
//               on this field.
////////////////////////////////////////////////////////////////////
68
bool DCField::pack_args(DCPacker &packer, PyObject *sequence) const;

288 11 unpack_args 0 4 481 20 DCField::unpack_args 0 1 47 491
////////////////////////////////////////////////////////////////////
//     Function: DCField::unpack_args
//       Access: Published
//  Description: Unpacks the values from the packer, beginning at
//               the current point in the unpack_buffer, into a Python
//               tuple and returns the tuple.
//
//               It is assumed that the packer is currently positioned
//               on this field.
////////////////////////////////////////////////////////////////////
55
PyObject *DCField::unpack_args(DCPacker &packer) const;

289 14 receive_update 0 4 481 23 DCField::receive_update 0 1 48 378
////////////////////////////////////////////////////////////////////
//     Function: DCField::receive_update
//       Access: Published
//  Description: Extracts the update message out of the datagram and
//               applies it to the indicated object by calling the
//               appropriate method.
////////////////////////////////////////////////////////////////////
72
void DCField::receive_update(DCPacker &packer, PyObject *distobj) const;

290 20 client_format_update 0 4 481 29 DCField::client_format_update 0 1 49 388
////////////////////////////////////////////////////////////////////
//     Function: DCField::client_format_update
//       Access: Published
//  Description: Generates a datagram containing the message necessary
//               to send an update for the indicated distributed
//               object from the client.
////////////////////////////////////////////////////////////////////
81
Datagram DCField::client_format_update(unsigned int do_id, PyObject *args) const;

291 16 ai_format_update 0 4 481 25 DCField::ai_format_update 0 1 50 380
////////////////////////////////////////////////////////////////////
//     Function: DCField::ai_format_update
//       Access: Published
//  Description: Generates a datagram containing the message necessary
//               to send an update for the indicated distributed
//               object from the AI.
////////////////////////////////////////////////////////////////////
127
Datagram DCField::ai_format_update(unsigned int do_id, unsigned __int64 to_id, unsigned __int64 from_id, PyObject *args) const;

292 25 ai_format_update_msg_type 0 4 481 34 DCField::ai_format_update_msg_type 0 1 51 426
////////////////////////////////////////////////////////////////////
//     Function: DCField::ai_format_update_msg_type
//       Access: Published
//  Description: Generates a datagram containing the message necessary
//               to send an update, with the msg type,
//               for the indicated distributed
//               object from the AI.
////////////////////////////////////////////////////////////////////
150
Datagram DCField::ai_format_update_msg_type(unsigned int do_id, unsigned __int64 to_id, unsigned __int64 from_id, int msg_type, PyObject *args) const;

293 10 DCPackData 0 4 482 22 DCPackData::DCPackData 0 1 56 709
// Filename: dcPackData.I
// Created by:  drose (15Jun04)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: DCPackData::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
36
inline DCPackData::DCPackData(void);

294 11 ~DCPackData 0 4 482 23 DCPackData::~DCPackData 0 0 222
////////////////////////////////////////////////////////////////////
//     Function: DCPackData::Destructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
37
inline DCPackData::~DCPackData(void);

295 5 clear 0 4 482 17 DCPackData::clear 0 1 57 318
////////////////////////////////////////////////////////////////////
//     Function: DCPackData::clear
//       Access: Published
//  Description: Empties the contents of the data (without necessarily
//               freeing its allocated memory).
////////////////////////////////////////////////////////////////////
36
inline void DCPackData::clear(void);

296 10 get_string 0 4 482 22 DCPackData::get_string 0 1 58 297
////////////////////////////////////////////////////////////////////
//     Function: DCPackData::get_string
//       Access: Published
//  Description: Returns the data buffer as a string.  Also see
//               get_data().
////////////////////////////////////////////////////////////////////
63
inline basic_string< char > DCPackData::get_string(void) const;

297 10 get_length 0 4 482 22 DCPackData::get_length 0 1 59 393
////////////////////////////////////////////////////////////////////
//     Function: DCPackData::get_length
//       Access: Published
//  Description: Returns the current length of the buffer.  This is
//               the number of useful bytes stored in the buffer, not
//               the amount of memory it takes up.
////////////////////////////////////////////////////////////////////
55
inline unsigned int DCPackData::get_length(void) const;

298 8 DCPacker 0 4 483 18 DCPacker::DCPacker 0 1 60 221
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
25
DCPacker::DCPacker(void);

299 9 ~DCPacker 0 4 483 19 DCPacker::~DCPacker 0 0 220
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::Destructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
26
DCPacker::~DCPacker(void);

300 10 clear_data 0 4 483 20 DCPacker::clear_data 0 1 61 928
// Filename: dcPacker.I
// Created by:  drose (15Jun04)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::clear_data
//       Access: Published
//  Description: Empties the data in the pack buffer and unpack
//               buffer.  This should be called between calls to
//               begin_pack(), unless you want to concatenate all of
//               the pack results together.
////////////////////////////////////////////////////////////////////
39
inline void DCPacker::clear_data(void);

301 10 begin_pack 0 4 483 20 DCPacker::begin_pack 0 1 62 703
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::begin_pack
//       Access: Published
//  Description: Begins a packing session.  The parameter is the DC
//               object that describes the packing format; it may be a
//               DCParameter or DCField.
//
//               Unless you call clear_data() between sessions,
//               multiple packing sessions will be concatenated
//               together into the same buffer.  If you wish to add
//               bytes to the buffer between packing sessions, use
//               append_data() or get_write_pointer().
////////////////////////////////////////////////////////////////////
57
void DCPacker::begin_pack(DCPackerInterface const *root);

302 8 end_pack 0 4 483 18 DCPacker::end_pack 0 1 63 382
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::end_pack
//       Access: Published, Virtual
//  Description: Finishes a packing session.
//
//               The return value is true on success, or false if
//               there has been some error during packing.
////////////////////////////////////////////////////////////////////
30
bool DCPacker::end_pack(void);

303 15 set_unpack_data 0 4 483 25 DCPacker::set_unpack_data 0 1 64 768
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::set_unpack_data
//       Access: Public
//  Description: Sets up the unpack_data pointer.  You may call this
//               before calling the version of begin_unpack() that
//               takes only one parameter.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: DCPacker::set_unpack_data
//       Access: Public
//  Description: Sets up the unpack_data pointer.  You may call this
//               before calling the version of begin_unpack() that
//               takes only one parameter.
////////////////////////////////////////////////////////////////////
65
void DCPacker::set_unpack_data(basic_string< char > const &data);

304 12 begin_unpack 0 4 483 22 DCPacker::begin_unpack 0 1 65 688
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::begin_unpack
//       Access: Public
//  Description: Begins an unpacking session.  You must have
//               previously called set_unpack_data() to specify a
//               buffer to unpack.
//
//               If there was data left in the buffer after a previous
//               begin_unpack() .. end_unpack() session, the new
//               session will resume from the current point.  This
//               method may be used, therefore, to unpack a sequence
//               of objects from the same buffer.
////////////////////////////////////////////////////////////////////
59
void DCPacker::begin_unpack(DCPackerInterface const *root);

305 10 end_unpack 0 4 483 20 DCPacker::end_unpack 0 1 66 440
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::end_unpack
//       Access: Published
//  Description: Finishes the unpacking session.
//
//               The return value is true on success, or false if
//               there has been some error during unpacking (or if all
//               fields have not been unpacked).
////////////////////////////////////////////////////////////////////
32
bool DCPacker::end_unpack(void);

306 12 begin_repack 0 4 483 22 DCPacker::begin_repack 0 1 67 937
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::begin_repack
//       Access: Public
//  Description: Begins a repacking session.  You must have previously
//               called set_unpack_data() to specify a buffer to
//               unpack.
//
//               Unlike begin_pack() or begin_unpack() you may not
//               concatenate the results of multiple begin_repack()
//               sessions in one buffer.
//
//               Also, unlike in packing or unpacking modes, you may
//               not walk through the fields from beginning to end, or
//               even pack two consecutive fields at once.  Instead,
//               you must call seek() for each field you wish to
//               modify and pack only that one field; then call seek()
//               again to modify another field.
////////////////////////////////////////////////////////////////////
59
void DCPacker::begin_repack(DCPackerInterface const *root);

307 10 end_repack 0 4 483 20 DCPacker::end_repack 0 1 68 440
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::end_repack
//       Access: Published
//  Description: Finishes the repacking session.
//
//               The return value is true on success, or false if
//               there has been some error during repacking (or if all
//               fields have not been repacked).
////////////////////////////////////////////////////////////////////
32
bool DCPacker::end_repack(void);

308 4 seek 0 4 483 14 DCPacker::seek 0 2 69 70 1292
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::seek
//       Access: Published
//  Description: Sets the current unpack (or repack) position to the
//               named field.  In unpack mode, the next call to
//               unpack_*() or push() will begin to read the named
//               field.  In repack mode, the next call to pack_*() or
//               push() will modify the named field.
//
//               Returns true if successful, false if the field is not
//               known (or if the packer is in an invalid mode).
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: DCPacker::seek
//       Access: Published
//  Description: Seeks to the field indentified by seek_index, which
//               was returned by an earlier call to
//               DCField::find_seek_index() to get the index of some
//               nested field.  Also see the version of seek() that
//               accepts a field name.
//
//               Returns true if successful, false if the field is not
//               known (or if the packer is in an invalid mode).
////////////////////////////////////////////////////////////////////
97
bool DCPacker::seek(basic_string< char > const &field_name);
bool DCPacker::seek(int seek_index);

309 17 has_nested_fields 0 4 483 27 DCPacker::has_nested_fields 0 1 71 529
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::has_nested_fields
//       Access: Published
//  Description: Returns true if the current field has any nested
//               fields (and thus expects a push() .. pop()
//               interface), or false otherwise.  If this returns
//               true, get_num_nested_fields() may be called to
//               determine how many nested fields are expected.
////////////////////////////////////////////////////////////////////
52
inline bool DCPacker::has_nested_fields(void) const;

310 21 get_num_nested_fields 0 4 483 31 DCPacker::get_num_nested_fields 0 1 72 885
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::get_num_nested_fields
//       Access: Published
//  Description: Returns the number of nested fields associated with
//               the current field, if has_nested_fields() returned
//               true.
//
//               The return value may be -1 to indicate that a
//               variable number of nested fields are accepted by this
//               field type (e.g. a variable-length array).
//
//               Note that this method is unreliable to determine how
//               many fields you must traverse before you can call
//               pop(), since particularly in the presence of a
//               DCSwitch, it may change during traversal.  Use
//               more_nested_fields() instead.
////////////////////////////////////////////////////////////////////
55
inline int DCPacker::get_num_nested_fields(void) const;

311 18 more_nested_fields 0 4 483 28 DCPacker::more_nested_fields 0 1 73 389
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::more_nested_fields
//       Access: Published
//  Description: Returns true if there are more nested fields to pack
//               or unpack in the current push sequence, false if it
//               is time to call pop().
////////////////////////////////////////////////////////////////////
53
inline bool DCPacker::more_nested_fields(void) const;

312 18 get_current_parent 0 4 483 28 DCPacker::get_current_parent 0 1 74 436
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::get_current_parent
//       Access: Published
//  Description: Returns the field that we left in our last call to
//               push(): the owner of the current level of fields.
//               This may be NULL at the beginning of the pack
//               operation.
////////////////////////////////////////////////////////////////////
73
inline DCPackerInterface const *DCPacker::get_current_parent(void) const;

313 17 get_current_field 0 4 483 27 DCPacker::get_current_field 0 1 75 458
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::get_current_field
//       Access: Published
//  Description: Returns the field that will be referenced by the next
//               call to pack_*() or unpack_*().  This will be NULL if
//               we have unpacked (or packed) all fields, or if it is
//               time to call pop().
////////////////////////////////////////////////////////////////////
72
inline DCPackerInterface const *DCPacker::get_current_field(void) const;

314 15 get_last_switch 0 4 483 25 DCPacker::get_last_switch 0 1 76 746
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::get_last_switch
//       Access: Published
//  Description: Returns a pointer to the last DCSwitch instance that
//               we have passed by and selected one case of during the
//               pack/unpack process.  Each time we encounter a new
//               DCSwitch and select a case, this will change state.
//
//               This may be used to detect when a DCSwitch has been
//               selected.  At the moment this changes state,
//               get_current_parent() will contain the particular
//               SwitchCase that was selected by the switch.
////////////////////////////////////////////////////////////////////
70
inline DCSwitchParameter const *DCPacker::get_last_switch(void) const;

315 13 get_pack_type 0 4 483 23 DCPacker::get_pack_type 0 1 77 771
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::get_pack_type
//       Access: Published
//  Description: Returns the type of value expected by the current
//               field.  See the enumerated type definition at the top
//               of DCPackerInterface.h.  If this returns one of
//               PT_double, PT_int, PT_int64, or PT_string, then you
//               should call the corresponding pack_double(),
//               pack_int() function (or unpack_double(),
//               unpack_int(), etc.) to transfer data.  Otherwise, you
//               should call push() and begin packing or unpacking the
//               nested fields.
////////////////////////////////////////////////////////////////////
54
inline DCPackType DCPacker::get_pack_type(void) const;

316 22 get_current_field_name 0 4 483 32 DCPacker::get_current_field_name 0 1 78 406
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::get_current_field_name
//       Access: Published
//  Description: Returns the name of the current field, if it has a
//               name, or the empty string if the field does not have
//               a name or there is no current field.
////////////////////////////////////////////////////////////////////
73
inline basic_string< char > DCPacker::get_current_field_name(void) const;

317 4 push 0 4 483 14 DCPacker::push 0 1 79 587
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::push
//       Access: Published
//  Description: Marks the beginning of a nested series of fields.
//
//               This must be called before filling the elements of an
//               array or the individual fields in a structure field.
//               It must also be balanced by a matching pop().
//
//               It is necessary to use push() / pop() only if
//               has_nested_fields() returns true.
////////////////////////////////////////////////////////////////////
26
void DCPacker::push(void);

318 3 pop 0 4 483 13 DCPacker::pop 0 1 80 495
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::pop
//       Access: Published
//  Description: Marks the end of a nested series of fields.
//
//               This must be called to match a previous push() only
//               after all the expected number of nested fields have
//               been packed.  It is an error to call it too early, or
//               too late.
////////////////////////////////////////////////////////////////////
25
void DCPacker::pop(void);

319 11 pack_double 0 4 483 21 DCPacker::pack_double 0 1 81 298
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::pack_double
//       Access: Published
//  Description: Packs the indicated numeric or string value into the
//               stream.
////////////////////////////////////////////////////////////////////
48
inline void DCPacker::pack_double(double value);

320 8 pack_int 0 4 483 18 DCPacker::pack_int 0 1 82 295
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::pack_int
//       Access: Published
//  Description: Packs the indicated numeric or string value into the
//               stream.
////////////////////////////////////////////////////////////////////
42
inline void DCPacker::pack_int(int value);

321 9 pack_uint 0 4 483 19 DCPacker::pack_uint 0 1 83 296
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::pack_uint
//       Access: Published
//  Description: Packs the indicated numeric or string value into the
//               stream.
////////////////////////////////////////////////////////////////////
52
inline void DCPacker::pack_uint(unsigned int value);

322 10 pack_int64 0 4 483 20 DCPacker::pack_int64 0 1 84 297
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::pack_int64
//       Access: Published
//  Description: Packs the indicated numeric or string value into the
//               stream.
////////////////////////////////////////////////////////////////////
48
inline void DCPacker::pack_int64(__int64 value);

323 11 pack_uint64 0 4 483 21 DCPacker::pack_uint64 0 1 85 298
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::pack_uint64
//       Access: Published
//  Description: Packs the indicated numeric or string value into the
//               stream.
////////////////////////////////////////////////////////////////////
58
inline void DCPacker::pack_uint64(unsigned __int64 value);

324 11 pack_string 0 4 483 21 DCPacker::pack_string 0 1 86 298
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::pack_string
//       Access: Published
//  Description: Packs the indicated numeric or string value into the
//               stream.
////////////////////////////////////////////////////////////////////
69
inline void DCPacker::pack_string(basic_string< char > const &value);

325 18 pack_literal_value 0 4 483 28 DCPacker::pack_literal_value 0 1 87 402
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::pack_literal_value
//       Access: Published
//  Description: Adds the indicated string value into the stream,
//               representing a single pre-packed field element, or a
//               whole group of field elements at once.
////////////////////////////////////////////////////////////////////
76
inline void DCPacker::pack_literal_value(basic_string< char > const &value);

326 18 pack_default_value 0 4 483 28 DCPacker::pack_default_value 0 1 88 406
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::pack_default_value
//       Access: Published
//  Description: Adds the default value for the current element into
//               the stream.  If no default has been set for the
//               current element, creates a sensible default.
////////////////////////////////////////////////////////////////////
40
void DCPacker::pack_default_value(void);

327 13 unpack_double 0 4 483 23 DCPacker::unpack_double 0 1 89 599
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::unpack_double
//       Access: Published
//  Description: Unpacks the current numeric or string value from the
//               stream.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: DCPacker::unpack_double
//       Access: Public
//  Description: Unpacks the current numeric or string value from the
//               stream.
////////////////////////////////////////////////////////////////////
44
inline double DCPacker::unpack_double(void);

328 10 unpack_int 0 4 483 20 DCPacker::unpack_int 0 1 90 593
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::unpack_int
//       Access: Published
//  Description: Unpacks the current numeric or string value from the
//               stream.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: DCPacker::unpack_int
//       Access: Public
//  Description: Unpacks the current numeric or string value from the
//               stream.
////////////////////////////////////////////////////////////////////
38
inline int DCPacker::unpack_int(void);

329 11 unpack_uint 0 4 483 21 DCPacker::unpack_uint 0 1 91 595
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::unpack_uint
//       Access: Published
//  Description: Unpacks the current numeric or string value from the
//               stream.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: DCPacker::unpack_uint
//       Access: Public
//  Description: Unpacks the current numeric or string value from the
//               stream.
////////////////////////////////////////////////////////////////////
48
inline unsigned int DCPacker::unpack_uint(void);

330 12 unpack_int64 0 4 483 22 DCPacker::unpack_int64 0 1 92 597
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::unpack_int64
//       Access: Published
//  Description: Unpacks the current numeric or string value from the
//               stream.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: DCPacker::unpack_int64
//       Access: Public
//  Description: Unpacks the current numeric or string value from the
//               stream.
////////////////////////////////////////////////////////////////////
44
inline __int64 DCPacker::unpack_int64(void);

331 13 unpack_uint64 0 4 483 23 DCPacker::unpack_uint64 0 1 93 599
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::unpack_uint64
//       Access: Published
//  Description: Unpacks the current numeric or string value from the
//               stream.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: DCPacker::unpack_uint64
//       Access: Public
//  Description: Unpacks the current numeric or string value from the
//               stream.
////////////////////////////////////////////////////////////////////
54
inline unsigned __int64 DCPacker::unpack_uint64(void);

332 13 unpack_string 0 4 483 23 DCPacker::unpack_string 0 1 94 599
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::unpack_string
//       Access: Published
//  Description: Unpacks the current numeric or string value from the
//               stream.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: DCPacker::unpack_string
//       Access: Public
//  Description: Unpacks the current numeric or string value from the
//               stream.
////////////////////////////////////////////////////////////////////
58
inline basic_string< char > DCPacker::unpack_string(void);

333 20 unpack_literal_value 0 4 483 30 DCPacker::unpack_literal_value 0 1 95 753
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::unpack_literal_value
//       Access: Published
//  Description: Returns the literal string that represents the packed
//               value of the current field, and advances the field
//               pointer.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: DCPacker::unpack_literal_value
//       Access: Public
//  Description: Returns the literal string that represents the packed
//               value of the current field, and advances the field
//               pointer.
////////////////////////////////////////////////////////////////////
65
inline basic_string< char > DCPacker::unpack_literal_value(void);

334 15 unpack_validate 0 4 483 25 DCPacker::unpack_validate 0 1 96 478
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::unpack_validate
//       Access: Published
//  Description: Internally unpacks the current numeric or string
//               value and validates it against the type range limits,
//               but does not return the value.  If the current field
//               contains nested fields, validates all of them.
////////////////////////////////////////////////////////////////////
37
void DCPacker::unpack_validate(void);

335 11 unpack_skip 0 4 483 21 DCPacker::unpack_skip 0 1 97 396
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::unpack_skip
//       Access: Published
//  Description: Skips the current field without unpacking it and
//               advances to the next field.  If the current field
//               contains nested fields, skips all of them.
////////////////////////////////////////////////////////////////////
33
void DCPacker::unpack_skip(void);

336 11 pack_object 0 4 483 21 DCPacker::pack_object 0 1 98 528
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::pack_object
//       Access: Published
//  Description: Packs the Python object of whatever type into the
//               packer.  Each numeric object and string object maps
//               to the corresponding pack_value() call; a tuple or
//               sequence maps to a push() followed by all of the
//               tuple's contents followed by a pop().
////////////////////////////////////////////////////////////////////
45
void DCPacker::pack_object(PyObject *object);

337 13 unpack_object 0 4 483 23 DCPacker::unpack_object 0 1 99 509
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::unpack_object
//       Access: Published
//  Description: Unpacks a Python object of the appropriate type from
//               the stream for the current field.  This may be an
//               integer or a string for a simple field object; if the
//               current field represents a list of fields it will be
//               a tuple.
////////////////////////////////////////////////////////////////////
40
PyObject *DCPacker::unpack_object(void);

338 14 parse_and_pack 0 4 483 24 DCPacker::parse_and_pack 0 2 100 101 837
// HAVE_PYTHON
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::parse_and_pack
//       Access: Published
//  Description: Parses an object's value according to the DC file
//               syntax (e.g. as a default value string) and packs it.
//               Returns true on success, false on a parse error.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: DCPacker::parse_and_pack
//       Access: Published
//  Description: Parses an object's value according to the DC file
//               syntax (e.g. as a default value string) and packs it.
//               Returns true on success, false on a parse error.
////////////////////////////////////////////////////////////////////
120
bool DCPacker::parse_and_pack(basic_string< char > const &formatted_object);
bool DCPacker::parse_and_pack(istream &in);

339 17 unpack_and_format 0 4 483 27 DCPacker::unpack_and_format 0 4 102 103 104 105 820
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::unpack_and_format
//       Access: Published
//  Description: Unpacks an object and formats its value into a syntax
//               suitable for parsing in the dc file (e.g. as a
//               default value), or as an input to parse_object.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: DCPacker::unpack_and_format
//       Access: Published
//  Description: Unpacks an object and formats its value into a syntax
//               suitable for parsing in the dc file (e.g. as a
//               default value), or as an input to parse_object.
////////////////////////////////////////////////////////////////////
155
basic_string< char > DCPacker::unpack_and_format(bool show_field_names = (1));
void DCPacker::unpack_and_format(ostream &out, bool show_field_names = (1));

340 15 had_parse_error 0 4 483 25 DCPacker::had_parse_error 0 1 106 394
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::had_parse_error
//       Access: Published
//  Description: Returns true if there has been an parse error
//               since the most recent call to begin(); this can only
//               happen if you call parse_and_pack().
////////////////////////////////////////////////////////////////////
50
inline bool DCPacker::had_parse_error(void) const;

341 14 had_pack_error 0 4 483 24 DCPacker::had_pack_error 0 1 107 802
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::had_pack_error
//       Access: Published
//  Description: Returns true if there has been an packing error
//               since the most recent call to begin(); in particular,
//               this may be called after end() has returned false to
//               determine the nature of the failure.
//
//               A return value of true indicates there was a push/pop
//               mismatch, or the push/pop structure did not match the
//               data structure, or there were the wrong number of
//               elements in a nested push/pop structure, or on unpack
//               that the data stream was truncated.
////////////////////////////////////////////////////////////////////
49
inline bool DCPacker::had_pack_error(void) const;

342 15 had_range_error 0 4 483 25 DCPacker::had_range_error 0 1 108 735
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::had_range_error
//       Access: Published
//  Description: Returns true if there has been an range validation
//               error since the most recent call to begin(); in
//               particular, this may be called after end() has
//               returned false to determine the nature of the
//               failure.
//
//               A return value of true indicates a value that was
//               packed or unpacked did not fit within the specified
//               legal range for a parameter, or within the limits of
//               the field size.
////////////////////////////////////////////////////////////////////
50
inline bool DCPacker::had_range_error(void) const;

343 9 had_error 0 4 483 19 DCPacker::had_error 0 1 109 492
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::had_error
//       Access: Published
//  Description: Returns true if there has been any error (either a
//               pack error or a range error) since the most recent
//               call to begin().  If this returns true, then the
//               matching call to end() will indicate an error
//               (false).
////////////////////////////////////////////////////////////////////
44
inline bool DCPacker::had_error(void) const;

344 22 get_num_unpacked_bytes 0 4 483 32 DCPacker::get_num_unpacked_bytes 0 1 110 587
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::get_num_unpacked_bytes
//       Access: Published
//  Description: Returns the number of bytes that have been unpacked
//               so far, or after unpack_end(), the total number of
//               bytes that were unpacked at all.  This can be used to
//               validate that all of the bytes in the buffer were
//               actually unpacked (which is not otherwise considered
//               an error).
////////////////////////////////////////////////////////////////////
65
inline unsigned int DCPacker::get_num_unpacked_bytes(void) const;

345 10 get_length 0 4 483 20 DCPacker::get_length 0 1 111 391
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::get_length
//       Access: Published
//  Description: Returns the current length of the buffer.  This is
//               the number of useful bytes stored in the buffer, not
//               the amount of memory it takes up.
////////////////////////////////////////////////////////////////////
53
inline unsigned int DCPacker::get_length(void) const;

346 10 get_string 0 4 483 20 DCPacker::get_string 0 1 112 611
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::get_string
//       Access: Published
//  Description: Returns the packed data buffer as a string.  Also see
//               get_data().
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: DCPacker::get_string
//       Access: Published
//  Description: Copies the packed data into the indicated string.
//               Also see get_data().
////////////////////////////////////////////////////////////////////
61
inline basic_string< char > DCPacker::get_string(void) const;

347 17 get_unpack_length 0 4 483 27 DCPacker::get_unpack_length 0 1 113 471
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::get_unpack_length
//       Access: Published
//  Description: Returns the total number of bytes in the unpack data
//               buffer.  This is the buffer used when unpacking; it
//               is separate from the pack data returned by
//               get_length(), which is filled during packing.
////////////////////////////////////////////////////////////////////
60
inline unsigned int DCPacker::get_unpack_length(void) const;

348 17 get_unpack_string 0 4 483 27 DCPacker::get_unpack_string 0 1 114 500
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::get_unpack_string
//       Access: Published
//  Description: Returns the unpack data buffer, as a string.
//               This is the buffer used when unpacking; it is
//               separate from the pack data returned by get_string(),
//               which is filled during packing.  Also see
//               get_unpack_data().
////////////////////////////////////////////////////////////////////
68
inline basic_string< char > DCPacker::get_unpack_string(void) const;

349 37 get_num_stack_elements_ever_allocated 0 4 483 47 DCPacker::get_num_stack_elements_ever_allocated 0 1 115 524
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::StackElement::get_num_stack_elements_ever_allocated
//       Access: Published, Static
//  Description: Returns the number of DCPacker::StackElement pointers
//               ever simultaneously allocated; these are now either
//               in active use or have been recycled into the deleted
//               DCPacker::StackElement pool to be used again.
////////////////////////////////////////////////////////////////////
72
static inline int DCPacker::get_num_stack_elements_ever_allocated(void);

350 13 raw_pack_int8 0 4 483 23 DCPacker::raw_pack_int8 0 1 116 481
// The following methods are used only for packing (or unpacking)
// raw data into the buffer between packing sessions (e.g. between
// calls to end_pack() and the next begin_pack()).

////////////////////////////////////////////////////////////////////
//     Function: DCPacker::raw_pack_int8
//       Access: Published
//  Description: Packs the data into the buffer between packing
//               sessions.
////////////////////////////////////////////////////////////////////
47
inline void DCPacker::raw_pack_int8(int value);

351 14 raw_pack_int16 0 4 483 24 DCPacker::raw_pack_int16 0 1 117 297
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::raw_pack_int16
//       Access: Published
//  Description: Packs the data into the buffer between packing
//               sessions.
////////////////////////////////////////////////////////////////////
48
inline void DCPacker::raw_pack_int16(int value);

352 14 raw_pack_int32 0 4 483 24 DCPacker::raw_pack_int32 0 1 118 297
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::raw_pack_int32
//       Access: Published
//  Description: Packs the data into the buffer between packing
//               sessions.
////////////////////////////////////////////////////////////////////
48
inline void DCPacker::raw_pack_int32(int value);

353 14 raw_pack_int64 0 4 483 24 DCPacker::raw_pack_int64 0 1 119 297
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::raw_pack_int64
//       Access: Published
//  Description: Packs the data into the buffer between packing
//               sessions.
////////////////////////////////////////////////////////////////////
52
inline void DCPacker::raw_pack_int64(__int64 value);

354 14 raw_pack_uint8 0 4 483 24 DCPacker::raw_pack_uint8 0 1 120 297
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::raw_pack_uint8
//       Access: Published
//  Description: Packs the data into the buffer between packing
//               sessions.
////////////////////////////////////////////////////////////////////
57
inline void DCPacker::raw_pack_uint8(unsigned int value);

355 15 raw_pack_uint16 0 4 483 25 DCPacker::raw_pack_uint16 0 1 121 298
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::raw_pack_uint16
//       Access: Published
//  Description: Packs the data into the buffer between packing
//               sessions.
////////////////////////////////////////////////////////////////////
58
inline void DCPacker::raw_pack_uint16(unsigned int value);

356 15 raw_pack_uint32 0 4 483 25 DCPacker::raw_pack_uint32 0 1 122 298
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::raw_pack_uint32
//       Access: Published
//  Description: Packs the data into the buffer between packing
//               sessions.
////////////////////////////////////////////////////////////////////
58
inline void DCPacker::raw_pack_uint32(unsigned int value);

357 15 raw_pack_uint64 0 4 483 25 DCPacker::raw_pack_uint64 0 1 123 298
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::raw_pack_uint64
//       Access: Published
//  Description: Packs the data into the buffer between packing
//               sessions.
////////////////////////////////////////////////////////////////////
62
inline void DCPacker::raw_pack_uint64(unsigned __int64 value);

358 16 raw_pack_float64 0 4 483 26 DCPacker::raw_pack_float64 0 1 124 299
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::raw_pack_float64
//       Access: Published
//  Description: Packs the data into the buffer between packing
//               sessions.
////////////////////////////////////////////////////////////////////
53
inline void DCPacker::raw_pack_float64(double value);

359 15 raw_pack_string 0 4 483 25 DCPacker::raw_pack_string 0 1 125 298
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::raw_pack_string
//       Access: Published
//  Description: Packs the data into the buffer between packing
//               sessions.
////////////////////////////////////////////////////////////////////
73
inline void DCPacker::raw_pack_string(basic_string< char > const &value);

360 15 raw_unpack_int8 0 4 483 25 DCPacker::raw_unpack_int8 0 1 126 603
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::raw_unpack_int8
//       Access: Published
//  Description: Unpacks the data from the buffer between unpacking
//               sessions.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: DCPacker::raw_unpack_int8
//       Access: Public
//  Description: Unpacks the data from the buffer between unpacking
//               sessions.
////////////////////////////////////////////////////////////////////
43
inline int DCPacker::raw_unpack_int8(void);

361 16 raw_unpack_int16 0 4 483 26 DCPacker::raw_unpack_int16 0 1 127 605
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::raw_unpack_int16
//       Access: Published
//  Description: Unpacks the data from the buffer between unpacking
//               sessions.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: DCPacker::raw_unpack_int16
//       Access: Public
//  Description: Unpacks the data from the buffer between unpacking
//               sessions.
////////////////////////////////////////////////////////////////////
44
inline int DCPacker::raw_unpack_int16(void);

362 16 raw_unpack_int32 0 4 483 26 DCPacker::raw_unpack_int32 0 1 128 605
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::raw_unpack_int32
//       Access: Published
//  Description: Unpacks the data from the buffer between unpacking
//               sessions.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: DCPacker::raw_unpack_int32
//       Access: Public
//  Description: Unpacks the data from the buffer between unpacking
//               sessions.
////////////////////////////////////////////////////////////////////
44
inline int DCPacker::raw_unpack_int32(void);

363 16 raw_unpack_int64 0 4 483 26 DCPacker::raw_unpack_int64 0 1 129 605
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::raw_unpack_int64
//       Access: Published
//  Description: Unpacks the data from the buffer between unpacking
//               sessions.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: DCPacker::raw_unpack_int64
//       Access: Public
//  Description: Unpacks the data from the buffer between unpacking
//               sessions.
////////////////////////////////////////////////////////////////////
48
inline __int64 DCPacker::raw_unpack_int64(void);

364 16 raw_unpack_uint8 0 4 483 26 DCPacker::raw_unpack_uint8 0 1 130 605
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::raw_unpack_uint8
//       Access: Published
//  Description: Unpacks the data from the buffer between unpacking
//               sessions.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: DCPacker::raw_unpack_uint8
//       Access: Public
//  Description: Unpacks the data from the buffer between unpacking
//               sessions.
////////////////////////////////////////////////////////////////////
53
inline unsigned int DCPacker::raw_unpack_uint8(void);

365 17 raw_unpack_uint16 0 4 483 27 DCPacker::raw_unpack_uint16 0 1 131 607
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::raw_unpack_uint16
//       Access: Published
//  Description: Unpacks the data from the buffer between unpacking
//               sessions.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: DCPacker::raw_unpack_uint16
//       Access: Public
//  Description: Unpacks the data from the buffer between unpacking
//               sessions.
////////////////////////////////////////////////////////////////////
54
inline unsigned int DCPacker::raw_unpack_uint16(void);

366 17 raw_unpack_uint32 0 4 483 27 DCPacker::raw_unpack_uint32 0 1 132 607
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::raw_unpack_uint32
//       Access: Published
//  Description: Unpacks the data from the buffer between unpacking
//               sessions.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: DCPacker::raw_unpack_uint32
//       Access: Public
//  Description: Unpacks the data from the buffer between unpacking
//               sessions.
////////////////////////////////////////////////////////////////////
54
inline unsigned int DCPacker::raw_unpack_uint32(void);

367 17 raw_unpack_uint64 0 4 483 27 DCPacker::raw_unpack_uint64 0 1 133 607
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::raw_unpack_uint64
//       Access: Published
//  Description: Unpacks the data from the buffer between unpacking
//               sessions.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: DCPacker::raw_unpack_uint64
//       Access: Public
//  Description: Unpacks the data from the buffer between unpacking
//               sessions.
////////////////////////////////////////////////////////////////////
58
inline unsigned __int64 DCPacker::raw_unpack_uint64(void);

368 18 raw_unpack_float64 0 4 483 28 DCPacker::raw_unpack_float64 0 1 134 609
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::raw_unpack_float64
//       Access: Published
//  Description: Unpacks the data from the buffer between unpacking
//               sessions.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: DCPacker::raw_unpack_float64
//       Access: Public
//  Description: Unpacks the data from the buffer between unpacking
//               sessions.
////////////////////////////////////////////////////////////////////
49
inline double DCPacker::raw_unpack_float64(void);

369 17 raw_unpack_string 0 4 483 27 DCPacker::raw_unpack_string 0 1 135 607
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::raw_unpack_string
//       Access: Published
//  Description: Unpacks the data from the buffer between unpacking
//               sessions.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: DCPacker::raw_unpack_string
//       Access: Public
//  Description: Unpacks the data from the buffer between unpacking
//               sessions.
////////////////////////////////////////////////////////////////////
62
inline basic_string< char > DCPacker::raw_unpack_string(void);

370 19 as_simple_parameter 0 6 484 32 DCParameter::as_simple_parameter 0 2 136 137 484
////////////////////////////////////////////////////////////////////
//     Function: DCParameter::as_simple_parameter
//       Access: Published, Virtual
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: DCParameter::as_simple_parameter
//       Access: Published, Virtual
//  Description: 
////////////////////////////////////////////////////////////////////
145
virtual DCSimpleParameter *DCParameter::as_simple_parameter(void);
virtual DCSimpleParameter const *DCParameter::as_simple_parameter(void) const;

371 18 as_array_parameter 0 6 484 31 DCParameter::as_array_parameter 0 2 138 139 482
////////////////////////////////////////////////////////////////////
//     Function: DCParameter::as_array_parameter
//       Access: Published, Virtual
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: DCParameter::as_array_parameter
//       Access: Published, Virtual
//  Description: 
////////////////////////////////////////////////////////////////////
141
virtual DCArrayParameter *DCParameter::as_array_parameter(void);
virtual DCArrayParameter const *DCParameter::as_array_parameter(void) const;

372 9 make_copy 0 6 484 22 DCParameter::make_copy 0 1 140 0
60
virtual DCParameter *DCParameter::make_copy(void) const = 0;

373 8 is_valid 0 6 484 21 DCParameter::is_valid 0 1 141 0
51
virtual bool DCParameter::is_valid(void) const = 0;

374 11 get_typedef 0 4 484 24 DCParameter::get_typedef 0 1 142 383
////////////////////////////////////////////////////////////////////
//     Function: DCParameter::get_typedef
//       Access: Published
//  Description: If this type has been referenced from a typedef,
//               returns the DCTypedef instance, or NULL if the
//               type was declared on-the-fly.
////////////////////////////////////////////////////////////////////
54
DCTypedef const *DCParameter::get_typedef(void) const;

375 16 get_element_type 0 4 485 34 DCArrayParameter::get_element_type 0 1 143 309
////////////////////////////////////////////////////////////////////
//     Function: DCArrayParameter::get_element_type
//       Access: Published
//  Description: Returns the type of the individual elements of this
//               array.
////////////////////////////////////////////////////////////////////
60
DCParameter *DCArrayParameter::get_element_type(void) const;

376 14 get_array_size 0 4 485 32 DCArrayParameter::get_array_size 0 1 144 379
////////////////////////////////////////////////////////////////////
//     Function: DCArrayParameter::get_array_size
//       Access: Published
//  Description: Returns the fixed number of elements in this array,
//               or -1 if the array may contain a variable number of
//               elements.
////////////////////////////////////////////////////////////////////
49
int DCArrayParameter::get_array_size(void) const;

377 16 get_num_elements 0 4 486 31 DCAtomicField::get_num_elements 0 1 145 312
////////////////////////////////////////////////////////////////////
//     Function: DCAtomicField::get_num_elements
//       Access: Published
//  Description: Returns the number of elements (parameters) of the
//               atomic field.
////////////////////////////////////////////////////////////////////
48
int DCAtomicField::get_num_elements(void) const;

378 11 get_element 0 4 486 26 DCAtomicField::get_element 0 1 146 299
////////////////////////////////////////////////////////////////////
//     Function: DCAtomicField::get_element
//       Access: Published
//  Description: Returns the parameter object describing the
//               nth element.
////////////////////////////////////////////////////////////////////
53
DCParameter *DCAtomicField::get_element(int n) const;

379 19 get_element_default 0 4 486 34 DCAtomicField::get_element_default 0 1 147 854
// These five methods are deprecated and will be removed soon.

////////////////////////////////////////////////////////////////////
//     Function: DCAtomicField::get_element_default
//       Access: Published
//  Description: Returns the pre-formatted default value associated
//               with the nth element of the field.  This is only
//               valid if has_element_default() returns true, in which
//               case this string represents the bytes that should be
//               assigned to the field as a default value.
//
//               If the element is an array-type element, the returned
//               value will include the two-byte length preceding the
//               array data.
//
//               This is deprecated; use get_element() instead.
////////////////////////////////////////////////////////////////////
69
basic_string< char > DCAtomicField::get_element_default(int n) const;

380 19 has_element_default 0 4 486 34 DCAtomicField::has_element_default 0 1 148 474
// These five methods are deprecated and will be removed soon.

////////////////////////////////////////////////////////////////////
//     Function: DCAtomicField::has_element_default
//       Access: Published
//  Description: Returns true if the nth element of the field has a
//               default value specified, false otherwise.
//
//               This is deprecated; use get_element() instead.
////////////////////////////////////////////////////////////////////
53
bool DCAtomicField::has_element_default(int n) const;

381 16 get_element_name 0 4 486 31 DCAtomicField::get_element_name 0 1 149 582
////////////////////////////////////////////////////////////////////
//     Function: DCAtomicField::get_element_name
//       Access: Published
//  Description: Returns the name of the nth element of the field.
//               This name is strictly for documentary purposes; it
//               does not generally affect operation.  If a name is
//               not specified, this will be the empty string.
//
//               This method is deprecated; use
//               get_element()->get_name() instead.
////////////////////////////////////////////////////////////////////
66
basic_string< char > DCAtomicField::get_element_name(int n) const;

382 16 get_element_type 0 4 486 31 DCAtomicField::get_element_type 0 1 150 377
////////////////////////////////////////////////////////////////////
//     Function: DCAtomicField::get_element_type
//       Access: Published
//  Description: Returns the numeric type of the nth element of the
//               field.  This method is deprecated; use
//               get_element() instead.
////////////////////////////////////////////////////////////////////
61
DCSubatomicType DCAtomicField::get_element_type(int n) const;

383 19 get_element_divisor 0 4 486 34 DCAtomicField::get_element_divisor 0 1 151 653
////////////////////////////////////////////////////////////////////
//     Function: DCAtomicField::get_element_divisor
//       Access: Published
//  Description: Returns the divisor associated with the nth element
//               of the field.  This implements an implicit
//               fixed-point system; floating-point values are to be
//               multiplied by this value before encoding into a
//               packet, and divided by this number after decoding.
//
//               This method is deprecated; use
//               get_element()->get_divisor() instead.
////////////////////////////////////////////////////////////////////
52
int DCAtomicField::get_element_divisor(int n) const;

384 14 ~DCDeclaration 0 6 487 29 DCDeclaration::~DCDeclaration 0 0 230
////////////////////////////////////////////////////////////////////
//     Function: DCDeclaration::Destructor
//       Access: Public, Virtual
//  Description:
////////////////////////////////////////////////////////////////////
44
virtual DCDeclaration::~DCDeclaration(void);

385 8 as_class 0 6 487 23 DCDeclaration::as_class 0 2 152 153 466
////////////////////////////////////////////////////////////////////
//     Function: DCDeclaration::as_class
//       Access: Published, Virtual
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: DCDeclaration::as_class
//       Access: Published, Virtual
//  Description: 
////////////////////////////////////////////////////////////////////
107
virtual DCClass *DCDeclaration::as_class(void);
virtual DCClass const *DCDeclaration::as_class(void) const;

386 9 as_switch 0 6 487 24 DCDeclaration::as_switch 0 2 154 155 468
////////////////////////////////////////////////////////////////////
//     Function: DCDeclaration::as_switch
//       Access: Published, Virtual
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: DCDeclaration::as_switch
//       Access: Published, Virtual
//  Description: 
////////////////////////////////////////////////////////////////////
111
virtual DCSwitch *DCDeclaration::as_switch(void);
virtual DCSwitch const *DCDeclaration::as_switch(void) const;

387 6 output 0 6 487 21 DCDeclaration::output 0 1 156 307
////////////////////////////////////////////////////////////////////
//     Function : DCDeclaration::output
//       Access : Published, Virtual
//  Description : Write a string representation of this instance to
//                <out>.
////////////////////////////////////////////////////////////////////
55
virtual void DCDeclaration::output(ostream &out) const;

388 5 write 0 4 487 20 DCDeclaration::write 0 1 157 292
////////////////////////////////////////////////////////////////////
//     Function : DCDeclaration::
//       Access : Published
//  Description : Write a string representation of this instance to
//                <out>.
////////////////////////////////////////////////////////////////////
64
void DCDeclaration::write(ostream &out, int indent_level) const;

389 11 get_dc_file 0 4 488 20 DCClass::get_dc_file 0 1 158 753
// Filename: dcClass.I
// Created by:  drose (15Sep04)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: DCClass::get_dc_file
//       Access: Published
//  Description: Returns the DCFile object that contains the class.
////////////////////////////////////////////////////////////////////
48
inline DCFile *DCClass::get_dc_file(void) const;

390 8 get_name 0 4 488 17 DCClass::get_name 0 1 159 248
////////////////////////////////////////////////////////////////////
//     Function: DCClass::get_name
//       Access: Published
//  Description: Returns the name of this class.
////////////////////////////////////////////////////////////////////
65
inline basic_string< char > const &DCClass::get_name(void) const;

391 10 get_number 0 4 488 19 DCClass::get_number 0 1 160 369
////////////////////////////////////////////////////////////////////
//     Function: DCClass::get_number
//       Access: Published
//  Description: Returns a unique index number associated with this
//               class.  This is defined implicitly when the .dc
//               file(s) are read.
////////////////////////////////////////////////////////////////////
43
inline int DCClass::get_number(void) const;

392 15 get_num_parents 0 4 488 24 DCClass::get_num_parents 0 1 161 301
////////////////////////////////////////////////////////////////////
//     Function: DCClass::get_num_parents
//       Access: Published
//  Description: Returns the number of base classes this class
//               inherits from.
////////////////////////////////////////////////////////////////////
41
int DCClass::get_num_parents(void) const;

393 10 get_parent 0 4 488 19 DCClass::get_parent 0 1 162 290
////////////////////////////////////////////////////////////////////
//     Function: DCClass::get_parent
//       Access: Published
//  Description: Returns the nth parent class this class inherits
//               from.
////////////////////////////////////////////////////////////////////
42
DCClass *DCClass::get_parent(int n) const;

394 15 has_constructor 0 4 488 24 DCClass::has_constructor 0 1 163 340
////////////////////////////////////////////////////////////////////
//     Function: DCClass::has_constructor
//       Access: Published
//  Description: Returns true if this class has a constructor method,
//               false if it just uses the default constructor.
////////////////////////////////////////////////////////////////////
42
bool DCClass::has_constructor(void) const;

395 15 get_constructor 0 4 488 24 DCClass::get_constructor 0 1 164 372
////////////////////////////////////////////////////////////////////
//     Function: DCClass::get_constructor
//       Access: Published
//  Description: Returns the constructor method for this class if it
//               is defined, or NULL if the class uses the default
//               constructor.
////////////////////////////////////////////////////////////////////
46
DCField *DCClass::get_constructor(void) const;

396 14 get_num_fields 0 4 488 23 DCClass::get_num_fields 0 1 165 322
////////////////////////////////////////////////////////////////////
//     Function: DCClass::get_num_fields
//       Access: Published
//  Description: Returns the number of fields defined directly in this
//               class, ignoring inheritance.
////////////////////////////////////////////////////////////////////
40
int DCClass::get_num_fields(void) const;

397 9 get_field 0 4 488 18 DCClass::get_field 0 1 166 428
////////////////////////////////////////////////////////////////////
//     Function: DCClass::get_field
//       Access: Published
//  Description: Returns the nth field in the class.  This is not
//               necessarily the field with index n; this is the nth
//               field defined in the class directly, ignoring
//               inheritance.
////////////////////////////////////////////////////////////////////
41
DCField *DCClass::get_field(int n) const;

398 17 get_field_by_name 0 4 488 26 DCClass::get_field_by_name 0 1 167 585
////////////////////////////////////////////////////////////////////
//     Function: DCClass::get_field_by_name
//       Access: Published
//  Description: Returns a pointer to the DCField that shares the
//               indicated name.  If the named field is not found in
//               the current class, the parent classes will be
//               searched, so the value returned may not actually be a
//               field within this class.  Returns NULL if there is no
//               such field defined.
////////////////////////////////////////////////////////////////////
76
DCField *DCClass::get_field_by_name(basic_string< char > const &name) const;

399 18 get_field_by_index 0 4 488 27 DCClass::get_field_by_index 0 1 168 594
////////////////////////////////////////////////////////////////////
//     Function: DCClass::get_field_by_index
//       Access: Published
//  Description: Returns a pointer to the DCField that has the
//               indicated index number.  If the numbered field is not
//               found in the current class, the parent classes will
//               be searched, so the value returned may not actually
//               be a field within this class.  Returns NULL if there
//               is no such field defined.
////////////////////////////////////////////////////////////////////
61
DCField *DCClass::get_field_by_index(int index_number) const;

400 24 get_num_inherited_fields 0 4 488 33 DCClass::get_num_inherited_fields 0 1 169 338
////////////////////////////////////////////////////////////////////
//     Function: DCClass::get_num_inherited_fields
//       Access: Published
//  Description: Returns the total number of field fields defined in
//               this class and all ancestor classes.
////////////////////////////////////////////////////////////////////
50
int DCClass::get_num_inherited_fields(void) const;

401 19 get_inherited_field 0 4 488 28 DCClass::get_inherited_field 0 1 170 625
////////////////////////////////////////////////////////////////////
//     Function: DCClass::get_inherited_field
//       Access: Published
//  Description: Returns the nth field field in the class and all of
//               its ancestors.  
//
//               This *used* to be the same thing as
//               get_field_by_index(), back when the fields were
//               numbered sequentially within a class's inheritance
//               hierarchy.  Now that fields have a globally unique
//               index number, this is no longer true.
////////////////////////////////////////////////////////////////////
51
DCField *DCClass::get_inherited_field(int n) const;

402 9 is_struct 0 4 488 18 DCClass::is_struct 0 1 171 379
////////////////////////////////////////////////////////////////////
//     Function: DCClass::is_struct
//       Access: Published
//  Description: Returns true if the class has been identified with
//               the "struct" keyword in the dc file, false if it was
//               declared with "dclass".
////////////////////////////////////////////////////////////////////
43
inline bool DCClass::is_struct(void) const;

403 14 is_bogus_class 0 4 488 23 DCClass::is_bogus_class 0 1 172 524
////////////////////////////////////////////////////////////////////
//     Function: DCClass::is_bogus_class
//       Access: Published
//  Description: Returns true if the class has been flagged as a bogus
//               class.  This is set for classes that are generated by
//               the parser as placeholder for missing classes, as
//               when reading a partial file; it should not occur in a
//               normal valid dc file.
////////////////////////////////////////////////////////////////////
48
inline bool DCClass::is_bogus_class(void) const;

404 25 inherits_from_bogus_class 0 4 488 34 DCClass::inherits_from_bogus_class 0 1 173 446
////////////////////////////////////////////////////////////////////
//     Function : DCClass::inherits_from_bogus_class
//       Access : Published
//  Description : Returns true if this class, or any class in the
//                inheritance heirarchy for this class, is a "bogus"
//                class--a forward reference to an as-yet-undefined
//                class.
////////////////////////////////////////////////////////////////////
52
bool DCClass::inherits_from_bogus_class(void) const;

405 14 start_generate 0 4 488 23 DCClass::start_generate 0 1 174 543
////////////////////////////////////////////////////////////////////
//     Function: DCClass::start_generate
//       Access: Published
//  Description: Starts the PStats timer going on the "generate" task,
//               that is, marks the beginning of the process of
//               generating a new object, for the purposes of timing
//               this process.
//
//               This should balance with a corresponding call to
//               stop_generate().
////////////////////////////////////////////////////////////////////
42
inline void DCClass::start_generate(void);

406 13 stop_generate 0 4 488 22 DCClass::stop_generate 0 1 175 365
////////////////////////////////////////////////////////////////////
//     Function: DCClass::stop_generate
//       Access: Published
//  Description: Stops the PStats timer on the "generate" task.
//               This should balance with a preceding call to
//               start_generate().
////////////////////////////////////////////////////////////////////
41
inline void DCClass::stop_generate(void);

407 6 output 0 6 488 15 DCClass::output 0 1 176 616
////////////////////////////////////////////////////////////////////
//     Function : DCClass::output
//       Access : Published, Virtual
//  Description : Write a string representation of this instance to
//                <out>.
////////////////////////////////////////////////////////////////////

// HAVE_PYTHON
////////////////////////////////////////////////////////////////////
//     Function : DCClass::output
//       Access : Public, Virtual
//  Description : Write a string representation of this instance to
//                <out>.
////////////////////////////////////////////////////////////////////
49
virtual void DCClass::output(ostream &out) const;

408 13 has_class_def 0 4 488 22 DCClass::has_class_def 0 1 177 333
////////////////////////////////////////////////////////////////////
//     Function: DCClass::has_class_def
//       Access: Published
//  Description: Returns true if the DCClass object has an associated
//               Python class definition, false otherwise.
////////////////////////////////////////////////////////////////////
40
bool DCClass::has_class_def(void) const;

409 13 set_class_def 0 4 488 22 DCClass::set_class_def 0 1 178 383
////////////////////////////////////////////////////////////////////
//     Function: DCClass::set_class_def
//       Access: Published
//  Description: Sets the class object associated with this
//               DistributedClass.  This object will be used to
//               construct new instances of the class.
////////////////////////////////////////////////////////////////////
49
void DCClass::set_class_def(PyObject *class_def);

410 13 get_class_def 0 4 488 22 DCClass::get_class_def 0 1 179 388
////////////////////////////////////////////////////////////////////
//     Function: DCClass::get_class_def
//       Access: Published
//  Description: Returns the class object that was previously
//               associated with this DistributedClass.  This will
//               return a new reference to the object.
////////////////////////////////////////////////////////////////////
45
PyObject *DCClass::get_class_def(void) const;

411 19 has_owner_class_def 0 4 488 28 DCClass::has_owner_class_def 0 1 180 345
////////////////////////////////////////////////////////////////////
//     Function: DCClass::has_owner_class_def
//       Access: Published
//  Description: Returns true if the DCClass object has an associated
//               Python owner class definition, false otherwise.
////////////////////////////////////////////////////////////////////
46
bool DCClass::has_owner_class_def(void) const;

412 19 set_owner_class_def 0 4 488 28 DCClass::set_owner_class_def 0 1 181 401
////////////////////////////////////////////////////////////////////
//     Function: DCClass::set_owner_class_def
//       Access: Published
//  Description: Sets the owner class object associated with this
//               DistributedClass.  This object will be used to
//               construct new owner instances of the class.
////////////////////////////////////////////////////////////////////
61
void DCClass::set_owner_class_def(PyObject *owner_class_def);

413 19 get_owner_class_def 0 4 488 28 DCClass::get_owner_class_def 0 1 182 400
////////////////////////////////////////////////////////////////////
//     Function: DCClass::get_owner_class_def
//       Access: Published
//  Description: Returns the owner class object that was previously
//               associated with this DistributedClass.  This will
//               return a new reference to the object.
////////////////////////////////////////////////////////////////////
51
PyObject *DCClass::get_owner_class_def(void) const;

414 14 receive_update 0 4 488 23 DCClass::receive_update 0 1 183 376
////////////////////////////////////////////////////////////////////
//     Function: DCClass::receive_update
//       Access: Published
//  Description: Extracts the update message out of the packer and
//               applies it to the indicated object by calling the
//               appropriate method.
////////////////////////////////////////////////////////////////////
76
void DCClass::receive_update(PyObject *distobj, DatagramIterator &di) const;

415 33 receive_update_broadcast_required 0 4 488 42 DCClass::receive_update_broadcast_required 0 1 184 500
////////////////////////////////////////////////////////////////////
//     Function: DCClass::receive_update_broadcast_required
//       Access: Published
//  Description: Processes a big datagram that includes all of the
//               "required" fields that are sent along with a normal
//               "generate with required" message.  This is all of the
//               atomic fields that are marked "broadcast required".
////////////////////////////////////////////////////////////////////
95
void DCClass::receive_update_broadcast_required(PyObject *distobj, DatagramIterator &di) const;

416 39 receive_update_broadcast_required_owner 0 4 488 48 DCClass::receive_update_broadcast_required_owner 0 1 185 563
////////////////////////////////////////////////////////////////////
//     Function: DCClass::receive_update_broadcast_required_owner
//       Access: Published
//  Description: Processes a big datagram that includes all of the
//               "required" fields that are sent along with a normal
//               "generate with required" message.  This is all of the
//               atomic fields that are marked "broadcast ownrecv". Should
//               be used for 'owner-view' objects.
////////////////////////////////////////////////////////////////////
101
void DCClass::receive_update_broadcast_required_owner(PyObject *distobj, DatagramIterator &di) const;

417 27 receive_update_all_required 0 4 488 36 DCClass::receive_update_all_required 0 1 186 492
////////////////////////////////////////////////////////////////////
//     Function: DCClass::receive_update_all_required
//       Access: Published
//  Description: Processes a big datagram that includes all of the
//               "required" fields that are sent when an avatar is
//               created.  This is all of the atomic fields that are
//               marked "required", whether they are broadcast or not.
////////////////////////////////////////////////////////////////////
89
void DCClass::receive_update_all_required(PyObject *distobj, DatagramIterator &di) const;

418 20 receive_update_other 0 4 488 29 DCClass::receive_update_other 0 1 187 333
////////////////////////////////////////////////////////////////////
//     Function: DCClass::receive_update_other
//       Access: Published
//  Description: Processes a datagram that lists some additional
//               fields that are broadcast in one chunk.
////////////////////////////////////////////////////////////////////
82
void DCClass::receive_update_other(PyObject *distobj, DatagramIterator &di) const;

419 13 direct_update 0 4 488 22 DCClass::direct_update 0 2 188 189 604
////////////////////////////////////////////////////////////////////
//     Function: DCClass::direct_update
//       Access: Published
//  Description: Processes an update for a named field from a packed
//               value blob.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: DCClass::direct_update
//       Access: Published
//  Description: Processes an update for a named field from a packed
//               datagram.
////////////////////////////////////////////////////////////////////
241
void DCClass::direct_update(PyObject *distobj, basic_string< char > const &field_name, basic_string< char > const &value_blob);
void DCClass::direct_update(PyObject *distobj, basic_string< char > const &field_name, Datagram const &datagram);

420 19 pack_required_field 0 4 488 28 DCClass::pack_required_field 0 2 190 191 1330
////////////////////////////////////////////////////////////////////
//     Function: DCClass::pack_required_field
//       Access: Published
//  Description: Looks up the current value of the indicated field by
//               calling the appropriate get*() function, then packs
//               that value into the datagram.  This field is
//               presumably either a required field or a specified
//               optional field, and we are building up a datagram for
//               the generate-with-required message.
//
//               Returns true on success, false on failure.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: DCClass::pack_required_field
//       Access: Published
//  Description: Looks up the current value of the indicated field by
//               calling the appropriate get*() function, then packs
//               that value into the packer.  This field is
//               presumably either a required field or a specified
//               optional field, and we are building up a datagram for
//               the generate-with-required message.
//
//               Returns true on success, false on failure.
////////////////////////////////////////////////////////////////////
201
bool DCClass::pack_required_field(Datagram &datagram, PyObject *distobj, DCField const *field) const;
bool DCClass::pack_required_field(DCPacker &packer, PyObject *distobj, DCField const *field) const;

421 20 client_format_update 0 4 488 29 DCClass::client_format_update 0 1 192 388
////////////////////////////////////////////////////////////////////
//     Function: DCClass::client_format_update
//       Access: Published
//  Description: Generates a datagram containing the message necessary
//               to send an update for the indicated distributed
//               object from the client.
////////////////////////////////////////////////////////////////////
121
Datagram DCClass::client_format_update(basic_string< char > const &field_name, unsigned int do_id, PyObject *args) const;

422 16 ai_format_update 0 4 488 25 DCClass::ai_format_update 0 1 193 380
////////////////////////////////////////////////////////////////////
//     Function: DCClass::ai_format_update
//       Access: Published
//  Description: Generates a datagram containing the message necessary
//               to send an update for the indicated distributed
//               object from the AI.
////////////////////////////////////////////////////////////////////
167
Datagram DCClass::ai_format_update(basic_string< char > const &field_name, unsigned int do_id, unsigned __int64 to_id, unsigned __int64 from_id, PyObject *args) const;

423 25 ai_format_update_msg_type 0 4 488 34 DCClass::ai_format_update_msg_type 0 1 194 436
////////////////////////////////////////////////////////////////////
//     Function: DCClass::ai_format_update_msg_type
//       Access: Published
//  Description: Generates a datagram containing the message necessary
//               to send an update, using the indicated msg type
//               for the indicated distributed
//               object from the AI.
////////////////////////////////////////////////////////////////////
190
Datagram DCClass::ai_format_update_msg_type(basic_string< char > const &field_name, unsigned int do_id, unsigned __int64 to_id, unsigned __int64 from_id, int msg_type, PyObject *args) const;

424 18 ai_format_generate 0 4 488 27 DCClass::ai_format_generate 0 1 195 593
////////////////////////////////////////////////////////////////////
//     Function: DCClass::ai_format_generate
//       Access: Published
//  Description: Generates a datagram containing the message necessary
//               to generate a new distributed object from the AI.
//               This requires querying the object for the initial
//               value of its required fields.
//
//               optional_fields is a list of fieldNames to generate
//               in addition to the normal required fields.
////////////////////////////////////////////////////////////////////
227
Datagram DCClass::ai_format_generate(PyObject *distobj, unsigned int do_id, unsigned int parent_id, unsigned int zone_id, unsigned __int64 district_channel_id, unsigned __int64 from_channel_id, PyObject *optional_fields) const;

425 26 client_format_generate_CMU 0 4 488 35 DCClass::client_format_generate_CMU 0 1 196 679
////////////////////////////////////////////////////////////////////
//     Function: DCClass::client_format_generate_CMU
//       Access: Published
//  Description: Generates a datagram containing the message necessary
//               to generate a new distributed object from the client.
//               This requires querying the object for the initial
//               value of its required fields.
//
//               optional_fields is a list of fieldNames to generate
//               in addition to the normal required fields.
//
//               This method is only called by the CMU implementation.
////////////////////////////////////////////////////////////////////
139
Datagram DCClass::client_format_generate_CMU(PyObject *distobj, unsigned int do_id, unsigned int zone_id, PyObject *optional_fields) const;

426 9 get_class 0 4 489 27 DCClassParameter::get_class 0 1 197 278
////////////////////////////////////////////////////////////////////
//     Function: DCClassParameter::get_class
//       Access: Published
//  Description: Returns the class object this parameter represents.
////////////////////////////////////////////////////////////////////
55
DCClass const *DCClassParameter::get_class(void) const;

427 17 ~DCClassParameter 0 4 489 35 DCClassParameter::~DCClassParameter 0 0 0
42
DCClassParameter::~DCClassParameter(void);

428 6 DCFile 0 4 490 14 DCFile::DCFile 0 1 198 218
////////////////////////////////////////////////////////////////////
//     Function: DCFile::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
21
DCFile::DCFile(void);

429 7 ~DCFile 0 4 490 15 DCFile::~DCFile 0 0 217
////////////////////////////////////////////////////////////////////
//     Function: DCFile::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
22
DCFile::~DCFile(void);

430 5 clear 0 4 490 13 DCFile::clear 0 1 199 322
////////////////////////////////////////////////////////////////////
//     Function: DCFile::clear
//       Access: Published
//  Description: Removes all of the classes defined within the DCFile
//               and prepares it for reading a new file.
////////////////////////////////////////////////////////////////////
25
void DCFile::clear(void);

431 8 read_all 0 4 490 16 DCFile::read_all 0 1 200 382
////////////////////////////////////////////////////////////////////
//     Function: DCFile::read_all
//       Access: Published
//  Description: This special method reads all of the .dc files named
//               by the "dc-file" config.prc variable, and loads them
//               into the DCFile namespace.
////////////////////////////////////////////////////////////////////
28
bool DCFile::read_all(void);

432 4 read 0 4 490 12 DCFile::read 0 3 201 202 203 1410
// WITHIN_PANDA
////////////////////////////////////////////////////////////////////
//     Function: DCFile::read
//       Access: Published
//  Description: Opens and reads the indicated .dc file by name.  The
//               distributed classes defined in the file will be
//               appended to the set of distributed classes already
//               recorded, if any.
//
//               Returns true if the file is successfully read, false
//               if there was an error (in which case the file might
//               have been partially read).
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: DCFile::read
//       Access: Published
//  Description: Parses the already-opened input stream for
//               distributed class descriptions.  The filename
//               parameter is optional and is only used when reporting
//               errors.
//
//               The distributed classes defined in the file will be
//               appended to the set of distributed classes already
//               recorded, if any.
//
//               Returns true if the file is successfully read, false
//               if there was an error (in which case the file might
//               have been partially read).
////////////////////////////////////////////////////////////////////
122
bool DCFile::read(Filename filename);
bool DCFile::read(istream &in, basic_string< char > const &filename = ((string())));

433 5 write 0 4 490 13 DCFile::write 0 2 204 205 907
////////////////////////////////////////////////////////////////////
//     Function: DCFile::write
//       Access: Published
//  Description: Opens the indicated filename for output and writes a
//               parseable description of all the known distributed
//               classes to the file.
//
//               Returns true if the description is successfully
//               written, false otherwise.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: DCFile::write
//       Access: Published
//  Description: Writes a parseable description of all the known
//               distributed classes to the stream.
//
//               Returns true if the description is successfully
//               written, false otherwise.
////////////////////////////////////////////////////////////////////
108
bool DCFile::write(Filename filename, bool brief) const;
bool DCFile::write(ostream &out, bool brief) const;

434 15 get_num_classes 0 4 490 23 DCFile::get_num_classes 0 1 206 296
////////////////////////////////////////////////////////////////////
//     Function: DCFile::get_num_classes
//       Access: Published
//  Description: Returns the number of classes read from the .dc
//               file(s).
////////////////////////////////////////////////////////////////////
40
int DCFile::get_num_classes(void) const;

435 9 get_class 0 4 490 17 DCFile::get_class 0 1 207 265
////////////////////////////////////////////////////////////////////
//     Function: DCFile::get_class
//       Access: Published
//  Description: Returns the nth class read from the .dc file(s).
////////////////////////////////////////////////////////////////////
40
DCClass *DCFile::get_class(int n) const;

436 17 get_class_by_name 0 4 490 25 DCFile::get_class_by_name 0 1 208 323
////////////////////////////////////////////////////////////////////
//     Function: DCFile::get_class_by_name
//       Access: Published
//  Description: Returns the class that has the indicated name, or
//               NULL if there is no such class.
////////////////////////////////////////////////////////////////////
75
DCClass *DCFile::get_class_by_name(basic_string< char > const &name) const;

437 18 get_switch_by_name 0 4 490 26 DCFile::get_switch_by_name 0 1 209 326
////////////////////////////////////////////////////////////////////
//     Function: DCFile::get_switch_by_name
//       Access: Published
//  Description: Returns the switch that has the indicated name, or
//               NULL if there is no such switch.
////////////////////////////////////////////////////////////////////
77
DCSwitch *DCFile::get_switch_by_name(basic_string< char > const &name) const;

438 18 get_field_by_index 0 4 490 26 DCFile::get_field_by_index 0 1 210 667
////////////////////////////////////////////////////////////////////
//     Function: DCFile::get_field_by_index
//       Access: Published, Static
//  Description: Returns a pointer to the one DCField that has the
//               indicated index number, of all the DCFields across
//               all classes in the file.
//
//               This method is only valid if dc-multiple-inheritance
//               is set true in the Config.prc file.  Without this
//               setting, different DCFields may share the same index
//               number, so this global lookup is not possible.
////////////////////////////////////////////////////////////////////
60
DCField *DCFile::get_field_by_index(int index_number) const;

439 17 all_objects_valid 0 4 490 25 DCFile::all_objects_valid 0 1 211 949
// Filename: dcFile.I
// Created by:  drose (10Jan06)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: DCFile::all_objects_valid
//       Access: Published
//  Description: Returns true if all of the classes read from the DC
//               file were defined and valid, or false if any of them
//               were undefined ("bogus classes").  If this is true,
//               we might have read a partial file.
////////////////////////////////////////////////////////////////////
50
inline bool DCFile::all_objects_valid(void) const;

440 22 get_num_import_modules 0 4 490 30 DCFile::get_num_import_modules 0 1 212 308
////////////////////////////////////////////////////////////////////
//     Function: DCFile::get_num_import_modules
//       Access: Published
//  Description: Returns the number of import lines read from the .dc
//               file(s).
////////////////////////////////////////////////////////////////////
47
int DCFile::get_num_import_modules(void) const;

441 17 get_import_module 0 4 490 25 DCFile::get_import_module 0 1 213 316
////////////////////////////////////////////////////////////////////
//     Function: DCFile::get_import_module
//       Access: Published
//  Description: Returns the module named by the nth import line read
//               from the .dc file(s).
////////////////////////////////////////////////////////////////////
60
basic_string< char > DCFile::get_import_module(int n) const;

442 22 get_num_import_symbols 0 4 490 30 DCFile::get_num_import_symbols 0 1 214 482
////////////////////////////////////////////////////////////////////
//     Function: DCFile::get_num_import_symbols
//       Access: Published
//  Description: Returns the number of symbols explicitly imported by
//               the nth import line.  If this is 0, the line is
//               "import modulename"; if it is more than 0, the line
//               is "from modulename import symbol, symbol ... ".
////////////////////////////////////////////////////////////////////
48
int DCFile::get_num_import_symbols(int n) const;

443 17 get_import_symbol 0 4 490 25 DCFile::get_import_symbol 0 1 215 320
////////////////////////////////////////////////////////////////////
//     Function: DCFile::get_import_symbol
//       Access: Published
//  Description: Returns the ith symbol named by the nth import line
//               read from the .dc file(s).
////////////////////////////////////////////////////////////////////
67
basic_string< char > DCFile::get_import_symbol(int n, int i) const;

444 16 get_num_typedefs 0 4 490 24 DCFile::get_num_typedefs 0 1 216 298
////////////////////////////////////////////////////////////////////
//     Function: DCFile::get_num_typedefs
//       Access: Published
//  Description: Returns the number of typedefs read from the .dc
//               file(s).
////////////////////////////////////////////////////////////////////
41
int DCFile::get_num_typedefs(void) const;

445 11 get_typedef 0 4 490 19 DCFile::get_typedef 0 1 217 269
////////////////////////////////////////////////////////////////////
//     Function: DCFile::get_typedef
//       Access: Published
//  Description: Returns the nth typedef read from the .dc file(s).
////////////////////////////////////////////////////////////////////
44
DCTypedef *DCFile::get_typedef(int n) const;

446 19 get_typedef_by_name 0 4 490 27 DCFile::get_typedef_by_name 0 1 218 334
////////////////////////////////////////////////////////////////////
//     Function: DCFile::get_typedef_by_name
//       Access: Published
//  Description: Returns the typedef that has the indicated name, or
//               NULL if there is no such typedef name.
////////////////////////////////////////////////////////////////////
79
DCTypedef *DCFile::get_typedef_by_name(basic_string< char > const &name) const;

447 16 get_num_keywords 0 4 490 24 DCFile::get_num_keywords 0 1 219 298
////////////////////////////////////////////////////////////////////
//     Function: DCFile::get_num_keywords
//       Access: Published
//  Description: Returns the number of keywords read from the .dc
//               file(s).
////////////////////////////////////////////////////////////////////
41
int DCFile::get_num_keywords(void) const;

448 11 get_keyword 0 4 490 19 DCFile::get_keyword 0 1 220 269
////////////////////////////////////////////////////////////////////
//     Function: DCFile::get_keyword
//       Access: Published
//  Description: Returns the nth keyword read from the .dc file(s).
////////////////////////////////////////////////////////////////////
50
DCKeyword const *DCFile::get_keyword(int n) const;

449 19 get_keyword_by_name 0 4 490 27 DCFile::get_keyword_by_name 0 1 221 334
////////////////////////////////////////////////////////////////////
//     Function: DCFile::get_keyword_by_name
//       Access: Published
//  Description: Returns the keyword that has the indicated name, or
//               NULL if there is no such keyword name.
////////////////////////////////////////////////////////////////////
85
DCKeyword const *DCFile::get_keyword_by_name(basic_string< char > const &name) const;

450 8 get_hash 0 4 490 16 DCFile::get_hash 0 1 222 505
////////////////////////////////////////////////////////////////////
//     Function: DCFile::get_hash
//       Access: Published
//  Description: Returns a 32-bit hash index associated with this
//               file.  This number is guaranteed to be consistent if
//               the contents of the file have not changed, and it is
//               very likely to be different if the contents of the
//               file do change.
////////////////////////////////////////////////////////////////////
47
unsigned long int DCFile::get_hash(void) const;

451 8 get_name 0 4 491 19 DCKeyword::get_name 0 1 223 252
////////////////////////////////////////////////////////////////////
//     Function: DCKeyword::get_name
//       Access: Published
//  Description: Returns the name of this keyword.
////////////////////////////////////////////////////////////////////
60
basic_string< char > const &DCKeyword::get_name(void) const;

452 15 get_num_atomics 0 4 492 33 DCMolecularField::get_num_atomics 0 1 224 320
////////////////////////////////////////////////////////////////////
//     Function: DCMolecularField::get_num_atomics
//       Access: Published
//  Description: Returns the number of atomic fields that make up this
//               molecular field.
////////////////////////////////////////////////////////////////////
50
int DCMolecularField::get_num_atomics(void) const;

453 10 get_atomic 0 4 492 28 DCMolecularField::get_atomic 0 1 225 440
////////////////////////////////////////////////////////////////////
//     Function: DCMolecularField::get_atomic
//       Access: Published
//  Description: Returns the nth atomic field that makes up this
//               molecular field.  This may or may not be a field of
//               this particular class; it might be defined in a
//               parent class.
////////////////////////////////////////////////////////////////////
57
DCAtomicField *DCMolecularField::get_atomic(int n) const;

454 17 ~DCMolecularField 0 4 492 35 DCMolecularField::~DCMolecularField 0 0 0
42
DCMolecularField::~DCMolecularField(void);

455 8 get_type 0 4 493 27 DCSimpleParameter::get_type 0 1 226 311
////////////////////////////////////////////////////////////////////
//     Function: DCSimpleParameter::get_type
//       Access: Published
//  Description: Returns the particular subatomic type represented by
//               this instance.
////////////////////////////////////////////////////////////////////
56
DCSubatomicType DCSimpleParameter::get_type(void) const;

456 11 has_modulus 0 4 493 30 DCSimpleParameter::has_modulus 0 1 227 311
////////////////////////////////////////////////////////////////////
//     Function: DCSimpleParameter::has_modulus
//       Access: Published
//  Description: Returns true if there is a modulus associated, false
//               otherwise.,
////////////////////////////////////////////////////////////////////
48
bool DCSimpleParameter::has_modulus(void) const;

457 11 get_modulus 0 4 493 30 DCSimpleParameter::get_modulus 0 1 228 564
////////////////////////////////////////////////////////////////////
//     Function: DCSimpleParameter::get_modulus
//       Access: Published
//  Description: Returns the modulus associated with this type, if
//               any.  It is an error to call this if has_modulus()
//               returned false.
//
//               If present, this is the modulus that is used to
//               constrain the numeric value of the field before it is
//               packed (and range-checked).
////////////////////////////////////////////////////////////////////
50
double DCSimpleParameter::get_modulus(void) const;

458 11 get_divisor 0 4 493 30 DCSimpleParameter::get_divisor 0 1 229 588
////////////////////////////////////////////////////////////////////
//     Function: DCSimpleParameter::get_divisor
//       Access: Published
//  Description: Returns the divisor associated with this type.  This
//               is 1 by default, but if this is other than one it
//               represents the scale to apply when packing and
//               unpacking numeric values (to store fixed-point values
//               in an integer field).  It is only meaningful for
//               numeric-type fields.
////////////////////////////////////////////////////////////////////
47
int DCSimpleParameter::get_divisor(void) const;

459 18 ~DCSimpleParameter 0 4 493 37 DCSimpleParameter::~DCSimpleParameter 0 0 0
44
DCSimpleParameter::~DCSimpleParameter(void);

460 8 get_name 0 4 494 18 DCSwitch::get_name 0 1 230 250
////////////////////////////////////////////////////////////////////
//     Function: DCSwitch::get_name
//       Access: Published
//  Description: Returns the name of this switch.
////////////////////////////////////////////////////////////////////
59
basic_string< char > const &DCSwitch::get_name(void) const;

461 17 get_key_parameter 0 4 494 27 DCSwitch::get_key_parameter 0 1 231 450
////////////////////////////////////////////////////////////////////
//     Function: DCSwitch::get_key_parameter
//       Access: Published
//  Description: Returns the key parameter on which the switch is
//               based.  The value of this parameter in the record
//               determines which one of the several cases within the
//               switch will be used.
////////////////////////////////////////////////////////////////////
49
DCField *DCSwitch::get_key_parameter(void) const;

462 13 get_num_cases 0 4 494 23 DCSwitch::get_num_cases 0 1 232 383
////////////////////////////////////////////////////////////////////
//     Function: DCSwitch::get_num_cases
//       Access: Published
//  Description: Returns the number of different cases within the
//               switch.  The legal values for case_index range from 0
//               to get_num_cases() - 1.
////////////////////////////////////////////////////////////////////
40
int DCSwitch::get_num_cases(void) const;

463 17 get_case_by_value 0 4 494 27 DCSwitch::get_case_by_value 0 1 233 363
////////////////////////////////////////////////////////////////////
//     Function: DCSwitch::get_case_by_value
//       Access: Published
//  Description: Returns the index number of the case with the
//               indicated packed value, or -1 if no case has this
//               value.
////////////////////////////////////////////////////////////////////
78
int DCSwitch::get_case_by_value(basic_string< char > const &case_value) const;

464 8 get_case 0 4 494 18 DCSwitch::get_case 0 1 234 272
////////////////////////////////////////////////////////////////////
//     Function: DCSwitch::get_case
//       Access: Published
//  Description: Returns the DCPackerInterface that packs the nth case.
////////////////////////////////////////////////////////////////////
51
DCPackerInterface *DCSwitch::get_case(int n) const;

465 16 get_default_case 0 4 494 26 DCSwitch::get_default_case 0 1 235 338
////////////////////////////////////////////////////////////////////
//     Function: DCSwitch::get_default_case
//       Access: Published
//  Description: Returns the DCPackerInterface that packs the default
//               case, or NULL if there is no default case.
////////////////////////////////////////////////////////////////////
58
DCPackerInterface *DCSwitch::get_default_case(void) const;

466 9 get_value 0 4 494 19 DCSwitch::get_value 0 1 236 296
////////////////////////////////////////////////////////////////////
//     Function: DCSwitch::get_value
//       Access: Published
//  Description: Returns the packed value associated with the
//               indicated case.
////////////////////////////////////////////////////////////////////
63
basic_string< char > DCSwitch::get_value(int case_index) const;

467 14 get_num_fields 0 4 494 24 DCSwitch::get_num_fields 0 1 237 275
////////////////////////////////////////////////////////////////////
//     Function: DCSwitch::get_num_fields
//       Access: Published
//  Description: Returns the number of fields in the indicated case.
////////////////////////////////////////////////////////////////////
51
int DCSwitch::get_num_fields(int case_index) const;

468 9 get_field 0 4 494 19 DCSwitch::get_field 0 1 238 268
////////////////////////////////////////////////////////////////////
//     Function: DCSwitch::get_num_fields
//       Access: Published
//  Description: Returns the nth field in the indicated case.
////////////////////////////////////////////////////////////////////
58
DCField *DCSwitch::get_field(int case_index, int n) const;

469 17 get_field_by_name 0 4 494 27 DCSwitch::get_field_by_name 0 1 239 341
////////////////////////////////////////////////////////////////////
//     Function: DCSwitch::get_field_by_name
//       Access: Published
//  Description: Returns the field with the given name from the
//               indicated case, or NULL if no field has this name.
////////////////////////////////////////////////////////////////////
93
DCField *DCSwitch::get_field_by_name(int case_index, basic_string< char > const &name) const;

470 10 get_switch 0 4 495 29 DCSwitchParameter::get_switch 0 1 240 281
////////////////////////////////////////////////////////////////////
//     Function: DCSwitchParameter::get_switch
//       Access: Published
//  Description: Returns the switch object this parameter represents.
////////////////////////////////////////////////////////////////////
58
DCSwitch const *DCSwitchParameter::get_switch(void) const;

471 18 ~DCSwitchParameter 0 4 495 37 DCSwitchParameter::~DCSwitchParameter 0 0 0
44
DCSwitchParameter::~DCSwitchParameter(void);

472 10 get_number 0 4 496 21 DCTypedef::get_number 0 1 241 384
////////////////////////////////////////////////////////////////////
//     Function: DCTypedef::get_number
//       Access: Published
//  Description: Returns a unique index number associated with this
//               typedef definition.  This is defined implicitly when
//               the .dc file(s) are read.
////////////////////////////////////////////////////////////////////
38
int DCTypedef::get_number(void) const;

473 8 get_name 0 4 496 19 DCTypedef::get_name 0 1 242 252
////////////////////////////////////////////////////////////////////
//     Function: DCTypedef::get_name
//       Access: Published
//  Description: Returns the name of this typedef.
////////////////////////////////////////////////////////////////////
60
basic_string< char > const &DCTypedef::get_name(void) const;

474 15 get_description 0 4 496 26 DCTypedef::get_description 0 1 243 315
////////////////////////////////////////////////////////////////////
//     Function: DCTypedef::get_description
//       Access: Published
//  Description: Returns a brief decription of the typedef, useful for
//               human consumption.
////////////////////////////////////////////////////////////////////
60
basic_string< char > DCTypedef::get_description(void) const;

475 16 is_bogus_typedef 0 4 496 27 DCTypedef::is_bogus_typedef 0 1 244 531
////////////////////////////////////////////////////////////////////
//     Function: DCTypedef::is_bogus_typedef
//       Access: Public
//  Description: Returns true if the typedef has been flagged as a bogus
//               typedef.  This is set for typedefs that are generated by
//               the parser as placeholder for missing typedefs, as
//               when reading a partial file; it should not occur in a
//               normal valid dc file.
////////////////////////////////////////////////////////////////////
45
bool DCTypedef::is_bogus_typedef(void) const;

476 19 is_implicit_typedef 0 4 496 30 DCTypedef::is_implicit_typedef 0 1 245 404
////////////////////////////////////////////////////////////////////
//     Function: DCTypedef::is_implicit_typedef
//       Access: Public
//  Description: Returns true if the typedef has been flagged as an
//               implicit typedef, meaning it was created for a
//               DCClass that was referenced inline as a type.
////////////////////////////////////////////////////////////////////
48
bool DCTypedef::is_implicit_typedef(void) const;

245
1 14 Dtool_zIbGEqeZ 0 6 5 499 0 14 Dtool_zIbGEqeZ 809 // Filename: dcPackerInterface.I
// Created by:  drose (18Jun04)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: DCPackerInterface::get_name
//       Access: Published
//  Description: Returns the name of this field, or empty string
//               if the field is unnamed.
//////////////////////////////////////////////////////////////////// 1 4 this 3 497  
2 14 Dtool_zIbG4eZn 0 6 6 500 0 14 Dtool_zIbG4eZn 849 ////////////////////////////////////////////////////////////////////
//     Function: DCPackerInterface::find_seek_index
//       Access: Published
//  Description: Returns the index number to be passed to a future
//               call to DCPacker::seek() to seek directly to the
//               named field without having to look up the field name
//               in a table later, or -1 if the named field cannot be
//               found.
//
//               If the named field is nested within a switch or some
//               similar dynamic structure that reveals different
//               fields based on the contents of the data, this
//               mechanism cannot be used to pre-fetch the field index
//               number--you must seek for the field by name.
//////////////////////////////////////////////////////////////////// 2 4 this 3 497  4 name 1 499  
3 14 Dtool_zIbGlG9m 0 6 7 502 0 14 Dtool_zIbGlG9m 236 ////////////////////////////////////////////////////////////////////
//     Function: DCPackerInterface::as_field
//       Access: Published, Virtual
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 501  
4 14 Dtool_zIbGJDqB 0 6 7 503 0 14 Dtool_zIbGJDqB 236 ////////////////////////////////////////////////////////////////////
//     Function: DCPackerInterface::as_field
//       Access: Published, Virtual
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 497  
5 14 Dtool_zIbGUOXk 0 6 8 505 0 14 Dtool_zIbGUOXk 247 ////////////////////////////////////////////////////////////////////
//     Function: DCPackerInterface::as_switch_parameter
//       Access: Published, Virtual
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 501  
6 14 Dtool_zIbG1e9D 0 6 8 506 0 14 Dtool_zIbG1e9D 247 ////////////////////////////////////////////////////////////////////
//     Function: DCPackerInterface::as_switch_parameter
//       Access: Published, Virtual
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 497  
7 14 Dtool_zIbGLrGr 0 6 9 508 0 14 Dtool_zIbGLrGr 246 ////////////////////////////////////////////////////////////////////
//     Function: DCPackerInterface::as_class_parameter
//       Access: Published, Virtual
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 501  
8 14 Dtool_zIbG_GEW 0 6 9 509 0 14 Dtool_zIbG_GEW 246 ////////////////////////////////////////////////////////////////////
//     Function: DCPackerInterface::as_class_parameter
//       Access: Published, Virtual
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 497  
9 14 Dtool_zIbGcNZX 0 6 10 511 0 14 Dtool_zIbGcNZX 452 ////////////////////////////////////////////////////////////////////
//     Function: DCPackerInterface::check_match
//       Access: Published
//  Description: Returns true if the other interface is bitwise the
//               same as this one--that is, a uint32 only matches a
//               uint32, etc. Names of components, and range limits,
//               are not compared.
//////////////////////////////////////////////////////////////////// 2 4 this 3 497  5 other 1 497  
10 14 Dtool_zIbGvvj_ 0 6 10 511 0 14 Dtool_zIbGvvj_ 684 ////////////////////////////////////////////////////////////////////
//     Function: DCPackerInterface::check_match
//       Access: Published
//  Description: Returns true if this interface is bitwise the same as
//               the interface described with the indicated formatted
//               string, e.g. "(uint8, uint8, int16)", or false
//               otherwise.
//
//               If DCFile is not NULL, it specifies the DCFile that
//               was previously loaded, from which some predefined
//               structs and typedefs may be referenced in the
//               description string.
//////////////////////////////////////////////////////////////////// 3 4 this 3 497  11 description 1 499  6 dcfile 1 512  
11 14 Dtool_zIbGrsRl 0 6 10 511 0 14 Dtool_zIbGrsRl 684 ////////////////////////////////////////////////////////////////////
//     Function: DCPackerInterface::check_match
//       Access: Published
//  Description: Returns true if this interface is bitwise the same as
//               the interface described with the indicated formatted
//               string, e.g. "(uint8, uint8, int16)", or false
//               otherwise.
//
//               If DCFile is not NULL, it specifies the DCFile that
//               was previously loaded, from which some predefined
//               structs and typedefs may be referenced in the
//               description string.
//////////////////////////////////////////////////////////////////// 2 4 this 3 497  11 description 1 499  
12 14 Dtool_zIbGKRZd 0 6 13 511 0 14 Dtool_zIbGKRZd 317 ////////////////////////////////////////////////////////////////////
//     Function: DCKeywordList::has_keyword
//       Access: Published
//  Description: Returns true if this list includes the indicated
//               keyword, false otherwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 513  7 keyword 1 515  
13 14 Dtool_zIbGMTox 0 6 13 511 0 14 Dtool_zIbGMTox 317 ////////////////////////////////////////////////////////////////////
//     Function: DCKeywordList::has_keyword
//       Access: Published
//  Description: Returns true if this list includes the indicated
//               keyword, false otherwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 513  4 name 1 499  
14 14 Dtool_zIbGQFpj 0 6 14 500 0 14 Dtool_zIbGQFpj 274 ////////////////////////////////////////////////////////////////////
//     Function: DCKeywordList::get_num_keywords
//       Access: Published
//  Description: Returns the number of keywords in the list.
//////////////////////////////////////////////////////////////////// 1 4 this 3 513  
15 14 Dtool_zIbGxzo1 0 6 15 515 0 14 Dtool_zIbGxzo1 262 ////////////////////////////////////////////////////////////////////
//     Function: DCKeywordList::get_keyword
//       Access: Published
//  Description: Returns the nth keyword in the list.
//////////////////////////////////////////////////////////////////// 2 4 this 3 513  1 n 1 500  
16 14 Dtool_zIbGDCHO 0 6 16 515 0 14 Dtool_zIbGDCHO 383 ////////////////////////////////////////////////////////////////////
//     Function: DCKeywordList::get_keyword_by_name
//       Access: Published
//  Description: Returns the keyword in the list with the indicated
//               name, or NULL if there is no keyword in the list with
//               that name.
//////////////////////////////////////////////////////////////////// 2 4 this 3 513  4 name 1 499  
17 14 Dtool_zIbGcn3i 0 6 17 511 0 14 Dtool_zIbGcn3i 397 ////////////////////////////////////////////////////////////////////
//     Function: DCKeywordList::compare_keywords
//       Access: Published
//  Description: Returns true if this list has the same keywords
//               as the other list, false if some keywords differ.
//               Order is not considered important.
//////////////////////////////////////////////////////////////////// 2 4 this 3 513  5 other 1 513  
18 14 Dtool_zIbGYIQq 0 6 24 500 0 14 Dtool_zIbGYIQq 852 // Filename: dcField.I
// Created by:  drose (10Jan06)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: DCField::get_number
//       Access: Published
//  Description: Returns a unique index number associated with this
//               field.  This is defined implicitly when the .dc
//               file(s) are read.
//////////////////////////////////////////////////////////////////// 1 4 this 3 503  
19 14 Dtool_zIbGKiHU 0 6 25 517 0 14 Dtool_zIbGKiHU 302 ////////////////////////////////////////////////////////////////////
//     Function: DCField::get_class
//       Access: Published
//  Description: Returns the DCClass pointer for the class that
//               contains this field.
//////////////////////////////////////////////////////////////////// 1 4 this 3 503  
20 14 Dtool_zIbG9WW_ 0 6 26 502 0 14 Dtool_zIbG9WW_ 226 ////////////////////////////////////////////////////////////////////
//     Function: DCField::as_field
//       Access: Published, Virtual
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 502  
21 14 Dtool_zIbGy3Bl 0 6 26 503 0 14 Dtool_zIbGy3Bl 226 ////////////////////////////////////////////////////////////////////
//     Function: DCField::as_field
//       Access: Published, Virtual
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 503  
22 14 Dtool_zIbGEiDu 0 6 27 518 0 14 Dtool_zIbGEiDu 396 ////////////////////////////////////////////////////////////////////
//     Function: DCField::as_atomic_field
//       Access: Published, Virtual
//  Description: Returns the same field pointer converted to an atomic
//               field pointer, if this is in fact an atomic field;
//               otherwise, returns NULL.
//////////////////////////////////////////////////////////////////// 1 4 this 3 502  
23 14 Dtool_zIbGzwks 0 6 27 519 0 14 Dtool_zIbGzwks 396 ////////////////////////////////////////////////////////////////////
//     Function: DCField::as_atomic_field
//       Access: Published, Virtual
//  Description: Returns the same field pointer converted to an atomic
//               field pointer, if this is in fact an atomic field;
//               otherwise, returns NULL.
//////////////////////////////////////////////////////////////////// 1 4 this 3 503  
24 14 Dtool_zIbGuhmz 0 6 28 521 0 14 Dtool_zIbGuhmz 403 ////////////////////////////////////////////////////////////////////
//     Function: DCField::as_molecular_field
//       Access: Published, Virtual
//  Description: Returns the same field pointer converted to a
//               molecular field pointer, if this is in fact a
//               molecular field; otherwise, returns NULL.
//////////////////////////////////////////////////////////////////// 1 4 this 3 502  
25 14 Dtool_zIbG5dUO 0 6 28 522 0 14 Dtool_zIbG5dUO 403 ////////////////////////////////////////////////////////////////////
//     Function: DCField::as_molecular_field
//       Access: Published, Virtual
//  Description: Returns the same field pointer converted to a
//               molecular field pointer, if this is in fact a
//               molecular field; otherwise, returns NULL.
//////////////////////////////////////////////////////////////////// 1 4 this 3 503  
26 14 Dtool_zIbGdmWk 0 6 29 524 0 14 Dtool_zIbGdmWk 230 ////////////////////////////////////////////////////////////////////
//     Function: DCField::as_parameter
//       Access: Published, Virtual
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 502  
27 14 Dtool_zIbGORwy 0 6 29 525 0 14 Dtool_zIbGORwy 230 ////////////////////////////////////////////////////////////////////
//     Function: DCField::as_parameter
//       Access: Published, Virtual
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 503  
28 14 Dtool_zIbGbV7k 0 6 30 499 0 14 Dtool_zIbGbV7k 412 ////////////////////////////////////////////////////////////////////
//     Function: DCField::format_data
//       Access: Published
//  Description: Given a blob that represents the packed data for this
//               field, returns a string formatting it for human
//               consumption.  Returns empty string if there is an error.
//////////////////////////////////////////////////////////////////// 3 4 this 3 502  11 packed_data 1 499  16 show_field_names 1 511  
29 14 Dtool_zIbGAzaE 0 6 30 499 0 14 Dtool_zIbGAzaE 412 ////////////////////////////////////////////////////////////////////
//     Function: DCField::format_data
//       Access: Published
//  Description: Given a blob that represents the packed data for this
//               field, returns a string formatting it for human
//               consumption.  Returns empty string if there is an error.
//////////////////////////////////////////////////////////////////// 2 4 this 3 502  11 packed_data 1 499  
30 14 Dtool_zIbGZxBu 0 6 31 499 0 14 Dtool_zIbGZxBu 515 ////////////////////////////////////////////////////////////////////
//     Function: DCField::parse_string
//       Access: Published
//  Description: Given a human-formatted string (for instance, as
//               returned by format_data(), above) that represents the
//               value of this field, parse the string and return the
//               corresponding packed data.  Returns empty string if
//               there is an error.
//////////////////////////////////////////////////////////////////// 2 4 this 3 502  16 formatted_string 1 499  
31 14 Dtool_zIbGu_ys 0 6 32 511 0 14 Dtool_zIbGu_ys 479 ////////////////////////////////////////////////////////////////////
//     Function: DCField::validate_ranges
//       Access: Published
//  Description: Verifies that all of the packed values in the field
//               data are within the specified ranges and that there
//               are no extra bytes on the end of the record.  Returns
//               true if all fields are valid, false otherwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 503  11 packed_data 1 499  
32 14 Dtool_zIbGMANq 0 6 33 511 0 14 Dtool_zIbGMANq 339 ////////////////////////////////////////////////////////////////////
//     Function: DCField::has_default_value
//       Access: Published
//  Description: Returns true if a default value has been explicitly
//               established for this field, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 503  
33 14 Dtool_zIbGJt60 0 6 34 499 0 14 Dtool_zIbGJt60 494 ////////////////////////////////////////////////////////////////////
//     Function: DCField::get_default_value
//       Access: Published
//  Description: Returns the default value for this field.  If a
//               default value has been explicitly set
//               (e.g. has_default_value() returns true), returns that
//               value; otherwise, returns an implicit default for the
//               field.
//////////////////////////////////////////////////////////////////// 1 4 this 3 503  
34 14 Dtool_zIbG6kWH 0 6 35 511 0 14 Dtool_zIbG6kWH 522 ////////////////////////////////////////////////////////////////////
//     Function: DCField::is_bogus_field
//       Access: Published
//  Description: Returns true if the field has been flagged as a bogus
//               field.  This is set for fields that are generated by
//               the parser as placeholder for missing fields, as
//               when reading a partial file; it should not occur in a
//               normal valid dc file.
//////////////////////////////////////////////////////////////////// 1 4 this 3 503  
35 14 Dtool_zIbGsDoF 0 6 36 511 0 14 Dtool_zIbGsDoF 312 ////////////////////////////////////////////////////////////////////
//     Function: DCField::is_required
//       Access: Published
//  Description: Returns true if the "required" flag is set for this
//               field, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 503  
36 14 Dtool_zIbG01Fw 0 6 37 511 0 14 Dtool_zIbG01Fw 314 ////////////////////////////////////////////////////////////////////
//     Function: DCField::is_broadcast
//       Access: Published
//  Description: Returns true if the "broadcast" flag is set for this
//               field, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 503  
37 14 Dtool_zIbGFnxN 0 6 38 511 0 14 Dtool_zIbGFnxN 302 ////////////////////////////////////////////////////////////////////
//     Function: DCField::is_ram
//       Access: Published
//  Description: Returns true if the "ram" flag is set for this
//               field, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 503  
38 14 Dtool_zIbGnl1_ 0 6 39 511 0 14 Dtool_zIbGnl1_ 300 ////////////////////////////////////////////////////////////////////
//     Function: DCField::is_db
//       Access: Published
//  Description: Returns true if the "db" flag is set for this
//               field, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 503  
39 14 Dtool_zIbG_j06 0 6 40 511 0 14 Dtool_zIbG_j06 308 ////////////////////////////////////////////////////////////////////
//     Function: DCField::is_clsend
//       Access: Published
//  Description: Returns true if the "clsend" flag is set for this
//               field, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 503  
40 14 Dtool_zIbGtyCR 0 6 41 511 0 14 Dtool_zIbGtyCR 308 ////////////////////////////////////////////////////////////////////
//     Function: DCField::is_clrecv
//       Access: Published
//  Description: Returns true if the "clrecv" flag is set for this
//               field, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 503  
41 14 Dtool_zIbGGJ0E 0 6 42 511 0 14 Dtool_zIbGGJ0E 310 ////////////////////////////////////////////////////////////////////
//     Function: DCField::is_ownsend
//       Access: Published
//  Description: Returns true if the "ownsend" flag is set for this
//               field, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 503  
42 14 Dtool_zIbGZRQM 0 6 43 511 0 14 Dtool_zIbGZRQM 310 ////////////////////////////////////////////////////////////////////
//     Function: DCField::is_ownrecv
//       Access: Published
//  Description: Returns true if the "ownrecv" flag is set for this
//               field, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 503  
43 14 Dtool_zIbGl0Uq 0 6 44 511 0 14 Dtool_zIbGl0Uq 308 ////////////////////////////////////////////////////////////////////
//     Function: DCField::is_airecv
//       Access: Published
//  Description: Returns true if the "airecv" flag is set for this
//               field, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 503  
44 14 Dtool_zIbGLxp4 0 4 45 529 0 14 Dtool_zIbGLxp4 292 ////////////////////////////////////////////////////////////////////
//     Function : DCField::output
//       Access : Published
//  Description : Write a string representation of this instance to
//                <out>.
//////////////////////////////////////////////////////////////////// 2 4 this 3 503  3 out 1 527  
45 14 Dtool_zIbGnirA 0 4 46 529 0 14 Dtool_zIbGnirA 286 ////////////////////////////////////////////////////////////////////
//     Function : DCField::
//       Access : Published
//  Description : Write a string representation of this instance to
//                <out>.
//////////////////////////////////////////////////////////////////// 3 4 this 3 503  3 out 1 527  12 indent_level 1 500  
46 14 Dtool_zIbGBNMR 0 6 47 511 0 14 Dtool_zIbGBNMR 470 ////////////////////////////////////////////////////////////////////
//     Function: DCField::pack_args
//       Access: Published
//  Description: Packs the Python arguments from the indicated tuple
//               into the packer.  Returns true on success, false on
//               failure.
//
//               It is assumed that the packer is currently positioned
//               on this field.
//////////////////////////////////////////////////////////////////// 3 4 this 3 503  6 packer 1 530  8 sequence 1 531  
47 14 Dtool_zIbG7m86 0 6 48 531 0 14 Dtool_zIbG7m86 491 ////////////////////////////////////////////////////////////////////
//     Function: DCField::unpack_args
//       Access: Published
//  Description: Unpacks the values from the packer, beginning at
//               the current point in the unpack_buffer, into a Python
//               tuple and returns the tuple.
//
//               It is assumed that the packer is currently positioned
//               on this field.
//////////////////////////////////////////////////////////////////// 2 4 this 3 503  6 packer 1 530  
48 14 Dtool_zIbGc4tY 0 4 49 529 0 14 Dtool_zIbGc4tY 378 ////////////////////////////////////////////////////////////////////
//     Function: DCField::receive_update
//       Access: Published
//  Description: Extracts the update message out of the datagram and
//               applies it to the indicated object by calling the
//               appropriate method.
//////////////////////////////////////////////////////////////////// 3 4 this 3 503  6 packer 1 530  7 distobj 1 531  
49 14 Dtool_zIbGF0YR 0 7 50 535 0 14 Dtool_zIbGF0YR 388 ////////////////////////////////////////////////////////////////////
//     Function: DCField::client_format_update
//       Access: Published
//  Description: Generates a datagram containing the message necessary
//               to send an update for the indicated distributed
//               object from the client.
//////////////////////////////////////////////////////////////////// 3 4 this 3 503  5 do_id 1 534  4 args 1 531  
50 14 Dtool_zIbGRmQd 0 7 51 535 0 14 Dtool_zIbGRmQd 380 ////////////////////////////////////////////////////////////////////
//     Function: DCField::ai_format_update
//       Access: Published
//  Description: Generates a datagram containing the message necessary
//               to send an update for the indicated distributed
//               object from the AI.
//////////////////////////////////////////////////////////////////// 5 4 this 3 503  5 do_id 1 534  5 to_id 1 536  7 from_id 1 536  4 args 1 531  
51 14 Dtool_zIbGw7EM 0 7 52 535 0 14 Dtool_zIbGw7EM 426 ////////////////////////////////////////////////////////////////////
//     Function: DCField::ai_format_update_msg_type
//       Access: Published
//  Description: Generates a datagram containing the message necessary
//               to send an update, with the msg type,
//               for the indicated distributed
//               object from the AI.
//////////////////////////////////////////////////////////////////// 6 4 this 3 503  5 do_id 1 534  5 to_id 1 536  7 from_id 1 536  8 msg_type 1 500  4 args 1 531  
52 14 Dtool_zIbG2PMX 0 6 19 501 0 14 Dtool_zIbG2PMX 0 1 4 this 3 502  
53 14 Dtool_zIbGvejk 0 6 20 502 0 14 Dtool_zIbGvejk 0 1 4 this 3 501  
54 14 Dtool_zIbGyCOi 0 6 21 537 0 14 Dtool_zIbGyCOi 0 1 4 this 3 502  
55 14 Dtool_zIbGS2_O 0 6 22 502 0 14 Dtool_zIbGS2_O 0 1 4 this 3 537  
56 14 Dtool_zIbGb_tg 0 7 54 538 294 14 Dtool_zIbGb_tg 709 // Filename: dcPackData.I
// Created by:  drose (15Jun04)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: DCPackData::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 0 
57 14 Dtool_zIbGi4W4 0 4 56 529 0 14 Dtool_zIbGi4W4 318 ////////////////////////////////////////////////////////////////////
//     Function: DCPackData::clear
//       Access: Published
//  Description: Empties the contents of the data (without necessarily
//               freeing its allocated memory).
//////////////////////////////////////////////////////////////////// 1 4 this 3 538  
58 14 Dtool_zIbGqSqZ 0 6 57 499 0 14 Dtool_zIbGqSqZ 297 ////////////////////////////////////////////////////////////////////
//     Function: DCPackData::get_string
//       Access: Published
//  Description: Returns the data buffer as a string.  Also see
//               get_data().
//////////////////////////////////////////////////////////////////// 1 4 this 3 539  
59 14 Dtool_zIbGR8z_ 0 6 58 534 0 14 Dtool_zIbGR8z_ 393 ////////////////////////////////////////////////////////////////////
//     Function: DCPackData::get_length
//       Access: Published
//  Description: Returns the current length of the buffer.  This is
//               the number of useful bytes stored in the buffer, not
//               the amount of memory it takes up.
//////////////////////////////////////////////////////////////////// 1 4 this 3 539  
60 14 Dtool_zIbGfQtS 0 7 60 530 299 14 Dtool_zIbGfQtS 221 ////////////////////////////////////////////////////////////////////
//     Function: DCPacker::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 0 
61 14 Dtool_zIbGJSK8 0 4 62 529 0 14 Dtool_zIbGJSK8 928 // Filename: dcPacker.I
// Created by:  drose (15Jun04)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::clear_data
//       Access: Published
//  Description: Empties the data in the pack buffer and unpack
//               buffer.  This should be called between calls to
//               begin_pack(), unless you want to concatenate all of
//               the pack results together.
//////////////////////////////////////////////////////////////////// 1 4 this 3 530  
62 14 Dtool_zIbG45bk 0 4 63 529 0 14 Dtool_zIbG45bk 703 ////////////////////////////////////////////////////////////////////
//     Function: DCPacker::begin_pack
//       Access: Published
//  Description: Begins a packing session.  The parameter is the DC
//               object that describes the packing format; it may be a
//               DCParameter or DCField.
//
//               Unless you call clear_data() between sessions,
//               multiple packing sessions will be concatenated
//               together into the same buffer.  If you wish to add
//               bytes to the buffer between packing sessions, use
//               append_data() or get_write_pointer().
//////////////////////////////////////////////////////////////////// 2 4 this 3 530  4 root 1 497  
63 14 Dtool_zIbG7Jow 0 6 64 511 0 14 Dtool_zIbG7Jow 382 ////////////////////////////////////////////////////////////////////
//     Function: DCPacker::end_pack
//       Access: Published, Virtual
//  Description: Finishes a packing session.
//
//               The return value is true on success, or false if
//               there has been some error during packing.
//////////////////////////////////////////////////////////////////// 1 4 this 3 530  
64 14 Dtool_zIbGvBpF 0 4 65 529 0 14 Dtool_zIbGvBpF 383 ////////////////////////////////////////////////////////////////////
//     Function: DCPacker::set_unpack_data
//       Access: Public
//  Description: Sets up the unpack_data pointer.  You may call this
//               before calling the version of begin_unpack() that
//               takes only one parameter.
//////////////////////////////////////////////////////////////////// 2 4 this 3 530  4 data 1 499  
65 14 Dtool_zIbGbOoZ 0 4 66 529 0 14 Dtool_zIbGbOoZ 688 ////////////////////////////////////////////////////////////////////
//     Function: DCPacker::begin_unpack
//       Access: Public
//  Description: Begins an unpacking session.  You must have
//               previously called set_unpack_data() to specify a
//               buffer to unpack.
//
//               If there was data left in the buffer after a previous
//               begin_unpack() .. end_unpack() session, the new
//               session will resume from the current point.  This
//               method may be used, therefore, to unpack a sequence
//               of objects from the same buffer.
//////////////////////////////////////////////////////////////////// 2 4 this 3 530  4 root 1 497  
66 14 Dtool_zIbGbEEC 0 6 67 511 0 14 Dtool_zIbGbEEC 440 ////////////////////////////////////////////////////////////////////
//     Function: DCPacker::end_unpack
//       Access: Published
//  Description: Finishes the unpacking session.
//
//               The return value is true on success, or false if
//               there has been some error during unpacking (or if all
//               fields have not been unpacked).
//////////////////////////////////////////////////////////////////// 1 4 this 3 530  
67 14 Dtool_zIbGthAN 0 4 68 529 0 14 Dtool_zIbGthAN 937 ////////////////////////////////////////////////////////////////////
//     Function: DCPacker::begin_repack
//       Access: Public
//  Description: Begins a repacking session.  You must have previously
//               called set_unpack_data() to specify a buffer to
//               unpack.
//
//               Unlike begin_pack() or begin_unpack() you may not
//               concatenate the results of multiple begin_repack()
//               sessions in one buffer.
//
//               Also, unlike in packing or unpacking modes, you may
//               not walk through the fields from beginning to end, or
//               even pack two consecutive fields at once.  Instead,
//               you must call seek() for each field you wish to
//               modify and pack only that one field; then call seek()
//               again to modify another field.
//////////////////////////////////////////////////////////////////// 2 4 this 3 530  4 root 1 497  
68 14 Dtool_zIbGwRsw 0 6 69 511 0 14 Dtool_zIbGwRsw 440 ////////////////////////////////////////////////////////////////////
//     Function: DCPacker::end_repack
//       Access: Published
//  Description: Finishes the repacking session.
//
//               The return value is true on success, or false if
//               there has been some error during repacking (or if all
//               fields have not been repacked).
//////////////////////////////////////////////////////////////////// 1 4 this 3 530  
69 14 Dtool_zIbG_NNW 0 6 70 511 0 14 Dtool_zIbG_NNW 658 ////////////////////////////////////////////////////////////////////
//     Function: DCPacker::seek
//       Access: Published
//  Description: Sets the current unpack (or repack) position to the
//               named field.  In unpack mode, the next call to
//               unpack_*() or push() will begin to read the named
//               field.  In repack mode, the next call to pack_*() or
//               push() will modify the named field.
//
//               Returns true if successful, false if the field is not
//               known (or if the packer is in an invalid mode).
//////////////////////////////////////////////////////////////////// 2 4 this 3 530  10 field_name 1 499  
70 14 Dtool_zIbG2QAv 0 6 70 511 0 14 Dtool_zIbG2QAv 632 ////////////////////////////////////////////////////////////////////
//     Function: DCPacker::seek
//       Access: Published
//  Description: Seeks to the field indentified by seek_index, which
//               was returned by an earlier call to
//               DCField::find_seek_index() to get the index of some
//               nested field.  Also see the version of seek() that
//               accepts a field name.
//
//               Returns true if successful, false if the field is not
//               known (or if the packer is in an invalid mode).
//////////////////////////////////////////////////////////////////// 2 4 this 3 530  10 seek_index 1 500  
71 14 Dtool_zIbG0gaI 0 6 71 511 0 14 Dtool_zIbG0gaI 529 ////////////////////////////////////////////////////////////////////
//     Function: DCPacker::has_nested_fields
//       Access: Published
//  Description: Returns true if the current field has any nested
//               fields (and thus expects a push() .. pop()
//               interface), or false otherwise.  If this returns
//               true, get_num_nested_fields() may be called to
//               determine how many nested fields are expected.
//////////////////////////////////////////////////////////////////// 1 4 this 3 541  
72 14 Dtool_zIbGQA_a 0 6 72 500 0 14 Dtool_zIbGQA_a 885 ////////////////////////////////////////////////////////////////////
//     Function: DCPacker::get_num_nested_fields
//       Access: Published
//  Description: Returns the number of nested fields associated with
//               the current field, if has_nested_fields() returned
//               true.
//
//               The return value may be -1 to indicate that a
//               variable number of nested fields are accepted by this
//               field type (e.g. a variable-length array).
//
//               Note that this method is unreliable to determine how
//               many fields you must traverse before you can call
//               pop(), since particularly in the presence of a
//               DCSwitch, it may change during traversal.  Use
//               more_nested_fields() instead.
//////////////////////////////////////////////////////////////////// 1 4 this 3 541  
73 14 Dtool_zIbGloor 0 6 73 511 0 14 Dtool_zIbGloor 389 ////////////////////////////////////////////////////////////////////
//     Function: DCPacker::more_nested_fields
//       Access: Published
//  Description: Returns true if there are more nested fields to pack
//               or unpack in the current push sequence, false if it
//               is time to call pop().
//////////////////////////////////////////////////////////////////// 1 4 this 3 541  
74 14 Dtool_zIbGO8yu 0 6 74 497 0 14 Dtool_zIbGO8yu 436 ////////////////////////////////////////////////////////////////////
//     Function: DCPacker::get_current_parent
//       Access: Published
//  Description: Returns the field that we left in our last call to
//               push(): the owner of the current level of fields.
//               This may be NULL at the beginning of the pack
//               operation.
//////////////////////////////////////////////////////////////////// 1 4 this 3 541  
75 14 Dtool_zIbGe_9F 0 6 75 497 0 14 Dtool_zIbGe_9F 458 ////////////////////////////////////////////////////////////////////
//     Function: DCPacker::get_current_field
//       Access: Published
//  Description: Returns the field that will be referenced by the next
//               call to pack_*() or unpack_*().  This will be NULL if
//               we have unpacked (or packed) all fields, or if it is
//               time to call pop().
//////////////////////////////////////////////////////////////////// 1 4 this 3 541  
76 14 Dtool_zIbG3fj4 0 6 76 506 0 14 Dtool_zIbG3fj4 746 ////////////////////////////////////////////////////////////////////
//     Function: DCPacker::get_last_switch
//       Access: Published
//  Description: Returns a pointer to the last DCSwitch instance that
//               we have passed by and selected one case of during the
//               pack/unpack process.  Each time we encounter a new
//               DCSwitch and select a case, this will change state.
//
//               This may be used to detect when a DCSwitch has been
//               selected.  At the moment this changes state,
//               get_current_parent() will contain the particular
//               SwitchCase that was selected by the switch.
//////////////////////////////////////////////////////////////////// 1 4 this 3 541  
77 14 Dtool_zIbGDwsp 0 6 77 478 0 14 Dtool_zIbGDwsp 771 ////////////////////////////////////////////////////////////////////
//     Function: DCPacker::get_pack_type
//       Access: Published
//  Description: Returns the type of value expected by the current
//               field.  See the enumerated type definition at the top
//               of DCPackerInterface.h.  If this returns one of
//               PT_double, PT_int, PT_int64, or PT_string, then you
//               should call the corresponding pack_double(),
//               pack_int() function (or unpack_double(),
//               unpack_int(), etc.) to transfer data.  Otherwise, you
//               should call push() and begin packing or unpacking the
//               nested fields.
//////////////////////////////////////////////////////////////////// 1 4 this 3 541  
78 14 Dtool_zIbGeaOc 0 6 78 499 0 14 Dtool_zIbGeaOc 406 ////////////////////////////////////////////////////////////////////
//     Function: DCPacker::get_current_field_name
//       Access: Published
//  Description: Returns the name of the current field, if it has a
//               name, or the empty string if the field does not have
//               a name or there is no current field.
//////////////////////////////////////////////////////////////////// 1 4 this 3 541  
79 14 Dtool_zIbGcQuF 0 4 79 529 0 14 Dtool_zIbGcQuF 587 ////////////////////////////////////////////////////////////////////
//     Function: DCPacker::push
//       Access: Published
//  Description: Marks the beginning of a nested series of fields.
//
//               This must be called before filling the elements of an
//               array or the individual fields in a structure field.
//               It must also be balanced by a matching pop().
//
//               It is necessary to use push() / pop() only if
//               has_nested_fields() returns true.
//////////////////////////////////////////////////////////////////// 1 4 this 3 530  
80 14 Dtool_zIbG6bfW 0 4 80 529 0 14 Dtool_zIbG6bfW 495 ////////////////////////////////////////////////////////////////////
//     Function: DCPacker::pop
//       Access: Published
//  Description: Marks the end of a nested series of fields.
//
//               This must be called to match a previous push() only
//               after all the expected number of nested fields have
//               been packed.  It is an error to call it too early, or
//               too late.
//////////////////////////////////////////////////////////////////// 1 4 this 3 530  
81 14 Dtool_zIbGBIAM 0 4 81 529 0 14 Dtool_zIbGBIAM 298 ////////////////////////////////////////////////////////////////////
//     Function: DCPacker::pack_double
//       Access: Published
//  Description: Packs the indicated numeric or string value into the
//               stream.
//////////////////////////////////////////////////////////////////// 2 4 this 3 530  5 value 1 543  
82 14 Dtool_zIbG3yIL 0 4 82 529 0 14 Dtool_zIbG3yIL 295 ////////////////////////////////////////////////////////////////////
//     Function: DCPacker::pack_int
//       Access: Published
//  Description: Packs the indicated numeric or string value into the
//               stream.
//////////////////////////////////////////////////////////////////// 2 4 this 3 530  5 value 1 500  
83 14 Dtool_zIbGut3J 0 4 83 529 0 14 Dtool_zIbGut3J 296 ////////////////////////////////////////////////////////////////////
//     Function: DCPacker::pack_uint
//       Access: Published
//  Description: Packs the indicated numeric or string value into the
//               stream.
//////////////////////////////////////////////////////////////////// 2 4 this 3 530  5 value 1 534  
84 14 Dtool_zIbGCx0g 0 4 84 529 0 14 Dtool_zIbGCx0g 297 ////////////////////////////////////////////////////////////////////
//     Function: DCPacker::pack_int64
//       Access: Published
//  Description: Packs the indicated numeric or string value into the
//               stream.
//////////////////////////////////////////////////////////////////// 2 4 this 3 530  5 value 1 544  
85 14 Dtool_zIbGZTfh 0 4 85 529 0 14 Dtool_zIbGZTfh 298 ////////////////////////////////////////////////////////////////////
//     Function: DCPacker::pack_uint64
//       Access: Published
//  Description: Packs the indicated numeric or string value into the
//               stream.
//////////////////////////////////////////////////////////////////// 2 4 this 3 530  5 value 1 536  
86 14 Dtool_zIbGCdT5 0 4 86 529 0 14 Dtool_zIbGCdT5 298 ////////////////////////////////////////////////////////////////////
//     Function: DCPacker::pack_string
//       Access: Published
//  Description: Packs the indicated numeric or string value into the
//               stream.
//////////////////////////////////////////////////////////////////// 2 4 this 3 530  5 value 1 499  
87 14 Dtool_zIbGTx3e 0 4 87 529 0 14 Dtool_zIbGTx3e 402 ////////////////////////////////////////////////////////////////////
//     Function: DCPacker::pack_literal_value
//       Access: Published
//  Description: Adds the indicated string value into the stream,
//               representing a single pre-packed field element, or a
//               whole group of field elements at once.
//////////////////////////////////////////////////////////////////// 2 4 this 3 530  5 value 1 499  
88 14 Dtool_zIbGTBAY 0 4 88 529 0 14 Dtool_zIbGTBAY 406 ////////////////////////////////////////////////////////////////////
//     Function: DCPacker::pack_default_value
//       Access: Published
//  Description: Adds the default value for the current element into
//               the stream.  If no default has been set for the
//               current element, creates a sensible default.
//////////////////////////////////////////////////////////////////// 1 4 this 3 530  
89 14 Dtool_zIbGT8q9 0 6 89 543 0 14 Dtool_zIbGT8q9 300 ////////////////////////////////////////////////////////////////////
//     Function: DCPacker::unpack_double
//       Access: Published
//  Description: Unpacks the current numeric or string value from the
//               stream.
//////////////////////////////////////////////////////////////////// 1 4 this 3 530  
90 14 Dtool_zIbGmv6O 0 6 90 500 0 14 Dtool_zIbGmv6O 297 ////////////////////////////////////////////////////////////////////
//     Function: DCPacker::unpack_int
//       Access: Published
//  Description: Unpacks the current numeric or string value from the
//               stream.
//////////////////////////////////////////////////////////////////// 1 4 this 3 530  
91 14 Dtool_zIbG_P2V 0 6 91 534 0 14 Dtool_zIbG_P2V 298 ////////////////////////////////////////////////////////////////////
//     Function: DCPacker::unpack_uint
//       Access: Published
//  Description: Unpacks the current numeric or string value from the
//               stream.
//////////////////////////////////////////////////////////////////// 1 4 this 3 530  
92 14 Dtool_zIbGeXGO 0 6 92 544 0 14 Dtool_zIbGeXGO 299 ////////////////////////////////////////////////////////////////////
//     Function: DCPacker::unpack_int64
//       Access: Published
//  Description: Unpacks the current numeric or string value from the
//               stream.
//////////////////////////////////////////////////////////////////// 1 4 this 3 530  
93 14 Dtool_zIbG_EJ8 0 6 93 536 0 14 Dtool_zIbG_EJ8 300 ////////////////////////////////////////////////////////////////////
//     Function: DCPacker::unpack_uint64
//       Access: Published
//  Description: Unpacks the current numeric or string value from the
//               stream.
//////////////////////////////////////////////////////////////////// 1 4 this 3 530  
94 14 Dtool_zIbGl8eu 0 6 94 499 0 14 Dtool_zIbGl8eu 300 ////////////////////////////////////////////////////////////////////
//     Function: DCPacker::unpack_string
//       Access: Published
//  Description: Unpacks the current numeric or string value from the
//               stream.
//////////////////////////////////////////////////////////////////// 1 4 this 3 530  
95 14 Dtool_zIbGRc82 0 6 95 499 0 14 Dtool_zIbGRc82 377 ////////////////////////////////////////////////////////////////////
//     Function: DCPacker::unpack_literal_value
//       Access: Published
//  Description: Returns the literal string that represents the packed
//               value of the current field, and advances the field
//               pointer.
//////////////////////////////////////////////////////////////////// 1 4 this 3 530  
96 14 Dtool_zIbGOtBs 0 4 96 529 0 14 Dtool_zIbGOtBs 478 ////////////////////////////////////////////////////////////////////
//     Function: DCPacker::unpack_validate
//       Access: Published
//  Description: Internally unpacks the current numeric or string
//               value and validates it against the type range limits,
//               but does not return the value.  If the current field
//               contains nested fields, validates all of them.
//////////////////////////////////////////////////////////////////// 1 4 this 3 530  
97 14 Dtool_zIbGGmIK 0 4 97 529 0 14 Dtool_zIbGGmIK 396 ////////////////////////////////////////////////////////////////////
//     Function: DCPacker::unpack_skip
//       Access: Published
//  Description: Skips the current field without unpacking it and
//               advances to the next field.  If the current field
//               contains nested fields, skips all of them.
//////////////////////////////////////////////////////////////////// 1 4 this 3 530  
98 14 Dtool_zIbGbgXg 0 4 98 529 0 14 Dtool_zIbGbgXg 528 ////////////////////////////////////////////////////////////////////
//     Function: DCPacker::pack_object
//       Access: Published
//  Description: Packs the Python object of whatever type into the
//               packer.  Each numeric object and string object maps
//               to the corresponding pack_value() call; a tuple or
//               sequence maps to a push() followed by all of the
//               tuple's contents followed by a pop().
//////////////////////////////////////////////////////////////////// 2 4 this 3 530  6 object 1 531  
99 14 Dtool_zIbGP6lw 0 6 99 531 0 14 Dtool_zIbGP6lw 509 ////////////////////////////////////////////////////////////////////
//     Function: DCPacker::unpack_object
//       Access: Published
//  Description: Unpacks a Python object of the appropriate type from
//               the stream for the current field.  This may be an
//               integer or a string for a simple field object; if the
//               current field represents a list of fields it will be
//               a tuple.
//////////////////////////////////////////////////////////////////// 1 4 this 3 530  
100 14 Dtool_zIbGOrNi 0 6 100 511 0 14 Dtool_zIbGOrNi 425 // HAVE_PYTHON
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::parse_and_pack
//       Access: Published
//  Description: Parses an object's value according to the DC file
//               syntax (e.g. as a default value string) and packs it.
//               Returns true on success, false on a parse error.
//////////////////////////////////////////////////////////////////// 2 4 this 3 530  16 formatted_object 1 499  
101 14 Dtool_zIbGQffJ 0 6 100 511 0 14 Dtool_zIbGQffJ 410 ////////////////////////////////////////////////////////////////////
//     Function: DCPacker::parse_and_pack
//       Access: Published
//  Description: Parses an object's value according to the DC file
//               syntax (e.g. as a default value string) and packs it.
//               Returns true on success, false on a parse error.
//////////////////////////////////////////////////////////////////// 2 4 this 3 530  2 in 1 545  
102 14 Dtool_zIbG7w6k 0 6 101 499 0 14 Dtool_zIbG7w6k 409 ////////////////////////////////////////////////////////////////////
//     Function: DCPacker::unpack_and_format
//       Access: Published
//  Description: Unpacks an object and formats its value into a syntax
//               suitable for parsing in the dc file (e.g. as a
//               default value), or as an input to parse_object.
//////////////////////////////////////////////////////////////////// 2 4 this 3 530  16 show_field_names 1 511  
103 14 Dtool_zIbG7De7 0 6 101 499 0 14 Dtool_zIbG7De7 409 ////////////////////////////////////////////////////////////////////
//     Function: DCPacker::unpack_and_format
//       Access: Published
//  Description: Unpacks an object and formats its value into a syntax
//               suitable for parsing in the dc file (e.g. as a
//               default value), or as an input to parse_object.
//////////////////////////////////////////////////////////////////// 1 4 this 3 530  
104 14 Dtool_zIbG1a_o 0 4 101 529 0 14 Dtool_zIbG1a_o 409 ////////////////////////////////////////////////////////////////////
//     Function: DCPacker::unpack_and_format
//       Access: Published
//  Description: Unpacks an object and formats its value into a syntax
//               suitable for parsing in the dc file (e.g. as a
//               default value), or as an input to parse_object.
//////////////////////////////////////////////////////////////////// 3 4 this 3 530  3 out 1 527  16 show_field_names 1 511  
105 14 Dtool_zIbGDezg 0 4 101 529 0 14 Dtool_zIbGDezg 409 ////////////////////////////////////////////////////////////////////
//     Function: DCPacker::unpack_and_format
//       Access: Published
//  Description: Unpacks an object and formats its value into a syntax
//               suitable for parsing in the dc file (e.g. as a
//               default value), or as an input to parse_object.
//////////////////////////////////////////////////////////////////// 2 4 this 3 530  3 out 1 527  
106 14 Dtool_zIbGs8if 0 6 102 511 0 14 Dtool_zIbGs8if 394 ////////////////////////////////////////////////////////////////////
//     Function: DCPacker::had_parse_error
//       Access: Published
//  Description: Returns true if there has been an parse error
//               since the most recent call to begin(); this can only
//               happen if you call parse_and_pack().
//////////////////////////////////////////////////////////////////// 1 4 this 3 541  
107 14 Dtool_zIbGI5eb 0 6 103 511 0 14 Dtool_zIbGI5eb 802 ////////////////////////////////////////////////////////////////////
//     Function: DCPacker::had_pack_error
//       Access: Published
//  Description: Returns true if there has been an packing error
//               since the most recent call to begin(); in particular,
//               this may be called after end() has returned false to
//               determine the nature of the failure.
//
//               A return value of true indicates there was a push/pop
//               mismatch, or the push/pop structure did not match the
//               data structure, or there were the wrong number of
//               elements in a nested push/pop structure, or on unpack
//               that the data stream was truncated.
//////////////////////////////////////////////////////////////////// 1 4 this 3 541  
108 14 Dtool_zIbGKmZZ 0 6 104 511 0 14 Dtool_zIbGKmZZ 735 ////////////////////////////////////////////////////////////////////
//     Function: DCPacker::had_range_error
//       Access: Published
//  Description: Returns true if there has been an range validation
//               error since the most recent call to begin(); in
//               particular, this may be called after end() has
//               returned false to determine the nature of the
//               failure.
//
//               A return value of true indicates a value that was
//               packed or unpacked did not fit within the specified
//               legal range for a parameter, or within the limits of
//               the field size.
//////////////////////////////////////////////////////////////////// 1 4 this 3 541  
109 14 Dtool_zIbGLzjv 0 6 105 511 0 14 Dtool_zIbGLzjv 492 ////////////////////////////////////////////////////////////////////
//     Function: DCPacker::had_error
//       Access: Published
//  Description: Returns true if there has been any error (either a
//               pack error or a range error) since the most recent
//               call to begin().  If this returns true, then the
//               matching call to end() will indicate an error
//               (false).
//////////////////////////////////////////////////////////////////// 1 4 this 3 541  
110 14 Dtool_zIbG1vkq 0 6 106 534 0 14 Dtool_zIbG1vkq 587 ////////////////////////////////////////////////////////////////////
//     Function: DCPacker::get_num_unpacked_bytes
//       Access: Published
//  Description: Returns the number of bytes that have been unpacked
//               so far, or after unpack_end(), the total number of
//               bytes that were unpacked at all.  This can be used to
//               validate that all of the bytes in the buffer were
//               actually unpacked (which is not otherwise considered
//               an error).
//////////////////////////////////////////////////////////////////// 1 4 this 3 541  
111 14 Dtool_zIbGt4l7 0 6 107 534 0 14 Dtool_zIbGt4l7 391 ////////////////////////////////////////////////////////////////////
//     Function: DCPacker::get_length
//       Access: Published
//  Description: Returns the current length of the buffer.  This is
//               the number of useful bytes stored in the buffer, not
//               the amount of memory it takes up.
//////////////////////////////////////////////////////////////////// 1 4 this 3 541  
112 14 Dtool_zIbGhK1P 0 6 108 499 0 14 Dtool_zIbGhK1P 302 ////////////////////////////////////////////////////////////////////
//     Function: DCPacker::get_string
//       Access: Published
//  Description: Returns the packed data buffer as a string.  Also see
//               get_data().
//////////////////////////////////////////////////////////////////// 1 4 this 3 541  
113 14 Dtool_zIbGQvlm 0 6 109 534 0 14 Dtool_zIbGQvlm 471 ////////////////////////////////////////////////////////////////////
//     Function: DCPacker::get_unpack_length
//       Access: Published
//  Description: Returns the total number of bytes in the unpack data
//               buffer.  This is the buffer used when unpacking; it
//               is separate from the pack data returned by
//               get_length(), which is filled during packing.
//////////////////////////////////////////////////////////////////// 1 4 this 3 541  
114 14 Dtool_zIbGKLVa 0 6 110 499 0 14 Dtool_zIbGKLVa 500 ////////////////////////////////////////////////////////////////////
//     Function: DCPacker::get_unpack_string
//       Access: Published
//  Description: Returns the unpack data buffer, as a string.
//               This is the buffer used when unpacking; it is
//               separate from the pack data returned by get_string(),
//               which is filled during packing.  Also see
//               get_unpack_data().
//////////////////////////////////////////////////////////////////// 1 4 this 3 541  
115 14 Dtool_zIbGMJrY 0 6 111 500 0 14 Dtool_zIbGMJrY 524 ////////////////////////////////////////////////////////////////////
//     Function: DCPacker::StackElement::get_num_stack_elements_ever_allocated
//       Access: Published, Static
//  Description: Returns the number of DCPacker::StackElement pointers
//               ever simultaneously allocated; these are now either
//               in active use or have been recycled into the deleted
//               DCPacker::StackElement pool to be used again.
//////////////////////////////////////////////////////////////////// 0 
116 14 Dtool_zIbGXuco 0 4 112 529 0 14 Dtool_zIbGXuco 296 ////////////////////////////////////////////////////////////////////
//     Function: DCPacker::raw_pack_int8
//       Access: Published
//  Description: Packs the data into the buffer between packing
//               sessions.
//////////////////////////////////////////////////////////////////// 2 4 this 3 530  5 value 1 500  
117 14 Dtool_zIbGEvl1 0 4 113 529 0 14 Dtool_zIbGEvl1 297 ////////////////////////////////////////////////////////////////////
//     Function: DCPacker::raw_pack_int16
//       Access: Published
//  Description: Packs the data into the buffer between packing
//               sessions.
//////////////////////////////////////////////////////////////////// 2 4 this 3 530  5 value 1 500  
118 14 Dtool_zIbGf5du 0 4 114 529 0 14 Dtool_zIbGf5du 297 ////////////////////////////////////////////////////////////////////
//     Function: DCPacker::raw_pack_int32
//       Access: Published
//  Description: Packs the data into the buffer between packing
//               sessions.
//////////////////////////////////////////////////////////////////// 2 4 this 3 530  5 value 1 500  
119 14 Dtool_zIbG02JY 0 4 115 529 0 14 Dtool_zIbG02JY 297 ////////////////////////////////////////////////////////////////////
//     Function: DCPacker::raw_pack_int64
//       Access: Published
//  Description: Packs the data into the buffer between packing
//               sessions.
//////////////////////////////////////////////////////////////////// 2 4 this 3 530  5 value 1 544  
120 14 Dtool_zIbG2c6b 0 4 116 529 0 14 Dtool_zIbG2c6b 297 ////////////////////////////////////////////////////////////////////
//     Function: DCPacker::raw_pack_uint8
//       Access: Published
//  Description: Packs the data into the buffer between packing
//               sessions.
//////////////////////////////////////////////////////////////////// 2 4 this 3 530  5 value 1 534  
121 14 Dtool_zIbG_5sg 0 4 117 529 0 14 Dtool_zIbG_5sg 298 ////////////////////////////////////////////////////////////////////
//     Function: DCPacker::raw_pack_uint16
//       Access: Published
//  Description: Packs the data into the buffer between packing
//               sessions.
//////////////////////////////////////////////////////////////////// 2 4 this 3 530  5 value 1 534  
122 14 Dtool_zIbGbFo8 0 4 118 529 0 14 Dtool_zIbGbFo8 298 ////////////////////////////////////////////////////////////////////
//     Function: DCPacker::raw_pack_uint32
//       Access: Published
//  Description: Packs the data into the buffer between packing
//               sessions.
//////////////////////////////////////////////////////////////////// 2 4 this 3 530  5 value 1 534  
123 14 Dtool_zIbG1xJ4 0 4 119 529 0 14 Dtool_zIbG1xJ4 298 ////////////////////////////////////////////////////////////////////
//     Function: DCPacker::raw_pack_uint64
//       Access: Published
//  Description: Packs the data into the buffer between packing
//               sessions.
//////////////////////////////////////////////////////////////////// 2 4 this 3 530  5 value 1 536  
124 14 Dtool_zIbGrDF_ 0 4 120 529 0 14 Dtool_zIbGrDF_ 299 ////////////////////////////////////////////////////////////////////
//     Function: DCPacker::raw_pack_float64
//       Access: Published
//  Description: Packs the data into the buffer between packing
//               sessions.
//////////////////////////////////////////////////////////////////// 2 4 this 3 530  5 value 1 543  
125 14 Dtool_zIbGojpx 0 4 121 529 0 14 Dtool_zIbGojpx 298 ////////////////////////////////////////////////////////////////////
//     Function: DCPacker::raw_pack_string
//       Access: Published
//  Description: Packs the data into the buffer between packing
//               sessions.
//////////////////////////////////////////////////////////////////// 2 4 this 3 530  5 value 1 499  
126 14 Dtool_zIbGWVWD 0 6 122 500 0 14 Dtool_zIbGWVWD 302 ////////////////////////////////////////////////////////////////////
//     Function: DCPacker::raw_unpack_int8
//       Access: Published
//  Description: Unpacks the data from the buffer between unpacking
//               sessions.
//////////////////////////////////////////////////////////////////// 1 4 this 3 530  
127 14 Dtool_zIbG30HM 0 6 123 500 0 14 Dtool_zIbG30HM 303 ////////////////////////////////////////////////////////////////////
//     Function: DCPacker::raw_unpack_int16
//       Access: Published
//  Description: Unpacks the data from the buffer between unpacking
//               sessions.
//////////////////////////////////////////////////////////////////// 1 4 this 3 530  
128 14 Dtool_zIbGFltJ 0 6 124 500 0 14 Dtool_zIbGFltJ 303 ////////////////////////////////////////////////////////////////////
//     Function: DCPacker::raw_unpack_int32
//       Access: Published
//  Description: Unpacks the data from the buffer between unpacking
//               sessions.
//////////////////////////////////////////////////////////////////// 1 4 this 3 530  
129 14 Dtool_zIbGQ0_K 0 6 125 544 0 14 Dtool_zIbGQ0_K 303 ////////////////////////////////////////////////////////////////////
//     Function: DCPacker::raw_unpack_int64
//       Access: Published
//  Description: Unpacks the data from the buffer between unpacking
//               sessions.
//////////////////////////////////////////////////////////////////// 1 4 this 3 530  
130 14 Dtool_zIbGCUlV 0 6 126 534 0 14 Dtool_zIbGCUlV 303 ////////////////////////////////////////////////////////////////////
//     Function: DCPacker::raw_unpack_uint8
//       Access: Published
//  Description: Unpacks the data from the buffer between unpacking
//               sessions.
//////////////////////////////////////////////////////////////////// 1 4 this 3 530  
131 14 Dtool_zIbGBK3t 0 6 127 534 0 14 Dtool_zIbGBK3t 304 ////////////////////////////////////////////////////////////////////
//     Function: DCPacker::raw_unpack_uint16
//       Access: Published
//  Description: Unpacks the data from the buffer between unpacking
//               sessions.
//////////////////////////////////////////////////////////////////// 1 4 this 3 530  
132 14 Dtool_zIbGGD_g 0 6 128 534 0 14 Dtool_zIbGGD_g 304 ////////////////////////////////////////////////////////////////////
//     Function: DCPacker::raw_unpack_uint32
//       Access: Published
//  Description: Unpacks the data from the buffer between unpacking
//               sessions.
//////////////////////////////////////////////////////////////////// 1 4 this 3 530  
133 14 Dtool_zIbGh02J 0 6 129 536 0 14 Dtool_zIbGh02J 304 ////////////////////////////////////////////////////////////////////
//     Function: DCPacker::raw_unpack_uint64
//       Access: Published
//  Description: Unpacks the data from the buffer between unpacking
//               sessions.
//////////////////////////////////////////////////////////////////// 1 4 this 3 530  
134 14 Dtool_zIbG0uTr 0 6 130 543 0 14 Dtool_zIbG0uTr 305 ////////////////////////////////////////////////////////////////////
//     Function: DCPacker::raw_unpack_float64
//       Access: Published
//  Description: Unpacks the data from the buffer between unpacking
//               sessions.
//////////////////////////////////////////////////////////////////// 1 4 this 3 530  
135 14 Dtool_zIbGiaAh 0 6 131 499 0 14 Dtool_zIbGiaAh 304 ////////////////////////////////////////////////////////////////////
//     Function: DCPacker::raw_unpack_string
//       Access: Published
//  Description: Unpacks the data from the buffer between unpacking
//               sessions.
//////////////////////////////////////////////////////////////////// 1 4 this 3 530  
136 14 Dtool_zIbGz9PJ 0 6 133 547 0 14 Dtool_zIbGz9PJ 241 ////////////////////////////////////////////////////////////////////
//     Function: DCParameter::as_simple_parameter
//       Access: Published, Virtual
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 524  
137 14 Dtool_zIbGGnt_ 0 6 133 548 0 14 Dtool_zIbGGnt_ 241 ////////////////////////////////////////////////////////////////////
//     Function: DCParameter::as_simple_parameter
//       Access: Published, Virtual
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 525  
138 14 Dtool_zIbGIgNV 0 6 134 550 0 14 Dtool_zIbGIgNV 240 ////////////////////////////////////////////////////////////////////
//     Function: DCParameter::as_array_parameter
//       Access: Published, Virtual
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 524  
139 14 Dtool_zIbGdS2O 0 6 134 551 0 14 Dtool_zIbGdS2O 240 ////////////////////////////////////////////////////////////////////
//     Function: DCParameter::as_array_parameter
//       Access: Published, Virtual
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 525  
140 14 Dtool_zIbGCNI1 0 6 135 524 0 14 Dtool_zIbGCNI1 0 1 4 this 3 525  
141 14 Dtool_zIbGuxsw 0 6 136 511 0 14 Dtool_zIbGuxsw 0 1 4 this 3 525  
142 14 Dtool_zIbG1UHS 0 6 137 553 0 14 Dtool_zIbG1UHS 383 ////////////////////////////////////////////////////////////////////
//     Function: DCParameter::get_typedef
//       Access: Published
//  Description: If this type has been referenced from a typedef,
//               returns the DCTypedef instance, or NULL if the
//               type was declared on-the-fly.
//////////////////////////////////////////////////////////////////// 1 4 this 3 525  
143 14 Dtool_zIbGAc1p 0 6 139 524 0 14 Dtool_zIbGAc1p 309 ////////////////////////////////////////////////////////////////////
//     Function: DCArrayParameter::get_element_type
//       Access: Published
//  Description: Returns the type of the individual elements of this
//               array.
//////////////////////////////////////////////////////////////////// 1 4 this 3 551  
144 14 Dtool_zIbGPdJT 0 6 140 500 0 14 Dtool_zIbGPdJT 379 ////////////////////////////////////////////////////////////////////
//     Function: DCArrayParameter::get_array_size
//       Access: Published
//  Description: Returns the fixed number of elements in this array,
//               or -1 if the array may contain a variable number of
//               elements.
//////////////////////////////////////////////////////////////////// 1 4 this 3 551  
145 14 Dtool_zIbGz94I 0 6 142 500 0 14 Dtool_zIbGz94I 312 ////////////////////////////////////////////////////////////////////
//     Function: DCAtomicField::get_num_elements
//       Access: Published
//  Description: Returns the number of elements (parameters) of the
//               atomic field.
//////////////////////////////////////////////////////////////////// 1 4 this 3 519  
146 14 Dtool_zIbGMXfe 0 6 143 524 0 14 Dtool_zIbGMXfe 299 ////////////////////////////////////////////////////////////////////
//     Function: DCAtomicField::get_element
//       Access: Published
//  Description: Returns the parameter object describing the
//               nth element.
//////////////////////////////////////////////////////////////////// 2 4 this 3 519  1 n 1 500  
147 14 Dtool_zIbGkDFi 0 6 144 499 0 14 Dtool_zIbGkDFi 790 ////////////////////////////////////////////////////////////////////
//     Function: DCAtomicField::get_element_default
//       Access: Published
//  Description: Returns the pre-formatted default value associated
//               with the nth element of the field.  This is only
//               valid if has_element_default() returns true, in which
//               case this string represents the bytes that should be
//               assigned to the field as a default value.
//
//               If the element is an array-type element, the returned
//               value will include the two-byte length preceding the
//               array data.
//
//               This is deprecated; use get_element() instead.
//////////////////////////////////////////////////////////////////// 2 4 this 3 519  1 n 1 500  
148 14 Dtool_zIbGjDfy 0 6 145 511 0 14 Dtool_zIbGjDfy 410 ////////////////////////////////////////////////////////////////////
//     Function: DCAtomicField::has_element_default
//       Access: Published
//  Description: Returns true if the nth element of the field has a
//               default value specified, false otherwise.
//
//               This is deprecated; use get_element() instead.
//////////////////////////////////////////////////////////////////// 2 4 this 3 519  1 n 1 500  
149 14 Dtool_zIbGKM_N 0 6 146 499 0 14 Dtool_zIbGKM_N 582 ////////////////////////////////////////////////////////////////////
//     Function: DCAtomicField::get_element_name
//       Access: Published
//  Description: Returns the name of the nth element of the field.
//               This name is strictly for documentary purposes; it
//               does not generally affect operation.  If a name is
//               not specified, this will be the empty string.
//
//               This method is deprecated; use
//               get_element()->get_name() instead.
//////////////////////////////////////////////////////////////////// 2 4 this 3 519  1 n 1 500  
150 14 Dtool_zIbGwNXT 0 6 147 477 0 14 Dtool_zIbGwNXT 377 ////////////////////////////////////////////////////////////////////
//     Function: DCAtomicField::get_element_type
//       Access: Published
//  Description: Returns the numeric type of the nth element of the
//               field.  This method is deprecated; use
//               get_element() instead.
//////////////////////////////////////////////////////////////////// 2 4 this 3 519  1 n 1 500  
151 14 Dtool_zIbG_HmD 0 6 148 500 0 14 Dtool_zIbG_HmD 653 ////////////////////////////////////////////////////////////////////
//     Function: DCAtomicField::get_element_divisor
//       Access: Published
//  Description: Returns the divisor associated with the nth element
//               of the field.  This implements an implicit
//               fixed-point system; floating-point values are to be
//               multiplied by this value before encoding into a
//               packet, and divided by this number after decoding.
//
//               This method is deprecated; use
//               get_element()->get_divisor() instead.
//////////////////////////////////////////////////////////////////// 2 4 this 3 519  1 n 1 500  
152 14 Dtool_zIbG9iGM 0 6 151 517 0 14 Dtool_zIbG9iGM 232 ////////////////////////////////////////////////////////////////////
//     Function: DCDeclaration::as_class
//       Access: Published, Virtual
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 555  
153 14 Dtool_zIbGa4C4 0 6 151 558 0 14 Dtool_zIbGa4C4 232 ////////////////////////////////////////////////////////////////////
//     Function: DCDeclaration::as_class
//       Access: Published, Virtual
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 556  
154 14 Dtool_zIbGQXd6 0 6 152 560 0 14 Dtool_zIbGQXd6 233 ////////////////////////////////////////////////////////////////////
//     Function: DCDeclaration::as_switch
//       Access: Published, Virtual
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 555  
155 14 Dtool_zIbGE_84 0 6 152 561 0 14 Dtool_zIbGE_84 233 ////////////////////////////////////////////////////////////////////
//     Function: DCDeclaration::as_switch
//       Access: Published, Virtual
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 556  
156 14 Dtool_zIbG0qWE 0 4 153 529 0 14 Dtool_zIbG0qWE 307 ////////////////////////////////////////////////////////////////////
//     Function : DCDeclaration::output
//       Access : Published, Virtual
//  Description : Write a string representation of this instance to
//                <out>.
//////////////////////////////////////////////////////////////////// 2 4 this 3 556  3 out 1 527  
157 14 Dtool_zIbG5mxH 0 4 154 529 0 14 Dtool_zIbG5mxH 292 ////////////////////////////////////////////////////////////////////
//     Function : DCDeclaration::
//       Access : Published
//  Description : Write a string representation of this instance to
//                <out>.
//////////////////////////////////////////////////////////////////// 3 4 this 3 556  3 out 1 527  12 indent_level 1 500  
158 14 Dtool_zIbGbBzT 0 6 156 512 0 14 Dtool_zIbGbBzT 753 // Filename: dcClass.I
// Created by:  drose (15Sep04)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: DCClass::get_dc_file
//       Access: Published
//  Description: Returns the DCFile object that contains the class.
//////////////////////////////////////////////////////////////////// 1 4 this 3 558  
159 14 Dtool_zIbGBfkV 0 6 157 499 0 14 Dtool_zIbGBfkV 248 ////////////////////////////////////////////////////////////////////
//     Function: DCClass::get_name
//       Access: Published
//  Description: Returns the name of this class.
//////////////////////////////////////////////////////////////////// 1 4 this 3 558  
160 14 Dtool_zIbG4r2k 0 6 158 500 0 14 Dtool_zIbG4r2k 369 ////////////////////////////////////////////////////////////////////
//     Function: DCClass::get_number
//       Access: Published
//  Description: Returns a unique index number associated with this
//               class.  This is defined implicitly when the .dc
//               file(s) are read.
//////////////////////////////////////////////////////////////////// 1 4 this 3 558  
161 14 Dtool_zIbG5HeQ 0 6 159 500 0 14 Dtool_zIbG5HeQ 301 ////////////////////////////////////////////////////////////////////
//     Function: DCClass::get_num_parents
//       Access: Published
//  Description: Returns the number of base classes this class
//               inherits from.
//////////////////////////////////////////////////////////////////// 1 4 this 3 558  
162 14 Dtool_zIbGlQkr 0 6 160 517 0 14 Dtool_zIbGlQkr 290 ////////////////////////////////////////////////////////////////////
//     Function: DCClass::get_parent
//       Access: Published
//  Description: Returns the nth parent class this class inherits
//               from.
//////////////////////////////////////////////////////////////////// 2 4 this 3 558  1 n 1 500  
163 14 Dtool_zIbGMas6 0 6 161 511 0 14 Dtool_zIbGMas6 340 ////////////////////////////////////////////////////////////////////
//     Function: DCClass::has_constructor
//       Access: Published
//  Description: Returns true if this class has a constructor method,
//               false if it just uses the default constructor.
//////////////////////////////////////////////////////////////////// 1 4 this 3 558  
164 14 Dtool_zIbGlqaF 0 6 162 502 0 14 Dtool_zIbGlqaF 372 ////////////////////////////////////////////////////////////////////
//     Function: DCClass::get_constructor
//       Access: Published
//  Description: Returns the constructor method for this class if it
//               is defined, or NULL if the class uses the default
//               constructor.
//////////////////////////////////////////////////////////////////// 1 4 this 3 558  
165 14 Dtool_zIbGdQnw 0 6 163 500 0 14 Dtool_zIbGdQnw 322 ////////////////////////////////////////////////////////////////////
//     Function: DCClass::get_num_fields
//       Access: Published
//  Description: Returns the number of fields defined directly in this
//               class, ignoring inheritance.
//////////////////////////////////////////////////////////////////// 1 4 this 3 558  
166 14 Dtool_zIbGv5gR 0 6 164 502 0 14 Dtool_zIbGv5gR 428 ////////////////////////////////////////////////////////////////////
//     Function: DCClass::get_field
//       Access: Published
//  Description: Returns the nth field in the class.  This is not
//               necessarily the field with index n; this is the nth
//               field defined in the class directly, ignoring
//               inheritance.
//////////////////////////////////////////////////////////////////// 2 4 this 3 558  1 n 1 500  
167 14 Dtool_zIbGcyie 0 6 165 502 0 14 Dtool_zIbGcyie 585 ////////////////////////////////////////////////////////////////////
//     Function: DCClass::get_field_by_name
//       Access: Published
//  Description: Returns a pointer to the DCField that shares the
//               indicated name.  If the named field is not found in
//               the current class, the parent classes will be
//               searched, so the value returned may not actually be a
//               field within this class.  Returns NULL if there is no
//               such field defined.
//////////////////////////////////////////////////////////////////// 2 4 this 3 558  4 name 1 499  
168 14 Dtool_zIbGyQK1 0 6 166 502 0 14 Dtool_zIbGyQK1 594 ////////////////////////////////////////////////////////////////////
//     Function: DCClass::get_field_by_index
//       Access: Published
//  Description: Returns a pointer to the DCField that has the
//               indicated index number.  If the numbered field is not
//               found in the current class, the parent classes will
//               be searched, so the value returned may not actually
//               be a field within this class.  Returns NULL if there
//               is no such field defined.
//////////////////////////////////////////////////////////////////// 2 4 this 3 558  12 index_number 1 500  
169 14 Dtool_zIbG_Xnu 0 6 167 500 0 14 Dtool_zIbG_Xnu 338 ////////////////////////////////////////////////////////////////////
//     Function: DCClass::get_num_inherited_fields
//       Access: Published
//  Description: Returns the total number of field fields defined in
//               this class and all ancestor classes.
//////////////////////////////////////////////////////////////////// 1 4 this 3 558  
170 14 Dtool_zIbGlQ88 0 6 168 502 0 14 Dtool_zIbGlQ88 625 ////////////////////////////////////////////////////////////////////
//     Function: DCClass::get_inherited_field
//       Access: Published
//  Description: Returns the nth field field in the class and all of
//               its ancestors.  
//
//               This *used* to be the same thing as
//               get_field_by_index(), back when the fields were
//               numbered sequentially within a class's inheritance
//               hierarchy.  Now that fields have a globally unique
//               index number, this is no longer true.
//////////////////////////////////////////////////////////////////// 2 4 this 3 558  1 n 1 500  
171 14 Dtool_zIbG1VbT 0 6 169 511 0 14 Dtool_zIbG1VbT 379 ////////////////////////////////////////////////////////////////////
//     Function: DCClass::is_struct
//       Access: Published
//  Description: Returns true if the class has been identified with
//               the "struct" keyword in the dc file, false if it was
//               declared with "dclass".
//////////////////////////////////////////////////////////////////// 1 4 this 3 558  
172 14 Dtool_zIbGo9se 0 6 170 511 0 14 Dtool_zIbGo9se 524 ////////////////////////////////////////////////////////////////////
//     Function: DCClass::is_bogus_class
//       Access: Published
//  Description: Returns true if the class has been flagged as a bogus
//               class.  This is set for classes that are generated by
//               the parser as placeholder for missing classes, as
//               when reading a partial file; it should not occur in a
//               normal valid dc file.
//////////////////////////////////////////////////////////////////// 1 4 this 3 558  
173 14 Dtool_zIbGMnTL 0 6 171 511 0 14 Dtool_zIbGMnTL 446 ////////////////////////////////////////////////////////////////////
//     Function : DCClass::inherits_from_bogus_class
//       Access : Published
//  Description : Returns true if this class, or any class in the
//                inheritance heirarchy for this class, is a "bogus"
//                class--a forward reference to an as-yet-undefined
//                class.
//////////////////////////////////////////////////////////////////// 1 4 this 3 558  
174 14 Dtool_zIbG2Fc9 0 4 172 529 0 14 Dtool_zIbG2Fc9 543 ////////////////////////////////////////////////////////////////////
//     Function: DCClass::start_generate
//       Access: Published
//  Description: Starts the PStats timer going on the "generate" task,
//               that is, marks the beginning of the process of
//               generating a new object, for the purposes of timing
//               this process.
//
//               This should balance with a corresponding call to
//               stop_generate().
//////////////////////////////////////////////////////////////////// 1 4 this 3 517  
175 14 Dtool_zIbGdkTw 0 4 173 529 0 14 Dtool_zIbGdkTw 365 ////////////////////////////////////////////////////////////////////
//     Function: DCClass::stop_generate
//       Access: Published
//  Description: Stops the PStats timer on the "generate" task.
//               This should balance with a preceding call to
//               start_generate().
//////////////////////////////////////////////////////////////////// 1 4 this 3 517  
176 14 Dtool_zIbGuFQz 0 4 174 529 0 14 Dtool_zIbGuFQz 301 ////////////////////////////////////////////////////////////////////
//     Function : DCClass::output
//       Access : Published, Virtual
//  Description : Write a string representation of this instance to
//                <out>.
//////////////////////////////////////////////////////////////////// 2 4 this 3 558  3 out 1 527  
177 14 Dtool_zIbGoeOv 0 6 175 511 0 14 Dtool_zIbGoeOv 333 ////////////////////////////////////////////////////////////////////
//     Function: DCClass::has_class_def
//       Access: Published
//  Description: Returns true if the DCClass object has an associated
//               Python class definition, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 558  
178 14 Dtool_zIbGnYZY 0 4 176 529 0 14 Dtool_zIbGnYZY 383 ////////////////////////////////////////////////////////////////////
//     Function: DCClass::set_class_def
//       Access: Published
//  Description: Sets the class object associated with this
//               DistributedClass.  This object will be used to
//               construct new instances of the class.
//////////////////////////////////////////////////////////////////// 2 4 this 3 517  9 class_def 1 531  
179 14 Dtool_zIbGS395 0 6 177 531 0 14 Dtool_zIbGS395 388 ////////////////////////////////////////////////////////////////////
//     Function: DCClass::get_class_def
//       Access: Published
//  Description: Returns the class object that was previously
//               associated with this DistributedClass.  This will
//               return a new reference to the object.
//////////////////////////////////////////////////////////////////// 1 4 this 3 558  
180 14 Dtool_zIbG0eTp 0 6 178 511 0 14 Dtool_zIbG0eTp 345 ////////////////////////////////////////////////////////////////////
//     Function: DCClass::has_owner_class_def
//       Access: Published
//  Description: Returns true if the DCClass object has an associated
//               Python owner class definition, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 558  
181 14 Dtool_zIbG3p5u 0 4 179 529 0 14 Dtool_zIbG3p5u 401 ////////////////////////////////////////////////////////////////////
//     Function: DCClass::set_owner_class_def
//       Access: Published
//  Description: Sets the owner class object associated with this
//               DistributedClass.  This object will be used to
//               construct new owner instances of the class.
//////////////////////////////////////////////////////////////////// 2 4 this 3 517  15 owner_class_def 1 531  
182 14 Dtool_zIbG_0C0 0 6 180 531 0 14 Dtool_zIbG_0C0 400 ////////////////////////////////////////////////////////////////////
//     Function: DCClass::get_owner_class_def
//       Access: Published
//  Description: Returns the owner class object that was previously
//               associated with this DistributedClass.  This will
//               return a new reference to the object.
//////////////////////////////////////////////////////////////////// 1 4 this 3 558  
183 14 Dtool_zIbGQPjh 0 4 181 529 0 14 Dtool_zIbGQPjh 376 ////////////////////////////////////////////////////////////////////
//     Function: DCClass::receive_update
//       Access: Published
//  Description: Extracts the update message out of the packer and
//               applies it to the indicated object by calling the
//               appropriate method.
//////////////////////////////////////////////////////////////////// 3 4 this 3 558  7 distobj 1 531  2 di 1 563  
184 14 Dtool_zIbGLA_2 0 4 182 529 0 14 Dtool_zIbGLA_2 500 ////////////////////////////////////////////////////////////////////
//     Function: DCClass::receive_update_broadcast_required
//       Access: Published
//  Description: Processes a big datagram that includes all of the
//               "required" fields that are sent along with a normal
//               "generate with required" message.  This is all of the
//               atomic fields that are marked "broadcast required".
//////////////////////////////////////////////////////////////////// 3 4 this 3 558  7 distobj 1 531  2 di 1 563  
185 14 Dtool_zIbGHOff 0 4 183 529 0 14 Dtool_zIbGHOff 563 ////////////////////////////////////////////////////////////////////
//     Function: DCClass::receive_update_broadcast_required_owner
//       Access: Published
//  Description: Processes a big datagram that includes all of the
//               "required" fields that are sent along with a normal
//               "generate with required" message.  This is all of the
//               atomic fields that are marked "broadcast ownrecv". Should
//               be used for 'owner-view' objects.
//////////////////////////////////////////////////////////////////// 3 4 this 3 558  7 distobj 1 531  2 di 1 563  
186 14 Dtool_zIbGkwBe 0 4 184 529 0 14 Dtool_zIbGkwBe 492 ////////////////////////////////////////////////////////////////////
//     Function: DCClass::receive_update_all_required
//       Access: Published
//  Description: Processes a big datagram that includes all of the
//               "required" fields that are sent when an avatar is
//               created.  This is all of the atomic fields that are
//               marked "required", whether they are broadcast or not.
//////////////////////////////////////////////////////////////////// 3 4 this 3 558  7 distobj 1 531  2 di 1 563  
187 14 Dtool_zIbG5Jl7 0 4 185 529 0 14 Dtool_zIbG5Jl7 333 ////////////////////////////////////////////////////////////////////
//     Function: DCClass::receive_update_other
//       Access: Published
//  Description: Processes a datagram that lists some additional
//               fields that are broadcast in one chunk.
//////////////////////////////////////////////////////////////////// 3 4 this 3 558  7 distobj 1 531  2 di 1 563  
188 14 Dtool_zIbGTp_A 0 4 186 529 0 14 Dtool_zIbGTp_A 300 ////////////////////////////////////////////////////////////////////
//     Function: DCClass::direct_update
//       Access: Published
//  Description: Processes an update for a named field from a packed
//               datagram.
//////////////////////////////////////////////////////////////////// 4 4 this 3 517  7 distobj 1 531  10 field_name 1 499  8 datagram 1 565  
189 14 Dtool_zIbGx5ko 0 4 186 529 0 14 Dtool_zIbGx5ko 302 ////////////////////////////////////////////////////////////////////
//     Function: DCClass::direct_update
//       Access: Published
//  Description: Processes an update for a named field from a packed
//               value blob.
//////////////////////////////////////////////////////////////////// 4 4 this 3 517  7 distobj 1 531  10 field_name 1 499  10 value_blob 1 499  
190 14 Dtool_zIbGQSyU 0 6 187 511 0 14 Dtool_zIbGQSyU 663 ////////////////////////////////////////////////////////////////////
//     Function: DCClass::pack_required_field
//       Access: Published
//  Description: Looks up the current value of the indicated field by
//               calling the appropriate get*() function, then packs
//               that value into the packer.  This field is
//               presumably either a required field or a specified
//               optional field, and we are building up a datagram for
//               the generate-with-required message.
//
//               Returns true on success, false on failure.
//////////////////////////////////////////////////////////////////// 4 4 this 3 558  6 packer 1 530  7 distobj 1 531  5 field 1 503  
191 14 Dtool_zIbGAQnH 0 6 187 511 0 14 Dtool_zIbGAQnH 665 ////////////////////////////////////////////////////////////////////
//     Function: DCClass::pack_required_field
//       Access: Published
//  Description: Looks up the current value of the indicated field by
//               calling the appropriate get*() function, then packs
//               that value into the datagram.  This field is
//               presumably either a required field or a specified
//               optional field, and we are building up a datagram for
//               the generate-with-required message.
//
//               Returns true on success, false on failure.
//////////////////////////////////////////////////////////////////// 4 4 this 3 558  8 datagram 1 535  7 distobj 1 531  5 field 1 503  
192 14 Dtool_zIbGl72J 0 7 188 535 0 14 Dtool_zIbGl72J 388 ////////////////////////////////////////////////////////////////////
//     Function: DCClass::client_format_update
//       Access: Published
//  Description: Generates a datagram containing the message necessary
//               to send an update for the indicated distributed
//               object from the client.
//////////////////////////////////////////////////////////////////// 4 4 this 3 558  10 field_name 1 499  5 do_id 1 534  4 args 1 531  
193 14 Dtool_zIbGXxSU 0 7 189 535 0 14 Dtool_zIbGXxSU 380 ////////////////////////////////////////////////////////////////////
//     Function: DCClass::ai_format_update
//       Access: Published
//  Description: Generates a datagram containing the message necessary
//               to send an update for the indicated distributed
//               object from the AI.
//////////////////////////////////////////////////////////////////// 6 4 this 3 558  10 field_name 1 499  5 do_id 1 534  5 to_id 1 536  7 from_id 1 536  4 args 1 531  
194 14 Dtool_zIbG_Eiu 0 7 190 535 0 14 Dtool_zIbG_Eiu 436 ////////////////////////////////////////////////////////////////////
//     Function: DCClass::ai_format_update_msg_type
//       Access: Published
//  Description: Generates a datagram containing the message necessary
//               to send an update, using the indicated msg type
//               for the indicated distributed
//               object from the AI.
//////////////////////////////////////////////////////////////////// 7 4 this 3 558  10 field_name 1 499  5 do_id 1 534  5 to_id 1 536  7 from_id 1 536  8 msg_type 1 500  4 args 1 531  
195 14 Dtool_zIbGsOMz 0 7 191 535 0 14 Dtool_zIbGsOMz 593 ////////////////////////////////////////////////////////////////////
//     Function: DCClass::ai_format_generate
//       Access: Published
//  Description: Generates a datagram containing the message necessary
//               to generate a new distributed object from the AI.
//               This requires querying the object for the initial
//               value of its required fields.
//
//               optional_fields is a list of fieldNames to generate
//               in addition to the normal required fields.
//////////////////////////////////////////////////////////////////// 8 4 this 3 558  7 distobj 1 531  5 do_id 1 534  9 parent_id 1 534  7 zone_id 1 534  19 district_channel_id 1 536  15 from_channel_id 1 536  15 optional_fields 1 531  
196 14 Dtool_zIbGXnoc 0 7 192 535 0 14 Dtool_zIbGXnoc 679 ////////////////////////////////////////////////////////////////////
//     Function: DCClass::client_format_generate_CMU
//       Access: Published
//  Description: Generates a datagram containing the message necessary
//               to generate a new distributed object from the client.
//               This requires querying the object for the initial
//               value of its required fields.
//
//               optional_fields is a list of fieldNames to generate
//               in addition to the normal required fields.
//
//               This method is only called by the CMU implementation.
//////////////////////////////////////////////////////////////////// 5 4 this 3 558  7 distobj 1 531  5 do_id 1 534  7 zone_id 1 534  15 optional_fields 1 531  
197 14 Dtool_zIbGVeMy 0 6 194 558 0 14 Dtool_zIbGVeMy 278 ////////////////////////////////////////////////////////////////////
//     Function: DCClassParameter::get_class
//       Access: Published
//  Description: Returns the class object this parameter represents.
//////////////////////////////////////////////////////////////////// 1 4 this 3 509  
198 14 Dtool_zIbGM0cB 0 7 197 512 429 14 Dtool_zIbGM0cB 218 ////////////////////////////////////////////////////////////////////
//     Function: DCFile::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
199 14 Dtool_zIbG3Phn 0 4 199 529 0 14 Dtool_zIbG3Phn 322 ////////////////////////////////////////////////////////////////////
//     Function: DCFile::clear
//       Access: Published
//  Description: Removes all of the classes defined within the DCFile
//               and prepares it for reading a new file.
//////////////////////////////////////////////////////////////////// 1 4 this 3 512  
200 14 Dtool_zIbGcUOF 0 6 200 511 0 14 Dtool_zIbGcUOF 382 ////////////////////////////////////////////////////////////////////
//     Function: DCFile::read_all
//       Access: Published
//  Description: This special method reads all of the .dc files named
//               by the "dc-file" config.prc variable, and loads them
//               into the DCFile namespace.
//////////////////////////////////////////////////////////////////// 1 4 this 3 512  
201 14 Dtool_zIbGEDwK 0 6 201 511 0 14 Dtool_zIbGEDwK 634 // WITHIN_PANDA
////////////////////////////////////////////////////////////////////
//     Function: DCFile::read
//       Access: Published
//  Description: Opens and reads the indicated .dc file by name.  The
//               distributed classes defined in the file will be
//               appended to the set of distributed classes already
//               recorded, if any.
//
//               Returns true if the file is successfully read, false
//               if there was an error (in which case the file might
//               have been partially read).
//////////////////////////////////////////////////////////////////// 2 4 this 3 512  8 filename 1 567  
202 14 Dtool_zIbGRI_H 0 6 201 511 0 14 Dtool_zIbGRI_H 774 ////////////////////////////////////////////////////////////////////
//     Function: DCFile::read
//       Access: Published
//  Description: Parses the already-opened input stream for
//               distributed class descriptions.  The filename
//               parameter is optional and is only used when reporting
//               errors.
//
//               The distributed classes defined in the file will be
//               appended to the set of distributed classes already
//               recorded, if any.
//
//               Returns true if the file is successfully read, false
//               if there was an error (in which case the file might
//               have been partially read).
//////////////////////////////////////////////////////////////////// 3 4 this 3 512  2 in 1 545  8 filename 1 499  
203 14 Dtool_zIbGtrn_ 0 6 201 511 0 14 Dtool_zIbGtrn_ 774 ////////////////////////////////////////////////////////////////////
//     Function: DCFile::read
//       Access: Published
//  Description: Parses the already-opened input stream for
//               distributed class descriptions.  The filename
//               parameter is optional and is only used when reporting
//               errors.
//
//               The distributed classes defined in the file will be
//               appended to the set of distributed classes already
//               recorded, if any.
//
//               Returns true if the file is successfully read, false
//               if there was an error (in which case the file might
//               have been partially read).
//////////////////////////////////////////////////////////////////// 2 4 this 3 512  2 in 1 545  
204 14 Dtool_zIbGIISH 0 6 202 511 0 14 Dtool_zIbGIISH 482 ////////////////////////////////////////////////////////////////////
//     Function: DCFile::write
//       Access: Published
//  Description: Opens the indicated filename for output and writes a
//               parseable description of all the known distributed
//               classes to the file.
//
//               Returns true if the description is successfully
//               written, false otherwise.
//////////////////////////////////////////////////////////////////// 3 4 this 3 569  8 filename 1 567  5 brief 1 511  
205 14 Dtool_zIbG4v0f 0 6 202 511 0 14 Dtool_zIbG4v0f 423 ////////////////////////////////////////////////////////////////////
//     Function: DCFile::write
//       Access: Published
//  Description: Writes a parseable description of all the known
//               distributed classes to the stream.
//
//               Returns true if the description is successfully
//               written, false otherwise.
//////////////////////////////////////////////////////////////////// 3 4 this 3 569  3 out 1 527  5 brief 1 511  
206 14 Dtool_zIbG4S8N 0 6 203 500 0 14 Dtool_zIbG4S8N 296 ////////////////////////////////////////////////////////////////////
//     Function: DCFile::get_num_classes
//       Access: Published
//  Description: Returns the number of classes read from the .dc
//               file(s).
//////////////////////////////////////////////////////////////////// 1 4 this 3 569  
207 14 Dtool_zIbGEYUl 0 6 204 517 0 14 Dtool_zIbGEYUl 265 ////////////////////////////////////////////////////////////////////
//     Function: DCFile::get_class
//       Access: Published
//  Description: Returns the nth class read from the .dc file(s).
//////////////////////////////////////////////////////////////////// 2 4 this 3 569  1 n 1 500  
208 14 Dtool_zIbG_5op 0 6 205 517 0 14 Dtool_zIbG_5op 323 ////////////////////////////////////////////////////////////////////
//     Function: DCFile::get_class_by_name
//       Access: Published
//  Description: Returns the class that has the indicated name, or
//               NULL if there is no such class.
//////////////////////////////////////////////////////////////////// 2 4 this 3 569  4 name 1 499  
209 14 Dtool_zIbGSm8d 0 6 206 560 0 14 Dtool_zIbGSm8d 326 ////////////////////////////////////////////////////////////////////
//     Function: DCFile::get_switch_by_name
//       Access: Published
//  Description: Returns the switch that has the indicated name, or
//               NULL if there is no such switch.
//////////////////////////////////////////////////////////////////// 2 4 this 3 569  4 name 1 499  
210 14 Dtool_zIbG_R7T 0 6 207 502 0 14 Dtool_zIbG_R7T 667 ////////////////////////////////////////////////////////////////////
//     Function: DCFile::get_field_by_index
//       Access: Published, Static
//  Description: Returns a pointer to the one DCField that has the
//               indicated index number, of all the DCFields across
//               all classes in the file.
//
//               This method is only valid if dc-multiple-inheritance
//               is set true in the Config.prc file.  Without this
//               setting, different DCFields may share the same index
//               number, so this global lookup is not possible.
//////////////////////////////////////////////////////////////////// 2 4 this 3 569  12 index_number 1 500  
211 14 Dtool_zIbGuN3i 0 6 208 511 0 14 Dtool_zIbGuN3i 949 // Filename: dcFile.I
// Created by:  drose (10Jan06)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: DCFile::all_objects_valid
//       Access: Published
//  Description: Returns true if all of the classes read from the DC
//               file were defined and valid, or false if any of them
//               were undefined ("bogus classes").  If this is true,
//               we might have read a partial file.
//////////////////////////////////////////////////////////////////// 1 4 this 3 569  
212 14 Dtool_zIbGyf1h 0 6 209 500 0 14 Dtool_zIbGyf1h 308 ////////////////////////////////////////////////////////////////////
//     Function: DCFile::get_num_import_modules
//       Access: Published
//  Description: Returns the number of import lines read from the .dc
//               file(s).
//////////////////////////////////////////////////////////////////// 1 4 this 3 569  
213 14 Dtool_zIbG7Jiy 0 6 210 499 0 14 Dtool_zIbG7Jiy 316 ////////////////////////////////////////////////////////////////////
//     Function: DCFile::get_import_module
//       Access: Published
//  Description: Returns the module named by the nth import line read
//               from the .dc file(s).
//////////////////////////////////////////////////////////////////// 2 4 this 3 569  1 n 1 500  
214 14 Dtool_zIbGJagU 0 6 211 500 0 14 Dtool_zIbGJagU 482 ////////////////////////////////////////////////////////////////////
//     Function: DCFile::get_num_import_symbols
//       Access: Published
//  Description: Returns the number of symbols explicitly imported by
//               the nth import line.  If this is 0, the line is
//               "import modulename"; if it is more than 0, the line
//               is "from modulename import symbol, symbol ... ".
//////////////////////////////////////////////////////////////////// 2 4 this 3 569  1 n 1 500  
215 14 Dtool_zIbGNoCv 0 6 212 499 0 14 Dtool_zIbGNoCv 320 ////////////////////////////////////////////////////////////////////
//     Function: DCFile::get_import_symbol
//       Access: Published
//  Description: Returns the ith symbol named by the nth import line
//               read from the .dc file(s).
//////////////////////////////////////////////////////////////////// 3 4 this 3 569  1 n 1 500  1 i 1 500  
216 14 Dtool_zIbGyp_b 0 6 213 500 0 14 Dtool_zIbGyp_b 298 ////////////////////////////////////////////////////////////////////
//     Function: DCFile::get_num_typedefs
//       Access: Published
//  Description: Returns the number of typedefs read from the .dc
//               file(s).
//////////////////////////////////////////////////////////////////// 1 4 this 3 569  
217 14 Dtool_zIbGqgG_ 0 6 214 571 0 14 Dtool_zIbGqgG_ 269 ////////////////////////////////////////////////////////////////////
//     Function: DCFile::get_typedef
//       Access: Published
//  Description: Returns the nth typedef read from the .dc file(s).
//////////////////////////////////////////////////////////////////// 2 4 this 3 569  1 n 1 500  
218 14 Dtool_zIbGN8xh 0 6 215 571 0 14 Dtool_zIbGN8xh 334 ////////////////////////////////////////////////////////////////////
//     Function: DCFile::get_typedef_by_name
//       Access: Published
//  Description: Returns the typedef that has the indicated name, or
//               NULL if there is no such typedef name.
//////////////////////////////////////////////////////////////////// 2 4 this 3 569  4 name 1 499  
219 14 Dtool_zIbGJlRM 0 6 216 500 0 14 Dtool_zIbGJlRM 298 ////////////////////////////////////////////////////////////////////
//     Function: DCFile::get_num_keywords
//       Access: Published
//  Description: Returns the number of keywords read from the .dc
//               file(s).
//////////////////////////////////////////////////////////////////// 1 4 this 3 569  
220 14 Dtool_zIbGZmcD 0 6 217 515 0 14 Dtool_zIbGZmcD 269 ////////////////////////////////////////////////////////////////////
//     Function: DCFile::get_keyword
//       Access: Published
//  Description: Returns the nth keyword read from the .dc file(s).
//////////////////////////////////////////////////////////////////// 2 4 this 3 569  1 n 1 500  
221 14 Dtool_zIbG96Hm 0 6 218 515 0 14 Dtool_zIbG96Hm 334 ////////////////////////////////////////////////////////////////////
//     Function: DCFile::get_keyword_by_name
//       Access: Published
//  Description: Returns the keyword that has the indicated name, or
//               NULL if there is no such keyword name.
//////////////////////////////////////////////////////////////////// 2 4 this 3 569  4 name 1 499  
222 14 Dtool_zIbGXMzc 0 6 219 572 0 14 Dtool_zIbGXMzc 505 ////////////////////////////////////////////////////////////////////
//     Function: DCFile::get_hash
//       Access: Published
//  Description: Returns a 32-bit hash index associated with this
//               file.  This number is guaranteed to be consistent if
//               the contents of the file have not changed, and it is
//               very likely to be different if the contents of the
//               file do change.
//////////////////////////////////////////////////////////////////// 1 4 this 3 569  
223 14 Dtool_zIbGhXRr 0 6 221 499 0 14 Dtool_zIbGhXRr 252 ////////////////////////////////////////////////////////////////////
//     Function: DCKeyword::get_name
//       Access: Published
//  Description: Returns the name of this keyword.
//////////////////////////////////////////////////////////////////// 1 4 this 3 515  
224 14 Dtool_zIbG9TYG 0 6 223 500 0 14 Dtool_zIbG9TYG 320 ////////////////////////////////////////////////////////////////////
//     Function: DCMolecularField::get_num_atomics
//       Access: Published
//  Description: Returns the number of atomic fields that make up this
//               molecular field.
//////////////////////////////////////////////////////////////////// 1 4 this 3 522  
225 14 Dtool_zIbGKxjf 0 6 224 518 0 14 Dtool_zIbGKxjf 440 ////////////////////////////////////////////////////////////////////
//     Function: DCMolecularField::get_atomic
//       Access: Published
//  Description: Returns the nth atomic field that makes up this
//               molecular field.  This may or may not be a field of
//               this particular class; it might be defined in a
//               parent class.
//////////////////////////////////////////////////////////////////// 2 4 this 3 522  1 n 1 500  
226 14 Dtool_zIbGdLgm 0 6 227 477 0 14 Dtool_zIbGdLgm 311 ////////////////////////////////////////////////////////////////////
//     Function: DCSimpleParameter::get_type
//       Access: Published
//  Description: Returns the particular subatomic type represented by
//               this instance.
//////////////////////////////////////////////////////////////////// 1 4 this 3 548  
227 14 Dtool_zIbGL3kT 0 6 228 511 0 14 Dtool_zIbGL3kT 311 ////////////////////////////////////////////////////////////////////
//     Function: DCSimpleParameter::has_modulus
//       Access: Published
//  Description: Returns true if there is a modulus associated, false
//               otherwise.,
//////////////////////////////////////////////////////////////////// 1 4 this 3 548  
228 14 Dtool_zIbG_9h_ 0 6 229 543 0 14 Dtool_zIbG_9h_ 564 ////////////////////////////////////////////////////////////////////
//     Function: DCSimpleParameter::get_modulus
//       Access: Published
//  Description: Returns the modulus associated with this type, if
//               any.  It is an error to call this if has_modulus()
//               returned false.
//
//               If present, this is the modulus that is used to
//               constrain the numeric value of the field before it is
//               packed (and range-checked).
//////////////////////////////////////////////////////////////////// 1 4 this 3 548  
229 14 Dtool_zIbGBZIP 0 6 230 500 0 14 Dtool_zIbGBZIP 588 ////////////////////////////////////////////////////////////////////
//     Function: DCSimpleParameter::get_divisor
//       Access: Published
//  Description: Returns the divisor associated with this type.  This
//               is 1 by default, but if this is other than one it
//               represents the scale to apply when packing and
//               unpacking numeric values (to store fixed-point values
//               in an integer field).  It is only meaningful for
//               numeric-type fields.
//////////////////////////////////////////////////////////////////// 1 4 this 3 548  
230 14 Dtool_zIbG5_NH 0 6 233 499 0 14 Dtool_zIbG5_NH 250 ////////////////////////////////////////////////////////////////////
//     Function: DCSwitch::get_name
//       Access: Published
//  Description: Returns the name of this switch.
//////////////////////////////////////////////////////////////////// 1 4 this 3 561  
231 14 Dtool_zIbGXw_6 0 6 234 502 0 14 Dtool_zIbGXw_6 450 ////////////////////////////////////////////////////////////////////
//     Function: DCSwitch::get_key_parameter
//       Access: Published
//  Description: Returns the key parameter on which the switch is
//               based.  The value of this parameter in the record
//               determines which one of the several cases within the
//               switch will be used.
//////////////////////////////////////////////////////////////////// 1 4 this 3 561  
232 14 Dtool_zIbGeUzc 0 6 235 500 0 14 Dtool_zIbGeUzc 383 ////////////////////////////////////////////////////////////////////
//     Function: DCSwitch::get_num_cases
//       Access: Published
//  Description: Returns the number of different cases within the
//               switch.  The legal values for case_index range from 0
//               to get_num_cases() - 1.
//////////////////////////////////////////////////////////////////// 1 4 this 3 561  
233 14 Dtool_zIbG0ls8 0 6 236 500 0 14 Dtool_zIbG0ls8 363 ////////////////////////////////////////////////////////////////////
//     Function: DCSwitch::get_case_by_value
//       Access: Published
//  Description: Returns the index number of the case with the
//               indicated packed value, or -1 if no case has this
//               value.
//////////////////////////////////////////////////////////////////// 2 4 this 3 561  10 case_value 1 499  
234 14 Dtool_zIbGt2ll 0 6 237 501 0 14 Dtool_zIbGt2ll 272 ////////////////////////////////////////////////////////////////////
//     Function: DCSwitch::get_case
//       Access: Published
//  Description: Returns the DCPackerInterface that packs the nth case.
//////////////////////////////////////////////////////////////////// 2 4 this 3 561  1 n 1 500  
235 14 Dtool_zIbGRFXc 0 6 238 501 0 14 Dtool_zIbGRFXc 338 ////////////////////////////////////////////////////////////////////
//     Function: DCSwitch::get_default_case
//       Access: Published
//  Description: Returns the DCPackerInterface that packs the default
//               case, or NULL if there is no default case.
//////////////////////////////////////////////////////////////////// 1 4 this 3 561  
236 14 Dtool_zIbGTRGr 0 6 239 499 0 14 Dtool_zIbGTRGr 296 ////////////////////////////////////////////////////////////////////
//     Function: DCSwitch::get_value
//       Access: Published
//  Description: Returns the packed value associated with the
//               indicated case.
//////////////////////////////////////////////////////////////////// 2 4 this 3 561  10 case_index 1 500  
237 14 Dtool_zIbGlF1x 0 6 240 500 0 14 Dtool_zIbGlF1x 275 ////////////////////////////////////////////////////////////////////
//     Function: DCSwitch::get_num_fields
//       Access: Published
//  Description: Returns the number of fields in the indicated case.
//////////////////////////////////////////////////////////////////// 2 4 this 3 561  10 case_index 1 500  
238 14 Dtool_zIbGJzsC 0 6 241 502 0 14 Dtool_zIbGJzsC 268 ////////////////////////////////////////////////////////////////////
//     Function: DCSwitch::get_num_fields
//       Access: Published
//  Description: Returns the nth field in the indicated case.
//////////////////////////////////////////////////////////////////// 3 4 this 3 561  10 case_index 1 500  1 n 1 500  
239 14 Dtool_zIbGwD_J 0 6 242 502 0 14 Dtool_zIbGwD_J 341 ////////////////////////////////////////////////////////////////////
//     Function: DCSwitch::get_field_by_name
//       Access: Published
//  Description: Returns the field with the given name from the
//               indicated case, or NULL if no field has this name.
//////////////////////////////////////////////////////////////////// 3 4 this 3 561  10 case_index 1 500  4 name 1 499  
240 14 Dtool_zIbGHIRd 0 6 244 561 0 14 Dtool_zIbGHIRd 281 ////////////////////////////////////////////////////////////////////
//     Function: DCSwitchParameter::get_switch
//       Access: Published
//  Description: Returns the switch object this parameter represents.
//////////////////////////////////////////////////////////////////// 1 4 this 3 506  
241 14 Dtool_zIbG3FUN 0 6 247 500 0 14 Dtool_zIbG3FUN 384 ////////////////////////////////////////////////////////////////////
//     Function: DCTypedef::get_number
//       Access: Published
//  Description: Returns a unique index number associated with this
//               typedef definition.  This is defined implicitly when
//               the .dc file(s) are read.
//////////////////////////////////////////////////////////////////// 1 4 this 3 553  
242 14 Dtool_zIbGVrMq 0 6 248 499 0 14 Dtool_zIbGVrMq 252 ////////////////////////////////////////////////////////////////////
//     Function: DCTypedef::get_name
//       Access: Published
//  Description: Returns the name of this typedef.
//////////////////////////////////////////////////////////////////// 1 4 this 3 553  
243 14 Dtool_zIbGnZ2F 0 6 249 499 0 14 Dtool_zIbGnZ2F 315 ////////////////////////////////////////////////////////////////////
//     Function: DCTypedef::get_description
//       Access: Published
//  Description: Returns a brief decription of the typedef, useful for
//               human consumption.
//////////////////////////////////////////////////////////////////// 1 4 this 3 553  
244 14 Dtool_zIbGnwBq 0 6 250 511 0 14 Dtool_zIbGnwBq 531 ////////////////////////////////////////////////////////////////////
//     Function: DCTypedef::is_bogus_typedef
//       Access: Public
//  Description: Returns true if the typedef has been flagged as a bogus
//               typedef.  This is set for typedefs that are generated by
//               the parser as placeholder for missing typedefs, as
//               when reading a partial file; it should not occur in a
//               normal valid dc file.
//////////////////////////////////////////////////////////////////// 1 4 this 3 553  
245 14 Dtool_zIbG3UT1 0 6 251 511 0 14 Dtool_zIbG3UT1 404 ////////////////////////////////////////////////////////////////////
//     Function: DCTypedef::is_implicit_typedef
//       Access: Public
//  Description: Returns true if the typedef has been flagged as an
//               implicit typedef, meaning it was created for a
//               DCClass that was referenced inline as a type.
//////////////////////////////////////////////////////////////////// 1 4 this 3 553  
97
477 15 DCSubatomicType 0 532481 15 DCSubatomicType 15 DCSubatomicType 0 0 0 0 0 0 0 0 0 0 21 7 ST_int8 7 ST_int8 0 8 ST_int16 8 ST_int16 1 8 ST_int32 8 ST_int32 2 8 ST_int64 8 ST_int64 3 8 ST_uint8 8 ST_uint8 4 9 ST_uint16 9 ST_uint16 5 9 ST_uint32 9 ST_uint32 6 9 ST_uint64 9 ST_uint64 7 10 ST_float64 10 ST_float64 8 9 ST_string 9 ST_string 9 7 ST_blob 7 ST_blob 10 9 ST_blob32 9 ST_blob32 11 13 ST_int16array 13 ST_int16array 12 13 ST_int32array 13 ST_int32array 13 14 ST_uint16array 14 ST_uint16array 14 14 ST_uint32array 14 ST_uint32array 15 12 ST_int8array 12 ST_int8array 16 13 ST_uint8array 13 ST_uint8array 17 19 ST_uint32uint8array 19 ST_uint32uint8array 18 7 ST_char 7 ST_char 19 10 ST_invalid 10 ST_invalid 20 0 410
////////////////////////////////////////////////////////////////////
//        Enum : DCSubatomicType
// Description : This defines the numeric type of each element of a
//               DCAtomicField; that is, the particular values that
//               will get added to the message when the atomic field
//               method is called.
////////////////////////////////////////////////////////////////////

478 10 DCPackType 0 532481 10 DCPackType 10 DCPackType 0 0 0 0 0 0 0 0 0 0 12 10 PT_invalid 10 PT_invalid 0 9 PT_double 9 PT_double 1 6 PT_int 6 PT_int 2 7 PT_uint 7 PT_uint 3 8 PT_int64 8 PT_int64 4 9 PT_uint64 9 PT_uint64 5 9 PT_string 9 PT_string 6 7 PT_blob 7 PT_blob 7 8 PT_array 8 PT_array 8 8 PT_field 8 PT_field 9 8 PT_class 8 PT_class 10 9 PT_switch 9 PT_switch 11 0 137
// This enumerated type is returned by get_pack_type() and represents
// the best choice for a subsequent call to pack_*() or unpack_*().

479 17 DCPackerInterface 0 26625 17 DCPackerInterface 17 DCPackerInterface 0 0 0 0 246 0 6 247 248 249 250 251 252 0 0 0 0 0 514
////////////////////////////////////////////////////////////////////
//       Class : DCPackerInterface
// Description : This defines the internal interface for packing
//               values into a DCField.  The various different DC
//               objects inherit from this.  
//
//               Normally these methods are called only by the
//               DCPacker object; the user wouldn't normally call
//               these directly.
////////////////////////////////////////////////////////////////////

480 13 DCKeywordList 0 26625 13 DCKeywordList 13 DCKeywordList 0 0 0 0 253 0 5 254 255 256 257 258 0 0 0 0 0 284
////////////////////////////////////////////////////////////////////
//       Class : DCKeywordList
// Description : This is a list of keywords (see DCKeyword) that may
//               be set on a particular field.
////////////////////////////////////////////////////////////////////

481 7 DCField 0 26625 7 DCField 7 DCField 0 0 0 0 263 0 29 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 0 0 2 3 479 259 260 3 480 261 262 0 0 263
////////////////////////////////////////////////////////////////////
//       Class : DCField
// Description : A single field of a Distributed Class, either atomic
//               or molecular.
////////////////////////////////////////////////////////////////////

482 10 DCPackData 0 26625 10 DCPackData 10 DCPackData 0 0 0 1 293 294 0 3 295 296 297 0 0 0 0 0 262
////////////////////////////////////////////////////////////////////
//       Class : DCPackData
// Description : This is a block of data that receives the results of
//               DCPacker.
////////////////////////////////////////////////////////////////////

483 8 DCPacker 0 26625 8 DCPacker 8 DCPacker 0 0 0 1 298 299 0 70 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 0 0 0 0 0 499
////////////////////////////////////////////////////////////////////
//       Class : DCPacker
// Description : This class can be used for packing a series of
//               numeric and string data into a binary stream,
//               according to the DC specification.
//
//               See also direct/src/doc/dcPacker.txt for a more
//               complete description and examples of using this
//               class.
////////////////////////////////////////////////////////////////////

484 11 DCParameter 0 75777 11 DCParameter 11 DCParameter 0 0 0 0 263 0 5 370 371 372 373 374 0 0 1 0 481 0 0 0 0 577
////////////////////////////////////////////////////////////////////
//       Class : DCParameter
// Description : Represents the type specification for a single
//               parameter within a field specification.  This may be
//               a simple type, or it may be a class or an array
//               reference.
//
//               This may also be a typedef reference to another type,
//               which has the same properties as the referenced type,
//               but a different name.
////////////////////////////////////////////////////////////////////

485 16 DCArrayParameter 0 75777 16 DCArrayParameter 16 DCArrayParameter 0 0 0 0 263 0 2 375 376 0 0 1 0 484 0 0 0 0 423
////////////////////////////////////////////////////////////////////
//       Class : DCArrayParameter
// Description : This represents an array of some other kind of
//               object, meaning this parameter type accepts an
//               arbitrary (or possibly fixed) number of nested
//               fields, all of which are of the same type.
////////////////////////////////////////////////////////////////////

486 13 DCAtomicField 0 75777 13 DCAtomicField 13 DCAtomicField 0 0 0 0 263 0 7 377 378 379 380 381 382 383 0 0 1 0 481 0 0 0 0 0

487 13 DCDeclaration 0 26625 13 DCDeclaration 13 DCDeclaration 0 0 0 0 384 0 4 385 386 387 388 0 0 0 0 0 634
////////////////////////////////////////////////////////////////////
//       Class : DCDeclaration
// Description : This is a common interface for a declaration in a DC
//               file.  Currently, this is either a class or a typedef
//               declaration (import declarations are still collected
//               together at the top, and don't inherit from this
//               object).  Its only purpose is so that classes and
//               typedefs can be stored in one list together so they
//               can be ordered correctly on output.
////////////////////////////////////////////////////////////////////

488 7 DCClass 0 75777 7 DCClass 7 DCClass 0 0 0 0 384 0 37 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 0 0 1 0 487 0 0 0 0 266
////////////////////////////////////////////////////////////////////
//       Class : DCClass
// Description : Defines a particular DistributedClass as read from an
//               input .dc file.
////////////////////////////////////////////////////////////////////

489 16 DCClassParameter 0 141313 16 DCClassParameter 16 DCClassParameter 0 0 0 0 427 0 1 426 0 0 1 0 484 0 0 0 0 367
////////////////////////////////////////////////////////////////////
//       Class : DCClassParameter
// Description : This represents a class (or struct) object used as a
//               parameter itself.  This means that all the fields of
//               the class get packed into the message.
////////////////////////////////////////////////////////////////////

490 6 DCFile 0 26625 6 DCFile 6 DCFile 0 0 0 1 428 429 0 21 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 0 0 0 0 0 283
////////////////////////////////////////////////////////////////////
//       Class : DCFile
// Description : Represents the complete list of Distributed Class
//               descriptions as read from a .dc file.
////////////////////////////////////////////////////////////////////

491 9 DCKeyword 0 75777 9 DCKeyword 9 DCKeyword 0 0 0 0 384 0 1 451 0 0 1 0 487 0 0 0 0 403
////////////////////////////////////////////////////////////////////
//       Class : DCKeyword
// Description : This represents a single keyword declaration in the
//               dc file.  It is used to define a communication
//               property associated with a field, for instance
//               "broadcast" or "airecv".
////////////////////////////////////////////////////////////////////

492 16 DCMolecularField 0 141313 16 DCMolecularField 16 DCMolecularField 0 0 0 0 454 0 2 452 453 0 0 1 0 481 0 0 0 0 420
////////////////////////////////////////////////////////////////////
//       Class : DCMolecularField
// Description : A single molecular field of a Distributed Class, as
//               read from a .dc file.  This represents a combination
//               of two or more related atomic fields, that will often
//               be treated as a unit.
////////////////////////////////////////////////////////////////////

493 17 DCSimpleParameter 0 141313 17 DCSimpleParameter 17 DCSimpleParameter 0 0 0 0 459 0 4 455 456 457 458 0 0 1 0 484 0 0 0 0 537
////////////////////////////////////////////////////////////////////
//       Class : DCSimpleParameter
// Description : This is the most fundamental kind of parameter type:
//               a single number or string, one of the DCSubatomicType
//               elements.  It may also optionally have a divisor,
//               which is meaningful only for the numeric type
//               elements (and represents a fixed-point numeric
//               convention).
////////////////////////////////////////////////////////////////////

494 8 DCSwitch 0 75777 8 DCSwitch 8 DCSwitch 0 0 0 0 384 0 10 460 461 462 463 464 465 466 467 468 469 0 0 1 0 487 0 0 0 0 392
////////////////////////////////////////////////////////////////////
//       Class : DCSwitch
// Description : This represents a switch statement, which can appear
//               inside a class body and represents two or more
//               alternative unpacking schemes based on the first
//               field read.
////////////////////////////////////////////////////////////////////

495 17 DCSwitchParameter 0 141313 17 DCSwitchParameter 17 DCSwitchParameter 0 0 0 0 471 0 1 470 0 0 1 0 484 0 0 0 0 350
////////////////////////////////////////////////////////////////////
//       Class : DCSwitchParameter
// Description : This represents a switch object used as a
//               parameter itself, which packs the appropriate fields
//               of the switch into the message.
////////////////////////////////////////////////////////////////////

496 9 DCTypedef 0 75777 9 DCTypedef 9 DCTypedef 0 0 0 0 384 0 5 472 473 474 475 476 0 0 1 0 487 0 0 0 0 344
////////////////////////////////////////////////////////////////////
//       Class : DCTypedef
// Description : This represents a single typedef declaration in the
//               dc file.  It assigns a particular type to a new name,
//               just like a C typedef.
////////////////////////////////////////////////////////////////////

497 25 DCPackerInterface const * 0 8576 25 DCPackerInterface const * 25 DCPackerInterface const * 0 0 498 0 0 0 0 0 0 0 0 0 0

498 23 DCPackerInterface const 0 8832 23 DCPackerInterface const 23 DCPackerInterface const 0 0 479 0 0 0 0 0 0 0 0 0 0

499 13 atomic string 0 2 13 atomic string 13 atomic string 0 7 0 0 0 0 0 0 0 0 0 0 0

500 3 int 0 8194 3 int 3 int 0 1 0 0 0 0 0 0 0 0 0 0 0

501 19 DCPackerInterface * 0 8576 19 DCPackerInterface * 19 DCPackerInterface * 0 0 479 0 0 0 0 0 0 0 0 0 0

502 9 DCField * 0 8576 9 DCField * 9 DCField * 0 0 481 0 0 0 0 0 0 0 0 0 0

503 15 DCField const * 0 8576 15 DCField const * 15 DCField const * 0 0 504 0 0 0 0 0 0 0 0 0 0

504 13 DCField const 0 8832 13 DCField const 13 DCField const 0 0 481 0 0 0 0 0 0 0 0 0 0

505 19 DCSwitchParameter * 0 8576 19 DCSwitchParameter * 19 DCSwitchParameter * 0 0 495 0 0 0 0 0 0 0 0 0 0

506 25 DCSwitchParameter const * 0 8576 25 DCSwitchParameter const * 25 DCSwitchParameter const * 0 0 507 0 0 0 0 0 0 0 0 0 0

507 23 DCSwitchParameter const 0 8832 23 DCSwitchParameter const 23 DCSwitchParameter const 0 0 495 0 0 0 0 0 0 0 0 0 0

508 18 DCClassParameter * 0 8576 18 DCClassParameter * 18 DCClassParameter * 0 0 489 0 0 0 0 0 0 0 0 0 0

509 24 DCClassParameter const * 0 8576 24 DCClassParameter const * 24 DCClassParameter const * 0 0 510 0 0 0 0 0 0 0 0 0 0

510 22 DCClassParameter const 0 8832 22 DCClassParameter const 22 DCClassParameter const 0 0 489 0 0 0 0 0 0 0 0 0 0

511 4 bool 0 8194 4 bool 4 bool 0 4 0 0 0 0 0 0 0 0 0 0 0

512 8 DCFile * 0 8576 8 DCFile * 8 DCFile * 0 0 490 0 0 0 0 0 0 0 0 0 0

513 21 DCKeywordList const * 0 8576 21 DCKeywordList const * 21 DCKeywordList const * 0 0 514 0 0 0 0 0 0 0 0 0 0

514 19 DCKeywordList const 0 8832 19 DCKeywordList const 19 DCKeywordList const 0 0 480 0 0 0 0 0 0 0 0 0 0

515 17 DCKeyword const * 0 8576 17 DCKeyword const * 17 DCKeyword const * 0 0 516 0 0 0 0 0 0 0 0 0 0

516 15 DCKeyword const 0 8832 15 DCKeyword const 15 DCKeyword const 0 0 491 0 0 0 0 0 0 0 0 0 0

517 9 DCClass * 0 8576 9 DCClass * 9 DCClass * 0 0 488 0 0 0 0 0 0 0 0 0 0

518 15 DCAtomicField * 0 8576 15 DCAtomicField * 15 DCAtomicField * 0 0 486 0 0 0 0 0 0 0 0 0 0

519 21 DCAtomicField const * 0 8576 21 DCAtomicField const * 21 DCAtomicField const * 0 0 520 0 0 0 0 0 0 0 0 0 0

520 19 DCAtomicField const 0 8832 19 DCAtomicField const 19 DCAtomicField const 0 0 486 0 0 0 0 0 0 0 0 0 0

521 18 DCMolecularField * 0 8576 18 DCMolecularField * 18 DCMolecularField * 0 0 492 0 0 0 0 0 0 0 0 0 0

522 24 DCMolecularField const * 0 8576 24 DCMolecularField const * 24 DCMolecularField const * 0 0 523 0 0 0 0 0 0 0 0 0 0

523 22 DCMolecularField const 0 8832 22 DCMolecularField const 22 DCMolecularField const 0 0 492 0 0 0 0 0 0 0 0 0 0

524 13 DCParameter * 0 8576 13 DCParameter * 13 DCParameter * 0 0 484 0 0 0 0 0 0 0 0 0 0

525 19 DCParameter const * 0 8576 19 DCParameter const * 19 DCParameter const * 0 0 526 0 0 0 0 0 0 0 0 0 0

526 17 DCParameter const 0 8832 17 DCParameter const 17 DCParameter const 0 0 484 0 0 0 0 0 0 0 0 0 0

527 9 ostream * 0 8576 9 ostream * 9 ostream * 0 0 528 0 0 0 0 0 0 0 0 0 0

528 7 ostream 0 2048 7 ostream 7 ostream 0 0 0 0 0 0 0 0 0 0 0 0 0

529 4 void 0 8194 4 void 4 void 0 6 0 0 0 0 0 0 0 0 0 0 0

530 10 DCPacker * 0 8576 10 DCPacker * 10 DCPacker * 0 0 483 0 0 0 0 0 0 0 0 0 0

531 10 PyObject * 0 8576 10 PyObject * 10 PyObject * 0 0 532 0 0 0 0 0 0 0 0 0 0

532 8 PyObject 0 2048 8 PyObject 8 PyObject 0 0 0 0 0 0 0 0 0 0 0 0 0

533 8 Datagram 0 2048 8 Datagram 8 Datagram 0 0 0 0 0 0 0 0 0 0 0 0 900
////////////////////////////////////////////////////////////////////
//       Class : Datagram
// Description : An ordered list of data elements, formatted in memory
//               for transmission over a socket or writing to a data
//               file.
//
//               Data elements should be added one at a time, in
//               order, to the Datagram.  The nature and contents of
//               the data elements are totally up to the user.  When a
//               Datagram has been transmitted and received, its data
//               elements may be extracted using a DatagramIterator;
//               it is up to the caller to know the correct type of
//               each data element in order.
//
//               A Datagram is itself headerless; it is simply a
//               collection of data elements.
////////////////////////////////////////////////////////////////////

534 12 unsigned int 0 8198 12 unsigned int 12 unsigned int 0 1 0 0 0 0 0 0 0 0 0 0 0

535 10 Datagram * 0 8576 10 Datagram * 10 Datagram * 0 0 533 0 0 0 0 0 0 0 0 0 0

536 16 unsigned __int64 0 8230 16 unsigned __int64 16 unsigned __int64 0 8 0 0 0 0 0 0 0 0 0 0 0

537 15 DCKeywordList * 0 8576 15 DCKeywordList * 15 DCKeywordList * 0 0 480 0 0 0 0 0 0 0 0 0 0

538 12 DCPackData * 0 8576 12 DCPackData * 12 DCPackData * 0 0 482 0 0 0 0 0 0 0 0 0 0

539 18 DCPackData const * 0 8576 18 DCPackData const * 18 DCPackData const * 0 0 540 0 0 0 0 0 0 0 0 0 0

540 16 DCPackData const 0 8832 16 DCPackData const 16 DCPackData const 0 0 482 0 0 0 0 0 0 0 0 0 0

541 16 DCPacker const * 0 8576 16 DCPacker const * 16 DCPacker const * 0 0 542 0 0 0 0 0 0 0 0 0 0

542 14 DCPacker const 0 8832 14 DCPacker const 14 DCPacker const 0 0 483 0 0 0 0 0 0 0 0 0 0

543 6 double 0 8194 6 double 6 double 0 3 0 0 0 0 0 0 0 0 0 0 0

544 7 __int64 0 8226 7 __int64 7 __int64 0 8 0 0 0 0 0 0 0 0 0 0 0

545 9 istream * 0 8576 9 istream * 9 istream * 0 0 546 0 0 0 0 0 0 0 0 0 0

546 7 istream 0 2048 7 istream 7 istream 0 0 0 0 0 0 0 0 0 0 0 0 0

547 19 DCSimpleParameter * 0 8576 19 DCSimpleParameter * 19 DCSimpleParameter * 0 0 493 0 0 0 0 0 0 0 0 0 0

548 25 DCSimpleParameter const * 0 8576 25 DCSimpleParameter const * 25 DCSimpleParameter const * 0 0 549 0 0 0 0 0 0 0 0 0 0

549 23 DCSimpleParameter const 0 8832 23 DCSimpleParameter const 23 DCSimpleParameter const 0 0 493 0 0 0 0 0 0 0 0 0 0

550 18 DCArrayParameter * 0 8576 18 DCArrayParameter * 18 DCArrayParameter * 0 0 485 0 0 0 0 0 0 0 0 0 0

551 24 DCArrayParameter const * 0 8576 24 DCArrayParameter const * 24 DCArrayParameter const * 0 0 552 0 0 0 0 0 0 0 0 0 0

552 22 DCArrayParameter const 0 8832 22 DCArrayParameter const 22 DCArrayParameter const 0 0 485 0 0 0 0 0 0 0 0 0 0

553 17 DCTypedef const * 0 8576 17 DCTypedef const * 17 DCTypedef const * 0 0 554 0 0 0 0 0 0 0 0 0 0

554 15 DCTypedef const 0 8832 15 DCTypedef const 15 DCTypedef const 0 0 496 0 0 0 0 0 0 0 0 0 0

555 15 DCDeclaration * 0 8576 15 DCDeclaration * 15 DCDeclaration * 0 0 487 0 0 0 0 0 0 0 0 0 0

556 21 DCDeclaration const * 0 8576 21 DCDeclaration const * 21 DCDeclaration const * 0 0 557 0 0 0 0 0 0 0 0 0 0

557 19 DCDeclaration const 0 8832 19 DCDeclaration const 19 DCDeclaration const 0 0 487 0 0 0 0 0 0 0 0 0 0

558 15 DCClass const * 0 8576 15 DCClass const * 15 DCClass const * 0 0 559 0 0 0 0 0 0 0 0 0 0

559 13 DCClass const 0 8832 13 DCClass const 13 DCClass const 0 0 488 0 0 0 0 0 0 0 0 0 0

560 10 DCSwitch * 0 8576 10 DCSwitch * 10 DCSwitch * 0 0 494 0 0 0 0 0 0 0 0 0 0

561 16 DCSwitch const * 0 8576 16 DCSwitch const * 16 DCSwitch const * 0 0 562 0 0 0 0 0 0 0 0 0 0

562 14 DCSwitch const 0 8832 14 DCSwitch const 14 DCSwitch const 0 0 494 0 0 0 0 0 0 0 0 0 0

563 18 DatagramIterator * 0 8576 18 DatagramIterator * 18 DatagramIterator * 0 0 564 0 0 0 0 0 0 0 0 0 0

564 16 DatagramIterator 0 2048 16 DatagramIterator 16 DatagramIterator 0 0 0 0 0 0 0 0 0 0 0 0 438
////////////////////////////////////////////////////////////////////
//       Class : DatagramIterator
// Description : A class to retrieve the individual data elements
//               previously stored in a Datagram.  Elements may be
//               retrieved one at a time; it is up to the caller to
//               know the correct type and order of each element.
////////////////////////////////////////////////////////////////////

565 16 Datagram const * 0 8576 16 Datagram const * 16 Datagram const * 0 0 566 0 0 0 0 0 0 0 0 0 0

566 14 Datagram const 0 8832 14 Datagram const 14 Datagram const 0 0 533 0 0 0 0 0 0 0 0 0 0

567 10 Filename * 0 8576 10 Filename * 10 Filename * 0 0 568 0 0 0 0 0 0 0 0 0 0

568 8 Filename 0 2048 8 Filename 8 Filename 0 0 0 0 0 0 0 0 0 0 0 0 869
////////////////////////////////////////////////////////////////////
//       Class : Filename
// Description : The name of a file, such as a texture file or an Egg
//               file.  Stores the full pathname, and includes
//               functions for extracting out the directory prefix
//               part and the file extension and stuff.
//
//               A Filename is also aware of the mapping between the
//               Unix-like filename convention we use internally, and
//               the local OS's specific filename convention, and it
//               knows how to perform basic OS-specific I/O, like
//               testing for file existence and searching a
//               searchpath, as well as the best way to open an
//               fstream for reading or writing.
////////////////////////////////////////////////////////////////////

569 14 DCFile const * 0 8576 14 DCFile const * 14 DCFile const * 0 0 570 0 0 0 0 0 0 0 0 0 0

570 12 DCFile const 0 8832 12 DCFile const 12 DCFile const 0 0 490 0 0 0 0 0 0 0 0 0 0

571 11 DCTypedef * 0 8576 11 DCTypedef * 11 DCTypedef * 0 0 496 0 0 0 0 0 0 0 0 0 0

572 17 unsigned long int 0 8214 17 unsigned long int 17 unsigned long int 0 1 0 0 0 0 0 0 0 0 0 0 0

573 6 string 0 2048 20 basic_string< char > 20 basic_string< char > 0 0 0 0 0 0 0 0 0 0 0 0 0

0
0
0
