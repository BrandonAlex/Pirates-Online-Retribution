1436948247
2 3
9 libp3chan 4 8NZB 12 panda3d.core 
218
212 37 upcast_to_TypedWritableReferenceCount 0 12 430 48 AnimGroup::upcast_to_TypedWritableReferenceCount 0 1 10 52
upcast from AnimGroup to TypedWritableReferenceCount
84
TypedWritableReferenceCount *AnimGroup::upcast_to_TypedWritableReferenceCount(void);

213 21 downcast_to_AnimGroup 0 12 431 50 TypedWritableReferenceCount::downcast_to_AnimGroup 0 1 11 54
downcast from TypedWritableReferenceCount to AnimGroup
68
AnimGroup *TypedWritableReferenceCount::downcast_to_AnimGroup(void);

214 17 upcast_to_Namable 0 12 430 28 AnimGroup::upcast_to_Namable 0 1 12 32
upcast from AnimGroup to Namable
44
Namable *AnimGroup::upcast_to_Namable(void);

215 21 downcast_to_AnimGroup 0 12 432 30 Namable::downcast_to_AnimGroup 0 1 13 34
downcast from Namable to AnimGroup
48
AnimGroup *Namable::downcast_to_AnimGroup(void);

216 9 AnimGroup 0 4 430 20 AnimGroup::AnimGroup 0 1 1 1392
// This is the normal AnimGroup constructor.

////////////////////////////////////////////////////////////////////
//     Function: AnimGroup::Default Constructor
//       Access: Protected
//  Description: The default constructor is protected: don't try to
//               create an AnimGroup without a parent.  To create an
//               AnimChannel hierarchy, you must first create an
//               AnimBundle, and use that to create any subsequent
//               children.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: AnimGroup::Copy Constructor
//       Access: Protected
//  Description: Creates a new AnimGroup, just like this one, without
//               copying any children.  The new copy is added to the
//               indicated parent.  Intended to be called by
//               make_copy() only.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: AnimGroup::Constructor
//       Access: Published
//  Description: Creates the AnimGroup, and adds it to the indicated
//               parent.  The only way to delete it subsequently is to
//               delete the entire hierarchy.
////////////////////////////////////////////////////////////////////
60
AnimGroup::AnimGroup(AnimGroup *parent, string const &name);

217 10 ~AnimGroup 0 6 430 21 AnimGroup::~AnimGroup 0 0 230
////////////////////////////////////////////////////////////////////
//     Function: AnimGroup::Destructor
//       Access: Published, Virtual
//  Description: 
////////////////////////////////////////////////////////////////////
36
virtual AnimGroup::~AnimGroup(void);

218 16 get_num_children 0 4 430 27 AnimGroup::get_num_children 0 1 2 274
////////////////////////////////////////////////////////////////////
//     Function: AnimGroup::get_num_children
//       Access: Published
//  Description: Returns the number of child nodes of the group.
////////////////////////////////////////////////////////////////////
44
int AnimGroup::get_num_children(void) const;

219 9 get_child 0 4 430 20 AnimGroup::get_child 0 1 3 255
////////////////////////////////////////////////////////////////////
//     Function: AnimGroup::get_child
//       Access: Published
//  Description: Returns the nth child of the group.
////////////////////////////////////////////////////////////////////
45
AnimGroup *AnimGroup::get_child(int n) const;

220 15 get_child_named 0 4 430 26 AnimGroup::get_child_named 0 1 4 524
////////////////////////////////////////////////////////////////////
//     Function: AnimGroup::get_child_named
//       Access: Published
//  Description: Returns the first child found with the indicated
//               name, or NULL if no such child exists.  This method
//               searches only the children of this particular
//               AnimGroup; it does not recursively search the entire
//               graph.  See also find_child().
////////////////////////////////////////////////////////////////////
64
AnimGroup *AnimGroup::get_child_named(string const &name) const;

221 10 find_child 0 4 430 21 AnimGroup::find_child 0 1 5 465
////////////////////////////////////////////////////////////////////
//     Function: AnimGroup::find_child
//       Access: Published
//  Description: Returns the first descendant found with the indicated
//               name, or NULL if no such descendant exists.  This
//               method searches the entire graph beginning at this
//               AnimGroup; see also get_child_named().
////////////////////////////////////////////////////////////////////
59
AnimGroup *AnimGroup::find_child(string const &name) const;

222 16 sort_descendants 0 4 430 27 AnimGroup::sort_descendants 0 1 6 537
////////////////////////////////////////////////////////////////////
//     Function: AnimGroup::sort_descendants
//       Access: Published
//  Description: Sorts the children nodes at each level of the
//               hierarchy into alphabetical order.  This should be
//               done after creating the hierarchy, to guarantee that
//               the correct names will match up together when the
//               AnimBundle is later bound to a PlayerRoot.
////////////////////////////////////////////////////////////////////
39
void AnimGroup::sort_descendants(void);

223 6 output 0 6 430 17 AnimGroup::output 0 1 7 269
////////////////////////////////////////////////////////////////////
//     Function: AnimGroup::output
//       Access: Published, Virtual
//  Description: Writes a one-line description of the group.
////////////////////////////////////////////////////////////////////
51
virtual void AnimGroup::output(ostream &out) const;

224 5 write 0 6 430 16 AnimGroup::write 0 1 8 309
////////////////////////////////////////////////////////////////////
//     Function: AnimGroup::write
//       Access: Published, Virtual
//  Description: Writes a brief description of the group and all of
//               its descendants.
////////////////////////////////////////////////////////////////////
68
virtual void AnimGroup::write(ostream &out, int indent_level) const;

225 14 get_class_type 0 4 430 25 AnimGroup::get_class_type 0 1 9 0
50
static TypeHandle AnimGroup::get_class_type(void);

226 10 AnimBundle 0 4 433 22 AnimBundle::AnimBundle 0 1 14 888
////////////////////////////////////////////////////////////////////
//     Function: AnimBundle::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: AnimBundle::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: AnimBundle::Copy Constructor
//       Access: Protected
//  Description: Creates a new AnimBundle, just like this one, without
//               copying any children.  The new copy is added to the
//               indicated parent.  Intended to be called by
//               make_copy() only.
////////////////////////////////////////////////////////////////////
83
inline AnimBundle::AnimBundle(string const &name, PN_stdfloat fps, int num_frames);

227 11 copy_bundle 0 4 433 23 AnimBundle::copy_bundle 0 1 15 511
////////////////////////////////////////////////////////////////////
//     Function: AnimBundle::copy_bundle
//       Access: Published
//  Description: Returns a full copy of the bundle and its entire tree
//               of nested AnimGroups.  However, the actual data
//               stored in the leaves--that is, animation tables, such
//               as those stored in an AnimChannelMatrixXfmTable--will
//               be shared.
////////////////////////////////////////////////////////////////////
60
PointerTo< AnimBundle > AnimBundle::copy_bundle(void) const;

228 19 get_base_frame_rate 0 4 433 31 AnimBundle::get_base_frame_rate 0 1 16 600
////////////////////////////////////////////////////////////////////
//     Function: AnimBundle::get_base_frame_rate
//       Access: Public
//  Description: Returns the ideal number of frames per second of the
//               animation, when it is running at normal speed.  This
//               may not be the same as the actual playing frame rate,
//               as it might have been adjusted through
//               set_play_rate() on the AnimControl object.  See
//               AnimControl::get_effective_frame_rate().
////////////////////////////////////////////////////////////////////
58
inline double AnimBundle::get_base_frame_rate(void) const;

229 14 get_num_frames 0 4 433 26 AnimBundle::get_num_frames 0 1 17 335
////////////////////////////////////////////////////////////////////
//     Function: AnimBundle::get_num_frames
//       Access: Public
//  Description: Returns the number of frames of animation, or 0 if
//               the animation has no fixed number of frames.
////////////////////////////////////////////////////////////////////
50
inline int AnimBundle::get_num_frames(void) const;

230 14 get_class_type 0 4 433 26 AnimBundle::get_class_type 0 1 18 0
51
static TypeHandle AnimBundle::get_class_type(void);

231 11 ~AnimBundle 0 4 433 23 AnimBundle::~AnimBundle 0 0 0
30
AnimBundle::~AnimBundle(void);

232 14 AnimBundleNode 0 4 434 30 AnimBundleNode::AnimBundleNode 0 1 19 1067
////////////////////////////////////////////////////////////////////
//     Function: AnimBundleNode::Constructor
//       Access: Public
//  Description: The AnimBundle and its node should be constructed
//               together.  Generally, the derived classes of
//               AnimBundleNode will automatically create a AnimBundle
//               of the appropriate type, and pass it up to this
//               constructor.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: AnimBundleNode::Default Constructor
//       Access: Protected
//  Description: For internal use only.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: AnimBundleNode::Copy Constructor
//       Access: Protected
//  Description: Use make_copy() or copy_subgraph() to copy one of
//               these.
////////////////////////////////////////////////////////////////////
78
inline AnimBundleNode::AnimBundleNode(string const &name, AnimBundle *bundle);

233 10 get_bundle 0 4 434 26 AnimBundleNode::get_bundle 0 1 20 222
////////////////////////////////////////////////////////////////////
//     Function: AnimBundleNode::get_bundle
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
58
inline AnimBundle *AnimBundleNode::get_bundle(void) const;

234 16 find_anim_bundle 0 4 434 32 AnimBundleNode::find_anim_bundle 0 1 21 480
////////////////////////////////////////////////////////////////////
//     Function: AnimBundleNode::find_anim_bundle
//       Access: Published, Static
//  Description: Recursively walks the scene graph beginning at the
//               indicated node (which need not be an AnimBundleNode),
//               and returns the first AnimBundle found.  Returns NULL
//               if no AnimBundle can be found.
////////////////////////////////////////////////////////////////////
69
static AnimBundle *AnimBundleNode::find_anim_bundle(PandaNode *root);

235 14 get_class_type 0 4 434 30 AnimBundleNode::get_class_type 0 1 22 0
55
static TypeHandle AnimBundleNode::get_class_type(void);

236 15 ~AnimBundleNode 0 4 434 31 AnimBundleNode::~AnimBundleNode 0 0 0
38
AnimBundleNode::~AnimBundleNode(void);

237 37 upcast_to_TypedWritableReferenceCount 0 12 436 48 PartGroup::upcast_to_TypedWritableReferenceCount 0 1 41 52
upcast from PartGroup to TypedWritableReferenceCount
84
TypedWritableReferenceCount *PartGroup::upcast_to_TypedWritableReferenceCount(void);

238 21 downcast_to_PartGroup 0 12 431 50 TypedWritableReferenceCount::downcast_to_PartGroup 0 1 42 54
downcast from TypedWritableReferenceCount to PartGroup
68
PartGroup *TypedWritableReferenceCount::downcast_to_PartGroup(void);

239 17 upcast_to_Namable 0 12 436 28 PartGroup::upcast_to_Namable 0 1 43 32
upcast from PartGroup to Namable
44
Namable *PartGroup::upcast_to_Namable(void);

240 21 downcast_to_PartGroup 0 12 432 30 Namable::downcast_to_PartGroup 0 1 44 34
downcast from Namable to PartGroup
48
PartGroup *Namable::downcast_to_PartGroup(void);

241 9 PartGroup 0 4 436 20 PartGroup::PartGroup 0 1 23 1242
// This is the normal PartGroup constructor.

////////////////////////////////////////////////////////////////////
//     Function: PartGroup::Default Constructor
//       Access: Protected
//  Description: This constructor is only intended for interal use and
//               for derived classes.  You should normally use the
//               non-default constructor, below.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PartGroup::Copy Constructor
//       Access: Protected
//  Description: This constructor is only intended for interal use and
//               for derived classes.  You should normally use the
//               make_copy() interface to make copies..
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PartGroup::Constructor
//       Access: Published
//  Description: Creates the PartGroup, and adds it to the indicated
//               parent.  The only way to delete it subsequently is to
//               delete the entire hierarchy.
////////////////////////////////////////////////////////////////////
60
PartGroup::PartGroup(PartGroup *parent, string const &name);

242 10 ~PartGroup 0 6 436 21 PartGroup::~PartGroup 0 0 220
////////////////////////////////////////////////////////////////////
//     Function: PartGroup::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
36
virtual PartGroup::~PartGroup(void);

243 18 is_character_joint 0 6 436 29 PartGroup::is_character_joint 0 1 24 414
////////////////////////////////////////////////////////////////////
//     Function: PartGroup::is_character_joint
//       Access: Published, Virtual
//  Description: Returns true if this part is a CharacterJoint, false
//               otherwise.  This is a tiny optimization over
//               is_of_type(CharacterType::get_class_type()).
////////////////////////////////////////////////////////////////////
55
virtual bool PartGroup::is_character_joint(void) const;

244 9 make_copy 0 6 436 20 PartGroup::make_copy 0 1 25 341
////////////////////////////////////////////////////////////////////
//     Function: PartGroup::make_copy
//       Access: Published, Virtual
//  Description: Allocates and returns a new copy of the node.
//               Children are not copied, but see copy_subgraph().
////////////////////////////////////////////////////////////////////
52
virtual PartGroup *PartGroup::make_copy(void) const;

245 13 copy_subgraph 0 4 436 24 PartGroup::copy_subgraph 0 1 26 314
////////////////////////////////////////////////////////////////////
//     Function: PartGroup::copy_subgraph
//       Access: Published
//  Description: Allocates and returns a new copy of this node and of
//               all of its children.
////////////////////////////////////////////////////////////////////
48
PartGroup *PartGroup::copy_subgraph(void) const;

246 16 get_num_children 0 4 436 27 PartGroup::get_num_children 0 1 27 274
////////////////////////////////////////////////////////////////////
//     Function: PartGroup::get_num_children
//       Access: Published
//  Description: Returns the number of child nodes of the group.
////////////////////////////////////////////////////////////////////
44
int PartGroup::get_num_children(void) const;

247 9 get_child 0 4 436 20 PartGroup::get_child 0 1 28 255
////////////////////////////////////////////////////////////////////
//     Function: PartGroup::get_child
//       Access: Published
//  Description: Returns the nth child of the group.
////////////////////////////////////////////////////////////////////
45
PartGroup *PartGroup::get_child(int n) const;

248 15 get_child_named 0 4 436 26 PartGroup::get_child_named 0 1 29 524
////////////////////////////////////////////////////////////////////
//     Function: PartGroup::get_child_named
//       Access: Published
//  Description: Returns the first child found with the indicated
//               name, or NULL if no such child exists.  This method
//               searches only the children of this particular
//               PartGroup; it does not recursively search the entire
//               graph.  See also find_child().
////////////////////////////////////////////////////////////////////
64
PartGroup *PartGroup::get_child_named(string const &name) const;

249 10 find_child 0 4 436 21 PartGroup::find_child 0 1 30 465
////////////////////////////////////////////////////////////////////
//     Function: PartGroup::find_child
//       Access: Published
//  Description: Returns the first descendant found with the indicated
//               name, or NULL if no such descendant exists.  This
//               method searches the entire graph beginning at this
//               PartGroup; see also get_child_named().
////////////////////////////////////////////////////////////////////
59
PartGroup *PartGroup::find_child(string const &name) const;

250 16 sort_descendants 0 4 436 27 PartGroup::sort_descendants 0 1 31 537
////////////////////////////////////////////////////////////////////
//     Function: PartGroup::sort_descendants
//       Access: Published
//  Description: Sorts the children nodes at each level of the
//               hierarchy into alphabetical order.  This should be
//               done after creating the hierarchy, to guarantee that
//               the correct names will match up together when the
//               AnimBundle is later bound to a PlayerRoot.
////////////////////////////////////////////////////////////////////
39
void PartGroup::sort_descendants(void);

251 12 apply_freeze 0 4 436 23 PartGroup::apply_freeze 0 1 32 572
////////////////////////////////////////////////////////////////////
//     Function: PartGroup::apply_freeze
//       Access: Published
//  Description: Freezes this particular joint so that it will always
//               hold the specified transform.  Returns true if this
//               is a joint that can be so frozen, false otherwise.
//
//               This is normally only called internally by
//               PartBundle::freeze_joint(), but you may also call it
//               directly.
////////////////////////////////////////////////////////////////////
62
bool PartGroup::apply_freeze(TransformState const *transform);

252 19 apply_freeze_matrix 0 6 436 30 PartGroup::apply_freeze_matrix 0 1 33 588
////////////////////////////////////////////////////////////////////
//     Function: PartGroup::apply_freeze_matrix
//       Access: Published, Virtual
//  Description: Freezes this particular joint so that it will always
//               hold the specified transform.  Returns true if this
//               is a joint that can be so frozen, false otherwise.
//
//               This is normally only called internally by
//               PartBundle::freeze_joint(), but you may also call it
//               directly.
////////////////////////////////////////////////////////////////////
112
virtual bool PartGroup::apply_freeze_matrix(LVecBase3 const &pos, LVecBase3 const &hpr, LVecBase3 const &scale);

253 19 apply_freeze_scalar 0 6 436 30 PartGroup::apply_freeze_scalar 0 1 34 588
////////////////////////////////////////////////////////////////////
//     Function: PartGroup::apply_freeze_scalar
//       Access: Published, Virtual
//  Description: Freezes this particular joint so that it will always
//               hold the specified transform.  Returns true if this
//               is a joint that can be so frozen, false otherwise.
//
//               This is normally only called internally by
//               PartBundle::freeze_joint(), but you may also call it
//               directly.
////////////////////////////////////////////////////////////////////
63
virtual bool PartGroup::apply_freeze_scalar(PN_stdfloat value);

254 13 apply_control 0 6 436 24 PartGroup::apply_control 0 1 35 622
////////////////////////////////////////////////////////////////////
//     Function: PartGroup::apply_control
//       Access: Published, Virtual
//  Description: Specifies a node to influence this particular joint
//               so that it will always hold the node's transform.
//               Returns true if this is a joint that can be so
//               controlled, false otherwise.
//
//               This is normally only called internally by
//               PartBundle::control_joint(), but you may also call it
//               directly.
////////////////////////////////////////////////////////////////////
55
virtual bool PartGroup::apply_control(PandaNode *node);

255 20 clear_forced_channel 0 6 436 31 PartGroup::clear_forced_channel 0 1 36 567
////////////////////////////////////////////////////////////////////
//     Function: PartGroup::clear_forced_channel
//       Access: Published, Virtual
//  Description: Undoes the effect of a previous call to
//               apply_freeze() or apply_control().  Returns true if
//               the joint was modified, false otherwise.
//
//               This is normally only called internally by
//               PartBundle::release_joint(), but you may also call it
//               directly.
////////////////////////////////////////////////////////////////////
51
virtual bool PartGroup::clear_forced_channel(void);

256 18 get_forced_channel 0 6 436 29 PartGroup::get_forced_channel 0 1 37 453
////////////////////////////////////////////////////////////////////
//     Function: PartGroup::get_forced_channel
//       Access: Published, Virtual
//  Description: Returns the AnimChannelBase that has been forced to
//               this joint by a previous call to apply_freeze() or
//               apply_control(), or NULL if no such channel has been
//               applied.
////////////////////////////////////////////////////////////////////
67
virtual AnimChannelBase *PartGroup::get_forced_channel(void) const;

257 5 write 0 6 436 16 PartGroup::write 0 1 38 309
////////////////////////////////////////////////////////////////////
//     Function: PartGroup::write
//       Access: Published, Virtual
//  Description: Writes a brief description of the group and all of
//               its descendants.
////////////////////////////////////////////////////////////////////
68
virtual void PartGroup::write(ostream &out, int indent_level) const;

258 16 write_with_value 0 6 436 27 PartGroup::write_with_value 0 1 39 356
////////////////////////////////////////////////////////////////////
//     Function: PartGroup::write_with_value
//       Access: Published, Virtual
//  Description: Writes a brief description of the group, showing its
//               current value, and that of all of its descendants.
////////////////////////////////////////////////////////////////////
79
virtual void PartGroup::write_with_value(ostream &out, int indent_level) const;

259 14 get_class_type 0 4 436 25 PartGroup::get_class_type 0 1 40 0
50
static TypeHandle PartGroup::get_class_type(void);

260 29 upcast_to_TypedReferenceCount 0 12 438 42 AnimControl::upcast_to_TypedReferenceCount 0 1 58 46
upcast from AnimControl to TypedReferenceCount
70
TypedReferenceCount *AnimControl::upcast_to_TypedReferenceCount(void);

261 23 downcast_to_AnimControl 0 12 439 44 TypedReferenceCount::downcast_to_AnimControl 0 1 59 48
downcast from TypedReferenceCount to AnimControl
64
AnimControl *TypedReferenceCount::downcast_to_AnimControl(void);

262 23 upcast_to_AnimInterface 0 12 438 36 AnimControl::upcast_to_AnimInterface 0 1 60 40
upcast from AnimControl to AnimInterface
58
AnimInterface *AnimControl::upcast_to_AnimInterface(void);

263 23 downcast_to_AnimControl 0 12 440 38 AnimInterface::downcast_to_AnimControl 0 1 61 42
downcast from AnimInterface to AnimControl
58
AnimControl *AnimInterface::downcast_to_AnimControl(void);

264 17 upcast_to_Namable 0 12 438 30 AnimControl::upcast_to_Namable 0 1 62 34
upcast from AnimControl to Namable
46
Namable *AnimControl::upcast_to_Namable(void);

265 23 downcast_to_AnimControl 0 12 432 32 Namable::downcast_to_AnimControl 0 1 63 36
downcast from Namable to AnimControl
52
AnimControl *Namable::downcast_to_AnimControl(void);

266 12 ~AnimControl 0 6 438 25 AnimControl::~AnimControl 0 0 231
////////////////////////////////////////////////////////////////////
//     Function: AnimControl::Destructor
//       Access: Published, Virtual
//  Description:
////////////////////////////////////////////////////////////////////
40
virtual AnimControl::~AnimControl(void);

267 10 is_pending 0 4 438 23 AnimControl::is_pending 0 1 45 574
////////////////////////////////////////////////////////////////////
//     Function: AnimControl::is_pending
//       Access: Published
//  Description: Returns true if the AnimControl is being bound
//               asynchronously, and has not yet finished.  If this is
//               true, the AnimControl's interface is still available
//               and will be perfectly useful (though get_anim() might
//               return NULL), but nothing visible will happen
//               immediately.
////////////////////////////////////////////////////////////////////
48
inline bool AnimControl::is_pending(void) const;

268 12 wait_pending 0 4 438 25 AnimControl::wait_pending 0 1 46 330
////////////////////////////////////////////////////////////////////
//     Function: AnimControl::wait_pending
//       Access: Published
//  Description: Blocks the current thread until the AnimControl has
//               finished loading and is fully bound.
////////////////////////////////////////////////////////////////////
37
void AnimControl::wait_pending(void);

269 8 has_anim 0 4 438 21 AnimControl::has_anim 0 1 47 395
////////////////////////////////////////////////////////////////////
//     Function: AnimControl::has_anim
//       Access: Published
//  Description: Returns true if the AnimControl was successfully
//               loaded, or false if there was a problem.  This may
//               return false while is_pending() is true.
////////////////////////////////////////////////////////////////////
46
inline bool AnimControl::has_anim(void) const;

270 22 set_pending_done_event 0 4 438 35 AnimControl::set_pending_done_event 0 1 48 474
////////////////////////////////////////////////////////////////////
//     Function: AnimControl::set_pending_done_event
//       Access: Published
//  Description: Specifies an event name that will be thrown when the
//               AnimControl is finished binding asynchronously.  If
//               the AnimControl has already finished binding, the
//               event will be thrown immediately.
////////////////////////////////////////////////////////////////////
67
void AnimControl::set_pending_done_event(string const &done_event);

271 22 get_pending_done_event 0 4 438 35 AnimControl::get_pending_done_event 0 1 49 351
////////////////////////////////////////////////////////////////////
//     Function: AnimControl::get_pending_done_event
//       Access: Published
//  Description: Returns the event name that will be thrown when the
//               AnimControl is finished binding asynchronously.
////////////////////////////////////////////////////////////////////
55
string AnimControl::get_pending_done_event(void) const;

272 8 get_part 0 4 438 21 AnimControl::get_part 0 1 50 292
////////////////////////////////////////////////////////////////////
//     Function: AnimControl::get_part
//       Access: Published
//  Description: Returns the PartBundle bound in with this
//               AnimControl.
////////////////////////////////////////////////////////////////////
46
PartBundle *AnimControl::get_part(void) const;

273 8 get_anim 0 4 438 21 AnimControl::get_anim 0 1 51 292
////////////////////////////////////////////////////////////////////
//     Function: AnimControl::get_anim
//       Access: Published
//  Description: Returns the AnimBundle bound in with this
//               AnimControl.
////////////////////////////////////////////////////////////////////
53
inline AnimBundle *AnimControl::get_anim(void) const;

274 17 get_channel_index 0 4 438 30 AnimControl::get_channel_index 0 1 52 665
////////////////////////////////////////////////////////////////////
//     Function: AnimControl::get_channel_index
//       Access: Published
//  Description: Returns the particular channel index associated with
//               this AnimControl.  This channel index is the slot on
//               which each AnimGroup is bound to its associated
//               PartGroup, for each joint in the animation.
//
//               It will be true that
//               get_part()->find_child("n")->get_bound(get_channel_index())
//               == get_anim()->find_child("n"), for each joint "n".
////////////////////////////////////////////////////////////////////
54
inline int AnimControl::get_channel_index(void) const;

275 16 get_bound_joints 0 4 438 29 AnimControl::get_bound_joints 0 1 53 677
////////////////////////////////////////////////////////////////////
//     Function: AnimControl::get_bound_joints
//       Access: Published
//  Description: Returns the subset of joints controlled by this
//               AnimControl.  Most of the time, this will be
//               BitArray::all_on(), for a normal full-body animation.
//               For a subset animation, however, this will be just a
//               subset of those bits, corresponding to the set of
//               joints and sliders actually bound (as enumerated by
//               bind_hierarchy() in depth-first LIFO order).
////////////////////////////////////////////////////////////////////
65
inline BitArray const &AnimControl::get_bound_joints(void) const;

276 14 set_anim_model 0 4 438 27 AnimControl::set_anim_model 0 1 54 883
////////////////////////////////////////////////////////////////////
//     Function: AnimControl::set_anim_model
//       Access: Published
//  Description: Associates the indicated PandaNode with the
//               AnimControl.  By convention, this node represents the
//               root node of the model file that corresponds to this
//               AnimControl's animation file, though nothing in this
//               code makes this assumption or indeed does anything
//               with this node.
//
//               The purpose of this is simply to allow the
//               AnimControl to keep a reference count on the
//               ModelRoot node that generated it, so that the model
//               will not disappear from the model pool until it is no
//               longer referenced.
////////////////////////////////////////////////////////////////////
58
inline void AnimControl::set_anim_model(PandaNode *model);

277 14 get_anim_model 0 4 438 27 AnimControl::get_anim_model 0 1 55 314
////////////////////////////////////////////////////////////////////
//     Function: AnimControl::get_anim_model
//       Access: Published
//  Description: Retrieves the pointer set via set_anim_model().  See
//               set_anim_model().
////////////////////////////////////////////////////////////////////
58
inline PandaNode *AnimControl::get_anim_model(void) const;

278 6 output 0 6 438 19 AnimControl::output 0 1 56 218
////////////////////////////////////////////////////////////////////
//     Function: AnimControl::output
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
53
virtual void AnimControl::output(ostream &out) const;

279 14 get_class_type 0 4 438 27 AnimControl::get_class_type 0 1 57 0
52
static TypeHandle AnimControl::get_class_type(void);

280 8 get_type 0 6 441 25 AnimChannelBase::get_type 0 1 64 0
57
virtual TypeHandle AnimChannelBase::get_type(void) const;

281 14 get_class_type 0 4 441 31 AnimChannelBase::get_class_type 0 1 65 0
56
static TypeHandle AnimChannelBase::get_class_type(void);

282 16 ~AnimChannelBase 0 4 441 33 AnimChannelBase::~AnimChannelBase 0 0 0
40
AnimChannelBase::~AnimChannelBase(void);

283 9 get_value 0 6 442 44 AnimChannel< ACMatrixSwitchType >::get_value 0 1 66 0
90
virtual void AnimChannel< ACMatrixSwitchType >::get_value(int frame, LMatrix4 &value) = 0;

284 24 get_value_no_scale_shear 0 6 442 59 AnimChannel< ACMatrixSwitchType >::get_value_no_scale_shear 0 1 67 72
// These transform-component methods only have meaning for matrix types.
101
virtual void AnimChannel< ACMatrixSwitchType >::get_value_no_scale_shear(int frame, LMatrix4 &value);

285 9 get_scale 0 6 442 44 AnimChannel< ACMatrixSwitchType >::get_scale 0 1 68 0
87
virtual void AnimChannel< ACMatrixSwitchType >::get_scale(int frame, LVecBase3 &scale);

286 7 get_hpr 0 6 442 42 AnimChannel< ACMatrixSwitchType >::get_hpr 0 1 69 0
83
virtual void AnimChannel< ACMatrixSwitchType >::get_hpr(int frame, LVecBase3 &hpr);

287 8 get_quat 0 6 442 43 AnimChannel< ACMatrixSwitchType >::get_quat 0 1 70 0
87
virtual void AnimChannel< ACMatrixSwitchType >::get_quat(int frame, LQuaternion &quat);

288 7 get_pos 0 6 442 42 AnimChannel< ACMatrixSwitchType >::get_pos 0 1 71 0
83
virtual void AnimChannel< ACMatrixSwitchType >::get_pos(int frame, LVecBase3 &pos);

289 9 get_shear 0 6 442 44 AnimChannel< ACMatrixSwitchType >::get_shear 0 1 72 0
87
virtual void AnimChannel< ACMatrixSwitchType >::get_shear(int frame, LVecBase3 &shear);

290 14 get_value_type 0 6 442 49 AnimChannel< ACMatrixSwitchType >::get_value_type 0 1 73 0
81
virtual TypeHandle AnimChannel< ACMatrixSwitchType >::get_value_type(void) const;

291 14 get_class_type 0 4 442 49 AnimChannel< ACMatrixSwitchType >::get_class_type 0 1 74 0
74
static TypeHandle AnimChannel< ACMatrixSwitchType >::get_class_type(void);

292 9 get_value 0 6 446 44 AnimChannel< ACScalarSwitchType >::get_value 0 0 0
93
virtual void AnimChannel< ACScalarSwitchType >::get_value(int frame, PN_stdfloat &value) = 0;

293 24 get_value_no_scale_shear 0 6 446 59 AnimChannel< ACScalarSwitchType >::get_value_no_scale_shear 0 0 72
// These transform-component methods only have meaning for matrix types.
104
virtual void AnimChannel< ACScalarSwitchType >::get_value_no_scale_shear(int frame, PN_stdfloat &value);

294 9 get_scale 0 6 446 44 AnimChannel< ACScalarSwitchType >::get_scale 0 1 75 0
87
virtual void AnimChannel< ACScalarSwitchType >::get_scale(int frame, LVecBase3 &scale);

295 7 get_hpr 0 6 446 42 AnimChannel< ACScalarSwitchType >::get_hpr 0 1 76 0
83
virtual void AnimChannel< ACScalarSwitchType >::get_hpr(int frame, LVecBase3 &hpr);

296 8 get_quat 0 6 446 43 AnimChannel< ACScalarSwitchType >::get_quat 0 1 77 0
87
virtual void AnimChannel< ACScalarSwitchType >::get_quat(int frame, LQuaternion &quat);

297 7 get_pos 0 6 446 42 AnimChannel< ACScalarSwitchType >::get_pos 0 1 78 0
83
virtual void AnimChannel< ACScalarSwitchType >::get_pos(int frame, LVecBase3 &pos);

298 9 get_shear 0 6 446 44 AnimChannel< ACScalarSwitchType >::get_shear 0 1 79 0
87
virtual void AnimChannel< ACScalarSwitchType >::get_shear(int frame, LVecBase3 &shear);

299 14 get_value_type 0 6 446 49 AnimChannel< ACScalarSwitchType >::get_value_type 0 1 80 0
81
virtual TypeHandle AnimChannel< ACScalarSwitchType >::get_value_type(void) const;

300 14 get_class_type 0 4 446 49 AnimChannel< ACScalarSwitchType >::get_class_type 0 1 81 0
74
static TypeHandle AnimChannel< ACScalarSwitchType >::get_class_type(void);

301 9 set_value 0 4 448 35 AnimChannelMatrixDynamic::set_value 0 2 82 83 615
////////////////////////////////////////////////////////////////////
//     Function: AnimChannelMatrixDynamic::set_value
//       Access: Published
//  Description: Explicitly sets the matrix value.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: AnimChannelMatrixDynamic::set_value
//       Access: Published
//  Description: Explicitly sets the matrix value, using the indicated
//               TransformState object as a convenience.
////////////////////////////////////////////////////////////////////
135
void AnimChannelMatrixDynamic::set_value(LMatrix4 const &value);
void AnimChannelMatrixDynamic::set_value(TransformState const *value);

302 14 set_value_node 0 4 448 40 AnimChannelMatrixDynamic::set_value_node 0 1 84 384
////////////////////////////////////////////////////////////////////
//     Function: AnimChannelMatrixDynamic::set_value_node
//       Access: Published
//  Description: Specifies a node whose transform will be queried each
//               frame to implicitly specify the transform of this
//               joint.
////////////////////////////////////////////////////////////////////
63
void AnimChannelMatrixDynamic::set_value_node(PandaNode *node);

303 19 get_value_transform 0 4 448 45 AnimChannelMatrixDynamic::get_value_transform 0 1 85 341
////////////////////////////////////////////////////////////////////
//     Function: AnimChannelMatrixDynamic::get_value_transform
//       Access: Published
//  Description: Returns the explicit TransformState value that was
//               set via set_value(), if any.
////////////////////////////////////////////////////////////////////
87
inline TransformState const *AnimChannelMatrixDynamic::get_value_transform(void) const;

304 14 get_value_node 0 4 448 40 AnimChannelMatrixDynamic::get_value_node 0 1 86 316
////////////////////////////////////////////////////////////////////
//     Function: AnimChannelMatrixDynamic::get_value_node
//       Access: Published
//  Description: Returns the node that was set via set_value_node(),
//               if any.
////////////////////////////////////////////////////////////////////
71
inline PandaNode *AnimChannelMatrixDynamic::get_value_node(void) const;

305 14 get_class_type 0 4 448 40 AnimChannelMatrixDynamic::get_class_type 0 1 87 0
65
static TypeHandle AnimChannelMatrixDynamic::get_class_type(void);

306 25 ~AnimChannelMatrixDynamic 0 4 448 51 AnimChannelMatrixDynamic::~AnimChannelMatrixDynamic 0 0 0
58
AnimChannelMatrixDynamic::~AnimChannelMatrixDynamic(void);

307 25 AnimChannelMatrixXfmTable 0 4 449 52 AnimChannelMatrixXfmTable::AnimChannelMatrixXfmTable 0 1 88 970
////////////////////////////////////////////////////////////////////
//     Function: AnimChannelMatrixXfmTable::Constructor
//       Access: Protected
//  Description: Used only for bam loader.
/////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: AnimChannelMatrixXfmTable::Copy Constructor
//       Access: Protected
//  Description: Creates a new AnimChannelMatrixXfmTable, just like
//               this one, without copying any children.  The new copy
//               is added to the indicated parent.  Intended to be
//               called by make_copy() only.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: AnimChannelMatrixXfmTable::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
92
AnimChannelMatrixXfmTable::AnimChannelMatrixXfmTable(AnimGroup *parent, string const &name);

308 11 is_valid_id 0 4 449 38 AnimChannelMatrixXfmTable::is_valid_id 0 1 89 329
////////////////////////////////////////////////////////////////////
//     Function: AnimChannelMatrixXfmTable::is_valid_id
//       Access: Public, Static
//  Description: Returns true if the given letter is one of the nine
//               valid table id's.
////////////////////////////////////////////////////////////////////
73
static inline bool AnimChannelMatrixXfmTable::is_valid_id(char table_id);

309 9 set_table 0 4 449 36 AnimChannelMatrixXfmTable::set_table 0 1 90 536
////////////////////////////////////////////////////////////////////
//     Function: AnimChannelMatrixXfmTable::set_table
//       Access: Public
//  Description: Assigns the indicated table.  table_id is one of 'i',
//               'j', 'k', for scale, 'a', 'b', 'c' for shear, 'h',
//               'p', 'r', for rotation, and 'x', 'y', 'z', for
//               translation.  The new table must have either zero,
//               one, or get_num_frames() frames.
////////////////////////////////////////////////////////////////////
85
void AnimChannelMatrixXfmTable::set_table(char table_id, CPTA_stdfloat const &table);

310 9 get_table 0 4 449 36 AnimChannelMatrixXfmTable::get_table 0 1 91 339
////////////////////////////////////////////////////////////////////
//     Function: AnimChannelMatrixXfmTable::get_table
//       Access: Public
//  Description: Returns a pointer to the indicated subtable's data,
//               if it exists, or NULL if it does not.
////////////////////////////////////////////////////////////////////
79
inline CPTA_stdfloat AnimChannelMatrixXfmTable::get_table(char table_id) const;

311 16 clear_all_tables 0 4 449 43 AnimChannelMatrixXfmTable::clear_all_tables 0 1 92 336
////////////////////////////////////////////////////////////////////
//     Function: AnimChannelMatrixXfmTable::clear_all_tables
//       Access: Published
//  Description: Removes all the tables from the channel, and resets
//               it to its initial state.
////////////////////////////////////////////////////////////////////
55
void AnimChannelMatrixXfmTable::clear_all_tables(void);

312 9 has_table 0 4 449 36 AnimChannelMatrixXfmTable::has_table 0 1 93 310
////////////////////////////////////////////////////////////////////
//     Function: AnimChannelMatrixXfmTable::has_table
//       Access: Published
//  Description: Returns true if the indicated subtable has been
//               assigned.
////////////////////////////////////////////////////////////////////
70
inline bool AnimChannelMatrixXfmTable::has_table(char table_id) const;

313 11 clear_table 0 4 449 38 AnimChannelMatrixXfmTable::clear_table 0 1 94 286
////////////////////////////////////////////////////////////////////
//     Function: AnimChannelMatrixXfmTable::clear_table
//       Access: Published
//  Description: Removes the indicated table from the definition.
////////////////////////////////////////////////////////////////////
66
inline void AnimChannelMatrixXfmTable::clear_table(char table_id);

314 14 get_class_type 0 4 449 41 AnimChannelMatrixXfmTable::get_class_type 0 1 95 0
66
static TypeHandle AnimChannelMatrixXfmTable::get_class_type(void);

315 9 set_value 0 4 450 35 AnimChannelScalarDynamic::set_value 0 1 96 261
////////////////////////////////////////////////////////////////////
//     Function: AnimChannelScalarDynamic::set_value
//       Access: Published
//  Description: Explicitly sets the value.
////////////////////////////////////////////////////////////////////
60
void AnimChannelScalarDynamic::set_value(PN_stdfloat value);

316 14 set_value_node 0 4 450 40 AnimChannelScalarDynamic::set_value_node 0 1 97 384
////////////////////////////////////////////////////////////////////
//     Function: AnimChannelScalarDynamic::set_value_node
//       Access: Published
//  Description: Specifies a node whose transform will be queried each
//               frame to implicitly specify the transform of this
//               joint.
////////////////////////////////////////////////////////////////////
63
void AnimChannelScalarDynamic::set_value_node(PandaNode *node);

317 14 get_class_type 0 4 450 40 AnimChannelScalarDynamic::get_class_type 0 1 98 0
65
static TypeHandle AnimChannelScalarDynamic::get_class_type(void);

318 25 ~AnimChannelScalarDynamic 0 4 450 51 AnimChannelScalarDynamic::~AnimChannelScalarDynamic 0 0 0
58
AnimChannelScalarDynamic::~AnimChannelScalarDynamic(void);

319 9 set_table 0 4 451 33 AnimChannelScalarTable::set_table 0 1 99 253
////////////////////////////////////////////////////////////////////
//     Function: AnimChannelScalarTable::set_table
//       Access: Public
//  Description: Assigns the data table.
////////////////////////////////////////////////////////////////////
67
void AnimChannelScalarTable::set_table(CPTA_stdfloat const &table);

320 9 get_table 0 4 451 33 AnimChannelScalarTable::get_table 0 1 100 323
////////////////////////////////////////////////////////////////////
//     Function: AnimChannelScalarTable::get_table
//       Access: Public
//  Description: Returns a pointer to the table's data,
//               if it exists, or NULL if it does not.
////////////////////////////////////////////////////////////////////
67
inline CPTA_stdfloat AnimChannelScalarTable::get_table(void) const;

321 9 has_table 0 4 451 33 AnimChannelScalarTable::has_table 0 1 101 282
////////////////////////////////////////////////////////////////////
//     Function: AnimChannelScalarTable::has_table
//       Access: Published
//  Description: Returns true if the data table has been assigned.
////////////////////////////////////////////////////////////////////
58
inline bool AnimChannelScalarTable::has_table(void) const;

322 11 clear_table 0 4 451 35 AnimChannelScalarTable::clear_table 0 1 102 258
////////////////////////////////////////////////////////////////////
//     Function: AnimChannelScalarTable::clear_table
//       Access: Published
//  Description: Empties the data table.
////////////////////////////////////////////////////////////////////
54
inline void AnimChannelScalarTable::clear_table(void);

323 14 get_class_type 0 4 451 38 AnimChannelScalarTable::get_class_type 0 1 103 0
63
static TypeHandle AnimChannelScalarTable::get_class_type(void);

324 23 ~AnimChannelScalarTable 0 4 451 47 AnimChannelScalarTable::~AnimChannelScalarTable 0 0 0
54
AnimChannelScalarTable::~AnimChannelScalarTable(void);

325 21 AnimControlCollection 0 4 452 44 AnimControlCollection::AnimControlCollection 0 1 104 354
////////////////////////////////////////////////////////////////////
//     Function: AnimControlCollection::Constructor
//       Access: Published
//  Description: Returns the AnimControl associated with the given
//               name, or NULL if no such control has been associated.
////////////////////////////////////////////////////////////////////
51
AnimControlCollection::AnimControlCollection(void);

326 22 ~AnimControlCollection 0 4 452 45 AnimControlCollection::~AnimControlCollection 0 0 232
////////////////////////////////////////////////////////////////////
//     Function: AnimControlCollection::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
52
AnimControlCollection::~AnimControlCollection(void);

327 10 store_anim 0 4 452 33 AnimControlCollection::store_anim 0 1 105 529
////////////////////////////////////////////////////////////////////
//     Function: AnimControlCollection::store_anim
//       Access: Published
//  Description: Associates the given AnimControl with this collection
//               under the given name.  The AnimControl will remain
//               associated until a new AnimControl is associated with
//               the same name later, or until unbind_anim() is called
//               with this name.
////////////////////////////////////////////////////////////////////
81
void AnimControlCollection::store_anim(AnimControl *control, string const &name);

328 9 find_anim 0 4 452 32 AnimControlCollection::find_anim 0 1 106 352
////////////////////////////////////////////////////////////////////
//     Function: AnimControlCollection::find_anim
//       Access: Published
//  Description: Returns the AnimControl associated with the given
//               name, or NULL if no such control has been associated.
////////////////////////////////////////////////////////////////////
72
AnimControl *AnimControlCollection::find_anim(string const &name) const;

329 11 unbind_anim 0 4 452 34 AnimControlCollection::unbind_anim 0 1 107 452
////////////////////////////////////////////////////////////////////
//     Function: AnimControlCollection::unbind_anim
//       Access: Published
//  Description: Removes the AnimControl associated with the given
//               name, if any.  Returns true if an AnimControl was
//               removed, false if there was no AnimControl with the
//               indicated name.
////////////////////////////////////////////////////////////////////
60
bool AnimControlCollection::unbind_anim(string const &name);

330 13 get_num_anims 0 4 452 36 AnimControlCollection::get_num_anims 0 1 108 320
////////////////////////////////////////////////////////////////////
//     Function: AnimControlCollection::get_num_anims
//       Access: Published
//  Description: Returns the number of AnimControls associated with
//               this collection.
////////////////////////////////////////////////////////////////////
53
int AnimControlCollection::get_num_anims(void) const;

331 8 get_anim 0 4 452 31 AnimControlCollection::get_anim 0 1 109 308
////////////////////////////////////////////////////////////////////
//     Function: AnimControlCollection::get_anim
//       Access: Published
//  Description: Returns the nth AnimControl associated with
//               this collection.
////////////////////////////////////////////////////////////////////
58
AnimControl *AnimControlCollection::get_anim(int n) const;

332 13 get_anim_name 0 4 452 36 AnimControlCollection::get_anim_name 0 1 110 325
////////////////////////////////////////////////////////////////////
//     Function: AnimControlCollection::get_anim_name
//       Access: Published
//  Description: Returns the name of the nth AnimControl associated
//               with this collection.
////////////////////////////////////////////////////////////////////
57
string AnimControlCollection::get_anim_name(int n) const;

333 11 clear_anims 0 4 452 34 AnimControlCollection::clear_anims 0 1 111 279
////////////////////////////////////////////////////////////////////
//     Function: AnimControlCollection::clear_anims
//       Access: Published
//  Description: Disassociates all anims from this collection.
////////////////////////////////////////////////////////////////////
46
void AnimControlCollection::clear_anims(void);

334 4 play 0 4 452 27 AnimControlCollection::play 0 2 112 113 520
////////////////////////////////////////////////////////////////////
//     Function: AnimControlCollection::play
//       Access: Public
//  Description: Starts the named animation playing.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: AnimControlCollection::play
//       Access: Public
//  Description: Starts the named animation playing.
////////////////////////////////////////////////////////////////////
149
inline bool AnimControlCollection::play(string const &anim_name);
inline bool AnimControlCollection::play(string const &anim_name, int from, int to);

335 4 loop 0 4 452 27 AnimControlCollection::loop 0 2 114 115 520
////////////////////////////////////////////////////////////////////
//     Function: AnimControlCollection::loop
//       Access: Public
//  Description: Starts the named animation looping.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: AnimControlCollection::loop
//       Access: Public
//  Description: Starts the named animation looping.
////////////////////////////////////////////////////////////////////
177
inline bool AnimControlCollection::loop(string const &anim_name, bool restart);
inline bool AnimControlCollection::loop(string const &anim_name, bool restart, int from, int to);

336 4 stop 0 4 452 27 AnimControlCollection::stop 0 1 116 250
////////////////////////////////////////////////////////////////////
//     Function: AnimControlCollection::stop
//       Access: Public
//  Description: Stops the named animation.
////////////////////////////////////////////////////////////////////
65
inline bool AnimControlCollection::stop(string const &anim_name);

337 4 pose 0 4 452 27 AnimControlCollection::pose 0 1 117 274
////////////////////////////////////////////////////////////////////
//     Function: AnimControlCollection::pose
//       Access: Public
//  Description: Sets to a particular frame in the named animation.
////////////////////////////////////////////////////////////////////
76
inline bool AnimControlCollection::pose(string const &anim_name, int frame);

338 8 play_all 0 4 452 31 AnimControlCollection::play_all 0 2 118 119 574
// These functions operate on all anims at once.

////////////////////////////////////////////////////////////////////
//     Function: AnimControlCollection::play_all
//       Access: Published
//  Description: Starts all animations playing.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: AnimControlCollection::play_all
//       Access: Published
//  Description: Starts all animations playing.
////////////////////////////////////////////////////////////////////
99
void AnimControlCollection::play_all(void);
void AnimControlCollection::play_all(int from, int to);

339 8 loop_all 0 4 452 31 AnimControlCollection::loop_all 0 2 120 121 524
////////////////////////////////////////////////////////////////////
//     Function: AnimControlCollection::loop_all
//       Access: Published
//  Description: Starts all animations looping.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: AnimControlCollection::loop_all
//       Access: Published
//  Description: Starts all animations looping.
////////////////////////////////////////////////////////////////////
121
void AnimControlCollection::loop_all(bool restart);
void AnimControlCollection::loop_all(bool restart, int from, int to);

340 8 stop_all 0 4 452 31 AnimControlCollection::stop_all 0 1 122 378
////////////////////////////////////////////////////////////////////
//     Function: AnimControlCollection::stop_all
//       Access: Published
//  Description: Stops all currently playing animations.  Returns true
//               if any animations were stopped, false if none were
//               playing.
////////////////////////////////////////////////////////////////////
43
bool AnimControlCollection::stop_all(void);

341 8 pose_all 0 4 452 31 AnimControlCollection::pose_all 0 1 123 274
////////////////////////////////////////////////////////////////////
//     Function: AnimControlCollection::pose_all
//       Access: Published
//  Description: Sets all animations to the indicated frame.
////////////////////////////////////////////////////////////////////
48
void AnimControlCollection::pose_all(int frame);

342 9 get_frame 0 4 452 32 AnimControlCollection::get_frame 0 2 124 125 635
////////////////////////////////////////////////////////////////////
//     Function: AnimControlCollection::get_frame
//       Access: Public
//  Description: Returns the current frame in the named animation, or
//               0 if the animation is not found.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: AnimControlCollection::get_frame
//       Access: Public
//  Description: Returns the current frame in the last-started
//               animation.
////////////////////////////////////////////////////////////////////
132
inline int AnimControlCollection::get_frame(string const &anim_name) const;
inline int AnimControlCollection::get_frame(void) const;

343 14 get_num_frames 0 4 452 37 AnimControlCollection::get_num_frames 0 2 126 127 663
////////////////////////////////////////////////////////////////////
//     Function: AnimControlCollection::get_num_frames
//       Access: Public
//  Description: Returns the total number of frames in the named
//               animation, or 0 if the animation is not found.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: AnimControlCollection::get_num_frames
//       Access: Public
//  Description: Returns the total number of frames in the
//               last-started animation.
////////////////////////////////////////////////////////////////////
142
inline int AnimControlCollection::get_num_frames(string const &anim_name) const;
inline int AnimControlCollection::get_num_frames(void) const;

344 10 is_playing 0 4 452 33 AnimControlCollection::is_playing 0 2 128 129 651
////////////////////////////////////////////////////////////////////
//     Function: AnimControlCollection::is_playing
//       Access: Public
//  Description: Returns true if the named animation is currently
//               playing, false otherwise.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: AnimControlCollection::is_playing
//       Access: Public
//  Description: Returns true if the last-started animation is
//               currently playing, false otherwise.
////////////////////////////////////////////////////////////////////
136
inline bool AnimControlCollection::is_playing(string const &anim_name) const;
inline bool AnimControlCollection::is_playing(void) const;

345 18 which_anim_playing 0 4 452 41 AnimControlCollection::which_anim_playing 0 1 130 458
////////////////////////////////////////////////////////////////////
//     Function: AnimControlCollection::which_anim_playing
//       Access: Published
//  Description: Returns the name of the bound AnimControl currently
//               playing, if any.  If more than one AnimControl is
//               currently playing, returns all of the names separated
//               by spaces.
////////////////////////////////////////////////////////////////////
61
string AnimControlCollection::which_anim_playing(void) const;

346 6 output 0 4 452 29 AnimControlCollection::output 0 1 131 229
////////////////////////////////////////////////////////////////////
//     Function: AnimControlCollection::output
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
55
void AnimControlCollection::output(ostream &out) const;

347 5 write 0 4 452 28 AnimControlCollection::write 0 1 132 228
////////////////////////////////////////////////////////////////////
//     Function: AnimControlCollection::write
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
54
void AnimControlCollection::write(ostream &out) const;

348 16 AnimPreloadTable 0 4 453 34 AnimPreloadTable::AnimPreloadTable 0 1 133 229
////////////////////////////////////////////////////////////////////
//     Function: AnimPreloadTable::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
41
AnimPreloadTable::AnimPreloadTable(void);

349 13 get_num_anims 0 4 453 31 AnimPreloadTable::get_num_anims 0 1 134 284
////////////////////////////////////////////////////////////////////
//     Function: AnimPreloadTable::get_num_anims
//       Access: Published
//  Description: Returns the number of animation records in the table.
////////////////////////////////////////////////////////////////////
48
int AnimPreloadTable::get_num_anims(void) const;

350 9 find_anim 0 4 453 27 AnimPreloadTable::find_anim 0 1 135 610
////////////////////////////////////////////////////////////////////
//     Function: AnimPreloadTable::find_anim
//       Access: Published
//  Description: Returns the index number in the table of the
//               animation record with the indicated name, or -1 if
//               the name is not present.  By convention, the basename
//               is the filename of the egg or bam file, without the
//               directory part and without the extension.  That is,
//               it is Filename::get_basename_wo_extension().
////////////////////////////////////////////////////////////////////
62
int AnimPreloadTable::find_anim(string const &basename) const;

351 12 get_basename 0 4 453 30 AnimPreloadTable::get_basename 0 1 136 322
////////////////////////////////////////////////////////////////////
//     Function: AnimPreloadTable::get_basename
//       Access: Published
//  Description: Returns the basename stored for the nth animation
//               record.  See find_anim().
////////////////////////////////////////////////////////////////////
58
inline string AnimPreloadTable::get_basename(int n) const;

352 19 get_base_frame_rate 0 4 453 37 AnimPreloadTable::get_base_frame_rate 0 1 137 313
////////////////////////////////////////////////////////////////////
//     Function: AnimPreloadTable::get_base_frame_rate
//       Access: Published
//  Description: Returns the frame rate stored for the nth animation
//               record.
////////////////////////////////////////////////////////////////////
70
inline PN_stdfloat AnimPreloadTable::get_base_frame_rate(int n) const;

353 14 get_num_frames 0 4 453 32 AnimPreloadTable::get_num_frames 0 1 138 314
////////////////////////////////////////////////////////////////////
//     Function: AnimPreloadTable::get_num_frames
//       Access: Published
//  Description: Returns the number of frames stored for the nth
//               animation record.
////////////////////////////////////////////////////////////////////
57
inline int AnimPreloadTable::get_num_frames(int n) const;

354 11 clear_anims 0 4 453 29 AnimPreloadTable::clear_anims 0 1 139 274
////////////////////////////////////////////////////////////////////
//     Function: AnimPreloadTable::clear_anims
//       Access: Published
//  Description: Removes all animation records from the table.
////////////////////////////////////////////////////////////////////
41
void AnimPreloadTable::clear_anims(void);

355 11 remove_anim 0 4 453 29 AnimPreloadTable::remove_anim 0 1 140 344
////////////////////////////////////////////////////////////////////
//     Function: AnimPreloadTable::remove_anim
//       Access: Published
//  Description: Removes the nth animation records from the table.
//               This renumbers indexes for following animations.
////////////////////////////////////////////////////////////////////
42
void AnimPreloadTable::remove_anim(int n);

356 8 add_anim 0 4 453 26 AnimPreloadTable::add_anim 0 1 141 505
////////////////////////////////////////////////////////////////////
//     Function: AnimPreloadTable::add_anim
//       Access: Published
//  Description: Adds a new animation record to the table.  If there
//               is already a record of this name, no operation is
//               performed (the original record is unchanged).  See
//               find_anim().  This will invalidate existing index
//               numbers.
////////////////////////////////////////////////////////////////////
101
void AnimPreloadTable::add_anim(string const &basename, PN_stdfloat base_frame_rate, int num_frames);

357 14 add_anims_from 0 4 453 32 AnimPreloadTable::add_anims_from 0 1 142 412
////////////////////////////////////////////////////////////////////
//     Function: AnimPreloadTable::add_anims_from
//       Access: Published
//  Description: Copies the animation records from the other table
//               into this one.  If a given record name exists in both
//               tables, the record in this one supercedes.
////////////////////////////////////////////////////////////////////
69
void AnimPreloadTable::add_anims_from(AnimPreloadTable const *other);

358 6 output 0 6 453 24 AnimPreloadTable::output 0 1 143 224
////////////////////////////////////////////////////////////////////
//     Function: AnimPreloadTable::output
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
58
virtual void AnimPreloadTable::output(ostream &out) const;

359 5 write 0 6 453 23 AnimPreloadTable::write 0 1 144 223
////////////////////////////////////////////////////////////////////
//     Function: AnimPreloadTable::write
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
75
virtual void AnimPreloadTable::write(ostream &out, int indent_level) const;

360 14 get_class_type 0 4 453 32 AnimPreloadTable::get_class_type 0 1 145 0
57
static TypeHandle AnimPreloadTable::get_class_type(void);

361 9 auto_bind 0 1 0 9 auto_bind 0 1 211 0
101
void auto_bind(PandaNode *root_node, AnimControlCollection &controls, int hierarchy_match_flags = 0);

362 10 PartSubset 0 4 455 22 PartSubset::PartSubset 0 2 146 147 453
////////////////////////////////////////////////////////////////////
//     Function: PartSubset::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PartSubset::Copy Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
77
PartSubset::PartSubset(void);
PartSubset::PartSubset(PartSubset const &copy);

363 10 operator = 0 4 455 22 PartSubset::operator = 0 1 148 0
52
void PartSubset::operator =(PartSubset const &copy);

364 17 add_include_joint 0 4 455 29 PartSubset::add_include_joint 0 1 149 650
////////////////////////////////////////////////////////////////////
//     Function: PartSubset::add_include_joint
//       Access: Published
//  Description: Adds the named joint to the list of joints that will
//               be explicitly included in the subset.  Any joint at
//               or below a named node will be included in the subset
//               (unless a lower node is also listed in the exclude
//               list).
//
//               Since the name is a GlobPattern, it may of course
//               include filename globbing characters like * and ?.
////////////////////////////////////////////////////////////////////
60
void PartSubset::add_include_joint(GlobPattern const &name);

365 17 add_exclude_joint 0 4 455 29 PartSubset::add_exclude_joint 0 1 150 657
////////////////////////////////////////////////////////////////////
//     Function: PartSubset::add_exclude_joint
//       Access: Published
//  Description: Adds the named joint to the list of joints that will
//               be explicitly exlcluded from the subset.  Any joint at
//               or below a named node will not be included in the
//               subset (unless a lower node is also listed in the
//               include list).
//
//               Since the name is a GlobPattern, it may of course
//               include filename globbing characters like * and ?.
////////////////////////////////////////////////////////////////////
60
void PartSubset::add_exclude_joint(GlobPattern const &name);

366 6 append 0 4 455 18 PartSubset::append 0 1 151 319
////////////////////////////////////////////////////////////////////
//     Function: PartSubset::append
//       Access: Published
//  Description: Appends the include and exclude list from the other
//               object onto this object's lists.
////////////////////////////////////////////////////////////////////
49
void PartSubset::append(PartSubset const &other);

367 6 output 0 4 455 18 PartSubset::output 0 1 152 218
////////////////////////////////////////////////////////////////////
//     Function: PartSubset::output
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
44
void PartSubset::output(ostream &out) const;

368 16 is_include_empty 0 4 455 28 PartSubset::is_include_empty 0 1 153 395
////////////////////////////////////////////////////////////////////
//     Function: PartSubset::is_include_empty
//       Access: Published
//  Description: Returns true if the include list is completely empty,
//               false otherwise.  If it is empty, it is the same
//               thing as including all joints.
////////////////////////////////////////////////////////////////////
46
bool PartSubset::is_include_empty(void) const;

369 15 matches_include 0 4 455 27 PartSubset::matches_include 0 1 154 331
////////////////////////////////////////////////////////////////////
//     Function: PartSubset::matches_include
//       Access: Published
//  Description: Returns true if the indicated name matches a name on
//               the include list, false otherwise.
////////////////////////////////////////////////////////////////////
65
bool PartSubset::matches_include(string const &joint_name) const;

370 15 matches_exclude 0 4 455 27 PartSubset::matches_exclude 0 1 155 331
////////////////////////////////////////////////////////////////////
//     Function: PartSubset::matches_exclude
//       Access: Published
//  Description: Returns true if the indicated name matches a name on
//               the exclude list, false otherwise.
////////////////////////////////////////////////////////////////////
65
bool PartSubset::matches_exclude(string const &joint_name) const;

371 11 ~PartSubset 0 4 455 23 PartSubset::~PartSubset 0 0 0
30
PartSubset::~PartSubset(void);

372 15 BindAnimRequest 0 4 456 32 BindAnimRequest::BindAnimRequest 0 1 156 225
////////////////////////////////////////////////////////////////////
//     Function: BindAnimRequest::Constructor
//       Access: Public
//  Description: 
////////////////////////////////////////////////////////////////////
200
BindAnimRequest::BindAnimRequest(string const &name, Filename const &filename, LoaderOptions const &options, Loader *loader, AnimControl *control, int hierarchy_match_flags, PartSubset const &subset);

373 14 get_class_type 0 4 456 31 BindAnimRequest::get_class_type 0 1 157 0
56
static TypeHandle BindAnimRequest::get_class_type(void);

374 16 ~BindAnimRequest 0 4 456 33 BindAnimRequest::~BindAnimRequest 0 0 0
40
BindAnimRequest::~BindAnimRequest(void);

375 10 PartBundle 0 4 458 22 PartBundle::PartBundle 0 1 158 694
////////////////////////////////////////////////////////////////////
//     Function: PartBundle::Copy Constructor
//       Access: Protected
//  Description: Normally, you'd use make_copy() or copy_subgraph() to
//               make a copy of this.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PartBundle::Constructor
//       Access: Public
//  Description: Normally, a PartBundle constructor should not be
//               called directly--it will get created when a
//               PartBundleNode is created.
////////////////////////////////////////////////////////////////////
48
PartBundle::PartBundle(string const &name = "");

376 16 get_anim_preload 0 4 458 28 PartBundle::get_anim_preload 0 1 159 443
////////////////////////////////////////////////////////////////////
//     Function: PartBundle::get_anim_preload
//       Access: Published
//  Description: Returns the AnimPreloadTable associated with
//               the PartBundle.  This table, if present, can be used
//               for the benefit of load_bind_anim() to allow
//               asynchronous binding.
////////////////////////////////////////////////////////////////////
83
inline ConstPointerTo< AnimPreloadTable > PartBundle::get_anim_preload(void) const;

377 19 modify_anim_preload 0 4 458 31 PartBundle::modify_anim_preload 0 1 160 340
////////////////////////////////////////////////////////////////////
//     Function: PartBundle::modify_anim_preload
//       Access: Published
//  Description: Returns a modifiable pointer to the AnimPreloadTable
//               associated with the PartBundle, if any.
////////////////////////////////////////////////////////////////////
75
inline PointerTo< AnimPreloadTable > PartBundle::modify_anim_preload(void);

378 16 set_anim_preload 0 4 458 28 PartBundle::set_anim_preload 0 1 161 306
////////////////////////////////////////////////////////////////////
//     Function: PartBundle::set_anim_preload
//       Access: Published
//  Description: Replaces the AnimPreloadTable associated with
//               the PartBundle.
////////////////////////////////////////////////////////////////////
66
inline void PartBundle::set_anim_preload(AnimPreloadTable *table);

379 18 clear_anim_preload 0 4 458 30 PartBundle::clear_anim_preload 0 1 162 307
////////////////////////////////////////////////////////////////////
//     Function: PartBundle::clear_anim_preload
//       Access: Published
//  Description: Removes any AnimPreloadTable associated with
//               the PartBundle.
////////////////////////////////////////////////////////////////////
49
inline void PartBundle::clear_anim_preload(void);

380 19 merge_anim_preloads 0 4 458 31 PartBundle::merge_anim_preloads 0 1 163 322
////////////////////////////////////////////////////////////////////
//     Function: PartBundle::merge_anim_preloads
//       Access: Published
//  Description: Copies the contents of the other PartBundle's preload
//               table into this one.
////////////////////////////////////////////////////////////////////
62
void PartBundle::merge_anim_preloads(PartBundle const *other);

381 14 set_blend_type 0 4 458 26 PartBundle::set_blend_type 0 1 164 558
////////////////////////////////////////////////////////////////////
//     Function: PartBundle::set_blend_type
//       Access: Published
//  Description: Defines the algorithm that is used when blending
//               multiple frames or multiple animations together, when
//               either anim_blend_flag or frame_blend_flag is set
//               to true.
//
//               See partBundle.h for a description of the meaning of
//               each of the BlendType values.
////////////////////////////////////////////////////////////////////
65
inline void PartBundle::set_blend_type(PartBundle::BlendType bt);

382 14 get_blend_type 0 4 458 26 PartBundle::get_blend_type 0 1 165 438
////////////////////////////////////////////////////////////////////
//     Function: PartBundle::get_blend_type
//       Access: Published
//  Description: Returns the algorithm that is used when blending
//               multiple frames or multiple animations together, when
//               either anim_blend_flag or frame_blend_flag is set
//               to true.
////////////////////////////////////////////////////////////////////
68
inline PartBundle::BlendType PartBundle::get_blend_type(void) const;

383 19 set_anim_blend_flag 0 4 458 31 PartBundle::set_anim_blend_flag 0 1 166 947
////////////////////////////////////////////////////////////////////
//     Function: PartBundle::set_anim_blend_flag
//       Access: Published
//  Description: Defines the way the character responds to multiple
//               calls to set_control_effect()).  By default, this
//               flag is set false, which disallows multiple
//               animations.  When this flag is false, it is not
//               necessary to explicitly set the control_effect when
//               starting an animation; starting the animation will
//               implicitly remove the control_effect from the
//               previous animation and set it on the current one.
//
//               However, if this flag is set true, the control_effect
//               must be explicitly set via set_control_effect()
//               whenever an animation is to affect the character.
////////////////////////////////////////////////////////////////////
59
void PartBundle::set_anim_blend_flag(bool anim_blend_flag);

384 19 get_anim_blend_flag 0 4 458 31 PartBundle::get_anim_blend_flag 0 1 167 387
////////////////////////////////////////////////////////////////////
//     Function: PartBundle::get_anim_blend_flag
//       Access: Published
//  Description: Returns whether the character allows multiple
//               different animations to be bound simultaneously.  See
//               set_anim_blend_flag().
////////////////////////////////////////////////////////////////////
56
inline bool PartBundle::get_anim_blend_flag(void) const;

385 20 set_frame_blend_flag 0 4 458 32 PartBundle::set_frame_blend_flag 0 1 168 1201
////////////////////////////////////////////////////////////////////
//     Function: PartBundle::set_frame_blend_flag
//       Access: Published
//  Description: Specifies whether the character interpolates (blends)
//               between two sequential frames of an active animation,
//               showing a smooth intra-frame motion, or whether it
//               holds each frame until the next frame is ready,
//               showing precisely the specified animation.
//
//               When this value is false, the character holds each
//               frame until the next is ready.  When this is true,
//               the character will interpolate between two
//               consecutive frames of animation for each frame the
//               animation is onscreen, according to the amount of
//               time elapsed between the frames.
//
//               The default value of this flag is determined by the
//               interpolate-frames Config.prc variable.
//
//               Use set_blend_type() to change the algorithm that the
//               character uses to interpolate matrix positions.
////////////////////////////////////////////////////////////////////
68
inline void PartBundle::set_frame_blend_flag(bool frame_blend_flag);

386 20 get_frame_blend_flag 0 4 458 32 PartBundle::get_frame_blend_flag 0 1 169 471
////////////////////////////////////////////////////////////////////
//     Function: PartBundle::get_frame_blend_flag
//       Access: Published
//  Description: Returns whether the character interpolates (blends)
//               between two sequential animation frames, or whether
//               it holds the current frame until the next one is
//               ready.  See set_frame_blend_flag().
////////////////////////////////////////////////////////////////////
57
inline bool PartBundle::get_frame_blend_flag(void) const;

387 14 set_root_xform 0 4 458 26 PartBundle::set_root_xform 0 1 170 340
////////////////////////////////////////////////////////////////////
//     Function: PartBundle::set_root_xform
//       Access: Published
//  Description: Specifies the transform matrix which is implicitly
//               applied at the root of the animated hierarchy.
////////////////////////////////////////////////////////////////////
67
inline void PartBundle::set_root_xform(LMatrix4 const &root_xform);

388 5 xform 0 4 458 17 PartBundle::xform 0 1 171 304
////////////////////////////////////////////////////////////////////
//     Function: PartBundle::xform
//       Access: Published
//  Description: Applies the indicated transform to the root of the
//               animated hierarchy.
////////////////////////////////////////////////////////////////////
51
inline void PartBundle::xform(LMatrix4 const &mat);

389 14 get_root_xform 0 4 458 26 PartBundle::get_root_xform 0 1 172 338
////////////////////////////////////////////////////////////////////
//     Function: PartBundle::get_root_xform
//       Access: Published
//  Description: Returns the transform matrix which is implicitly
//               applied at the root of the animated hierarchy.
////////////////////////////////////////////////////////////////////
62
inline LMatrix4 const &PartBundle::get_root_xform(void) const;

390 15 apply_transform 0 4 458 27 PartBundle::apply_transform 0 1 173 487
////////////////////////////////////////////////////////////////////
//     Function: PartBundle::apply_transform
//       Access: Published
//  Description: Returns a PartBundle that is a duplicate of this one,
//               but with the indicated transform applied.  If this is
//               called multiple times with the same TransformState
//               pointer, it returns the same PartBundle each time.
////////////////////////////////////////////////////////////////////
85
PointerTo< PartBundle > PartBundle::apply_transform(TransformState const *transform);

391 13 get_num_nodes 0 4 458 25 PartBundle::get_num_nodes 0 1 174 322
////////////////////////////////////////////////////////////////////
//     Function: PartBundle::get_num_nodes
//       Access: Published
//  Description: Returns the number of PartBundleNodes that contain a
//               pointer to this PartBundle.
////////////////////////////////////////////////////////////////////
49
inline int PartBundle::get_num_nodes(void) const;

392 8 get_node 0 4 458 20 PartBundle::get_node 0 1 175 300
////////////////////////////////////////////////////////////////////
//     Function: PartBundle::get_node
//       Access: Published
//  Description: Returns the nth PartBundleNode associated with
//               this PartBundle.
////////////////////////////////////////////////////////////////////
57
inline PartBundleNode *PartBundle::get_node(int n) const;

393 21 clear_control_effects 0 4 458 33 PartBundle::clear_control_effects 0 1 176 872
////////////////////////////////////////////////////////////////////
//     Function: PartBundle::clear_control_effects
//       Access: Published
//  Description: Sets the control effect of all AnimControls to zero
//               (but does not "stop" the AnimControls).  The
//               character will no longer be affected by any
//               animation, and will return to its default
//               pose (unless restore-initial-pose is false).
//
//               The AnimControls which are no longer associated will
//               not be using any CPU cycles, but they may still be in
//               the "playing" state; if they are later reassociated
//               with the PartBundle they will resume at their current
//               frame as if they'd been running all along.
////////////////////////////////////////////////////////////////////
45
void PartBundle::clear_control_effects(void);

394 18 set_control_effect 0 4 458 30 PartBundle::set_control_effect 0 1 177 897
////////////////////////////////////////////////////////////////////
//     Function: PartBundle::set_control_effect
//       Access: Published
//  Description: Sets the amount by which the character is affected by
//               the indicated AnimControl (and its associated
//               animation).  Normally, this will only be zero or one.
//               Zero indicates the animation does not affect the
//               character, and one means it does.
//
//               If the _anim_blend_flag is not false (see
//               set_anim_blend_flag()), it is possible to have
//               multiple AnimControls in effect simultaneously.  In
//               this case, the effect is a weight that indicates the
//               relative importance of each AnimControl to the final
//               animation.
////////////////////////////////////////////////////////////////////
85
inline void PartBundle::set_control_effect(AnimControl *control, PN_stdfloat effect);

395 18 get_control_effect 0 4 458 30 PartBundle::get_control_effect 0 1 178 403
////////////////////////////////////////////////////////////////////
//     Function: PartBundle::get_control_effect
//       Access: Published
//  Description: Returns the amount by which the character is affected
//               by the indicated AnimControl and its associated
//               animation.  See set_control_effect().
////////////////////////////////////////////////////////////////////
78
inline PN_stdfloat PartBundle::get_control_effect(AnimControl *control) const;

396 6 output 0 6 458 18 PartBundle::output 0 1 179 271
////////////////////////////////////////////////////////////////////
//     Function: PartBundle::output
//       Access: Published, Virtual
//  Description: Writes a one-line description of the bundle.
////////////////////////////////////////////////////////////////////
52
virtual void PartBundle::output(ostream &out) const;

397 9 bind_anim 0 4 458 21 PartBundle::bind_anim 0 1 180 1221
////////////////////////////////////////////////////////////////////
//     Function: PartBundle::bind_anim
//       Access: Published
//  Description: Binds the animation to the bundle, if possible, and
//               returns a new AnimControl that can be used to start
//               and stop the animation.  If the anim hierarchy does
//               not match the part hierarchy, returns NULL.
//
//               If hierarchy_match_flags is 0, only an exact match is
//               accepted; otherwise, it may contain a union of
//               PartGroup::HierarchyMatchFlags values indicating
//               conditions that will be tolerated (but warnings will
//               still be issued).
//
//               If subset is specified, it restricts the binding only
//               to the named subtree of joints.
//
//               The AnimControl is not stored within the PartBundle;
//               it is the user's responsibility to maintain the
//               pointer.  The animation will automatically unbind
//               itself when the AnimControl destructs (i.e. its
//               reference count goes to zero).
////////////////////////////////////////////////////////////////////
137
PointerTo< AnimControl > PartBundle::bind_anim(AnimBundle *anim, int hierarchy_match_flags = 0, PartSubset const &subset = PartSubset());

398 14 load_bind_anim 0 4 458 26 PartBundle::load_bind_anim 0 1 181 1614
////////////////////////////////////////////////////////////////////
//     Function: PartBundle::load_bind_anim
//       Access: Published
//  Description: Binds an animation to the bundle.  The animation is
//               loaded from the disk via the indicated Loader object.
//               In other respects, this behaves similarly to
//               bind_anim(), with the addition of asynchronous
//               support.
//
//               If allow_aysnc is true, the load will be asynchronous
//               if possible.  This requires that the animation
//               basename can be found in the PartBundle's preload
//               table (see get_anim_preload()).
//
//               In an asynchronous load, the animation file will be
//               loaded and bound in a sub-thread.  This means that
//               the animation will not necessarily be available at
//               the time this method returns.  You may still use the
//               returned AnimControl immediately, though, but no
//               visible effect will occur until the animation
//               eventually becomes available.
//
//               You can test AnimControl::is_pending() to see if the
//               animation has been loaded yet, or wait for it to
//               finish with AnimControl::wait_pending() or even
//               PartBundle::wait_pending().  You can also set an
//               event to be triggered when the animation finishes
//               loading with AnimControl::set_pending_done_event().
////////////////////////////////////////////////////////////////////
165
PointerTo< AnimControl > PartBundle::load_bind_anim(Loader *loader, Filename const &filename, int hierarchy_match_flags, PartSubset const &subset, bool allow_async);

399 12 wait_pending 0 4 458 24 PartBundle::wait_pending 0 1 182 397
////////////////////////////////////////////////////////////////////
//     Function: PartBundle::wait_pending
//       Access: Published
//  Description: Blocks the current thread until all currently-pending
//               AnimControls, with a nonzero control effect, have
//               been loaded and are properly bound.
////////////////////////////////////////////////////////////////////
36
void PartBundle::wait_pending(void);

400 12 freeze_joint 0 4 458 24 PartBundle::freeze_joint 0 3 183 184 185 2083
////////////////////////////////////////////////////////////////////
//     Function: PartBundle::freeze_joint
//       Access: Published
//  Description: Specifies that the joint with the indicated name
//               should be frozen with the specified transform.  It
//               will henceforth always hold this fixed transform,
//               regardless of any animations that may subsequently be
//               bound to the joint.
//
//               Returns true if the joint is successfully frozen, or
//               false if the named child is not a joint (or slider)
//               or does not exist.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PartBundle::freeze_joint
//       Access: Published
//  Description: Specifies that the joint with the indicated name
//               should be frozen with the specified transform.  It
//               will henceforth always hold this fixed transform,
//               regardless of any animations that may subsequently be
//               bound to the joint.
//
//               Returns true if the joint is successfully frozen, or
//               false if the named child is not a joint (or slider)
//               or does not exist.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PartBundle::freeze_joint
//       Access: Published
//  Description: Specifies that the joint with the indicated name
//               should be frozen with the specified transform.  It
//               will henceforth always hold this fixed transform,
//               regardless of any animations that may subsequently be
//               bound to the joint.
//
//               Returns true if the joint is successfully frozen, or
//               false if the named child is not a joint (or slider)
//               or does not exist.
////////////////////////////////////////////////////////////////////
290
bool PartBundle::freeze_joint(string const &joint_name, TransformState const *transform);
bool PartBundle::freeze_joint(string const &joint_name, LVecBase3 const &pos, LVecBase3 const &hpr, LVecBase3 const &scale);
bool PartBundle::freeze_joint(string const &joint_name, PN_stdfloat value);

401 13 control_joint 0 4 458 25 PartBundle::control_joint 0 1 186 714
////////////////////////////////////////////////////////////////////
//     Function: PartBundle::control_joint
//       Access: Published
//  Description: Specifies that the joint with the indicated name
//               should be animated with the transform on the
//               indicated node.  It will henceforth always follow the
//               node's transform, regardless of any animations that
//               may subsequently be bound to the joint.
//
//               Returns true if the joint is successfully controlled,
//               or false if the named child is not a joint (or
//               slider) or does not exist.
////////////////////////////////////////////////////////////////////
74
bool PartBundle::control_joint(string const &joint_name, PandaNode *node);

402 13 release_joint 0 4 458 25 PartBundle::release_joint 0 1 187 646
////////////////////////////////////////////////////////////////////
//     Function: PartBundle::release_joint
//       Access: Published
//  Description: Releases the named joint from the effects of a
//               previous call to freeze_joint() or control_joint().
//               It will henceforth once again follow whatever
//               transforms are dictated by the animation.
//
//               Returns true if the joint is released, or false if
//               the named child was not previously controlled or
//               frozen, or it does not exist.
////////////////////////////////////////////////////////////////////
57
bool PartBundle::release_joint(string const &joint_name);

403 6 update 0 4 458 18 PartBundle::update 0 1 188 482
////////////////////////////////////////////////////////////////////
//     Function: PartBundle::update
//       Access: Published
//  Description: Updates all the parts in the bundle to reflect the
//               data for the current frame (as set in each of the
//               AnimControls).
//
//               Returns true if any part has changed as a result of
//               this, or false otherwise.
////////////////////////////////////////////////////////////////////
30
bool PartBundle::update(void);

404 12 force_update 0 4 458 24 PartBundle::force_update 0 1 189 375
////////////////////////////////////////////////////////////////////
//     Function: PartBundle::force_update
//       Access: Published
//  Description: Updates all the parts in the bundle to reflect the
//               data for the current frame, whether we believe it
//               needs it or not.
////////////////////////////////////////////////////////////////////
36
bool PartBundle::force_update(void);

405 14 get_class_type 0 4 458 26 PartBundle::get_class_type 0 1 190 0
51
static TypeHandle PartBundle::get_class_type(void);

406 11 ~PartBundle 0 4 458 23 PartBundle::~PartBundle 0 0 0
30
PartBundle::~PartBundle(void);

407 13 get_max_bound 0 4 460 29 MovingPartBase::get_max_bound 0 1 191 604
////////////////////////////////////////////////////////////////////
//     Function: MovingPartBase::get_max_bound
//       Access: Published
//  Description: Returns the number of channels that might be bound to
//               this PartGroup.  This might not be the actual number
//               of channels, since there might be holes in the list;
//               it is one more than the index number of the highest
//               bound channel.  Thus, it is called get_max_bound()
//               instead of get_num_bound().
////////////////////////////////////////////////////////////////////
53
inline int MovingPartBase::get_max_bound(void) const;

408 9 get_bound 0 4 460 25 MovingPartBase::get_bound 0 1 192 690
////////////////////////////////////////////////////////////////////
//     Function: MovingPartBase::get_bound
//       Access: Published
//  Description: Returns the nth bound channel on this PartGroup.  n
//               can be determined by iterating from 0 to one less
//               than get_max_bound(); or n might be
//               AnimControl::get_channel_index().
//
//               This will return NULL if there is no channel bound on
//               the indicated index.  It is an error to call this if
//               n is less than zero or greater than or equal to
//               get_max_bound().
////////////////////////////////////////////////////////////////////
63
inline AnimChannelBase *MovingPartBase::get_bound(int n) const;

409 12 output_value 0 6 460 28 MovingPartBase::output_value 0 1 193 0
66
virtual void MovingPartBase::output_value(ostream &out) const = 0;

410 14 get_class_type 0 4 460 30 MovingPartBase::get_class_type 0 1 194 0
55
static TypeHandle MovingPartBase::get_class_type(void);

411 15 ~MovingPartBase 0 4 460 31 MovingPartBase::~MovingPartBase 0 0 0
38
MovingPartBase::~MovingPartBase(void);

412 14 get_class_type 0 4 462 48 MovingPart< ACMatrixSwitchType >::get_class_type 0 1 196 0
73
static TypeHandle MovingPart< ACMatrixSwitchType >::get_class_type(void);

413 9 get_value 0 4 462 43 MovingPart< ACMatrixSwitchType >::get_value 0 1 197 0
72
inline LMatrix4 MovingPart< ACMatrixSwitchType >::get_value(void) const;

414 17 get_default_value 0 4 462 51 MovingPart< ACMatrixSwitchType >::get_default_value 0 1 198 0
80
inline LMatrix4 MovingPart< ACMatrixSwitchType >::get_default_value(void) const;

415 11 ~MovingPart 0 4 462 45 MovingPart< ACMatrixSwitchType >::~MovingPart 0 0 0
52
MovingPart< ACMatrixSwitchType >::~MovingPart(void);

416 14 get_class_type 0 4 461 32 MovingPartMatrix::get_class_type 0 1 195 0
57
static TypeHandle MovingPartMatrix::get_class_type(void);

417 14 get_class_type 0 4 464 48 MovingPart< ACScalarSwitchType >::get_class_type 0 1 200 0
73
static TypeHandle MovingPart< ACScalarSwitchType >::get_class_type(void);

418 9 get_value 0 4 464 43 MovingPart< ACScalarSwitchType >::get_value 0 1 201 0
75
inline PN_stdfloat MovingPart< ACScalarSwitchType >::get_value(void) const;

419 17 get_default_value 0 4 464 51 MovingPart< ACScalarSwitchType >::get_default_value 0 1 202 0
83
inline PN_stdfloat MovingPart< ACScalarSwitchType >::get_default_value(void) const;

420 11 ~MovingPart 0 4 464 45 MovingPart< ACScalarSwitchType >::~MovingPart 0 0 0
52
MovingPart< ACScalarSwitchType >::~MovingPart(void);

421 14 get_class_type 0 4 463 32 MovingPartScalar::get_class_type 0 1 199 0
57
static TypeHandle MovingPartScalar::get_class_type(void);

422 16 PartBundleHandle 0 4 465 34 PartBundleHandle::PartBundleHandle 0 1 203 229
////////////////////////////////////////////////////////////////////
//     Function: PartBundleHandle::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
62
inline PartBundleHandle::PartBundleHandle(PartBundle *bundle);

423 10 get_bundle 0 4 465 28 PartBundleHandle::get_bundle 0 1 204 302
////////////////////////////////////////////////////////////////////
//     Function: PartBundleHandle::get_bundle
//       Access: Published
//  Description: Returns the actual PartBundle embedded within the
//               handle.
////////////////////////////////////////////////////////////////////
54
inline PartBundle *PartBundleHandle::get_bundle(void);

424 10 set_bundle 0 4 465 28 PartBundleHandle::set_bundle 0 1 205 302
////////////////////////////////////////////////////////////////////
//     Function: PartBundleHandle::set_bundle
//       Access: Published
//  Description: Changes the actual PartBundle embedded within the
//               handle.
////////////////////////////////////////////////////////////////////
61
inline void PartBundleHandle::set_bundle(PartBundle *bundle);

425 14 PartBundleNode 0 4 467 30 PartBundleNode::PartBundleNode 0 1 206 1141
////////////////////////////////////////////////////////////////////
//     Function: PartBundleNode::Constructor
//       Access: Public
//  Description: The PartBundle and its node should be constructed
//               together.  Generally, the derived classes of
//               PartBundleNode will automatically create a PartBundle
//               of the appropriate type, and pass it up to this
//               constructor.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PartBundleNode::Default Constructor
//       Access: Protected
//  Description: For internal use only.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PartBundleNode::Copy Constructor
//       Access: Protected
//  Description: Use make_copy() or copy_subgraph() to copy one of
//               these.  
//
//               This constructor does not copy the bundle pointers.
////////////////////////////////////////////////////////////////////
78
inline PartBundleNode::PartBundleNode(string const &name, PartBundle *bundle);

426 15 get_num_bundles 0 4 467 31 PartBundleNode::get_num_bundles 0 1 207 227
////////////////////////////////////////////////////////////////////
//     Function: PartBundleNode::get_num_bundles
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
55
inline int PartBundleNode::get_num_bundles(void) const;

427 10 get_bundle 0 4 467 26 PartBundleNode::get_bundle 0 1 208 222
////////////////////////////////////////////////////////////////////
//     Function: PartBundleNode::get_bundle
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
59
inline PartBundle *PartBundleNode::get_bundle(int n) const;

428 17 get_bundle_handle 0 4 467 33 PartBundleNode::get_bundle_handle 0 1 209 469
////////////////////////////////////////////////////////////////////
//     Function: PartBundleNode::get_bundle_handle
//       Access: Public
//  Description: Returns the PartBundleHandle that wraps around the
//               actual nth PartBundle.  While the PartBundle pointer
//               might later change due to a future flatten operation,
//               the PartBundleHandle will not.
////////////////////////////////////////////////////////////////////
72
inline PartBundleHandle *PartBundleNode::get_bundle_handle(int n) const;

429 14 get_class_type 0 4 467 30 PartBundleNode::get_class_type 0 1 210 0
55
static TypeHandle PartBundleNode::get_class_type(void);

211
1 0 0 7 8 468 217 0 390 ////////////////////////////////////////////////////////////////////
//     Function: AnimGroup::Constructor
//       Access: Published
//  Description: Creates the AnimGroup, and adds it to the indicated
//               parent.  The only way to delete it subsequently is to
//               delete the entire hierarchy.
//////////////////////////////////////////////////////////////////// 2 6 parent 1 468  4 name 1 469  
2 0 0 6 10 472 0 0 274 ////////////////////////////////////////////////////////////////////
//     Function: AnimGroup::get_num_children
//       Access: Published
//  Description: Returns the number of child nodes of the group.
//////////////////////////////////////////////////////////////////// 1 4 this 3 470  
3 0 0 7 11 468 217 0 255 ////////////////////////////////////////////////////////////////////
//     Function: AnimGroup::get_child
//       Access: Published
//  Description: Returns the nth child of the group.
//////////////////////////////////////////////////////////////////// 2 4 this 3 470  1 n 1 472  
4 0 0 7 12 468 217 0 524 ////////////////////////////////////////////////////////////////////
//     Function: AnimGroup::get_child_named
//       Access: Published
//  Description: Returns the first child found with the indicated
//               name, or NULL if no such child exists.  This method
//               searches only the children of this particular
//               AnimGroup; it does not recursively search the entire
//               graph.  See also find_child().
//////////////////////////////////////////////////////////////////// 2 4 this 3 470  4 name 1 469  
5 0 0 7 13 468 217 0 465 ////////////////////////////////////////////////////////////////////
//     Function: AnimGroup::find_child
//       Access: Published
//  Description: Returns the first descendant found with the indicated
//               name, or NULL if no such descendant exists.  This
//               method searches the entire graph beginning at this
//               AnimGroup; see also get_child_named().
//////////////////////////////////////////////////////////////////// 2 4 this 3 470  4 name 1 469  
6 0 0 4 14 473 0 0 537 ////////////////////////////////////////////////////////////////////
//     Function: AnimGroup::sort_descendants
//       Access: Published
//  Description: Sorts the children nodes at each level of the
//               hierarchy into alphabetical order.  This should be
//               done after creating the hierarchy, to guarantee that
//               the correct names will match up together when the
//               AnimBundle is later bound to a PlayerRoot.
//////////////////////////////////////////////////////////////////// 1 4 this 3 468  
7 0 0 4 15 473 0 0 269 ////////////////////////////////////////////////////////////////////
//     Function: AnimGroup::output
//       Access: Published, Virtual
//  Description: Writes a one-line description of the group.
//////////////////////////////////////////////////////////////////// 2 4 this 3 470  3 out 1 474  
8 0 0 4 16 473 0 0 309 ////////////////////////////////////////////////////////////////////
//     Function: AnimGroup::write
//       Access: Published, Virtual
//  Description: Writes a brief description of the group and all of
//               its descendants.
//////////////////////////////////////////////////////////////////// 3 4 this 3 470  3 out 1 474  12 indent_level 1 472  
9 0 0 7 17 477 0 0 0 0 
10 0 0 7 3 478 0 0 0 1 4 this 3 468  
11 0 0 7 4 468 217 0 0 1 4 this 3 478  
12 0 0 6 6 479 0 0 0 1 4 this 3 468  
13 0 0 7 7 468 217 0 0 1 4 this 3 479  
14 0 0 7 19 482 231 0 219 ////////////////////////////////////////////////////////////////////
//     Function: AnimBundle::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 name 1 469  3 fps 1 480  10 num_frames 1 472  
15 0 0 7 20 482 231 0 511 ////////////////////////////////////////////////////////////////////
//     Function: AnimBundle::copy_bundle
//       Access: Published
//  Description: Returns a full copy of the bundle and its entire tree
//               of nested AnimGroups.  However, the actual data
//               stored in the leaves--that is, animation tables, such
//               as those stored in an AnimChannelMatrixXfmTable--will
//               be shared.
//////////////////////////////////////////////////////////////////// 1 4 this 3 483  
16 0 0 6 21 485 0 0 600 ////////////////////////////////////////////////////////////////////
//     Function: AnimBundle::get_base_frame_rate
//       Access: Public
//  Description: Returns the ideal number of frames per second of the
//               animation, when it is running at normal speed.  This
//               may not be the same as the actual playing frame rate,
//               as it might have been adjusted through
//               set_play_rate() on the AnimControl object.  See
//               AnimControl::get_effective_frame_rate().
//////////////////////////////////////////////////////////////////// 1 4 this 3 483  
17 0 0 6 22 472 0 0 335 ////////////////////////////////////////////////////////////////////
//     Function: AnimBundle::get_num_frames
//       Access: Public
//  Description: Returns the number of frames of animation, or 0 if
//               the animation has no fixed number of frames.
//////////////////////////////////////////////////////////////////// 1 4 this 3 483  
18 0 0 7 23 477 0 0 0 0 
19 0 0 7 27 486 236 0 501 ////////////////////////////////////////////////////////////////////
//     Function: AnimBundleNode::Constructor
//       Access: Public
//  Description: The AnimBundle and its node should be constructed
//               together.  Generally, the derived classes of
//               AnimBundleNode will automatically create a AnimBundle
//               of the appropriate type, and pass it up to this
//               constructor.
//////////////////////////////////////////////////////////////////// 2 4 name 1 469  6 bundle 1 482  
20 0 0 7 28 482 231 0 222 ////////////////////////////////////////////////////////////////////
//     Function: AnimBundleNode::get_bundle
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 487  
21 0 0 7 29 482 231 0 480 ////////////////////////////////////////////////////////////////////
//     Function: AnimBundleNode::find_anim_bundle
//       Access: Published, Static
//  Description: Recursively walks the scene graph beginning at the
//               indicated node (which need not be an AnimBundleNode),
//               and returns the first AnimBundle found.  Returns NULL
//               if no AnimBundle can be found.
//////////////////////////////////////////////////////////////////// 1 4 root 1 489  
22 0 0 7 30 477 0 0 0 0 
23 0 0 7 38 490 242 0 390 ////////////////////////////////////////////////////////////////////
//     Function: PartGroup::Constructor
//       Access: Published
//  Description: Creates the PartGroup, and adds it to the indicated
//               parent.  The only way to delete it subsequently is to
//               delete the entire hierarchy.
//////////////////////////////////////////////////////////////////// 2 6 parent 1 490  4 name 1 469  
24 0 0 6 40 493 0 0 414 ////////////////////////////////////////////////////////////////////
//     Function: PartGroup::is_character_joint
//       Access: Published, Virtual
//  Description: Returns true if this part is a CharacterJoint, false
//               otherwise.  This is a tiny optimization over
//               is_of_type(CharacterType::get_class_type()).
//////////////////////////////////////////////////////////////////// 1 4 this 3 491  
25 0 0 7 41 490 242 0 341 ////////////////////////////////////////////////////////////////////
//     Function: PartGroup::make_copy
//       Access: Published, Virtual
//  Description: Allocates and returns a new copy of the node.
//               Children are not copied, but see copy_subgraph().
//////////////////////////////////////////////////////////////////// 1 4 this 3 491  
26 0 0 7 42 490 242 0 314 ////////////////////////////////////////////////////////////////////
//     Function: PartGroup::copy_subgraph
//       Access: Published
//  Description: Allocates and returns a new copy of this node and of
//               all of its children.
//////////////////////////////////////////////////////////////////// 1 4 this 3 491  
27 0 0 6 43 472 0 0 274 ////////////////////////////////////////////////////////////////////
//     Function: PartGroup::get_num_children
//       Access: Published
//  Description: Returns the number of child nodes of the group.
//////////////////////////////////////////////////////////////////// 1 4 this 3 491  
28 0 0 7 44 490 242 0 255 ////////////////////////////////////////////////////////////////////
//     Function: PartGroup::get_child
//       Access: Published
//  Description: Returns the nth child of the group.
//////////////////////////////////////////////////////////////////// 2 4 this 3 491  1 n 1 472  
29 0 0 7 45 490 242 0 524 ////////////////////////////////////////////////////////////////////
//     Function: PartGroup::get_child_named
//       Access: Published
//  Description: Returns the first child found with the indicated
//               name, or NULL if no such child exists.  This method
//               searches only the children of this particular
//               PartGroup; it does not recursively search the entire
//               graph.  See also find_child().
//////////////////////////////////////////////////////////////////// 2 4 this 3 491  4 name 1 469  
30 0 0 7 46 490 242 0 465 ////////////////////////////////////////////////////////////////////
//     Function: PartGroup::find_child
//       Access: Published
//  Description: Returns the first descendant found with the indicated
//               name, or NULL if no such descendant exists.  This
//               method searches the entire graph beginning at this
//               PartGroup; see also get_child_named().
//////////////////////////////////////////////////////////////////// 2 4 this 3 491  4 name 1 469  
31 0 0 4 47 473 0 0 537 ////////////////////////////////////////////////////////////////////
//     Function: PartGroup::sort_descendants
//       Access: Published
//  Description: Sorts the children nodes at each level of the
//               hierarchy into alphabetical order.  This should be
//               done after creating the hierarchy, to guarantee that
//               the correct names will match up together when the
//               AnimBundle is later bound to a PlayerRoot.
//////////////////////////////////////////////////////////////////// 1 4 this 3 490  
32 0 0 6 48 493 0 0 572 ////////////////////////////////////////////////////////////////////
//     Function: PartGroup::apply_freeze
//       Access: Published
//  Description: Freezes this particular joint so that it will always
//               hold the specified transform.  Returns true if this
//               is a joint that can be so frozen, false otherwise.
//
//               This is normally only called internally by
//               PartBundle::freeze_joint(), but you may also call it
//               directly.
//////////////////////////////////////////////////////////////////// 2 4 this 3 490  9 transform 1 494  
33 0 0 6 49 493 0 0 588 ////////////////////////////////////////////////////////////////////
//     Function: PartGroup::apply_freeze_matrix
//       Access: Published, Virtual
//  Description: Freezes this particular joint so that it will always
//               hold the specified transform.  Returns true if this
//               is a joint that can be so frozen, false otherwise.
//
//               This is normally only called internally by
//               PartBundle::freeze_joint(), but you may also call it
//               directly.
//////////////////////////////////////////////////////////////////// 4 4 this 3 490  3 pos 1 497  3 hpr 1 497  5 scale 1 497  
34 0 0 6 50 493 0 0 588 ////////////////////////////////////////////////////////////////////
//     Function: PartGroup::apply_freeze_scalar
//       Access: Published, Virtual
//  Description: Freezes this particular joint so that it will always
//               hold the specified transform.  Returns true if this
//               is a joint that can be so frozen, false otherwise.
//
//               This is normally only called internally by
//               PartBundle::freeze_joint(), but you may also call it
//               directly.
//////////////////////////////////////////////////////////////////// 2 4 this 3 490  5 value 1 480  
35 0 0 6 51 493 0 0 622 ////////////////////////////////////////////////////////////////////
//     Function: PartGroup::apply_control
//       Access: Published, Virtual
//  Description: Specifies a node to influence this particular joint
//               so that it will always hold the node's transform.
//               Returns true if this is a joint that can be so
//               controlled, false otherwise.
//
//               This is normally only called internally by
//               PartBundle::control_joint(), but you may also call it
//               directly.
//////////////////////////////////////////////////////////////////// 2 4 this 3 490  4 node 1 489  
36 0 0 6 52 493 0 0 567 ////////////////////////////////////////////////////////////////////
//     Function: PartGroup::clear_forced_channel
//       Access: Published, Virtual
//  Description: Undoes the effect of a previous call to
//               apply_freeze() or apply_control().  Returns true if
//               the joint was modified, false otherwise.
//
//               This is normally only called internally by
//               PartBundle::release_joint(), but you may also call it
//               directly.
//////////////////////////////////////////////////////////////////// 1 4 this 3 490  
37 0 0 7 53 501 282 0 453 ////////////////////////////////////////////////////////////////////
//     Function: PartGroup::get_forced_channel
//       Access: Published, Virtual
//  Description: Returns the AnimChannelBase that has been forced to
//               this joint by a previous call to apply_freeze() or
//               apply_control(), or NULL if no such channel has been
//               applied.
//////////////////////////////////////////////////////////////////// 1 4 this 3 491  
38 0 0 4 54 473 0 0 309 ////////////////////////////////////////////////////////////////////
//     Function: PartGroup::write
//       Access: Published, Virtual
//  Description: Writes a brief description of the group and all of
//               its descendants.
//////////////////////////////////////////////////////////////////// 3 4 this 3 491  3 out 1 474  12 indent_level 1 472  
39 0 0 4 55 473 0 0 356 ////////////////////////////////////////////////////////////////////
//     Function: PartGroup::write_with_value
//       Access: Published, Virtual
//  Description: Writes a brief description of the group, showing its
//               current value, and that of all of its descendants.
//////////////////////////////////////////////////////////////////// 3 4 this 3 491  3 out 1 474  12 indent_level 1 472  
40 0 0 7 56 477 0 0 0 0 
41 0 0 7 33 478 0 0 0 1 4 this 3 490  
42 0 0 7 34 490 242 0 0 1 4 this 3 478  
43 0 0 6 35 479 0 0 0 1 4 this 3 490  
44 0 0 7 36 490 242 0 0 1 4 this 3 479  
45 0 0 6 67 493 0 0 574 ////////////////////////////////////////////////////////////////////
//     Function: AnimControl::is_pending
//       Access: Published
//  Description: Returns true if the AnimControl is being bound
//               asynchronously, and has not yet finished.  If this is
//               true, the AnimControl's interface is still available
//               and will be perfectly useful (though get_anim() might
//               return NULL), but nothing visible will happen
//               immediately.
//////////////////////////////////////////////////////////////////// 1 4 this 3 502  
46 0 0 4 68 473 0 0 330 ////////////////////////////////////////////////////////////////////
//     Function: AnimControl::wait_pending
//       Access: Published
//  Description: Blocks the current thread until the AnimControl has
//               finished loading and is fully bound.
//////////////////////////////////////////////////////////////////// 1 4 this 3 504  
47 0 0 6 69 493 0 0 395 ////////////////////////////////////////////////////////////////////
//     Function: AnimControl::has_anim
//       Access: Published
//  Description: Returns true if the AnimControl was successfully
//               loaded, or false if there was a problem.  This may
//               return false while is_pending() is true.
//////////////////////////////////////////////////////////////////// 1 4 this 3 502  
48 0 0 4 70 473 0 0 474 ////////////////////////////////////////////////////////////////////
//     Function: AnimControl::set_pending_done_event
//       Access: Published
//  Description: Specifies an event name that will be thrown when the
//               AnimControl is finished binding asynchronously.  If
//               the AnimControl has already finished binding, the
//               event will be thrown immediately.
//////////////////////////////////////////////////////////////////// 2 4 this 3 504  10 done_event 1 469  
49 0 0 6 71 469 0 0 351 ////////////////////////////////////////////////////////////////////
//     Function: AnimControl::get_pending_done_event
//       Access: Published
//  Description: Returns the event name that will be thrown when the
//               AnimControl is finished binding asynchronously.
//////////////////////////////////////////////////////////////////// 1 4 this 3 502  
50 0 0 7 72 505 406 0 292 ////////////////////////////////////////////////////////////////////
//     Function: AnimControl::get_part
//       Access: Published
//  Description: Returns the PartBundle bound in with this
//               AnimControl.
//////////////////////////////////////////////////////////////////// 1 4 this 3 502  
51 0 0 7 73 482 231 0 292 ////////////////////////////////////////////////////////////////////
//     Function: AnimControl::get_anim
//       Access: Published
//  Description: Returns the AnimBundle bound in with this
//               AnimControl.
//////////////////////////////////////////////////////////////////// 1 4 this 3 502  
52 0 0 6 74 472 0 0 665 ////////////////////////////////////////////////////////////////////
//     Function: AnimControl::get_channel_index
//       Access: Published
//  Description: Returns the particular channel index associated with
//               this AnimControl.  This channel index is the slot on
//               which each AnimGroup is bound to its associated
//               PartGroup, for each joint in the animation.
//
//               It will be true that
//               get_part()->find_child("n")->get_bound(get_channel_index())
//               == get_anim()->find_child("n"), for each joint "n".
//////////////////////////////////////////////////////////////////// 1 4 this 3 502  
53 0 0 6 75 506 0 0 677 ////////////////////////////////////////////////////////////////////
//     Function: AnimControl::get_bound_joints
//       Access: Published
//  Description: Returns the subset of joints controlled by this
//               AnimControl.  Most of the time, this will be
//               BitArray::all_on(), for a normal full-body animation.
//               For a subset animation, however, this will be just a
//               subset of those bits, corresponding to the set of
//               joints and sliders actually bound (as enumerated by
//               bind_hierarchy() in depth-first LIFO order).
//////////////////////////////////////////////////////////////////// 1 4 this 3 502  
54 0 0 4 76 473 0 0 883 ////////////////////////////////////////////////////////////////////
//     Function: AnimControl::set_anim_model
//       Access: Published
//  Description: Associates the indicated PandaNode with the
//               AnimControl.  By convention, this node represents the
//               root node of the model file that corresponds to this
//               AnimControl's animation file, though nothing in this
//               code makes this assumption or indeed does anything
//               with this node.
//
//               The purpose of this is simply to allow the
//               AnimControl to keep a reference count on the
//               ModelRoot node that generated it, so that the model
//               will not disappear from the model pool until it is no
//               longer referenced.
//////////////////////////////////////////////////////////////////// 2 4 this 3 504  5 model 1 489  
55 0 0 7 77 489 0 0 314 ////////////////////////////////////////////////////////////////////
//     Function: AnimControl::get_anim_model
//       Access: Published
//  Description: Retrieves the pointer set via set_anim_model().  See
//               set_anim_model().
//////////////////////////////////////////////////////////////////// 1 4 this 3 502  
56 0 0 4 78 473 0 0 218 ////////////////////////////////////////////////////////////////////
//     Function: AnimControl::output
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 502  3 out 1 474  
57 0 0 7 79 477 0 0 0 0 
58 0 0 7 59 509 0 0 0 1 4 this 3 504  
59 0 0 7 60 504 266 0 0 1 4 this 3 509  
60 0 0 6 62 510 0 0 0 1 4 this 3 504  
61 0 0 7 63 504 266 0 0 1 4 this 3 510  
62 0 0 6 64 479 0 0 0 1 4 this 3 504  
63 0 0 7 65 504 266 0 0 1 4 this 3 479  
64 0 0 7 81 477 0 0 0 1 4 this 3 511  
65 0 0 7 82 477 0 0 0 0 
66 0 0 4 87 473 0 0 0 3 4 this 3 513  5 frame 1 472  5 value 1 514  
67 0 0 4 88 473 0 0 72 // These transform-component methods only have meaning for matrix types. 3 4 this 3 513  5 frame 1 472  5 value 1 514  
68 0 0 4 89 473 0 0 0 3 4 this 3 513  5 frame 1 472  5 scale 1 515  
69 0 0 4 90 473 0 0 0 3 4 this 3 513  5 frame 1 472  3 hpr 1 515  
70 0 0 4 91 473 0 0 0 3 4 this 3 513  5 frame 1 472  4 quat 1 516  
71 0 0 4 92 473 0 0 0 3 4 this 3 513  5 frame 1 472  3 pos 1 515  
72 0 0 4 93 473 0 0 0 3 4 this 3 513  5 frame 1 472  5 shear 1 515  
73 0 0 7 94 477 0 0 0 1 4 this 3 519  
74 0 0 7 95 477 0 0 0 0 
75 0 0 4 100 473 0 0 0 3 4 this 3 521  5 frame 1 472  5 scale 1 515  
76 0 0 4 101 473 0 0 0 3 4 this 3 521  5 frame 1 472  3 hpr 1 515  
77 0 0 4 102 473 0 0 0 3 4 this 3 521  5 frame 1 472  4 quat 1 516  
78 0 0 4 103 473 0 0 0 3 4 this 3 521  5 frame 1 472  3 pos 1 515  
79 0 0 4 104 473 0 0 0 3 4 this 3 521  5 frame 1 472  5 shear 1 515  
80 0 0 7 105 477 0 0 0 1 4 this 3 522  
81 0 0 7 106 477 0 0 0 0 
82 0 0 4 109 473 0 0 268 ////////////////////////////////////////////////////////////////////
//     Function: AnimChannelMatrixDynamic::set_value
//       Access: Published
//  Description: Explicitly sets the matrix value.
//////////////////////////////////////////////////////////////////// 2 4 this 3 524  5 value 1 525  
83 0 0 4 109 473 0 0 345 ////////////////////////////////////////////////////////////////////
//     Function: AnimChannelMatrixDynamic::set_value
//       Access: Published
//  Description: Explicitly sets the matrix value, using the indicated
//               TransformState object as a convenience.
//////////////////////////////////////////////////////////////////// 2 4 this 3 524  5 value 1 494  
84 0 0 4 110 473 0 0 384 ////////////////////////////////////////////////////////////////////
//     Function: AnimChannelMatrixDynamic::set_value_node
//       Access: Published
//  Description: Specifies a node whose transform will be queried each
//               frame to implicitly specify the transform of this
//               joint.
//////////////////////////////////////////////////////////////////// 2 4 this 3 524  4 node 1 489  
85 0 0 7 111 494 0 0 341 ////////////////////////////////////////////////////////////////////
//     Function: AnimChannelMatrixDynamic::get_value_transform
//       Access: Published
//  Description: Returns the explicit TransformState value that was
//               set via set_value(), if any.
//////////////////////////////////////////////////////////////////// 1 4 this 3 527  
86 0 0 7 112 489 0 0 316 ////////////////////////////////////////////////////////////////////
//     Function: AnimChannelMatrixDynamic::get_value_node
//       Access: Published
//  Description: Returns the node that was set via set_value_node(),
//               if any.
//////////////////////////////////////////////////////////////////// 1 4 this 3 527  
87 0 0 7 113 477 0 0 0 0 
88 0 0 7 116 529 282 0 234 ////////////////////////////////////////////////////////////////////
//     Function: AnimChannelMatrixXfmTable::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 6 parent 1 468  4 name 1 469  
89 0 0 6 117 493 0 0 329 ////////////////////////////////////////////////////////////////////
//     Function: AnimChannelMatrixXfmTable::is_valid_id
//       Access: Public, Static
//  Description: Returns true if the given letter is one of the nine
//               valid table id's.
//////////////////////////////////////////////////////////////////// 1 8 table_id 1 530  
90 0 0 4 118 473 0 0 536 ////////////////////////////////////////////////////////////////////
//     Function: AnimChannelMatrixXfmTable::set_table
//       Access: Public
//  Description: Assigns the indicated table.  table_id is one of 'i',
//               'j', 'k', for scale, 'a', 'b', 'c' for shear, 'h',
//               'p', 'r', for rotation, and 'x', 'y', 'z', for
//               translation.  The new table must have either zero,
//               one, or get_num_frames() frames.
//////////////////////////////////////////////////////////////////// 3 4 this 3 529  8 table_id 1 530  5 table 1 531  
91 0 0 7 119 538 0 0 339 ////////////////////////////////////////////////////////////////////
//     Function: AnimChannelMatrixXfmTable::get_table
//       Access: Public
//  Description: Returns a pointer to the indicated subtable's data,
//               if it exists, or NULL if it does not.
//////////////////////////////////////////////////////////////////// 2 4 this 3 536  8 table_id 1 530  
92 0 0 4 120 473 0 0 336 ////////////////////////////////////////////////////////////////////
//     Function: AnimChannelMatrixXfmTable::clear_all_tables
//       Access: Published
//  Description: Removes all the tables from the channel, and resets
//               it to its initial state.
//////////////////////////////////////////////////////////////////// 1 4 this 3 529  
93 0 0 6 121 493 0 0 310 ////////////////////////////////////////////////////////////////////
//     Function: AnimChannelMatrixXfmTable::has_table
//       Access: Published
//  Description: Returns true if the indicated subtable has been
//               assigned.
//////////////////////////////////////////////////////////////////// 2 4 this 3 536  8 table_id 1 530  
94 0 0 4 122 473 0 0 286 ////////////////////////////////////////////////////////////////////
//     Function: AnimChannelMatrixXfmTable::clear_table
//       Access: Published
//  Description: Removes the indicated table from the definition.
//////////////////////////////////////////////////////////////////// 2 4 this 3 529  8 table_id 1 530  
95 0 0 7 123 477 0 0 0 0 
96 0 0 4 125 473 0 0 261 ////////////////////////////////////////////////////////////////////
//     Function: AnimChannelScalarDynamic::set_value
//       Access: Published
//  Description: Explicitly sets the value.
//////////////////////////////////////////////////////////////////// 2 4 this 3 539  5 value 1 480  
97 0 0 4 126 473 0 0 384 ////////////////////////////////////////////////////////////////////
//     Function: AnimChannelScalarDynamic::set_value_node
//       Access: Published
//  Description: Specifies a node whose transform will be queried each
//               frame to implicitly specify the transform of this
//               joint.
//////////////////////////////////////////////////////////////////// 2 4 this 3 539  4 node 1 489  
98 0 0 7 127 477 0 0 0 0 
99 0 0 4 130 473 0 0 253 ////////////////////////////////////////////////////////////////////
//     Function: AnimChannelScalarTable::set_table
//       Access: Public
//  Description: Assigns the data table.
//////////////////////////////////////////////////////////////////// 2 4 this 3 540  5 table 1 531  
100 0 0 7 131 538 0 0 323 ////////////////////////////////////////////////////////////////////
//     Function: AnimChannelScalarTable::get_table
//       Access: Public
//  Description: Returns a pointer to the table's data,
//               if it exists, or NULL if it does not.
//////////////////////////////////////////////////////////////////// 1 4 this 3 541  
101 0 0 6 132 493 0 0 282 ////////////////////////////////////////////////////////////////////
//     Function: AnimChannelScalarTable::has_table
//       Access: Published
//  Description: Returns true if the data table has been assigned.
//////////////////////////////////////////////////////////////////// 1 4 this 3 541  
102 0 0 4 133 473 0 0 258 ////////////////////////////////////////////////////////////////////
//     Function: AnimChannelScalarTable::clear_table
//       Access: Published
//  Description: Empties the data table.
//////////////////////////////////////////////////////////////////// 1 4 this 3 540  
103 0 0 7 134 477 0 0 0 0 
104 0 0 7 137 543 326 0 354 ////////////////////////////////////////////////////////////////////
//     Function: AnimControlCollection::Constructor
//       Access: Published
//  Description: Returns the AnimControl associated with the given
//               name, or NULL if no such control has been associated.
//////////////////////////////////////////////////////////////////// 0 
105 0 0 4 139 473 0 0 529 ////////////////////////////////////////////////////////////////////
//     Function: AnimControlCollection::store_anim
//       Access: Published
//  Description: Associates the given AnimControl with this collection
//               under the given name.  The AnimControl will remain
//               associated until a new AnimControl is associated with
//               the same name later, or until unbind_anim() is called
//               with this name.
//////////////////////////////////////////////////////////////////// 3 4 this 3 543  7 control 1 504  4 name 1 469  
106 0 0 7 140 504 266 0 352 ////////////////////////////////////////////////////////////////////
//     Function: AnimControlCollection::find_anim
//       Access: Published
//  Description: Returns the AnimControl associated with the given
//               name, or NULL if no such control has been associated.
//////////////////////////////////////////////////////////////////// 2 4 this 3 544  4 name 1 469  
107 0 0 6 141 493 0 0 452 ////////////////////////////////////////////////////////////////////
//     Function: AnimControlCollection::unbind_anim
//       Access: Published
//  Description: Removes the AnimControl associated with the given
//               name, if any.  Returns true if an AnimControl was
//               removed, false if there was no AnimControl with the
//               indicated name.
//////////////////////////////////////////////////////////////////// 2 4 this 3 543  4 name 1 469  
108 0 0 6 142 472 0 0 320 ////////////////////////////////////////////////////////////////////
//     Function: AnimControlCollection::get_num_anims
//       Access: Published
//  Description: Returns the number of AnimControls associated with
//               this collection.
//////////////////////////////////////////////////////////////////// 1 4 this 3 544  
109 0 0 7 143 504 266 0 308 ////////////////////////////////////////////////////////////////////
//     Function: AnimControlCollection::get_anim
//       Access: Published
//  Description: Returns the nth AnimControl associated with
//               this collection.
//////////////////////////////////////////////////////////////////// 2 4 this 3 544  1 n 1 472  
110 0 0 6 144 469 0 0 325 ////////////////////////////////////////////////////////////////////
//     Function: AnimControlCollection::get_anim_name
//       Access: Published
//  Description: Returns the name of the nth AnimControl associated
//               with this collection.
//////////////////////////////////////////////////////////////////// 2 4 this 3 544  1 n 1 472  
111 0 0 4 145 473 0 0 279 ////////////////////////////////////////////////////////////////////
//     Function: AnimControlCollection::clear_anims
//       Access: Published
//  Description: Disassociates all anims from this collection.
//////////////////////////////////////////////////////////////////// 1 4 this 3 543  
112 0 0 6 146 493 0 0 259 ////////////////////////////////////////////////////////////////////
//     Function: AnimControlCollection::play
//       Access: Public
//  Description: Starts the named animation playing.
//////////////////////////////////////////////////////////////////// 2 4 this 3 543  9 anim_name 1 469  
113 0 0 6 146 493 0 0 259 ////////////////////////////////////////////////////////////////////
//     Function: AnimControlCollection::play
//       Access: Public
//  Description: Starts the named animation playing.
//////////////////////////////////////////////////////////////////// 4 4 this 3 543  9 anim_name 1 469  4 from 1 472  2 to 1 472  
114 0 0 6 147 493 0 0 259 ////////////////////////////////////////////////////////////////////
//     Function: AnimControlCollection::loop
//       Access: Public
//  Description: Starts the named animation looping.
//////////////////////////////////////////////////////////////////// 3 4 this 3 543  9 anim_name 1 469  7 restart 1 493  
115 0 0 6 147 493 0 0 259 ////////////////////////////////////////////////////////////////////
//     Function: AnimControlCollection::loop
//       Access: Public
//  Description: Starts the named animation looping.
//////////////////////////////////////////////////////////////////// 5 4 this 3 543  9 anim_name 1 469  7 restart 1 493  4 from 1 472  2 to 1 472  
116 0 0 6 148 493 0 0 250 ////////////////////////////////////////////////////////////////////
//     Function: AnimControlCollection::stop
//       Access: Public
//  Description: Stops the named animation.
//////////////////////////////////////////////////////////////////// 2 4 this 3 543  9 anim_name 1 469  
117 0 0 6 149 493 0 0 274 ////////////////////////////////////////////////////////////////////
//     Function: AnimControlCollection::pose
//       Access: Public
//  Description: Sets to a particular frame in the named animation.
//////////////////////////////////////////////////////////////////// 3 4 this 3 543  9 anim_name 1 469  5 frame 1 472  
118 0 0 4 150 473 0 0 261 ////////////////////////////////////////////////////////////////////
//     Function: AnimControlCollection::play_all
//       Access: Published
//  Description: Starts all animations playing.
//////////////////////////////////////////////////////////////////// 1 4 this 3 543  
119 0 0 4 150 473 0 0 261 ////////////////////////////////////////////////////////////////////
//     Function: AnimControlCollection::play_all
//       Access: Published
//  Description: Starts all animations playing.
//////////////////////////////////////////////////////////////////// 3 4 this 3 543  4 from 1 472  2 to 1 472  
120 0 0 4 151 473 0 0 261 ////////////////////////////////////////////////////////////////////
//     Function: AnimControlCollection::loop_all
//       Access: Published
//  Description: Starts all animations looping.
//////////////////////////////////////////////////////////////////// 2 4 this 3 543  7 restart 1 493  
121 0 0 4 151 473 0 0 261 ////////////////////////////////////////////////////////////////////
//     Function: AnimControlCollection::loop_all
//       Access: Published
//  Description: Starts all animations looping.
//////////////////////////////////////////////////////////////////// 4 4 this 3 543  7 restart 1 493  4 from 1 472  2 to 1 472  
122 0 0 6 152 493 0 0 378 ////////////////////////////////////////////////////////////////////
//     Function: AnimControlCollection::stop_all
//       Access: Published
//  Description: Stops all currently playing animations.  Returns true
//               if any animations were stopped, false if none were
//               playing.
//////////////////////////////////////////////////////////////////// 1 4 this 3 543  
123 0 0 4 153 473 0 0 274 ////////////////////////////////////////////////////////////////////
//     Function: AnimControlCollection::pose_all
//       Access: Published
//  Description: Sets all animations to the indicated frame.
//////////////////////////////////////////////////////////////////// 2 4 this 3 543  5 frame 1 472  
124 0 0 6 154 472 0 0 302 ////////////////////////////////////////////////////////////////////
//     Function: AnimControlCollection::get_frame
//       Access: Public
//  Description: Returns the current frame in the last-started
//               animation.
//////////////////////////////////////////////////////////////////// 1 4 this 3 544  
125 0 0 6 154 472 0 0 331 ////////////////////////////////////////////////////////////////////
//     Function: AnimControlCollection::get_frame
//       Access: Public
//  Description: Returns the current frame in the named animation, or
//               0 if the animation is not found.
//////////////////////////////////////////////////////////////////// 2 4 this 3 544  9 anim_name 1 469  
126 0 0 6 155 472 0 0 316 ////////////////////////////////////////////////////////////////////
//     Function: AnimControlCollection::get_num_frames
//       Access: Public
//  Description: Returns the total number of frames in the
//               last-started animation.
//////////////////////////////////////////////////////////////////// 1 4 this 3 544  
127 0 0 6 155 472 0 0 345 ////////////////////////////////////////////////////////////////////
//     Function: AnimControlCollection::get_num_frames
//       Access: Public
//  Description: Returns the total number of frames in the named
//               animation, or 0 if the animation is not found.
//////////////////////////////////////////////////////////////////// 2 4 this 3 544  9 anim_name 1 469  
128 0 0 6 156 493 0 0 328 ////////////////////////////////////////////////////////////////////
//     Function: AnimControlCollection::is_playing
//       Access: Public
//  Description: Returns true if the last-started animation is
//               currently playing, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 544  
129 0 0 6 156 493 0 0 321 ////////////////////////////////////////////////////////////////////
//     Function: AnimControlCollection::is_playing
//       Access: Public
//  Description: Returns true if the named animation is currently
//               playing, false otherwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 544  9 anim_name 1 469  
130 0 0 6 157 469 0 0 458 ////////////////////////////////////////////////////////////////////
//     Function: AnimControlCollection::which_anim_playing
//       Access: Published
//  Description: Returns the name of the bound AnimControl currently
//               playing, if any.  If more than one AnimControl is
//               currently playing, returns all of the names separated
//               by spaces.
//////////////////////////////////////////////////////////////////// 1 4 this 3 544  
131 0 0 4 158 473 0 0 229 ////////////////////////////////////////////////////////////////////
//     Function: AnimControlCollection::output
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 544  3 out 1 474  
132 0 0 4 159 473 0 0 228 ////////////////////////////////////////////////////////////////////
//     Function: AnimControlCollection::write
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 544  3 out 1 474  
133 0 0 7 162 546 0 0 229 ////////////////////////////////////////////////////////////////////
//     Function: AnimPreloadTable::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 0 
134 0 0 6 163 472 0 0 284 ////////////////////////////////////////////////////////////////////
//     Function: AnimPreloadTable::get_num_anims
//       Access: Published
//  Description: Returns the number of animation records in the table.
//////////////////////////////////////////////////////////////////// 1 4 this 3 547  
135 0 0 6 164 472 0 0 610 ////////////////////////////////////////////////////////////////////
//     Function: AnimPreloadTable::find_anim
//       Access: Published
//  Description: Returns the index number in the table of the
//               animation record with the indicated name, or -1 if
//               the name is not present.  By convention, the basename
//               is the filename of the egg or bam file, without the
//               directory part and without the extension.  That is,
//               it is Filename::get_basename_wo_extension().
//////////////////////////////////////////////////////////////////// 2 4 this 3 547  8 basename 1 469  
136 0 0 6 165 469 0 0 322 ////////////////////////////////////////////////////////////////////
//     Function: AnimPreloadTable::get_basename
//       Access: Published
//  Description: Returns the basename stored for the nth animation
//               record.  See find_anim().
//////////////////////////////////////////////////////////////////// 2 4 this 3 547  1 n 1 472  
137 0 0 6 166 480 0 0 313 ////////////////////////////////////////////////////////////////////
//     Function: AnimPreloadTable::get_base_frame_rate
//       Access: Published
//  Description: Returns the frame rate stored for the nth animation
//               record.
//////////////////////////////////////////////////////////////////// 2 4 this 3 547  1 n 1 472  
138 0 0 6 167 472 0 0 314 ////////////////////////////////////////////////////////////////////
//     Function: AnimPreloadTable::get_num_frames
//       Access: Published
//  Description: Returns the number of frames stored for the nth
//               animation record.
//////////////////////////////////////////////////////////////////// 2 4 this 3 547  1 n 1 472  
139 0 0 4 168 473 0 0 274 ////////////////////////////////////////////////////////////////////
//     Function: AnimPreloadTable::clear_anims
//       Access: Published
//  Description: Removes all animation records from the table.
//////////////////////////////////////////////////////////////////// 1 4 this 3 546  
140 0 0 4 169 473 0 0 344 ////////////////////////////////////////////////////////////////////
//     Function: AnimPreloadTable::remove_anim
//       Access: Published
//  Description: Removes the nth animation records from the table.
//               This renumbers indexes for following animations.
//////////////////////////////////////////////////////////////////// 2 4 this 3 546  1 n 1 472  
141 0 0 4 170 473 0 0 505 ////////////////////////////////////////////////////////////////////
//     Function: AnimPreloadTable::add_anim
//       Access: Published
//  Description: Adds a new animation record to the table.  If there
//               is already a record of this name, no operation is
//               performed (the original record is unchanged).  See
//               find_anim().  This will invalidate existing index
//               numbers.
//////////////////////////////////////////////////////////////////// 4 4 this 3 546  8 basename 1 469  15 base_frame_rate 1 480  10 num_frames 1 472  
142 0 0 4 171 473 0 0 412 ////////////////////////////////////////////////////////////////////
//     Function: AnimPreloadTable::add_anims_from
//       Access: Published
//  Description: Copies the animation records from the other table
//               into this one.  If a given record name exists in both
//               tables, the record in this one supercedes.
//////////////////////////////////////////////////////////////////// 2 4 this 3 546  5 other 1 547  
143 0 0 4 172 473 0 0 224 ////////////////////////////////////////////////////////////////////
//     Function: AnimPreloadTable::output
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 547  3 out 1 474  
144 0 0 4 173 473 0 0 223 ////////////////////////////////////////////////////////////////////
//     Function: AnimPreloadTable::write
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 3 4 this 3 547  3 out 1 474  12 indent_level 1 472  
145 0 0 7 174 477 0 0 0 0 
146 0 0 7 177 549 371 0 223 ////////////////////////////////////////////////////////////////////
//     Function: PartSubset::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 0 
147 0 0 7 177 549 371 0 228 ////////////////////////////////////////////////////////////////////
//     Function: PartSubset::Copy Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 copy 1 550  
148 0 0 6 178 549 0 0 0 2 4 this 3 549  4 copy 1 550  
149 0 0 4 179 473 0 0 650 ////////////////////////////////////////////////////////////////////
//     Function: PartSubset::add_include_joint
//       Access: Published
//  Description: Adds the named joint to the list of joints that will
//               be explicitly included in the subset.  Any joint at
//               or below a named node will be included in the subset
//               (unless a lower node is also listed in the exclude
//               list).
//
//               Since the name is a GlobPattern, it may of course
//               include filename globbing characters like * and ?.
//////////////////////////////////////////////////////////////////// 2 4 this 3 549  4 name 1 552  
150 0 0 4 180 473 0 0 657 ////////////////////////////////////////////////////////////////////
//     Function: PartSubset::add_exclude_joint
//       Access: Published
//  Description: Adds the named joint to the list of joints that will
//               be explicitly exlcluded from the subset.  Any joint at
//               or below a named node will not be included in the
//               subset (unless a lower node is also listed in the
//               include list).
//
//               Since the name is a GlobPattern, it may of course
//               include filename globbing characters like * and ?.
//////////////////////////////////////////////////////////////////// 2 4 this 3 549  4 name 1 552  
151 0 0 4 181 473 0 0 319 ////////////////////////////////////////////////////////////////////
//     Function: PartSubset::append
//       Access: Published
//  Description: Appends the include and exclude list from the other
//               object onto this object's lists.
//////////////////////////////////////////////////////////////////// 2 4 this 3 549  5 other 1 550  
152 0 0 4 182 473 0 0 218 ////////////////////////////////////////////////////////////////////
//     Function: PartSubset::output
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 550  3 out 1 474  
153 0 0 6 183 493 0 0 395 ////////////////////////////////////////////////////////////////////
//     Function: PartSubset::is_include_empty
//       Access: Published
//  Description: Returns true if the include list is completely empty,
//               false otherwise.  If it is empty, it is the same
//               thing as including all joints.
//////////////////////////////////////////////////////////////////// 1 4 this 3 550  
154 0 0 6 184 493 0 0 331 ////////////////////////////////////////////////////////////////////
//     Function: PartSubset::matches_include
//       Access: Published
//  Description: Returns true if the indicated name matches a name on
//               the include list, false otherwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 550  10 joint_name 1 469  
155 0 0 6 185 493 0 0 331 ////////////////////////////////////////////////////////////////////
//     Function: PartSubset::matches_exclude
//       Access: Published
//  Description: Returns true if the indicated name matches a name on
//               the exclude list, false otherwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 550  10 joint_name 1 469  
156 0 0 7 189 563 374 0 225 ////////////////////////////////////////////////////////////////////
//     Function: BindAnimRequest::Constructor
//       Access: Public
//  Description: 
//////////////////////////////////////////////////////////////////// 7 4 name 1 469  8 filename 1 555  7 options 1 558  6 loader 1 561  7 control 1 504  21 hierarchy_match_flags 1 472  6 subset 1 550  
157 0 0 7 190 477 0 0 0 0 
158 0 0 7 193 505 406 0 373 ////////////////////////////////////////////////////////////////////
//     Function: PartBundle::Constructor
//       Access: Public
//  Description: Normally, a PartBundle constructor should not be
//               called directly--it will get created when a
//               PartBundleNode is created.
//////////////////////////////////////////////////////////////////// 1 4 name 1 469  
159 0 0 7 194 547 0 0 443 ////////////////////////////////////////////////////////////////////
//     Function: PartBundle::get_anim_preload
//       Access: Published
//  Description: Returns the AnimPreloadTable associated with
//               the PartBundle.  This table, if present, can be used
//               for the benefit of load_bind_anim() to allow
//               asynchronous binding.
//////////////////////////////////////////////////////////////////// 1 4 this 3 564  
160 0 0 7 195 546 0 0 340 ////////////////////////////////////////////////////////////////////
//     Function: PartBundle::modify_anim_preload
//       Access: Published
//  Description: Returns a modifiable pointer to the AnimPreloadTable
//               associated with the PartBundle, if any.
//////////////////////////////////////////////////////////////////// 1 4 this 3 505  
161 0 0 4 196 473 0 0 306 ////////////////////////////////////////////////////////////////////
//     Function: PartBundle::set_anim_preload
//       Access: Published
//  Description: Replaces the AnimPreloadTable associated with
//               the PartBundle.
//////////////////////////////////////////////////////////////////// 2 4 this 3 505  5 table 1 546  
162 0 0 4 197 473 0 0 307 ////////////////////////////////////////////////////////////////////
//     Function: PartBundle::clear_anim_preload
//       Access: Published
//  Description: Removes any AnimPreloadTable associated with
//               the PartBundle.
//////////////////////////////////////////////////////////////////// 1 4 this 3 505  
163 0 0 4 198 473 0 0 322 ////////////////////////////////////////////////////////////////////
//     Function: PartBundle::merge_anim_preloads
//       Access: Published
//  Description: Copies the contents of the other PartBundle's preload
//               table into this one.
//////////////////////////////////////////////////////////////////// 2 4 this 3 505  5 other 1 564  
164 0 0 4 200 473 0 0 558 ////////////////////////////////////////////////////////////////////
//     Function: PartBundle::set_blend_type
//       Access: Published
//  Description: Defines the algorithm that is used when blending
//               multiple frames or multiple animations together, when
//               either anim_blend_flag or frame_blend_flag is set
//               to true.
//
//               See partBundle.h for a description of the meaning of
//               each of the BlendType values.
//////////////////////////////////////////////////////////////////// 2 4 this 3 505  2 bt 1 459  
165 0 0 6 201 459 0 0 438 ////////////////////////////////////////////////////////////////////
//     Function: PartBundle::get_blend_type
//       Access: Published
//  Description: Returns the algorithm that is used when blending
//               multiple frames or multiple animations together, when
//               either anim_blend_flag or frame_blend_flag is set
//               to true.
//////////////////////////////////////////////////////////////////// 1 4 this 3 564  
166 0 0 4 202 473 0 0 947 ////////////////////////////////////////////////////////////////////
//     Function: PartBundle::set_anim_blend_flag
//       Access: Published
//  Description: Defines the way the character responds to multiple
//               calls to set_control_effect()).  By default, this
//               flag is set false, which disallows multiple
//               animations.  When this flag is false, it is not
//               necessary to explicitly set the control_effect when
//               starting an animation; starting the animation will
//               implicitly remove the control_effect from the
//               previous animation and set it on the current one.
//
//               However, if this flag is set true, the control_effect
//               must be explicitly set via set_control_effect()
//               whenever an animation is to affect the character.
//////////////////////////////////////////////////////////////////// 2 4 this 3 505  15 anim_blend_flag 1 493  
167 0 0 6 203 493 0 0 387 ////////////////////////////////////////////////////////////////////
//     Function: PartBundle::get_anim_blend_flag
//       Access: Published
//  Description: Returns whether the character allows multiple
//               different animations to be bound simultaneously.  See
//               set_anim_blend_flag().
//////////////////////////////////////////////////////////////////// 1 4 this 3 564  
168 0 0 4 204 473 0 0 1201 ////////////////////////////////////////////////////////////////////
//     Function: PartBundle::set_frame_blend_flag
//       Access: Published
//  Description: Specifies whether the character interpolates (blends)
//               between two sequential frames of an active animation,
//               showing a smooth intra-frame motion, or whether it
//               holds each frame until the next frame is ready,
//               showing precisely the specified animation.
//
//               When this value is false, the character holds each
//               frame until the next is ready.  When this is true,
//               the character will interpolate between two
//               consecutive frames of animation for each frame the
//               animation is onscreen, according to the amount of
//               time elapsed between the frames.
//
//               The default value of this flag is determined by the
//               interpolate-frames Config.prc variable.
//
//               Use set_blend_type() to change the algorithm that the
//               character uses to interpolate matrix positions.
//////////////////////////////////////////////////////////////////// 2 4 this 3 505  16 frame_blend_flag 1 493  
169 0 0 6 205 493 0 0 471 ////////////////////////////////////////////////////////////////////
//     Function: PartBundle::get_frame_blend_flag
//       Access: Published
//  Description: Returns whether the character interpolates (blends)
//               between two sequential animation frames, or whether
//               it holds the current frame until the next one is
//               ready.  See set_frame_blend_flag().
//////////////////////////////////////////////////////////////////// 1 4 this 3 564  
170 0 0 4 206 473 0 0 340 ////////////////////////////////////////////////////////////////////
//     Function: PartBundle::set_root_xform
//       Access: Published
//  Description: Specifies the transform matrix which is implicitly
//               applied at the root of the animated hierarchy.
//////////////////////////////////////////////////////////////////// 2 4 this 3 505  10 root_xform 1 525  
171 0 0 4 207 473 0 0 304 ////////////////////////////////////////////////////////////////////
//     Function: PartBundle::xform
//       Access: Published
//  Description: Applies the indicated transform to the root of the
//               animated hierarchy.
//////////////////////////////////////////////////////////////////// 2 4 this 3 505  3 mat 1 525  
172 0 0 6 208 525 0 0 338 ////////////////////////////////////////////////////////////////////
//     Function: PartBundle::get_root_xform
//       Access: Published
//  Description: Returns the transform matrix which is implicitly
//               applied at the root of the animated hierarchy.
//////////////////////////////////////////////////////////////////// 1 4 this 3 564  
173 0 0 7 209 505 406 0 487 ////////////////////////////////////////////////////////////////////
//     Function: PartBundle::apply_transform
//       Access: Published
//  Description: Returns a PartBundle that is a duplicate of this one,
//               but with the indicated transform applied.  If this is
//               called multiple times with the same TransformState
//               pointer, it returns the same PartBundle each time.
//////////////////////////////////////////////////////////////////// 2 4 this 3 505  9 transform 1 494  
174 0 0 6 210 472 0 0 322 ////////////////////////////////////////////////////////////////////
//     Function: PartBundle::get_num_nodes
//       Access: Published
//  Description: Returns the number of PartBundleNodes that contain a
//               pointer to this PartBundle.
//////////////////////////////////////////////////////////////////// 1 4 this 3 564  
175 0 0 7 211 566 0 0 300 ////////////////////////////////////////////////////////////////////
//     Function: PartBundle::get_node
//       Access: Published
//  Description: Returns the nth PartBundleNode associated with
//               this PartBundle.
//////////////////////////////////////////////////////////////////// 2 4 this 3 564  1 n 1 472  
176 0 0 4 212 473 0 0 872 ////////////////////////////////////////////////////////////////////
//     Function: PartBundle::clear_control_effects
//       Access: Published
//  Description: Sets the control effect of all AnimControls to zero
//               (but does not "stop" the AnimControls).  The
//               character will no longer be affected by any
//               animation, and will return to its default
//               pose (unless restore-initial-pose is false).
//
//               The AnimControls which are no longer associated will
//               not be using any CPU cycles, but they may still be in
//               the "playing" state; if they are later reassociated
//               with the PartBundle they will resume at their current
//               frame as if they'd been running all along.
//////////////////////////////////////////////////////////////////// 1 4 this 3 505  
177 0 0 4 213 473 0 0 897 ////////////////////////////////////////////////////////////////////
//     Function: PartBundle::set_control_effect
//       Access: Published
//  Description: Sets the amount by which the character is affected by
//               the indicated AnimControl (and its associated
//               animation).  Normally, this will only be zero or one.
//               Zero indicates the animation does not affect the
//               character, and one means it does.
//
//               If the _anim_blend_flag is not false (see
//               set_anim_blend_flag()), it is possible to have
//               multiple AnimControls in effect simultaneously.  In
//               this case, the effect is a weight that indicates the
//               relative importance of each AnimControl to the final
//               animation.
//////////////////////////////////////////////////////////////////// 3 4 this 3 505  7 control 1 504  6 effect 1 480  
178 0 0 6 214 480 0 0 403 ////////////////////////////////////////////////////////////////////
//     Function: PartBundle::get_control_effect
//       Access: Published
//  Description: Returns the amount by which the character is affected
//               by the indicated AnimControl and its associated
//               animation.  See set_control_effect().
//////////////////////////////////////////////////////////////////// 2 4 this 3 564  7 control 1 504  
179 0 0 4 215 473 0 0 271 ////////////////////////////////////////////////////////////////////
//     Function: PartBundle::output
//       Access: Published, Virtual
//  Description: Writes a one-line description of the bundle.
//////////////////////////////////////////////////////////////////// 2 4 this 3 564  3 out 1 474  
180 0 0 7 216 504 266 0 1221 ////////////////////////////////////////////////////////////////////
//     Function: PartBundle::bind_anim
//       Access: Published
//  Description: Binds the animation to the bundle, if possible, and
//               returns a new AnimControl that can be used to start
//               and stop the animation.  If the anim hierarchy does
//               not match the part hierarchy, returns NULL.
//
//               If hierarchy_match_flags is 0, only an exact match is
//               accepted; otherwise, it may contain a union of
//               PartGroup::HierarchyMatchFlags values indicating
//               conditions that will be tolerated (but warnings will
//               still be issued).
//
//               If subset is specified, it restricts the binding only
//               to the named subtree of joints.
//
//               The AnimControl is not stored within the PartBundle;
//               it is the user's responsibility to maintain the
//               pointer.  The animation will automatically unbind
//               itself when the AnimControl destructs (i.e. its
//               reference count goes to zero).
//////////////////////////////////////////////////////////////////// 4 4 this 3 505  4 anim 1 482  21 hierarchy_match_flags 1 472  6 subset 1 550  
181 0 0 7 217 504 266 0 1614 ////////////////////////////////////////////////////////////////////
//     Function: PartBundle::load_bind_anim
//       Access: Published
//  Description: Binds an animation to the bundle.  The animation is
//               loaded from the disk via the indicated Loader object.
//               In other respects, this behaves similarly to
//               bind_anim(), with the addition of asynchronous
//               support.
//
//               If allow_aysnc is true, the load will be asynchronous
//               if possible.  This requires that the animation
//               basename can be found in the PartBundle's preload
//               table (see get_anim_preload()).
//
//               In an asynchronous load, the animation file will be
//               loaded and bound in a sub-thread.  This means that
//               the animation will not necessarily be available at
//               the time this method returns.  You may still use the
//               returned AnimControl immediately, though, but no
//               visible effect will occur until the animation
//               eventually becomes available.
//
//               You can test AnimControl::is_pending() to see if the
//               animation has been loaded yet, or wait for it to
//               finish with AnimControl::wait_pending() or even
//               PartBundle::wait_pending().  You can also set an
//               event to be triggered when the animation finishes
//               loading with AnimControl::set_pending_done_event().
//////////////////////////////////////////////////////////////////// 6 4 this 3 505  6 loader 1 561  8 filename 1 555  21 hierarchy_match_flags 1 472  6 subset 1 550  11 allow_async 1 493  
182 0 0 4 218 473 0 0 397 ////////////////////////////////////////////////////////////////////
//     Function: PartBundle::wait_pending
//       Access: Published
//  Description: Blocks the current thread until all currently-pending
//               AnimControls, with a nonzero control effect, have
//               been loaded and are properly bound.
//////////////////////////////////////////////////////////////////// 1 4 this 3 505  
183 0 0 6 219 493 0 0 693 ////////////////////////////////////////////////////////////////////
//     Function: PartBundle::freeze_joint
//       Access: Published
//  Description: Specifies that the joint with the indicated name
//               should be frozen with the specified transform.  It
//               will henceforth always hold this fixed transform,
//               regardless of any animations that may subsequently be
//               bound to the joint.
//
//               Returns true if the joint is successfully frozen, or
//               false if the named child is not a joint (or slider)
//               or does not exist.
//////////////////////////////////////////////////////////////////// 5 4 this 3 505  10 joint_name 1 469  3 pos 1 497  3 hpr 1 497  5 scale 1 497  
184 0 0 6 219 493 0 0 693 ////////////////////////////////////////////////////////////////////
//     Function: PartBundle::freeze_joint
//       Access: Published
//  Description: Specifies that the joint with the indicated name
//               should be frozen with the specified transform.  It
//               will henceforth always hold this fixed transform,
//               regardless of any animations that may subsequently be
//               bound to the joint.
//
//               Returns true if the joint is successfully frozen, or
//               false if the named child is not a joint (or slider)
//               or does not exist.
//////////////////////////////////////////////////////////////////// 3 4 this 3 505  10 joint_name 1 469  5 value 1 480  
185 0 0 6 219 493 0 0 693 ////////////////////////////////////////////////////////////////////
//     Function: PartBundle::freeze_joint
//       Access: Published
//  Description: Specifies that the joint with the indicated name
//               should be frozen with the specified transform.  It
//               will henceforth always hold this fixed transform,
//               regardless of any animations that may subsequently be
//               bound to the joint.
//
//               Returns true if the joint is successfully frozen, or
//               false if the named child is not a joint (or slider)
//               or does not exist.
//////////////////////////////////////////////////////////////////// 3 4 this 3 505  10 joint_name 1 469  9 transform 1 494  
186 0 0 6 220 493 0 0 714 ////////////////////////////////////////////////////////////////////
//     Function: PartBundle::control_joint
//       Access: Published
//  Description: Specifies that the joint with the indicated name
//               should be animated with the transform on the
//               indicated node.  It will henceforth always follow the
//               node's transform, regardless of any animations that
//               may subsequently be bound to the joint.
//
//               Returns true if the joint is successfully controlled,
//               or false if the named child is not a joint (or
//               slider) or does not exist.
//////////////////////////////////////////////////////////////////// 3 4 this 3 505  10 joint_name 1 469  4 node 1 489  
187 0 0 6 221 493 0 0 646 ////////////////////////////////////////////////////////////////////
//     Function: PartBundle::release_joint
//       Access: Published
//  Description: Releases the named joint from the effects of a
//               previous call to freeze_joint() or control_joint().
//               It will henceforth once again follow whatever
//               transforms are dictated by the animation.
//
//               Returns true if the joint is released, or false if
//               the named child was not previously controlled or
//               frozen, or it does not exist.
//////////////////////////////////////////////////////////////////// 2 4 this 3 505  10 joint_name 1 469  
188 0 0 6 222 493 0 0 482 ////////////////////////////////////////////////////////////////////
//     Function: PartBundle::update
//       Access: Published
//  Description: Updates all the parts in the bundle to reflect the
//               data for the current frame (as set in each of the
//               AnimControls).
//
//               Returns true if any part has changed as a result of
//               this, or false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 505  
189 0 0 6 223 493 0 0 375 ////////////////////////////////////////////////////////////////////
//     Function: PartBundle::force_update
//       Access: Published
//  Description: Updates all the parts in the bundle to reflect the
//               data for the current frame, whether we believe it
//               needs it or not.
//////////////////////////////////////////////////////////////////// 1 4 this 3 505  
190 0 0 7 224 477 0 0 0 0 
191 0 0 6 227 472 0 0 604 ////////////////////////////////////////////////////////////////////
//     Function: MovingPartBase::get_max_bound
//       Access: Published
//  Description: Returns the number of channels that might be bound to
//               this PartGroup.  This might not be the actual number
//               of channels, since there might be holes in the list;
//               it is one more than the index number of the highest
//               bound channel.  Thus, it is called get_max_bound()
//               instead of get_num_bound().
//////////////////////////////////////////////////////////////////// 1 4 this 3 567  
192 0 0 7 228 501 282 0 690 ////////////////////////////////////////////////////////////////////
//     Function: MovingPartBase::get_bound
//       Access: Published
//  Description: Returns the nth bound channel on this PartGroup.  n
//               can be determined by iterating from 0 to one less
//               than get_max_bound(); or n might be
//               AnimControl::get_channel_index().
//
//               This will return NULL if there is no channel bound on
//               the indicated index.  It is an error to call this if
//               n is less than zero or greater than or equal to
//               get_max_bound().
//////////////////////////////////////////////////////////////////// 2 4 this 3 567  1 n 1 472  
193 0 0 4 229 473 0 0 0 2 4 this 3 567  3 out 1 474  
194 0 0 7 230 477 0 0 0 0 
195 0 0 7 238 477 0 0 0 0 
196 0 0 7 234 477 0 0 0 0 
197 0 0 7 235 514 0 0 0 1 4 this 3 569  
198 0 0 7 236 514 0 0 0 1 4 this 3 569  
199 0 0 7 245 477 0 0 0 0 
200 0 0 7 241 477 0 0 0 0 
201 0 0 6 242 480 0 0 0 1 4 this 3 571  
202 0 0 6 243 480 0 0 0 1 4 this 3 571  
203 0 0 7 248 573 0 0 229 ////////////////////////////////////////////////////////////////////
//     Function: PartBundleHandle::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 6 bundle 1 505  
204 0 0 7 249 505 406 0 302 ////////////////////////////////////////////////////////////////////
//     Function: PartBundleHandle::get_bundle
//       Access: Published
//  Description: Returns the actual PartBundle embedded within the
//               handle.
//////////////////////////////////////////////////////////////////// 1 4 this 3 573  
205 0 0 4 250 473 0 0 302 ////////////////////////////////////////////////////////////////////
//     Function: PartBundleHandle::set_bundle
//       Access: Published
//  Description: Changes the actual PartBundle embedded within the
//               handle.
//////////////////////////////////////////////////////////////////// 2 4 this 3 573  6 bundle 1 505  
206 0 0 7 252 566 0 0 501 ////////////////////////////////////////////////////////////////////
//     Function: PartBundleNode::Constructor
//       Access: Public
//  Description: The PartBundle and its node should be constructed
//               together.  Generally, the derived classes of
//               PartBundleNode will automatically create a PartBundle
//               of the appropriate type, and pass it up to this
//               constructor.
//////////////////////////////////////////////////////////////////// 2 4 name 1 469  6 bundle 1 505  
207 0 0 6 253 472 0 0 227 ////////////////////////////////////////////////////////////////////
//     Function: PartBundleNode::get_num_bundles
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 574  
208 0 0 7 254 505 406 0 222 ////////////////////////////////////////////////////////////////////
//     Function: PartBundleNode::get_bundle
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 574  1 n 1 472  
209 0 0 7 255 573 0 0 469 ////////////////////////////////////////////////////////////////////
//     Function: PartBundleNode::get_bundle_handle
//       Access: Public
//  Description: Returns the PartBundleHandle that wraps around the
//               actual nth PartBundle.  While the PartBundle pointer
//               might later change due to a future flatten operation,
//               the PartBundleHandle will not.
//////////////////////////////////////////////////////////////////// 2 4 this 3 574  1 n 1 472  
210 0 0 7 256 477 0 0 0 0 
211 0 0 4 175 473 0 0 0 3 9 root_node 1 489  8 controls 1 543  21 hierarchy_match_flags 1 472  
146
430 9 AnimGroup 0 26625 9 AnimGroup 9 AnimGroup 0 0 0 1 216 217 0 8 218 219 220 221 222 223 224 225 1 576 0 2 3 431 212 213 3 432 214 215 0 0 381
////////////////////////////////////////////////////////////////////
//       Class : AnimGroup
// Description : This is the base class for AnimChannel and
//               AnimBundle.  It implements a hierarchy of
//               AnimChannels.  The root of the hierarchy must be an
//               AnimBundle.
////////////////////////////////////////////////////////////////////

431 27 TypedWritableReferenceCount 0 2049 27 TypedWritableReferenceCount 27 TypedWritableReferenceCount 0 0 0 0 0 0 0 0 0 0 0 0 722
////////////////////////////////////////////////////////////////////
//       Class : TypedWritableReferenceCount
// Description : A base class for things which need to inherit from
//               both TypedWritable and from ReferenceCount.  It's
//               convenient to define this intermediate base class
//               instead of multiply inheriting from the two classes
//               each time they are needed, so that we can sensibly
//               pass around pointers to things which are both
//               TypedWritables and ReferenceCounters.
//               
//               See also TypedObject for detailed instructions.
////////////////////////////////////////////////////////////////////

432 7 Namable 0 2049 7 Namable 7 Namable 0 0 0 0 0 0 0 0 0 0 0 0 324
////////////////////////////////////////////////////////////////////
//       Class : Namable
// Description : A base class for all things which can have a name.
//               The name is either empty or nonempty, but it is never
//               NULL.
////////////////////////////////////////////////////////////////////

433 10 AnimBundle 0 141313 10 AnimBundle 10 AnimBundle 0 0 0 1 226 231 0 4 227 228 229 230 0 0 1 0 430 0 0 0 0 369
////////////////////////////////////////////////////////////////////
//       Class : AnimBundle
// Description : This is the root of an AnimChannel hierarchy.  It
//               knows the frame rate and number of frames of all the
//               channels in the hierarchy (which must all match).
////////////////////////////////////////////////////////////////////

434 14 AnimBundleNode 0 141313 14 AnimBundleNode 14 AnimBundleNode 0 0 0 1 232 236 0 3 233 234 235 0 0 1 0 435 0 0 0 0 373
////////////////////////////////////////////////////////////////////
//       Class : AnimBundleNode
// Description : This is a node that contains a pointer to an
//               AnimBundle.  Like PartBundleNode, it exists solely to
//               make it easy to store AnimBundles in the scene graph.
////////////////////////////////////////////////////////////////////

435 9 PandaNode 0 2049 9 PandaNode 9 PandaNode 0 0 0 0 0 0 0 3 577 578 579 0 0 0 0 374
////////////////////////////////////////////////////////////////////
//       Class : PandaNode
// Description : A basic node of the scene graph or data graph.  This
//               is the base class of all specialized nodes, and also
//               serves as a generic node with no special properties.
////////////////////////////////////////////////////////////////////

436 9 PartGroup 0 26625 9 PartGroup 9 PartGroup 0 0 0 1 241 242 0 17 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 1 580 0 2 3 431 237 238 3 432 239 240 0 1 437 290
////////////////////////////////////////////////////////////////////
//       Class : PartGroup
// Description : This is the base class for PartRoot and
//               MovingPart.  It defines a hierarchy of MovingParts.
////////////////////////////////////////////////////////////////////

437 19 HierarchyMatchFlags 0 794624 30 PartGroup::HierarchyMatchFlags 30 PartGroup::HierarchyMatchFlags 436 0 0 0 0 0 0 0 0 0 3 17 HMF_ok_part_extra 28 PartGroup::HMF_ok_part_extra 0
1 17 HMF_ok_anim_extra 28 PartGroup::HMF_ok_anim_extra 0
2 22 HMF_ok_wrong_root_name 33 PartGroup::HMF_ok_wrong_root_name 0
4 0 218
// This enum defines bits which may be passed into check_hierarchy()
// and PartBundle::bind_anim() to allow an inexact match of channel
// hierarchies.  This specifies conditions that we don't care about
// enforcing.

438 11 AnimControl 0 26625 11 AnimControl 11 AnimControl 0 0 0 0 266 0 13 267 268 269 270 271 272 273 274 275 276 277 278 279 0 0 3 3 439 260 261 3 440 262 263 3 432 264 265 0 0 487
////////////////////////////////////////////////////////////////////
//       Class : AnimControl
// Description : Controls the timing of a character animation.  An
//               AnimControl object is created for each
//               character/bundle binding and manages the state of the
//               animation: whether started, stopped, or looping, and
//               the current frame number and play rate.
////////////////////////////////////////////////////////////////////

439 19 TypedReferenceCount 0 2049 19 TypedReferenceCount 19 TypedReferenceCount 0 0 0 0 0 0 0 0 0 0 0 0 710
////////////////////////////////////////////////////////////////////
//       Class : TypedReferenceCount
// Description : A base class for things which need to inherit from
//               both TypedObject and from ReferenceCount.  It's
//               convenient to define this intermediate base class
//               instead of multiply inheriting from the two classes
//               each time they are needed, so that we can sensibly
//               pass around pointers to things which are both
//               TypedObjects and ReferenceCounters.
//               
//               See also TypedObject for detailed instructions.
////////////////////////////////////////////////////////////////////

440 13 AnimInterface 0 2049 13 AnimInterface 13 AnimInterface 0 0 0 0 0 0 0 0 0 0 0 0 464
////////////////////////////////////////////////////////////////////
//       Class : AnimInterface
// Description : This is the fundamental interface for things that
//               have a play/loop/stop type interface for frame-based
//               animation, such as animated characters.  This is the
//               base class for AnimControl and other, similar
//               classes.
////////////////////////////////////////////////////////////////////

441 15 AnimChannelBase 0 141313 15 AnimChannelBase 15 AnimChannelBase 0 0 0 0 282 0 2 280 281 0 0 1 0 430 0 0 0 0 489
////////////////////////////////////////////////////////////////////
//       Class : AnimChannelBase
// Description : Parent class for all animation channels.  An
//               AnimChannel is an arbitrary function that changes
//               over time (actually, over frames), usually defined by
//               a table read from an egg file (but possibly computed
//               or generated in any other way).
////////////////////////////////////////////////////////////////////

442 33 AnimChannel< ACMatrixSwitchType > 0 75777 33 AnimChannel< ACMatrixSwitchType > 33 AnimChannel< ACMatrixSwitchType > 0 0 0 0 282 0 9 283 284 285 286 287 288 289 290 291 0 0 1 0 441 0 0 0 1 443 0

443 8 LMatrix4 0 2105344 8 LMatrix4 8 LMatrix4 0 0 444 0 0 0 0 0 0 0 0 0 0

444 9 LMatrix4f 0 2048 9 LMatrix4f 9 LMatrix4f 0 0 0 0 0 0 0 3 581 582 583 0 0 0 0 215
////////////////////////////////////////////////////////////////////
//       Class : LMatrix4
// Description : This is a 4-by-4 transform matrix.
////////////////////////////////////////////////////////////////////

445 17 AnimChannelMatrix 0 2105345 17 AnimChannelMatrix 17 AnimChannelMatrix 0 0 442 0 0 0 0 0 0 0 0 0 0

446 33 AnimChannel< ACScalarSwitchType > 0 75777 33 AnimChannel< ACScalarSwitchType > 33 AnimChannel< ACScalarSwitchType > 0 0 0 0 282 0 9 292 293 294 295 296 297 298 299 300 0 0 1 0 441 0 0 0 0 0

447 17 AnimChannelScalar 0 2105345 17 AnimChannelScalar 17 AnimChannelScalar 0 0 446 0 0 0 0 0 0 0 0 0 0

448 24 AnimChannelMatrixDynamic 0 141313 24 AnimChannelMatrixDynamic 24 AnimChannelMatrixDynamic 0 0 0 0 306 0 5 301 302 303 304 305 0 0 1 0 442 0 0 0 0 683
////////////////////////////////////////////////////////////////////
//       Class : AnimChannelMatrixDynamic
// Description : An animation channel that accepts a matrix each frame
//               from some dynamic input provided by code.
//
//               This object operates in two modes: in explicit mode,
//               the programmer should call set_value() each frame to
//               indicate the new value; in implicit mode, the
//               programmer should call set_value_node() to indicate
//               the node whose transform will be copied to the joint
//               each frame.
////////////////////////////////////////////////////////////////////

449 25 AnimChannelMatrixXfmTable 0 75777 25 AnimChannelMatrixXfmTable 25 AnimChannelMatrixXfmTable 0 0 0 1 307 282 0 7 308 309 310 311 312 313 314 0 0 1 0 442 0 0 0 0 509
////////////////////////////////////////////////////////////////////
//       Class : AnimChannelMatrixXfmTable
// Description : An animation channel that issues a matrix each frame,
//               read from a table such as might have been read from
//               an egg file.  The table actually consists of nine
//               sub-tables, each representing one component of the
//               transform: scale, rotate, translate.
////////////////////////////////////////////////////////////////////

450 24 AnimChannelScalarDynamic 0 141313 24 AnimChannelScalarDynamic 24 AnimChannelScalarDynamic 0 0 0 0 318 0 3 315 316 317 0 0 1 0 446 0 0 0 0 686
////////////////////////////////////////////////////////////////////
//       Class : AnimChannelScalarDynamic
// Description : An animation channel that accepts a scalar each frame
//               from some dynamic input provided by code.
//
//               This object operates in two modes: in explicit mode,
//               the programmer should call set_value() each frame to
//               indicate the new value; in implicit mode, the
//               programmer should call set_value_node() to indicate
//               the node whose X component will be copied to the
//               scalar each frame.
////////////////////////////////////////////////////////////////////

451 22 AnimChannelScalarTable 0 141313 22 AnimChannelScalarTable 22 AnimChannelScalarTable 0 0 0 0 324 0 5 319 320 321 322 323 0 0 1 0 446 0 0 0 0 347
////////////////////////////////////////////////////////////////////
//       Class : AnimChannelScalarTable
// Description : An animation channel that issues a scalar each frame,
//               read from a table such as might have been read from
//               an egg file.
////////////////////////////////////////////////////////////////////

452 21 AnimControlCollection 0 26625 21 AnimControlCollection 21 AnimControlCollection 0 0 0 1 325 326 0 21 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 2 584 585 0 0 0 0 628
////////////////////////////////////////////////////////////////////
//       Class : AnimControlCollection
// Description : This is a named collection of AnimControl pointers.
//               An AnimControl may be added to the collection by
//               name.  While an AnimControl is associated, its
//               reference count is maintained; associating a new
//               AnimControl with the same name will decrement the
//               previous control's reference count (and possibly
//               delete it, unbinding its animation).
////////////////////////////////////////////////////////////////////

453 16 AnimPreloadTable 0 75777 16 AnimPreloadTable 16 AnimPreloadTable 0 0 0 1 348 0 0 12 349 350 351 352 353 354 355 356 357 358 359 360 0 0 1 0 454 0 0 0 0 514
////////////////////////////////////////////////////////////////////
//       Class : AnimPreloadTable
// Description : This table records data about a list of animations
//               for a particular model, such as number of frames and
//               frame rate.  It's used for implementating
//               asynchronous binding.
//
//               This table is normally built by an offline tool, such
//               as egg-optchar.
////////////////////////////////////////////////////////////////////

454 17 CopyOnWriteObject 0 2049 17 CopyOnWriteObject 17 CopyOnWriteObject 0 0 0 0 0 0 0 0 0 0 0 0 376
////////////////////////////////////////////////////////////////////
//       Class : CopyOnWriteObject
// Description : This base class provides basic reference counting,
//               but also can be used with a CopyOnWritePointer to
//               provide get_read_pointer() and get_write_pointer().
////////////////////////////////////////////////////////////////////

455 10 PartSubset 0 141313 10 PartSubset 10 PartSubset 0 0 0 1 362 371 0 8 363 364 365 366 367 368 369 370 0 0 0 0 0 406
////////////////////////////////////////////////////////////////////
//       Class : PartSubset
// Description : This class is used to define a subset of part names
//               to apply to the PartBundle::bind_anim() operation.
//               Only those part names within the subset will be
//               included in the bind.
////////////////////////////////////////////////////////////////////

456 15 BindAnimRequest 0 141313 15 BindAnimRequest 15 BindAnimRequest 0 0 0 1 372 374 0 1 373 0 0 1 0 457 0 0 0 0 344
////////////////////////////////////////////////////////////////////
//       Class : BindAnimRequest
// Description : This class object manages an asynchronous
//               load-and-bind animation request, as issued through
//               PartBundle::load_bind_anim().
////////////////////////////////////////////////////////////////////

457 16 ModelLoadRequest 0 2049 16 ModelLoadRequest 16 ModelLoadRequest 0 0 0 0 0 0 0 0 0 0 0 0 415
////////////////////////////////////////////////////////////////////
//       Class : ModelLoadRequest
// Description : A class object that manages a single asynchronous
//               model load request.  Create a new ModelLoadRequest,
//               and add it to the loader via load_async(), to begin
//               an asynchronous load.
////////////////////////////////////////////////////////////////////

458 10 PartBundle 0 141313 10 PartBundle 10 PartBundle 0 0 0 1 375 406 0 30 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 1 586 0 1 0 436 0 0 0 1 459 337
////////////////////////////////////////////////////////////////////
//       Class : PartBundle
// Description : This is the root of a MovingPart hierarchy.  It
//               defines the hierarchy of moving parts that make up an
//               animatable object.
////////////////////////////////////////////////////////////////////

459 9 BlendType 0 794624 21 PartBundle::BlendType 21 PartBundle::BlendType 458 0 0 0 0 0 0 0 0 0 4 9 BT_linear 21 PartBundle::BT_linear 390
// BT_linear does a componentwise average of all blended matrices,
// which is a linear blend.  The result of this is that if a
// particular vertex would have been at point P in one animation
// and point Q in another one, it will end up on the line in
// between them in the resulting blend animation.  However, this
// tends to stretch and squash limbs in strange and disturbing
// ways.
0 20 BT_normalized_linear 32 PartBundle::BT_normalized_linear 453
// BT_normalized_linear is a compromise on BT_linear.  The matrix
// is blended linearly without the scale and shear components, and
// the blended scale and shear components are applied separately.
// This keeps all of the character's body parts in the correct
// size and shape.  However, if the hierarchy is disconnected,
// body parts can fly off.  It's essential the skeleton hierarchy
// be completely connected to use this blend mode successully.
1 16 BT_componentwise 28 PartBundle::BT_componentwise 115
// BT_componentwise linearly blends all components separately,
// including H, P, and R, and recomposes the matrix.
2 21 BT_componentwise_quat 33 PartBundle::BT_componentwise_quat 127
// BT_componentwise_quat linearly blends all components
// separately, except for rotation which is blended as a
// quaternion.
3 0 240
// This is the parameter to set_blend_type() and specifies the kind
// of blending operation to be performed when multiple controls are
// in effect simultaneously (see set_control_effect()) or between
// sequential frames of the animation.

460 14 MovingPartBase 0 141313 14 MovingPartBase 14 MovingPartBase 0 0 0 0 411 0 4 407 408 409 410 0 0 1 0 436 0 0 0 0 580
////////////////////////////////////////////////////////////////////
//       Class : MovingPartBase
// Description : This is the base class for a single animatable piece
//               that may be bound to one channel (or more, if
//               blending is in effect).  It corresponds to, for
//               instance, a single joint or slider of a character.
//
//               MovingPartBase does not have a particular value type.
//               See the derived template class, MovingPart, for this.
////////////////////////////////////////////////////////////////////

461 16 MovingPartMatrix 0 75777 16 MovingPartMatrix 16 MovingPartMatrix 0 0 0 0 415 0 1 416 0 0 1 0 462 0 0 0 0 279
////////////////////////////////////////////////////////////////////
//       Class : MovingPartMatrix
// Description : This is a particular kind of MovingPart that accepts
//               a matrix each frame.
////////////////////////////////////////////////////////////////////

462 32 MovingPart< ACMatrixSwitchType > 0 141313 32 MovingPart< ACMatrixSwitchType > 32 MovingPart< ACMatrixSwitchType > 0 0 0 0 415 0 3 412 413 414 0 0 1 0 460 0 0 0 1 443 0

463 16 MovingPartScalar 0 75777 16 MovingPartScalar 16 MovingPartScalar 0 0 0 0 420 0 1 421 0 0 1 0 464 0 0 0 0 279
////////////////////////////////////////////////////////////////////
//       Class : MovingPartScalar
// Description : This is a particular kind of MovingPart that accepts
//               a scalar each frame.
////////////////////////////////////////////////////////////////////

464 32 MovingPart< ACScalarSwitchType > 0 141313 32 MovingPart< ACScalarSwitchType > 32 MovingPart< ACScalarSwitchType > 0 0 0 0 420 0 3 417 418 419 0 0 1 0 460 0 0 0 0 0

465 16 PartBundleHandle 0 75777 16 PartBundleHandle 16 PartBundleHandle 0 0 0 1 422 0 0 2 423 424 0 0 1 0 466 0 0 0 0 890
////////////////////////////////////////////////////////////////////
//       Class : PartBundleHandle
// Description : This is a trivial class returned by
//               PartBundleNode::get_bundle().  Its purpose is to hold
//               the actual PartBundle pointer contained within the
//               PartBundleNode, so that scene graph flatten
//               operations can safely combine or duplicate
//               PartBundles as necessary without affecting high-level
//               bundle operations.
//
//               The high-level Actor class defined in
//               direct/src/actor, for instance, will store a list of
//               PartBundleHandles instead of on actual PartBundles,
//               so that it will be immune to changes from these
//               flatten operations.
////////////////////////////////////////////////////////////////////

466 14 ReferenceCount 0 2049 14 ReferenceCount 14 ReferenceCount 0 0 0 0 0 0 0 0 0 0 0 0 425
////////////////////////////////////////////////////////////////////
//       Class : ReferenceCount
// Description : A base class for all things that want to be
//               reference-counted.  ReferenceCount works in
//               conjunction with PointerTo to automatically delete
//               objects when the last pointer to them goes away.
////////////////////////////////////////////////////////////////////

467 14 PartBundleNode 0 75777 14 PartBundleNode 14 PartBundleNode 0 0 0 1 425 0 0 4 426 427 428 429 2 587 588 0 1 0 435 0 0 0 0 605
////////////////////////////////////////////////////////////////////
//       Class : PartBundleNode
// Description : This is a node that contains a pointer to an
//               PartBundle.  Like AnimBundleNode, it exists to make
//               it easy to store PartBundles in the scene graph.
//
//               (Unlike AnimBundleNode, however, PartBundleNode has
//               an additional function: it is also the base class of
//               the Character node type, which adds additional
//               functionality.)
////////////////////////////////////////////////////////////////////

468 11 AnimGroup * 0 8576 11 AnimGroup * 11 AnimGroup * 0 0 430 0 0 0 0 0 0 0 0 0 0

469 13 atomic string 0 2 13 atomic string 13 atomic string 0 7 0 0 0 0 0 0 0 0 0 0 0

470 17 AnimGroup const * 0 8576 17 AnimGroup const * 17 AnimGroup const * 0 0 471 0 0 0 0 0 0 0 0 0 0

471 15 AnimGroup const 0 8832 15 AnimGroup const 15 AnimGroup const 0 0 430 0 0 0 0 0 0 0 0 0 0

472 3 int 0 8194 3 int 3 int 0 1 0 0 0 0 0 0 0 0 0 0 0

473 4 void 0 8194 4 void 4 void 0 6 0 0 0 0 0 0 0 0 0 0 0

474 9 ostream * 0 8576 9 ostream * 9 ostream * 0 0 475 0 0 0 0 0 0 0 0 0 0

475 7 ostream 0 2048 7 ostream 7 ostream 0 0 0 0 0 0 0 0 0 0 0 0 0

476 10 TypeHandle 0 2048 10 TypeHandle 10 TypeHandle 0 0 0 0 0 0 0 0 0 0 0 0 1098
////////////////////////////////////////////////////////////////////
//       Class : TypeHandle
// Description : TypeHandle is the identifier used to differentiate
//               C++ class types.  Any C++ classes that inherit from
//               some base class, and must be differentiated at run
//               time, should store a static TypeHandle object that
//               can be queried through a static member function
//               named get_class_type().  Most of the time, it is also
//               desirable to inherit from TypedObject, which provides
//               some virtual functions to return the TypeHandle for a
//               particular instance.
//
//               At its essence, a TypeHandle is simply a unique
//               identifier that is assigned by the TypeRegistry.  The
//               TypeRegistry stores a tree of TypeHandles, so that
//               ancestry of a particular type may be queried, and the
//               type name may be retrieved for run-time display.
////////////////////////////////////////////////////////////////////

477 12 TypeHandle * 0 8576 12 TypeHandle * 12 TypeHandle * 0 0 476 0 0 0 0 0 0 0 0 0 0

478 29 TypedWritableReferenceCount * 0 8576 29 TypedWritableReferenceCount * 29 TypedWritableReferenceCount * 0 0 431 0 0 0 0 0 0 0 0 0 0

479 9 Namable * 0 8576 9 Namable * 9 Namable * 0 0 432 0 0 0 0 0 0 0 0 0 0

480 11 PN_stdfloat 0 2105344 11 PN_stdfloat 11 PN_stdfloat 0 0 481 0 0 0 0 0 0 0 0 0 0

481 5 float 0 8194 5 float 5 float 0 2 0 0 0 0 0 0 0 0 0 0 0

482 12 AnimBundle * 0 8576 12 AnimBundle * 12 AnimBundle * 0 0 433 0 0 0 0 0 0 0 0 0 0

483 18 AnimBundle const * 0 8576 18 AnimBundle const * 18 AnimBundle const * 0 0 484 0 0 0 0 0 0 0 0 0 0

484 16 AnimBundle const 0 8832 16 AnimBundle const 16 AnimBundle const 0 0 433 0 0 0 0 0 0 0 0 0 0

485 6 double 0 8194 6 double 6 double 0 3 0 0 0 0 0 0 0 0 0 0 0

486 16 AnimBundleNode * 0 8576 16 AnimBundleNode * 16 AnimBundleNode * 0 0 434 0 0 0 0 0 0 0 0 0 0

487 22 AnimBundleNode const * 0 8576 22 AnimBundleNode const * 22 AnimBundleNode const * 0 0 488 0 0 0 0 0 0 0 0 0 0

488 20 AnimBundleNode const 0 8832 20 AnimBundleNode const 20 AnimBundleNode const 0 0 434 0 0 0 0 0 0 0 0 0 0

489 11 PandaNode * 0 8576 11 PandaNode * 11 PandaNode * 0 0 435 0 0 0 0 0 0 0 0 0 0

490 11 PartGroup * 0 8576 11 PartGroup * 11 PartGroup * 0 0 436 0 0 0 0 0 0 0 0 0 0

491 17 PartGroup const * 0 8576 17 PartGroup const * 17 PartGroup const * 0 0 492 0 0 0 0 0 0 0 0 0 0

492 15 PartGroup const 0 8832 15 PartGroup const 15 PartGroup const 0 0 436 0 0 0 0 0 0 0 0 0 0

493 4 bool 0 8194 4 bool 4 bool 0 4 0 0 0 0 0 0 0 0 0 0 0

494 22 TransformState const * 0 8576 22 TransformState const * 22 TransformState const * 0 0 495 0 0 0 0 0 0 0 0 0 0

495 20 TransformState const 0 8832 20 TransformState const 20 TransformState const 0 0 496 0 0 0 0 0 0 0 0 0 0

496 14 TransformState 0 2048 14 TransformState 14 TransformState 0 0 0 0 0 0 0 0 0 0 0 0 1138
////////////////////////////////////////////////////////////////////
//       Class : TransformState
// Description : Indicates a coordinate-system transform on vertices.
//               TransformStates are the primary means for storing
//               transformations on the scene graph.
//
//               Transforms may be specified in one of two ways:
//               componentwise, with a pos-hpr-scale, or with an
//               arbitrary transform matrix.  If you specify a
//               transform componentwise, it will remember its
//               original components.
//
//               TransformState objects are managed very much like
//               RenderState objects.  They are immutable and
//               reference-counted automatically.
//
//               You should not attempt to create or modify a
//               TransformState object directly.  Instead, call one of
//               the make() functions to create one for you.  And
//               instead of modifying a TransformState object, create a
//               new one.
////////////////////////////////////////////////////////////////////

497 17 LVecBase3 const * 0 8576 17 LVecBase3 const * 17 LVecBase3 const * 0 0 498 0 0 0 0 0 0 0 0 0 0

498 15 LVecBase3 const 0 8832 15 LVecBase3 const 15 LVecBase3 const 0 0 499 0 0 0 0 0 0 0 0 0 0

499 9 LVecBase3 0 2105344 9 LVecBase3 9 LVecBase3 0 0 500 0 0 0 0 0 0 0 0 0 0

500 10 LVecBase3f 0 2048 10 LVecBase3f 10 LVecBase3f 0 0 0 0 0 0 0 0 0 0 0 0 265
////////////////////////////////////////////////////////////////////
//       Class : LVecBase3
// Description : This is the base class for all three-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

501 17 AnimChannelBase * 0 8576 17 AnimChannelBase * 17 AnimChannelBase * 0 0 441 0 0 0 0 0 0 0 0 0 0

502 19 AnimControl const * 0 8576 19 AnimControl const * 19 AnimControl const * 0 0 503 0 0 0 0 0 0 0 0 0 0

503 17 AnimControl const 0 8832 17 AnimControl const 17 AnimControl const 0 0 438 0 0 0 0 0 0 0 0 0 0

504 13 AnimControl * 0 8576 13 AnimControl * 13 AnimControl * 0 0 438 0 0 0 0 0 0 0 0 0 0

505 12 PartBundle * 0 8576 12 PartBundle * 12 PartBundle * 0 0 458 0 0 0 0 0 0 0 0 0 0

506 16 BitArray const * 0 8576 16 BitArray const * 16 BitArray const * 0 0 507 0 0 0 0 0 0 0 0 0 0

507 14 BitArray const 0 8832 14 BitArray const 14 BitArray const 0 0 508 0 0 0 0 0 0 0 0 0 0

508 8 BitArray 0 2048 8 BitArray 8 BitArray 0 0 0 0 0 0 0 0 0 0 0 0 425
////////////////////////////////////////////////////////////////////
//       Class : BitArray
// Description : A dynamic array with an unlimited number of bits.
//
//               This is similar to a BitMask, except it appears to
//               contain an infinite number of bits.  You can use it
//               very much as you would use a BitMask.
////////////////////////////////////////////////////////////////////

509 21 TypedReferenceCount * 0 8576 21 TypedReferenceCount * 21 TypedReferenceCount * 0 0 439 0 0 0 0 0 0 0 0 0 0

510 15 AnimInterface * 0 8576 15 AnimInterface * 15 AnimInterface * 0 0 440 0 0 0 0 0 0 0 0 0 0

511 23 AnimChannelBase const * 0 8576 23 AnimChannelBase const * 23 AnimChannelBase const * 0 0 512 0 0 0 0 0 0 0 0 0 0

512 21 AnimChannelBase const 0 8832 21 AnimChannelBase const 21 AnimChannelBase const 0 0 441 0 0 0 0 0 0 0 0 0 0

513 35 AnimChannel< ACMatrixSwitchType > * 0 8576 35 AnimChannel< ACMatrixSwitchType > * 35 AnimChannel< ACMatrixSwitchType > * 0 0 442 0 0 0 0 0 0 0 0 0 0

514 10 LMatrix4 * 0 8576 10 LMatrix4 * 10 LMatrix4 * 0 0 443 0 0 0 0 0 0 0 0 0 0

515 11 LVecBase3 * 0 8576 11 LVecBase3 * 11 LVecBase3 * 0 0 499 0 0 0 0 0 0 0 0 0 0

516 13 LQuaternion * 0 8576 13 LQuaternion * 13 LQuaternion * 0 0 517 0 0 0 0 0 0 0 0 0 0

517 11 LQuaternion 0 2105344 11 LQuaternion 11 LQuaternion 0 0 518 0 0 0 0 0 0 0 0 0 0

518 12 LQuaternionf 0 2048 12 LQuaternionf 12 LQuaternionf 0 0 0 0 0 0 0 0 0 0 0 0 228
////////////////////////////////////////////////////////////////////
//       Class : FLOATNAME(LQuaternion)
// Description : This is the base quaternion class
////////////////////////////////////////////////////////////////////

519 41 AnimChannel< ACMatrixSwitchType > const * 0 8576 41 AnimChannel< ACMatrixSwitchType > const * 41 AnimChannel< ACMatrixSwitchType > const * 0 0 520 0 0 0 0 0 0 0 0 0 0

520 39 AnimChannel< ACMatrixSwitchType > const 0 8832 39 AnimChannel< ACMatrixSwitchType > const 39 AnimChannel< ACMatrixSwitchType > const 0 0 442 0 0 0 0 0 0 0 0 0 0

521 35 AnimChannel< ACScalarSwitchType > * 0 8576 35 AnimChannel< ACScalarSwitchType > * 35 AnimChannel< ACScalarSwitchType > * 0 0 446 0 0 0 0 0 0 0 0 0 0

522 41 AnimChannel< ACScalarSwitchType > const * 0 8576 41 AnimChannel< ACScalarSwitchType > const * 41 AnimChannel< ACScalarSwitchType > const * 0 0 523 0 0 0 0 0 0 0 0 0 0

523 39 AnimChannel< ACScalarSwitchType > const 0 8832 39 AnimChannel< ACScalarSwitchType > const 39 AnimChannel< ACScalarSwitchType > const 0 0 446 0 0 0 0 0 0 0 0 0 0

524 26 AnimChannelMatrixDynamic * 0 8576 26 AnimChannelMatrixDynamic * 26 AnimChannelMatrixDynamic * 0 0 448 0 0 0 0 0 0 0 0 0 0

525 16 LMatrix4 const * 0 8576 16 LMatrix4 const * 16 LMatrix4 const * 0 0 526 0 0 0 0 0 0 0 0 0 0

526 14 LMatrix4 const 0 8832 14 LMatrix4 const 14 LMatrix4 const 0 0 443 0 0 0 0 0 0 0 0 0 0

527 32 AnimChannelMatrixDynamic const * 0 8576 32 AnimChannelMatrixDynamic const * 32 AnimChannelMatrixDynamic const * 0 0 528 0 0 0 0 0 0 0 0 0 0

528 30 AnimChannelMatrixDynamic const 0 8832 30 AnimChannelMatrixDynamic const 30 AnimChannelMatrixDynamic const 0 0 448 0 0 0 0 0 0 0 0 0 0

529 27 AnimChannelMatrixXfmTable * 0 8576 27 AnimChannelMatrixXfmTable * 27 AnimChannelMatrixXfmTable * 0 0 449 0 0 0 0 0 0 0 0 0 0

530 4 char 0 8194 4 char 4 char 0 5 0 0 0 0 0 0 0 0 0 0 0

531 21 CPTA_stdfloat const * 0 8576 21 CPTA_stdfloat const * 21 CPTA_stdfloat const * 0 0 532 0 0 0 0 0 0 0 0 0 0

532 19 CPTA_stdfloat const 0 8832 19 CPTA_stdfloat const 19 CPTA_stdfloat const 0 0 533 0 0 0 0 0 0 0 0 0 0

533 13 CPTA_stdfloat 0 2105344 13 CPTA_stdfloat 13 CPTA_stdfloat 0 0 534 0 0 0 0 0 0 0 0 0 0

534 10 CPTA_float 0 2105344 10 CPTA_float 10 CPTA_float 0 0 535 0 0 0 0 0 0 0 0 0 0

535 28 ConstPointerToArray< float > 0 2048 28 ConstPointerToArray< float > 28 ConstPointerToArray< float > 0 0 0 0 0 0 0 0 0 0 0 0 0

536 33 AnimChannelMatrixXfmTable const * 0 8576 33 AnimChannelMatrixXfmTable const * 33 AnimChannelMatrixXfmTable const * 0 0 537 0 0 0 0 0 0 0 0 0 0

537 31 AnimChannelMatrixXfmTable const 0 8832 31 AnimChannelMatrixXfmTable const 31 AnimChannelMatrixXfmTable const 0 0 449 0 0 0 0 0 0 0 0 0 0

538 15 CPTA_stdfloat * 0 8576 15 CPTA_stdfloat * 15 CPTA_stdfloat * 0 0 533 0 0 0 0 0 0 0 0 0 0

539 26 AnimChannelScalarDynamic * 0 8576 26 AnimChannelScalarDynamic * 26 AnimChannelScalarDynamic * 0 0 450 0 0 0 0 0 0 0 0 0 0

540 24 AnimChannelScalarTable * 0 8576 24 AnimChannelScalarTable * 24 AnimChannelScalarTable * 0 0 451 0 0 0 0 0 0 0 0 0 0

541 30 AnimChannelScalarTable const * 0 8576 30 AnimChannelScalarTable const * 30 AnimChannelScalarTable const * 0 0 542 0 0 0 0 0 0 0 0 0 0

542 28 AnimChannelScalarTable const 0 8832 28 AnimChannelScalarTable const 28 AnimChannelScalarTable const 0 0 451 0 0 0 0 0 0 0 0 0 0

543 23 AnimControlCollection * 0 8576 23 AnimControlCollection * 23 AnimControlCollection * 0 0 452 0 0 0 0 0 0 0 0 0 0

544 29 AnimControlCollection const * 0 8576 29 AnimControlCollection const * 29 AnimControlCollection const * 0 0 545 0 0 0 0 0 0 0 0 0 0

545 27 AnimControlCollection const 0 8832 27 AnimControlCollection const 27 AnimControlCollection const 0 0 452 0 0 0 0 0 0 0 0 0 0

546 18 AnimPreloadTable * 0 8576 18 AnimPreloadTable * 18 AnimPreloadTable * 0 0 453 0 0 0 0 0 0 0 0 0 0

547 24 AnimPreloadTable const * 0 8576 24 AnimPreloadTable const * 24 AnimPreloadTable const * 0 0 548 0 0 0 0 0 0 0 0 0 0

548 22 AnimPreloadTable const 0 8832 22 AnimPreloadTable const 22 AnimPreloadTable const 0 0 453 0 0 0 0 0 0 0 0 0 0

549 12 PartSubset * 0 8576 12 PartSubset * 12 PartSubset * 0 0 455 0 0 0 0 0 0 0 0 0 0

550 18 PartSubset const * 0 8576 18 PartSubset const * 18 PartSubset const * 0 0 551 0 0 0 0 0 0 0 0 0 0

551 16 PartSubset const 0 8832 16 PartSubset const 16 PartSubset const 0 0 455 0 0 0 0 0 0 0 0 0 0

552 19 GlobPattern const * 0 8576 19 GlobPattern const * 19 GlobPattern const * 0 0 553 0 0 0 0 0 0 0 0 0 0

553 17 GlobPattern const 0 8832 17 GlobPattern const 17 GlobPattern const 0 0 554 0 0 0 0 0 0 0 0 0 0

554 11 GlobPattern 0 2048 11 GlobPattern 11 GlobPattern 0 0 0 0 0 0 0 0 0 0 0 0 859
////////////////////////////////////////////////////////////////////
//       Class : GlobPattern
// Description : This class can be used to test for string matches
//               against standard Unix-shell filename globbing
//               conventions.  It serves as a portable standin for the
//               Posix fnmatch() call.
//
//               A GlobPattern is given a pattern string, which can
//               contain operators like *, ?, and [].  Then it can be
//               tested against any number of candidate strings; for
//               each candidate, it will indicate whether the string
//               matches the pattern or not.  It can be used, for
//               example, to scan a directory for all files matching a
//               particular pattern.
////////////////////////////////////////////////////////////////////

555 16 Filename const * 0 8576 16 Filename const * 16 Filename const * 0 0 556 0 0 0 0 0 0 0 0 0 0

556 14 Filename const 0 8832 14 Filename const 14 Filename const 0 0 557 0 0 0 0 0 0 0 0 0 0

557 8 Filename 0 2048 8 Filename 8 Filename 0 0 0 0 0 0 0 0 0 0 0 0 869
////////////////////////////////////////////////////////////////////
//       Class : Filename
// Description : The name of a file, such as a texture file or an Egg
//               file.  Stores the full pathname, and includes
//               functions for extracting out the directory prefix
//               part and the file extension and stuff.
//
//               A Filename is also aware of the mapping between the
//               Unix-like filename convention we use internally, and
//               the local OS's specific filename convention, and it
//               knows how to perform basic OS-specific I/O, like
//               testing for file existence and searching a
//               searchpath, as well as the best way to open an
//               fstream for reading or writing.
////////////////////////////////////////////////////////////////////

558 21 LoaderOptions const * 0 8576 21 LoaderOptions const * 21 LoaderOptions const * 0 0 559 0 0 0 0 0 0 0 0 0 0

559 19 LoaderOptions const 0 8832 19 LoaderOptions const 19 LoaderOptions const 0 0 560 0 0 0 0 0 0 0 0 0 0

560 13 LoaderOptions 0 2048 13 LoaderOptions 13 LoaderOptions 0 0 0 0 0 0 0 0 0 0 0 0 257
////////////////////////////////////////////////////////////////////
//       Class : LoaderOptions
// Description : Specifies parameters that may be passed to the
//               loader.
////////////////////////////////////////////////////////////////////

561 8 Loader * 0 8576 8 Loader * 8 Loader * 0 0 562 0 0 0 0 0 0 0 0 0 0

562 6 Loader 0 2048 6 Loader 6 Loader 0 0 0 0 0 0 0 0 0 0 0 0 819
////////////////////////////////////////////////////////////////////
//       Class : Loader
// Description : A convenient class for loading models from disk, in
//               bam or egg format (or any of a number of other
//               formats implemented by a LoaderFileType, such as
//               ptloader).
//
//               This class supports synchronous as well as
//               asynchronous loading.  In asynchronous loading, the
//               model is loaded in the background by a thread, and an
//               event will be generated when the model is available.
//               If threading is not available, the asynchronous
//               loading interface may be used, but it loads
//               synchronously.
////////////////////////////////////////////////////////////////////

563 17 BindAnimRequest * 0 8576 17 BindAnimRequest * 17 BindAnimRequest * 0 0 456 0 0 0 0 0 0 0 0 0 0

564 18 PartBundle const * 0 8576 18 PartBundle const * 18 PartBundle const * 0 0 565 0 0 0 0 0 0 0 0 0 0

565 16 PartBundle const 0 8832 16 PartBundle const 16 PartBundle const 0 0 458 0 0 0 0 0 0 0 0 0 0

566 16 PartBundleNode * 0 8576 16 PartBundleNode * 16 PartBundleNode * 0 0 467 0 0 0 0 0 0 0 0 0 0

567 22 MovingPartBase const * 0 8576 22 MovingPartBase const * 22 MovingPartBase const * 0 0 568 0 0 0 0 0 0 0 0 0 0

568 20 MovingPartBase const 0 8832 20 MovingPartBase const 20 MovingPartBase const 0 0 460 0 0 0 0 0 0 0 0 0 0

569 40 MovingPart< ACMatrixSwitchType > const * 0 8576 40 MovingPart< ACMatrixSwitchType > const * 40 MovingPart< ACMatrixSwitchType > const * 0 0 570 0 0 0 0 0 0 0 0 0 0

570 38 MovingPart< ACMatrixSwitchType > const 0 8832 38 MovingPart< ACMatrixSwitchType > const 38 MovingPart< ACMatrixSwitchType > const 0 0 462 0 0 0 0 0 0 0 0 0 0

571 40 MovingPart< ACScalarSwitchType > const * 0 8576 40 MovingPart< ACScalarSwitchType > const * 40 MovingPart< ACScalarSwitchType > const * 0 0 572 0 0 0 0 0 0 0 0 0 0

572 38 MovingPart< ACScalarSwitchType > const 0 8832 38 MovingPart< ACScalarSwitchType > const 38 MovingPart< ACScalarSwitchType > const 0 0 464 0 0 0 0 0 0 0 0 0 0

573 18 PartBundleHandle * 0 8576 18 PartBundleHandle * 18 PartBundleHandle * 0 0 465 0 0 0 0 0 0 0 0 0 0

574 22 PartBundleNode const * 0 8576 22 PartBundleNode const * 22 PartBundleNode const * 0 0 575 0 0 0 0 0 0 0 0 0 0

575 20 PartBundleNode const 0 8832 20 PartBundleNode const 20 PartBundleNode const 0 0 467 0 0 0 0 0 0 0 0 0 0

0
0
13
576 0 0 1 12 get_children 16 get_num_children 9 get_child 
577 0 0 26 11 get_parents 15 get_num_parents 10 get_parent 
578 0 0 26 12 get_children 16 get_num_children 9 get_child 
579 0 0 26 11 get_stashed 15 get_num_stashed 11 get_stashed 
580 0 0 32 12 get_children 16 get_num_children 9 get_child 
581 0 0 86 8 get_rows 4 size 7 get_row 
582 0 0 86 8 get_cols 4 size 7 get_col 
583 0 0 86 9 get_row3s 4 size 8 get_row3 
584 0 0 136 9 get_anims 13 get_num_anims 8 get_anim 
585 0 0 136 14 get_anim_names 13 get_num_anims 13 get_anim_name 
586 0 0 192 9 get_nodes 13 get_num_nodes 8 get_node 
587 0 0 251 11 get_bundles 15 get_num_bundles 10 get_bundle 
588 0 0 251 18 get_bundle_handles 15 get_num_bundles 17 get_bundle_handle 
