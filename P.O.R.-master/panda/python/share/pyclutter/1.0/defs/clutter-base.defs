;; -* scheme -*-

(include "clutter-base-types.defs")


;; From clutter-actor.h

(define-function actor_get_type
  (c-name "clutter_actor_get_type")
  (return-type "GType")
)

(define-method set_flags
  (of-object "ClutterActor")
  (c-name "clutter_actor_set_flags")
  (docstring
  "Sets flags on self This function will emit notifications for the\n"
  "changed properties\n"
  )
  (return-type "none")
  (parameters
    '("ClutterActorFlags" "flags")
  )
)

(define-method unset_flags
  (of-object "ClutterActor")
  (c-name "clutter_actor_unset_flags")
  (docstring
  "Unsets flags on self This function will emit notifications for the\n"
  "changed properties\n"
  )
  (return-type "none")
  (parameters
    '("ClutterActorFlags" "flags")
  )
)

(define-method get_flags
  (of-object "ClutterActor")
  (c-name "clutter_actor_get_flags")
  (docstring
  "Retrieves the flags set on self\n"
  )
  (return-type "ClutterActorFlags")
)

(define-method show
  (of-object "ClutterActor")
  (c-name "clutter_actor_show")
  (docstring
  "Flags an actor to be displayed. An actor that isn't shown will not be\n"
  "rendered on the stage. Actors are visible by default. If this function\n"
  "is called on an actor without a parent, the clutter.Actor:show-on-set-\n"
  "parent will be set to TRUE as a side effect.\n"
  )
  (return-type "none")
)

(define-virtual show
  (of-object "ClutterActor")
  (return-type "none")
)

(define-method show_all
  (of-object "ClutterActor")
  (c-name "clutter_actor_show_all")
  (docstring
  "Calls clutter.Actor.show() on all children of an actor (if any).\n"
  )
  (return-type "none")
)

(define-virtual show_all
  (of-object "ClutterActor")
  (return-type "none")
  (parameters
  )
)

(define-method hide
  (of-object "ClutterActor")
  (c-name "clutter_actor_hide")
  (docstring
  "Flags an actor to be hidden. A hidden actor will not be rendered on\n"
  "the stage. Actors are visible by default. If this function is called\n"
  "on an actor without a parent, the clutter.Actor:show-on-set-parent\n"
  "property will be set to FALSE as a side-effect.\n"
  )
  (return-type "none")
)

(define-method hide_all
  (of-object "ClutterActor")
  (c-name "clutter_actor_hide_all")
  (docstring
  "Calls clutter.Actor.hide() on all child actors (if any).\n"
  )
  (return-type "none")
)

(define-virtual hide_all
  (of-object "ClutterActor")
  (return-type "none")
  (parameters
  )
)

(define-method realize
  (of-object "ClutterActor")
  (c-name "clutter_actor_realize")
  (docstring
  "Creates any underlying graphics resources needed by the actor to be\n"
  "displayed. Realization means the actor is now tied to a specific\n"
  "rendering context (that is, a specific toplevel stage). This function\n"
  "does nothing if the actor is already realized. Because a realized\n"
  "actor must have realized parent actors, calling\n"
  "clutter.Actor.realize() will also realize all parents of the actor.\n"
  "This function does not realize child actors, except in the special\n"
  "case that realizing the stage, when the stage is visible, will\n"
  "suddenly map (and thus realize) the children of the stage.\n"
  )
  (return-type "none")
)

(define-virtual realize
  (of-object "ClutterActor")
  (return-type "none")
)

(define-method unrealize
  (of-object "ClutterActor")
  (c-name "clutter_actor_unrealize")
  (docstring
  "Frees up any underlying graphics resources needed by the actor to be\n"
  "displayed. Unrealization means the actor is now independent of any\n"
  "specific rendering context (is not attached to a specific toplevel\n"
  "stage). Because mapped actors must be realized, actors may not be\n"
  "unrealized if they are mapped. This function hides the actor to be\n"
  "sure it isn't mapped, an application-visible side effect that you may\n"
  "not be expecting. This function should not really be in the public\n"
  "API, because there isn't a good reason to call it. clutter.Actor will\n"
  "already unrealize things for you when it's important to do so. If you\n"
  "were using clutter.Actor.unrealize() in a dispose implementation, then\n"
  "don't, just chain up to clutter.Actor's dispose. If you were using\n"
  "clutter.Actor.unrealize() to implement unrealizing children of your\n"
  "container, then don't, clutter.Actor will already take care of that.\n"
  "If you were using clutter.Actor.unrealize() to re-realize to create\n"
  "your resources in a different way, then use _clutter.Actor.rerealize()\n"
  "(inside clutter.) or just call your code that recreates your resources\n"
  "directly (outside clutter.).\n"
  )
  (return-type "none")
)

(define-virtual unrealize
  (of-object "ClutterActor")
  (return-type "none")
)

(define-method map
  (of-object "ClutterActor")
  (c-name "clutter_actor_map")
  (docstring
  "Sets the CLUTTER_ACTOR_MAPPED flag on the actor and possibly maps and\n"
  "realizes its children if they are visible. Does nothing if the actor\n"
  "is not visible. clutter.Actor::map virtual function in an actor and\n"
  "you need to map the children of that actor. It is not necessary to\n"
  "call this if you implement clutter.Container because the default\n"
  "implementation will automatically map children of containers. When\n"
  "overriding map, it is mandatory to chain up to the parent\n"
  "implementation.\n"
  )
  (return-type "none")
)

(define-virtual map
  (of-object "ClutterActor")
  (return-type "none")
)

(define-method unmap
  (of-object "ClutterActor")
  (c-name "clutter_actor_unmap")
  (docstring
  "Unsets the CLUTTER_ACTOR_MAPPED flag on the actor and possibly unmaps\n"
  "its children if they were mapped. clutter.Actor::unmap virtual\n"
  "function in an actor and you need to unmap the children of that actor.\n"
  "It is not necessary to call this if you implement clutter.Container\n"
  "because the default implementation will automatically unmap children\n"
  "of containers. When overriding unmap, it is mandatory to chain up to\n"
  "the parent implementation.\n"
  )
  (return-type "none")
)

(define-virtual unmap
  (of-object "ClutterActor")
  (return-type "none")
)

(define-method paint
  (of-object "ClutterActor")
  (c-name "clutter_actor_paint")
  (docstring
  "Renders the actor to display. This function should not be called\n"
  "directly by applications. Call clutter.Actor.queue_redraw() to queue\n"
  "paints, instead. This function will emit the clutter.Actor::paint\n"
  "signal.\n"
  )
  (return-type "none")
)

(define-virtual paint
  (of-object "ClutterActor")
  (return-type "none")
  (parameters
  )
)

(define-virtual pick
  (of-object "ClutterActor")
  (return-type "none")
  (parameters
    '("const-ClutterColor*" "color")
  )
)

(define-method queue_redraw
  (of-object "ClutterActor")
  (c-name "clutter_actor_queue_redraw")
  (docstring
  "Queues up a redraw of an actor and any children. The redraw occurs\n"
  "once the main loop becomes idle (after the current batch of events has\n"
  "been processed, roughly). Applications rarely need to call this, as\n"
  "redraws are handled automatically by modification functions. This\n"
  "function will not do anything if self is not visible, or if the actor\n"
  "is inside an invisible part of the scenegraph. Also be aware that\n"
  "painting is a NOP for actors with an opacity of 0\n"
  )
  (return-type "none")
)

(define-virtual queue_redraw
  (of-object "ClutterActor")
  (return-type "none")
  (parameters
    '("ClutterActor*" "leaf_that_queued")
  )
)

(define-method queue_relayout
  (of-object "ClutterActor")
  (c-name "clutter_actor_queue_relayout")
  (docstring
  "Indicates that the actor's size request or other layout-affecting\n"
  "properties may have changed. This function is used inside\n"
  "clutter.Actor subclass implementations, not by applications directly.\n"
  "Queueing a new layout automatically queues a redraw as well.\n"
  )
  (return-type "none")
)

(define-method destroy
  (of-object "ClutterActor")
  (c-name "clutter_actor_destroy")
  (docstring
  "Destroys an actor.  When an actor is destroyed, it will break any\n"
  "references it holds to other objects.  If the actor is inside a\n"
  "container, the actor will be removed. When you destroy a container,\n"
  "its children will be destroyed as well. clutter.Stage.get_default().\n"
  )
  (return-type "none")
)

(define-virtual destroy
  (of-object "ClutterActor")
  (return-type "none")
)

(define-method get_preferred_width
  (of-object "ClutterActor")
  (c-name "clutter_actor_get_preferred_width")
  (docstring
  "or a negative value to indicate that no height is defined or NULL\n"
  "width, or NULL Computes the requested minimum and natural widths for\n"
  "an actor, optionally depending on the specified height, or if they are\n"
  "already computed, returns the cached values. An actor may not get its\n"
  "request - depending on the layout manager that's in effect. A request\n"
  "should not incorporate the actor's scale or anchor point; those\n"
  "transformations do not affect layout, only rendering.\n"
  )
  (return-type "none")
  (parameters
    '("gfloat" "for_height")
    '("gfloat*" "min_width_p")
    '("gfloat*" "natural_width_p")
  )
)

(define-virtual get_preferred_width
  (of-object "ClutterActor")
  (return-type "none")
  (parameters
    '("gfloat" "for_height")
    '("gfloat*" "min_width")
    '("gfloat*" "natural_width")
  )
)

(define-method get_preferred_height
  (of-object "ClutterActor")
  (c-name "clutter_actor_get_preferred_height")
  (docstring
  "or a negative value to indicate that no width is defined or NULL\n"
  "height, or NULL Computes the requested minimum and natural heights for\n"
  "an actor, or if they are already computed, returns the cached values.\n"
  "An actor may not get its request - depending on the layout manager\n"
  "that's in effect. A request should not incorporate the actor's scale\n"
  "or anchor point; those transformations do not affect layout, only\n"
  "rendering.\n"
  )
  (return-type "none")
  (parameters
    '("gfloat" "for_width")
    '("gfloat*" "min_height_p")
    '("gfloat*" "natural_height_p")
  )
)

(define-virtual get_preferred_height
  (of-object "ClutterActor")
  (return-type "none")
  (parameters
    '("gfloat" "for_width")
    '("gfloat*" "min_height_p")
    '("gfloat*" "natural_height_p")
  )
)

(define-method get_preferred_size
  (of-object "ClutterActor")
  (c-name "clutter_actor_get_preferred_size")
  (docstring
  "width, or NULL height, or NULL width, or NULL height, or NULL Computes\n"
  "the preferred minimum and natural size of an actor, taking into\n"
  "account the actor's geometry management (either height-for-width or\n"
  "width-for-height). The width and height used to compute the preferred\n"
  "height and preferred width are the actor's natural ones. If you need\n"
  "to control the height for the preferred width, or the width for the\n"
  "preferred height, you should use clutter.Actor.get_preferred_width()\n"
  "and clutter.Actor.get_preferred_height(), and check the actor's\n"
  "preferred geometry management using the clutter.Actor:request-mode\n"
  "property.\n"
  )
  (return-type "none")
  (parameters
    '("gfloat*" "min_width_p")
    '("gfloat*" "min_height_p")
    '("gfloat*" "natural_width_p")
    '("gfloat*" "natural_height_p")
  )
)

(define-method allocate
  (of-object "ClutterActor")
  (c-name "clutter_actor_allocate")
  (docstring
  "Called by the parent of an actor to assign the actor its size. Should\n"
  "never be called by applications (except when implementing a container\n"
  "or layout manager). Actors can know from their allocation box whether\n"
  "they have moved with respect to their parent actor. The flags\n"
  "parameter describes additional information about the allocation, for\n"
  "instance whether the parent has moved with respect to the stage, for\n"
  "example because a grandparent's origin has moved.\n"
  )
  (return-type "none")
  (parameters
    '("const-ClutterActorBox*" "box")
    '("ClutterAllocationFlags" "flags")
  )
)

(define-virtual allocate
  (of-object "ClutterActor")
  (return-type "none")
  (parameters
    '("const-ClutterActorBox*" "box")
    '("ClutterAllocationFlags" "flags")
  )
)

(define-method allocate_preferred_size
  (of-object "ClutterActor")
  (c-name "clutter_actor_allocate_preferred_size")
  (docstring
  "Allocates the natural size of self. This function is a utility call\n"
  "for clutter.Actor implementations that allocates the actor's preferred\n"
  "natural size. It can be used by fixed layout managers (like\n"
  "clutter.Group or so called 'composite actors') inside the\n"
  "clutter.Actor::allocate implementation to give each child exactly how\n"
  "much space it requires. This function is not meant to be used by\n"
  "applications. It is also not meant to be used outside the\n"
  "implementation of the clutter.Actor::allocate virtual function.\n"
  )
  (return-type "none")
  (parameters
    '("ClutterAllocationFlags" "flags")
  )
)

(define-method allocate_available_size
  (of-object "ClutterActor")
  (c-name "clutter_actor_allocate_available_size")
  (docstring
  "actor's natural width actor's natural height Allocates self taking\n"
  "into account the clutter.Actor<!-- -->'s preferred size, but limiting\n"
  "it to the maximum available width and height provided. This function\n"
  "will do the right thing when dealing with the actor's request mode.\n"
  "The implementation of this function is equivalent to: |[ if\n"
  "(request_mode == CLUTTER_REQUEST_HEIGHT_FOR_WIDTH) {\n"
  "clutter.Actor.get_preferred_width (self, available_height,\n"
  "&amp;min_width, &amp;natural_width); width = CLAMP (natural_width,\n"
  "min_width, available_width); clutter.Actor.get_preferred_height (self,\n"
  "width, &amp;min_height, &amp;natural_height); height = CLAMP\n"
  "(natural_height, min_height, available_height); } else {\n"
  "clutter.Actor.get_preferred_height (self, available_width,\n"
  "&amp;min_height, &amp;natural_height); height = CLAMP (natural_height,\n"
  "min_height, available_height); clutter.Actor.get_preferred_width\n"
  "(self, height, &amp;min_width, &amp;natural_width); width = CLAMP\n"
  "(natural_width, min_width, available_width); } box.x1 = x; box.y1 = y;\n"
  "box.x2 = box.x1 + available_width; box.y2 = box.y1 + available_height;\n"
  "clutter.Actor.allocate (self, &amp;box, flags); ]| This function can\n"
  "be used by fluid layout managers to allocate an actor's preferred size\n"
  "without making it bigger than the area available for the container.\n"
  )
  (return-type "none")
  (parameters
    '("gfloat" "x")
    '("gfloat" "y")
    '("gfloat" "available_width")
    '("gfloat" "available_height")
    '("ClutterAllocationFlags" "flags")
  )
)

(define-method get_allocation_box
  (of-object "ClutterActor")
  (c-name "clutter_actor_get_allocation_box")
  (docstring
  "Gets the layout box an actor has been assigned. The allocation can\n"
  "only be assumed valid inside a paint() method; anywhere else, it may\n"
  "be out-of-date. An allocation does not incorporate the actor's scale\n"
  "or anchor point; those transformations do not affect layout, only\n"
  "rendering. <note>Do not call any of the\n"
  "clutter.Actor.get_allocation_*() family of functions inside the\n"
  "implementation of the get_preferred_width() or get_preferred_height()\n"
  "virtual functions.</note>\n"
  )
  (return-type "none")
  (parameters
    '("ClutterActorBox*" "box")
  )
)

(define-method get_allocation_geometry
  (of-object "ClutterActor")
  (c-name "clutter_actor_get_allocation_geometry")
  (docstring
  "Gets the layout box an actor has been assigned.  The allocation can\n"
  "only be assumed valid inside a paint() method; anywhere else, it may\n"
  "be out-of-date. An allocation does not incorporate the actor's scale\n"
  "or anchor point; those transformations do not affect layout, only\n"
  "rendering. The returned rectangle is in pixels.\n"
  )
  (return-type "none")
  (parameters
    '("ClutterGeometry*" "geometry")
  )
)

(define-method get_allocation_vertices
  (of-object "ClutterActor")
  (c-name "clutter_actor_get_allocation_vertices")
  (docstring
  "against, or NULL to use the default clutter.Stage 4 clutter.Vertex in\n"
  "which to store the result. Calculates the transformed coordinates of\n"
  "the four corners of the actor in the plane of ancestor. The returned\n"
  "vertices relate to the clutter.ActorBox coordinates as follows:\n"
  "<itemizedlist> <listitem><para>verts[0] contains (x1,\n"
  "y1)</para></listitem> <listitem><para>verts[1] contains (x2,\n"
  "y1)</para></listitem> <listitem><para>verts[2] contains (x1,\n"
  "y2)</para></listitem> <listitem><para>verts[3] contains (x2,\n"
  "y2)</para></listitem> </itemizedlist> If ancestor is NULL the ancestor\n"
  "will be the clutter.Stage. In this case, the coordinates returned will\n"
  "be the coordinates on the stage before the projection is applied. This\n"
  "is different from the behaviour of\n"
  "clutter.Actor.get_abs_allocation_vertices().\n"
  )
  (return-type "none")
  (parameters
    '("ClutterActor*" "ancestor")
    '("ClutterVertex" "verts[4]")
  )
)

(define-method set_geometry
  (of-object "ClutterActor")
  (c-name "clutter_actor_set_geometry")
  (docstring
  "Sets the actor's fixed position and forces its minimum and natural\n"
  "size, in pixels. This means the untransformed actor will have the\n"
  "given geometry. This is the same as calling\n"
  "clutter.Actor.set_position() and clutter.Actor.set_size().\n"
  )
  (return-type "none")
  (parameters
    '("const-ClutterGeometry*" "geometry")
  )
)

(define-method get_geometry
  (of-object "ClutterActor")
  (c-name "clutter_actor_get_geometry")
  (docstring
  "Gets the size and position of an actor relative to its parent actor.\n"
  "This is the same as calling clutter.Actor.get_position() and\n"
  "clutter.Actor.get_size(). It tries to do what you mean and get the\n"
  "requested size and position if the actor's allocation is invalid.\n"
  )
  (return-type "none")
  (parameters
    '("ClutterGeometry*" "geometry")
  )
)

(define-method set_size
  (of-object "ClutterActor")
  (c-name "clutter_actor_set_size")
  (return-type "none")
  (parameters
    '("gfloat" "width")
    '("gfloat" "height")
  )
)

(define-method get_size
  (of-object "ClutterActor")
  (c-name "clutter_actor_get_size")
  (docstring
  "This function tries to do what you mean and return the size an actor\n"
  "will have. If the actor has a valid allocation, the allocation will be\n"
  "returned; otherwise, the actors natural size request will be returned.\n"
  "If you care whether you get the request vs. the allocation, you should\n"
  "probably call a different function like\n"
  "clutter.Actor.get_allocation_box() or\n"
  "clutter.Actor.get_preferred_width().\n"
  )
  (return-type "none")
  (parameters
    '("gfloat*" "width")
    '("gfloat*" "height")
  )
)

(define-method get_transformed_size
  (of-object "ClutterActor")
  (c-name "clutter_actor_get_transformed_size")
  (docstring
  "Gets the absolute size of an actor in pixels, taking into account the\n"
  "scaling factors. If the actor has a valid allocation, the allocated\n"
  "size will be used. If the actor has not a valid allocation then the\n"
  "preferred size will be transformed and returned. If you want the\n"
  "transformed allocation, see\n"
  "clutter.Actor.get_abs_allocation_vertices() instead. <note>When the\n"
  "actor (or one of its ancestors) is rotated around the X or Y axis, it\n"
  "no longer appears as on the stage as a rectangle, but as a generic\n"
  "quadrangle; in that case this function returns the size of the\n"
  "smallest rectangle that encapsulates the entire quad. Please note that\n"
  "in this case no assumptions can be made about the relative position of\n"
  "this envelope to the absolute position of the actor, as returned by\n"
  "clutter.Actor.get_transformed_position(); if you need this\n"
  "information, you need to use\n"
  "clutter.Actor.get_abs_allocation_vertices() to get the coords of the\n"
  "actual quadrangle.</note>\n"
  )
  (return-type "none")
  (parameters
    '("gfloat*" "width")
    '("gfloat*" "height")
  )
)

(define-method set_position
  (of-object "ClutterActor")
  (c-name "clutter_actor_set_position")
  (return-type "none")
  (parameters
    '("gfloat" "x")
    '("gfloat" "y")
  )
)

(define-method get_position
  (of-object "ClutterActor")
  (c-name "clutter_actor_get_position")
  (docstring
  "This function tries to do what you mean and tell you where the actor\n"
  "is, prior to any transformations. Retrieves the fixed position of an\n"
  "actor in pixels, if one has been set; otherwise, if the allocation is\n"
  "valid, returns the actor's allocated position; otherwise, returns 0,0.\n"
  "The returned position is in pixels.\n"
  )
  (return-type "none")
  (parameters
    '("gfloat*" "x")
    '("gfloat*" "y")
  )
)

(define-method get_transformed_position
  (of-object "ClutterActor")
  (c-name "clutter_actor_get_transformed_position")
  (docstring
  "Gets the absolute position of an actor, in pixels relative to the\n"
  "stage.\n"
  )
  (return-type "none")
  (parameters
    '("gfloat*" "x")
    '("gfloat*" "y")
  )
)

(define-method get_fixed_position_set
  (of-object "ClutterActor")
  (c-name "clutter_actor_get_fixed_position_set")
  (docstring
  "Checks whether an actor has a fixed position set (and will thus be\n"
  "unaffected by any layout manager).\n"
  )
  (return-type "gboolean")
)

(define-method set_fixed_position_set
  (of-object "ClutterActor")
  (c-name "clutter_actor_set_fixed_position_set")
  (docstring
  "Sets whether an actor has a fixed position set (and will thus be\n"
  "unaffected by any layout manager).\n"
  )
  (return-type "none")
  (parameters
    '("gboolean" "is_set")
  )
)

(define-method get_width
  (of-object "ClutterActor")
  (c-name "clutter_actor_get_width")
  (docstring
  "Retrieves the width of a clutter.Actor. If the actor has a valid\n"
  "allocation, this function will return the width of the allocated area\n"
  "given to the actor. If the actor does not have a valid allocation,\n"
  "this function will return the actor's natural width, that is the\n"
  "preferred width of the actor. If you care whether you get the\n"
  "preferred width or the width that has been assigned to the actor, you\n"
  "should probably call a different function like\n"
  "clutter.Actor.get_allocation_box() to retrieve the allocated size or\n"
  "clutter.Actor.get_preferred_width() to retrieve the preferred width.\n"
  "If an actor has a fixed width, for instance a width that has been\n"
  "assigned using clutter.Actor.set_width(), the width returned will be\n"
  "the same value.\n"
  )
  (return-type "gfloat")
)

(define-method get_height
  (of-object "ClutterActor")
  (c-name "clutter_actor_get_height")
  (docstring
  "Retrieves the height of a clutter.Actor. If the actor has a valid\n"
  "allocation, this function will return the height of the allocated area\n"
  "given to the actor. If the actor does not have a valid allocation,\n"
  "this function will return the actor's natural height, that is the\n"
  "preferred height of the actor. If you care whether you get the\n"
  "preferred height or the height that has been assigned to the actor,\n"
  "you should probably call a different function like\n"
  "clutter.Actor.get_allocation_box() to retrieve the allocated size or\n"
  "clutter.Actor.get_preferred_height() to retrieve the preferred height.\n"
  "If an actor has a fixed height, for instance a height that has been\n"
  "assigned using clutter.Actor.set_height(), the height returned will be\n"
  "the same value.\n"
  )
  (return-type "gfloat")
)

(define-method set_width
  (of-object "ClutterActor")
  (c-name "clutter_actor_set_width")
  (return-type "none")
  (parameters
    '("gfloat" "width")
  )
)

(define-method set_height
  (of-object "ClutterActor")
  (c-name "clutter_actor_set_height")
  (return-type "none")
  (parameters
    '("gfloat" "height")
  )
)

(define-method get_x
  (of-object "ClutterActor")
  (c-name "clutter_actor_get_x")
  (return-type "gfloat")
)

(define-method get_y
  (of-object "ClutterActor")
  (c-name "clutter_actor_get_y")
  (return-type "gfloat")
)

(define-method set_x
  (of-object "ClutterActor")
  (c-name "clutter_actor_set_x")
  (docstring
  "Sets the actor's X coordinate, relative to its parent, in pixels.\n"
  "Overrides any layout manager and forces a fixed position for the\n"
  "actor.\n"
  )
  (return-type "none")
  (parameters
    '("gfloat" "x")
  )
)

(define-method set_y
  (of-object "ClutterActor")
  (c-name "clutter_actor_set_y")
  (docstring
  "Sets the actor's Y coordinate, relative to its parent, in pixels.\n"
  "Overrides any layout manager and forces a fixed position for the\n"
  "actor.\n"
  )
  (return-type "none")
  (parameters
    '("gfloat" "y")
  )
)

(define-method set_rotation
  (of-object "ClutterActor")
  (c-name "clutter_actor_set_rotation")
  (docstring
  "Sets the rotation angle of self around the given axis. The rotation\n"
  "center coordinates used depend on the value of axis: <itemizedlist>\n"
  "<listitem><para>CLUTTER_X_AXIS requires y and z</para></listitem>\n"
  "<listitem><para>CLUTTER_Y_AXIS requires x and z</para></listitem>\n"
  "<listitem><para>CLUTTER_Z_AXIS requires x and y</para></listitem>\n"
  "</itemizedlist> The rotation coordinates are relative to the anchor\n"
  "point of the actor, set using clutter.Actor.set_anchor_point(). If no\n"
  "anchor point is set, the upper left corner is assumed as the origin.\n"
  )
  (return-type "none")
  (parameters
    '("ClutterRotateAxis" "axis")
    '("gdouble" "angle")
    '("gfloat" "x")
    '("gfloat" "y")
    '("gfloat" "z")
  )
)

(define-method set_z_rotation_from_gravity
  (of-object "ClutterActor")
  (c-name "clutter_actor_set_z_rotation_from_gravity")
  (docstring
  "Sets the rotation angle of self around the Z axis using the center\n"
  "point specified as a compass point. For example to rotate such that\n"
  "the center of the actor remains static you can use\n"
  "CLUTTER_GRAVITY_CENTER. If the actor changes size the center point\n"
  "will move accordingly.\n"
  )
  (return-type "none")
  (parameters
    '("gdouble" "angle")
    '("ClutterGravity" "gravity")
  )
)

(define-method get_rotation
  (of-object "ClutterActor")
  (c-name "clutter_actor_get_rotation")
  (docstring
  "Retrieves the angle and center of rotation on the given axis, set\n"
  "using clutter.Actor.set_rotation().\n"
  )
  (return-type "gdouble")
  (parameters
    '("ClutterRotateAxis" "axis")
    '("gfloat*" "x")
    '("gfloat*" "y")
    '("gfloat*" "z")
  )
)

(define-method get_z_rotation_gravity
  (of-object "ClutterActor")
  (c-name "clutter_actor_get_z_rotation_gravity")
  (docstring
  "Retrieves the center for the rotation around the Z axis as a compass\n"
  "direction. If the center was specified in pixels or units this will\n"
  "return CLUTTER_GRAVITY_NONE.\n"
  )
  (return-type "ClutterGravity")
)

(define-method set_opacity
  (of-object "ClutterActor")
  (c-name "clutter_actor_set_opacity")
  (docstring
  "Sets the actor's opacity, with zero being completely transparent and\n"
  "255 (0xff) being fully opaque.\n"
  )
  (return-type "none")
  (parameters
    '("guint8" "opacity")
  )
)

(define-method get_opacity
  (of-object "ClutterActor")
  (c-name "clutter_actor_get_opacity")
  (docstring
  "Retrieves the opacity value of an actor, as set by\n"
  "clutter.Actor.set_opacity(). For retrieving the absolute opacity of\n"
  "the actor inside a paint virtual function, see\n"
  "clutter.Actor.get_paint_opacity().\n"
  )
  (return-type "guint8")
)

(define-method get_paint_opacity
  (of-object "ClutterActor")
  (c-name "clutter_actor_get_paint_opacity")
  (docstring
  "Retrieves the absolute opacity of the actor, as it appears on the\n"
  "stage. This function traverses the hierarchy chain and composites the\n"
  "opacity of the actor with that of its parents. This function is\n"
  "intended for subclasses to use in the paint virtual function, to paint\n"
  "themselves with the correct opacity.\n"
  )
  (return-type "guint8")
)

(define-method get_paint_visibility
  (of-object "ClutterActor")
  (c-name "clutter_actor_get_paint_visibility")
  (docstring
  "Retrieves the 'paint' visibility of an actor recursively checking for\n"
  "non visible parents. This is by definition the same as\n"
  "CLUTTER_ACTOR_IS_MAPPED().\n"
  )
  (return-type "gboolean")
)

(define-method set_name
  (of-object "ClutterActor")
  (c-name "clutter_actor_set_name")
  (docstring
  "Sets the given name to self. The name can be used to identify a\n"
  "clutter.Actor.\n"
  )
  (return-type "none")
  (parameters
    '("const-gchar*" "name")
  )
)

(define-method get_name
  (of-object "ClutterActor")
  (c-name "clutter_actor_get_name")
  (docstring
  "Retrieves the name of self. owned by the actor and should not be\n"
  "modified or freed.\n"
  )
  (return-type "const-gchar*")
)

(define-method get_gid
  (of-object "ClutterActor")
  (c-name "clutter_actor_get_gid")
  (docstring
  "Retrieves the unique id for self.\n"
  )
  (return-type "guint32")
)

(define-method set_clip
  (of-object "ClutterActor")
  (c-name "clutter_actor_set_clip")
  (docstring
  "Sets clip area for self. The clip area is always computed from the\n"
  "upper left corner of the actor, even if the anchor point is set\n"
  "otherwise.\n"
  )
  (return-type "none")
  (parameters
    '("gfloat" "xoff")
    '("gfloat" "yoff")
    '("gfloat" "width")
    '("gfloat" "height")
  )
)

(define-method remove_clip
  (of-object "ClutterActor")
  (c-name "clutter_actor_remove_clip")
  (return-type "none")
)

(define-method has_clip
  (of-object "ClutterActor")
  (c-name "clutter_actor_has_clip")
  (docstring
  "Determines whether the actor has a clip area set or not.\n"
  )
  (return-type "gboolean")
)

(define-method get_clip
  (of-object "ClutterActor")
  (c-name "clutter_actor_get_clip")
  (docstring
  "the clip rectangle, or NULL the clip rectangle, or NULL the clip\n"
  "rectangle, or NULL the clip rectangle, or NULL Gets the clip area for\n"
  "self, if any is set\n"
  )
  (return-type "none")
  (parameters
    '("gfloat*" "xoff")
    '("gfloat*" "yoff")
    '("gfloat*" "width")
    '("gfloat*" "height")
  )
)

(define-method set_parent
  (of-object "ClutterActor")
  (c-name "clutter_actor_set_parent")
  (docstring
  "Sets the parent of self to parent.  The opposite function is\n"
  "clutter.Actor.unparent(). This function should not be used by\n"
  "applications, but by custom container actor subclasses.\n"
  )
  (return-type "none")
  (parameters
    '("ClutterActor*" "parent")
  )
)

(define-method get_parent
  (of-object "ClutterActor")
  (c-name "clutter_actor_get_parent")
  (docstring
  "Retrieves the parent of self. if no parent is set\n"
  )
  (return-type "ClutterActor*")
)

(define-method reparent
  (of-object "ClutterActor")
  (c-name "clutter_actor_reparent")
  (docstring
  "This function resets the parent actor of self.  It is logically\n"
  "equivalent to calling clutter.Actor.unparent() and\n"
  "clutter.Actor.set_parent(), but more efficiently implemented, ensures\n"
  "the child is not finalized when unparented, and emits the parent-set\n"
  "signal only one time.\n"
  )
  (return-type "none")
  (parameters
    '("ClutterActor*" "new_parent")
  )
)

(define-method unparent
  (of-object "ClutterActor")
  (c-name "clutter_actor_unparent")
  (docstring
  "Removes the parent of self. This function should not be used in\n"
  "applications.  It should be called by implementations of container\n"
  "actors, to dissociate a child from the container.\n"
  )
  (return-type "none")
)

(define-method get_stage
  (of-object "ClutterActor")
  (c-name "clutter_actor_get_stage")
  (docstring
  "Retrieves the clutter.Stage where actor is contained.\n"
  )
  (return-type "ClutterActor*")
)

(define-method raise_actor
  (of-object "ClutterActor")
  (c-name "clutter_actor_raise")
  (docstring
  "Puts self above below. Both actors must have the same parent, and the\n"
  "parent must implement the clutter.Container interface This function is\n"
  "the equivalent of clutter.Container.raise_child().\n"
  )
  (return-type "none")
  (parameters
    '("ClutterActor*" "below")
  )
)

(define-method lower_actor
  (of-object "ClutterActor")
  (c-name "clutter_actor_lower")
  (docstring
  "Puts self below above. Both actors must have the same parent, and the\n"
  "parent must implement the clutter.Container interface. This function\n"
  "is the equivalent of clutter.Container.lower_child().\n"
  )
  (return-type "none")
  (parameters
    '("ClutterActor*" "above")
  )
)

(define-method raise_top
  (of-object "ClutterActor")
  (c-name "clutter_actor_raise_top")
  (docstring
  "Raises self to the top. This function calls clutter.Actor.raise()\n"
  "internally.\n"
  )
  (return-type "none")
)

(define-method lower_bottom
  (of-object "ClutterActor")
  (c-name "clutter_actor_lower_bottom")
  (docstring
  "Lowers self to the bottom. This function calls clutter.Actor.lower()\n"
  "internally.\n"
  )
  (return-type "none")
)

(define-method set_depth
  (of-object "ClutterActor")
  (c-name "clutter_actor_set_depth")
  (docstring
  "Sets the Z coordinate of self to depth. The unit used by depth is\n"
  "dependant on the perspective setup. See also\n"
  "clutter.Stage.set_perspective().\n"
  )
  (return-type "none")
  (parameters
    '("gfloat" "depth")
  )
)

(define-method get_depth
  (of-object "ClutterActor")
  (c-name "clutter_actor_get_depth")
  (docstring
  "Retrieves the depth of self.\n"
  )
  (return-type "gfloat")
)

(define-method set_scale
  (of-object "ClutterActor")
  (c-name "clutter_actor_set_scale")
  (docstring
  "Scales an actor with the given factors. The scaling is relative to the\n"
  "scale center and the anchor point. The scale center is unchanged by\n"
  "this function and defaults to 0,0.\n"
  )
  (return-type "none")
  (parameters
    '("gdouble" "scale_x")
    '("gdouble" "scale_y")
  )
)

(define-method set_scale_full
  (of-object "ClutterActor")
  (c-name "clutter_actor_set_scale_full")
  (docstring
  "Scales an actor with the given factors around the given center point.\n"
  "The center point is specified in pixels relative to the anchor point\n"
  "(usually the top left corner of the actor).\n"
  )
  (return-type "none")
  (parameters
    '("gdouble" "scale_x")
    '("gdouble" "scale_y")
    '("gfloat" "center_x")
    '("gfloat" "center_y")
  )
)

(define-method set_scale_with_gravity
  (of-object "ClutterActor")
  (c-name "clutter_actor_set_scale_with_gravity")
  (docstring
  "direction. Scales an actor with the given factors around the given\n"
  "center point. The center point is specified as one of the compass\n"
  "directions in clutter.Gravity. For example, setting it to north will\n"
  "cause the top of the actor to remain unchanged and the rest of the\n"
  "actor to expand left, right and downwards.\n"
  )
  (return-type "none")
  (parameters
    '("gdouble" "scale_x")
    '("gdouble" "scale_y")
    '("ClutterGravity" "gravity")
  )
)

(define-method get_scale
  (of-object "ClutterActor")
  (c-name "clutter_actor_get_scale")
  (docstring
  "scale factor, or NULL. scale factor, or NULL. Retrieves an actors\n"
  "scale factors.\n"
  )
  (return-type "none")
  (parameters
    '("gdouble*" "scale_x")
    '("gdouble*" "scale_y")
  )
)

(define-method get_scale_center
  (of-object "ClutterActor")
  (c-name "clutter_actor_get_scale_center")
  (docstring
  "of the scale center, or NULL. of the scale center, or NULL. Retrieves\n"
  "the scale center coordinate in pixels relative to the top left corner\n"
  "of the actor. If the scale center was specified using a\n"
  "clutter.Gravity this will calculate the pixel offset using the current\n"
  "size of the actor.\n"
  )
  (return-type "none")
  (parameters
    '("gfloat*" "center_x")
    '("gfloat*" "center_y")
  )
)

(define-method get_scale_gravity
  (of-object "ClutterActor")
  (c-name "clutter_actor_get_scale_gravity")
  (docstring
  "Retrieves the scale center as a compass direction. If the scale center\n"
  "was specified in pixels or units this will return\n"
  "CLUTTER_GRAVITY_NONE.\n"
  )
  (return-type "ClutterGravity")
)

(define-method move_by
  (of-object "ClutterActor")
  (c-name "clutter_actor_move_by")
  (docstring
  "Moves an actor by the specified distance relative to its current\n"
  "position in pixels. This function modifies the fixed position of an\n"
  "actor and thus removes it from any layout management. Another way to\n"
  "move an actor is with an anchor point, see\n"
  "clutter.Actor.set_anchor_point().\n"
  )
  (return-type "none")
  (parameters
    '("gfloat" "dx")
    '("gfloat" "dy")
  )
)

(define-method set_reactive
  (of-object "ClutterActor")
  (c-name "clutter_actor_set_reactive")
  (docstring
  "Sets actor as reactive. Reactive actors will receive events.\n"
  )
  (return-type "none")
  (parameters
    '("gboolean" "reactive")
  )
)

(define-method get_reactive
  (of-object "ClutterActor")
  (c-name "clutter_actor_get_reactive")
  (docstring
  "Checks whether actor is marked as reactive.\n"
  )
  (return-type "gboolean")
)

(define-method event
  (of-object "ClutterActor")
  (c-name "clutter_actor_event")
  (docstring
  "This function is used to emit an event on the main stage. You should\n"
  "rarely need to use this function, except for synthetising events. if\n"
  "the actor handled the event, or FALSE if the event was not handled\n"
  )
  (return-type "gboolean")
  (parameters
    '("ClutterEvent*" "event")
    '("gboolean" "capture")
  )
)

(define-function get_actor_by_gid
  (c-name "clutter_get_actor_by_gid")
  (return-type "ClutterActor*")
  (parameters
    '("guint32" "id")
  )
)

(define-method set_shader
  (of-object "ClutterActor")
  (c-name "clutter_actor_set_shader")
  (docstring
  "Sets the clutter.Shader to be used when rendering self. If shader is\n"
  "NULL it will unset any currently set shader for the actor.\n"
  )
  (return-type "gboolean")
  (parameters
    '("ClutterShader*" "shader")
  )
)

(define-method get_shader
  (of-object "ClutterActor")
  (c-name "clutter_actor_get_shader")
  (docstring
  "Queries the currently set clutter.Shader on self. or NULL if no shader\n"
  "is set.\n"
  )
  (return-type "ClutterShader*")
)

(define-method set_shader_param
  (of-object "ClutterActor")
  (c-name "clutter_actor_set_shader_param")
  (docstring
  "Sets the value for a named parameter of the shader applied to actor.\n"
  )
  (return-type "none")
  (parameters
    '("const-gchar*" "param")
    '("const-GValue*" "value")
  )
)

(define-method set_shader_param_int
  (of-object "ClutterActor")
  (c-name "clutter_actor_set_shader_param_int")
  (docstring
  "Sets the value for a named int parameter of the shader applied to\n"
  )
  (return-type "none")
  (parameters
    '("const-gchar*" "param")
    '("gint" "value")
  )
)

(define-method set_shader_param_float
  (of-object "ClutterActor")
  (c-name "clutter_actor_set_shader_param_float")
  (docstring
  "Sets the value for a named float parameter of the shader applied to\n"
  "actor.\n"
  )
  (return-type "none")
  (parameters
    '("const-gchar*" "param")
    '("gfloat" "value")
  )
)

(define-method set_anchor_point
  (of-object "ClutterActor")
  (c-name "clutter_actor_set_anchor_point")
  (docstring
  "Sets an anchor point for self. The anchor point is a point in the\n"
  "coordinate space of an actor to which the actor position within its\n"
  "parent is relative; the default is (0, 0), i.e. the top-left corner of\n"
  "the actor.\n"
  )
  (return-type "none")
  (parameters
    '("gfloat" "anchor_x")
    '("gfloat" "anchor_y")
  )
)

(define-method move_anchor_point
  (of-object "ClutterActor")
  (c-name "clutter_actor_move_anchor_point")
  (docstring
  "Sets an anchor point for the actor, and adjusts the actor postion so\n"
  "that the relative position of the actor toward its parent remains the\n"
  "same.\n"
  )
  (return-type "none")
  (parameters
    '("gfloat" "anchor_x")
    '("gfloat" "anchor_y")
  )
)

(define-method get_anchor_point
  (of-object "ClutterActor")
  (c-name "clutter_actor_get_anchor_point")
  (docstring
  "Gets the current anchor point of the actor in pixels.\n"
  )
  (return-type "none")
  (parameters
    '("gfloat*" "anchor_x")
    '("gfloat*" "anchor_y")
  )
)

(define-method get_anchor_point_gravity
  (of-object "ClutterActor")
  (c-name "clutter_actor_get_anchor_point_gravity")
  (docstring
  "Retrieves the anchor position expressed as a clutter.Gravity. If the\n"
  "anchor point was specified using pixels or units this will return\n"
  "CLUTTER_GRAVITY_NONE.\n"
  )
  (return-type "ClutterGravity")
)

(define-method set_anchor_point_from_gravity
  (of-object "ClutterActor")
  (c-name "clutter_actor_set_anchor_point_from_gravity")
  (docstring
  "Sets an anchor point on the actor, based on the given gravity (this is\n"
  "a convenience function wrapping clutter.Actor.set_anchor_point()).\n"
  "Since version 1.0 the anchor point will be stored as a gravity so that\n"
  "if the actor changes size then the anchor point will move. For\n"
  "example, if you set the anchor point to CLUTTER_GRAVITY_SOUTH_EAST and\n"
  "later double the size of the actor, the anchor point will move to the\n"
  "bottom right.\n"
  )
  (return-type "none")
  (parameters
    '("ClutterGravity" "gravity")
  )
)

(define-method move_anchor_point_from_gravity
  (of-object "ClutterActor")
  (c-name "clutter_actor_move_anchor_point_from_gravity")
  (docstring
  "Sets an anchor point on the actor based on the given gravity,\n"
  "adjusting the actor postion so that its relative position within its\n"
  "parent remains unchanged. Since version 1.0 the anchor point will be\n"
  "stored as a gravity so that if the actor changes size then the anchor\n"
  "point will move. For example, if you set the anchor point to\n"
  "CLUTTER_GRAVITY_SOUTH_EAST and later double the size of the actor, the\n"
  "anchor point will move to the bottom right.\n"
  )
  (return-type "none")
  (parameters
    '("ClutterGravity" "gravity")
  )
)

(define-method transform_stage_point
  (of-object "ClutterActor")
  (c-name "clutter_actor_transform_stage_point")
  (return-type "gboolean")
  (parameters
    '("gfloat" "x")
    '("gfloat" "y")
    '("gfloat*" "x_out")
    '("gfloat*" "y_out")
  )
)

(define-method is_rotated
  (of-object "ClutterActor")
  (c-name "clutter_actor_is_rotated")
  (docstring
  "Checks whether any rotation is applied to the actor.\n"
  )
  (return-type "gboolean")
)

(define-method is_scaled
  (of-object "ClutterActor")
  (c-name "clutter_actor_is_scaled")
  (docstring
  "Checks whether the actor is scaled in either dimension.\n"
  )
  (return-type "gboolean")
)

(define-method should_pick_paint
  (of-object "ClutterActor")
  (c-name "clutter_actor_should_pick_paint")
  (docstring
  "Should be called inside the implementation of the clutter.Actor::pick\n"
  "virtual function in order to check whether the actor should paint\n"
  "itself in pick mode or not. This function should never be called\n"
  "directly by applications. FALSE otherwise\n"
  )
  (return-type "gboolean")
)

(define-method get_abs_allocation_vertices
  (of-object "ClutterActor")
  (c-name "clutter_actor_get_abs_allocation_vertices")
  (docstring
  "of 4 clutter.Vertex where to store the result. Calculates the\n"
  "transformed screen coordinates of the four corners of the actor; the\n"
  "returned vertices relate to the clutter.ActorBox coordinates  as\n"
  "follows: <itemizedlist> <listitem><para>v[0] contains (x1,\n"
  "y1)</para></listitem> <listitem><para>v[1] contains (x2,\n"
  "y1)</para></listitem> <listitem><para>v[2] contains (x1,\n"
  "y2)</para></listitem> <listitem><para>v[3] contains (x2,\n"
  "y2)</para></listitem> </itemizedlist>\n"
  )
  (return-type "none")
  (parameters
    '("ClutterVertex" "verts[4]")
  )
)

(define-method apply_transform_to_point
  (of-object "ClutterActor")
  (c-name "clutter_actor_apply_transform_to_point")
  (docstring
  "Transforms point in coordinates relative to the actor into screen-\n"
  "relative coordinates with the current actor transformation (i.e.\n"
  "scale, rotation, etc)\n"
  )
  (return-type "none")
  (parameters
    '("const-ClutterVertex*" "point")
    '("ClutterVertex*" "vertex")
  )
)

(define-method apply_relative_transform_to_point
  (of-object "ClutterActor")
  (c-name "clutter_actor_apply_relative_transform_to_point")
  (docstring
  "default clutter.Stage Transforms point in coordinates relative to the\n"
  "actor into ancestor-relative coordinates using the relevant transform\n"
  "stack (i.e. scale, rotation, etc). If ancestor is NULL the ancestor\n"
  "will be the clutter.Stage. In this case, the coordinates returned will\n"
  "be the coordinates on the stage before the projection is applied. This\n"
  "is different from the behaviour of\n"
  "clutter.Actor.apply_transform_to_point().\n"
  )
  (return-type "none")
  (parameters
    '("ClutterActor*" "ancestor")
    '("const-ClutterVertex*" "point")
    '("ClutterVertex*" "vertex")
  )
)

(define-method grab_key_focus
  (of-object "ClutterActor")
  (c-name "clutter_actor_grab_key_focus")
  (docstring
  "Sets the key focus of the clutter.Stage including self to this\n"
  "clutter.Actor.\n"
  )
  (return-type "none")
)

(define-method get_pango_context
  (of-object "ClutterActor")
  (c-name "clutter_actor_get_pango_context")
  (docstring
  "Retrieves the PangoContext for self. The actor's PangoContext is\n"
  "already configured using the appropriate font map, resolution and font\n"
  "options. Unlike clutter.Actor.create_pango_context(), this context is\n"
  "owend by the clutter.Actor and it will be updated each time the\n"
  "options stored by the clutter.Backend change. You can use the returned\n"
  "PangoContext to create a PangoLayout and render text using\n"
  "cogl_pango_render_layout() to reuse the glyphs cache also used by\n"
  "clutter.. The returned PangoContext is owned by the actor and should\n"
  "not be unreferenced by the application code\n"
  )
  (return-type "PangoContext*")
)

(define-method create_pango_context
  (of-object "ClutterActor")
  (c-name "clutter_actor_create_pango_context")
  (docstring
  "Creates a PangoContext for the given actor. The PangoContext is\n"
  "already configured using the appropriate font map, resolution and font\n"
  "options. See also clutter.Actor.get_pango_context(). on the returned\n"
  "value to deallocate its resources\n"
  )
  (return-type "PangoContext*")
)

(define-method create_pango_layout
  (of-object "ClutterActor")
  (c-name "clutter_actor_create_pango_layout")
  (docstring
  "Creates a new PangoLayout from the same PangoContext used by the\n"
  "clutter.Actor. The PangoLayout is already configured with the font\n"
  "map, resolution and font options, and the given text. If you want to\n"
  "keep around a PangoLayout created by this function you will have to\n"
  "connect to the clutter.Backend::font-changed and clutter.Backend\n"
  "::resolution-changed signals, and call pango_layout_context_changed()\n"
  "in response to them. when done\n"
  )
  (return-type "PangoLayout*")
  (parameters
    '("const-gchar*" "text")
  )
)

(define-method get_transformation_matrix
  (of-object "ClutterActor")
  (c-name "clutter_actor_get_transformation_matrix")
  (docstring
  "Retrieves the transformations applied to self\n"
  )
  (return-type "none")
  (parameters
    '("CoglMatrix*" "matrix")
  )
)

(define-method is_in_clone_paint
  (of-object "ClutterActor")
  (c-name "clutter_actor_is_in_clone_paint")
  (docstring
  "Checks whether self is being currently painted by a clutter.Clone This\n"
  "function is useful only inside the ::paint virtual function\n"
  "implementations or within handlers for the clutter.Actor::paint signal\n"
  "This function should not be used by applications by a clutter.Clone,\n"
  "and FALSE otherwise\n"
  )
  (return-type "gboolean")
)

(define-virtual parent_set
  (of-object "ClutterActor")
  (return-type "none")
  (parameters
    '("ClutterActor*" "old_parent")
  )
)

(define-virtual apply_transform
  (of-object "ClutterActor")
  (return-type "none")
  (parameters
    '("CoglMatrix*" "matrix")
  )
)



;; From clutter-alpha.h

(define-function alpha_get_type
  (c-name "clutter_alpha_get_type")
  (return-type "GType")
)

(define-function alpha_new
  (c-name "clutter_alpha_new")
  (is-constructor-of "ClutterAlpha")
  (return-type "ClutterAlpha*")
  (properties
    '("timeline" (optional))
    '("mode" (optional))
  )
)

(define-function alpha_new_full
  (c-name "clutter_alpha_new_full")
  (return-type "ClutterAlpha*")
  (parameters
    '("ClutterTimeline*" "timeline")
    '("gulong" "mode")
  )
)

(define-function alpha_new_with_func
  (c-name "clutter_alpha_new_with_func")
  (return-type "ClutterAlpha*")
  (parameters
    '("ClutterTimeline*" "timeline")
    '("ClutterAlphaFunc" "func")
    '("gpointer" "data")
    '("GDestroyNotify" "destroy")
  )
)

(define-method get_alpha
  (of-object "ClutterAlpha")
  (c-name "clutter_alpha_get_alpha")
  (docstring
  "Query the current alpha value.\n"
  )
  (return-type "gdouble")
)

(define-method set_func
  (of-object "ClutterAlpha")
  (c-name "clutter_alpha_set_func")
  (docstring
  "Sets the clutter.AlphaFunc function used to compute the alpha value at\n"
  "each frame of the clutter.Timeline bound to alpha. This function will\n"
  "not register func as a global alpha function.\n"
  )
  (return-type "none")
  (parameters
    '("ClutterAlphaFunc" "func")
    '("gpointer" "data")
    '("GDestroyNotify" "destroy")
  )
)

(define-method set_closure
  (of-object "ClutterAlpha")
  (c-name "clutter_alpha_set_closure")
  (docstring
  "Sets the GClosure used to compute the alpha value at each frame of the\n"
  "clutter.Timeline bound to alpha.\n"
  )
  (return-type "none")
  (parameters
    '("GClosure*" "closure")
  )
)

(define-method set_timeline
  (of-object "ClutterAlpha")
  (c-name "clutter_alpha_set_timeline")
  (docstring
  "Binds alpha to timeline.\n"
  )
  (return-type "none")
  (parameters
    '("ClutterTimeline*" "timeline")
  )
)

(define-method get_timeline
  (of-object "ClutterAlpha")
  (c-name "clutter_alpha_get_timeline")
  (docstring
  "Gets the clutter.Timeline bound to alpha.\n"
  )
  (return-type "ClutterTimeline*")
)

(define-method set_mode
  (of-object "ClutterAlpha")
  (c-name "clutter_alpha_set_mode")
  (docstring
  "Sets the progress function of alpha using the symbolic value of mode,\n"
  "as taken by the clutter.AnimationMode enumeration or using the value\n"
  "returned by clutter.Alpha.register_func().\n"
  )
  (return-type "none")
  (parameters
    '("gulong" "mode")
  )
)

(define-method get_mode
  (of-object "ClutterAlpha")
  (c-name "clutter_alpha_get_mode")
  (docstring
  "Retrieves the clutter.AnimationMode used by alpha.\n"
  )
  (return-type "gulong")
)

(define-function alpha_register_func
  (c-name "clutter_alpha_register_func")
  (return-type "gulong")
  (parameters
    '("ClutterAlphaFunc" "func")
    '("gpointer" "data")
  )
)

(define-function alpha_register_closure
  (c-name "clutter_alpha_register_closure")
  (return-type "gulong")
  (parameters
    '("GClosure*" "closure")
  )
)



;; From clutter-cairo-texture.h

(define-function cairo_texture_get_type
  (c-name "clutter_cairo_texture_get_type")
  (return-type "GType")
)

(define-function cairo_texture_new
  (c-name "clutter_cairo_texture_new")
  (is-constructor-of "ClutterCairoTexture")
  (return-type "ClutterActor*")
  (properties
    '("surface-width" (argname "width"))
    '("surface-height" (argname "height"))
  )
)

(define-method cairo_create_region
  (of-object "ClutterCairoTexture")
  (c-name "clutter_cairo_texture_create_region")
  (docstring
  "Creates a new Cairo context that will updat the region defined by\n"
  "x_offset, y_offset, width and height. <warning><para>Do not call this\n"
  "function within the paint virtual function or from a callback to the\n"
  "clutter.Actor::paint signal.</para></warning> to upload the contents\n"
  "of the context when done drawing\n"
  )
  (return-type "cairo_t*")
  (parameters
    '("gint" "x_offset")
    '("gint" "y_offset")
    '("gint" "width")
    '("gint" "height")
  )
)

(define-method cairo_create
  (of-object "ClutterCairoTexture")
  (c-name "clutter_cairo_texture_create")
  (return-type "cairo_t*")
)

(define-method set_surface_size
  (of-object "ClutterCairoTexture")
  (c-name "clutter_cairo_texture_set_surface_size")
  (docstring
  "Resizes the Cairo surface used by self to width and height.\n"
  )
  (return-type "none")
  (parameters
    '("guint" "width")
    '("guint" "height")
  )
)

(define-method get_surface_size
  (of-object "ClutterCairoTexture")
  (c-name "clutter_cairo_texture_get_surface_size")
  (docstring
  "Retrieves the surface width and height for self.\n"
  )
  (return-type "none")
  (parameters
    '("guint*" "width")
    '("guint*" "height")
  )
)

(define-method clear
  (of-object "ClutterCairoTexture")
  (c-name "clutter_cairo_texture_clear")
  (docstring
  "Clears self's internal drawing surface, so that the next upload will\n"
  "replace the previous contents of the clutter.CairoTexture rather than\n"
  "adding to it.\n"
  )
  (return-type "none")
)

(define-function cairo_set_source_color
  (c-name "clutter_cairo_set_source_color")
  (docstring
  "Utility function for setting the source color of cr using a\n"
  "clutter.Color.\n"
  )
  (return-type "none")
  (parameters
    '("cairo_t*" "cr")
    '("const-ClutterColor*" "color")
  )
)



;; From clutter-backend.h

(define-function backend_get_type
  (c-name "clutter_backend_get_type")
  (return-type "GType")
)

(define-function backend_get_default
  (c-name "clutter_get_default_backend")
  (docstring
  "Retrieves the default clutter.Backend used by clutter.. The\n"
  "clutter.Backend holds backend-specific configuration options. not ref\n"
  "or unref the returned object. Applications should rarely need to use\n"
  "this.\n"
  )
  (return-type "ClutterBackend*")
)

(define-method set_resolution
  (of-object "ClutterBackend")
  (c-name "clutter_backend_set_resolution")
  (docstring
  "actually involved; the terminology is conventional). Sets the\n"
  "resolution for font handling on the screen. This is a scale factor\n"
  "between points specified in a PangoFontDescription and cairo units.\n"
  "The default value is 96, meaning that a 10 point font will be 13 units\n"
  "high. (10 * 96. / 72. = 13.3). Applications should never need to call\n"
  "this function.\n"
  )
  (return-type "none")
  (parameters
    '("gdouble" "dpi")
  )
)

(define-method get_resolution
  (of-object "ClutterBackend")
  (c-name "clutter_backend_get_resolution")
  (docstring
  "Gets the resolution for font handling on the screen; see\n"
  "clutter.Backend.set_resolution() for full details. has been set.\n"
  )
  (return-type "gdouble")
)

(define-method set_double_click_time
  (of-object "ClutterBackend")
  (c-name "clutter_backend_set_double_click_time")
  (docstring
  "Sets the maximum time between two button press events, used to verify\n"
  "whether it's a double click event or not.\n"
  )
  (return-type "none")
  (parameters
    '("guint" "msec")
  )
)

(define-method get_double_click_time
  (of-object "ClutterBackend")
  (c-name "clutter_backend_get_double_click_time")
  (docstring
  "Gets the maximum time between two button press events, as set by\n"
  "clutter.Backend.set_double_click_time().\n"
  )
  (return-type "guint")
)

(define-method set_double_click_distance
  (of-object "ClutterBackend")
  (c-name "clutter_backend_set_double_click_distance")
  (docstring
  "Sets the maximum distance used to verify a double click event.\n"
  )
  (return-type "none")
  (parameters
    '("guint" "distance")
  )
)

(define-method get_double_click_distance
  (of-object "ClutterBackend")
  (c-name "clutter_backend_get_double_click_distance")
  (docstring
  "Retrieves the distance used to verify a double click event\n"
  )
  (return-type "guint")
)

(define-method set_font_options
  (of-object "ClutterBackend")
  (c-name "clutter_backend_set_font_options")
  (docstring
  "Sets the new font options for backend. The clutter.Backend will copy\n"
  "the cairo_font_options_t. If options is NULL, the first following call\n"
  "to clutter.Backend.get_font_options() will return the default font\n"
  "options for backend. This function is intended for actors creating a\n"
  "Pango layout using the PangoCairo API.\n"
  )
  (return-type "none")
  (parameters
    '("cairo_font_options_t*" "options")
  )
)

(define-method get_font_options
  (of-object "ClutterBackend")
  (c-name "clutter_backend_get_font_options")
  (docstring
  "Retrieves the font options for backend. The returned\n"
  "cairo_font_options_t is owned by the backend and should not be\n"
  "modified or freed\n"
  )
  (return-type "cairo_font_options_t*")
)

(define-method set_font_name
  (of-object "ClutterBackend")
  (c-name "clutter_backend_set_font_name")
  (docstring
  "Sets the default font to be used by clutter.. The font_name string\n"
  "must either be NULL, which means that the font name from the default\n"
  "clutter.Backend will be used; or be something that can be parsed by\n"
  "the pango_font_description_from_string() function.\n"
  )
  (return-type "none")
  (parameters
    '("const-gchar*" "font_name")
  )
)

(define-method get_font_name
  (of-object "ClutterBackend")
  (c-name "clutter_backend_get_font_name")
  (docstring
  "Retrieves the default font name as set by\n"
  "clutter.Backend.set_font_name(). owned by the clutter.Backend and\n"
  "should never be modified or freed\n"
  )
  (return-type "const-gchar*")
)



;; From clutter-behaviour-depth.h

(define-function behaviour_depth_get_type
  (c-name "clutter_behaviour_depth_get_type")
  (return-type "GType")
)

(define-function behaviour_depth_new
  (c-name "clutter_behaviour_depth_new")
  (is-constructor-of "ClutterBehaviourDepth")
  (return-type "ClutterBehaviour*")
  (properties
    '("alpha" (optional))
    '("depth_start")
    '("depth_end")
  )
)

(define-method set_bounds
  (of-object "ClutterBehaviourDepth")
  (c-name "clutter_behaviour_depth_set_bounds")
  (docstring
  "Sets the boundaries of the behaviour.\n"
  )
  (return-type "none")
  (parameters
    '("gint" "depth_start")
    '("gint" "depth_end")
  )
)

(define-method get_bounds
  (of-object "ClutterBehaviourDepth")
  (c-name "clutter_behaviour_depth_get_bounds")
  (docstring
  "Gets the boundaries of the behaviour\n"
  )
  (return-type "none")
  (parameters
    '("gint*" "depth_start")
    '("gint*" "depth_end")
  )
)



;; From clutter-behaviour-ellipse.h

(define-function behaviour_ellipse_get_type
  (c-name "clutter_behaviour_ellipse_get_type")
  (return-type "GType")
)

(define-function behaviour_ellipse_new
  (c-name "clutter_behaviour_ellipse_new")
  (is-constructor-of "ClutterBehaviourEllipse")
  (return-type "ClutterBehaviour*")
  (parameters
    '("ClutterAlpha*" "alpha")
    '("gint" "x")
    '("gint" "y")
    '("gint" "width")
    '("gint" "height")
    '("gdouble" "start")
    '("gdouble" "end")
  )
)

(define-method set_center
  (of-object "ClutterBehaviourEllipse")
  (c-name "clutter_behaviour_ellipse_set_center")
  (docstring
  "Sets the center of the elliptical path to the point represented by\n"
  "knot.\n"
  )
  (return-type "none")
  (parameters
    '("gint" "x")
    '("gint" "y")
  )
)

(define-method get_center
  (of-object "ClutterBehaviourEllipse")
  (c-name "clutter_behaviour_ellipse_get_center")
  (docstring
  "Gets the center of the elliptical path path.\n"
  )
  (return-type "none")
  (parameters
    '("gint*" "x")
    '("gint*" "y")
  )
)

(define-method set_width
  (of-object "ClutterBehaviourEllipse")
  (c-name "clutter_behaviour_ellipse_set_width")
  (docstring
  "Sets the width of the elliptical path.\n"
  )
  (return-type "none")
  (parameters
    '("gint" "width")
  )
)

(define-method get_width
  (of-object "ClutterBehaviourEllipse")
  (c-name "clutter_behaviour_ellipse_get_width")
  (docstring
  "Gets the width of the elliptical path.\n"
  )
  (return-type "gint")
)

(define-method set_height
  (of-object "ClutterBehaviourEllipse")
  (c-name "clutter_behaviour_ellipse_set_height")
  (docstring
  "Sets the height of the elliptical path.\n"
  )
  (return-type "none")
  (parameters
    '("gint" "height")
  )
)

(define-method get_height
  (of-object "ClutterBehaviourEllipse")
  (c-name "clutter_behaviour_ellipse_get_height")
  (docstring
  "Gets the height of the elliptical path.\n"
  )
  (return-type "gint")
)

(define-method set_angle_start
  (of-object "ClutterBehaviourEllipse")
  (c-name "clutter_behaviour_ellipse_set_angle_start")
  (docstring
  "Sets the angle at which movement starts; angles >= 360 degress get\n"
  "clamped to the canonical interval <0, 360).\n"
  )
  (return-type "none")
  (parameters
    '("gdouble" "angle_start")
  )
)

(define-method get_angle_start
  (of-object "ClutterBehaviourEllipse")
  (c-name "clutter_behaviour_ellipse_get_angle_start")
  (docstring
  "Gets the angle at which movements starts.\n"
  )
  (return-type "gdouble")
)

(define-method set_angle_end
  (of-object "ClutterBehaviourEllipse")
  (c-name "clutter_behaviour_ellipse_set_angle_end")
  (docstring
  "Sets the angle at which movement ends; angles >= 360 degress get\n"
  "clamped to the canonical interval <0, 360).\n"
  )
  (return-type "none")
  (parameters
    '("gdouble" "angle_end")
  )
)

(define-method get_angle_end
  (of-object "ClutterBehaviourEllipse")
  (c-name "clutter_behaviour_ellipse_get_angle_end")
  (docstring
  "Gets the at which movements ends.\n"
  )
  (return-type "gdouble")
)

(define-method set_angle_tilt
  (of-object "ClutterBehaviourEllipse")
  (c-name "clutter_behaviour_ellipse_set_angle_tilt")
  (docstring
  "degrees. Sets the angle at which the ellipse should be tilted around\n"
  "it's center.\n"
  )
  (return-type "none")
  (parameters
    '("ClutterRotateAxis" "axis")
    '("gdouble" "angle_tilt")
  )
)

(define-method get_angle_tilt
  (of-object "ClutterBehaviourEllipse")
  (c-name "clutter_behaviour_ellipse_get_angle_tilt")
  (docstring
  "Gets the tilt of the ellipse around the center in the given axis.\n"
  )
  (return-type "gdouble")
  (parameters
    '("ClutterRotateAxis" "axis")
  )
)

(define-method set_tilt
  (of-object "ClutterBehaviourEllipse")
  (c-name "clutter_behaviour_ellipse_set_tilt")
  (docstring
  "Sets the angles at which the ellipse should be tilted around it's\n"
  "center.\n"
  )
  (return-type "none")
  (parameters
    '("gdouble" "angle_tilt_x")
    '("gdouble" "angle_tilt_y")
    '("gdouble" "angle_tilt_z")
  )
)

(define-method get_tilt
  (of-object "ClutterBehaviourEllipse")
  (c-name "clutter_behaviour_ellipse_get_tilt")
  (docstring
  "Gets the tilt of the ellipse around the center in Y axis.\n"
  )
  (return-type "none")
  (parameters
    '("gdouble*" "angle_tilt_x")
    '("gdouble*" "angle_tilt_y")
    '("gdouble*" "angle_tilt_z")
  )
)

(define-method get_direction
  (of-object "ClutterBehaviourEllipse")
  (c-name "clutter_behaviour_ellipse_get_direction")
  (docstring
  "Retrieves the clutter.RotateDirection used by the ellipse behaviour.\n"
  )
  (return-type "ClutterRotateDirection")
)

(define-method set_direction
  (of-object "ClutterBehaviourEllipse")
  (c-name "clutter_behaviour_ellipse_set_direction")
  (docstring
  "Sets the rotation direction used by the ellipse behaviour.\n"
  )
  (return-type "none")
  (parameters
    '("ClutterRotateDirection" "direction")
  )
)



;; From clutter-behaviour.h

(define-function behaviour_get_type
  (c-name "clutter_behaviour_get_type")
  (return-type "GType")
)

(define-method apply
  (of-object "ClutterBehaviour")
  (c-name "clutter_behaviour_apply")
  (docstring
  "Applies behave to actor.  This function adds a reference on the actor.\n"
  )
  (return-type "none")
  (parameters
    '("ClutterActor*" "actor")
  )
)

(define-method remove
  (of-object "ClutterBehaviour")
  (c-name "clutter_behaviour_remove")
  (docstring
  "Removes actor from the list of clutter.Actor<!-- -->s to which\n"
  )
  (return-type "none")
  (parameters
    '("ClutterActor*" "actor")
  )
)

(define-method remove_all
  (of-object "ClutterBehaviour")
  (c-name "clutter_behaviour_remove_all")
  (docstring
  "Removes every actor from the list that behave holds.\n"
  )
  (return-type "none")
)

(define-method actors_foreach
  (of-object "ClutterBehaviour")
  (c-name "clutter_behaviour_actors_foreach")
  (docstring
  "Calls func for every actor driven by behave.\n"
  )
  (return-type "none")
  (parameters
    '("ClutterBehaviourForeachFunc" "func")
    '("gpointer" "data")
  )
)

(define-method get_n_actors
  (of-object "ClutterBehaviour")
  (c-name "clutter_behaviour_get_n_actors")
  (docstring
  "Gets the number of actors this behaviour is applied too.\n"
  )
  (return-type "gint")
)

(define-method get_nth_actor
  (of-object "ClutterBehaviour")
  (c-name "clutter_behaviour_get_nth_actor")
  (docstring
  "Gets an actor the behaviour was applied to referenced by index num.\n"
  )
  (return-type "ClutterActor*")
  (parameters
    '("gint" "index_")
  )
)

(define-method get_actors
  (of-object "ClutterBehaviour")
  (c-name "clutter_behaviour_get_actors")
  (docstring
  "Retrieves all the actors to which behave applies. It is not\n"
  "recommended for derived classes to use this in there alpha notify\n"
  "method but use clutter.Behaviour.actors_foreach as it avoids alot of\n"
  "needless allocations. actors. You should free the returned list with\n"
  "g_slist_free() when finished using it.\n"
  )
  (return-type "GSList*")
)

(define-method get_alpha
  (of-object "ClutterBehaviour")
  (c-name "clutter_behaviour_get_alpha")
  (docstring
  "Retrieves the clutter.Alpha object bound to behave. object has been\n"
  "bound to this behaviour.\n"
  )
  (return-type "ClutterAlpha*")
)

(define-method set_alpha
  (of-object "ClutterBehaviour")
  (c-name "clutter_behaviour_set_alpha")
  (docstring
  "Binds alpha to a clutter.Behaviour. The clutter.Alpha object used by\n"
  "clutter.Alpha a new value of the alpha parameter is computed by the\n"
  "alpha function; the value should be used by the clutter.Behaviour to\n"
  "update one or more properties of the actors to which the behaviour\n"
  "applies. If alpha is not NULL, the clutter.Behaviour will take\n"
  "ownership of the clutter.Alpha instance.\n"
  )
  (return-type "none")
  (parameters
    '("ClutterAlpha*" "alpha")
  )
)

(define-method is_applied
  (of-object "ClutterBehaviour")
  (c-name "clutter_behaviour_is_applied")
  (docstring
  "Check if behave applied to  actor.\n"
  )
  (return-type "gboolean")
  (parameters
    '("ClutterActor*" "actor")
  )
)

(define-virtual alpha_notify
  (of-object "ClutterBehaviour")
  (return-type "none")
  (parameters
    '("guint32" "alpha_value")
  )
)



;; From clutter-behaviour-opacity.h

(define-function behaviour_opacity_get_type
  (c-name "clutter_behaviour_opacity_get_type")
  (return-type "GType")
)

(define-function behaviour_opacity_new
  (c-name "clutter_behaviour_opacity_new")
  (is-constructor-of "ClutterBehaviourOpacity")
  (return-type "ClutterBehaviour*")
  (properties
    '("alpha" (optional))
    '("opacity_start")
    '("opacity_end")
  )
)

(define-method set_bounds
  (of-object "ClutterBehaviourOpacity")
  (c-name "clutter_behaviour_opacity_set_bounds")
  (docstring
  "Sets the initial and final levels of the opacity applied by behaviour\n"
  "on each actor it controls.\n"
  )
  (return-type "none")
  (parameters
    '("guint8" "opacity_start")
    '("guint8" "opacity_end")
  )
)

(define-method get_bounds
  (of-object "ClutterBehaviourOpacity")
  (c-name "clutter_behaviour_opacity_get_bounds")
  (docstring
  "Gets the initial and final levels of the opacity applied by behaviour\n"
  "on each actor it controls.\n"
  )
  (return-type "none")
  (parameters
    '("guint8*" "opacity_start")
    '("guint8*" "opacity_end")
  )
)



;; From clutter-behaviour-path.h

(define-function behaviour_path_get_type
  (c-name "clutter_behaviour_path_get_type")
  (return-type "GType")
)

(define-function behaviour_path_new
  (c-name "clutter_behaviour_path_new")
  (is-constructor-of "ClutterBehaviourPath")
  (return-type "ClutterBehaviour*")
  (properties
    '("alpha" (optional))
    '("path")
  )
)

(define-function behaviour_path_new_with_description
  (c-name "clutter_behaviour_path_new_with_description")
  (return-type "ClutterBehaviour*")
  (parameters
    '("ClutterAlpha*" "alpha")
    '("const-gchar*" "desc")
  )
)

(define-function behaviour_path_new_with_knots
  (c-name "clutter_behaviour_path_new_with_knots")
  (return-type "ClutterBehaviour*")
  (parameters
    '("ClutterAlpha*" "alpha")
    '("const-ClutterKnot*" "knots")
    '("guint" "n_knots")
  )
)

(define-method set_path
  (of-object "ClutterBehaviourPath")
  (c-name "clutter_behaviour_path_set_path")
  (docstring
  "Change the path that the actors will follow. This will take the\n"
  "floating reference on the clutter.Path so you do not need to unref it.\n"
  )
  (return-type "none")
  (parameters
    '("ClutterPath*" "path")
  )
)

(define-method get_path
  (of-object "ClutterBehaviourPath")
  (c-name "clutter_behaviour_path_get_path")
  (docstring
  "Get the current path of the behaviour\n"
  )
  (return-type "ClutterPath*")
)



;; From clutter-behaviour-rotate.h

(define-function behaviour_rotate_get_type
  (c-name "clutter_behaviour_rotate_get_type")
  (return-type "GType")
)

(define-function behaviour_rotate_new
  (c-name "clutter_behaviour_rotate_new")
  (is-constructor-of "ClutterBehaviourRotate")
  (return-type "ClutterBehaviour*")
  (properties
    '("alpha" (optional))
    '("axis")
    '("direction" (optional))
    '("angle_start")
    '("angle_end")
  )
)

(define-method get_center
  (of-object "ClutterBehaviourRotate")
  (c-name "clutter_behaviour_rotate_get_center")
  (docstring
  "Retrieves the center of rotation set using\n"
  "clutter.Behaviour.rotate_set_center().\n"
  )
  (return-type "none")
  (parameters
    '("gint*" "x")
    '("gint*" "y")
    '("gint*" "z")
  )
)

(define-method set_center
  (of-object "ClutterBehaviourRotate")
  (c-name "clutter_behaviour_rotate_set_center")
  (docstring
  "Sets the center of rotation. The coordinates are relative to the plane\n"
  "normal to the rotation axis set with\n"
  "clutter.Behaviour.rotate_set_axis().\n"
  )
  (return-type "none")
  (parameters
    '("gint" "x")
    '("gint" "y")
    '("gint" "z")
  )
)

(define-method get_axis
  (of-object "ClutterBehaviourRotate")
  (c-name "clutter_behaviour_rotate_get_axis")
  (docstring
  "Retrieves the clutter.RotateAxis used by the rotate behaviour.\n"
  )
  (return-type "ClutterRotateAxis")
)

(define-method set_axis
  (of-object "ClutterBehaviourRotate")
  (c-name "clutter_behaviour_rotate_set_axis")
  (docstring
  "Sets the axis used by the rotate behaviour.\n"
  )
  (return-type "none")
  (parameters
    '("ClutterRotateAxis" "axis")
  )
)

(define-method get_direction
  (of-object "ClutterBehaviourRotate")
  (c-name "clutter_behaviour_rotate_get_direction")
  (docstring
  "Retrieves the clutter.RotateDirection used by the rotate behaviour.\n"
  )
  (return-type "ClutterRotateDirection")
)

(define-method set_direction
  (of-object "ClutterBehaviourRotate")
  (c-name "clutter_behaviour_rotate_set_direction")
  (docstring
  "Sets the rotation direction used by the rotate behaviour.\n"
  )
  (return-type "none")
  (parameters
    '("ClutterRotateDirection" "direction")
  )
)

(define-method get_bounds
  (of-object "ClutterBehaviourRotate")
  (c-name "clutter_behaviour_rotate_get_bounds")
  (docstring
  "Retrieves the rotation boundaries of the rotate behaviour.\n"
  )
  (return-type "none")
  (parameters
    '("gdouble*" "angle_start")
    '("gdouble*" "angle_end")
  )
)

(define-method set_bounds
  (of-object "ClutterBehaviourRotate")
  (c-name "clutter_behaviour_rotate_set_bounds")
  (docstring
  "Sets the initial and final angles of a rotation behaviour; angles >=\n"
  "360 degrees get clamped to the canonical interval <0, 360).\n"
  )
  (return-type "none")
  (parameters
    '("gdouble" "angle_start")
    '("gdouble" "angle_end")
  )
)



;; From clutter-behaviour-scale.h

(define-function behaviour_scale_get_type
  (c-name "clutter_behaviour_scale_get_type")
  (return-type "GType")
)

(define-function behaviour_scale_new
  (c-name "clutter_behaviour_scale_new")
  (is-constructor-of "ClutterBehaviourScale")
  (return-type "ClutterBehaviour*")
  (properties
    '("x_scale_start")
    '("y_scale_start")
    '("x_scale_end")
    '("y_scale_end")
    '("alpha" (optional))
  )
)

(define-method set_bounds
  (of-object "ClutterBehaviourScale")
  (c-name "clutter_behaviour_scale_set_bounds")
  (docstring
  "Sets the bounds used by scale behaviour.\n"
  )
  (return-type "none")
  (parameters
    '("gdouble" "x_scale_begin")
    '("gdouble" "y_scale_begin")
    '("gdouble" "x_scale_end")
    '("gdouble" "y_scale_end")
  )
)

(define-method get_bounds
  (of-object "ClutterBehaviourScale")
  (c-name "clutter_behaviour_scale_get_bounds")
  (docstring
  "axis, or NULL axis, or NULL or NULL or NULL Retrieves the bounds used\n"
  "by scale behaviour.\n"
  )
  (return-type "none")
  (parameters
    '("gdouble*" "x_scale_begin")
    '("gdouble*" "y_scale_begin")
    '("gdouble*" "x_scale_end")
    '("gdouble*" "y_scale_end")
  )
)



;; From clutter-child-meta.h

(define-function child_meta_get_type
  (c-name "clutter_child_meta_get_type")
  (return-type "GType")
)

(define-method get_container
  (of-object "ClutterChildMeta")
  (c-name "clutter_child_meta_get_container")
  (docstring
  "Retrieves the container using data\n"
  )
  (return-type "ClutterContainer*")
)

(define-method get_actor
  (of-object "ClutterChildMeta")
  (c-name "clutter_child_meta_get_actor")
  (docstring
  "Retrieves the actor wrapped by data\n"
  )
  (return-type "ClutterActor*")
)





;; From clutter-color.h

(define-function color_get_type
  (c-name "clutter_color_get_type")
  (return-type "GType")
)

(define-function color_new
  (c-name "clutter_color_new")
  (is-constructor-of "ClutterColor")
  (return-type "ClutterColor*")
  (parameters
    '("guint8" "red")
    '("guint8" "green")
    '("guint8" "blue")
    '("guint8" "alpha")
  )
)

(define-method copy
  (of-object "ClutterColor")
  (c-name "clutter_color_copy")
  (return-type "ClutterColor*")
)

(define-method free
  (of-object "ClutterColor")
  (c-name "clutter_color_free")
  (return-type "none")
)

(define-method add
  (of-object "ClutterColor")
  (c-name "clutter_color_add")
  (return-type "none")
  (parameters
    '("const-ClutterColor*" "b")
    '("ClutterColor*" "result")
  )
)

(define-method subtract
  (of-object "ClutterColor")
  (c-name "clutter_color_subtract")
  (return-type "none")
  (parameters
    '("const-ClutterColor*" "b")
    '("ClutterColor*" "result")
  )
)

(define-method lighten
  (of-object "ClutterColor")
  (c-name "clutter_color_lighten")
  (return-type "none")
  (parameters
    '("ClutterColor*" "result")
  )
)

(define-method darken
  (of-object "ClutterColor")
  (c-name "clutter_color_darken")
  (return-type "none")
  (parameters
    '("ClutterColor*" "result")
  )
)

(define-method shade
  (of-object "ClutterColor")
  (c-name "clutter_color_shade")
  (return-type "none")
  (parameters
    '("gdouble" "factor")
    '("ClutterColor*" "result")
  )
)

(define-method to_string
  (of-object "ClutterColor")
  (c-name "clutter_color_to_string")
  (return-type "gchar*")
)

(define-function color_from_string
  (c-name "clutter_color_from_string")
  (return-type "gboolean")
  (parameters
    '("ClutterColor*" "dest")
    '("const-gchar*" "str")
  )
)

(define-method to_hls
  (of-object "ClutterColor")
  (c-name "clutter_color_to_hls")
  (return-type "none")
  (parameters
    '("gfloat*" "hue")
    '("gfloat*" "luminance")
    '("gfloat*" "saturation")
  )
)

(define-function color_from_hls
  (c-name "clutter_color_from_hls")
  (return-type "none")
  (parameters
    '("gfloat" "hue")
    '("gfloat" "luminance")
    '("gfloat" "saturation")
  )
)

(define-method to_pixel
  (of-object "ClutterColor")
  (c-name "clutter_color_to_pixel")
  (return-type "guint32")
)

(define-function color_from_pixel
  (c-name "clutter_color_from_pixel")
  (return-type "none")
  (parameters
    '("guint32" "pixel")
  )
)

(define-method to_cogl_color
  (of-object "ClutterColor")
  (c-name "clutter_color_to_cogl_color")
  (return-type "CoglColor*")
)

(define-function color_hash
  (c-name "clutter_color_hash")
  (docstring
  "Converts a clutter.Color to a hash value. This function can be passed\n"
  "to g_hash_table_new() as the hash_func parameter, when using\n"
  "clutter.Color<!-- -->s as keys in a GHashTable.\n"
  )
  (return-type "guint")
  (parameters
    '("gconstpointer" "v")
  )
)

(define-function color_equal
  (c-name "clutter_color_equal")
  (docstring
  "Compares two clutter.Color<!-- -->s and checks if they are the same.\n"
  "This function can be passed to g_hash_table_new() as the\n"
  "key_equal_func parameter, when using clutter.Color<!-- -->s as keys in\n"
  "a GHashTable.\n"
  )
  (return-type "gboolean")
  (parameters
    '("gconstpointer" "v1")
    '("gconstpointer" "v2")
  )
)

(define-function value_set_color
  (c-name "clutter_value_set_color")
  (docstring
  "Sets value to color.\n"
  )
  (return-type "none")
  (parameters
    '("GValue*" "value")
    '("const-ClutterColor*" "color")
  )
)

(define-function value_get_color
  (c-name "clutter_value_get_color")
  (docstring
  "Gets the clutter.Color contained in value.\n"
  )
  (return-type "const-ClutterColor*")
  (parameters
    '("const-GValue*" "value")
  )
)

(define-function param_color_get_type
  (c-name "clutter_param_color_get_type")
  (return-type "GType")
)

(define-function param_spec_color
  (c-name "clutter_param_spec_color")
  (docstring
  "Creates a GParamSpec for properties using clutter.Color.\n"
  )
  (return-type "GParamSpec*")
  (parameters
    '("const-gchar*" "name")
    '("const-gchar*" "nick")
    '("const-gchar*" "blurb")
    '("const-ClutterColor*" "default_value")
    '("GParamFlags" "flags")
  )
)


;; From clutter-container.h

(define-function container_get_type
  (c-name "clutter_container_get_type")
  (return-type "GType")
)

(define-method add
  (of-object "ClutterContainer")
  (c-name "clutter_container_add")
  (return-type "none")
  (parameters
    '("ClutterActor*" "first_actor")
  )
  (varargs #t)
)

(define-method add_actor
  (of-object "ClutterContainer")
  (c-name "clutter_container_add_actor")
  (return-type "none")
  (parameters
    '("ClutterActor*" "actor")
  )
)

(define-method add_valist
  (of-object "ClutterContainer")
  (c-name "clutter_container_add_valist")
  (return-type "none")
  (parameters
    '("ClutterActor*" "first_actor")
    '("va_list" "var_args")
  )
)

(define-virtual add
  (of-object "ClutterContainer")
  (return-type "none")
  (parameters
    '("ClutterActor*" "actor")
  )
)

(define-method remove
  (of-object "ClutterContainer")
  (c-name "clutter_container_remove")
  (return-type "none")
  (parameters
    '("ClutterActor*" "first_actor")
  )
  (varargs #t)
)

(define-method remove_actor
  (of-object "ClutterContainer")
  (c-name "clutter_container_remove_actor")
  (return-type "none")
  (parameters
    '("ClutterActor*" "actor")
  )
)

(define-method remove_valist
  (of-object "ClutterContainer")
  (c-name "clutter_container_remove_valist")
  (return-type "none")
  (parameters
    '("ClutterActor*" "first_actor")
    '("va_list" "var_args")
  )
)

(define-virtual remove
  (of-object "ClutterContainer")
  (return-type "none")
  (parameters
    '("ClutterActor*" "actor")
  )
)

(define-method get_children
  (of-object "ClutterContainer")
  (c-name "clutter_container_get_children")
  (return-type "GList*")
)

(define-method foreach
  (of-object "ClutterContainer")
  (c-name "clutter_container_foreach")
  (return-type "none")
  (parameters
    '("ClutterCallback" "callback")
    '("gpointer" "user_data")
  )
)

(define-virtual foreach
  (of-object "ClutterContainer")
  (return-type "none")
  (parameters
    '("ClutterCallback" "callback")
    '("gpointer" "user_data")
  )
)

(define-method foreach_with_internals
  (of-object "ClutterContainer")
  (c-name "clutter_container_foreach_with_internals")
  (return-type "none")
  (parameters
    '("ClutterCallback" "callback")
    '("gpointer" "user_data")
  )
)

(define-virtual foreach_with_internals
  (of-object "ClutterContainer")
  (return-type "none")
  (parameters
    '("ClutterCallback" "callback")
    '("gpointer" "user_data")
  )
)

(define-method find_child_by_name
  (of-object "ClutterContainer")
  (c-name "clutter_container_find_child_by_name")
  (return-type "ClutterActor*")
  (parameters
    '("const-gchar*" "child_name")
  )
)

(define-method raise_child
  (of-object "ClutterContainer")
  (c-name "clutter_container_raise_child")
  (return-type "none")
  (parameters
    '("ClutterActor*" "actor")
    '("ClutterActor*" "sibling" (null-ok) (default NULL))
  )
)

(define-virtual raise_child
  (of-object "ClutterContainer")
  (return-type "none")
  (c-name "raise")
  (parameters
    '("ClutterActor*" "actor")
    '("ClutterActor*" "silbing")
  )
)

(define-method lower_child
  (of-object "ClutterContainer")
  (c-name "clutter_container_lower_child")
  (return-type "none")
  (parameters
    '("ClutterActor*" "actor")
    '("ClutterActor*" "sibling" (null-ok) (default NULL))
  )
)

(define-virtual lower_child
  (of-object "ClutterContainer")
  (c-name "lower")
  (return-type "none")
  (parameters
    '("ClutterActor*" "actor")
    '("ClutterActor*" "silbing")
  )
)

(define-method sort_depth_order
  (of-object "ClutterContainer")
  (c-name "clutter_container_sort_depth_order")
  (return-type "none")
)

(define-virtual sort_depth_order
  (of-object "ClutterContainer")
  (return-type "none")
)

(define-function container_class_find_child_property
  (c-name "clutter_container_class_find_child_property")
  (docstring
  "Looks up the GParamSpec for a child property of klass. if no such\n"
  "property exist.\n"
  )
  (return-type "GParamSpec*")
  (parameters
    '("GObjectClass*" "klass")
    '("const-gchar*" "property_name")
  )
)

(define-function container_class_list_child_properties
  (c-name "clutter_container_class_list_child_properties")
  (docstring
  "Returns an array of GParamSpec for all child properties. of\n"
  "GParamSpec<!-- -->s which should be freed after use.\n"
  )
  (return-type "GParamSpec**")
  (parameters
    '("GObjectClass*" "klass")
    '("guint*" "n_properties")
  )
)

(define-method get_child_meta
  (of-object "ClutterContainer")
  (c-name "clutter_container_get_child_meta")
  (return-type "ClutterChildMeta*")
  (parameters
    '("ClutterActor*" "actor")
  )
)

(define-virtual get_child_meta
  (of-object "ClutterContainer")
  (return-type "ClutterChildMeta*")
  (parameters
    '("ClutterActor*" "actor")
  )
)

(define-method child_set_property
  (of-object "ClutterContainer")
  (c-name "clutter_container_child_set_property")
  (return-type "none")
  (parameters
    '("ClutterActor*" "child")
    '("const-gchar*" "property")
    '("const-GValue*" "value")
  )
)

(define-method child_get_property
  (of-object "ClutterContainer")
  (c-name "clutter_container_child_get_property")
  (return-type "none")
  (parameters
    '("ClutterActor*" "child")
    '("const-gchar*" "property")
    '("GValue*" "value")
  )
)

(define-method child_set
  (of-object "ClutterContainer")
  (c-name "clutter_container_child_set")
  (return-type "none")
  (parameters
    '("ClutterActor*" "actor")
    '("const-gchar*" "first_prop")
  )
  (varargs #t)
)

(define-method child_get
  (of-object "ClutterContainer")
  (c-name "clutter_container_child_get")
  (return-type "none")
  (parameters
    '("ClutterActor*" "actor")
    '("const-gchar*" "first_prop")
  )
  (varargs #t)
)

(define-virtual create_child_meta
  (of-object "ClutterContainer")
  (return-type "none")
  (parameters
    '("ClutterActor*" "actor")
  )
)

(define-virtual destroy_child_meta
  (of-object "ClutterContainer")
  (return-type "none")
  (parameters
    '("ClutterActor*" "actor")
  )
)

;; From clutter-enum-types.h

(define-function shader_error_get_type
  (c-name "clutter_shader_error_get_type")
  (return-type "GType")
)

(define-function actor_flags_get_type
  (c-name "clutter_actor_flags_get_type")
  (return-type "GType")
)

(define-function pack_type_get_type
  (c-name "clutter_pack_type_get_type")
  (return-type "GType")
)

(define-function modifier_type_get_type
  (c-name "clutter_modifier_type_get_type")
  (return-type "GType")
)

(define-function event_type_get_type
  (c-name "clutter_event_type_get_type")
  (return-type "GType")
)

(define-function scroll_direction_get_type
  (c-name "clutter_scroll_direction_get_type")
  (return-type "GType")
)

(define-function stage_state_get_type
  (c-name "clutter_stage_state_get_type")
  (return-type "GType")
)

(define-function feature_flags_get_type
  (c-name "clutter_feature_flags_get_type")
  (return-type "GType")
)

(define-function init_error_get_type
  (c-name "clutter_init_error_get_type")
  (docstring
  "of arguments. It will initialise everything needed to operate with\n"
  "clutter. and parses some standard command line options. argc and argv\n"
  "are adjusted accordingly so your own code will never see those\n"
  "standard arguments.\n"
  )
  (return-type "GType")
)

(define-function texture_error_get_type
  (c-name "clutter_texture_error_get_type")
  (return-type "GType")
)

(define-function texture_flags_get_type
  (c-name "clutter_texture_flags_get_type")
  (return-type "GType")
)

(define-function gravity_get_type
  (c-name "clutter_gravity_get_type")
  (return-type "GType")
)

(define-function rotate_axis_get_type
  (c-name "clutter_rotate_axis_get_type")
  (return-type "GType")
)

(define-function rotate_direction_get_type
  (c-name "clutter_rotate_direction_get_type")
  (return-type "GType")
)

(define-function event_flags_get_type
  (c-name "clutter_event_flags_get_type")
  (return-type "GType")
)

(define-function script_error_get_type
  (c-name "clutter_script_error_get_type")
  (return-type "GType")
)

(define-function timeline_direction_get_type
  (c-name "clutter_timeline_direction_get_type")
  (return-type "GType")
)

(define-function texture_quality_get_type
  (c-name "clutter_texture_quality_get_type")
  (return-type "GType")
)

(define-function request_mode_get_type
  (c-name "clutter_request_mode_get_type")
  (return-type "GType")
)

(define-function allocation_flags_get_type
  (c-name "clutter_allocation_flags_get_type")
  (return-type "GType")
)

(define-function input_device_type_get_type
  (c-name "clutter_input_device_type_get_type")
  (return-type "GType")
)

(define-function path_node_type_get_type
  (c-name "clutter_path_node_type_get_type")
  (return-type "GType")
)

(define-function pick_mode_get_type
  (c-name "clutter_pick_mode_get_type")
  (return-type "GType")
)

(define-function animation_mode_get_type
  (c-name "clutter_animation_mode_get_type")
  (return-type "GType")
)

(define-function font_flags_get_type
  (c-name "clutter_font_flags_get_type")
  (return-type "GType")
)

(define-function unit_type_get_type
  (c-name "clutter_unit_type_get_type")
  (return-type "GType")
)

;; From clutter-event.h

(define-function event_get_type
  (c-name "clutter_event_get_type")
  (docstring
  "Pops an event off the event queue. Applications should not need to\n"
  "call this.\n"
  )
  (return-type "GType")
)

(define-function events_pending
  (c-name "clutter_events_pending")
  (docstring
  "Checks if events are pending in the event queue.\n"
  )
  (return-type "gboolean")
)

(define-function event_get
  (c-name "clutter_event_get")
  (return-type "ClutterEvent*")
)

(define-function event_peek
  (c-name "clutter_event_peek")
  (docstring
  "Returns a pointer to the first event from the event queue but does not\n"
  "remove it.\n"
  )
  (return-type "ClutterEvent*")
)

(define-method put
  (of-object "ClutterEvent")
  (c-name "clutter_event_put")
  (return-type "none")
)

(define-function event_new
  (c-name "clutter_event_new")
  (is-constructor-of "ClutterEvent")
  (return-type "ClutterEvent*")
  (parameters
    '("ClutterEventType" "type")
  )
)

(define-method copy
  (of-object "ClutterEvent")
  (c-name "clutter_event_copy")
  (return-type "ClutterEvent*")
)

(define-method free
  (of-object "ClutterEvent")
  (c-name "clutter_event_free")
  (return-type "none")
)

(define-method type
  (of-object "ClutterEvent")
  (c-name "clutter_event_type")
  (return-type "ClutterEventType")
)

(define-method get_flags
  (of-object "ClutterEvent")
  (c-name "clutter_event_get_flags")
  (return-type "ClutterEventFlags")
)

(define-method get_time
  (of-object "ClutterEvent")
  (c-name "clutter_event_get_time")
  (return-type "guint32")
)

(define-method get_state
  (of-object "ClutterEvent")
  (c-name "clutter_event_get_state")
  (return-type "ClutterModifierType")
)

(define-method get_device_id
  (of-object "ClutterEvent")
  (c-name "clutter_event_get_device_id")
  (return-type "gint")
)

(define-method get_device_type
  (of-object "ClutterEvent")
  (c-name "clutter_event_get_device_type")
  (return-type "ClutterInputDeviceType")
)

(define-method get_device
  (of-object "ClutterEvent")
  (c-name "clutter_event_get_device")
  (return-type "ClutterInputDevice*")
)

(define-method get_coords
  (of-object "ClutterEvent")
  (c-name "clutter_event_get_coords")
  (return-type "none")
  (parameters
    '("gint*" "x")
    '("gint*" "y")
  )
)

(define-method get_source
  (of-object "ClutterEvent")
  (c-name "clutter_event_get_source")
  (return-type "ClutterActor*")
)

(define-method get_stage
  (of-object "ClutterEvent")
  (c-name "clutter_event_get_stage")
  (return-type "ClutterStage*")
)

(define-method get_key_symbol
  (of-object "ClutterEvent")
  (c-name "clutter_event_get_key_symbol")
  (return-type "guint")
)

(define-method get_key_code
  (of-object "ClutterEvent")
  (c-name "clutter_event_get_key_code")
  (return-type "guint16")
)

(define-method get_key_unicode
  (of-object "ClutterEvent")
  (c-name "clutter_event_get_key_unicode")
  (return-type "guint32")
)

(define-method get_button
  (of-object "ClutterEvent")
  (c-name "clutter_event_get_button")
  (return-type "guint32")
)

(define-method get_click_count
  (of-object "ClutterEvent")
  (c-name "clutter_event_get_click_count")
  (return-type "guint")
)

(define-method get_related
  (of-object "ClutterEvent")
  (c-name "clutter_event_get_related")
  (return-type "ClutterActor*")
)

(define-method get_scroll_direction
  (of-object "ClutterEvent")
  (c-name "clutter_event_get_scroll_direction")
  (return-type "ClutterScrollDirection")
)

(define-function keysym_to_unicode
  (c-name "clutter_keysym_to_unicode")
  (docstring
  "Convert from a clutter. key symbol to the corresponding ISO10646\n"
  "(Unicode) character. character.\n"
  )
  (return-type "guint32")
  (parameters
    '("guint" "keyval")
  )
)

(define-function get_current_event_time
  (c-name "clutter_get_current_event_time")
  (docstring
  "If an event is currently being processed, return that event. This\n"
  "function is intended to be used to access event state that might not\n"
  "be exposed by higher-level widgets.  For example, to get the key\n"
  "modifier state from a Button 'clicked' event.\n"
  )
  (return-type "guint32")
)

(define-method get_device_type
  (of-object "ClutterInputDevice")
  (c-name "clutter_input_device_get_device_type")
  (docstring
  "Retrieves the type of device\n"
  )
  (return-type "ClutterInputDeviceType")
)

(define-method get_device_id
  (of-object "ClutterInputDevice")
  (c-name "clutter_input_device_get_device_id")
  (docstring
  "Retrieves the unique identifier of device\n"
  )
  (return-type "gint")
)



;; From clutter-feature.h

(define-function feature_available
  (c-name "clutter_feature_available")
  (docstring
  "Checks whether feature is available.  feature can be a logical OR of\n"
  "clutter.FeatureFlags.\n"
  )
  (return-type "gboolean")
  (parameters
    '("ClutterFeatureFlags" "feature")
  )
)

(define-function feature_get_all
  (c-name "clutter_feature_get_all")
  (docstring
  "Returns all the supported features.\n"
  )
  (return-type "ClutterFeatureFlags")
)

;; From clutter-fixed.h

(define-function param_fixed_get_type
  (c-name "clutter_param_fixed_get_type")
  (return-type "GType")
)

(define-function value_set_fixed
  (c-name "clutter_value_set_fixed")
  (docstring
  "Sets value to fixed_.\n"
  )
  (return-type "none")
  (parameters
    '("GValue*" "value")
    '("CoglFixed" "fixed_")
  )
)

(define-function value_get_fixed
  (c-name "clutter_value_get_fixed")
  (docstring
  "Gets the fixed point value stored inside value.\n"
  )
  (return-type "CoglFixed")
  (parameters
    '("const-GValue*" "value")
  )
)

(define-function param_spec_fixed
  (c-name "clutter_param_spec_fixed")
  (docstring
  "Creates a GParamSpec for properties using CoglFixed values\n"
  )
  (return-type "GParamSpec*")
  (parameters
    '("const-gchar*" "name")
    '("const-gchar*" "nick")
    '("const-gchar*" "blurb")
    '("CoglFixed" "minimum")
    '("CoglFixed" "maximum")
    '("CoglFixed" "default_value")
    '("GParamFlags" "flags")
  )
)

;; From clutter-frame-source.h

(define-function frame_source_add
  (c-name "clutter_frame_source_add")
  (docstring
  "Simple wrapper around clutter.Frame.source_add_full().\n"
  )
  (return-type "guint")
  (parameters
    '("guint" "fps")
    '("GSourceFunc" "func")
    '("gpointer" "data")
  )
)

(define-function frame_source_add_full
  (c-name "clutter_frame_source_add_full")
  (docstring
  "range between G_PRIORITY_DEFAULT and G_PRIORITY_HIGH. Sets a function\n"
  "to be called at regular intervals with the given priority.  The\n"
  "function is called repeatedly until it returns FALSE, at which point\n"
  "the timeout is automatically destroyed and the function will not be\n"
  "called again.  The notify function is called when the timeout is\n"
  "destroyed.  The first call to the function will be at the end of the\n"
  "first interval. This function is similar to g_timeout_add_full()\n"
  "except that it will try to compensate for delays. For example, if func\n"
  "takes half the interval time to execute then the function will be\n"
  "called again half the interval time after it finished. In contrast\n"
  "g_timeout_add_full() would not fire until a full interval after the\n"
  "function completes so the delay between calls would be 1.0 / fps *\n"
  "1.5. This function does not however try to invoke the function\n"
  "multiple times to catch up missing frames if func takes more than\n"
  )
  (return-type "guint")
  (parameters
    '("gint" "priority")
    '("guint" "fps")
    '("GSourceFunc" "func")
    '("gpointer" "data")
    '("GDestroyNotify" "notify")
  )
)

;; From clutter-group.h

(define-function group_get_type
  (c-name "clutter_group_get_type")
  (return-type "GType")
)

(define-function group_new
  (c-name "clutter_group_new")
  (is-constructor-of "ClutterGroup")
  (return-type "ClutterActor*")
)

(define-method get_nth_child
  (of-object "ClutterGroup")
  (c-name "clutter_group_get_nth_child")
  (docstring
  "Gets a groups child held at index_ in stack.\n"
  )
  (return-type "ClutterActor*")
  (parameters
    '("gint" "index_")
  )
)

(define-method get_n_children
  (of-object "ClutterGroup")
  (c-name "clutter_group_get_n_children")
  (docstring
  "Gets the number of actors held in the group.\n"
  )
  (return-type "gint")
)

(define-method remove_all
  (of-object "ClutterGroup")
  (c-name "clutter_group_remove_all")
  (docstring
  "Removes all children actors from the clutter.Group.\n"
  )
  (return-type "none")
)



;; From clutter.h



;; From clutter-keysyms.h




;; From clutter-main.h

(define-function init_error_quark
  (c-name "clutter_init_error_quark")
  (return-type "GQuark")
)

(define-function init
  (c-name "clutter_init")
  (return-type "ClutterInitError")
  (parameters
    '("int*" "argc")
    '("char***" "argv")
  )
)

(define-function init_with_args
  (c-name "clutter_init_with_args")
  (docstring
  "of command line arguments first line of <option>--help</option>\n"
  "output, after <literal><replaceable>programname</replaceable>\n"
  "[OPTION...]</literal> describing the options of your program\n"
  "translating the <option>--help</option> output for the options in This\n"
  "function does the same work as clutter_init(). Additionally, it allows\n"
  "you to add your own command line options, and it automatically\n"
  "generates nicely formatted <option>--help</option> output. Note that\n"
  "your program will be terminated after writing out the help output.\n"
  "Also note that, in case of error, the error message will be placed\n"
  "inside error instead of being printed on the display. initialised, or\n"
  "other values or clutter.InitError in case of error.\n"
  )
  (return-type "ClutterInitError")
  (parameters
    '("int*" "argc")
    '("char***" "argv")
    '("char*" "parameter_string")
    '("GOptionEntry*" "entries")
    '("char*" "translation_domain")
    '("GError**" "error")
  )
)

(define-function get_option_group
  (c-name "clutter_get_option_group")
  (docstring
  "Returns a GOptionGroup for the command line arguments recognized by\n"
  "clutter.. You should add this group to your GOptionContext with\n"
  "g_option_context_add_group(), if you are using\n"
  "g_option_context_parse() to parse your commandline arguments. Calling\n"
  "g_option_context_parse() with clutter.'s GOptionGroup will result in\n"
  "clutter.'s initialization. That is, the following code: |[\n"
  "g_option_context_set_main_group (context, clutter.Get.option_group\n"
  "()); res = g_option_context_parse (context, &amp;argc, &amp;argc,\n"
  "NULL); ]| is functionally equivalent to: |[ clutter_init (&amp;argc,\n"
  "&amp;argv); ]| After g_option_context_parse() on a GOptionContext\n"
  "containing the clutter. GOptionGroup has returned TRUE, clutter. is\n"
  "guaranteed to be initialized. recognized by clutter.\n"
  )
  (return-type "GOptionGroup*")
)

(define-function main
  (c-name "clutter_main")
  (docstring
  "Starts the clutter. mainloop.\n"
  )
  (return-type "none")
)

(define-function main_quit
  (c-name "clutter_main_quit")
  (docstring
  "Terminates the clutter. mainloop.\n"
  )
  (return-type "none")
)

(define-function main_level
  (c-name "clutter_main_level")
  (docstring
  "Retrieves the depth of the clutter. mainloop.\n"
  )
  (return-type "gint")
)

(define-function redraw
  (c-name "clutter_redraw")
  (docstring
  "Forces a redraw of the entire stage. Applications should never use\n"
  "this function, but queue a redraw using clutter.Actor.queue_redraw().\n"
  "This function should only be used by libraries integrating clutter.\n"
  "from within another toolkit.\n"
  )
  (return-type "none")
  (parameters
    '("ClutterStage*" "stage")
  )
)

(define-function get_debug_enabled
  (c-name "clutter_get_debug_enabled")
  (docstring
  "Check if clutter has debugging turned on.\n"
  )
  (return-type "gboolean")
)

(define-function get_show_fps
  (c-name "clutter_get_show_fps")
  (docstring
  "Returns whether clutter. should print out the frames per second on the\n"
  "console. You can enable this setting either using the\n"
  "<literal>CLUTTER_SHOW_FPS</literal> environment variable or passing\n"
  "the <literal>--clutter-show-fps</literal> command line argument. *\n"
  )
  (return-type "gboolean")
)

(define-function base_init
  (c-name "clutter_base_init")
  (return-type "none")
)

(define-function get_timestamp
  (c-name "clutter_get_timestamp")
  (docstring
  "Returns the approximate number of microseconds passed since clutter\n"
  "was intialised.\n"
  )
  (return-type "gulong")
)

(define-function threads_init
  (c-name "clutter_threads_init")
  (docstring
  "Initialises the clutter. threading mechanism, so that clutter. API can\n"
  "be called by multiple threads, using clutter.Threads.enter() and\n"
  "clutter.Threads.leave() to mark the critical sections. You must call\n"
  "g_thread_init() before this function. This function must be called\n"
  "before clutter_init(). It is safe to call this function multiple\n"
  "times.\n"
  )
  (return-type "none")
)

(define-function threads_set_lock_functions
  (c-name "clutter_threads_set_lock_functions")
  (docstring
  "Allows the application to replace the standard method that clutter.\n"
  "uses to protect its data structures. Normally, clutter. creates a\n"
  "single GMutex that is locked by clutter.Threads.enter(), and released\n"
  "by clutter.Threads.leave(); using this function an application\n"
  "provides, instead, a function enter_fn that is called by\n"
  "clutter.Threads.enter() and a function leave_fn that is called by\n"
  "clutter.Threads.leave(). The functions must provide at least same\n"
  "locking functionality as the default implementation, but can also do\n"
  "extra application specific processing. As an example, consider an\n"
  "application that has its own recursive lock that when held, holds the\n"
  "clutter. lock as well. When clutter. unlocks the clutter. lock when\n"
  "entering a recursive main loop, the application must temporarily\n"
  "release its lock as well. Most threaded clutter. apps won't need to\n"
  "use this method. This method must be called before\n"
  "clutter.Threads.init(), and cannot be called multiple times.\n"
  )
  (return-type "none")
  (parameters
    '("GCallback" "enter_fn")
    '("GCallback" "leave_fn")
  )
)

(define-function threads_enter
  (c-name "clutter_threads_enter")
  (docstring
  "Locks the clutter. thread lock.\n"
  )
  (return-type "none")
)

(define-function threads_leave
  (c-name "clutter_threads_leave")
  (docstring
  "Unlocks the clutter. thread lock.\n"
  )
  (return-type "none")
)

(define-function threads_add_idle
  (c-name "clutter_threads_add_idle")
  (docstring
  "Simple wrapper around clutter.Threads.add_idle_full() using the\n"
  "default priority.\n"
  )
  (return-type "guint")
  (parameters
    '("GSourceFunc" "func")
    '("gpointer" "data")
  )
)

(define-function threads_add_idle_full
  (c-name "clutter_threads_add_idle_full")
  (docstring
  "range between G_PRIORITY_DEFAULT_IDLE and G_PRIORITY_HIGH_IDLE Adds a\n"
  "function to be called whenever there are no higher priority events\n"
  "pending. If the function returns FALSE it is automatically removed\n"
  "from the list of event sources and will not be called again. This\n"
  "function can be considered a thread-safe variant of g_idle_add_full():\n"
  "it will call function while holding the clutter. lock. It is logically\n"
  "equivalent to the following implementation: |[ static gboolean\n"
  "idle_safe_callback (gpointer data) { SafeClosure *closure = data;\n"
  "gboolean res = FALSE; /&ast; mark the critical section &ast;/\n"
  "clutter.Threads.enter(); /&ast; the callback does not need to acquire\n"
  "the clutter. &ast; lock itself, as it is held by the this proxy\n"
  "handler &ast;/ res = closure->callback (closure->data);\n"
  "clutter.Threads.leave(); return res; } static gulong add_safe_idle\n"
  "(GSourceFunc callback, gpointer    data) { SafeClosure *closure =\n"
  "g_new0 (SafeClosure, 1); closure-&gt;callback = callback;\n"
  "closure-&gt;data = data; return g_add_idle_full\n"
  "(G_PRIORITY_DEFAULT_IDLE, idle_safe_callback, closure, g_free) } |\n"
  "This function should be used by threaded applications to make sure\n"
  "that func is emitted under the clutter. threads lock and invoked from\n"
  "the same thread that started the clutter. main loop. For instance, it\n"
  "can be used to update the UI using the results from a worker thread:\n"
  "|[ static gboolean update_ui (gpointer data) { SomeClosure *closure =\n"
  "data; /&ast; it is safe to call clutter. API from this function\n"
  "because &ast; it is invoked from the same thread that started the main\n"
  "&ast; loop and under the clutter. thread lock &ast;/\n"
  "clutter_label_set_text (CLUTTER_LABEL (closure-&gt;label),\n"
  "closure-&gt;text); g_object_unref (closure-&gt;label); g_free\n"
  "(closure); return FALSE; } /&ast; within another thread &ast;/ closure\n"
  "= g_new0 (SomeClosure, 1); /&ast; always take a reference on GObject\n"
  "instances &ast;/ closure-&gt;label = g_object_ref\n"
  "(my_application-&gt;label); closure-&gt;text = g_strdup\n"
  "(processed_text_to_update_the_label); clutter.Threads.add_idle_full\n"
  "(G_PRIORITY_HIGH_IDLE, update_ui, closure, NULL); ]|\n"
  )
  (return-type "guint")
  (parameters
    '("gint" "priority")
    '("GSourceFunc" "func")
    '("gpointer" "data")
    '("GDestroyNotify" "notify")
  )
)

(define-function threads_add_timeout
  (c-name "clutter_threads_add_timeout")
  (docstring
  "Simple wrapper around clutter.Threads.add_timeout_full().\n"
  )
  (return-type "guint")
  (parameters
    '("guint" "interval")
    '("GSourceFunc" "func")
    '("gpointer" "data")
  )
)

(define-function threads_add_timeout_full
  (c-name "clutter_threads_add_timeout_full")
  (docstring
  "range between G_PRIORITY_DEFAULT and G_PRIORITY_HIGH. Sets a function\n"
  "to be called at regular intervals holding the clutter. threads lock,\n"
  "with the given priority. The function is called repeatedly until it\n"
  "returns FALSE, at which point the timeout is automatically removed and\n"
  "the function will not be called again. The notify function is called\n"
  "when the timeout is removed. The first call to the function will be at\n"
  "the end of the first interval. It is important to note that, due to\n"
  "how the clutter. main loop is implemented, the timing will not be\n"
  "accurate and it will not try to keep up with the interval. A more\n"
  "reliable source is available using\n"
  "clutter.Threads.add_frame_source_full(), which is also internally used\n"
  "by clutter.Timeline. See also clutter.Threads.add_idle_full().\n"
  )
  (return-type "guint")
  (parameters
    '("gint" "priority")
    '("guint" "interval")
    '("GSourceFunc" "func")
    '("gpointer" "data")
    '("GDestroyNotify" "notify")
  )
)

(define-function set_motion_events_enabled
  (c-name "clutter_set_motion_events_enabled")
  (docstring
  "Sets whether per-actor motion events should be enabled or not (the\n"
  "default is to enable them). If enable is FALSE the following events\n"
  "will not work: <itemizedlist> <listitem><para>clutter.Actor::motion-\n"
  "event, unless on the clutter.Stage</para></listitem>\n"
  "<listitem><para>clutter.Actor::enter-event</para></listitem>\n"
  "<listitem><para>clutter.Actor::leave-event</para></listitem>\n"
  "</itemizedlist>\n"
  )
  (return-type "none")
  (parameters
    '("gboolean" "enable")
  )
)

(define-function get_motion_events_enabled
  (c-name "clutter_get_motion_events_enabled")
  (docstring
  "Gets whether the per-actor motion events are enabled.\n"
  )
  (return-type "gboolean")
)

(define-function set_default_frame_rate
  (c-name "clutter_set_default_frame_rate")
  (docstring
  "Sets the default frame rate. This frame rate will be used to limit the\n"
  "number of frames drawn if clutter. is not able to synchronize with the\n"
  "vertical refresh rate of the display. When synchronization is\n"
  "possible, this value is ignored.\n"
  )
  (return-type "none")
  (parameters
    '("guint" "frames_per_sec")
  )
)

(define-function get_default_frame_rate
  (c-name "clutter_get_default_frame_rate")
  (docstring
  "Retrieves the default frame rate. See\n"
  "clutter.Set.default_frame_rate().\n"
  )
  (return-type "guint")
)

(define-function grab_pointer
  (c-name "clutter_grab_pointer")
  (docstring
  "Grabs pointer events, after the grab is done all pointer related\n"
  "events (press, motion, release, enter, leave and scroll) are delivered\n"
  "to this actor directly without passing through both capture and bubble\n"
  "phases of the event delivery chain. The source set in the event will\n"
  "be the actor that would have received the event if the pointer grab\n"
  "was not in effect. <note><para>Grabs completely override the entire\n"
  "event delivery chain done by clutter.. Pointer grabs should only be\n"
  "used as a last resource; using the clutter.Actor::captured-event\n"
  "signal should always be the preferred way to intercept event delivery\n"
  "to reactive actors.</para></note> If you wish to grab all the pointer\n"
  "events for a specific input device, you should use\n"
  "clutter.Grab.pointer_for_device().\n"
  )
  (return-type "none")
  (parameters
    '("ClutterActor*" "actor")
  )
)

(define-function ungrab_pointer
  (c-name "clutter_ungrab_pointer")
  (docstring
  "Removes an existing grab of the pointer.\n"
  )
  (return-type "none")
)

(define-function get_pointer_grab
  (c-name "clutter_get_pointer_grab")
  (docstring
  "Queries the current pointer grab of clutter.\n"
  )
  (return-type "ClutterActor*")
)

(define-function grab_keyboard
  (c-name "clutter_grab_keyboard")
  (docstring
  "Grabs keyboard events, after the grab is done keyboard events\n"
  "(clutter.Actor::key-press-event and clutter.Actor::key-release-event)\n"
  "are delivered to this actor directly. The source set in the event will\n"
  "be the actor that would have received the event if the keyboard grab\n"
  "was not in effect. Like pointer grabs, keyboard grabs should only be\n"
  "used as a last resource. See also clutter.Stage.set_key_focus() and\n"
  "clutter_actor_grab_key_focus() to perform a soft key grab and assign\n"
  "key focus to a specific actor.\n"
  )
  (return-type "none")
  (parameters
    '("ClutterActor*" "actor")
  )
)

(define-function ungrab_keyboard
  (c-name "clutter_ungrab_keyboard")
  (docstring
  "Removes an existing grab of the keyboard.\n"
  )
  (return-type "none")
)

(define-function get_keyboard_grab
  (c-name "clutter_get_keyboard_grab")
  (docstring
  "Queries the current keyboard grab of clutter.\n"
  )
  (return-type "ClutterActor*")
)

(define-function do_event
  (c-name "clutter_do_event")
  (return-type "none")
  (parameters
    '("ClutterEvent*" "event")
  )
)

(define-function threads_add_frame_source
  (c-name "clutter_threads_add_frame_source")
  (docstring
  "Simple wrapper around clutter.Threads.add_frame_source_full().\n"
  )
  (return-type "guint")
  (parameters
    '("guint" "interval")
    '("GSourceFunc" "func")
    '("gpointer" "data")
  )
)

(define-function threads_add_frame_source_full
  (c-name "clutter_threads_add_frame_source_full")
  (docstring
  "range between G_PRIORITY_DEFAULT and G_PRIORITY_HIGH. Sets a function\n"
  "to be called at regular intervals holding the clutter. threads lock,\n"
  "with the given priority. The function is called repeatedly until it\n"
  "returns FALSE, at which point the timeout is automatically removed and\n"
  "the function will not be called again. The notify function is called\n"
  "when the timeout is removed. This function is similar to\n"
  "clutter.Threads.add_timeout_full() except that it will try to\n"
  "compensate for delays. For example, if will be called again half the\n"
  "interval time after it finished. In contrast\n"
  "clutter.Threads.add_timeout_full() would not fire until a full\n"
  "interval after the function completes so the delay between calls would\n"
  "be interval * 1.5. This function does not however try to invoke the\n"
  "function multiple times to catch up missing frames if See also\n"
  "clutter.Threads.add_idle_full().\n"
  )
  (return-type "guint")
  (parameters
    '("gint" "priority")
    '("guint" "interval")
    '("GSourceFunc" "func")
    '("gpointer" "data")
    '("GDestroyNotify" "notify")
  )
)

(define-function clear_glyph_cache
  (c-name "clutter_clear_glyph_cache")
  (docstring
  "Clears the internal cache of glyphs used by the Pango renderer. This\n"
  "will free up some memory and GL texture resources. The cache will be\n"
  "automatically refilled as more text is drawn.\n"
  )
  (return-type "none")
)

(define-function get_input_device_for_id
  (c-name "clutter_get_input_device_for_id")
  (docstring
  "Retrieves the clutter.InputDevice from its id. This is a convenience\n"
  "wrapper for clutter.Device.manager_get_device() and it is functionally\n"
  "equivalent to: |[ clutter.DeviceManager *manager; clutter.InputDevice\n"
  "*device; manager = clutter.Device.manager_get_default (); device =\n"
  "clutter.Device.manager_get_device (manager, id); ]|\n"
  )
  (return-type "ClutterInputDevice*")
  (parameters
    '("gint" "id")
  )
)

(define-function grab_pointer_for_device
  (c-name "clutter_grab_pointer_for_device")
  (docstring
  "Grabs all the pointer events coming from the device id for actor. If\n"
  "id is -1 then this function is equivalent to clutter.Grab.pointer().\n"
  )
  (return-type "none")
  (parameters
    '("ClutterActor*" "actor")
    '("gint" "id")
  )
)

(define-function ungrab_pointer_for_device
  (c-name "clutter_ungrab_pointer_for_device")
  (docstring
  "Removes an existing grab of the pointer events for device id.\n"
  )
  (return-type "none")
  (parameters
    '("gint" "id")
  )
)

(define-function get_option_group_without_init
  (c-name "clutter_get_option_group_without_init")
  (docstring
  "Returns a GOptionGroup for the command line arguments recognized by\n"
  "clutter.. You should add this group to your GOptionContext with\n"
  "g_option_context_add_group(), if you are using\n"
  "g_option_context_parse() to parse your commandline arguments. Unlike\n"
  "clutter.Get.option_group(), calling g_option_context_parse() with the\n"
  "GOptionGroup returned by this function requires a subsequent explicit\n"
  "call to clutter_init(); use this function when needing to set foreign\n"
  "display connection with clutter_x11_set_display(), or with\n"
  "gtk_clutter_init(). recognized by clutter.\n"
  )
  (return-type "GOptionGroup*")
)

(define-function threads_add_repaint_func
  (c-name "clutter_threads_add_repaint_func")
  (docstring
  "function, or NULL Adds a function to be called whenever clutter. is\n"
  "repainting a Stage. If the function returns FALSE it is automatically\n"
  "removed from the list of repaint functions and will not be called\n"
  "again. This function is guaranteed to be called from within the same\n"
  "thread that called clutter_main(), and while the clutter. lock is\n"
  "being held. A repaint function is useful to ensure that an update of\n"
  "the scenegraph is performed before the scenegraph is repainted; for\n"
  "instance, uploading a frame from a video into a clutter.Texture. When\n"
  "the repaint function is removed (either because it returned FALSE or\n"
  "because clutter.Threads.remove_repaint_func() has been called) the can\n"
  "use the returned integer to remove the repaint function by calling\n"
  "clutter.Threads.remove_repaint_func().\n"
  )
  (return-type "guint")
  (parameters
    '("GSourceFunc" "func")
    '("gpointer" "data")
    '("GDestroyNotify" "notify")
  )
)

(define-function threads_remove_repaint_func
  (c-name "clutter_threads_remove_repaint_func")
  (docstring
  "Removes the repaint function with handle_id as its id\n"
  )
  (return-type "none")
  (parameters
    '("guint" "handle_id")
  )
)

(define-function set_font_flags
  (c-name "clutter_set_font_flags")
  (docstring
  "Sets the font quality options for subsequent text rendering\n"
  "operations. Using mipmapped textures will improve the quality for\n"
  "scaled down text but will use more texture memory. Enabling hinting\n"
  "improves text quality for static text but may introduce some artifacts\n"
  "if the text is animated.\n"
  )
  (return-type "none")
  (parameters
    '("ClutterFontFlags" "flags")
  )
)

(define-function get_font_flags
  (c-name "clutter_get_font_flags")
  (docstring
  "Gets the current font flags for rendering text. See\n"
  "clutter.Set.font_flags().\n"
  )
  (return-type "ClutterFontFlags")
)

(define-function get_font_map
  (c-name "clutter_get_font_map")
  (docstring
  "Retrieves the PangoFontMap instance used by clutter.. You can use the\n"
  "global font map object with the COGL Pango API. value is owned by\n"
  "clutter. and it should never be unreferenced.\n"
  )
  (return-type "PangoFontMap*")
)



;; From clutter-media.h

(define-function clutter_media_get_type
  (c-name "clutter_media_get_type")
  (return-type "GType")
)

(define-method set_uri
  (of-object "ClutterMedia")
  (c-name "clutter_media_set_uri")
  (return-type "none")
  (parameters
    '("const-gchar*" "uri")
  )
)

(define-method get_uri
  (of-object "ClutterMedia")
  (c-name "clutter_media_get_uri")
  (return-type "gchar*")
)

(define-method set_filename
  (of-object "ClutterMedia")
  (c-name "clutter_media_set_filename")
  (return-type "none")
  (parameters
    '("const-gchar*" "filename")
  )
)

(define-method set_playing
  (of-object "ClutterMedia")
  (c-name "clutter_media_set_playing")
  (return-type "none")
  (parameters
    '("gboolean" "playing")
  )
)

(define-method get_playing
  (of-object "ClutterMedia")
  (c-name "clutter_media_get_playing")
  (return-type "gboolean")
)

(define-method set_progress
  (of-object "ClutterMedia")
  (c-name "clutter_media_set_progress")
  (return-type "none")
  (parameters
    '("gdouble" "progress")
  )
)

(define-method get_progress
  (of-object "ClutterMedia")
  (c-name "clutter_media_get_progress")
  (return-type "gdouble")
)

(define-method set_audio_volume
  (of-object "ClutterMedia")
  (c-name "clutter_media_set_audio_volume")
  (return-type "none")
  (parameters
    '("gdouble" "volume")
  )
)

(define-method get_audio_volume
  (of-object "ClutterMedia")
  (c-name "clutter_media_get_audio_volume")
  (return-type "gdouble")
)

(define-method get_can_seek
  (of-object "ClutterMedia")
  (c-name "clutter_media_get_can_seek")
  (return-type "gboolean")
)

(define-method get_buffer_fill
  (of-object "ClutterMedia")
  (c-name "clutter_media_get_buffer_fill")
  (return-type "gdouble")
)

(define-method get_duration
  (of-object "ClutterMedia")
  (c-name "clutter_media_get_duration")
  (return-type "gdouble")
)



;; From clutter-model.h

(define-function model_get_type
  (c-name "clutter_model_get_type")
  (return-type "GType")
)

(define-method set_types
  (of-object "ClutterModel")
  (c-name "clutter_model_set_types")
  (docstring
  "Sets the types of the columns inside a clutter.Model. This function is\n"
  "meant primarily for GObjects that inherit from clutter.Model, and\n"
  "should only be used when contructing a clutter.Model. It will not work\n"
  "after the initial creation of the clutter.Model.\n"
  )
  (return-type "none")
  (parameters
    '("guint" "n_columns")
    '("GType*" "types")
  )
)

(define-method set_names
  (of-object "ClutterModel")
  (c-name "clutter_model_set_names")
  (docstring
  "Assigns a name to the columns of a clutter.Model. This function is\n"
  "meant primarily for GObjects that inherit from clutter.Model, and\n"
  "should only be used when contructing a clutter.Model. It will not work\n"
  "after the initial creation of the clutter.Model.\n"
  )
  (return-type "none")
  (parameters
    '("guint" "n_columns")
    '("const-gchar*-const[]" "names")
  )
)

(define-method append_value
  (of-object "ClutterModel")
  (c-name "clutter_model_append_value")
  (docstring
  "Creates and appends a new row to the clutter.Model, setting the row\n"
  "values upon creation. For example, to append a new row where column 0\n"
  "is type G_TYPE_INT and column 1 is of type G_TYPE_STRING:\n"
  "<informalexample><programlisting> clutter.Model *model; model =\n"
  "clutter.Model.default_new (2, G_TYPE_INT,    Score, G_TYPE_STRING,\n"
  "Team); clutter.Model.append (model, 0, 42, 1, Team 1, -1);\n"
  "</programlisting></informalexample>\n"
  )
  (return-type "none")
  (parameters
    '("guint" "column")
    '("const-GValue*" "value")
  )
)

(define-method prepend_value
  (of-object "ClutterModel")
  (c-name "clutter_model_prepend_value")
  (docstring
  "Creates and prepends a new row to the clutter.Model, setting the row\n"
  "values upon creation. For example, to prepend a new row where column 0\n"
  "is type G_TYPE_INT and column 1 is of type G_TYPE_STRING:\n"
  "<informalexample><programlisting> clutter.Model *model; model =\n"
  "clutter.Model.default_new (2, G_TYPE_INT,    Score, G_TYPE_STRING,\n"
  "Team); clutter.Model.prepend (model, 0, 42, 1, Team 1, -1);\n"
  "</programlisting></informalexample>\n"
  )
  (return-type "none")
  (parameters
    '("guint" "column")
    '("const-GValue*" "value")
  )
)

(define-method get_n_columns
  (of-object "ClutterModel")
  (c-name "clutter_model_get_n_columns")
  (docstring
  "Retrieves the number of columns inside model.\n"
  )
  (return-type "guint")
)

(define-method get_column_name
  (of-object "ClutterModel")
  (c-name "clutter_model_get_column_name")
  (docstring
  "Retrieves the name of the column string, and it should not be modified\n"
  "or freed\n"
  )
  (return-type "const-gchar*")
  (parameters
    '("guint" "column")
  )
)

(define-method get_column_type
  (of-object "ClutterModel")
  (c-name "clutter_model_get_column_type")
  (docstring
  "Retrieves the type of the column.\n"
  )
  (return-type "GType")
  (parameters
    '("guint" "column")
  )
)

(define-method resort
  (of-object "ClutterModel")
  (c-name "clutter_model_resort")
  (docstring
  "Force a resort on the model. This function should only be used by\n"
  "subclasses of clutter.Model.\n"
  )
  (return-type "none")
)

(define-method filter_row
  (of-object "ClutterModel")
  (c-name "clutter_model_filter_row")
  (docstring
  "Checks whether row should be filtered or not using the filtering\n"
  "function set on model. This function should be used only by subclasses\n"
  "of clutter.Model. FALSE otherwise\n"
  )
  (return-type "gboolean")
  (parameters
    '("guint" "row")
  )
)

(define-method filter_iter
  (of-object "ClutterModel")
  (c-name "clutter_model_filter_iter")
  (docstring
  "Checks whether the row pointer by iter should be filtered or not using\n"
  "the filtering function set on model. This function should be used only\n"
  "by subclasses of clutter.Model. FALSE otherwise\n"
  )
  (return-type "gboolean")
  (parameters
    '("ClutterModelIter*" "iter")
  )
)

(define-method append
  (of-object "ClutterModel")
  (c-name "clutter_model_append")
  (return-type "gboolean")
  (parameters
  )
  (varargs #t)
)

(define-method prepend
  (of-object "ClutterModel")
  (c-name "clutter_model_prepend")
  (return-type "gboolean")
  (parameters
  )
  (varargs #t)
)

(define-method insert
  (of-object "ClutterModel")
  (c-name "clutter_model_insert")
  (docstring
  "Inserts a new row to the clutter.Model at row, setting the row values\n"
  "upon creation. For example, to insert a new row at index 100, where\n"
  "column 0 is type G_TYPE_INT and column 1 is of type G_TYPE_STRING:\n"
  "<informalexample><programlisting> clutter.Model *model; model =\n"
  "clutter.Model.default_new (2, G_TYPE_INT,    Score, G_TYPE_STRING,\n"
  "Team); clutter.Model.insert (model, 3, 0, 42, 1, Team 1, -1);\n"
  "</programlisting></informalexample>\n"
  )
  (return-type "gboolean")
  (parameters
    '("guint" "index_")
  )
  (varargs #t)
)

(define-method insert_value
  (of-object "ClutterModel")
  (c-name "clutter_model_insert_value")
  (docstring
  "Sets the data in the cell specified by iter and column. The type of\n"
  "not exist then it is created.\n"
  )
  (return-type "gboolean")
  (parameters
    '("guint" "index_")
    '("guint" "column")
    '("const-GValue*" "value")
  )
)

(define-method remove
  (of-object "ClutterModel")
  (c-name "clutter_model_remove")
  (docstring
  "Removes the row at the given position from the model.\n"
  )
  (return-type "none")
  (parameters
    '("guint" "index_")
  )
)

(define-method get_n_rows
  (of-object "ClutterModel")
  (c-name "clutter_model_get_n_rows")
  (docstring
  "Retrieves the number of rows inside model, eventually taking into\n"
  "account any filtering function set using clutter.Model.set_filter().\n"
  "the length of the filtered model is returned.\n"
  )
  (return-type "guint")
)

(define-method get_first_iter
  (of-object "ClutterModel")
  (c-name "clutter_model_get_first_iter")
  (docstring
  "Retrieves a clutter.ModelIter representing the first non-filtered row\n"
  "in model. Call g_object_unref() when done using it\n"
  )
  (return-type "ClutterModelIter*")
)

(define-method get_last_iter
  (of-object "ClutterModel")
  (c-name "clutter_model_get_last_iter")
  (docstring
  "Retrieves a clutter.ModelIter representing the last non-filtered row\n"
  "in model. Call g_object_unref() when done using it\n"
  )
  (return-type "ClutterModelIter*")
)

(define-method get_iter_at_row
  (of-object "ClutterModel")
  (c-name "clutter_model_get_iter_at_row")
  (docstring
  "Retrieves a clutter.ModelIter representing the row at the given index.\n"
  "If a filter function has been set using clutter.Model.set_filter()\n"
  "then the model implementation will return the first non filtered row.\n"
  "out of bounds. When done using the iterator object, call\n"
  "g_object_unref() to deallocate its resources\n"
  )
  (return-type "ClutterModelIter*")
  (parameters
    '("guint" "index_")
  )
)

(define-method set_sorting_column
  (of-object "ClutterModel")
  (c-name "clutter_model_set_sorting_column")
  (docstring
  "Sets the model to sort by column. If column is a negative value the\n"
  "sorting column will be unset.\n"
  )
  (return-type "none")
  (parameters
    '("guint" "column")
  )
)

(define-method get_sorting_column
  (of-object "ClutterModel")
  (c-name "clutter_model_get_sorting_column")
  (docstring
  "Retrieves the number of column used for sorting the model.\n"
  )
  (return-type "guint")
)

(define-method foreach
  (of-object "ClutterModel")
  (c-name "clutter_model_foreach")
  (docstring
  "Calls func for each row in the model.\n"
  )
  (return-type "none")
  (parameters
    '("ClutterModelForeachFunc" "func")
    '("gpointer" "user_data")
  )
)

(define-method set_sort
  (of-object "ClutterModel")
  (c-name "clutter_model_set_sort")
  (return-type "none")
  (parameters
    '("guint" "column")
    '("ClutterModelSortFunc" "func")
    '("gpointer" "user_data")
    '("GDestroyNotify" "notify")
  )
)

(define-method set_filter
  (of-object "ClutterModel")
  (c-name "clutter_model_set_filter")
  (docstring
  "Filters the model using the given filtering function.\n"
  )
  (return-type "none")
  (parameters
    '("ClutterModelFilterFunc" "func")
    '("gpointer" "user_data")
    '("GDestroyNotify" "notify")
  )
)

(define-method get_filter_set
  (of-object "ClutterModel")
  (c-name "clutter_model_get_filter_set")
  (docstring
  "Returns whether the model has a filter in place, set using\n"
  "clutter.Model.set_filter()\n"
  )
  (return-type "gboolean")
)

(define-function model_iter_get_type
  (c-name "clutter_model_iter_get_type")
  (docstring
  "Gets the value of one or more cells in the row referenced by iter. The\n"
  "variable argument list should contain integer column numbers, each\n"
  "column column number followed by a place to store the value being\n"
  "retrieved. The list is terminated by a -1. For example, to get a value\n"
  "from column 0 with type G_TYPE_STRING use:\n"
  "<informalexample><programlisting> clutter.Model.iter_get (iter, 0,\n"
  "&place_string_here, -1); </programlisting></informalexample> where\n"
  "place_string_here is a gchar* to be filled with the string. If\n"
  "appropriate, the returned values have to be freed or unreferenced.\n"
  )
  (return-type "GType")
)

(define-method get
  (of-object "ClutterModelIter")
  (c-name "clutter_model_iter_get")
  (return-type "none")
  (parameters
  )
  (varargs #t)
)

(define-method get_valist
  (of-object "ClutterModelIter")
  (c-name "clutter_model_iter_get_valist")
  (return-type "none")
  (parameters
    '("va_list" "args")
  )
)

(define-method get_value
  (of-object "ClutterModelIter")
  (c-name "clutter_model_iter_get_value")
  (docstring
  "Sets an initializes value to that at column. When done with value,\n"
  "g_value_unset() needs to be called to free any allocated memory.\n"
  )
  (return-type "none")
  (parameters
    '("guint" "column")
    '("GValue*" "value")
  )
)

(define-method set
  (of-object "ClutterModelIter")
  (c-name "clutter_model_iter_set")
  (docstring
  "Sets the value of one or more cells in the row referenced by iter. The\n"
  "variable argument list should contain integer column numbers, each\n"
  "column column number followed by the value to be set. The  list is\n"
  "terminated by a -1. For example, to set column 0 with type\n"
  "G_TYPE_STRING, use: <informalexample><programlisting>\n"
  "clutter.Model.iter_set (iter, 0, foo, -1);\n"
  "</programlisting></informalexample>\n"
  )
  (return-type "none")
  (parameters
  )
  (varargs #t)
)

(define-method set_valist
  (of-object "ClutterModelIter")
  (c-name "clutter_model_iter_set_valist")
  (return-type "none")
  (parameters
    '("va_list" "args")
  )
)

(define-method set_value
  (of-object "ClutterModelIter")
  (c-name "clutter_model_iter_set_value")
  (docstring
  "Sets the data in the cell specified by iter and column. The type of\n"
  )
  (return-type "none")
  (parameters
    '("guint" "column")
    '("const-GValue*" "value")
  )
)

(define-method is_first
  (of-object "ClutterModelIter")
  (c-name "clutter_model_iter_is_first")
  (docstring
  "Gets whether the current iterator is at the beginning of the model to\n"
  "which it belongs.\n"
  )
  (return-type "gboolean")
)

(define-method is_last
  (of-object "ClutterModelIter")
  (c-name "clutter_model_iter_is_last")
  (docstring
  "Gets whether the iterator is at the end of the model to which it\n"
  "belongs.\n"
  )
  (return-type "gboolean")
)

(define-method next
  (of-object "ClutterModelIter")
  (c-name "clutter_model_iter_next")
  (docstring
  "Updates the iter to point at the next position in the model. The model\n"
  "implementation should take into account the presence of a filter\n"
  "function. row in the model.\n"
  )
  (return-type "ClutterModelIter*")
)

(define-method prev
  (of-object "ClutterModelIter")
  (c-name "clutter_model_iter_prev")
  (docstring
  "Sets the iter to point at the previous position in the model. The\n"
  "model implementation should take into account the presence of a filter\n"
  "function. row in the model.\n"
  )
  (return-type "ClutterModelIter*")
)

(define-method get_model
  (of-object "ClutterModelIter")
  (c-name "clutter_model_iter_get_model")
  (docstring
  "Retrieves a pointer to the clutter.Model that this iter is part of.\n"
  )
  (return-type "ClutterModel*")
)

(define-method get_row
  (of-object "ClutterModelIter")
  (c-name "clutter_model_iter_get_row")
  (docstring
  "Retrieves the position of the row that the iter points to.\n"
  )
  (return-type "guint")
)

(define-method copy
  (of-object "ClutterModelIter")
  (c-name "clutter_model_iter_copy")
  (docstring
  "Copies the passed iterator.\n"
  )
  (return-type "ClutterModelIter*")
)

(define-method appendv
  (of-object "ClutterModel")
  (c-name "clutter_model_appendv")
  (docstring
  "Creates and appends a new row to the clutter.Model, setting the row\n"
  "values for the given columns upon creation.\n"
  )
  (return-type "none")
  (parameters
    '("guint" "n_columns")
    '("guint*" "columns")
    '("GValue*" "values")
  )
)

(define-method prependv
  (of-object "ClutterModel")
  (c-name "clutter_model_prependv")
  (docstring
  "Creates and prepends a new row to the clutter.Model, setting the row\n"
  "values for the given columns upon creation.\n"
  )
  (return-type "none")
  (parameters
    '("guint" "n_columns")
    '("guint*" "columns")
    '("GValue*" "values")
  )
)

(define-method insertv
  (of-object "ClutterModel")
  (c-name "clutter_model_insertv")
  (docstring
  "Inserts data at row into the clutter.Model, setting the row values for\n"
  "the given columns upon creation.\n"
  )
  (return-type "none")
  (parameters
    '("guint" "row")
    '("guint" "n_columns")
    '("guint*" "columns")
    '("GValue*" "values")
  )
)


;; From clutter-list-model.h

(define-function list_model_get_type
  (c-name "clutter_list_model_get_type")
  (return-type "GType")
)

(define-function list_model_new
  (c-name "clutter_list_model_new")
  (is-constructor-of "ClutterListModel")
  (return-type "ClutterModel*")
)

(define-function list_model_newv
  (c-name "clutter_list_model_newv")
  (is-constructor-of "ClutterListModel")
  (return-type "ClutterModel*")
)



;; From clutter-rectangle.h

(define-function rectangle_get_type
  (c-name "clutter_rectangle_get_type")
  (return-type "GType")
)

(define-function rectangle_new
  (c-name "clutter_rectangle_new")
  (is-constructor-of "ClutterRectangle")
  (return-type "ClutterActor*")
  (properties
    '("color" (optional))
  )
)

(define-function rectangle_new_with_color
  (c-name "clutter_rectangle_new_with_color")
  (return-type "ClutterActor*")
  (parameters
    '("const-ClutterColor*" "color")
  )
)

(define-method get_color
  (of-object "ClutterRectangle")
  (c-name "clutter_rectangle_get_color")
  (docstring
  "Retrieves the color of rectangle.\n"
  )
  (return-type "none")
  (parameters
    '("ClutterColor*" "color")
  )
)

(define-method set_color
  (of-object "ClutterRectangle")
  (c-name "clutter_rectangle_set_color")
  (docstring
  "Sets the color of rectangle.\n"
  )
  (return-type "none")
  (parameters
    '("const-ClutterColor*" "color")
  )
)

(define-method get_border_width
  (of-object "ClutterRectangle")
  (c-name "clutter_rectangle_get_border_width")
  (docstring
  "Gets the width (in pixels) of the border used by rectangle\n"
  )
  (return-type "guint")
)

(define-method set_border_width
  (of-object "ClutterRectangle")
  (c-name "clutter_rectangle_set_border_width")
  (docstring
  "Sets the width (in pixel) of the border used by rectangle. A width of\n"
  "0 will unset the border.\n"
  )
  (return-type "none")
  (parameters
    '("guint" "width")
  )
)

(define-method get_border_color
  (of-object "ClutterRectangle")
  (c-name "clutter_rectangle_get_border_color")
  (docstring
  "Gets the color of the border used by rectangle and places it into\n"
  "color.\n"
  )
  (return-type "none")
  (parameters
    '("ClutterColor*" "color")
  )
)

(define-method set_border_color
  (of-object "ClutterRectangle")
  (c-name "clutter_rectangle_set_border_color")
  (docstring
  "Sets the color of the border used by rectangle using color\n"
  )
  (return-type "none")
  (parameters
    '("const-ClutterColor*" "color")
  )
)



;; From clutter-score.h

(define-function score_get_type
  (c-name "clutter_score_get_type")
  (return-type "GType")
)

(define-function score_new
  (c-name "clutter_score_new")
  (is-constructor-of "ClutterScore")
  (return-type "ClutterScore*")
)

(define-method set_loop
  (of-object "ClutterScore")
  (c-name "clutter_score_set_loop")
  (docstring
  "Sets whether score should loop. A looping clutter.Score will start\n"
  "from its initial state after the ::complete signal has been fired.\n"
  )
  (return-type "none")
  (parameters
    '("gboolean" "loop")
  )
)

(define-method get_loop
  (of-object "ClutterScore")
  (c-name "clutter_score_get_loop")
  (docstring
  "Gets whether score is looping\n"
  )
  (return-type "gboolean")
)

(define-method rewind
  (of-object "ClutterScore")
  (c-name "clutter_score_rewind")
  (docstring
  "Rewinds a clutter.Score to its initial state.\n"
  )
  (return-type "none")
)

(define-method is_playing
  (of-object "ClutterScore")
  (c-name "clutter_score_is_playing")
  (docstring
  "Query state of a clutter.Score instance.\n"
  )
  (return-type "gboolean")
)

(define-method start
  (of-object "ClutterScore")
  (c-name "clutter_score_start")
  (docstring
  "Starts the score.\n"
  )
  (return-type "none")
)

(define-method stop
  (of-object "ClutterScore")
  (c-name "clutter_score_stop")
  (docstring
  "Stops and rewinds a playing clutter.Score instance.\n"
  )
  (return-type "none")
)

(define-method pause
  (of-object "ClutterScore")
  (c-name "clutter_score_pause")
  (docstring
  "Pauses a playing score score.\n"
  )
  (return-type "none")
)

(define-method append
  (of-object "ClutterScore")
  (c-name "clutter_score_append")
  (docstring
  "Appends a timeline to another one existing in the score; the newly\n"
  "appended timeline will be started when parent is complete. If parent\n"
  "is NULL, the new clutter.Timeline will be started when\n"
  "clutter.Score.start() is called. clutter.Score will take a reference\n"
  "on timeline. 0 on failure. The returned id can be used with\n"
  "clutter.Score.remove() or clutter.Score.get_timeline().\n"
  )
  (return-type "guint")
  (parameters
    '("ClutterTimeline*" "parent")
    '("ClutterTimeline*" "timeline")
  )
)

(define-method append_at_marker
  (of-object "ClutterScore")
  (c-name "clutter_score_append_at_marker")
  (docstring
  "Appends timeline at the given marker_name on the parent\n"
  "clutter.Timeline. If you want to append timeline at the end of parent,\n"
  "use clutter.Score.append(). The clutter.Score will take a reference on\n"
  "timeline. 0 on failure. The returned id can be used with\n"
  "clutter.Score.remove() or clutter.Score.get_timeline().\n"
  )
  (return-type "gulong")
  (parameters
    '("ClutterTimeline*" "parent")
    '("const-gchar*" "marker_name")
    '("ClutterTimeline*" "timeline")
  )
)

(define-method remove
  (of-object "ClutterScore")
  (c-name "clutter_score_remove")
  (docstring
  "Removes the clutter.Timeline with the given id inside score. If the\n"
  "timeline has other timelines attached to it, those are removed as\n"
  "well.\n"
  )
  (return-type "none")
  (parameters
    '("guint" "id")
  )
)

(define-method remove_all
  (of-object "ClutterScore")
  (c-name "clutter_score_remove_all")
  (docstring
  "Removes all the timelines inside score.\n"
  )
  (return-type "none")
)

(define-method get_timeline
  (of-object "ClutterScore")
  (c-name "clutter_score_get_timeline")
  (docstring
  "Retrieves the clutter.Timeline for id inside score. function does not\n"
  "increase the reference count on the returned clutter.Timeline\n"
  )
  (return-type "ClutterTimeline*")
  (parameters
    '("guint" "id")
  )
)

(define-method list_timelines
  (of-object "ClutterScore")
  (c-name "clutter_score_list_timelines")
  (docstring
  "Retrieves a list of all the clutter.Timelines managed by score.\n"
  "containing all the timelines in the score. This function does not\n"
  "increase the reference count of the returned timelines. Use\n"
  "g_slist_free() on the returned list to deallocate its resources.\n"
  )
  (return-type "GSList*")
)



;; From clutter-scriptable.h

(define-function scriptable_get_type
  (c-name "clutter_scriptable_get_type")
  (return-type "GType")
)

(define-method set_id
  (of-object "ClutterScriptable")
  (c-name "clutter_scriptable_set_id")
  (return-type "none")
  (parameters
    '("const-gchar*" "id")
  )
)

(define-virtual set_id
  (of-object "ClutterScriptable")
  (return-type "none")
  (parameters
    '("const-gchar*" "id")
  )
)

(define-method get_id
  (of-object "ClutterScriptable")
  (c-name "clutter_scriptable_get_id")
  (return-type "const-gchar*")
)

(define-virtual get_id
  (of-object "ClutterScriptable")
  (return-type "const-gchar*")
)

(define-method parse_custom_node
  (of-object "ClutterScriptable")
  (c-name "clutter_scriptable_parse_custom_node")
  (return-type "gboolean")
  (parameters
    '("ClutterScript*" "script")
    '("GValue*" "value")
    '("const-gchar*" "name")
    '("JsonNode*" "node")
  )
)

(define-virtual parse_custom_node
  (of-object "ClutterScriptable")
  (return-type "gboolean")
  (parameters
    '("ClutterScript*" "script")
    '("GValue*" "value")
    '("const-gchar*" "name")
    '("JsonNode*" "node")
  )
)

(define-method set_custom_property
  (of-object "ClutterScriptable")
  (c-name "clutter_scriptable_set_custom_property")
  (return-type "none")
  (parameters
    '("ClutterScript*" "script")
    '("const-gchar*" "name")
    '("const-GValue*" "value")
  )
)

(define-virtual set_custom_property
  (of-object "ClutterScriptable")
  (return-type "none")
  (parameters
    '("ClutterScript*" "script")
    '("const-gchar*" "name")
    '("const-GValue*" "value")
  )
)



;; From clutter-script.h

(define-function script_error_quark
  (c-name "clutter_script_error_quark")
  (return-type "GQuark")
)

(define-function script_get_type
  (c-name "clutter_script_get_type")
  (return-type "GType")
)

(define-function script_new
  (c-name "clutter_script_new")
  (is-constructor-of "ClutterScript")
  (return-type "ClutterScript*")
)

(define-method load_from_file
  (of-object "ClutterScript")
  (c-name "clutter_script_load_from_file")
  (docstring
  "Loads the definitions from filename into script and merges with the\n"
  "currently loaded ones, if any. accordingly. On success, the merge id\n"
  "for the UI definitions is returned. You can use the merge id with\n"
  "clutter.Script.unmerge().\n"
  )
  (return-type "guint")
  (parameters
    '("const-gchar*" "filename")
    '("GError**" "error")
  )
)

(define-method load_from_data
  (of-object "ClutterScript")
  (c-name "clutter_script_load_from_data")
  (docstring
  "buffer Loads the definitions from data into script and merges with the\n"
  "currently loaded ones, if any. accordingly. On success, the merge id\n"
  "for the UI definitions is returned. You can use the merge id with\n"
  "clutter.Script.unmerge().\n"
  )
  (return-type "guint")
  (parameters
    '("const-gchar*" "data")
    '("gsize" "length")
    '("GError**" "error")
  )
)

(define-method get_object
  (of-object "ClutterScript")
  (c-name "clutter_script_get_object")
  (docstring
  "Retrieves the object bound to name. This function does not increment\n"
  "the reference count of the returned object. with the given name was\n"
  "available\n"
  )
  (return-type "GObject*")
  (parameters
    '("const-gchar*" "name")
  )
)

(define-method get_objects
  (of-object "ClutterScript")
  (c-name "clutter_script_get_objects")
  (docstring
  "with NULL Retrieves a list of objects for the given names. After\n"
  "script, object names/return location pairs should be listed, with a\n"
  "NULL pointer ending the list, like: <informalexample><programlisting>\n"
  "GObject *my_label, *a_button, *main_timeline;\n"
  "clutter.Script.get_objects (script, my-label, &amp;my_label, a-button,\n"
  "&amp;a_button, main-timeline, &amp;main_timeline, NULL);\n"
  "</programlisting></informalexample> returned objects.\n"
  )
  (return-type "gint")
  (parameters
    '("const-gchar*" "first_name")
  )
  (varargs #t)
)

(define-method unmerge_objects
  (of-object "ClutterScript")
  (c-name "clutter_script_unmerge_objects")
  (docstring
  "Unmerges the objects identified by merge_id.\n"
  )
  (return-type "none")
  (parameters
    '("guint" "merge_id")
  )
)

(define-method ensure_objects
  (of-object "ClutterScript")
  (c-name "clutter_script_ensure_objects")
  (docstring
  "Ensure that every object defined inside script is correctly\n"
  "constructed. You should rarely need to use this function.\n"
  )
  (return-type "none")
)

(define-method get_type_from_name
  (of-object "ClutterScript")
  (c-name "clutter_script_get_type_from_name")
  (docstring
  "Looks up a type by name, using the virtual function that\n"
  "clutter.Script has for that purpose. This function should rarely be\n"
  "used. G_TYPE_INVALID if not corresponding type was found.\n"
  )
  (return-type "GType")
  (parameters
    '("const-gchar*" "type_name")
  )
)

(define-function get_script_id
  (c-name "clutter_get_script_id")
  (docstring
  "Retrieves the clutter. script id, if any. a UI definition file. The\n"
  "returned string is owned by the object and should never be modified or\n"
  "freed.\n"
  )
  (return-type "const-gchar*")
  (parameters
    '("GObject*" "gobject")
  )
)

(define-method connect_signals
  (of-object "ClutterScript")
  (c-name "clutter_script_connect_signals")
  (docstring
  "Connects all the signals defined into a UI definition file to their\n"
  "handlers. This method invokes clutter.Script.connect_signals_full()\n"
  "internally and uses  GModule's introspective features (by opening the\n"
  "current module's scope) to look at the application's symbol table.\n"
  "Note that this function will not work if GModule is not supported by\n"
  "the platform clutter. is running on.\n"
  )
  (return-type "none")
  (parameters
    '("gpointer" "user_data")
  )
)

(define-method connect_signals_full
  (of-object "ClutterScript")
  (c-name "clutter_script_connect_signals_full")
  (docstring
  "Connects all the signals defined into a UI definition file to their\n"
  "handlers. This function allows to control how the signal handlers are\n"
  "going to be connected to their respective signals. It is meant\n"
  "primarily for language bindings to allow resolving the function names\n"
  "using the native API. Applications should use\n"
  "clutter.Script.connect_signals().\n"
  )
  (return-type "none")
  (parameters
    '("ClutterScriptConnectFunc" "func")
    '("gpointer" "user_data")
  )
)

(define-method add_search_paths
  (of-object "ClutterScript")
  (c-name "clutter_script_add_search_paths")
  (docstring
  "Adds paths to the list of search paths held by script. The search\n"
  "paths are used by clutter.Script.lookup_filename(), which can be used\n"
  "to define search paths for the textures source file name or other\n"
  "custom, file-based properties.\n"
  )
  (return-type "none")
  (parameters
    '("const-gchar*-const[]" "paths")
    '("gsize" "n_paths")
  )
)

(define-method lookup_filename
  (of-object "ClutterScript")
  (c-name "clutter_script_lookup_filename")
  (docstring
  "Looks up filename inside the search paths of script. If filename is\n"
  "found, its full path will be returned . found.\n"
  )
  (return-type "gchar*")
  (parameters
    '("const-gchar*" "filename")
  )
)

(define-method list_objects
  (of-object "ClutterScript")
  (c-name "clutter_script_list_objects")
  (docstring
  "Retrieves all the objects created by script. objects it returns. or\n"
  "NULL. The objects are owned by the clutter.Script instance. Use\n"
  "g_list_free() on the returned value when done.\n"
  )
  (return-type "GList*")
)



;; From clutter-shader.h

(define-function shader_error_quark
  (c-name "clutter_shader_error_quark")
  (return-type "GQuark")
)

(define-function shader_get_type
  (c-name "clutter_shader_get_type")
  (return-type "GType")
)

(define-function shader_new
  (c-name "clutter_shader_new")
  (is-constructor-of "ClutterShader")
  (return-type "ClutterShader*")
)

(define-method set_is_enabled
  (of-object "ClutterShader")
  (c-name "clutter_shader_set_is_enabled")
  (docstring
  "Enables a shader. This function will attempt to compile and link the\n"
  "shader, if it isn't already. When enabled is FALSE the default state\n"
  "of the GL pipeline will be used instead.\n"
  )
  (return-type "none")
  (parameters
    '("gboolean" "enabled")
  )
)

(define-method get_is_enabled
  (of-object "ClutterShader")
  (c-name "clutter_shader_get_is_enabled")
  (docstring
  "Checks whether shader is enabled.\n"
  )
  (return-type "gboolean")
)

(define-method compile
  (of-object "ClutterShader")
  (c-name "clutter_shader_compile")
  (docstring
  "Compiles and links GLSL sources set for vertex and fragment shaders\n"
  "for a clutter.Shader. If the compilation fails and a GError return\n"
  "location is provided the error will contain the errors from the\n"
  "compiler, if any.\n"
  )
  (return-type "gboolean")
  (parameters
    '("GError**" "error")
  )
)

(define-method release
  (of-object "ClutterShader")
  (c-name "clutter_shader_release")
  (docstring
  "Frees up any GL context resources held by the shader.\n"
  )
  (return-type "none")
)

(define-method is_compiled
  (of-object "ClutterShader")
  (c-name "clutter_shader_is_compiled")
  (docstring
  "Checks whether shader is is currently compiled, linked and bound to\n"
  "the GL context.\n"
  )
  (return-type "gboolean")
)

(define-method set_vertex_source
  (of-object "ClutterShader")
  (c-name "clutter_shader_set_vertex_source")
  (docstring
  "Sets the GLSL source code to be used by a clutter.Shader for the\n"
  "vertex program.\n"
  )
  (return-type "none")
  (parameters
    '("const-gchar*" "data")
    '("gssize" "length")
  )
)

(define-method set_fragment_source
  (of-object "ClutterShader")
  (c-name "clutter_shader_set_fragment_source")
  (docstring
  "Sets the GLSL source code to be used by a clutter.Shader for the\n"
  "fragment program.\n"
  )
  (return-type "none")
  (parameters
    '("const-gchar*" "data")
    '("gssize" "length")
  )
)

(define-method get_vertex_source
  (of-object "ClutterShader")
  (c-name "clutter_shader_get_vertex_source")
  (docstring
  "Query the current GLSL vertex source set on shader. clutter.Shader\n"
  "object or NULL. The returned string is owned by the shader object and\n"
  "should never be modified or freed\n"
  )
  (return-type "const-gchar*")
)

(define-method get_fragment_source
  (of-object "ClutterShader")
  (c-name "clutter_shader_get_fragment_source")
  (docstring
  "Query the current GLSL fragment source set on shader. clutter.Shader\n"
  "object or NULL. The returned string is owned by the shader object and\n"
  "should never be modified or freed\n"
  )
  (return-type "const-gchar*")
)

(define-method set_uniform
  (of-object "ClutterShader")
  (c-name "clutter_shader_set_uniform")
  (docstring
  "GValue. Sets a user configurable variable in the GLSL shader programs\n"
  "attached to a clutter.Shader.\n"
  )
  (return-type "none")
  (parameters
    '("const-gchar*" "name")
    '("const-GValue*" "value")
  )
)

(define-method get_cogl_program
  (of-object "ClutterShader")
  (c-name "clutter_shader_get_cogl_program")
  (docstring
  "Retrieves the underlying CoglHandle for the shader program.\n"
  )
  (return-type "CoglHandle")
)

(define-method get_cogl_fragment_shader
  (of-object "ClutterShader")
  (c-name "clutter_shader_get_cogl_fragment_shader")
  (docstring
  "Retrieves the underlying CoglHandle for the fragment shader.\n"
  )
  (return-type "CoglHandle")
)

(define-method get_cogl_vertex_shader
  (of-object "ClutterShader")
  (c-name "clutter_shader_get_cogl_vertex_shader")
  (docstring
  "Retrieves the underlying CoglHandle for the vertex shader.\n"
  )
  (return-type "CoglHandle")
)

;; From clutter-shader-types.h

(define-function shader_float_get_type
  (c-name "clutter_shader_float_get_type")
  (return-type "GType")
)

(define-function shader_int_get_type
  (c-name "clutter_shader_int_get_type")
  (return-type "GType")
)

(define-function shader_matrix_get_type
  (c-name "clutter_shader_matrix_get_type")
  (return-type "GType")
)

(define-function value_set_shader_float
  (c-name "clutter_value_set_shader_float")
  (docstring
  "Sets floats as the contents of value. The passed GValue must have been\n"
  "initialized using CLUTTER_TYPE_SHADER_FLOAT.\n"
  )
  (return-type "none")
  (parameters
    '("GValue*" "value")
    '("gint" "size")
    '("const-gfloat*" "floats")
  )
)

(define-function value_set_shader_int
  (c-name "clutter_value_set_shader_int")
  (docstring
  "Sets ints as the contents of value. The passed GValue must have been\n"
  "initialized using CLUTTER_TYPE_SHADER_INT.\n"
  )
  (return-type "none")
  (parameters
    '("GValue*" "value")
    '("gint" "size")
    '("const-gint*" "ints")
  )
)

(define-function value_set_shader_matrix
  (c-name "clutter_value_set_shader_matrix")
  (docstring
  "Sets matrix as the contents of value. The passed GValue must have been\n"
  "initialized using CLUTTER_TYPE_SHADER_MATRIX.\n"
  )
  (return-type "none")
  (parameters
    '("GValue*" "value")
    '("gint" "size")
    '("const-gfloat*" "matrix")
  )
)

(define-function value_get_shader_float
  (c-name "clutter_value_get_shader_float")
  (docstring
  "point values, or NULL Retrieves the list of floating point values\n"
  "stored inside the passed GValue. value must have been initialized with\n"
  "CLUTTER_TYPE_SHADER_FLOAT. The returned value is owned by the GValue\n"
  "and should never be modified or freed.\n"
  )
  (return-type "const-gfloat*")
  (parameters
    '("const-GValue*" "value")
    '("gsize*" "length")
  )
)

(define-function value_get_shader_int
  (c-name "clutter_value_get_shader_int")
  (docstring
  "values, or NULL Retrieves the list of integer values stored inside the\n"
  "passed GValue. value must have been initialized with\n"
  "CLUTTER_TYPE_SHADER_INT. The returned value is owned by the GValue and\n"
  "should never be modified or freed.\n"
  )
  (return-type "const-gint*")
  (parameters
    '("const-GValue*" "value")
    '("gsize*" "length")
  )
)

(define-function value_get_shader_matrix
  (c-name "clutter_value_get_shader_matrix")
  (docstring
  "point values, or NULL Retrieves a matrix of floating point values\n"
  "stored inside the passed GValue. value must have been initialized with\n"
  "CLUTTER_TYPE_SHADER_MATRIX. of floating point values. The returned\n"
  "value is owned by the GValue and should never be modified or freed.\n"
  )
  (return-type "const-gfloat*")
  (parameters
    '("const-GValue*" "value")
    '("gsize*" "length")
  )
)



;; From clutter-stage.h

(define-function perspective_get_type
  (c-name "clutter_perspective_get_type")
  (return-type "GType")
)

(define-function fog_get_type
  (c-name "clutter_fog_get_type")
  (return-type "GType")
)

(define-function stage_get_type
  (c-name "clutter_stage_get_type")
  (return-type "GType")
)

(define-function stage_get_default
  (c-name "clutter_stage_get_default")
  (return-type "ClutterActor*")
)

(define-function stage_new
  (c-name "clutter_stage_new")
  (is-constructor-of "ClutterStage")
  (return-type "ClutterActor*")
)

(define-method set_color
  (of-object "ClutterStage")
  (c-name "clutter_stage_set_color")
  (docstring
  "Sets the stage color.\n"
  )
  (return-type "none")
  (parameters
    '("const-ClutterColor*" "color")
  )
)

(define-method get_color
  (of-object "ClutterStage")
  (c-name "clutter_stage_get_color")
  (docstring
  "Retrieves the stage color.\n"
  )
  (return-type "none")
  (parameters
    '("ClutterColor*" "color")
  )
)

(define-method set_perspective
  (of-object "ClutterStage")
  (c-name "clutter_stage_set_perspective")
  (docstring
  "Sets the stage perspective.\n"
  )
  (return-type "none")
  (parameters
    '("ClutterPerspective*" "perspective")
  )
)

(define-method get_perspective
  (of-object "ClutterStage")
  (c-name "clutter_stage_get_perspective")
  (docstring
  "Retrieves the stage perspective.\n"
  )
  (return-type "none")
  (parameters
    '("ClutterPerspective*" "perspective")
  )
)

(define-method set_fullscreen
  (of-object "ClutterStage")
  (c-name "clutter_stage_set_fullscreen")
  (docstring
  "Asks to place the stage window in the fullscreen or unfullscreen\n"
  "states. Note that you shouldn't assume the window is definitely full\n"
  "screen afterward, because other entities (e.g. the user or window\n"
  "manager) could unfullscreen it again, and not all window managers\n"
  "honor requests to fullscreen windows. If you want to receive\n"
  "notification of the fullscreen state you should either use the\n"
  "clutter.Stage::fullscreen and clutter.Stage::unfullscreen signals, or\n"
  "use the notify signal for the clutter.Stage:fullscreen-set property\n"
  )
  (return-type "none")
  (parameters
    '("gboolean" "fullscreen")
  )
)

(define-method get_fullscreen
  (of-object "ClutterStage")
  (c-name "clutter_stage_get_fullscreen")
  (docstring
  "Retrieves whether the stage is full screen or not\n"
  )
  (return-type "gboolean")
)

(define-method show_cursor
  (of-object "ClutterStage")
  (c-name "clutter_stage_show_cursor")
  (docstring
  "Shows the cursor on the stage window\n"
  )
  (return-type "none")
)

(define-method hide_cursor
  (of-object "ClutterStage")
  (c-name "clutter_stage_hide_cursor")
  (docstring
  "Makes the cursor invisible on the stage window\n"
  )
  (return-type "none")
)

(define-method get_actor_at_pos
  (of-object "ClutterStage")
  (c-name "clutter_stage_get_actor_at_pos")
  (docstring
  "Checks the scene at the coordinates x and y and returns a pointer to\n"
  "the clutter.Actor at those coordinates. By using pick_mode it is\n"
  "possible to control which actors will be painted and thus available.\n"
  "if any\n"
  )
  (return-type "ClutterActor*")
  (parameters
    '("ClutterPickMode" "pick_mode")
    '("gint" "x")
    '("gint" "y")
  )
)

(define-method read_pixels
  (of-object "ClutterStage")
  (c-name "clutter_stage_read_pixels")
  (docstring
  "entire stage width entire stage height Makes a screenshot of the stage\n"
  "in RGBA 8bit data, returns a linear buffer with width * 4 as\n"
  "rowstride. The alpha data contained in the returned buffer is driver-\n"
  "dependent, and not guaranteed to hold any sensible value. or NULL if\n"
  "the read failed. Use g_free() on the returned data to release the\n"
  "resources it has allocated.\n"
  )
  (return-type "gchar*")
  (parameters
    '("gint" "x")
    '("gint" "y")
    '("gint" "width")
    '("gint" "height")
  )
)

(define-method event
  (of-object "ClutterStage")
  (c-name "clutter_stage_event")
  (docstring
  "This function is used to emit an event on the main stage. You should\n"
  "rarely need to use this function, except for synthetised events.\n"
  )
  (return-type "gboolean")
  (parameters
    '("ClutterEvent*" "event")
  )
)

(define-method set_title
  (of-object "ClutterStage")
  (c-name "clutter_stage_set_title")
  (return-type "none")
  (parameters
    '("const-gchar*" "title")
  )
)

(define-method get_title
  (of-object "ClutterStage")
  (c-name "clutter_stage_get_title")
  (return-type "const-gchar*")
)

(define-method set_user_resizable
  (of-object "ClutterStage")
  (c-name "clutter_stage_set_user_resizable")
  (docstring
  "Sets if the stage is resizable by user interaction (e.g. via window\n"
  "manager controls)\n"
  )
  (return-type "none")
  (parameters
    '("gboolean" "resizable")
  )
)

(define-method get_user_resizable
  (of-object "ClutterStage")
  (c-name "clutter_stage_get_user_resizable")
  (docstring
  "Retrieves the value set with clutter.Stage.set_user_resizable().\n"
  )
  (return-type "gboolean")
)

(define-method set_use_fog
  (of-object "ClutterStage")
  (c-name "clutter_stage_set_use_fog")
  (docstring
  "Sets whether the depth cueing effect on the stage should be enabled or\n"
  "not. Depth cueing is a 3D effect that makes actors farther away from\n"
  "the viewing point less opaque, by fading them with the stage color.\n"
  "The parameters of the GL fog used can be changed using the\n"
  "clutter.Stage.set_fog() function.\n"
  )
  (return-type "none")
  (parameters
    '("gboolean" "fog")
  )
)

(define-method get_use_fog
  (of-object "ClutterStage")
  (c-name "clutter_stage_get_use_fog")
  (docstring
  "Gets whether the depth cueing effect is enabled on stage.\n"
  )
  (return-type "gboolean")
)

(define-method set_fog
  (of-object "ClutterStage")
  (c-name "clutter_stage_set_fog")
  (docstring
  "Sets the fog (also known as depth cueing) settings for the stage. A\n"
  "clutter.Stage will only use a linear fog progression, which depends\n"
  "solely on the distance from the viewer. The cogl_set_fog() function in\n"
  "COGL exposes more of the underlying implementation, and allows\n"
  "changing the for progression function. It can be directly used by\n"
  "disabling the clutter.Stage:use-fog property and connecting a signal\n"
  "handler to the clutter.Actor::paint signal on the stage, like: |[\n"
  "clutter.Stage.set_use_fog (stage, FALSE); g_signal_connect (stage,\n"
  "paint, G_CALLBACK (on_stage_paint), NULL); ]| The paint signal handler\n"
  "will call cogl_set_fog() with the desired settings: |[ static void\n"
  "on_stage_paint (clutter.Actor *actor) { clutter.Color stage_color = {\n"
  "0, }; CoglColor fog_color = { 0, }; /&ast; set the fog color to the\n"
  "stage background color &ast;/ clutter.Stage.get_color (CLUTTER_STAGE\n"
  "(actor), &amp;stage_color); cogl_color_set_from_4ub (&amp;fog_color,\n"
  "stage_color.red, stage_color.green, stage_color.blue,\n"
  "stage_color.alpha); /&ast; enable fog &ast;/ cogl_set_fog\n"
  "(&amp;fog_color, COGL_FOG_MODE_EXPONENTIAL, /&ast; mode &ast;/ 0.5,\n"
  "/&ast; density &ast;/ 5.0, 30.0);                /&ast; z_near and\n"
  "z_far &ast;/ } ]| unmultiplied alpha colors. By default Cogl will\n"
  "premultiply textures and cogl_set_source_color will premultiply\n"
  "colors, so unless you explicitly load your textures requesting an\n"
  "unmultiplied internal_format and use cogl_material_set_color you can\n"
  "only use fogging with fully opaque actors. We can look to improve this\n"
  "in the future when we can depend on fragment shaders.\n"
  )
  (return-type "none")
  (parameters
    '("ClutterFog*" "fog")
  )
)

(define-method get_fog
  (of-object "ClutterStage")
  (c-name "clutter_stage_get_fog")
  (docstring
  "Retrieves the current depth cueing settings from the stage.\n"
  )
  (return-type "none")
  (parameters
    '("ClutterFog*" "fog")
  )
)

(define-method set_key_focus
  (of-object "ClutterStage")
  (c-name "clutter_stage_set_key_focus")
  (docstring
  "Sets the key focus on actor. An actor with key focus will receive all\n"
  "the key events. If actor is NULL, the stage will receive focus.\n"
  )
  (return-type "none")
  (parameters
    '("ClutterActor*" "actor")
  )
)

(define-method get_key_focus
  (of-object "ClutterStage")
  (c-name "clutter_stage_get_key_focus")
  (docstring
  "Retrieves the actor that is currently under key focus.\n"
  )
  (return-type "ClutterActor*")
)

(define-method ensure_current
  (of-object "ClutterStage")
  (c-name "clutter_stage_ensure_current")
  (docstring
  "This function essentially makes sure the right GL context is current\n"
  "for the passed stage. It is not intended to be used by applications.\n"
  )
  (return-type "none")
)

(define-method queue_redraw
  (of-object "ClutterStage")
  (c-name "clutter_stage_queue_redraw")
  (docstring
  "Queues a redraw for the passed stage. <note>Applications should call\n"
  "clutter.Actor.queue_redraw() and not this function.</note> <note>This\n"
  "function is just a wrapper for clutter.Actor.queue_redraw() and should\n"
  "probably go away.</note>\n"
  )
  (return-type "none")
)

(define-method is_default
  (of-object "ClutterStage")
  (c-name "clutter_stage_is_default")
  (docstring
  "Checks if stage is the default stage, or an instance created using\n"
  "clutter.Stage.new() but internally using the same implementation.\n"
  )
  (return-type "gboolean")
)

(define-method ensure_viewport
  (of-object "ClutterStage")
  (c-name "clutter_stage_ensure_viewport")
  (docstring
  "Ensures that the GL viewport is updated with the current stage window\n"
  "size. This function will queue a redraw of stage. This function should\n"
  "not be called by applications; it is used when embedding a\n"
  "clutter.Stage into a toolkit with another windowing system, like GTK+.\n"
  )
  (return-type "none")
)

(define-method ensure_redraw
  (of-object "ClutterStage")
  (c-name "clutter_stage_ensure_redraw")
  (docstring
  "Ensures that stage is redrawn used when embedding a clutter.Stage into\n"
  "a toolkit with another windowing system, like GTK+.\n"
  )
  (return-type "none")
)

(define-method set_throttle_motion_events
  (of-object "ClutterStage")
  (c-name "clutter_stage_set_throttle_motion_events")
  (docstring
  "Sets whether motion events received between redraws should be\n"
  "throttled or not. If motion events are throttled, those events\n"
  "received by the windowing system between redraws will be compressed so\n"
  "that only the last event will be propagated to the stage and its\n"
  "actors. This function should only be used if you want to have all the\n"
  "motion events delivered to your application code.\n"
  )
  (return-type "none")
  (parameters
    '("gboolean" "throttle")
  )
)

(define-method get_throttle_motion_events
  (of-object "ClutterStage")
  (c-name "clutter_stage_get_throttle_motion_events")
  (docstring
  "Retrieves the value set with\n"
  "clutter.Stage.set_throttle_motion_events() and FALSE otherwise\n"
  )
  (return-type "gboolean")
)



;; From clutter-stage-manager.h

(define-function stage_manager_get_type
  (c-name "clutter_stage_manager_get_type")
  (return-type "GType")
)

(define-function stage_manager_get_default
  (c-name "clutter_stage_manager_get_default")
  (return-type "ClutterStageManager*")
)

(define-method set_default_stage
  (of-object "ClutterStageManager")
  (c-name "clutter_stage_manager_set_default_stage")
  (docstring
  "Sets stage as the default stage.\n"
  )
  (return-type "none")
  (parameters
    '("ClutterStage*" "stage")
  )
)

(define-method get_default_stage
  (of-object "ClutterStageManager")
  (c-name "clutter_stage_manager_get_default_stage")
  (docstring
  "Returns the default clutter.Stage. is owned by clutter. and you should\n"
  "never reference or unreference it\n"
  )
  (return-type "ClutterStage*")
)

(define-method list_stages
  (of-object "ClutterStageManager")
  (c-name "clutter_stage_manager_list_stages")
  (docstring
  "Lists all currently used stages. allocated list of clutter.Stage\n"
  "objects. Use g_slist_free() to deallocate it when done.\n"
  )
  (return-type "GSList*")
)

(define-method peek_stages
  (of-object "ClutterStageManager")
  (c-name "clutter_stage_manager_peek_stages")
  (docstring
  "Lists all currently used stages. to the internal list of clutter.Stage\n"
  "objects. The returned list is owned by the clutter.StageManager and\n"
  "should never be modified or freed\n"
  )
  (return-type "const-GSList*")
)


;; From clutter-texture.h

(define-function texture_error_quark
  (c-name "clutter_texture_error_quark")
  (return-type "GQuark")
)

(define-function texture_get_type
  (c-name "clutter_texture_get_type")
  (return-type "GType")
)

(define-function texture_new
  (c-name "clutter_texture_new")
  (is-constructor-of "ClutterTexture")
  (return-type "ClutterActor*")
  (properties
    '("filename" (optional) (default NULL))
    '("disable_slicing" (optional) (default FALSE))
    '("load_async" (optional) (default FALSE))
    '("load_data_async" (optional) (default FALSE))
  )
)

(define-function texture_new_from_file
  (c-name "clutter_texture_new_from_file")
  (return-type "ClutterActor*")
  (parameters
    '("const-gchar*" "filename")
    '("GError**" "error")
  )
)

(define-function texture_new_from_actor
  (c-name "clutter_texture_new_from_actor")
  (return-type "ClutterActor*")
  (parameters
    '("ClutterActor*" "actor")
  )
)

(define-method set_from_file
  (of-object "ClutterTexture")
  (c-name "clutter_texture_set_from_file")
  (docstring
  "Sets the clutter.Texture image data from an image file. In case of\n"
  "failure, FALSE is returned and error is set. If clutter.Texture:load-\n"
  "async is set to TRUE, this function will return as soon as possible,\n"
  "and the actual image loading from disk will be performed\n"
  "asynchronously. clutter.Texture::size-change will be emitten when the\n"
  "size of the texture is available and clutter.Texture::load-finished\n"
  "will be emitted when the image has been loaded or if an error\n"
  "occurred.\n"
  )
  (return-type "gboolean")
  (parameters
    '("const-gchar*" "filename")
    '("GError**" "error")
  )
)

(define-method set_from_rgb_data
  (of-object "ClutterTexture")
  (c-name "clutter_texture_set_from_rgb_data")
  (docstring
  "depending on has_alpha) Sets clutter.Texture image data.\n"
  )
  (return-type "gboolean")
  (parameters
    '("const-guchar*" "data")
    '("gboolean" "has_alpha")
    '("gint" "width")
    '("gint" "height")
    '("gint" "rowstride")
    '("gint" "bpp")
    '("ClutterTextureFlags" "flags")
    '("GError**" "error")
  )
)

(define-method set_from_yuv_data
  (of-object "ClutterTexture")
  (c-name "clutter_texture_set_from_yuv_data")
  (docstring
  "Sets a clutter.Texture from YUV image data. If an error occurred,\n"
  "FALSE is returned and error is set.\n"
  )
  (return-type "gboolean")
  (parameters
    '("const-guchar*" "data")
    '("gint" "width")
    '("gint" "height")
    '("ClutterTextureFlags" "flags")
    '("GError**" "error")
  )
)

(define-method set_area_from_rgb_data
  (of-object "ClutterTexture")
  (c-name "clutter_texture_set_area_from_rgb_data")
  (docstring
  "depending on has_alpha) Updates a sub-region of the pixel data in a\n"
  "clutter.Texture.\n"
  )
  (return-type "gboolean")
  (parameters
    '("const-guchar*" "data")
    '("gboolean" "has_alpha")
    '("gint" "x")
    '("gint" "y")
    '("gint" "width")
    '("gint" "height")
    '("gint" "rowstride")
    '("gint" "bpp")
    '("ClutterTextureFlags" "flags")
    '("GError**" "error")
  )
)

(define-method get_base_size
  (of-object "ClutterTexture")
  (c-name "clutter_texture_get_base_size")
  (docstring
  "Gets the size in pixels of the untransformed underlying image\n"
  )
  (return-type "none")
  (parameters
    '("gint*" "width")
    '("gint*" "height")
  )
)

(define-method set_filter_quality
  (of-object "ClutterTexture")
  (c-name "clutter_texture_set_filter_quality")
  (docstring
  "Sets the filter quality when scaling a texture. The quality is an\n"
  "enumeration currently the following values are supported:\n"
  "CLUTTER_TEXTURE_QUALITY_LOW which is fast but only uses nearest\n"
  "neighbour interpolation. CLUTTER_TEXTURE_QUALITY_MEDIUM which is\n"
  "computationally a bit more expensive (bilinear interpolation), and\n"
  "CLUTTER_TEXTURE_QUALITY_HIGH which uses extra texture memory resources\n"
  "to improve scaled down rendering as well (by using mipmaps). The\n"
  "default value is CLUTTER_TEXTURE_QUALITY_MEDIUM.\n"
  )
  (return-type "none")
  (parameters
    '("ClutterTextureQuality" "filter_quality")
  )
)

(define-method get_filter_quality
  (of-object "ClutterTexture")
  (c-name "clutter_texture_get_filter_quality")
  (return-type "ClutterTextureQuality")
)

(define-method get_cogl_texture
  (of-object "ClutterTexture")
  (c-name "clutter_texture_get_cogl_texture")
  (return-type "CoglHandle")
)

(define-method set_cogl_texture
  (of-object "ClutterTexture")
  (c-name "clutter_texture_set_cogl_texture")
  (return-type "none")
  (parameters
    '("CoglHandle" "cogl_tex")
  )
)

(define-method get_cogl_material
  (of-object "ClutterTexture")
  (c-name "clutter_texture_get_cogl_material")
  (docstring
  "Returns a handle to the underlying COGL material used for drawing the\n"
  "actor. No extra reference is taken so if you need to keep the handle\n"
  "then you should call cogl_handle_ref() on it.\n"
  )
  (return-type "CoglHandle")
)

(define-method set_cogl_material
  (of-object "ClutterTexture")
  (c-name "clutter_texture_set_cogl_material")
  (docstring
  "Replaces the underlying Cogl material drawn by this actor with handle\n"
  "is no longer needed it should be deref'd with cogl_handle_unref.\n"
  "Texture data is attached to the material so calling this function also\n"
  "replaces the Cogl texture. clutter.Texture requires that the material\n"
  "have a texture layer so you should set one on the material before\n"
  "calling this function.\n"
  )
  (return-type "none")
  (parameters
    '("CoglHandle" "cogl_material")
  )
)

(define-method set_sync_size
  (of-object "ClutterTexture")
  (c-name "clutter_texture_set_sync_size")
  (docstring
  "underlying image data Sets whether texture should have the same\n"
  "preferred size as the underlying image data.\n"
  )
  (return-type "none")
  (parameters
    '("gboolean" "sync_size")
  )
)

(define-method get_sync_size
  (of-object "ClutterTexture")
  (c-name "clutter_texture_get_sync_size")
  (docstring
  "Retrieves the value set with clutter.Texture.get_sync_size() preferred\n"
  "size of the underlying image data\n"
  )
  (return-type "gboolean")
)

(define-method set_repeat
  (of-object "ClutterTexture")
  (c-name "clutter_texture_set_repeat")
  (docstring
  "Sets whether the texture should repeat horizontally or vertically when\n"
  "the actor size is bigger than the image size\n"
  )
  (return-type "none")
  (parameters
    '("gboolean" "repeat_x")
    '("gboolean" "repeat_y")
  )
)

(define-method get_repeat
  (of-object "ClutterTexture")
  (c-name "clutter_texture_get_repeat")
  (docstring
  "Retrieves the horizontal and vertical repeat values set using\n"
  "clutter.Texture.set_repeat()\n"
  )
  (return-type "none")
  (parameters
    '("gboolean*" "repeat_x")
    '("gboolean*" "repeat_y")
  )
)

(define-method get_pixel_format
  (of-object "ClutterTexture")
  (c-name "clutter_texture_get_pixel_format")
  (docstring
  "Retrieves the pixel format used by texture. This is equivalent to: |[\n"
  "handle = clutter.Texture.get_pixel_format (texture); if (handle !=\n"
  "COGL_INVALID_HANDLE) format = cogl_texture_get_format (handle); ]|\n"
  )
  (return-type "CoglPixelFormat")
)

(define-method get_max_tile_waste
  (of-object "ClutterTexture")
  (c-name "clutter_texture_get_max_tile_waste")
  (return-type "gint")
)

(define-method set_keep_aspect_ratio
  (of-object "ClutterTexture")
  (c-name "clutter_texture_set_keep_aspect_ratio")
  (docstring
  "Sets whether texture should have a preferred size maintaining the\n"
  "aspect ratio of the underlying image\n"
  )
  (return-type "none")
  (parameters
    '("gboolean" "keep_aspect")
  )
)

(define-method get_keep_aspect_ratio
  (of-object "ClutterTexture")
  (c-name "clutter_texture_get_keep_aspect_ratio")
  (docstring
  "Retrieves the value set using clutter.Texture.get_keep_aspect_ratio()\n"
  "aspect ratio of the underlying image\n"
  )
  (return-type "gboolean")
)

(define-method set_load_async
  (of-object "ClutterTexture")
  (c-name "clutter_texture_set_load_async")
  (docstring
  "from a filename Sets whether texture should use a worker thread to\n"
  "load the data from disk asynchronously. Setting load_async to TRUE\n"
  "will make clutter.Texture.set_from_file() return immediately. See the\n"
  "clutter.Texture:load-async property documentation, and\n"
  "clutter.Texture.set_load_data_async().\n"
  )
  (return-type "none")
  (parameters
    '("gboolean" "load_async")
  )
)

(define-method get_load_async
  (of-object "ClutterTexture")
  (c-name "clutter_texture_get_load_async")
  (docstring
  "Retrieves the value set using clutter.Texture.get_load_async() disk\n"
  "asynchronously\n"
  )
  (return-type "gboolean")
)

(define-method set_load_data_async
  (of-object "ClutterTexture")
  (c-name "clutter_texture_set_load_data_async")
  (docstring
  "from a filename Sets whether texture should use a worker thread to\n"
  "load the data from disk asynchronously. Setting load_async to TRUE\n"
  "will make clutter.Texture.set_from_file() block until the\n"
  "clutter.Texture has determined the width and height of the image data.\n"
  "See the clutter.Texture:load-async property documentation, and\n"
  "clutter.Texture.set_load_async().\n"
  )
  (return-type "none")
  (parameters
    '("gboolean" "load_async")
  )
)

(define-method get_load_data_async
  (of-object "ClutterTexture")
  (c-name "clutter_texture_get_load_data_async")
  (docstring
  "Retrieves the value set by clutter.Texture.set_load_data_async() data\n"
  "from a file asynchronously\n"
  )
  (return-type "gboolean")
)




;; From clutter-timeline.h

(define-function timeline_get_type
  (c-name "clutter_timeline_get_type")
  (return-type "GType")
)

(define-function timeline_new
  (c-name "clutter_timeline_new")
  (is-constructor-of "ClutterTimeline")
  (return-type "ClutterTimeline*")
  (properties
    '("duration" (optional))
  )
)

(define-method clone
  (of-object "ClutterTimeline")
  (c-name "clutter_timeline_clone")
  (docstring
  "Create a new clutter.Timeline instance which has property values\n"
  "matching that of supplied timeline. The cloned timeline will not be\n"
  "started and will not be positioned to the current position of\n"
  )
  (return-type "ClutterTimeline*")
)

(define-method get_duration
  (of-object "ClutterTimeline")
  (c-name "clutter_timeline_get_duration")
  (docstring
  "Retrieves the duration of a clutter.Timeline in milliseconds. See\n"
  "clutter.Timeline.set_duration().\n"
  )
  (return-type "guint")
)

(define-method set_duration
  (of-object "ClutterTimeline")
  (c-name "clutter_timeline_set_duration")
  (docstring
  "Sets the duration of the timeline, in milliseconds. The speed of the\n"
  "timeline depends on the clutter.Timeline:fps setting.\n"
  )
  (return-type "none")
  (parameters
    '("guint" "msecs")
  )
)

(define-method get_direction
  (of-object "ClutterTimeline")
  (c-name "clutter_timeline_get_direction")
  (docstring
  "Retrieves the direction of the timeline set with\n"
  "clutter.Timeline.set_direction().\n"
  )
  (return-type "ClutterTimelineDirection")
)

(define-method set_direction
  (of-object "ClutterTimeline")
  (c-name "clutter_timeline_set_direction")
  (docstring
  "Sets the direction of timeline, either CLUTTER_TIMELINE_FORWARD or\n"
  "CLUTTER_TIMELINE_BACKWARD.\n"
  )
  (return-type "none")
  (parameters
    '("ClutterTimelineDirection" "direction")
  )
)

(define-method start
  (of-object "ClutterTimeline")
  (c-name "clutter_timeline_start")
  (docstring
  "Starts the clutter.Timeline playing.\n"
  )
  (return-type "none")
)

(define-method pause
  (of-object "ClutterTimeline")
  (c-name "clutter_timeline_pause")
  (docstring
  "Pauses the clutter.Timeline on current frame\n"
  )
  (return-type "none")
)

(define-method stop
  (of-object "ClutterTimeline")
  (c-name "clutter_timeline_stop")
  (docstring
  "Stops the clutter.Timeline and moves to frame 0\n"
  )
  (return-type "none")
)

(define-method set_loop
  (of-object "ClutterTimeline")
  (c-name "clutter_timeline_set_loop")
  (docstring
  "Sets whether timeline should loop.\n"
  )
  (return-type "none")
  (parameters
    '("gboolean" "loop")
  )
)

(define-method get_loop
  (of-object "ClutterTimeline")
  (c-name "clutter_timeline_get_loop")
  (docstring
  "Gets whether timeline is looping\n"
  )
  (return-type "gboolean")
)

(define-method rewind
  (of-object "ClutterTimeline")
  (c-name "clutter_timeline_rewind")
  (docstring
  "Rewinds clutter.Timeline to the first frame if its direction is\n"
  "CLUTTER_TIMELINE_FORWARD and the last frame if it is\n"
  "CLUTTER_TIMELINE_BACKWARD.\n"
  )
  (return-type "none")
)

(define-method skip
  (of-object "ClutterTimeline")
  (c-name "clutter_timeline_skip")
  (docstring
  "Advance timeline by the requested time in milliseconds\n"
  )
  (return-type "none")
  (parameters
    '("guint" "msecs")
  )
)

(define-method advance
  (of-object "ClutterTimeline")
  (c-name "clutter_timeline_advance")
  (docstring
  "Advance timeline to the requested point. The point is given as a time\n"
  "in milliseconds since the timeline started. <note><para>The timeline\n"
  "will not emit the clutter.Timeline::new-frame signal for the given\n"
  "time. The first ::new-frame signal after the call to\n"
  "clutter.Timeline.advance() will be emit the skipped markers.\n"
  "</para></note>\n"
  )
  (return-type "none")
  (parameters
    '("guint" "msecs")
  )
)

(define-method get_elapsed_time
  (of-object "ClutterTimeline")
  (c-name "clutter_timeline_get_elapsed_time")
  (docstring
  "Request the current time position of the timeline.\n"
  )
  (return-type "guint")
)

(define-method get_progress
  (of-object "ClutterTimeline")
  (c-name "clutter_timeline_get_progress")
  (docstring
  "The position of the timeline in a [0, 1] interval.\n"
  )
  (return-type "gdouble")
)

(define-method is_playing
  (of-object "ClutterTimeline")
  (c-name "clutter_timeline_is_playing")
  (docstring
  "Queries state of a clutter.Timeline.\n"
  )
  (return-type "gboolean")
)

(define-method set_delay
  (of-object "ClutterTimeline")
  (c-name "clutter_timeline_set_delay")
  (docstring
  "Sets the delay, in milliseconds, before timeline should start.\n"
  )
  (return-type "none")
  (parameters
    '("guint" "msecs")
  )
)

(define-method get_delay
  (of-object "ClutterTimeline")
  (c-name "clutter_timeline_get_delay")
  (docstring
  "Retrieves the delay set using clutter.Timeline.set_delay().\n"
  )
  (return-type "guint")
)

(define-method get_delta
  (of-object "ClutterTimeline")
  (c-name "clutter_timeline_get_delta")
  (docstring
  "Retrieves the amount of time elapsed since the last clutter.Timeline\n"
  "::new-frame signal. This function is only useful inside handlers for\n"
  "the ::new-frame signal, and its behaviour is undefined if the timeline\n"
  "is not playing. last frame\n"
  )
  (return-type "guint")
)

(define-method add_marker_at_time
  (of-object "ClutterTimeline")
  (c-name "clutter_timeline_add_marker_at_time")
  (docstring
  "Adds a named marker that will be hit when the timeline has been\n"
  "running for msecs milliseconds. Markers are unique string identifiers\n"
  "for a given time. Once timeline reaches attached to that time. A\n"
  "marker can be removed with clutter.Timeline.remove_marker(). The\n"
  "timeline can be advanced to a marker using\n"
  "clutter.Timeline.advance_to_marker().\n"
  )
  (return-type "none")
  (parameters
    '("const-gchar*" "marker_name")
    '("guint" "msecs")
  )
)

(define-method remove_marker
  (of-object "ClutterTimeline")
  (c-name "clutter_timeline_remove_marker")
  (docstring
  "Removes marker_name, if found, from timeline.\n"
  )
  (return-type "none")
  (parameters
    '("const-gchar*" "marker_name")
  )
)

(define-method list_markers
  (of-object "ClutterTimeline")
  (c-name "clutter_timeline_list_markers")
  (docstring
  "Retrieves the list of markers at time msecs. If frame_num is a\n"
  "negative integer, all the markers attached to timeline will be\n"
  "returned. allocated, NULL terminated string array containing the names\n"
  "of the markers. Use g_strfreev() when done.\n"
  )
  (return-type "gchar**")
  (parameters
    '("gint" "msecs")
    '("gsize*" "n_markers")
  )
)

(define-method has_marker
  (of-object "ClutterTimeline")
  (c-name "clutter_timeline_has_marker")
  (docstring
  "Checks whether timeline has a marker set with the given name.\n"
  )
  (return-type "gboolean")
  (parameters
    '("const-gchar*" "marker_name")
  )
)

(define-method advance_to_marker
  (of-object "ClutterTimeline")
  (c-name "clutter_timeline_advance_to_marker")
  (docstring
  "Advances timeline to the time of the given marker_name.\n"
  "<note><para>Like clutter.Timeline.advance(), this function will not\n"
  "emit the clutter.Timeline::new-frame for the time where marker_name is\n"
  "set, nor it will emit clutter.Timeline::marker-reached for\n"
  )
  (return-type "none")
  (parameters
    '("const-gchar*" "marker_name")
  )
)

(define-method do_tick
  (of-object "ClutterTimeline")
  (c-name "clutter_timeline_do_tick")
  (return-type "none")
  (parameters
    '("GTimeVal*" "tick_time")
  )
)



;; From clutter-timeout-pool.h

(define-function timeout_pool_new
  (c-name "clutter_timeout_pool_new")
  (is-constructor-of "ClutterTimeoutPool")
  (return-type "ClutterTimeoutPool*")
  (parameters
    '("gint" "priority")
  )
)

(define-method add
  (of-object "ClutterTimeoutPool")
  (c-name "clutter_timeout_pool_add")
  (return-type "guint")
  (parameters
    '("guint" "interval")
    '("GSourceFunc" "func")
    '("gpointer" "data")
    '("GDestroyNotify" "notify")
  )
)

(define-method remove
  (of-object "ClutterTimeoutPool")
  (c-name "clutter_timeout_pool_remove")
  (return-type "none")
  (parameters
    '("guint" "id")
  )
)



;; From clutter-types.h

(define-function actor_box_get_type
  (c-name "clutter_actor_box_get_type")
  (return-type "GType")
)

(define-function actor_box_new
  (c-name "clutter_actor_box_new")
  (is-constructor-of "ClutterActorBox")
  (return-type "ClutterActorBox")
)

(define-method equal
  (of-object "ClutterActorBox")
  (c-name "clutter_actor_box_equal")
  (return-type "gboolean")
  (parameters
    '("const-ClutterActorBox*" "box_b")
  )
)

(define-method get_x
  (of-object "ClutterActorBox")
  (c-name "clutter_actor_box_get_x")
  (return-type "gfloat")
)

(define-method get_y
  (of-object "ClutterActorBox")
  (c-name "clutter_actor_box_get_y")
  (return-type "gfloat")
)

(define-method get_width
  (of-object "ClutterActorBox")
  (c-name "clutter_actor_box_get_width")
  (return-type "gfloat")
)

(define-method get_height
  (of-object "ClutterActorBox")
  (c-name "clutter_actor_box_get_height")
  (return-type "gfloat")
)

(define-method get_origin
  (of-object "ClutterActorBox")
  (c-name "clutter_actor_box_get_origin")
  (return-type "none")
  (parameters
    '("gfloat*" "x")
    '("gfloat*" "y")
  )
)

(define-method get_size
  (of-object "ClutterActorBox")
  (c-name "clutter_actor_box_get_size")
  (return-type "none")
  (parameters
    '("gfloat*" "width")
    '("gfloat*" "height")
  )
)

(define-method get_area
  (of-object "ClutterActorBox")
  (c-name "clutter_actor_box_get_area")
  (return-type "gfloat")
)

(define-method contains
  (of-object "ClutterActorBox")
  (c-name "clutter_actor_box_contains")
  (return-type "gboolean")
  (parameters
    '("gfloat" "x")
    '("gfloat" "y")
  )
)

(define-method from_vertices
  (of-object "ClutterActorBox")
  (c-name "clutter_actor_box_from_vertices")
  (return-type "none")
  (parameters
    '("const-ClutterVertex[]" "verts")
  )
)

(define-method copy
  (of-object "ClutterActorBox")
  (c-name "clutter_actor_box_copy")
  (return-type "ClutterActorBox*")
)

(define-method free
  (of-object "ClutterActorBox")
  (c-name "clutter_actor_box_free")
  (return-type "none")
)

(define-function geometry_get_type
  (c-name "clutter_geometry_get_type")
  (return-type "GType")
)

(define-function geometry_new
  (c-name "clutter_geometry_new")
  (is-constructor-of "ClutterGeometry")
  (return-type "ClutterGeometry")
)

(define-function vertex_get_type
  (c-name "clutter_vertex_get_type")
  (return-type "GType")
)

(define-function vertex_new
  (c-name "clutter_vertex_new")
  (is-constructor-of "ClutterVertex")
  (return-type "ClutterVertex")
)

(define-method copy
  (of-object "ClutterVertex")
  (c-name "clutter_vertex_copy")
  (return-type "ClutterVertex*")
)

(define-method free
  (of-object "ClutterVertex")
  (c-name "clutter_vertex_free")
  (return-type "none")
)

(define-method equal
  (of-object "ClutterVertex")
  (c-name "clutter_vertex_equal")
  (return-type "gboolean")
  (parameters
    '("const-ClutterVertex*" "vertex_b")
  )
)

(define-function knot_get_type
  (c-name "clutter_knot_get_type")
  (return-type "GType")
)

(define-function knot_new
  (c-name "clutter_knot_new")
  (is-constructor-of "ClutterKnot")
  (return-type "ClutterKnot")
)

(define-method copy
  (of-object "ClutterKnot")
  (c-name "clutter_knot_copy")
  (return-type "ClutterKnot*")
)

(define-method free
  (of-object "ClutterKnot")
  (c-name "clutter_knot_free")
  (return-type "none")
)

(define-method equal
  (of-object "ClutterKnot")
  (c-name "clutter_knot_equal")
  (return-type "gboolean")
  (parameters
    '("const-ClutterKnot*" "knot_b")
  )
)



;; From clutter-path.h

(define-function path_get_type
  (c-name "clutter_path_get_type")
  (return-type "GType")
)

(define-function path_node_get_type
  (c-name "clutter_path_node_get_type")
  (return-type "GType")
)

(define-function path_new
  (c-name "clutter_path_new")
  (is-constructor-of "ClutterPath")
  (return-type "ClutterPath*")
  (properties
    '("description" (optional))
  )
)

(define-function path_new_with_description
  (c-name "clutter_path_new_with_description")
  (return-type "ClutterPath*")
  (parameters
    '("const-gchar*" "desc")
  )
)

(define-method add_move_to
  (of-object "ClutterPath")
  (c-name "clutter_path_add_move_to")
  (docstring
  "Adds a CLUTTER_PATH_MOVE_TO type node to the path. This is usually\n"
  "used as the first node in a path. It can also be used in the middle of\n"
  "the path to cause the actor to jump to the new coordinate.\n"
  )
  (return-type "none")
  (parameters
    '("gint" "x")
    '("gint" "y")
  )
)

(define-method add_rel_move_to
  (of-object "ClutterPath")
  (c-name "clutter_path_add_rel_move_to")
  (docstring
  "Same as clutter.Path.add_move_to() except the coordinates are relative\n"
  "to the previous node.\n"
  )
  (return-type "none")
  (parameters
    '("gint" "x")
    '("gint" "y")
  )
)

(define-method add_line_to
  (of-object "ClutterPath")
  (c-name "clutter_path_add_line_to")
  (docstring
  "Adds a CLUTTER_PATH_LINE_TO type node to the path. This causes the\n"
  "actor to move to the new coordinates in a straight line.\n"
  )
  (return-type "none")
  (parameters
    '("gint" "x")
    '("gint" "y")
  )
)

(define-method add_rel_line_to
  (of-object "ClutterPath")
  (c-name "clutter_path_add_rel_line_to")
  (docstring
  "Same as clutter.Path.add_line_to() except the coordinates are relative\n"
  "to the previous node.\n"
  )
  (return-type "none")
  (parameters
    '("gint" "x")
    '("gint" "y")
  )
)

(define-method add_curve_to
  (of-object "ClutterPath")
  (c-name "clutter_path_add_curve_to")
  (docstring
  "Adds a CLUTTER_PATH_CURVE_TO type node to the path. This causes the\n"
  "actor to follow a bezier from the last node to (x_3, y_3) using (x_1,\n"
  "y_1) and (x_2,y_2) as control points.\n"
  )
  (return-type "none")
  (parameters
    '("gint" "x_1")
    '("gint" "y_1")
    '("gint" "x_2")
    '("gint" "y_2")
    '("gint" "x_3")
    '("gint" "y_3")
  )
)

(define-method add_rel_curve_to
  (of-object "ClutterPath")
  (c-name "clutter_path_add_rel_curve_to")
  (docstring
  "Same as clutter.Path.add_curve_to() except the coordinates are\n"
  "relative to the previous node.\n"
  )
  (return-type "none")
  (parameters
    '("gint" "x_1")
    '("gint" "y_1")
    '("gint" "x_2")
    '("gint" "y_2")
    '("gint" "x_3")
    '("gint" "y_3")
  )
)

(define-method add_close
  (of-object "ClutterPath")
  (c-name "clutter_path_add_close")
  (docstring
  "Adds a CLUTTER_PATH_CLOSE type node to the path. This creates a\n"
  "straight line from the last node to the last CLUTTER_PATH_MOVE_TO type\n"
  "node.\n"
  )
  (return-type "none")
)

(define-method add_string
  (of-object "ClutterPath")
  (c-name "clutter_path_add_string")
  (docstring
  "Adds new nodes to the end of the path as described in str. The format\n"
  "is a subset of the SVG path format. Each node is represented by a\n"
  "letter and is followed by zero, one or three pairs of coordinates. The\n"
  "coordinates can be separated by spaces or a comma. The types are:\n"
  "<variablelist> <varlistentry><term>M</term> <listitem><para> Adds a\n"
  "CLUTTER_PATH_MOVE_TO node. Takes one pair of coordinates.\n"
  "</para></listitem></varlistentry> <varlistentry><term>L</term>\n"
  "<listitem><para> Adds a CLUTTER_PATH_LINE_TO node. Takes one pair of\n"
  "coordinates. </para></listitem></varlistentry>\n"
  "<varlistentry><term>C</term> <listitem><para> Adds a\n"
  "CLUTTER_PATH_CURVE_TO node. Takes three pairs of coordinates.\n"
  "</para></listitem></varlistentry> <varlistentry><term>z</term>\n"
  "<listitem><para> Adds a CLUTTER_PATH_CLOSE node. No coordinates are\n"
  "needed. </para></listitem></varlistentry> </variablelist> The M, L and\n"
  "C commands can also be specified in lower case which means the\n"
  "coordinates are relative to the previous node. For example, to move an\n"
  "actor in a 100 by 100 pixel square centered on the point 300,300 you\n"
  "could use the following path: <informalexample> <programlisting> M\n"
  "250,350 l 0 -100 L 350,250 l 0 100 z </programlisting>\n"
  "</informalexample> If the path description isn't valid FALSE will be\n"
  "returned and no nodes will be added. otherwise.\n"
  )
  (return-type "gboolean")
  (parameters
    '("const-gchar*" "str")
  )
)

(define-method add_node
  (of-object "ClutterPath")
  (c-name "clutter_path_add_node")
  (docstring
  "Adds node to the end of the path.\n"
  )
  (return-type "none")
  (parameters
    '("const-ClutterPathNode*" "node")
  )
)

(define-method add_cairo_path
  (of-object "ClutterPath")
  (c-name "clutter_path_add_cairo_path")
  (docstring
  "Add the nodes of the Cairo path to the end of path.\n"
  )
  (return-type "none")
  (parameters
    '("const-cairo_path_t*" "cpath")
  )
)

(define-method get_n_nodes
  (of-object "ClutterPath")
  (c-name "clutter_path_get_n_nodes")
  (docstring
  "Retrieves the number of nodes in the path.\n"
  )
  (return-type "guint")
)

(define-method get_node
  (of-object "ClutterPath")
  (c-name "clutter_path_get_node")
  (docstring
  "Retrieves the node of the path indexed by index.\n"
  )
  (return-type "none")
  (parameters
    '("guint" "index_")
    '("ClutterPathNode*" "node")
  )
)

(define-method get_nodes
  (of-object "ClutterPath")
  (c-name "clutter_path_get_nodes")
  (docstring
  "Returns a GSList of clutter.PathNode<!-- -->s. The list should be\n"
  "freed with g_slist_free(). The nodes are owned by the path and should\n"
  "not be freed. Altering the path may cause the nodes in the list to\n"
  "become invalid so you should copy them if you want to keep the list.\n"
  )
  (return-type "GSList*")
)

(define-method foreach
  (of-object "ClutterPath")
  (c-name "clutter_path_foreach")
  (docstring
  "Calls a function for each node of the path.\n"
  )
  (return-type "none")
  (parameters
    '("ClutterPathCallback" "callback")
    '("gpointer" "user_data")
  )
)

(define-method insert_node
  (of-object "ClutterPath")
  (c-name "clutter_path_insert_node")
  (docstring
  "Inserts node into the path before the node at the given offset. If\n"
  )
  (return-type "none")
  (parameters
    '("gint" "index_")
    '("const-ClutterPathNode*" "node")
  )
)

(define-method remove_node
  (of-object "ClutterPath")
  (c-name "clutter_path_remove_node")
  (docstring
  "Removes the node at the given offset from the path.\n"
  )
  (return-type "none")
  (parameters
    '("guint" "index_")
  )
)

(define-method replace_node
  (of-object "ClutterPath")
  (c-name "clutter_path_replace_node")
  (docstring
  "Replaces the node at offset index_ with node.\n"
  )
  (return-type "none")
  (parameters
    '("guint" "index_")
    '("const-ClutterPathNode*" "node")
  )
)

(define-method get_description
  (of-object "ClutterPath")
  (c-name "clutter_path_get_description")
  (docstring
  "Returns a newly allocated string describing the path in the same\n"
  "format as used by clutter.Path.add_string().\n"
  )
  (return-type "gchar*")
)

(define-method set_description
  (of-object "ClutterPath")
  (c-name "clutter_path_set_description")
  (docstring
  "Replaces all of the nodes in the path with nodes described by If the\n"
  "string is invalid then FALSE is returned and the path is unaltered.\n"
  )
  (return-type "gboolean")
  (parameters
    '("const-gchar*" "str")
  )
)

(define-method clear
  (of-object "ClutterPath")
  (c-name "clutter_path_clear")
  (docstring
  "Removes all nodes from the path.\n"
  )
  (return-type "none")
)

(define-method to_cairo_path
  (of-object "ClutterPath")
  (c-name "clutter_path_to_cairo_path")
  (docstring
  "Add the nodes of the clutter.Path to the path in the Cairo context.\n"
  )
  (return-type "none")
  (parameters
    '("cairo_t*" "cr")
  )
)

(define-method get_position
  (of-object "ClutterPath")
  (c-name "clutter_path_get_position")
  (docstring
  "The value in progress represents a position along the path where 0.0\n"
  "is the beginning and 1.0 is the end of the path. An interpolated\n"
  "position is then stored in position.\n"
  )
  (return-type "guint")
  (parameters
    '("gdouble" "progress")
    '("ClutterKnot*" "position")
  )
)

(define-method get_length
  (of-object "ClutterPath")
  (c-name "clutter_path_get_length")
  (docstring
  "Retrieves an approximation of the total length of the path.\n"
  )
  (return-type "guint")
)

(define-method copy
  (of-object "ClutterPathNode")
  (c-name "clutter_path_node_copy")
  (return-type "ClutterPathNode*")
)

(define-method free
  (of-object "ClutterPathNode")
  (c-name "clutter_path_node_free")
  (return-type "none")
)

(define-method equal
  (of-object "ClutterPathNode")
  (c-name "clutter_path_node_equal")
  (return-type "gboolean")
  (parameters
    '("const-ClutterPathNode*" "node_b")
  )
)


;; From clutter-text.h

(define-function text_get_type
  (c-name "clutter_text_get_type")
  (return-type "GType")
)

(define-function text_new
  (c-name "clutter_text_new")
  (is-constructor-of "ClutterText")
  (return-type "ClutterActor*")
  (properties
    '("font_name" (optional))
    '("text" (optional))
    '("color" (optional))
  )
)

(define-function text_new_full
  (c-name "clutter_text_new_full")
  (return-type "ClutterActor*")
  (parameters
    '("const-gchar*" "font_name")
    '("const-gchar*" "text")
    '("const-ClutterColor*" "color")
  )
)

(define-function text_new_with_text
  (c-name "clutter_text_new_with_text")
  (return-type "ClutterActor*")
  (parameters
    '("const-gchar*" "font_name")
    '("const-gchar*" "text")
  )
)

(define-method get_text
  (of-object "ClutterText")
  (c-name "clutter_text_get_text")
  (docstring
  "Retrieves a pointer to the current contents of a clutter.Text actor.\n"
  "If you need a copy of the contents for manipulating, either use\n"
  "g_strdup() on the returned string, or use: |[ copy =\n"
  "clutter.Text.get_chars (text, 0, -1); ]| Which will return a newly\n"
  "allocated string. is owned by the clutter.Text actor and should never\n"
  "be modified or freed\n"
  )
  (return-type "const-gchar*")
)

(define-method set_text
  (of-object "ClutterText")
  (c-name "clutter_text_set_text")
  (docstring
  "empty string) Sets the contents of a clutter.Text actor. If the\n"
  "clutter.Text:use-markup property was set to TRUE it will be reset to\n"
  "FALSE as a side effect. If you want to maintain the clutter.Text:use-\n"
  "markup you should use the clutter.Text.set_markup() function instead\n"
  )
  (return-type "none")
  (parameters
    '("const-gchar*" "text")
  )
)

(define-method set_markup
  (of-object "ClutterText")
  (c-name "clutter_text_set_markup")
  (docstring
  "as passing  (the empty string) Sets markup as the contents of a\n"
  "clutter.Text. This is a convenience function for setting a string\n"
  "containing Pango markup, and it is logically equivalent to: |[\n"
  "clutter.Text.set_text (CLUTTER_TEXT (actor), markup);\n"
  "clutter.Text.set_use_markup (CLUTTER_TEXT (actor), TRUE); ]|\n"
  )
  (return-type "none")
  (parameters
    '("const-gchar*" "markup")
  )
)

(define-method set_color
  (of-object "ClutterText")
  (c-name "clutter_text_set_color")
  (docstring
  "Sets the color of the contents of a clutter.Text actor. The overall\n"
  "opacity of the clutter.Text actor will be the result of the alpha\n"
  "value of color and the composited opacity of the actor itself on the\n"
  "scenegraph, as returned by clutter.Actor.get_paint_opacity().\n"
  )
  (return-type "none")
  (parameters
    '("const-ClutterColor*" "color")
  )
)

(define-method get_color
  (of-object "ClutterText")
  (c-name "clutter_text_get_color")
  (docstring
  "Retrieves the text color as set by clutter.Text.set_color().\n"
  )
  (return-type "none")
  (parameters
    '("ClutterColor*" "color")
  )
)

(define-method set_font_name
  (of-object "ClutterText")
  (c-name "clutter_text_set_font_name")
  (docstring
  "Sets the font used by a clutter.Text. The font_name string must either\n"
  "be NULL, which means that the font name from the default\n"
  "clutter.Backend will be used; or be something that can be parsed by\n"
  "the pango_font_description_from_string() function, like: |[\n"
  "clutter.Text.set_font_name (text, Sans 10pt);\n"
  "clutter.Text.set_font_name (text, Serif 16px);\n"
  "clutter.Text.set_font_name (text, Helvetica 10); ]|\n"
  )
  (return-type "none")
  (parameters
    '("const-gchar*" "font_name")
  )
)

(define-method get_font_name
  (of-object "ClutterText")
  (c-name "clutter_text_get_font_name")
  (docstring
  "Retrieves the font name as set by clutter.Text.set_font_name(). string\n"
  "is owned by the clutter.Text actor and should not be modified or freed\n"
  )
  (return-type "const-gchar*")
)

(define-method set_ellipsize
  (of-object "ClutterText")
  (c-name "clutter_text_set_ellipsize")
  (docstring
  "text if there is not enough space to render the entire contents of a\n"
  "clutter.Text actor\n"
  )
  (return-type "none")
  (parameters
    '("PangoEllipsizeMode" "mode")
  )
)

(define-method get_ellipsize
  (of-object "ClutterText")
  (c-name "clutter_text_get_ellipsize")
  (docstring
  "Returns the ellipsizing position of a clutter.Text actor, as set by\n"
  "clutter.Text.set_ellipsize().\n"
  )
  (return-type "PangoEllipsizeMode")
)

(define-method set_line_wrap
  (of-object "ClutterText")
  (c-name "clutter_text_set_line_wrap")
  (docstring
  "Sets whether the contents of a clutter.Text actor should wrap, if they\n"
  "don't fit the size assigned to the actor.\n"
  )
  (return-type "none")
  (parameters
    '("gboolean" "line_wrap")
  )
)

(define-method get_line_wrap
  (of-object "ClutterText")
  (c-name "clutter_text_get_line_wrap")
  (docstring
  "Retrieves the value set using clutter.Text.set_line_wrap(). its\n"
  "contents\n"
  )
  (return-type "gboolean")
)

(define-method set_line_wrap_mode
  (of-object "ClutterText")
  (c-name "clutter_text_set_line_wrap_mode")
  (docstring
  "If line wrapping is enabled (see clutter.Text.set_line_wrap()) this\n"
  "function controls how the line wrapping is performed. The default is\n"
  "PANGO_WRAP_WORD which means wrap on word boundaries.\n"
  )
  (return-type "none")
  (parameters
    '("PangoWrapMode" "wrap_mode")
  )
)

(define-method get_line_wrap_mode
  (of-object "ClutterText")
  (c-name "clutter_text_get_line_wrap_mode")
  (docstring
  "Retrieves the line wrap mode used by the clutter.Text actor. See\n"
  "clutter.Text.set_line_wrap_mode ().\n"
  )
  (return-type "PangoWrapMode")
)

(define-method get_layout
  (of-object "ClutterText")
  (c-name "clutter_text_get_layout")
  (docstring
  "Retrieves the current PangoLayout used by a clutter.Text actor. the\n"
  "clutter.Text actor and should not be modified or freed\n"
  )
  (return-type "PangoLayout*")
)

(define-method set_attributes
  (of-object "ClutterText")
  (c-name "clutter_text_set_attributes")
  (docstring
  "Sets the attributes list that are going to be applied to the\n"
  "clutter.Text contents. The clutter.Text actor will take a reference on\n"
  "the PangoAttrList passed to this function.\n"
  )
  (return-type "none")
  (parameters
    '("PangoAttrList*" "attrs")
  )
)

(define-method get_attributes
  (of-object "ClutterText")
  (c-name "clutter_text_get_attributes")
  (docstring
  "Gets the attribute list that was set on the clutter.Text actor\n"
  "clutter.Text.set_attributes(), if any. returned value is owned by the\n"
  "clutter.Text and should not be unreferenced.\n"
  )
  (return-type "PangoAttrList*")
)

(define-method set_use_markup
  (of-object "ClutterText")
  (c-name "clutter_text_set_use_markup")
  (docstring
  "Sets whether the contents of the clutter.Text actor contains markup in\n"
  "<link linkend=PangoMarkupFormat>Pango's text markup language</link>.\n"
  "Setting clutter.Text:use-markup on an editable clutter.Text will make\n"
  "the actor discard any markup.\n"
  )
  (return-type "none")
  (parameters
    '("gboolean" "setting")
  )
)

(define-method get_use_markup
  (of-object "ClutterText")
  (c-name "clutter_text_get_use_markup")
  (docstring
  "Retrieves whether the contents of the clutter.Text actor should be\n"
  "parsed for the Pango text markup.\n"
  )
  (return-type "gboolean")
)

(define-method set_line_alignment
  (of-object "ClutterText")
  (c-name "clutter_text_set_line_alignment")
  (docstring
  "Sets the way that the lines of a wrapped label are aligned with\n"
  "respect to each other. This does not affect the overall alignment of\n"
  "the label within its allocated or specified width. To align a\n"
  "clutter.Text actor you should add it to a container that supports\n"
  "alignment, or use the anchor point.\n"
  )
  (return-type "none")
  (parameters
    '("PangoAlignment" "alignment")
  )
)

(define-method get_line_alignment
  (of-object "ClutterText")
  (c-name "clutter_text_get_line_alignment")
  (docstring
  "Retrieves the alignment of a clutter.Text, as set by\n"
  "clutter.Text.set_line_alignment().\n"
  )
  (return-type "PangoAlignment")
)

(define-method set_justify
  (of-object "ClutterText")
  (c-name "clutter_text_set_justify")
  (docstring
  "Sets whether the text of the clutter.Text actor should be justified on\n"
  "both margins. This setting is ignored if clutter. is compiled against\n"
  "Pango &lt; 1.18.\n"
  )
  (return-type "none")
  (parameters
    '("gboolean" "justify")
  )
)

(define-method get_justify
  (of-object "ClutterText")
  (c-name "clutter_text_get_justify")
  (docstring
  "Retrieves whether the clutter.Text actor should justify its contents\n"
  "on both margins.\n"
  )
  (return-type "gboolean")
)

(define-method insert_unichar
  (of-object "ClutterText")
  (c-name "clutter_text_insert_unichar")
  (docstring
  "Inserts wc at the current cursor position of a clutter.Text actor.\n"
  )
  (return-type "none")
  (parameters
    '("gunichar" "wc")
  )
)

(define-method delete_chars
  (of-object "ClutterText")
  (c-name "clutter_text_delete_chars")
  (docstring
  "Deletes n_chars inside a clutter.Text actor, starting from the current\n"
  "cursor position.\n"
  )
  (return-type "none")
  (parameters
    '("guint" "n_chars")
  )
)

(define-method insert_text
  (of-object "ClutterText")
  (c-name "clutter_text_insert_text")
  (docstring
  "Inserts text into a clutter.Actor at the given position. If position\n"
  "is a negative number, the text will be appended at the end of the\n"
  "current contents of the clutter.Text. The position is expressed in\n"
  "characters, not in bytes.\n"
  )
  (return-type "none")
  (parameters
    '("const-gchar*" "text")
    '("gssize" "position")
  )
)

(define-method delete_text
  (of-object "ClutterText")
  (c-name "clutter_text_delete_text")
  (docstring
  "Deletes the text inside a clutter.Text actor between start_pos and\n"
  "end_pos. The starting and ending positions are expressed in\n"
  "characters, not in bytes.\n"
  )
  (return-type "none")
  (parameters
    '("gssize" "start_pos")
    '("gssize" "end_pos")
  )
)

(define-method get_chars
  (of-object "ClutterText")
  (c-name "clutter_text_get_chars")
  (docstring
  "Retrieves the contents of the clutter.Text actor between The positions\n"
  "are specified in characters, not in bytes. the text actor between the\n"
  "specified positions. Use g_free() to free the resources when done\n"
  )
  (return-type "gchar*")
  (parameters
    '("gssize" "start_pos")
    '("gssize" "end_pos")
  )
)

(define-method set_editable
  (of-object "ClutterText")
  (c-name "clutter_text_set_editable")
  (docstring
  "Sets whether the clutter.Text actor should be editable. An editable\n"
  "clutter.Text with key focus set using clutter.Actor.grab_key_focus()\n"
  "or clutter_stage_take_key_focus() will receive key events and will\n"
  "update its contents accordingly.\n"
  )
  (return-type "none")
  (parameters
    '("gboolean" "editable")
  )
)

(define-method get_editable
  (of-object "ClutterText")
  (c-name "clutter_text_get_editable")
  (docstring
  "Retrieves whether a clutter.Text is editable or not.\n"
  )
  (return-type "gboolean")
)

(define-method set_activatable
  (of-object "ClutterText")
  (c-name "clutter_text_set_activatable")
  (docstring
  "Sets whether a clutter.Text actor should be activatable. An\n"
  "activatable clutter.Text actor will emit the clutter.Text::activate\n"
  "signal whenever the 'Enter' (or 'Return') key is pressed; if it is not\n"
  "activatable, a new line will be appended to the current content. An\n"
  "activatable clutter.Text must also be set as editable using\n"
  "clutter.Text.set_editable().\n"
  )
  (return-type "none")
  (parameters
    '("gboolean" "activatable")
  )
)

(define-method get_activatable
  (of-object "ClutterText")
  (c-name "clutter_text_get_activatable")
  (docstring
  "Retrieves whether a clutter.Text is activatable or not.\n"
  )
  (return-type "gboolean")
)

(define-method get_cursor_position
  (of-object "ClutterText")
  (c-name "clutter_text_get_cursor_position")
  (docstring
  "Retrieves the cursor position.\n"
  )
  (return-type "gint")
)

(define-method set_cursor_position
  (of-object "ClutterText")
  (c-name "clutter_text_set_cursor_position")
  (docstring
  "Sets the cursor of a clutter.Text actor at position. The position is\n"
  "expressed in characters, not in bytes.\n"
  )
  (return-type "none")
  (parameters
    '("gint" "position")
  )
)

(define-method set_cursor_visible
  (of-object "ClutterText")
  (c-name "clutter_text_set_cursor_visible")
  (docstring
  "Sets whether the cursor of a clutter.Text actor should be visible or\n"
  "not. The color of the cursor will be the same as the text color unless\n"
  "clutter.Text.set_cursor_color() has been called. The size of the\n"
  "cursor can be set using clutter.Text.set_cursor_size(). The position\n"
  "of the cursor can be changed programmatically using\n"
  "clutter.Text.set_cursor_position().\n"
  )
  (return-type "none")
  (parameters
    '("gboolean" "cursor_visible")
  )
)

(define-method get_cursor_visible
  (of-object "ClutterText")
  (c-name "clutter_text_get_cursor_visible")
  (docstring
  "Retrieves whether the cursor of a clutter.Text actor is visible.\n"
  )
  (return-type "gboolean")
)

(define-method set_cursor_color
  (of-object "ClutterText")
  (c-name "clutter_text_set_cursor_color")
  (docstring
  "Sets the color of the cursor of a clutter.Text actor. If color is\n"
  "NULL, the cursor color will be the same as the text color.\n"
  )
  (return-type "none")
  (parameters
    '("const-ClutterColor*" "color")
  )
)

(define-method get_cursor_color
  (of-object "ClutterText")
  (c-name "clutter_text_get_cursor_color")
  (docstring
  "Retrieves the color of the cursor of a clutter.Text actor.\n"
  )
  (return-type "none")
  (parameters
    '("ClutterColor*" "color")
  )
)

(define-method set_cursor_size
  (of-object "ClutterText")
  (c-name "clutter_text_set_cursor_size")
  (docstring
  "default value Sets the size of the cursor of a clutter.Text. The\n"
  "cursor will only be visible if the clutter.Text:cursor-visible\n"
  "property is set to TRUE.\n"
  )
  (return-type "none")
  (parameters
    '("gint" "size")
  )
)

(define-method get_cursor_size
  (of-object "ClutterText")
  (c-name "clutter_text_get_cursor_size")
  (docstring
  "Retrieves the size of the cursor of a clutter.Text actor.\n"
  )
  (return-type "guint")
)

(define-method set_selectable
  (of-object "ClutterText")
  (c-name "clutter_text_set_selectable")
  (docstring
  "Sets whether a clutter.Text actor should be selectable. A selectable\n"
  "clutter.Text will allow selecting its contents using the pointer or\n"
  "the keyboard.\n"
  )
  (return-type "none")
  (parameters
    '("gboolean" "selectable")
  )
)

(define-method get_selectable
  (of-object "ClutterText")
  (c-name "clutter_text_get_selectable")
  (docstring
  "Retrieves whether a clutter.Text is selectable or not.\n"
  )
  (return-type "gboolean")
)

(define-method set_selection_bound
  (of-object "ClutterText")
  (c-name "clutter_text_set_selection_bound")
  (docstring
  "Sets the other end of the selection, starting from the current cursor\n"
  "position. If selection_bound is -1, the selection unset.\n"
  )
  (return-type "none")
  (parameters
    '("gint" "selection_bound")
  )
)

(define-method get_selection_bound
  (of-object "ClutterText")
  (c-name "clutter_text_get_selection_bound")
  (docstring
  "Retrieves the other end of the selection of a clutter.Text actor, in\n"
  "characters from the current cursor position.\n"
  )
  (return-type "gint")
)

(define-method set_selection
  (of-object "ClutterText")
  (c-name "clutter_text_set_selection")
  (return-type "none")
  (parameters
    '("gssize" "start_pos")
    '("gssize" "end_pos")
  )
)

(define-method get_selection
  (of-object "ClutterText")
  (c-name "clutter_text_get_selection")
  (return-type "gchar*")
)

(define-method set_selection_color
  (of-object "ClutterText")
  (c-name "clutter_text_set_selection_color")
  (docstring
  "Sets the color of the selection of a clutter.Text actor. If color is\n"
  "NULL, the selection color will be the same as the cursor color, or if\n"
  "no cursor color is set either then it will be the same as the text\n"
  "color.\n"
  )
  (return-type "none")
  (parameters
    '("const-ClutterColor*" "color")
  )
)

(define-method get_selection_color
  (of-object "ClutterText")
  (c-name "clutter_text_get_selection_color")
  (docstring
  "Retrieves the color of the selection of a clutter.Text actor.\n"
  )
  (return-type "none")
  (parameters
    '("ClutterColor*" "color")
  )
)

(define-method delete_selection
  (of-object "ClutterText")
  (c-name "clutter_text_delete_selection")
  (docstring
  "Deletes the currently selected text This function is only useful in\n"
  "subclasses of clutter.Text is empty, and FALSE otherwise\n"
  )
  (return-type "gboolean")
)

(define-method set_password_char
  (of-object "ClutterText")
  (c-name "clutter_text_set_password_char")
  (docstring
  "Sets the character to use in place of the actual text in a password\n"
  "text actor. If wc is 0 the text will be displayed as it is entered in\n"
  "the clutter.Text actor.\n"
  )
  (return-type "none")
  (parameters
    '("gunichar" "wc")
  )
)

(define-method get_password_char
  (of-object "ClutterText")
  (c-name "clutter_text_get_password_char")
  (docstring
  "Retrieves the character to use in place of the actual text as set by\n"
  "clutter.Text.set_password_char(). character is not set\n"
  )
  (return-type "gunichar")
)

(define-method set_max_length
  (of-object "ClutterText")
  (c-name "clutter_text_set_max_length")
  (docstring
  "to disable or -1 to set the length of the current string Sets the\n"
  "maximum allowed length of the contents of the actor. If the current\n"
  "contents are longer than the given length, then they will be truncated\n"
  "to fit.\n"
  )
  (return-type "none")
  (parameters
    '("gint" "max")
  )
)

(define-method get_max_length
  (of-object "ClutterText")
  (c-name "clutter_text_get_max_length")
  (docstring
  "Gets the maximum length of text that can be set into a text actor. See\n"
  "clutter.Text.set_max_length().\n"
  )
  (return-type "gint")
)

(define-method set_single_line_mode
  (of-object "ClutterText")
  (c-name "clutter_text_set_single_line_mode")
  (docstring
  "Sets whether a clutter.Text actor should be in single line mode or\n"
  "not. A text actor in single line mode will not wrap text and will clip\n"
  "the the visible area to the predefined size. The contents of the text\n"
  "actor will scroll to display the end of the text if its length is\n"
  "bigger than the allocated width. When setting the single line mode the\n"
  "clutter.Text:activatable property is also set as a side effect.\n"
  "Instead of entering a new line character, the text actor will emit the\n"
  "clutter.Text::activate signal.\n"
  )
  (return-type "none")
  (parameters
    '("gboolean" "single_line")
  )
)

(define-method get_single_line_mode
  (of-object "ClutterText")
  (c-name "clutter_text_get_single_line_mode")
  (docstring
  "Retrieves whether the clutter.Text actor is in single line mode.\n"
  )
  (return-type "gboolean")
)

(define-method activate
  (of-object "ClutterText")
  (c-name "clutter_text_activate")
  (docstring
  "Emits the clutter.Text::activate signal, if self has been set as\n"
  "activatable using clutter.Text.set_activatable(). This function can be\n"
  "used to emit the ::activate signal inside a clutter.Actor::captured-\n"
  "event or clutter.Actor::key-press-event signal handlers before the\n"
  "default signal handler for the clutter.Text is invoked. and FALSE\n"
  "otherwise\n"
  )
  (return-type "gboolean")
)

(define-method position_to_coords
  (of-object "ClutterText")
  (c-name "clutter_text_position_to_coords")
  (docstring
  "Retrieves the coordinates of the given position.\n"
  )
  (return-type "gboolean")
  (parameters
    '("gint" "position")
    '("gfloat*" "x")
    '("gfloat*" "y")
    '("gfloat*" "line_height")
  )
)

(define-method set_preedit_string
  (of-object "ClutterText")
  (c-name "clutter_text_set_preedit_string")
  (docstring
  "Sets, or unsets, the pre-edit string. This function is useful for\n"
  "input methods to display a string (with eventual specific Pango\n"
  "attributes) before it is entered inside the clutter.Text buffer. The\n"
  "preedit string and attributes are ignored if the clutter.Text actor is\n"
  "not editable. This function should not be used by applications\n"
  )
  (return-type "none")
  (parameters
    '("const-gchar*" "preedit_str")
    '("PangoAttrList*" "preedit_attr")
    '("guint" "cursor_position")
  )
)




;; From clutter-clone.h

(define-function clone_get_type
  (c-name "clutter_clone_get_type")
  (return-type "GType")
)

(define-function clone_new
  (c-name "clutter_clone_new")
  (is-constructor-of "ClutterClone")
  (return-type "ClutterActor*")
  (properties
    '("source")
  )
)

(define-method set_source
  (of-object "ClutterClone")
  (c-name "clutter_clone_set_source")
  (docstring
  "Sets source as the source actor to be cloned by clone.\n"
  )
  (return-type "none")
  (parameters
    '("ClutterActor*" "source")
  )
)

(define-method get_source
  (of-object "ClutterClone")
  (c-name "clutter_clone_get_source")
  (docstring
  "Retrieves the source clutter.Actor being cloned by clone\n"
  )
  (return-type "ClutterActor*")
)


;; From clutter-animation.h

(define-function animation_get_type
  (c-name "clutter_animation_get_type")
  (return-type "GType")
)

(define-function animation_new
  (c-name "clutter_animation_new")
  (is-constructor-of "ClutterAnimation")
  (return-type "ClutterAnimation*")
  (properties
    '("object" (optional))
    '("mode" (optional))
    '("duration" (optional))
    '("loop" (optional))
    '("timeline" (optional))
    '("alpha" (optional))
  )
)

(define-method set_object
  (of-object "ClutterAnimation")
  (c-name "clutter_animation_set_object")
  (docstring
  "Attaches animation to object. The clutter.Animation will take a\n"
  "reference on object.\n"
  )
  (return-type "none")
  (parameters
    '("GObject*" "object")
  )
)

(define-method get_object
  (of-object "ClutterAnimation")
  (c-name "clutter_animation_get_object")
  (docstring
  "Retrieves the GObject attached to animation.\n"
  )
  (return-type "GObject*")
)

(define-method set_mode
  (of-object "ClutterAnimation")
  (c-name "clutter_animation_set_mode")
  (docstring
  "Sets the animation mode of animation. The animation mode is a logical\n"
  "id, either coming from the clutter.AnimationMode enumeration or the\n"
  "return value of clutter.Alpha.register_func(). This function will also\n"
  "set clutter.Animation:alpha if needed.\n"
  )
  (return-type "none")
  (parameters
    '("gulong" "mode")
  )
)

(define-method get_mode
  (of-object "ClutterAnimation")
  (c-name "clutter_animation_get_mode")
  (docstring
  "Retrieves the animation mode of animation, as set by\n"
  "clutter.Animation.set_mode().\n"
  )
  (return-type "gulong")
)

(define-method set_duration
  (of-object "ClutterAnimation")
  (c-name "clutter_animation_set_duration")
  (docstring
  "Sets the duration of animation in milliseconds. This function will set\n"
  "clutter.Animation:alpha and clutter.Animation:timeline if needed.\n"
  )
  (return-type "none")
  (parameters
    '("gint" "msecs")
  )
)

(define-method get_duration
  (of-object "ClutterAnimation")
  (c-name "clutter_animation_get_duration")
  (docstring
  "Retrieves the duration of animation, in milliseconds.\n"
  )
  (return-type "guint")
)

(define-method set_loop
  (of-object "ClutterAnimation")
  (c-name "clutter_animation_set_loop")
  (docstring
  "Sets whether animation should loop over itself once finished. A\n"
  "looping clutter.Animation will not emit the\n"
  "clutter.Animation::completed signal when finished. This function will\n"
  "set clutter.Animation:alpha and clutter.Animation:timeline if needed.\n"
  )
  (return-type "none")
  (parameters
    '("gboolean" "loop")
  )
)

(define-method get_loop
  (of-object "ClutterAnimation")
  (c-name "clutter_animation_get_loop")
  (docstring
  "Retrieves whether animation is looping.\n"
  )
  (return-type "gboolean")
)

(define-method set_timeline
  (of-object "ClutterAnimation")
  (c-name "clutter_animation_set_timeline")
  (docstring
  "current clutter.Timeline Sets the clutter.Timeline used by animation.\n"
  )
  (return-type "none")
  (parameters
    '("ClutterTimeline*" "timeline")
  )
)

(define-method get_timeline
  (of-object "ClutterAnimation")
  (c-name "clutter_animation_get_timeline")
  (docstring
  "Retrieves the clutter.Timeline used by animation\n"
  )
  (return-type "ClutterTimeline*")
)

(define-method set_alpha
  (of-object "ClutterAnimation")
  (c-name "clutter_animation_set_alpha")
  (docstring
  "Sets alpha as the clutter.Alpha used by animation. If alpha is not\n"
  "NULL, the clutter.Animation will take ownership of the clutter.Alpha\n"
  "instance.\n"
  )
  (return-type "none")
  (parameters
    '("ClutterAlpha*" "alpha")
  )
)

(define-method get_alpha
  (of-object "ClutterAnimation")
  (c-name "clutter_animation_get_alpha")
  (docstring
  "Retrieves the clutter.Alpha used by animation.\n"
  )
  (return-type "ClutterAlpha*")
)

(define-method bind
  (of-object "ClutterAnimation")
  (c-name "clutter_animation_bind")
  (docstring
  "Adds a single property with name property_name to the animation\n"
  "animation.  For more information about animations, see\n"
  "clutter.Actor.animate(). This method returns the animation primarily\n"
  "to make chained calls convenient in language bindings.\n"
  )
  (return-type "ClutterAnimation*")
  (parameters
    '("const-gchar*" "property_name")
    '("const-GValue*" "final")
  )
)

(define-method bind_interval
  (of-object "ClutterAnimation")
  (c-name "clutter_animation_bind_interval")
  (docstring
  "Binds interval to the property_name of the GObject attached to\n"
  "animation. The clutter.Animation will take ownership of the passed\n"
  "clutter.Interval.  For more information about animations, see\n"
  "clutter.Actor.animate(). If you need to update the interval instance\n"
  "use clutter_animation_update_property() instead.\n"
  )
  (return-type "ClutterAnimation*")
  (parameters
    '("const-gchar*" "property_name")
    '("ClutterInterval*" "interval")
  )
)

(define-method has_property
  (of-object "ClutterAnimation")
  (c-name "clutter_animation_has_property")
  (docstring
  "Checks whether animation is controlling property_name.\n"
  "clutter.Animation, FALSE otherwise\n"
  )
  (return-type "gboolean")
  (parameters
    '("const-gchar*" "property_name")
  )
)

(define-method update_interval
  (of-object "ClutterAnimation")
  (c-name "clutter_animation_update_interval")
  (docstring
  "Updates the final value of the interval for property_name\n"
  )
  (return-type "none")
  (parameters
    '("const-gchar*" "property_name")
    '("ClutterInterval*" "interval")
  )
)

(define-method unbind_property
  (of-object "ClutterAnimation")
  (c-name "clutter_animation_unbind_property")
  (docstring
  "Removes property_name from the list of animated properties.\n"
  )
  (return-type "none")
  (parameters
    '("const-gchar*" "property_name")
  )
)

(define-method get_interval
  (of-object "ClutterAnimation")
  (c-name "clutter_animation_get_interval")
  (docstring
  "Retrieves the clutter.Interval associated to property_name inside\n"
  "animation. property with the same name was found. The returned\n"
  "interval is owned by the clutter.Animation and should not be\n"
  "unreferenced\n"
  )
  (return-type "ClutterInterval*")
  (parameters
    '("const-gchar*" "property_name")
  )
)

(define-method completed
  (of-object "ClutterAnimation")
  (c-name "clutter_animation_completed")
  (docstring
  "Emits the ::completed signal on animation When using this function\n"
  "with a clutter.Animation created by the clutter.Actor.animate() family\n"
  "of functions, animation will be unreferenced and it will not be valid\n"
  "anymore, unless g_object_ref() was called before calling this function\n"
  "or unless a reference was taken inside a handler for the\n"
  "clutter.Animation::completed signal\n"
  )
  (return-type "none")
)

(define-method animate
  (of-object "ClutterActor")
  (c-name "clutter_actor_animate")
  (docstring
  "property values Animates the given list of properties of actor between\n"
  "the current value for each property and a new final value. The\n"
  "animation has a definite duration and a speed given by the mode. For\n"
  "example, this: |[ clutter.Actor.animate (rectangle, CLUTTER_LINEAR,\n"
  "250, width, 100.0, height, 100.0, NULL); ]| will make width and height\n"
  "properties of the clutter.Actor rectangle grow linearly between the\n"
  "current value and 100 pixels, in 250 milliseconds. The animation mode\n"
  "is a logical id, either from the clutter.AnimationMode enumeration of\n"
  "from clutter_alpha_register_func(). All the properties specified will\n"
  "be animated between the current value and the final value. If a\n"
  "property should be set at the beginning of the animation but not\n"
  "updated during the animation, it should be prefixed by the fixed::\n"
  "string, for instance: |[ clutter.Actor.animate (actor,\n"
  "CLUTTER_EASE_IN_SINE, 100, rotation-angle-z, 360.0, fixed::rotation-\n"
  "center-z, &amp;center, NULL); ]| Will animate the rotation-angle-z\n"
  "property between the current value and 360 degrees, and set the\n"
  "rotation-center-z property to the fixed value of the clutter.Vertex\n"
  "center. This function will implicitly create a clutter.Animation\n"
  "object which will be assigned to the actor and will be returned to the\n"
  "developer to control the animation or to know when the animation has\n"
  "been completed. If a name argument starts with signal::, signal-\n"
  "after::, signal-swapped:: or signal-swapped-after:: the two following\n"
  "arguments are used as callback function and data for a signal handler\n"
  "installed on the clutter.Animation object for the specified signal\n"
  "name, for instance: |[ static void on_animation_completed\n"
  "(clutter.Animation *animation, clutter.Actor     *actor) {\n"
  "clutter.Actor.hide (actor); } clutter.Actor.animate (actor,\n"
  "CLUTTER_EASE_IN_CUBIC, 100, opacity, 0, signal::completed,\n"
  "on_animation_completed, actor, NULL); ]| or, to automatically destroy\n"
  "an actor at the end of the animation: |[ clutter.Actor.animate (actor,\n"
  "CLUTTER_EASE_IN_CUBIC, 100, opacity, 0, signal-swapped-\n"
  "after::completed, clutter.Actor.destroy, actor, NULL); ]| The signal::\n"
  "modifier is the equivalent of using g_signal_connect(); the signal-\n"
  "after:: modifier is the equivalent of using g_signal_connect_after()\n"
  "or g_signal_connect_data() with the G_CONNECT_AFTER; the signal-\n"
  "swapped:: modifier is the equivalent of using\n"
  "g_signal_connect_swapped() or g_signal_connect_data() with the\n"
  "G_CONNECT_SWAPPED flah; finally, the signal-swapped-after:: modifier\n"
  "is the equivalent of using g_signal_connect_data() with both the\n"
  "G_CONNECT_AFTER and G_CONNECT_SWAPPED flags. The\n"
  "clutter.Actor.animate() function will not keep track of multiple\n"
  "connections to the same signal, so it is your responsability to avoid\n"
  "them when calling clutter.Actor.animate() multiple times on the same\n"
  "actor. Calling this function on an actor that is already being\n"
  "animated will cause the current animation to change with the new final\n"
  "values, the new easing mode and the new duration - that is, this code:\n"
  "|[ clutter.Actor.animate (actor, CLUTTER_LINEAR, 250, width, 100.0,\n"
  "height, 100.0, NULL); clutter.Actor.animate (actor,\n"
  "CLUTTER_EASE_IN_CUBIC, 500, x, 100.0, y, 100.0, width, 200.0, NULL);\n"
  "]| is the equivalent of: |[ clutter.Actor.animate (actor,\n"
  "CLUTTER_EASE_IN_CUBIC, 500, x, 100.0, y, 100.0, width, 200.0, height,\n"
  "100.0, NULL); ]| <note>Unless the animation is looping, the\n"
  "clutter.Animation created by clutter.Actor.animate() will become\n"
  "invalid as soon as it is complete.</note> Since the created\n"
  "clutter.Animation instance attached to actor is guaranteed to be valid\n"
  "throughout the clutter.Animation::completed signal emission chain, you\n"
  "will not be able to create a new animation using\n"
  "clutter.Actor.animate() on the same actor from within the\n"
  "clutter.Animation::completed signal handler unless you use\n"
  "g_signal_connect_after() to connect the callback function, for\n"
  "instance: |[ static void on_animation_completed (clutter.Animation\n"
  "*animation, clutter.Actor     *actor) { clutter.Actor.animate (actor,\n"
  "CLUTTER_EASE_OUT_CUBIC, 250, x, 500.0, y, 500.0, NULL); } ...\n"
  "animation = clutter.Actor.animate (actor, CLUTTER_EASE_IN_CUBIC, 250,\n"
  "x, 100.0, y, 100.0, NULL); g_signal_connect (animation, completed,\n"
  "G_CALLBACK (on_animation_completed), actor); ... ]| owned by the\n"
  "clutter.Actor and should not be unreferenced with g_object_unref()\n"
  )
  (return-type "ClutterAnimation*")
  (parameters
    '("gulong" "mode")
    '("guint" "duration")
    '("const-gchar*" "first_property_name")
  )
  (varargs #t)
)

(define-method animate_with_timeline
  (of-object "ClutterActor")
  (c-name "clutter_actor_animate_with_timeline")
  (docstring
  "property values Animates the given list of properties of actor between\n"
  "the current value for each property and a new final value. The\n"
  "animation has a definite duration given by timeline and a speed given\n"
  "by the mode. See clutter.Actor.animate() for further details. This\n"
  "function is useful if you want to use an existing timeline to animate\n"
  "actor. owned by the clutter.Actor and should not be unreferenced with\n"
  "g_object_unref()\n"
  )
  (return-type "ClutterAnimation*")
  (parameters
    '("gulong" "mode")
    '("ClutterTimeline*" "timeline")
    '("const-gchar*" "first_property_name")
  )
  (varargs #t)
)

(define-method animate_with_alpha
  (of-object "ClutterActor")
  (c-name "clutter_actor_animate_with_alpha")
  (docstring
  "property values Animates the given list of properties of actor between\n"
  "the current value for each property and a new final value. The\n"
  "animation has a definite behaviour given by the passed alpha. See\n"
  "clutter.Actor.animate() for further details. This function is useful\n"
  "if you want to use an existing clutter.Alpha to animate actor.\n"
  "clutter.Actor and should not be unreferenced with g_object_unref()\n"
  )
  (return-type "ClutterAnimation*")
  (parameters
    '("ClutterAlpha*" "alpha")
    '("const-gchar*" "first_property_name")
  )
  (varargs #t)
)

(define-method animatev
  (of-object "ClutterActor")
  (c-name "clutter_actor_animatev")
  (docstring
  "containing the property names to set property values to set Animates\n"
  "the given list of properties of actor between the current value for\n"
  "each property and a new final value. The animation has a definite\n"
  "duration and a speed given by the mode. This is the vector-based\n"
  "variant of clutter.Actor.animate(), useful for language bindings.\n"
  "<warning>Unlike clutter.Actor.animate(), this function will not allow\n"
  "you to specify signal:: names and callbacks.</warning> owned by the\n"
  "clutter.Actor and should not be unreferenced with g_object_unref()\n"
  )
  (return-type "ClutterAnimation*")
  (parameters
    '("gulong" "mode")
    '("guint" "duration")
    '("gint" "n_properties")
    '("const-gchar*-const[]" "properties")
    '("const-GValue*" "values")
  )
)

(define-method animate_with_timelinev
  (of-object "ClutterActor")
  (c-name "clutter_actor_animate_with_timelinev")
  (docstring
  "containing the property names to set property values to set Animates\n"
  "the given list of properties of actor between the current value for\n"
  "each property and a new final value. The animation has a definite\n"
  "duration given by timeline and a speed given by the mode. See\n"
  "clutter.Actor.animate() for further details. This function is useful\n"
  "if you want to use an existing timeline to animate actor. This is the\n"
  "vector-based variant of clutter.Actor.animate_with_timeline(), useful\n"
  "for language bindings. <warning>Unlike\n"
  "clutter.Actor.animate_with_timeline(), this function will not allow\n"
  "you to specify signal:: names and callbacks.</warning> owned by the\n"
  "clutter.Actor and should not be unreferenced with g_object_unref()\n"
  )
  (return-type "ClutterAnimation*")
  (parameters
    '("gulong" "mode")
    '("ClutterTimeline*" "timeline")
    '("gint" "n_properties")
    '("const-gchar*-const[]" "properties")
    '("const-GValue*" "values")
  )
)

(define-method animate_with_alphav
  (of-object "ClutterActor")
  (c-name "clutter_actor_animate_with_alphav")
  (docstring
  "containing the property names to set property values to set Animates\n"
  "the given list of properties of actor between the current value for\n"
  "each property and a new final value. The animation has a definite\n"
  "behaviour given by the passed alpha. See clutter.Actor.animate() for\n"
  "further details. This function is useful if you want to use an\n"
  "existing clutter.Alpha to animate actor. This is the vector-based\n"
  "variant of clutter.Actor.animate_with_alpha(), useful for language\n"
  "bindings. <warning>Unlike clutter.Actor.animate_with_alpha(), this\n"
  "function will not allow you to specify signal:: names and\n"
  "callbacks.</warning> clutter.Actor and should not be unreferenced with\n"
  "g_object_unref()\n"
  )
  (return-type "ClutterAnimation*")
  (parameters
    '("ClutterAlpha*" "alpha")
    '("gint" "n_properties")
    '("const-gchar*-const[]" "properties")
    '("const-GValue*" "values")
  )
)

(define-method get_animation
  (of-object "ClutterActor")
  (c-name "clutter_actor_get_animation")
  (docstring
  "Retrieves the clutter.Animation used by actor, if\n"
  "clutter.Actor.animate() has been called on actor.\n"
  )
  (return-type "ClutterAnimation*")
)



;; From clutter-interval.h

(define-function interval_get_type
  (c-name "clutter_interval_get_type")
  (return-type "GType")
)

(define-function interval_new
  (c-name "clutter_interval_new")
  (is-constructor-of "ClutterInterval")
  (return-type "ClutterInterval*")
  (parameters
    '("GType" "gtype")
  )
  (varargs #t)
)

(define-function interval_new_with_values
  (c-name "clutter_interval_new_with_values")
  (return-type "ClutterInterval*")
  (parameters
    '("GType" "gtype")
    '("const-GValue*" "initial")
    '("const-GValue*" "final")
  )
)

(define-method clone
  (of-object "ClutterInterval")
  (c-name "clutter_interval_clone")
  (docstring
  "Creates a copy of interval.\n"
  )
  (return-type "ClutterInterval*")
)

(define-method get_value_type
  (of-object "ClutterInterval")
  (c-name "clutter_interval_get_value_type")
  (docstring
  "Retrieves the GType of the values inside interval.\n"
  )
  (return-type "GType")
)

(define-method set_initial_value
  (of-object "ClutterInterval")
  (c-name "clutter_interval_set_initial_value")
  (docstring
  "Sets the initial value of interval to value. The value is copied\n"
  "inside the clutter.Interval.\n"
  )
  (return-type "none")
  (parameters
    '("const-GValue*" "value")
  )
)

(define-method get_initial_value
  (of-object "ClutterInterval")
  (c-name "clutter_interval_get_initial_value")
  (docstring
  "Retrieves the initial value of interval and copies it into value. The\n"
  "passed GValue must be initialized to the value held by the\n"
  "clutter.Interval.\n"
  )
  (return-type "none")
  (parameters
    '("GValue*" "value")
  )
)

(define-method peek_initial_value
  (of-object "ClutterInterval")
  (c-name "clutter_interval_peek_initial_value")
  (docstring
  "Gets the pointer to the initial value of interval The value is owned\n"
  "by the clutter.Interval and it should not be modified or freed\n"
  )
  (return-type "GValue*")
)

(define-method set_final_value
  (of-object "ClutterInterval")
  (c-name "clutter_interval_set_final_value")
  (docstring
  "Sets the final value of interval to value. The value is copied inside\n"
  "the clutter.Interval.\n"
  )
  (return-type "none")
  (parameters
    '("const-GValue*" "value")
  )
)

(define-method get_final_value
  (of-object "ClutterInterval")
  (c-name "clutter_interval_get_final_value")
  (docstring
  "Retrieves the final value of interval and copies it into value. The\n"
  "passed GValue must be initialized to the value held by the\n"
  "clutter.Interval.\n"
  )
  (return-type "none")
  (parameters
    '("GValue*" "value")
  )
)

(define-method peek_final_value
  (of-object "ClutterInterval")
  (c-name "clutter_interval_peek_final_value")
  (docstring
  "Gets the pointer to the final value of interval The value is owned by\n"
  "the clutter.Interval and it should not be modified or freed\n"
  )
  (return-type "GValue*")
)

(define-method set_interval
  (of-object "ClutterInterval")
  (c-name "clutter_interval_set_interval")
  (docstring
  "Variable arguments wrapper for clutter.Interval.set_initial_value()\n"
  "and clutter.Interval.set_final_value() that avoids using the GValue\n"
  "arguments: |[ clutter.Interval.set_interval (interval, 0, 50);\n"
  "clutter.Interval.set_interval (interval, 1.0, 0.0);\n"
  "clutter.Interval.set_interval (interval, FALSE, TRUE); ]| This\n"
  "function is meant for the convenience of the C API; bindings should\n"
  "reimplement this function using the GValue-based API.\n"
  )
  (return-type "none")
  (parameters
  )
  (varargs #t)
)

(define-method get_interval
  (of-object "ClutterInterval")
  (c-name "clutter_interval_get_interval")
  (docstring
  "the interval Variable arguments wrapper for\n"
  "clutter.Interval.get_initial_value() and\n"
  "clutter.Interval.get_final_value() that avoids using the GValue\n"
  "arguments: |[ gint a = 0, b = 0; clutter.Interval.get_interval\n"
  "(interval, &a, &b); ]| This function is meant for the convenience of\n"
  "the C API; bindings should reimplement this function using the GValue-\n"
  "based API.\n"
  )
  (return-type "none")
  (parameters
  )
  (varargs #t)
)

(define-method validate
  (of-object "ClutterInterval")
  (c-name "clutter_interval_validate")
  (docstring
  "Validates the initial and final values of interval against a\n"
  "GParamSpec.\n"
  )
  (return-type "gboolean")
  (parameters
    '("GParamSpec*" "pspec")
  )
)

(define-virtual validate
  (of-object "ClutterInterval")
  (return-type "gboolean")
  (parameters
    '("GParamSpec*" "pspec")
  )
)

(define-method compute_value
  (of-object "ClutterInterval")
  (c-name "clutter_interval_compute_value")
  (docstring
  "Computes the value between the interval boundaries given the progress\n"
  "factor and puts it into value.\n"
  )
  (return-type "gboolean")
  (parameters
    '("gdouble" "factor")
    '("GValue*" "value")
  )
)

(define-virtual compute_value
  (of-object "ClutterInterval")
  (return-type "gboolean")
  (parameters
    '("gdouble" "factor")
    '("GValue*" "value")
  )
)

(define-function interval_register_progress_func
  (c-name "clutter_interval_register_progress_func")
  (return-type "none")
  (parameters
    '("GType" "value_type")
    '("ClutterProgressFunc" "func")
  )
)


;; From clutter-binding-pool.h

(define-function binding_pool_get_type
  (c-name "clutter_binding_pool_get_type")
  (return-type "GType")
)

(define-function binding_pool_new
  (c-name "clutter_binding_pool_new")
  (is-constructor-of "ClutterBindingPool")
  (return-type "ClutterBindingPool*")
  (properties
    '("name")
  )
)

(define-function binding_pool_get_for_class
  (c-name "clutter_binding_pool_get_for_class")
  (return-type "ClutterBindingPool*")
  (parameters
    '("gpointer" "klass")
  )
)

(define-function binding_pool_find
  (c-name "clutter_binding_pool_find")
  (return-type "ClutterBindingPool*")
  (parameters
    '("const-gchar*" "name")
  )
)

(define-method install_action
  (of-object "ClutterBindingPool")
  (c-name "clutter_binding_pool_install_action")
  (docstring
  "from the pool Installs a new action inside a clutter.BindingPool. The\n"
  "action is bound to key_val and modifiers. The same action name can be\n"
  "used for multiple key_val, modifiers pairs. When an action has been\n"
  "activated using clutter.Binding.pool_activate() the passed callback\n"
  "will be invoked (with data). Actions can be blocked with\n"
  "clutter.Binding.pool_block_action() and then unblocked using\n"
  "clutter.Binding.pool_unblock_action().\n"
  )
  (return-type "none")
  (parameters
    '("const-gchar*" "action_name")
    '("guint" "key_val")
    '("ClutterModifierType" "modifiers")
    '("GCallback" "callback")
    '("gpointer" "data")
    '("GDestroyNotify" "notify")
  )
)

(define-method install_closure
  (of-object "ClutterBindingPool")
  (c-name "clutter_binding_pool_install_closure")
  (docstring
  "A GClosure variant of clutter.Binding.pool_install_action(). Installs\n"
  "a new action inside a clutter.BindingPool. The action is bound to\n"
  "key_val and modifiers. The same action name can be used for multiple\n"
  "key_val, modifiers pairs. When an action has been activated using\n"
  "clutter.Binding.pool_activate() the passed closure will be invoked.\n"
  "Actions can be blocked with clutter.Binding.pool_block_action() and\n"
  "then unblocked using clutter.Binding.pool_unblock_action().\n"
  )
  (return-type "none")
  (parameters
    '("const-gchar*" "action_name")
    '("guint" "key_val")
    '("ClutterModifierType" "modifiers")
    '("GClosure*" "closure")
  )
)

(define-method override_action
  (of-object "ClutterBindingPool")
  (c-name "clutter_binding_pool_override_action")
  (docstring
  "from the pool Allows overriding the action for key_val and modifiers\n"
  "inside a clutter.BindingPool. See\n"
  "clutter.Binding.pool_install_action(). When an action has been\n"
  "activated using clutter.Binding.pool_activate() the passed callback\n"
  "will be invoked (with data). Actions can be blocked with\n"
  "clutter.Binding.pool_block_action() and then unblocked using\n"
  "clutter.Binding.pool_unblock_action().\n"
  )
  (return-type "none")
  (parameters
    '("guint" "key_val")
    '("ClutterModifierType" "modifiers")
    '("GCallback" "callback")
    '("gpointer" "data")
    '("GDestroyNotify" "notify")
  )
)

(define-method override_closure
  (of-object "ClutterBindingPool")
  (c-name "clutter_binding_pool_override_closure")
  (docstring
  "A GClosure variant of clutter.Binding.pool_override_action(). Allows\n"
  "overriding the action for key_val and modifiers inside a\n"
  "clutter.BindingPool. See clutter.Binding.pool_install_closure(). When\n"
  "an action has been activated using clutter.Binding.pool_activate() the\n"
  "passed callback will be invoked (with data). Actions can be blocked\n"
  "with clutter.Binding.pool_block_action() and then unblocked using\n"
  "clutter.Binding.pool_unblock_action().\n"
  )
  (return-type "none")
  (parameters
    '("guint" "key_val")
    '("ClutterModifierType" "modifiers")
    '("GClosure*" "closure")
  )
)

(define-method find_action
  (of-object "ClutterBindingPool")
  (c-name "clutter_binding_pool_find_action")
  (docstring
  "Retrieves the name of the action matching the given key symbol and\n"
  "modifiers bitmask. returned string is owned by the binding pool and\n"
  "should never be modified or freed\n"
  )
  (return-type "const-gchar*")
  (parameters
    '("guint" "key_val")
    '("ClutterModifierType" "modifiers")
  )
)

(define-method remove_action
  (of-object "ClutterBindingPool")
  (c-name "clutter_binding_pool_remove_action")
  (docstring
  "Removes the action matching the given key_val, modifiers pair, if any\n"
  "exists.\n"
  )
  (return-type "none")
  (parameters
    '("guint" "key_val")
    '("ClutterModifierType" "modifiers")
  )
)

(define-method activate
  (of-object "ClutterBindingPool")
  (c-name "clutter_binding_pool_activate")
  (docstring
  "Activates the callback associated to the action that is bound to the\n"
  "key_val and modifiers pair. The callback has the following signature:\n"
  "|[ void (* callback) (GObject             *gobject, const gchar\n"
  "*action_name, guint                key_val, clutter.ModifierType\n"
  "modifiers, gpointer             user_data); ]| Where the GObject\n"
  "instance is gobject and the user data is the one passed when\n"
  "installing the action with clutter.Binding.pool_install_action(). If\n"
  "the action bound to the key_val, modifiers pair has been blocked using\n"
  "clutter.Binding.pool_block_action(), the callback will not be invoked,\n"
  "and this function will return FALSE.\n"
  )
  (return-type "gboolean")
  (parameters
    '("guint" "key_val")
    '("ClutterModifierType" "modifiers")
    '("GObject*" "gobject")
  )
)

(define-method block_action
  (of-object "ClutterBindingPool")
  (c-name "clutter_binding_pool_block_action")
  (docstring
  "Blocks all the actions with name action_name inside pool.\n"
  )
  (return-type "none")
  (parameters
    '("const-gchar*" "action_name")
  )
)

(define-method unblock_action
  (of-object "ClutterBindingPool")
  (c-name "clutter_binding_pool_unblock_action")
  (docstring
  "Unblockes all the actions with name action_name inside pool.\n"
  "Unblocking an action does not cause the callback bound to it to be\n"
  "invoked in case clutter.Binding.pool_activate() was called on an\n"
  "action previously blocked with clutter.Binding.pool_block_action().\n"
  )
  (return-type "none")
  (parameters
    '("const-gchar*" "action_name")
  )
)


;; From clutter-animatable.h

(define-function animatable_get_type
  (c-name "clutter_animatable_get_type")
  (return-type "GType")
)

(define-virtual animate_property
  (of-object "ClutterAnimatable")
  (return-type "gboolean")
  (parameters
    '("ClutterAnimation*" "animation")
    '("const-gchar*" "property_name")
    '("const-GValue*" "initial_value")
    '("const-GValue*" "final_value")
    '("gdouble" "progress")
    '("GValue*" "value")
  )
)

(define-method animate_property
  (of-object "ClutterAnimatable")
  (c-name "clutter_animatable_animate_property")
  (return-type "gboolean")
  (parameters
    '("ClutterAnimation*" "animation")
    '("const-gchar*" "property_name")
    '("const-GValue*" "initial_value")
    '("const-GValue*" "final_value")
    '("gdouble" "progress")
    '("GValue*" "value")
  )
)


;; From clutter-units.h

(define-function units_get_type
  (c-name "clutter_units_get_type")
  (return-type "GType")
)

; This is a fake function to create a constructor
(define-function units_new
  (c-name "clutter_units_new")
  (is-constructor-of "ClutterUnits")
  (return-type "ClutterUnits*")
)

(define-method get_unit_type
  (of-object "ClutterUnits")
  (c-name "clutter_units_get_unit_type")
  (return-type "ClutterUnitType")
)

(define-method get_unit_value
  (of-object "ClutterUnits")
  (c-name "clutter_units_get_unit_value")
  (return-type "gfloat")
)

(define-method copy
  (of-object "ClutterUnits")
  (c-name "clutter_units_copy")
  (return-type "ClutterUnits*")
)

(define-method free
  (of-object "ClutterUnits")
  (c-name "clutter_units_free")
  (return-type "none")
)

(define-method from_pixels
  (of-object "ClutterUnits")
  (c-name "clutter_units_from_pixels")
  (return-type "none")
  (parameters
    '("gint" "px")
  )
)

(define-method from_em
  (of-object "ClutterUnits")
  (c-name "clutter_units_from_em")
  (return-type "none")
  (parameters
    '("gfloat" "em")
  )
)

(define-method from_em_for_font
  (of-object "ClutterUnits")
  (c-name "clutter_units_from_em_for_font")
  (return-type "none")
  (parameters
    '("const-gchar*" "font_name")
    '("gfloat" "em")
  )
)

(define-method from_mm
  (of-object "ClutterUnits")
  (c-name "clutter_units_from_mm")
  (return-type "none")
  (parameters
    '("gfloat" "mm")
  )
)

(define-method from_pt
  (of-object "ClutterUnits")
  (c-name "clutter_units_from_pt")
  (return-type "none")
  (parameters
    '("gfloat" "pt")
  )
)

(define-method to_pixels
  (of-object "ClutterUnits")
  (c-name "clutter_units_to_pixels")
  (return-type "gfloat")
)

(define-method from_string
  (of-object "ClutterUnits")
  (c-name "clutter_units_from_string")
  (return-type "gboolean")
  (parameters
    '("const-gchar*" "str")
  )
)

(define-method to_string
  (of-object "ClutterUnits")
  (c-name "clutter_units_to_string")
  (return-type "gchar*")
)

(define-function param_units_get_type
  (c-name "clutter_param_units_get_type")
  (return-type "GType")
)

(define-function param_spec_units
  (c-name "clutter_param_spec_units")
  (docstring
  "Creates a GParamSpec for properties using clutter.Units.\n"
  )
  (return-type "GParamSpec*")
  (parameters
    '("const-gchar*" "name")
    '("const-gchar*" "nick")
    '("const-gchar*" "blurb")
    '("ClutterUnitType" "default_type")
    '("gfloat" "minimum")
    '("gfloat" "maximum")
    '("gfloat" "default_value")
    '("GParamFlags" "flags")
  )
)

(define-function value_set_units
  (c-name "clutter_value_set_units")
  (docstring
  "Sets value to units\n"
  )
  (return-type "none")
  (parameters
    '("GValue*" "value")
    '("const-ClutterUnits*" "units")
  )
)

(define-function value_get_units
  (c-name "clutter_value_get_units")
  (docstring
  "Gets the clutter.Unit<!-- -->s contained in value.\n"
  )
  (return-type "const-ClutterUnits*")
  (parameters
    '("const-GValue*" "value")
  )
)


;; From clutter-util.h

(define-function util_next_p2
  (c-name "clutter_util_next_p2")
  (docstring
  "Calculates the nearest power of two, greater than or equal to a.\n"
  )
  (return-type "int")
  (parameters
    '("int" "a")
  )
)
