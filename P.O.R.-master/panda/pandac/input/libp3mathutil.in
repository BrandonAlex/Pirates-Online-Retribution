1412101896
2 2
13 libp3mathutil 4 LL_p 12 panda3d.core 
647
774 5 clear 0 4 1423 59 PointerToBase< ReferenceCountedVector< LMatrix3d > >::clear 0 1 13 0
80
inline void ::PointerToBase< ReferenceCountedVector< LMatrix3d > >::clear(void);

775 6 output 0 4 1423 60 PointerToBase< ReferenceCountedVector< LMatrix3d > >::output 0 1 14 0
88
void ::PointerToBase< ReferenceCountedVector< LMatrix3d > >::output(ostream &out) const;

776 19 ~PointerToArrayBase 0 4 1422 52 PointerToArrayBase< LMatrix3d >::~PointerToArrayBase 0 0 0
68
inline ::PointerToArrayBase< LMatrix3d >::~PointerToArrayBase(void);

777 19 ConstPointerToArray 0 4 1421 53 ConstPointerToArray< LMatrix3d >::ConstPointerToArray 0 3 1 2 3 0
312
inline ::ConstPointerToArray< LMatrix3d >::ConstPointerToArray(PointerToArray< LMatrix3d > const &copy);
inline ::ConstPointerToArray< LMatrix3d >::ConstPointerToArray(ConstPointerToArray< LMatrix3d > const &copy);
inline ::ConstPointerToArray< LMatrix3d >::ConstPointerToArray(PyObject *self, PyObject *source);

778 4 size 0 4 1421 38 ConstPointerToArray< LMatrix3d >::size 0 1 4 0
73
inline unsigned int ::ConstPointerToArray< LMatrix3d >::size(void) const;

779 11 get_element 0 4 1421 45 ConstPointerToArray< LMatrix3d >::get_element 0 1 5 0
94
inline LMatrix3d const &::ConstPointerToArray< LMatrix3d >::get_element(unsigned int n) const;

780 11 __getitem__ 0 4 1421 45 ConstPointerToArray< LMatrix3d >::__getitem__ 0 1 6 0
94
inline LMatrix3d const &::ConstPointerToArray< LMatrix3d >::__getitem__(unsigned int n) const;

781 8 get_data 0 4 1421 42 ConstPointerToArray< LMatrix3d >::get_data 0 1 7 0
85
inline basic_string< char > ::ConstPointerToArray< LMatrix3d >::get_data(void) const;

782 11 get_subdata 0 4 1421 45 ConstPointerToArray< LMatrix3d >::get_subdata 0 1 8 0
118
inline basic_string< char > ::ConstPointerToArray< LMatrix3d >::get_subdata(unsigned int n, unsigned int count) const;

783 13 get_ref_count 0 4 1421 47 ConstPointerToArray< LMatrix3d >::get_ref_count 0 1 9 0
73
inline int ::ConstPointerToArray< LMatrix3d >::get_ref_count(void) const;

784 18 get_node_ref_count 0 4 1421 52 ConstPointerToArray< LMatrix3d >::get_node_ref_count 0 1 10 0
78
inline int ::ConstPointerToArray< LMatrix3d >::get_node_ref_count(void) const;

785 13 __getbuffer__ 0 4 1421 47 ConstPointerToArray< LMatrix3d >::__getbuffer__ 0 1 11 0
104
int ::ConstPointerToArray< LMatrix3d >::__getbuffer__(PyObject *self, Py_buffer *view, int flags) const;

786 17 __releasebuffer__ 0 4 1421 51 ConstPointerToArray< LMatrix3d >::__releasebuffer__ 0 1 12 0
98
void ::ConstPointerToArray< LMatrix3d >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

787 20 ~ConstPointerToArray 0 4 1421 54 ConstPointerToArray< LMatrix3d >::~ConstPointerToArray 0 0 0
63
::ConstPointerToArray< LMatrix3d >::~ConstPointerToArray(void);

788 5 clear 0 4 1427 59 PointerToBase< ReferenceCountedVector< LMatrix3f > >::clear 0 1 27 0
80
inline void ::PointerToBase< ReferenceCountedVector< LMatrix3f > >::clear(void);

789 6 output 0 4 1427 60 PointerToBase< ReferenceCountedVector< LMatrix3f > >::output 0 1 28 0
88
void ::PointerToBase< ReferenceCountedVector< LMatrix3f > >::output(ostream &out) const;

790 19 ~PointerToArrayBase 0 4 1426 52 PointerToArrayBase< LMatrix3f >::~PointerToArrayBase 0 0 0
68
inline ::PointerToArrayBase< LMatrix3f >::~PointerToArrayBase(void);

791 19 ConstPointerToArray 0 4 1425 53 ConstPointerToArray< LMatrix3f >::ConstPointerToArray 0 3 15 16 17 0
312
inline ::ConstPointerToArray< LMatrix3f >::ConstPointerToArray(PointerToArray< LMatrix3f > const &copy);
inline ::ConstPointerToArray< LMatrix3f >::ConstPointerToArray(ConstPointerToArray< LMatrix3f > const &copy);
inline ::ConstPointerToArray< LMatrix3f >::ConstPointerToArray(PyObject *self, PyObject *source);

792 4 size 0 4 1425 38 ConstPointerToArray< LMatrix3f >::size 0 1 18 0
73
inline unsigned int ::ConstPointerToArray< LMatrix3f >::size(void) const;

793 11 get_element 0 4 1425 45 ConstPointerToArray< LMatrix3f >::get_element 0 1 19 0
94
inline LMatrix3f const &::ConstPointerToArray< LMatrix3f >::get_element(unsigned int n) const;

794 11 __getitem__ 0 4 1425 45 ConstPointerToArray< LMatrix3f >::__getitem__ 0 1 20 0
94
inline LMatrix3f const &::ConstPointerToArray< LMatrix3f >::__getitem__(unsigned int n) const;

795 8 get_data 0 4 1425 42 ConstPointerToArray< LMatrix3f >::get_data 0 1 21 0
85
inline basic_string< char > ::ConstPointerToArray< LMatrix3f >::get_data(void) const;

796 11 get_subdata 0 4 1425 45 ConstPointerToArray< LMatrix3f >::get_subdata 0 1 22 0
118
inline basic_string< char > ::ConstPointerToArray< LMatrix3f >::get_subdata(unsigned int n, unsigned int count) const;

797 13 get_ref_count 0 4 1425 47 ConstPointerToArray< LMatrix3f >::get_ref_count 0 1 23 0
73
inline int ::ConstPointerToArray< LMatrix3f >::get_ref_count(void) const;

798 18 get_node_ref_count 0 4 1425 52 ConstPointerToArray< LMatrix3f >::get_node_ref_count 0 1 24 0
78
inline int ::ConstPointerToArray< LMatrix3f >::get_node_ref_count(void) const;

799 13 __getbuffer__ 0 4 1425 47 ConstPointerToArray< LMatrix3f >::__getbuffer__ 0 1 25 0
104
int ::ConstPointerToArray< LMatrix3f >::__getbuffer__(PyObject *self, Py_buffer *view, int flags) const;

800 17 __releasebuffer__ 0 4 1425 51 ConstPointerToArray< LMatrix3f >::__releasebuffer__ 0 1 26 0
98
void ::ConstPointerToArray< LMatrix3f >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

801 20 ~ConstPointerToArray 0 4 1425 54 ConstPointerToArray< LMatrix3f >::~ConstPointerToArray 0 0 0
63
::ConstPointerToArray< LMatrix3f >::~ConstPointerToArray(void);

802 5 clear 0 4 1430 60 PointerToBase< ReferenceCountedVector< LVecBase2d > >::clear 0 1 41 0
81
inline void ::PointerToBase< ReferenceCountedVector< LVecBase2d > >::clear(void);

803 6 output 0 4 1430 61 PointerToBase< ReferenceCountedVector< LVecBase2d > >::output 0 1 42 0
89
void ::PointerToBase< ReferenceCountedVector< LVecBase2d > >::output(ostream &out) const;

804 19 ~PointerToArrayBase 0 4 1429 53 PointerToArrayBase< LVecBase2d >::~PointerToArrayBase 0 0 0
69
inline ::PointerToArrayBase< LVecBase2d >::~PointerToArrayBase(void);

805 19 ConstPointerToArray 0 4 1428 54 ConstPointerToArray< LVecBase2d >::ConstPointerToArray 0 3 29 30 31 0
317
inline ::ConstPointerToArray< LVecBase2d >::ConstPointerToArray(PointerToArray< LVecBase2d > const &copy);
inline ::ConstPointerToArray< LVecBase2d >::ConstPointerToArray(ConstPointerToArray< LVecBase2d > const &copy);
inline ::ConstPointerToArray< LVecBase2d >::ConstPointerToArray(PyObject *self, PyObject *source);

806 4 size 0 4 1428 39 ConstPointerToArray< LVecBase2d >::size 0 1 32 0
74
inline unsigned int ::ConstPointerToArray< LVecBase2d >::size(void) const;

807 11 get_element 0 4 1428 46 ConstPointerToArray< LVecBase2d >::get_element 0 1 33 0
96
inline LVecBase2d const &::ConstPointerToArray< LVecBase2d >::get_element(unsigned int n) const;

808 11 __getitem__ 0 4 1428 46 ConstPointerToArray< LVecBase2d >::__getitem__ 0 1 34 0
96
inline LVecBase2d const &::ConstPointerToArray< LVecBase2d >::__getitem__(unsigned int n) const;

809 8 get_data 0 4 1428 43 ConstPointerToArray< LVecBase2d >::get_data 0 1 35 0
86
inline basic_string< char > ::ConstPointerToArray< LVecBase2d >::get_data(void) const;

810 11 get_subdata 0 4 1428 46 ConstPointerToArray< LVecBase2d >::get_subdata 0 1 36 0
119
inline basic_string< char > ::ConstPointerToArray< LVecBase2d >::get_subdata(unsigned int n, unsigned int count) const;

811 13 get_ref_count 0 4 1428 48 ConstPointerToArray< LVecBase2d >::get_ref_count 0 1 37 0
74
inline int ::ConstPointerToArray< LVecBase2d >::get_ref_count(void) const;

812 18 get_node_ref_count 0 4 1428 53 ConstPointerToArray< LVecBase2d >::get_node_ref_count 0 1 38 0
79
inline int ::ConstPointerToArray< LVecBase2d >::get_node_ref_count(void) const;

813 13 __getbuffer__ 0 4 1428 48 ConstPointerToArray< LVecBase2d >::__getbuffer__ 0 1 39 0
105
int ::ConstPointerToArray< LVecBase2d >::__getbuffer__(PyObject *self, Py_buffer *view, int flags) const;

814 17 __releasebuffer__ 0 4 1428 52 ConstPointerToArray< LVecBase2d >::__releasebuffer__ 0 1 40 0
99
void ::ConstPointerToArray< LVecBase2d >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

815 20 ~ConstPointerToArray 0 4 1428 55 ConstPointerToArray< LVecBase2d >::~ConstPointerToArray 0 0 0
64
::ConstPointerToArray< LVecBase2d >::~ConstPointerToArray(void);

816 5 clear 0 4 1433 60 PointerToBase< ReferenceCountedVector< LVecBase2f > >::clear 0 1 55 0
81
inline void ::PointerToBase< ReferenceCountedVector< LVecBase2f > >::clear(void);

817 6 output 0 4 1433 61 PointerToBase< ReferenceCountedVector< LVecBase2f > >::output 0 1 56 0
89
void ::PointerToBase< ReferenceCountedVector< LVecBase2f > >::output(ostream &out) const;

818 19 ~PointerToArrayBase 0 4 1432 53 PointerToArrayBase< LVecBase2f >::~PointerToArrayBase 0 0 0
69
inline ::PointerToArrayBase< LVecBase2f >::~PointerToArrayBase(void);

819 19 ConstPointerToArray 0 4 1431 54 ConstPointerToArray< LVecBase2f >::ConstPointerToArray 0 3 43 44 45 0
317
inline ::ConstPointerToArray< LVecBase2f >::ConstPointerToArray(PointerToArray< LVecBase2f > const &copy);
inline ::ConstPointerToArray< LVecBase2f >::ConstPointerToArray(ConstPointerToArray< LVecBase2f > const &copy);
inline ::ConstPointerToArray< LVecBase2f >::ConstPointerToArray(PyObject *self, PyObject *source);

820 4 size 0 4 1431 39 ConstPointerToArray< LVecBase2f >::size 0 1 46 0
74
inline unsigned int ::ConstPointerToArray< LVecBase2f >::size(void) const;

821 11 get_element 0 4 1431 46 ConstPointerToArray< LVecBase2f >::get_element 0 1 47 0
96
inline LVecBase2f const &::ConstPointerToArray< LVecBase2f >::get_element(unsigned int n) const;

822 11 __getitem__ 0 4 1431 46 ConstPointerToArray< LVecBase2f >::__getitem__ 0 1 48 0
96
inline LVecBase2f const &::ConstPointerToArray< LVecBase2f >::__getitem__(unsigned int n) const;

823 8 get_data 0 4 1431 43 ConstPointerToArray< LVecBase2f >::get_data 0 1 49 0
86
inline basic_string< char > ::ConstPointerToArray< LVecBase2f >::get_data(void) const;

824 11 get_subdata 0 4 1431 46 ConstPointerToArray< LVecBase2f >::get_subdata 0 1 50 0
119
inline basic_string< char > ::ConstPointerToArray< LVecBase2f >::get_subdata(unsigned int n, unsigned int count) const;

825 13 get_ref_count 0 4 1431 48 ConstPointerToArray< LVecBase2f >::get_ref_count 0 1 51 0
74
inline int ::ConstPointerToArray< LVecBase2f >::get_ref_count(void) const;

826 18 get_node_ref_count 0 4 1431 53 ConstPointerToArray< LVecBase2f >::get_node_ref_count 0 1 52 0
79
inline int ::ConstPointerToArray< LVecBase2f >::get_node_ref_count(void) const;

827 13 __getbuffer__ 0 4 1431 48 ConstPointerToArray< LVecBase2f >::__getbuffer__ 0 1 53 0
105
int ::ConstPointerToArray< LVecBase2f >::__getbuffer__(PyObject *self, Py_buffer *view, int flags) const;

828 17 __releasebuffer__ 0 4 1431 52 ConstPointerToArray< LVecBase2f >::__releasebuffer__ 0 1 54 0
99
void ::ConstPointerToArray< LVecBase2f >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

829 20 ~ConstPointerToArray 0 4 1431 55 ConstPointerToArray< LVecBase2f >::~ConstPointerToArray 0 0 0
64
::ConstPointerToArray< LVecBase2f >::~ConstPointerToArray(void);

830 5 clear 0 4 1436 60 PointerToBase< ReferenceCountedVector< LVecBase2i > >::clear 0 1 69 0
81
inline void ::PointerToBase< ReferenceCountedVector< LVecBase2i > >::clear(void);

831 6 output 0 4 1436 61 PointerToBase< ReferenceCountedVector< LVecBase2i > >::output 0 1 70 0
89
void ::PointerToBase< ReferenceCountedVector< LVecBase2i > >::output(ostream &out) const;

832 19 ~PointerToArrayBase 0 4 1435 53 PointerToArrayBase< LVecBase2i >::~PointerToArrayBase 0 0 0
69
inline ::PointerToArrayBase< LVecBase2i >::~PointerToArrayBase(void);

833 19 ConstPointerToArray 0 4 1434 54 ConstPointerToArray< LVecBase2i >::ConstPointerToArray 0 3 57 58 59 0
317
inline ::ConstPointerToArray< LVecBase2i >::ConstPointerToArray(PointerToArray< LVecBase2i > const &copy);
inline ::ConstPointerToArray< LVecBase2i >::ConstPointerToArray(ConstPointerToArray< LVecBase2i > const &copy);
inline ::ConstPointerToArray< LVecBase2i >::ConstPointerToArray(PyObject *self, PyObject *source);

834 4 size 0 4 1434 39 ConstPointerToArray< LVecBase2i >::size 0 1 60 0
74
inline unsigned int ::ConstPointerToArray< LVecBase2i >::size(void) const;

835 11 get_element 0 4 1434 46 ConstPointerToArray< LVecBase2i >::get_element 0 1 61 0
96
inline LVecBase2i const &::ConstPointerToArray< LVecBase2i >::get_element(unsigned int n) const;

836 11 __getitem__ 0 4 1434 46 ConstPointerToArray< LVecBase2i >::__getitem__ 0 1 62 0
96
inline LVecBase2i const &::ConstPointerToArray< LVecBase2i >::__getitem__(unsigned int n) const;

837 8 get_data 0 4 1434 43 ConstPointerToArray< LVecBase2i >::get_data 0 1 63 0
86
inline basic_string< char > ::ConstPointerToArray< LVecBase2i >::get_data(void) const;

838 11 get_subdata 0 4 1434 46 ConstPointerToArray< LVecBase2i >::get_subdata 0 1 64 0
119
inline basic_string< char > ::ConstPointerToArray< LVecBase2i >::get_subdata(unsigned int n, unsigned int count) const;

839 13 get_ref_count 0 4 1434 48 ConstPointerToArray< LVecBase2i >::get_ref_count 0 1 65 0
74
inline int ::ConstPointerToArray< LVecBase2i >::get_ref_count(void) const;

840 18 get_node_ref_count 0 4 1434 53 ConstPointerToArray< LVecBase2i >::get_node_ref_count 0 1 66 0
79
inline int ::ConstPointerToArray< LVecBase2i >::get_node_ref_count(void) const;

841 13 __getbuffer__ 0 4 1434 48 ConstPointerToArray< LVecBase2i >::__getbuffer__ 0 1 67 0
105
int ::ConstPointerToArray< LVecBase2i >::__getbuffer__(PyObject *self, Py_buffer *view, int flags) const;

842 17 __releasebuffer__ 0 4 1434 52 ConstPointerToArray< LVecBase2i >::__releasebuffer__ 0 1 68 0
99
void ::ConstPointerToArray< LVecBase2i >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

843 20 ~ConstPointerToArray 0 4 1434 55 ConstPointerToArray< LVecBase2i >::~ConstPointerToArray 0 0 0
64
::ConstPointerToArray< LVecBase2i >::~ConstPointerToArray(void);

844 5 clear 0 4 1439 60 PointerToBase< ReferenceCountedVector< LVecBase3d > >::clear 0 1 83 0
81
inline void ::PointerToBase< ReferenceCountedVector< LVecBase3d > >::clear(void);

845 6 output 0 4 1439 61 PointerToBase< ReferenceCountedVector< LVecBase3d > >::output 0 1 84 0
89
void ::PointerToBase< ReferenceCountedVector< LVecBase3d > >::output(ostream &out) const;

846 19 ~PointerToArrayBase 0 4 1438 53 PointerToArrayBase< LVecBase3d >::~PointerToArrayBase 0 0 0
69
inline ::PointerToArrayBase< LVecBase3d >::~PointerToArrayBase(void);

847 19 ConstPointerToArray 0 4 1437 54 ConstPointerToArray< LVecBase3d >::ConstPointerToArray 0 3 71 72 73 0
317
inline ::ConstPointerToArray< LVecBase3d >::ConstPointerToArray(PointerToArray< LVecBase3d > const &copy);
inline ::ConstPointerToArray< LVecBase3d >::ConstPointerToArray(ConstPointerToArray< LVecBase3d > const &copy);
inline ::ConstPointerToArray< LVecBase3d >::ConstPointerToArray(PyObject *self, PyObject *source);

848 4 size 0 4 1437 39 ConstPointerToArray< LVecBase3d >::size 0 1 74 0
74
inline unsigned int ::ConstPointerToArray< LVecBase3d >::size(void) const;

849 11 get_element 0 4 1437 46 ConstPointerToArray< LVecBase3d >::get_element 0 1 75 0
96
inline LVecBase3d const &::ConstPointerToArray< LVecBase3d >::get_element(unsigned int n) const;

850 11 __getitem__ 0 4 1437 46 ConstPointerToArray< LVecBase3d >::__getitem__ 0 1 76 0
96
inline LVecBase3d const &::ConstPointerToArray< LVecBase3d >::__getitem__(unsigned int n) const;

851 8 get_data 0 4 1437 43 ConstPointerToArray< LVecBase3d >::get_data 0 1 77 0
86
inline basic_string< char > ::ConstPointerToArray< LVecBase3d >::get_data(void) const;

852 11 get_subdata 0 4 1437 46 ConstPointerToArray< LVecBase3d >::get_subdata 0 1 78 0
119
inline basic_string< char > ::ConstPointerToArray< LVecBase3d >::get_subdata(unsigned int n, unsigned int count) const;

853 13 get_ref_count 0 4 1437 48 ConstPointerToArray< LVecBase3d >::get_ref_count 0 1 79 0
74
inline int ::ConstPointerToArray< LVecBase3d >::get_ref_count(void) const;

854 18 get_node_ref_count 0 4 1437 53 ConstPointerToArray< LVecBase3d >::get_node_ref_count 0 1 80 0
79
inline int ::ConstPointerToArray< LVecBase3d >::get_node_ref_count(void) const;

855 13 __getbuffer__ 0 4 1437 48 ConstPointerToArray< LVecBase3d >::__getbuffer__ 0 1 81 0
105
int ::ConstPointerToArray< LVecBase3d >::__getbuffer__(PyObject *self, Py_buffer *view, int flags) const;

856 17 __releasebuffer__ 0 4 1437 52 ConstPointerToArray< LVecBase3d >::__releasebuffer__ 0 1 82 0
99
void ::ConstPointerToArray< LVecBase3d >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

857 20 ~ConstPointerToArray 0 4 1437 55 ConstPointerToArray< LVecBase3d >::~ConstPointerToArray 0 0 0
64
::ConstPointerToArray< LVecBase3d >::~ConstPointerToArray(void);

858 5 clear 0 4 1442 60 PointerToBase< ReferenceCountedVector< LVecBase3f > >::clear 0 1 97 0
81
inline void ::PointerToBase< ReferenceCountedVector< LVecBase3f > >::clear(void);

859 6 output 0 4 1442 61 PointerToBase< ReferenceCountedVector< LVecBase3f > >::output 0 1 98 0
89
void ::PointerToBase< ReferenceCountedVector< LVecBase3f > >::output(ostream &out) const;

860 19 ~PointerToArrayBase 0 4 1441 53 PointerToArrayBase< LVecBase3f >::~PointerToArrayBase 0 0 0
69
inline ::PointerToArrayBase< LVecBase3f >::~PointerToArrayBase(void);

861 19 ConstPointerToArray 0 4 1440 54 ConstPointerToArray< LVecBase3f >::ConstPointerToArray 0 3 85 86 87 0
317
inline ::ConstPointerToArray< LVecBase3f >::ConstPointerToArray(PointerToArray< LVecBase3f > const &copy);
inline ::ConstPointerToArray< LVecBase3f >::ConstPointerToArray(ConstPointerToArray< LVecBase3f > const &copy);
inline ::ConstPointerToArray< LVecBase3f >::ConstPointerToArray(PyObject *self, PyObject *source);

862 4 size 0 4 1440 39 ConstPointerToArray< LVecBase3f >::size 0 1 88 0
74
inline unsigned int ::ConstPointerToArray< LVecBase3f >::size(void) const;

863 11 get_element 0 4 1440 46 ConstPointerToArray< LVecBase3f >::get_element 0 1 89 0
96
inline LVecBase3f const &::ConstPointerToArray< LVecBase3f >::get_element(unsigned int n) const;

864 11 __getitem__ 0 4 1440 46 ConstPointerToArray< LVecBase3f >::__getitem__ 0 1 90 0
96
inline LVecBase3f const &::ConstPointerToArray< LVecBase3f >::__getitem__(unsigned int n) const;

865 8 get_data 0 4 1440 43 ConstPointerToArray< LVecBase3f >::get_data 0 1 91 0
86
inline basic_string< char > ::ConstPointerToArray< LVecBase3f >::get_data(void) const;

866 11 get_subdata 0 4 1440 46 ConstPointerToArray< LVecBase3f >::get_subdata 0 1 92 0
119
inline basic_string< char > ::ConstPointerToArray< LVecBase3f >::get_subdata(unsigned int n, unsigned int count) const;

867 13 get_ref_count 0 4 1440 48 ConstPointerToArray< LVecBase3f >::get_ref_count 0 1 93 0
74
inline int ::ConstPointerToArray< LVecBase3f >::get_ref_count(void) const;

868 18 get_node_ref_count 0 4 1440 53 ConstPointerToArray< LVecBase3f >::get_node_ref_count 0 1 94 0
79
inline int ::ConstPointerToArray< LVecBase3f >::get_node_ref_count(void) const;

869 13 __getbuffer__ 0 4 1440 48 ConstPointerToArray< LVecBase3f >::__getbuffer__ 0 1 95 0
105
int ::ConstPointerToArray< LVecBase3f >::__getbuffer__(PyObject *self, Py_buffer *view, int flags) const;

870 17 __releasebuffer__ 0 4 1440 52 ConstPointerToArray< LVecBase3f >::__releasebuffer__ 0 1 96 0
99
void ::ConstPointerToArray< LVecBase3f >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

871 20 ~ConstPointerToArray 0 4 1440 55 ConstPointerToArray< LVecBase3f >::~ConstPointerToArray 0 0 0
64
::ConstPointerToArray< LVecBase3f >::~ConstPointerToArray(void);

872 5 clear 0 4 1445 60 PointerToBase< ReferenceCountedVector< LVecBase3i > >::clear 0 1 111 0
81
inline void ::PointerToBase< ReferenceCountedVector< LVecBase3i > >::clear(void);

873 6 output 0 4 1445 61 PointerToBase< ReferenceCountedVector< LVecBase3i > >::output 0 1 112 0
89
void ::PointerToBase< ReferenceCountedVector< LVecBase3i > >::output(ostream &out) const;

874 19 ~PointerToArrayBase 0 4 1444 53 PointerToArrayBase< LVecBase3i >::~PointerToArrayBase 0 0 0
69
inline ::PointerToArrayBase< LVecBase3i >::~PointerToArrayBase(void);

875 19 ConstPointerToArray 0 4 1443 54 ConstPointerToArray< LVecBase3i >::ConstPointerToArray 0 3 99 100 101 0
317
inline ::ConstPointerToArray< LVecBase3i >::ConstPointerToArray(PointerToArray< LVecBase3i > const &copy);
inline ::ConstPointerToArray< LVecBase3i >::ConstPointerToArray(ConstPointerToArray< LVecBase3i > const &copy);
inline ::ConstPointerToArray< LVecBase3i >::ConstPointerToArray(PyObject *self, PyObject *source);

876 4 size 0 4 1443 39 ConstPointerToArray< LVecBase3i >::size 0 1 102 0
74
inline unsigned int ::ConstPointerToArray< LVecBase3i >::size(void) const;

877 11 get_element 0 4 1443 46 ConstPointerToArray< LVecBase3i >::get_element 0 1 103 0
96
inline LVecBase3i const &::ConstPointerToArray< LVecBase3i >::get_element(unsigned int n) const;

878 11 __getitem__ 0 4 1443 46 ConstPointerToArray< LVecBase3i >::__getitem__ 0 1 104 0
96
inline LVecBase3i const &::ConstPointerToArray< LVecBase3i >::__getitem__(unsigned int n) const;

879 8 get_data 0 4 1443 43 ConstPointerToArray< LVecBase3i >::get_data 0 1 105 0
86
inline basic_string< char > ::ConstPointerToArray< LVecBase3i >::get_data(void) const;

880 11 get_subdata 0 4 1443 46 ConstPointerToArray< LVecBase3i >::get_subdata 0 1 106 0
119
inline basic_string< char > ::ConstPointerToArray< LVecBase3i >::get_subdata(unsigned int n, unsigned int count) const;

881 13 get_ref_count 0 4 1443 48 ConstPointerToArray< LVecBase3i >::get_ref_count 0 1 107 0
74
inline int ::ConstPointerToArray< LVecBase3i >::get_ref_count(void) const;

882 18 get_node_ref_count 0 4 1443 53 ConstPointerToArray< LVecBase3i >::get_node_ref_count 0 1 108 0
79
inline int ::ConstPointerToArray< LVecBase3i >::get_node_ref_count(void) const;

883 13 __getbuffer__ 0 4 1443 48 ConstPointerToArray< LVecBase3i >::__getbuffer__ 0 1 109 0
105
int ::ConstPointerToArray< LVecBase3i >::__getbuffer__(PyObject *self, Py_buffer *view, int flags) const;

884 17 __releasebuffer__ 0 4 1443 52 ConstPointerToArray< LVecBase3i >::__releasebuffer__ 0 1 110 0
99
void ::ConstPointerToArray< LVecBase3i >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

885 20 ~ConstPointerToArray 0 4 1443 55 ConstPointerToArray< LVecBase3i >::~ConstPointerToArray 0 0 0
64
::ConstPointerToArray< LVecBase3i >::~ConstPointerToArray(void);

886 5 clear 0 4 1448 68 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4d > >::clear 0 1 125 0
89
inline void ::PointerToBase< ReferenceCountedVector< UnalignedLMatrix4d > >::clear(void);

887 6 output 0 4 1448 69 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4d > >::output 0 1 126 0
97
void ::PointerToBase< ReferenceCountedVector< UnalignedLMatrix4d > >::output(ostream &out) const;

888 19 ~PointerToArrayBase 0 4 1447 61 PointerToArrayBase< UnalignedLMatrix4d >::~PointerToArrayBase 0 0 0
77
inline ::PointerToArrayBase< UnalignedLMatrix4d >::~PointerToArrayBase(void);

889 19 ConstPointerToArray 0 4 1446 62 ConstPointerToArray< UnalignedLMatrix4d >::ConstPointerToArray 0 3 113 114 115 0
357
inline ::ConstPointerToArray< UnalignedLMatrix4d >::ConstPointerToArray(PointerToArray< UnalignedLMatrix4d > const &copy);
inline ::ConstPointerToArray< UnalignedLMatrix4d >::ConstPointerToArray(ConstPointerToArray< UnalignedLMatrix4d > const &copy);
inline ::ConstPointerToArray< UnalignedLMatrix4d >::ConstPointerToArray(PyObject *self, PyObject *source);

890 4 size 0 4 1446 47 ConstPointerToArray< UnalignedLMatrix4d >::size 0 1 116 0
82
inline unsigned int ::ConstPointerToArray< UnalignedLMatrix4d >::size(void) const;

891 11 get_element 0 4 1446 54 ConstPointerToArray< UnalignedLMatrix4d >::get_element 0 1 117 0
112
inline UnalignedLMatrix4d const &::ConstPointerToArray< UnalignedLMatrix4d >::get_element(unsigned int n) const;

892 11 __getitem__ 0 4 1446 54 ConstPointerToArray< UnalignedLMatrix4d >::__getitem__ 0 1 118 0
112
inline UnalignedLMatrix4d const &::ConstPointerToArray< UnalignedLMatrix4d >::__getitem__(unsigned int n) const;

893 8 get_data 0 4 1446 51 ConstPointerToArray< UnalignedLMatrix4d >::get_data 0 1 119 0
94
inline basic_string< char > ::ConstPointerToArray< UnalignedLMatrix4d >::get_data(void) const;

894 11 get_subdata 0 4 1446 54 ConstPointerToArray< UnalignedLMatrix4d >::get_subdata 0 1 120 0
127
inline basic_string< char > ::ConstPointerToArray< UnalignedLMatrix4d >::get_subdata(unsigned int n, unsigned int count) const;

895 13 get_ref_count 0 4 1446 56 ConstPointerToArray< UnalignedLMatrix4d >::get_ref_count 0 1 121 0
82
inline int ::ConstPointerToArray< UnalignedLMatrix4d >::get_ref_count(void) const;

896 18 get_node_ref_count 0 4 1446 61 ConstPointerToArray< UnalignedLMatrix4d >::get_node_ref_count 0 1 122 0
87
inline int ::ConstPointerToArray< UnalignedLMatrix4d >::get_node_ref_count(void) const;

897 13 __getbuffer__ 0 4 1446 56 ConstPointerToArray< UnalignedLMatrix4d >::__getbuffer__ 0 1 123 0
113
int ::ConstPointerToArray< UnalignedLMatrix4d >::__getbuffer__(PyObject *self, Py_buffer *view, int flags) const;

898 17 __releasebuffer__ 0 4 1446 60 ConstPointerToArray< UnalignedLMatrix4d >::__releasebuffer__ 0 1 124 0
107
void ::ConstPointerToArray< UnalignedLMatrix4d >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

899 20 ~ConstPointerToArray 0 4 1446 63 ConstPointerToArray< UnalignedLMatrix4d >::~ConstPointerToArray 0 0 0
72
::ConstPointerToArray< UnalignedLMatrix4d >::~ConstPointerToArray(void);

900 5 clear 0 4 1451 68 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4f > >::clear 0 1 139 0
89
inline void ::PointerToBase< ReferenceCountedVector< UnalignedLMatrix4f > >::clear(void);

901 6 output 0 4 1451 69 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4f > >::output 0 1 140 0
97
void ::PointerToBase< ReferenceCountedVector< UnalignedLMatrix4f > >::output(ostream &out) const;

902 19 ~PointerToArrayBase 0 4 1450 61 PointerToArrayBase< UnalignedLMatrix4f >::~PointerToArrayBase 0 0 0
77
inline ::PointerToArrayBase< UnalignedLMatrix4f >::~PointerToArrayBase(void);

903 19 ConstPointerToArray 0 4 1449 62 ConstPointerToArray< UnalignedLMatrix4f >::ConstPointerToArray 0 3 127 128 129 0
357
inline ::ConstPointerToArray< UnalignedLMatrix4f >::ConstPointerToArray(PointerToArray< UnalignedLMatrix4f > const &copy);
inline ::ConstPointerToArray< UnalignedLMatrix4f >::ConstPointerToArray(ConstPointerToArray< UnalignedLMatrix4f > const &copy);
inline ::ConstPointerToArray< UnalignedLMatrix4f >::ConstPointerToArray(PyObject *self, PyObject *source);

904 4 size 0 4 1449 47 ConstPointerToArray< UnalignedLMatrix4f >::size 0 1 130 0
82
inline unsigned int ::ConstPointerToArray< UnalignedLMatrix4f >::size(void) const;

905 11 get_element 0 4 1449 54 ConstPointerToArray< UnalignedLMatrix4f >::get_element 0 1 131 0
112
inline UnalignedLMatrix4f const &::ConstPointerToArray< UnalignedLMatrix4f >::get_element(unsigned int n) const;

906 11 __getitem__ 0 4 1449 54 ConstPointerToArray< UnalignedLMatrix4f >::__getitem__ 0 1 132 0
112
inline UnalignedLMatrix4f const &::ConstPointerToArray< UnalignedLMatrix4f >::__getitem__(unsigned int n) const;

907 8 get_data 0 4 1449 51 ConstPointerToArray< UnalignedLMatrix4f >::get_data 0 1 133 0
94
inline basic_string< char > ::ConstPointerToArray< UnalignedLMatrix4f >::get_data(void) const;

908 11 get_subdata 0 4 1449 54 ConstPointerToArray< UnalignedLMatrix4f >::get_subdata 0 1 134 0
127
inline basic_string< char > ::ConstPointerToArray< UnalignedLMatrix4f >::get_subdata(unsigned int n, unsigned int count) const;

909 13 get_ref_count 0 4 1449 56 ConstPointerToArray< UnalignedLMatrix4f >::get_ref_count 0 1 135 0
82
inline int ::ConstPointerToArray< UnalignedLMatrix4f >::get_ref_count(void) const;

910 18 get_node_ref_count 0 4 1449 61 ConstPointerToArray< UnalignedLMatrix4f >::get_node_ref_count 0 1 136 0
87
inline int ::ConstPointerToArray< UnalignedLMatrix4f >::get_node_ref_count(void) const;

911 13 __getbuffer__ 0 4 1449 56 ConstPointerToArray< UnalignedLMatrix4f >::__getbuffer__ 0 1 137 0
113
int ::ConstPointerToArray< UnalignedLMatrix4f >::__getbuffer__(PyObject *self, Py_buffer *view, int flags) const;

912 17 __releasebuffer__ 0 4 1449 60 ConstPointerToArray< UnalignedLMatrix4f >::__releasebuffer__ 0 1 138 0
107
void ::ConstPointerToArray< UnalignedLMatrix4f >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

913 20 ~ConstPointerToArray 0 4 1449 63 ConstPointerToArray< UnalignedLMatrix4f >::~ConstPointerToArray 0 0 0
72
::ConstPointerToArray< UnalignedLMatrix4f >::~ConstPointerToArray(void);

914 5 clear 0 4 1454 69 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4d > >::clear 0 1 153 0
90
inline void ::PointerToBase< ReferenceCountedVector< UnalignedLVecBase4d > >::clear(void);

915 6 output 0 4 1454 70 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4d > >::output 0 1 154 0
98
void ::PointerToBase< ReferenceCountedVector< UnalignedLVecBase4d > >::output(ostream &out) const;

916 19 ~PointerToArrayBase 0 4 1453 62 PointerToArrayBase< UnalignedLVecBase4d >::~PointerToArrayBase 0 0 0
78
inline ::PointerToArrayBase< UnalignedLVecBase4d >::~PointerToArrayBase(void);

917 19 ConstPointerToArray 0 4 1452 63 ConstPointerToArray< UnalignedLVecBase4d >::ConstPointerToArray 0 3 141 142 143 0
362
inline ::ConstPointerToArray< UnalignedLVecBase4d >::ConstPointerToArray(PointerToArray< UnalignedLVecBase4d > const &copy);
inline ::ConstPointerToArray< UnalignedLVecBase4d >::ConstPointerToArray(ConstPointerToArray< UnalignedLVecBase4d > const &copy);
inline ::ConstPointerToArray< UnalignedLVecBase4d >::ConstPointerToArray(PyObject *self, PyObject *source);

918 4 size 0 4 1452 48 ConstPointerToArray< UnalignedLVecBase4d >::size 0 1 144 0
83
inline unsigned int ::ConstPointerToArray< UnalignedLVecBase4d >::size(void) const;

919 11 get_element 0 4 1452 55 ConstPointerToArray< UnalignedLVecBase4d >::get_element 0 1 145 0
114
inline UnalignedLVecBase4d const &::ConstPointerToArray< UnalignedLVecBase4d >::get_element(unsigned int n) const;

920 11 __getitem__ 0 4 1452 55 ConstPointerToArray< UnalignedLVecBase4d >::__getitem__ 0 1 146 0
114
inline UnalignedLVecBase4d const &::ConstPointerToArray< UnalignedLVecBase4d >::__getitem__(unsigned int n) const;

921 8 get_data 0 4 1452 52 ConstPointerToArray< UnalignedLVecBase4d >::get_data 0 1 147 0
95
inline basic_string< char > ::ConstPointerToArray< UnalignedLVecBase4d >::get_data(void) const;

922 11 get_subdata 0 4 1452 55 ConstPointerToArray< UnalignedLVecBase4d >::get_subdata 0 1 148 0
128
inline basic_string< char > ::ConstPointerToArray< UnalignedLVecBase4d >::get_subdata(unsigned int n, unsigned int count) const;

923 13 get_ref_count 0 4 1452 57 ConstPointerToArray< UnalignedLVecBase4d >::get_ref_count 0 1 149 0
83
inline int ::ConstPointerToArray< UnalignedLVecBase4d >::get_ref_count(void) const;

924 18 get_node_ref_count 0 4 1452 62 ConstPointerToArray< UnalignedLVecBase4d >::get_node_ref_count 0 1 150 0
88
inline int ::ConstPointerToArray< UnalignedLVecBase4d >::get_node_ref_count(void) const;

925 13 __getbuffer__ 0 4 1452 57 ConstPointerToArray< UnalignedLVecBase4d >::__getbuffer__ 0 1 151 0
114
int ::ConstPointerToArray< UnalignedLVecBase4d >::__getbuffer__(PyObject *self, Py_buffer *view, int flags) const;

926 17 __releasebuffer__ 0 4 1452 61 ConstPointerToArray< UnalignedLVecBase4d >::__releasebuffer__ 0 1 152 0
108
void ::ConstPointerToArray< UnalignedLVecBase4d >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

927 20 ~ConstPointerToArray 0 4 1452 64 ConstPointerToArray< UnalignedLVecBase4d >::~ConstPointerToArray 0 0 0
73
::ConstPointerToArray< UnalignedLVecBase4d >::~ConstPointerToArray(void);

928 5 clear 0 4 1457 69 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4f > >::clear 0 1 167 0
90
inline void ::PointerToBase< ReferenceCountedVector< UnalignedLVecBase4f > >::clear(void);

929 6 output 0 4 1457 70 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4f > >::output 0 1 168 0
98
void ::PointerToBase< ReferenceCountedVector< UnalignedLVecBase4f > >::output(ostream &out) const;

930 19 ~PointerToArrayBase 0 4 1456 62 PointerToArrayBase< UnalignedLVecBase4f >::~PointerToArrayBase 0 0 0
78
inline ::PointerToArrayBase< UnalignedLVecBase4f >::~PointerToArrayBase(void);

931 19 ConstPointerToArray 0 4 1455 63 ConstPointerToArray< UnalignedLVecBase4f >::ConstPointerToArray 0 3 155 156 157 0
362
inline ::ConstPointerToArray< UnalignedLVecBase4f >::ConstPointerToArray(PointerToArray< UnalignedLVecBase4f > const &copy);
inline ::ConstPointerToArray< UnalignedLVecBase4f >::ConstPointerToArray(ConstPointerToArray< UnalignedLVecBase4f > const &copy);
inline ::ConstPointerToArray< UnalignedLVecBase4f >::ConstPointerToArray(PyObject *self, PyObject *source);

932 4 size 0 4 1455 48 ConstPointerToArray< UnalignedLVecBase4f >::size 0 1 158 0
83
inline unsigned int ::ConstPointerToArray< UnalignedLVecBase4f >::size(void) const;

933 11 get_element 0 4 1455 55 ConstPointerToArray< UnalignedLVecBase4f >::get_element 0 1 159 0
114
inline UnalignedLVecBase4f const &::ConstPointerToArray< UnalignedLVecBase4f >::get_element(unsigned int n) const;

934 11 __getitem__ 0 4 1455 55 ConstPointerToArray< UnalignedLVecBase4f >::__getitem__ 0 1 160 0
114
inline UnalignedLVecBase4f const &::ConstPointerToArray< UnalignedLVecBase4f >::__getitem__(unsigned int n) const;

935 8 get_data 0 4 1455 52 ConstPointerToArray< UnalignedLVecBase4f >::get_data 0 1 161 0
95
inline basic_string< char > ::ConstPointerToArray< UnalignedLVecBase4f >::get_data(void) const;

936 11 get_subdata 0 4 1455 55 ConstPointerToArray< UnalignedLVecBase4f >::get_subdata 0 1 162 0
128
inline basic_string< char > ::ConstPointerToArray< UnalignedLVecBase4f >::get_subdata(unsigned int n, unsigned int count) const;

937 13 get_ref_count 0 4 1455 57 ConstPointerToArray< UnalignedLVecBase4f >::get_ref_count 0 1 163 0
83
inline int ::ConstPointerToArray< UnalignedLVecBase4f >::get_ref_count(void) const;

938 18 get_node_ref_count 0 4 1455 62 ConstPointerToArray< UnalignedLVecBase4f >::get_node_ref_count 0 1 164 0
88
inline int ::ConstPointerToArray< UnalignedLVecBase4f >::get_node_ref_count(void) const;

939 13 __getbuffer__ 0 4 1455 57 ConstPointerToArray< UnalignedLVecBase4f >::__getbuffer__ 0 1 165 0
114
int ::ConstPointerToArray< UnalignedLVecBase4f >::__getbuffer__(PyObject *self, Py_buffer *view, int flags) const;

940 17 __releasebuffer__ 0 4 1455 61 ConstPointerToArray< UnalignedLVecBase4f >::__releasebuffer__ 0 1 166 0
108
void ::ConstPointerToArray< UnalignedLVecBase4f >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

941 20 ~ConstPointerToArray 0 4 1455 64 ConstPointerToArray< UnalignedLVecBase4f >::~ConstPointerToArray 0 0 0
73
::ConstPointerToArray< UnalignedLVecBase4f >::~ConstPointerToArray(void);

942 5 clear 0 4 1460 69 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4i > >::clear 0 1 181 0
90
inline void ::PointerToBase< ReferenceCountedVector< UnalignedLVecBase4i > >::clear(void);

943 6 output 0 4 1460 70 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4i > >::output 0 1 182 0
98
void ::PointerToBase< ReferenceCountedVector< UnalignedLVecBase4i > >::output(ostream &out) const;

944 19 ~PointerToArrayBase 0 4 1459 62 PointerToArrayBase< UnalignedLVecBase4i >::~PointerToArrayBase 0 0 0
78
inline ::PointerToArrayBase< UnalignedLVecBase4i >::~PointerToArrayBase(void);

945 19 ConstPointerToArray 0 4 1458 63 ConstPointerToArray< UnalignedLVecBase4i >::ConstPointerToArray 0 3 169 170 171 0
362
inline ::ConstPointerToArray< UnalignedLVecBase4i >::ConstPointerToArray(PointerToArray< UnalignedLVecBase4i > const &copy);
inline ::ConstPointerToArray< UnalignedLVecBase4i >::ConstPointerToArray(ConstPointerToArray< UnalignedLVecBase4i > const &copy);
inline ::ConstPointerToArray< UnalignedLVecBase4i >::ConstPointerToArray(PyObject *self, PyObject *source);

946 4 size 0 4 1458 48 ConstPointerToArray< UnalignedLVecBase4i >::size 0 1 172 0
83
inline unsigned int ::ConstPointerToArray< UnalignedLVecBase4i >::size(void) const;

947 11 get_element 0 4 1458 55 ConstPointerToArray< UnalignedLVecBase4i >::get_element 0 1 173 0
114
inline UnalignedLVecBase4i const &::ConstPointerToArray< UnalignedLVecBase4i >::get_element(unsigned int n) const;

948 11 __getitem__ 0 4 1458 55 ConstPointerToArray< UnalignedLVecBase4i >::__getitem__ 0 1 174 0
114
inline UnalignedLVecBase4i const &::ConstPointerToArray< UnalignedLVecBase4i >::__getitem__(unsigned int n) const;

949 8 get_data 0 4 1458 52 ConstPointerToArray< UnalignedLVecBase4i >::get_data 0 1 175 0
95
inline basic_string< char > ::ConstPointerToArray< UnalignedLVecBase4i >::get_data(void) const;

950 11 get_subdata 0 4 1458 55 ConstPointerToArray< UnalignedLVecBase4i >::get_subdata 0 1 176 0
128
inline basic_string< char > ::ConstPointerToArray< UnalignedLVecBase4i >::get_subdata(unsigned int n, unsigned int count) const;

951 13 get_ref_count 0 4 1458 57 ConstPointerToArray< UnalignedLVecBase4i >::get_ref_count 0 1 177 0
83
inline int ::ConstPointerToArray< UnalignedLVecBase4i >::get_ref_count(void) const;

952 18 get_node_ref_count 0 4 1458 62 ConstPointerToArray< UnalignedLVecBase4i >::get_node_ref_count 0 1 178 0
88
inline int ::ConstPointerToArray< UnalignedLVecBase4i >::get_node_ref_count(void) const;

953 13 __getbuffer__ 0 4 1458 57 ConstPointerToArray< UnalignedLVecBase4i >::__getbuffer__ 0 1 179 0
114
int ::ConstPointerToArray< UnalignedLVecBase4i >::__getbuffer__(PyObject *self, Py_buffer *view, int flags) const;

954 17 __releasebuffer__ 0 4 1458 61 ConstPointerToArray< UnalignedLVecBase4i >::__releasebuffer__ 0 1 180 0
108
void ::ConstPointerToArray< UnalignedLVecBase4i >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

955 20 ~ConstPointerToArray 0 4 1458 64 ConstPointerToArray< UnalignedLVecBase4i >::~ConstPointerToArray 0 0 0
73
::ConstPointerToArray< UnalignedLVecBase4i >::~ConstPointerToArray(void);

956 14 PointerToArray 0 4 1461 43 PointerToArray< LMatrix3d >::PointerToArray 0 4 183 184 185 186 0
300
inline ::PointerToArray< LMatrix3d >::PointerToArray(TypeHandle type_handle = ((_get_type_handle((LMatrix3d const *)(0)))));
inline ::PointerToArray< LMatrix3d >::PointerToArray(PointerToArray< LMatrix3d > const &copy);
::PointerToArray< LMatrix3d >::PointerToArray(PyObject *self, PyObject *source);

957 11 empty_array 0 4 1461 40 PointerToArray< LMatrix3d >::empty_array 0 2 187 188 0
172
static inline PointerToArray< LMatrix3d > ::PointerToArray< LMatrix3d >::empty_array(unsigned int n, TypeHandle type_handle = ((_get_type_handle((LMatrix3d const *)(0)))));

958 4 size 0 4 1461 33 PointerToArray< LMatrix3d >::size 0 1 189 0
68
inline unsigned int ::PointerToArray< LMatrix3d >::size(void) const;

959 9 push_back 0 4 1461 38 PointerToArray< LMatrix3d >::push_back 0 1 190 0
73
inline void ::PointerToArray< LMatrix3d >::push_back(LMatrix3d const &x);

960 8 pop_back 0 4 1461 37 PointerToArray< LMatrix3d >::pop_back 0 1 191 0
58
inline void ::PointerToArray< LMatrix3d >::pop_back(void);

961 11 get_element 0 4 1461 40 PointerToArray< LMatrix3d >::get_element 0 1 192 0
89
inline LMatrix3d const &::PointerToArray< LMatrix3d >::get_element(unsigned int n) const;

962 11 set_element 0 4 1461 40 PointerToArray< LMatrix3d >::set_element 0 1 193 0
95
inline void ::PointerToArray< LMatrix3d >::set_element(unsigned int n, LMatrix3d const &value);

963 11 __getitem__ 0 4 1461 40 PointerToArray< LMatrix3d >::__getitem__ 0 1 194 0
89
inline LMatrix3d const &::PointerToArray< LMatrix3d >::__getitem__(unsigned int n) const;

964 11 __setitem__ 0 4 1461 40 PointerToArray< LMatrix3d >::__setitem__ 0 1 195 0
95
inline void ::PointerToArray< LMatrix3d >::__setitem__(unsigned int n, LMatrix3d const &value);

965 8 get_data 0 4 1461 37 PointerToArray< LMatrix3d >::get_data 0 1 196 0
80
inline basic_string< char > ::PointerToArray< LMatrix3d >::get_data(void) const;

966 8 set_data 0 4 1461 37 PointerToArray< LMatrix3d >::set_data 0 1 197 0
86
inline void ::PointerToArray< LMatrix3d >::set_data(basic_string< char > const &data);

967 11 get_subdata 0 4 1461 40 PointerToArray< LMatrix3d >::get_subdata 0 1 198 0
113
inline basic_string< char > ::PointerToArray< LMatrix3d >::get_subdata(unsigned int n, unsigned int count) const;

968 11 set_subdata 0 4 1461 40 PointerToArray< LMatrix3d >::set_subdata 0 1 199 0
125
inline void ::PointerToArray< LMatrix3d >::set_subdata(unsigned int n, unsigned int count, basic_string< char > const &data);

969 13 get_ref_count 0 4 1461 42 PointerToArray< LMatrix3d >::get_ref_count 0 1 200 0
68
inline int ::PointerToArray< LMatrix3d >::get_ref_count(void) const;

970 18 get_node_ref_count 0 4 1461 47 PointerToArray< LMatrix3d >::get_node_ref_count 0 1 201 0
73
inline int ::PointerToArray< LMatrix3d >::get_node_ref_count(void) const;

971 13 __getbuffer__ 0 4 1461 42 PointerToArray< LMatrix3d >::__getbuffer__ 0 1 202 0
93
int ::PointerToArray< LMatrix3d >::__getbuffer__(PyObject *self, Py_buffer *view, int flags);

972 17 __releasebuffer__ 0 4 1461 46 PointerToArray< LMatrix3d >::__releasebuffer__ 0 1 203 0
93
void ::PointerToArray< LMatrix3d >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

973 15 ~PointerToArray 0 4 1461 44 PointerToArray< LMatrix3d >::~PointerToArray 0 0 0
53
::PointerToArray< LMatrix3d >::~PointerToArray(void);

974 14 PointerToArray 0 4 1462 43 PointerToArray< LMatrix3f >::PointerToArray 0 4 204 205 206 207 0
300
inline ::PointerToArray< LMatrix3f >::PointerToArray(TypeHandle type_handle = ((_get_type_handle((LMatrix3f const *)(0)))));
inline ::PointerToArray< LMatrix3f >::PointerToArray(PointerToArray< LMatrix3f > const &copy);
::PointerToArray< LMatrix3f >::PointerToArray(PyObject *self, PyObject *source);

975 11 empty_array 0 4 1462 40 PointerToArray< LMatrix3f >::empty_array 0 2 208 209 0
172
static inline PointerToArray< LMatrix3f > ::PointerToArray< LMatrix3f >::empty_array(unsigned int n, TypeHandle type_handle = ((_get_type_handle((LMatrix3f const *)(0)))));

976 4 size 0 4 1462 33 PointerToArray< LMatrix3f >::size 0 1 210 0
68
inline unsigned int ::PointerToArray< LMatrix3f >::size(void) const;

977 9 push_back 0 4 1462 38 PointerToArray< LMatrix3f >::push_back 0 1 211 0
73
inline void ::PointerToArray< LMatrix3f >::push_back(LMatrix3f const &x);

978 8 pop_back 0 4 1462 37 PointerToArray< LMatrix3f >::pop_back 0 1 212 0
58
inline void ::PointerToArray< LMatrix3f >::pop_back(void);

979 11 get_element 0 4 1462 40 PointerToArray< LMatrix3f >::get_element 0 1 213 0
89
inline LMatrix3f const &::PointerToArray< LMatrix3f >::get_element(unsigned int n) const;

980 11 set_element 0 4 1462 40 PointerToArray< LMatrix3f >::set_element 0 1 214 0
95
inline void ::PointerToArray< LMatrix3f >::set_element(unsigned int n, LMatrix3f const &value);

981 11 __getitem__ 0 4 1462 40 PointerToArray< LMatrix3f >::__getitem__ 0 1 215 0
89
inline LMatrix3f const &::PointerToArray< LMatrix3f >::__getitem__(unsigned int n) const;

982 11 __setitem__ 0 4 1462 40 PointerToArray< LMatrix3f >::__setitem__ 0 1 216 0
95
inline void ::PointerToArray< LMatrix3f >::__setitem__(unsigned int n, LMatrix3f const &value);

983 8 get_data 0 4 1462 37 PointerToArray< LMatrix3f >::get_data 0 1 217 0
80
inline basic_string< char > ::PointerToArray< LMatrix3f >::get_data(void) const;

984 8 set_data 0 4 1462 37 PointerToArray< LMatrix3f >::set_data 0 1 218 0
86
inline void ::PointerToArray< LMatrix3f >::set_data(basic_string< char > const &data);

985 11 get_subdata 0 4 1462 40 PointerToArray< LMatrix3f >::get_subdata 0 1 219 0
113
inline basic_string< char > ::PointerToArray< LMatrix3f >::get_subdata(unsigned int n, unsigned int count) const;

986 11 set_subdata 0 4 1462 40 PointerToArray< LMatrix3f >::set_subdata 0 1 220 0
125
inline void ::PointerToArray< LMatrix3f >::set_subdata(unsigned int n, unsigned int count, basic_string< char > const &data);

987 13 get_ref_count 0 4 1462 42 PointerToArray< LMatrix3f >::get_ref_count 0 1 221 0
68
inline int ::PointerToArray< LMatrix3f >::get_ref_count(void) const;

988 18 get_node_ref_count 0 4 1462 47 PointerToArray< LMatrix3f >::get_node_ref_count 0 1 222 0
73
inline int ::PointerToArray< LMatrix3f >::get_node_ref_count(void) const;

989 13 __getbuffer__ 0 4 1462 42 PointerToArray< LMatrix3f >::__getbuffer__ 0 1 223 0
93
int ::PointerToArray< LMatrix3f >::__getbuffer__(PyObject *self, Py_buffer *view, int flags);

990 17 __releasebuffer__ 0 4 1462 46 PointerToArray< LMatrix3f >::__releasebuffer__ 0 1 224 0
93
void ::PointerToArray< LMatrix3f >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

991 15 ~PointerToArray 0 4 1462 44 PointerToArray< LMatrix3f >::~PointerToArray 0 0 0
53
::PointerToArray< LMatrix3f >::~PointerToArray(void);

992 14 PointerToArray 0 4 1463 44 PointerToArray< LVecBase2d >::PointerToArray 0 4 225 226 227 228 0
305
inline ::PointerToArray< LVecBase2d >::PointerToArray(TypeHandle type_handle = ((_get_type_handle((LVecBase2d const *)(0)))));
inline ::PointerToArray< LVecBase2d >::PointerToArray(PointerToArray< LVecBase2d > const &copy);
::PointerToArray< LVecBase2d >::PointerToArray(PyObject *self, PyObject *source);

993 11 empty_array 0 4 1463 41 PointerToArray< LVecBase2d >::empty_array 0 2 229 230 0
175
static inline PointerToArray< LVecBase2d > ::PointerToArray< LVecBase2d >::empty_array(unsigned int n, TypeHandle type_handle = ((_get_type_handle((LVecBase2d const *)(0)))));

994 4 size 0 4 1463 34 PointerToArray< LVecBase2d >::size 0 1 231 0
69
inline unsigned int ::PointerToArray< LVecBase2d >::size(void) const;

995 9 push_back 0 4 1463 39 PointerToArray< LVecBase2d >::push_back 0 1 232 0
75
inline void ::PointerToArray< LVecBase2d >::push_back(LVecBase2d const &x);

996 8 pop_back 0 4 1463 38 PointerToArray< LVecBase2d >::pop_back 0 1 233 0
59
inline void ::PointerToArray< LVecBase2d >::pop_back(void);

997 11 get_element 0 4 1463 41 PointerToArray< LVecBase2d >::get_element 0 1 234 0
91
inline LVecBase2d const &::PointerToArray< LVecBase2d >::get_element(unsigned int n) const;

998 11 set_element 0 4 1463 41 PointerToArray< LVecBase2d >::set_element 0 1 235 0
97
inline void ::PointerToArray< LVecBase2d >::set_element(unsigned int n, LVecBase2d const &value);

999 11 __getitem__ 0 4 1463 41 PointerToArray< LVecBase2d >::__getitem__ 0 1 236 0
91
inline LVecBase2d const &::PointerToArray< LVecBase2d >::__getitem__(unsigned int n) const;

1000 11 __setitem__ 0 4 1463 41 PointerToArray< LVecBase2d >::__setitem__ 0 1 237 0
97
inline void ::PointerToArray< LVecBase2d >::__setitem__(unsigned int n, LVecBase2d const &value);

1001 8 get_data 0 4 1463 38 PointerToArray< LVecBase2d >::get_data 0 1 238 0
81
inline basic_string< char > ::PointerToArray< LVecBase2d >::get_data(void) const;

1002 8 set_data 0 4 1463 38 PointerToArray< LVecBase2d >::set_data 0 1 239 0
87
inline void ::PointerToArray< LVecBase2d >::set_data(basic_string< char > const &data);

1003 11 get_subdata 0 4 1463 41 PointerToArray< LVecBase2d >::get_subdata 0 1 240 0
114
inline basic_string< char > ::PointerToArray< LVecBase2d >::get_subdata(unsigned int n, unsigned int count) const;

1004 11 set_subdata 0 4 1463 41 PointerToArray< LVecBase2d >::set_subdata 0 1 241 0
126
inline void ::PointerToArray< LVecBase2d >::set_subdata(unsigned int n, unsigned int count, basic_string< char > const &data);

1005 13 get_ref_count 0 4 1463 43 PointerToArray< LVecBase2d >::get_ref_count 0 1 242 0
69
inline int ::PointerToArray< LVecBase2d >::get_ref_count(void) const;

1006 18 get_node_ref_count 0 4 1463 48 PointerToArray< LVecBase2d >::get_node_ref_count 0 1 243 0
74
inline int ::PointerToArray< LVecBase2d >::get_node_ref_count(void) const;

1007 13 __getbuffer__ 0 4 1463 43 PointerToArray< LVecBase2d >::__getbuffer__ 0 1 244 0
94
int ::PointerToArray< LVecBase2d >::__getbuffer__(PyObject *self, Py_buffer *view, int flags);

1008 17 __releasebuffer__ 0 4 1463 47 PointerToArray< LVecBase2d >::__releasebuffer__ 0 1 245 0
94
void ::PointerToArray< LVecBase2d >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

1009 15 ~PointerToArray 0 4 1463 45 PointerToArray< LVecBase2d >::~PointerToArray 0 0 0
54
::PointerToArray< LVecBase2d >::~PointerToArray(void);

1010 14 PointerToArray 0 4 1464 44 PointerToArray< LVecBase2f >::PointerToArray 0 4 246 247 248 249 0
305
inline ::PointerToArray< LVecBase2f >::PointerToArray(TypeHandle type_handle = ((_get_type_handle((LVecBase2f const *)(0)))));
inline ::PointerToArray< LVecBase2f >::PointerToArray(PointerToArray< LVecBase2f > const &copy);
::PointerToArray< LVecBase2f >::PointerToArray(PyObject *self, PyObject *source);

1011 11 empty_array 0 4 1464 41 PointerToArray< LVecBase2f >::empty_array 0 2 250 251 0
175
static inline PointerToArray< LVecBase2f > ::PointerToArray< LVecBase2f >::empty_array(unsigned int n, TypeHandle type_handle = ((_get_type_handle((LVecBase2f const *)(0)))));

1012 4 size 0 4 1464 34 PointerToArray< LVecBase2f >::size 0 1 252 0
69
inline unsigned int ::PointerToArray< LVecBase2f >::size(void) const;

1013 9 push_back 0 4 1464 39 PointerToArray< LVecBase2f >::push_back 0 1 253 0
75
inline void ::PointerToArray< LVecBase2f >::push_back(LVecBase2f const &x);

1014 8 pop_back 0 4 1464 38 PointerToArray< LVecBase2f >::pop_back 0 1 254 0
59
inline void ::PointerToArray< LVecBase2f >::pop_back(void);

1015 11 get_element 0 4 1464 41 PointerToArray< LVecBase2f >::get_element 0 1 255 0
91
inline LVecBase2f const &::PointerToArray< LVecBase2f >::get_element(unsigned int n) const;

1016 11 set_element 0 4 1464 41 PointerToArray< LVecBase2f >::set_element 0 1 256 0
97
inline void ::PointerToArray< LVecBase2f >::set_element(unsigned int n, LVecBase2f const &value);

1017 11 __getitem__ 0 4 1464 41 PointerToArray< LVecBase2f >::__getitem__ 0 1 257 0
91
inline LVecBase2f const &::PointerToArray< LVecBase2f >::__getitem__(unsigned int n) const;

1018 11 __setitem__ 0 4 1464 41 PointerToArray< LVecBase2f >::__setitem__ 0 1 258 0
97
inline void ::PointerToArray< LVecBase2f >::__setitem__(unsigned int n, LVecBase2f const &value);

1019 8 get_data 0 4 1464 38 PointerToArray< LVecBase2f >::get_data 0 1 259 0
81
inline basic_string< char > ::PointerToArray< LVecBase2f >::get_data(void) const;

1020 8 set_data 0 4 1464 38 PointerToArray< LVecBase2f >::set_data 0 1 260 0
87
inline void ::PointerToArray< LVecBase2f >::set_data(basic_string< char > const &data);

1021 11 get_subdata 0 4 1464 41 PointerToArray< LVecBase2f >::get_subdata 0 1 261 0
114
inline basic_string< char > ::PointerToArray< LVecBase2f >::get_subdata(unsigned int n, unsigned int count) const;

1022 11 set_subdata 0 4 1464 41 PointerToArray< LVecBase2f >::set_subdata 0 1 262 0
126
inline void ::PointerToArray< LVecBase2f >::set_subdata(unsigned int n, unsigned int count, basic_string< char > const &data);

1023 13 get_ref_count 0 4 1464 43 PointerToArray< LVecBase2f >::get_ref_count 0 1 263 0
69
inline int ::PointerToArray< LVecBase2f >::get_ref_count(void) const;

1024 18 get_node_ref_count 0 4 1464 48 PointerToArray< LVecBase2f >::get_node_ref_count 0 1 264 0
74
inline int ::PointerToArray< LVecBase2f >::get_node_ref_count(void) const;

1025 13 __getbuffer__ 0 4 1464 43 PointerToArray< LVecBase2f >::__getbuffer__ 0 1 265 0
94
int ::PointerToArray< LVecBase2f >::__getbuffer__(PyObject *self, Py_buffer *view, int flags);

1026 17 __releasebuffer__ 0 4 1464 47 PointerToArray< LVecBase2f >::__releasebuffer__ 0 1 266 0
94
void ::PointerToArray< LVecBase2f >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

1027 15 ~PointerToArray 0 4 1464 45 PointerToArray< LVecBase2f >::~PointerToArray 0 0 0
54
::PointerToArray< LVecBase2f >::~PointerToArray(void);

1028 14 PointerToArray 0 4 1465 44 PointerToArray< LVecBase2i >::PointerToArray 0 4 267 268 269 270 0
305
inline ::PointerToArray< LVecBase2i >::PointerToArray(TypeHandle type_handle = ((_get_type_handle((LVecBase2i const *)(0)))));
inline ::PointerToArray< LVecBase2i >::PointerToArray(PointerToArray< LVecBase2i > const &copy);
::PointerToArray< LVecBase2i >::PointerToArray(PyObject *self, PyObject *source);

1029 11 empty_array 0 4 1465 41 PointerToArray< LVecBase2i >::empty_array 0 2 271 272 0
175
static inline PointerToArray< LVecBase2i > ::PointerToArray< LVecBase2i >::empty_array(unsigned int n, TypeHandle type_handle = ((_get_type_handle((LVecBase2i const *)(0)))));

1030 4 size 0 4 1465 34 PointerToArray< LVecBase2i >::size 0 1 273 0
69
inline unsigned int ::PointerToArray< LVecBase2i >::size(void) const;

1031 9 push_back 0 4 1465 39 PointerToArray< LVecBase2i >::push_back 0 1 274 0
75
inline void ::PointerToArray< LVecBase2i >::push_back(LVecBase2i const &x);

1032 8 pop_back 0 4 1465 38 PointerToArray< LVecBase2i >::pop_back 0 1 275 0
59
inline void ::PointerToArray< LVecBase2i >::pop_back(void);

1033 11 get_element 0 4 1465 41 PointerToArray< LVecBase2i >::get_element 0 1 276 0
91
inline LVecBase2i const &::PointerToArray< LVecBase2i >::get_element(unsigned int n) const;

1034 11 set_element 0 4 1465 41 PointerToArray< LVecBase2i >::set_element 0 1 277 0
97
inline void ::PointerToArray< LVecBase2i >::set_element(unsigned int n, LVecBase2i const &value);

1035 11 __getitem__ 0 4 1465 41 PointerToArray< LVecBase2i >::__getitem__ 0 1 278 0
91
inline LVecBase2i const &::PointerToArray< LVecBase2i >::__getitem__(unsigned int n) const;

1036 11 __setitem__ 0 4 1465 41 PointerToArray< LVecBase2i >::__setitem__ 0 1 279 0
97
inline void ::PointerToArray< LVecBase2i >::__setitem__(unsigned int n, LVecBase2i const &value);

1037 8 get_data 0 4 1465 38 PointerToArray< LVecBase2i >::get_data 0 1 280 0
81
inline basic_string< char > ::PointerToArray< LVecBase2i >::get_data(void) const;

1038 8 set_data 0 4 1465 38 PointerToArray< LVecBase2i >::set_data 0 1 281 0
87
inline void ::PointerToArray< LVecBase2i >::set_data(basic_string< char > const &data);

1039 11 get_subdata 0 4 1465 41 PointerToArray< LVecBase2i >::get_subdata 0 1 282 0
114
inline basic_string< char > ::PointerToArray< LVecBase2i >::get_subdata(unsigned int n, unsigned int count) const;

1040 11 set_subdata 0 4 1465 41 PointerToArray< LVecBase2i >::set_subdata 0 1 283 0
126
inline void ::PointerToArray< LVecBase2i >::set_subdata(unsigned int n, unsigned int count, basic_string< char > const &data);

1041 13 get_ref_count 0 4 1465 43 PointerToArray< LVecBase2i >::get_ref_count 0 1 284 0
69
inline int ::PointerToArray< LVecBase2i >::get_ref_count(void) const;

1042 18 get_node_ref_count 0 4 1465 48 PointerToArray< LVecBase2i >::get_node_ref_count 0 1 285 0
74
inline int ::PointerToArray< LVecBase2i >::get_node_ref_count(void) const;

1043 13 __getbuffer__ 0 4 1465 43 PointerToArray< LVecBase2i >::__getbuffer__ 0 1 286 0
94
int ::PointerToArray< LVecBase2i >::__getbuffer__(PyObject *self, Py_buffer *view, int flags);

1044 17 __releasebuffer__ 0 4 1465 47 PointerToArray< LVecBase2i >::__releasebuffer__ 0 1 287 0
94
void ::PointerToArray< LVecBase2i >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

1045 15 ~PointerToArray 0 4 1465 45 PointerToArray< LVecBase2i >::~PointerToArray 0 0 0
54
::PointerToArray< LVecBase2i >::~PointerToArray(void);

1046 14 PointerToArray 0 4 1466 44 PointerToArray< LVecBase3d >::PointerToArray 0 4 288 289 290 291 0
305
inline ::PointerToArray< LVecBase3d >::PointerToArray(TypeHandle type_handle = ((_get_type_handle((LVecBase3d const *)(0)))));
inline ::PointerToArray< LVecBase3d >::PointerToArray(PointerToArray< LVecBase3d > const &copy);
::PointerToArray< LVecBase3d >::PointerToArray(PyObject *self, PyObject *source);

1047 11 empty_array 0 4 1466 41 PointerToArray< LVecBase3d >::empty_array 0 2 292 293 0
175
static inline PointerToArray< LVecBase3d > ::PointerToArray< LVecBase3d >::empty_array(unsigned int n, TypeHandle type_handle = ((_get_type_handle((LVecBase3d const *)(0)))));

1048 4 size 0 4 1466 34 PointerToArray< LVecBase3d >::size 0 1 294 0
69
inline unsigned int ::PointerToArray< LVecBase3d >::size(void) const;

1049 9 push_back 0 4 1466 39 PointerToArray< LVecBase3d >::push_back 0 1 295 0
75
inline void ::PointerToArray< LVecBase3d >::push_back(LVecBase3d const &x);

1050 8 pop_back 0 4 1466 38 PointerToArray< LVecBase3d >::pop_back 0 1 296 0
59
inline void ::PointerToArray< LVecBase3d >::pop_back(void);

1051 11 get_element 0 4 1466 41 PointerToArray< LVecBase3d >::get_element 0 1 297 0
91
inline LVecBase3d const &::PointerToArray< LVecBase3d >::get_element(unsigned int n) const;

1052 11 set_element 0 4 1466 41 PointerToArray< LVecBase3d >::set_element 0 1 298 0
97
inline void ::PointerToArray< LVecBase3d >::set_element(unsigned int n, LVecBase3d const &value);

1053 11 __getitem__ 0 4 1466 41 PointerToArray< LVecBase3d >::__getitem__ 0 1 299 0
91
inline LVecBase3d const &::PointerToArray< LVecBase3d >::__getitem__(unsigned int n) const;

1054 11 __setitem__ 0 4 1466 41 PointerToArray< LVecBase3d >::__setitem__ 0 1 300 0
97
inline void ::PointerToArray< LVecBase3d >::__setitem__(unsigned int n, LVecBase3d const &value);

1055 8 get_data 0 4 1466 38 PointerToArray< LVecBase3d >::get_data 0 1 301 0
81
inline basic_string< char > ::PointerToArray< LVecBase3d >::get_data(void) const;

1056 8 set_data 0 4 1466 38 PointerToArray< LVecBase3d >::set_data 0 1 302 0
87
inline void ::PointerToArray< LVecBase3d >::set_data(basic_string< char > const &data);

1057 11 get_subdata 0 4 1466 41 PointerToArray< LVecBase3d >::get_subdata 0 1 303 0
114
inline basic_string< char > ::PointerToArray< LVecBase3d >::get_subdata(unsigned int n, unsigned int count) const;

1058 11 set_subdata 0 4 1466 41 PointerToArray< LVecBase3d >::set_subdata 0 1 304 0
126
inline void ::PointerToArray< LVecBase3d >::set_subdata(unsigned int n, unsigned int count, basic_string< char > const &data);

1059 13 get_ref_count 0 4 1466 43 PointerToArray< LVecBase3d >::get_ref_count 0 1 305 0
69
inline int ::PointerToArray< LVecBase3d >::get_ref_count(void) const;

1060 18 get_node_ref_count 0 4 1466 48 PointerToArray< LVecBase3d >::get_node_ref_count 0 1 306 0
74
inline int ::PointerToArray< LVecBase3d >::get_node_ref_count(void) const;

1061 13 __getbuffer__ 0 4 1466 43 PointerToArray< LVecBase3d >::__getbuffer__ 0 1 307 0
94
int ::PointerToArray< LVecBase3d >::__getbuffer__(PyObject *self, Py_buffer *view, int flags);

1062 17 __releasebuffer__ 0 4 1466 47 PointerToArray< LVecBase3d >::__releasebuffer__ 0 1 308 0
94
void ::PointerToArray< LVecBase3d >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

1063 15 ~PointerToArray 0 4 1466 45 PointerToArray< LVecBase3d >::~PointerToArray 0 0 0
54
::PointerToArray< LVecBase3d >::~PointerToArray(void);

1064 14 PointerToArray 0 4 1467 44 PointerToArray< LVecBase3f >::PointerToArray 0 4 309 310 311 312 0
305
inline ::PointerToArray< LVecBase3f >::PointerToArray(TypeHandle type_handle = ((_get_type_handle((LVecBase3f const *)(0)))));
inline ::PointerToArray< LVecBase3f >::PointerToArray(PointerToArray< LVecBase3f > const &copy);
::PointerToArray< LVecBase3f >::PointerToArray(PyObject *self, PyObject *source);

1065 11 empty_array 0 4 1467 41 PointerToArray< LVecBase3f >::empty_array 0 2 313 314 0
175
static inline PointerToArray< LVecBase3f > ::PointerToArray< LVecBase3f >::empty_array(unsigned int n, TypeHandle type_handle = ((_get_type_handle((LVecBase3f const *)(0)))));

1066 4 size 0 4 1467 34 PointerToArray< LVecBase3f >::size 0 1 315 0
69
inline unsigned int ::PointerToArray< LVecBase3f >::size(void) const;

1067 9 push_back 0 4 1467 39 PointerToArray< LVecBase3f >::push_back 0 1 316 0
75
inline void ::PointerToArray< LVecBase3f >::push_back(LVecBase3f const &x);

1068 8 pop_back 0 4 1467 38 PointerToArray< LVecBase3f >::pop_back 0 1 317 0
59
inline void ::PointerToArray< LVecBase3f >::pop_back(void);

1069 11 get_element 0 4 1467 41 PointerToArray< LVecBase3f >::get_element 0 1 318 0
91
inline LVecBase3f const &::PointerToArray< LVecBase3f >::get_element(unsigned int n) const;

1070 11 set_element 0 4 1467 41 PointerToArray< LVecBase3f >::set_element 0 1 319 0
97
inline void ::PointerToArray< LVecBase3f >::set_element(unsigned int n, LVecBase3f const &value);

1071 11 __getitem__ 0 4 1467 41 PointerToArray< LVecBase3f >::__getitem__ 0 1 320 0
91
inline LVecBase3f const &::PointerToArray< LVecBase3f >::__getitem__(unsigned int n) const;

1072 11 __setitem__ 0 4 1467 41 PointerToArray< LVecBase3f >::__setitem__ 0 1 321 0
97
inline void ::PointerToArray< LVecBase3f >::__setitem__(unsigned int n, LVecBase3f const &value);

1073 8 get_data 0 4 1467 38 PointerToArray< LVecBase3f >::get_data 0 1 322 0
81
inline basic_string< char > ::PointerToArray< LVecBase3f >::get_data(void) const;

1074 8 set_data 0 4 1467 38 PointerToArray< LVecBase3f >::set_data 0 1 323 0
87
inline void ::PointerToArray< LVecBase3f >::set_data(basic_string< char > const &data);

1075 11 get_subdata 0 4 1467 41 PointerToArray< LVecBase3f >::get_subdata 0 1 324 0
114
inline basic_string< char > ::PointerToArray< LVecBase3f >::get_subdata(unsigned int n, unsigned int count) const;

1076 11 set_subdata 0 4 1467 41 PointerToArray< LVecBase3f >::set_subdata 0 1 325 0
126
inline void ::PointerToArray< LVecBase3f >::set_subdata(unsigned int n, unsigned int count, basic_string< char > const &data);

1077 13 get_ref_count 0 4 1467 43 PointerToArray< LVecBase3f >::get_ref_count 0 1 326 0
69
inline int ::PointerToArray< LVecBase3f >::get_ref_count(void) const;

1078 18 get_node_ref_count 0 4 1467 48 PointerToArray< LVecBase3f >::get_node_ref_count 0 1 327 0
74
inline int ::PointerToArray< LVecBase3f >::get_node_ref_count(void) const;

1079 13 __getbuffer__ 0 4 1467 43 PointerToArray< LVecBase3f >::__getbuffer__ 0 1 328 0
94
int ::PointerToArray< LVecBase3f >::__getbuffer__(PyObject *self, Py_buffer *view, int flags);

1080 17 __releasebuffer__ 0 4 1467 47 PointerToArray< LVecBase3f >::__releasebuffer__ 0 1 329 0
94
void ::PointerToArray< LVecBase3f >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

1081 15 ~PointerToArray 0 4 1467 45 PointerToArray< LVecBase3f >::~PointerToArray 0 0 0
54
::PointerToArray< LVecBase3f >::~PointerToArray(void);

1082 14 PointerToArray 0 4 1468 44 PointerToArray< LVecBase3i >::PointerToArray 0 4 330 331 332 333 0
305
inline ::PointerToArray< LVecBase3i >::PointerToArray(TypeHandle type_handle = ((_get_type_handle((LVecBase3i const *)(0)))));
inline ::PointerToArray< LVecBase3i >::PointerToArray(PointerToArray< LVecBase3i > const &copy);
::PointerToArray< LVecBase3i >::PointerToArray(PyObject *self, PyObject *source);

1083 11 empty_array 0 4 1468 41 PointerToArray< LVecBase3i >::empty_array 0 2 334 335 0
175
static inline PointerToArray< LVecBase3i > ::PointerToArray< LVecBase3i >::empty_array(unsigned int n, TypeHandle type_handle = ((_get_type_handle((LVecBase3i const *)(0)))));

1084 4 size 0 4 1468 34 PointerToArray< LVecBase3i >::size 0 1 336 0
69
inline unsigned int ::PointerToArray< LVecBase3i >::size(void) const;

1085 9 push_back 0 4 1468 39 PointerToArray< LVecBase3i >::push_back 0 1 337 0
75
inline void ::PointerToArray< LVecBase3i >::push_back(LVecBase3i const &x);

1086 8 pop_back 0 4 1468 38 PointerToArray< LVecBase3i >::pop_back 0 1 338 0
59
inline void ::PointerToArray< LVecBase3i >::pop_back(void);

1087 11 get_element 0 4 1468 41 PointerToArray< LVecBase3i >::get_element 0 1 339 0
91
inline LVecBase3i const &::PointerToArray< LVecBase3i >::get_element(unsigned int n) const;

1088 11 set_element 0 4 1468 41 PointerToArray< LVecBase3i >::set_element 0 1 340 0
97
inline void ::PointerToArray< LVecBase3i >::set_element(unsigned int n, LVecBase3i const &value);

1089 11 __getitem__ 0 4 1468 41 PointerToArray< LVecBase3i >::__getitem__ 0 1 341 0
91
inline LVecBase3i const &::PointerToArray< LVecBase3i >::__getitem__(unsigned int n) const;

1090 11 __setitem__ 0 4 1468 41 PointerToArray< LVecBase3i >::__setitem__ 0 1 342 0
97
inline void ::PointerToArray< LVecBase3i >::__setitem__(unsigned int n, LVecBase3i const &value);

1091 8 get_data 0 4 1468 38 PointerToArray< LVecBase3i >::get_data 0 1 343 0
81
inline basic_string< char > ::PointerToArray< LVecBase3i >::get_data(void) const;

1092 8 set_data 0 4 1468 38 PointerToArray< LVecBase3i >::set_data 0 1 344 0
87
inline void ::PointerToArray< LVecBase3i >::set_data(basic_string< char > const &data);

1093 11 get_subdata 0 4 1468 41 PointerToArray< LVecBase3i >::get_subdata 0 1 345 0
114
inline basic_string< char > ::PointerToArray< LVecBase3i >::get_subdata(unsigned int n, unsigned int count) const;

1094 11 set_subdata 0 4 1468 41 PointerToArray< LVecBase3i >::set_subdata 0 1 346 0
126
inline void ::PointerToArray< LVecBase3i >::set_subdata(unsigned int n, unsigned int count, basic_string< char > const &data);

1095 13 get_ref_count 0 4 1468 43 PointerToArray< LVecBase3i >::get_ref_count 0 1 347 0
69
inline int ::PointerToArray< LVecBase3i >::get_ref_count(void) const;

1096 18 get_node_ref_count 0 4 1468 48 PointerToArray< LVecBase3i >::get_node_ref_count 0 1 348 0
74
inline int ::PointerToArray< LVecBase3i >::get_node_ref_count(void) const;

1097 13 __getbuffer__ 0 4 1468 43 PointerToArray< LVecBase3i >::__getbuffer__ 0 1 349 0
94
int ::PointerToArray< LVecBase3i >::__getbuffer__(PyObject *self, Py_buffer *view, int flags);

1098 17 __releasebuffer__ 0 4 1468 47 PointerToArray< LVecBase3i >::__releasebuffer__ 0 1 350 0
94
void ::PointerToArray< LVecBase3i >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

1099 15 ~PointerToArray 0 4 1468 45 PointerToArray< LVecBase3i >::~PointerToArray 0 0 0
54
::PointerToArray< LVecBase3i >::~PointerToArray(void);

1100 14 PointerToArray 0 4 1469 52 PointerToArray< UnalignedLMatrix4d >::PointerToArray 0 4 351 352 353 354 0
345
inline ::PointerToArray< UnalignedLMatrix4d >::PointerToArray(TypeHandle type_handle = ((_get_type_handle((UnalignedLMatrix4d const *)(0)))));
inline ::PointerToArray< UnalignedLMatrix4d >::PointerToArray(PointerToArray< UnalignedLMatrix4d > const &copy);
::PointerToArray< UnalignedLMatrix4d >::PointerToArray(PyObject *self, PyObject *source);

1101 11 empty_array 0 4 1469 49 PointerToArray< UnalignedLMatrix4d >::empty_array 0 2 355 356 0
199
static inline PointerToArray< UnalignedLMatrix4d > ::PointerToArray< UnalignedLMatrix4d >::empty_array(unsigned int n, TypeHandle type_handle = ((_get_type_handle((UnalignedLMatrix4d const *)(0)))));

1102 4 size 0 4 1469 42 PointerToArray< UnalignedLMatrix4d >::size 0 1 357 0
77
inline unsigned int ::PointerToArray< UnalignedLMatrix4d >::size(void) const;

1103 9 push_back 0 4 1469 47 PointerToArray< UnalignedLMatrix4d >::push_back 0 1 358 0
91
inline void ::PointerToArray< UnalignedLMatrix4d >::push_back(UnalignedLMatrix4d const &x);

1104 8 pop_back 0 4 1469 46 PointerToArray< UnalignedLMatrix4d >::pop_back 0 1 359 0
67
inline void ::PointerToArray< UnalignedLMatrix4d >::pop_back(void);

1105 11 get_element 0 4 1469 49 PointerToArray< UnalignedLMatrix4d >::get_element 0 1 360 0
107
inline UnalignedLMatrix4d const &::PointerToArray< UnalignedLMatrix4d >::get_element(unsigned int n) const;

1106 11 set_element 0 4 1469 49 PointerToArray< UnalignedLMatrix4d >::set_element 0 1 361 0
113
inline void ::PointerToArray< UnalignedLMatrix4d >::set_element(unsigned int n, UnalignedLMatrix4d const &value);

1107 11 __getitem__ 0 4 1469 49 PointerToArray< UnalignedLMatrix4d >::__getitem__ 0 1 362 0
107
inline UnalignedLMatrix4d const &::PointerToArray< UnalignedLMatrix4d >::__getitem__(unsigned int n) const;

1108 11 __setitem__ 0 4 1469 49 PointerToArray< UnalignedLMatrix4d >::__setitem__ 0 1 363 0
113
inline void ::PointerToArray< UnalignedLMatrix4d >::__setitem__(unsigned int n, UnalignedLMatrix4d const &value);

1109 8 get_data 0 4 1469 46 PointerToArray< UnalignedLMatrix4d >::get_data 0 1 364 0
89
inline basic_string< char > ::PointerToArray< UnalignedLMatrix4d >::get_data(void) const;

1110 8 set_data 0 4 1469 46 PointerToArray< UnalignedLMatrix4d >::set_data 0 1 365 0
95
inline void ::PointerToArray< UnalignedLMatrix4d >::set_data(basic_string< char > const &data);

1111 11 get_subdata 0 4 1469 49 PointerToArray< UnalignedLMatrix4d >::get_subdata 0 1 366 0
122
inline basic_string< char > ::PointerToArray< UnalignedLMatrix4d >::get_subdata(unsigned int n, unsigned int count) const;

1112 11 set_subdata 0 4 1469 49 PointerToArray< UnalignedLMatrix4d >::set_subdata 0 1 367 0
134
inline void ::PointerToArray< UnalignedLMatrix4d >::set_subdata(unsigned int n, unsigned int count, basic_string< char > const &data);

1113 13 get_ref_count 0 4 1469 51 PointerToArray< UnalignedLMatrix4d >::get_ref_count 0 1 368 0
77
inline int ::PointerToArray< UnalignedLMatrix4d >::get_ref_count(void) const;

1114 18 get_node_ref_count 0 4 1469 56 PointerToArray< UnalignedLMatrix4d >::get_node_ref_count 0 1 369 0
82
inline int ::PointerToArray< UnalignedLMatrix4d >::get_node_ref_count(void) const;

1115 13 __getbuffer__ 0 4 1469 51 PointerToArray< UnalignedLMatrix4d >::__getbuffer__ 0 1 370 0
102
int ::PointerToArray< UnalignedLMatrix4d >::__getbuffer__(PyObject *self, Py_buffer *view, int flags);

1116 17 __releasebuffer__ 0 4 1469 55 PointerToArray< UnalignedLMatrix4d >::__releasebuffer__ 0 1 371 0
102
void ::PointerToArray< UnalignedLMatrix4d >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

1117 15 ~PointerToArray 0 4 1469 53 PointerToArray< UnalignedLMatrix4d >::~PointerToArray 0 0 0
62
::PointerToArray< UnalignedLMatrix4d >::~PointerToArray(void);

1118 14 PointerToArray 0 4 1470 52 PointerToArray< UnalignedLMatrix4f >::PointerToArray 0 4 372 373 374 375 0
345
inline ::PointerToArray< UnalignedLMatrix4f >::PointerToArray(TypeHandle type_handle = ((_get_type_handle((UnalignedLMatrix4f const *)(0)))));
inline ::PointerToArray< UnalignedLMatrix4f >::PointerToArray(PointerToArray< UnalignedLMatrix4f > const &copy);
::PointerToArray< UnalignedLMatrix4f >::PointerToArray(PyObject *self, PyObject *source);

1119 11 empty_array 0 4 1470 49 PointerToArray< UnalignedLMatrix4f >::empty_array 0 2 376 377 0
199
static inline PointerToArray< UnalignedLMatrix4f > ::PointerToArray< UnalignedLMatrix4f >::empty_array(unsigned int n, TypeHandle type_handle = ((_get_type_handle((UnalignedLMatrix4f const *)(0)))));

1120 4 size 0 4 1470 42 PointerToArray< UnalignedLMatrix4f >::size 0 1 378 0
77
inline unsigned int ::PointerToArray< UnalignedLMatrix4f >::size(void) const;

1121 9 push_back 0 4 1470 47 PointerToArray< UnalignedLMatrix4f >::push_back 0 1 379 0
91
inline void ::PointerToArray< UnalignedLMatrix4f >::push_back(UnalignedLMatrix4f const &x);

1122 8 pop_back 0 4 1470 46 PointerToArray< UnalignedLMatrix4f >::pop_back 0 1 380 0
67
inline void ::PointerToArray< UnalignedLMatrix4f >::pop_back(void);

1123 11 get_element 0 4 1470 49 PointerToArray< UnalignedLMatrix4f >::get_element 0 1 381 0
107
inline UnalignedLMatrix4f const &::PointerToArray< UnalignedLMatrix4f >::get_element(unsigned int n) const;

1124 11 set_element 0 4 1470 49 PointerToArray< UnalignedLMatrix4f >::set_element 0 1 382 0
113
inline void ::PointerToArray< UnalignedLMatrix4f >::set_element(unsigned int n, UnalignedLMatrix4f const &value);

1125 11 __getitem__ 0 4 1470 49 PointerToArray< UnalignedLMatrix4f >::__getitem__ 0 1 383 0
107
inline UnalignedLMatrix4f const &::PointerToArray< UnalignedLMatrix4f >::__getitem__(unsigned int n) const;

1126 11 __setitem__ 0 4 1470 49 PointerToArray< UnalignedLMatrix4f >::__setitem__ 0 1 384 0
113
inline void ::PointerToArray< UnalignedLMatrix4f >::__setitem__(unsigned int n, UnalignedLMatrix4f const &value);

1127 8 get_data 0 4 1470 46 PointerToArray< UnalignedLMatrix4f >::get_data 0 1 385 0
89
inline basic_string< char > ::PointerToArray< UnalignedLMatrix4f >::get_data(void) const;

1128 8 set_data 0 4 1470 46 PointerToArray< UnalignedLMatrix4f >::set_data 0 1 386 0
95
inline void ::PointerToArray< UnalignedLMatrix4f >::set_data(basic_string< char > const &data);

1129 11 get_subdata 0 4 1470 49 PointerToArray< UnalignedLMatrix4f >::get_subdata 0 1 387 0
122
inline basic_string< char > ::PointerToArray< UnalignedLMatrix4f >::get_subdata(unsigned int n, unsigned int count) const;

1130 11 set_subdata 0 4 1470 49 PointerToArray< UnalignedLMatrix4f >::set_subdata 0 1 388 0
134
inline void ::PointerToArray< UnalignedLMatrix4f >::set_subdata(unsigned int n, unsigned int count, basic_string< char > const &data);

1131 13 get_ref_count 0 4 1470 51 PointerToArray< UnalignedLMatrix4f >::get_ref_count 0 1 389 0
77
inline int ::PointerToArray< UnalignedLMatrix4f >::get_ref_count(void) const;

1132 18 get_node_ref_count 0 4 1470 56 PointerToArray< UnalignedLMatrix4f >::get_node_ref_count 0 1 390 0
82
inline int ::PointerToArray< UnalignedLMatrix4f >::get_node_ref_count(void) const;

1133 13 __getbuffer__ 0 4 1470 51 PointerToArray< UnalignedLMatrix4f >::__getbuffer__ 0 1 391 0
102
int ::PointerToArray< UnalignedLMatrix4f >::__getbuffer__(PyObject *self, Py_buffer *view, int flags);

1134 17 __releasebuffer__ 0 4 1470 55 PointerToArray< UnalignedLMatrix4f >::__releasebuffer__ 0 1 392 0
102
void ::PointerToArray< UnalignedLMatrix4f >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

1135 15 ~PointerToArray 0 4 1470 53 PointerToArray< UnalignedLMatrix4f >::~PointerToArray 0 0 0
62
::PointerToArray< UnalignedLMatrix4f >::~PointerToArray(void);

1136 14 PointerToArray 0 4 1471 53 PointerToArray< UnalignedLVecBase4d >::PointerToArray 0 4 393 394 395 396 0
350
inline ::PointerToArray< UnalignedLVecBase4d >::PointerToArray(TypeHandle type_handle = ((_get_type_handle((UnalignedLVecBase4d const *)(0)))));
inline ::PointerToArray< UnalignedLVecBase4d >::PointerToArray(PointerToArray< UnalignedLVecBase4d > const &copy);
::PointerToArray< UnalignedLVecBase4d >::PointerToArray(PyObject *self, PyObject *source);

1137 11 empty_array 0 4 1471 50 PointerToArray< UnalignedLVecBase4d >::empty_array 0 2 397 398 0
202
static inline PointerToArray< UnalignedLVecBase4d > ::PointerToArray< UnalignedLVecBase4d >::empty_array(unsigned int n, TypeHandle type_handle = ((_get_type_handle((UnalignedLVecBase4d const *)(0)))));

1138 4 size 0 4 1471 43 PointerToArray< UnalignedLVecBase4d >::size 0 1 399 0
78
inline unsigned int ::PointerToArray< UnalignedLVecBase4d >::size(void) const;

1139 9 push_back 0 4 1471 48 PointerToArray< UnalignedLVecBase4d >::push_back 0 1 400 0
93
inline void ::PointerToArray< UnalignedLVecBase4d >::push_back(UnalignedLVecBase4d const &x);

1140 8 pop_back 0 4 1471 47 PointerToArray< UnalignedLVecBase4d >::pop_back 0 1 401 0
68
inline void ::PointerToArray< UnalignedLVecBase4d >::pop_back(void);

1141 11 get_element 0 4 1471 50 PointerToArray< UnalignedLVecBase4d >::get_element 0 1 402 0
109
inline UnalignedLVecBase4d const &::PointerToArray< UnalignedLVecBase4d >::get_element(unsigned int n) const;

1142 11 set_element 0 4 1471 50 PointerToArray< UnalignedLVecBase4d >::set_element 0 1 403 0
115
inline void ::PointerToArray< UnalignedLVecBase4d >::set_element(unsigned int n, UnalignedLVecBase4d const &value);

1143 11 __getitem__ 0 4 1471 50 PointerToArray< UnalignedLVecBase4d >::__getitem__ 0 1 404 0
109
inline UnalignedLVecBase4d const &::PointerToArray< UnalignedLVecBase4d >::__getitem__(unsigned int n) const;

1144 11 __setitem__ 0 4 1471 50 PointerToArray< UnalignedLVecBase4d >::__setitem__ 0 1 405 0
115
inline void ::PointerToArray< UnalignedLVecBase4d >::__setitem__(unsigned int n, UnalignedLVecBase4d const &value);

1145 8 get_data 0 4 1471 47 PointerToArray< UnalignedLVecBase4d >::get_data 0 1 406 0
90
inline basic_string< char > ::PointerToArray< UnalignedLVecBase4d >::get_data(void) const;

1146 8 set_data 0 4 1471 47 PointerToArray< UnalignedLVecBase4d >::set_data 0 1 407 0
96
inline void ::PointerToArray< UnalignedLVecBase4d >::set_data(basic_string< char > const &data);

1147 11 get_subdata 0 4 1471 50 PointerToArray< UnalignedLVecBase4d >::get_subdata 0 1 408 0
123
inline basic_string< char > ::PointerToArray< UnalignedLVecBase4d >::get_subdata(unsigned int n, unsigned int count) const;

1148 11 set_subdata 0 4 1471 50 PointerToArray< UnalignedLVecBase4d >::set_subdata 0 1 409 0
135
inline void ::PointerToArray< UnalignedLVecBase4d >::set_subdata(unsigned int n, unsigned int count, basic_string< char > const &data);

1149 13 get_ref_count 0 4 1471 52 PointerToArray< UnalignedLVecBase4d >::get_ref_count 0 1 410 0
78
inline int ::PointerToArray< UnalignedLVecBase4d >::get_ref_count(void) const;

1150 18 get_node_ref_count 0 4 1471 57 PointerToArray< UnalignedLVecBase4d >::get_node_ref_count 0 1 411 0
83
inline int ::PointerToArray< UnalignedLVecBase4d >::get_node_ref_count(void) const;

1151 13 __getbuffer__ 0 4 1471 52 PointerToArray< UnalignedLVecBase4d >::__getbuffer__ 0 1 412 0
103
int ::PointerToArray< UnalignedLVecBase4d >::__getbuffer__(PyObject *self, Py_buffer *view, int flags);

1152 17 __releasebuffer__ 0 4 1471 56 PointerToArray< UnalignedLVecBase4d >::__releasebuffer__ 0 1 413 0
103
void ::PointerToArray< UnalignedLVecBase4d >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

1153 15 ~PointerToArray 0 4 1471 54 PointerToArray< UnalignedLVecBase4d >::~PointerToArray 0 0 0
63
::PointerToArray< UnalignedLVecBase4d >::~PointerToArray(void);

1154 14 PointerToArray 0 4 1472 53 PointerToArray< UnalignedLVecBase4f >::PointerToArray 0 4 414 415 416 417 0
350
inline ::PointerToArray< UnalignedLVecBase4f >::PointerToArray(TypeHandle type_handle = ((_get_type_handle((UnalignedLVecBase4f const *)(0)))));
inline ::PointerToArray< UnalignedLVecBase4f >::PointerToArray(PointerToArray< UnalignedLVecBase4f > const &copy);
::PointerToArray< UnalignedLVecBase4f >::PointerToArray(PyObject *self, PyObject *source);

1155 11 empty_array 0 4 1472 50 PointerToArray< UnalignedLVecBase4f >::empty_array 0 2 418 419 0
202
static inline PointerToArray< UnalignedLVecBase4f > ::PointerToArray< UnalignedLVecBase4f >::empty_array(unsigned int n, TypeHandle type_handle = ((_get_type_handle((UnalignedLVecBase4f const *)(0)))));

1156 4 size 0 4 1472 43 PointerToArray< UnalignedLVecBase4f >::size 0 1 420 0
78
inline unsigned int ::PointerToArray< UnalignedLVecBase4f >::size(void) const;

1157 9 push_back 0 4 1472 48 PointerToArray< UnalignedLVecBase4f >::push_back 0 1 421 0
93
inline void ::PointerToArray< UnalignedLVecBase4f >::push_back(UnalignedLVecBase4f const &x);

1158 8 pop_back 0 4 1472 47 PointerToArray< UnalignedLVecBase4f >::pop_back 0 1 422 0
68
inline void ::PointerToArray< UnalignedLVecBase4f >::pop_back(void);

1159 11 get_element 0 4 1472 50 PointerToArray< UnalignedLVecBase4f >::get_element 0 1 423 0
109
inline UnalignedLVecBase4f const &::PointerToArray< UnalignedLVecBase4f >::get_element(unsigned int n) const;

1160 11 set_element 0 4 1472 50 PointerToArray< UnalignedLVecBase4f >::set_element 0 1 424 0
115
inline void ::PointerToArray< UnalignedLVecBase4f >::set_element(unsigned int n, UnalignedLVecBase4f const &value);

1161 11 __getitem__ 0 4 1472 50 PointerToArray< UnalignedLVecBase4f >::__getitem__ 0 1 425 0
109
inline UnalignedLVecBase4f const &::PointerToArray< UnalignedLVecBase4f >::__getitem__(unsigned int n) const;

1162 11 __setitem__ 0 4 1472 50 PointerToArray< UnalignedLVecBase4f >::__setitem__ 0 1 426 0
115
inline void ::PointerToArray< UnalignedLVecBase4f >::__setitem__(unsigned int n, UnalignedLVecBase4f const &value);

1163 8 get_data 0 4 1472 47 PointerToArray< UnalignedLVecBase4f >::get_data 0 1 427 0
90
inline basic_string< char > ::PointerToArray< UnalignedLVecBase4f >::get_data(void) const;

1164 8 set_data 0 4 1472 47 PointerToArray< UnalignedLVecBase4f >::set_data 0 1 428 0
96
inline void ::PointerToArray< UnalignedLVecBase4f >::set_data(basic_string< char > const &data);

1165 11 get_subdata 0 4 1472 50 PointerToArray< UnalignedLVecBase4f >::get_subdata 0 1 429 0
123
inline basic_string< char > ::PointerToArray< UnalignedLVecBase4f >::get_subdata(unsigned int n, unsigned int count) const;

1166 11 set_subdata 0 4 1472 50 PointerToArray< UnalignedLVecBase4f >::set_subdata 0 1 430 0
135
inline void ::PointerToArray< UnalignedLVecBase4f >::set_subdata(unsigned int n, unsigned int count, basic_string< char > const &data);

1167 13 get_ref_count 0 4 1472 52 PointerToArray< UnalignedLVecBase4f >::get_ref_count 0 1 431 0
78
inline int ::PointerToArray< UnalignedLVecBase4f >::get_ref_count(void) const;

1168 18 get_node_ref_count 0 4 1472 57 PointerToArray< UnalignedLVecBase4f >::get_node_ref_count 0 1 432 0
83
inline int ::PointerToArray< UnalignedLVecBase4f >::get_node_ref_count(void) const;

1169 13 __getbuffer__ 0 4 1472 52 PointerToArray< UnalignedLVecBase4f >::__getbuffer__ 0 1 433 0
103
int ::PointerToArray< UnalignedLVecBase4f >::__getbuffer__(PyObject *self, Py_buffer *view, int flags);

1170 17 __releasebuffer__ 0 4 1472 56 PointerToArray< UnalignedLVecBase4f >::__releasebuffer__ 0 1 434 0
103
void ::PointerToArray< UnalignedLVecBase4f >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

1171 15 ~PointerToArray 0 4 1472 54 PointerToArray< UnalignedLVecBase4f >::~PointerToArray 0 0 0
63
::PointerToArray< UnalignedLVecBase4f >::~PointerToArray(void);

1172 14 PointerToArray 0 4 1473 53 PointerToArray< UnalignedLVecBase4i >::PointerToArray 0 4 435 436 437 438 0
350
inline ::PointerToArray< UnalignedLVecBase4i >::PointerToArray(TypeHandle type_handle = ((_get_type_handle((UnalignedLVecBase4i const *)(0)))));
inline ::PointerToArray< UnalignedLVecBase4i >::PointerToArray(PointerToArray< UnalignedLVecBase4i > const &copy);
::PointerToArray< UnalignedLVecBase4i >::PointerToArray(PyObject *self, PyObject *source);

1173 11 empty_array 0 4 1473 50 PointerToArray< UnalignedLVecBase4i >::empty_array 0 2 439 440 0
202
static inline PointerToArray< UnalignedLVecBase4i > ::PointerToArray< UnalignedLVecBase4i >::empty_array(unsigned int n, TypeHandle type_handle = ((_get_type_handle((UnalignedLVecBase4i const *)(0)))));

1174 4 size 0 4 1473 43 PointerToArray< UnalignedLVecBase4i >::size 0 1 441 0
78
inline unsigned int ::PointerToArray< UnalignedLVecBase4i >::size(void) const;

1175 9 push_back 0 4 1473 48 PointerToArray< UnalignedLVecBase4i >::push_back 0 1 442 0
93
inline void ::PointerToArray< UnalignedLVecBase4i >::push_back(UnalignedLVecBase4i const &x);

1176 8 pop_back 0 4 1473 47 PointerToArray< UnalignedLVecBase4i >::pop_back 0 1 443 0
68
inline void ::PointerToArray< UnalignedLVecBase4i >::pop_back(void);

1177 11 get_element 0 4 1473 50 PointerToArray< UnalignedLVecBase4i >::get_element 0 1 444 0
109
inline UnalignedLVecBase4i const &::PointerToArray< UnalignedLVecBase4i >::get_element(unsigned int n) const;

1178 11 set_element 0 4 1473 50 PointerToArray< UnalignedLVecBase4i >::set_element 0 1 445 0
115
inline void ::PointerToArray< UnalignedLVecBase4i >::set_element(unsigned int n, UnalignedLVecBase4i const &value);

1179 11 __getitem__ 0 4 1473 50 PointerToArray< UnalignedLVecBase4i >::__getitem__ 0 1 446 0
109
inline UnalignedLVecBase4i const &::PointerToArray< UnalignedLVecBase4i >::__getitem__(unsigned int n) const;

1180 11 __setitem__ 0 4 1473 50 PointerToArray< UnalignedLVecBase4i >::__setitem__ 0 1 447 0
115
inline void ::PointerToArray< UnalignedLVecBase4i >::__setitem__(unsigned int n, UnalignedLVecBase4i const &value);

1181 8 get_data 0 4 1473 47 PointerToArray< UnalignedLVecBase4i >::get_data 0 1 448 0
90
inline basic_string< char > ::PointerToArray< UnalignedLVecBase4i >::get_data(void) const;

1182 8 set_data 0 4 1473 47 PointerToArray< UnalignedLVecBase4i >::set_data 0 1 449 0
96
inline void ::PointerToArray< UnalignedLVecBase4i >::set_data(basic_string< char > const &data);

1183 11 get_subdata 0 4 1473 50 PointerToArray< UnalignedLVecBase4i >::get_subdata 0 1 450 0
123
inline basic_string< char > ::PointerToArray< UnalignedLVecBase4i >::get_subdata(unsigned int n, unsigned int count) const;

1184 11 set_subdata 0 4 1473 50 PointerToArray< UnalignedLVecBase4i >::set_subdata 0 1 451 0
135
inline void ::PointerToArray< UnalignedLVecBase4i >::set_subdata(unsigned int n, unsigned int count, basic_string< char > const &data);

1185 13 get_ref_count 0 4 1473 52 PointerToArray< UnalignedLVecBase4i >::get_ref_count 0 1 452 0
78
inline int ::PointerToArray< UnalignedLVecBase4i >::get_ref_count(void) const;

1186 18 get_node_ref_count 0 4 1473 57 PointerToArray< UnalignedLVecBase4i >::get_node_ref_count 0 1 453 0
83
inline int ::PointerToArray< UnalignedLVecBase4i >::get_node_ref_count(void) const;

1187 13 __getbuffer__ 0 4 1473 52 PointerToArray< UnalignedLVecBase4i >::__getbuffer__ 0 1 454 0
103
int ::PointerToArray< UnalignedLVecBase4i >::__getbuffer__(PyObject *self, Py_buffer *view, int flags);

1188 17 __releasebuffer__ 0 4 1473 56 PointerToArray< UnalignedLVecBase4i >::__releasebuffer__ 0 1 455 0
103
void ::PointerToArray< UnalignedLVecBase4i >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

1189 15 ~PointerToArray 0 4 1473 54 PointerToArray< UnalignedLVecBase4i >::~PointerToArray 0 0 0
63
::PointerToArray< UnalignedLVecBase4i >::~PointerToArray(void);

1190 9 make_copy 0 6 1474 25 BoundingVolume::make_copy 0 1 456 0
66
virtual BoundingVolume *BoundingVolume::make_copy(void) const = 0;

1191 8 is_empty 0 4 1474 24 BoundingVolume::is_empty 0 1 457 525
////////////////////////////////////////////////////////////////////
//     Function: BoundingVolume::is_empty
//       Access: Published
//  Description: Any kind of volume might be empty.  This is a
//               degenerate volume that contains no points; it's not
//               the same as, for instance, a sphere with radius zero,
//               since that contains one point (the center).  It
//               intersects with no other volumes.
////////////////////////////////////////////////////////////////////
49
inline bool BoundingVolume::is_empty(void) const;

1192 11 is_infinite 0 4 1474 27 BoundingVolume::is_infinite 0 1 458 905
////////////////////////////////////////////////////////////////////
//     Function: BoundingVolume::is_infinite
//       Access: Published
//  Description: The other side of the empty coin is an infinite
//               volume.  This is a degenerate state of a normally
//               finite volume that contains all points.  (Note that
//               some kinds of infinite bounding volumes, like binary
//               separating planes, do not contain all points and thus
//               correctly return is_infinite() == false, even though
//               they are technically infinite.  This is a special
//               case of the word 'infinite' meaning the volume covers
//               all points in space.)
//
//               It completely intersects with all other volumes
//               except empty volumes.
////////////////////////////////////////////////////////////////////
52
inline bool BoundingVolume::is_infinite(void) const;

1193 12 set_infinite 0 4 1474 28 BoundingVolume::set_infinite 0 1 459 383
////////////////////////////////////////////////////////////////////
//     Function: BoundingVolume::set_infinite
//       Access: Published
//  Description: Marks the volume as infinite, even if it is normally
//               finite.  You can think of this as an infinite
//               extend_by() operation.
////////////////////////////////////////////////////////////////////
47
inline void BoundingVolume::set_infinite(void);

1194 9 extend_by 0 4 1474 25 BoundingVolume::extend_by 0 1 460 303
////////////////////////////////////////////////////////////////////
//     Function: BoundingVolume::extend_by
//       Access: Published
//  Description: Increases the size of the volume to include the given
//               volume.
////////////////////////////////////////////////////////////////////
65
inline bool BoundingVolume::extend_by(BoundingVolume const *vol);

1195 6 around 0 4 1474 22 BoundingVolume::around 0 0 573
// It might be nice to make these template member functions so we
// could have true STL-style first/last iterators, but that's
// impossible for virtual functions.

////////////////////////////////////////////////////////////////////
//     Function: BoundingVolume::around
//       Access: Published
//  Description: Resets the volume to enclose only the volumes
//               indicated.  Returns true if successful, false if the
//               volume doesn't know how to do that or can't do that.
////////////////////////////////////////////////////////////////////
87
bool BoundingVolume::around(BoundingVolume const **first, BoundingVolume const **last);

1196 8 contains 0 4 1474 24 BoundingVolume::contains 0 1 461 372
////////////////////////////////////////////////////////////////////
//     Function: BoundingVolume::contains
//       Access: Published
//  Description: Returns the appropriate set of IntersectionFlags to
//               indicate the amount of intersection with the
//               indicated volume.
////////////////////////////////////////////////////////////////////
69
inline int BoundingVolume::contains(BoundingVolume const *vol) const;

1197 6 output 0 6 1474 22 BoundingVolume::output 0 1 462 0
60
virtual void BoundingVolume::output(ostream &out) const = 0;

1198 5 write 0 6 1474 21 BoundingVolume::write 0 2 463 464 220
////////////////////////////////////////////////////////////////////
//     Function: BoundingVolume::write
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
79
virtual void BoundingVolume::write(ostream &out, int indent_level = (0)) const;

1199 14 get_class_type 0 4 1474 30 BoundingVolume::get_class_type 0 1 465 0
55
static TypeHandle BoundingVolume::get_class_type(void);

1200 15 ~BoundingVolume 0 4 1474 31 BoundingVolume::~BoundingVolume 0 0 0
38
BoundingVolume::~BoundingVolume(void);

1201 9 extend_by 0 4 1478 34 GeometricBoundingVolume::extend_by 0 2 466 467 619
////////////////////////////////////////////////////////////////////
//     Function: GeometricBoundingVolume::extend_by
//       Access: Public
//  Description: Increases the size of the volume to include the given
//               volume.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GeometricBoundingVolume::extend_by
//       Access: Public
//  Description: Increases the size of the volume to include the given
//               point.
////////////////////////////////////////////////////////////////////
154
inline bool GeometricBoundingVolume::extend_by(GeometricBoundingVolume const *vol);
inline bool GeometricBoundingVolume::extend_by(LPoint3f const &point);

1202 6 around 0 4 1478 31 GeometricBoundingVolume::around 0 1 468 769
// It might be nice to make these template member functions so we
// could have true STL-style first/last iterators, but that's
// impossible for virtual functions.

////////////////////////////////////////////////////////////////////
//     Function: GeometricBoundingVolume::around
//       Access: Public
//  Description: Resets the volume to enclose only the volumes
//               indicated.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GeometricBoundingVolume::around
//       Access: Public
//  Description: Resets the volume to enclose only the points
//               indicated.
////////////////////////////////////////////////////////////////////
211
inline bool GeometricBoundingVolume::around(GeometricBoundingVolume const **first, GeometricBoundingVolume const **last);
inline bool GeometricBoundingVolume::around(LPoint3f const *first, LPoint3f const *last);

1203 8 contains 0 4 1478 33 GeometricBoundingVolume::contains 0 3 469 470 471 1143
////////////////////////////////////////////////////////////////////
//     Function: GeometricBoundingVolume::contains
//       Access: Public
//  Description: Returns the appropriate set of IntersectionFlags to
//               indicate the amount of intersection with the
//               indicated volume.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GeometricBoundingVolume::contains
//       Access: Public
//  Description: Returns the appropriate set of IntersectionFlags to
//               indicate the amount of intersection with the
//               indicated point.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GeometricBoundingVolume::contains
//       Access: Public
//  Description: Returns the appropriate set of IntersectionFlags to
//               indicate the amount of intersection with the
//               indicated line segment.
////////////////////////////////////////////////////////////////////
252
inline int GeometricBoundingVolume::contains(GeometricBoundingVolume const *vol) const;
inline int GeometricBoundingVolume::contains(LPoint3f const &point) const;
inline int GeometricBoundingVolume::contains(LPoint3f const &a, LPoint3f const &b) const;

1204 17 get_approx_center 0 6 1478 42 GeometricBoundingVolume::get_approx_center 0 1 472 0
76
virtual LPoint3f GeometricBoundingVolume::get_approx_center(void) const = 0;

1205 5 xform 0 6 1478 30 GeometricBoundingVolume::xform 0 1 473 0
70
virtual void GeometricBoundingVolume::xform(LMatrix4f const &mat) = 0;

1206 14 get_class_type 0 4 1478 39 GeometricBoundingVolume::get_class_type 0 1 474 0
64
static TypeHandle GeometricBoundingVolume::get_class_type(void);

1207 24 ~GeometricBoundingVolume 0 4 1478 49 GeometricBoundingVolume::~GeometricBoundingVolume 0 0 0
56
GeometricBoundingVolume::~GeometricBoundingVolume(void);

1208 7 get_min 0 6 1479 29 FiniteBoundingVolume::get_min 0 1 475 0
63
virtual LPoint3f FiniteBoundingVolume::get_min(void) const = 0;

1209 7 get_max 0 6 1479 29 FiniteBoundingVolume::get_max 0 1 476 0
63
virtual LPoint3f FiniteBoundingVolume::get_max(void) const = 0;

1210 10 get_volume 0 6 1479 32 FiniteBoundingVolume::get_volume 0 1 477 238
////////////////////////////////////////////////////////////////////
//     Function: FiniteBoundingVolume::get_volume
//       Access: Public, Virtual
//  Description: 
////////////////////////////////////////////////////////////////////
59
virtual float FiniteBoundingVolume::get_volume(void) const;

1211 14 get_class_type 0 4 1479 36 FiniteBoundingVolume::get_class_type 0 1 478 0
61
static TypeHandle FiniteBoundingVolume::get_class_type(void);

1212 21 ~FiniteBoundingVolume 0 4 1479 43 FiniteBoundingVolume::~FiniteBoundingVolume 0 0 0
50
FiniteBoundingVolume::~FiniteBoundingVolume(void);

1213 10 LParabolaf 0 4 1480 22 LParabolaf::LParabolaf 0 3 479 480 481 1375
// Filename: parabola_src.I
// Created by:  drose (10Oct07)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LParabola::Default Constructor
//       Access: Published
//  Description: Constructs a meaningless degenerate parabola.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LParabola::Constructor
//       Access: Published
//  Description: Constructs a parabola given the three points of the
//               parametric equation: the acceleration, initial
//               velocity, and start point.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LParabola::Copy Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
185
inline LParabolaf::LParabolaf(void);
inline LParabolaf::LParabolaf(LVecBase3f const &a, LVecBase3f const &b, LVecBase3f const &c);
inline LParabolaf::LParabolaf(LParabolaf const &copy);

1214 10 operator = 0 4 1480 22 LParabolaf::operator = 0 1 482 235
////////////////////////////////////////////////////////////////////
//     Function: LParabola::Copy Assignment Operator
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
59
inline void LParabolaf::operator =(LParabolaf const &copy);

1215 11 ~LParabolaf 0 4 1480 23 LParabolaf::~LParabolaf 0 0 221
////////////////////////////////////////////////////////////////////
//     Function: LParabola::Destructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
37
inline LParabolaf::~LParabolaf(void);

1216 5 xform 0 4 1480 17 LParabolaf::xform 0 1 483 754
// Filename: parabola_src.cxx
// Created by:  drose (10Oct07)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LParabola::xform
//       Access: Published
//  Description: Transforms the parabola by the indicated matrix.
////////////////////////////////////////////////////////////////////
45
void LParabolaf::xform(LMatrix4f const &mat);

1217 5 get_a 0 4 1480 17 LParabolaf::get_a 0 1 484 313
////////////////////////////////////////////////////////////////////
//     Function: LParabola::get_a
//       Access: Published
//  Description: Returns the first point of the parabola's parametric
//               equation: the acceleration.
////////////////////////////////////////////////////////////////////
55
inline LVecBase3f const &LParabolaf::get_a(void) const;

1218 5 get_b 0 4 1480 17 LParabolaf::get_b 0 1 485 318
////////////////////////////////////////////////////////////////////
//     Function: LParabola::get_b
//       Access: Published
//  Description: Returns the second point of the parabola's parametric
//               equation: the initial velocity.
////////////////////////////////////////////////////////////////////
55
inline LVecBase3f const &LParabolaf::get_b(void) const;

1219 5 get_c 0 4 1480 17 LParabolaf::get_c 0 1 486 312
////////////////////////////////////////////////////////////////////
//     Function: LParabola::get_c
//       Access: Published
//  Description: Returns the third point of the parabola's parametric
//               equation: the start point.
////////////////////////////////////////////////////////////////////
55
inline LVecBase3f const &LParabolaf::get_c(void) const;

1220 10 calc_point 0 4 1480 22 LParabolaf::calc_point 0 1 487 266
////////////////////////////////////////////////////////////////////
//     Function: LParabola::calc_point
//       Access: Published
//  Description: Computes the point on the parabola at time t.
////////////////////////////////////////////////////////////////////
54
inline LPoint3f LParabolaf::calc_point(float t) const;

1221 6 output 0 4 1480 18 LParabolaf::output 0 1 488 216
////////////////////////////////////////////////////////////////////
//     Function: LParabola::output
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
44
void LParabolaf::output(ostream &out) const;

1222 5 write 0 4 1480 17 LParabolaf::write 0 2 489 490 215
////////////////////////////////////////////////////////////////////
//     Function: LParabola::write
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
67
void LParabolaf::write(ostream &out, int indent_level = (0)) const;

1223 20 write_datagram_fixed 0 4 1480 32 LParabolaf::write_datagram_fixed 0 1 491 643
////////////////////////////////////////////////////////////////////
//     Function: LParabola::write_datagram_fixed
//       Access: Public
//  Description: Writes the parabola to the Datagram using add_float32()
//               or add_float64(), depending on the type of floats in
//               the parabola, regardless of the setting of
//               Datagram::set_stdfloat_double().  This is appropriate
//               when you want to write a fixed-width value to the
//               datagram, especially when you are not writing a bam
//               file.
////////////////////////////////////////////////////////////////////
67
void LParabolaf::write_datagram_fixed(Datagram &destination) const;

1224 19 read_datagram_fixed 0 4 1480 31 LParabolaf::read_datagram_fixed 0 1 492 347
////////////////////////////////////////////////////////////////////
//     Function: LParabola::read_datagram_fixed
//       Access: Public
//  Description: Reads the parabola from the Datagram using get_float32()
//               or get_float64().  See write_datagram_fixed().
////////////////////////////////////////////////////////////////////
63
void LParabolaf::read_datagram_fixed(DatagramIterator &source);

1225 14 write_datagram 0 4 1480 26 LParabolaf::write_datagram 0 1 493 463
////////////////////////////////////////////////////////////////////
//     Function: LParabola::write_datagram
//       Access: Public
//  Description: Writes the parabola to the Datagram using
//               add_stdfloat().  This is appropriate when you want to
//               write the vector using the standard width setting,
//               especially when you are writing a bam file.
////////////////////////////////////////////////////////////////////
61
void LParabolaf::write_datagram(Datagram &destination) const;

1226 13 read_datagram 0 4 1480 25 LParabolaf::read_datagram 0 1 494 279
////////////////////////////////////////////////////////////////////
//     Function: LParabola::read_datagram
//       Access: Public
//  Description: Reads the parabola from the Datagram using get_stdfloat().
////////////////////////////////////////////////////////////////////
57
void LParabolaf::read_datagram(DatagramIterator &source);

1227 10 LParabolad 0 4 1481 22 LParabolad::LParabolad 0 3 495 496 497 2752
// Filename: parabola_src.I
// Created by:  drose (10Oct07)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LParabola::Default Constructor
//       Access: Published
//  Description: Constructs a meaningless degenerate parabola.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LParabola::Constructor
//       Access: Published
//  Description: Constructs a parabola given the three points of the
//               parametric equation: the acceleration, initial
//               velocity, and start point.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LParabola::Copy Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

// Filename: parabola_src.I
// Created by:  drose (10Oct07)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LParabola::Default Constructor
//       Access: Published
//  Description: Constructs a meaningless degenerate parabola.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LParabola::Constructor
//       Access: Published
//  Description: Constructs a parabola given the three points of the
//               parametric equation: the acceleration, initial
//               velocity, and start point.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LParabola::Copy Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
185
inline LParabolad::LParabolad(void);
inline LParabolad::LParabolad(LVecBase3d const &a, LVecBase3d const &b, LVecBase3d const &c);
inline LParabolad::LParabolad(LParabolad const &copy);

1228 10 operator = 0 4 1481 22 LParabolad::operator = 0 1 498 472
////////////////////////////////////////////////////////////////////
//     Function: LParabola::Copy Assignment Operator
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LParabola::Copy Assignment Operator
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
59
inline void LParabolad::operator =(LParabolad const &copy);

1229 11 ~LParabolad 0 4 1481 23 LParabolad::~LParabolad 0 0 444
////////////////////////////////////////////////////////////////////
//     Function: LParabola::Destructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LParabola::Destructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
37
inline LParabolad::~LParabolad(void);

1230 5 xform 0 4 1481 17 LParabolad::xform 0 1 499 754
// Filename: parabola_src.cxx
// Created by:  drose (10Oct07)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LParabola::xform
//       Access: Published
//  Description: Transforms the parabola by the indicated matrix.
////////////////////////////////////////////////////////////////////
45
void LParabolad::xform(LMatrix4d const &mat);

1231 5 get_a 0 4 1481 17 LParabolad::get_a 0 1 500 628
////////////////////////////////////////////////////////////////////
//     Function: LParabola::get_a
//       Access: Published
//  Description: Returns the first point of the parabola's parametric
//               equation: the acceleration.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LParabola::get_a
//       Access: Published
//  Description: Returns the first point of the parabola's parametric
//               equation: the acceleration.
////////////////////////////////////////////////////////////////////
55
inline LVecBase3d const &LParabolad::get_a(void) const;

1232 5 get_b 0 4 1481 17 LParabolad::get_b 0 1 501 638
////////////////////////////////////////////////////////////////////
//     Function: LParabola::get_b
//       Access: Published
//  Description: Returns the second point of the parabola's parametric
//               equation: the initial velocity.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LParabola::get_b
//       Access: Published
//  Description: Returns the second point of the parabola's parametric
//               equation: the initial velocity.
////////////////////////////////////////////////////////////////////
55
inline LVecBase3d const &LParabolad::get_b(void) const;

1233 5 get_c 0 4 1481 17 LParabolad::get_c 0 1 502 626
////////////////////////////////////////////////////////////////////
//     Function: LParabola::get_c
//       Access: Published
//  Description: Returns the third point of the parabola's parametric
//               equation: the start point.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LParabola::get_c
//       Access: Published
//  Description: Returns the third point of the parabola's parametric
//               equation: the start point.
////////////////////////////////////////////////////////////////////
55
inline LVecBase3d const &LParabolad::get_c(void) const;

1234 10 calc_point 0 4 1481 22 LParabolad::calc_point 0 1 503 534
////////////////////////////////////////////////////////////////////
//     Function: LParabola::calc_point
//       Access: Published
//  Description: Computes the point on the parabola at time t.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LParabola::calc_point
//       Access: Published
//  Description: Computes the point on the parabola at time t.
////////////////////////////////////////////////////////////////////
55
inline LPoint3d LParabolad::calc_point(double t) const;

1235 6 output 0 4 1481 18 LParabolad::output 0 1 504 216
////////////////////////////////////////////////////////////////////
//     Function: LParabola::output
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
44
void LParabolad::output(ostream &out) const;

1236 5 write 0 4 1481 17 LParabolad::write 0 2 505 506 215
////////////////////////////////////////////////////////////////////
//     Function: LParabola::write
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
67
void LParabolad::write(ostream &out, int indent_level = (0)) const;

1237 20 write_datagram_fixed 0 4 1481 32 LParabolad::write_datagram_fixed 0 1 507 643
////////////////////////////////////////////////////////////////////
//     Function: LParabola::write_datagram_fixed
//       Access: Public
//  Description: Writes the parabola to the Datagram using add_float32()
//               or add_float64(), depending on the type of floats in
//               the parabola, regardless of the setting of
//               Datagram::set_stdfloat_double().  This is appropriate
//               when you want to write a fixed-width value to the
//               datagram, especially when you are not writing a bam
//               file.
////////////////////////////////////////////////////////////////////
67
void LParabolad::write_datagram_fixed(Datagram &destination) const;

1238 19 read_datagram_fixed 0 4 1481 31 LParabolad::read_datagram_fixed 0 1 508 347
////////////////////////////////////////////////////////////////////
//     Function: LParabola::read_datagram_fixed
//       Access: Public
//  Description: Reads the parabola from the Datagram using get_float32()
//               or get_float64().  See write_datagram_fixed().
////////////////////////////////////////////////////////////////////
63
void LParabolad::read_datagram_fixed(DatagramIterator &source);

1239 14 write_datagram 0 4 1481 26 LParabolad::write_datagram 0 1 509 463
////////////////////////////////////////////////////////////////////
//     Function: LParabola::write_datagram
//       Access: Public
//  Description: Writes the parabola to the Datagram using
//               add_stdfloat().  This is appropriate when you want to
//               write the vector using the standard width setting,
//               especially when you are writing a bam file.
////////////////////////////////////////////////////////////////////
61
void LParabolad::write_datagram(Datagram &destination) const;

1240 13 read_datagram 0 4 1481 25 LParabolad::read_datagram 0 1 510 279
////////////////////////////////////////////////////////////////////
//     Function: LParabola::read_datagram
//       Access: Public
//  Description: Reads the parabola from the Datagram using get_stdfloat().
////////////////////////////////////////////////////////////////////
57
void LParabolad::read_datagram(DatagramIterator &source);

1241 7 LPlanef 0 4 1482 16 LPlanef::LPlanef 0 5 511 512 513 514 515 2153
// Filename: plane_src.I
// Created by:  mike (09Jan97)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LPlane::Constructor
//       Access: Published
//  Description: Creates a default plane.  This plane happens to
//               intersect the origin, perpendicular to the Z axis.
//               It's not clear how useful a default plane is.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPlane::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPlane::Constructor
//       Access: Published
//  Description: Constructs a plane given three counter-clockwise
//               points, as seen from the front of the plane (that is,
//               viewed from the end of the normal vector, looking
//               down).
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPlane::Constructor
//       Access: Published
//  Description: Constructs a plane given a surface normal vector and
//               a point within the plane.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPlane::Constructor
//       Access: Published
//  Description: Constructs a plane given the four terms of the plane
//               equation.
////////////////////////////////////////////////////////////////////
295
inline LPlanef::LPlanef(void);
inline LPlanef::LPlanef(LVecBase4f const &copy);
inline LPlanef::LPlanef(LPoint3f const &a, LPoint3f const &b, LPoint3f const &c);
inline LPlanef::LPlanef(LVector3f const &normal, LPoint3f const &point);
inline LPlanef::LPlanef(float a, float b, float c, float d);

1242 10 operator * 0 4 1482 19 LPlanef::operator * 0 2 516 517 546
////////////////////////////////////////////////////////////////////
//     Function: LPlane::Operator * LMatrix3
//       Access: Published
//  Description: Transforms the plane by the indicated matrix.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPlane::Operator * LMatrix4
//       Access: Published
//  Description: Transforms the plane by the indicated matrix.
////////////////////////////////////////////////////////////////////
127
inline LPlanef LPlanef::operator *(LMatrix3f const &mat) const;
inline LPlanef LPlanef::operator *(LMatrix4f const &mat) const;

1243 11 operator *= 0 4 1482 20 LPlanef::operator *= 0 1 518 273
////////////////////////////////////////////////////////////////////
//     Function: LPlane::Operator *= LMatrix4
//       Access: Published
//  Description: Transforms the plane by the indicated matrix.
////////////////////////////////////////////////////////////////////
55
inline void LPlanef::operator *=(LMatrix4f const &mat);

1244 5 xform 0 4 1482 14 LPlanef::xform 0 1 519 258
////////////////////////////////////////////////////////////////////
//     Function: LPlane::xform
//       Access: Published
//  Description: Transforms the plane by the indicated matrix.
////////////////////////////////////////////////////////////////////
49
inline void LPlanef::xform(LMatrix4f const &mat);

1245 10 operator - 0 68 1482 19 LPlanef::operator - 0 1 520 268
////////////////////////////////////////////////////////////////////
//     Function: LPlane::Unary -
//       Access: Published
//  Description: Returns the same plane facing the opposite direction.
////////////////////////////////////////////////////////////////////
47
inline LPlanef LPlanef::operator -(void) const;

1246 18 get_reflection_mat 0 4 1482 27 LPlanef::get_reflection_mat 0 1 521 854
// Filename: plane_src.cxx
// Created by:  drose (03Apr01)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LPlane::get_reflection_mat
//       Access: Published
//  Description: This computes a transform matrix that reflects the
//               universe to the other side of the plane, as in a
//               mirror.
////////////////////////////////////////////////////////////////////
50
LMatrix4f LPlanef::get_reflection_mat(void) const;

1247 10 get_normal 0 4 1482 19 LPlanef::get_normal 0 1 522 258
////////////////////////////////////////////////////////////////////
//     Function: LPlane::get_normal
//       Access: Published
//  Description: Returns the surface normal of the plane.
////////////////////////////////////////////////////////////////////
49
inline LVector3f LPlanef::get_normal(void) const;

1248 9 get_point 0 4 1482 18 LPlanef::get_point 0 1 523 382
////////////////////////////////////////////////////////////////////
//     Function: LPlane::get_point
//       Access: Published
//  Description: Returns an arbitrary point in the plane.  This can be
//               used along with the normal returned by get_normal()
//               to reconstruct the plane.
////////////////////////////////////////////////////////////////////
40
LPoint3f LPlanef::get_point(void) const;

1249 13 dist_to_plane 0 4 1482 22 LPlanef::dist_to_plane 0 1 524 612
////////////////////////////////////////////////////////////////////
//     Function: LPlane::dist_to_plane
//       Access: Published
//  Description: Returns the straight-line shortest distance from the
//               point to the plane.  The returned value is positive
//               if the point is in front of the plane (on the side
//               with the normal), or negative in the point is behind
//               the plane (on the opposite side from the normal).
//               It's zero if the point is exactly in the plane.
////////////////////////////////////////////////////////////////////
65
inline float LPlanef::dist_to_plane(LPoint3f const &point) const;

1250 7 project 0 4 1482 16 LPlanef::project 0 1 525 307
////////////////////////////////////////////////////////////////////
//     Function: LPlane::project
//       Access: Published
//  Description: Returns the point within the plane nearest to the
//               indicated point in space.
////////////////////////////////////////////////////////////////////
62
inline LPoint3f LPlanef::project(LPoint3f const &point) const;

1251 4 flip 0 4 1482 13 LPlanef::flip 0 1 526 329
////////////////////////////////////////////////////////////////////
//     Function: LPlane::flip
//       Access: Published
//  Description: Convenience method that flips the plane in-place.
//               This is done by simply flipping the normal vector.
////////////////////////////////////////////////////////////////////
32
inline void LPlanef::flip(void);

1252 15 intersects_line 0 4 1482 24 LPlanef::intersects_line 0 1 527 1628
////////////////////////////////////////////////////////////////////
//     Function: LPlane::intersects_line
//       Access: Published
//  Description: Returns true if the plane intersects the infinite
//               line passing through points p1 and p2, false if the
//               line is parallel.  The points p1 and p2 are used only
//               to define the Euclidean line; they have no other
//               bearing on the intersection test.  If true, sets
//               intersection_point to the point of intersection.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPlane::intersects_line
//       Access: Published
//  Description: This flavor of intersects_line() returns a bit more
//               information about the nature of the intersecting
//               point.  The line is defined via the parametric
//               equation from + t * delta for all real values of t.
//
//               If there is no intersection with the plane, the
//               function returns false and leaves t undefined.  If
//               there is an intersection with the plane, the function
//               returns true and sets t to the parametric value that
//               defines the point of intersection.  That is, t == 0.0f
//               implies that the intersection occurred exactly at
//               point from, and t == 1.0f implies at point from +
//               delta, with other values of t accordingly.
////////////////////////////////////////////////////////////////////
213
inline bool LPlanef::intersects_line(LPoint3f &intersection_point, LPoint3f const &p1, LPoint3f const &p2) const;
inline bool LPlanef::intersects_line(float &t, LPoint3f const &from, LVector3f const &delta) const;

1253 16 intersects_plane 0 4 1482 25 LPlanef::intersects_plane 0 1 528 589
////////////////////////////////////////////////////////////////////
//     Function: LPlane::intersects_plane
//       Access: Published
//  Description: Returns true if the two planes intersect, false if
//               they do not.  If they do intersect, then from and
//               delta are filled in with the parametric
//               representation of the line of intersection: that is,
//               from is a point on that line, and delta is a vector
//               showing the direction of the line.
////////////////////////////////////////////////////////////////////
93
bool LPlanef::intersects_plane(LPoint3f &from, LVector3f &delta, LPlanef const &other) const;

1254 19 intersects_parabola 0 4 1482 28 LPlanef::intersects_parabola 0 0 771
////////////////////////////////////////////////////////////////////
//     Function: LPlane::intersects_parabola
//       Access: Published
//  Description: Determines whether and where the indicated parabola
//               intersects with the plane.
//
//               If there is no intersection with the plane, the
//               function returns false and leaves t1 and t2
//               undefined.  If there is an intersection with the
//               plane, the function returns true and sets t1 and t2
//               to the parametric value that defines the two points
//               of intersection.  If the parabola is exactly tangent
//               to the plane, then t1 == t2.
////////////////////////////////////////////////////////////////////
90
bool LPlanef::intersects_parabola(float &t1, float &t2, LParabolaf const &parabola) const;

1255 6 output 0 4 1482 15 LPlanef::output 0 1 529 213
////////////////////////////////////////////////////////////////////
//     Function: LPlane::output
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
41
void LPlanef::output(ostream &out) const;

1256 5 write 0 4 1482 14 LPlanef::write 0 2 530 531 212
////////////////////////////////////////////////////////////////////
//     Function: LPlane::write
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
64
void LPlanef::write(ostream &out, int indent_level = (0)) const;

1257 8 ~LPlanef 0 4 1482 17 LPlanef::~LPlanef 0 0 0
24
LPlanef::~LPlanef(void);

1258 7 LPlaned 0 4 1484 16 LPlaned::LPlaned 0 5 532 533 534 535 536 4308
// Filename: plane_src.I
// Created by:  mike (09Jan97)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LPlane::Constructor
//       Access: Published
//  Description: Creates a default plane.  This plane happens to
//               intersect the origin, perpendicular to the Z axis.
//               It's not clear how useful a default plane is.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPlane::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPlane::Constructor
//       Access: Published
//  Description: Constructs a plane given three counter-clockwise
//               points, as seen from the front of the plane (that is,
//               viewed from the end of the normal vector, looking
//               down).
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPlane::Constructor
//       Access: Published
//  Description: Constructs a plane given a surface normal vector and
//               a point within the plane.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPlane::Constructor
//       Access: Published
//  Description: Constructs a plane given the four terms of the plane
//               equation.
////////////////////////////////////////////////////////////////////

// Filename: plane_src.I
// Created by:  mike (09Jan97)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LPlane::Constructor
//       Access: Published
//  Description: Creates a default plane.  This plane happens to
//               intersect the origin, perpendicular to the Z axis.
//               It's not clear how useful a default plane is.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPlane::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPlane::Constructor
//       Access: Published
//  Description: Constructs a plane given three counter-clockwise
//               points, as seen from the front of the plane (that is,
//               viewed from the end of the normal vector, looking
//               down).
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPlane::Constructor
//       Access: Published
//  Description: Constructs a plane given a surface normal vector and
//               a point within the plane.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPlane::Constructor
//       Access: Published
//  Description: Constructs a plane given the four terms of the plane
//               equation.
////////////////////////////////////////////////////////////////////
299
inline LPlaned::LPlaned(void);
inline LPlaned::LPlaned(LVecBase4d const &copy);
inline LPlaned::LPlaned(LPoint3d const &a, LPoint3d const &b, LPoint3d const &c);
inline LPlaned::LPlaned(LVector3d const &normal, LPoint3d const &point);
inline LPlaned::LPlaned(double a, double b, double c, double d);

1259 10 operator * 0 4 1484 19 LPlaned::operator * 0 2 537 538 1094
////////////////////////////////////////////////////////////////////
//     Function: LPlane::Operator * LMatrix3
//       Access: Published
//  Description: Transforms the plane by the indicated matrix.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPlane::Operator * LMatrix4
//       Access: Published
//  Description: Transforms the plane by the indicated matrix.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPlane::Operator * LMatrix3
//       Access: Published
//  Description: Transforms the plane by the indicated matrix.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPlane::Operator * LMatrix4
//       Access: Published
//  Description: Transforms the plane by the indicated matrix.
////////////////////////////////////////////////////////////////////
127
inline LPlaned LPlaned::operator *(LMatrix3d const &mat) const;
inline LPlaned LPlaned::operator *(LMatrix4d const &mat) const;

1260 11 operator *= 0 4 1484 20 LPlaned::operator *= 0 1 539 548
////////////////////////////////////////////////////////////////////
//     Function: LPlane::Operator *= LMatrix4
//       Access: Published
//  Description: Transforms the plane by the indicated matrix.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPlane::Operator *= LMatrix4
//       Access: Published
//  Description: Transforms the plane by the indicated matrix.
////////////////////////////////////////////////////////////////////
55
inline void LPlaned::operator *=(LMatrix4d const &mat);

1261 5 xform 0 4 1484 14 LPlaned::xform 0 1 540 518
////////////////////////////////////////////////////////////////////
//     Function: LPlane::xform
//       Access: Published
//  Description: Transforms the plane by the indicated matrix.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPlane::xform
//       Access: Published
//  Description: Transforms the plane by the indicated matrix.
////////////////////////////////////////////////////////////////////
49
inline void LPlaned::xform(LMatrix4d const &mat);

1262 10 operator - 0 68 1484 19 LPlaned::operator - 0 1 541 538
////////////////////////////////////////////////////////////////////
//     Function: LPlane::Unary -
//       Access: Published
//  Description: Returns the same plane facing the opposite direction.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPlane::Unary -
//       Access: Published
//  Description: Returns the same plane facing the opposite direction.
////////////////////////////////////////////////////////////////////
47
inline LPlaned LPlaned::operator -(void) const;

1263 18 get_reflection_mat 0 4 1484 27 LPlaned::get_reflection_mat 0 1 542 854
// Filename: plane_src.cxx
// Created by:  drose (03Apr01)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LPlane::get_reflection_mat
//       Access: Published
//  Description: This computes a transform matrix that reflects the
//               universe to the other side of the plane, as in a
//               mirror.
////////////////////////////////////////////////////////////////////
50
LMatrix4d LPlaned::get_reflection_mat(void) const;

1264 10 get_normal 0 4 1484 19 LPlaned::get_normal 0 1 543 518
////////////////////////////////////////////////////////////////////
//     Function: LPlane::get_normal
//       Access: Published
//  Description: Returns the surface normal of the plane.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPlane::get_normal
//       Access: Published
//  Description: Returns the surface normal of the plane.
////////////////////////////////////////////////////////////////////
49
inline LVector3d LPlaned::get_normal(void) const;

1265 9 get_point 0 4 1484 18 LPlaned::get_point 0 1 544 382
////////////////////////////////////////////////////////////////////
//     Function: LPlane::get_point
//       Access: Published
//  Description: Returns an arbitrary point in the plane.  This can be
//               used along with the normal returned by get_normal()
//               to reconstruct the plane.
////////////////////////////////////////////////////////////////////
40
LPoint3d LPlaned::get_point(void) const;

1266 13 dist_to_plane 0 4 1484 22 LPlaned::dist_to_plane 0 1 545 1226
////////////////////////////////////////////////////////////////////
//     Function: LPlane::dist_to_plane
//       Access: Published
//  Description: Returns the straight-line shortest distance from the
//               point to the plane.  The returned value is positive
//               if the point is in front of the plane (on the side
//               with the normal), or negative in the point is behind
//               the plane (on the opposite side from the normal).
//               It's zero if the point is exactly in the plane.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPlane::dist_to_plane
//       Access: Published
//  Description: Returns the straight-line shortest distance from the
//               point to the plane.  The returned value is positive
//               if the point is in front of the plane (on the side
//               with the normal), or negative in the point is behind
//               the plane (on the opposite side from the normal).
//               It's zero if the point is exactly in the plane.
////////////////////////////////////////////////////////////////////
66
inline double LPlaned::dist_to_plane(LPoint3d const &point) const;

1267 7 project 0 4 1484 16 LPlaned::project 0 1 546 616
////////////////////////////////////////////////////////////////////
//     Function: LPlane::project
//       Access: Published
//  Description: Returns the point within the plane nearest to the
//               indicated point in space.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPlane::project
//       Access: Published
//  Description: Returns the point within the plane nearest to the
//               indicated point in space.
////////////////////////////////////////////////////////////////////
62
inline LPoint3d LPlaned::project(LPoint3d const &point) const;

1268 4 flip 0 4 1484 13 LPlaned::flip 0 1 547 660
////////////////////////////////////////////////////////////////////
//     Function: LPlane::flip
//       Access: Published
//  Description: Convenience method that flips the plane in-place.
//               This is done by simply flipping the normal vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPlane::flip
//       Access: Published
//  Description: Convenience method that flips the plane in-place.
//               This is done by simply flipping the normal vector.
////////////////////////////////////////////////////////////////////
32
inline void LPlaned::flip(void);

1269 15 intersects_line 0 4 1484 24 LPlaned::intersects_line 0 1 548 3258
////////////////////////////////////////////////////////////////////
//     Function: LPlane::intersects_line
//       Access: Published
//  Description: Returns true if the plane intersects the infinite
//               line passing through points p1 and p2, false if the
//               line is parallel.  The points p1 and p2 are used only
//               to define the Euclidean line; they have no other
//               bearing on the intersection test.  If true, sets
//               intersection_point to the point of intersection.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPlane::intersects_line
//       Access: Published
//  Description: This flavor of intersects_line() returns a bit more
//               information about the nature of the intersecting
//               point.  The line is defined via the parametric
//               equation from + t * delta for all real values of t.
//
//               If there is no intersection with the plane, the
//               function returns false and leaves t undefined.  If
//               there is an intersection with the plane, the function
//               returns true and sets t to the parametric value that
//               defines the point of intersection.  That is, t == 0.0f
//               implies that the intersection occurred exactly at
//               point from, and t == 1.0f implies at point from +
//               delta, with other values of t accordingly.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPlane::intersects_line
//       Access: Published
//  Description: Returns true if the plane intersects the infinite
//               line passing through points p1 and p2, false if the
//               line is parallel.  The points p1 and p2 are used only
//               to define the Euclidean line; they have no other
//               bearing on the intersection test.  If true, sets
//               intersection_point to the point of intersection.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPlane::intersects_line
//       Access: Published
//  Description: This flavor of intersects_line() returns a bit more
//               information about the nature of the intersecting
//               point.  The line is defined via the parametric
//               equation from + t * delta for all real values of t.
//
//               If there is no intersection with the plane, the
//               function returns false and leaves t undefined.  If
//               there is an intersection with the plane, the function
//               returns true and sets t to the parametric value that
//               defines the point of intersection.  That is, t == 0.0f
//               implies that the intersection occurred exactly at
//               point from, and t == 1.0f implies at point from +
//               delta, with other values of t accordingly.
////////////////////////////////////////////////////////////////////
214
inline bool LPlaned::intersects_line(LPoint3d &intersection_point, LPoint3d const &p1, LPoint3d const &p2) const;
inline bool LPlaned::intersects_line(double &t, LPoint3d const &from, LVector3d const &delta) const;

1270 16 intersects_plane 0 4 1484 25 LPlaned::intersects_plane 0 1 549 589
////////////////////////////////////////////////////////////////////
//     Function: LPlane::intersects_plane
//       Access: Published
//  Description: Returns true if the two planes intersect, false if
//               they do not.  If they do intersect, then from and
//               delta are filled in with the parametric
//               representation of the line of intersection: that is,
//               from is a point on that line, and delta is a vector
//               showing the direction of the line.
////////////////////////////////////////////////////////////////////
93
bool LPlaned::intersects_plane(LPoint3d &from, LVector3d &delta, LPlaned const &other) const;

1271 19 intersects_parabola 0 4 1484 28 LPlaned::intersects_parabola 0 0 771
////////////////////////////////////////////////////////////////////
//     Function: LPlane::intersects_parabola
//       Access: Published
//  Description: Determines whether and where the indicated parabola
//               intersects with the plane.
//
//               If there is no intersection with the plane, the
//               function returns false and leaves t1 and t2
//               undefined.  If there is an intersection with the
//               plane, the function returns true and sets t1 and t2
//               to the parametric value that defines the two points
//               of intersection.  If the parabola is exactly tangent
//               to the plane, then t1 == t2.
////////////////////////////////////////////////////////////////////
92
bool LPlaned::intersects_parabola(double &t1, double &t2, LParabolad const &parabola) const;

1272 6 output 0 4 1484 15 LPlaned::output 0 1 550 213
////////////////////////////////////////////////////////////////////
//     Function: LPlane::output
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
41
void LPlaned::output(ostream &out) const;

1273 5 write 0 4 1484 14 LPlaned::write 0 2 551 552 212
////////////////////////////////////////////////////////////////////
//     Function: LPlane::write
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
64
void LPlaned::write(ostream &out, int indent_level = (0)) const;

1274 8 ~LPlaned 0 4 1484 17 LPlaned::~LPlaned 0 0 0
24
LPlaned::~LPlaned(void);

1275 11 BoundingBox 0 4 1486 24 BoundingBox::BoundingBox 0 2 553 554 1001
// Filename: boundingBox.I
// Created by:  drose (31May07)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: BoundingBox::Constructor
//       Access: Published
//  Description: Constructs an empty box object.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: BoundingBox::Constructor
//       Access: Published
//  Description: Constructs a specific box object.
////////////////////////////////////////////////////////////////////
113
inline BoundingBox::BoundingBox(void);
inline BoundingBox::BoundingBox(LPoint3f const &min, LPoint3f const &max);

1276 12 operator new 0 4 1486 25 BoundingBox::operator new 0 1 555 0
128
inline void *BoundingBox::operator new(unsigned int size);
inline void *BoundingBox::operator new(unsigned int size, void *ptr);

1277 15 operator delete 0 4 1486 28 BoundingBox::operator delete 0 0 0
110
inline void BoundingBox::operator delete(void *ptr);
inline void BoundingBox::operator delete(void *, void *);

1278 12 validate_ptr 0 4 1486 25 BoundingBox::validate_ptr 0 0 0
62
static inline bool BoundingBox::validate_ptr(void const *ptr);

1279 14 get_num_points 0 4 1486 27 BoundingBox::get_num_points 0 1 556 284
////////////////////////////////////////////////////////////////////
//     Function: BoundingBox::get_num_points
//       Access: Published
//  Description: Returns 8: the number of vertices of a rectangular solid.
////////////////////////////////////////////////////////////////////
51
inline int BoundingBox::get_num_points(void) const;

1280 9 get_point 0 4 1486 22 BoundingBox::get_point 0 1 557 270
////////////////////////////////////////////////////////////////////
//     Function: BoundingBox::get_point
//       Access: Published
//  Description: Returns the nth vertex of the rectangular solid.
////////////////////////////////////////////////////////////////////
52
inline LPoint3f BoundingBox::get_point(int n) const;

1281 14 get_num_planes 0 4 1486 27 BoundingBox::get_num_planes 0 1 558 281
////////////////////////////////////////////////////////////////////
//     Function: BoundingBox::get_num_planes
//       Access: Published
//  Description: Returns 6: the number of faces of a rectangular solid.
////////////////////////////////////////////////////////////////////
51
inline int BoundingBox::get_num_planes(void) const;

1282 9 get_plane 0 4 1486 22 BoundingBox::get_plane 0 1 559 268
////////////////////////////////////////////////////////////////////
//     Function: BoundingBox::get_plane
//       Access: Published
//  Description: Returns the nth face of the rectangular solid.
////////////////////////////////////////////////////////////////////
51
inline LPlanef BoundingBox::get_plane(int n) const;

1283 14 get_class_type 0 4 1486 27 BoundingBox::get_class_type 0 1 560 0
52
static TypeHandle BoundingBox::get_class_type(void);

1284 12 ~BoundingBox 0 4 1486 25 BoundingBox::~BoundingBox 0 0 0
32
BoundingBox::~BoundingBox(void);

1285 9 LFrustumf 0 4 1487 20 LFrustumf::LFrustumf 0 1 561 686
// Filename: frustum_src.I
// Created by:  mike (09Jan97)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: Constructor
//       Access:
//  Description:
////////////////////////////////////////////////////////////////////
34
inline LFrustumf::LFrustumf(void);

1286 13 make_ortho_2D 0 4 1487 24 LFrustumf::make_ortho_2D 0 2 562 563 500
////////////////////////////////////////////////////////////////////
//     Function: make_ortho_2D
//       Access:
//  Description: Sets up a two-dimensional orthographic frustum
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: make_ortho_2D
//       Access:
//  Description: Sets up a two-dimensional orthographic frustum
////////////////////////////////////////////////////////////////////
117
inline void LFrustumf::make_ortho_2D(void);
inline void LFrustumf::make_ortho_2D(float l, float r, float t, float b);

1287 10 make_ortho 0 4 1487 21 LFrustumf::make_ortho 0 2 564 565 450
////////////////////////////////////////////////////////////////////
//     Function: make_ortho_2D
//       Access:
//  Description: Behaves like gluOrtho
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: make_ortho_2D
//       Access:
//  Description: Behaves like gluOrtho
////////////////////////////////////////////////////////////////////
155
inline void LFrustumf::make_ortho(float fnear, float ffar);
inline void LFrustumf::make_ortho(float fnear, float ffar, float l, float r, float t, float b);

1288 21 make_perspective_hfov 0 4 1487 32 LFrustumf::make_perspective_hfov 0 1 566 578
////////////////////////////////////////////////////////////////////
//     Function: make_perspective
//       Access:
//  Description: Behaves like gluPerspective (Aspect = width/height,
//               Yfov in degrees)
//       aspect
//   +------------+
//   |            |
// 1 |            | yfov
//   |            |
//   +------------+
//
//     -------+------
//      \     |     /
//       \    |    /
//        \   |   /
//         \  |  /
//          \ | /
//           \|/
//            W yfov
//
////////////////////////////////////////////////////////////////////
96
inline void LFrustumf::make_perspective_hfov(float xfov, float aspect, float fnear, float ffar);

1289 21 make_perspective_vfov 0 4 1487 32 LFrustumf::make_perspective_vfov 0 1 567 0
96
inline void LFrustumf::make_perspective_vfov(float yfov, float aspect, float fnear, float ffar);

1290 16 make_perspective 0 4 1487 27 LFrustumf::make_perspective 0 1 568 0
89
inline void LFrustumf::make_perspective(float xfov, float yfov, float fnear, float ffar);

1291 22 get_perspective_params 0 4 1487 33 LFrustumf::get_perspective_params 0 0 424
////////////////////////////////////////////////////////////////////
//     Function: get_perspective_params
//       Access:
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: get_perspective_params
//       Access:
//  Description:
////////////////////////////////////////////////////////////////////
228
inline void LFrustumf::get_perspective_params(float &yfov, float &aspect, float &fnear, float &ffar) const;
inline void LFrustumf::get_perspective_params(float &xfov, float &yfov, float &aspect, float &fnear, float &ffar) const;

1292 10 ~LFrustumf 0 4 1487 21 LFrustumf::~LFrustumf 0 0 0
28
LFrustumf::~LFrustumf(void);

1293 9 LFrustumd 0 4 1488 20 LFrustumd::LFrustumd 0 1 569 1374
// Filename: frustum_src.I
// Created by:  mike (09Jan97)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: Constructor
//       Access:
//  Description:
////////////////////////////////////////////////////////////////////

// Filename: frustum_src.I
// Created by:  mike (09Jan97)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: Constructor
//       Access:
//  Description:
////////////////////////////////////////////////////////////////////
34
inline LFrustumd::LFrustumd(void);

1294 13 make_ortho_2D 0 4 1488 24 LFrustumd::make_ortho_2D 0 2 570 571 1002
////////////////////////////////////////////////////////////////////
//     Function: make_ortho_2D
//       Access:
//  Description: Sets up a two-dimensional orthographic frustum
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: make_ortho_2D
//       Access:
//  Description: Sets up a two-dimensional orthographic frustum
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: make_ortho_2D
//       Access:
//  Description: Sets up a two-dimensional orthographic frustum
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: make_ortho_2D
//       Access:
//  Description: Sets up a two-dimensional orthographic frustum
////////////////////////////////////////////////////////////////////
121
inline void LFrustumd::make_ortho_2D(void);
inline void LFrustumd::make_ortho_2D(double l, double r, double t, double b);

1295 10 make_ortho 0 4 1488 21 LFrustumd::make_ortho 0 2 572 573 902
////////////////////////////////////////////////////////////////////
//     Function: make_ortho_2D
//       Access:
//  Description: Behaves like gluOrtho
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: make_ortho_2D
//       Access:
//  Description: Behaves like gluOrtho
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: make_ortho_2D
//       Access:
//  Description: Behaves like gluOrtho
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: make_ortho_2D
//       Access:
//  Description: Behaves like gluOrtho
////////////////////////////////////////////////////////////////////
163
inline void LFrustumd::make_ortho(double fnear, double ffar);
inline void LFrustumd::make_ortho(double fnear, double ffar, double l, double r, double t, double b);

1296 21 make_perspective_hfov 0 4 1488 32 LFrustumd::make_perspective_hfov 0 1 574 1158
////////////////////////////////////////////////////////////////////
//     Function: make_perspective
//       Access:
//  Description: Behaves like gluPerspective (Aspect = width/height,
//               Yfov in degrees)
//       aspect
//   +------------+
//   |            |
// 1 |            | yfov
//   |            |
//   +------------+
//
//     -------+------
//      \     |     /
//       \    |    /
//        \   |   /
//         \  |  /
//          \ | /
//           \|/
//            W yfov
//
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: make_perspective
//       Access:
//  Description: Behaves like gluPerspective (Aspect = width/height,
//               Yfov in degrees)
//       aspect
//   +------------+
//   |            |
// 1 |            | yfov
//   |            |
//   +------------+
//
//     -------+------
//      \     |     /
//       \    |    /
//        \   |   /
//         \  |  /
//          \ | /
//           \|/
//            W yfov
//
////////////////////////////////////////////////////////////////////
100
inline void LFrustumd::make_perspective_hfov(double xfov, double aspect, double fnear, double ffar);

1297 21 make_perspective_vfov 0 4 1488 32 LFrustumd::make_perspective_vfov 0 1 575 0
100
inline void LFrustumd::make_perspective_vfov(double yfov, double aspect, double fnear, double ffar);

1298 16 make_perspective 0 4 1488 27 LFrustumd::make_perspective 0 1 576 0
93
inline void LFrustumd::make_perspective(double xfov, double yfov, double fnear, double ffar);

1299 22 get_perspective_params 0 4 1488 33 LFrustumd::get_perspective_params 0 0 850
////////////////////////////////////////////////////////////////////
//     Function: get_perspective_params
//       Access:
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: get_perspective_params
//       Access:
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: get_perspective_params
//       Access:
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: get_perspective_params
//       Access:
//  Description:
////////////////////////////////////////////////////////////////////
237
inline void LFrustumd::get_perspective_params(double &yfov, double &aspect, double &fnear, double &ffar) const;
inline void LFrustumd::get_perspective_params(double &xfov, double &yfov, double &aspect, double &fnear, double &ffar) const;

1300 10 ~LFrustumd 0 4 1488 21 LFrustumd::~LFrustumd 0 0 0
28
LFrustumd::~LFrustumd(void);

1301 18 BoundingHexahedron 0 4 1489 38 BoundingHexahedron::BoundingHexahedron 0 3 577 578 579 1188
// Filename: boundingHexahedron.I
// Created by:  drose (03Oct99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: BoundingHexahedron::Constructor
//       Access: Public
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: BoundingHexahedron::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: BoundingHexahedron::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
324
BoundingHexahedron::BoundingHexahedron(LFrustumf const &frustum, bool is_ortho, CoordinateSystem cs = (CS_default));
BoundingHexahedron::BoundingHexahedron(LPoint3f const &fll, LPoint3f const &flr, LPoint3f const &fur, LPoint3f const &ful, LPoint3f const &nll, LPoint3f const &nlr, LPoint3f const &nur, LPoint3f const &nul);

1302 14 get_num_points 0 4 1489 34 BoundingHexahedron::get_num_points 0 1 580 284
////////////////////////////////////////////////////////////////////
//     Function: BoundingHexahedron::get_num_points
//       Access: Published
//  Description: Returns 8: the number of vertices of a hexahedron.
////////////////////////////////////////////////////////////////////
58
inline int BoundingHexahedron::get_num_points(void) const;

1303 9 get_point 0 4 1489 29 BoundingHexahedron::get_point 0 1 581 270
////////////////////////////////////////////////////////////////////
//     Function: BoundingHexahedron::get_point
//       Access: Published
//  Description: Returns the nth vertex of the hexahedron.
////////////////////////////////////////////////////////////////////
59
inline LPoint3f BoundingHexahedron::get_point(int n) const;

1304 14 get_num_planes 0 4 1489 34 BoundingHexahedron::get_num_planes 0 1 582 281
////////////////////////////////////////////////////////////////////
//     Function: BoundingHexahedron::get_num_planes
//       Access: Published
//  Description: Returns 6: the number of faces of a hexahedron.
////////////////////////////////////////////////////////////////////
58
inline int BoundingHexahedron::get_num_planes(void) const;

1305 9 get_plane 0 4 1489 29 BoundingHexahedron::get_plane 0 1 583 268
////////////////////////////////////////////////////////////////////
//     Function: BoundingHexahedron::get_plane
//       Access: Published
//  Description: Returns the nth face of the hexahedron.
////////////////////////////////////////////////////////////////////
58
inline LPlanef BoundingHexahedron::get_plane(int n) const;

1306 14 get_class_type 0 4 1489 34 BoundingHexahedron::get_class_type 0 1 584 0
59
static TypeHandle BoundingHexahedron::get_class_type(void);

1307 19 ~BoundingHexahedron 0 4 1489 39 BoundingHexahedron::~BoundingHexahedron 0 0 0
46
BoundingHexahedron::~BoundingHexahedron(void);

1308 12 BoundingLine 0 4 1490 26 BoundingLine::BoundingLine 0 1 585 937
// Filename: boundingLine.I
// Created by:  drose (04Jul00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: BoundingLine::Constructor
//       Access: Public
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: BoundingLine::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
72
inline BoundingLine::BoundingLine(LPoint3f const &a, LPoint3f const &b);

1309 12 operator new 0 4 1490 26 BoundingLine::operator new 0 1 586 0
130
inline void *BoundingLine::operator new(unsigned int size);
inline void *BoundingLine::operator new(unsigned int size, void *ptr);

1310 15 operator delete 0 4 1490 29 BoundingLine::operator delete 0 0 0
112
inline void BoundingLine::operator delete(void *ptr);
inline void BoundingLine::operator delete(void *, void *);

1311 12 validate_ptr 0 4 1490 26 BoundingLine::validate_ptr 0 0 0
63
static inline bool BoundingLine::validate_ptr(void const *ptr);

1312 11 get_point_a 0 4 1490 25 BoundingLine::get_point_a 0 1 587 271
////////////////////////////////////////////////////////////////////
//     Function: BoundingLine::get_point_a
//       Access: Published
//  Description: Returns the first point that defines the line.
////////////////////////////////////////////////////////////////////
61
inline LPoint3f const &BoundingLine::get_point_a(void) const;

1313 11 get_point_b 0 4 1490 25 BoundingLine::get_point_b 0 1 588 272
////////////////////////////////////////////////////////////////////
//     Function: BoundingLine::get_point_b
//       Access: Published
//  Description: Returns the second point that defines the line.
////////////////////////////////////////////////////////////////////
54
inline LPoint3f BoundingLine::get_point_b(void) const;

1314 14 get_class_type 0 4 1490 28 BoundingLine::get_class_type 0 1 589 0
53
static TypeHandle BoundingLine::get_class_type(void);

1315 13 ~BoundingLine 0 4 1490 27 BoundingLine::~BoundingLine 0 0 0
34
BoundingLine::~BoundingLine(void);

1316 13 BoundingPlane 0 4 1491 28 BoundingPlane::BoundingPlane 0 2 590 591 1022
// Filename: boundingPlane.I
// Created by:  drose (19Aug05)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: BoundingPlane::Default Constructor
//       Access: Published
//  Description: Constructs an empty "plane" that has no
//               intersections.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: BoundingPlane::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
101
inline BoundingPlane::BoundingPlane(void);
inline BoundingPlane::BoundingPlane(LPlanef const &plane);

1317 12 operator new 0 4 1491 27 BoundingPlane::operator new 0 1 592 0
132
inline void *BoundingPlane::operator new(unsigned int size);
inline void *BoundingPlane::operator new(unsigned int size, void *ptr);

1318 15 operator delete 0 4 1491 30 BoundingPlane::operator delete 0 0 0
114
inline void BoundingPlane::operator delete(void *ptr);
inline void BoundingPlane::operator delete(void *, void *);

1319 12 validate_ptr 0 4 1491 27 BoundingPlane::validate_ptr 0 0 0
64
static inline bool BoundingPlane::validate_ptr(void const *ptr);

1320 9 get_plane 0 4 1491 24 BoundingPlane::get_plane 0 1 593 224
////////////////////////////////////////////////////////////////////
//     Function: BoundingPlane::get_plane
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
59
inline LPlanef const &BoundingPlane::get_plane(void) const;

1321 14 get_class_type 0 4 1491 29 BoundingPlane::get_class_type 0 1 594 0
54
static TypeHandle BoundingPlane::get_class_type(void);

1322 14 ~BoundingPlane 0 4 1491 29 BoundingPlane::~BoundingPlane 0 0 0
36
BoundingPlane::~BoundingPlane(void);

1323 14 BoundingSphere 0 4 1492 30 BoundingSphere::BoundingSphere 0 2 595 596 1002
// Filename: boundingSphere.I
// Created by:  drose (02Oct99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: BoundingSphere::Constructor
//       Access: Published
//  Description: Constructs an empty sphere.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: BoundingSphere::Constructor
//       Access: Published
//  Description: Constructs a specific sphere.
////////////////////////////////////////////////////////////////////
121
inline BoundingSphere::BoundingSphere(void);
inline BoundingSphere::BoundingSphere(LPoint3f const &center, float radius);

1324 12 operator new 0 4 1492 28 BoundingSphere::operator new 0 1 597 0
134
inline void *BoundingSphere::operator new(unsigned int size);
inline void *BoundingSphere::operator new(unsigned int size, void *ptr);

1325 15 operator delete 0 4 1492 31 BoundingSphere::operator delete 0 0 0
116
inline void BoundingSphere::operator delete(void *ptr);
inline void BoundingSphere::operator delete(void *, void *);

1326 12 validate_ptr 0 4 1492 28 BoundingSphere::validate_ptr 0 0 0
65
static inline bool BoundingSphere::validate_ptr(void const *ptr);

1327 10 get_center 0 4 1492 26 BoundingSphere::get_center 0 1 598 226
////////////////////////////////////////////////////////////////////
//     Function: BoundingSphere::get_center
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
55
inline LPoint3f BoundingSphere::get_center(void) const;

1328 10 get_radius 0 4 1492 26 BoundingSphere::get_radius 0 1 599 226
////////////////////////////////////////////////////////////////////
//     Function: BoundingSphere::get_radius
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
52
inline float BoundingSphere::get_radius(void) const;

1329 14 get_class_type 0 4 1492 30 BoundingSphere::get_class_type 0 1 600 0
55
static TypeHandle BoundingSphere::get_class_type(void);

1330 15 ~BoundingSphere 0 4 1492 31 BoundingSphere::~BoundingSphere 0 0 0
38
BoundingSphere::~BoundingSphere(void);

1331 26 IntersectionBoundingVolume 0 4 1493 54 IntersectionBoundingVolume::IntersectionBoundingVolume 0 1 601 1017
// Filename: intersectionBoundingVolume.I
// Created by:  drose (08Feb12)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: IntersectionBoundingVolume::Constructor
//       Access: Published
//  Description: Constructs an empty intersection.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: IntersectionBoundingVolume::Copy Constructor
//       Access: Public
//  Description: 
////////////////////////////////////////////////////////////////////
68
inline IntersectionBoundingVolume::IntersectionBoundingVolume(void);

1332 12 operator new 0 4 1493 40 IntersectionBoundingVolume::operator new 0 1 602 0
158
inline void *IntersectionBoundingVolume::operator new(unsigned int size);
inline void *IntersectionBoundingVolume::operator new(unsigned int size, void *ptr);

1333 15 operator delete 0 4 1493 43 IntersectionBoundingVolume::operator delete 0 0 0
140
inline void IntersectionBoundingVolume::operator delete(void *ptr);
inline void IntersectionBoundingVolume::operator delete(void *, void *);

1334 12 validate_ptr 0 4 1493 40 IntersectionBoundingVolume::validate_ptr 0 0 0
77
static inline bool IntersectionBoundingVolume::validate_ptr(void const *ptr);

1335 18 get_num_components 0 4 1493 46 IntersectionBoundingVolume::get_num_components 0 1 603 299
////////////////////////////////////////////////////////////////////
//     Function: IntersectionBoundingVolume::get_num_components
//       Access: Published
//  Description: Returns the number of components in the intersection.
////////////////////////////////////////////////////////////////////
70
inline int IntersectionBoundingVolume::get_num_components(void) const;

1336 13 get_component 0 4 1493 41 IntersectionBoundingVolume::get_component 0 1 604 287
////////////////////////////////////////////////////////////////////
//     Function: IntersectionBoundingVolume::get_component
//       Access: Published
//  Description: Returns the nth component in the intersection.
////////////////////////////////////////////////////////////////////
93
inline GeometricBoundingVolume const *IntersectionBoundingVolume::get_component(int n) const;

1337 16 clear_components 0 4 1493 44 IntersectionBoundingVolume::clear_components 0 1 605 283
////////////////////////////////////////////////////////////////////
//     Function: IntersectionBoundingVolume::clear_components
//       Access: Published
//  Description: Removes all components from the volume.
////////////////////////////////////////////////////////////////////
56
void IntersectionBoundingVolume::clear_components(void);

1338 13 add_component 0 4 1493 41 IntersectionBoundingVolume::add_component 0 1 606 693
////////////////////////////////////////////////////////////////////
//     Function: IntersectionBoundingVolume::add_component
//       Access: Published
//  Description: Adds a new component to the volume.  This does not
//               necessarily increase the total number of components
//               by one, and you may or may not be able to find this
//               component in the volume by a subsequent call to
//               get_component(); certain optimizations may prevent
//               the component from being added, or have other
//               unexpected effects on the total set of components.
////////////////////////////////////////////////////////////////////
89
void IntersectionBoundingVolume::add_component(GeometricBoundingVolume const *component);

1339 14 get_class_type 0 4 1493 42 IntersectionBoundingVolume::get_class_type 0 1 607 0
67
static TypeHandle IntersectionBoundingVolume::get_class_type(void);

1340 27 ~IntersectionBoundingVolume 0 4 1493 55 IntersectionBoundingVolume::~IntersectionBoundingVolume 0 0 0
62
IntersectionBoundingVolume::~IntersectionBoundingVolume(void);

1341 8 heads_up 0 1 0 8 heads_up 0 24 722 723 724 725 726 727 728 729 730 731 732 733 734 735 736 737 738 739 740 741 742 743 744 745 1390
////////////////////////////////////////////////////////////////////
//     Function: heads_up
//  Description: Given two vectors defining a forward direction and an
//               up vector, constructs the matrix that rotates things
//               from the defined coordinate system to y-forward and
//               z-up.  The up vector will be rotated to z-up first,
//               then the forward vector will be rotated as nearly to
//               y-forward as possible.  This will only have a
//               different effect from look_at() if the forward and up
//               vectors are not perpendicular.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: heads_up
//  Description: Given two vectors defining a forward direction and an
//               up vector, constructs the matrix that rotates things
//               from the defined coordinate system to y-forward and
//               z-up.  The up vector will be rotated to z-up first,
//               then the forward vector will be rotated as nearly to
//               y-forward as possible.  This will only have a
//               different effect from look_at() if the forward and up
//               vectors are not perpendicular.
////////////////////////////////////////////////////////////////////
1255
void heads_up(LMatrix3f &mat, LVector3f const &fwd, LVector3f const &up = ((up())), CoordinateSystem cs = (CS_default));
inline void heads_up(LMatrix3f &mat, LVector3f const &fwd, CoordinateSystem cs);
inline void heads_up(LMatrix4f &mat, LVector3f const &fwd, LVector3f const &up = ((up())), CoordinateSystem cs = (CS_default));
inline void heads_up(LMatrix4f &mat, LVector3f const &fwd, CoordinateSystem cs);
inline void heads_up(LQuaternionf &quat, LVector3f const &fwd, LVector3f const &up = ((up())), CoordinateSystem cs = (CS_default));
inline void heads_up(LQuaternionf &quat, LVector3f const &fwd, CoordinateSystem cs);
void heads_up(LMatrix3d &mat, LVector3d const &fwd, LVector3d const &up = ((up())), CoordinateSystem cs = (CS_default));
inline void heads_up(LMatrix3d &mat, LVector3d const &fwd, CoordinateSystem cs);
inline void heads_up(LMatrix4d &mat, LVector3d const &fwd, LVector3d const &up = ((up())), CoordinateSystem cs = (CS_default));
inline void heads_up(LMatrix4d &mat, LVector3d const &fwd, CoordinateSystem cs);
inline void heads_up(LQuaterniond &quat, LVector3d const &fwd, LVector3d const &up = ((up())), CoordinateSystem cs = (CS_default));
inline void heads_up(LQuaterniond &quat, LVector3d const &fwd, CoordinateSystem cs);

1342 7 look_at 0 1 0 7 look_at 0 24 746 747 748 749 750 751 752 753 754 755 756 757 758 759 760 761 762 763 764 765 766 767 768 769 1390
////////////////////////////////////////////////////////////////////
//     Function: look_at
//  Description: Given two vectors defining a forward direction and an
//               up vector, constructs the matrix that rotates things
//               from the defined coordinate system to y-forward and
//               z-up.  The forward vector will be rotated to
//               y-forward first, then the up vector will be rotated
//               as nearly to z-up as possible.  This will only have a
//               different effect from heads_up() if the forward and
//               up vectors are not perpendicular.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: look_at
//  Description: Given two vectors defining a forward direction and an
//               up vector, constructs the matrix that rotates things
//               from the defined coordinate system to y-forward and
//               z-up.  The forward vector will be rotated to
//               y-forward first, then the up vector will be rotated
//               as nearly to z-up as possible.  This will only have a
//               different effect from heads_up() if the forward and
//               up vectors are not perpendicular.
////////////////////////////////////////////////////////////////////
1243
void look_at(LMatrix3f &mat, LVector3f const &fwd, LVector3f const &up = ((up())), CoordinateSystem cs = (CS_default));
inline void look_at(LMatrix3f &mat, LVector3f const &fwd, CoordinateSystem cs);
inline void look_at(LMatrix4f &mat, LVector3f const &fwd, LVector3f const &up = ((up())), CoordinateSystem cs = (CS_default));
inline void look_at(LMatrix4f &mat, LVector3f const &fwd, CoordinateSystem cs);
inline void look_at(LQuaternionf &quat, LVector3f const &fwd, LVector3f const &up = ((up())), CoordinateSystem cs = (CS_default));
inline void look_at(LQuaternionf &quat, LVector3f const &fwd, CoordinateSystem cs);
void look_at(LMatrix3d &mat, LVector3d const &fwd, LVector3d const &up = ((up())), CoordinateSystem cs = (CS_default));
inline void look_at(LMatrix3d &mat, LVector3d const &fwd, CoordinateSystem cs);
inline void look_at(LMatrix4d &mat, LVector3d const &fwd, LVector3d const &up = ((up())), CoordinateSystem cs = (CS_default));
inline void look_at(LMatrix4d &mat, LVector3d const &fwd, CoordinateSystem cs);
inline void look_at(LQuaterniond &quat, LVector3d const &fwd, LVector3d const &up = ((up())), CoordinateSystem cs = (CS_default));
inline void look_at(LQuaterniond &quat, LVector3d const &fwd, CoordinateSystem cs);

1343 8 Mersenne 0 4 1494 18 Mersenne::Mersenne 0 1 608 35
/* initializes mt[N] with a seed */
43
Mersenne::Mersenne(unsigned long int seed);

1344 10 get_uint31 0 4 1494 20 Mersenne::get_uint31 0 1 609 58
/* generates a random number on [0,0x7fffffff]-interval */
45
unsigned long int Mersenne::get_uint31(void);

1345 9 ~Mersenne 0 4 1494 19 Mersenne::~Mersenne 0 0 0
26
Mersenne::~Mersenne(void);

1346 18 OmniBoundingVolume 0 4 1495 38 OmniBoundingVolume::OmniBoundingVolume 0 1 610 721
// Filename: omniBoundingVolume.I
// Created by:  drose (22Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: OmniBoundingVolume::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
52
inline OmniBoundingVolume::OmniBoundingVolume(void);

1347 14 get_class_type 0 4 1495 34 OmniBoundingVolume::get_class_type 0 1 611 0
59
static TypeHandle OmniBoundingVolume::get_class_type(void);

1348 19 ~OmniBoundingVolume 0 4 1495 39 OmniBoundingVolume::~OmniBoundingVolume 0 0 0
46
OmniBoundingVolume::~OmniBoundingVolume(void);

1349 19 UnionBoundingVolume 0 4 1496 40 UnionBoundingVolume::UnionBoundingVolume 0 1 612 989
// Filename: unionBoundingVolume.I
// Created by:  drose (08Feb12)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: UnionBoundingVolume::Constructor
//       Access: Published
//  Description: Constructs an empty union.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: UnionBoundingVolume::Copy Constructor
//       Access: Public
//  Description: 
////////////////////////////////////////////////////////////////////
54
inline UnionBoundingVolume::UnionBoundingVolume(void);

1350 12 operator new 0 4 1496 33 UnionBoundingVolume::operator new 0 1 613 0
144
inline void *UnionBoundingVolume::operator new(unsigned int size);
inline void *UnionBoundingVolume::operator new(unsigned int size, void *ptr);

1351 15 operator delete 0 4 1496 36 UnionBoundingVolume::operator delete 0 0 0
126
inline void UnionBoundingVolume::operator delete(void *ptr);
inline void UnionBoundingVolume::operator delete(void *, void *);

1352 12 validate_ptr 0 4 1496 33 UnionBoundingVolume::validate_ptr 0 0 0
70
static inline bool UnionBoundingVolume::validate_ptr(void const *ptr);

1353 18 get_num_components 0 4 1496 39 UnionBoundingVolume::get_num_components 0 1 614 285
////////////////////////////////////////////////////////////////////
//     Function: UnionBoundingVolume::get_num_components
//       Access: Published
//  Description: Returns the number of components in the union.
////////////////////////////////////////////////////////////////////
63
inline int UnionBoundingVolume::get_num_components(void) const;

1354 13 get_component 0 4 1496 34 UnionBoundingVolume::get_component 0 1 615 273
////////////////////////////////////////////////////////////////////
//     Function: UnionBoundingVolume::get_component
//       Access: Published
//  Description: Returns the nth component in the union.
////////////////////////////////////////////////////////////////////
86
inline GeometricBoundingVolume const *UnionBoundingVolume::get_component(int n) const;

1355 16 clear_components 0 4 1496 37 UnionBoundingVolume::clear_components 0 1 616 276
////////////////////////////////////////////////////////////////////
//     Function: UnionBoundingVolume::clear_components
//       Access: Published
//  Description: Removes all components from the volume.
////////////////////////////////////////////////////////////////////
49
void UnionBoundingVolume::clear_components(void);

1356 13 add_component 0 4 1496 34 UnionBoundingVolume::add_component 0 1 617 686
////////////////////////////////////////////////////////////////////
//     Function: UnionBoundingVolume::add_component
//       Access: Published
//  Description: Adds a new component to the volume.  This does not
//               necessarily increase the total number of components
//               by one, and you may or may not be able to find this
//               component in the volume by a subsequent call to
//               get_component(); certain optimizations may prevent
//               the component from being added, or have other
//               unexpected effects on the total set of components.
////////////////////////////////////////////////////////////////////
82
void UnionBoundingVolume::add_component(GeometricBoundingVolume const *component);

1357 19 filter_intersection 0 4 1496 40 UnionBoundingVolume::filter_intersection 0 1 618 347
////////////////////////////////////////////////////////////////////
//     Function: UnionBoundingVolume::filter_intersection
//       Access: Published
//  Description: Removes from the union any components that have no
//               intersection with the indicated volume.
////////////////////////////////////////////////////////////////////
76
void UnionBoundingVolume::filter_intersection(BoundingVolume const *volume);

1358 14 get_class_type 0 4 1496 35 UnionBoundingVolume::get_class_type 0 1 619 0
60
static TypeHandle UnionBoundingVolume::get_class_type(void);

1359 20 ~UnionBoundingVolume 0 4 1496 41 UnionBoundingVolume::~UnionBoundingVolume 0 0 0
48
UnionBoundingVolume::~UnionBoundingVolume(void);

1360 10 Randomizer 0 4 1497 22 Randomizer::Randomizer 0 3 620 621 622 1044
// Filename: randomizer.I
// Created by:  drose (18Jan07)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: Randomizer::Constructor
//       Access: Public
//  Description: If seed is nonzero, it is used to define the tables;
//               if it is zero a random seed is generated.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Randomizer::Copy Constructor
//       Access: Public
//  Description: 
////////////////////////////////////////////////////////////////////
115
inline Randomizer::Randomizer(unsigned long int seed = (0));
inline Randomizer::Randomizer(Randomizer const &copy);

1361 10 operator = 0 4 1497 22 Randomizer::operator = 0 1 623 233
////////////////////////////////////////////////////////////////////
//     Function: Randomizer::Copy Assignment Operator
//       Access: Public
//  Description: 
////////////////////////////////////////////////////////////////////
59
inline void Randomizer::operator =(Randomizer const &copy);

1362 10 random_int 0 4 1497 22 Randomizer::random_int 0 1 624 268
////////////////////////////////////////////////////////////////////
//     Function: Randomizer::random_int
//       Access: Public
//  Description: Returns a random integer in the range [0, range).
////////////////////////////////////////////////////////////////////
45
inline int Randomizer::random_int(int range);

1363 11 random_real 0 4 1497 23 Randomizer::random_real 0 1 625 268
////////////////////////////////////////////////////////////////////
//     Function: Randomizer::random_real
//       Access: Public
//  Description: Returns a random double in the range [0, range).
////////////////////////////////////////////////////////////////////
52
inline double Randomizer::random_real(double range);

1364 16 random_real_unit 0 4 1497 28 Randomizer::random_real_unit 0 1 626 274
////////////////////////////////////////////////////////////////////
//     Function: Randomizer::random_real_unit
//       Access: Public
//  Description: Returns a random double in the range [-0.5, 0.5).
////////////////////////////////////////////////////////////////////
49
inline double Randomizer::random_real_unit(void);

1365 13 get_next_seed 0 4 1497 25 Randomizer::get_next_seed 0 1 627 313
////////////////////////////////////////////////////////////////////
//     Function: Randomizer::get_next_seed
//       Access: Public, Static
//  Description: Returns a random seed value for the next global
//               Randomizer object.
////////////////////////////////////////////////////////////////////
64
static inline unsigned long int Randomizer::get_next_seed(void);

1366 8 get_seed 0 4 1497 20 Randomizer::get_seed 0 1 628 363
////////////////////////////////////////////////////////////////////
//     Function: Randomizer::get_seed
//       Access: Public
//  Description: Returns a unique seed value based on the seed value
//               passed to this Randomizer object (and on its current
//               state).
////////////////////////////////////////////////////////////////////
52
inline unsigned long int Randomizer::get_seed(void);

1367 11 ~Randomizer 0 4 1497 23 Randomizer::~Randomizer 0 0 0
30
Randomizer::~Randomizer(void);

1368 8 get_seed 0 4 1498 21 PerlinNoise::get_seed 0 1 629 368
////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise::get_seed
//       Access: Published
//  Description: Returns a unique seed value based on the seed value
//               passed to this PerlinNoise object (and on its current
//               state).
////////////////////////////////////////////////////////////////////
53
inline unsigned long int PerlinNoise::get_seed(void);

1369 12 ~PerlinNoise 0 4 1498 25 PerlinNoise::~PerlinNoise 0 0 0
32
PerlinNoise::~PerlinNoise(void);

1370 12 PerlinNoise2 0 4 1499 26 PerlinNoise2::PerlinNoise2 0 5 630 631 632 633 634 1633
// Filename: perlinNoise2.I
// Created by:  drose (05Oct05)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise2::Default Constructor
//       Access: Published
//  Description: Randomizes the tables to make a unique noise
//               function.  Uses a default scale (noise frequency),
//               table size, and seed.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise2::Constructor
//       Access: Published
//  Description: Randomizes the tables to make a unique noise
//               function.
//
//               If seed is nonzero, it is used to define the tables;
//               if it is zero a random seed is generated.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise2::Copy Constructor
//       Access: Published
//  Description: Makes an exact copy of the existing PerlinNoise
//               object, including its random seed.
////////////////////////////////////////////////////////////////////
212
inline PerlinNoise2::PerlinNoise2(void);
inline PerlinNoise2::PerlinNoise2(double sx, double sy, int table_size = (256), unsigned long int seed = (0));
inline PerlinNoise2::PerlinNoise2(PerlinNoise2 const &copy);

1371 10 operator = 0 4 1499 24 PerlinNoise2::operator = 0 1 635 337
////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise2::Copy Assignment Operator
//       Access: Published
//  Description: Makes an exact copy of the existing PerlinNoise
//               object, including its random seed.
////////////////////////////////////////////////////////////////////
63
inline void PerlinNoise2::operator =(PerlinNoise2 const &copy);

1372 9 set_scale 0 4 1499 23 PerlinNoise2::set_scale 0 4 636 637 638 639 1070
////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise2::set_scale
//       Access: Published
//  Description: Changes the scale (frequency) of the noise.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise2::set_scale
//       Access: Published
//  Description: Changes the scale (frequency) of the noise.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise2::set_scale
//       Access: Published
//  Description: Changes the scale (frequency) of the noise.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise2::set_scale
//       Access: Published
//  Description: Changes the scale (frequency) of the noise.
////////////////////////////////////////////////////////////////////
233
inline void PerlinNoise2::set_scale(double scale);
inline void PerlinNoise2::set_scale(double sx, double sy);
inline void PerlinNoise2::set_scale(LVecBase2f const &scale);
inline void PerlinNoise2::set_scale(LVecBase2d const &scale);

1373 5 noise 0 4 1499 19 PerlinNoise2::noise 0 3 640 641 642 802
////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise2::noise
//       Access: Published
//  Description: Returns the noise function of the three inputs.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise2::noise
//       Access: Published
//  Description: Returns the noise function of the three inputs.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise2::noise
//       Access: Published
//  Description: Returns the noise function of the three inputs.
////////////////////////////////////////////////////////////////////
184
inline double PerlinNoise2::noise(double x, double y) const;
inline float PerlinNoise2::noise(LVecBase2f const &value) const;
double PerlinNoise2::noise(LVecBase2d const &value) const;

1374 11 operator () 0 4 1499 25 PerlinNoise2::operator () 0 3 643 644 645 802
////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise2::operator ()
//       Access: Published
//  Description: Returns the noise function of the two inputs.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise2::noise
//       Access: Published
//  Description: Returns the noise function of the two inputs.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise2::noise
//       Access: Published
//  Description: Returns the noise function of the two inputs.
////////////////////////////////////////////////////////////////////
209
inline double PerlinNoise2::operator ()(double x, double y) const;
inline float PerlinNoise2::operator ()(LVecBase2f const &value) const;
inline double PerlinNoise2::operator ()(LVecBase2d const &value) const;

1375 13 ~PerlinNoise2 0 4 1499 27 PerlinNoise2::~PerlinNoise2 0 0 0
34
PerlinNoise2::~PerlinNoise2(void);

1376 12 PerlinNoise3 0 4 1500 26 PerlinNoise3::PerlinNoise3 0 5 646 647 648 649 650 1633
// Filename: perlinNoise3.I
// Created by:  drose (05Oct05)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise3::Default Constructor
//       Access: Published
//  Description: Randomizes the tables to make a unique noise
//               function.  Uses a default scale (noise frequency),
//               table size, and seed.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise3::Constructor
//       Access: Published
//  Description: Randomizes the tables to make a unique noise
//               function.
//
//               If seed is nonzero, it is used to define the tables;
//               if it is zero a random seed is generated.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise3::Copy Constructor
//       Access: Published
//  Description: Makes an exact copy of the existing PerlinNoise
//               object, including its random seed.
////////////////////////////////////////////////////////////////////
223
inline PerlinNoise3::PerlinNoise3(void);
inline PerlinNoise3::PerlinNoise3(double sx, double sy, double sz, int table_size = (256), unsigned long int seed = (0));
inline PerlinNoise3::PerlinNoise3(PerlinNoise3 const &copy);

1377 10 operator = 0 4 1500 24 PerlinNoise3::operator = 0 1 651 337
////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise3::Copy Assignment Operator
//       Access: Published
//  Description: Makes an exact copy of the existing PerlinNoise
//               object, including its random seed.
////////////////////////////////////////////////////////////////////
63
inline void PerlinNoise3::operator =(PerlinNoise3 const &copy);

1378 9 set_scale 0 4 1500 23 PerlinNoise3::set_scale 0 4 652 653 654 655 1070
////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise3::set_scale
//       Access: Published
//  Description: Changes the scale (frequency) of the noise.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise3::set_scale
//       Access: Published
//  Description: Changes the scale (frequency) of the noise.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise3::set_scale
//       Access: Published
//  Description: Changes the scale (frequency) of the noise.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise3::set_scale
//       Access: Published
//  Description: Changes the scale (frequency) of the noise.
////////////////////////////////////////////////////////////////////
244
inline void PerlinNoise3::set_scale(double scale);
inline void PerlinNoise3::set_scale(double sx, double sy, double sz);
inline void PerlinNoise3::set_scale(LVecBase3f const &scale);
inline void PerlinNoise3::set_scale(LVecBase3d const &scale);

1379 5 noise 0 4 1500 19 PerlinNoise3::noise 0 3 656 657 658 802
////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise3::noise
//       Access: Published
//  Description: Returns the noise function of the three inputs.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise3::noise
//       Access: Published
//  Description: Returns the noise function of the three inputs.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise3::noise
//       Access: Published
//  Description: Returns the noise function of the three inputs.
////////////////////////////////////////////////////////////////////
194
inline double PerlinNoise3::noise(double x, double y, double z) const;
inline float PerlinNoise3::noise(LVecBase3f const &value) const;
double PerlinNoise3::noise(LVecBase3d const &value) const;

1380 11 operator () 0 4 1500 25 PerlinNoise3::operator () 0 3 659 660 661 808
////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise3::operator ()
//       Access: Published
//  Description: Returns the noise function of the three inputs.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise3::noise
//       Access: Published
//  Description: Returns the noise function of the three inputs.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise3::noise
//       Access: Published
//  Description: Returns the noise function of the three inputs.
////////////////////////////////////////////////////////////////////
219
inline double PerlinNoise3::operator ()(double x, double y, double z) const;
inline float PerlinNoise3::operator ()(LVecBase3f const &value) const;
inline double PerlinNoise3::operator ()(LVecBase3d const &value) const;

1381 13 ~PerlinNoise3 0 4 1500 27 PerlinNoise3::~PerlinNoise3 0 0 0
34
PerlinNoise3::~PerlinNoise3(void);

1382 9 rotate_to 0 1 0 9 rotate_to 0 4 770 771 772 773 0
287
void rotate_to(LMatrix3f &mat, LVector3f const &a, LVector3f const &b);
void rotate_to(LMatrix3d &mat, LVector3d const &a, LVector3d const &b);
void rotate_to(LMatrix4f &mat, LVector3f const &a, LVector3f const &b);
void rotate_to(LMatrix4d &mat, LVector3d const &a, LVector3d const &b);

1383 19 StackedPerlinNoise2 0 4 1501 40 StackedPerlinNoise2::StackedPerlinNoise2 0 8 662 663 664 665 666 667 668 669 1865
// Filename: stackedPerlinNoise2.I
// Created by:  drose (05Oct05)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise2::Default Constructor
//       Access: Published
//  Description: Creates a StackedPerlinNoise2 object with no levels.
//               You should call add_level() to add each level by
//               hand.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise2::Constructor
//       Access: Published
//  Description: Creates num_levels nested PerlinNoise2 objects.  Each
//               stacked Perlin object will have a scale of 1 /
//               scale_factor times the previous object (so that it is
//               higher-frequency, if scale_factor > 1), and an
//               amplitude of amp_scale times the previous object (so
//               that it is less important, if amp_scale < 1).
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise2::Copy Constructor
//       Access: Published
//  Description: Creates an exact duplicate of the existing
//               StackedPerlinNoise2 object, including the random
//               seed.
////////////////////////////////////////////////////////////////////
322
inline StackedPerlinNoise2::StackedPerlinNoise2(void);
StackedPerlinNoise2::StackedPerlinNoise2(double sx, double sy, int num_levels = (2), double scale_factor = (4), double amp_scale = (0.5), int table_size = (256), unsigned long int seed = (0));
StackedPerlinNoise2::StackedPerlinNoise2(StackedPerlinNoise2 const &copy);

1384 10 operator = 0 4 1501 31 StackedPerlinNoise2::operator = 0 1 670 376
////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise2::Copy Assignment Operator
//       Access: Published
//  Description: Creates an exact duplicate of the existing
//               StackedPerlinNoise2 object, including the random
//               seed.
////////////////////////////////////////////////////////////////////
70
void StackedPerlinNoise2::operator =(StackedPerlinNoise2 const &copy);

1385 9 add_level 0 4 1501 30 StackedPerlinNoise2::add_level 0 2 671 672 328
////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise2::add_level
//       Access: Published
//  Description: Adds an arbitrary PerlinNoise2 object, and an
//               associated amplitude, to the stack.
////////////////////////////////////////////////////////////////////
81
void StackedPerlinNoise2::add_level(PerlinNoise2 const &level, double amp = (1));

1386 5 clear 0 4 1501 26 StackedPerlinNoise2::clear 0 1 673 327
////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise2::clear
//       Access: Published
//  Description: Removes all levels from the stack.  You must call
//               add_level() again to restore them.
////////////////////////////////////////////////////////////////////
38
void StackedPerlinNoise2::clear(void);

1387 5 noise 0 4 1501 26 StackedPerlinNoise2::noise 0 3 674 675 676 823
////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise2::noise
//       Access: Published
//  Description: Returns the noise function of the three inputs.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise2::noise
//       Access: Published
//  Description: Returns the noise function of the three inputs.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise2::noise
//       Access: Published
//  Description: Returns the noise function of the three inputs.
////////////////////////////////////////////////////////////////////
187
inline double StackedPerlinNoise2::noise(double x, double y);
inline float StackedPerlinNoise2::noise(LVecBase2f const &value);
double StackedPerlinNoise2::noise(LVecBase2d const &value);

1388 11 operator () 0 4 1501 32 StackedPerlinNoise2::operator () 0 3 677 678 679 829
////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise2::operator ()
//       Access: Published
//  Description: Returns the noise function of the three inputs.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise2::noise
//       Access: Published
//  Description: Returns the noise function of the three inputs.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise2::noise
//       Access: Published
//  Description: Returns the noise function of the three inputs.
////////////////////////////////////////////////////////////////////
212
inline double StackedPerlinNoise2::operator ()(double x, double y);
inline float StackedPerlinNoise2::operator ()(LVecBase2f const &value);
inline double StackedPerlinNoise2::operator ()(LVecBase2d const &value);

1389 20 ~StackedPerlinNoise2 0 4 1501 41 StackedPerlinNoise2::~StackedPerlinNoise2 0 0 0
48
StackedPerlinNoise2::~StackedPerlinNoise2(void);

1390 19 StackedPerlinNoise3 0 4 1502 40 StackedPerlinNoise3::StackedPerlinNoise3 0 8 680 681 682 683 684 685 686 687 1865
// Filename: stackedPerlinNoise3.I
// Created by:  drose (05Oct05)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise3::Default Constructor
//       Access: Published
//  Description: Creates a StackedPerlinNoise3 object with no levels.
//               You should call add_level() to add each level by
//               hand.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise3::Constructor
//       Access: Published
//  Description: Creates num_levels nested PerlinNoise3 objects.  Each
//               stacked Perlin object will have a scale of 1 /
//               scale_factor times the previous object (so that it is
//               higher-frequency, if scale_factor > 1), and an
//               amplitude of amp_scale times the previous object (so
//               that it is less important, if amp_scale < 1).
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise3::Copy Constructor
//       Access: Published
//  Description: Creates an exact duplicate of the existing
//               StackedPerlinNoise3 object, including the random
//               seed.
////////////////////////////////////////////////////////////////////
333
inline StackedPerlinNoise3::StackedPerlinNoise3(void);
StackedPerlinNoise3::StackedPerlinNoise3(double sx, double sy, double sz, int num_levels = (3), double scale_factor = (4), double amp_scale = (0.5), int table_size = (256), unsigned long int seed = (0));
StackedPerlinNoise3::StackedPerlinNoise3(StackedPerlinNoise3 const &copy);

1391 10 operator = 0 4 1502 31 StackedPerlinNoise3::operator = 0 1 688 376
////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise3::Copy Assignment Operator
//       Access: Published
//  Description: Creates an exact duplicate of the existing
//               StackedPerlinNoise3 object, including the random
//               seed.
////////////////////////////////////////////////////////////////////
70
void StackedPerlinNoise3::operator =(StackedPerlinNoise3 const &copy);

1392 9 add_level 0 4 1502 30 StackedPerlinNoise3::add_level 0 2 689 690 328
////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise3::add_level
//       Access: Published
//  Description: Adds an arbitrary PerlinNoise3 object, and an
//               associated amplitude, to the stack.
////////////////////////////////////////////////////////////////////
81
void StackedPerlinNoise3::add_level(PerlinNoise3 const &level, double amp = (1));

1393 5 clear 0 4 1502 26 StackedPerlinNoise3::clear 0 1 691 327
////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise3::clear
//       Access: Published
//  Description: Removes all levels from the stack.  You must call
//               add_level() again to restore them.
////////////////////////////////////////////////////////////////////
38
void StackedPerlinNoise3::clear(void);

1394 5 noise 0 4 1502 26 StackedPerlinNoise3::noise 0 3 692 693 694 823
////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise3::noise
//       Access: Published
//  Description: Returns the noise function of the three inputs.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise3::noise
//       Access: Published
//  Description: Returns the noise function of the three inputs.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise3::noise
//       Access: Published
//  Description: Returns the noise function of the three inputs.
////////////////////////////////////////////////////////////////////
197
inline double StackedPerlinNoise3::noise(double x, double y, double z);
inline float StackedPerlinNoise3::noise(LVecBase3f const &value);
double StackedPerlinNoise3::noise(LVecBase3d const &value);

1395 11 operator () 0 4 1502 32 StackedPerlinNoise3::operator () 0 3 695 696 697 829
////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise3::operator ()
//       Access: Published
//  Description: Returns the noise function of the three inputs.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise3::noise
//       Access: Published
//  Description: Returns the noise function of the three inputs.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise3::noise
//       Access: Published
//  Description: Returns the noise function of the three inputs.
////////////////////////////////////////////////////////////////////
222
inline double StackedPerlinNoise3::operator ()(double x, double y, double z);
inline float StackedPerlinNoise3::operator ()(LVecBase3f const &value);
inline double StackedPerlinNoise3::operator ()(LVecBase3d const &value);

1396 20 ~StackedPerlinNoise3 0 4 1502 41 StackedPerlinNoise3::~StackedPerlinNoise3 0 0 0
48
StackedPerlinNoise3::~StackedPerlinNoise3(void);

1397 12 Triangulator 0 4 1503 26 Triangulator::Triangulator 0 1 698 225
////////////////////////////////////////////////////////////////////
//     Function: Triangulator::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
33
Triangulator::Triangulator(void);

1398 5 clear 0 4 1503 19 Triangulator::clear 0 1 699 337
////////////////////////////////////////////////////////////////////
//     Function: Triangulator::clear
//       Access: Published
//  Description: Removes all vertices and polygon specifications from
//               the Triangulator, and prepares it to start over.
////////////////////////////////////////////////////////////////////
31
void Triangulator::clear(void);

1399 10 add_vertex 0 4 1503 24 Triangulator::add_vertex 0 2 700 701 1114
// Filename: triangulator.I
// Created by:  drose (18Jan07)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: Triangulator::add_vertex
//       Access: Published
//  Description: Adds a new vertex to the vertex pool.  Returns the
//               vertex index number.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Triangulator::add_vertex
//       Access: Published
//  Description: Adds a new vertex to the vertex pool.  Returns the
//               vertex index number.
////////////////////////////////////////////////////////////////////
109
int Triangulator::add_vertex(LPoint2d const &point);
inline int Triangulator::add_vertex(double x, double y);

1400 16 get_num_vertices 0 4 1503 30 Triangulator::get_num_vertices 0 1 702 545
////////////////////////////////////////////////////////////////////
//     Function: Triangulator::get_num_vertices
//       Access: Published
//  Description: Returns the number of vertices in the pool.  Note
//               that the Triangulator might append new vertices, in
//               addition to those added by the user, if any of the
//               polygon is self-intersecting, or if any of the holes
//               intersect some part of the polygon edges.
////////////////////////////////////////////////////////////////////
54
inline int Triangulator::get_num_vertices(void) const;

1401 10 get_vertex 0 4 1503 24 Triangulator::get_vertex 0 1 703 247
////////////////////////////////////////////////////////////////////
//     Function: Triangulator::get_vertex
//       Access: Published
//  Description: Returns the nth vertex.
////////////////////////////////////////////////////////////////////
61
inline LPoint2d const &Triangulator::get_vertex(int n) const;

1402 13 clear_polygon 0 4 1503 27 Triangulator::clear_polygon 0 1 704 342
////////////////////////////////////////////////////////////////////
//     Function: Triangulator::clear_polygon
//       Access: Published
//  Description: Removes the current polygon definition (and its set
//               of holes), but does not clear the vertex pool.
////////////////////////////////////////////////////////////////////
39
void Triangulator::clear_polygon(void);

1403 18 add_polygon_vertex 0 4 1503 32 Triangulator::add_polygon_vertex 0 1 705 645
////////////////////////////////////////////////////////////////////
//     Function: Triangulator::add_polygon_vertex
//       Access: Published
//  Description: Adds the next consecutive vertex of the polygon.
//               This vertex should index into the vertex pool
//               established by repeated calls to add_vertex().
//
//               The vertices may be listed in either clockwise or
//               counterclockwise order.  Vertices should not be
//               repeated.  In particular, do not repeat the first
//               vertex at the end.
////////////////////////////////////////////////////////////////////
49
void Triangulator::add_polygon_vertex(int index);

1404 15 is_left_winding 0 4 1503 29 Triangulator::is_left_winding 0 1 706 394
////////////////////////////////////////////////////////////////////
//     Function: Triangulator::is_left_winding
//       Access: Published
//  Description: Returns true if the polygon vertices are listed in
//               counterclockwise order, or false if they appear to be
//               listed in clockwise order.
////////////////////////////////////////////////////////////////////
54
inline bool Triangulator::is_left_winding(void) const;

1405 10 begin_hole 0 4 1503 24 Triangulator::begin_hole 0 1 707 308
////////////////////////////////////////////////////////////////////
//     Function: Triangulator::begin_hole
//       Access: Published
//  Description: Finishes the previous hole, if any, and prepares to
//               add a new hole.
////////////////////////////////////////////////////////////////////
36
void Triangulator::begin_hole(void);

1406 15 add_hole_vertex 0 4 1503 29 Triangulator::add_hole_vertex 0 1 708 571
////////////////////////////////////////////////////////////////////
//     Function: Triangulator::add_hole_vertex
//       Access: Published
//  Description: Adds the next consecutive vertex of the current hole.
//               This vertex should index into the vertex pool
//               established by repeated calls to add_vertex().
//
//               The vertices may be listed in either clockwise or
//               counterclockwise order.  Vertices should not be
//               repeated.
////////////////////////////////////////////////////////////////////
46
void Triangulator::add_hole_vertex(int index);

1407 11 triangulate 0 4 1503 25 Triangulator::triangulate 0 1 709 439
////////////////////////////////////////////////////////////////////
//     Function: Triangulator::triangulate
//       Access: Published
//  Description: Does the work of triangulating the specified polygon.
//               After this call, you may retrieve the new triangles
//               one at a time by iterating through
//               get_triangle_v0/1/2().
////////////////////////////////////////////////////////////////////
37
void Triangulator::triangulate(void);

1408 17 get_num_triangles 0 4 1503 31 Triangulator::get_num_triangles 0 1 710 328
////////////////////////////////////////////////////////////////////
//     Function: Triangulator::get_num_triangles
//       Access: Published
//  Description: Returns the number of triangles generated by the
//               previous call to triangulate().
////////////////////////////////////////////////////////////////////
48
int Triangulator::get_num_triangles(void) const;

1409 15 get_triangle_v0 0 4 1503 29 Triangulator::get_triangle_v0 0 1 711 454
////////////////////////////////////////////////////////////////////
//     Function: Triangulator::get_triangle_v0
//       Access: Published
//  Description: Returns vertex 0 of the nth triangle generated by the
//               previous call to triangulate().
//
//               This is a zero-based index into the vertices added by
//               repeated calls to add_vertex().
////////////////////////////////////////////////////////////////////
47
int Triangulator::get_triangle_v0(int n) const;

1410 15 get_triangle_v1 0 4 1503 29 Triangulator::get_triangle_v1 0 1 712 454
////////////////////////////////////////////////////////////////////
//     Function: Triangulator::get_triangle_v1
//       Access: Published
//  Description: Returns vertex 1 of the nth triangle generated by the
//               previous call to triangulate().
//
//               This is a zero-based index into the vertices added by
//               repeated calls to add_vertex().
////////////////////////////////////////////////////////////////////
47
int Triangulator::get_triangle_v1(int n) const;

1411 15 get_triangle_v2 0 4 1503 29 Triangulator::get_triangle_v2 0 1 713 454
////////////////////////////////////////////////////////////////////
//     Function: Triangulator::get_triangle_v2
//       Access: Published
//  Description: Returns vertex 2 of the nth triangle generated by the
//               previous call to triangulate().
//
//               This is a zero-based index into the vertices added by
//               repeated calls to add_vertex().
////////////////////////////////////////////////////////////////////
47
int Triangulator::get_triangle_v2(int n) const;

1412 13 ~Triangulator 0 4 1503 27 Triangulator::~Triangulator 0 0 0
34
Triangulator::~Triangulator(void);

1413 13 Triangulator3 0 4 1504 28 Triangulator3::Triangulator3 0 1 714 226
////////////////////////////////////////////////////////////////////
//     Function: Triangulator3::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
35
Triangulator3::Triangulator3(void);

1414 5 clear 0 4 1504 20 Triangulator3::clear 0 1 715 338
////////////////////////////////////////////////////////////////////
//     Function: Triangulator3::clear
//       Access: Published
//  Description: Removes all vertices and polygon specifications from
//               the Triangulator, and prepares it to start over.
////////////////////////////////////////////////////////////////////
32
void Triangulator3::clear(void);

1415 10 add_vertex 0 4 1504 25 Triangulator3::add_vertex 0 2 716 717 1117
// Filename: triangulator3.I
// Created by:  drose (03Jan13)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: Triangulator3::add_vertex
//       Access: Published
//  Description: Adds a new vertex to the vertex pool.  Returns the
//               vertex index number.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Triangulator3::add_vertex
//       Access: Published
//  Description: Adds a new vertex to the vertex pool.  Returns the
//               vertex index number.
////////////////////////////////////////////////////////////////////
121
int Triangulator3::add_vertex(LPoint3d const &point);
inline int Triangulator3::add_vertex(double x, double y, double z);

1416 16 get_num_vertices 0 4 1504 31 Triangulator3::get_num_vertices 0 1 718 546
////////////////////////////////////////////////////////////////////
//     Function: Triangulator3::get_num_vertices
//       Access: Published
//  Description: Returns the number of vertices in the pool.  Note
//               that the Triangulator might append new vertices, in
//               addition to those added by the user, if any of the
//               polygon is self-intersecting, or if any of the holes
//               intersect some part of the polygon edges.
////////////////////////////////////////////////////////////////////
55
inline int Triangulator3::get_num_vertices(void) const;

1417 10 get_vertex 0 4 1504 25 Triangulator3::get_vertex 0 1 719 248
////////////////////////////////////////////////////////////////////
//     Function: Triangulator3::get_vertex
//       Access: Published
//  Description: Returns the nth vertex.
////////////////////////////////////////////////////////////////////
62
inline LPoint3d const &Triangulator3::get_vertex(int n) const;

1418 11 triangulate 0 4 1504 26 Triangulator3::triangulate 0 1 720 440
////////////////////////////////////////////////////////////////////
//     Function: Triangulator3::triangulate
//       Access: Published
//  Description: Does the work of triangulating the specified polygon.
//               After this call, you may retrieve the new triangles
//               one at a time by iterating through
//               get_triangle_v0/1/2().
////////////////////////////////////////////////////////////////////
38
void Triangulator3::triangulate(void);

1419 9 get_plane 0 4 1504 24 Triangulator3::get_plane 0 1 721 327
////////////////////////////////////////////////////////////////////
//     Function: Triangulator3::get_plane
//       Access: Published
//  Description: Returns the plane of the polygon.  This is only
//               available after calling triangulate().
////////////////////////////////////////////////////////////////////
59
inline LPlaned const &Triangulator3::get_plane(void) const;

1420 14 ~Triangulator3 0 4 1504 29 Triangulator3::~Triangulator3 0 0 0
36
Triangulator3::~Triangulator3(void);

773
1 14 Dtool_LL_p8UqP 0 7 8 1507 787 14 Dtool_LL_p8UqP 0 1 4 copy 1 1505  
2 14 Dtool_LL_pBbKJ 0 7 8 1507 787 14 Dtool_LL_pBbKJ 0 1 4 copy 1 1508  
3 14 Dtool_LL_pkmAP 0 7 8 1507 787 14 Dtool_LL_pkmAP 0 2 4 self 1 1510  6 source 1 1510  
4 14 Dtool_LL_pLoYb 0 6 9 1512 0 14 Dtool_LL_pLoYb 0 1 4 this 3 1505  
5 14 Dtool_LL_pdtz1 0 6 10 1513 0 14 Dtool_LL_pdtz1 0 2 4 this 3 1505  1 n 1 1512  
6 14 Dtool_LL_pyBEt 0 6 11 1513 0 14 Dtool_LL_pyBEt 0 2 4 this 3 1505  1 n 1 1512  
7 14 Dtool_LL_p4SAf 0 6 12 1516 0 14 Dtool_LL_p4SAf 0 1 4 this 3 1505  
8 14 Dtool_LL_pIPQw 0 6 13 1516 0 14 Dtool_LL_pIPQw 0 3 4 this 3 1505  1 n 1 1512  5 count 1 1512  
9 14 Dtool_LL_py8mi 0 6 14 1517 0 14 Dtool_LL_py8mi 0 1 4 this 3 1505  
10 14 Dtool_LL_pVkxg 0 6 15 1517 0 14 Dtool_LL_pVkxg 0 1 4 this 3 1505  
11 14 Dtool_LL_pQFDq 0 6 16 1517 0 14 Dtool_LL_pQFDq 0 4 4 this 3 1505  4 self 1 1510  4 view 1 1518  5 flags 1 1517  
12 14 Dtool_LL_phMem 0 4 17 1520 0 14 Dtool_LL_phMem 0 3 4 this 3 1505  4 self 1 1510  4 view 1 1518  
13 14 Dtool_LL_pPOpe 0 4 5 1520 0 14 Dtool_LL_pPOpe 0 1 4 this 3 1521  
14 14 Dtool_LL_pEcA1 0 4 6 1520 0 14 Dtool_LL_pEcA1 0 2 4 this 3 1522  3 out 1 1524  
15 14 Dtool_LL_prVxk 0 7 25 1528 801 14 Dtool_LL_prVxk 0 1 4 copy 1 1526  
16 14 Dtool_LL_ppaza 0 7 25 1528 801 14 Dtool_LL_ppaza 0 1 4 copy 1 1529  
17 14 Dtool_LL_pnmHd 0 7 25 1528 801 14 Dtool_LL_pnmHd 0 2 4 self 1 1510  6 source 1 1510  
18 14 Dtool_LL_pKofp 0 6 26 1512 0 14 Dtool_LL_pKofp 0 1 4 this 3 1526  
19 14 Dtool_LL_pft6D 0 6 27 1531 0 14 Dtool_LL_pft6D 0 2 4 this 3 1526  1 n 1 1512  
20 14 Dtool_LL_p1BL7 0 6 28 1531 0 14 Dtool_LL_p1BL7 0 2 4 this 3 1526  1 n 1 1512  
21 14 Dtool_LL_p_SHt 0 6 29 1516 0 14 Dtool_LL_p_SHt 0 1 4 this 3 1526  
22 14 Dtool_LL_pJPZ_ 0 6 30 1516 0 14 Dtool_LL_pJPZ_ 0 3 4 this 3 1526  1 n 1 1512  5 count 1 1512  
23 14 Dtool_LL_px8tw 0 6 31 1517 0 14 Dtool_LL_px8tw 0 1 4 this 3 1526  
24 14 Dtool_LL_pUk4u 0 6 32 1517 0 14 Dtool_LL_pUk4u 0 1 4 this 3 1526  
25 14 Dtool_LL_pTFK4 0 6 33 1517 0 14 Dtool_LL_pTFK4 0 4 4 this 3 1526  4 self 1 1510  4 view 1 1518  5 flags 1 1517  
26 14 Dtool_LL_piMl0 0 4 34 1520 0 14 Dtool_LL_piMl0 0 3 4 this 3 1526  4 self 1 1510  4 view 1 1518  
27 14 Dtool_LL_pPF3f 0 4 22 1520 0 14 Dtool_LL_pPF3f 0 1 4 this 3 1534  
28 14 Dtool_LL_pEXO2 0 4 23 1520 0 14 Dtool_LL_pEXO2 0 2 4 this 3 1535  3 out 1 1524  
29 14 Dtool_LL_p6k38 0 7 42 1539 815 14 Dtool_LL_p6k38 0 1 4 copy 1 1537  
30 14 Dtool_LL_pn6GJ 0 7 42 1539 815 14 Dtool_LL_pn6GJ 0 1 4 copy 1 1540  
31 14 Dtool_LL_pjKdf 0 7 42 1539 815 14 Dtool_LL_pjKdf 0 2 4 self 1 1510  6 source 1 1510  
32 14 Dtool_LL_pGRVp 0 6 43 1512 0 14 Dtool_LL_pGRVp 0 1 4 this 3 1537  
33 14 Dtool_LL_pcDC4 0 6 44 1542 0 14 Dtool_LL_pcDC4 0 2 4 this 3 1537  1 n 1 1512  
34 14 Dtool_LL_pCq1g 0 6 45 1542 0 14 Dtool_LL_pCq1g 0 2 4 this 3 1537  1 n 1 1512  
35 14 Dtool_LL_pIjLd 0 6 46 1516 0 14 Dtool_LL_pIjLd 0 1 4 this 3 1537  
36 14 Dtool_LL_pa_qG 0 6 47 1516 0 14 Dtool_LL_pa_qG 0 3 4 this 3 1537  1 n 1 1512  5 count 1 1512  
37 14 Dtool_LL_pzjgQ 0 6 48 1517 0 14 Dtool_LL_pzjgQ 0 1 4 this 3 1537  
38 14 Dtool_LL_pCwxW 0 6 49 1517 0 14 Dtool_LL_pCwxW 0 1 4 this 3 1537  
39 14 Dtool_LL_pQ0OC 0 6 50 1517 0 14 Dtool_LL_pQ0OC 0 4 4 this 3 1537  4 self 1 1510  4 view 1 1518  5 flags 1 1517  
40 14 Dtool_LL_pbnUP 0 4 51 1520 0 14 Dtool_LL_pbnUP 0 3 4 this 3 1537  4 self 1 1510  4 view 1 1518  
41 14 Dtool_LL_pnoEy 0 4 39 1520 0 14 Dtool_LL_pnoEy 0 1 4 this 3 1545  
42 14 Dtool_LL_p6Pu_ 0 4 40 1520 0 14 Dtool_LL_p6Pu_ 0 2 4 this 3 1546  3 out 1 1524  
43 14 Dtool_LL_piMrA 0 7 59 1550 829 14 Dtool_LL_piMrA 0 1 4 copy 1 1548  
44 14 Dtool_LL_p2OwM 0 7 59 1550 829 14 Dtool_LL_p2OwM 0 1 4 copy 1 1551  
45 14 Dtool_LL_pKK9i 0 7 59 1550 829 14 Dtool_LL_pKK9i 0 2 4 self 1 1510  6 source 1 1510  
46 14 Dtool_LL_phR1s 0 6 60 1512 0 14 Dtool_LL_phR1s 0 1 4 this 3 1548  
47 14 Dtool_LL_pFCi7 0 6 61 1553 0 14 Dtool_LL_pFCi7 0 2 4 this 3 1548  1 n 1 1512  
48 14 Dtool_LL_p5qVk 0 6 62 1553 0 14 Dtool_LL_p5qVk 0 2 4 this 3 1548  1 n 1 1512  
49 14 Dtool_LL_pvjrg 0 6 63 1516 0 14 Dtool_LL_pvjrg 0 1 4 this 3 1548  
50 14 Dtool_LL_pz9KK 0 6 64 1516 0 14 Dtool_LL_pz9KK 0 3 4 this 3 1548  1 n 1 1512  5 count 1 1512  
51 14 Dtool_LL_pUjAU 0 6 65 1517 0 14 Dtool_LL_pUjAU 0 1 4 this 3 1548  
52 14 Dtool_LL_plwRa 0 6 66 1517 0 14 Dtool_LL_plwRa 0 1 4 this 3 1548  
53 14 Dtool_LL_pr1uF 0 6 67 1517 0 14 Dtool_LL_pr1uF 0 4 4 this 3 1548  4 self 1 1510  4 view 1 1518  5 flags 1 1517  
54 14 Dtool_LL_pAm0S 0 4 68 1520 0 14 Dtool_LL_pAm0S 0 3 4 this 3 1548  4 self 1 1510  4 view 1 1518  
55 14 Dtool_LL_pkIIZ 0 4 56 1520 0 14 Dtool_LL_pkIIZ 0 1 4 this 3 1556  
56 14 Dtool_LL_p5vzm 0 4 57 1520 0 14 Dtool_LL_p5vzm 0 2 4 this 3 1557  3 out 1 1524  
57 14 Dtool_LL_pw_Ym 0 7 76 1561 843 14 Dtool_LL_pw_Ym 0 1 4 copy 1 1559  
58 14 Dtool_LL_p4mOy 0 7 76 1561 843 14 Dtool_LL_p4mOy 0 1 4 copy 1 1562  
59 14 Dtool_LL_pNLNI 0 7 76 1561 843 14 Dtool_LL_pNLNI 0 2 4 self 1 1510  6 source 1 1510  
60 14 Dtool_LL_pkWFS 0 6 77 1512 0 14 Dtool_LL_pkWFS 0 1 4 this 3 1559  
61 14 Dtool_LL_p_Cyg 0 6 78 1564 0 14 Dtool_LL_p_Cyg 0 2 4 this 3 1559  1 n 1 1512  
62 14 Dtool_LL_p8rlJ 0 6 79 1564 0 14 Dtool_LL_p8rlJ 0 2 4 this 3 1559  1 n 1 1512  
63 14 Dtool_LL_pqi7F 0 6 80 1516 0 14 Dtool_LL_pqi7F 0 1 4 this 3 1559  
64 14 Dtool_LL_p98av 0 6 81 1516 0 14 Dtool_LL_p98av 0 3 4 this 3 1559  1 n 1 1512  5 count 1 1512  
65 14 Dtool_LL_pSiQ5 0 6 82 1517 0 14 Dtool_LL_pSiQ5 0 1 4 this 3 1559  
66 14 Dtool_LL_pjzh_ 0 6 83 1517 0 14 Dtool_LL_pjzh_ 0 1 4 this 3 1559  
67 14 Dtool_LL_pxy_q 0 6 84 1517 0 14 Dtool_LL_pxy_q 0 4 4 this 3 1559  4 self 1 1510  4 view 1 1518  5 flags 1 1517  
68 14 Dtool_LL_p6mE4 0 4 85 1520 0 14 Dtool_LL_p6mE4 0 3 4 this 3 1559  4 self 1 1510  4 view 1 1518  
69 14 Dtool_LL_plYtT 0 4 73 1520 0 14 Dtool_LL_plYtT 0 1 4 this 3 1567  
70 14 Dtool_LL_p4_Wh 0 4 74 1520 0 14 Dtool_LL_p4_Wh 0 2 4 this 3 1568  3 out 1 1524  
71 14 Dtool_LL_pZ47T 0 7 93 1572 857 14 Dtool_LL_pZ47T 0 1 4 copy 1 1570  
72 14 Dtool_LL_p0kKo 0 7 93 1572 857 14 Dtool_LL_p0kKo 0 1 4 copy 1 1573  
73 14 Dtool_LL_psqhG 0 7 93 1572 857 14 Dtool_LL_psqhG 0 2 4 self 1 1510  6 source 1 1510  
74 14 Dtool_LL_pHxZQ 0 6 94 1512 0 14 Dtool_LL_pHxZQ 0 1 4 this 3 1570  
75 14 Dtool_LL_pfjFf 0 6 95 1575 0 14 Dtool_LL_pfjFf 0 2 4 this 3 1570  1 n 1 1512  
76 14 Dtool_LL_pDK4H 0 6 96 1575 0 14 Dtool_LL_pDK4H 0 2 4 this 3 1570  1 n 1 1512  
77 14 Dtool_LL_pJDPE 0 6 97 1516 0 14 Dtool_LL_pJDPE 0 1 4 this 3 1570  
78 14 Dtool_LL_paeut 0 6 98 1516 0 14 Dtool_LL_paeut 0 3 4 this 3 1570  1 n 1 1512  5 count 1 1512  
79 14 Dtool_LL_pzDj3 0 6 99 1517 0 14 Dtool_LL_pzDj3 0 1 4 this 3 1570  
80 14 Dtool_LL_pCQ09 0 6 100 1517 0 14 Dtool_LL_pCQ09 0 1 4 this 3 1570  
81 14 Dtool_LL_pQUSp 0 6 101 1517 0 14 Dtool_LL_pQUSp 0 4 4 this 3 1570  4 self 1 1510  4 view 1 1518  5 flags 1 1517  
82 14 Dtool_LL_pbHX2 0 4 102 1520 0 14 Dtool_LL_pbHX2 0 3 4 this 3 1570  4 self 1 1510  4 view 1 1518  
83 14 Dtool_LL_pHkry 0 4 90 1520 0 14 Dtool_LL_pHkry 0 1 4 this 3 1578  
84 14 Dtool_LL_pZTXA 0 4 91 1520 0 14 Dtool_LL_pZTXA 0 2 4 this 3 1579  3 out 1 1524  
85 14 Dtool_LL_pAfuX 0 7 110 1583 871 14 Dtool_LL_pAfuX 0 1 4 copy 1 1581  
86 14 Dtool_LL_pHUzr 0 7 110 1583 871 14 Dtool_LL_pHUzr 0 1 4 copy 1 1584  
87 14 Dtool_LL_pLqBK 0 7 110 1583 871 14 Dtool_LL_pLqBK 0 2 4 self 1 1510  6 source 1 1510  
88 14 Dtool_LL_pux5T 0 6 111 1512 0 14 Dtool_LL_pux5T 0 1 4 this 3 1581  
89 14 Dtool_LL_pEili 0 6 112 1586 0 14 Dtool_LL_pEili 0 2 4 this 3 1581  1 n 1 1512  
90 14 Dtool_LL_p6KYL 0 6 113 1586 0 14 Dtool_LL_p6KYL 0 2 4 this 3 1581  1 n 1 1512  
91 14 Dtool_LL_pgDvH 0 6 114 1516 0 14 Dtool_LL_pgDvH 0 1 4 this 3 1581  
92 14 Dtool_LL_pzdOx 0 6 115 1516 0 14 Dtool_LL_pzdOx 0 3 4 this 3 1581  1 n 1 1512  5 count 1 1512  
93 14 Dtool_LL_pUDD7 0 6 116 1517 0 14 Dtool_LL_pUDD7 0 1 4 this 3 1581  
94 14 Dtool_LL_pqQUB 0 6 117 1517 0 14 Dtool_LL_pqQUB 0 1 4 this 3 1581  
95 14 Dtool_LL_prVys 0 6 118 1517 0 14 Dtool_LL_prVys 0 4 4 this 3 1581  4 self 1 1510  4 view 1 1518  5 flags 1 1517  
96 14 Dtool_LL_pAG35 0 4 119 1520 0 14 Dtool_LL_pAG35 0 3 4 this 3 1581  4 self 1 1510  4 view 1 1518  
97 14 Dtool_LL_pEEvZ 0 4 107 1520 0 14 Dtool_LL_pEEvZ 0 1 4 this 3 1589  
98 14 Dtool_LL_pZzYn 0 4 108 1520 0 14 Dtool_LL_pZzYn 0 2 4 this 3 1590  3 out 1 1524  
99 14 Dtool_LL_pWrc9 0 7 127 1594 885 14 Dtool_LL_pWrc9 0 1 4 copy 1 1592  
100 14 Dtool_LL_p28SR 0 7 127 1594 885 14 Dtool_LL_p28SR 0 1 4 copy 1 1595  
101 14 Dtool_LL_pNrRv 0 7 127 1594 885 14 Dtool_LL_pNrRv 0 2 4 self 1 1510  6 source 1 1510  
102 14 Dtool_LL_pk2J5 0 6 128 1512 0 14 Dtool_LL_pk2J5 0 1 4 this 3 1592  
103 14 Dtool_LL_pBh1H 0 6 129 1597 0 14 Dtool_LL_pBh1H 0 2 4 this 3 1592  1 n 1 1512  
104 14 Dtool_LL_p8Low 0 6 130 1597 0 14 Dtool_LL_p8Low 0 2 4 this 3 1592  1 n 1 1512  
105 14 Dtool_LL_pqC_s 0 6 131 1516 0 14 Dtool_LL_pqC_s 0 1 4 this 3 1592  
106 14 Dtool_LL_p8ceW 0 6 132 1516 0 14 Dtool_LL_p8ceW 0 3 4 this 3 1592  1 n 1 1512  5 count 1 1512  
107 14 Dtool_LL_pRCTg 0 6 133 1517 0 14 Dtool_LL_pRCTg 0 1 4 this 3 1592  
108 14 Dtool_LL_pgTkm 0 6 134 1517 0 14 Dtool_LL_pgTkm 0 1 4 this 3 1592  
109 14 Dtool_LL_p2SCS 0 6 135 1517 0 14 Dtool_LL_p2SCS 0 4 4 this 3 1592  4 self 1 1510  4 view 1 1518  5 flags 1 1517  
110 14 Dtool_LL_p9GHf 0 4 136 1520 0 14 Dtool_LL_p9GHf 0 3 4 this 3 1592  4 self 1 1510  4 view 1 1518  
111 14 Dtool_LL_pFUUU 0 4 124 1520 0 14 Dtool_LL_pFUUU 0 1 4 this 3 1600  
112 14 Dtool_LL_pYD_h 0 4 125 1520 0 14 Dtool_LL_pYD_h 0 2 4 this 3 1601  3 out 1 1524  
113 14 Dtool_LL_pIjZj 0 7 144 1605 899 14 Dtool_LL_pIjZj 0 1 4 copy 1 1603  
114 14 Dtool_LL_p0fsj 0 7 144 1605 899 14 Dtool_LL_p0fsj 0 1 4 copy 1 1606  
115 14 Dtool_LL_pPdmd 0 7 144 1605 899 14 Dtool_LL_pPdmd 0 2 4 self 1 1510  6 source 1 1510  
116 14 Dtool_LL_p45Pf 0 6 145 1512 0 14 Dtool_LL_p45Pf 0 1 4 this 3 1603  
117 14 Dtool_LL_pp7fi 0 6 146 1608 0 14 Dtool_LL_pp7fi 0 2 4 this 3 1603  1 n 1 1512  
118 14 Dtool_LL_pXMaR 0 6 147 1608 0 14 Dtool_LL_pXMaR 0 2 4 this 3 1603  1 n 1 1512  
119 14 Dtool_LL_poMr_ 0 6 148 1516 0 14 Dtool_LL_poMr_ 0 1 4 this 3 1603  
120 14 Dtool_LL_pPquB 0 6 149 1516 0 14 Dtool_LL_pPquB 0 3 4 this 3 1603  1 n 1 1512  5 count 1 1512  
121 14 Dtool_LL_pCJFo 0 6 150 1517 0 14 Dtool_LL_pCJFo 0 1 4 this 3 1603  
122 14 Dtool_LL_psO2H 0 6 151 1517 0 14 Dtool_LL_psO2H 0 1 4 this 3 1603  
123 14 Dtool_LL_pu9_o 0 6 152 1517 0 14 Dtool_LL_pu9_o 0 4 4 this 3 1603  4 self 1 1510  4 view 1 1518  5 flags 1 1517  
124 14 Dtool_LL_p9Mho 0 4 153 1520 0 14 Dtool_LL_p9Mho 0 3 4 this 3 1603  4 self 1 1510  4 view 1 1518  
125 14 Dtool_LL_pYk24 0 4 141 1520 0 14 Dtool_LL_pYk24 0 1 4 this 3 1611  
126 14 Dtool_LL_pIEmL 0 4 142 1520 0 14 Dtool_LL_pIEmL 0 2 4 this 3 1612  3 out 1 1524  
127 14 Dtool_LL_pL7R7 0 7 161 1616 913 14 Dtool_LL_pL7R7 0 1 4 copy 1 1614  
128 14 Dtool_LL_p13gU 0 7 161 1616 913 14 Dtool_LL_p13gU 0 1 4 copy 1 1617  
129 14 Dtool_LL_pPVXn 0 7 161 1616 913 14 Dtool_LL_pPVXn 0 2 4 self 1 1510  6 source 1 1510  
130 14 Dtool_LL_p4xAp 0 6 162 1512 0 14 Dtool_LL_p4xAp 0 1 4 this 3 1614  
131 14 Dtool_LL_ppzOs 0 6 163 1619 0 14 Dtool_LL_ppzOs 0 2 4 this 3 1614  1 n 1 1512  
132 14 Dtool_LL_pXELb 0 6 164 1619 0 14 Dtool_LL_pXELb 0 2 4 this 3 1614  1 n 1 1512  
133 14 Dtool_LL_ppUcJ 0 6 165 1516 0 14 Dtool_LL_ppUcJ 0 1 4 this 3 1614  
134 14 Dtool_LL_pPifL 0 6 166 1516 0 14 Dtool_LL_pPifL 0 3 4 this 3 1614  1 n 1 1512  5 count 1 1512  
135 14 Dtool_LL_pCB2x 0 6 167 1517 0 14 Dtool_LL_pCB2x 0 1 4 this 3 1614  
136 14 Dtool_LL_psGnR 0 6 168 1517 0 14 Dtool_LL_psGnR 0 1 4 this 3 1614  
137 14 Dtool_LL_pu1vy 0 6 169 1517 0 14 Dtool_LL_pu1vy 0 4 4 this 3 1614  4 self 1 1510  4 view 1 1518  5 flags 1 1517  
138 14 Dtool_LL_p9ESy 0 4 170 1520 0 14 Dtool_LL_p9ESy 0 3 4 this 3 1614  4 self 1 1510  4 view 1 1518  
139 14 Dtool_LL_pQX_4 0 4 158 1520 0 14 Dtool_LL_pQX_4 0 1 4 this 3 1622  
140 14 Dtool_LL_pAXwL 0 4 159 1520 0 14 Dtool_LL_pAXwL 0 2 4 this 3 1623  3 out 1 1524  
141 14 Dtool_LL_png8j 0 7 178 1627 927 14 Dtool_LL_png8j 0 1 4 copy 1 1625  
142 14 Dtool_LL_pBa_J 0 7 178 1627 927 14 Dtool_LL_pBa_J 0 1 4 copy 1 1628  
143 14 Dtool_LL_pBhQh 0 7 178 1627 927 14 Dtool_LL_pBhQh 0 2 4 self 1 1510  6 source 1 1510  
144 14 Dtool_LL_p6gkS 0 6 179 1512 0 14 Dtool_LL_p6gkS 0 1 4 this 3 1625  
145 14 Dtool_LL_pQ6W8 0 6 180 1630 0 14 Dtool_LL_pQ6W8 0 2 4 this 3 1625  1 n 1 1512  
146 14 Dtool_LL_pZ7dZ 0 6 181 1630 0 14 Dtool_LL_pZ7dZ 0 2 4 this 3 1625  1 n 1 1512  
147 14 Dtool_LL_pV8Dh 0 6 182 1516 0 14 Dtool_LL_pV8Dh 0 1 4 this 3 1625  
148 14 Dtool_LL_pksLm 0 6 183 1516 0 14 Dtool_LL_pksLm 0 3 4 this 3 1625  1 n 1 1512  5 count 1 1512  
149 14 Dtool_LL_prjbv 0 6 184 1517 0 14 Dtool_LL_prjbv 0 1 4 this 3 1625  
150 14 Dtool_LL_pIPMo 0 6 185 1517 0 14 Dtool_LL_pIPMo 0 1 4 this 3 1625  
151 14 Dtool_LL_pp8kN 0 6 186 1517 0 14 Dtool_LL_pp8kN 0 4 4 this 3 1625  4 self 1 1510  4 view 1 1518  5 flags 1 1517  
152 14 Dtool_LL_pPFO_ 0 4 187 1520 0 14 Dtool_LL_pPFO_ 0 3 4 this 3 1625  4 self 1 1510  4 view 1 1518  
153 14 Dtool_LL_pG_a7 0 4 175 1520 0 14 Dtool_LL_pG_a7 0 1 4 this 3 1633  
154 14 Dtool_LL_pC1FV 0 4 176 1520 0 14 Dtool_LL_pC1FV 0 2 4 this 3 1634  3 out 1 1524  
155 14 Dtool_LL_p_UYM 0 7 195 1638 941 14 Dtool_LL_p_UYM 0 1 4 copy 1 1636  
156 14 Dtool_LL_pzea6 0 7 195 1638 941 14 Dtool_LL_pzea6 0 1 4 copy 1 1639  
157 14 Dtool_LL_pGhsZ 0 7 195 1638 941 14 Dtool_LL_pGhsZ 0 2 4 self 1 1510  6 source 1 1510  
158 14 Dtool_LL_pxgAL 0 6 196 1512 0 14 Dtool_LL_pxgAL 0 1 4 this 3 1636  
159 14 Dtool_LL_pN6y0 0 6 197 1641 0 14 Dtool_LL_pN6y0 0 2 4 this 3 1636  1 n 1 1512  
160 14 Dtool_LL_pc75R 0 6 198 1641 0 14 Dtool_LL_pc75R 0 2 4 this 3 1636  1 n 1 1512  
161 14 Dtool_LL_pS8fZ 0 6 199 1516 0 14 Dtool_LL_pS8fZ 0 1 4 this 3 1636  
162 14 Dtool_LL_pvsne 0 6 200 1516 0 14 Dtool_LL_pvsne 0 3 4 this 3 1636  1 n 1 1512  5 count 1 1512  
163 14 Dtool_LL_puj3n 0 6 201 1517 0 14 Dtool_LL_puj3n 0 1 4 this 3 1636  
164 14 Dtool_LL_p1Mog 0 6 202 1517 0 14 Dtool_LL_p1Mog 0 1 4 this 3 1636  
165 14 Dtool_LL_pu8AG 0 6 203 1517 0 14 Dtool_LL_pu8AG 0 4 4 this 3 1636  4 self 1 1510  4 view 1 1518  5 flags 1 1517  
166 14 Dtool_LL_pKFq3 0 4 204 1520 0 14 Dtool_LL_pKFq3 0 3 4 this 3 1636  4 self 1 1510  4 view 1 1518  
167 14 Dtool_LL_pHbVA 0 4 192 1520 0 14 Dtool_LL_pHbVA 0 1 4 this 3 1644  
168 14 Dtool_LL_pCp9Z 0 4 193 1520 0 14 Dtool_LL_pCp9Z 0 2 4 this 3 1645  3 out 1 1524  
169 14 Dtool_LL_pfFFJ 0 7 212 1649 955 14 Dtool_LL_pfFFJ 0 1 4 copy 1 1647  
170 14 Dtool_LL_piNEj 0 7 212 1649 955 14 Dtool_LL_piNEj 0 1 4 copy 1 1650  
171 14 Dtool_LL_pdhWu 0 7 212 1649 955 14 Dtool_LL_pdhWu 0 2 4 self 1 1510  6 source 1 1510  
172 14 Dtool_LL_p2gqf 0 6 213 1512 0 14 Dtool_LL_p2gqf 0 1 4 this 3 1647  
173 14 Dtool_LL_pF6cJ 0 6 214 1652 0 14 Dtool_LL_pF6cJ 0 2 4 this 3 1647  1 n 1 1512  
174 14 Dtool_LL_pF7jm 0 6 215 1652 0 14 Dtool_LL_pF7jm 0 2 4 this 3 1647  1 n 1 1512  
175 14 Dtool_LL_pp_Ju 0 6 216 1516 0 14 Dtool_LL_pp_Ju 0 1 4 this 3 1647  
176 14 Dtool_LL_pQvRz 0 6 217 1516 0 14 Dtool_LL_pQvRz 0 3 4 this 3 1647  1 n 1 1512  5 count 1 1512  
177 14 Dtool_LL_pXgh8 0 6 218 1517 0 14 Dtool_LL_pXgh8 0 1 4 this 3 1647  
178 14 Dtool_LL_p8MS1 0 6 219 1517 0 14 Dtool_LL_p8MS1 0 1 4 this 3 1647  
179 14 Dtool_LL_pV8qa 0 6 220 1517 0 14 Dtool_LL_pV8qa 0 4 4 this 3 1647  4 self 1 1510  4 view 1 1518  5 flags 1 1517  
180 14 Dtool_LL_pyGUM 0 4 221 1520 0 14 Dtool_LL_pyGUM 0 3 4 this 3 1647  4 self 1 1510  4 view 1 1518  
181 14 Dtool_LL_pHxpH 0 4 209 1520 0 14 Dtool_LL_pHxpH 0 1 4 this 3 1655  
182 14 Dtool_LL_pCzSh 0 4 210 1520 0 14 Dtool_LL_pCzSh 0 2 4 this 3 1656  3 out 1 1524  
183 14 Dtool_LL_pJ_k_ 0 7 224 1658 973 14 Dtool_LL_pJ_k_ 0 1 4 copy 1 1508  
184 14 Dtool_LL_p_zBg 0 7 224 1658 973 14 Dtool_LL_p_zBg 0 2 4 self 1 1510  6 source 1 1510  
185 14 Dtool_LL_p_KQr 0 7 224 1658 973 14 Dtool_LL_p_KQr 0 1 11 type_handle 1 1659  
186 14 Dtool_LL_pSpwv 0 7 224 1658 973 14 Dtool_LL_pSpwv 0 0 
187 14 Dtool_LL_pW6ft 0 7 225 1658 973 14 Dtool_LL_pW6ft 0 2 1 n 1 1512  11 type_handle 1 1659  
188 14 Dtool_LL_p81AE 0 7 225 1658 973 14 Dtool_LL_p81AE 0 1 1 n 1 1512  
189 14 Dtool_LL_pBZGM 0 6 226 1512 0 14 Dtool_LL_pBZGM 0 1 4 this 3 1508  
190 14 Dtool_LL_pKwOw 0 4 227 1520 0 14 Dtool_LL_pKwOw 0 2 4 this 3 1658  1 x 1 1513  
191 14 Dtool_LL_pdUXK 0 4 228 1520 0 14 Dtool_LL_pdUXK 0 1 4 this 3 1658  
192 14 Dtool_LL_pKjSZ 0 6 229 1513 0 14 Dtool_LL_pKjSZ 0 2 4 this 3 1508  1 n 1 1512  
193 14 Dtool_LL_pXaeg 0 4 230 1520 0 14 Dtool_LL_pXaeg 0 3 4 this 3 1658  1 n 1 1512  5 value 1 1513  
194 14 Dtool_LL_pbf7U 0 6 231 1513 0 14 Dtool_LL_pbf7U 0 2 4 this 3 1508  1 n 1 1512  
195 14 Dtool_LL_pt0fn 0 4 232 1520 0 14 Dtool_LL_pt0fn 0 3 4 this 3 1658  1 n 1 1512  5 value 1 1513  
196 14 Dtool_LL_p_t5N 0 6 233 1516 0 14 Dtool_LL_p_t5N 0 1 4 this 3 1508  
197 14 Dtool_LL_pyib6 0 4 234 1520 0 14 Dtool_LL_pyib6 0 2 4 this 3 1658  4 data 1 1516  
198 14 Dtool_LL_pLHeW 0 6 235 1516 0 14 Dtool_LL_pLHeW 0 3 4 this 3 1508  1 n 1 1512  5 count 1 1512  
199 14 Dtool_LL_pmg3K 0 4 236 1520 0 14 Dtool_LL_pmg3K 0 4 4 this 3 1658  1 n 1 1512  5 count 1 1512  4 data 1 1516  
200 14 Dtool_LL_p4bsv 0 6 237 1517 0 14 Dtool_LL_p4bsv 0 1 4 this 3 1508  
201 14 Dtool_LL_pJWyu 0 6 238 1517 0 14 Dtool_LL_pJWyu 0 1 4 this 3 1508  
202 14 Dtool_LL_pMQ40 0 6 239 1517 0 14 Dtool_LL_pMQ40 0 4 4 this 3 1658  4 self 1 1510  4 view 1 1518  5 flags 1 1517  
203 14 Dtool_LL_p8Wmx 0 4 240 1520 0 14 Dtool_LL_p8Wmx 0 3 4 this 3 1508  4 self 1 1510  4 view 1 1518  
204 14 Dtool_LL_p8egW 0 7 243 1661 991 14 Dtool_LL_p8egW 0 1 4 copy 1 1529  
205 14 Dtool_LL_p9TFH 0 7 243 1661 991 14 Dtool_LL_p9TFH 0 2 4 self 1 1510  6 source 1 1510  
206 14 Dtool_LL_p_qVS 0 7 243 1661 991 14 Dtool_LL_p_qVS 0 1 11 type_handle 1 1659  
207 14 Dtool_LL_pTJ0W 0 7 243 1661 991 14 Dtool_LL_pTJ0W 0 0 
208 14 Dtool_LL_pVaiU 0 7 244 1661 991 14 Dtool_LL_pVaiU 0 2 1 n 1 1512  11 type_handle 1 1659  
209 14 Dtool_LL_p8VEr 0 7 244 1661 991 14 Dtool_LL_p8VEr 0 1 1 n 1 1512  
210 14 Dtool_LL_pB5Kz 0 6 245 1512 0 14 Dtool_LL_pB5Kz 0 1 4 this 3 1529  
211 14 Dtool_LL_pLXgY 0 4 246 1520 0 14 Dtool_LL_pLXgY 0 2 4 this 3 1661  1 x 1 1531  
212 14 Dtool_LL_pd0Yx 0 4 247 1520 0 14 Dtool_LL_pd0Yx 0 1 4 this 3 1661  
213 14 Dtool_LL_pJDVA 0 6 248 1531 0 14 Dtool_LL_pJDVA 0 2 4 this 3 1529  1 n 1 1512  
214 14 Dtool_LL_pc6__ 0 4 249 1520 0 14 Dtool_LL_pc6__ 0 3 4 this 3 1661  1 n 1 1512  5 value 1 1531  
215 14 Dtool_LL_pb_87 0 6 250 1531 0 14 Dtool_LL_pb_87 0 2 4 this 3 1529  1 n 1 1512  
216 14 Dtool_LL_pnU_G 0 4 251 1520 0 14 Dtool_LL_pnU_G 0 3 4 this 3 1661  1 n 1 1512  5 value 1 1531  
217 14 Dtool_LL_p_N90 0 6 252 1516 0 14 Dtool_LL_p_N90 0 1 4 this 3 1529  
218 14 Dtool_LL_pzCeh 0 4 253 1520 0 14 Dtool_LL_pzCeh 0 2 4 this 3 1661  4 data 1 1516  
219 14 Dtool_LL_pLnj9 0 6 254 1516 0 14 Dtool_LL_pLnj9 0 3 4 this 3 1529  1 n 1 1512  5 count 1 1512  
220 14 Dtool_LL_pmA7x 0 4 255 1520 0 14 Dtool_LL_pmA7x 0 4 4 this 3 1661  1 n 1 1512  5 count 1 1512  4 data 1 1516  
221 14 Dtool_LL_pn7wW 0 6 256 1517 0 14 Dtool_LL_pn7wW 0 1 4 this 3 1529  
222 14 Dtool_LL_pI21V 0 6 257 1517 0 14 Dtool_LL_pI21V 0 1 4 this 3 1529  
223 14 Dtool_LL_pNw7b 0 6 258 1517 0 14 Dtool_LL_pNw7b 0 4 4 this 3 1661  4 self 1 1510  4 view 1 1518  5 flags 1 1517  
224 14 Dtool_LL_pj2qY 0 4 259 1520 0 14 Dtool_LL_pj2qY 0 3 4 this 3 1529  4 self 1 1510  4 view 1 1518  
225 14 Dtool_LL_ptlCd 0 7 262 1662 1009 14 Dtool_LL_ptlCd 0 1 4 copy 1 1540  
226 14 Dtool_LL_poVny 0 7 262 1662 1009 14 Dtool_LL_poVny 0 2 4 self 1 1510  6 source 1 1510  
227 14 Dtool_LL_peJpZ 0 7 262 1662 1009 14 Dtool_LL_peJpZ 0 1 11 type_handle 1 1659  
228 14 Dtool_LL_pFfmo 0 7 262 1662 1009 14 Dtool_LL_pFfmo 0 0 
229 14 Dtool_LL_pAaph 0 7 263 1662 1009 14 Dtool_LL_pAaph 0 2 1 n 1 1512  11 type_handle 1 1659  
230 14 Dtool_LL_pLmTx 0 7 263 1662 1009 14 Dtool_LL_pLmTx 0 1 1 n 1 1512  
231 14 Dtool_LL_pZRHz 0 6 264 1512 0 14 Dtool_LL_pZRHz 0 1 4 this 3 1540  
232 14 Dtool_LL_pZRc8 0 4 265 1520 0 14 Dtool_LL_pZRc8 0 2 4 this 3 1662  1 x 1 1542  
233 14 Dtool_LL_p9uf6 0 4 266 1520 0 14 Dtool_LL_p9uf6 0 1 4 this 3 1662  
234 14 Dtool_LL_pn3ba 0 6 267 1542 0 14 Dtool_LL_pn3ba 0 2 4 this 3 1540  1 n 1 1512  
235 14 Dtool_LL_pkHcM 0 4 268 1520 0 14 Dtool_LL_pkHcM 0 3 4 this 3 1662  1 n 1 1512  5 value 1 1542  
236 14 Dtool_LL_p4N1O 0 6 269 1542 0 14 Dtool_LL_p4N1O 0 2 4 this 3 1540  1 n 1 1512  
237 14 Dtool_LL_pM8xs 0 4 270 1520 0 14 Dtool_LL_pM8xs 0 3 4 this 3 1662  1 n 1 1512  5 value 1 1542  
238 14 Dtool_LL_pf3_s 0 6 271 1516 0 14 Dtool_LL_pf3_s 0 1 4 this 3 1540  
239 14 Dtool_LL_pXLP_ 0 4 272 1520 0 14 Dtool_LL_pXLP_ 0 2 4 this 3 1662  4 data 1 1516  
240 14 Dtool_LL_p2suB 0 6 273 1516 0 14 Dtool_LL_p2suB 0 3 4 this 3 1540  1 n 1 1512  5 count 1 1512  
241 14 Dtool_LL_pKkrQ 0 4 274 1520 0 14 Dtool_LL_pKkrQ 0 4 4 this 3 1662  1 n 1 1512  5 count 1 1512  4 data 1 1516  
242 14 Dtool_LL_pViqm 0 6 275 1517 0 14 Dtool_LL_pViqm 0 1 4 this 3 1540  
243 14 Dtool_LL_pFUyJ 0 6 276 1517 0 14 Dtool_LL_pFUyJ 0 1 4 this 3 1540  
244 14 Dtool_LL_pHyoO 0 6 277 1517 0 14 Dtool_LL_pHyoO 0 4 4 this 3 1662  4 self 1 1510  4 view 1 1518  5 flags 1 1517  
245 14 Dtool_LL_p3ZCm 0 4 278 1520 0 14 Dtool_LL_p3ZCm 0 3 4 this 3 1540  4 self 1 1510  4 view 1 1518  
246 14 Dtool_LL_poJ1_ 0 7 281 1663 1027 14 Dtool_LL_poJ1_ 0 1 4 copy 1 1551  
247 14 Dtool_LL_p8VXU 0 7 281 1663 1027 14 Dtool_LL_p8VXU 0 2 4 self 1 1510  6 source 1 1510  
248 14 Dtool_LL_prOZ7 0 7 281 1663 1027 14 Dtool_LL_prOZ7 0 1 11 type_handle 1 1659  
249 14 Dtool_LL_pRfWK 0 7 281 1663 1027 14 Dtool_LL_pRfWK 0 0 
250 14 Dtool_LL_psbZD 0 7 282 1663 1027 14 Dtool_LL_psbZD 0 2 1 n 1 1512  11 type_handle 1 1659  
251 14 Dtool_LL_pnlDT 0 7 282 1663 1027 14 Dtool_LL_pnlDT 0 1 1 n 1 1512  
252 14 Dtool_LL_plS3U 0 6 283 1512 0 14 Dtool_LL_plS3U 0 1 4 this 3 1551  
253 14 Dtool_LL_pgR8_ 0 4 284 1520 0 14 Dtool_LL_pgR8_ 0 2 4 this 3 1663  1 x 1 1553  
254 14 Dtool_LL_pBuPc 0 4 285 1520 0 14 Dtool_LL_pBuPc 0 1 4 this 3 1663  
255 14 Dtool_LL_pI3L8 0 6 286 1553 0 14 Dtool_LL_pI3L8 0 2 4 this 3 1551  1 n 1 1512  
256 14 Dtool_LL_pw5Nu 0 4 287 1520 0 14 Dtool_LL_pw5Nu 0 3 4 this 3 1663  1 n 1 1512  5 value 1 1553  
257 14 Dtool_LL_pPNlw 0 6 288 1553 0 14 Dtool_LL_pPNlw 0 2 4 this 3 1551  1 n 1 1512  
258 14 Dtool_LL_pJOjO 0 4 289 1520 0 14 Dtool_LL_pJOjO 0 3 4 this 3 1663  1 n 1 1512  5 value 1 1553  
259 14 Dtool_LL_pz3uO 0 6 290 1516 0 14 Dtool_LL_pz3uO 0 1 4 this 3 1551  
260 14 Dtool_LL_p7L_g 0 4 291 1520 0 14 Dtool_LL_p7L_g 0 2 4 this 3 1663  4 data 1 1516  
261 14 Dtool_LL_pjsej 0 6 292 1516 0 14 Dtool_LL_pjsej 0 3 4 this 3 1551  1 n 1 1512  5 count 1 1512  
262 14 Dtool_LL_pnlby 0 4 293 1520 0 14 Dtool_LL_pnlby 0 4 4 this 3 1663  1 n 1 1512  5 count 1 1512  4 data 1 1516  
263 14 Dtool_LL_phiaI 0 6 294 1517 0 14 Dtool_LL_phiaI 0 1 4 this 3 1551  
264 14 Dtool_LL_pwXir 0 6 295 1517 0 14 Dtool_LL_pwXir 0 1 4 this 3 1551  
265 14 Dtool_LL_pUyYw 0 6 296 1517 0 14 Dtool_LL_pUyYw 0 4 4 this 3 1663  4 self 1 1510  4 view 1 1518  5 flags 1 1517  
266 14 Dtool_LL_pbZyH 0 4 297 1520 0 14 Dtool_LL_pbZyH 0 3 4 this 3 1551  4 self 1 1510  4 view 1 1518  
267 14 Dtool_LL_ph_gR 0 7 300 1664 1045 14 Dtool_LL_ph_gR 0 1 4 copy 1 1562  
268 14 Dtool_LL_pZV_m 0 7 300 1664 1045 14 Dtool_LL_pZV_m 0 2 4 self 1 1510  6 source 1 1510  
269 14 Dtool_LL_pJOBO 0 7 300 1664 1045 14 Dtool_LL_pJOBO 0 1 11 type_handle 1 1659  
270 14 Dtool_LL_pyf_c 0 7 300 1664 1045 14 Dtool_LL_pyf_c 0 0 
271 14 Dtool_LL_pTbBW 0 7 301 1664 1045 14 Dtool_LL_pTbBW 0 2 1 n 1 1512  11 type_handle 1 1659  
272 14 Dtool_LL_p4lrl 0 7 301 1664 1045 14 Dtool_LL_p4lrl 0 1 1 n 1 1512  
273 14 Dtool_LL_pGSfn 0 6 302 1512 0 14 Dtool_LL_pGSfn 0 1 4 this 3 1562  
274 14 Dtool_LL_p7QMl 0 4 303 1520 0 14 Dtool_LL_p7QMl 0 2 4 this 3 1664  1 x 1 1564  
275 14 Dtool_LL_psv3u 0 4 304 1520 0 14 Dtool_LL_psv3u 0 1 4 this 3 1664  
276 14 Dtool_LL_p22zO 0 6 305 1564 0 14 Dtool_LL_p22zO 0 2 4 this 3 1562  1 n 1 1512  
277 14 Dtool_LL_pWy3g 0 4 306 1520 0 14 Dtool_LL_pWy3g 0 3 4 this 3 1664  1 n 1 1512  5 value 1 1564  
278 14 Dtool_LL_ppMND 0 6 307 1564 0 14 Dtool_LL_ppMND 0 2 4 this 3 1562  1 n 1 1512  
279 14 Dtool_LL_pk2LB 0 4 308 1520 0 14 Dtool_LL_pk2LB 0 3 4 this 3 1664  1 n 1 1512  5 value 1 1564  
280 14 Dtool_LL_pJ6Xh 0 6 309 1516 0 14 Dtool_LL_pJ6Xh 0 1 4 this 3 1562  
281 14 Dtool_LL_pEKnz 0 4 310 1520 0 14 Dtool_LL_pEKnz 0 2 4 this 3 1664  4 data 1 1516  
282 14 Dtool_LL_pGsG2 0 6 311 1516 0 14 Dtool_LL_pGsG2 0 3 4 this 3 1562  1 n 1 1512  5 count 1 1512  
283 14 Dtool_LL_pZlDF 0 4 312 1520 0 14 Dtool_LL_pZlDF 0 4 4 this 3 1664  1 n 1 1512  5 count 1 1512  4 data 1 1516  
284 14 Dtool_LL_pChCb 0 6 313 1517 0 14 Dtool_LL_pChCb 0 1 4 this 3 1562  
285 14 Dtool_LL_pVXK_ 0 6 314 1517 0 14 Dtool_LL_pVXK_ 0 1 4 this 3 1562  
286 14 Dtool_LL_p21AD 0 6 315 1517 0 14 Dtool_LL_p21AD 0 4 4 this 3 1664  4 self 1 1510  4 view 1 1518  5 flags 1 1517  
287 14 Dtool_LL_pmaaa 0 4 316 1520 0 14 Dtool_LL_pmaaa 0 3 4 this 3 1562  4 self 1 1510  4 view 1 1518  
288 14 Dtool_LL_pxLk_ 0 7 319 1665 1063 14 Dtool_LL_pxLk_ 0 1 4 copy 1 1573  
289 14 Dtool_LL_ppFJG 0 7 319 1665 1063 14 Dtool_LL_ppFJG 0 2 4 self 1 1510  6 source 1 1510  
290 14 Dtool_LL_pe5Kt 0 7 319 1665 1063 14 Dtool_LL_pe5Kt 0 1 11 type_handle 1 1659  
291 14 Dtool_LL_pFPI8 0 7 319 1665 1063 14 Dtool_LL_pFPI8 0 0 
292 14 Dtool_LL_pAqK1 0 7 320 1665 1063 14 Dtool_LL_pAqK1 0 2 1 n 1 1512  11 type_handle 1 1659  
293 14 Dtool_LL_pIW1E 0 7 320 1665 1063 14 Dtool_LL_pIW1E 0 1 1 n 1 1512  
294 14 Dtool_LL_pWBpG 0 6 321 1512 0 14 Dtool_LL_pWBpG 0 1 4 this 3 1573  
295 14 Dtool_LL_paxgj 0 4 322 1520 0 14 Dtool_LL_paxgj 0 2 4 this 3 1665  1 x 1 1575  
296 14 Dtool_LL_p8_BO 0 4 323 1520 0 14 Dtool_LL_p8_BO 0 1 4 this 3 1665  
297 14 Dtool_LL_pnn9t 0 6 324 1575 0 14 Dtool_LL_pnn9t 0 2 4 this 3 1573  1 n 1 1512  
298 14 Dtool_LL_pyo_m 0 4 325 1520 0 14 Dtool_LL_pyo_m 0 3 4 this 3 1665  1 n 1 1512  5 value 1 1575  
299 14 Dtool_LL_p4dXi 0 6 326 1575 0 14 Dtool_LL_p4dXi 0 2 4 this 3 1573  1 n 1 1512  
300 14 Dtool_LL_p9rTH 0 4 327 1520 0 14 Dtool_LL_p9rTH 0 3 4 this 3 1665  1 n 1 1512  5 value 1 1575  
301 14 Dtool_LL_pengA 0 6 328 1516 0 14 Dtool_LL_pengA 0 1 4 this 3 1573  
302 14 Dtool_LL_pU7xS 0 4 329 1520 0 14 Dtool_LL_pU7xS 0 2 4 this 3 1665  4 data 1 1516  
303 14 Dtool_LL_p2cPV 0 6 330 1516 0 14 Dtool_LL_p2cPV 0 3 4 this 3 1573  1 n 1 1512  5 count 1 1512  
304 14 Dtool_LL_pKUMk 0 4 331 1520 0 14 Dtool_LL_pKUMk 0 4 4 this 3 1665  1 n 1 1512  5 count 1 1512  4 data 1 1516  
305 14 Dtool_LL_pVSM6 0 6 332 1517 0 14 Dtool_LL_pVSM6 0 1 4 this 3 1573  
306 14 Dtool_LL_pFkUd 0 6 333 1517 0 14 Dtool_LL_pFkUd 0 1 4 this 3 1573  
307 14 Dtool_LL_pHCJi 0 6 334 1517 0 14 Dtool_LL_pHCJi 0 4 4 this 3 1665  4 self 1 1510  4 view 1 1518  5 flags 1 1517  
308 14 Dtool_LL_p3Jk5 0 4 335 1520 0 14 Dtool_LL_p3Jk5 0 3 4 this 3 1573  4 self 1 1510  4 view 1 1518  
309 14 Dtool_LL_pPnWg 0 7 338 1666 1081 14 Dtool_LL_pPnWg 0 1 4 copy 1 1584  
310 14 Dtool_LL_p8F5n 0 7 338 1666 1081 14 Dtool_LL_p8F5n 0 2 4 self 1 1510  6 source 1 1510  
311 14 Dtool_LL_pq_6O 0 7 338 1666 1081 14 Dtool_LL_pq_6O 0 1 11 type_handle 1 1659  
312 14 Dtool_LL_pRP4d 0 7 338 1666 1081 14 Dtool_LL_pRP4d 0 0 
313 14 Dtool_LL_psr6W 0 7 339 1666 1081 14 Dtool_LL_psr6W 0 2 1 n 1 1512  11 type_handle 1 1659  
314 14 Dtool_LL_pnVlm 0 7 339 1666 1081 14 Dtool_LL_pnVlm 0 1 1 n 1 1512  
315 14 Dtool_LL_plCZo 0 6 340 1512 0 14 Dtool_LL_plCZo 0 1 4 this 3 1584  
316 14 Dtool_LL_phxAn 0 4 341 1520 0 14 Dtool_LL_phxAn 0 2 4 this 3 1666  1 x 1 1586  
317 14 Dtool_LL_pB_xv 0 4 342 1520 0 14 Dtool_LL_pB_xv 0 1 4 this 3 1666  
318 14 Dtool_LL_pLntP 0 6 343 1586 0 14 Dtool_LL_pLntP 0 2 4 this 3 1584  1 n 1 1512  
319 14 Dtool_LL_pB2vI 0 4 344 1520 0 14 Dtool_LL_pB2vI 0 3 4 this 3 1666  1 n 1 1512  5 value 1 1586  
320 14 Dtool_LL_pMdHE 0 6 345 1586 0 14 Dtool_LL_pMdHE 0 2 4 this 3 1584  1 n 1 1512  
321 14 Dtool_LL_pX5Cp 0 4 346 1520 0 14 Dtool_LL_pX5Cp 0 3 4 this 3 1666  1 n 1 1512  5 value 1 1586  
322 14 Dtool_LL_pznQi 0 6 347 1516 0 14 Dtool_LL_pznQi 0 1 4 this 3 1584  
323 14 Dtool_LL_p77h0 0 4 348 1520 0 14 Dtool_LL_p77h0 0 2 4 this 3 1666  4 data 1 1516  
324 14 Dtool_LL_pjc_2 0 6 349 1516 0 14 Dtool_LL_pjc_2 0 3 4 this 3 1584  1 n 1 1512  5 count 1 1512  
325 14 Dtool_LL_pmV8F 0 4 350 1520 0 14 Dtool_LL_pmV8F 0 4 4 this 3 1666  1 n 1 1512  5 count 1 1512  4 data 1 1516  
326 14 Dtool_LL_phS8b 0 6 351 1517 0 14 Dtool_LL_phS8b 0 1 4 this 3 1584  
327 14 Dtool_LL_pwnE_ 0 6 352 1517 0 14 Dtool_LL_pwnE_ 0 1 4 this 3 1584  
328 14 Dtool_LL_pTC5D 0 6 353 1517 0 14 Dtool_LL_pTC5D 0 4 4 this 3 1666  4 self 1 1510  4 view 1 1518  5 flags 1 1517  
329 14 Dtool_LL_pbJUb 0 4 354 1520 0 14 Dtool_LL_pbJUb 0 3 4 this 3 1584  4 self 1 1510  4 view 1 1518  
330 14 Dtool_LL_pdzCz 0 7 357 1667 1099 14 Dtool_LL_pdzCz 0 1 4 copy 1 1595  
331 14 Dtool_LL_pZFh6 0 7 357 1667 1099 14 Dtool_LL_pZFh6 0 2 4 self 1 1510  6 source 1 1510  
332 14 Dtool_LL_pJ_ih 0 7 357 1667 1099 14 Dtool_LL_pJ_ih 0 1 11 type_handle 1 1659  
333 14 Dtool_LL_pyPgw 0 7 357 1667 1099 14 Dtool_LL_pyPgw 0 0 
334 14 Dtool_LL_pTrip 0 7 358 1667 1099 14 Dtool_LL_pTrip 0 2 1 n 1 1512  11 type_handle 1 1659  
335 14 Dtool_LL_p4VN5 0 7 358 1667 1099 14 Dtool_LL_p4VN5 0 1 1 n 1 1512  
336 14 Dtool_LL_pGCB7 0 6 359 1512 0 14 Dtool_LL_pGCB7 0 1 4 this 3 1595  
337 14 Dtool_LL_p8wQM 0 4 360 1520 0 14 Dtool_LL_p8wQM 0 2 4 this 3 1667  1 x 1 1597  
338 14 Dtool_LL_pv_ZC 0 4 361 1520 0 14 Dtool_LL_pv_ZC 0 1 4 this 3 1667  
339 14 Dtool_LL_p2mVi 0 6 362 1597 0 14 Dtool_LL_p2mVi 0 2 4 this 3 1595  1 n 1 1512  
340 14 Dtool_LL_posZ7 0 4 363 1520 0 14 Dtool_LL_posZ7 0 3 4 this 3 1667  1 n 1 1512  5 value 1 1597  
341 14 Dtool_LL_ppcvW 0 6 364 1597 0 14 Dtool_LL_ppcvW 0 2 4 this 3 1595  1 n 1 1512  
342 14 Dtool_LL_p2ltb 0 4 365 1520 0 14 Dtool_LL_p2ltb 0 3 4 this 3 1667  1 n 1 1512  5 value 1 1597  
343 14 Dtool_LL_pJq50 0 6 366 1516 0 14 Dtool_LL_pJq50 0 1 4 this 3 1595  
344 14 Dtool_LL_pF6JH 0 4 367 1520 0 14 Dtool_LL_pF6JH 0 2 4 this 3 1667  4 data 1 1516  
345 14 Dtool_LL_pFcnJ 0 6 368 1516 0 14 Dtool_LL_pFcnJ 0 3 4 this 3 1595  1 n 1 1512  5 count 1 1512  
346 14 Dtool_LL_pZVkY 0 4 369 1520 0 14 Dtool_LL_pZVkY 0 4 4 this 3 1667  1 n 1 1512  5 count 1 1512  4 data 1 1516  
347 14 Dtool_LL_pCRku 0 6 370 1517 0 14 Dtool_LL_pCRku 0 1 4 this 3 1595  
348 14 Dtool_LL_pSnsR 0 6 371 1517 0 14 Dtool_LL_pSnsR 0 1 4 this 3 1595  
349 14 Dtool_LL_p2FhW 0 6 372 1517 0 14 Dtool_LL_p2FhW 0 4 4 this 3 1667  4 self 1 1510  4 view 1 1518  5 flags 1 1517  
350 14 Dtool_LL_pmK8t 0 4 373 1520 0 14 Dtool_LL_pmK8t 0 3 4 this 3 1595  4 self 1 1510  4 view 1 1518  
351 14 Dtool_LL_p457Z 0 7 376 1668 1117 14 Dtool_LL_p457Z 0 1 4 copy 1 1606  
352 14 Dtool_LL_p0LdI 0 7 376 1668 1117 14 Dtool_LL_p0LdI 0 2 4 self 1 1510  6 source 1 1510  
353 14 Dtool_LL_pOf6R 0 7 376 1668 1117 14 Dtool_LL_pOf6R 0 1 11 type_handle 1 1659  
354 14 Dtool_LL_p6Cf6 0 7 376 1668 1117 14 Dtool_LL_p6Cf6 0 0 
355 14 Dtool_LL_pOyIK 0 7 377 1668 1117 14 Dtool_LL_pOyIK 0 2 1 n 1 1512  11 type_handle 1 1659  
356 14 Dtool_LL_p4r_c 0 7 377 1668 1117 14 Dtool_LL_p4r_c 0 1 1 n 1 1512  
357 14 Dtool_LL_pGoCu 0 6 378 1512 0 14 Dtool_LL_pGoCu 0 1 4 this 3 1606  
358 14 Dtool_LL_p3j_h 0 4 379 1520 0 14 Dtool_LL_p3j_h 0 2 4 this 3 1668  1 x 1 1608  
359 14 Dtool_LL_p5m0V 0 4 380 1520 0 14 Dtool_LL_p5m0V 0 1 4 this 3 1668  
360 14 Dtool_LL_pIOmv 0 6 381 1608 0 14 Dtool_LL_pIOmv 0 2 4 this 3 1606  1 n 1 1512  
361 14 Dtool_LL_pzc56 0 4 382 1520 0 14 Dtool_LL_pzc56 0 3 4 this 3 1668  1 n 1 1512  5 value 1 1608  
362 14 Dtool_LL_pVWEn 0 6 383 1608 0 14 Dtool_LL_pVWEn 0 2 4 this 3 1606  1 n 1 1512  
363 14 Dtool_LL_p7RxL 0 4 384 1520 0 14 Dtool_LL_p7RxL 0 3 4 this 3 1668  1 n 1 1512  5 value 1 1608  
364 14 Dtool_LL_pyCPe 0 6 385 1516 0 14 Dtool_LL_pyCPe 0 1 4 this 3 1606  
365 14 Dtool_LL_pYKyj 0 4 386 1520 0 14 Dtool_LL_pYKyj 0 2 4 this 3 1668  4 data 1 1516  
366 14 Dtool_LL_pyaOf 0 6 387 1516 0 14 Dtool_LL_pyaOf 0 3 4 this 3 1606  1 n 1 1512  5 count 1 1512  
367 14 Dtool_LL_pPeuN 0 4 388 1520 0 14 Dtool_LL_pPeuN 0 4 4 this 3 1668  1 n 1 1512  5 count 1 1512  4 data 1 1516  
368 14 Dtool_LL_pvZcS 0 6 389 1517 0 14 Dtool_LL_pvZcS 0 1 4 this 3 1606  
369 14 Dtool_LL_prlTC 0 6 390 1517 0 14 Dtool_LL_prlTC 0 1 4 this 3 1606  
370 14 Dtool_LL_pk1DD 0 6 391 1517 0 14 Dtool_LL_pk1DD 0 4 4 this 3 1668  4 self 1 1510  4 view 1 1518  5 flags 1 1517  
371 14 Dtool_LL_puenS 0 4 392 1520 0 14 Dtool_LL_puenS 0 3 4 this 3 1606  4 self 1 1510  4 view 1 1518  
372 14 Dtool_LL_p4Nlo 0 7 395 1669 1135 14 Dtool_LL_p4Nlo 0 1 4 copy 1 1617  
373 14 Dtool_LL_p0vWN 0 7 395 1669 1135 14 Dtool_LL_p0vWN 0 2 4 self 1 1510  6 source 1 1510  
374 14 Dtool_LL_pOzyW 0 7 395 1669 1135 14 Dtool_LL_pOzyW 0 1 11 type_handle 1 1659  
375 14 Dtool_LL_p6mY_ 0 7 395 1669 1135 14 Dtool_LL_p6mY_ 0 0 
376 14 Dtool_LL_pOOBP 0 7 396 1669 1135 14 Dtool_LL_pOOBP 0 2 1 n 1 1512  11 type_handle 1 1659  
377 14 Dtool_LL_p4X3h 0 7 396 1669 1135 14 Dtool_LL_p4X3h 0 1 1 n 1 1512  
378 14 Dtool_LL_pGM6y 0 6 397 1512 0 14 Dtool_LL_pGM6y 0 1 4 this 3 1617  
379 14 Dtool_LL_p8N5m 0 4 398 1520 0 14 Dtool_LL_p8N5m 0 2 4 this 3 1669  1 x 1 1619  
380 14 Dtool_LL_p5asa 0 4 399 1520 0 14 Dtool_LL_p5asa 0 1 4 this 3 1669  
381 14 Dtool_LL_pIie0 0 6 400 1619 0 14 Dtool_LL_pIie0 0 2 4 this 3 1617  1 n 1 1512  
382 14 Dtool_LL_pykqE 0 4 401 1520 0 14 Dtool_LL_pykqE 0 3 4 this 3 1669  1 n 1 1512  5 value 1 1619  
383 14 Dtool_LL_pVq9r 0 6 402 1619 0 14 Dtool_LL_pVq9r 0 2 4 this 3 1617  1 n 1 1512  
384 14 Dtool_LL_p7ZiV 0 4 403 1520 0 14 Dtool_LL_p7ZiV 0 3 4 this 3 1669  1 n 1 1512  5 value 1 1619  
385 14 Dtool_LL_py_Ij 0 6 404 1516 0 14 Dtool_LL_py_Ij 0 1 4 this 3 1617  
386 14 Dtool_LL_pY2qo 0 4 405 1520 0 14 Dtool_LL_pY2qo 0 2 4 this 3 1669  4 data 1 1516  
387 14 Dtool_LL_py2Gk 0 6 406 1516 0 14 Dtool_LL_py2Gk 0 3 4 this 3 1617  1 n 1 1512  5 count 1 1512  
388 14 Dtool_LL_pP6mS 0 4 407 1520 0 14 Dtool_LL_pP6mS 0 4 4 this 3 1669  1 n 1 1512  5 count 1 1512  4 data 1 1516  
389 14 Dtool_LL_pv9UX 0 6 408 1517 0 14 Dtool_LL_pv9UX 0 1 4 this 3 1617  
390 14 Dtool_LL_prZMH 0 6 409 1517 0 14 Dtool_LL_prZMH 0 1 4 this 3 1617  
391 14 Dtool_LL_pkZ7H 0 6 410 1517 0 14 Dtool_LL_pkZ7H 0 4 4 this 3 1669  4 self 1 1510  4 view 1 1518  5 flags 1 1517  
392 14 Dtool_LL_puifX 0 4 411 1520 0 14 Dtool_LL_puifX 0 3 4 this 3 1617  4 self 1 1510  4 view 1 1518  
393 14 Dtool_LL_pWYux 0 7 414 1670 1153 14 Dtool_LL_pWYux 0 1 4 copy 1 1628  
394 14 Dtool_LL_pacm3 0 7 414 1670 1153 14 Dtool_LL_pacm3 0 2 4 self 1 1510  6 source 1 1510  
395 14 Dtool_LL_pmafk 0 7 414 1670 1153 14 Dtool_LL_pmafk 0 1 11 type_handle 1 1659  
396 14 Dtool_LL_pIfZ2 0 7 414 1670 1153 14 Dtool_LL_pIfZ2 0 0 
397 14 Dtool_LL_pyhft 0 7 415 1670 1153 14 Dtool_LL_pyhft 0 2 1 n 1 1512  11 type_handle 1 1659  
398 14 Dtool_LL_pL6dH 0 7 415 1670 1153 14 Dtool_LL_pL6dH 0 1 1 n 1 1512  
399 14 Dtool_LL_pouvn 0 6 416 1512 0 14 Dtool_LL_pouvn 0 1 4 this 3 1628  
400 14 Dtool_LL_pkzRx 0 4 417 1520 0 14 Dtool_LL_pkzRx 0 2 4 this 3 1670  1 x 1 1630  
401 14 Dtool_LL_pY_qg 0 4 418 1520 0 14 Dtool_LL_pY_qg 0 1 4 this 3 1670  
402 14 Dtool_LL_pF1lc 0 6 419 1630 0 14 Dtool_LL_pF1lc 0 2 4 this 3 1628  1 n 1 1512  
403 14 Dtool_LL_pDiPw 0 4 420 1520 0 14 Dtool_LL_pDiPw 0 3 4 this 3 1670  1 n 1 1512  5 value 1 1630  
404 14 Dtool_LL_pk0HL 0 6 421 1630 0 14 Dtool_LL_pk0HL 0 2 4 this 3 1628  1 n 1 1512  
405 14 Dtool_LL_ph9QM 0 4 422 1520 0 14 Dtool_LL_ph9QM 0 3 4 this 3 1670  1 n 1 1512  5 value 1 1630  
406 14 Dtool_LL_pd49u 0 6 423 1516 0 14 Dtool_LL_pd49u 0 1 4 this 3 1628  
407 14 Dtool_LL_pmWMh 0 4 424 1520 0 14 Dtool_LL_pmWMh 0 2 4 this 3 1670  4 data 1 1516  
408 14 Dtool_LL_p_5dR 0 6 425 1516 0 14 Dtool_LL_p_5dR 0 3 4 this 3 1628  1 n 1 1512  5 count 1 1512  
409 14 Dtool_LL_pWBSj 0 4 426 1520 0 14 Dtool_LL_pWBSj 0 4 4 this 3 1670  1 n 1 1512  5 count 1 1512  4 data 1 1516  
410 14 Dtool_LL_ppiI2 0 6 427 1517 0 14 Dtool_LL_ppiI2 0 1 4 this 3 1628  
411 14 Dtool_LL_p_Tgy 0 6 428 1517 0 14 Dtool_LL_p_Tgy 0 1 4 this 3 1628  
412 14 Dtool_LL_pUGDL 0 6 429 1517 0 14 Dtool_LL_pUGDL 0 4 4 this 3 1670  4 self 1 1510  4 view 1 1518  5 flags 1 1517  
413 14 Dtool_LL_ptp_9 0 4 430 1520 0 14 Dtool_LL_ptp_9 0 3 4 this 3 1628  4 self 1 1510  4 view 1 1518  
414 14 Dtool_LL_p3n8b 0 7 433 1671 1171 14 Dtool_LL_p3n8b 0 1 4 copy 1 1639  
415 14 Dtool_LL_pZc0T 0 7 433 1671 1171 14 Dtool_LL_pZc0T 0 2 4 self 1 1510  6 source 1 1510  
416 14 Dtool_LL_platA 0 7 433 1671 1171 14 Dtool_LL_platA 0 1 11 type_handle 1 1659  
417 14 Dtool_LL_pLfnS 0 7 433 1671 1171 14 Dtool_LL_pLfnS 0 0 
418 14 Dtool_LL_p1htJ 0 7 434 1671 1171 14 Dtool_LL_p1htJ 0 2 1 n 1 1512  11 type_handle 1 1659  
419 14 Dtool_LL_pV6rj 0 7 434 1671 1171 14 Dtool_LL_pV6rj 0 1 1 n 1 1512  
420 14 Dtool_LL_pru9D 0 6 435 1512 0 14 Dtool_LL_pru9D 0 1 4 this 3 1639  
421 14 Dtool_LL_pnDAh 0 4 436 1520 0 14 Dtool_LL_pnDAh 0 2 4 this 3 1671  1 x 1 1641  
422 14 Dtool_LL_pW_48 0 4 437 1520 0 14 Dtool_LL_pW_48 0 1 4 this 3 1671  
423 14 Dtool_LL_pH1z4 0 6 438 1641 0 14 Dtool_LL_pH1z4 0 2 4 this 3 1639  1 n 1 1512  
424 14 Dtool_LL_pQtdT 0 4 439 1520 0 14 Dtool_LL_pQtdT 0 3 4 this 3 1671  1 n 1 1512  5 value 1 1641  
425 14 Dtool_LL_pq0Vn 0 6 440 1641 0 14 Dtool_LL_pq0Vn 0 2 4 this 3 1639  1 n 1 1512  
426 14 Dtool_LL_px_ev 0 4 441 1520 0 14 Dtool_LL_px_ev 0 3 4 this 3 1671  1 n 1 1512  5 value 1 1641  
427 14 Dtool_LL_pA4LL 0 6 442 1516 0 14 Dtool_LL_pA4LL 0 1 4 this 3 1639  
428 14 Dtool_LL_pkWa9 0 4 443 1520 0 14 Dtool_LL_pkWa9 0 2 4 this 3 1671  4 data 1 1516  
429 14 Dtool_LL_p55rt 0 6 444 1516 0 14 Dtool_LL_p55rt 0 3 4 this 3 1639  1 n 1 1512  5 count 1 1512  
430 14 Dtool_LL_pQBg_ 0 4 445 1520 0 14 Dtool_LL_pQBg_ 0 4 4 this 3 1671  1 n 1 1512  5 count 1 1512  4 data 1 1516  
431 14 Dtool_LL_psiWS 0 6 446 1517 0 14 Dtool_LL_psiWS 0 1 4 this 3 1639  
432 14 Dtool_LL_phTuO 0 6 447 1517 0 14 Dtool_LL_phTuO 0 1 4 this 3 1639  
433 14 Dtool_LL_pqGRn 0 6 448 1517 0 14 Dtool_LL_pqGRn 0 4 4 this 3 1671  4 self 1 1510  4 view 1 1518  5 flags 1 1517  
434 14 Dtool_LL_popNa 0 4 449 1520 0 14 Dtool_LL_popNa 0 3 4 this 3 1639  4 self 1 1510  4 view 1 1518  
435 14 Dtool_LL_pFiRb 0 7 452 1672 1189 14 Dtool_LL_pFiRb 0 1 4 copy 1 1650  
436 14 Dtool_LL_pccJ_ 0 7 452 1672 1189 14 Dtool_LL_pccJ_ 0 2 4 self 1 1510  6 source 1 1510  
437 14 Dtool_LL_pgaCr 0 7 452 1672 1189 14 Dtool_LL_pgaCr 0 1 11 type_handle 1 1659  
438 14 Dtool_LL_pOf88 0 7 452 1672 1189 14 Dtool_LL_pOf88 0 0 
439 14 Dtool_LL_pohC0 0 7 453 1672 1189 14 Dtool_LL_pohC0 0 2 1 n 1 1512  11 type_handle 1 1659  
440 14 Dtool_LL_pR6AO 0 7 453 1672 1189 14 Dtool_LL_pR6AO 0 1 1 n 1 1512  
441 14 Dtool_LL_pmuQu 0 6 454 1512 0 14 Dtool_LL_pmuQu 0 1 4 this 3 1650  
442 14 Dtool_LL_p7roo 0 4 455 1520 0 14 Dtool_LL_p7roo 0 2 4 this 3 1672  1 x 1 1652  
443 14 Dtool_LL_pS_Nn 0 4 456 1520 0 14 Dtool_LL_pS_Nn 0 1 4 this 3 1672  
444 14 Dtool_LL_pD1Gj 0 6 457 1652 0 14 Dtool_LL_pD1Gj 0 2 4 this 3 1650  1 n 1 1512  
445 14 Dtool_LL_pZvQI 0 4 458 1520 0 14 Dtool_LL_pZvQI 0 3 4 this 3 1672  1 n 1 1512  5 value 1 1652  
446 14 Dtool_LL_pu0qR 0 6 459 1652 0 14 Dtool_LL_pu0qR 0 2 4 this 3 1650  1 n 1 1512  
447 14 Dtool_LL_p44Tk 0 4 460 1520 0 14 Dtool_LL_p44Tk 0 3 4 this 3 1672  1 n 1 1512  5 value 1 1652  
448 14 Dtool_LL_pH4g1 0 6 461 1516 0 14 Dtool_LL_pH4g1 0 1 4 this 3 1650  
449 14 Dtool_LL_pgWvn 0 4 462 1520 0 14 Dtool_LL_pgWvn 0 2 4 this 3 1672  4 data 1 1516  
450 14 Dtool_LL_pl5AY 0 6 463 1516 0 14 Dtool_LL_pl5AY 0 3 4 this 3 1650  1 n 1 1512  5 count 1 1512  
451 14 Dtool_LL_psG1p 0 4 464 1520 0 14 Dtool_LL_psG1p 0 4 4 this 3 1672  1 n 1 1512  5 count 1 1512  4 data 1 1516  
452 14 Dtool_LL_pzir8 0 6 465 1517 0 14 Dtool_LL_pzir8 0 1 4 this 3 1650  
453 14 Dtool_LL_pkTD5 0 6 466 1517 0 14 Dtool_LL_pkTD5 0 1 4 this 3 1650  
454 14 Dtool_LL_puGmR 0 6 467 1517 0 14 Dtool_LL_puGmR 0 4 4 this 3 1672  4 self 1 1510  4 view 1 1518  5 flags 1 1517  
455 14 Dtool_LL_p0piE 0 4 468 1520 0 14 Dtool_LL_p0piE 0 3 4 this 3 1650  4 self 1 1510  4 view 1 1518  
456 14 Dtool_LL_pi4zP 0 7 472 1675 1200 14 Dtool_LL_pi4zP 0 1 4 this 3 1673  
457 14 Dtool_LL_pVfqL 0 6 473 1676 0 14 Dtool_LL_pVfqL 525 ////////////////////////////////////////////////////////////////////
//     Function: BoundingVolume::is_empty
//       Access: Published
//  Description: Any kind of volume might be empty.  This is a
//               degenerate volume that contains no points; it's not
//               the same as, for instance, a sphere with radius zero,
//               since that contains one point (the center).  It
//               intersects with no other volumes.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1673  
458 14 Dtool_LL_pFsFC 0 6 474 1676 0 14 Dtool_LL_pFsFC 905 ////////////////////////////////////////////////////////////////////
//     Function: BoundingVolume::is_infinite
//       Access: Published
//  Description: The other side of the empty coin is an infinite
//               volume.  This is a degenerate state of a normally
//               finite volume that contains all points.  (Note that
//               some kinds of infinite bounding volumes, like binary
//               separating planes, do not contain all points and thus
//               correctly return is_infinite() == false, even though
//               they are technically infinite.  This is a special
//               case of the word 'infinite' meaning the volume covers
//               all points in space.)
//
//               It completely intersects with all other volumes
//               except empty volumes.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1673  
459 14 Dtool_LL_pD2hm 0 4 475 1520 0 14 Dtool_LL_pD2hm 383 ////////////////////////////////////////////////////////////////////
//     Function: BoundingVolume::set_infinite
//       Access: Published
//  Description: Marks the volume as infinite, even if it is normally
//               finite.  You can think of this as an infinite
//               extend_by() operation.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1675  
460 14 Dtool_LL_pARix 0 6 476 1676 0 14 Dtool_LL_pARix 303 ////////////////////////////////////////////////////////////////////
//     Function: BoundingVolume::extend_by
//       Access: Published
//  Description: Increases the size of the volume to include the given
//               volume.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1675  3 vol 1 1673  
461 14 Dtool_LL_pdpPR 0 6 479 1517 0 14 Dtool_LL_pdpPR 372 ////////////////////////////////////////////////////////////////////
//     Function: BoundingVolume::contains
//       Access: Published
//  Description: Returns the appropriate set of IntersectionFlags to
//               indicate the amount of intersection with the
//               indicated volume.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1673  3 vol 1 1673  
462 14 Dtool_LL_pQbvQ 0 4 480 1520 0 14 Dtool_LL_pQbvQ 0 2 4 this 3 1673  3 out 1 1524  
463 14 Dtool_LL_pJz6_ 0 4 481 1520 0 14 Dtool_LL_pJz6_ 220 ////////////////////////////////////////////////////////////////////
//     Function: BoundingVolume::write
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 1673  3 out 1 1524  12 indent_level 1 1517  
464 14 Dtool_LL_pZ2qR 0 4 481 1520 0 14 Dtool_LL_pZ2qR 220 ////////////////////////////////////////////////////////////////////
//     Function: BoundingVolume::write
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1673  3 out 1 1524  
465 14 Dtool_LL_prfVo 0 7 483 1659 0 14 Dtool_LL_prfVo 0 0 
466 14 Dtool_LL_pzZa3 0 6 486 1676 0 14 Dtool_LL_pzZa3 309 ////////////////////////////////////////////////////////////////////
//     Function: GeometricBoundingVolume::extend_by
//       Access: Public
//  Description: Increases the size of the volume to include the given
//               volume.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1677  3 vol 1 1678  
467 14 Dtool_LL_p5ZtT 0 6 486 1676 0 14 Dtool_LL_p5ZtT 308 ////////////////////////////////////////////////////////////////////
//     Function: GeometricBoundingVolume::extend_by
//       Access: Public
//  Description: Increases the size of the volume to include the given
//               point.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1677  5 point 1 1680  
468 14 Dtool_LL_pdv6k 0 6 487 1676 0 14 Dtool_LL_pdv6k 300 ////////////////////////////////////////////////////////////////////
//     Function: GeometricBoundingVolume::around
//       Access: Public
//  Description: Resets the volume to enclose only the points
//               indicated.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1677  5 first 1 1680  4 last 1 1680  
469 14 Dtool_LL_pB8A3 0 6 488 1517 0 14 Dtool_LL_pB8A3 378 ////////////////////////////////////////////////////////////////////
//     Function: GeometricBoundingVolume::contains
//       Access: Public
//  Description: Returns the appropriate set of IntersectionFlags to
//               indicate the amount of intersection with the
//               indicated volume.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1678  3 vol 1 1678  
470 14 Dtool_LL_pEncR 0 6 488 1517 0 14 Dtool_LL_pEncR 377 ////////////////////////////////////////////////////////////////////
//     Function: GeometricBoundingVolume::contains
//       Access: Public
//  Description: Returns the appropriate set of IntersectionFlags to
//               indicate the amount of intersection with the
//               indicated point.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1678  5 point 1 1680  
471 14 Dtool_LL_p0SwX 0 6 488 1517 0 14 Dtool_LL_p0SwX 384 ////////////////////////////////////////////////////////////////////
//     Function: GeometricBoundingVolume::contains
//       Access: Public
//  Description: Returns the appropriate set of IntersectionFlags to
//               indicate the amount of intersection with the
//               indicated line segment.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1678  1 a 1 1680  1 b 1 1680  
472 14 Dtool_LL_pGh7m 0 7 489 1683 0 14 Dtool_LL_pGh7m 0 1 4 this 3 1678  
473 14 Dtool_LL_pIb98 0 4 490 1520 0 14 Dtool_LL_pIb98 0 2 4 this 3 1677  3 mat 1 1684  
474 14 Dtool_LL_pB1fo 0 7 491 1659 0 14 Dtool_LL_pB1fo 0 0 
475 14 Dtool_LL_phQ34 0 7 494 1683 0 14 Dtool_LL_phQ34 0 1 4 this 3 1687  
476 14 Dtool_LL_paM3J 0 7 495 1683 0 14 Dtool_LL_paM3J 0 1 4 this 3 1687  
477 14 Dtool_LL_p6P0K 0 6 496 1689 0 14 Dtool_LL_p6P0K 238 ////////////////////////////////////////////////////////////////////
//     Function: FiniteBoundingVolume::get_volume
//       Access: Public, Virtual
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1687  
478 14 Dtool_LL_pITxA 0 7 497 1659 0 14 Dtool_LL_pITxA 0 0 
479 14 Dtool_LL_poFk1 0 7 500 1690 1215 14 Dtool_LL_poFk1 763 // Filename: parabola_src.I
// Created by:  drose (10Oct07)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LParabola::Default Constructor
//       Access: Published
//  Description: Constructs a meaningless degenerate parabola.
//////////////////////////////////////////////////////////////////// 0 
480 14 Dtool_LL_pGkWK 0 7 500 1690 1215 14 Dtool_LL_pGkWK 227 ////////////////////////////////////////////////////////////////////
//     Function: LParabola::Copy Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 copy 1 1691  
481 14 Dtool_LL_p3msS 0 7 500 1690 1215 14 Dtool_LL_p3msS 381 ////////////////////////////////////////////////////////////////////
//     Function: LParabola::Constructor
//       Access: Published
//  Description: Constructs a parabola given the three points of the
//               parametric equation: the acceleration, initial
//               velocity, and start point.
//////////////////////////////////////////////////////////////////// 3 1 a 1 1586  1 b 1 1586  1 c 1 1586  
482 14 Dtool_LL_pEaDA 0 6 501 1690 0 14 Dtool_LL_pEaDA 235 ////////////////////////////////////////////////////////////////////
//     Function: LParabola::Copy Assignment Operator
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 1690  4 copy 1 1691  
483 14 Dtool_LL_phT0m 0 4 503 1520 0 14 Dtool_LL_phT0m 754 // Filename: parabola_src.cxx
// Created by:  drose (10Oct07)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LParabola::xform
//       Access: Published
//  Description: Transforms the parabola by the indicated matrix.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1690  3 mat 1 1684  
484 14 Dtool_LL_pbQJP 0 6 504 1586 0 14 Dtool_LL_pbQJP 313 ////////////////////////////////////////////////////////////////////
//     Function: LParabola::get_a
//       Access: Published
//  Description: Returns the first point of the parabola's parametric
//               equation: the acceleration.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1691  
485 14 Dtool_LL_pbMBU 0 6 505 1586 0 14 Dtool_LL_pbMBU 318 ////////////////////////////////////////////////////////////////////
//     Function: LParabola::get_b
//       Access: Published
//  Description: Returns the second point of the parabola's parametric
//               equation: the initial velocity.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1691  
486 14 Dtool_LL_pbo6Y 0 6 506 1586 0 14 Dtool_LL_pbo6Y 312 ////////////////////////////////////////////////////////////////////
//     Function: LParabola::get_c
//       Access: Published
//  Description: Returns the third point of the parabola's parametric
//               equation: the start point.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1691  
487 14 Dtool_LL_peihv 0 7 507 1683 0 14 Dtool_LL_peihv 266 ////////////////////////////////////////////////////////////////////
//     Function: LParabola::calc_point
//       Access: Published
//  Description: Computes the point on the parabola at time t.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1691  1 t 1 1689  
488 14 Dtool_LL_pD9H1 0 4 508 1520 0 14 Dtool_LL_pD9H1 216 ////////////////////////////////////////////////////////////////////
//     Function: LParabola::output
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1691  3 out 1 1524  
489 14 Dtool_LL_pH6YY 0 4 509 1520 0 14 Dtool_LL_pH6YY 215 ////////////////////////////////////////////////////////////////////
//     Function: LParabola::write
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 1691  3 out 1 1524  12 indent_level 1 1517  
490 14 Dtool_LL_pcjiE 0 4 509 1520 0 14 Dtool_LL_pcjiE 215 ////////////////////////////////////////////////////////////////////
//     Function: LParabola::write
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1691  3 out 1 1524  
491 14 Dtool_LL_pfMsi 0 4 510 1520 0 14 Dtool_LL_pfMsi 643 ////////////////////////////////////////////////////////////////////
//     Function: LParabola::write_datagram_fixed
//       Access: Public
//  Description: Writes the parabola to the Datagram using add_float32()
//               or add_float64(), depending on the type of floats in
//               the parabola, regardless of the setting of
//               Datagram::set_stdfloat_double().  This is appropriate
//               when you want to write a fixed-width value to the
//               datagram, especially when you are not writing a bam
//               file.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1691  11 destination 1 1693  
492 14 Dtool_LL_pfdOf 0 4 511 1520 0 14 Dtool_LL_pfdOf 347 ////////////////////////////////////////////////////////////////////
//     Function: LParabola::read_datagram_fixed
//       Access: Public
//  Description: Reads the parabola from the Datagram using get_float32()
//               or get_float64().  See write_datagram_fixed().
//////////////////////////////////////////////////////////////////// 2 4 this 3 1690  6 source 1 1695  
493 14 Dtool_LL_p5xmf 0 4 512 1520 0 14 Dtool_LL_p5xmf 463 ////////////////////////////////////////////////////////////////////
//     Function: LParabola::write_datagram
//       Access: Public
//  Description: Writes the parabola to the Datagram using
//               add_stdfloat().  This is appropriate when you want to
//               write the vector using the standard width setting,
//               especially when you are writing a bam file.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1691  11 destination 1 1693  
494 14 Dtool_LL_p5pnx 0 4 513 1520 0 14 Dtool_LL_p5pnx 279 ////////////////////////////////////////////////////////////////////
//     Function: LParabola::read_datagram
//       Access: Public
//  Description: Reads the parabola from the Datagram using get_stdfloat().
//////////////////////////////////////////////////////////////////// 2 4 this 3 1690  6 source 1 1695  
495 14 Dtool_LL_pK6Cy 0 7 515 1697 1229 14 Dtool_LL_pK6Cy 763 // Filename: parabola_src.I
// Created by:  drose (10Oct07)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LParabola::Default Constructor
//       Access: Published
//  Description: Constructs a meaningless degenerate parabola.
//////////////////////////////////////////////////////////////////// 0 
496 14 Dtool_LL_pNAVD 0 7 515 1697 1229 14 Dtool_LL_pNAVD 227 ////////////////////////////////////////////////////////////////////
//     Function: LParabola::Copy Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 copy 1 1698  
497 14 Dtool_LL_pHAjH 0 7 515 1697 1229 14 Dtool_LL_pHAjH 381 ////////////////////////////////////////////////////////////////////
//     Function: LParabola::Constructor
//       Access: Published
//  Description: Constructs a parabola given the three points of the
//               parametric equation: the acceleration, initial
//               velocity, and start point.
//////////////////////////////////////////////////////////////////// 3 1 a 1 1575  1 b 1 1575  1 c 1 1575  
498 14 Dtool_LL_pL2jM 0 6 516 1697 0 14 Dtool_LL_pL2jM 235 ////////////////////////////////////////////////////////////////////
//     Function: LParabola::Copy Assignment Operator
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 1697  4 copy 1 1698  
499 14 Dtool_LL_pE2xP 0 4 518 1520 0 14 Dtool_LL_pE2xP 754 // Filename: parabola_src.cxx
// Created by:  drose (10Oct07)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LParabola::xform
//       Access: Published
//  Description: Transforms the parabola by the indicated matrix.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1697  3 mat 1 1700  
500 14 Dtool_LL_pF8Jf 0 6 519 1575 0 14 Dtool_LL_pF8Jf 313 ////////////////////////////////////////////////////////////////////
//     Function: LParabola::get_a
//       Access: Published
//  Description: Returns the first point of the parabola's parametric
//               equation: the acceleration.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1698  
501 14 Dtool_LL_pFgBk 0 6 520 1575 0 14 Dtool_LL_pFgBk 318 ////////////////////////////////////////////////////////////////////
//     Function: LParabola::get_b
//       Access: Published
//  Description: Returns the second point of the parabola's parametric
//               equation: the initial velocity.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1698  
502 14 Dtool_LL_pFE6o 0 6 521 1575 0 14 Dtool_LL_pFE6o 312 ////////////////////////////////////////////////////////////////////
//     Function: LParabola::get_c
//       Access: Published
//  Description: Returns the third point of the parabola's parametric
//               equation: the start point.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1698  
503 14 Dtool_LL_phQkC 0 7 522 1705 0 14 Dtool_LL_phQkC 266 ////////////////////////////////////////////////////////////////////
//     Function: LParabola::calc_point
//       Access: Published
//  Description: Computes the point on the parabola at time t.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1698  1 t 1 1704  
504 14 Dtool_LL_pipHF 0 4 523 1520 0 14 Dtool_LL_pipHF 216 ////////////////////////////////////////////////////////////////////
//     Function: LParabola::output
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1698  3 out 1 1524  
505 14 Dtool_LL_p68Zo 0 4 524 1520 0 14 Dtool_LL_p68Zo 215 ////////////////////////////////////////////////////////////////////
//     Function: LParabola::write
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 1698  3 out 1 1524  12 indent_level 1 1517  
506 14 Dtool_LL_p5diU 0 4 524 1520 0 14 Dtool_LL_p5diU 215 ////////////////////////////////////////////////////////////////////
//     Function: LParabola::write
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1698  3 out 1 1524  
507 14 Dtool_LL_pBYsy 0 4 525 1520 0 14 Dtool_LL_pBYsy 643 ////////////////////////////////////////////////////////////////////
//     Function: LParabola::write_datagram_fixed
//       Access: Public
//  Description: Writes the parabola to the Datagram using add_float32()
//               or add_float64(), depending on the type of floats in
//               the parabola, regardless of the setting of
//               Datagram::set_stdfloat_double().  This is appropriate
//               when you want to write a fixed-width value to the
//               datagram, especially when you are not writing a bam
//               file.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1698  11 destination 1 1693  
508 14 Dtool_LL_p9JOv 0 4 526 1520 0 14 Dtool_LL_p9JOv 347 ////////////////////////////////////////////////////////////////////
//     Function: LParabola::read_datagram_fixed
//       Access: Public
//  Description: Reads the parabola from the Datagram using get_float32()
//               or get_float64().  See write_datagram_fixed().
//////////////////////////////////////////////////////////////////// 2 4 this 3 1697  6 source 1 1695  
509 14 Dtool_LL_pbsmv 0 4 527 1520 0 14 Dtool_LL_pbsmv 463 ////////////////////////////////////////////////////////////////////
//     Function: LParabola::write_datagram
//       Access: Public
//  Description: Writes the parabola to the Datagram using
//               add_stdfloat().  This is appropriate when you want to
//               write the vector using the standard width setting,
//               especially when you are writing a bam file.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1698  11 destination 1 1693  
510 14 Dtool_LL_pY9nB 0 4 528 1520 0 14 Dtool_LL_pY9nB 279 ////////////////////////////////////////////////////////////////////
//     Function: LParabola::read_datagram
//       Access: Public
//  Description: Reads the parabola from the Datagram using get_stdfloat().
//////////////////////////////////////////////////////////////////// 2 4 this 3 1697  6 source 1 1695  
511 14 Dtool_LL_p8HBL 0 7 531 1706 1257 14 Dtool_LL_p8HBL 881 // Filename: plane_src.I
// Created by:  mike (09Jan97)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LPlane::Constructor
//       Access: Published
//  Description: Creates a default plane.  This plane happens to
//               intersect the origin, perpendicular to the Z axis.
//               It's not clear how useful a default plane is.
//////////////////////////////////////////////////////////////////// 0 
512 14 Dtool_LL_poS5k 0 7 531 1706 1257 14 Dtool_LL_poS5k 429 ////////////////////////////////////////////////////////////////////
//     Function: LPlane::Constructor
//       Access: Published
//  Description: Constructs a plane given three counter-clockwise
//               points, as seen from the front of the plane (that is,
//               viewed from the end of the normal vector, looking
//               down).
//////////////////////////////////////////////////////////////////// 3 1 a 1 1680  1 b 1 1680  1 c 1 1680  
513 14 Dtool_LL_pkFDu 0 7 531 1706 1257 14 Dtool_LL_pkFDu 223 ////////////////////////////////////////////////////////////////////
//     Function: LPlane::Copy Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 1707  
514 14 Dtool_LL_pKn6W 0 7 531 1706 1257 14 Dtool_LL_pKn6W 314 ////////////////////////////////////////////////////////////////////
//     Function: LPlane::Constructor
//       Access: Published
//  Description: Constructs a plane given a surface normal vector and
//               a point within the plane.
//////////////////////////////////////////////////////////////////// 2 6 normal 1 1709  5 point 1 1680  
515 14 Dtool_LL_p_VoQ 0 7 531 1706 1257 14 Dtool_LL_p_VoQ 298 ////////////////////////////////////////////////////////////////////
//     Function: LPlane::Constructor
//       Access: Published
//  Description: Constructs a plane given the four terms of the plane
//               equation.
//////////////////////////////////////////////////////////////////// 4 1 a 1 1689  1 b 1 1689  1 c 1 1689  1 d 1 1689  
516 14 Dtool_LL_pmVHz 0 7 532 1706 1257 14 Dtool_LL_pmVHz 272 ////////////////////////////////////////////////////////////////////
//     Function: LPlane::Operator * LMatrix3
//       Access: Published
//  Description: Transforms the plane by the indicated matrix.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1712  3 mat 1 1531  
517 14 Dtool_LL_pwV_j 0 7 532 1706 1257 14 Dtool_LL_pwV_j 272 ////////////////////////////////////////////////////////////////////
//     Function: LPlane::Operator * LMatrix4
//       Access: Published
//  Description: Transforms the plane by the indicated matrix.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1712  3 mat 1 1684  
518 14 Dtool_LL_palO9 0 6 533 1706 0 14 Dtool_LL_palO9 273 ////////////////////////////////////////////////////////////////////
//     Function: LPlane::Operator *= LMatrix4
//       Access: Published
//  Description: Transforms the plane by the indicated matrix.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1706  3 mat 1 1684  
519 14 Dtool_LL_pXLe5 0 4 534 1520 0 14 Dtool_LL_pXLe5 258 ////////////////////////////////////////////////////////////////////
//     Function: LPlane::xform
//       Access: Published
//  Description: Transforms the plane by the indicated matrix.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1706  3 mat 1 1684  
520 14 Dtool_LL_p9crq 0 7 535 1706 1257 14 Dtool_LL_p9crq 268 ////////////////////////////////////////////////////////////////////
//     Function: LPlane::Unary -
//       Access: Published
//  Description: Returns the same plane facing the opposite direction.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1712  
521 14 Dtool_LL_p18X3 0 7 536 1714 0 14 Dtool_LL_p18X3 854 // Filename: plane_src.cxx
// Created by:  drose (03Apr01)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LPlane::get_reflection_mat
//       Access: Published
//  Description: This computes a transform matrix that reflects the
//               universe to the other side of the plane, as in a
//               mirror.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1712  
522 14 Dtool_LL_pnRGL 0 7 537 1715 0 14 Dtool_LL_pnRGL 258 ////////////////////////////////////////////////////////////////////
//     Function: LPlane::get_normal
//       Access: Published
//  Description: Returns the surface normal of the plane.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1712  
523 14 Dtool_LL_pnb87 0 7 538 1683 0 14 Dtool_LL_pnb87 382 ////////////////////////////////////////////////////////////////////
//     Function: LPlane::get_point
//       Access: Published
//  Description: Returns an arbitrary point in the plane.  This can be
//               used along with the normal returned by get_normal()
//               to reconstruct the plane.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1712  
524 14 Dtool_LL_pDsvK 0 6 539 1689 0 14 Dtool_LL_pDsvK 612 ////////////////////////////////////////////////////////////////////
//     Function: LPlane::dist_to_plane
//       Access: Published
//  Description: Returns the straight-line shortest distance from the
//               point to the plane.  The returned value is positive
//               if the point is in front of the plane (on the side
//               with the normal), or negative in the point is behind
//               the plane (on the opposite side from the normal).
//               It's zero if the point is exactly in the plane.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1712  5 point 1 1680  
525 14 Dtool_LL_pqGnr 0 7 540 1683 0 14 Dtool_LL_pqGnr 307 ////////////////////////////////////////////////////////////////////
//     Function: LPlane::project
//       Access: Published
//  Description: Returns the point within the plane nearest to the
//               indicated point in space.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1712  5 point 1 1680  
526 14 Dtool_LL_py_b8 0 4 541 1520 0 14 Dtool_LL_py_b8 329 ////////////////////////////////////////////////////////////////////
//     Function: LPlane::flip
//       Access: Published
//  Description: Convenience method that flips the plane in-place.
//               This is done by simply flipping the normal vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1706  
527 14 Dtool_LL_p2XGL 0 6 542 1676 0 14 Dtool_LL_p2XGL 610 ////////////////////////////////////////////////////////////////////
//     Function: LPlane::intersects_line
//       Access: Published
//  Description: Returns true if the plane intersects the infinite
//               line passing through points p1 and p2, false if the
//               line is parallel.  The points p1 and p2 are used only
//               to define the Euclidean line; they have no other
//               bearing on the intersection test.  If true, sets
//               intersection_point to the point of intersection.
//////////////////////////////////////////////////////////////////// 4 4 this 3 1712  18 intersection_point 1 1683  2 p1 1 1680  2 p2 1 1680  
528 14 Dtool_LL_p4dcr 0 6 543 1676 0 14 Dtool_LL_p4dcr 589 ////////////////////////////////////////////////////////////////////
//     Function: LPlane::intersects_plane
//       Access: Published
//  Description: Returns true if the two planes intersect, false if
//               they do not.  If they do intersect, then from and
//               delta are filled in with the parametric
//               representation of the line of intersection: that is,
//               from is a point on that line, and delta is a vector
//               showing the direction of the line.
//////////////////////////////////////////////////////////////////// 4 4 this 3 1712  4 from 1 1683  5 delta 1 1715  5 other 1 1712  
529 14 Dtool_LL_p6d8d 0 4 545 1520 0 14 Dtool_LL_p6d8d 213 ////////////////////////////////////////////////////////////////////
//     Function: LPlane::output
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1712  3 out 1 1524  
530 14 Dtool_LL_pvP_l 0 4 546 1520 0 14 Dtool_LL_pvP_l 212 ////////////////////////////////////////////////////////////////////
//     Function: LPlane::write
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 1712  3 out 1 1524  12 indent_level 1 1517  
531 14 Dtool_LL_pHDHy 0 4 546 1520 0 14 Dtool_LL_pHDHy 212 ////////////////////////////////////////////////////////////////////
//     Function: LPlane::write
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1712  3 out 1 1524  
532 14 Dtool_LL_psXRI 0 7 550 1716 1274 14 Dtool_LL_psXRI 881 // Filename: plane_src.I
// Created by:  mike (09Jan97)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LPlane::Constructor
//       Access: Published
//  Description: Creates a default plane.  This plane happens to
//               intersect the origin, perpendicular to the Z axis.
//               It's not clear how useful a default plane is.
//////////////////////////////////////////////////////////////////// 0 
533 14 Dtool_LL_pySWh 0 7 550 1716 1274 14 Dtool_LL_pySWh 429 ////////////////////////////////////////////////////////////////////
//     Function: LPlane::Constructor
//       Access: Published
//  Description: Constructs a plane given three counter-clockwise
//               points, as seen from the front of the plane (that is,
//               viewed from the end of the normal vector, looking
//               down).
//////////////////////////////////////////////////////////////////// 3 1 a 1 1717  1 b 1 1717  1 c 1 1717  
534 14 Dtool_LL_p01QE 0 7 550 1716 1274 14 Dtool_LL_p01QE 223 ////////////////////////////////////////////////////////////////////
//     Function: LPlane::Copy Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 1719  
535 14 Dtool_LL_pa0EO 0 7 550 1716 1274 14 Dtool_LL_pa0EO 314 ////////////////////////////////////////////////////////////////////
//     Function: LPlane::Constructor
//       Access: Published
//  Description: Constructs a plane given a surface normal vector and
//               a point within the plane.
//////////////////////////////////////////////////////////////////// 2 6 normal 1 1721  5 point 1 1717  
536 14 Dtool_LL_pc0U2 0 7 550 1716 1274 14 Dtool_LL_pc0U2 298 ////////////////////////////////////////////////////////////////////
//     Function: LPlane::Constructor
//       Access: Published
//  Description: Constructs a plane given the four terms of the plane
//               equation.
//////////////////////////////////////////////////////////////////// 4 1 a 1 1704  1 b 1 1704  1 c 1 1704  1 d 1 1704  
537 14 Dtool_LL_pMPq4 0 7 551 1716 1274 14 Dtool_LL_pMPq4 272 ////////////////////////////////////////////////////////////////////
//     Function: LPlane::Operator * LMatrix3
//       Access: Published
//  Description: Transforms the plane by the indicated matrix.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1724  3 mat 1 1513  
538 14 Dtool_LL_pGPip 0 7 551 1716 1274 14 Dtool_LL_pGPip 272 ////////////////////////////////////////////////////////////////////
//     Function: LPlane::Operator * LMatrix4
//       Access: Published
//  Description: Transforms the plane by the indicated matrix.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1724  3 mat 1 1700  
539 14 Dtool_LL_pmvt6 0 6 552 1716 0 14 Dtool_LL_pmvt6 273 ////////////////////////////////////////////////////////////////////
//     Function: LPlane::Operator *= LMatrix4
//       Access: Published
//  Description: Transforms the plane by the indicated matrix.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1716  3 mat 1 1700  
540 14 Dtool_LL_pfeCb 0 4 553 1520 0 14 Dtool_LL_pfeCb 258 ////////////////////////////////////////////////////////////////////
//     Function: LPlane::xform
//       Access: Published
//  Description: Transforms the plane by the indicated matrix.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1716  3 mat 1 1700  
541 14 Dtool_LL_p9uOo 0 7 554 1716 1274 14 Dtool_LL_p9uOo 268 ////////////////////////////////////////////////////////////////////
//     Function: LPlane::Unary -
//       Access: Published
//  Description: Returns the same plane facing the opposite direction.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1724  
542 14 Dtool_LL_p1q70 0 7 555 1726 0 14 Dtool_LL_p1q70 854 // Filename: plane_src.cxx
// Created by:  drose (03Apr01)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LPlane::get_reflection_mat
//       Access: Published
//  Description: This computes a transform matrix that reflects the
//               universe to the other side of the plane, as in a
//               mirror.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1724  
543 14 Dtool_LL_pnDqI 0 7 556 1727 0 14 Dtool_LL_pnDqI 258 ////////////////////////////////////////////////////////////////////
//     Function: LPlane::get_normal
//       Access: Published
//  Description: Returns the surface normal of the plane.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1724  
544 14 Dtool_LL_pnJg5 0 7 557 1705 0 14 Dtool_LL_pnJg5 382 ////////////////////////////////////////////////////////////////////
//     Function: LPlane::get_point
//       Access: Published
//  Description: Returns an arbitrary point in the plane.  This can be
//               used along with the normal returned by get_normal()
//               to reconstruct the plane.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1724  
545 14 Dtool_LL_pDA3F 0 6 558 1704 0 14 Dtool_LL_pDA3F 612 ////////////////////////////////////////////////////////////////////
//     Function: LPlane::dist_to_plane
//       Access: Published
//  Description: Returns the straight-line shortest distance from the
//               point to the plane.  The returned value is positive
//               if the point is in front of the plane (on the side
//               with the normal), or negative in the point is behind
//               the plane (on the opposite side from the normal).
//               It's zero if the point is exactly in the plane.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1724  5 point 1 1717  
546 14 Dtool_LL_p4sJp 0 7 559 1705 0 14 Dtool_LL_p4sJp 307 ////////////////////////////////////////////////////////////////////
//     Function: LPlane::project
//       Access: Published
//  Description: Returns the point within the plane nearest to the
//               indicated point in space.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1724  5 point 1 1717  
547 14 Dtool_LL_pyM_5 0 4 560 1520 0 14 Dtool_LL_pyM_5 329 ////////////////////////////////////////////////////////////////////
//     Function: LPlane::flip
//       Access: Published
//  Description: Convenience method that flips the plane in-place.
//               This is done by simply flipping the normal vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1716  
548 14 Dtool_LL_p53GC 0 6 561 1676 0 14 Dtool_LL_p53GC 610 ////////////////////////////////////////////////////////////////////
//     Function: LPlane::intersects_line
//       Access: Published
//  Description: Returns true if the plane intersects the infinite
//               line passing through points p1 and p2, false if the
//               line is parallel.  The points p1 and p2 are used only
//               to define the Euclidean line; they have no other
//               bearing on the intersection test.  If true, sets
//               intersection_point to the point of intersection.
//////////////////////////////////////////////////////////////////// 4 4 this 3 1724  18 intersection_point 1 1705  2 p1 1 1717  2 p2 1 1717  
549 14 Dtool_LL_pymJY 0 6 562 1676 0 14 Dtool_LL_pymJY 589 ////////////////////////////////////////////////////////////////////
//     Function: LPlane::intersects_plane
//       Access: Published
//  Description: Returns true if the two planes intersect, false if
//               they do not.  If they do intersect, then from and
//               delta are filled in with the parametric
//               representation of the line of intersection: that is,
//               from is a point on that line, and delta is a vector
//               showing the direction of the line.
//////////////////////////////////////////////////////////////////// 4 4 this 3 1724  4 from 1 1705  5 delta 1 1727  5 other 1 1724  
550 14 Dtool_LL_p6Tgb 0 4 564 1520 0 14 Dtool_LL_p6Tgb 213 ////////////////////////////////////////////////////////////////////
//     Function: LPlane::output
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1724  3 out 1 1524  
551 14 Dtool_LL_pvBij 0 4 565 1520 0 14 Dtool_LL_pvBij 212 ////////////////////////////////////////////////////////////////////
//     Function: LPlane::write
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 1724  3 out 1 1524  12 indent_level 1 1517  
552 14 Dtool_LL_pHRrv 0 4 565 1520 0 14 Dtool_LL_pHRrv 212 ////////////////////////////////////////////////////////////////////
//     Function: LPlane::write
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1724  3 out 1 1524  
553 14 Dtool_LL_pC_T2 0 7 568 1728 1284 14 Dtool_LL_pC_T2 742 // Filename: boundingBox.I
// Created by:  drose (31May07)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: BoundingBox::Constructor
//       Access: Published
//  Description: Constructs an empty box object.
//////////////////////////////////////////////////////////////////// 0 
554 14 Dtool_LL_pUDkp 0 7 568 1728 1284 14 Dtool_LL_pUDkp 257 ////////////////////////////////////////////////////////////////////
//     Function: BoundingBox::Constructor
//       Access: Published
//  Description: Constructs a specific box object.
//////////////////////////////////////////////////////////////////// 2 3 min 1 1680  3 max 1 1680  
555 14 Dtool_LL_p3R23 0 4 569 1520 0 14 Dtool_LL_p3R23 0 2 4 this 3 1728  4 size 1 1512  
556 14 Dtool_LL_pCqx3 0 6 572 1517 0 14 Dtool_LL_pCqx3 284 ////////////////////////////////////////////////////////////////////
//     Function: BoundingBox::get_num_points
//       Access: Published
//  Description: Returns 8: the number of vertices of a rectangular solid.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1729  
557 14 Dtool_LL_poi08 0 7 573 1683 0 14 Dtool_LL_poi08 270 ////////////////////////////////////////////////////////////////////
//     Function: BoundingBox::get_point
//       Access: Published
//  Description: Returns the nth vertex of the rectangular solid.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1729  1 n 1 1517  
558 14 Dtool_LL_pyaSV 0 6 574 1517 0 14 Dtool_LL_pyaSV 281 ////////////////////////////////////////////////////////////////////
//     Function: BoundingBox::get_num_planes
//       Access: Published
//  Description: Returns 6: the number of faces of a rectangular solid.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1729  
559 14 Dtool_LL_pjuTV 0 7 575 1706 1257 14 Dtool_LL_pjuTV 268 ////////////////////////////////////////////////////////////////////
//     Function: BoundingBox::get_plane
//       Access: Published
//  Description: Returns the nth face of the rectangular solid.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1729  1 n 1 1517  
560 14 Dtool_LL_pAHSK 0 7 576 1659 0 14 Dtool_LL_pAHSK 0 0 
561 14 Dtool_LL_pnyr_ 0 7 579 1731 1292 14 Dtool_LL_pnyr_ 686 // Filename: frustum_src.I
// Created by:  mike (09Jan97)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: Constructor
//       Access:
//  Description:
//////////////////////////////////////////////////////////////////// 0 
562 14 Dtool_LL_paWHx 0 4 580 1520 0 14 Dtool_LL_paWHx 249 ////////////////////////////////////////////////////////////////////
//     Function: make_ortho_2D
//       Access:
//  Description: Sets up a two-dimensional orthographic frustum
//////////////////////////////////////////////////////////////////// 1 4 this 3 1731  
563 14 Dtool_LL_p5EUb 0 4 580 1520 0 14 Dtool_LL_p5EUb 249 ////////////////////////////////////////////////////////////////////
//     Function: make_ortho_2D
//       Access:
//  Description: Sets up a two-dimensional orthographic frustum
//////////////////////////////////////////////////////////////////// 5 4 this 3 1731  1 l 1 1689  1 r 1 1689  1 t 1 1689  1 b 1 1689  
564 14 Dtool_LL_pQfBG 0 4 581 1520 0 14 Dtool_LL_pQfBG 224 ////////////////////////////////////////////////////////////////////
//     Function: make_ortho_2D
//       Access:
//  Description: Behaves like gluOrtho
//////////////////////////////////////////////////////////////////// 3 4 this 3 1731  5 fnear 1 1689  4 ffar 1 1689  
565 14 Dtool_LL_pR5m5 0 4 581 1520 0 14 Dtool_LL_pR5m5 224 ////////////////////////////////////////////////////////////////////
//     Function: make_ortho_2D
//       Access:
//  Description: Behaves like gluOrtho
//////////////////////////////////////////////////////////////////// 7 4 this 3 1731  5 fnear 1 1689  4 ffar 1 1689  1 l 1 1689  1 r 1 1689  1 t 1 1689  1 b 1 1689  
566 14 Dtool_LL_pnUSt 0 4 582 1520 0 14 Dtool_LL_pnUSt 578 ////////////////////////////////////////////////////////////////////
//     Function: make_perspective
//       Access:
//  Description: Behaves like gluPerspective (Aspect = width/height,
//               Yfov in degrees)
//       aspect
//   +------------+
//   |            |
// 1 |            | yfov
//   |            |
//   +------------+
//
//     -------+------
//      \     |     /
//       \    |    /
//        \   |   /
//         \  |  /
//          \ | /
//           \|/
//            W yfov
//
//////////////////////////////////////////////////////////////////// 5 4 this 3 1731  4 xfov 1 1689  6 aspect 1 1689  5 fnear 1 1689  4 ffar 1 1689  
567 14 Dtool_LL_pxcU1 0 4 583 1520 0 14 Dtool_LL_pxcU1 0 5 4 this 3 1731  4 yfov 1 1689  6 aspect 1 1689  5 fnear 1 1689  4 ffar 1 1689  
568 14 Dtool_LL_pH1Ii 0 4 584 1520 0 14 Dtool_LL_pH1Ii 0 5 4 this 3 1731  4 xfov 1 1689  4 yfov 1 1689  5 fnear 1 1689  4 ffar 1 1689  
569 14 Dtool_LL_p8tL7 0 7 588 1732 1300 14 Dtool_LL_p8tL7 686 // Filename: frustum_src.I
// Created by:  mike (09Jan97)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: Constructor
//       Access:
//  Description:
//////////////////////////////////////////////////////////////////// 0 
570 14 Dtool_LL_pzWnt 0 4 589 1520 0 14 Dtool_LL_pzWnt 249 ////////////////////////////////////////////////////////////////////
//     Function: make_ortho_2D
//       Access:
//  Description: Sets up a two-dimensional orthographic frustum
//////////////////////////////////////////////////////////////////// 1 4 this 3 1732  
571 14 Dtool_LL_pm4tc 0 4 589 1520 0 14 Dtool_LL_pm4tc 249 ////////////////////////////////////////////////////////////////////
//     Function: make_ortho_2D
//       Access:
//  Description: Sets up a two-dimensional orthographic frustum
//////////////////////////////////////////////////////////////////// 5 4 this 3 1732  1 l 1 1704  1 r 1 1704  1 t 1 1704  1 b 1 1704  
572 14 Dtool_LL_pOWs2 0 4 590 1520 0 14 Dtool_LL_pOWs2 224 ////////////////////////////////////////////////////////////////////
//     Function: make_ortho_2D
//       Access:
//  Description: Behaves like gluOrtho
//////////////////////////////////////////////////////////////////// 3 4 this 3 1732  5 fnear 1 1704  4 ffar 1 1704  
573 14 Dtool_LL_pylfV 0 4 590 1520 0 14 Dtool_LL_pylfV 224 ////////////////////////////////////////////////////////////////////
//     Function: make_ortho_2D
//       Access:
//  Description: Behaves like gluOrtho
//////////////////////////////////////////////////////////////////// 7 4 this 3 1732  5 fnear 1 1704  4 ffar 1 1704  1 l 1 1704  1 r 1 1704  1 t 1 1704  1 b 1 1704  
574 14 Dtool_LL_prCzZ 0 4 591 1520 0 14 Dtool_LL_prCzZ 578 ////////////////////////////////////////////////////////////////////
//     Function: make_perspective
//       Access:
//  Description: Behaves like gluPerspective (Aspect = width/height,
//               Yfov in degrees)
//       aspect
//   +------------+
//   |            |
// 1 |            | yfov
//   |            |
//   +------------+
//
//     -------+------
//      \     |     /
//       \    |    /
//        \   |   /
//         \  |  /
//          \ | /
//           \|/
//            W yfov
//
//////////////////////////////////////////////////////////////////// 5 4 this 3 1732  4 xfov 1 1704  6 aspect 1 1704  5 fnear 1 1704  4 ffar 1 1704  
575 14 Dtool_LL_pxe0h 0 4 592 1520 0 14 Dtool_LL_pxe0h 0 5 4 this 3 1732  4 yfov 1 1704  6 aspect 1 1704  5 fnear 1 1704  4 ffar 1 1704  
576 14 Dtool_LL_pUNoW 0 4 593 1520 0 14 Dtool_LL_pUNoW 0 5 4 this 3 1732  4 xfov 1 1704  4 yfov 1 1704  5 fnear 1 1704  4 ffar 1 1704  
577 14 Dtool_LL_pXsrR 0 7 597 1736 1307 14 Dtool_LL_pXsrR 231 ////////////////////////////////////////////////////////////////////
//     Function: BoundingHexahedron::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 3 7 frustum 1 1733  8 is_ortho 1 1676  2 cs 1 1735  
578 14 Dtool_LL_pG6CF 0 7 597 1736 1307 14 Dtool_LL_pG6CF 231 ////////////////////////////////////////////////////////////////////
//     Function: BoundingHexahedron::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 7 frustum 1 1733  8 is_ortho 1 1676  
579 14 Dtool_LL_praJQ 0 7 597 1736 1307 14 Dtool_LL_praJQ 231 ////////////////////////////////////////////////////////////////////
//     Function: BoundingHexahedron::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 8 3 fll 1 1680  3 flr 1 1680  3 fur 1 1680  3 ful 1 1680  3 nll 1 1680  3 nlr 1 1680  3 nur 1 1680  3 nul 1 1680  
580 14 Dtool_LL_pjxzO 0 6 598 1517 0 14 Dtool_LL_pjxzO 284 ////////////////////////////////////////////////////////////////////
//     Function: BoundingHexahedron::get_num_points
//       Access: Published
//  Description: Returns 8: the number of vertices of a hexahedron.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1737  
581 14 Dtool_LL_pI7ir 0 7 599 1683 0 14 Dtool_LL_pI7ir 270 ////////////////////////////////////////////////////////////////////
//     Function: BoundingHexahedron::get_point
//       Access: Published
//  Description: Returns the nth vertex of the hexahedron.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1737  1 n 1 1517  
582 14 Dtool_LL_pcorK 0 6 600 1517 0 14 Dtool_LL_pcorK 281 ////////////////////////////////////////////////////////////////////
//     Function: BoundingHexahedron::get_num_planes
//       Access: Published
//  Description: Returns 6: the number of faces of a hexahedron.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1737  
583 14 Dtool_LL_pSYfp 0 7 601 1706 1257 14 Dtool_LL_pSYfp 268 ////////////////////////////////////////////////////////////////////
//     Function: BoundingHexahedron::get_plane
//       Access: Published
//  Description: Returns the nth face of the hexahedron.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1737  1 n 1 1517  
584 14 Dtool_LL_p6Mjt 0 7 602 1659 0 14 Dtool_LL_p6Mjt 0 0 
585 14 Dtool_LL_pAR_R 0 7 605 1739 1315 14 Dtool_LL_pAR_R 225 ////////////////////////////////////////////////////////////////////
//     Function: BoundingLine::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 1 a 1 1680  1 b 1 1680  
586 14 Dtool_LL_ptKOi 0 4 606 1520 0 14 Dtool_LL_ptKOi 0 2 4 this 3 1739  4 size 1 1512  
587 14 Dtool_LL_pRIF_ 0 6 609 1680 0 14 Dtool_LL_pRIF_ 271 ////////////////////////////////////////////////////////////////////
//     Function: BoundingLine::get_point_a
//       Access: Published
//  Description: Returns the first point that defines the line.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1740  
588 14 Dtool_LL_pI2G_ 0 7 610 1683 0 14 Dtool_LL_pI2G_ 272 ////////////////////////////////////////////////////////////////////
//     Function: BoundingLine::get_point_b
//       Access: Published
//  Description: Returns the second point that defines the line.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1740  
589 14 Dtool_LL_pmcUv 0 7 611 1659 0 14 Dtool_LL_pmcUv 0 0 
590 14 Dtool_LL_pwCTi 0 7 614 1742 1322 14 Dtool_LL_pwCTi 794 // Filename: boundingPlane.I
// Created by:  drose (19Aug05)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: BoundingPlane::Default Constructor
//       Access: Published
//  Description: Constructs an empty "plane" that has no
//               intersections.
//////////////////////////////////////////////////////////////////// 0 
591 14 Dtool_LL_pjRVc 0 7 614 1742 1322 14 Dtool_LL_pjRVc 226 ////////////////////////////////////////////////////////////////////
//     Function: BoundingPlane::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 5 plane 1 1712  
592 14 Dtool_LL_p7Vwa 0 4 615 1520 0 14 Dtool_LL_p7Vwa 0 2 4 this 3 1742  4 size 1 1512  
593 14 Dtool_LL_pMOJy 0 6 618 1712 0 14 Dtool_LL_pMOJy 224 ////////////////////////////////////////////////////////////////////
//     Function: BoundingPlane::get_plane
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1743  
594 14 Dtool_LL_pPW_8 0 7 619 1659 0 14 Dtool_LL_pPW_8 0 0 
595 14 Dtool_LL_pqeoF 0 7 622 1745 1330 14 Dtool_LL_pqeoF 744 // Filename: boundingSphere.I
// Created by:  drose (02Oct99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: BoundingSphere::Constructor
//       Access: Published
//  Description: Constructs an empty sphere.
//////////////////////////////////////////////////////////////////// 0 
596 14 Dtool_LL_pX3ZH 0 7 622 1745 1330 14 Dtool_LL_pX3ZH 256 ////////////////////////////////////////////////////////////////////
//     Function: BoundingSphere::Constructor
//       Access: Published
//  Description: Constructs a specific sphere.
//////////////////////////////////////////////////////////////////// 2 6 center 1 1680  6 radius 1 1689  
597 14 Dtool_LL_pXC2T 0 4 623 1520 0 14 Dtool_LL_pXC2T 0 2 4 this 3 1745  4 size 1 1512  
598 14 Dtool_LL_pzKph 0 7 626 1683 0 14 Dtool_LL_pzKph 226 ////////////////////////////////////////////////////////////////////
//     Function: BoundingSphere::get_center
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1746  
599 14 Dtool_LL_pyYsx 0 6 627 1689 0 14 Dtool_LL_pyYsx 226 ////////////////////////////////////////////////////////////////////
//     Function: BoundingSphere::get_radius
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1746  
600 14 Dtool_LL_pwySa 0 7 628 1659 0 14 Dtool_LL_pwySa 0 0 
601 14 Dtool_LL_paiLm 0 7 631 1748 1340 14 Dtool_LL_paiLm 774 // Filename: intersectionBoundingVolume.I
// Created by:  drose (08Feb12)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: IntersectionBoundingVolume::Constructor
//       Access: Published
//  Description: Constructs an empty intersection.
//////////////////////////////////////////////////////////////////// 0 
602 14 Dtool_LL_pHGaj 0 4 632 1520 0 14 Dtool_LL_pHGaj 0 2 4 this 3 1748  4 size 1 1512  
603 14 Dtool_LL_pxGye 0 6 635 1517 0 14 Dtool_LL_pxGye 299 ////////////////////////////////////////////////////////////////////
//     Function: IntersectionBoundingVolume::get_num_components
//       Access: Published
//  Description: Returns the number of components in the intersection.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1749  
604 14 Dtool_LL_pmAog 0 7 636 1678 0 14 Dtool_LL_pmAog 287 ////////////////////////////////////////////////////////////////////
//     Function: IntersectionBoundingVolume::get_component
//       Access: Published
//  Description: Returns the nth component in the intersection.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1749  1 n 1 1517  
605 14 Dtool_LL_pCAAK 0 4 637 1520 0 14 Dtool_LL_pCAAK 283 ////////////////////////////////////////////////////////////////////
//     Function: IntersectionBoundingVolume::clear_components
//       Access: Published
//  Description: Removes all components from the volume.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1748  
606 14 Dtool_LL_p_v4Q 0 4 638 1520 0 14 Dtool_LL_p_v4Q 693 ////////////////////////////////////////////////////////////////////
//     Function: IntersectionBoundingVolume::add_component
//       Access: Published
//  Description: Adds a new component to the volume.  This does not
//               necessarily increase the total number of components
//               by one, and you may or may not be able to find this
//               component in the volume by a subsequent call to
//               get_component(); certain optimizations may prevent
//               the component from being added, or have other
//               unexpected effects on the total set of components.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1748  9 component 1 1678  
607 14 Dtool_LL_pfzt2 0 7 639 1659 0 14 Dtool_LL_pfzt2 0 0 
608 14 Dtool_LL_pllv3 0 7 644 1752 1345 14 Dtool_LL_pllv3 35 /* initializes mt[N] with a seed */ 1 4 seed 1 1751  
609 14 Dtool_LL_pBSDv 0 6 645 1751 0 14 Dtool_LL_pBSDv 58 /* generates a random number on [0,0x7fffffff]-interval */ 1 4 this 3 1752  
610 14 Dtool_LL_pRdBj 0 7 648 1753 1348 14 Dtool_LL_pRdBj 721 // Filename: omniBoundingVolume.I
// Created by:  drose (22Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: OmniBoundingVolume::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
611 14 Dtool_LL_pbPVO 0 7 649 1659 0 14 Dtool_LL_pbPVO 0 0 
612 14 Dtool_LL_pQPnm 0 7 652 1754 1359 14 Dtool_LL_pQPnm 753 // Filename: unionBoundingVolume.I
// Created by:  drose (08Feb12)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: UnionBoundingVolume::Constructor
//       Access: Published
//  Description: Constructs an empty union.
//////////////////////////////////////////////////////////////////// 0 
613 14 Dtool_LL_piBQE 0 4 653 1520 0 14 Dtool_LL_piBQE 0 2 4 this 3 1754  4 size 1 1512  
614 14 Dtool_LL_pjE8H 0 6 656 1517 0 14 Dtool_LL_pjE8H 285 ////////////////////////////////////////////////////////////////////
//     Function: UnionBoundingVolume::get_num_components
//       Access: Published
//  Description: Returns the number of components in the union.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1755  
615 14 Dtool_LL_pSxAQ 0 7 657 1678 0 14 Dtool_LL_pSxAQ 273 ////////////////////////////////////////////////////////////////////
//     Function: UnionBoundingVolume::get_component
//       Access: Published
//  Description: Returns the nth component in the union.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1755  1 n 1 1517  
616 14 Dtool_LL_pWCpg 0 4 658 1520 0 14 Dtool_LL_pWCpg 276 ////////////////////////////////////////////////////////////////////
//     Function: UnionBoundingVolume::clear_components
//       Access: Published
//  Description: Removes all components from the volume.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1754  
617 14 Dtool_LL_pTdHH 0 4 659 1520 0 14 Dtool_LL_pTdHH 686 ////////////////////////////////////////////////////////////////////
//     Function: UnionBoundingVolume::add_component
//       Access: Published
//  Description: Adds a new component to the volume.  This does not
//               necessarily increase the total number of components
//               by one, and you may or may not be able to find this
//               component in the volume by a subsequent call to
//               get_component(); certain optimizations may prevent
//               the component from being added, or have other
//               unexpected effects on the total set of components.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1754  9 component 1 1678  
618 14 Dtool_LL_pWSy_ 0 4 660 1520 0 14 Dtool_LL_pWSy_ 347 ////////////////////////////////////////////////////////////////////
//     Function: UnionBoundingVolume::filter_intersection
//       Access: Published
//  Description: Removes from the union any components that have no
//               intersection with the indicated volume.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1754  6 volume 1 1673  
619 14 Dtool_LL_pkuIR 0 7 661 1659 0 14 Dtool_LL_pkuIR 0 0 
620 14 Dtool_LL_pOl4j 0 7 664 1759 1367 14 Dtool_LL_pOl4j 225 ////////////////////////////////////////////////////////////////////
//     Function: Randomizer::Copy Constructor
//       Access: Public
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 copy 1 1757  
621 14 Dtool_LL_p_45c 0 7 664 1759 1367 14 Dtool_LL_p_45c 817 // Filename: randomizer.I
// Created by:  drose (18Jan07)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: Randomizer::Constructor
//       Access: Public
//  Description: If seed is nonzero, it is used to define the tables;
//               if it is zero a random seed is generated.
//////////////////////////////////////////////////////////////////// 1 4 seed 1 1751  
622 14 Dtool_LL_pYb6h 0 7 664 1759 1367 14 Dtool_LL_pYb6h 817 // Filename: randomizer.I
// Created by:  drose (18Jan07)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: Randomizer::Constructor
//       Access: Public
//  Description: If seed is nonzero, it is used to define the tables;
//               if it is zero a random seed is generated.
//////////////////////////////////////////////////////////////////// 0 
623 14 Dtool_LL_pMMRU 0 6 665 1759 0 14 Dtool_LL_pMMRU 233 ////////////////////////////////////////////////////////////////////
//     Function: Randomizer::Copy Assignment Operator
//       Access: Public
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 1759  4 copy 1 1757  
624 14 Dtool_LL_puMD_ 0 6 666 1517 0 14 Dtool_LL_puMD_ 268 ////////////////////////////////////////////////////////////////////
//     Function: Randomizer::random_int
//       Access: Public
//  Description: Returns a random integer in the range [0, range).
//////////////////////////////////////////////////////////////////// 2 4 this 3 1759  5 range 1 1517  
625 14 Dtool_LL_pbxNX 0 6 667 1704 0 14 Dtool_LL_pbxNX 268 ////////////////////////////////////////////////////////////////////
//     Function: Randomizer::random_real
//       Access: Public
//  Description: Returns a random double in the range [0, range).
//////////////////////////////////////////////////////////////////// 2 4 this 3 1759  5 range 1 1704  
626 14 Dtool_LL_pod85 0 6 668 1704 0 14 Dtool_LL_pod85 274 ////////////////////////////////////////////////////////////////////
//     Function: Randomizer::random_real_unit
//       Access: Public
//  Description: Returns a random double in the range [-0.5, 0.5).
//////////////////////////////////////////////////////////////////// 1 4 this 3 1759  
627 14 Dtool_LL_ps5Z3 0 6 669 1751 0 14 Dtool_LL_ps5Z3 313 ////////////////////////////////////////////////////////////////////
//     Function: Randomizer::get_next_seed
//       Access: Public, Static
//  Description: Returns a random seed value for the next global
//               Randomizer object.
//////////////////////////////////////////////////////////////////// 0 
628 14 Dtool_LL_p3bLi 0 6 670 1751 0 14 Dtool_LL_p3bLi 363 ////////////////////////////////////////////////////////////////////
//     Function: Randomizer::get_seed
//       Access: Public
//  Description: Returns a unique seed value based on the seed value
//               passed to this Randomizer object (and on its current
//               state).
//////////////////////////////////////////////////////////////////// 1 4 this 3 1759  
629 14 Dtool_LL_pB_ig 0 6 673 1751 0 14 Dtool_LL_pB_ig 368 ////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise::get_seed
//       Access: Published
//  Description: Returns a unique seed value based on the seed value
//               passed to this PerlinNoise object (and on its current
//               state).
//////////////////////////////////////////////////////////////////// 1 4 this 3 1760  
630 14 Dtool_LL_pv6cm 0 7 676 1761 1375 14 Dtool_LL_pv6cm 872 // Filename: perlinNoise2.I
// Created by:  drose (05Oct05)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise2::Default Constructor
//       Access: Published
//  Description: Randomizes the tables to make a unique noise
//               function.  Uses a default scale (noise frequency),
//               table size, and seed.
//////////////////////////////////////////////////////////////////// 0 
631 14 Dtool_LL_psfkp 0 7 676 1761 1375 14 Dtool_LL_psfkp 329 ////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise2::Copy Constructor
//       Access: Published
//  Description: Makes an exact copy of the existing PerlinNoise
//               object, including its random seed.
//////////////////////////////////////////////////////////////////// 1 4 copy 1 1762  
632 14 Dtool_LL_pGeIA 0 7 676 1761 1375 14 Dtool_LL_pGeIA 428 ////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise2::Constructor
//       Access: Published
//  Description: Randomizes the tables to make a unique noise
//               function.
//
//               If seed is nonzero, it is used to define the tables;
//               if it is zero a random seed is generated.
//////////////////////////////////////////////////////////////////// 4 2 sx 1 1704  2 sy 1 1704  10 table_size 1 1517  4 seed 1 1751  
633 14 Dtool_LL_p9P5z 0 7 676 1761 1375 14 Dtool_LL_p9P5z 428 ////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise2::Constructor
//       Access: Published
//  Description: Randomizes the tables to make a unique noise
//               function.
//
//               If seed is nonzero, it is used to define the tables;
//               if it is zero a random seed is generated.
//////////////////////////////////////////////////////////////////// 3 2 sx 1 1704  2 sy 1 1704  10 table_size 1 1517  
634 14 Dtool_LL_pCOIG 0 7 676 1761 1375 14 Dtool_LL_pCOIG 428 ////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise2::Constructor
//       Access: Published
//  Description: Randomizes the tables to make a unique noise
//               function.
//
//               If seed is nonzero, it is used to define the tables;
//               if it is zero a random seed is generated.
//////////////////////////////////////////////////////////////////// 2 2 sx 1 1704  2 sy 1 1704  
635 14 Dtool_LL_pM_IZ 0 6 677 1761 0 14 Dtool_LL_pM_IZ 337 ////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise2::Copy Assignment Operator
//       Access: Published
//  Description: Makes an exact copy of the existing PerlinNoise
//               object, including its random seed.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1761  4 copy 1 1762  
636 14 Dtool_LL_pg7Cf 0 4 678 1520 0 14 Dtool_LL_pg7Cf 266 ////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise2::set_scale
//       Access: Published
//  Description: Changes the scale (frequency) of the noise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1761  5 scale 1 1542  
637 14 Dtool_LL_pGuCP 0 4 678 1520 0 14 Dtool_LL_pGuCP 266 ////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise2::set_scale
//       Access: Published
//  Description: Changes the scale (frequency) of the noise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1761  5 scale 1 1553  
638 14 Dtool_LL_pBSzQ 0 4 678 1520 0 14 Dtool_LL_pBSzQ 266 ////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise2::set_scale
//       Access: Published
//  Description: Changes the scale (frequency) of the noise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1761  5 scale 1 1704  
639 14 Dtool_LL_pgNGr 0 4 678 1520 0 14 Dtool_LL_pgNGr 266 ////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise2::set_scale
//       Access: Published
//  Description: Changes the scale (frequency) of the noise.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1761  2 sx 1 1704  2 sy 1 1704  
640 14 Dtool_LL_p5PlC 0 6 679 1704 0 14 Dtool_LL_p5PlC 266 ////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise2::noise
//       Access: Published
//  Description: Returns the noise function of the three inputs.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1762  5 value 1 1542  
641 14 Dtool_LL_pdIqC 0 6 679 1689 0 14 Dtool_LL_pdIqC 266 ////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise2::noise
//       Access: Published
//  Description: Returns the noise function of the three inputs.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1762  5 value 1 1553  
642 14 Dtool_LL_pPCI3 0 6 679 1704 0 14 Dtool_LL_pPCI3 266 ////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise2::noise
//       Access: Published
//  Description: Returns the noise function of the three inputs.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1762  1 x 1 1704  1 y 1 1704  
643 14 Dtool_LL_pJm1a 0 6 680 1704 0 14 Dtool_LL_pJm1a 264 ////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise2::noise
//       Access: Published
//  Description: Returns the noise function of the two inputs.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1762  5 value 1 1542  
644 14 Dtool_LL_pJCuf 0 6 680 1689 0 14 Dtool_LL_pJCuf 264 ////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise2::noise
//       Access: Published
//  Description: Returns the noise function of the two inputs.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1762  5 value 1 1553  
645 14 Dtool_LL_pEAH_ 0 6 680 1704 0 14 Dtool_LL_pEAH_ 270 ////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise2::operator ()
//       Access: Published
//  Description: Returns the noise function of the two inputs.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1762  1 x 1 1704  1 y 1 1704  
646 14 Dtool_LL_pPLfp 0 7 683 1764 1381 14 Dtool_LL_pPLfp 872 // Filename: perlinNoise3.I
// Created by:  drose (05Oct05)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise3::Default Constructor
//       Access: Published
//  Description: Randomizes the tables to make a unique noise
//               function.  Uses a default scale (noise frequency),
//               table size, and seed.
//////////////////////////////////////////////////////////////////// 0 
647 14 Dtool_LL_pukoc 0 7 683 1764 1381 14 Dtool_LL_pukoc 329 ////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise3::Copy Constructor
//       Access: Published
//  Description: Makes an exact copy of the existing PerlinNoise
//               object, including its random seed.
//////////////////////////////////////////////////////////////////// 1 4 copy 1 1765  
648 14 Dtool_LL_p58i2 0 7 683 1764 1381 14 Dtool_LL_p58i2 428 ////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise3::Constructor
//       Access: Published
//  Description: Randomizes the tables to make a unique noise
//               function.
//
//               If seed is nonzero, it is used to define the tables;
//               if it is zero a random seed is generated.
//////////////////////////////////////////////////////////////////// 5 2 sx 1 1704  2 sy 1 1704  2 sz 1 1704  10 table_size 1 1517  4 seed 1 1751  
649 14 Dtool_LL_pXjDy 0 7 683 1764 1381 14 Dtool_LL_pXjDy 428 ////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise3::Constructor
//       Access: Published
//  Description: Randomizes the tables to make a unique noise
//               function.
//
//               If seed is nonzero, it is used to define the tables;
//               if it is zero a random seed is generated.
//////////////////////////////////////////////////////////////////// 4 2 sx 1 1704  2 sy 1 1704  2 sz 1 1704  10 table_size 1 1517  
650 14 Dtool_LL_pBU40 0 7 683 1764 1381 14 Dtool_LL_pBU40 428 ////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise3::Constructor
//       Access: Published
//  Description: Randomizes the tables to make a unique noise
//               function.
//
//               If seed is nonzero, it is used to define the tables;
//               if it is zero a random seed is generated.
//////////////////////////////////////////////////////////////////// 3 2 sx 1 1704  2 sy 1 1704  2 sz 1 1704  
651 14 Dtool_LL_pNxrp 0 6 684 1764 0 14 Dtool_LL_pNxrp 337 ////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise3::Copy Assignment Operator
//       Access: Published
//  Description: Makes an exact copy of the existing PerlinNoise
//               object, including its random seed.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1764  4 copy 1 1765  
652 14 Dtool_LL_p0JOD 0 4 685 1520 0 14 Dtool_LL_p0JOD 266 ////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise3::set_scale
//       Access: Published
//  Description: Changes the scale (frequency) of the noise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1764  5 scale 1 1575  
653 14 Dtool_LL_prdOz 0 4 685 1520 0 14 Dtool_LL_prdOz 266 ////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise3::set_scale
//       Access: Published
//  Description: Changes the scale (frequency) of the noise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1764  5 scale 1 1586  
654 14 Dtool_LL_pBcPT 0 4 685 1520 0 14 Dtool_LL_pBcPT 266 ////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise3::set_scale
//       Access: Published
//  Description: Changes the scale (frequency) of the noise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1764  5 scale 1 1704  
655 14 Dtool_LL_pTM4f 0 4 685 1520 0 14 Dtool_LL_pTM4f 266 ////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise3::set_scale
//       Access: Published
//  Description: Changes the scale (frequency) of the noise.
//////////////////////////////////////////////////////////////////// 4 4 this 3 1764  2 sx 1 1704  2 sy 1 1704  2 sz 1 1704  
656 14 Dtool_LL_pxYBh 0 6 686 1704 0 14 Dtool_LL_pxYBh 266 ////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise3::noise
//       Access: Published
//  Description: Returns the noise function of the three inputs.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1765  5 value 1 1575  
657 14 Dtool_LL_pVTGh 0 6 686 1689 0 14 Dtool_LL_pVTGh 266 ////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise3::noise
//       Access: Published
//  Description: Returns the noise function of the three inputs.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1765  5 value 1 1586  
658 14 Dtool_LL_psWEW 0 6 686 1704 0 14 Dtool_LL_psWEW 266 ////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise3::noise
//       Access: Published
//  Description: Returns the noise function of the three inputs.
//////////////////////////////////////////////////////////////////// 4 4 this 3 1765  1 x 1 1704  1 y 1 1704  1 z 1 1704  
659 14 Dtool_LL_p18Wd 0 6 687 1704 0 14 Dtool_LL_p18Wd 266 ////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise3::noise
//       Access: Published
//  Description: Returns the noise function of the three inputs.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1765  5 value 1 1575  
660 14 Dtool_LL_p1YPi 0 6 687 1689 0 14 Dtool_LL_p1YPi 266 ////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise3::noise
//       Access: Published
//  Description: Returns the noise function of the three inputs.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1765  5 value 1 1586  
661 14 Dtool_LL_p_joi 0 6 687 1704 0 14 Dtool_LL_p_joi 272 ////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise3::operator ()
//       Access: Published
//  Description: Returns the noise function of the three inputs.
//////////////////////////////////////////////////////////////////// 4 4 this 3 1765  1 x 1 1704  1 y 1 1704  1 z 1 1704  
662 14 Dtool_LL_pATvG 0 7 691 1767 1389 14 Dtool_LL_pATvG 876 // Filename: stackedPerlinNoise2.I
// Created by:  drose (05Oct05)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise2::Default Constructor
//       Access: Published
//  Description: Creates a StackedPerlinNoise2 object with no levels.
//               You should call add_level() to add each level by
//               hand.
//////////////////////////////////////////////////////////////////// 0 
663 14 Dtool_LL_pOBoG 0 7 691 1767 1389 14 Dtool_LL_pOBoG 368 ////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise2::Copy Constructor
//       Access: Published
//  Description: Creates an exact duplicate of the existing
//               StackedPerlinNoise2 object, including the random
//               seed.
//////////////////////////////////////////////////////////////////// 1 4 copy 1 1768  
664 14 Dtool_LL_pJSRe 0 7 691 1767 1389 14 Dtool_LL_pJSRe 617 ////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise2::Constructor
//       Access: Published
//  Description: Creates num_levels nested PerlinNoise2 objects.  Each
//               stacked Perlin object will have a scale of 1 /
//               scale_factor times the previous object (so that it is
//               higher-frequency, if scale_factor > 1), and an
//               amplitude of amp_scale times the previous object (so
//               that it is less important, if amp_scale < 1).
//////////////////////////////////////////////////////////////////// 7 2 sx 1 1704  2 sy 1 1704  10 num_levels 1 1517  12 scale_factor 1 1704  9 amp_scale 1 1704  10 table_size 1 1517  4 seed 1 1751  
665 14 Dtool_LL_p1q92 0 7 691 1767 1389 14 Dtool_LL_p1q92 617 ////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise2::Constructor
//       Access: Published
//  Description: Creates num_levels nested PerlinNoise2 objects.  Each
//               stacked Perlin object will have a scale of 1 /
//               scale_factor times the previous object (so that it is
//               higher-frequency, if scale_factor > 1), and an
//               amplitude of amp_scale times the previous object (so
//               that it is less important, if amp_scale < 1).
//////////////////////////////////////////////////////////////////// 6 2 sx 1 1704  2 sy 1 1704  10 num_levels 1 1517  12 scale_factor 1 1704  9 amp_scale 1 1704  10 table_size 1 1517  
666 14 Dtool_LL_ppveW 0 7 691 1767 1389 14 Dtool_LL_ppveW 617 ////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise2::Constructor
//       Access: Published
//  Description: Creates num_levels nested PerlinNoise2 objects.  Each
//               stacked Perlin object will have a scale of 1 /
//               scale_factor times the previous object (so that it is
//               higher-frequency, if scale_factor > 1), and an
//               amplitude of amp_scale times the previous object (so
//               that it is less important, if amp_scale < 1).
//////////////////////////////////////////////////////////////////// 5 2 sx 1 1704  2 sy 1 1704  10 num_levels 1 1517  12 scale_factor 1 1704  9 amp_scale 1 1704  
667 14 Dtool_LL_pJ86_ 0 7 691 1767 1389 14 Dtool_LL_pJ86_ 617 ////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise2::Constructor
//       Access: Published
//  Description: Creates num_levels nested PerlinNoise2 objects.  Each
//               stacked Perlin object will have a scale of 1 /
//               scale_factor times the previous object (so that it is
//               higher-frequency, if scale_factor > 1), and an
//               amplitude of amp_scale times the previous object (so
//               that it is less important, if amp_scale < 1).
//////////////////////////////////////////////////////////////////// 4 2 sx 1 1704  2 sy 1 1704  10 num_levels 1 1517  12 scale_factor 1 1704  
668 14 Dtool_LL_p9SEq 0 7 691 1767 1389 14 Dtool_LL_p9SEq 617 ////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise2::Constructor
//       Access: Published
//  Description: Creates num_levels nested PerlinNoise2 objects.  Each
//               stacked Perlin object will have a scale of 1 /
//               scale_factor times the previous object (so that it is
//               higher-frequency, if scale_factor > 1), and an
//               amplitude of amp_scale times the previous object (so
//               that it is less important, if amp_scale < 1).
//////////////////////////////////////////////////////////////////// 3 2 sx 1 1704  2 sy 1 1704  10 num_levels 1 1517  
669 14 Dtool_LL_p8Mpe 0 7 691 1767 1389 14 Dtool_LL_p8Mpe 617 ////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise2::Constructor
//       Access: Published
//  Description: Creates num_levels nested PerlinNoise2 objects.  Each
//               stacked Perlin object will have a scale of 1 /
//               scale_factor times the previous object (so that it is
//               higher-frequency, if scale_factor > 1), and an
//               amplitude of amp_scale times the previous object (so
//               that it is less important, if amp_scale < 1).
//////////////////////////////////////////////////////////////////// 2 2 sx 1 1704  2 sy 1 1704  
670 14 Dtool_LL_puaKK 0 6 692 1767 0 14 Dtool_LL_puaKK 376 ////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise2::Copy Assignment Operator
//       Access: Published
//  Description: Creates an exact duplicate of the existing
//               StackedPerlinNoise2 object, including the random
//               seed.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1767  4 copy 1 1768  
671 14 Dtool_LL_pjEp3 0 4 693 1520 0 14 Dtool_LL_pjEp3 328 ////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise2::add_level
//       Access: Published
//  Description: Adds an arbitrary PerlinNoise2 object, and an
//               associated amplitude, to the stack.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1767  5 level 1 1762  3 amp 1 1704  
672 14 Dtool_LL_p_n9S 0 4 693 1520 0 14 Dtool_LL_p_n9S 328 ////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise2::add_level
//       Access: Published
//  Description: Adds an arbitrary PerlinNoise2 object, and an
//               associated amplitude, to the stack.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1767  5 level 1 1762  
673 14 Dtool_LL_pc8sO 0 4 694 1520 0 14 Dtool_LL_pc8sO 327 ////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise2::clear
//       Access: Published
//  Description: Removes all levels from the stack.  You must call
//               add_level() again to restore them.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1767  
674 14 Dtool_LL_pZyC_ 0 6 695 1704 0 14 Dtool_LL_pZyC_ 273 ////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise2::noise
//       Access: Published
//  Description: Returns the noise function of the three inputs.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1767  5 value 1 1542  
675 14 Dtool_LL_pcyQb 0 6 695 1689 0 14 Dtool_LL_pcyQb 273 ////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise2::noise
//       Access: Published
//  Description: Returns the noise function of the three inputs.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1767  5 value 1 1553  
676 14 Dtool_LL_p1thz 0 6 695 1704 0 14 Dtool_LL_p1thz 273 ////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise2::noise
//       Access: Published
//  Description: Returns the noise function of the three inputs.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1767  1 x 1 1704  1 y 1 1704  
677 14 Dtool_LL_pgny9 0 6 696 1704 0 14 Dtool_LL_pgny9 273 ////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise2::noise
//       Access: Published
//  Description: Returns the noise function of the three inputs.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1767  5 value 1 1542  
678 14 Dtool_LL_pHqyL 0 6 696 1689 0 14 Dtool_LL_pHqyL 273 ////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise2::noise
//       Access: Published
//  Description: Returns the noise function of the three inputs.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1767  5 value 1 1553  
679 14 Dtool_LL_p0TSf 0 6 696 1704 0 14 Dtool_LL_p0TSf 279 ////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise2::operator ()
//       Access: Published
//  Description: Returns the noise function of the three inputs.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1767  1 x 1 1704  1 y 1 1704  
680 14 Dtool_LL_p_B5N 0 7 699 1770 1396 14 Dtool_LL_p_B5N 876 // Filename: stackedPerlinNoise3.I
// Created by:  drose (05Oct05)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise3::Default Constructor
//       Access: Published
//  Description: Creates a StackedPerlinNoise3 object with no levels.
//               You should call add_level() to add each level by
//               hand.
//////////////////////////////////////////////////////////////////// 0 
681 14 Dtool_LL_pkcOQ 0 7 699 1770 1396 14 Dtool_LL_pkcOQ 368 ////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise3::Copy Constructor
//       Access: Published
//  Description: Creates an exact duplicate of the existing
//               StackedPerlinNoise3 object, including the random
//               seed.
//////////////////////////////////////////////////////////////////// 1 4 copy 1 1771  
682 14 Dtool_LL_pqAFA 0 7 699 1770 1396 14 Dtool_LL_pqAFA 617 ////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise3::Constructor
//       Access: Published
//  Description: Creates num_levels nested PerlinNoise3 objects.  Each
//               stacked Perlin object will have a scale of 1 /
//               scale_factor times the previous object (so that it is
//               higher-frequency, if scale_factor > 1), and an
//               amplitude of amp_scale times the previous object (so
//               that it is less important, if amp_scale < 1).
//////////////////////////////////////////////////////////////////// 8 2 sx 1 1704  2 sy 1 1704  2 sz 1 1704  10 num_levels 1 1517  12 scale_factor 1 1704  9 amp_scale 1 1704  10 table_size 1 1517  4 seed 1 1751  
683 14 Dtool_LL_pJa_5 0 7 699 1770 1396 14 Dtool_LL_pJa_5 617 ////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise3::Constructor
//       Access: Published
//  Description: Creates num_levels nested PerlinNoise3 objects.  Each
//               stacked Perlin object will have a scale of 1 /
//               scale_factor times the previous object (so that it is
//               higher-frequency, if scale_factor > 1), and an
//               amplitude of amp_scale times the previous object (so
//               that it is less important, if amp_scale < 1).
//////////////////////////////////////////////////////////////////// 7 2 sx 1 1704  2 sy 1 1704  2 sz 1 1704  10 num_levels 1 1517  12 scale_factor 1 1704  9 amp_scale 1 1704  10 table_size 1 1517  
684 14 Dtool_LL_pbcHj 0 7 699 1770 1396 14 Dtool_LL_pbcHj 617 ////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise3::Constructor
//       Access: Published
//  Description: Creates num_levels nested PerlinNoise3 objects.  Each
//               stacked Perlin object will have a scale of 1 /
//               scale_factor times the previous object (so that it is
//               higher-frequency, if scale_factor > 1), and an
//               amplitude of amp_scale times the previous object (so
//               that it is less important, if amp_scale < 1).
//////////////////////////////////////////////////////////////////// 6 2 sx 1 1704  2 sy 1 1704  2 sz 1 1704  10 num_levels 1 1517  12 scale_factor 1 1704  9 amp_scale 1 1704  
685 14 Dtool_LL_pD8iG 0 7 699 1770 1396 14 Dtool_LL_pD8iG 617 ////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise3::Constructor
//       Access: Published
//  Description: Creates num_levels nested PerlinNoise3 objects.  Each
//               stacked Perlin object will have a scale of 1 /
//               scale_factor times the previous object (so that it is
//               higher-frequency, if scale_factor > 1), and an
//               amplitude of amp_scale times the previous object (so
//               that it is less important, if amp_scale < 1).
//////////////////////////////////////////////////////////////////// 5 2 sx 1 1704  2 sy 1 1704  2 sz 1 1704  10 num_levels 1 1517  12 scale_factor 1 1704  
686 14 Dtool_LL_pfg_v 0 7 699 1770 1396 14 Dtool_LL_pfg_v 617 ////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise3::Constructor
//       Access: Published
//  Description: Creates num_levels nested PerlinNoise3 objects.  Each
//               stacked Perlin object will have a scale of 1 /
//               scale_factor times the previous object (so that it is
//               higher-frequency, if scale_factor > 1), and an
//               amplitude of amp_scale times the previous object (so
//               that it is less important, if amp_scale < 1).
//////////////////////////////////////////////////////////////////// 4 2 sx 1 1704  2 sy 1 1704  2 sz 1 1704  10 num_levels 1 1517  
687 14 Dtool_LL_pV0sw 0 7 699 1770 1396 14 Dtool_LL_pV0sw 617 ////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise3::Constructor
//       Access: Published
//  Description: Creates num_levels nested PerlinNoise3 objects.  Each
//               stacked Perlin object will have a scale of 1 /
//               scale_factor times the previous object (so that it is
//               higher-frequency, if scale_factor > 1), and an
//               amplitude of amp_scale times the previous object (so
//               that it is less important, if amp_scale < 1).
//////////////////////////////////////////////////////////////////// 3 2 sx 1 1704  2 sy 1 1704  2 sz 1 1704  
688 14 Dtool_LL_p8rsk 0 6 700 1770 0 14 Dtool_LL_p8rsk 376 ////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise3::Copy Assignment Operator
//       Access: Published
//  Description: Creates an exact duplicate of the existing
//               StackedPerlinNoise3 object, including the random
//               seed.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1770  4 copy 1 1771  
689 14 Dtool_LL_pOHpF 0 4 701 1520 0 14 Dtool_LL_pOHpF 328 ////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise3::add_level
//       Access: Published
//  Description: Adds an arbitrary PerlinNoise3 object, and an
//               associated amplitude, to the stack.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1770  5 level 1 1765  3 amp 1 1704  
690 14 Dtool_LL_pbp9g 0 4 701 1520 0 14 Dtool_LL_pbp9g 328 ////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise3::add_level
//       Access: Published
//  Description: Adds an arbitrary PerlinNoise3 object, and an
//               associated amplitude, to the stack.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1770  5 level 1 1765  
691 14 Dtool_LL_pu9sV 0 4 702 1520 0 14 Dtool_LL_pu9sV 327 ////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise3::clear
//       Access: Published
//  Description: Removes all levels from the stack.  You must call
//               add_level() again to restore them.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1770  
692 14 Dtool_LL_pIjeI 0 6 703 1704 0 14 Dtool_LL_pIjeI 273 ////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise3::noise
//       Access: Published
//  Description: Returns the noise function of the three inputs.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1770  5 value 1 1575  
693 14 Dtool_LL_pKjsk 0 6 703 1689 0 14 Dtool_LL_pKjsk 273 ////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise3::noise
//       Access: Published
//  Description: Returns the noise function of the three inputs.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1770  5 value 1 1586  
694 14 Dtool_LL_p9XOm 0 6 703 1704 0 14 Dtool_LL_p9XOm 273 ////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise3::noise
//       Access: Published
//  Description: Returns the noise function of the three inputs.
//////////////////////////////////////////////////////////////////// 4 4 this 3 1770  1 x 1 1704  1 y 1 1704  1 z 1 1704  
695 14 Dtool_LL_pTpAh 0 6 704 1704 0 14 Dtool_LL_pTpAh 273 ////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise3::noise
//       Access: Published
//  Description: Returns the noise function of the three inputs.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1770  5 value 1 1575  
696 14 Dtool_LL_p3rAv 0 6 704 1689 0 14 Dtool_LL_p3rAv 273 ////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise3::noise
//       Access: Published
//  Description: Returns the noise function of the three inputs.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1770  5 value 1 1586  
697 14 Dtool_LL_przlU 0 6 704 1704 0 14 Dtool_LL_przlU 279 ////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise3::operator ()
//       Access: Published
//  Description: Returns the noise function of the three inputs.
//////////////////////////////////////////////////////////////////// 4 4 this 3 1770  1 x 1 1704  1 y 1 1704  1 z 1 1704  
698 14 Dtool_LL_pFBK1 0 7 707 1773 1412 14 Dtool_LL_pFBK1 225 ////////////////////////////////////////////////////////////////////
//     Function: Triangulator::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 0 
699 14 Dtool_LL_pVJYT 0 4 708 1520 0 14 Dtool_LL_pVJYT 337 ////////////////////////////////////////////////////////////////////
//     Function: Triangulator::clear
//       Access: Published
//  Description: Removes all vertices and polygon specifications from
//               the Triangulator, and prepares it to start over.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1773  
700 14 Dtool_LL_pgPrY 0 6 709 1517 0 14 Dtool_LL_pgPrY 312 ////////////////////////////////////////////////////////////////////
//     Function: Triangulator::add_vertex
//       Access: Published
//  Description: Adds a new vertex to the vertex pool.  Returns the
//               vertex index number.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1773  5 point 1 1774  
701 14 Dtool_LL_p7U2X 0 6 709 1517 0 14 Dtool_LL_p7U2X 800 // Filename: triangulator.I
// Created by:  drose (18Jan07)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: Triangulator::add_vertex
//       Access: Published
//  Description: Adds a new vertex to the vertex pool.  Returns the
//               vertex index number.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1773  1 x 1 1704  1 y 1 1704  
702 14 Dtool_LL_pihH8 0 6 710 1517 0 14 Dtool_LL_pihH8 545 ////////////////////////////////////////////////////////////////////
//     Function: Triangulator::get_num_vertices
//       Access: Published
//  Description: Returns the number of vertices in the pool.  Note
//               that the Triangulator might append new vertices, in
//               addition to those added by the user, if any of the
//               polygon is self-intersecting, or if any of the holes
//               intersect some part of the polygon edges.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1777  
703 14 Dtool_LL_pcI6X 0 6 711 1774 0 14 Dtool_LL_pcI6X 247 ////////////////////////////////////////////////////////////////////
//     Function: Triangulator::get_vertex
//       Access: Published
//  Description: Returns the nth vertex.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1777  1 n 1 1517  
704 14 Dtool_LL_pyAY7 0 4 712 1520 0 14 Dtool_LL_pyAY7 342 ////////////////////////////////////////////////////////////////////
//     Function: Triangulator::clear_polygon
//       Access: Published
//  Description: Removes the current polygon definition (and its set
//               of holes), but does not clear the vertex pool.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1773  
705 14 Dtool_LL_plJzv 0 4 713 1520 0 14 Dtool_LL_plJzv 645 ////////////////////////////////////////////////////////////////////
//     Function: Triangulator::add_polygon_vertex
//       Access: Published
//  Description: Adds the next consecutive vertex of the polygon.
//               This vertex should index into the vertex pool
//               established by repeated calls to add_vertex().
//
//               The vertices may be listed in either clockwise or
//               counterclockwise order.  Vertices should not be
//               repeated.  In particular, do not repeat the first
//               vertex at the end.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1773  5 index 1 1517  
706 14 Dtool_LL_pyuMa 0 6 714 1676 0 14 Dtool_LL_pyuMa 394 ////////////////////////////////////////////////////////////////////
//     Function: Triangulator::is_left_winding
//       Access: Published
//  Description: Returns true if the polygon vertices are listed in
//               counterclockwise order, or false if they appear to be
//               listed in clockwise order.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1777  
707 14 Dtool_LL_pcIaQ 0 4 715 1520 0 14 Dtool_LL_pcIaQ 308 ////////////////////////////////////////////////////////////////////
//     Function: Triangulator::begin_hole
//       Access: Published
//  Description: Finishes the previous hole, if any, and prepares to
//               add a new hole.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1773  
708 14 Dtool_LL_pK0o5 0 4 716 1520 0 14 Dtool_LL_pK0o5 571 ////////////////////////////////////////////////////////////////////
//     Function: Triangulator::add_hole_vertex
//       Access: Published
//  Description: Adds the next consecutive vertex of the current hole.
//               This vertex should index into the vertex pool
//               established by repeated calls to add_vertex().
//
//               The vertices may be listed in either clockwise or
//               counterclockwise order.  Vertices should not be
//               repeated.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1773  5 index 1 1517  
709 14 Dtool_LL_pDWnH 0 4 717 1520 0 14 Dtool_LL_pDWnH 439 ////////////////////////////////////////////////////////////////////
//     Function: Triangulator::triangulate
//       Access: Published
//  Description: Does the work of triangulating the specified polygon.
//               After this call, you may retrieve the new triangles
//               one at a time by iterating through
//               get_triangle_v0/1/2().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1773  
710 14 Dtool_LL_pH7LS 0 6 718 1517 0 14 Dtool_LL_pH7LS 328 ////////////////////////////////////////////////////////////////////
//     Function: Triangulator::get_num_triangles
//       Access: Published
//  Description: Returns the number of triangles generated by the
//               previous call to triangulate().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1777  
711 14 Dtool_LL_p6J8i 0 6 719 1517 0 14 Dtool_LL_p6J8i 454 ////////////////////////////////////////////////////////////////////
//     Function: Triangulator::get_triangle_v0
//       Access: Published
//  Description: Returns vertex 0 of the nth triangle generated by the
//               previous call to triangulate().
//
//               This is a zero-based index into the vertices added by
//               repeated calls to add_vertex().
//////////////////////////////////////////////////////////////////// 2 4 this 3 1777  1 n 1 1517  
712 14 Dtool_LL_pyO8_ 0 6 720 1517 0 14 Dtool_LL_pyO8_ 454 ////////////////////////////////////////////////////////////////////
//     Function: Triangulator::get_triangle_v1
//       Access: Published
//  Description: Returns vertex 1 of the nth triangle generated by the
//               previous call to triangulate().
//
//               This is a zero-based index into the vertices added by
//               repeated calls to add_vertex().
//////////////////////////////////////////////////////////////////// 2 4 this 3 1777  1 n 1 1517  
713 14 Dtool_LL_prD8a 0 6 721 1517 0 14 Dtool_LL_prD8a 454 ////////////////////////////////////////////////////////////////////
//     Function: Triangulator::get_triangle_v2
//       Access: Published
//  Description: Returns vertex 2 of the nth triangle generated by the
//               previous call to triangulate().
//
//               This is a zero-based index into the vertices added by
//               repeated calls to add_vertex().
//////////////////////////////////////////////////////////////////// 2 4 this 3 1777  1 n 1 1517  
714 14 Dtool_LL_poJgk 0 7 724 1779 1420 14 Dtool_LL_poJgk 226 ////////////////////////////////////////////////////////////////////
//     Function: Triangulator3::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 0 
715 14 Dtool_LL_pHOzr 0 4 725 1520 0 14 Dtool_LL_pHOzr 338 ////////////////////////////////////////////////////////////////////
//     Function: Triangulator3::clear
//       Access: Published
//  Description: Removes all vertices and polygon specifications from
//               the Triangulator, and prepares it to start over.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1779  
716 14 Dtool_LL_pfch4 0 6 726 1517 0 14 Dtool_LL_pfch4 313 ////////////////////////////////////////////////////////////////////
//     Function: Triangulator3::add_vertex
//       Access: Published
//  Description: Adds a new vertex to the vertex pool.  Returns the
//               vertex index number.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1779  5 point 1 1717  
717 14 Dtool_LL_pkHDm 0 6 726 1517 0 14 Dtool_LL_pkHDm 802 // Filename: triangulator3.I
// Created by:  drose (03Jan13)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: Triangulator3::add_vertex
//       Access: Published
//  Description: Adds a new vertex to the vertex pool.  Returns the
//               vertex index number.
//////////////////////////////////////////////////////////////////// 4 4 this 3 1779  1 x 1 1704  1 y 1 1704  1 z 1 1704  
718 14 Dtool_LL_pYK_E 0 6 727 1517 0 14 Dtool_LL_pYK_E 546 ////////////////////////////////////////////////////////////////////
//     Function: Triangulator3::get_num_vertices
//       Access: Published
//  Description: Returns the number of vertices in the pool.  Note
//               that the Triangulator might append new vertices, in
//               addition to those added by the user, if any of the
//               polygon is self-intersecting, or if any of the holes
//               intersect some part of the polygon edges.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1780  
719 14 Dtool_LL_pD8o_ 0 6 728 1717 0 14 Dtool_LL_pD8o_ 248 ////////////////////////////////////////////////////////////////////
//     Function: Triangulator3::get_vertex
//       Access: Published
//  Description: Returns the nth vertex.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1780  1 n 1 1517  
720 14 Dtool_LL_pBq6z 0 4 729 1520 0 14 Dtool_LL_pBq6z 440 ////////////////////////////////////////////////////////////////////
//     Function: Triangulator3::triangulate
//       Access: Published
//  Description: Does the work of triangulating the specified polygon.
//               After this call, you may retrieve the new triangles
//               one at a time by iterating through
//               get_triangle_v0/1/2().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1779  
721 14 Dtool_LL_pDce5 0 6 730 1724 0 14 Dtool_LL_pDce5 327 ////////////////////////////////////////////////////////////////////
//     Function: Triangulator3::get_plane
//       Access: Published
//  Description: Returns the plane of the polygon.  This is only
//               available after calling triangulate().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1780  
722 14 Dtool_LL_pyYd4 0 4 641 1520 0 14 Dtool_LL_pyYd4 0 3 3 mat 1 1782  3 fwd 1 1721  2 cs 1 1735  
723 14 Dtool_LL_pmjSo 0 4 641 1520 0 14 Dtool_LL_pmjSo 694 ////////////////////////////////////////////////////////////////////
//     Function: heads_up
//  Description: Given two vectors defining a forward direction and an
//               up vector, constructs the matrix that rotates things
//               from the defined coordinate system to y-forward and
//               z-up.  The up vector will be rotated to z-up first,
//               then the forward vector will be rotated as nearly to
//               y-forward as possible.  This will only have a
//               different effect from look_at() if the forward and up
//               vectors are not perpendicular.
//////////////////////////////////////////////////////////////////// 4 3 mat 1 1782  3 fwd 1 1721  2 up 1 1721  2 cs 1 1735  
724 14 Dtool_LL_pv5m2 0 4 641 1520 0 14 Dtool_LL_pv5m2 694 ////////////////////////////////////////////////////////////////////
//     Function: heads_up
//  Description: Given two vectors defining a forward direction and an
//               up vector, constructs the matrix that rotates things
//               from the defined coordinate system to y-forward and
//               z-up.  The up vector will be rotated to z-up first,
//               then the forward vector will be rotated as nearly to
//               y-forward as possible.  This will only have a
//               different effect from look_at() if the forward and up
//               vectors are not perpendicular.
//////////////////////////////////////////////////////////////////// 3 3 mat 1 1782  3 fwd 1 1721  2 up 1 1721  
725 14 Dtool_LL_pTJmh 0 4 641 1520 0 14 Dtool_LL_pTJmh 694 ////////////////////////////////////////////////////////////////////
//     Function: heads_up
//  Description: Given two vectors defining a forward direction and an
//               up vector, constructs the matrix that rotates things
//               from the defined coordinate system to y-forward and
//               z-up.  The up vector will be rotated to z-up first,
//               then the forward vector will be rotated as nearly to
//               y-forward as possible.  This will only have a
//               different effect from look_at() if the forward and up
//               vectors are not perpendicular.
//////////////////////////////////////////////////////////////////// 2 3 mat 1 1782  3 fwd 1 1721  
726 14 Dtool_LL_p5qVz 0 4 641 1520 0 14 Dtool_LL_p5qVz 0 3 3 mat 1 1783  3 fwd 1 1709  2 cs 1 1735  
727 14 Dtool_LL_pstmb 0 4 641 1520 0 14 Dtool_LL_pstmb 694 ////////////////////////////////////////////////////////////////////
//     Function: heads_up
//  Description: Given two vectors defining a forward direction and an
//               up vector, constructs the matrix that rotates things
//               from the defined coordinate system to y-forward and
//               z-up.  The up vector will be rotated to z-up first,
//               then the forward vector will be rotated as nearly to
//               y-forward as possible.  This will only have a
//               different effect from look_at() if the forward and up
//               vectors are not perpendicular.
//////////////////////////////////////////////////////////////////// 4 3 mat 1 1783  3 fwd 1 1709  2 up 1 1709  2 cs 1 1735  
728 14 Dtool_LL_p5P9p 0 4 641 1520 0 14 Dtool_LL_p5P9p 694 ////////////////////////////////////////////////////////////////////
//     Function: heads_up
//  Description: Given two vectors defining a forward direction and an
//               up vector, constructs the matrix that rotates things
//               from the defined coordinate system to y-forward and
//               z-up.  The up vector will be rotated to z-up first,
//               then the forward vector will be rotated as nearly to
//               y-forward as possible.  This will only have a
//               different effect from look_at() if the forward and up
//               vectors are not perpendicular.
//////////////////////////////////////////////////////////////////// 3 3 mat 1 1783  3 fwd 1 1709  2 up 1 1709  
729 14 Dtool_LL_pucec 0 4 641 1520 0 14 Dtool_LL_pucec 694 ////////////////////////////////////////////////////////////////////
//     Function: heads_up
//  Description: Given two vectors defining a forward direction and an
//               up vector, constructs the matrix that rotates things
//               from the defined coordinate system to y-forward and
//               z-up.  The up vector will be rotated to z-up first,
//               then the forward vector will be rotated as nearly to
//               y-forward as possible.  This will only have a
//               different effect from look_at() if the forward and up
//               vectors are not perpendicular.
//////////////////////////////////////////////////////////////////// 2 3 mat 1 1783  3 fwd 1 1709  
730 14 Dtool_LL_py0V9 0 4 641 1520 0 14 Dtool_LL_py0V9 0 3 3 mat 1 1726  3 fwd 1 1721  2 cs 1 1735  
731 14 Dtool_LL_pm_Kt 0 4 641 1520 0 14 Dtool_LL_pm_Kt 0 4 3 mat 1 1726  3 fwd 1 1721  2 up 1 1721  2 cs 1 1735  
732 14 Dtool_LL_pvdh7 0 4 641 1520 0 14 Dtool_LL_pvdh7 0 3 3 mat 1 1726  3 fwd 1 1721  2 up 1 1721  
733 14 Dtool_LL_pTtem 0 4 641 1520 0 14 Dtool_LL_pTtem 0 2 3 mat 1 1726  3 fwd 1 1721  
734 14 Dtool_LL_p5GM4 0 4 641 1520 0 14 Dtool_LL_p5GM4 0 3 3 mat 1 1714  3 fwd 1 1709  2 cs 1 1735  
735 14 Dtool_LL_psJfg 0 4 641 1520 0 14 Dtool_LL_psJfg 0 4 3 mat 1 1714  3 fwd 1 1709  2 up 1 1709  2 cs 1 1735  
736 14 Dtool_LL_p5j1u 0 4 641 1520 0 14 Dtool_LL_p5j1u 0 3 3 mat 1 1714  3 fwd 1 1709  2 up 1 1709  
737 14 Dtool_LL_puwWh 0 4 641 1520 0 14 Dtool_LL_puwWh 0 2 3 mat 1 1714  3 fwd 1 1709  
738 14 Dtool_LL_pTxQm 0 4 641 1520 0 14 Dtool_LL_pTxQm 0 3 4 quat 1 1784  3 fwd 1 1721  2 cs 1 1735  
739 14 Dtool_LL_pd9Wi 0 4 641 1520 0 14 Dtool_LL_pd9Wi 0 4 4 quat 1 1784  3 fwd 1 1721  2 up 1 1721  2 cs 1 1735  
740 14 Dtool_LL_piZq8 0 4 641 1520 0 14 Dtool_LL_piZq8 0 3 4 quat 1 1784  3 fwd 1 1721  2 up 1 1721  
741 14 Dtool_LL_p3Jjx 0 4 641 1520 0 14 Dtool_LL_p3Jjx 0 2 4 quat 1 1784  3 fwd 1 1721  
742 14 Dtool_LL_pRh3W 0 4 641 1520 0 14 Dtool_LL_pRh3W 0 3 4 quat 1 1786  3 fwd 1 1709  2 cs 1 1735  
743 14 Dtool_LL_pjnkT 0 4 641 1520 0 14 Dtool_LL_pjnkT 0 4 4 quat 1 1786  3 fwd 1 1709  2 up 1 1709  2 cs 1 1735  
744 14 Dtool_LL_pHl5t 0 4 641 1520 0 14 Dtool_LL_pHl5t 0 3 4 quat 1 1786  3 fwd 1 1709  2 up 1 1709  
745 14 Dtool_LL_p1YKi 0 4 641 1520 0 14 Dtool_LL_p1YKi 0 2 4 quat 1 1786  3 fwd 1 1709  
746 14 Dtool_LL_p2iJ6 0 4 642 1520 0 14 Dtool_LL_p2iJ6 0 3 3 mat 1 1782  3 fwd 1 1721  2 cs 1 1735  
747 14 Dtool_LL_pe3n7 0 4 642 1520 0 14 Dtool_LL_pe3n7 694 ////////////////////////////////////////////////////////////////////
//     Function: look_at
//  Description: Given two vectors defining a forward direction and an
//               up vector, constructs the matrix that rotates things
//               from the defined coordinate system to y-forward and
//               z-up.  The forward vector will be rotated to
//               y-forward first, then the up vector will be rotated
//               as nearly to z-up as possible.  This will only have a
//               different effect from heads_up() if the forward and
//               up vectors are not perpendicular.
//////////////////////////////////////////////////////////////////// 4 3 mat 1 1782  3 fwd 1 1721  2 up 1 1721  2 cs 1 1735  
748 14 Dtool_LL_pYQHg 0 4 642 1520 0 14 Dtool_LL_pYQHg 694 ////////////////////////////////////////////////////////////////////
//     Function: look_at
//  Description: Given two vectors defining a forward direction and an
//               up vector, constructs the matrix that rotates things
//               from the defined coordinate system to y-forward and
//               z-up.  The forward vector will be rotated to
//               y-forward first, then the up vector will be rotated
//               as nearly to z-up as possible.  This will only have a
//               different effect from heads_up() if the forward and
//               up vectors are not perpendicular.
//////////////////////////////////////////////////////////////////// 3 3 mat 1 1782  3 fwd 1 1721  2 up 1 1721  
749 14 Dtool_LL_phTgt 0 4 642 1520 0 14 Dtool_LL_phTgt 694 ////////////////////////////////////////////////////////////////////
//     Function: look_at
//  Description: Given two vectors defining a forward direction and an
//               up vector, constructs the matrix that rotates things
//               from the defined coordinate system to y-forward and
//               z-up.  The forward vector will be rotated to
//               y-forward first, then the up vector will be rotated
//               as nearly to z-up as possible.  This will only have a
//               different effect from heads_up() if the forward and
//               up vectors are not perpendicular.
//////////////////////////////////////////////////////////////////// 2 3 mat 1 1782  3 fwd 1 1721  
750 14 Dtool_LL_pTR_D 0 4 642 1520 0 14 Dtool_LL_pTR_D 0 3 3 mat 1 1783  3 fwd 1 1709  2 cs 1 1735  
751 14 Dtool_LL_pzsOP 0 4 642 1520 0 14 Dtool_LL_pzsOP 694 ////////////////////////////////////////////////////////////////////
//     Function: look_at
//  Description: Given two vectors defining a forward direction and an
//               up vector, constructs the matrix that rotates things
//               from the defined coordinate system to y-forward and
//               z-up.  The forward vector will be rotated to
//               y-forward first, then the up vector will be rotated
//               as nearly to z-up as possible.  This will only have a
//               different effect from heads_up() if the forward and
//               up vectors are not perpendicular.
//////////////////////////////////////////////////////////////////// 4 3 mat 1 1783  3 fwd 1 1709  2 up 1 1709  2 cs 1 1735  
752 14 Dtool_LL_p04uz 0 4 642 1520 0 14 Dtool_LL_p04uz 694 ////////////////////////////////////////////////////////////////////
//     Function: look_at
//  Description: Given two vectors defining a forward direction and an
//               up vector, constructs the matrix that rotates things
//               from the defined coordinate system to y-forward and
//               z-up.  The forward vector will be rotated to
//               y-forward first, then the up vector will be rotated
//               as nearly to z-up as possible.  This will only have a
//               different effect from heads_up() if the forward and
//               up vectors are not perpendicular.
//////////////////////////////////////////////////////////////////// 3 3 mat 1 1783  3 fwd 1 1709  2 up 1 1709  
753 14 Dtool_LL_pNDW3 0 4 642 1520 0 14 Dtool_LL_pNDW3 694 ////////////////////////////////////////////////////////////////////
//     Function: look_at
//  Description: Given two vectors defining a forward direction and an
//               up vector, constructs the matrix that rotates things
//               from the defined coordinate system to y-forward and
//               z-up.  The forward vector will be rotated to
//               y-forward first, then the up vector will be rotated
//               as nearly to z-up as possible.  This will only have a
//               different effect from heads_up() if the forward and
//               up vectors are not perpendicular.
//////////////////////////////////////////////////////////////////// 2 3 mat 1 1783  3 fwd 1 1709  
754 14 Dtool_LL_p_RT6 0 4 642 1520 0 14 Dtool_LL_p_RT6 0 3 3 mat 1 1726  3 fwd 1 1721  2 cs 1 1735  
755 14 Dtool_LL_pWkx7 0 4 642 1520 0 14 Dtool_LL_pWkx7 0 4 3 mat 1 1726  3 fwd 1 1721  2 up 1 1721  2 cs 1 1735  
756 14 Dtool_LL_pQhRg 0 4 642 1520 0 14 Dtool_LL_pQhRg 0 3 3 mat 1 1726  3 fwd 1 1721  2 up 1 1721  
757 14 Dtool_LL_ppCqt 0 4 642 1520 0 14 Dtool_LL_ppCqt 0 2 3 mat 1 1726  3 fwd 1 1721  
758 14 Dtool_LL_pbAJE 0 4 642 1520 0 14 Dtool_LL_pbAJE 0 3 3 mat 1 1714  3 fwd 1 1709  2 cs 1 1735  
759 14 Dtool_LL_pLcXP 0 4 642 1520 0 14 Dtool_LL_pLcXP 0 4 3 mat 1 1714  3 fwd 1 1709  2 up 1 1709  2 cs 1 1735  
760 14 Dtool_LL_pMJ3z 0 4 642 1520 0 14 Dtool_LL_pMJ3z 0 3 3 mat 1 1714  3 fwd 1 1709  2 up 1 1709  
761 14 Dtool_LL_p1yf3 0 4 642 1520 0 14 Dtool_LL_p1yf3 0 2 3 mat 1 1714  3 fwd 1 1709  
762 14 Dtool_LL_pdgkh 0 4 642 1520 0 14 Dtool_LL_pdgkh 0 3 4 quat 1 1784  3 fwd 1 1721  2 cs 1 1735  
763 14 Dtool_LL_pq4at 0 4 642 1520 0 14 Dtool_LL_pq4at 0 4 4 quat 1 1784  3 fwd 1 1721  2 up 1 1721  2 cs 1 1735  
764 14 Dtool_LL_p6OSa 0 4 642 1520 0 14 Dtool_LL_p6OSa 0 3 4 quat 1 1784  3 fwd 1 1721  2 up 1 1721  
765 14 Dtool_LL_pmF_T 0 4 642 1520 0 14 Dtool_LL_pmF_T 0 2 4 quat 1 1784  3 fwd 1 1721  
766 14 Dtool_LL_pPvHl 0 4 642 1520 0 14 Dtool_LL_pPvHl 0 3 4 quat 1 1786  3 fwd 1 1709  2 cs 1 1735  
767 14 Dtool_LL_p_f8w 0 4 642 1520 0 14 Dtool_LL_p_f8w 0 4 4 quat 1 1786  3 fwd 1 1709  2 up 1 1709  2 cs 1 1735  
768 14 Dtool_LL_pxh1d 0 4 642 1520 0 14 Dtool_LL_pxh1d 0 3 4 quat 1 1786  3 fwd 1 1709  2 up 1 1709  
769 14 Dtool_LL_pGIgX 0 4 642 1520 0 14 Dtool_LL_pGIgX 0 2 4 quat 1 1786  3 fwd 1 1709  
770 14 Dtool_LL_p8zF6 0 4 689 1520 0 14 Dtool_LL_p8zF6 0 3 3 mat 1 1782  1 a 1 1721  1 b 1 1721  
771 14 Dtool_LL_p6uMk 0 4 689 1520 0 14 Dtool_LL_p6uMk 0 3 3 mat 1 1783  1 a 1 1709  1 b 1 1709  
772 14 Dtool_LL_pxzTW 0 4 689 1520 0 14 Dtool_LL_pxzTW 0 3 3 mat 1 1726  1 a 1 1721  1 b 1 1721  
773 14 Dtool_LL_p_uaA 0 4 689 1520 0 14 Dtool_LL_p_uaA 0 3 3 mat 1 1714  1 a 1 1709  1 b 1 1709  
367
1421 14 CPTA_LMatrix3d 0 141313 32 ConstPointerToArray< LMatrix3d > 32 ConstPointerToArray< LMatrix3d > 0 0 0 1 777 787 0 9 778 779 780 781 782 783 784 785 786 0 0 1 0 1422 0 0 0 0 0

1422 31 PointerToArrayBase< LMatrix3d > 0 26625 31 PointerToArrayBase< LMatrix3d > 31 PointerToArrayBase< LMatrix3d > 0 0 0 0 776 0 0 0 0 1 0 1423 0 0 0 0 0

1423 52 PointerToBase< ReferenceCountedVector< LMatrix3d > > 0 43009 52 PointerToBase< ReferenceCountedVector< LMatrix3d > > 52 PointerToBase< ReferenceCountedVector< LMatrix3d > > 0 0 0 0 0 0 2 774 775 0 0 1 0 1424 0 0 0 0 0

1424 13 PointerToVoid 0 2049 13 PointerToVoid 13 PointerToVoid 0 0 0 0 0 0 0 0 0 0 0 0 635
////////////////////////////////////////////////////////////////////
//       Class : PointerToVoid
// Description : This is the non-template part of the base class for
//               PointerTo and ConstPointerTo.  It is necessary so we
//               can keep a pointer to a non-template class within the
//               ReferenceCount object, to implement weak reference
//               pointers--we need to have something to clean up when
//               the ReferenceCount object destructs.
//
//               This is the base class for PointerToBase<T>.
////////////////////////////////////////////////////////////////////

1425 14 CPTA_LMatrix3f 0 141313 32 ConstPointerToArray< LMatrix3f > 32 ConstPointerToArray< LMatrix3f > 0 0 0 1 791 801 0 9 792 793 794 795 796 797 798 799 800 0 0 1 0 1426 0 0 0 0 0

1426 31 PointerToArrayBase< LMatrix3f > 0 26625 31 PointerToArrayBase< LMatrix3f > 31 PointerToArrayBase< LMatrix3f > 0 0 0 0 790 0 0 0 0 1 0 1427 0 0 0 0 0

1427 52 PointerToBase< ReferenceCountedVector< LMatrix3f > > 0 43009 52 PointerToBase< ReferenceCountedVector< LMatrix3f > > 52 PointerToBase< ReferenceCountedVector< LMatrix3f > > 0 0 0 0 0 0 2 788 789 0 0 1 0 1424 0 0 0 0 0

1428 15 CPTA_LVecBase2d 0 141313 33 ConstPointerToArray< LVecBase2d > 33 ConstPointerToArray< LVecBase2d > 0 0 0 1 805 815 0 9 806 807 808 809 810 811 812 813 814 0 0 1 0 1429 0 0 0 0 0

1429 32 PointerToArrayBase< LVecBase2d > 0 26625 32 PointerToArrayBase< LVecBase2d > 32 PointerToArrayBase< LVecBase2d > 0 0 0 0 804 0 0 0 0 1 0 1430 0 0 0 0 0

1430 53 PointerToBase< ReferenceCountedVector< LVecBase2d > > 0 43009 53 PointerToBase< ReferenceCountedVector< LVecBase2d > > 53 PointerToBase< ReferenceCountedVector< LVecBase2d > > 0 0 0 0 0 0 2 802 803 0 0 1 0 1424 0 0 0 0 0

1431 15 CPTA_LVecBase2f 0 141313 33 ConstPointerToArray< LVecBase2f > 33 ConstPointerToArray< LVecBase2f > 0 0 0 1 819 829 0 9 820 821 822 823 824 825 826 827 828 0 0 1 0 1432 0 0 0 0 0

1432 32 PointerToArrayBase< LVecBase2f > 0 26625 32 PointerToArrayBase< LVecBase2f > 32 PointerToArrayBase< LVecBase2f > 0 0 0 0 818 0 0 0 0 1 0 1433 0 0 0 0 0

1433 53 PointerToBase< ReferenceCountedVector< LVecBase2f > > 0 43009 53 PointerToBase< ReferenceCountedVector< LVecBase2f > > 53 PointerToBase< ReferenceCountedVector< LVecBase2f > > 0 0 0 0 0 0 2 816 817 0 0 1 0 1424 0 0 0 0 0

1434 15 CPTA_LVecBase2i 0 141313 33 ConstPointerToArray< LVecBase2i > 33 ConstPointerToArray< LVecBase2i > 0 0 0 1 833 843 0 9 834 835 836 837 838 839 840 841 842 0 0 1 0 1435 0 0 0 0 0

1435 32 PointerToArrayBase< LVecBase2i > 0 26625 32 PointerToArrayBase< LVecBase2i > 32 PointerToArrayBase< LVecBase2i > 0 0 0 0 832 0 0 0 0 1 0 1436 0 0 0 0 0

1436 53 PointerToBase< ReferenceCountedVector< LVecBase2i > > 0 43009 53 PointerToBase< ReferenceCountedVector< LVecBase2i > > 53 PointerToBase< ReferenceCountedVector< LVecBase2i > > 0 0 0 0 0 0 2 830 831 0 0 1 0 1424 0 0 0 0 0

1437 15 CPTA_LVecBase3d 0 141313 33 ConstPointerToArray< LVecBase3d > 33 ConstPointerToArray< LVecBase3d > 0 0 0 1 847 857 0 9 848 849 850 851 852 853 854 855 856 0 0 1 0 1438 0 0 0 0 0

1438 32 PointerToArrayBase< LVecBase3d > 0 26625 32 PointerToArrayBase< LVecBase3d > 32 PointerToArrayBase< LVecBase3d > 0 0 0 0 846 0 0 0 0 1 0 1439 0 0 0 0 0

1439 53 PointerToBase< ReferenceCountedVector< LVecBase3d > > 0 43009 53 PointerToBase< ReferenceCountedVector< LVecBase3d > > 53 PointerToBase< ReferenceCountedVector< LVecBase3d > > 0 0 0 0 0 0 2 844 845 0 0 1 0 1424 0 0 0 0 0

1440 15 CPTA_LVecBase3f 0 141313 33 ConstPointerToArray< LVecBase3f > 33 ConstPointerToArray< LVecBase3f > 0 0 0 1 861 871 0 9 862 863 864 865 866 867 868 869 870 0 0 1 0 1441 0 0 0 0 0

1441 32 PointerToArrayBase< LVecBase3f > 0 26625 32 PointerToArrayBase< LVecBase3f > 32 PointerToArrayBase< LVecBase3f > 0 0 0 0 860 0 0 0 0 1 0 1442 0 0 0 0 0

1442 53 PointerToBase< ReferenceCountedVector< LVecBase3f > > 0 43009 53 PointerToBase< ReferenceCountedVector< LVecBase3f > > 53 PointerToBase< ReferenceCountedVector< LVecBase3f > > 0 0 0 0 0 0 2 858 859 0 0 1 0 1424 0 0 0 0 0

1443 15 CPTA_LVecBase3i 0 141313 33 ConstPointerToArray< LVecBase3i > 33 ConstPointerToArray< LVecBase3i > 0 0 0 1 875 885 0 9 876 877 878 879 880 881 882 883 884 0 0 1 0 1444 0 0 0 0 0

1444 32 PointerToArrayBase< LVecBase3i > 0 26625 32 PointerToArrayBase< LVecBase3i > 32 PointerToArrayBase< LVecBase3i > 0 0 0 0 874 0 0 0 0 1 0 1445 0 0 0 0 0

1445 53 PointerToBase< ReferenceCountedVector< LVecBase3i > > 0 43009 53 PointerToBase< ReferenceCountedVector< LVecBase3i > > 53 PointerToBase< ReferenceCountedVector< LVecBase3i > > 0 0 0 0 0 0 2 872 873 0 0 1 0 1424 0 0 0 0 0

1446 14 CPTA_LMatrix4d 0 141313 41 ConstPointerToArray< UnalignedLMatrix4d > 41 ConstPointerToArray< UnalignedLMatrix4d > 0 0 0 1 889 899 0 9 890 891 892 893 894 895 896 897 898 0 0 1 0 1447 0 0 0 0 0

1447 40 PointerToArrayBase< UnalignedLMatrix4d > 0 26625 40 PointerToArrayBase< UnalignedLMatrix4d > 40 PointerToArrayBase< UnalignedLMatrix4d > 0 0 0 0 888 0 0 0 0 1 0 1448 0 0 0 0 0

1448 61 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4d > > 0 43009 61 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4d > > 61 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4d > > 0 0 0 0 0 0 2 886 887 0 0 1 0 1424 0 0 0 0 0

1449 14 CPTA_LMatrix4f 0 141313 41 ConstPointerToArray< UnalignedLMatrix4f > 41 ConstPointerToArray< UnalignedLMatrix4f > 0 0 0 1 903 913 0 9 904 905 906 907 908 909 910 911 912 0 0 1 0 1450 0 0 0 0 0

1450 40 PointerToArrayBase< UnalignedLMatrix4f > 0 26625 40 PointerToArrayBase< UnalignedLMatrix4f > 40 PointerToArrayBase< UnalignedLMatrix4f > 0 0 0 0 902 0 0 0 0 1 0 1451 0 0 0 0 0

1451 61 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4f > > 0 43009 61 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4f > > 61 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4f > > 0 0 0 0 0 0 2 900 901 0 0 1 0 1424 0 0 0 0 0

1452 15 CPTA_LVecBase4d 0 141313 42 ConstPointerToArray< UnalignedLVecBase4d > 42 ConstPointerToArray< UnalignedLVecBase4d > 0 0 0 1 917 927 0 9 918 919 920 921 922 923 924 925 926 0 0 1 0 1453 0 0 0 0 0

1453 41 PointerToArrayBase< UnalignedLVecBase4d > 0 26625 41 PointerToArrayBase< UnalignedLVecBase4d > 41 PointerToArrayBase< UnalignedLVecBase4d > 0 0 0 0 916 0 0 0 0 1 0 1454 0 0 0 0 0

1454 62 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4d > > 0 43009 62 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4d > > 62 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4d > > 0 0 0 0 0 0 2 914 915 0 0 1 0 1424 0 0 0 0 0

1455 15 CPTA_LVecBase4f 0 141313 42 ConstPointerToArray< UnalignedLVecBase4f > 42 ConstPointerToArray< UnalignedLVecBase4f > 0 0 0 1 931 941 0 9 932 933 934 935 936 937 938 939 940 0 0 1 0 1456 0 0 0 0 0

1456 41 PointerToArrayBase< UnalignedLVecBase4f > 0 26625 41 PointerToArrayBase< UnalignedLVecBase4f > 41 PointerToArrayBase< UnalignedLVecBase4f > 0 0 0 0 930 0 0 0 0 1 0 1457 0 0 0 0 0

1457 62 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4f > > 0 43009 62 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4f > > 62 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4f > > 0 0 0 0 0 0 2 928 929 0 0 1 0 1424 0 0 0 0 0

1458 15 CPTA_LVecBase4i 0 141313 42 ConstPointerToArray< UnalignedLVecBase4i > 42 ConstPointerToArray< UnalignedLVecBase4i > 0 0 0 1 945 955 0 9 946 947 948 949 950 951 952 953 954 0 0 1 0 1459 0 0 0 0 0

1459 41 PointerToArrayBase< UnalignedLVecBase4i > 0 26625 41 PointerToArrayBase< UnalignedLVecBase4i > 41 PointerToArrayBase< UnalignedLVecBase4i > 0 0 0 0 944 0 0 0 0 1 0 1460 0 0 0 0 0

1460 62 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4i > > 0 43009 62 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4i > > 62 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4i > > 0 0 0 0 0 0 2 942 943 0 0 1 0 1424 0 0 0 0 0

1461 13 PTA_LMatrix3d 0 141313 27 PointerToArray< LMatrix3d > 27 PointerToArray< LMatrix3d > 0 0 0 1 956 973 0 16 957 958 959 960 961 962 963 964 965 966 967 968 969 970 971 972 0 0 1 0 1422 0 0 0 0 0

1462 13 PTA_LMatrix3f 0 141313 27 PointerToArray< LMatrix3f > 27 PointerToArray< LMatrix3f > 0 0 0 1 974 991 0 16 975 976 977 978 979 980 981 982 983 984 985 986 987 988 989 990 0 0 1 0 1426 0 0 0 0 0

1463 14 PTA_LVecBase2d 0 141313 28 PointerToArray< LVecBase2d > 28 PointerToArray< LVecBase2d > 0 0 0 1 992 1009 0 16 993 994 995 996 997 998 999 1000 1001 1002 1003 1004 1005 1006 1007 1008 0 0 1 0 1429 0 0 0 0 0

1464 14 PTA_LVecBase2f 0 141313 28 PointerToArray< LVecBase2f > 28 PointerToArray< LVecBase2f > 0 0 0 1 1010 1027 0 16 1011 1012 1013 1014 1015 1016 1017 1018 1019 1020 1021 1022 1023 1024 1025 1026 0 0 1 0 1432 0 0 0 0 0

1465 14 PTA_LVecBase2i 0 141313 28 PointerToArray< LVecBase2i > 28 PointerToArray< LVecBase2i > 0 0 0 1 1028 1045 0 16 1029 1030 1031 1032 1033 1034 1035 1036 1037 1038 1039 1040 1041 1042 1043 1044 0 0 1 0 1435 0 0 0 0 0

1466 14 PTA_LVecBase3d 0 141313 28 PointerToArray< LVecBase3d > 28 PointerToArray< LVecBase3d > 0 0 0 1 1046 1063 0 16 1047 1048 1049 1050 1051 1052 1053 1054 1055 1056 1057 1058 1059 1060 1061 1062 0 0 1 0 1438 0 0 0 0 0

1467 14 PTA_LVecBase3f 0 141313 28 PointerToArray< LVecBase3f > 28 PointerToArray< LVecBase3f > 0 0 0 1 1064 1081 0 16 1065 1066 1067 1068 1069 1070 1071 1072 1073 1074 1075 1076 1077 1078 1079 1080 0 0 1 0 1441 0 0 0 0 0

1468 14 PTA_LVecBase3i 0 141313 28 PointerToArray< LVecBase3i > 28 PointerToArray< LVecBase3i > 0 0 0 1 1082 1099 0 16 1083 1084 1085 1086 1087 1088 1089 1090 1091 1092 1093 1094 1095 1096 1097 1098 0 0 1 0 1444 0 0 0 0 0

1469 13 PTA_LMatrix4d 0 141313 36 PointerToArray< UnalignedLMatrix4d > 36 PointerToArray< UnalignedLMatrix4d > 0 0 0 1 1100 1117 0 16 1101 1102 1103 1104 1105 1106 1107 1108 1109 1110 1111 1112 1113 1114 1115 1116 0 0 1 0 1447 0 0 0 0 0

1470 13 PTA_LMatrix4f 0 141313 36 PointerToArray< UnalignedLMatrix4f > 36 PointerToArray< UnalignedLMatrix4f > 0 0 0 1 1118 1135 0 16 1119 1120 1121 1122 1123 1124 1125 1126 1127 1128 1129 1130 1131 1132 1133 1134 0 0 1 0 1450 0 0 0 0 0

1471 14 PTA_LVecBase4d 0 141313 37 PointerToArray< UnalignedLVecBase4d > 37 PointerToArray< UnalignedLVecBase4d > 0 0 0 1 1136 1153 0 16 1137 1138 1139 1140 1141 1142 1143 1144 1145 1146 1147 1148 1149 1150 1151 1152 0 0 1 0 1453 0 0 0 0 0

1472 14 PTA_LVecBase4f 0 141313 37 PointerToArray< UnalignedLVecBase4f > 37 PointerToArray< UnalignedLVecBase4f > 0 0 0 1 1154 1171 0 16 1155 1156 1157 1158 1159 1160 1161 1162 1163 1164 1165 1166 1167 1168 1169 1170 0 0 1 0 1456 0 0 0 0 0

1473 14 PTA_LVecBase4i 0 141313 37 PointerToArray< UnalignedLVecBase4i > 37 PointerToArray< UnalignedLVecBase4i > 0 0 0 1 1172 1189 0 16 1173 1174 1175 1176 1177 1178 1179 1180 1181 1182 1183 1184 1185 1186 1187 1188 0 0 1 0 1459 0 0 0 0 0

1474 14 BoundingVolume 0 141313 14 BoundingVolume 14 BoundingVolume 0 0 0 0 1200 0 10 1190 1191 1192 1193 1194 1195 1196 1197 1198 1199 0 0 1 0 1475 0 0 0 2 1476 1477 596
////////////////////////////////////////////////////////////////////
//       Class : BoundingVolume
// Description : This is an abstract class for any volume in any sense
//               which can be said to define the locality of reference
//               of a node in a graph, along with all of its
//               descendants.  It is not necessarily a geometric
//               volume (although see GeometricBoundingVolume); this
//               is simply an abstract interface for bounds of any
//               sort.
////////////////////////////////////////////////////////////////////

1475 19 TypedReferenceCount 0 2049 19 TypedReferenceCount 19 TypedReferenceCount 0 0 0 0 0 0 0 0 0 0 0 0 710
////////////////////////////////////////////////////////////////////
//       Class : TypedReferenceCount
// Description : A base class for things which need to inherit from
//               both TypedObject and from ReferenceCount.  It's
//               convenient to define this intermediate base class
//               instead of multiply inheriting from the two classes
//               each time they are needed, so that we can sensibly
//               pass around pointers to things which are both
//               TypedObjects and ReferenceCounters.
//               
//               See also TypedObject for detailed instructions.
////////////////////////////////////////////////////////////////////

1476 17 IntersectionFlags 0 794624 33 BoundingVolume::IntersectionFlags 33 BoundingVolume::IntersectionFlags 1474 0 0 0 0 0 0 0 0 0 5 18 IF_no_intersection 34 BoundingVolume::IF_no_intersection 0 11 IF_possible 27 BoundingVolume::IF_possible 1 7 IF_some 23 BoundingVolume::IF_some 2 6 IF_all 22 BoundingVolume::IF_all 4 18 IF_dont_understand 34 BoundingVolume::IF_dont_understand 8 0 77
// The contains() functions return the union of one or more of these
// bits.

1477 10 BoundsType 0 794624 26 BoundingVolume::BoundsType 26 BoundingVolume::BoundsType 1474 0 0 0 0 0 0 0 0 0 4 10 BT_default 26 BoundingVolume::BT_default 0 7 BT_best 23 BoundingVolume::BT_best 1 9 BT_sphere 25 BoundingVolume::BT_sphere 2 6 BT_box 22 BoundingVolume::BT_box 3 0 80
// This enum is used to control the automatic generation of bounding
// volumes.

1478 23 GeometricBoundingVolume 0 141313 23 GeometricBoundingVolume 23 GeometricBoundingVolume 0 0 0 0 1207 0 6 1201 1202 1203 1204 1205 1206 0 0 1 0 1474 0 0 0 0 380
////////////////////////////////////////////////////////////////////
//       Class : GeometricBoundingVolume
// Description : This is another abstract class, for a general class
//               of bounding volumes that actually enclose points in
//               3-d space, such as BSP's and bounding spheres.
////////////////////////////////////////////////////////////////////

1479 20 FiniteBoundingVolume 0 141313 20 FiniteBoundingVolume 20 FiniteBoundingVolume 0 0 0 0 1212 0 4 1208 1209 1210 1211 0 0 1 0 1478 0 0 0 0 378
////////////////////////////////////////////////////////////////////
//       Class : FiniteBoundingVolume
// Description : A special kind of GeometricBoundingVolume that is
//               known to be finite.  It is possible to query this
//               kind of volume for its minimum and maximum extents.
////////////////////////////////////////////////////////////////////

1480 10 LParabolaf 0 26625 10 LParabolaf 10 LParabolaf 0 0 0 1 1213 1215 0 12 1214 1216 1217 1218 1219 1220 1221 1222 1223 1224 1225 1226 0 0 0 0 0 921
// Filename: parabola_src.h
// Created by:  drose (10Oct07)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LParabola
// Description : An abstract mathematical description of a parabola,
//               particularly useful for describing arcs of
//               projectiles.
//
//               The parabolic equation, given parametrically here, is
//               P = At^2 + Bt + C.
////////////////////////////////////////////////////////////////////

1481 10 LParabolad 0 26625 10 LParabolad 10 LParabolad 0 0 0 1 1227 1229 0 12 1228 1230 1231 1232 1233 1234 1235 1236 1237 1238 1239 1240 0 0 0 0 0 921
// Filename: parabola_src.h
// Created by:  drose (10Oct07)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LParabola
// Description : An abstract mathematical description of a parabola,
//               particularly useful for describing arcs of
//               projectiles.
//
//               The parabolic equation, given parametrically here, is
//               P = At^2 + Bt + C.
////////////////////////////////////////////////////////////////////

1482 7 LPlanef 0 141313 7 LPlanef 7 LPlanef 0 0 0 1 1241 1257 0 15 1242 1243 1244 1245 1246 1247 1248 1249 1250 1251 1252 1253 1254 1255 1256 0 0 1 0 1483 0 0 0 0 786
// Filename: plane_src.h
// Created by:  mike (09Jan97)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LPlane
// Description : An abstract mathematical description of a plane.  A
//               plane is defined by the equation Ax + By + Cz + D = 0.
////////////////////////////////////////////////////////////////////

1483 10 LVecBase4f 0 2049 10 LVecBase4f 10 LVecBase4f 0 0 0 0 0 0 0 0 0 0 0 0 265
////////////////////////////////////////////////////////////////////
//       Class : LVecBase4
// Description : This is the base class for all three-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

1484 7 LPlaned 0 141313 7 LPlaned 7 LPlaned 0 0 0 1 1258 1274 0 15 1259 1260 1261 1262 1263 1264 1265 1266 1267 1268 1269 1270 1271 1272 1273 0 0 1 0 1485 0 0 0 0 786
// Filename: plane_src.h
// Created by:  mike (09Jan97)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LPlane
// Description : An abstract mathematical description of a plane.  A
//               plane is defined by the equation Ax + By + Cz + D = 0.
////////////////////////////////////////////////////////////////////

1485 10 LVecBase4d 0 2049 10 LVecBase4d 10 LVecBase4d 0 0 0 0 0 0 0 0 0 0 0 0 265
////////////////////////////////////////////////////////////////////
//       Class : LVecBase4
// Description : This is the base class for all three-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

1486 11 BoundingBox 0 141313 11 BoundingBox 11 BoundingBox 0 0 0 1 1275 1284 0 8 1276 1277 1278 1279 1280 1281 1282 1283 2 1788 1789 0 1 0 1479 0 0 0 0 416
////////////////////////////////////////////////////////////////////
//       Class : BoundingBox
// Description : An axis-aligned bounding box; that is, a minimum and
//               maximum coordinate triple.
//
//               This box is always axis-aligned.  If you need a more
//               general bounding box, try BoundingHexahedron.
////////////////////////////////////////////////////////////////////

1487 9 LFrustumf 0 141313 9 LFrustumf 9 LFrustumf 0 0 0 1 1285 1292 0 6 1286 1287 1288 1289 1290 1291 0 0 0 0 0 666
// Filename: frustum_src.h
// Created by:  mike (09Jan97)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LFrustum
// Description :
////////////////////////////////////////////////////////////////////

1488 9 LFrustumd 0 141313 9 LFrustumd 9 LFrustumd 0 0 0 1 1293 1300 0 6 1294 1295 1296 1297 1298 1299 0 0 0 0 0 666
// Filename: frustum_src.h
// Created by:  mike (09Jan97)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LFrustum
// Description :
////////////////////////////////////////////////////////////////////

1489 18 BoundingHexahedron 0 141313 18 BoundingHexahedron 18 BoundingHexahedron 0 0 0 1 1301 1307 0 5 1302 1303 1304 1305 1306 2 1790 1791 0 1 0 1479 0 0 0 0 556
////////////////////////////////////////////////////////////////////
//       Class : BoundingHexahedron
// Description : This defines a bounding convex hexahedron.  It is
//               typically used to represent a frustum, but may
//               represent any enclosing convex hexahedron, including
//               simple boxes.  However, if all you want is an
//               axis-aligned bounding box, you may be better off with
//               the simpler BoundingBox class.
////////////////////////////////////////////////////////////////////

1490 12 BoundingLine 0 141313 12 BoundingLine 12 BoundingLine 0 0 0 1 1308 1315 0 6 1309 1310 1311 1312 1313 1314 0 0 1 0 1478 0 0 0 0 584
////////////////////////////////////////////////////////////////////
//       Class : BoundingLine
// Description : This funny bounding volume is an infinite line with
//               no thickness and extending to infinity in both
//               directions.
//
//               Note that it *always* extends in both directions,
//               despite the fact that you specify two points to the
//               constructor.  These are not endpoints, they are two
//               arbitrary points on the line.
////////////////////////////////////////////////////////////////////

1491 13 BoundingPlane 0 141313 13 BoundingPlane 13 BoundingPlane 0 0 0 1 1316 1322 0 5 1317 1318 1319 1320 1321 0 0 1 0 1478 0 0 0 0 482
////////////////////////////////////////////////////////////////////
//       Class : BoundingPlane
// Description : This funny bounding volume is an infinite plane that
//               divides space into two regions: the part behind the
//               normal, which is "inside" the bounding volume, and
//               the part in front of the normal, which is "outside"
//               the bounding volume.
////////////////////////////////////////////////////////////////////

1492 14 BoundingSphere 0 141313 14 BoundingSphere 14 BoundingSphere 0 0 0 1 1323 1330 0 6 1324 1325 1326 1327 1328 1329 0 0 1 0 1479 0 0 0 0 354
////////////////////////////////////////////////////////////////////
//       Class : BoundingSphere
// Description : This defines a bounding sphere, consisting of a
//               center and a radius.  It is always a sphere, and
//               never an ellipsoid or other quadric.
////////////////////////////////////////////////////////////////////

1493 26 IntersectionBoundingVolume 0 141313 26 IntersectionBoundingVolume 26 IntersectionBoundingVolume 0 0 0 1 1331 1340 0 8 1332 1333 1334 1335 1336 1337 1338 1339 1 1792 0 1 0 1478 0 0 0 0 479
////////////////////////////////////////////////////////////////////
//       Class : IntersectionBoundingVolume
// Description : This special bounding volume is the intersection of all of
//               its constituent bounding volumes.
//
//               A point is defined to be within an
//               IntersectionBoundingVolume if it is within all of its
//               component bounding volumes.
////////////////////////////////////////////////////////////////////

1494 8 Mersenne 0 141313 8 Mersenne 8 Mersenne 0 0 0 1 1343 1345 0 1 1344 0 0 0 0 0 0

1495 18 OmniBoundingVolume 0 141313 18 OmniBoundingVolume 18 OmniBoundingVolume 0 0 0 1 1346 1348 0 1 1347 0 0 1 0 1478 0 0 0 0 282
////////////////////////////////////////////////////////////////////
//       Class : OmniBoundingVolume
// Description : This is a special kind of GeometricBoundingVolume
//               that fills all of space.
////////////////////////////////////////////////////////////////////

1496 19 UnionBoundingVolume 0 141313 19 UnionBoundingVolume 19 UnionBoundingVolume 0 0 0 1 1349 1359 0 9 1350 1351 1352 1353 1354 1355 1356 1357 1358 1 1793 0 1 0 1478 0 0 0 0 469
////////////////////////////////////////////////////////////////////
//       Class : UnionBoundingVolume
// Description : This special bounding volume is the union of all of
//               its constituent bounding volumes.
//
//               A point is defined to be within a UnionBoundingVolume
//               if it is within any one or more of its component
//               bounding volumes.
////////////////////////////////////////////////////////////////////

1497 10 Randomizer 0 141313 10 Randomizer 10 Randomizer 0 0 0 1 1360 1367 0 6 1361 1362 1363 1364 1365 1366 0 0 0 0 0 222
////////////////////////////////////////////////////////////////////
//       Class : Randomizer
// Description : A handy class to return random numbers.
////////////////////////////////////////////////////////////////////

1498 11 PerlinNoise 0 141313 11 PerlinNoise 11 PerlinNoise 0 0 0 0 1369 0 1 1368 0 0 0 0 0 401
////////////////////////////////////////////////////////////////////
//       Class : PerlinNoise
// Description : This is the base class for PerlinNoise2 and
//               PerlinNoise3, different dimensions of Perlin noise
//               implementation.  The base class just collects the
//               common functionality.
////////////////////////////////////////////////////////////////////

1499 12 PerlinNoise2 0 141313 12 PerlinNoise2 12 PerlinNoise2 0 0 0 1 1370 1375 0 4 1371 1372 1373 1374 0 0 1 0 1498 0 0 0 0 405
////////////////////////////////////////////////////////////////////
//       Class : PerlinNoise2
// Description : This class provides an implementation of Perlin noise
//               for 2 variables.  This code is loosely based on the
//               reference implementation at
//               http://mrl.nyu.edu/~perlin/noise/ .
////////////////////////////////////////////////////////////////////

1500 12 PerlinNoise3 0 141313 12 PerlinNoise3 12 PerlinNoise3 0 0 0 1 1376 1381 0 4 1377 1378 1379 1380 0 0 1 0 1498 0 0 0 0 405
////////////////////////////////////////////////////////////////////
//       Class : PerlinNoise3
// Description : This class provides an implementation of Perlin noise
//               for 3 variables.  This code is loosely based on the
//               reference implementation at
//               http://mrl.nyu.edu/~perlin/noise/ .
////////////////////////////////////////////////////////////////////

1501 19 StackedPerlinNoise2 0 141313 19 StackedPerlinNoise2 19 StackedPerlinNoise2 0 0 0 1 1383 1389 0 5 1384 1385 1386 1387 1388 0 0 0 0 0 359
////////////////////////////////////////////////////////////////////
//       Class : StackedPerlinNoise2
// Description : Implements a multi-layer PerlinNoise, with one or
//               more high-frequency noise functions added to a
//               lower-frequency base noise function.
////////////////////////////////////////////////////////////////////

1502 19 StackedPerlinNoise3 0 141313 19 StackedPerlinNoise3 19 StackedPerlinNoise3 0 0 0 1 1390 1396 0 5 1391 1392 1393 1394 1395 0 0 0 0 0 359
////////////////////////////////////////////////////////////////////
//       Class : StackedPerlinNoise3
// Description : Implements a multi-layer PerlinNoise, with one or
//               more high-frequency noise functions added to a
//               lower-frequency base noise function.
////////////////////////////////////////////////////////////////////

1503 12 Triangulator 0 141313 12 Triangulator 12 Triangulator 0 0 0 1 1397 1412 0 14 1398 1399 1400 1401 1402 1403 1404 1405 1406 1407 1408 1409 1410 1411 1 1794 0 0 0 0 677
////////////////////////////////////////////////////////////////////
//       Class : Triangulator
// Description : This class can triangulate a convex or concave
//               polygon, even one with holes.  It is adapted from an
//               algorithm published as:
//
//               Narkhede A. and Manocha D., Fast polygon
//               triangulation algorithm based on Seidel's Algorithm,
//               UNC-CH, 1994.
//
//               http://www.cs.unc.edu/~dm/CODE/GEM/chapter.html
//
//               It works strictly on 2-d points.  See Triangulator3
//               for 3-d points.
////////////////////////////////////////////////////////////////////

1504 13 Triangulator3 0 141313 13 Triangulator3 13 Triangulator3 0 0 0 1 1413 1420 0 6 1414 1415 1416 1417 1418 1419 1 1795 0 1 0 1503 0 0 0 0 497
////////////////////////////////////////////////////////////////////
//       Class : Triangulator3
// Description : This is an extension of Triangulator to handle
//               polygons with three-dimensional points.  It assumes
//               all of the points lie in a single plane, and
//               internally projects the supplied points into 2-D for
//               passing to the underlying Triangulator object.
////////////////////////////////////////////////////////////////////

1505 40 ConstPointerToArray< LMatrix3d > const * 0 8576 40 ConstPointerToArray< LMatrix3d > const * 40 ConstPointerToArray< LMatrix3d > const * 0 0 1506 0 0 0 0 0 0 0 0 0 0

1506 38 ConstPointerToArray< LMatrix3d > const 0 8832 38 ConstPointerToArray< LMatrix3d > const 38 ConstPointerToArray< LMatrix3d > const 0 0 1421 0 0 0 0 0 0 0 0 0 0

1507 34 ConstPointerToArray< LMatrix3d > * 0 8576 34 ConstPointerToArray< LMatrix3d > * 34 ConstPointerToArray< LMatrix3d > * 0 0 1421 0 0 0 0 0 0 0 0 0 0

1508 35 PointerToArray< LMatrix3d > const * 0 8576 35 PointerToArray< LMatrix3d > const * 35 PointerToArray< LMatrix3d > const * 0 0 1509 0 0 0 0 0 0 0 0 0 0

1509 33 PointerToArray< LMatrix3d > const 0 8832 33 PointerToArray< LMatrix3d > const 33 PointerToArray< LMatrix3d > const 0 0 1461 0 0 0 0 0 0 0 0 0 0

1510 10 PyObject * 0 8576 10 PyObject * 10 PyObject * 0 0 1511 0 0 0 0 0 0 0 0 0 0

1511 8 PyObject 0 2048 8 PyObject 8 PyObject 0 0 0 0 0 0 0 0 0 0 0 0 0

1512 12 unsigned int 0 8198 12 unsigned int 12 unsigned int 0 1 0 0 0 0 0 0 0 0 0 0 0

1513 17 LMatrix3d const * 0 8576 17 LMatrix3d const * 17 LMatrix3d const * 0 0 1514 0 0 0 0 0 0 0 0 0 0

1514 15 LMatrix3d const 0 8832 15 LMatrix3d const 15 LMatrix3d const 0 0 1515 0 0 0 0 0 0 0 0 0 0

1515 9 LMatrix3d 0 2048 9 LMatrix3d 9 LMatrix3d 0 0 0 0 0 0 0 4 1796 1797 1798 1799 0 0 0 0 462
////////////////////////////////////////////////////////////////////
//       Class : LMatrix3
// Description : This is a 3-by-3 transform matrix.  It typically will
//               represent either a rotation-and-scale (no
//               translation) matrix in 3-d, or a full affine matrix
//               (rotation, scale, translation) in 2-d, e.g. for a
//               texture matrix.
////////////////////////////////////////////////////////////////////

1516 13 atomic string 0 2 13 atomic string 13 atomic string 0 7 0 0 0 0 0 0 0 0 0 0 0

1517 3 int 0 8194 3 int 3 int 0 1 0 0 0 0 0 0 0 0 0 0 0

1518 11 Py_buffer * 0 8576 11 Py_buffer * 11 Py_buffer * 0 0 1519 0 0 0 0 0 0 0 0 0 0

1519 9 Py_buffer 0 1024 9 Py_buffer 9 Py_buffer 0 0 0 0 0 0 0 0 0 0 0 0 0

1520 4 void 0 8194 4 void 4 void 0 6 0 0 0 0 0 0 0 0 0 0 0

1521 54 PointerToBase< ReferenceCountedVector< LMatrix3d > > * 0 8576 54 PointerToBase< ReferenceCountedVector< LMatrix3d > > * 54 PointerToBase< ReferenceCountedVector< LMatrix3d > > * 0 0 1423 0 0 0 0 0 0 0 0 0 0

1522 60 PointerToBase< ReferenceCountedVector< LMatrix3d > > const * 0 8576 60 PointerToBase< ReferenceCountedVector< LMatrix3d > > const * 60 PointerToBase< ReferenceCountedVector< LMatrix3d > > const * 0 0 1523 0 0 0 0 0 0 0 0 0 0

1523 58 PointerToBase< ReferenceCountedVector< LMatrix3d > > const 0 8832 58 PointerToBase< ReferenceCountedVector< LMatrix3d > > const 58 PointerToBase< ReferenceCountedVector< LMatrix3d > > const 0 0 1423 0 0 0 0 0 0 0 0 0 0

1524 9 ostream * 0 8576 9 ostream * 9 ostream * 0 0 1525 0 0 0 0 0 0 0 0 0 0

1525 7 ostream 0 2048 7 ostream 7 ostream 0 0 0 0 0 0 0 0 0 0 0 0 0

1526 40 ConstPointerToArray< LMatrix3f > const * 0 8576 40 ConstPointerToArray< LMatrix3f > const * 40 ConstPointerToArray< LMatrix3f > const * 0 0 1527 0 0 0 0 0 0 0 0 0 0

1527 38 ConstPointerToArray< LMatrix3f > const 0 8832 38 ConstPointerToArray< LMatrix3f > const 38 ConstPointerToArray< LMatrix3f > const 0 0 1425 0 0 0 0 0 0 0 0 0 0

1528 34 ConstPointerToArray< LMatrix3f > * 0 8576 34 ConstPointerToArray< LMatrix3f > * 34 ConstPointerToArray< LMatrix3f > * 0 0 1425 0 0 0 0 0 0 0 0 0 0

1529 35 PointerToArray< LMatrix3f > const * 0 8576 35 PointerToArray< LMatrix3f > const * 35 PointerToArray< LMatrix3f > const * 0 0 1530 0 0 0 0 0 0 0 0 0 0

1530 33 PointerToArray< LMatrix3f > const 0 8832 33 PointerToArray< LMatrix3f > const 33 PointerToArray< LMatrix3f > const 0 0 1462 0 0 0 0 0 0 0 0 0 0

1531 17 LMatrix3f const * 0 8576 17 LMatrix3f const * 17 LMatrix3f const * 0 0 1532 0 0 0 0 0 0 0 0 0 0

1532 15 LMatrix3f const 0 8832 15 LMatrix3f const 15 LMatrix3f const 0 0 1533 0 0 0 0 0 0 0 0 0 0

1533 9 LMatrix3f 0 2048 9 LMatrix3f 9 LMatrix3f 0 0 0 0 0 0 0 4 1800 1801 1802 1803 0 0 0 0 462
////////////////////////////////////////////////////////////////////
//       Class : LMatrix3
// Description : This is a 3-by-3 transform matrix.  It typically will
//               represent either a rotation-and-scale (no
//               translation) matrix in 3-d, or a full affine matrix
//               (rotation, scale, translation) in 2-d, e.g. for a
//               texture matrix.
////////////////////////////////////////////////////////////////////

1534 54 PointerToBase< ReferenceCountedVector< LMatrix3f > > * 0 8576 54 PointerToBase< ReferenceCountedVector< LMatrix3f > > * 54 PointerToBase< ReferenceCountedVector< LMatrix3f > > * 0 0 1427 0 0 0 0 0 0 0 0 0 0

1535 60 PointerToBase< ReferenceCountedVector< LMatrix3f > > const * 0 8576 60 PointerToBase< ReferenceCountedVector< LMatrix3f > > const * 60 PointerToBase< ReferenceCountedVector< LMatrix3f > > const * 0 0 1536 0 0 0 0 0 0 0 0 0 0

1536 58 PointerToBase< ReferenceCountedVector< LMatrix3f > > const 0 8832 58 PointerToBase< ReferenceCountedVector< LMatrix3f > > const 58 PointerToBase< ReferenceCountedVector< LMatrix3f > > const 0 0 1427 0 0 0 0 0 0 0 0 0 0

1537 41 ConstPointerToArray< LVecBase2d > const * 0 8576 41 ConstPointerToArray< LVecBase2d > const * 41 ConstPointerToArray< LVecBase2d > const * 0 0 1538 0 0 0 0 0 0 0 0 0 0

1538 39 ConstPointerToArray< LVecBase2d > const 0 8832 39 ConstPointerToArray< LVecBase2d > const 39 ConstPointerToArray< LVecBase2d > const 0 0 1428 0 0 0 0 0 0 0 0 0 0

1539 35 ConstPointerToArray< LVecBase2d > * 0 8576 35 ConstPointerToArray< LVecBase2d > * 35 ConstPointerToArray< LVecBase2d > * 0 0 1428 0 0 0 0 0 0 0 0 0 0

1540 36 PointerToArray< LVecBase2d > const * 0 8576 36 PointerToArray< LVecBase2d > const * 36 PointerToArray< LVecBase2d > const * 0 0 1541 0 0 0 0 0 0 0 0 0 0

1541 34 PointerToArray< LVecBase2d > const 0 8832 34 PointerToArray< LVecBase2d > const 34 PointerToArray< LVecBase2d > const 0 0 1463 0 0 0 0 0 0 0 0 0 0

1542 18 LVecBase2d const * 0 8576 18 LVecBase2d const * 18 LVecBase2d const * 0 0 1543 0 0 0 0 0 0 0 0 0 0

1543 16 LVecBase2d const 0 8832 16 LVecBase2d const 16 LVecBase2d const 0 0 1544 0 0 0 0 0 0 0 0 0 0

1544 10 LVecBase2d 0 2048 10 LVecBase2d 10 LVecBase2d 0 0 0 0 0 0 0 0 0 0 0 0 752
// Filename: lvecBase2_src.h
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LVecBase2
// Description : This is the base class for all two-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

1545 55 PointerToBase< ReferenceCountedVector< LVecBase2d > > * 0 8576 55 PointerToBase< ReferenceCountedVector< LVecBase2d > > * 55 PointerToBase< ReferenceCountedVector< LVecBase2d > > * 0 0 1430 0 0 0 0 0 0 0 0 0 0

1546 61 PointerToBase< ReferenceCountedVector< LVecBase2d > > const * 0 8576 61 PointerToBase< ReferenceCountedVector< LVecBase2d > > const * 61 PointerToBase< ReferenceCountedVector< LVecBase2d > > const * 0 0 1547 0 0 0 0 0 0 0 0 0 0

1547 59 PointerToBase< ReferenceCountedVector< LVecBase2d > > const 0 8832 59 PointerToBase< ReferenceCountedVector< LVecBase2d > > const 59 PointerToBase< ReferenceCountedVector< LVecBase2d > > const 0 0 1430 0 0 0 0 0 0 0 0 0 0

1548 41 ConstPointerToArray< LVecBase2f > const * 0 8576 41 ConstPointerToArray< LVecBase2f > const * 41 ConstPointerToArray< LVecBase2f > const * 0 0 1549 0 0 0 0 0 0 0 0 0 0

1549 39 ConstPointerToArray< LVecBase2f > const 0 8832 39 ConstPointerToArray< LVecBase2f > const 39 ConstPointerToArray< LVecBase2f > const 0 0 1431 0 0 0 0 0 0 0 0 0 0

1550 35 ConstPointerToArray< LVecBase2f > * 0 8576 35 ConstPointerToArray< LVecBase2f > * 35 ConstPointerToArray< LVecBase2f > * 0 0 1431 0 0 0 0 0 0 0 0 0 0

1551 36 PointerToArray< LVecBase2f > const * 0 8576 36 PointerToArray< LVecBase2f > const * 36 PointerToArray< LVecBase2f > const * 0 0 1552 0 0 0 0 0 0 0 0 0 0

1552 34 PointerToArray< LVecBase2f > const 0 8832 34 PointerToArray< LVecBase2f > const 34 PointerToArray< LVecBase2f > const 0 0 1464 0 0 0 0 0 0 0 0 0 0

1553 18 LVecBase2f const * 0 8576 18 LVecBase2f const * 18 LVecBase2f const * 0 0 1554 0 0 0 0 0 0 0 0 0 0

1554 16 LVecBase2f const 0 8832 16 LVecBase2f const 16 LVecBase2f const 0 0 1555 0 0 0 0 0 0 0 0 0 0

1555 10 LVecBase2f 0 2048 10 LVecBase2f 10 LVecBase2f 0 0 0 0 0 0 0 0 0 0 0 0 752
// Filename: lvecBase2_src.h
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LVecBase2
// Description : This is the base class for all two-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

1556 55 PointerToBase< ReferenceCountedVector< LVecBase2f > > * 0 8576 55 PointerToBase< ReferenceCountedVector< LVecBase2f > > * 55 PointerToBase< ReferenceCountedVector< LVecBase2f > > * 0 0 1433 0 0 0 0 0 0 0 0 0 0

1557 61 PointerToBase< ReferenceCountedVector< LVecBase2f > > const * 0 8576 61 PointerToBase< ReferenceCountedVector< LVecBase2f > > const * 61 PointerToBase< ReferenceCountedVector< LVecBase2f > > const * 0 0 1558 0 0 0 0 0 0 0 0 0 0

1558 59 PointerToBase< ReferenceCountedVector< LVecBase2f > > const 0 8832 59 PointerToBase< ReferenceCountedVector< LVecBase2f > > const 59 PointerToBase< ReferenceCountedVector< LVecBase2f > > const 0 0 1433 0 0 0 0 0 0 0 0 0 0

1559 41 ConstPointerToArray< LVecBase2i > const * 0 8576 41 ConstPointerToArray< LVecBase2i > const * 41 ConstPointerToArray< LVecBase2i > const * 0 0 1560 0 0 0 0 0 0 0 0 0 0

1560 39 ConstPointerToArray< LVecBase2i > const 0 8832 39 ConstPointerToArray< LVecBase2i > const 39 ConstPointerToArray< LVecBase2i > const 0 0 1434 0 0 0 0 0 0 0 0 0 0

1561 35 ConstPointerToArray< LVecBase2i > * 0 8576 35 ConstPointerToArray< LVecBase2i > * 35 ConstPointerToArray< LVecBase2i > * 0 0 1434 0 0 0 0 0 0 0 0 0 0

1562 36 PointerToArray< LVecBase2i > const * 0 8576 36 PointerToArray< LVecBase2i > const * 36 PointerToArray< LVecBase2i > const * 0 0 1563 0 0 0 0 0 0 0 0 0 0

1563 34 PointerToArray< LVecBase2i > const 0 8832 34 PointerToArray< LVecBase2i > const 34 PointerToArray< LVecBase2i > const 0 0 1465 0 0 0 0 0 0 0 0 0 0

1564 18 LVecBase2i const * 0 8576 18 LVecBase2i const * 18 LVecBase2i const * 0 0 1565 0 0 0 0 0 0 0 0 0 0

1565 16 LVecBase2i const 0 8832 16 LVecBase2i const 16 LVecBase2i const 0 0 1566 0 0 0 0 0 0 0 0 0 0

1566 10 LVecBase2i 0 2048 10 LVecBase2i 10 LVecBase2i 0 0 0 0 0 0 0 0 0 0 0 0 752
// Filename: lvecBase2_src.h
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LVecBase2
// Description : This is the base class for all two-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

1567 55 PointerToBase< ReferenceCountedVector< LVecBase2i > > * 0 8576 55 PointerToBase< ReferenceCountedVector< LVecBase2i > > * 55 PointerToBase< ReferenceCountedVector< LVecBase2i > > * 0 0 1436 0 0 0 0 0 0 0 0 0 0

1568 61 PointerToBase< ReferenceCountedVector< LVecBase2i > > const * 0 8576 61 PointerToBase< ReferenceCountedVector< LVecBase2i > > const * 61 PointerToBase< ReferenceCountedVector< LVecBase2i > > const * 0 0 1569 0 0 0 0 0 0 0 0 0 0

1569 59 PointerToBase< ReferenceCountedVector< LVecBase2i > > const 0 8832 59 PointerToBase< ReferenceCountedVector< LVecBase2i > > const 59 PointerToBase< ReferenceCountedVector< LVecBase2i > > const 0 0 1436 0 0 0 0 0 0 0 0 0 0

1570 41 ConstPointerToArray< LVecBase3d > const * 0 8576 41 ConstPointerToArray< LVecBase3d > const * 41 ConstPointerToArray< LVecBase3d > const * 0 0 1571 0 0 0 0 0 0 0 0 0 0

1571 39 ConstPointerToArray< LVecBase3d > const 0 8832 39 ConstPointerToArray< LVecBase3d > const 39 ConstPointerToArray< LVecBase3d > const 0 0 1437 0 0 0 0 0 0 0 0 0 0

1572 35 ConstPointerToArray< LVecBase3d > * 0 8576 35 ConstPointerToArray< LVecBase3d > * 35 ConstPointerToArray< LVecBase3d > * 0 0 1437 0 0 0 0 0 0 0 0 0 0

1573 36 PointerToArray< LVecBase3d > const * 0 8576 36 PointerToArray< LVecBase3d > const * 36 PointerToArray< LVecBase3d > const * 0 0 1574 0 0 0 0 0 0 0 0 0 0

1574 34 PointerToArray< LVecBase3d > const 0 8832 34 PointerToArray< LVecBase3d > const 34 PointerToArray< LVecBase3d > const 0 0 1466 0 0 0 0 0 0 0 0 0 0

1575 18 LVecBase3d const * 0 8576 18 LVecBase3d const * 18 LVecBase3d const * 0 0 1576 0 0 0 0 0 0 0 0 0 0

1576 16 LVecBase3d const 0 8832 16 LVecBase3d const 16 LVecBase3d const 0 0 1577 0 0 0 0 0 0 0 0 0 0

1577 10 LVecBase3d 0 2048 10 LVecBase3d 10 LVecBase3d 0 0 0 0 0 0 0 0 0 0 0 0 754
// Filename: lvecBase3_src.h
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LVecBase3
// Description : This is the base class for all three-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

1578 55 PointerToBase< ReferenceCountedVector< LVecBase3d > > * 0 8576 55 PointerToBase< ReferenceCountedVector< LVecBase3d > > * 55 PointerToBase< ReferenceCountedVector< LVecBase3d > > * 0 0 1439 0 0 0 0 0 0 0 0 0 0

1579 61 PointerToBase< ReferenceCountedVector< LVecBase3d > > const * 0 8576 61 PointerToBase< ReferenceCountedVector< LVecBase3d > > const * 61 PointerToBase< ReferenceCountedVector< LVecBase3d > > const * 0 0 1580 0 0 0 0 0 0 0 0 0 0

1580 59 PointerToBase< ReferenceCountedVector< LVecBase3d > > const 0 8832 59 PointerToBase< ReferenceCountedVector< LVecBase3d > > const 59 PointerToBase< ReferenceCountedVector< LVecBase3d > > const 0 0 1439 0 0 0 0 0 0 0 0 0 0

1581 41 ConstPointerToArray< LVecBase3f > const * 0 8576 41 ConstPointerToArray< LVecBase3f > const * 41 ConstPointerToArray< LVecBase3f > const * 0 0 1582 0 0 0 0 0 0 0 0 0 0

1582 39 ConstPointerToArray< LVecBase3f > const 0 8832 39 ConstPointerToArray< LVecBase3f > const 39 ConstPointerToArray< LVecBase3f > const 0 0 1440 0 0 0 0 0 0 0 0 0 0

1583 35 ConstPointerToArray< LVecBase3f > * 0 8576 35 ConstPointerToArray< LVecBase3f > * 35 ConstPointerToArray< LVecBase3f > * 0 0 1440 0 0 0 0 0 0 0 0 0 0

1584 36 PointerToArray< LVecBase3f > const * 0 8576 36 PointerToArray< LVecBase3f > const * 36 PointerToArray< LVecBase3f > const * 0 0 1585 0 0 0 0 0 0 0 0 0 0

1585 34 PointerToArray< LVecBase3f > const 0 8832 34 PointerToArray< LVecBase3f > const 34 PointerToArray< LVecBase3f > const 0 0 1467 0 0 0 0 0 0 0 0 0 0

1586 18 LVecBase3f const * 0 8576 18 LVecBase3f const * 18 LVecBase3f const * 0 0 1587 0 0 0 0 0 0 0 0 0 0

1587 16 LVecBase3f const 0 8832 16 LVecBase3f const 16 LVecBase3f const 0 0 1588 0 0 0 0 0 0 0 0 0 0

1588 10 LVecBase3f 0 2048 10 LVecBase3f 10 LVecBase3f 0 0 0 0 0 0 0 0 0 0 0 0 754
// Filename: lvecBase3_src.h
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LVecBase3
// Description : This is the base class for all three-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

1589 55 PointerToBase< ReferenceCountedVector< LVecBase3f > > * 0 8576 55 PointerToBase< ReferenceCountedVector< LVecBase3f > > * 55 PointerToBase< ReferenceCountedVector< LVecBase3f > > * 0 0 1442 0 0 0 0 0 0 0 0 0 0

1590 61 PointerToBase< ReferenceCountedVector< LVecBase3f > > const * 0 8576 61 PointerToBase< ReferenceCountedVector< LVecBase3f > > const * 61 PointerToBase< ReferenceCountedVector< LVecBase3f > > const * 0 0 1591 0 0 0 0 0 0 0 0 0 0

1591 59 PointerToBase< ReferenceCountedVector< LVecBase3f > > const 0 8832 59 PointerToBase< ReferenceCountedVector< LVecBase3f > > const 59 PointerToBase< ReferenceCountedVector< LVecBase3f > > const 0 0 1442 0 0 0 0 0 0 0 0 0 0

1592 41 ConstPointerToArray< LVecBase3i > const * 0 8576 41 ConstPointerToArray< LVecBase3i > const * 41 ConstPointerToArray< LVecBase3i > const * 0 0 1593 0 0 0 0 0 0 0 0 0 0

1593 39 ConstPointerToArray< LVecBase3i > const 0 8832 39 ConstPointerToArray< LVecBase3i > const 39 ConstPointerToArray< LVecBase3i > const 0 0 1443 0 0 0 0 0 0 0 0 0 0

1594 35 ConstPointerToArray< LVecBase3i > * 0 8576 35 ConstPointerToArray< LVecBase3i > * 35 ConstPointerToArray< LVecBase3i > * 0 0 1443 0 0 0 0 0 0 0 0 0 0

1595 36 PointerToArray< LVecBase3i > const * 0 8576 36 PointerToArray< LVecBase3i > const * 36 PointerToArray< LVecBase3i > const * 0 0 1596 0 0 0 0 0 0 0 0 0 0

1596 34 PointerToArray< LVecBase3i > const 0 8832 34 PointerToArray< LVecBase3i > const 34 PointerToArray< LVecBase3i > const 0 0 1468 0 0 0 0 0 0 0 0 0 0

1597 18 LVecBase3i const * 0 8576 18 LVecBase3i const * 18 LVecBase3i const * 0 0 1598 0 0 0 0 0 0 0 0 0 0

1598 16 LVecBase3i const 0 8832 16 LVecBase3i const 16 LVecBase3i const 0 0 1599 0 0 0 0 0 0 0 0 0 0

1599 10 LVecBase3i 0 2048 10 LVecBase3i 10 LVecBase3i 0 0 0 0 0 0 0 0 0 0 0 0 754
// Filename: lvecBase3_src.h
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LVecBase3
// Description : This is the base class for all three-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

1600 55 PointerToBase< ReferenceCountedVector< LVecBase3i > > * 0 8576 55 PointerToBase< ReferenceCountedVector< LVecBase3i > > * 55 PointerToBase< ReferenceCountedVector< LVecBase3i > > * 0 0 1445 0 0 0 0 0 0 0 0 0 0

1601 61 PointerToBase< ReferenceCountedVector< LVecBase3i > > const * 0 8576 61 PointerToBase< ReferenceCountedVector< LVecBase3i > > const * 61 PointerToBase< ReferenceCountedVector< LVecBase3i > > const * 0 0 1602 0 0 0 0 0 0 0 0 0 0

1602 59 PointerToBase< ReferenceCountedVector< LVecBase3i > > const 0 8832 59 PointerToBase< ReferenceCountedVector< LVecBase3i > > const 59 PointerToBase< ReferenceCountedVector< LVecBase3i > > const 0 0 1445 0 0 0 0 0 0 0 0 0 0

1603 49 ConstPointerToArray< UnalignedLMatrix4d > const * 0 8576 49 ConstPointerToArray< UnalignedLMatrix4d > const * 49 ConstPointerToArray< UnalignedLMatrix4d > const * 0 0 1604 0 0 0 0 0 0 0 0 0 0

1604 47 ConstPointerToArray< UnalignedLMatrix4d > const 0 8832 47 ConstPointerToArray< UnalignedLMatrix4d > const 47 ConstPointerToArray< UnalignedLMatrix4d > const 0 0 1446 0 0 0 0 0 0 0 0 0 0

1605 43 ConstPointerToArray< UnalignedLMatrix4d > * 0 8576 43 ConstPointerToArray< UnalignedLMatrix4d > * 43 ConstPointerToArray< UnalignedLMatrix4d > * 0 0 1446 0 0 0 0 0 0 0 0 0 0

1606 44 PointerToArray< UnalignedLMatrix4d > const * 0 8576 44 PointerToArray< UnalignedLMatrix4d > const * 44 PointerToArray< UnalignedLMatrix4d > const * 0 0 1607 0 0 0 0 0 0 0 0 0 0

1607 42 PointerToArray< UnalignedLMatrix4d > const 0 8832 42 PointerToArray< UnalignedLMatrix4d > const 42 PointerToArray< UnalignedLMatrix4d > const 0 0 1469 0 0 0 0 0 0 0 0 0 0

1608 26 UnalignedLMatrix4d const * 0 8576 26 UnalignedLMatrix4d const * 26 UnalignedLMatrix4d const * 0 0 1609 0 0 0 0 0 0 0 0 0 0

1609 24 UnalignedLMatrix4d const 0 8832 24 UnalignedLMatrix4d const 24 UnalignedLMatrix4d const 0 0 1610 0 0 0 0 0 0 0 0 0 0

1610 18 UnalignedLMatrix4d 0 2048 18 UnalignedLMatrix4d 18 UnalignedLMatrix4d 0 0 0 0 0 0 0 0 0 0 0 0 671
////////////////////////////////////////////////////////////////////
//       Class : UnalignedLMatrix4
// Description : This is an "unaligned" LMatrix4.  It has no
//               functionality other than to store numbers, and it
//               will pack them in as tightly as possible, avoiding
//               any SSE2 alignment requirements shared by the primary
//               LMatrix4 class.
//
//               Use it only when you need to pack numbers tightly
//               without respect to alignment, and then copy it to a
//               proper LMatrix4 to get actual use from it.
////////////////////////////////////////////////////////////////////

1611 63 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4d > > * 0 8576 63 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4d > > * 63 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4d > > * 0 0 1448 0 0 0 0 0 0 0 0 0 0

1612 69 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4d > > const * 0 8576 69 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4d > > const * 69 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4d > > const * 0 0 1613 0 0 0 0 0 0 0 0 0 0

1613 67 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4d > > const 0 8832 67 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4d > > const 67 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4d > > const 0 0 1448 0 0 0 0 0 0 0 0 0 0

1614 49 ConstPointerToArray< UnalignedLMatrix4f > const * 0 8576 49 ConstPointerToArray< UnalignedLMatrix4f > const * 49 ConstPointerToArray< UnalignedLMatrix4f > const * 0 0 1615 0 0 0 0 0 0 0 0 0 0

1615 47 ConstPointerToArray< UnalignedLMatrix4f > const 0 8832 47 ConstPointerToArray< UnalignedLMatrix4f > const 47 ConstPointerToArray< UnalignedLMatrix4f > const 0 0 1449 0 0 0 0 0 0 0 0 0 0

1616 43 ConstPointerToArray< UnalignedLMatrix4f > * 0 8576 43 ConstPointerToArray< UnalignedLMatrix4f > * 43 ConstPointerToArray< UnalignedLMatrix4f > * 0 0 1449 0 0 0 0 0 0 0 0 0 0

1617 44 PointerToArray< UnalignedLMatrix4f > const * 0 8576 44 PointerToArray< UnalignedLMatrix4f > const * 44 PointerToArray< UnalignedLMatrix4f > const * 0 0 1618 0 0 0 0 0 0 0 0 0 0

1618 42 PointerToArray< UnalignedLMatrix4f > const 0 8832 42 PointerToArray< UnalignedLMatrix4f > const 42 PointerToArray< UnalignedLMatrix4f > const 0 0 1470 0 0 0 0 0 0 0 0 0 0

1619 26 UnalignedLMatrix4f const * 0 8576 26 UnalignedLMatrix4f const * 26 UnalignedLMatrix4f const * 0 0 1620 0 0 0 0 0 0 0 0 0 0

1620 24 UnalignedLMatrix4f const 0 8832 24 UnalignedLMatrix4f const 24 UnalignedLMatrix4f const 0 0 1621 0 0 0 0 0 0 0 0 0 0

1621 18 UnalignedLMatrix4f 0 2048 18 UnalignedLMatrix4f 18 UnalignedLMatrix4f 0 0 0 0 0 0 0 0 0 0 0 0 671
////////////////////////////////////////////////////////////////////
//       Class : UnalignedLMatrix4
// Description : This is an "unaligned" LMatrix4.  It has no
//               functionality other than to store numbers, and it
//               will pack them in as tightly as possible, avoiding
//               any SSE2 alignment requirements shared by the primary
//               LMatrix4 class.
//
//               Use it only when you need to pack numbers tightly
//               without respect to alignment, and then copy it to a
//               proper LMatrix4 to get actual use from it.
////////////////////////////////////////////////////////////////////

1622 63 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4f > > * 0 8576 63 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4f > > * 63 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4f > > * 0 0 1451 0 0 0 0 0 0 0 0 0 0

1623 69 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4f > > const * 0 8576 69 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4f > > const * 69 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4f > > const * 0 0 1624 0 0 0 0 0 0 0 0 0 0

1624 67 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4f > > const 0 8832 67 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4f > > const 67 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4f > > const 0 0 1451 0 0 0 0 0 0 0 0 0 0

1625 50 ConstPointerToArray< UnalignedLVecBase4d > const * 0 8576 50 ConstPointerToArray< UnalignedLVecBase4d > const * 50 ConstPointerToArray< UnalignedLVecBase4d > const * 0 0 1626 0 0 0 0 0 0 0 0 0 0

1626 48 ConstPointerToArray< UnalignedLVecBase4d > const 0 8832 48 ConstPointerToArray< UnalignedLVecBase4d > const 48 ConstPointerToArray< UnalignedLVecBase4d > const 0 0 1452 0 0 0 0 0 0 0 0 0 0

1627 44 ConstPointerToArray< UnalignedLVecBase4d > * 0 8576 44 ConstPointerToArray< UnalignedLVecBase4d > * 44 ConstPointerToArray< UnalignedLVecBase4d > * 0 0 1452 0 0 0 0 0 0 0 0 0 0

1628 45 PointerToArray< UnalignedLVecBase4d > const * 0 8576 45 PointerToArray< UnalignedLVecBase4d > const * 45 PointerToArray< UnalignedLVecBase4d > const * 0 0 1629 0 0 0 0 0 0 0 0 0 0

1629 43 PointerToArray< UnalignedLVecBase4d > const 0 8832 43 PointerToArray< UnalignedLVecBase4d > const 43 PointerToArray< UnalignedLVecBase4d > const 0 0 1471 0 0 0 0 0 0 0 0 0 0

1630 27 UnalignedLVecBase4d const * 0 8576 27 UnalignedLVecBase4d const * 27 UnalignedLVecBase4d const * 0 0 1631 0 0 0 0 0 0 0 0 0 0

1631 25 UnalignedLVecBase4d const 0 8832 25 UnalignedLVecBase4d const 25 UnalignedLVecBase4d const 0 0 1632 0 0 0 0 0 0 0 0 0 0

1632 19 UnalignedLVecBase4d 0 2048 19 UnalignedLVecBase4d 19 UnalignedLVecBase4d 0 0 0 0 0 0 0 0 0 0 0 0 675
////////////////////////////////////////////////////////////////////
//       Class : UnalignedLVecBase4
// Description : This is an "unaligned" LVecBase4.  It has no
//               functionality other than to store numbers, and it
//               will pack them in as tightly as possible, avoiding
//               any SSE2 alignment requirements shared by the primary
//               LVecBase4 class.
//
//               Use it only when you need to pack numbers tightly
//               without respect to alignment, and then copy it to a
//               proper LVecBase4 to get actual use from it.
////////////////////////////////////////////////////////////////////

1633 64 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4d > > * 0 8576 64 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4d > > * 64 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4d > > * 0 0 1454 0 0 0 0 0 0 0 0 0 0

1634 70 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4d > > const * 0 8576 70 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4d > > const * 70 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4d > > const * 0 0 1635 0 0 0 0 0 0 0 0 0 0

1635 68 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4d > > const 0 8832 68 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4d > > const 68 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4d > > const 0 0 1454 0 0 0 0 0 0 0 0 0 0

1636 50 ConstPointerToArray< UnalignedLVecBase4f > const * 0 8576 50 ConstPointerToArray< UnalignedLVecBase4f > const * 50 ConstPointerToArray< UnalignedLVecBase4f > const * 0 0 1637 0 0 0 0 0 0 0 0 0 0

1637 48 ConstPointerToArray< UnalignedLVecBase4f > const 0 8832 48 ConstPointerToArray< UnalignedLVecBase4f > const 48 ConstPointerToArray< UnalignedLVecBase4f > const 0 0 1455 0 0 0 0 0 0 0 0 0 0

1638 44 ConstPointerToArray< UnalignedLVecBase4f > * 0 8576 44 ConstPointerToArray< UnalignedLVecBase4f > * 44 ConstPointerToArray< UnalignedLVecBase4f > * 0 0 1455 0 0 0 0 0 0 0 0 0 0

1639 45 PointerToArray< UnalignedLVecBase4f > const * 0 8576 45 PointerToArray< UnalignedLVecBase4f > const * 45 PointerToArray< UnalignedLVecBase4f > const * 0 0 1640 0 0 0 0 0 0 0 0 0 0

1640 43 PointerToArray< UnalignedLVecBase4f > const 0 8832 43 PointerToArray< UnalignedLVecBase4f > const 43 PointerToArray< UnalignedLVecBase4f > const 0 0 1472 0 0 0 0 0 0 0 0 0 0

1641 27 UnalignedLVecBase4f const * 0 8576 27 UnalignedLVecBase4f const * 27 UnalignedLVecBase4f const * 0 0 1642 0 0 0 0 0 0 0 0 0 0

1642 25 UnalignedLVecBase4f const 0 8832 25 UnalignedLVecBase4f const 25 UnalignedLVecBase4f const 0 0 1643 0 0 0 0 0 0 0 0 0 0

1643 19 UnalignedLVecBase4f 0 2048 19 UnalignedLVecBase4f 19 UnalignedLVecBase4f 0 0 0 0 0 0 0 0 0 0 0 0 675
////////////////////////////////////////////////////////////////////
//       Class : UnalignedLVecBase4
// Description : This is an "unaligned" LVecBase4.  It has no
//               functionality other than to store numbers, and it
//               will pack them in as tightly as possible, avoiding
//               any SSE2 alignment requirements shared by the primary
//               LVecBase4 class.
//
//               Use it only when you need to pack numbers tightly
//               without respect to alignment, and then copy it to a
//               proper LVecBase4 to get actual use from it.
////////////////////////////////////////////////////////////////////

1644 64 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4f > > * 0 8576 64 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4f > > * 64 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4f > > * 0 0 1457 0 0 0 0 0 0 0 0 0 0

1645 70 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4f > > const * 0 8576 70 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4f > > const * 70 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4f > > const * 0 0 1646 0 0 0 0 0 0 0 0 0 0

1646 68 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4f > > const 0 8832 68 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4f > > const 68 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4f > > const 0 0 1457 0 0 0 0 0 0 0 0 0 0

1647 50 ConstPointerToArray< UnalignedLVecBase4i > const * 0 8576 50 ConstPointerToArray< UnalignedLVecBase4i > const * 50 ConstPointerToArray< UnalignedLVecBase4i > const * 0 0 1648 0 0 0 0 0 0 0 0 0 0

1648 48 ConstPointerToArray< UnalignedLVecBase4i > const 0 8832 48 ConstPointerToArray< UnalignedLVecBase4i > const 48 ConstPointerToArray< UnalignedLVecBase4i > const 0 0 1458 0 0 0 0 0 0 0 0 0 0

1649 44 ConstPointerToArray< UnalignedLVecBase4i > * 0 8576 44 ConstPointerToArray< UnalignedLVecBase4i > * 44 ConstPointerToArray< UnalignedLVecBase4i > * 0 0 1458 0 0 0 0 0 0 0 0 0 0

1650 45 PointerToArray< UnalignedLVecBase4i > const * 0 8576 45 PointerToArray< UnalignedLVecBase4i > const * 45 PointerToArray< UnalignedLVecBase4i > const * 0 0 1651 0 0 0 0 0 0 0 0 0 0

1651 43 PointerToArray< UnalignedLVecBase4i > const 0 8832 43 PointerToArray< UnalignedLVecBase4i > const 43 PointerToArray< UnalignedLVecBase4i > const 0 0 1473 0 0 0 0 0 0 0 0 0 0

1652 27 UnalignedLVecBase4i const * 0 8576 27 UnalignedLVecBase4i const * 27 UnalignedLVecBase4i const * 0 0 1653 0 0 0 0 0 0 0 0 0 0

1653 25 UnalignedLVecBase4i const 0 8832 25 UnalignedLVecBase4i const 25 UnalignedLVecBase4i const 0 0 1654 0 0 0 0 0 0 0 0 0 0

1654 19 UnalignedLVecBase4i 0 2048 19 UnalignedLVecBase4i 19 UnalignedLVecBase4i 0 0 0 0 0 0 0 0 0 0 0 0 675
////////////////////////////////////////////////////////////////////
//       Class : UnalignedLVecBase4
// Description : This is an "unaligned" LVecBase4.  It has no
//               functionality other than to store numbers, and it
//               will pack them in as tightly as possible, avoiding
//               any SSE2 alignment requirements shared by the primary
//               LVecBase4 class.
//
//               Use it only when you need to pack numbers tightly
//               without respect to alignment, and then copy it to a
//               proper LVecBase4 to get actual use from it.
////////////////////////////////////////////////////////////////////

1655 64 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4i > > * 0 8576 64 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4i > > * 64 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4i > > * 0 0 1460 0 0 0 0 0 0 0 0 0 0

1656 70 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4i > > const * 0 8576 70 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4i > > const * 70 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4i > > const * 0 0 1657 0 0 0 0 0 0 0 0 0 0

1657 68 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4i > > const 0 8832 68 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4i > > const 68 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4i > > const 0 0 1460 0 0 0 0 0 0 0 0 0 0

1658 29 PointerToArray< LMatrix3d > * 0 8576 29 PointerToArray< LMatrix3d > * 29 PointerToArray< LMatrix3d > * 0 0 1461 0 0 0 0 0 0 0 0 0 0

1659 12 TypeHandle * 0 8576 12 TypeHandle * 12 TypeHandle * 0 0 1660 0 0 0 0 0 0 0 0 0 0

1660 10 TypeHandle 0 2048 10 TypeHandle 10 TypeHandle 0 0 0 0 0 0 0 0 0 0 0 0 1098
////////////////////////////////////////////////////////////////////
//       Class : TypeHandle
// Description : TypeHandle is the identifier used to differentiate
//               C++ class types.  Any C++ classes that inherit from
//               some base class, and must be differentiated at run
//               time, should store a static TypeHandle object that
//               can be queried through a static member function
//               named get_class_type().  Most of the time, it is also
//               desirable to inherit from TypedObject, which provides
//               some virtual functions to return the TypeHandle for a
//               particular instance.
//
//               At its essence, a TypeHandle is simply a unique
//               identifier that is assigned by the TypeRegistry.  The
//               TypeRegistry stores a tree of TypeHandles, so that
//               ancestry of a particular type may be queried, and the
//               type name may be retrieved for run-time display.
////////////////////////////////////////////////////////////////////

1661 29 PointerToArray< LMatrix3f > * 0 8576 29 PointerToArray< LMatrix3f > * 29 PointerToArray< LMatrix3f > * 0 0 1462 0 0 0 0 0 0 0 0 0 0

1662 30 PointerToArray< LVecBase2d > * 0 8576 30 PointerToArray< LVecBase2d > * 30 PointerToArray< LVecBase2d > * 0 0 1463 0 0 0 0 0 0 0 0 0 0

1663 30 PointerToArray< LVecBase2f > * 0 8576 30 PointerToArray< LVecBase2f > * 30 PointerToArray< LVecBase2f > * 0 0 1464 0 0 0 0 0 0 0 0 0 0

1664 30 PointerToArray< LVecBase2i > * 0 8576 30 PointerToArray< LVecBase2i > * 30 PointerToArray< LVecBase2i > * 0 0 1465 0 0 0 0 0 0 0 0 0 0

1665 30 PointerToArray< LVecBase3d > * 0 8576 30 PointerToArray< LVecBase3d > * 30 PointerToArray< LVecBase3d > * 0 0 1466 0 0 0 0 0 0 0 0 0 0

1666 30 PointerToArray< LVecBase3f > * 0 8576 30 PointerToArray< LVecBase3f > * 30 PointerToArray< LVecBase3f > * 0 0 1467 0 0 0 0 0 0 0 0 0 0

1667 30 PointerToArray< LVecBase3i > * 0 8576 30 PointerToArray< LVecBase3i > * 30 PointerToArray< LVecBase3i > * 0 0 1468 0 0 0 0 0 0 0 0 0 0

1668 38 PointerToArray< UnalignedLMatrix4d > * 0 8576 38 PointerToArray< UnalignedLMatrix4d > * 38 PointerToArray< UnalignedLMatrix4d > * 0 0 1469 0 0 0 0 0 0 0 0 0 0

1669 38 PointerToArray< UnalignedLMatrix4f > * 0 8576 38 PointerToArray< UnalignedLMatrix4f > * 38 PointerToArray< UnalignedLMatrix4f > * 0 0 1470 0 0 0 0 0 0 0 0 0 0

1670 39 PointerToArray< UnalignedLVecBase4d > * 0 8576 39 PointerToArray< UnalignedLVecBase4d > * 39 PointerToArray< UnalignedLVecBase4d > * 0 0 1471 0 0 0 0 0 0 0 0 0 0

1671 39 PointerToArray< UnalignedLVecBase4f > * 0 8576 39 PointerToArray< UnalignedLVecBase4f > * 39 PointerToArray< UnalignedLVecBase4f > * 0 0 1472 0 0 0 0 0 0 0 0 0 0

1672 39 PointerToArray< UnalignedLVecBase4i > * 0 8576 39 PointerToArray< UnalignedLVecBase4i > * 39 PointerToArray< UnalignedLVecBase4i > * 0 0 1473 0 0 0 0 0 0 0 0 0 0

1673 22 BoundingVolume const * 0 8576 22 BoundingVolume const * 22 BoundingVolume const * 0 0 1674 0 0 0 0 0 0 0 0 0 0

1674 20 BoundingVolume const 0 8832 20 BoundingVolume const 20 BoundingVolume const 0 0 1474 0 0 0 0 0 0 0 0 0 0

1675 16 BoundingVolume * 0 8576 16 BoundingVolume * 16 BoundingVolume * 0 0 1474 0 0 0 0 0 0 0 0 0 0

1676 4 bool 0 8194 4 bool 4 bool 0 4 0 0 0 0 0 0 0 0 0 0 0

1677 25 GeometricBoundingVolume * 0 8576 25 GeometricBoundingVolume * 25 GeometricBoundingVolume * 0 0 1478 0 0 0 0 0 0 0 0 0 0

1678 31 GeometricBoundingVolume const * 0 8576 31 GeometricBoundingVolume const * 31 GeometricBoundingVolume const * 0 0 1679 0 0 0 0 0 0 0 0 0 0

1679 29 GeometricBoundingVolume const 0 8832 29 GeometricBoundingVolume const 29 GeometricBoundingVolume const 0 0 1478 0 0 0 0 0 0 0 0 0 0

1680 16 LPoint3f const * 0 8576 16 LPoint3f const * 16 LPoint3f const * 0 0 1681 0 0 0 0 0 0 0 0 0 0

1681 14 LPoint3f const 0 8832 14 LPoint3f const 14 LPoint3f const 0 0 1682 0 0 0 0 0 0 0 0 0 0

1682 8 LPoint3f 0 2048 8 LPoint3f 8 LPoint3f 0 0 0 0 0 0 0 0 0 0 0 0 1083
// Filename: lpoint3_src.h
// Created by:  drose (25Sep99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LPoint3
// Description : This is a three-component point in space (as opposed
//               to a three-component vector, which represents a
//               direction and a distance).  Some of the methods are
//               slightly different between LPoint3 and LVector3; in
//               particular, subtraction of two points yields a
//               vector, while addition of a vector and a point yields
//               a point.
////////////////////////////////////////////////////////////////////

1683 10 LPoint3f * 0 8576 10 LPoint3f * 10 LPoint3f * 0 0 1682 0 0 0 0 0 0 0 0 0 0

1684 17 LMatrix4f const * 0 8576 17 LMatrix4f const * 17 LMatrix4f const * 0 0 1685 0 0 0 0 0 0 0 0 0 0

1685 15 LMatrix4f const 0 8832 15 LMatrix4f const 15 LMatrix4f const 0 0 1686 0 0 0 0 0 0 0 0 0 0

1686 9 LMatrix4f 0 2048 9 LMatrix4f 9 LMatrix4f 0 0 0 0 0 0 0 3 1804 1805 1806 0 0 0 0 215
////////////////////////////////////////////////////////////////////
//       Class : LMatrix4
// Description : This is a 4-by-4 transform matrix.
////////////////////////////////////////////////////////////////////

1687 28 FiniteBoundingVolume const * 0 8576 28 FiniteBoundingVolume const * 28 FiniteBoundingVolume const * 0 0 1688 0 0 0 0 0 0 0 0 0 0

1688 26 FiniteBoundingVolume const 0 8832 26 FiniteBoundingVolume const 26 FiniteBoundingVolume const 0 0 1479 0 0 0 0 0 0 0 0 0 0

1689 5 float 0 8194 5 float 5 float 0 2 0 0 0 0 0 0 0 0 0 0 0

1690 12 LParabolaf * 0 8576 12 LParabolaf * 12 LParabolaf * 0 0 1480 0 0 0 0 0 0 0 0 0 0

1691 18 LParabolaf const * 0 8576 18 LParabolaf const * 18 LParabolaf const * 0 0 1692 0 0 0 0 0 0 0 0 0 0

1692 16 LParabolaf const 0 8832 16 LParabolaf const 16 LParabolaf const 0 0 1480 0 0 0 0 0 0 0 0 0 0

1693 10 Datagram * 0 8576 10 Datagram * 10 Datagram * 0 0 1694 0 0 0 0 0 0 0 0 0 0

1694 8 Datagram 0 2048 8 Datagram 8 Datagram 0 0 0 0 0 0 0 0 0 0 0 0 900
////////////////////////////////////////////////////////////////////
//       Class : Datagram
// Description : An ordered list of data elements, formatted in memory
//               for transmission over a socket or writing to a data
//               file.
//
//               Data elements should be added one at a time, in
//               order, to the Datagram.  The nature and contents of
//               the data elements are totally up to the user.  When a
//               Datagram has been transmitted and received, its data
//               elements may be extracted using a DatagramIterator;
//               it is up to the caller to know the correct type of
//               each data element in order.
//
//               A Datagram is itself headerless; it is simply a
//               collection of data elements.
////////////////////////////////////////////////////////////////////

1695 18 DatagramIterator * 0 8576 18 DatagramIterator * 18 DatagramIterator * 0 0 1696 0 0 0 0 0 0 0 0 0 0

1696 16 DatagramIterator 0 2048 16 DatagramIterator 16 DatagramIterator 0 0 0 0 0 0 0 0 0 0 0 0 438
////////////////////////////////////////////////////////////////////
//       Class : DatagramIterator
// Description : A class to retrieve the individual data elements
//               previously stored in a Datagram.  Elements may be
//               retrieved one at a time; it is up to the caller to
//               know the correct type and order of each element.
////////////////////////////////////////////////////////////////////

1697 12 LParabolad * 0 8576 12 LParabolad * 12 LParabolad * 0 0 1481 0 0 0 0 0 0 0 0 0 0

1698 18 LParabolad const * 0 8576 18 LParabolad const * 18 LParabolad const * 0 0 1699 0 0 0 0 0 0 0 0 0 0

1699 16 LParabolad const 0 8832 16 LParabolad const 16 LParabolad const 0 0 1481 0 0 0 0 0 0 0 0 0 0

1700 17 LMatrix4d const * 0 8576 17 LMatrix4d const * 17 LMatrix4d const * 0 0 1701 0 0 0 0 0 0 0 0 0 0

1701 15 LMatrix4d const 0 8832 15 LMatrix4d const 15 LMatrix4d const 0 0 1702 0 0 0 0 0 0 0 0 0 0

1702 9 LMatrix4d 0 2048 9 LMatrix4d 9 LMatrix4d 0 0 0 0 0 0 0 3 1807 1808 1809 0 0 0 0 215
////////////////////////////////////////////////////////////////////
//       Class : LMatrix4
// Description : This is a 4-by-4 transform matrix.
////////////////////////////////////////////////////////////////////

1703 8 LPoint3d 0 2048 8 LPoint3d 8 LPoint3d 0 0 0 0 0 0 0 0 0 0 0 0 1083
// Filename: lpoint3_src.h
// Created by:  drose (25Sep99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LPoint3
// Description : This is a three-component point in space (as opposed
//               to a three-component vector, which represents a
//               direction and a distance).  Some of the methods are
//               slightly different between LPoint3 and LVector3; in
//               particular, subtraction of two points yields a
//               vector, while addition of a vector and a point yields
//               a point.
////////////////////////////////////////////////////////////////////

1704 6 double 0 8194 6 double 6 double 0 3 0 0 0 0 0 0 0 0 0 0 0

1705 10 LPoint3d * 0 8576 10 LPoint3d * 10 LPoint3d * 0 0 1703 0 0 0 0 0 0 0 0 0 0

1706 9 LPlanef * 0 8576 9 LPlanef * 9 LPlanef * 0 0 1482 0 0 0 0 0 0 0 0 0 0

1707 18 LVecBase4f const * 0 8576 18 LVecBase4f const * 18 LVecBase4f const * 0 0 1708 0 0 0 0 0 0 0 0 0 0

1708 16 LVecBase4f const 0 8832 16 LVecBase4f const 16 LVecBase4f const 0 0 1483 0 0 0 0 0 0 0 0 0 0

1709 17 LVector3f const * 0 8576 17 LVector3f const * 17 LVector3f const * 0 0 1710 0 0 0 0 0 0 0 0 0 0

1710 15 LVector3f const 0 8832 15 LVector3f const 15 LVector3f const 0 0 1711 0 0 0 0 0 0 0 0 0 0

1711 9 LVector3f 0 2048 9 LVector3f 9 LVector3f 0 0 0 0 0 0 0 0 0 0 0 0 1086
// Filename: lvector3_src.h
// Created by:  drose (24Sep99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LVector3
// Description : This is a three-component vector distance (as opposed
//               to a three-component point, which represents a
//               particular point in space).  Some of the methods are
//               slightly different between LPoint3 and LVector3; in
//               particular, subtraction of two points yields a
//               vector, while addition of a vector and a point yields
//               a point.
////////////////////////////////////////////////////////////////////

1712 15 LPlanef const * 0 8576 15 LPlanef const * 15 LPlanef const * 0 0 1713 0 0 0 0 0 0 0 0 0 0

1713 13 LPlanef const 0 8832 13 LPlanef const 13 LPlanef const 0 0 1482 0 0 0 0 0 0 0 0 0 0

1714 11 LMatrix4f * 0 8576 11 LMatrix4f * 11 LMatrix4f * 0 0 1686 0 0 0 0 0 0 0 0 0 0

1715 11 LVector3f * 0 8576 11 LVector3f * 11 LVector3f * 0 0 1711 0 0 0 0 0 0 0 0 0 0

1716 9 LPlaned * 0 8576 9 LPlaned * 9 LPlaned * 0 0 1484 0 0 0 0 0 0 0 0 0 0

1717 16 LPoint3d const * 0 8576 16 LPoint3d const * 16 LPoint3d const * 0 0 1718 0 0 0 0 0 0 0 0 0 0

1718 14 LPoint3d const 0 8832 14 LPoint3d const 14 LPoint3d const 0 0 1703 0 0 0 0 0 0 0 0 0 0

1719 18 LVecBase4d const * 0 8576 18 LVecBase4d const * 18 LVecBase4d const * 0 0 1720 0 0 0 0 0 0 0 0 0 0

1720 16 LVecBase4d const 0 8832 16 LVecBase4d const 16 LVecBase4d const 0 0 1485 0 0 0 0 0 0 0 0 0 0

1721 17 LVector3d const * 0 8576 17 LVector3d const * 17 LVector3d const * 0 0 1722 0 0 0 0 0 0 0 0 0 0

1722 15 LVector3d const 0 8832 15 LVector3d const 15 LVector3d const 0 0 1723 0 0 0 0 0 0 0 0 0 0

1723 9 LVector3d 0 2048 9 LVector3d 9 LVector3d 0 0 0 0 0 0 0 0 0 0 0 0 1086
// Filename: lvector3_src.h
// Created by:  drose (24Sep99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LVector3
// Description : This is a three-component vector distance (as opposed
//               to a three-component point, which represents a
//               particular point in space).  Some of the methods are
//               slightly different between LPoint3 and LVector3; in
//               particular, subtraction of two points yields a
//               vector, while addition of a vector and a point yields
//               a point.
////////////////////////////////////////////////////////////////////

1724 15 LPlaned const * 0 8576 15 LPlaned const * 15 LPlaned const * 0 0 1725 0 0 0 0 0 0 0 0 0 0

1725 13 LPlaned const 0 8832 13 LPlaned const 13 LPlaned const 0 0 1484 0 0 0 0 0 0 0 0 0 0

1726 11 LMatrix4d * 0 8576 11 LMatrix4d * 11 LMatrix4d * 0 0 1702 0 0 0 0 0 0 0 0 0 0

1727 11 LVector3d * 0 8576 11 LVector3d * 11 LVector3d * 0 0 1723 0 0 0 0 0 0 0 0 0 0

1728 13 BoundingBox * 0 8576 13 BoundingBox * 13 BoundingBox * 0 0 1486 0 0 0 0 0 0 0 0 0 0

1729 19 BoundingBox const * 0 8576 19 BoundingBox const * 19 BoundingBox const * 0 0 1730 0 0 0 0 0 0 0 0 0 0

1730 17 BoundingBox const 0 8832 17 BoundingBox const 17 BoundingBox const 0 0 1486 0 0 0 0 0 0 0 0 0 0

1731 11 LFrustumf * 0 8576 11 LFrustumf * 11 LFrustumf * 0 0 1487 0 0 0 0 0 0 0 0 0 0

1732 11 LFrustumd * 0 8576 11 LFrustumd * 11 LFrustumd * 0 0 1488 0 0 0 0 0 0 0 0 0 0

1733 17 LFrustumf const * 0 8576 17 LFrustumf const * 17 LFrustumf const * 0 0 1734 0 0 0 0 0 0 0 0 0 0

1734 15 LFrustumf const 0 8832 15 LFrustumf const 15 LFrustumf const 0 0 1487 0 0 0 0 0 0 0 0 0 0

1735 16 CoordinateSystem 0 532480 16 CoordinateSystem 16 CoordinateSystem 0 0 0 0 0 0 0 0 0 0 6 10 CS_default 10 CS_default 0 12 CS_zup_right 12 CS_zup_right 1 12 CS_yup_right 12 CS_yup_right 2 11 CS_zup_left 11 CS_zup_left 3 11 CS_yup_left 11 CS_yup_left 4 10 CS_invalid 10 CS_invalid 5 0 0

1736 20 BoundingHexahedron * 0 8576 20 BoundingHexahedron * 20 BoundingHexahedron * 0 0 1489 0 0 0 0 0 0 0 0 0 0

1737 26 BoundingHexahedron const * 0 8576 26 BoundingHexahedron const * 26 BoundingHexahedron const * 0 0 1738 0 0 0 0 0 0 0 0 0 0

1738 24 BoundingHexahedron const 0 8832 24 BoundingHexahedron const 24 BoundingHexahedron const 0 0 1489 0 0 0 0 0 0 0 0 0 0

1739 14 BoundingLine * 0 8576 14 BoundingLine * 14 BoundingLine * 0 0 1490 0 0 0 0 0 0 0 0 0 0

1740 20 BoundingLine const * 0 8576 20 BoundingLine const * 20 BoundingLine const * 0 0 1741 0 0 0 0 0 0 0 0 0 0

1741 18 BoundingLine const 0 8832 18 BoundingLine const 18 BoundingLine const 0 0 1490 0 0 0 0 0 0 0 0 0 0

1742 15 BoundingPlane * 0 8576 15 BoundingPlane * 15 BoundingPlane * 0 0 1491 0 0 0 0 0 0 0 0 0 0

1743 21 BoundingPlane const * 0 8576 21 BoundingPlane const * 21 BoundingPlane const * 0 0 1744 0 0 0 0 0 0 0 0 0 0

1744 19 BoundingPlane const 0 8832 19 BoundingPlane const 19 BoundingPlane const 0 0 1491 0 0 0 0 0 0 0 0 0 0

1745 16 BoundingSphere * 0 8576 16 BoundingSphere * 16 BoundingSphere * 0 0 1492 0 0 0 0 0 0 0 0 0 0

1746 22 BoundingSphere const * 0 8576 22 BoundingSphere const * 22 BoundingSphere const * 0 0 1747 0 0 0 0 0 0 0 0 0 0

1747 20 BoundingSphere const 0 8832 20 BoundingSphere const 20 BoundingSphere const 0 0 1492 0 0 0 0 0 0 0 0 0 0

1748 28 IntersectionBoundingVolume * 0 8576 28 IntersectionBoundingVolume * 28 IntersectionBoundingVolume * 0 0 1493 0 0 0 0 0 0 0 0 0 0

1749 34 IntersectionBoundingVolume const * 0 8576 34 IntersectionBoundingVolume const * 34 IntersectionBoundingVolume const * 0 0 1750 0 0 0 0 0 0 0 0 0 0

1750 32 IntersectionBoundingVolume const 0 8832 32 IntersectionBoundingVolume const 32 IntersectionBoundingVolume const 0 0 1493 0 0 0 0 0 0 0 0 0 0

1751 17 unsigned long int 0 8214 17 unsigned long int 17 unsigned long int 0 1 0 0 0 0 0 0 0 0 0 0 0

1752 10 Mersenne * 0 8576 10 Mersenne * 10 Mersenne * 0 0 1494 0 0 0 0 0 0 0 0 0 0

1753 20 OmniBoundingVolume * 0 8576 20 OmniBoundingVolume * 20 OmniBoundingVolume * 0 0 1495 0 0 0 0 0 0 0 0 0 0

1754 21 UnionBoundingVolume * 0 8576 21 UnionBoundingVolume * 21 UnionBoundingVolume * 0 0 1496 0 0 0 0 0 0 0 0 0 0

1755 27 UnionBoundingVolume const * 0 8576 27 UnionBoundingVolume const * 27 UnionBoundingVolume const * 0 0 1756 0 0 0 0 0 0 0 0 0 0

1756 25 UnionBoundingVolume const 0 8832 25 UnionBoundingVolume const 25 UnionBoundingVolume const 0 0 1496 0 0 0 0 0 0 0 0 0 0

1757 18 Randomizer const * 0 8576 18 Randomizer const * 18 Randomizer const * 0 0 1758 0 0 0 0 0 0 0 0 0 0

1758 16 Randomizer const 0 8832 16 Randomizer const 16 Randomizer const 0 0 1497 0 0 0 0 0 0 0 0 0 0

1759 12 Randomizer * 0 8576 12 Randomizer * 12 Randomizer * 0 0 1497 0 0 0 0 0 0 0 0 0 0

1760 13 PerlinNoise * 0 8576 13 PerlinNoise * 13 PerlinNoise * 0 0 1498 0 0 0 0 0 0 0 0 0 0

1761 14 PerlinNoise2 * 0 8576 14 PerlinNoise2 * 14 PerlinNoise2 * 0 0 1499 0 0 0 0 0 0 0 0 0 0

1762 20 PerlinNoise2 const * 0 8576 20 PerlinNoise2 const * 20 PerlinNoise2 const * 0 0 1763 0 0 0 0 0 0 0 0 0 0

1763 18 PerlinNoise2 const 0 8832 18 PerlinNoise2 const 18 PerlinNoise2 const 0 0 1499 0 0 0 0 0 0 0 0 0 0

1764 14 PerlinNoise3 * 0 8576 14 PerlinNoise3 * 14 PerlinNoise3 * 0 0 1500 0 0 0 0 0 0 0 0 0 0

1765 20 PerlinNoise3 const * 0 8576 20 PerlinNoise3 const * 20 PerlinNoise3 const * 0 0 1766 0 0 0 0 0 0 0 0 0 0

1766 18 PerlinNoise3 const 0 8832 18 PerlinNoise3 const 18 PerlinNoise3 const 0 0 1500 0 0 0 0 0 0 0 0 0 0

1767 21 StackedPerlinNoise2 * 0 8576 21 StackedPerlinNoise2 * 21 StackedPerlinNoise2 * 0 0 1501 0 0 0 0 0 0 0 0 0 0

1768 27 StackedPerlinNoise2 const * 0 8576 27 StackedPerlinNoise2 const * 27 StackedPerlinNoise2 const * 0 0 1769 0 0 0 0 0 0 0 0 0 0

1769 25 StackedPerlinNoise2 const 0 8832 25 StackedPerlinNoise2 const 25 StackedPerlinNoise2 const 0 0 1501 0 0 0 0 0 0 0 0 0 0

1770 21 StackedPerlinNoise3 * 0 8576 21 StackedPerlinNoise3 * 21 StackedPerlinNoise3 * 0 0 1502 0 0 0 0 0 0 0 0 0 0

1771 27 StackedPerlinNoise3 const * 0 8576 27 StackedPerlinNoise3 const * 27 StackedPerlinNoise3 const * 0 0 1772 0 0 0 0 0 0 0 0 0 0

1772 25 StackedPerlinNoise3 const 0 8832 25 StackedPerlinNoise3 const 25 StackedPerlinNoise3 const 0 0 1502 0 0 0 0 0 0 0 0 0 0

1773 14 Triangulator * 0 8576 14 Triangulator * 14 Triangulator * 0 0 1503 0 0 0 0 0 0 0 0 0 0

1774 16 LPoint2d const * 0 8576 16 LPoint2d const * 16 LPoint2d const * 0 0 1775 0 0 0 0 0 0 0 0 0 0

1775 14 LPoint2d const 0 8832 14 LPoint2d const 14 LPoint2d const 0 0 1776 0 0 0 0 0 0 0 0 0 0

1776 8 LPoint2d 0 2048 8 LPoint2d 8 LPoint2d 0 0 0 0 0 0 0 0 0 0 0 0 706
// Filename: lpoint2_src.h
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LPoint2
// Description : This is a two-component point in space.
////////////////////////////////////////////////////////////////////

1777 20 Triangulator const * 0 8576 20 Triangulator const * 20 Triangulator const * 0 0 1778 0 0 0 0 0 0 0 0 0 0

1778 18 Triangulator const 0 8832 18 Triangulator const 18 Triangulator const 0 0 1503 0 0 0 0 0 0 0 0 0 0

1779 15 Triangulator3 * 0 8576 15 Triangulator3 * 15 Triangulator3 * 0 0 1504 0 0 0 0 0 0 0 0 0 0

1780 21 Triangulator3 const * 0 8576 21 Triangulator3 const * 21 Triangulator3 const * 0 0 1781 0 0 0 0 0 0 0 0 0 0

1781 19 Triangulator3 const 0 8832 19 Triangulator3 const 19 Triangulator3 const 0 0 1504 0 0 0 0 0 0 0 0 0 0

1782 11 LMatrix3d * 0 8576 11 LMatrix3d * 11 LMatrix3d * 0 0 1515 0 0 0 0 0 0 0 0 0 0

1783 11 LMatrix3f * 0 8576 11 LMatrix3f * 11 LMatrix3f * 0 0 1533 0 0 0 0 0 0 0 0 0 0

1784 14 LQuaterniond * 0 8576 14 LQuaterniond * 14 LQuaterniond * 0 0 1785 0 0 0 0 0 0 0 0 0 0

1785 12 LQuaterniond 0 2048 12 LQuaterniond 12 LQuaterniond 0 0 0 0 0 0 0 0 0 0 0 0 719
// Filename: lquaternion_src.h
// Created by:  frang (06Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : FLOATNAME(LQuaternion)
// Description : This is the base quaternion class
////////////////////////////////////////////////////////////////////

1786 14 LQuaternionf * 0 8576 14 LQuaternionf * 14 LQuaternionf * 0 0 1787 0 0 0 0 0 0 0 0 0 0

1787 12 LQuaternionf 0 2048 12 LQuaternionf 12 LQuaternionf 0 0 0 0 0 0 0 0 0 0 0 0 719
// Filename: lquaternion_src.h
// Created by:  frang (06Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : FLOATNAME(LQuaternion)
// Description : This is the base quaternion class
////////////////////////////////////////////////////////////////////

0
0
22
1788 0 0 567 10 get_points 14 get_num_points 9 get_point 
1789 0 0 567 10 get_planes 14 get_num_planes 9 get_plane 
1790 0 0 596 10 get_points 14 get_num_points 9 get_point 
1791 0 0 596 10 get_planes 14 get_num_planes 9 get_plane 
1792 0 0 630 14 get_components 18 get_num_components 13 get_component 
1793 0 0 651 14 get_components 18 get_num_components 13 get_component 
1794 0 0 706 12 get_vertices 16 get_num_vertices 10 get_vertex 
1795 0 0 723 12 get_vertices 16 get_num_vertices 10 get_vertex 
1796 0 0 747 8 get_rows 4 size 7 get_row 
1797 0 0 747 8 get_cols 4 size 7 get_col 
1798 0 0 747 9 get_col2s 4 size 8 get_col2 
1799 0 0 747 9 get_row2s 4 size 8 get_row2 
1800 0 0 779 8 get_rows 4 size 7 get_row 
1801 0 0 779 8 get_cols 4 size 7 get_col 
1802 0 0 779 9 get_col2s 4 size 8 get_col2 
1803 0 0 779 9 get_row2s 4 size 8 get_row2 
1804 0 0 1386 8 get_rows 4 size 7 get_row 
1805 0 0 1386 8 get_cols 4 size 7 get_col 
1806 0 0 1386 9 get_row3s 4 size 8 get_row3 
1807 0 0 1428 8 get_rows 4 size 7 get_row 
1808 0 0 1428 8 get_cols 4 size 7 get_col 
1809 0 0 1428 9 get_row3s 4 size 8 get_row3 
