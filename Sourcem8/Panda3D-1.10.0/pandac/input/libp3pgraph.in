1436948213
2 3
11 libp3pgraph 4 w0Cq 12 panda3d.core 
1607
1868 11 operator != 0 4 3475 27 TransformState::operator != 0 1 1 0
75
inline bool TransformState::operator !=(TransformState const &other) const;

1869 10 compare_to 0 4 3475 26 TransformState::compare_to 0 2 2 3 1505
////////////////////////////////////////////////////////////////////
//     Function: TransformState::compare_to
//       Access: Published
//  Description: Provides an arbitrary ordering among all unique
//               TransformStates, so we can store the essentially
//               different ones in a big set and throw away the rest.
//
//               Note that if this returns 0, it doesn't necessarily
//               imply that operator == returns true; it uses a very
//               slightly different comparison threshold.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: TransformState::compare_to
//       Access: Published
//  Description: Provides an arbitrary ordering among all unique
//               TransformStates, so we can store the essentially
//               different ones in a big set and throw away the rest.
//
//               Note that if this returns 0, it doesn't necessarily
//               imply that operator == returns true; it uses a very
//               slightly different comparison threshold.
//
//               If uniquify_matrix is true, then matrix-defined
//               TransformStates are also uniqified.  If
//               uniquify_matrix is false, then only component-defined
//               TransformStates are uniquified, which is less
//               expensive.
////////////////////////////////////////////////////////////////////
162
inline int TransformState::compare_to(TransformState const &other) const;
int TransformState::compare_to(TransformState const &other, bool uniquify_matrix) const;

1870 11 operator == 0 4 3475 27 TransformState::operator == 0 1 4 0
68
bool TransformState::operator ==(TransformState const &other) const;

1871 8 get_hash 0 4 3475 24 TransformState::get_hash 0 1 5 268
////////////////////////////////////////////////////////////////////
//     Function: TransformState::get_hash
//       Access: Published
//  Description: Returns a suitable hash value for phash_map.
////////////////////////////////////////////////////////////////////
51
inline size_t TransformState::get_hash(void) const;

1872 13 make_identity 0 4 3475 29 TransformState::make_identity 0 1 6 270
////////////////////////////////////////////////////////////////////
//     Function: TransformState::make_identity
//       Access: Published, Static
//  Description: Constructs an identity transform.
////////////////////////////////////////////////////////////////////
76
static ConstPointerTo< TransformState > TransformState::make_identity(void);

1873 12 make_invalid 0 4 3475 28 TransformState::make_invalid 0 1 7 342
////////////////////////////////////////////////////////////////////
//     Function: TransformState::make_invalid
//       Access: Published, Static
//  Description: Constructs an invalid transform; for instance, the
//               result of inverting a singular matrix.
////////////////////////////////////////////////////////////////////
75
static ConstPointerTo< TransformState > TransformState::make_invalid(void);

1874 8 make_pos 0 4 3475 24 TransformState::make_pos 0 1 8 306
////////////////////////////////////////////////////////////////////
//     Function: TransformState::make_pos
//       Access: Published, Static
//  Description: Makes a new TransformState with the specified
//               components.
////////////////////////////////////////////////////////////////////
94
static inline ConstPointerTo< TransformState > TransformState::make_pos(LVecBase3 const &pos);

1875 8 make_hpr 0 4 3475 24 TransformState::make_hpr 0 1 9 306
////////////////////////////////////////////////////////////////////
//     Function: TransformState::make_hpr
//       Access: Published, Static
//  Description: Makes a new TransformState with the specified
//               components.
////////////////////////////////////////////////////////////////////
94
static inline ConstPointerTo< TransformState > TransformState::make_hpr(LVecBase3 const &hpr);

1876 9 make_quat 0 4 3475 25 TransformState::make_quat 0 1 10 307
////////////////////////////////////////////////////////////////////
//     Function: TransformState::make_quat
//       Access: Published, Static
//  Description: Makes a new TransformState with the specified
//               components.
////////////////////////////////////////////////////////////////////
98
static inline ConstPointerTo< TransformState > TransformState::make_quat(LQuaternion const &quat);

1877 12 make_pos_hpr 0 4 3475 28 TransformState::make_pos_hpr 0 1 11 310
////////////////////////////////////////////////////////////////////
//     Function: TransformState::make_pos_hpr
//       Access: Published, Static
//  Description: Makes a new TransformState with the specified
//               components.
////////////////////////////////////////////////////////////////////
120
static inline ConstPointerTo< TransformState > TransformState::make_pos_hpr(LVecBase3 const &pos, LVecBase3 const &hpr);

1878 10 make_scale 0 4 3475 26 TransformState::make_scale 0 2 12 13 618
////////////////////////////////////////////////////////////////////
//     Function: TransformState::make_scale
//       Access: Published, Static
//  Description: Makes a new TransformState with the specified
//               components.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: TransformState::make_scale
//       Access: Published, Static
//  Description: Makes a new TransformState with the specified
//               components.
////////////////////////////////////////////////////////////////////
192
static inline ConstPointerTo< TransformState > TransformState::make_scale(PN_stdfloat scale);
static inline ConstPointerTo< TransformState > TransformState::make_scale(LVecBase3 const &scale);

1879 10 make_shear 0 4 3475 26 TransformState::make_shear 0 1 14 308
////////////////////////////////////////////////////////////////////
//     Function: TransformState::make_shear
//       Access: Published, Static
//  Description: Makes a new TransformState with the specified
//               components.
////////////////////////////////////////////////////////////////////
98
static inline ConstPointerTo< TransformState > TransformState::make_shear(LVecBase3 const &shear);

1880 18 make_pos_hpr_scale 0 4 3475 34 TransformState::make_pos_hpr_scale 0 1 15 316
////////////////////////////////////////////////////////////////////
//     Function: TransformState::make_pos_hpr_scale
//       Access: Published, Static
//  Description: Makes a new TransformState with the specified
//               components.
////////////////////////////////////////////////////////////////////
150
static inline ConstPointerTo< TransformState > TransformState::make_pos_hpr_scale(LVecBase3 const &pos, LVecBase3 const &hpr, LVecBase3 const &scale);

1881 19 make_pos_quat_scale 0 4 3475 35 TransformState::make_pos_quat_scale 0 1 16 317
////////////////////////////////////////////////////////////////////
//     Function: TransformState::make_pos_quat_scale
//       Access: Published, Static
//  Description: Makes a new TransformState with the specified
//               components.
////////////////////////////////////////////////////////////////////
154
static inline ConstPointerTo< TransformState > TransformState::make_pos_quat_scale(LVecBase3 const &pos, LQuaternion const &quat, LVecBase3 const &scale);

1882 24 make_pos_hpr_scale_shear 0 4 3475 40 TransformState::make_pos_hpr_scale_shear 0 1 17 322
////////////////////////////////////////////////////////////////////
//     Function: TransformState::make_pos_hpr_scale_shear
//       Access: Published, Static
//  Description: Makes a new TransformState with the specified
//               components.
////////////////////////////////////////////////////////////////////
173
static ConstPointerTo< TransformState > TransformState::make_pos_hpr_scale_shear(LVecBase3 const &pos, LVecBase3 const &hpr, LVecBase3 const &scale, LVecBase3 const &shear);

1883 25 make_pos_quat_scale_shear 0 4 3475 41 TransformState::make_pos_quat_scale_shear 0 1 18 323
////////////////////////////////////////////////////////////////////
//     Function: TransformState::make_pos_quat_scale_shear
//       Access: Published, Static
//  Description: Makes a new TransformState with the specified
//               components.
////////////////////////////////////////////////////////////////////
177
static ConstPointerTo< TransformState > TransformState::make_pos_quat_scale_shear(LVecBase3 const &pos, LQuaternion const &quat, LVecBase3 const &scale, LVecBase3 const &shear);

1884 8 make_mat 0 4 3475 24 TransformState::make_mat 0 1 19 317
////////////////////////////////////////////////////////////////////
//     Function: TransformState::make_mat
//       Access: Published, Static
//  Description: Makes a new TransformState with the specified
//               transformation matrix.
////////////////////////////////////////////////////////////////////
86
static ConstPointerTo< TransformState > TransformState::make_mat(LMatrix4 const &mat);

1885 10 make_pos2d 0 4 3475 26 TransformState::make_pos2d 0 1 20 312
////////////////////////////////////////////////////////////////////
//     Function: TransformState::make_pos2d
//       Access: Published, Static
//  Description: Makes a new 2-d TransformState with the specified
//               components.
////////////////////////////////////////////////////////////////////
96
static inline ConstPointerTo< TransformState > TransformState::make_pos2d(LVecBase2 const &pos);

1886 13 make_rotate2d 0 4 3475 29 TransformState::make_rotate2d 0 1 21 315
////////////////////////////////////////////////////////////////////
//     Function: TransformState::make_rotate2d
//       Access: Published, Static
//  Description: Makes a new 2-d TransformState with the specified
//               components.
////////////////////////////////////////////////////////////////////
97
static inline ConstPointerTo< TransformState > TransformState::make_rotate2d(PN_stdfloat rotate);

1887 17 make_pos_rotate2d 0 4 3475 33 TransformState::make_pos_rotate2d 0 1 22 319
////////////////////////////////////////////////////////////////////
//     Function: TransformState::make_pos_rotate2d
//       Access: Published, Static
//  Description: Makes a new 2-d TransformState with the specified
//               components.
////////////////////////////////////////////////////////////////////
123
static inline ConstPointerTo< TransformState > TransformState::make_pos_rotate2d(LVecBase2 const &pos, PN_stdfloat rotate);

1888 12 make_scale2d 0 4 3475 28 TransformState::make_scale2d 0 2 23 24 630
////////////////////////////////////////////////////////////////////
//     Function: TransformState::make_scale2d
//       Access: Published, Static
//  Description: Makes a new 2-d TransformState with the specified
//               components.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: TransformState::make_scale2d
//       Access: Published, Static
//  Description: Makes a new 2-d TransformState with the specified
//               components.
////////////////////////////////////////////////////////////////////
196
static inline ConstPointerTo< TransformState > TransformState::make_scale2d(PN_stdfloat scale);
static inline ConstPointerTo< TransformState > TransformState::make_scale2d(LVecBase2 const &scale);

1889 12 make_shear2d 0 4 3475 28 TransformState::make_shear2d 0 1 25 314
////////////////////////////////////////////////////////////////////
//     Function: TransformState::make_shear2d
//       Access: Published, Static
//  Description: Makes a new 2-d TransformState with the specified
//               components.
////////////////////////////////////////////////////////////////////
95
static inline ConstPointerTo< TransformState > TransformState::make_shear2d(PN_stdfloat shear);

1890 23 make_pos_rotate_scale2d 0 4 3475 39 TransformState::make_pos_rotate_scale2d 0 1 26 325
////////////////////////////////////////////////////////////////////
//     Function: TransformState::make_pos_rotate_scale2d
//       Access: Published, Static
//  Description: Makes a new 2-d TransformState with the specified
//               components.
////////////////////////////////////////////////////////////////////
153
static inline ConstPointerTo< TransformState > TransformState::make_pos_rotate_scale2d(LVecBase2 const &pos, PN_stdfloat rotate, LVecBase2 const &scale);

1891 29 make_pos_rotate_scale_shear2d 0 4 3475 45 TransformState::make_pos_rotate_scale_shear2d 0 1 27 343
////////////////////////////////////////////////////////////////////
//     Function: TransformState::make_pos_rotate_scale_shear2d
//       Access: Published, Static
//  Description: Makes a new two-dimensional TransformState with the
//               specified components.
////////////////////////////////////////////////////////////////////
171
static ConstPointerTo< TransformState > TransformState::make_pos_rotate_scale_shear2d(LVecBase2 const &pos, PN_stdfloat rotate, LVecBase2 const &scale, PN_stdfloat shear);

1892 9 make_mat3 0 4 3475 25 TransformState::make_mat3 0 1 28 338
////////////////////////////////////////////////////////////////////
//     Function: TransformState::make_mat3
//       Access: Published, Static
//  Description: Makes a new two-dimensional TransformState with the
//               specified 3x3 transformation matrix.
////////////////////////////////////////////////////////////////////
87
static ConstPointerTo< TransformState > TransformState::make_mat3(LMatrix3 const &mat);

1893 11 is_identity 0 4 3475 27 TransformState::is_identity 0 1 29 322
////////////////////////////////////////////////////////////////////
//     Function: TransformState::is_identity
//       Access: Published
//  Description: Returns true if the transform represents the identity
//               matrix, false otherwise.
////////////////////////////////////////////////////////////////////
52
inline bool TransformState::is_identity(void) const;

1894 10 is_invalid 0 4 3475 26 TransformState::is_invalid 0 1 30 411
////////////////////////////////////////////////////////////////////
//     Function: TransformState::is_invalid
//       Access: Published
//  Description: Returns true if the transform represents an invalid
//               matrix, for instance the result of inverting a
//               singular matrix, or false if the transform is valid.
////////////////////////////////////////////////////////////////////
51
inline bool TransformState::is_invalid(void) const;

1895 11 is_singular 0 4 3475 27 TransformState::is_singular 0 1 31 401
////////////////////////////////////////////////////////////////////
//     Function: TransformState::is_singular
//       Access: Published
//  Description: Returns true if the transform represents a singular
//               transform (that is, it has a zero scale, and it
//               cannot be inverted), or false otherwise.
////////////////////////////////////////////////////////////////////
52
inline bool TransformState::is_singular(void) const;

1896 5 is_2d 0 4 3475 21 TransformState::is_2d 0 1 32 460
////////////////////////////////////////////////////////////////////
//     Function: TransformState::is_2d
//       Access: Published
//  Description: Returns true if the transform has been constructed
//               entirely using the 2-d transform operations,
//               e.g. make_pos2d(), and therefore operates strictly in
//               two-dimensional space on X and Y only.
////////////////////////////////////////////////////////////////////
46
inline bool TransformState::is_2d(void) const;

1897 14 has_components 0 4 3475 30 TransformState::has_components 0 1 33 1050
////////////////////////////////////////////////////////////////////
//     Function: TransformState::has_components
//       Access: Published
//  Description: Returns true if the transform can be described by
//               separate pos, hpr, and scale components.  Most
//               transforms we use in everyday life can be so
//               described, but some kinds of transforms (for
//               instance, those involving a skew) cannot.
//
//               This is not related to whether the transform was
//               originally described componentwise.  Even a transform
//               that was constructed with a 4x4 may return true here
//               if the matrix is a simple affine matrix with no skew.
//
//               If this returns true, you may safely call get_hpr()
//               and get_scale() to retrieve the components.  (You
//               may always safely call get_pos() whether this returns
//               true or false.)
////////////////////////////////////////////////////////////////////
55
inline bool TransformState::has_components(void) const;

1898 16 components_given 0 4 3475 32 TransformState::components_given 0 1 34 796
////////////////////////////////////////////////////////////////////
//     Function: TransformState::components_given
//       Access: Published
//  Description: Returns true if the transform was specified
//               componentwise, or false if it was specified with a
//               general 4x4 matrix.  If this is true, the components
//               returned by get_pos() and get_scale() will be exactly
//               those that were set; otherwise, these functions will
//               return computed values.  If this is true, the
//               rotation may have been set either with a hpr trio or
//               with a quaternion; hpr_given() or quat_given() can
//               resolve the difference.
////////////////////////////////////////////////////////////////////
57
inline bool TransformState::components_given(void) const;

1899 9 hpr_given 0 4 3475 25 TransformState::hpr_given 0 1 35 459
////////////////////////////////////////////////////////////////////
//     Function: TransformState::hpr_given
//       Access: Published
//  Description: Returns true if the rotation was specified via a trio
//               of Euler angles, false otherwise.  If this is true,
//               get_hpr() will be exactly as set; otherwise, it will
//               return a computed value.
////////////////////////////////////////////////////////////////////
50
inline bool TransformState::hpr_given(void) const;

1900 10 quat_given 0 4 3475 26 TransformState::quat_given 0 1 36 451
////////////////////////////////////////////////////////////////////
//     Function: TransformState::quat_given
//       Access: Published
//  Description: Returns true if the rotation was specified via a
//               quaternion, false otherwise.  If this is true,
//               get_quat() will be exactly as set; otherwise, it will
//               return a computed value.
////////////////////////////////////////////////////////////////////
51
inline bool TransformState::quat_given(void) const;

1901 7 has_pos 0 4 3475 23 TransformState::has_pos 0 1 37 450
////////////////////////////////////////////////////////////////////
//     Function: TransformState::has_pos
//       Access: Published
//  Description: Returns true if the transform's pos component can be
//               extracted out separately.  This is generally always
//               true, unless the transform is invalid
//               (i.e. is_invalid() returns true).
////////////////////////////////////////////////////////////////////
48
inline bool TransformState::has_pos(void) const;

1902 7 has_hpr 0 4 3475 23 TransformState::has_hpr 0 1 38 456
////////////////////////////////////////////////////////////////////
//     Function: TransformState::has_hpr
//       Access: Published
//  Description: Returns true if the transform's rotation component
//               can be extracted out separately and described as a
//               set of Euler angles.  This is generally true only
//               when has_components() is true.
////////////////////////////////////////////////////////////////////
48
inline bool TransformState::has_hpr(void) const;

1903 8 has_quat 0 4 3475 24 TransformState::has_quat 0 1 39 448
////////////////////////////////////////////////////////////////////
//     Function: TransformState::has_quat
//       Access: Published
//  Description: Returns true if the transform's rotation component
//               can be extracted out separately and described as a
//               quaternion.  This is generally true only when
//               has_components() is true.
////////////////////////////////////////////////////////////////////
49
inline bool TransformState::has_quat(void) const;

1904 9 has_scale 0 4 3475 25 TransformState::has_scale 0 1 40 399
////////////////////////////////////////////////////////////////////
//     Function: TransformState::has_scale
//       Access: Published
//  Description: Returns true if the transform's scale component
//               can be extracted out separately.  This is generally
//               true only when has_components() is true.
////////////////////////////////////////////////////////////////////
50
inline bool TransformState::has_scale(void) const;

1905 18 has_identity_scale 0 4 3475 34 TransformState::has_identity_scale 0 1 41 335
////////////////////////////////////////////////////////////////////
//     Function: TransformState::has_identity_scale
//       Access: Published
//  Description: Returns true if the scale is uniform 1.0, or false if
//               the scale has some real value.
////////////////////////////////////////////////////////////////////
59
inline bool TransformState::has_identity_scale(void) const;

1906 17 has_uniform_scale 0 4 3475 33 TransformState::has_uniform_scale 0 1 42 468
////////////////////////////////////////////////////////////////////
//     Function: TransformState::has_uniform_scale
//       Access: Published
//  Description: Returns true if the scale is uniform across all three
//               axes (and therefore can be expressed as a single
//               number), or false if the transform has a different
//               scale in different dimensions.
////////////////////////////////////////////////////////////////////
58
inline bool TransformState::has_uniform_scale(void) const;

1907 9 has_shear 0 4 3475 25 TransformState::has_shear 0 1 43 399
////////////////////////////////////////////////////////////////////
//     Function: TransformState::has_shear
//       Access: Published
//  Description: Returns true if the transform's shear component
//               can be extracted out separately.  This is generally
//               true only when has_components() is true.
////////////////////////////////////////////////////////////////////
50
inline bool TransformState::has_shear(void) const;

1908 17 has_nonzero_shear 0 4 3475 33 TransformState::has_nonzero_shear 0 1 44 374
////////////////////////////////////////////////////////////////////
//     Function: TransformState::has_nonzero_shear
//       Access: Published
//  Description: Returns true if the shear component is non-zero,
//               false if it is zero or if the matrix cannot be
//               decomposed.
////////////////////////////////////////////////////////////////////
58
inline bool TransformState::has_nonzero_shear(void) const;

1909 7 has_mat 0 4 3475 23 TransformState::has_mat 0 1 45 377
////////////////////////////////////////////////////////////////////
//     Function: TransformState::has_mat
//       Access: Published
//  Description: Returns true if the transform can be described as a
//               matrix.  This is generally always true, unless
//               is_invalid() is true.
////////////////////////////////////////////////////////////////////
48
inline bool TransformState::has_mat(void) const;

1910 7 get_pos 0 4 3475 23 TransformState::get_pos 0 1 46 341
////////////////////////////////////////////////////////////////////
//     Function: TransformState::get_pos
//       Access: Published
//  Description: Returns the pos component of the transform.  It is an
//               error to call this if has_pos() returned false.
////////////////////////////////////////////////////////////////////
58
inline LPoint3 const &TransformState::get_pos(void) const;

1911 7 get_hpr 0 4 3475 23 TransformState::get_hpr 0 1 47 396
////////////////////////////////////////////////////////////////////
//     Function: TransformState::get_hpr
//       Access: Published
//  Description: Returns the rotation component of the transform as a
//               trio of Euler angles.  It is an error to call this if
//               has_components() returned false.
////////////////////////////////////////////////////////////////////
60
inline LVecBase3 const &TransformState::get_hpr(void) const;

1912 8 get_quat 0 4 3475 24 TransformState::get_quat 0 1 48 746
////////////////////////////////////////////////////////////////////
//     Function: TransformState::get_quat
//       Access: Published
//  Description: Returns the rotation component of the transform as a
//               quaternion.  The return value will be normalized if a
//               normalized quaternion was given to the constructor
//               (or if the quaternion was computed implicitly); it
//               will be non-normalized if a non-normalized quaternion
//               was given to the constructor.  See also
//               get_norm_quat().
//
//               It is an error to call this if has_components()
//               returned false.
////////////////////////////////////////////////////////////////////
63
inline LQuaternion const &TransformState::get_quat(void) const;

1913 13 get_norm_quat 0 4 3475 29 TransformState::get_norm_quat 0 1 49 524
////////////////////////////////////////////////////////////////////
//     Function: TransformState::get_norm_quat
//       Access: Published
//  Description: Returns the rotation component of the transform as a
//               quaternion.  Unlike the result of get_quat(), the
//               return value of this method is guaranteed to be
//               normalized.  It is an error to call this if
//               has_components() returned false.
////////////////////////////////////////////////////////////////////
68
inline LQuaternion const &TransformState::get_norm_quat(void) const;

1914 9 get_scale 0 4 3475 25 TransformState::get_scale 0 1 50 369
////////////////////////////////////////////////////////////////////
//     Function: TransformState::get_scale
//       Access: Published
//  Description: Returns the scale component of the transform.  It is an
//               error to call this if has_components() returned
//               false.
////////////////////////////////////////////////////////////////////
62
inline LVecBase3 const &TransformState::get_scale(void) const;

1915 17 get_uniform_scale 0 4 3475 33 TransformState::get_uniform_scale 0 1 51 400
////////////////////////////////////////////////////////////////////
//     Function: TransformState::get_uniform_scale
//       Access: Published
//  Description: Returns the scale component of the transform, as a
//               single number.  It is an error to call this if
//               has_uniform_scale() returned false.
////////////////////////////////////////////////////////////////////
65
inline PN_stdfloat TransformState::get_uniform_scale(void) const;

1916 9 get_shear 0 4 3475 25 TransformState::get_shear 0 1 52 369
////////////////////////////////////////////////////////////////////
//     Function: TransformState::get_shear
//       Access: Published
//  Description: Returns the shear component of the transform.  It is
//               an error to call this if has_components() returned
//               false.
////////////////////////////////////////////////////////////////////
62
inline LVecBase3 const &TransformState::get_shear(void) const;

1917 7 get_mat 0 4 3475 23 TransformState::get_mat 0 1 53 271
////////////////////////////////////////////////////////////////////
//     Function: TransformState::get_mat
//       Access: Published
//  Description: Returns the matrix that describes the transform.
////////////////////////////////////////////////////////////////////
59
inline LMatrix4 const &TransformState::get_mat(void) const;

1918 9 get_pos2d 0 4 3475 25 TransformState::get_pos2d 0 1 54 375
////////////////////////////////////////////////////////////////////
//     Function: TransformState::get_pos2d
//       Access: Published
//  Description: Returns the pos component of the 2-d transform.  It
//               is an error to call this if has_pos() or is_2d()
//               returned false.
////////////////////////////////////////////////////////////////////
55
inline LVecBase2 TransformState::get_pos2d(void) const;

1919 12 get_rotate2d 0 4 3475 28 TransformState::get_rotate2d 0 1 55 456
////////////////////////////////////////////////////////////////////
//     Function: TransformState::get_rotate2d
//       Access: Published
//  Description: Returns the rotation component of the 2-d transform
//               as an angle in degrees clockwise about the origin.
//               It is an error to call this if has_components() or
//               is_2d() returned false.
////////////////////////////////////////////////////////////////////
60
inline PN_stdfloat TransformState::get_rotate2d(void) const;

1920 11 get_scale2d 0 4 3475 27 TransformState::get_scale2d 0 1 56 386
////////////////////////////////////////////////////////////////////
//     Function: TransformState::get_scale2d
//       Access: Published
//  Description: Returns the scale component of the 2-d transform.  It
//               is an error to call this if has_components() or
//               is_2d() returned false.
////////////////////////////////////////////////////////////////////
57
inline LVecBase2 TransformState::get_scale2d(void) const;

1921 11 get_shear2d 0 4 3475 27 TransformState::get_shear2d 0 1 57 386
////////////////////////////////////////////////////////////////////
//     Function: TransformState::get_shear2d
//       Access: Published
//  Description: Returns the shear component of the 2-d transform.  It
//               is an error to call this if has_components() or
//               is_2d() returned false.
////////////////////////////////////////////////////////////////////
59
inline PN_stdfloat TransformState::get_shear2d(void) const;

1922 8 get_mat3 0 4 3475 24 TransformState::get_mat3 0 1 58 370
////////////////////////////////////////////////////////////////////
//     Function: TransformState::get_mat3
//       Access: Published
//  Description: Returns the 3x3 matrix that describes the 2-d
//               transform.  It is an error to call this if is_2d()
//               returned false.
////////////////////////////////////////////////////////////////////
53
inline LMatrix3 TransformState::get_mat3(void) const;

1923 7 set_pos 0 4 3475 23 TransformState::set_pos 0 1 59 394
////////////////////////////////////////////////////////////////////
//     Function: TransformState::set_pos
//       Access: Published
//  Description: Returns a new TransformState object that represents the
//               original TransformState with its pos component
//               replaced with the indicated value.
////////////////////////////////////////////////////////////////////
85
ConstPointerTo< TransformState > TransformState::set_pos(LVecBase3 const &pos) const;

1924 7 set_hpr 0 4 3475 23 TransformState::set_hpr 0 1 60 412
////////////////////////////////////////////////////////////////////
//     Function: TransformState::set_hpr
//       Access: Published
//  Description: Returns a new TransformState object that represents the
//               original TransformState with its rotation component
//               replaced with the indicated value, if possible.
////////////////////////////////////////////////////////////////////
85
ConstPointerTo< TransformState > TransformState::set_hpr(LVecBase3 const &hpr) const;

1925 8 set_quat 0 4 3475 24 TransformState::set_quat 0 1 61 413
////////////////////////////////////////////////////////////////////
//     Function: TransformState::set_quat
//       Access: Published
//  Description: Returns a new TransformState object that represents the
//               original TransformState with its rotation component
//               replaced with the indicated value, if possible.
////////////////////////////////////////////////////////////////////
89
ConstPointerTo< TransformState > TransformState::set_quat(LQuaternion const &quat) const;

1926 9 set_scale 0 4 3475 25 TransformState::set_scale 0 1 62 411
////////////////////////////////////////////////////////////////////
//     Function: TransformState::set_scale
//       Access: Published
//  Description: Returns a new TransformState object that represents the
//               original TransformState with its scale component
//               replaced with the indicated value, if possible.
////////////////////////////////////////////////////////////////////
89
ConstPointerTo< TransformState > TransformState::set_scale(LVecBase3 const &scale) const;

1927 9 set_shear 0 4 3475 25 TransformState::set_shear 0 1 63 411
////////////////////////////////////////////////////////////////////
//     Function: TransformState::set_shear
//       Access: Published
//  Description: Returns a new TransformState object that represents the
//               original TransformState with its shear component
//               replaced with the indicated value, if possible.
////////////////////////////////////////////////////////////////////
89
ConstPointerTo< TransformState > TransformState::set_shear(LVecBase3 const &shear) const;

1928 9 set_pos2d 0 4 3475 25 TransformState::set_pos2d 0 1 64 400
////////////////////////////////////////////////////////////////////
//     Function: TransformState::set_pos2d
//       Access: Published
//  Description: Returns a new TransformState object that represents the
//               original 2-d TransformState with its pos component
//               replaced with the indicated value.
////////////////////////////////////////////////////////////////////
87
ConstPointerTo< TransformState > TransformState::set_pos2d(LVecBase2 const &pos) const;

1929 12 set_rotate2d 0 4 3475 28 TransformState::set_rotate2d 0 1 65 421
////////////////////////////////////////////////////////////////////
//     Function: TransformState::set_rotate2d
//       Access: Published
//  Description: Returns a new TransformState object that represents the
//               original 2-d TransformState with its rotation component
//               replaced with the indicated value, if possible.
////////////////////////////////////////////////////////////////////
88
ConstPointerTo< TransformState > TransformState::set_rotate2d(PN_stdfloat rotate) const;

1930 11 set_scale2d 0 4 3475 27 TransformState::set_scale2d 0 1 66 417
////////////////////////////////////////////////////////////////////
//     Function: TransformState::set_scale2d
//       Access: Published
//  Description: Returns a new TransformState object that represents the
//               original 2-d TransformState with its scale component
//               replaced with the indicated value, if possible.
////////////////////////////////////////////////////////////////////
91
ConstPointerTo< TransformState > TransformState::set_scale2d(LVecBase2 const &scale) const;

1931 11 set_shear2d 0 4 3475 27 TransformState::set_shear2d 0 1 67 417
////////////////////////////////////////////////////////////////////
//     Function: TransformState::set_shear2d
//       Access: Published
//  Description: Returns a new TransformState object that represents the
//               original 2-d TransformState with its shear component
//               replaced with the indicated value, if possible.
////////////////////////////////////////////////////////////////////
86
ConstPointerTo< TransformState > TransformState::set_shear2d(PN_stdfloat shear) const;

1932 7 compose 0 4 3475 23 TransformState::compose 0 1 68 723
////////////////////////////////////////////////////////////////////
//     Function: TransformState::compose
//       Access: Published
//  Description: Returns a new TransformState object that represents the
//               composition of this state with the other state.
//
//               The result of this operation is cached, and will be
//               retained as long as both this TransformState object and
//               the other TransformState object continue to exist.
//               Should one of them destruct, the cached entry will be
//               removed, and its pointer will be allowed to destruct
//               as well.
////////////////////////////////////////////////////////////////////
92
ConstPointerTo< TransformState > TransformState::compose(TransformState const *other) const;

1933 14 invert_compose 0 4 3475 30 TransformState::invert_compose 0 1 69 563
////////////////////////////////////////////////////////////////////
//     Function: TransformState::invert_compose
//       Access: Published
//  Description: Returns a new TransformState object that represents the
//               composition of this state's inverse with the other
//               state.
//
//               This is similar to compose(), but is particularly
//               useful for computing the relative state of a node as
//               viewed from some other node.
////////////////////////////////////////////////////////////////////
99
ConstPointerTo< TransformState > TransformState::invert_compose(TransformState const *other) const;

1934 11 get_inverse 0 4 3475 27 TransformState::get_inverse 0 1 70 460
////////////////////////////////////////////////////////////////////
//     Function: TransformState::get_inverse
//       Access: Published
//  Description: Returns the inverse of this transform.  If you are
//               going to immediately compose this result with another
//               TransformState, it is faster to do it in one
//               operation with invert_compose().
////////////////////////////////////////////////////////////////////
80
inline ConstPointerTo< TransformState > TransformState::get_inverse(void) const;

1935 10 get_unique 0 4 3475 26 TransformState::get_unique 0 1 71 619
////////////////////////////////////////////////////////////////////
//     Function: TransformState::get_unique
//       Access: Published
//  Description: Returns the pointer to the unique TransformState in
//               the cache that is equivalent to this one.  This may
//               be the same pointer as this object, or it may be a
//               different pointer; but it will be an equivalent
//               object, and it will be a shared pointer.  This may be
//               called from time to time to improve cache benefits.
////////////////////////////////////////////////////////////////////
79
inline ConstPointerTo< TransformState > TransformState::get_unique(void) const;

1936 18 get_geom_rendering 0 4 3475 34 TransformState::get_geom_rendering 0 1 72 560
////////////////////////////////////////////////////////////////////
//     Function: TransformState::get_geom_rendering
//       Access: Published
//  Description: Returns the union of the Geom::GeomRendering bits
//               that will be required once this TransformState is
//               applied to a geom which includes the indicated
//               geom_rendering bits.  The RenderState's
//               get_geom_rendering() should already have been
//               applied.
////////////////////////////////////////////////////////////////////
72
inline int TransformState::get_geom_rendering(int geom_rendering) const;

1937 9 cache_ref 0 4 3475 25 TransformState::cache_ref 0 1 73 278
////////////////////////////////////////////////////////////////////
//     Function: TransformState::cache_ref
//       Access: Published
//  Description: Overrides this method to update PStats appropriately.
////////////////////////////////////////////////////////////////////
50
inline void TransformState::cache_ref(void) const;

1938 11 cache_unref 0 4 3475 27 TransformState::cache_unref 0 1 74 280
////////////////////////////////////////////////////////////////////
//     Function: TransformState::cache_unref
//       Access: Published
//  Description: Overrides this method to update PStats appropriately.
////////////////////////////////////////////////////////////////////
52
inline bool TransformState::cache_unref(void) const;

1939 8 node_ref 0 4 3475 24 TransformState::node_ref 0 1 75 277
////////////////////////////////////////////////////////////////////
//     Function: TransformState::node_ref
//       Access: Published
//  Description: Overrides this method to update PStats appropriately.
////////////////////////////////////////////////////////////////////
49
inline void TransformState::node_ref(void) const;

1940 10 node_unref 0 4 3475 26 TransformState::node_unref 0 1 76 279
////////////////////////////////////////////////////////////////////
//     Function: TransformState::node_unref
//       Access: Published
//  Description: Overrides this method to update PStats appropriately.
////////////////////////////////////////////////////////////////////
51
inline bool TransformState::node_unref(void) const;

1941 33 get_composition_cache_num_entries 0 4 3475 49 TransformState::get_composition_cache_num_entries 0 1 77 575
////////////////////////////////////////////////////////////////////
//     Function: TransformState::get_composition_cache_num_entries
//       Access: Published
//  Description: Returns the number of entries in the composition
//               cache for this TransformState.  This is the number of
//               other TransformStates whose composition with this one
//               has been cached.  This number is not useful for any
//               practical reason other than performance analysis.
////////////////////////////////////////////////////////////////////
73
inline int TransformState::get_composition_cache_num_entries(void) const;

1942 40 get_invert_composition_cache_num_entries 0 4 3475 56 TransformState::get_invert_composition_cache_num_entries 0 1 78 559
////////////////////////////////////////////////////////////////////
//     Function: TransformState::get_invert_composition_cache_num_entries
//       Access: Published
//  Description: Returns the number of entries in the
//               invert_composition cache for this TransformState.
//               This is similar to the composition cache, but it
//               records cache entries for the invert_compose()
//               operation.  See get_composition_cache_num_entries().
////////////////////////////////////////////////////////////////////
80
inline int TransformState::get_invert_composition_cache_num_entries(void) const;

1943 26 get_composition_cache_size 0 4 3475 42 TransformState::get_composition_cache_size 0 1 79 655
////////////////////////////////////////////////////////////////////
//     Function: TransformState::get_composition_cache_size
//       Access: Published
//  Description: Returns the number of slots in the composition
//               cache for this TransformState.  You may use this as
//               an upper bound when walking through all of the
//               composition cache results via
//               get_composition_cache_source() or result().
//
//               This has no practical value other than for examining
//               the cache for performance analysis.
////////////////////////////////////////////////////////////////////
66
inline int TransformState::get_composition_cache_size(void) const;

1944 28 get_composition_cache_source 0 4 3475 44 TransformState::get_composition_cache_source 0 1 80 608
////////////////////////////////////////////////////////////////////
//     Function: TransformState::get_composition_cache_source
//       Access: Published
//  Description: Returns the source TransformState of the nth element
//               in the composition cache.  Returns NULL if there
//               doesn't happen to be an entry in the nth element.
//               See get_composition_cache_result().
//
//               This has no practical value other than for examining
//               the cache for performance analysis.
////////////////////////////////////////////////////////////////////
87
inline TransformState const *TransformState::get_composition_cache_source(int n) const;

1945 28 get_composition_cache_result 0 4 3475 44 TransformState::get_composition_cache_result 0 1 81 707
////////////////////////////////////////////////////////////////////
//     Function: TransformState::get_composition_cache_result
//       Access: Published
//  Description: Returns the result TransformState of the nth element
//               in the composition cache.  Returns NULL if there
//               doesn't happen to be an entry in the nth element.
//
//               In general,
//               a->compose(a->get_composition_cache_source(n)) ==
//               a->get_composition_cache_result(n).
//
//               This has no practical value other than for examining
//               the cache for performance analysis.
////////////////////////////////////////////////////////////////////
87
inline TransformState const *TransformState::get_composition_cache_result(int n) const;

1946 33 get_invert_composition_cache_size 0 4 3475 49 TransformState::get_invert_composition_cache_size 0 1 82 669
////////////////////////////////////////////////////////////////////
//     Function: TransformState::get_invert_composition_cache_size
//       Access: Published
//  Description: Returns the number of slots in the composition
//               cache for this TransformState.  You may use this as
//               an upper bound when walking through all of the
//               composition cache results via
//               get_invert_composition_cache_source() or result().
//
//               This has no practical value other than for examining
//               the cache for performance analysis.
////////////////////////////////////////////////////////////////////
73
inline int TransformState::get_invert_composition_cache_size(void) const;

1947 35 get_invert_composition_cache_source 0 4 3475 51 TransformState::get_invert_composition_cache_source 0 1 83 630
////////////////////////////////////////////////////////////////////
//     Function: TransformState::get_invert_composition_cache_source
//       Access: Published
//  Description: Returns the source TransformState of the nth element
//               in the invert composition cache.  Returns NULL if
//               there doesn't happen to be an entry in the nth
//               element.  See get_invert_composition_cache_result().
//
//               This has no practical value other than for examining
//               the cache for performance analysis.
////////////////////////////////////////////////////////////////////
94
inline TransformState const *TransformState::get_invert_composition_cache_source(int n) const;

1948 35 get_invert_composition_cache_result 0 4 3475 51 TransformState::get_invert_composition_cache_result 0 1 84 759
////////////////////////////////////////////////////////////////////
//     Function: TransformState::get_invert_composition_cache_result
//       Access: Published
//  Description: Returns the result TransformState of the nth element
//               in the invert composition cache.  Returns NULL if
//               there doesn't happen to be an entry in the nth
//               element.
//
//               In general,
//               a->invert_compose(a->get_invert_composition_cache_source(n))
//               == a->get_invert_composition_cache_result(n).
//
//               This has no practical value other than for examining
//               the cache for performance analysis.
////////////////////////////////////////////////////////////////////
94
inline TransformState const *TransformState::get_invert_composition_cache_result(int n) const;

1949 26 validate_composition_cache 0 4 3475 42 TransformState::validate_composition_cache 0 1 85 425
////////////////////////////////////////////////////////////////////
//     Function: TransformState::validate_composition_cache
//       Access: Published
//  Description: Returns true if the composition cache and invert
//               composition cache for this particular TransformState
//               are self-consistent and valid, false otherwise.
////////////////////////////////////////////////////////////////////
60
bool TransformState::validate_composition_cache(void) const;

1950 21 get_composition_cache 0 4 3475 37 TransformState::get_composition_cache 0 1 86 0
60
PyObject *TransformState::get_composition_cache(void) const;

1951 28 get_invert_composition_cache 0 4 3475 44 TransformState::get_invert_composition_cache 0 1 87 0
67
PyObject *TransformState::get_invert_composition_cache(void) const;

1952 6 output 0 4 3475 22 TransformState::output 0 1 88 221
////////////////////////////////////////////////////////////////////
//     Function: TransformState::output
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
48
void TransformState::output(ostream &out) const;

1953 5 write 0 4 3475 21 TransformState::write 0 1 89 220
////////////////////////////////////////////////////////////////////
//     Function: TransformState::write
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
65
void TransformState::write(ostream &out, int indent_level) const;

1954 23 write_composition_cache 0 4 3475 39 TransformState::write_composition_cache 0 1 90 481
////////////////////////////////////////////////////////////////////
//     Function: TransformState::write_composition_cache
//       Access: Published
//  Description: Writes a brief description of the composition cache
//               and invert composition cache to the indicated
//               ostream.  This is not useful except for performance
//               analysis, to examine the cache structure.
////////////////////////////////////////////////////////////////////
83
void TransformState::write_composition_cache(ostream &out, int indent_level) const;

1955 14 get_num_states 0 4 3475 30 TransformState::get_num_states 0 1 91 405
////////////////////////////////////////////////////////////////////
//     Function: TransformState::get_num_states
//       Access: Published, Static
//  Description: Returns the total number of unique TransformState
//               objects allocated in the world.  This will go up and
//               down during normal operations.
////////////////////////////////////////////////////////////////////
48
static int TransformState::get_num_states(void);

1956 21 get_num_unused_states 0 4 3475 37 TransformState::get_num_unused_states 0 1 92 1009
////////////////////////////////////////////////////////////////////
//     Function: TransformState::get_num_unused_states
//       Access: Published, Static
//  Description: Returns the total number of TransformState objects that
//               have been allocated but have no references outside of
//               the internal TransformState cache.
//
//               A nonzero return value is not necessarily indicative
//               of leaked references; it is normal for two
//               TransformState objects, both of which have references
//               held outside the cache, to have the result of their
//               composition stored within the cache.  This result
//               will be retained within the cache until one of the
//               base TransformStates is released.
//
//               Use list_cycles() to get an idea of the number of
//               actual "leaked" TransformState objects.
////////////////////////////////////////////////////////////////////
55
static int TransformState::get_num_unused_states(void);

1957 11 clear_cache 0 4 3475 27 TransformState::clear_cache 0 1 93 1021
////////////////////////////////////////////////////////////////////
//     Function: TransformState::clear_cache
//       Access: Published, Static
//  Description: Empties the cache of composed TransformStates.  This
//               makes every TransformState forget what results when
//               it is composed with other TransformStates.
//
//               This will eliminate any TransformState objects that
//               have been allocated but have no references outside of
//               the internal TransformState map.  It will not
//               eliminate TransformState objects that are still in
//               use.
//
//               Nowadays, this method should not be necessary, as
//               reference-count cycles in the composition cache
//               should be automatically detected and broken.
//
//               The return value is the number of TransformStates
//               freed by this operation.
////////////////////////////////////////////////////////////////////
45
static int TransformState::clear_cache(void);

1958 15 garbage_collect 0 4 3475 31 TransformState::garbage_collect 0 1 94 601
////////////////////////////////////////////////////////////////////
//     Function: TransformState::garbage_collect
//       Access: Published, Static
//  Description: Performs a garbage-collection cycle.  This must be
//               called periodically if garbage-collect-states is true
//               to ensure that TransformStates get cleaned up
//               appropriately.  It does no harm to call it even if
//               this variable is not true, but there is probably no
//               advantage in that case.
////////////////////////////////////////////////////////////////////
49
static int TransformState::garbage_collect(void);

1959 11 list_cycles 0 4 3475 27 TransformState::list_cycles 0 1 95 951
////////////////////////////////////////////////////////////////////
//     Function: TransformState::list_cycles
//       Access: Published, Static
//  Description: Detects all of the reference-count cycles in the
//               cache and reports them to standard output.
//
//               These cycles may be inadvertently created when state
//               compositions cycle back to a starting point.
//               Nowadays, these cycles should be automatically
//               detected and broken, so this method should never list
//               any cycles unless there is a bug in that detection
//               logic.
//
//               The cycles listed here are not leaks in the strictest
//               sense of the word, since they can be reclaimed by a
//               call to clear_cache(); but they will not be reclaimed
//               automatically.
////////////////////////////////////////////////////////////////////
54
static void TransformState::list_cycles(ostream &out);

1960 11 list_states 0 4 3475 27 TransformState::list_states 0 1 96 424
////////////////////////////////////////////////////////////////////
//     Function: TransformState::list_states
//       Access: Published, Static
//  Description: Lists all of the TransformStates in the cache to the
//               output stream, one per line.  This can be quite a lot
//               of output if the cache is large, so be prepared.
////////////////////////////////////////////////////////////////////
54
static void TransformState::list_states(ostream &out);

1961 15 validate_states 0 4 3475 31 TransformState::validate_states 0 1 97 586
////////////////////////////////////////////////////////////////////
//     Function: TransformState::validate_states
//       Access: Published, Static
//  Description: Ensures that the cache is still stored in sorted
//               order, and that none of the cache elements have been
//               inadvertently deleted.  Returns true if so, false if
//               there is a problem (which implies someone has
//               modified one of the supposedly-const TransformState
//               objects).
////////////////////////////////////////////////////////////////////
50
static bool TransformState::validate_states(void);

1962 10 get_states 0 4 3475 26 TransformState::get_states 0 1 98 0
50
static PyObject *TransformState::get_states(void);

1963 17 get_unused_states 0 4 3475 33 TransformState::get_unused_states 0 1 99 0
57
static PyObject *TransformState::get_unused_states(void);

1964 14 get_class_type 0 4 3475 30 TransformState::get_class_type 0 1 100 0
55
static TypeHandle TransformState::get_class_type(void);

1965 8 get_slot 0 4 3477 30 RenderAttribRegistry::get_slot 0 1 101 350
////////////////////////////////////////////////////////////////////
//     Function: RenderAttribRegistry::get_slot
//       Access: Published
//  Description: Returns the slot number assigned to the indicated
//               TypeHandle, or 0 if no slot number has been assigned.
////////////////////////////////////////////////////////////////////
72
inline int RenderAttribRegistry::get_slot(TypeHandle type_handle) const;

1966 13 get_max_slots 0 4 3477 35 RenderAttribRegistry::get_max_slots 0 1 102 709
////////////////////////////////////////////////////////////////////
//     Function: RenderAttribRegistry::get_max_slots
//       Access: Published
//  Description: Returns the maximum number that any slot number is
//               allowed to grow.  Actually, this number will be one
//               higher than the highest possible slot number.  This
//               puts an upper bound on the number of RenderAttrib
//               slots that may be allocated, and allows other code to
//               define an array of slots.
//
//               This number will not change during the lifetime of
//               the application.
////////////////////////////////////////////////////////////////////
59
inline int RenderAttribRegistry::get_max_slots(void) const;

1967 13 get_num_slots 0 4 3477 35 RenderAttribRegistry::get_num_slots 0 1 103 390
////////////////////////////////////////////////////////////////////
//     Function: RenderAttribRegistry::get_num_slots
//       Access: Published
//  Description: Returns the number of RenderAttrib slots that have
//               been allocated.  This is one more than the highest
//               slot number in use.
////////////////////////////////////////////////////////////////////
59
inline int RenderAttribRegistry::get_num_slots(void) const;

1968 13 get_slot_type 0 4 3477 35 RenderAttribRegistry::get_slot_type 0 1 104 281
////////////////////////////////////////////////////////////////////
//     Function: RenderAttribRegistry::get_slot_type
//       Access: Published
//  Description: Returns the TypeHandle associated with slot n.
////////////////////////////////////////////////////////////////////
70
inline TypeHandle RenderAttribRegistry::get_slot_type(int slot) const;

1969 13 get_slot_sort 0 4 3477 35 RenderAttribRegistry::get_slot_sort 0 1 105 282
////////////////////////////////////////////////////////////////////
//     Function: RenderAttribRegistry::get_slot_sort
//       Access: Published
//  Description: Returns the sort number associated with slot n.
////////////////////////////////////////////////////////////////////
63
inline int RenderAttribRegistry::get_slot_sort(int slot) const;

1970 13 set_slot_sort 0 4 3477 35 RenderAttribRegistry::set_slot_sort 0 1 106 282
////////////////////////////////////////////////////////////////////
//     Function: RenderAttribRegistry::set_slot_sort
//       Access: Published
//  Description: Changes the sort number associated with slot n.
////////////////////////////////////////////////////////////////////
61
void RenderAttribRegistry::set_slot_sort(int slot, int sort);

1971 16 get_slot_default 0 4 3477 38 RenderAttribRegistry::get_slot_default 0 1 107 444
////////////////////////////////////////////////////////////////////
//     Function: RenderAttribRegistry::get_slot_default
//       Access: Published
//  Description: Returns the default RenderAttrib object associated
//               with slot n.  This is the attrib that should be
//               applied in the absence of any other attrib of this
//               type.
////////////////////////////////////////////////////////////////////
86
ConstPointerTo< RenderAttrib > RenderAttribRegistry::get_slot_default(int slot) const;

1972 20 get_num_sorted_slots 0 4 3477 42 RenderAttribRegistry::get_num_sorted_slots 0 1 108 314
////////////////////////////////////////////////////////////////////
//     Function: RenderAttribRegistry::get_num_sorted_slots
//       Access: Published
//  Description: Returns the number of entries in the sorted_slots
//               list.
////////////////////////////////////////////////////////////////////
66
inline int RenderAttribRegistry::get_num_sorted_slots(void) const;

1973 15 get_sorted_slot 0 4 3477 37 RenderAttribRegistry::get_sorted_slot 0 1 109 424
////////////////////////////////////////////////////////////////////
//     Function: RenderAttribRegistry::get_sorted_slot
//       Access: Published
//  Description: Returns the nth slot in sorted order.  By traversing
//               this list, you will retrieve all the slot numbers in
//               order according to their registered sort value.
////////////////////////////////////////////////////////////////////
62
inline int RenderAttribRegistry::get_sorted_slot(int n) const;

1974 15 get_array_chain 0 4 3477 37 RenderAttribRegistry::get_array_chain 0 1 110 400
////////////////////////////////////////////////////////////////////
//     Function: RenderAttribRegistry::get_array_chain
//       Access: Published
//  Description: Returns the DeletedBufferChain object that may be
//               used to allocated appropriately-sized arrays of
//               RenderState::Attribute objects.
////////////////////////////////////////////////////////////////////
77
inline DeletedBufferChain *RenderAttribRegistry::get_array_chain(void) const;

1975 14 get_global_ptr 0 4 3477 36 RenderAttribRegistry::get_global_ptr 0 1 111 243
////////////////////////////////////////////////////////////////////
//     Function: RenderAttribRegistry::get_global_ptr
//       Access: Published, Static
//  Description:
////////////////////////////////////////////////////////////////////
79
static inline RenderAttribRegistry *RenderAttribRegistry::get_global_ptr(void);

1976 7 compose 0 4 3478 21 RenderAttrib::compose 0 1 112 605
////////////////////////////////////////////////////////////////////
//     Function: RenderAttrib::compose
//       Access: Published
//  Description: Returns a new RenderAttrib object that represents the
//               composition of this attrib with the other attrib.  In
//               most cases, this is the same as the other attrib; a
//               compose b produces b.  Some kinds of attributes, like
//               a TextureTransform, for instance, might produce a new
//               result: a compose b produces c.
////////////////////////////////////////////////////////////////////
93
inline ConstPointerTo< RenderAttrib > RenderAttrib::compose(RenderAttrib const *other) const;

1977 14 invert_compose 0 4 3478 28 RenderAttrib::invert_compose 0 1 113 946
////////////////////////////////////////////////////////////////////
//     Function: RenderAttrib::invert_compose
//       Access: Published
//  Description: Returns a new RenderAttrib object that represents the
//               composition of the inverse of this attrib with the
//               other attrib.  In most cases, this is the same as the
//               other attrib; !a compose b produces b.  Some kinds of
//               attributes, like a TextureTransform, for instance,
//               might produce a new result: !a compose b produces c.
//
//               This is similar to compose() except that the source
//               attrib is inverted first.  This is used to compute
//               the relative attribute for one node as viewed from
//               some other node, which is especially useful for
//               transform-type attributes.
////////////////////////////////////////////////////////////////////
100
inline ConstPointerTo< RenderAttrib > RenderAttrib::invert_compose(RenderAttrib const *other) const;

1978 25 lower_attrib_can_override 0 6 3478 39 RenderAttrib::lower_attrib_can_override 0 1 114 1472
////////////////////////////////////////////////////////////////////
//     Function: RenderAttrib::lower_attrib_can_override
//       Access: Public, Virtual
//  Description: Intended to be overridden by derived RenderAttrib
//               types to specify how two consecutive RenderAttrib
//               objects of the same type interact.
//
//               This should return false if a RenderAttrib on a
//               higher node will compose into a RenderAttrib on a
//               lower node that has a higher override value, or true
//               if the lower RenderAttrib will completely replace the
//               state.
//
//               The default behavior is false: normally, a
//               RenderAttrib in the graph cannot completely override
//               a RenderAttrib above it, regardless of its override
//               value--instead, the two attribs are composed.  But
//               for some kinds of RenderAttribs, it is useful to
//               allow this kind of override.
//
//               This method only handles the one special case of a
//               lower RenderAttrib with a higher override value.  If
//               the higher RenderAttrib has a higher override value,
//               it always completely overrides.  And if both
//               RenderAttribs have the same override value, they are
//               always composed.
////////////////////////////////////////////////////////////////////
65
virtual bool RenderAttrib::lower_attrib_can_override(void) const;

1979 10 compare_to 0 4 3478 24 RenderAttrib::compare_to 0 1 115 671
////////////////////////////////////////////////////////////////////
//     Function: RenderAttrib::compare_to
//       Access: Published
//  Description: Provides an arbitrary ordering among all unique
//               RenderAttribs, so we can store the essentially
//               different ones in a big set and throw away the rest.
//
//               This method is not needed outside of the RenderAttrib
//               class because all equivalent RenderAttrib objects are
//               guaranteed to share the same pointer; thus, a pointer
//               comparison is always sufficient.
////////////////////////////////////////////////////////////////////
69
inline int RenderAttrib::compare_to(RenderAttrib const &other) const;

1980 8 get_hash 0 4 3478 22 RenderAttrib::get_hash 0 1 116 266
////////////////////////////////////////////////////////////////////
//     Function: RenderAttrib::get_hash
//       Access: Published
//  Description: Returns a suitable hash value for phash_map.
////////////////////////////////////////////////////////////////////
49
inline size_t RenderAttrib::get_hash(void) const;

1981 10 get_unique 0 4 3478 24 RenderAttrib::get_unique 0 1 117 615
////////////////////////////////////////////////////////////////////
//     Function: RenderAttrib::get_unique
//       Access: Published
//  Description: Returns the pointer to the unique RenderAttrib in
//               the cache that is equivalent to this one.  This may
//               be the same pointer as this object, or it may be a
//               different pointer; but it will be an equivalent
//               object, and it will be a shared pointer.  This may be
//               called from time to time to improve cache benefits.
////////////////////////////////////////////////////////////////////
75
inline ConstPointerTo< RenderAttrib > RenderAttrib::get_unique(void) const;

1982 22 get_auto_shader_attrib 0 4 3478 36 RenderAttrib::get_auto_shader_attrib 0 1 118 1198
////////////////////////////////////////////////////////////////////
//     Function: RenderAttrib::get_auto_shader_attrib
//       Access: Published
//  Description: Returns the variant of this RenderAttrib that's most
//               relevant for associating with an auto-generated
//               shader.  This should be a new RenderAttrib of the
//               same type as this one, with any superfluous data set
//               to neutral.  Only the parts of the attrib that
//               contribute to the shader should be reflected in the
//               returned attrib.  The idea is to associate the
//               auto-generated shader with the most neutral form of
//               all states, to allow it to be shared across as many
//               RenderState objects as possible.
//
//               If this RenderAttrib is completely irrelevant to the
//               auto-shader, this should return NULL to indicate that
//               the attrib won't be assocaited with the shader at
//               all.  In this case the attrib does not contribute to
//               the shader meaningfully.
////////////////////////////////////////////////////////////////////
107
inline ConstPointerTo< RenderAttrib > RenderAttrib::get_auto_shader_attrib(RenderState const *state) const;

1983 6 output 0 6 3478 20 RenderAttrib::output 0 1 119 228
////////////////////////////////////////////////////////////////////
//     Function: RenderAttrib::output
//       Access: Published, Virtual
//  Description:
////////////////////////////////////////////////////////////////////
54
virtual void RenderAttrib::output(ostream &out) const;

1984 5 write 0 6 3478 19 RenderAttrib::write 0 1 120 227
////////////////////////////////////////////////////////////////////
//     Function: RenderAttrib::write
//       Access: Published, Virtual
//  Description:
////////////////////////////////////////////////////////////////////
71
virtual void RenderAttrib::write(ostream &out, int indent_level) const;

1985 15 get_num_attribs 0 4 3478 29 RenderAttrib::get_num_attribs 0 1 121 402
////////////////////////////////////////////////////////////////////
//     Function: RenderAttrib::get_num_attribs
//       Access: Published, Static
//  Description: Returns the total number of unique RenderAttrib
//               objects allocated in the world.  This will go up and
//               down during normal operations.
////////////////////////////////////////////////////////////////////
47
static int RenderAttrib::get_num_attribs(void);

1986 12 list_attribs 0 4 3478 26 RenderAttrib::list_attribs 0 1 122 421
////////////////////////////////////////////////////////////////////
//     Function: RenderAttrib::list_attribs
//       Access: Published, Static
//  Description: Lists all of the RenderAttribs in the cache to the
//               output stream, one per line.  This can be quite a lot
//               of output if the cache is large, so be prepared.
////////////////////////////////////////////////////////////////////
53
static void RenderAttrib::list_attribs(ostream &out);

1987 15 garbage_collect 0 4 3478 29 RenderAttrib::garbage_collect 0 1 123 412
////////////////////////////////////////////////////////////////////
//     Function: RenderAttrib::garbage_collect
//       Access: Published, Static
//  Description: Performs a garbage-collection cycle.  This is called
//               automatically from RenderState::garbage_collect();
//               see that method for more information.
////////////////////////////////////////////////////////////////////
47
static int RenderAttrib::garbage_collect(void);

1988 16 validate_attribs 0 4 3478 30 RenderAttrib::validate_attribs 0 1 124 480
////////////////////////////////////////////////////////////////////
//     Function: RenderAttrib::validate_attribs
//       Access: Published, Static
//  Description: Ensures that the cache is still stored in sorted
//               order.  Returns true if so, false if there is a
//               problem (which implies someone has modified one of
//               the supposedly-const RenderAttrib objects).
////////////////////////////////////////////////////////////////////
49
static bool RenderAttrib::validate_attribs(void);

1989 8 get_slot 0 6 3478 22 RenderAttrib::get_slot 0 1 125 0
51
virtual int RenderAttrib::get_slot(void) const = 0;

1990 14 get_class_type 0 4 3478 28 RenderAttrib::get_class_type 0 1 126 0
53
static TypeHandle RenderAttrib::get_class_type(void);

1991 4 make 0 4 3482 22 RenderModeAttrib::make 0 1 127 1410
////////////////////////////////////////////////////////////////////
//     Function: RenderModeAttrib::make
//       Access: Published, Static
//  Description: Constructs a new RenderModeAttrib object that specifies
//               whether to draw polygons in the normal, filled mode,
//               or wireframe mode, or in some other yet-to-be-defined
//               mode.
//
//               The thickness parameter specifies the thickness to be
//               used for wireframe lines, as well as for ordinary
//               linestrip lines; it also specifies the diameter of
//               points.  (Thick lines are presently only supported in
//               OpenGL; but thick points are supported on either
//               platform.)
//
//               If perspective is true, the point thickness
//               represented is actually a width in 3-d units, and the
//               points should scale according to perspective.  When
//               it is false, the point thickness is actually a width
//               in pixels, and points are a uniform screen size
//               regardless of distance from the camera.
//
//               In M_filled_wireframe mode, you should also specify
//               the wireframe_color, indicating the flat color to
//               assign to the overlayed wireframe.
////////////////////////////////////////////////////////////////////
183
static ConstPointerTo< RenderAttrib > RenderModeAttrib::make(RenderModeAttrib::Mode mode, PN_stdfloat thickness = 1.0, bool perspective = 0, LColor const &wireframe_color = (zero()));

1992 12 make_default 0 4 3482 30 RenderModeAttrib::make_default 0 1 128 403
////////////////////////////////////////////////////////////////////
//     Function: RenderModeAttrib::make_default
//       Access: Published, Static
//  Description: Returns a RenderAttrib that corresponds to whatever
//               the standard default properties for render attributes
//               of this type ought to be.
////////////////////////////////////////////////////////////////////
75
static ConstPointerTo< RenderAttrib > RenderModeAttrib::make_default(void);

1993 8 get_mode 0 4 3482 26 RenderModeAttrib::get_mode 0 1 129 250
////////////////////////////////////////////////////////////////////
//     Function: RenderModeAttrib::get_mode
//       Access: Published
//  Description: Returns the render mode.
////////////////////////////////////////////////////////////////////
69
inline RenderModeAttrib::Mode RenderModeAttrib::get_mode(void) const;

1994 13 get_thickness 0 4 3482 31 RenderModeAttrib::get_thickness 0 1 130 517
////////////////////////////////////////////////////////////////////
//     Function: RenderModeAttrib::get_thickness
//       Access: Published
//  Description: Returns the line width or point thickness.  This is
//               only relevant when rendering points or lines, such as
//               when the mode is M_wireframe or M_point (or when
//               rendering actual points or lines primitives in
//               M_polygon mode).
////////////////////////////////////////////////////////////////////
63
inline PN_stdfloat RenderModeAttrib::get_thickness(void) const;

1995 15 get_perspective 0 4 3482 33 RenderModeAttrib::get_perspective 0 1 131 676
////////////////////////////////////////////////////////////////////
//     Function: RenderModeAttrib::get_perspective
//       Access: Published
//  Description: Returns the perspective flag.  When this is true, the
//               point thickness represented by get_thickness() is
//               actually a width in 3-d units, and the points should
//               scale according to perspective.  When it is false,
//               the default, the point thickness is actually a width
//               in pixels, and points are a uniform size regardless
//               of distance from the camera.
////////////////////////////////////////////////////////////////////
58
inline bool RenderModeAttrib::get_perspective(void) const;

1996 19 get_wireframe_color 0 4 3482 37 RenderModeAttrib::get_wireframe_color 0 1 132 388
////////////////////////////////////////////////////////////////////
//     Function: RenderModeAttrib::get_wireframe_color
//       Access: Published
//  Description: Returns the color that is used in M_filled_wireframe
//               mode to distinguish the wireframe from the rest of
//               the geometry.
////////////////////////////////////////////////////////////////////
71
inline LColor const &RenderModeAttrib::get_wireframe_color(void) const;

1997 18 get_geom_rendering 0 4 3482 36 RenderModeAttrib::get_geom_rendering 0 1 133 456
////////////////////////////////////////////////////////////////////
//     Function: RenderModeAttrib::get_geom_rendering
//       Access: Published
//  Description: Returns the union of the Geom::GeomRendering bits
//               that will be required once this RenderModeAttrib is
//               applied to a geom which includes the indicated
//               geom_rendering bits.
////////////////////////////////////////////////////////////////////
74
inline int RenderModeAttrib::get_geom_rendering(int geom_rendering) const;

1998 14 get_class_slot 0 4 3482 32 RenderModeAttrib::get_class_slot 0 1 134 0
50
static int RenderModeAttrib::get_class_slot(void);

1999 14 get_class_type 0 4 3482 32 RenderModeAttrib::get_class_type 0 1 135 0
57
static TypeHandle RenderModeAttrib::get_class_type(void);

2000 17 ~RenderModeAttrib 0 4 3482 35 RenderModeAttrib::~RenderModeAttrib 0 0 0
42
RenderModeAttrib::~RenderModeAttrib(void);

2001 4 make 0 4 3484 21 TexMatrixAttrib::make 0 3 136 137 138 1034
////////////////////////////////////////////////////////////////////
//     Function: TexMatrixAttrib::make
//       Access: Published, Static
//  Description: Constructs a TexMatrixAttrib that applies
//               no stages at all.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: TexMatrixAttrib::make
//       Access: Published, Static
//  Description: Constructs a TexMatrixAttrib that applies the
//               indicated matrix to the default texture stage.  This
//               interface is deprecated.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: TexMatrixAttrib::make
//       Access: Published, Static
//  Description: Constructs a TexMatrixAttrib that applies the
//               indicated transform to the named texture stage.
////////////////////////////////////////////////////////////////////
263
static ConstPointerTo< RenderAttrib > TexMatrixAttrib::make(void);
static ConstPointerTo< RenderAttrib > TexMatrixAttrib::make(LMatrix4 const &mat);
static ConstPointerTo< RenderAttrib > TexMatrixAttrib::make(TextureStage *stage, TransformState const *transform);

2002 12 make_default 0 4 3484 29 TexMatrixAttrib::make_default 0 1 139 402
////////////////////////////////////////////////////////////////////
//     Function: TexMatrixAttrib::make_default
//       Access: Published, Static
//  Description: Returns a RenderAttrib that corresponds to whatever
//               the standard default properties for render attributes
//               of this type ought to be.
////////////////////////////////////////////////////////////////////
74
static ConstPointerTo< RenderAttrib > TexMatrixAttrib::make_default(void);

2003 9 add_stage 0 4 3484 26 TexMatrixAttrib::add_stage 0 1 140 425
////////////////////////////////////////////////////////////////////
//     Function: TexMatrixAttrib::add_stage
//       Access: Published, Static
//  Description: Returns a new TexMatrixAttrib just like this one,
//               with the indicated transform for the given stage.  If
//               this stage already exists, its transform is replaced.
////////////////////////////////////////////////////////////////////
136
ConstPointerTo< RenderAttrib > TexMatrixAttrib::add_stage(TextureStage *stage, TransformState const *transform, int override = 0) const;

2004 12 remove_stage 0 4 3484 29 TexMatrixAttrib::remove_stage 0 1 141 337
////////////////////////////////////////////////////////////////////
//     Function: TexMatrixAttrib::remove_stage
//       Access: Published, Static
//  Description: Returns a new TexMatrixAttrib just like this one,
//               with the indicated stage removed.
////////////////////////////////////////////////////////////////////
88
ConstPointerTo< RenderAttrib > TexMatrixAttrib::remove_stage(TextureStage *stage) const;

2005 8 is_empty 0 4 3484 25 TexMatrixAttrib::is_empty 0 1 142 329
////////////////////////////////////////////////////////////////////
//     Function: TexMatrixAttrib::is_empty
//       Access: Published
//  Description: Returns true if no stages are defined in the
//               TexMatrixAttrib, false if at least one is.
////////////////////////////////////////////////////////////////////
43
bool TexMatrixAttrib::is_empty(void) const;

2006 9 has_stage 0 4 3484 26 TexMatrixAttrib::has_stage 0 1 143 442
////////////////////////////////////////////////////////////////////
//     Function: TexMatrixAttrib::has_stage
//       Access: Published
//  Description: Returns true if there is a transform associated with
//               the indicated stage, or false otherwise (in which
//               case get_transform(stage) will return the identity
//               transform).
////////////////////////////////////////////////////////////////////
59
bool TexMatrixAttrib::has_stage(TextureStage *stage) const;

2007 14 get_num_stages 0 4 3484 31 TexMatrixAttrib::get_num_stages 0 1 144 313
////////////////////////////////////////////////////////////////////
//     Function: TexMatrixAttrib::get_num_stages
//       Access: Published
//  Description: Returns the number of stages that are represented by
//               this attrib.
////////////////////////////////////////////////////////////////////
48
int TexMatrixAttrib::get_num_stages(void) const;

2008 9 get_stage 0 4 3484 26 TexMatrixAttrib::get_stage 0 1 145 364
////////////////////////////////////////////////////////////////////
//     Function: TexMatrixAttrib::get_stage
//       Access: Published
//  Description: Returns the nth stage that is represented by this
//               attrib.  The TextureStages are in no particular
//               order.
////////////////////////////////////////////////////////////////////
54
TextureStage *TexMatrixAttrib::get_stage(int n) const;

2009 7 get_mat 0 4 3484 24 TexMatrixAttrib::get_mat 0 2 146 147 725
////////////////////////////////////////////////////////////////////
//     Function: TexMatrixAttrib::get_mat
//       Access: Published
//  Description: Returns the transformation matrix associated with
//               the default texture stage.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: TexMatrixAttrib::get_mat
//       Access: Published
//  Description: Returns the transformation matrix associated with
//               the indicated texture stage, or identity matrix if
//               nothing is associated with the indicated stage.
////////////////////////////////////////////////////////////////////
122
LMatrix4 const &TexMatrixAttrib::get_mat(void) const;
LMatrix4 const &TexMatrixAttrib::get_mat(TextureStage *stage) const;

2010 13 get_transform 0 4 3484 30 TexMatrixAttrib::get_transform 0 1 148 405
////////////////////////////////////////////////////////////////////
//     Function: TexMatrixAttrib::get_transform
//       Access: Published
//  Description: Returns the transformation associated with
//               the indicated texture stage, or identity matrix if
//               nothing is associated with the indicated stage.
////////////////////////////////////////////////////////////////////
91
ConstPointerTo< TransformState > TexMatrixAttrib::get_transform(TextureStage *stage) const;

2011 12 get_override 0 4 3484 29 TexMatrixAttrib::get_override 0 1 149 309
////////////////////////////////////////////////////////////////////
//     Function: TexMatrixAttrib::get_override
//       Access: Published
//  Description: Returns the override value associated with the
//               indicated stage.
////////////////////////////////////////////////////////////////////
68
inline int TexMatrixAttrib::get_override(TextureStage *stage) const;

2012 18 get_geom_rendering 0 4 3484 35 TexMatrixAttrib::get_geom_rendering 0 1 150 454
////////////////////////////////////////////////////////////////////
//     Function: TexMatrixAttrib::get_geom_rendering
//       Access: Published
//  Description: Returns the union of the Geom::GeomRendering bits
//               that will be required once this TexMatrixAttrib is
//               applied to a geom which includes the indicated
//               geom_rendering bits.
////////////////////////////////////////////////////////////////////
73
inline int TexMatrixAttrib::get_geom_rendering(int geom_rendering) const;

2013 14 get_class_slot 0 4 3484 31 TexMatrixAttrib::get_class_slot 0 1 151 0
49
static int TexMatrixAttrib::get_class_slot(void);

2014 14 get_class_type 0 4 3484 31 TexMatrixAttrib::get_class_type 0 1 152 0
56
static TypeHandle TexMatrixAttrib::get_class_type(void);

2015 10 compare_to 0 4 3485 23 RenderState::compare_to 0 1 153 667
////////////////////////////////////////////////////////////////////
//     Function: RenderState::compare_to
//       Access: Published
//  Description: Provides an arbitrary ordering among all unique
//               RenderStates, so we can store the essentially
//               different ones in a big set and throw away the rest.
//
//               This method is not needed outside of the RenderState
//               class because all equivalent RenderState objects are
//               guaranteed to share the same pointer; thus, a pointer
//               comparison is always sufficient.
////////////////////////////////////////////////////////////////////
60
int RenderState::compare_to(RenderState const &other) const;

2016 12 compare_sort 0 4 3485 25 RenderState::compare_sort 0 1 154 620
////////////////////////////////////////////////////////////////////
//     Function: RenderState::compare_sort
//       Access: Published
//  Description: Returns -1, 0, or 1 according to the relative sorting
//               of these two RenderStates, with regards to rendering
//               performance, so that "heavier" RenderAttribs (as
//               defined by RenderAttribRegistry::get_slot_sort()) are
//               more likely to be grouped together.  This is not
//               related to the sorting order defined by compare_to.
////////////////////////////////////////////////////////////////////
62
int RenderState::compare_sort(RenderState const &other) const;

2017 12 compare_mask 0 4 3485 25 RenderState::compare_mask 0 1 155 450
////////////////////////////////////////////////////////////////////
//     Function: RenderState::compare_mask
//       Access: Published
//  Description: This version of compare_to takes a slot mask that
//               indicates which attributes to include in the
//               comparison.  Unlike compare_to, this method
//               compares the attributes by pointer.
////////////////////////////////////////////////////////////////////
98
int RenderState::compare_mask(RenderState const &other, RenderState::SlotMask compare_mask) const;

2018 8 get_hash 0 4 3485 21 RenderState::get_hash 0 1 156 265
////////////////////////////////////////////////////////////////////
//     Function: RenderState::get_hash
//       Access: Published
//  Description: Returns a suitable hash value for phash_map.
////////////////////////////////////////////////////////////////////
48
inline size_t RenderState::get_hash(void) const;

2019 8 is_empty 0 4 3485 21 RenderState::is_empty 0 1 157 273
////////////////////////////////////////////////////////////////////
//     Function: RenderState::is_empty
//       Access: Published
//  Description: Returns true if the state is empty, false otherwise.
////////////////////////////////////////////////////////////////////
46
inline bool RenderState::is_empty(void) const;

2020 17 has_cull_callback 0 4 3485 30 RenderState::has_cull_callback 0 1 158 371
////////////////////////////////////////////////////////////////////
//     Function: RenderState::has_cull_callback
//       Access: Published
//  Description: Returns true if any of the RenderAttribs in this
//               state request a cull_callback(), false if none of
//               them do.
////////////////////////////////////////////////////////////////////
55
inline bool RenderState::has_cull_callback(void) const;

2021 13 cull_callback 0 4 3485 26 RenderState::cull_callback 0 1 159 443
////////////////////////////////////////////////////////////////////
//     Function: RenderState::cull_callback
//       Access: Published
//  Description: Calls cull_callback() on each attrib.  If any attrib
//               returns false, interrupts the list and returns false
//               immediately; otherwise, completes the list and
//               returns true.
////////////////////////////////////////////////////////////////////
90
bool RenderState::cull_callback(CullTraverser *trav, CullTraverserData const &data) const;

2022 10 make_empty 0 4 3485 23 RenderState::make_empty 0 1 160 276
////////////////////////////////////////////////////////////////////
//     Function: RenderState::make_empty
//       Access: Published, Static
//  Description: Returns a RenderState with no attributes set.
////////////////////////////////////////////////////////////////////
74
static inline ConstPointerTo< RenderState > RenderState::make_empty(void);

2023 17 make_full_default 0 4 3485 30 RenderState::make_full_default 0 1 161 333
////////////////////////////////////////////////////////////////////
//     Function: RenderState::make_full_default
//       Access: Published, Static
//  Description: Returns a RenderState with all possible attributes
//               set to their default value.
////////////////////////////////////////////////////////////////////
81
static inline ConstPointerTo< RenderState > RenderState::make_full_default(void);

2024 4 make 0 4 3485 17 RenderState::make 0 4 162 163 164 165 1363
////////////////////////////////////////////////////////////////////
//     Function: RenderState::make
//       Access: Published, Static
//  Description: Returns a RenderState with one attribute set.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: RenderState::make
//       Access: Published, Static
//  Description: Returns a RenderState with two attributes set.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: RenderState::make
//       Access: Published, Static
//  Description: Returns a RenderState with three attributes set.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: RenderState::make
//       Access: Published, Static
//  Description: Returns a RenderState with four attributes set.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: RenderState::make
//       Access: Published, Static
//  Description: Returns a RenderState with n attributes set.
////////////////////////////////////////////////////////////////////
710
static ConstPointerTo< RenderState > RenderState::make(RenderAttrib const *attrib, int override = 0);
static ConstPointerTo< RenderState > RenderState::make(RenderAttrib const *attrib1, RenderAttrib const *attrib2, int override = 0);
static ConstPointerTo< RenderState > RenderState::make(RenderAttrib const *attrib1, RenderAttrib const *attrib2, RenderAttrib const *attrib3, int override = 0);
static ConstPointerTo< RenderState > RenderState::make(RenderAttrib const *attrib1, RenderAttrib const *attrib2, RenderAttrib const *attrib3, RenderAttrib const *attrib4, int override = 0);
static ConstPointerTo< RenderState > RenderState::make(RenderAttrib const *const *attrib, int num_attribs, int override = 0);

2025 7 compose 0 4 3485 20 RenderState::compose 0 1 166 711
////////////////////////////////////////////////////////////////////
//     Function: RenderState::compose
//       Access: Published
//  Description: Returns a new RenderState object that represents the
//               composition of this state with the other state.
//
//               The result of this operation is cached, and will be
//               retained as long as both this RenderState object and
//               the other RenderState object continue to exist.
//               Should one of them destruct, the cached entry will be
//               removed, and its pointer will be allowed to destruct
//               as well.
////////////////////////////////////////////////////////////////////
83
ConstPointerTo< RenderState > RenderState::compose(RenderState const *other) const;

2026 14 invert_compose 0 4 3485 27 RenderState::invert_compose 0 1 167 557
////////////////////////////////////////////////////////////////////
//     Function: RenderState::invert_compose
//       Access: Published
//  Description: Returns a new RenderState object that represents the
//               composition of this state's inverse with the other
//               state.
//
//               This is similar to compose(), but is particularly
//               useful for computing the relative state of a node as
//               viewed from some other node.
////////////////////////////////////////////////////////////////////
90
ConstPointerTo< RenderState > RenderState::invert_compose(RenderState const *other) const;

2027 10 add_attrib 0 4 3485 23 RenderState::add_attrib 0 1 168 505
////////////////////////////////////////////////////////////////////
//     Function: RenderState::add_attrib
//       Access: Published
//  Description: Returns a new RenderState object that represents the
//               same as the source state, with the new RenderAttrib
//               added.  If there is already a RenderAttrib with the
//               same type, it is replaced (unless the override is
//               lower).
////////////////////////////////////////////////////////////////////
106
ConstPointerTo< RenderState > RenderState::add_attrib(RenderAttrib const *attrib, int override = 0) const;

2028 10 set_attrib 0 4 3485 23 RenderState::set_attrib 0 2 169 170 1060
////////////////////////////////////////////////////////////////////
//     Function: RenderState::set_attrib
//       Access: Published
//  Description: Returns a new RenderState object that represents the
//               same as the source state, with the new RenderAttrib
//               added.  If there is already a RenderAttrib with the
//               same type, it is replaced unconditionally.  The
//               override is not changed.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: RenderState::set_attrib
//       Access: Published
//  Description: Returns a new RenderState object that represents the
//               same as the source state, with the new RenderAttrib
//               added.  If there is already a RenderAttrib with the
//               same type, it is replaced unconditionally.  The
//               override is also replaced unconditionally.
////////////////////////////////////////////////////////////////////
191
ConstPointerTo< RenderState > RenderState::set_attrib(RenderAttrib const *attrib) const;
ConstPointerTo< RenderState > RenderState::set_attrib(RenderAttrib const *attrib, int override) const;

2029 13 remove_attrib 0 4 3485 26 RenderState::remove_attrib 0 2 171 172 760
////////////////////////////////////////////////////////////////////
//     Function: RenderState::remove_attrib
//       Access: Published
//  Description: Returns a new RenderState object that represents the
//               same as the source state, with the indicated
//               RenderAttrib removed.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: RenderState::remove_attrib
//       Access: Published
//  Description: Returns a new RenderState object that represents the
//               same as the source state, with the indicated
//               RenderAttrib removed.
////////////////////////////////////////////////////////////////////
161
inline ConstPointerTo< RenderState > RenderState::remove_attrib(TypeHandle type) const;
ConstPointerTo< RenderState > RenderState::remove_attrib(int slot) const;

2030 21 adjust_all_priorities 0 4 3485 34 RenderState::adjust_all_priorities 0 1 173 543
////////////////////////////////////////////////////////////////////
//     Function: RenderState::adjust_all_priorities
//       Access: Published
//  Description: Returns a new RenderState object that represents the
//               same as the source state, with all attributes'
//               override values incremented (or decremented, if
//               negative) by the indicated amount.  If the override
//               would drop below zero, it is set to zero.
////////////////////////////////////////////////////////////////////
87
ConstPointerTo< RenderState > RenderState::adjust_all_priorities(int adjustment) const;

2031 10 has_attrib 0 4 3485 23 RenderState::has_attrib 0 2 174 175 634
////////////////////////////////////////////////////////////////////
//     Function: RenderState::has_attrib
//       Access: Published
//  Description: Returns true if an attrib of the indicated type is
//               present, false otherwise.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: RenderState::has_attrib
//       Access: Published
//  Description: Returns true if an attrib of the indicated type is
//               present, false otherwise.
////////////////////////////////////////////////////////////////////
112
inline bool RenderState::has_attrib(TypeHandle type) const;
inline bool RenderState::has_attrib(int slot) const;

2032 10 get_attrib 0 4 3485 23 RenderState::get_attrib 0 2 176 177 739
////////////////////////////////////////////////////////////////////
//     Function: RenderState::get_attrib
//       Access: Published
//  Description: Looks for a RenderAttrib of the indicated type in the
//               state, and returns it if it is found, or NULL if it
//               is not.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: RenderState::get_attrib
//       Access: Published
//  Description: Returns the RenderAttrib with the indicated slot
//               index, or NULL if there is no such RenderAttrib in
//               the state.
////////////////////////////////////////////////////////////////////
142
inline RenderAttrib const *RenderState::get_attrib(TypeHandle type) const;
inline RenderAttrib const *RenderState::get_attrib(int slot) const;

2033 14 get_attrib_def 0 4 3485 27 RenderState::get_attrib_def 0 1 178 399
////////////////////////////////////////////////////////////////////
//     Function: RenderState::get_attrib_def
//       Access: Published
//  Description: Returns the RenderAttrib with the indicated slot
//               index, or the default attrib for that slot if there
//               is no such RenderAttrib in the state.
////////////////////////////////////////////////////////////////////
71
inline RenderAttrib const *RenderState::get_attrib_def(int slot) const;

2034 12 get_override 0 4 3485 25 RenderState::get_override 0 2 179 180 772
////////////////////////////////////////////////////////////////////
//     Function: RenderState::get_override
//       Access: Published
//  Description: Looks for a RenderAttrib of the indicated type in the
//               state, and returns its override value if it is found,
//               or 0 if it is not.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: RenderState::get_override
//       Access: Published
//  Description: Looks for a RenderAttrib of the indicated type in the
//               state, and returns its override value if it is found,
//               or 0 if it is not.
////////////////////////////////////////////////////////////////////
114
inline int RenderState::get_override(TypeHandle type) const;
inline int RenderState::get_override(int slot) const;

2035 10 get_unique 0 4 3485 23 RenderState::get_unique 0 1 181 613
////////////////////////////////////////////////////////////////////
//     Function: RenderState::get_unique
//       Access: Published
//  Description: Returns the pointer to the unique RenderState in
//               the cache that is equivalent to this one.  This may
//               be the same pointer as this object, or it may be a
//               different pointer; but it will be an equivalent
//               object, and it will be a shared pointer.  This may be
//               called from time to time to improve cache benefits.
////////////////////////////////////////////////////////////////////
73
inline ConstPointerTo< RenderState > RenderState::get_unique(void) const;

2036 9 cache_ref 0 4 3485 22 RenderState::cache_ref 0 1 182 275
////////////////////////////////////////////////////////////////////
//     Function: RenderState::cache_ref
//       Access: Published
//  Description: Overrides this method to update PStats appropriately.
////////////////////////////////////////////////////////////////////
47
inline void RenderState::cache_ref(void) const;

2037 11 cache_unref 0 4 3485 24 RenderState::cache_unref 0 1 183 277
////////////////////////////////////////////////////////////////////
//     Function: RenderState::cache_unref
//       Access: Published
//  Description: Overrides this method to update PStats appropriately.
////////////////////////////////////////////////////////////////////
49
inline bool RenderState::cache_unref(void) const;

2038 8 node_ref 0 4 3485 21 RenderState::node_ref 0 1 184 274
////////////////////////////////////////////////////////////////////
//     Function: RenderState::node_ref
//       Access: Published
//  Description: Overrides this method to update PStats appropriately.
////////////////////////////////////////////////////////////////////
46
inline void RenderState::node_ref(void) const;

2039 10 node_unref 0 4 3485 23 RenderState::node_unref 0 1 185 276
////////////////////////////////////////////////////////////////////
//     Function: RenderState::node_unref
//       Access: Published
//  Description: Overrides this method to update PStats appropriately.
////////////////////////////////////////////////////////////////////
48
inline bool RenderState::node_unref(void) const;

2040 33 get_composition_cache_num_entries 0 4 3485 46 RenderState::get_composition_cache_num_entries 0 1 186 566
////////////////////////////////////////////////////////////////////
//     Function: RenderState::get_composition_cache_num_entries
//       Access: Published
//  Description: Returns the number of entries in the composition
//               cache for this RenderState.  This is the number of
//               other RenderStates whose composition with this one
//               has been cached.  This number is not useful for any
//               practical reason other than performance analysis.
////////////////////////////////////////////////////////////////////
70
inline int RenderState::get_composition_cache_num_entries(void) const;

2041 40 get_invert_composition_cache_num_entries 0 4 3485 53 RenderState::get_invert_composition_cache_num_entries 0 1 187 553
////////////////////////////////////////////////////////////////////
//     Function: RenderState::get_invert_composition_cache_num_entries
//       Access: Published
//  Description: Returns the number of entries in the
//               invert_composition cache for this RenderState.
//               This is similar to the composition cache, but it
//               records cache entries for the invert_compose()
//               operation.  See get_composition_cache_num_entries().
////////////////////////////////////////////////////////////////////
77
inline int RenderState::get_invert_composition_cache_num_entries(void) const;

2042 26 get_composition_cache_size 0 4 3485 39 RenderState::get_composition_cache_size 0 1 188 649
////////////////////////////////////////////////////////////////////
//     Function: RenderState::get_composition_cache_size
//       Access: Published
//  Description: Returns the number of slots in the composition
//               cache for this RenderState.  You may use this as
//               an upper bound when walking through all of the
//               composition cache results via
//               get_composition_cache_source() or result().
//
//               This has no practical value other than for examining
//               the cache for performance analysis.
////////////////////////////////////////////////////////////////////
63
inline int RenderState::get_composition_cache_size(void) const;

2043 28 get_composition_cache_source 0 4 3485 41 RenderState::get_composition_cache_source 0 1 189 602
////////////////////////////////////////////////////////////////////
//     Function: RenderState::get_composition_cache_source
//       Access: Published
//  Description: Returns the source RenderState of the nth element
//               in the composition cache.  Returns NULL if there
//               doesn't happen to be an entry in the nth element.
//               See get_composition_cache_result().
//
//               This has no practical value other than for examining
//               the cache for performance analysis.
////////////////////////////////////////////////////////////////////
81
inline RenderState const *RenderState::get_composition_cache_source(int n) const;

2044 28 get_composition_cache_result 0 4 3485 41 RenderState::get_composition_cache_result 0 1 190 701
////////////////////////////////////////////////////////////////////
//     Function: RenderState::get_composition_cache_result
//       Access: Published
//  Description: Returns the result RenderState of the nth element
//               in the composition cache.  Returns NULL if there
//               doesn't happen to be an entry in the nth element.
//
//               In general,
//               a->compose(a->get_composition_cache_source(n)) ==
//               a->get_composition_cache_result(n).
//
//               This has no practical value other than for examining
//               the cache for performance analysis.
////////////////////////////////////////////////////////////////////
81
inline RenderState const *RenderState::get_composition_cache_result(int n) const;

2045 33 get_invert_composition_cache_size 0 4 3485 46 RenderState::get_invert_composition_cache_size 0 1 191 663
////////////////////////////////////////////////////////////////////
//     Function: RenderState::get_invert_composition_cache_size
//       Access: Published
//  Description: Returns the number of slots in the composition
//               cache for this RenderState.  You may use this as
//               an upper bound when walking through all of the
//               composition cache results via
//               get_invert_composition_cache_source() or result().
//
//               This has no practical value other than for examining
//               the cache for performance analysis.
////////////////////////////////////////////////////////////////////
70
inline int RenderState::get_invert_composition_cache_size(void) const;

2046 35 get_invert_composition_cache_source 0 4 3485 48 RenderState::get_invert_composition_cache_source 0 1 192 624
////////////////////////////////////////////////////////////////////
//     Function: RenderState::get_invert_composition_cache_source
//       Access: Published
//  Description: Returns the source RenderState of the nth element
//               in the invert composition cache.  Returns NULL if
//               there doesn't happen to be an entry in the nth
//               element.  See get_invert_composition_cache_result().
//
//               This has no practical value other than for examining
//               the cache for performance analysis.
////////////////////////////////////////////////////////////////////
88
inline RenderState const *RenderState::get_invert_composition_cache_source(int n) const;

2047 35 get_invert_composition_cache_result 0 4 3485 48 RenderState::get_invert_composition_cache_result 0 1 193 753
////////////////////////////////////////////////////////////////////
//     Function: RenderState::get_invert_composition_cache_result
//       Access: Published
//  Description: Returns the result RenderState of the nth element
//               in the invert composition cache.  Returns NULL if
//               there doesn't happen to be an entry in the nth
//               element.
//
//               In general,
//               a->invert_compose(a->get_invert_composition_cache_source(n))
//               == a->get_invert_composition_cache_result(n).
//
//               This has no practical value other than for examining
//               the cache for performance analysis.
////////////////////////////////////////////////////////////////////
88
inline RenderState const *RenderState::get_invert_composition_cache_result(int n) const;

2048 21 get_composition_cache 0 4 3485 34 RenderState::get_composition_cache 0 1 194 0
57
PyObject *RenderState::get_composition_cache(void) const;

2049 28 get_invert_composition_cache 0 4 3485 41 RenderState::get_invert_composition_cache 0 1 195 0
64
PyObject *RenderState::get_invert_composition_cache(void) const;

2050 21 get_auto_shader_state 0 4 3485 34 RenderState::get_auto_shader_state 0 1 196 831
////////////////////////////////////////////////////////////////////
//     Function: RenderState::get_auto_shader_state
//       Access: Published
//  Description: Returns the base RenderState that should have the
//               generated_shader stored within it, for generated
//               shader states.  The returned object might be the same
//               as this object, or it might be a different
//               RenderState with certain attributes removed, or set
//               to their default values.
//
//               The point is to avoid needless regeneration of the
//               shader attrib by storing the generated shader on a
//               common RenderState object, with all irrelevant
//               attributes removed.
////////////////////////////////////////////////////////////////////
66
RenderState const *RenderState::get_auto_shader_state(void) const;

2051 6 output 0 4 3485 19 RenderState::output 0 1 197 218
////////////////////////////////////////////////////////////////////
//     Function: RenderState::output
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
45
void RenderState::output(ostream &out) const;

2052 5 write 0 4 3485 18 RenderState::write 0 1 198 217
////////////////////////////////////////////////////////////////////
//     Function: RenderState::write
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
62
void RenderState::write(ostream &out, int indent_level) const;

2053 16 get_max_priority 0 4 3485 29 RenderState::get_max_priority 0 1 199 599
////////////////////////////////////////////////////////////////////
//     Function: RenderState::get_max_priority
//       Access: Published, Static
//  Description: Returns the maximum priority number (sometimes called
//               override) that may be set on any node.  This may or
//               may not be enforced, but the scene graph code assumes
//               that no priority numbers will be larger than this,
//               and some effects may not work properly if you use a
//               larger number.
////////////////////////////////////////////////////////////////////
47
static int RenderState::get_max_priority(void);

2054 14 get_num_states 0 4 3485 27 RenderState::get_num_states 0 1 200 399
////////////////////////////////////////////////////////////////////
//     Function: RenderState::get_num_states
//       Access: Published, Static
//  Description: Returns the total number of unique RenderState
//               objects allocated in the world.  This will go up and
//               down during normal operations.
////////////////////////////////////////////////////////////////////
45
static int RenderState::get_num_states(void);

2055 21 get_num_unused_states 0 4 3485 34 RenderState::get_num_unused_states 0 1 201 990
////////////////////////////////////////////////////////////////////
//     Function: RenderState::get_num_unused_states
//       Access: Published, Static
//  Description: Returns the total number of RenderState objects that
//               have been allocated but have no references outside of
//               the internal RenderState cache.
//
//               A nonzero return value is not necessarily indicative
//               of leaked references; it is normal for two
//               RenderState objects, both of which have references
//               held outside the cache, to have to result of their
//               composition stored within the cache.  This result
//               will be retained within the cache until one of the
//               base RenderStates is released.
//
//               Use list_cycles() to get an idea of the number of
//               actual "leaked" RenderState objects.
////////////////////////////////////////////////////////////////////
52
static int RenderState::get_num_unused_states(void);

2056 11 clear_cache 0 4 3485 24 RenderState::clear_cache 0 1 202 997
////////////////////////////////////////////////////////////////////
//     Function: RenderState::clear_cache
//       Access: Published, Static
//  Description: Empties the cache of composed RenderStates.  This
//               makes every RenderState forget what results when
//               it is composed with other RenderStates.
//
//               This will eliminate any RenderState objects that
//               have been allocated but have no references outside of
//               the internal RenderState map.  It will not
//               eliminate RenderState objects that are still in
//               use.
//
//               Nowadays, this method should not be necessary, as
//               reference-count cycles in the composition cache
//               should be automatically detected and broken.
//
//               The return value is the number of RenderStates
//               freed by this operation.
////////////////////////////////////////////////////////////////////
42
static int RenderState::clear_cache(void);

2057 18 clear_munger_cache 0 4 3485 31 RenderState::clear_munger_cache 0 1 203 405
////////////////////////////////////////////////////////////////////
//     Function: RenderState::clear_munger_cache
//       Access: Published, Static
//  Description: Completely empties the cache of state + gsg ->
//               munger, for all states and all gsg's.  Normally there
//               is no need to empty this cache.
////////////////////////////////////////////////////////////////////
50
static void RenderState::clear_munger_cache(void);

2058 15 garbage_collect 0 4 3485 28 RenderState::garbage_collect 0 1 204 698
////////////////////////////////////////////////////////////////////
//     Function: RenderState::garbage_collect
//       Access: Published, Static
//  Description: Performs a garbage-collection cycle.  This must be
//               called periodically if garbage-collect-states is true
//               to ensure that RenderStates get cleaned up
//               appropriately.  It does no harm to call it even if
//               this variable is not true, but there is probably no
//               advantage in that case.
//
//               This automatically calls
//               RenderAttrib::garbage_collect() as well.
////////////////////////////////////////////////////////////////////
46
static int RenderState::garbage_collect(void);

2059 11 list_cycles 0 4 3485 24 RenderState::list_cycles 0 1 205 948
////////////////////////////////////////////////////////////////////
//     Function: RenderState::list_cycles
//       Access: Published, Static
//  Description: Detects all of the reference-count cycles in the
//               cache and reports them to standard output.
//
//               These cycles may be inadvertently created when state
//               compositions cycle back to a starting point.
//               Nowadays, these cycles should be automatically
//               detected and broken, so this method should never list
//               any cycles unless there is a bug in that detection
//               logic.
//
//               The cycles listed here are not leaks in the strictest
//               sense of the word, since they can be reclaimed by a
//               call to clear_cache(); but they will not be reclaimed
//               automatically.
////////////////////////////////////////////////////////////////////
51
static void RenderState::list_cycles(ostream &out);

2060 11 list_states 0 4 3485 24 RenderState::list_states 0 1 206 418
////////////////////////////////////////////////////////////////////
//     Function: RenderState::list_states
//       Access: Published, Static
//  Description: Lists all of the RenderStates in the cache to the
//               output stream, one per line.  This can be quite a lot
//               of output if the cache is large, so be prepared.
////////////////////////////////////////////////////////////////////
51
static void RenderState::list_states(ostream &out);

2061 15 validate_states 0 4 3485 28 RenderState::validate_states 0 1 207 580
////////////////////////////////////////////////////////////////////
//     Function: RenderState::validate_states
//       Access: Published, Static
//  Description: Ensures that the cache is still stored in sorted
//               order, and that none of the cache elements have been
//               inadvertently deleted.  Returns true if so, false if
//               there is a problem (which implies someone has
//               modified one of the supposedly-const RenderState
//               objects).
////////////////////////////////////////////////////////////////////
47
static bool RenderState::validate_states(void);

2062 10 get_states 0 4 3485 23 RenderState::get_states 0 1 208 0
47
static PyObject *RenderState::get_states(void);

2063 14 get_draw_order 0 4 3485 27 RenderState::get_draw_order 0 1 209 529
// These methods are intended for use by low-level code, but they're
// also handy enough to expose to high-level users.

////////////////////////////////////////////////////////////////////
//     Function: RenderState::get_draw_order
//       Access: Published
//  Description: Returns the draw order indicated by the
//               CullBinAttrib, if any, associated by this state (or 0
//               if there is no CullBinAttrib).  See get_bin_index().
////////////////////////////////////////////////////////////////////
51
inline int RenderState::get_draw_order(void) const;

2064 13 get_bin_index 0 4 3485 26 RenderState::get_bin_index 0 1 210 520
////////////////////////////////////////////////////////////////////
//     Function: RenderState::get_bin_index
//       Access: Published
//  Description: Returns the bin index indicated by the CullBinAttrib,
//               if any, associated by this state (or the default bin
//               index if there is no CullBinAttrib).  This function
//               is provided as an optimization for determining this
//               at render time.
////////////////////////////////////////////////////////////////////
50
inline int RenderState::get_bin_index(void) const;

2065 18 get_geom_rendering 0 4 3485 31 RenderState::get_geom_rendering 0 1 211 446
////////////////////////////////////////////////////////////////////
//     Function: RenderState::get_geom_rendering
//       Access: Published
//  Description: Returns the union of the Geom::GeomRendering bits
//               that will be required once this RenderState is
//               applied to a geom which includes the indicated
//               geom_rendering bits.
////////////////////////////////////////////////////////////////////
62
int RenderState::get_geom_rendering(int geom_rendering) const;

2066 14 get_class_type 0 4 3485 27 RenderState::get_class_type 0 1 212 0
52
static TypeHandle RenderState::get_class_type(void);

2067 4 make 0 4 3486 21 AlphaTestAttrib::make 0 1 213 269
////////////////////////////////////////////////////////////////////
//     Function: AlphaTestAttrib::make
//       Access: Published, Static
//  Description: Constructs a new AlphaTestAttrib object.
////////////////////////////////////////////////////////////////////
126
static ConstPointerTo< RenderAttrib > AlphaTestAttrib::make(RenderAttrib::PandaCompareFunc mode, PN_stdfloat reference_alpha);

2068 12 make_default 0 4 3486 29 AlphaTestAttrib::make_default 0 1 214 402
////////////////////////////////////////////////////////////////////
//     Function: AlphaTestAttrib::make_default
//       Access: Published, Static
//  Description: Returns a RenderAttrib that corresponds to whatever
//               the standard default properties for render attributes
//               of this type ought to be.
////////////////////////////////////////////////////////////////////
74
static ConstPointerTo< RenderAttrib > AlphaTestAttrib::make_default(void);

2069 19 get_reference_alpha 0 4 3486 36 AlphaTestAttrib::get_reference_alpha 0 1 215 270
////////////////////////////////////////////////////////////////////
//     Function: AlphaTestAttrib::get_reference_alpha
//       Access: Published
//  Description: Returns the alpha reference value.
////////////////////////////////////////////////////////////////////
68
inline PN_stdfloat AlphaTestAttrib::get_reference_alpha(void) const;

2070 8 get_mode 0 4 3486 25 AlphaTestAttrib::get_mode 0 1 216 254
////////////////////////////////////////////////////////////////////
//     Function: AlphaTestAttrib::get_mode
//       Access: Published
//  Description: Returns the alpha write mode.
////////////////////////////////////////////////////////////////////
76
inline RenderAttrib::PandaCompareFunc AlphaTestAttrib::get_mode(void) const;

2071 14 get_class_slot 0 4 3486 31 AlphaTestAttrib::get_class_slot 0 1 217 0
49
static int AlphaTestAttrib::get_class_slot(void);

2072 14 get_class_type 0 4 3486 31 AlphaTestAttrib::get_class_type 0 1 218 0
56
static TypeHandle AlphaTestAttrib::get_class_type(void);

2073 16 ~AlphaTestAttrib 0 4 3486 33 AlphaTestAttrib::~AlphaTestAttrib 0 0 0
40
AlphaTestAttrib::~AlphaTestAttrib(void);

2074 4 make 0 4 3487 21 AntialiasAttrib::make 0 1 219 1915
////////////////////////////////////////////////////////////////////
//     Function: AntialiasAttrib::make
//       Access: Published, Static
//  Description: Constructs a new AntialiasAttrib object.
//
//               The mode should be either M_none, M_auto, or a union
//               of any or all of M_point, M_line, M_polygon, and
//               M_multisample.  Also, in addition to the above
//               choices, it may include either of M_better of
//               M_faster to specify a performance/quality tradeoff
//               hint.
//
//               If M_none is specified, no antialiasing is performed.
//
//               If M_multisample is specified, it means to use the
//               special framebuffer multisample bits for
//               antialiasing, if it is available.  If so, the
//               M_point, M_line, and M_polygon modes are ignored.
//               This advanced antialiasing mode is only available on
//               certain graphics hardware.  If it is not available,
//               the M_multisample bit is ignored (and the other modes
//               may be used instead, if specified).
//
//               M_point, M_line, and/or M_polygon specify
//               per-primitive smoothing.  When enabled, M_point and
//               M_line may force transparency on.  M_polygon requires
//               a frame buffer that includes an alpha channel, and it
//               works best if the primitives are sorted
//               front-to-back.
//
//               If M_auto is specified, M_multisample is selected if
//               it is available, otherwise M_polygon is selected,
//               unless drawing lines or points, in which case M_line
//               or M_point is selected (these two generally produce
//               better results than M_multisample)
////////////////////////////////////////////////////////////////////
85
static ConstPointerTo< RenderAttrib > AntialiasAttrib::make(unsigned short int mode);

2075 12 make_default 0 4 3487 29 AntialiasAttrib::make_default 0 1 220 402
////////////////////////////////////////////////////////////////////
//     Function: AntialiasAttrib::make_default
//       Access: Published, Static
//  Description: Returns a RenderAttrib that corresponds to whatever
//               the standard default properties for render attributes
//               of this type ought to be.
////////////////////////////////////////////////////////////////////
74
static ConstPointerTo< RenderAttrib > AntialiasAttrib::make_default(void);

2076 8 get_mode 0 4 3487 25 AntialiasAttrib::get_mode 0 1 221 262
////////////////////////////////////////////////////////////////////
//     Function: AntialiasAttrib::get_mode
//       Access: Published
//  Description: Returns the specified antialias mode.
////////////////////////////////////////////////////////////////////
64
inline unsigned short int AntialiasAttrib::get_mode(void) const;

2077 13 get_mode_type 0 4 3487 30 AntialiasAttrib::get_mode_type 0 1 222 465
////////////////////////////////////////////////////////////////////
//     Function: AntialiasAttrib::get_mode_type
//       Access: Published
//  Description: Returns the specified antialias mode, with the
//               quality bits masked out.  This therefore indicates
//               only the requested type of antialiasing: M_none,
//               M_auto, or some specific combination.
////////////////////////////////////////////////////////////////////
69
inline unsigned short int AntialiasAttrib::get_mode_type(void) const;

2078 16 get_mode_quality 0 4 3487 33 AntialiasAttrib::get_mode_quality 0 1 223 478
////////////////////////////////////////////////////////////////////
//     Function: AntialiasAttrib::get_mode_quality
//       Access: Published
//  Description: Returns the specified antialias mode, with the type
//               bits masked out.  This therefore indicates only the
//               requested quality settings: one of M_faster,
//               M_better, M_dont_care, or zero (unspecified).
////////////////////////////////////////////////////////////////////
72
inline unsigned short int AntialiasAttrib::get_mode_quality(void) const;

2079 14 get_class_slot 0 4 3487 31 AntialiasAttrib::get_class_slot 0 1 224 0
49
static int AntialiasAttrib::get_class_slot(void);

2080 14 get_class_type 0 4 3487 31 AntialiasAttrib::get_class_type 0 1 225 0
56
static TypeHandle AntialiasAttrib::get_class_type(void);

2081 16 ~AntialiasAttrib 0 4 3487 33 AntialiasAttrib::~AntialiasAttrib 0 0 0
40
AntialiasAttrib::~AntialiasAttrib(void);

2082 10 compare_to 0 4 3489 24 RenderEffect::compare_to 0 1 226 671
////////////////////////////////////////////////////////////////////
//     Function: RenderEffect::compare_to
//       Access: Published
//  Description: Provides an arbitrary ordering among all unique
//               RenderEffects, so we can store the essentially
//               different ones in a big set and throw away the rest.
//
//               This method is not needed outside of the RenderEffect
//               class because all equivalent RenderEffect objects are
//               guaranteed to share the same pointer; thus, a pointer
//               comparison is always sufficient.
////////////////////////////////////////////////////////////////////
69
inline int RenderEffect::compare_to(RenderEffect const &other) const;

2083 6 output 0 6 3489 20 RenderEffect::output 0 1 227 229
////////////////////////////////////////////////////////////////////
//     Function: RenderEffect::output
//       Access: Published, Virtual
//  Description: 
////////////////////////////////////////////////////////////////////
54
virtual void RenderEffect::output(ostream &out) const;

2084 5 write 0 6 3489 19 RenderEffect::write 0 1 228 228
////////////////////////////////////////////////////////////////////
//     Function: RenderEffect::write
//       Access: Published, Virtual
//  Description: 
////////////////////////////////////////////////////////////////////
71
virtual void RenderEffect::write(ostream &out, int indent_level) const;

2085 15 get_num_effects 0 4 3489 29 RenderEffect::get_num_effects 0 1 229 402
////////////////////////////////////////////////////////////////////
//     Function: RenderEffect::get_num_effects
//       Access: Published, Static
//  Description: Returns the total number of unique RenderEffect
//               objects allocated in the world.  This will go up and
//               down during normal operations.
////////////////////////////////////////////////////////////////////
47
static int RenderEffect::get_num_effects(void);

2086 12 list_effects 0 4 3489 26 RenderEffect::list_effects 0 1 230 421
////////////////////////////////////////////////////////////////////
//     Function: RenderEffect::list_effects
//       Access: Published, Static
//  Description: Lists all of the RenderEffects in the cache to the
//               output stream, one per line.  This can be quite a lot
//               of output if the cache is large, so be prepared.
////////////////////////////////////////////////////////////////////
53
static void RenderEffect::list_effects(ostream &out);

2087 16 validate_effects 0 4 3489 30 RenderEffect::validate_effects 0 1 231 480
////////////////////////////////////////////////////////////////////
//     Function: RenderEffect::validate_effects
//       Access: Published, Static
//  Description: Ensures that the cache is still stored in sorted
//               order.  Returns true if so, false if there is a
//               problem (which implies someone has modified one of
//               the supposedly-const RenderEffect objects).
////////////////////////////////////////////////////////////////////
49
static bool RenderEffect::validate_effects(void);

2088 14 get_class_type 0 4 3489 28 RenderEffect::get_class_type 0 1 232 0
53
static TypeHandle RenderEffect::get_class_type(void);

2089 10 operator < 0 4 3490 25 RenderEffects::operator < 0 1 233 0
65
bool RenderEffects::operator <(RenderEffects const &other) const;

2090 8 is_empty 0 4 3490 23 RenderEffects::is_empty 0 1 234 275
////////////////////////////////////////////////////////////////////
//     Function: RenderEffects::is_empty
//       Access: Published
//  Description: Returns true if the state is empty, false otherwise.
////////////////////////////////////////////////////////////////////
48
inline bool RenderEffects::is_empty(void) const;

2091 15 get_num_effects 0 4 3490 30 RenderEffects::get_num_effects 0 1 235 309
////////////////////////////////////////////////////////////////////
//     Function: RenderEffects::get_num_effects
//       Access: Published
//  Description: Returns the number of separate effects indicated
//               in the state.
////////////////////////////////////////////////////////////////////
54
inline int RenderEffects::get_num_effects(void) const;

2092 10 get_effect 0 4 3490 25 RenderEffects::get_effect 0 2 236 237 644
////////////////////////////////////////////////////////////////////
//     Function: RenderEffects::get_effect
//       Access: Published
//  Description: Returns the nth effect in the state.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: RenderEffects::get_effect
//       Access: Published, Virtual
//  Description: Looks for a RenderEffect of the indicated type in the
//               state, and returns it if it is found, or NULL if it
//               is not.
////////////////////////////////////////////////////////////////////
136
inline RenderEffect const *RenderEffects::get_effect(int n) const;
RenderEffect const *RenderEffects::get_effect(TypeHandle type) const;

2093 11 find_effect 0 4 3490 26 RenderEffects::find_effect 0 1 238 378
////////////////////////////////////////////////////////////////////
//     Function: RenderEffects::find_effect
//       Access: Published
//  Description: Searches for an effect with the indicated type in
//               the state, and returns its index if it is found, or
//               -1 if it is not.
////////////////////////////////////////////////////////////////////
54
int RenderEffects::find_effect(TypeHandle type) const;

2094 10 make_empty 0 4 3490 25 RenderEffects::make_empty 0 1 239 277
////////////////////////////////////////////////////////////////////
//     Function: RenderEffects::make_empty
//       Access: Published, Static
//  Description: Returns a RenderEffects with no effects set.
////////////////////////////////////////////////////////////////////
71
static ConstPointerTo< RenderEffects > RenderEffects::make_empty(void);

2095 4 make 0 4 3490 19 RenderEffects::make 0 4 240 241 242 243 1096
////////////////////////////////////////////////////////////////////
//     Function: RenderEffects::make
//       Access: Published, Static
//  Description: Returns a RenderEffects with one effect set.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: RenderEffects::make
//       Access: Published, Static
//  Description: Returns a RenderEffects with two effects set.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: RenderEffects::make
//       Access: Published, Static
//  Description: Returns a RenderEffects with three effects set.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: RenderEffects::make
//       Access: Published, Static
//  Description: Returns a RenderEffects with four effects set.
////////////////////////////////////////////////////////////////////
528
static ConstPointerTo< RenderEffects > RenderEffects::make(RenderEffect const *effect);
static ConstPointerTo< RenderEffects > RenderEffects::make(RenderEffect const *effect1, RenderEffect const *effect2);
static ConstPointerTo< RenderEffects > RenderEffects::make(RenderEffect const *effect1, RenderEffect const *effect2, RenderEffect const *effect3);
static ConstPointerTo< RenderEffects > RenderEffects::make(RenderEffect const *effect1, RenderEffect const *effect2, RenderEffect const *effect3, RenderEffect const *effect4);

2096 10 add_effect 0 4 3490 25 RenderEffects::add_effect 0 1 244 461
////////////////////////////////////////////////////////////////////
//     Function: RenderEffects::add_effect
//       Access: Published
//  Description: Returns a new RenderEffects object that represents the
//               same as the source state, with the new RenderEffect
//               added.  If there is already a RenderEffect with the
//               same type, it is replaced.
////////////////////////////////////////////////////////////////////
92
ConstPointerTo< RenderEffects > RenderEffects::add_effect(RenderEffect const *effect) const;

2097 13 remove_effect 0 4 3490 28 RenderEffects::remove_effect 0 1 245 383
////////////////////////////////////////////////////////////////////
//     Function: RenderEffects::remove_effect
//       Access: Published
//  Description: Returns a new RenderEffects object that represents the
//               same as the source state, with the indicated
//               RenderEffect removed.
////////////////////////////////////////////////////////////////////
84
ConstPointerTo< RenderEffects > RenderEffects::remove_effect(TypeHandle type) const;

2098 6 output 0 4 3490 21 RenderEffects::output 0 1 246 230
////////////////////////////////////////////////////////////////////
//     Function: RenderEffects::output
//       Access: Published, Virtual
//  Description: 
////////////////////////////////////////////////////////////////////
47
void RenderEffects::output(ostream &out) const;

2099 5 write 0 4 3490 20 RenderEffects::write 0 1 247 229
////////////////////////////////////////////////////////////////////
//     Function: RenderEffects::write
//       Access: Published, Virtual
//  Description: 
////////////////////////////////////////////////////////////////////
64
void RenderEffects::write(ostream &out, int indent_level) const;

2100 14 get_num_states 0 4 3490 29 RenderEffects::get_num_states 0 1 248 403
////////////////////////////////////////////////////////////////////
//     Function: RenderEffects::get_num_states
//       Access: Published, Static
//  Description: Returns the total number of unique RenderEffects
//               objects allocated in the world.  This will go up and
//               down during normal operations.
////////////////////////////////////////////////////////////////////
47
static int RenderEffects::get_num_states(void);

2101 11 list_states 0 4 3490 26 RenderEffects::list_states 0 1 249 421
////////////////////////////////////////////////////////////////////
//     Function: RenderEffects::list_states
//       Access: Published, Static
//  Description: Lists all of the RenderEffects in the cache to the
//               output stream, one per line.  This can be quite a lot
//               of output if the cache is large, so be prepared.
////////////////////////////////////////////////////////////////////
53
static void RenderEffects::list_states(ostream &out);

2102 15 validate_states 0 4 3490 30 RenderEffects::validate_states 0 1 250 481
////////////////////////////////////////////////////////////////////
//     Function: RenderEffects::validate_states
//       Access: Published, Static
//  Description: Ensures that the cache is still stored in sorted
//               order.  Returns true if so, false if there is a
//               problem (which implies someone has modified one of
//               the supposedly-const RenderEffects objects).
////////////////////////////////////////////////////////////////////
49
static bool RenderEffects::validate_states(void);

2103 14 get_class_type 0 4 3490 29 RenderEffects::get_class_type 0 1 251 0
54
static TypeHandle RenderEffects::get_class_type(void);

2104 37 upcast_to_TypedWritableReferenceCount 0 12 3491 48 PandaNode::upcast_to_TypedWritableReferenceCount 0 1 372 52
upcast from PandaNode to TypedWritableReferenceCount
84
TypedWritableReferenceCount *PandaNode::upcast_to_TypedWritableReferenceCount(void);

2105 21 downcast_to_PandaNode 0 12 3479 50 TypedWritableReferenceCount::downcast_to_PandaNode 0 1 373 54
downcast from TypedWritableReferenceCount to PandaNode
68
PandaNode *TypedWritableReferenceCount::downcast_to_PandaNode(void);

2106 17 upcast_to_Namable 0 12 3491 28 PandaNode::upcast_to_Namable 0 1 374 32
upcast from PandaNode to Namable
44
Namable *PandaNode::upcast_to_Namable(void);

2107 21 downcast_to_PandaNode 0 12 3492 30 Namable::downcast_to_PandaNode 0 1 375 34
downcast from Namable to PandaNode
48
PandaNode *Namable::downcast_to_PandaNode(void);

2108 24 upcast_to_LinkedListNode 0 12 3491 35 PandaNode::upcast_to_LinkedListNode 0 1 376 39
upcast from PandaNode to LinkedListNode
58
LinkedListNode *PandaNode::upcast_to_LinkedListNode(void);

2109 21 downcast_to_PandaNode 0 12 3493 37 LinkedListNode::downcast_to_PandaNode 0 1 377 41
downcast from LinkedListNode to PandaNode
55
PandaNode *LinkedListNode::downcast_to_PandaNode(void);

2110 9 PandaNode 0 4 3491 20 PandaNode::PandaNode 0 1 252 596
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PandaNode::Copy Constructor
//       Access: Protected
//  Description: Do not call the copy constructor directly; instead,
//               use make_copy() or copy_subgraph() to make a copy of
//               a node.
////////////////////////////////////////////////////////////////////
50
explicit PandaNode::PandaNode(string const &name);

2111 10 ~PandaNode 0 6 3491 21 PandaNode::~PandaNode 0 0 229
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::Destructor
//       Access: Published, Virtual
//  Description:
////////////////////////////////////////////////////////////////////
36
virtual PandaNode::~PandaNode(void);

2112 12 combine_with 0 6 3491 23 PandaNode::combine_with 0 1 253 877
//published so that characters can be combined.

////////////////////////////////////////////////////////////////////
//     Function: PandaNode::combine_with
//       Access: Public, Virtual
//  Description: Collapses this PandaNode with the other PandaNode, if
//               possible, and returns a pointer to the combined
//               PandaNode, or NULL if the two PandaNodes cannot
//               safely be combined.
//
//               The return value may be this, other, or a new
//               PandaNode altogether.
//
//               This function is called from GraphReducer::flatten(),
//               and need not deal with children; its job is just to
//               decide whether to collapse the two PandaNodes and
//               what the collapsed PandaNode should look like.
////////////////////////////////////////////////////////////////////
61
virtual PandaNode *PandaNode::combine_with(PandaNode *other);

2113 9 make_copy 0 6 3491 20 PandaNode::make_copy 0 1 254 514
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::make_copy
//       Access: Published, Virtual
//  Description: Returns a newly-allocated PandaNode that is a shallow
//               copy of this one.  It will be a different pointer,
//               but its internal data may or may not be shared with
//               that of the original PandaNode.  No children will be
//               copied.
////////////////////////////////////////////////////////////////////
52
virtual PandaNode *PandaNode::make_copy(void) const;

2114 13 copy_subgraph 0 4 3491 24 PandaNode::copy_subgraph 0 1 255 535
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::copy_subgraph
//       Access: Published
//  Description: Allocates and returns a complete copy of this
//               PandaNode and the entire scene graph rooted at this
//               PandaNode.  Some data may still be shared from the
//               original (e.g. vertex index tables), but nothing that
//               will impede normal use of the PandaNode.
////////////////////////////////////////////////////////////////////
103
PointerTo< PandaNode > PandaNode::copy_subgraph(Thread *current_thread = (get_current_thread())) const;

2115 8 __copy__ 0 4 3491 19 PandaNode::__copy__ 0 1 256 0
55
PointerTo< PandaNode > PandaNode::__copy__(void) const;

2116 12 __deepcopy__ 0 4 3491 23 PandaNode::__deepcopy__ 0 1 257 0
72
PyObject *PandaNode::__deepcopy__(PyObject *self, PyObject *memo) const;

2117 15 get_num_parents 0 4 3491 26 PandaNode::get_num_parents 0 1 258 538
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::get_num_parents
//       Access: Published
//  Description: Returns the number of parent nodes this node has.  If
//               this number is greater than 1, the node has been
//               multiply instanced.  The order of the parent nodes is
//               not meaningful and is not related to the order in
//               which the node was instanced to them.
////////////////////////////////////////////////////////////////////
93
inline int PandaNode::get_num_parents(Thread *current_thread = (get_current_thread())) const;

2118 10 get_parent 0 4 3491 21 PandaNode::get_parent 0 1 259 474
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::get_parent
//       Access: Published
//  Description: Returns the nth parent node of this node.  See
//               get_num_parents().  Also see get_parents(), if your
//               intention is to iterate through the complete list of
//               parents; get_parents() is preferable in this case.
////////////////////////////////////////////////////////////////////
102
inline PandaNode *PandaNode::get_parent(int n, Thread *current_thread = (get_current_thread())) const;

2119 11 find_parent 0 4 3491 22 PandaNode::find_parent 0 1 260 325
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::find_parent
//       Access: Published
//  Description: Returns the index of the indicated parent node, if it
//               is a parent, or -1 if it is not.
////////////////////////////////////////////////////////////////////
106
inline int PandaNode::find_parent(PandaNode *node, Thread *current_thread = (get_current_thread())) const;

2120 16 get_num_children 0 4 3491 27 PandaNode::get_num_children 0 1 261 489
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::get_num_children
//       Access: Published
//  Description: Returns the number of child nodes this node has.  The
//               order of the child nodes *is* meaningful and is based
//               on the sort number that was passed to add_child(),
//               and also on the order in which the nodes were added.
////////////////////////////////////////////////////////////////////
94
inline int PandaNode::get_num_children(Thread *current_thread = (get_current_thread())) const;

2121 9 get_child 0 4 3491 20 PandaNode::get_child 0 1 262 476
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::get_child
//       Access: Published
//  Description: Returns the nth child node of this node.  See
//               get_num_children().  Also see get_children(), if your
//               intention is to iterate through the complete list of
//               children; get_children() is preferable in this case.
////////////////////////////////////////////////////////////////////
101
inline PandaNode *PandaNode::get_child(int n, Thread *current_thread = (get_current_thread())) const;

2122 14 get_child_sort 0 4 3491 25 PandaNode::get_child_sort 0 1 263 395
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::get_child_sort
//       Access: Published
//  Description: Returns the sort index of the nth child node of this
//               node (that is, the number that was passed to
//               add_child()).  See get_num_children().
////////////////////////////////////////////////////////////////////
99
inline int PandaNode::get_child_sort(int n, Thread *current_thread = (get_current_thread())) const;

2123 10 find_child 0 4 3491 21 PandaNode::find_child 0 1 264 322
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::find_child
//       Access: Published
//  Description: Returns the index of the indicated child node, if it
//               is a child, or -1 if it is not.
////////////////////////////////////////////////////////////////////
105
inline int PandaNode::find_child(PandaNode *node, Thread *current_thread = (get_current_thread())) const;

2124 21 count_num_descendants 0 4 3491 32 PandaNode::count_num_descendants 0 1 265 284
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::count_num_descendants
//       Access: Published
//  Description: Returns the number of nodes at and below this level.
////////////////////////////////////////////////////////////////////
49
int PandaNode::count_num_descendants(void) const;

2125 9 add_child 0 4 3491 20 PandaNode::add_child 0 1 266 567
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::add_child
//       Access: Published
//  Description: Adds a new child to the node.  The child is added in
//               the relative position indicated by sort; if all
//               children have the same sort index, the child is added
//               at the end.
//
//               If the same child is added to a node more than once,
//               the previous instance is first removed.
////////////////////////////////////////////////////////////////////
112
void PandaNode::add_child(PandaNode *child_node, int sort = 0, Thread *current_thread = (get_current_thread()));

2126 12 remove_child 0 4 3491 23 PandaNode::remove_child 0 2 267 268 736
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::remove_child
//       Access: Published
//  Description: Removes the nth child from the node.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PandaNode::remove_child
//       Access: Published
//  Description: Removes the indicated child from the node.  Returns
//               true if the child was removed, false if it was not
//               already a child of the node.  This will also
//               successfully remove the child if it had been stashed.
////////////////////////////////////////////////////////////////////
197
void PandaNode::remove_child(int child_index, Thread *current_thread = (get_current_thread()));
bool PandaNode::remove_child(PandaNode *child_node, Thread *current_thread = (get_current_thread()));

2127 13 replace_child 0 4 3491 24 PandaNode::replace_child 0 1 269 513
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::replace_child
//       Access: Published
//  Description: Searches for the orig_child node in the node's list
//               of children, and replaces it with the new_child
//               instead.  Returns true if the replacement is made, or
//               false if the node is not a child or if there is some
//               other problem.
////////////////////////////////////////////////////////////////////
124
bool PandaNode::replace_child(PandaNode *orig_child, PandaNode *new_child, Thread *current_thread = (get_current_thread()));

2128 11 stash_child 0 4 3491 22 PandaNode::stash_child 0 2 270 271 1708
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::stash_child
//       Access: Published
//  Description: Stashes the indicated child node.  This removes the
//               child from the list of active children and puts it on
//               a special list of stashed children.  This child node
//               no longer contributes to the bounding volume of the
//               PandaNode, and is not visited in normal traversals.
//               It is invisible and uncollidable.  The child may
//               later be restored by calling unstash_child().
//
//               This function returns true if the child node was
//               successfully stashed, or false if it was not a child
//               of the node in the first place (e.g. it was
//               previously stashed).
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PandaNode::stash_child
//       Access: Published
//  Description: Stashes the indicated child node.  This removes the
//               child from the list of active children and puts it on
//               a special list of stashed children.  This child node
//               no longer contributes to the bounding volume of the
//               PandaNode, and is not visited in normal traversals.
//               It is invisible and uncollidable.  The child may
//               later be restored by calling unstash_child().
//
//               This can only be called from the top pipeline stage
//               (i.e. from App).
////////////////////////////////////////////////////////////////////
202
inline bool PandaNode::stash_child(PandaNode *child_node, Thread *current_thread = (get_current_thread()));
void PandaNode::stash_child(int child_index, Thread *current_thread = (get_current_thread()));

2129 13 unstash_child 0 4 3491 24 PandaNode::unstash_child 0 2 272 273 1640
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::unstash_child
//       Access: Published
//  Description: Returns the indicated stashed node to normal child
//               status.  This removes the child from the list of
//               stashed children and puts it on the normal list of
//               active children.  This child node once again
//               contributes to the bounding volume of the PandaNode,
//               and will be visited in normal traversals.  It is
//               visible and collidable.
//
//               This function returns true if the child node was
//               successfully stashed, or false if it was not a child
//               of the node in the first place (e.g. it was
//               previously stashed).
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PandaNode::unstash_child
//       Access: Published
//  Description: Returns the indicated stashed node to normal child
//               status.  This removes the child from the list of
//               stashed children and puts it on the normal list of
//               active children.  This child node once again
//               contributes to the bounding volume of the PandaNode,
//               and will be visited in normal traversals.  It is
//               visible and collidable.
//
//               This can only be called from the top pipeline stage
//               (i.e. from App).
////////////////////////////////////////////////////////////////////
208
inline bool PandaNode::unstash_child(PandaNode *child_node, Thread *current_thread = (get_current_thread()));
void PandaNode::unstash_child(int stashed_index, Thread *current_thread = (get_current_thread()));

2130 15 get_num_stashed 0 4 3491 26 PandaNode::get_num_stashed 0 1 274 416
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::get_num_stashed
//       Access: Published
//  Description: Returns the number of stashed nodes this node has.
//               These are former children of the node that have been
//               moved to the special stashed list via stash_child().
////////////////////////////////////////////////////////////////////
93
inline int PandaNode::get_num_stashed(Thread *current_thread = (get_current_thread())) const;

2131 11 get_stashed 0 4 3491 22 PandaNode::get_stashed 0 1 275 1498
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::get_stashed
//       Access: Published
//  Description: Returns the nth stashed child of this node.  See
//               get_num_stashed().  Also see get_stashed(), if your
//               intention is to iterate through the complete list of
//               stashed children; get_stashed() is preferable in this
//               case.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PandaNode::get_stashed
//       Access: Public
//  Description: Returns an object that can be used to walk through
//               the list of children of the node.  When you intend to
//               visit multiple children, using this is slightly
//               faster than calling get_stashed() directly on the
//               PandaNode, since this object avoids reopening the
//               PipelineCycler each time.
//
//               This object also protects you from self-modifying
//               loops (e.g. adding or removing children during
//               traversal), since a virtual copy of the children is
//               made ahead of time.  The virtual copy is fast--it is
//               a form of copy-on-write, so the list is not actually
//               copied unless it is modified during the traversal.
////////////////////////////////////////////////////////////////////
103
inline PandaNode *PandaNode::get_stashed(int n, Thread *current_thread = (get_current_thread())) const;

2132 16 get_stashed_sort 0 4 3491 27 PandaNode::get_stashed_sort 0 1 276 398
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::get_stashed_sort
//       Access: Published
//  Description: Returns the sort index of the nth stashed node of this
//               node (that is, the number that was passed to
//               add_child()).  See get_num_stashed().
////////////////////////////////////////////////////////////////////
101
inline int PandaNode::get_stashed_sort(int n, Thread *current_thread = (get_current_thread())) const;

2133 12 find_stashed 0 4 3491 23 PandaNode::find_stashed 0 1 277 334
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::find_stashed
//       Access: Published
//  Description: Returns the index of the indicated stashed node, if
//               it is a stashed child, or -1 if it is not.
////////////////////////////////////////////////////////////////////
107
inline int PandaNode::find_stashed(PandaNode *node, Thread *current_thread = (get_current_thread())) const;

2134 11 add_stashed 0 4 3491 22 PandaNode::add_stashed 0 1 278 675
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::add_stashed
//       Access: Published
//  Description: Adds a new child to the node, directly as a stashed
//               child.  The child is not added in the normal sense,
//               but will be revealed if unstash_child() is called on
//               it later.
//
//               If the same child is added to a node more than once,
//               the previous instance is first removed.
//
//               This can only be called from the top pipeline stage
//               (i.e. from App).
////////////////////////////////////////////////////////////////////
114
void PandaNode::add_stashed(PandaNode *child_node, int sort = 0, Thread *current_thread = (get_current_thread()));

2135 14 remove_stashed 0 4 3491 25 PandaNode::remove_stashed 0 1 279 269
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::remove_stashed
//       Access: Published
//  Description: Removes the nth stashed child from the node.
////////////////////////////////////////////////////////////////////
97
void PandaNode::remove_stashed(int child_index, Thread *current_thread = (get_current_thread()));

2136 19 remove_all_children 0 4 3491 30 PandaNode::remove_all_children 0 1 280 428
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::remove_all_children
//       Access: Published
//  Description: Removes all the children from the node at once,
//               including stashed children.
//
//               This can only be called from the top pipeline stage
//               (i.e. from App).
////////////////////////////////////////////////////////////////////
85
void PandaNode::remove_all_children(Thread *current_thread = (get_current_thread()));

2137 14 steal_children 0 4 3491 25 PandaNode::steal_children 0 1 281 436
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::steal_children
//       Access: Published
//  Description: Moves all the children from the other node onto this
//               node.
//
//               Any NodePaths to child nodes of the other node are
//               truncated, rather than moved to the new parent.
////////////////////////////////////////////////////////////////////
98
void PandaNode::steal_children(PandaNode *other, Thread *current_thread = (get_current_thread()));

2138 13 copy_children 0 4 3491 24 PandaNode::copy_children 0 1 282 329
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::copy_children
//       Access: Published
//  Description: Makes another instance of all the children of the
//               other node, copying them to this node.
////////////////////////////////////////////////////////////////////
97
void PandaNode::copy_children(PandaNode *other, Thread *current_thread = (get_current_thread()));

2139 10 set_attrib 0 4 3491 21 PandaNode::set_attrib 0 1 283 475
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::set_attrib
//       Access: Published
//  Description: Adds the indicated render attribute to the scene
//               graph on this node.  This attribute will now apply to
//               this node and everything below.  If there was already
//               an attribute of the same type, it is replaced.
////////////////////////////////////////////////////////////////////
73
void PandaNode::set_attrib(RenderAttrib const *attrib, int override = 0);

2140 10 get_attrib 0 4 3491 21 PandaNode::get_attrib 0 2 284 285 1078
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::get_attrib
//       Access: Published
//  Description: Returns the render attribute of the indicated type,
//               if it is defined on the node, or NULL if it is not.
//               This checks only what is set on this particular node
//               level, and has nothing to do with what render
//               attributes may be inherited from parent nodes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PandaNode::get_attrib
//       Access: Published
//  Description: Returns the render attribute of the indicated type,
//               if it is defined on the node, or NULL if it is not.
//               This checks only what is set on this particular node
//               level, and has nothing to do with what render
//               attributes may be inherited from parent nodes.
////////////////////////////////////////////////////////////////////
160
inline ConstPointerTo< RenderAttrib > PandaNode::get_attrib(TypeHandle type) const;
inline ConstPointerTo< RenderAttrib > PandaNode::get_attrib(int slot) const;

2141 10 has_attrib 0 4 3491 21 PandaNode::has_attrib 0 2 286 287 738
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::has_attrib
//       Access: Published
//  Description: Returns true if there is a render attribute of the
//               indicated type defined on this node, or false if
//               there is not.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PandaNode::has_attrib
//       Access: Published
//  Description: Returns true if there is a render attribute of the
//               indicated type defined on this node, or false if
//               there is not.
////////////////////////////////////////////////////////////////////
108
inline bool PandaNode::has_attrib(TypeHandle type) const;
inline bool PandaNode::has_attrib(int slot) const;

2142 12 clear_attrib 0 4 3491 23 PandaNode::clear_attrib 0 2 288 289 904
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::clear_attrib
//       Access: Published
//  Description: Removes the render attribute of the given type from
//               this node.  This node, and the subgraph below, will
//               now inherit the indicated render attribute from the
//               nodes above this one.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PandaNode::clear_attrib
//       Access: Published
//  Description: Removes the render attribute of the given type from
//               this node.  This node, and the subgraph below, will
//               now inherit the indicated render attribute from the
//               nodes above this one.
////////////////////////////////////////////////////////////////////
93
inline void PandaNode::clear_attrib(TypeHandle type);
void PandaNode::clear_attrib(int slot);

2143 10 set_effect 0 4 3491 21 PandaNode::set_effect 0 1 290 386
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::set_effect
//       Access: Published
//  Description: Adds the indicated render effect to the scene
//               graph on this node.  If there was already an effect
//               of the same type, it is replaced.
////////////////////////////////////////////////////////////////////
55
void PandaNode::set_effect(RenderEffect const *effect);

2144 10 get_effect 0 4 3491 21 PandaNode::get_effect 0 1 291 338
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::get_effect
//       Access: Published
//  Description: Returns the render effect of the indicated type,
//               if it is defined on the node, or NULL if it is not.
////////////////////////////////////////////////////////////////////
83
inline ConstPointerTo< RenderEffect > PandaNode::get_effect(TypeHandle type) const;

2145 10 has_effect 0 4 3491 21 PandaNode::has_effect 0 1 292 365
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::has_effect
//       Access: Published
//  Description: Returns true if there is a render effect of the
//               indicated type defined on this node, or false if
//               there is not.
////////////////////////////////////////////////////////////////////
57
inline bool PandaNode::has_effect(TypeHandle type) const;

2146 12 clear_effect 0 4 3491 23 PandaNode::clear_effect 0 1 293 299
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::clear_effect
//       Access: Published
//  Description: Removes the render effect of the given type from
//               this node.
////////////////////////////////////////////////////////////////////
46
void PandaNode::clear_effect(TypeHandle type);

2147 9 set_state 0 4 3491 20 PandaNode::set_state 0 1 294 620
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::set_state
//       Access: Published
//  Description: Sets the complete RenderState that will be applied to
//               all nodes at this level and below.  (The actual state
//               that will be applied to lower nodes is based on the
//               composition of RenderStates from above this node as
//               well).  This completely replaces whatever has been
//               set on this node via repeated calls to set_attrib().
////////////////////////////////////////////////////////////////////
101
void PandaNode::set_state(RenderState const *state, Thread *current_thread = (get_current_thread()));

2148 9 get_state 0 4 3491 20 PandaNode::get_state 0 1 295 533
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::get_state
//       Access: Published
//  Description: Returns the complete RenderState that will be applied
//               to all nodes at this level and below, as set on this
//               node.  This returns only the RenderState set on this
//               particular node, and has nothing to do with state
//               that might be inherited from above.
////////////////////////////////////////////////////////////////////
113
inline ConstPointerTo< RenderState > PandaNode::get_state(Thread *current_thread = (get_current_thread())) const;

2149 11 clear_state 0 4 3491 22 PandaNode::clear_state 0 1 296 438
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::clear_state
//       Access: Published
//  Description: Resets this node to leave the render state alone.
//               Nodes at this level and below will once again inherit
//               their render state unchanged from the nodes above
//               this level.
////////////////////////////////////////////////////////////////////
84
inline void PandaNode::clear_state(Thread *current_thread = (get_current_thread()));

2150 11 set_effects 0 4 3491 22 PandaNode::set_effects 0 1 297 433
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::set_effects
//       Access: Published
//  Description: Sets the complete RenderEffects that will be applied
//               this node.  This completely replaces whatever has
//               been set on this node via repeated calls to
//               set_attrib().
////////////////////////////////////////////////////////////////////
107
void PandaNode::set_effects(RenderEffects const *effects, Thread *current_thread = (get_current_thread()));

2151 11 get_effects 0 4 3491 22 PandaNode::get_effects 0 1 298 308
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::get_effects
//       Access: Published
//  Description: Returns the complete RenderEffects that will be
//               applied to this node.
////////////////////////////////////////////////////////////////////
117
inline ConstPointerTo< RenderEffects > PandaNode::get_effects(Thread *current_thread = (get_current_thread())) const;

2152 13 clear_effects 0 4 3491 24 PandaNode::clear_effects 0 1 299 267
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::clear_effects
//       Access: Published
//  Description: Resets this node to have no render effects.
////////////////////////////////////////////////////////////////////
86
inline void PandaNode::clear_effects(Thread *current_thread = (get_current_thread()));

2153 13 set_transform 0 4 3491 24 PandaNode::set_transform 0 1 300 402
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::set_transform
//       Access: Published
//  Description: Sets the transform that will be applied to this node
//               and below.  This defines a new coordinate space at
//               this point in the scene graph and below.
////////////////////////////////////////////////////////////////////
112
void PandaNode::set_transform(TransformState const *transform, Thread *current_thread = (get_current_thread()));

2154 13 get_transform 0 4 3491 24 PandaNode::get_transform 0 1 301 435
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::get_transform
//       Access: Published
//  Description: Returns the transform that has been set on this
//               particular node.  This is not the net transform from
//               the root, but simply the transform on this particular
//               node.
////////////////////////////////////////////////////////////////////
120
inline ConstPointerTo< TransformState > PandaNode::get_transform(Thread *current_thread = (get_current_thread())) const;

2155 15 clear_transform 0 4 3491 26 PandaNode::clear_transform 0 1 302 303
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::clear_transform
//       Access: Published
//  Description: Resets the transform on this node to the identity
//               transform.
////////////////////////////////////////////////////////////////////
88
inline void PandaNode::clear_transform(Thread *current_thread = (get_current_thread()));

2156 18 set_prev_transform 0 4 3491 29 PandaNode::set_prev_transform 0 1 303 436
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::set_prev_transform
//       Access: Published
//  Description: Sets the transform that represents this node's
//               "previous" position, one frame ago, for the purposes
//               of detecting motion for accurate collision
//               calculations.
////////////////////////////////////////////////////////////////////
117
void PandaNode::set_prev_transform(TransformState const *transform, Thread *current_thread = (get_current_thread()));

2157 18 get_prev_transform 0 4 3491 29 PandaNode::get_prev_transform 0 1 304 365
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::get_prev_transform
//       Access: Published
//  Description: Returns the transform that has been set as this
//               node's "previous" position.  See
//               set_prev_transform().
////////////////////////////////////////////////////////////////////
125
inline ConstPointerTo< TransformState > PandaNode::get_prev_transform(Thread *current_thread = (get_current_thread())) const;

2158 20 reset_prev_transform 0 4 3491 31 PandaNode::reset_prev_transform 0 1 305 444
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::reset_prev_transform
//       Access: Published
//  Description: Resets the transform that represents this node's
//               "previous" position to the same as the current
//               transform.  This is not the same thing as clearing it
//               to identity.
////////////////////////////////////////////////////////////////////
86
void PandaNode::reset_prev_transform(Thread *current_thread = (get_current_thread()));

2159 24 has_dirty_prev_transform 0 4 3491 35 PandaNode::has_dirty_prev_transform 0 1 306 533
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::has_dirty_prev_transform
//       Access: Published
//  Description: Returns true if this node has the
//               _dirty_prev_transform flag set, which indicates its
//               _prev_transform is different from its _transform
//               value (in pipeline stage 0).  In this case, the node
//               will be visited by reset_prev_transform().
////////////////////////////////////////////////////////////////////
60
inline bool PandaNode::has_dirty_prev_transform(void) const;

2160 24 reset_all_prev_transform 0 4 3491 35 PandaNode::reset_all_prev_transform 0 1 307 533
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::reset_all_prev_transform
//       Access: Published, Static
//  Description: Visits all nodes in the world with the
//               _dirty_prev_transform flag--that is, all nodes whose
//               _prev_transform is different from the _transform in
//               pipeline stage 0--and resets the _prev_transform to
//               be the same as _transform.
////////////////////////////////////////////////////////////////////
97
static void PandaNode::reset_all_prev_transform(Thread *current_thread = (get_current_thread()));

2161 7 set_tag 0 4 3491 18 PandaNode::set_tag 0 1 308 701
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::set_tag
//       Access: Published
//  Description: Associates a user-defined value with a user-defined
//               key which is stored on the node.  This value has no
//               meaning to Panda; but it is stored indefinitely on
//               the node until it is requested again.
//
//               Each unique key stores a different string value.
//               There is no effective limit on the number of
//               different keys that may be stored or on the length of
//               any one key's value.
////////////////////////////////////////////////////////////////////
113
void PandaNode::set_tag(string const &key, string const &value, Thread *current_thread = (get_current_thread()));

2162 7 get_tag 0 4 3491 18 PandaNode::get_tag 0 1 309 434
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::get_tag
//       Access: Published
//  Description: Retrieves the user-defined value that was previously
//               set on this node for the particular key, if any.  If
//               no value has been previously set, returns the empty
//               string.
////////////////////////////////////////////////////////////////////
107
inline string PandaNode::get_tag(string const &key, Thread *current_thread = (get_current_thread())) const;

2163 7 has_tag 0 4 3491 18 PandaNode::has_tag 0 1 310 405
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::has_tag
//       Access: Published
//  Description: Returns true if a value has been defined on this node
//               for the particular key (even if that value is the
//               empty string), or false if no value has been set.
////////////////////////////////////////////////////////////////////
105
inline bool PandaNode::has_tag(string const &key, Thread *current_thread = (get_current_thread())) const;

2164 9 clear_tag 0 4 3491 20 PandaNode::clear_tag 0 1 311 398
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::clear_tag
//       Access: Published
//  Description: Removes the value defined for this key on this
//               particular node.  After a call to clear_tag(),
//               has_tag() will return false for the indicated key.
////////////////////////////////////////////////////////////////////
94
void PandaNode::clear_tag(string const &key, Thread *current_thread = (get_current_thread()));

2165 12 get_tag_keys 0 4 3491 23 PandaNode::get_tag_keys 0 2 312 313 504
////////////////////////////////////////////////////////////////////
//     Function: Filename::get_tag_keys
//       Access: Published
//  Description: Fills the given vector up with the
//               list of tags on this PandaNode.
//
//               It is the user's responsibility to ensure that the
//               keys vector is empty before making this call;
//               otherwise, the new keys will be appended to it.
////////////////////////////////////////////////////////////////////
103
void PandaNode::get_tag_keys(vector_string &keys) const;
PyObject *PandaNode::get_tag_keys(void) const;

2166 14 set_python_tag 0 4 3491 25 PandaNode::set_python_tag 0 1 314 0
67
void PandaNode::set_python_tag(string const &key, PyObject *value);

2167 14 get_python_tag 0 4 3491 25 PandaNode::get_python_tag 0 1 315 0
61
PyObject *PandaNode::get_python_tag(string const &key) const;

2168 14 has_python_tag 0 4 3491 25 PandaNode::has_python_tag 0 1 316 0
56
bool PandaNode::has_python_tag(string const &key) const;

2169 16 clear_python_tag 0 4 3491 27 PandaNode::clear_python_tag 0 1 317 0
52
void PandaNode::clear_python_tag(string const &key);

2170 19 get_python_tag_keys 0 4 3491 30 PandaNode::get_python_tag_keys 0 2 318 319 0
117
void PandaNode::get_python_tag_keys(vector_string &keys) const;
PyObject *PandaNode::get_python_tag_keys(void) const;

2171 8 has_tags 0 4 3491 19 PandaNode::has_tags 0 1 320 324
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::has_tags
//       Access: Published
//  Description: Returns true if the node has any tags (or any Python
//               tags) at all, false if it has none.
////////////////////////////////////////////////////////////////////
44
inline bool PandaNode::has_tags(void) const;

2172 9 copy_tags 0 4 3491 20 PandaNode::copy_tags 0 1 321 445
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::copy_tags
//       Access: Published
//  Description: Copies all of the tags stored on the other node onto
//               this node.  If a particular tag exists on both nodes,
//               the contents of this node's value is replaced by that
//               of the other.
////////////////////////////////////////////////////////////////////
44
void PandaNode::copy_tags(PandaNode *other);

2173 9 list_tags 0 4 3491 20 PandaNode::list_tags 0 1 322 660
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::list_tags
//       Access: Published
//  Description: Writes a list of all the tag keys assigned to the
//               node to the indicated stream.  Writes one instance of
//               the separator following each key (but does not write
//               a terminal separator).  The value associated with
//               each key is not written.
//
//               This is mainly for the benefit of the realtime user,
//               to see the list of all of the associated tag keys.
////////////////////////////////////////////////////////////////////
78
void PandaNode::list_tags(ostream &out, string const &separator = "\n") const;

2174 12 compare_tags 0 4 3491 23 PandaNode::compare_tags 0 1 323 643
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::compare_tags
//       Access: Published
//  Description: Returns a number less than 0, 0, or greater than 0,
//               to indicate the similarity of tags between this node
//               and the other one.  If this returns 0, the tags are
//               identical.  If it returns other than 0, then the tags
//               are different; and the nodes may be sorted into a
//               consistent (but arbitrary) ordering based on this
//               number.
////////////////////////////////////////////////////////////////////
58
int PandaNode::compare_tags(PandaNode const *other) const;

2175 19 copy_all_properties 0 4 3491 30 PandaNode::copy_all_properties 0 1 324 542
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::copy_all_properties
//       Access: Published
//  Description: Copies the TransformState, RenderState,
//               RenderEffects, tags, Python tags, and the show/hide
//               state from the other node onto this one.  Typically
//               this is used to prepare a node to replace another
//               node in the scene graph (also see replace_node()).
////////////////////////////////////////////////////////////////////
54
void PandaNode::copy_all_properties(PandaNode *other);

2176 12 replace_node 0 4 3491 23 PandaNode::replace_node 0 1 325 974
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::replace_node
//       Access: Published
//  Description: Inserts this node into the scene graph in place of
//               the other one, and removes the other node.  All scene
//               graph attributes (TransformState, RenderState, etc.)
//               are copied to this node.
//
//               All children are moved to this node, and removed from
//               the old node.  The new node is left in the same place
//               in the old node's parent's list of children.
//
//               Even NodePaths that reference the old node are
//               updated in-place to reference the new node instead.
//
//               This method is intended to be used to replace a node
//               of a given type in the scene graph with a node of a
//               different type.
////////////////////////////////////////////////////////////////////
47
void PandaNode::replace_node(PandaNode *other);

2177 21 set_unexpected_change 0 4 3491 32 PandaNode::set_unexpected_change 0 1 326 1028
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::set_unexpected_change
//       Access: Published
//  Description: Sets one or more of the PandaNode::UnexpectedChange
//               bits on, indicating that the corresponding property
//               should not change again on this node.  Once one of
//               these bits has been set, if the property changes, an
//               assertion failure will be raised, which is designed
//               to assist the developer in identifying the
//               troublesome code that modified the property
//               unexpectedly.
//
//               The input parameter is the union of bits that are to
//               be set.  To clear these bits later, use
//               clear_unexpected_change().
//
//               Since this is a developer debugging tool only, this
//               function does nothing in a production (NDEBUG) build.
////////////////////////////////////////////////////////////////////
58
void PandaNode::set_unexpected_change(unsigned int flags);

2178 21 get_unexpected_change 0 4 3491 32 PandaNode::get_unexpected_change 0 1 327 751
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::get_unexpected_change
//       Access: Published
//  Description: Returns nonzero if any of the bits in the input
//               parameter are set on this node, or zero if none of
//               them are set.  More specifically, this returns the
//               particular set of bits (masked by the input
//               parameter) that have been set on this node.  See
//               set_unexpected_change().
//
//               Since this is a developer debugging tool only, this
//               function always returns zero in a production (NDEBUG)
//               build.
////////////////////////////////////////////////////////////////////
72
unsigned int PandaNode::get_unexpected_change(unsigned int flags) const;

2179 23 clear_unexpected_change 0 4 3491 34 PandaNode::clear_unexpected_change 0 1 328 700
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::clear_unexpected_change
//       Access: Published
//  Description: Sets one or more of the PandaNode::UnexpectedChange
//               bits off, indicating that the corresponding property
//               may once again change on this node.  See
//               set_unexpected_change().
//
//               The input parameter is the union of bits that are to
//               be cleared.
//
//               Since this is a developer debugging tool only, this
//               function does nothing in a production (NDEBUG) build.
////////////////////////////////////////////////////////////////////
60
void PandaNode::clear_unexpected_change(unsigned int flags);

2180 15 get_overall_bit 0 4 3491 26 PandaNode::get_overall_bit 0 1 329 457
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::get_overall_bit
//       Access: Published, Static
//  Description: Returns the special bit that, when specifically
//               cleared in the node's DrawMask, indicates that the
//               node is hidden to all cameras, regardless of the
//               remaining DrawMask bits.
////////////////////////////////////////////////////////////////////
56
static inline DrawMask PandaNode::get_overall_bit(void);

2181 19 get_all_camera_mask 0 4 3491 30 PandaNode::get_all_camera_mask 0 1 330 323
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::get_all_camera_mask
//       Access: Published, Static
//  Description: Returns a DrawMask that is appropriate for rendering
//               to all cameras.
////////////////////////////////////////////////////////////////////
60
static inline DrawMask PandaNode::get_all_camera_mask(void);

2182 17 is_overall_hidden 0 4 3491 28 PandaNode::is_overall_hidden 0 1 331 337
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::is_overall_hidden
//       Access: Published, Static
//  Description: Returns true if the node has been hidden to all
//               cameras by clearing its overall bit.
////////////////////////////////////////////////////////////////////
53
inline bool PandaNode::is_overall_hidden(void) const;

2183 18 set_overall_hidden 0 4 3491 29 PandaNode::set_overall_hidden 0 1 332 750
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::set_overall_hidden
//       Access: Published
//  Description: Sets or clears the hidden flag.  When the hidden flag
//               is true, the node and all of its children are
//               invisible to all cameras, regardless of the setting
//               of any draw masks.  Setting the hidden flag to false
//               restores the previous visibility as established by
//               the draw masks.
//
//               This actually works by twiddling the reserved
//               _overall_bit in the node's draw mask, which has
//               special meaning.
////////////////////////////////////////////////////////////////////
63
inline void PandaNode::set_overall_hidden(bool overall_hidden);

2184 16 adjust_draw_mask 0 4 3491 27 PandaNode::adjust_draw_mask 0 1 333 1941
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::adjust_draw_mask
//       Access: Published
//  Description: Adjusts the hide/show bits of this particular node.
//
//               These three parameters can be used to adjust the
//               _draw_control_mask and _draw_show_mask independently,
//               which work together to provide per-camera visibility
//               for the node and its descendents.
//
//               _draw_control_mask indicates the bits in
//               _draw_show_mask that are significant.  Each different
//               bit corresponds to a different camera (and these bits
//               are assigned via Camera::set_camera_mask()).
//
//               Where _draw_control_mask has a 1 bit, a 1 bit in
//               _draw_show_mask indicates the node is visible to that
//               camera, and a 0 bit indicates the node is hidden to
//               that camera.  Where _draw_control_mask is 0, the node
//               is hidden only if a parent node is hidden.
//
//               The meaning of the three parameters is as follows:
//
//               * Wherever show_mask is 1, _draw_show_mask and
//               _draw_control_mask will be set 1.  Thus, show_mask
//               indicates the set of cameras to which the node should
//               be shown.
//
//               * Wherever hide_mask is 1, _draw_show_mask will be
//               set 0 and _draw_control_mask will be set 1.  Thus,
//               hide_mask indicates the set of cameras from which the
//               node should be hidden.
//
//               * Wherever clear_mask is 1, _draw_control_mask will
//               be set 0.  Thus, clear_mask indicates the set of
//               cameras from which the hidden state should be
//               inherited from a parent.
////////////////////////////////////////////////////////////////////
94
void PandaNode::adjust_draw_mask(DrawMask show_mask, DrawMask hide_mask, DrawMask clear_mask);

2185 21 get_draw_control_mask 0 4 3491 32 PandaNode::get_draw_control_mask 0 1 334 347
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::get_draw_control_mask
//       Access: Published
//  Description: Returns the set of bits in draw_show_mask that are
//               considered meaningful.  See adjust_draw_mask().
////////////////////////////////////////////////////////////////////
61
inline DrawMask PandaNode::get_draw_control_mask(void) const;

2186 18 get_draw_show_mask 0 4 3491 29 PandaNode::get_draw_show_mask 0 1 335 321
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::get_draw_show_mask
//       Access: Published
//  Description: Returns the hide/show bits of this particular node.
//               See adjust_draw_mask().
////////////////////////////////////////////////////////////////////
58
inline DrawMask PandaNode::get_draw_show_mask(void) const;

2187 25 get_net_draw_control_mask 0 4 3491 36 PandaNode::get_net_draw_control_mask 0 1 336 681
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::get_net_draw_control_mask
//       Access: Published
//  Description: Returns the set of bits in get_net_draw_show_mask()
//               that have been explicitly set via adjust_draw_mask(),
//               rather than implicitly inherited.
//
//               A 1 bit in any position of this mask indicates that
//               (a) this node has renderable children, and (b) some
//               child of this node has made an explicit hide() or
//               show_through() call for the corresponding bit.
////////////////////////////////////////////////////////////////////
58
DrawMask PandaNode::get_net_draw_control_mask(void) const;

2188 22 get_net_draw_show_mask 0 4 3491 33 PandaNode::get_net_draw_show_mask 0 1 337 943
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::get_net_draw_show_mask
//       Access: Published
//  Description: Returns the union of all draw_show_mask values--of
//               renderable nodes only--at this level and below.  If
//               any bit in this mask is 0, there is no reason to
//               traverse below this node for a camera with the
//               corresponding camera_mask.
//
//               The bits in this mask that do not correspond to a 1
//               bit in the net_draw_control_mask are meaningless (and
//               will be set to 1).  For bits that *do* correspond to
//               a 1 bit in the net_draw_control_mask, a 1 bit
//               indicates that at least one child should be visible,
//               while a 0 bit indicates that all children are hidden.
////////////////////////////////////////////////////////////////////
55
DrawMask PandaNode::get_net_draw_show_mask(void) const;

2189 21 set_into_collide_mask 0 4 3491 32 PandaNode::set_into_collide_mask 0 1 338 880
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::set_into_collide_mask
//       Access: Published
//  Description: Sets the "into" CollideMask.
//
//               This specifies the set of bits that must be shared
//               with a CollisionNode's "from" CollideMask in order
//               for the CollisionNode to detect a collision with this
//               particular node.
//
//               The actual CollideMask that will be set is masked by
//               the return value from get_legal_collide_mask().
//               Thus, the into_collide_mask cannot be set to anything
//               other than nonzero except for those types of nodes
//               that can be collided into, such as CollisionNodes and
//               GeomNodes.
////////////////////////////////////////////////////////////////////
56
void PandaNode::set_into_collide_mask(CollideMask mask);

2190 21 get_into_collide_mask 0 4 3491 32 PandaNode::get_into_collide_mask 0 1 339 278
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::get_into_collide_mask
//       Access: Published
//  Description: Returns the "into" collide mask for this node.
////////////////////////////////////////////////////////////////////
64
inline CollideMask PandaNode::get_into_collide_mask(void) const;

2191 22 get_legal_collide_mask 0 6 3491 33 PandaNode::get_legal_collide_mask 0 1 340 618
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::get_legal_collide_mask
//       Access: Published, Virtual
//  Description: Returns the subset of CollideMask bits that may be
//               set for this particular type of PandaNode.  For most
//               nodes, this is 0; it doesn't make sense to set a
//               CollideMask for most kinds of nodes.
//
//               For nodes that can be collided with, such as GeomNode
//               and CollisionNode, this returns all bits on.
////////////////////////////////////////////////////////////////////
66
virtual CollideMask PandaNode::get_legal_collide_mask(void) const;

2192 20 get_net_collide_mask 0 4 3491 31 PandaNode::get_net_collide_mask 0 1 341 346
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::get_net_collide_mask
//       Access: Published
//  Description: Returns the union of all into_collide_mask() values
//               set at CollisionNodes at this level and below.
////////////////////////////////////////////////////////////////////
99
CollideMask PandaNode::get_net_collide_mask(Thread *current_thread = (get_current_thread())) const;

2193 19 get_off_clip_planes 0 4 3491 30 PandaNode::get_off_clip_planes 0 1 342 395
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::get_off_clip_planes
//       Access: Published
//  Description: Returns a ClipPlaneAttrib which represents the union
//               of all of the clip planes that have been turned *off*
//               at this level and below.
////////////////////////////////////////////////////////////////////
117
ConstPointerTo< RenderAttrib > PandaNode::get_off_clip_planes(Thread *current_thread = (get_current_thread())) const;

2194 13 prepare_scene 0 4 3491 24 PandaNode::prepare_scene 0 1 343 818
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::prepare_scene
//       Access: Published
//  Description: Walks through the scene graph beginning at this node,
//               and does whatever initialization is required to
//               render the scene properly with the indicated GSG.  It
//               is not strictly necessary to call this, since the GSG
//               will initialize itself when the scene is rendered,
//               but this may take some of the overhead away from that
//               process.
//
//               In particular, this will ensure that textures and
//               vertex buffers within the scene are loaded into
//               graphics memory.
////////////////////////////////////////////////////////////////////
93
void PandaNode::prepare_scene(GraphicsStateGuardianBase *gsg, RenderState const *node_state);

2195 13 is_scene_root 0 4 3491 24 PandaNode::is_scene_root 0 1 344 431
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::is_scene_root
//       Access: Published
//  Description: Returns true if this particular node is known to be
//               the render root of some active DisplayRegion
//               associated with the global GraphicsEngine, false
//               otherwise.
////////////////////////////////////////////////////////////////////
42
bool PandaNode::is_scene_root(void) const;

2196 19 is_under_scene_root 0 4 3491 30 PandaNode::is_under_scene_root 0 1 345 601
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::is_under_scene_root
//       Access: Published
//  Description: Returns true if this particular node is in a live
//               scene graph: that is, it is a child or descendent of
//               a node that is itself a scene root.  If this is true,
//               this node may potentially be traversed by the render
//               traverser.  Stashed nodes don't count for this
//               purpose, but hidden nodes do.
////////////////////////////////////////////////////////////////////
48
bool PandaNode::is_under_scene_root(void) const;

2197 6 output 0 6 3491 17 PandaNode::output 0 1 346 225
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::output
//       Access: Published, Virtual
//  Description:
////////////////////////////////////////////////////////////////////
51
virtual void PandaNode::output(ostream &out) const;

2198 5 write 0 6 3491 16 PandaNode::write 0 1 347 224
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::write
//       Access: Published, Virtual
//  Description:
////////////////////////////////////////////////////////////////////
68
virtual void PandaNode::write(ostream &out, int indent_level) const;

2199 2 ls 0 4 3491 13 PandaNode::ls 0 1 348 295
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::ls
//       Access: Published
//  Description: Lists all the nodes at and below the current path
//               hierarchically.
////////////////////////////////////////////////////////////////////
64
inline void PandaNode::ls(ostream &out, int indent_level) const;

2200 15 set_bounds_type 0 4 3491 26 PandaNode::set_bounds_type 0 1 349 1358
// We define set_bounds() and get_bounds() functions so that
// set_bounds() sets the user bounding volume, while get_bounds()
// returns the external bounding volume.  Although it might seem
// strange and confusing to do this, this is actually the natural
// way the user thinks about nodes and bounding volumes.

////////////////////////////////////////////////////////////////////
//     Function: PandaNode::set_bounds_type
//       Access: Published
//  Description: Specifies the desired type of bounding volume that
//               will be created for this node.  This is normally
//               BoundingVolume::BT_default, which means to set the
//               type according to the config variable "bounds-type".
//
//               If this is BT_sphere or BT_box, a BoundingSphere or
//               BoundingBox is explicitly created.  If it is BT_best,
//               the appropriate type to best enclose the node's
//               children is created.
//
//               This affects the bounding volume returned by
//               get_bounds(), which is not exactly the same bounding
//               volume modified by set_bounds(), because a new
//               bounding volume has to be created that includes this
//               node and all of its children.
////////////////////////////////////////////////////////////////////
72
void PandaNode::set_bounds_type(BoundingVolume::BoundsType bounds_type);

2201 15 get_bounds_type 0 4 3491 26 PandaNode::get_bounds_type 0 1 350 303
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::get_bounds_type
//       Access: Published
//  Description: Returns the bounding volume type set with
//               set_bounds_type().
////////////////////////////////////////////////////////////////////
66
BoundingVolume::BoundsType PandaNode::get_bounds_type(void) const;

2202 10 set_bounds 0 4 3491 21 PandaNode::set_bounds 0 1 351 806
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::set_bounds
//       Access: Published
//  Description: Resets the bounding volume so that it is the
//               indicated volume.  When it is explicitly set, the
//               bounding volume will no longer be automatically
//               computed according to the contents of the node
//               itself, for nodes like GeomNodes and TextNodes that
//               contain substance (but the bounding volume will still
//               be automatically expanded to include its children).
//
//               Call clear_bounds() if you would like to return the
//               bounding volume to its default behavior later.
////////////////////////////////////////////////////////////////////
57
void PandaNode::set_bounds(BoundingVolume const *volume);

2203 9 set_bound 0 4 3491 20 PandaNode::set_bound 0 1 352 258
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::set_bound
//       Access: Published
//  Description: Deprecated.  Use set_bounds() instead.
////////////////////////////////////////////////////////////////////
56
void PandaNode::set_bound(BoundingVolume const *volume);

2204 12 clear_bounds 0 4 3491 23 PandaNode::clear_bounds 0 1 353 441
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::clear_bounds
//       Access: Published
//  Description: Reverses the effect of a previous call to
//               set_bounds(), and allows the node's bounding volume
//               to be automatically computed once more based on the
//               contents of the node.
////////////////////////////////////////////////////////////////////
42
inline void PandaNode::clear_bounds(void);

2205 10 get_bounds 0 4 3491 21 PandaNode::get_bounds 0 2 354 355 1403
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::get_bounds
//       Access: Published
//  Description: Returns the external bounding volume of this node: a
//               bounding volume that contains the user bounding
//               volume, the internal bounding volume, and all of the
//               children's bounding volumes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PandaNode::get_bounds
//       Access: Published
//  Description: This flavor of get_bounds() return the external
//               bounding volume, and also fills in seq with the
//               bounding volume's current sequence number.  When this
//               sequence number changes, it indicates that the
//               bounding volume might have changed, e.g. because some
//               nested child's bounding volume has changed.
//
//               Although this might occasionally increment without
//               changing the bounding volume, the bounding volume
//               will never change without incrementing this counter,
//               so as long as this counter remains unchanged you can
//               be confident the bounding volume is also unchanged.
////////////////////////////////////////////////////////////////////
237
ConstPointerTo< BoundingVolume > PandaNode::get_bounds(Thread *current_thread = (get_current_thread())) const;
ConstPointerTo< BoundingVolume > PandaNode::get_bounds(UpdateSeq &seq, Thread *current_thread = (get_current_thread())) const;

2206 19 get_nested_vertices 0 4 3491 30 PandaNode::get_nested_vertices 0 1 356 744
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::get_nested_vertices
//       Access: Published
//  Description: Returns the total number of vertices that will be
//               rendered by this node and all of its descendents.
//
//               This is not necessarily an accurate count of vertices
//               that will actually be rendered, since this will
//               include all vertices of all LOD's, and it will also
//               include hidden nodes.  It may also omit or only
//               approximate certain kinds of dynamic geometry.
//               However, it will not include stashed nodes.
////////////////////////////////////////////////////////////////////
90
int PandaNode::get_nested_vertices(Thread *current_thread = (get_current_thread())) const;

2207 19 get_internal_bounds 0 4 3491 30 PandaNode::get_internal_bounds 0 1 357 892
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::get_internal_bounds
//       Access: Published
//  Description: Returns the node's internal bounding volume.  This is
//               the bounding volume around the node alone, without
//               including children.  If the user has called
//               set_bounds(), it will be the specified bounding
//               volume.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PandaNode::get_internal_bounds
//       Access: Protected
//  Description: Returns the node's internal bounding volume.  This is
//               the bounding volume around the node alone, without
//               including children.
////////////////////////////////////////////////////////////////////
126
inline ConstPointerTo< BoundingVolume > PandaNode::get_internal_bounds(Thread *current_thread = (get_current_thread())) const;

2208 21 get_internal_vertices 0 4 3491 32 PandaNode::get_internal_vertices 0 1 358 978
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::get_internal_vertices
//       Access: Published
//  Description: Returns the total number of vertices that will be
//               rendered by this particular node alone, not
//               accounting for its children.
//
//               This may not include all vertices for certain dynamic
//               effects.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PandaNode::get_internal_vertices
//       Access: Protected
//  Description: Returns the total number of vertices that will be
//               rendered by this particular node alone, not
//               accounting for its children.
//
//               This may not include all vertices for certain dynamic
//               effects.
////////////////////////////////////////////////////////////////////
99
inline int PandaNode::get_internal_vertices(Thread *current_thread = (get_current_thread())) const;

2209 17 mark_bounds_stale 0 4 3491 28 PandaNode::mark_bounds_stale 0 1 359 1441
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::mark_bounds_stale
//       Access: Protected
//  Description: Indicates that the bounding volume, or something that
//               influences the bounding volume (or any of the other
//               things stored in CData, like net_collide_mask),
//               may have changed for this node, and that it must be
//               recomputed.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PandaNode::mark_bounds_stale
//       Access: Published
//  Description: Indicates that the bounding volume, or something that
//               influences the bounding volume (or any of the other
//               things stored in CData, like net_collide_mask),
//               may have changed for this node, and that it must be
//               recomputed.
//
//               With no parameters, this means to iterate through all
//               stages including and upstream of the current pipeline
//               stage.
//
//               This method is intended for internal use; usually it
//               is not necessary for a user to call this directly.
//               It will be called automatically by derived classes
//               when appropriate.
////////////////////////////////////////////////////////////////////
89
void PandaNode::mark_bounds_stale(Thread *current_thread = (get_current_thread())) const;

2210 26 mark_internal_bounds_stale 0 4 3491 37 PandaNode::mark_internal_bounds_stale 0 1 360 1286
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::mark_internal_bounds_stale
//       Access: Protected
//  Description: Should be called by a derived class to mark the
//               internal bounding volume stale, so that
//               recompute_internal_bounds() will be called when the
//               bounding volume is next requested.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PandaNode::mark_internal_bounds_stale
//       Access: Published
//  Description: Should be called by a derived class to mark the
//               internal bounding volume stale, so that
//               compute_internal_bounds() will be called when the
//               bounding volume is next requested.
//
//               With no parameters, this means to iterate through all
//               stages including and upstream of the current pipeline
//               stage.
//
//               It is normally not necessary to call this method
//               directly; each node should be responsible for calling
//               it when its internals have changed.
////////////////////////////////////////////////////////////////////
92
void PandaNode::mark_internal_bounds_stale(Thread *current_thread = (get_current_thread()));

2211 15 is_bounds_stale 0 4 3491 26 PandaNode::is_bounds_stale 0 1 361 454
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::is_bounds_stale
//       Access: Published
//  Description: Returns true if the bounding volume of this node is
//               stale and will be implicitly recomputed at the next
//               call to get_bounds(), or false if it is fresh and
//               need not be recomputed.
////////////////////////////////////////////////////////////////////
51
inline bool PandaNode::is_bounds_stale(void) const;

2212 9 set_final 0 4 3491 20 PandaNode::set_final 0 1 362 995
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::set_final
//       Access: Published
//  Description: Sets the "final" flag on this PandaNode.  If
//               this is true, than no bounding volume need be tested
//               below it; a positive intersection with this node's
//               bounding volume is deemed to be a positive
//               intersection with all geometry inside.
//
//               This is useful to quickly force a larger bounding
//               volume around a node when the GeomNodes themselves
//               are inaccurate for some reason, without forcing a
//               recompute of every nested bounding volume.  It's also
//               helpful when the bounding volume is tricked by some
//               special properties, like billboards, that may move
//               geometry out of its bounding volume otherwise.
////////////////////////////////////////////////////////////////////
44
inline void PandaNode::set_final(bool flag);

2213 8 is_final 0 4 3491 19 PandaNode::is_final 0 1 363 429
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::is_final
//       Access: Published
//  Description: Returns the current state of the "final" flag.
//               Initially, this flag is off (false), but it may be
//               changed by an explicit call to set_final().  See
//               set_final().
////////////////////////////////////////////////////////////////////
87
inline bool PandaNode::is_final(Thread *current_thread = (get_current_thread())) const;

2214 12 is_geom_node 0 6 3491 23 PandaNode::is_geom_node 0 1 364 570
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::is_geom_node
//       Access: Published, Virtual
//  Description: A simple downcast check.  Returns true if this kind
//               of node happens to inherit from GeomNode, false
//               otherwise.
//
//               This is provided as a a faster alternative to calling
//               is_of_type(GeomNode::get_class_type()), since this
//               test is so important to rendering.
////////////////////////////////////////////////////////////////////
49
virtual bool PandaNode::is_geom_node(void) const;

2215 11 is_lod_node 0 6 3491 22 PandaNode::is_lod_node 0 1 365 504
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::is_lod_node
//       Access: Published, Virtual
//  Description: A simple downcast check.  Returns true if this kind
//               of node happens to inherit from LODNode, false
//               otherwise.
//
//               This is provided as a a faster alternative to calling
//               is_of_type(LODNode::get_class_type()).
////////////////////////////////////////////////////////////////////
48
virtual bool PandaNode::is_lod_node(void) const;

2216 17 is_collision_node 0 6 3491 28 PandaNode::is_collision_node 0 1 366 522
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::is_collision_node
//       Access: Published, Virtual
//  Description: A simple downcast check.  Returns true if this kind
//               of node happens to inherit from CollisionNode, false
//               otherwise.
//
//               This is provided as a a faster alternative to calling
//               is_of_type(CollisionNode::get_class_type()).
////////////////////////////////////////////////////////////////////
54
virtual bool PandaNode::is_collision_node(void) const;

2217 8 as_light 0 6 3491 19 PandaNode::as_light 0 1 367 379
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::as_light
//       Access: Published, Virtual
//  Description: Cross-casts the node to a Light pointer, if it is one
//               of the four kinds of Light nodes, or returns NULL if
//               it is not.
////////////////////////////////////////////////////////////////////
41
virtual Light *PandaNode::as_light(void);

2218 16 is_ambient_light 0 6 3491 27 PandaNode::is_ambient_light 0 1 368 356
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::is_ambient_light
//       Access: Published, Virtual
//  Description: Returns true if this is an AmbientLight, false if it
//               is not a light, or it is some other kind of light.
////////////////////////////////////////////////////////////////////
53
virtual bool PandaNode::is_ambient_light(void) const;

2219 14 get_fancy_bits 0 4 3491 25 PandaNode::get_fancy_bits 0 1 369 617
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::get_fancy_bits
//       Access: Published
//  Description: Returns the union of all of the enum FancyBits values
//               corresponding to the various "fancy" attributes that
//               are set on the node.  If this returns 0, the node has
//               nothing interesting about it.  This is intended to
//               speed traversal by quickly skipping past nodes that
//               don't particularly affect the render state.
////////////////////////////////////////////////////////////////////
92
inline int PandaNode::get_fancy_bits(Thread *current_thread = (get_current_thread())) const;

2220 22 decode_from_bam_stream 0 4 3491 33 PandaNode::decode_from_bam_stream 0 1 370 819
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::decode_from_bam_stream
//       Access: Published, Static
//  Description: Reads the string created by a previous call to
//               encode_to_bam_stream(), and extracts and returns the
//               single object on that string.  Returns NULL on error.
//
//               This method is intended to replace
//               decode_raw_from_bam_stream() when you know the stream
//               in question returns an object of type PandaNode,
//               allowing for easier reference count management.  Note
//               that the caller is still responsible for maintaining
//               the reference count on the return value.
////////////////////////////////////////////////////////////////////
107
static PointerTo< PandaNode > PandaNode::decode_from_bam_stream(string const &data, BamReader *reader = 0);

2221 14 get_class_type 0 4 3491 25 PandaNode::get_class_type 0 1 371 0
50
static TypeHandle PandaNode::get_class_type(void);

2222 4 make 0 4 3496 24 TransparencyAttrib::make 0 1 378 275
////////////////////////////////////////////////////////////////////
//     Function: TransparencyAttrib::make
//       Access: Published, Static
//  Description: Constructs a new TransparencyAttrib object.
////////////////////////////////////////////////////////////////////
94
static ConstPointerTo< RenderAttrib > TransparencyAttrib::make(TransparencyAttrib::Mode mode);

2223 12 make_default 0 4 3496 32 TransparencyAttrib::make_default 0 1 379 405
////////////////////////////////////////////////////////////////////
//     Function: TransparencyAttrib::make_default
//       Access: Published, Static
//  Description: Returns a RenderAttrib that corresponds to whatever
//               the standard default properties for render attributes
//               of this type ought to be.
////////////////////////////////////////////////////////////////////
77
static ConstPointerTo< RenderAttrib > TransparencyAttrib::make_default(void);

2224 8 get_mode 0 4 3496 28 TransparencyAttrib::get_mode 0 1 380 258
////////////////////////////////////////////////////////////////////
//     Function: TransparencyAttrib::get_mode
//       Access: Published
//  Description: Returns the transparency mode.
////////////////////////////////////////////////////////////////////
73
inline TransparencyAttrib::Mode TransparencyAttrib::get_mode(void) const;

2225 14 get_class_slot 0 4 3496 34 TransparencyAttrib::get_class_slot 0 1 381 0
52
static int TransparencyAttrib::get_class_slot(void);

2226 14 get_class_type 0 4 3496 34 TransparencyAttrib::get_class_type 0 1 382 0
59
static TypeHandle TransparencyAttrib::get_class_type(void);

2227 19 ~TransparencyAttrib 0 4 3496 39 TransparencyAttrib::~TransparencyAttrib 0 0 0
46
TransparencyAttrib::~TransparencyAttrib(void);

2228 9 get_blank 0 4 3498 22 ShaderInput::get_blank 0 1 418 371
////////////////////////////////////////////////////////////////////
//     Function: ShaderInput::get_blank
//       Access: Public, Static
//  Description: Returns a static ShaderInput object with
//               name NULL, priority zero, type INVALID, and
//               all value-fields cleared.
////////////////////////////////////////////////////////////////////
55
static ShaderInput const *ShaderInput::get_blank(void);

2229 11 ShaderInput 0 4 3498 24 ShaderInput::ShaderInput 0 35 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 7873
////////////////////////////////////////////////////////////////////
//     Function: ShaderInput::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ShaderInput::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ShaderInput::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ShaderInput::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ShaderInput::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ShaderInput::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ShaderInput::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ShaderInput::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ShaderInput::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ShaderInput::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ShaderInput::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ShaderInput::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ShaderInput::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ShaderInput::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ShaderInput::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ShaderInput::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ShaderInput::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ShaderInput::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ShaderInput::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ShaderInput::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ShaderInput::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ShaderInput::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ShaderInput::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ShaderInput::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ShaderInput::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ShaderInput::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ShaderInput::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ShaderInput::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ShaderInput::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ShaderInput::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ShaderInput::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ShaderInput::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ShaderInput::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ShaderInput::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ShaderInput::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
3435
inline ShaderInput::ShaderInput(CPT_InternalName name, int priority = 0);
inline ShaderInput::ShaderInput(CPT_InternalName name, Texture *tex, int priority = 0);
inline ShaderInput::ShaderInput(CPT_InternalName name, ParamValueBase *param, int priority = 0);
inline ShaderInput::ShaderInput(CPT_InternalName name, PTA_float const &ptr, int priority = 0);
inline ShaderInput::ShaderInput(CPT_InternalName name, PTA_LVecBase4f const &ptr, int priority = 0);
inline ShaderInput::ShaderInput(CPT_InternalName name, PTA_LVecBase3f const &ptr, int priority = 0);
inline ShaderInput::ShaderInput(CPT_InternalName name, PTA_LVecBase2f const &ptr, int priority = 0);
inline ShaderInput::ShaderInput(CPT_InternalName name, PTA_LMatrix4f const &ptr, int priority = 0);
inline ShaderInput::ShaderInput(CPT_InternalName name, PTA_LMatrix3f const &ptr, int priority = 0);
inline ShaderInput::ShaderInput(CPT_InternalName name, LVecBase4f const &vec, int priority = 0);
inline ShaderInput::ShaderInput(CPT_InternalName name, LVecBase3f const &vec, int priority = 0);
inline ShaderInput::ShaderInput(CPT_InternalName name, LVecBase2f const &vec, int priority = 0);
inline ShaderInput::ShaderInput(CPT_InternalName name, LMatrix4f const &mat, int priority = 0);
inline ShaderInput::ShaderInput(CPT_InternalName name, LMatrix3f const &mat, int priority = 0);
inline ShaderInput::ShaderInput(CPT_InternalName name, PTA_double const &ptr, int priority = 0);
inline ShaderInput::ShaderInput(CPT_InternalName name, PTA_LVecBase4d const &ptr, int priority = 0);
inline ShaderInput::ShaderInput(CPT_InternalName name, PTA_LVecBase3d const &ptr, int priority = 0);
inline ShaderInput::ShaderInput(CPT_InternalName name, PTA_LVecBase2d const &ptr, int priority = 0);
inline ShaderInput::ShaderInput(CPT_InternalName name, PTA_LMatrix4d const &ptr, int priority = 0);
inline ShaderInput::ShaderInput(CPT_InternalName name, PTA_LMatrix3d const &ptr, int priority = 0);
inline ShaderInput::ShaderInput(CPT_InternalName name, LVecBase4d const &vec, int priority = 0);
inline ShaderInput::ShaderInput(CPT_InternalName name, LVecBase3d const &vec, int priority = 0);
inline ShaderInput::ShaderInput(CPT_InternalName name, LVecBase2d const &vec, int priority = 0);
inline ShaderInput::ShaderInput(CPT_InternalName name, LMatrix4d const &mat, int priority = 0);
inline ShaderInput::ShaderInput(CPT_InternalName name, LMatrix3d const &mat, int priority = 0);
inline ShaderInput::ShaderInput(CPT_InternalName name, PTA_int const &ptr, int priority = 0);
inline ShaderInput::ShaderInput(CPT_InternalName name, PTA_LVecBase4i const &ptr, int priority = 0);
inline ShaderInput::ShaderInput(CPT_InternalName name, PTA_LVecBase3i const &ptr, int priority = 0);
inline ShaderInput::ShaderInput(CPT_InternalName name, PTA_LVecBase2i const &ptr, int priority = 0);
inline ShaderInput::ShaderInput(CPT_InternalName name, LVecBase4i const &vec, int priority = 0);
inline ShaderInput::ShaderInput(CPT_InternalName name, LVecBase3i const &vec, int priority = 0);
inline ShaderInput::ShaderInput(CPT_InternalName name, LVecBase2i const &vec, int priority = 0);
ShaderInput::ShaderInput(CPT_InternalName name, NodePath const &np, int priority = 0);
ShaderInput::ShaderInput(CPT_InternalName name, Texture *tex, bool read, bool write, int z = -1, int n = 0, int priority = 0);
ShaderInput::ShaderInput(CPT_InternalName name, Texture *tex, SamplerState const &sampler, int priority = 0);

2230 8 get_name 0 4 3498 21 ShaderInput::get_name 0 1 419 220
////////////////////////////////////////////////////////////////////
//     Function: ShaderInput::get_name
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
61
inline InternalName const *ShaderInput::get_name(void) const;

2231 14 get_value_type 0 4 3498 27 ShaderInput::get_value_type 0 1 420 226
////////////////////////////////////////////////////////////////////
//     Function: ShaderInput::get_value_type
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
51
inline int ShaderInput::get_value_type(void) const;

2232 12 get_priority 0 4 3498 25 ShaderInput::get_priority 0 1 421 224
////////////////////////////////////////////////////////////////////
//     Function: ShaderInput::get_priority
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
49
inline int ShaderInput::get_priority(void) const;

2233 10 get_vector 0 4 3498 23 ShaderInput::get_vector 0 1 422 222
////////////////////////////////////////////////////////////////////
//     Function: ShaderInput::get_vector
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
60
inline LVecBase4 const &ShaderInput::get_vector(void) const;

2234 7 get_ptr 0 4 3498 20 ShaderInput::get_ptr 0 1 423 219
////////////////////////////////////////////////////////////////////
//     Function: ShaderInput::get_ptr
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
69
inline Shader::ShaderPtrData const &ShaderInput::get_ptr(void) const;

2235 12 get_nodepath 0 4 3498 25 ShaderInput::get_nodepath 0 1 424 335
////////////////////////////////////////////////////////////////////
//     Function: ShaderInput::get_nodepath
//       Access: Published
//  Description: Warning: no error checking is done.  This *will*
//               crash if get_value_type() is not M_nodepath.
////////////////////////////////////////////////////////////////////
54
NodePath const &ShaderInput::get_nodepath(void) const;

2236 11 get_texture 0 4 3498 24 ShaderInput::get_texture 0 1 425 223
////////////////////////////////////////////////////////////////////
//     Function: ShaderInput::get_texture
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
46
Texture *ShaderInput::get_texture(void) const;

2237 11 get_sampler 0 4 3498 24 ShaderInput::get_sampler 0 1 426 259
////////////////////////////////////////////////////////////////////
//     Function: ShaderInput::get_sampler
//       Access: Published
//  Description: Warning: no error checking is done.
////////////////////////////////////////////////////////////////////
57
SamplerState const &ShaderInput::get_sampler(void) const;

2238 14 get_class_type 0 4 3498 27 ShaderInput::get_class_type 0 1 427 0
52
static TypeHandle ShaderInput::get_class_type(void);

2239 22 TextureStageCollection 0 4 3501 46 TextureStageCollection::TextureStageCollection 0 2 428 429 475
////////////////////////////////////////////////////////////////////
//     Function: TextureStageCollection::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: TextureStageCollection::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
137
TextureStageCollection::TextureStageCollection(void);
TextureStageCollection::TextureStageCollection(TextureStageCollection const &copy);

2240 10 operator = 0 4 3501 34 TextureStageCollection::operator = 0 1 430 0
76
void TextureStageCollection::operator =(TextureStageCollection const &copy);

2241 23 ~TextureStageCollection 0 4 3501 47 TextureStageCollection::~TextureStageCollection 0 0 233
////////////////////////////////////////////////////////////////////
//     Function: TextureStageCollection::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
61
inline TextureStageCollection::~TextureStageCollection(void);

2242 17 add_texture_stage 0 4 3501 41 TextureStageCollection::add_texture_stage 0 1 431 283
////////////////////////////////////////////////////////////////////
//     Function: TextureStageCollection::add_texture_stage
//       Access: Published
//  Description: Adds a new TextureStage to the collection.
////////////////////////////////////////////////////////////////////
81
void TextureStageCollection::add_texture_stage(TextureStage *node_texture_stage);

2243 20 remove_texture_stage 0 4 3501 44 TextureStageCollection::remove_texture_stage 0 1 432 428
////////////////////////////////////////////////////////////////////
//     Function: TextureStageCollection::remove_texture_stage
//       Access: Published
//  Description: Removes the indicated TextureStage from the collection.
//               Returns true if the texture_stage was removed, false if it was
//               not a member of the collection.
////////////////////////////////////////////////////////////////////
84
bool TextureStageCollection::remove_texture_stage(TextureStage *node_texture_stage);

2244 23 add_texture_stages_from 0 4 3501 47 TextureStageCollection::add_texture_stages_from 0 1 433 516
////////////////////////////////////////////////////////////////////
//     Function: TextureStageCollection::add_texture_stages_from
//       Access: Published
//  Description: Adds all the TextureStages indicated in the other
//               collection to this texture_stage.  The other texture_stages are simply
//               appended to the end of the texture_stages in this list;
//               duplicates are not automatically removed.
////////////////////////////////////////////////////////////////////
90
void TextureStageCollection::add_texture_stages_from(TextureStageCollection const &other);

2245 26 remove_texture_stages_from 0 4 3501 50 TextureStageCollection::remove_texture_stages_from 0 1 434 352
////////////////////////////////////////////////////////////////////
//     Function: TextureStageCollection::remove_texture_stages_from
//       Access: Published
//  Description: Removes from this collection all of the TextureStages
//               listed in the other collection.
////////////////////////////////////////////////////////////////////
93
void TextureStageCollection::remove_texture_stages_from(TextureStageCollection const &other);

2246 31 remove_duplicate_texture_stages 0 4 3501 55 TextureStageCollection::remove_duplicate_texture_stages 0 1 435 494
////////////////////////////////////////////////////////////////////
//     Function: TextureStageCollection::remove_duplicate_texture_stages
//       Access: Published
//  Description: Removes any duplicate entries of the same TextureStages
//               on this collection.  If a TextureStage appears multiple
//               times, the first appearance is retained; subsequent
//               appearances are removed.
////////////////////////////////////////////////////////////////////
67
void TextureStageCollection::remove_duplicate_texture_stages(void);

2247 17 has_texture_stage 0 4 3501 41 TextureStageCollection::has_texture_stage 0 1 436 345
////////////////////////////////////////////////////////////////////
//     Function: TextureStageCollection::has_texture_stage
//       Access: Published
//  Description: Returns true if the indicated TextureStage appears in
//               this collection, false otherwise.
////////////////////////////////////////////////////////////////////
82
bool TextureStageCollection::has_texture_stage(TextureStage *texture_stage) const;

2248 5 clear 0 4 3501 29 TextureStageCollection::clear 0 1 437 275
////////////////////////////////////////////////////////////////////
//     Function: TextureStageCollection::clear
//       Access: Published
//  Description: Removes all TextureStages from the collection.
////////////////////////////////////////////////////////////////////
41
void TextureStageCollection::clear(void);

2249 18 find_texture_stage 0 4 3501 42 TextureStageCollection::find_texture_stage 0 1 438 395
////////////////////////////////////////////////////////////////////
//     Function: TextureStageCollection::find_texture_stage
//       Access: Published
//  Description: Returns the texture_stage in the collection with the
//               indicated name, if any, or NULL if no texture_stage has
//               that name.
////////////////////////////////////////////////////////////////////
83
TextureStage *TextureStageCollection::find_texture_stage(string const &name) const;

2250 22 get_num_texture_stages 0 4 3501 46 TextureStageCollection::get_num_texture_stages 0 1 439 300
////////////////////////////////////////////////////////////////////
//     Function: TextureStageCollection::get_num_texture_stages
//       Access: Published
//  Description: Returns the number of TextureStages in the collection.
////////////////////////////////////////////////////////////////////
63
int TextureStageCollection::get_num_texture_stages(void) const;

2251 17 get_texture_stage 0 4 3501 41 TextureStageCollection::get_texture_stage 0 1 440 288
////////////////////////////////////////////////////////////////////
//     Function: TextureStageCollection::get_texture_stage
//       Access: Published
//  Description: Returns the nth TextureStage in the collection.
////////////////////////////////////////////////////////////////////
73
TextureStage *TextureStageCollection::get_texture_stage(int index) const;

2252 11 operator [] 0 4 3501 35 TextureStageCollection::operator [] 0 1 441 408
////////////////////////////////////////////////////////////////////
//     Function: TextureStageCollection::operator []
//       Access: Published
//  Description: Returns the nth TextureStage in the collection.  This is
//               the same as get_texture_stage(), but it may be a more
//               convenient way to access it.
////////////////////////////////////////////////////////////////////
67
TextureStage *TextureStageCollection::operator [](int index) const;

2253 4 size 0 4 3501 28 TextureStageCollection::size 0 1 442 370
////////////////////////////////////////////////////////////////////
//     Function: TextureStageCollection::size
//       Access: Published
//  Description: Returns the number of texture stages in the
//               collection.  This is the same thing as
//               get_num_texture_stages().
////////////////////////////////////////////////////////////////////
45
int TextureStageCollection::size(void) const;

2254 11 operator += 0 4 3501 35 TextureStageCollection::operator += 0 1 443 0
85
inline void TextureStageCollection::operator +=(TextureStageCollection const &other);

2255 10 operator + 0 4 3501 34 TextureStageCollection::operator + 0 1 444 0
108
inline TextureStageCollection TextureStageCollection::operator +(TextureStageCollection const &other) const;

2256 4 sort 0 4 3501 28 TextureStageCollection::sort 0 1 445 347
////////////////////////////////////////////////////////////////////
//     Function: TextureStageCollection::sort
//       Access: Published
//  Description: Sorts the TextureStages in this collection into order
//               by TextureStage::sort(), from lowest to highest.
////////////////////////////////////////////////////////////////////
40
void TextureStageCollection::sort(void);

2257 6 output 0 4 3501 30 TextureStageCollection::output 0 1 446 344
////////////////////////////////////////////////////////////////////
//     Function: TextureStageCollection::output
//       Access: Published
//  Description: Writes a brief one-line description of the
//               TextureStageCollection to the indicated output stream.
////////////////////////////////////////////////////////////////////
56
void TextureStageCollection::output(ostream &out) const;

2258 5 write 0 4 3501 29 TextureStageCollection::write 0 1 447 348
////////////////////////////////////////////////////////////////////
//     Function: TextureStageCollection::write
//       Access: Published
//  Description: Writes a complete multi-line description of the
//               TextureStageCollection to the indicated output stream.
////////////////////////////////////////////////////////////////////
77
void TextureStageCollection::write(ostream &out, int indent_level = 0) const;

2259 8 NodePath 0 4 3502 18 NodePath::NodePath 0 5 448 449 450 451 452 1950
////////////////////////////////////////////////////////////////////
//     Function: NodePath::Default Constructor
//       Access: Published
//  Description: This constructs an empty NodePath with no nodes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::Constructor
//       Access: Published
//  Description: This constructs a new NodePath with a single
//               node.  An ordinary, unattached PandaNode is created
//               with the indicated name.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::Constructor
//       Access: Published
//  Description: This constructs a NodePath for the indicated node.
//               If the node does not have any parents, this creates a
//               singleton NodePath; otherwise, it automatically finds
//               the path from the node to the root.  If the node has
//               multiple paths to the root, one path is chosen
//               arbitrarily and a warning message is printed (but see
//               also NodePath::any_path(), below).
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::Constructor
//       Access: Published
//  Description: Constructs a NodePath with the indicated parent
//               NodePath and child node; the child node must be a
//               stashed or unstashed child of the parent.
////////////////////////////////////////////////////////////////////
422
inline NodePath::NodePath(void);
inline explicit NodePath::NodePath(string const &top_node_name, Thread *current_thread = (get_current_thread()));
inline explicit NodePath::NodePath(PandaNode *node, Thread *current_thread = (get_current_thread()));
explicit NodePath::NodePath(NodePath const &parent, PandaNode *child_node, Thread *current_thread = (get_current_thread()));
inline NodePath::NodePath(NodePath const &copy);

2260 8 any_path 0 4 3502 18 NodePath::any_path 0 1 453 531
////////////////////////////////////////////////////////////////////
//     Function: NodePath::any_path named constructor
//       Access: Published, Static
//  Description: Returns a new NodePath that represents any arbitrary
//               path from the root to the indicated node.  This is
//               the same thing that would be returned by
//               NodePath(node), except that no warning is issued if
//               the path is ambiguous.
////////////////////////////////////////////////////////////////////
108
static inline NodePath NodePath::any_path(PandaNode *node, Thread *current_thread = (get_current_thread()));

2261 10 operator = 0 4 3502 20 NodePath::operator = 0 1 454 0
55
inline void NodePath::operator =(NodePath const &copy);

2262 5 clear 0 4 3502 15 NodePath::clear 0 1 455 311
////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear
//       Access: Published
//  Description: Sets this NodePath to the empty NodePath.  It will
//               no longer point to any node.
////////////////////////////////////////////////////////////////////
34
inline void NodePath::clear(void);

2263 8 __copy__ 0 4 3502 18 NodePath::__copy__ 0 1 456 0
40
NodePath NodePath::__copy__(void) const;

2264 12 __deepcopy__ 0 4 3502 22 NodePath::__deepcopy__ 0 1 457 0
71
PyObject *NodePath::__deepcopy__(PyObject *self, PyObject *memo) const;

2265 10 __reduce__ 0 4 3502 20 NodePath::__reduce__ 0 1 458 0
53
PyObject *NodePath::__reduce__(PyObject *self) const;

2266 18 __reduce_persist__ 0 4 3502 28 NodePath::__reduce_persist__ 0 1 459 0
80
PyObject *NodePath::__reduce_persist__(PyObject *self, PyObject *pickler) const;

2267 9 not_found 0 4 3502 19 NodePath::not_found 0 1 460 318
////////////////////////////////////////////////////////////////////
//     Function: NodePath::not_found named constructor
//       Access: Published, Static
//  Description: Creates a NodePath with the ET_not_found error type
//               set.
////////////////////////////////////////////////////////////////////
49
static inline NodePath NodePath::not_found(void);

2268 7 removed 0 4 3502 17 NodePath::removed 0 1 461 314
////////////////////////////////////////////////////////////////////
//     Function: NodePath::removed named constructor
//       Access: Published, Static
//  Description: Creates a NodePath with the ET_removed error type
//               set.
////////////////////////////////////////////////////////////////////
47
static inline NodePath NodePath::removed(void);

2269 4 fail 0 4 3502 14 NodePath::fail 0 1 462 308
////////////////////////////////////////////////////////////////////
//     Function: NodePath::fail named constructor
//       Access: Published, Static
//  Description: Creates a NodePath with the ET_fail error type
//               set.
////////////////////////////////////////////////////////////////////
44
static inline NodePath NodePath::fail(void);

2270 20 set_max_search_depth 0 4 3502 30 NodePath::set_max_search_depth 0 1 463 1267
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_max_search_depth
//       Access: Published, Static
//  Description: Certain operations, such as find() or
//               find_all_matches(), require a traversal of the scene
//               graph to search for the target node or nodes.  This
//               traversal does not attempt to detect cycles, so an
//               arbitrary cap is set on the depth of the traversal as
//               a poor man's cycle detection, in the event that a
//               cycle has inadvertently been introduced into the
//               scene graph.
//
//               There may be other reasons you'd want to truncate a
//               search before the bottom of the scene graph has been
//               reached.  In any event, this function sets the limit
//               on the number of levels that a traversal will
//               continue, and hence the maximum length of a path that
//               may be returned by a traversal.
//
//               This is a static method, and so changing this
//               parameter affects all of the NodePaths in the
//               universe.
////////////////////////////////////////////////////////////////////
72
static inline void NodePath::set_max_search_depth(int max_search_depth);

2271 20 get_max_search_depth 0 4 3502 30 NodePath::get_max_search_depth 0 1 464 336
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_max_search_depth
//       Access: Published, Static
//  Description: Returns the current setting of the search depth
//               limit.  See set_max_search_depth.
////////////////////////////////////////////////////////////////////
55
static inline int NodePath::get_max_search_depth(void);

2272 8 is_empty 0 4 3502 18 NodePath::is_empty 0 1 465 309
// Methods to query a NodePath's contents.

////////////////////////////////////////////////////////////////////
//     Function: NodePath::is_empty
//       Access: Published
//  Description: Returns true if the NodePath contains no nodes.
////////////////////////////////////////////////////////////////////
43
inline bool NodePath::is_empty(void) const;

2273 22 operator typecast bool 0 132 3502 32 NodePath::operator typecast bool 0 1 975 0
50
bool NodePath::operator typecast bool(void) const;

2274 12 is_singleton 0 4 3502 22 NodePath::is_singleton 0 1 466 294
////////////////////////////////////////////////////////////////////
//     Function: NodePath::is_singleton
//       Access: Published
//  Description: Returns true if the NodePath contains exactly one
//               node.
////////////////////////////////////////////////////////////////////
90
inline bool NodePath::is_singleton(Thread *current_thread = (get_current_thread())) const;

2275 13 get_num_nodes 0 4 3502 23 NodePath::get_num_nodes 0 1 467 263
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_num_nodes
//       Access: Published
//  Description: Returns the number of nodes in the path.
////////////////////////////////////////////////////////////////////
83
int NodePath::get_num_nodes(Thread *current_thread = (get_current_thread())) const;

2276 8 get_node 0 4 3502 18 NodePath::get_node 0 1 468 812
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_node
//       Access: Published
//  Description: Returns the nth node of the path, where 0 is the
//               referenced (bottom) node and get_num_nodes() - 1 is
//               the top node.  This requires iterating through the
//               path.
//
//               Also see node(), which is a convenience function to
//               return the same thing as get_node(0) (since the
//               bottom node is the most important node in the
//               NodePath, and is the one most frequently referenced).
//
//               Note that this function returns the same thing as
//               get_ancestor(index).node().
////////////////////////////////////////////////////////////////////
96
PandaNode *NodePath::get_node(int index, Thread *current_thread = (get_current_thread())) const;

2277 12 get_ancestor 0 4 3502 22 NodePath::get_ancestor 0 1 469 531
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_ancestor
//       Access: Published
//  Description: Returns the nth ancestor of the path, where 0 is the
//               NodePath itself and get_num_nodes() - 1 is get_top().
//               This requires iterating through the path.
//
//               Also see get_node(), which returns the same thing as
//               a PandaNode pointer, not a NodePath.
////////////////////////////////////////////////////////////////////
98
NodePath NodePath::get_ancestor(int index, Thread *current_thread = (get_current_thread())) const;

2278 14 get_error_type 0 4 3502 24 NodePath::get_error_type 0 1 470 337
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_error_type
//       Access: Published
//  Description: If is_empty() is true, this returns a code that
//               represents the reason why the NodePath is empty.
////////////////////////////////////////////////////////////////////
64
inline NodePath::ErrorType NodePath::get_error_type(void) const;

2279 12 get_top_node 0 4 3502 22 NodePath::get_top_node 0 1 471 345
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_top_node
//       Access: Published
//  Description: Returns the top node of the path, or NULL if the path
//               is empty.  This requires iterating through the path.
////////////////////////////////////////////////////////////////////
96
inline PandaNode *NodePath::get_top_node(Thread *current_thread = (get_current_thread())) const;

2280 7 get_top 0 4 3502 17 NodePath::get_top 0 1 472 340
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_top
//       Access: Published
//  Description: Returns a singleton NodePath that represents the top
//               of the path, or empty NodePath if this path is empty.
////////////////////////////////////////////////////////////////////
82
NodePath NodePath::get_top(Thread *current_thread = (get_current_thread())) const;

2281 4 node 0 4 3502 14 NodePath::node 0 1 473 254
////////////////////////////////////////////////////////////////////
//     Function: NodePath::node
//       Access: Published
//  Description: Returns the referenced node of the path.
////////////////////////////////////////////////////////////////////
45
inline PandaNode *NodePath::node(void) const;

2282 7 get_key 0 4 3502 17 NodePath::get_key 0 1 474 986
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_key
//       Access: Published
//  Description: Returns an integer that is guaranteed to be the same
//               for all NodePaths that represent the same node
//               instance, and different for all NodePaths that
//               represent a different node instance.
//
//               The same key will be returned for a particular
//               instance as long as at least one NodePath exists that
//               represents that instance; if all NodePaths for a
//               particular instance destruct and a new one is later
//               created, it may have a different index.  However, a
//               given key will never be reused for a different
//               instance (unless the app has been running long enough
//               that we overflow the integer key value).
////////////////////////////////////////////////////////////////////
41
inline int NodePath::get_key(void) const;

2283 8 add_hash 0 4 3502 18 NodePath::add_hash 0 1 475 866
////////////////////////////////////////////////////////////////////
//     Function: NodePath::add_hash
//       Access: Published
//  Description: Adds the NodePath into the running hash.  This is
//               intended to be used by lower-level code that computes
//               a hash for each NodePath.  It modifies the hash value
//               passed in by a unique adjustment for each NodePath,
//               and returns the modified hash.
//
//               This is similar to the unique integer returned by
//               get_key(), but it is not guaranteed to remain unique
//               beyond the lifetime of this particular NodePath.
//               Once this NodePath destructs, a different NodePath
//               may be created which shares the same hash value.
////////////////////////////////////////////////////////////////////
52
inline size_t NodePath::add_hash(size_t hash) const;

2284 13 is_same_graph 0 4 3502 23 NodePath::is_same_graph 0 1 476 526
////////////////////////////////////////////////////////////////////
//     Function: NodePath::is_same_graph
//       Access: Published
//  Description: Returns true if the node represented by this NodePath
//               is parented within the same graph as that of the
//               other NodePath.  This is essentially the same thing
//               as asking whether get_top() of both NodePaths is the
//               same (e.g., both "render").
////////////////////////////////////////////////////////////////////
114
inline bool NodePath::is_same_graph(NodePath const &other, Thread *current_thread = (get_current_thread())) const;

2285 14 is_ancestor_of 0 4 3502 24 NodePath::is_ancestor_of 0 1 477 387
////////////////////////////////////////////////////////////////////
//     Function: NodePath::is_ancestor_of
//       Access: Published
//  Description: Returns true if the node represented by this NodePath
//               is a parent or other ancestor of the other NodePath,
//               or false if it is not.
////////////////////////////////////////////////////////////////////
115
inline bool NodePath::is_ancestor_of(NodePath const &other, Thread *current_thread = (get_current_thread())) const;

2286 19 get_common_ancestor 0 4 3502 29 NodePath::get_common_ancestor 0 1 478 468
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_common_ancestor
//       Access: Published
//  Description: Returns the lowest NodePath that both of these two
//               NodePaths have in common: the first ancestor that
//               both of them share.  If the two NodePaths are
//               unrelated, returns NodePath::not_found().
////////////////////////////////////////////////////////////////////
124
inline NodePath NodePath::get_common_ancestor(NodePath const &other, Thread *current_thread = (get_current_thread())) const;

2287 12 get_children 0 4 3502 22 NodePath::get_children 0 1 479 297
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_children
//       Access: Published
//  Description: Returns the set of all child nodes of the referenced
//               node.
////////////////////////////////////////////////////////////////////
97
NodePathCollection NodePath::get_children(Thread *current_thread = (get_current_thread())) const;

2288 16 get_num_children 0 4 3502 26 NodePath::get_num_children 0 1 480 280
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_num_children
//       Access: Published
//  Description: Returns the number of children of the referenced node.
////////////////////////////////////////////////////////////////////
93
inline int NodePath::get_num_children(Thread *current_thread = (get_current_thread())) const;

2289 9 get_child 0 4 3502 19 NodePath::get_child 0 1 481 305
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_child
//       Access: Published
//  Description: Returns a NodePath representing the nth child of the
//               referenced node.
////////////////////////////////////////////////////////////////////
98
inline NodePath NodePath::get_child(int n, Thread *current_thread = (get_current_thread())) const;

2290 20 get_stashed_children 0 4 3502 30 NodePath::get_stashed_children 0 1 482 474
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_stashed_children
//       Access: Published
//  Description: Returns the set of all child nodes of the referenced
//               node that have been stashed.  These children are not
//               normally visible on the node, and do not appear in
//               the list returned by get_children().
////////////////////////////////////////////////////////////////////
105
NodePathCollection NodePath::get_stashed_children(Thread *current_thread = (get_current_thread())) const;

2291 21 count_num_descendants 0 4 3502 31 NodePath::count_num_descendants 0 1 483 283
////////////////////////////////////////////////////////////////////
//     Function: NodePath::count_num_descendants
//       Access: Published
//  Description: Returns the number of nodes at and below this level.
////////////////////////////////////////////////////////////////////
55
inline int NodePath::count_num_descendants(void) const;

2292 10 has_parent 0 4 3502 20 NodePath::has_parent 0 1 484 339
////////////////////////////////////////////////////////////////////
//     Function: NodePath::has_parent
//       Access: Published
//  Description: Returns true if the referenced node has a parent;
//               i.e. the NodePath chain contains at least two nodes.
////////////////////////////////////////////////////////////////////
88
inline bool NodePath::has_parent(Thread *current_thread = (get_current_thread())) const;

2293 10 get_parent 0 4 3502 20 NodePath::get_parent 0 1 485 448
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_parent
//       Access: Published
//  Description: Returns the NodePath to the parent of the referenced
//               node: that is, this NodePath, shortened by one node.
//               The parent of a singleton NodePath is defined to be
//               the empty NodePath.
////////////////////////////////////////////////////////////////////
92
inline NodePath NodePath::get_parent(Thread *current_thread = (get_current_thread())) const;

2294 8 get_sort 0 4 3502 18 NodePath::get_sort 0 1 486 513
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_sort
//       Access: Published
//  Description: Returns the sort value of the referenced node within
//               its parent; that is, the sort number passed on the
//               last reparenting operation for this node.  This will
//               control the position of the node within its parent's
//               list of children.
////////////////////////////////////////////////////////////////////
78
int NodePath::get_sort(Thread *current_thread = (get_current_thread())) const;

2295 4 find 0 4 3502 14 NodePath::find 0 1 487 435
////////////////////////////////////////////////////////////////////
//     Function: NodePath::find
//       Access: Published
//  Description: Searches for a node below the referenced node that
//               matches the indicated string.  Returns the shortest
//               match found, if any, or an empty NodePath if no match
//               can be found.
////////////////////////////////////////////////////////////////////
50
NodePath NodePath::find(string const &path) const;

2296 12 find_path_to 0 4 3502 22 NodePath::find_path_to 0 1 488 340
////////////////////////////////////////////////////////////////////
//     Function: NodePath::find_path_to
//       Access: Published
//  Description: Searches for the indicated node below this node and
//               returns the shortest NodePath that connects them.
////////////////////////////////////////////////////////////////////
55
NodePath NodePath::find_path_to(PandaNode *node) const;

2297 16 find_all_matches 0 4 3502 26 NodePath::find_all_matches 0 1 489 419
////////////////////////////////////////////////////////////////////
//     Function: NodePath::find_all_matches
//       Access: Published
//  Description: Returns the complete set of all NodePaths that begin
//               with this NodePath and can be extended by
//               path.  The shortest paths will be listed
//               first.
////////////////////////////////////////////////////////////////////
72
NodePathCollection NodePath::find_all_matches(string const &path) const;

2298 17 find_all_paths_to 0 4 3502 27 NodePath::find_all_paths_to 0 1 490 394
////////////////////////////////////////////////////////////////////
//     Function: NodePath::find_all_paths_to
//       Access: Published
//  Description: Returns the set of all NodePaths that extend from
//               this NodePath down to the indicated node.  The
//               shortest paths will be listed first.
////////////////////////////////////////////////////////////////////
70
NodePathCollection NodePath::find_all_paths_to(PandaNode *node) const;

2299 11 reparent_to 0 4 3502 21 NodePath::reparent_to 0 1 491 1023
// Methods that actually move nodes around in the scene graph.  The
// optional "sort" parameter can be used to force a particular
// ordering between sibling nodes, useful when dealing with LOD's
// and similar switch nodes.  If the sort value is the same, nodes
// will be arranged in the order they were added.

////////////////////////////////////////////////////////////////////
//     Function: NodePath::reparent_to
//       Access: Published
//  Description: Removes the referenced node of the NodePath from its
//               current parent and attaches it to the referenced node
//               of the indicated NodePath.
//
//               If the destination NodePath is empty, this is the
//               same thing as detach_node().
//
//               If the referenced node is already a child of the
//               indicated NodePath (via some other instance), this
//               operation fails and leaves the NodePath detached.
////////////////////////////////////////////////////////////////////
113
void NodePath::reparent_to(NodePath const &other, int sort = 0, Thread *current_thread = (get_current_thread()));

2300 8 stash_to 0 4 3502 18 NodePath::stash_to 0 1 492 441
////////////////////////////////////////////////////////////////////
//     Function: NodePath::stash_to
//       Access: Published
//  Description: Similar to reparent_to(), but the node is added to
//               its new parent's stashed list, so that the result is
//               equivalent to calling reparent_to() immediately
//               followed by stash().
////////////////////////////////////////////////////////////////////
110
void NodePath::stash_to(NodePath const &other, int sort = 0, Thread *current_thread = (get_current_thread()));

2301 15 wrt_reparent_to 0 4 3502 25 NodePath::wrt_reparent_to 0 1 493 514
////////////////////////////////////////////////////////////////////
//     Function: NodePath::wrt_reparent_to
//       Access: Published
//  Description: This functions identically to reparent_to(), except
//               the transform on this node is also adjusted so that
//               the node remains in the same place in world
//               coordinates, even if it is reparented into a
//               different coordinate system.
////////////////////////////////////////////////////////////////////
117
void NodePath::wrt_reparent_to(NodePath const &other, int sort = 0, Thread *current_thread = (get_current_thread()));

2302 11 instance_to 0 4 3502 21 NodePath::instance_to 0 1 494 1455
////////////////////////////////////////////////////////////////////
//     Function: NodePath::instance_to
//       Access: Published
//  Description: Adds the referenced node of the NodePath as a child
//               of the referenced node of the indicated other
//               NodePath.  Any other parent-child relations of the
//               node are unchanged; in particular, the node is not
//               removed from its existing parent, if any.
//
//               If the node already had an existing parent, this
//               method will create a new instance of the node within
//               the scene graph.
//
//               This does not change the NodePath itself, but does
//               return a new NodePath that reflects the new instance
//               node.
//
//               If the destination NodePath is empty, this creates a
//               new instance which is not yet parented to any node.
//               A new instance of this sort cannot easily be
//               differentiated from other similar instances, but it
//               is nevertheless a different instance and it will
//               return a different get_id() value.
//
//               If the referenced node is already a child of the
//               indicated NodePath, returns that already-existing
//               instance, unstashing it first if necessary.
////////////////////////////////////////////////////////////////////
123
NodePath NodePath::instance_to(NodePath const &other, int sort = 0, Thread *current_thread = (get_current_thread())) const;

2303 19 instance_under_node 0 4 3502 29 NodePath::instance_under_node 0 1 495 516
////////////////////////////////////////////////////////////////////
//     Function: NodePath::instance_under_node
//       Access: Published
//  Description: Behaves like instance_to(), but implicitly creates a
//               new node to instance the geometry under, and returns a
//               NodePath to that new node.  This allows the
//               programmer to set a unique state and/or transform on
//               this instance.
////////////////////////////////////////////////////////////////////
151
NodePath NodePath::instance_under_node(NodePath const &other, string const &name, int sort = 0, Thread *current_thread = (get_current_thread())) const;

2304 7 copy_to 0 4 3502 17 NodePath::copy_to 0 1 496 489
////////////////////////////////////////////////////////////////////
//     Function: NodePath::copy_to
//       Access: Published
//  Description: Functions like instance_to(), except a deep
//               copy is made of the referenced node and all of its
//               descendents, which is then parented to the indicated
//               node.  A NodePath to the newly created copy is
//               returned.
////////////////////////////////////////////////////////////////////
119
NodePath NodePath::copy_to(NodePath const &other, int sort = 0, Thread *current_thread = (get_current_thread())) const;

2305 15 attach_new_node 0 4 3502 25 NodePath::attach_new_node 0 2 497 498 1179
////////////////////////////////////////////////////////////////////
//     Function: NodePath::attach_new_node
//       Access: Published
//  Description: Creates an ordinary PandaNode and attaches it below
//               the current NodePath, returning a new NodePath that
//               references it.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::attach_new_node
//       Access: Published
//  Description: Attaches a new node, with or without existing
//               parents, to the scene graph below the referenced node
//               of this NodePath.  This is the preferred way to add
//               nodes to the graph.
//
//               If the node was already a child of the parent, this
//               returns a NodePath to the existing child.
//
//               This does *not* automatically extend the current
//               NodePath to reflect the attachment; however, a
//               NodePath that does reflect this extension is
//               returned.
////////////////////////////////////////////////////////////////////
253
NodePath NodePath::attach_new_node(PandaNode *node, int sort = 0, Thread *current_thread = (get_current_thread())) const;
inline NodePath NodePath::attach_new_node(string const &name, int sort = 0, Thread *current_thread = (get_current_thread())) const;

2306 11 remove_node 0 4 3502 21 NodePath::remove_node 0 1 499 1171
////////////////////////////////////////////////////////////////////
//     Function: NodePath::remove_node
//       Access: Published
//  Description: Disconnects the referenced node from the scene graph.
//               This will also delete the node if there are no other
//               pointers to it.
//
//               Normally, this should be called only when you are
//               really done with the node.  If you want to remove a
//               node from the scene graph but keep it around for
//               later, you should probably use detach_node() instead.
//
//               In practice, the only difference between
//               remove_node() and detach_node() is that remove_node()
//               also resets the NodePath to empty, which will cause
//               the node to be deleted immediately if there are no
//               other references.  On the other hand, detach_node()
//               leaves the NodePath referencing the node, which will
//               keep at least one reference to the node for as long
//               as the NodePath exists.
////////////////////////////////////////////////////////////////////
76
void NodePath::remove_node(Thread *current_thread = (get_current_thread()));

2307 11 detach_node 0 4 3502 21 NodePath::detach_node 0 1 500 1153
////////////////////////////////////////////////////////////////////
//     Function: NodePath::detach_node
//       Access: Published
//  Description: Disconnects the referenced node from its parent, but
//               does not immediately delete it.  The NodePath retains
//               a pointer to the node, and becomes a singleton
//               NodePath.
//
//               This should be called to detach a node from the scene
//               graph, with the option of reattaching it later to the
//               same parent or to a different parent.
//
//               In practice, the only difference between
//               remove_node() and detach_node() is that remove_node()
//               also resets the NodePath to empty, which will cause
//               the node to be deleted immediately if there are no
//               other references.  On the other hand, detach_node()
//               leaves the NodePath referencing the node, which will
//               keep at least one reference to the node for as long
//               as the NodePath exists.
////////////////////////////////////////////////////////////////////
76
void NodePath::detach_node(Thread *current_thread = (get_current_thread()));

2308 6 output 0 4 3502 16 NodePath::output 0 1 501 310
////////////////////////////////////////////////////////////////////
//     Function: NodePath::output
//       Access: Published
//  Description: Writes a sensible description of the NodePath to the
//               indicated output stream.
////////////////////////////////////////////////////////////////////
42
void NodePath::output(ostream &out) const;

2309 2 ls 0 4 3502 12 NodePath::ls 0 2 502 503 532
////////////////////////////////////////////////////////////////////
//     Function: NodePath::ls
//       Access: Published
//  Description: Lists the hierarchy at and below the referenced node.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::ls
//       Access: Published
//  Description: Lists the hierarchy at and below the referenced node.
////////////////////////////////////////////////////////////////////
105
inline void NodePath::ls(void) const;
inline void NodePath::ls(ostream &out, int indent_level = 0) const;

2310 10 reverse_ls 0 4 3502 20 NodePath::reverse_ls 0 2 504 505 548
////////////////////////////////////////////////////////////////////
//     Function: NodePath::reverse_ls
//       Access: Published
//  Description: Lists the hierarchy at and above the referenced node.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::reverse_ls
//       Access: Published
//  Description: Lists the hierarchy at and above the referenced node.
////////////////////////////////////////////////////////////////////
120
inline void NodePath::reverse_ls(void) const;
inline int NodePath::reverse_ls(ostream &out, int indent_level = 0) const;

2311 9 get_state 0 4 3502 19 NodePath::get_state 0 2 506 507 703
// Aggregate transform and state information.

////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_state
//       Access: Published
//  Description: Returns the complete state object set on this node.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_state
//       Access: Published
//  Description: Returns the state changes that must be made to
//               transition to the render state of this node from the
//               render state of the other node.
////////////////////////////////////////////////////////////////////
223
RenderState const *NodePath::get_state(Thread *current_thread = (get_current_thread())) const;
ConstPointerTo< RenderState > NodePath::get_state(NodePath const &other, Thread *current_thread = (get_current_thread())) const;

2312 9 set_state 0 4 3502 19 NodePath::set_state 0 2 508 509 701
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_state
//       Access: Published
//  Description: Changes the complete state object on this node.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_state
//       Access: Published
//  Description: Sets the state object on this node, relative to
//               the other node.  This computes a new state object
//               that will have the indicated value when seen from the
//               other node.
////////////////////////////////////////////////////////////////////
231
inline void NodePath::set_state(RenderState const *state, Thread *current_thread = (get_current_thread()));
void NodePath::set_state(NodePath const &other, RenderState const *state, Thread *current_thread = (get_current_thread()));

2313 13 get_net_state 0 4 3502 23 NodePath::get_net_state 0 1 510 272
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_net_state
//       Access: Published
//  Description: Returns the net state on this node from the root.
////////////////////////////////////////////////////////////////////
116
inline ConstPointerTo< RenderState > NodePath::get_net_state(Thread *current_thread = (get_current_thread())) const;

2314 10 set_attrib 0 4 3502 20 NodePath::set_attrib 0 1 511 474
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_attrib
//       Access: Published
//  Description: Adds the indicated render attribute to the scene
//               graph on this node.  This attribute will now apply to
//               this node and everything below.  If there was already
//               an attribute of the same type, it is replaced.
////////////////////////////////////////////////////////////////////
79
inline void NodePath::set_attrib(RenderAttrib const *attrib, int priority = 0);

2315 10 get_attrib 0 4 3502 20 NodePath::get_attrib 0 1 512 537
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_attrib
//       Access: Published
//  Description: Returns the render attribute of the indicated type,
//               if it is defined on the node, or NULL if it is not.
//               This checks only what is set on this particular node
//               level, and has nothing to do with what render
//               attributes may be inherited from parent nodes.
////////////////////////////////////////////////////////////////////
71
inline RenderAttrib const *NodePath::get_attrib(TypeHandle type) const;

2316 10 has_attrib 0 4 3502 20 NodePath::has_attrib 0 1 513 367
////////////////////////////////////////////////////////////////////
//     Function: NodePath::has_attrib
//       Access: Published
//  Description: Returns true if there is a render attribute of the
//               indicated type defined on this node, or false if
//               there is not.
////////////////////////////////////////////////////////////////////
56
inline bool NodePath::has_attrib(TypeHandle type) const;

2317 12 clear_attrib 0 4 3502 22 NodePath::clear_attrib 0 1 514 450
////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_attrib
//       Access: Published
//  Description: Removes the render attribute of the given type from
//               this node.  This node, and the subgraph below, will
//               now inherit the indicated render attribute from the
//               nodes above this one.
////////////////////////////////////////////////////////////////////
52
inline void NodePath::clear_attrib(TypeHandle type);

2318 10 set_effect 0 4 3502 20 NodePath::set_effect 0 1 515 385
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_effect
//       Access: Published
//  Description: Adds the indicated render effect to the scene
//               graph on this node.  If there was already an effect
//               of the same type, it is replaced.
////////////////////////////////////////////////////////////////////
61
inline void NodePath::set_effect(RenderEffect const *effect);

2319 10 get_effect 0 4 3502 20 NodePath::get_effect 0 1 516 337
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_effect
//       Access: Published
//  Description: Returns the render effect of the indicated type,
//               if it is defined on the node, or NULL if it is not.
////////////////////////////////////////////////////////////////////
71
inline RenderEffect const *NodePath::get_effect(TypeHandle type) const;

2320 10 has_effect 0 4 3502 20 NodePath::has_effect 0 1 517 364
////////////////////////////////////////////////////////////////////
//     Function: NodePath::has_effect
//       Access: Published
//  Description: Returns true if there is a render effect of the
//               indicated type defined on this node, or false if
//               there is not.
////////////////////////////////////////////////////////////////////
56
inline bool NodePath::has_effect(TypeHandle type) const;

2321 12 clear_effect 0 4 3502 22 NodePath::clear_effect 0 1 518 298
////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_effect
//       Access: Published
//  Description: Removes the render effect of the given type from
//               this node.
////////////////////////////////////////////////////////////////////
52
inline void NodePath::clear_effect(TypeHandle type);

2322 11 set_effects 0 4 3502 21 NodePath::set_effects 0 1 519 432
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_effects
//       Access: Published
//  Description: Sets the complete RenderEffects that will be applied
//               this node.  This completely replaces whatever has
//               been set on this node via repeated calls to
//               set_attrib().
////////////////////////////////////////////////////////////////////
64
inline void NodePath::set_effects(RenderEffects const *effects);

2323 11 get_effects 0 4 3502 21 NodePath::get_effects 0 1 520 307
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_effects
//       Access: Published
//  Description: Returns the complete RenderEffects that will be
//               applied to this node.
////////////////////////////////////////////////////////////////////
62
inline RenderEffects const *NodePath::get_effects(void) const;

2324 13 clear_effects 0 4 3502 23 NodePath::clear_effects 0 1 521 266
////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_effects
//       Access: Published
//  Description: Resets this node to have no render effects.
////////////////////////////////////////////////////////////////////
42
inline void NodePath::clear_effects(void);

2325 13 get_transform 0 4 3502 23 NodePath::get_transform 0 2 522 523 667
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_transform
//       Access: Published
//  Description: Returns the complete transform object set on this node.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_transform
//       Access: Published
//  Description: Returns the relative transform to this node from the
//               other node; i.e. the transformation of this node
//               as seen from the other node.
////////////////////////////////////////////////////////////////////
237
TransformState const *NodePath::get_transform(Thread *current_thread = (get_current_thread())) const;
ConstPointerTo< TransformState > NodePath::get_transform(NodePath const &other, Thread *current_thread = (get_current_thread())) const;

2326 15 clear_transform 0 4 3502 25 NodePath::clear_transform 0 2 524 525 691
////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_transform
//       Access: Published
//  Description: Sets the transform object on this node to identity.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_transform
//       Access: Published
//  Description: Sets the transform object on this node to identity,
//               relative to the other node.  This effectively places
//               this node at the same position as the other node.
////////////////////////////////////////////////////////////////////
198
inline void NodePath::clear_transform(Thread *current_thread = (get_current_thread()));
inline void NodePath::clear_transform(NodePath const &other, Thread *current_thread = (get_current_thread()));

2327 13 set_transform 0 4 3502 23 NodePath::set_transform 0 2 526 527 721
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_transform
//       Access: Published
//  Description: Changes the complete transform object on this node.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_transform
//       Access: Published
//  Description: Sets the transform object on this node, relative to
//               the other node.  This computes a new transform object
//               that will have the indicated value when seen from the
//               other node.
////////////////////////////////////////////////////////////////////
253
inline void NodePath::set_transform(TransformState const *transform, Thread *current_thread = (get_current_thread()));
void NodePath::set_transform(NodePath const &other, TransformState const *transform, Thread *current_thread = (get_current_thread()));

2328 17 get_net_transform 0 4 3502 27 NodePath::get_net_transform 0 1 528 280
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_net_transform
//       Access: Published
//  Description: Returns the net transform on this node from the root.
////////////////////////////////////////////////////////////////////
123
inline ConstPointerTo< TransformState > NodePath::get_net_transform(Thread *current_thread = (get_current_thread())) const;

2329 18 get_prev_transform 0 4 3502 28 NodePath::get_prev_transform 0 2 529 530 823
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_prev_transform
//       Access: Published
//  Description: Returns the transform that has been set as this
//               node's "previous" position.  See
//               set_prev_transform().
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_prev_transform
//       Access: Published
//  Description: Returns the relative "previous" transform to this
//               node from the other node; i.e. the position of this
//               node in the previous frame, as seen by the other node
//               in the previous frame.
////////////////////////////////////////////////////////////////////
247
TransformState const *NodePath::get_prev_transform(Thread *current_thread = (get_current_thread())) const;
ConstPointerTo< TransformState > NodePath::get_prev_transform(NodePath const &other, Thread *current_thread = (get_current_thread())) const;

2330 18 set_prev_transform 0 4 3502 28 NodePath::set_prev_transform 0 2 531 532 898
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_prev_transform
//       Access: Published
//  Description: Sets the transform that represents this node's
//               "previous" position, one frame ago, for the purposes
//               of detecting motion for accurate collision
//               calculations.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_prev_transform
//       Access: Published
//  Description: Sets the "previous" transform object on this node,
//               relative to the other node.  This computes a new
//               transform object that will have the indicated value
//               when seen from the other node.
////////////////////////////////////////////////////////////////////
263
inline void NodePath::set_prev_transform(TransformState const *transform, Thread *current_thread = (get_current_thread()));
void NodePath::set_prev_transform(NodePath const &other, TransformState const *transform, Thread *current_thread = (get_current_thread()));

2331 22 get_net_prev_transform 0 4 3502 32 NodePath::get_net_prev_transform 0 1 533 340
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_net_prev_transform
//       Access: Published
//  Description: Returns the net "previous" transform on this node
//               from the root.  See set_prev_transform().
////////////////////////////////////////////////////////////////////
128
inline ConstPointerTo< TransformState > NodePath::get_net_prev_transform(Thread *current_thread = (get_current_thread())) const;

2332 7 set_pos 0 4 3502 17 NodePath::set_pos 0 4 534 535 536 537 1813
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_pos
//       Access: Published
//  Description: Sets the translation component of the transform,
//               leaving rotation and scale untouched.  This also
//               resets the node's "previous" position, so that the
//               collision system will see the node as having suddenly
//               appeared in the new position, without passing any
//               points in between.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_pos
//       Access: Published
//  Description: Sets the translation component of the transform,
//               relative to the other node.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_pos
//       Access: Published
//  Description: Sets the translation component of the transform,
//               leaving rotation and scale untouched.  This also
//               resets the node's "previous" position, so that the
//               collision system will see the node as having suddenly
//               appeared in the new position, without passing any
//               points in between.
//     See Also: NodePath::set_fluid_pos
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_pos
//       Access: Published
//  Description: Sets the translation component of the transform,
//               relative to the other node.
////////////////////////////////////////////////////////////////////
289
inline void NodePath::set_pos(PN_stdfloat x, PN_stdfloat y, PN_stdfloat z);
void NodePath::set_pos(LVecBase3 const &pos);
inline void NodePath::set_pos(NodePath const &other, PN_stdfloat x, PN_stdfloat y, PN_stdfloat z);
void NodePath::set_pos(NodePath const &other, LVecBase3 const &pos);

2333 5 set_x 0 4 3502 15 NodePath::set_x 0 2 538 539 0
96
void NodePath::set_x(PN_stdfloat x);
void NodePath::set_x(NodePath const &other, PN_stdfloat x);

2334 5 set_y 0 4 3502 15 NodePath::set_y 0 2 540 541 0
96
void NodePath::set_y(PN_stdfloat y);
void NodePath::set_y(NodePath const &other, PN_stdfloat y);

2335 5 set_z 0 4 3502 15 NodePath::set_z 0 2 542 543 0
96
void NodePath::set_z(PN_stdfloat z);
void NodePath::set_z(NodePath const &other, PN_stdfloat z);

2336 13 set_fluid_pos 0 4 3502 23 NodePath::set_fluid_pos 0 4 544 545 546 547 1737
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_fluid_pos
//       Access: Published
//  Description: Sets the translation component, without changing the
//               "previous" position, so that the collision system
//               will see the node as moving fluidly from its previous
//               position to its new position.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_fluid_pos
//       Access: Published
//  Description: Sets the translation component, without changing the
//               "previous" position, so that the collision system
//               will see the node as moving fluidly from its previous
//               position to its new position.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_fluid_pos
//       Access: Published
//  Description: Sets the translation component, without changing the
//               "previous" position, so that the collision system
//               will see the node as moving fluidly from its previous
//               position to its new position.
//     See Also: NodePath::set_pos
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_fluid_pos
//       Access: Published
//  Description: Sets the translation component of the transform,
//               relative to the other node.
////////////////////////////////////////////////////////////////////
313
inline void NodePath::set_fluid_pos(PN_stdfloat x, PN_stdfloat y, PN_stdfloat z);
void NodePath::set_fluid_pos(LVecBase3 const &pos);
inline void NodePath::set_fluid_pos(NodePath const &other, PN_stdfloat x, PN_stdfloat y, PN_stdfloat z);
void NodePath::set_fluid_pos(NodePath const &other, LVecBase3 const &pos);

2337 11 set_fluid_x 0 4 3502 21 NodePath::set_fluid_x 0 2 548 549 0
108
void NodePath::set_fluid_x(PN_stdfloat x);
void NodePath::set_fluid_x(NodePath const &other, PN_stdfloat x);

2338 11 set_fluid_y 0 4 3502 21 NodePath::set_fluid_y 0 2 550 551 0
108
void NodePath::set_fluid_y(PN_stdfloat y);
void NodePath::set_fluid_y(NodePath const &other, PN_stdfloat y);

2339 11 set_fluid_z 0 4 3502 21 NodePath::set_fluid_z 0 2 552 553 0
108
void NodePath::set_fluid_z(PN_stdfloat z);
void NodePath::set_fluid_z(NodePath const &other, PN_stdfloat z);

2340 7 get_pos 0 4 3502 17 NodePath::get_pos 0 2 554 555 587
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_pos
//       Access: Published
//  Description: Retrieves the translation component of the transform.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_pos
//       Access: Published
//  Description: Returns the relative position of the referenced node
//               as seen from the other node.
////////////////////////////////////////////////////////////////////
94
LPoint3 NodePath::get_pos(void) const;
LPoint3 NodePath::get_pos(NodePath const &other) const;

2341 5 get_x 0 4 3502 15 NodePath::get_x 0 2 556 557 0
112
inline PN_stdfloat NodePath::get_x(void) const;
inline PN_stdfloat NodePath::get_x(NodePath const &other) const;

2342 5 get_y 0 4 3502 15 NodePath::get_y 0 2 558 559 0
112
inline PN_stdfloat NodePath::get_y(void) const;
inline PN_stdfloat NodePath::get_y(NodePath const &other) const;

2343 5 get_z 0 4 3502 15 NodePath::get_z 0 2 560 561 0
112
inline PN_stdfloat NodePath::get_z(void) const;
inline PN_stdfloat NodePath::get_z(NodePath const &other) const;

2344 13 get_pos_delta 0 4 3502 23 NodePath::get_pos_delta 0 2 562 563 1701
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_pos_delta
//       Access: Published
//  Description: Returns the delta vector from this node's position in
//               the previous frame (according to
//               set_prev_transform(), typically set via the use of
//               set_fluid_pos()) and its position in the current
//               frame.  This is the vector used to determine
//               collisions.  Generally, if the node was last
//               repositioned via set_pos(), the delta will be zero;
//               if it was adjusted via set_fluid_pos(), the delta
//               will represent the change from the previous frame's
//               position.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_pos_delta
//       Access: Published
//  Description: Returns the delta vector from this node's position in
//               the previous frame (according to
//               set_prev_transform(), typically set via the use of
//               set_fluid_pos()) and its position in the current
//               frame, as seen in the indicated node's coordinate
//               space.  This is the vector used to determine
//               collisions.  Generally, if the node was last
//               repositioned via set_pos(), the delta will be zero;
//               if it was adjusted via set_fluid_pos(), the delta
//               will represent the change from the previous frame's
//               position.
////////////////////////////////////////////////////////////////////
108
LVector3 NodePath::get_pos_delta(void) const;
LVector3 NodePath::get_pos_delta(NodePath const &other) const;

2345 7 set_hpr 0 4 3502 17 NodePath::set_hpr 0 4 564 565 566 567 1260
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_hpr
//       Access: Published
//  Description: Sets the rotation component of the transform,
//               leaving translation and scale untouched.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_hpr
//       Access: Published
//  Description: Sets the rotation component of the transform,
//               relative to the other node.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_hpr
//       Access: Published
//  Description: Sets the rotation component of the transform,
//               leaving translation and scale untouched.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_hpr
//       Access: Published
//  Description: Sets the rotation component of the transform,
//               relative to the other node.
////////////////////////////////////////////////////////////////////
289
inline void NodePath::set_hpr(PN_stdfloat h, PN_stdfloat p, PN_stdfloat r);
void NodePath::set_hpr(LVecBase3 const &hpr);
inline void NodePath::set_hpr(NodePath const &other, PN_stdfloat h, PN_stdfloat p, PN_stdfloat r);
void NodePath::set_hpr(NodePath const &other, LVecBase3 const &hpr);

2346 5 set_h 0 4 3502 15 NodePath::set_h 0 2 568 569 0
96
void NodePath::set_h(PN_stdfloat h);
void NodePath::set_h(NodePath const &other, PN_stdfloat h);

2347 5 set_p 0 4 3502 15 NodePath::set_p 0 2 570 571 0
96
void NodePath::set_p(PN_stdfloat p);
void NodePath::set_p(NodePath const &other, PN_stdfloat p);

2348 5 set_r 0 4 3502 15 NodePath::set_r 0 2 572 573 0
96
void NodePath::set_r(PN_stdfloat r);
void NodePath::set_r(NodePath const &other, PN_stdfloat r);

2349 7 get_hpr 0 4 3502 17 NodePath::get_hpr 0 2 574 575 583
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_hpr
//       Access: Published
//  Description: Retrieves the rotation component of the transform.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_hpr
//       Access: Published
//  Description: Returns the relative orientation of the bottom node
//               as seen from the other node.
////////////////////////////////////////////////////////////////////
98
LVecBase3 NodePath::get_hpr(void) const;
LVecBase3 NodePath::get_hpr(NodePath const &other) const;

2350 5 get_h 0 4 3502 15 NodePath::get_h 0 2 576 577 0
112
inline PN_stdfloat NodePath::get_h(void) const;
inline PN_stdfloat NodePath::get_h(NodePath const &other) const;

2351 5 get_p 0 4 3502 15 NodePath::get_p 0 2 578 579 0
112
inline PN_stdfloat NodePath::get_p(void) const;
inline PN_stdfloat NodePath::get_p(NodePath const &other) const;

2352 5 get_r 0 4 3502 15 NodePath::get_r 0 2 580 581 0
112
inline PN_stdfloat NodePath::get_r(void) const;
inline PN_stdfloat NodePath::get_r(NodePath const &other) const;

2353 8 set_quat 0 4 3502 18 NodePath::set_quat 0 2 582 583 631
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_quat
//       Access: Published
//  Description: Sets the rotation component of the transform,
//               leaving translation and scale untouched.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_quat
//       Access: Published
//  Description: Sets the rotation component of the transform,
//               relative to the other node.
////////////////////////////////////////////////////////////////////
122
void NodePath::set_quat(LQuaternion const &quat);
void NodePath::set_quat(NodePath const &other, LQuaternion const &quat);

2354 8 get_quat 0 4 3502 18 NodePath::get_quat 0 2 584 585 585
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_quat
//       Access: Published
//  Description: Retrieves the rotation component of the transform.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_quat
//       Access: Published
//  Description: Returns the relative orientation of the bottom node
//               as seen from the other node.
////////////////////////////////////////////////////////////////////
104
LQuaternion NodePath::get_quat(void) const;
LQuaternion NodePath::get_quat(NodePath const &other) const;

2355 9 set_scale 0 4 3502 19 NodePath::set_scale 0 6 586 587 588 589 590 591 1570
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_scale
//       Access: Published
//  Description: Sets the scale component of the transform,
//               leaving translation and rotation untouched.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_scale
//       Access: Published
//  Description: Sets the scale component of the transform,
//               relative to the other node.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_scale
//       Access: Published
//  Description: Sets the scale component of the transform,
//               relative to the other node.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_scale
//       Access: Published
//  Description: Sets the scale component of the transform,
//               leaving translation and rotation untouched.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_scale
//       Access: Published
//  Description: Sets the scale component of the transform,
//               relative to the other node.
////////////////////////////////////////////////////////////////////
434
inline void NodePath::set_scale(PN_stdfloat scale);
inline void NodePath::set_scale(PN_stdfloat sx, PN_stdfloat sy, PN_stdfloat sz);
void NodePath::set_scale(LVecBase3 const &scale);
inline void NodePath::set_scale(NodePath const &other, PN_stdfloat scale);
inline void NodePath::set_scale(NodePath const &other, PN_stdfloat sx, PN_stdfloat sy, PN_stdfloat sz);
void NodePath::set_scale(NodePath const &other, LVecBase3 const &scale);

2356 6 set_sx 0 4 3502 16 NodePath::set_sx 0 2 592 593 0
100
void NodePath::set_sx(PN_stdfloat sx);
void NodePath::set_sx(NodePath const &other, PN_stdfloat sx);

2357 6 set_sy 0 4 3502 16 NodePath::set_sy 0 2 594 595 0
100
void NodePath::set_sy(PN_stdfloat sy);
void NodePath::set_sy(NodePath const &other, PN_stdfloat sy);

2358 6 set_sz 0 4 3502 16 NodePath::set_sz 0 2 596 597 0
100
void NodePath::set_sz(PN_stdfloat sz);
void NodePath::set_sz(NodePath const &other, PN_stdfloat sz);

2359 9 get_scale 0 4 3502 19 NodePath::get_scale 0 2 598 599 578
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_scale
//       Access: Published
//  Description: Retrieves the scale component of the transform.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_scale
//       Access: Published
//  Description: Returns the relative scale of the bottom node
//               as seen from the other node.
////////////////////////////////////////////////////////////////////
102
LVecBase3 NodePath::get_scale(void) const;
LVecBase3 NodePath::get_scale(NodePath const &other) const;

2360 6 get_sx 0 4 3502 16 NodePath::get_sx 0 2 600 601 314
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_scale
//       Access: Published
//  Description: Returns the relative scale of the referenced node
//               as seen from the other node.
////////////////////////////////////////////////////////////////////
114
inline PN_stdfloat NodePath::get_sx(void) const;
inline PN_stdfloat NodePath::get_sx(NodePath const &other) const;

2361 6 get_sy 0 4 3502 16 NodePath::get_sy 0 2 602 603 0
114
inline PN_stdfloat NodePath::get_sy(void) const;
inline PN_stdfloat NodePath::get_sy(NodePath const &other) const;

2362 6 get_sz 0 4 3502 16 NodePath::get_sz 0 2 604 605 0
114
inline PN_stdfloat NodePath::get_sz(void) const;
inline PN_stdfloat NodePath::get_sz(NodePath const &other) const;

2363 9 set_shear 0 4 3502 19 NodePath::set_shear 0 4 606 607 608 609 1270
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shear
//       Access: Published
//  Description: Sets the shear component of the transform,
//               leaving translation, rotation, and scale untouched.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shear
//       Access: Published
//  Description: Sets the shear component of the transform,
//               relative to the other node.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shear
//       Access: Published
//  Description: Sets the shear component of the transform,
//               leaving translation and rotation untouched.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shear
//       Access: Published
//  Description: Sets the shear component of the transform,
//               relative to the other node.
////////////////////////////////////////////////////////////////////
319
inline void NodePath::set_shear(PN_stdfloat shxy, PN_stdfloat shxz, PN_stdfloat shyz);
void NodePath::set_shear(LVecBase3 const &shear);
inline void NodePath::set_shear(NodePath const &other, PN_stdfloat shxy, PN_stdfloat shxz, PN_stdfloat shyz);
void NodePath::set_shear(NodePath const &other, LVecBase3 const &shear);

2364 8 set_shxy 0 4 3502 18 NodePath::set_shxy 0 2 610 611 0
108
void NodePath::set_shxy(PN_stdfloat shxy);
void NodePath::set_shxy(NodePath const &other, PN_stdfloat shxy);

2365 8 set_shxz 0 4 3502 18 NodePath::set_shxz 0 2 612 613 0
108
void NodePath::set_shxz(PN_stdfloat shxz);
void NodePath::set_shxz(NodePath const &other, PN_stdfloat shxz);

2366 8 set_shyz 0 4 3502 18 NodePath::set_shyz 0 2 614 615 0
108
void NodePath::set_shyz(PN_stdfloat shyz);
void NodePath::set_shyz(NodePath const &other, PN_stdfloat shyz);

2367 9 get_shear 0 4 3502 19 NodePath::get_shear 0 2 616 617 578
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_shear
//       Access: Published
//  Description: Retrieves the shear component of the transform.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_shear
//       Access: Published
//  Description: Returns the relative shear of the bottom node
//               as seen from the other node.
////////////////////////////////////////////////////////////////////
102
LVecBase3 NodePath::get_shear(void) const;
LVecBase3 NodePath::get_shear(NodePath const &other) const;

2368 8 get_shxy 0 4 3502 18 NodePath::get_shxy 0 2 618 619 314
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_shear
//       Access: Published
//  Description: Returns the relative shear of the referenced node
//               as seen from the other node.
////////////////////////////////////////////////////////////////////
118
inline PN_stdfloat NodePath::get_shxy(void) const;
inline PN_stdfloat NodePath::get_shxy(NodePath const &other) const;

2369 8 get_shxz 0 4 3502 18 NodePath::get_shxz 0 2 620 621 0
118
inline PN_stdfloat NodePath::get_shxz(void) const;
inline PN_stdfloat NodePath::get_shxz(NodePath const &other) const;

2370 8 get_shyz 0 4 3502 18 NodePath::get_shyz 0 2 622 623 0
118
inline PN_stdfloat NodePath::get_shyz(void) const;
inline PN_stdfloat NodePath::get_shyz(NodePath const &other) const;

2371 11 set_pos_hpr 0 4 3502 21 NodePath::set_pos_hpr 0 4 624 625 626 627 1308
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_pos_hpr
//       Access: Published
//  Description: Sets the translation and rotation component of the
//               transform, leaving scale untouched.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_pos_hpr
//       Access: Published
//  Description: Sets the translation and rotation component of the
//               transform, relative to the other node.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_pos_hpr
//       Access: Published
//  Description: Sets the translation and rotation component of the
//               transform, leaving scale untouched.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_pos_hpr
//       Access: Published
//  Description: Sets the translation and rotation component of the
//               transform, relative to the other node.
////////////////////////////////////////////////////////////////////
439
inline void NodePath::set_pos_hpr(PN_stdfloat x, PN_stdfloat y, PN_stdfloat z, PN_stdfloat h, PN_stdfloat p, PN_stdfloat r);
void NodePath::set_pos_hpr(LVecBase3 const &pos, LVecBase3 const &hpr);
inline void NodePath::set_pos_hpr(NodePath const &other, PN_stdfloat x, PN_stdfloat y, PN_stdfloat z, PN_stdfloat h, PN_stdfloat p, PN_stdfloat r);
void NodePath::set_pos_hpr(NodePath const &other, LVecBase3 const &pos, LVecBase3 const &hpr);

2372 12 set_pos_quat 0 4 3502 22 NodePath::set_pos_quat 0 2 628 629 655
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_pos_quat
//       Access: Published
//  Description: Sets the translation and rotation component of the
//               transform, leaving scale untouched.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_pos_quat
//       Access: Published
//  Description: Sets the translation and rotation component of the
//               transform, relative to the other node.
////////////////////////////////////////////////////////////////////
174
void NodePath::set_pos_quat(LVecBase3 const &pos, LQuaternion const &quat);
void NodePath::set_pos_quat(NodePath const &other, LVecBase3 const &pos, LQuaternion const &quat);

2373 13 set_hpr_scale 0 4 3502 23 NodePath::set_hpr_scale 0 4 630 631 632 633 1612
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_hpr_scale
//       Access: Published
//  Description: Sets the rotation and scale components of the
//               transform, leaving translation untouched.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_hpr_scale
//       Access: Published
//  Description: Sets the rotation and scale components of the
//               transform, leaving translation untouched.  This, or
//               set_pos_hpr_scale, is the preferred way to update a
//               transform when both hpr and scale are to be changed.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_hpr_scale
//       Access: Published
//  Description: Sets the rotation and scale components of the
//               transform, leaving translation untouched.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_hpr_scale
//       Access: Published
//  Description: Sets the rotation and scale components of the
//               transform, leaving translation untouched.  This, or
//               set_pos_hpr_scale, is the preferred way to update a
//               transform when both hpr and scale are to be changed.
////////////////////////////////////////////////////////////////////
457
inline void NodePath::set_hpr_scale(PN_stdfloat h, PN_stdfloat p, PN_stdfloat r, PN_stdfloat sx, PN_stdfloat sy, PN_stdfloat sz);
void NodePath::set_hpr_scale(LVecBase3 const &hpr, LVecBase3 const &scale);
inline void NodePath::set_hpr_scale(NodePath const &other, PN_stdfloat h, PN_stdfloat p, PN_stdfloat r, PN_stdfloat sx, PN_stdfloat sy, PN_stdfloat sz);
void NodePath::set_hpr_scale(NodePath const &other, LVecBase3 const &hpr, LVecBase3 const &scale);

2374 14 set_quat_scale 0 4 3502 24 NodePath::set_quat_scale 0 2 634 635 809
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_quat_scale
//       Access: Published
//  Description: Sets the rotation and scale components of the
//               transform, leaving translation untouched.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_quat_scale
//       Access: Published
//  Description: Sets the rotation and scale components of the
//               transform, leaving translation untouched.  This, or
//               set_pos_quat_scale, is the preferred way to update a
//               transform when both quat and scale are to be changed.
////////////////////////////////////////////////////////////////////
182
void NodePath::set_quat_scale(LQuaternion const &quat, LVecBase3 const &scale);
void NodePath::set_quat_scale(NodePath const &other, LQuaternion const &quat, LVecBase3 const &scale);

2375 17 set_pos_hpr_scale 0 4 3502 27 NodePath::set_pos_hpr_scale 0 4 636 637 638 639 1452
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_pos_hpr_scale
//       Access: Published
//  Description: Completely replaces the transform with new
//               translation, rotation, and scale components.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_pos_hpr_scale
//       Access: Published
//  Description: Completely replaces the transform with new
//               translation, rotation, and scale components, relative
//               to the other node.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_pos_hpr_scale
//       Access: Published
//  Description: Replaces the translation, rotation, and scale
//               components, implicitly setting shear to 0.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_pos_hpr_scale
//       Access: Published
//  Description: Completely replaces the transform with new
//               translation, rotation, and scale components, relative
//               to the other node, implicitly setting shear to 0.
////////////////////////////////////////////////////////////////////
607
inline void NodePath::set_pos_hpr_scale(PN_stdfloat x, PN_stdfloat y, PN_stdfloat z, PN_stdfloat h, PN_stdfloat p, PN_stdfloat r, PN_stdfloat sx, PN_stdfloat sy, PN_stdfloat sz);
void NodePath::set_pos_hpr_scale(LVecBase3 const &pos, LVecBase3 const &hpr, LVecBase3 const &scale);
inline void NodePath::set_pos_hpr_scale(NodePath const &other, PN_stdfloat x, PN_stdfloat y, PN_stdfloat z, PN_stdfloat h, PN_stdfloat p, PN_stdfloat r, PN_stdfloat sx, PN_stdfloat sy, PN_stdfloat sz);
void NodePath::set_pos_hpr_scale(NodePath const &other, LVecBase3 const &pos, LVecBase3 const &hpr, LVecBase3 const &scale);

2376 18 set_pos_quat_scale 0 4 3502 28 NodePath::set_pos_quat_scale 0 2 640 641 743
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_pos_quat_scale
//       Access: Published
//  Description: Replaces the translation, rotation, and scale
//               components, implicitly setting shear to 0.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_pos_quat_scale
//       Access: Published
//  Description: Completely replaces the transform with new
//               translation, rotation, and scale components, relative
//               to the other node, implicitly setting shear to 0.
////////////////////////////////////////////////////////////////////
234
void NodePath::set_pos_quat_scale(LVecBase3 const &pos, LQuaternion const &quat, LVecBase3 const &scale);
void NodePath::set_pos_quat_scale(NodePath const &other, LVecBase3 const &pos, LQuaternion const &quat, LVecBase3 const &scale);

2377 23 set_pos_hpr_scale_shear 0 4 3502 33 NodePath::set_pos_hpr_scale_shear 0 2 642 643 735
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_pos_hpr_scale_shear
//       Access: Published
//  Description: Completely replaces the transform with new
//               translation, rotation, scale, and shear components.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_pos_hpr_scale_shear
//       Access: Published
//  Description: Completely replaces the transform with new
//               translation, rotation, scale, and shear components,
//               relative to the other node.
////////////////////////////////////////////////////////////////////
286
void NodePath::set_pos_hpr_scale_shear(LVecBase3 const &pos, LVecBase3 const &hpr, LVecBase3 const &scale, LVecBase3 const &shear);
void NodePath::set_pos_hpr_scale_shear(NodePath const &other, LVecBase3 const &pos, LVecBase3 const &hpr, LVecBase3 const &scale, LVecBase3 const &shear);

2378 24 set_pos_quat_scale_shear 0 4 3502 34 NodePath::set_pos_quat_scale_shear 0 2 644 645 737
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_pos_quat_scale_shear
//       Access: Published
//  Description: Completely replaces the transform with new
//               translation, rotation, scale, and shear components.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_pos_quat_scale_shear
//       Access: Published
//  Description: Completely replaces the transform with new
//               translation, rotation, scale, and shear components,
//               relative to the other node.
////////////////////////////////////////////////////////////////////
294
void NodePath::set_pos_quat_scale_shear(LVecBase3 const &pos, LQuaternion const &quat, LVecBase3 const &scale, LVecBase3 const &shear);
void NodePath::set_pos_quat_scale_shear(NodePath const &other, LVecBase3 const &pos, LQuaternion const &quat, LVecBase3 const &scale, LVecBase3 const &shear);

2379 7 set_mat 0 4 3502 17 NodePath::set_mat 0 2 646 647 640
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_mat
//       Access: Published
//  Description: Directly sets an arbitrary 4x4 transform matrix.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_mat
//       Access: Published
//  Description: Converts the indicated matrix from the other's
//               coordinate space to the local coordinate space, and
//               applies it to the node.
////////////////////////////////////////////////////////////////////
112
void NodePath::set_mat(LMatrix4 const &mat);
void NodePath::set_mat(NodePath const &other, LMatrix4 const &mat);

2380 9 clear_mat 0 4 3502 19 NodePath::clear_mat 0 1 648 294
////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_mat
//       Access: Published
//  Description: Completely removes any transform from the referenced
//               node.
////////////////////////////////////////////////////////////////////
38
inline void NodePath::clear_mat(void);

2381 7 has_mat 0 4 3502 17 NodePath::has_mat 0 1 649 339
////////////////////////////////////////////////////////////////////
//     Function: NodePath::has_mat
//       Access: Published
//  Description: Returns true if a non-identity transform matrix has
//               been applied to the referenced node, false otherwise.
////////////////////////////////////////////////////////////////////
42
inline bool NodePath::has_mat(void) const;

2382 7 get_mat 0 4 3502 17 NodePath::get_mat 0 2 650 651 767
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_mat
//       Access: Published
//  Description: Returns the transform matrix that has been applied to
//               the referenced node, or the identity matrix if no
//               matrix has been applied.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_mat
//       Access: Published
//  Description: Returns the matrix that describes the coordinate
//               space of the bottom node, relative to the other
//               path's bottom node's coordinate space.
////////////////////////////////////////////////////////////////////
110
inline LMatrix4 const &NodePath::get_mat(void) const;
LMatrix4 NodePath::get_mat(NodePath const &other) const;

2383 7 look_at 0 4 3502 17 NodePath::look_at 0 4 652 653 654 655 1555
////////////////////////////////////////////////////////////////////
//     Function: NodePath::look_at
//       Access: Published
//  Description: Sets the transform on this NodePath so that it
//               rotates to face the indicated point in space.  This
//               will overwrite any previously existing scale on the
//               node, although it will preserve any translation.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::look_at
//       Access: Published
//  Description: Sets the hpr on this NodePath so that it rotates to
//               face the indicated point in space, which is relative
//               to the other NodePath.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::look_at
//       Access: Published
//  Description: Sets the hpr on this NodePath so that it
//               rotates to face the indicated point in space.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::look_at
//       Access: Published
//  Description: Sets the transform on this NodePath so that it
//               rotates to face the indicated point in space, which
//               is relative to the other NodePath.
////////////////////////////////////////////////////////////////////
372
inline void NodePath::look_at(PN_stdfloat x, PN_stdfloat y, PN_stdfloat z);
void NodePath::look_at(LPoint3 const &point, LVector3 const &up = (up()));
inline void NodePath::look_at(NodePath const &other, PN_stdfloat x, PN_stdfloat y, PN_stdfloat z);
void NodePath::look_at(NodePath const &other, LPoint3 const &point = LPoint3(0.0, 0.0, 0.0), LVector3 const &up = (up()));

2384 8 heads_up 0 4 3502 18 NodePath::heads_up 0 4 656 657 658 659 1490
////////////////////////////////////////////////////////////////////
//     Function: NodePath::heads_up
//       Access: Published
//  Description: Behaves like look_at(), but with a strong preference
//               to keeping the up vector oriented in the indicated
//               "up" direction.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::heads_up
//       Access: Published
//  Description: Behaves like look_at(), but with a strong preference
//               to keeping the up vector oriented in the indicated
//               "up" direction.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::heads_up
//       Access: Published
//  Description: Behaves like look_at(), but with a strong preference
//               to keeping the up vector oriented in the indicated
//               "up" direction.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::heads_up
//       Access: Published
//  Description: Behaves like look_at(), but with a strong preference
//               to keeping the up vector oriented in the indicated
//               "up" direction.
////////////////////////////////////////////////////////////////////
376
inline void NodePath::heads_up(PN_stdfloat x, PN_stdfloat y, PN_stdfloat z);
void NodePath::heads_up(LPoint3 const &point, LVector3 const &up = (up()));
inline void NodePath::heads_up(NodePath const &other, PN_stdfloat x, PN_stdfloat y, PN_stdfloat z);
void NodePath::heads_up(NodePath const &other, LPoint3 const &point = LPoint3(0.0, 0.0, 0.0), LVector3 const &up = (up()));

2385 18 get_relative_point 0 4 3502 28 NodePath::get_relative_point 0 1 660 396
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_relative_point
//       Access: Published
//  Description: Given that the indicated point is in the coordinate
//               system of the other node, returns the same point in
//               this node's coordinate system.
////////////////////////////////////////////////////////////////////
90
LPoint3 NodePath::get_relative_point(NodePath const &other, LVecBase3 const &point) const;

2386 19 get_relative_vector 0 4 3502 29 NodePath::get_relative_vector 0 1 661 399
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_relative_vector
//       Access: Published
//  Description: Given that the indicated vector is in the coordinate
//               system of the other node, returns the same vector in
//               this node's coordinate system.
////////////////////////////////////////////////////////////////////
90
LVector3 NodePath::get_relative_vector(NodePath const &other, LVecBase3 const &vec) const;

2387 12 get_distance 0 4 3502 22 NodePath::get_distance 0 1 662 385
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_distance
//       Access: Published
//  Description: Returns the straight-line distance between this
//               referenced node's coordinate frame's origin, and that
//               of the other node's origin.
////////////////////////////////////////////////////////////////////
71
inline PN_stdfloat NodePath::get_distance(NodePath const &other) const;

2388 9 set_color 0 4 3502 19 NodePath::set_color 0 2 663 664 884
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_color
//       Access: Published
//  Description: Applies a scene-graph color to the referenced node.
//               This color will apply to all geometry at this level
//               and below (that does not specify a new color or a
//               set_color_off()).
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_color
//       Access: Published
//  Description: Applies a scene-graph color to the referenced node.
//               This color will apply to all geometry at this level
//               and below (that does not specify a new color or a
//               set_color_off()).
////////////////////////////////////////////////////////////////////
174
void NodePath::set_color(PN_stdfloat r, PN_stdfloat g, PN_stdfloat b, PN_stdfloat a = 1.0, int priority = 0);
void NodePath::set_color(LColor const &color, int priority = 0);

2389 13 set_color_off 0 4 3502 23 NodePath::set_color_off 0 1 665 565
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_color_off
//       Access: Published
//  Description: Sets the geometry at this level and below to render
//               using the geometry color.  This is normally the
//               default, but it may be useful to use this to
//               contradict set_color() at a higher node level (or,
//               with a priority, to override a set_color() at a lower
//               level).
////////////////////////////////////////////////////////////////////
47
void NodePath::set_color_off(int priority = 0);

2390 11 clear_color 0 4 3502 21 NodePath::clear_color 0 1 666 463
////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_color
//       Access: Published
//  Description: Completely removes any color adjustment from the node.
//               This allows the natural color of the geometry, or
//               whatever color transitions might be otherwise
//               affecting the geometry, to show instead.
////////////////////////////////////////////////////////////////////
33
void NodePath::clear_color(void);

2391 9 has_color 0 4 3502 19 NodePath::has_color 0 1 667 312
////////////////////////////////////////////////////////////////////
//     Function: NodePath::has_color
//       Access: Published
//  Description: Returns true if a color has been applied to the given
//               node, false otherwise.
////////////////////////////////////////////////////////////////////
37
bool NodePath::has_color(void) const;

2392 9 get_color 0 4 3502 19 NodePath::get_color 0 1 668 329
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_color
//       Access: Published
//  Description: Returns the color that has been assigned to the node,
//               or black if no color has been assigned.
////////////////////////////////////////////////////////////////////
39
LColor NodePath::get_color(void) const;

2393 15 has_color_scale 0 4 3502 25 NodePath::has_color_scale 0 1 669 453
////////////////////////////////////////////////////////////////////
//     Function: NodePath::has_color_scale
//       Access: Published
//  Description: Returns true if a color scale has been applied
//               to the referenced node, false otherwise.  It is still
//               possible that color at this node might have been
//               scaled by an ancestor node.
////////////////////////////////////////////////////////////////////
43
bool NodePath::has_color_scale(void) const;

2394 17 clear_color_scale 0 4 3502 27 NodePath::clear_color_scale 0 1 670 499
////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_color_scale
//       Access: Published
//  Description: Completely removes any color scale from the
//               referenced node.  This is preferable to simply
//               setting the color scale to identity, as it also
//               removes the overhead associated with having a color
//               scale at all.
////////////////////////////////////////////////////////////////////
39
void NodePath::clear_color_scale(void);

2395 15 set_color_scale 0 4 3502 25 NodePath::set_color_scale 0 2 671 672 608
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_color_scale
//       Access: Published
//  Description: Sets the color scale component of the transform
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_color_scale
//       Access: Published
//  Description: Sets the color scale component of the transform,
//               leaving translation and rotation untouched.
////////////////////////////////////////////////////////////////////
194
void NodePath::set_color_scale(LVecBase4 const &scale, int priority = 0);
inline void NodePath::set_color_scale(PN_stdfloat sx, PN_stdfloat sy, PN_stdfloat sz, PN_stdfloat sa, int priority = 0);

2396 19 compose_color_scale 0 4 3502 29 NodePath::compose_color_scale 0 2 673 674 665
////////////////////////////////////////////////////////////////////
//     Function: NodePath::compose_color_scale
//       Access: Published
//  Description: Sets the color scale component of the transform
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::compose_color_scale
//       Access: Published
//  Description: multiplies the color scale component of the transform,
//               with previous color scale leaving translation and
//               rotation untouched.
////////////////////////////////////////////////////////////////////
202
void NodePath::compose_color_scale(LVecBase4 const &scale, int priority = 0);
inline void NodePath::compose_color_scale(PN_stdfloat sx, PN_stdfloat sy, PN_stdfloat sz, PN_stdfloat sa, int priority = 0);

2397 19 set_color_scale_off 0 4 3502 29 NodePath::set_color_scale_off 0 1 675 900
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_color_scale_off
//       Access: Published
//  Description: Disables any color scale attribute inherited from
//               above.  This is not the same thing as
//               clear_color_scale(), which undoes any previous
//               set_color_scale() operation on this node; rather,
//               this actively disables any set_color_scale() that
//               might be inherited from a parent node.  This also
//               disables set_alpha_scale() at the same time.
//
//               It is legal to specify a new color scale on the same
//               node with a subsequent call to set_color_scale() or
//               set_alpha_scale(); this new scale will apply to lower
//               geometry.
////////////////////////////////////////////////////////////////////
53
void NodePath::set_color_scale_off(int priority = 0);

2398 15 set_alpha_scale 0 4 3502 25 NodePath::set_alpha_scale 0 1 676 435
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_alpha_scale
//       Access: Published
//  Description: Sets the alpha scale component of the transform
//               without (much) affecting the color scale.  Note that
//               any priority specified will also apply to the color
//               scale.
////////////////////////////////////////////////////////////////////
68
void NodePath::set_alpha_scale(PN_stdfloat scale, int priority = 0);

2399 19 set_all_color_scale 0 4 3502 29 NodePath::set_all_color_scale 0 1 677 469
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_all_color_scale
//       Access: Published
//  Description: Scales all the color components of the object by the
//               same amount, darkening the object, without (much)
//               affecting alpha.  Note that any priority specified
//               will also apply to the alpha scale.
////////////////////////////////////////////////////////////////////
72
void NodePath::set_all_color_scale(PN_stdfloat scale, int priority = 0);

2400 6 set_sr 0 4 3502 16 NodePath::set_sr 0 1 678 261
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_sr
//       Access: Published
//  Description: Sets the red scale component of the transform
////////////////////////////////////////////////////////////////////
45
inline void NodePath::set_sr(PN_stdfloat sr);

2401 6 set_sg 0 4 3502 16 NodePath::set_sg 0 1 679 263
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_sg
//       Access: Published
//  Description: Sets the alpha scale component of the transform
////////////////////////////////////////////////////////////////////
45
inline void NodePath::set_sg(PN_stdfloat sg);

2402 6 set_sb 0 4 3502 16 NodePath::set_sb 0 1 680 262
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_sb
//       Access: Published
//  Description: Sets the blue scale component of the transform
////////////////////////////////////////////////////////////////////
45
inline void NodePath::set_sb(PN_stdfloat sb);

2403 6 set_sa 0 4 3502 16 NodePath::set_sa 0 1 681 263
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_sa
//       Access: Published
//  Description: Sets the alpha scale component of the transform
////////////////////////////////////////////////////////////////////
45
inline void NodePath::set_sa(PN_stdfloat sa);

2404 15 get_color_scale 0 4 3502 25 NodePath::get_color_scale 0 1 682 510
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_color_scale
//       Access: Published
//  Description: Returns the complete color scale vector that has been
//               applied to this node via a previous call to
//               set_color_scale() and/or set_alpha_scale(), or all
//               1's (identity) if no scale has been applied to this
//               particular node.
////////////////////////////////////////////////////////////////////
55
LVecBase4 const &NodePath::get_color_scale(void) const;

2405 6 get_sr 0 4 3502 16 NodePath::get_sr 0 1 683 261
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_sr
//       Access: Published
//  Description: Gets the red scale component of the transform
////////////////////////////////////////////////////////////////////
48
inline PN_stdfloat NodePath::get_sr(void) const;

2406 6 get_sg 0 4 3502 16 NodePath::get_sg 0 1 684 263
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_sg
//       Access: Published
//  Description: Gets the green scale component of the transform
////////////////////////////////////////////////////////////////////
48
inline PN_stdfloat NodePath::get_sg(void) const;

2407 6 get_sb 0 4 3502 16 NodePath::get_sb 0 1 685 262
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_sb
//       Access: Published
//  Description: Gets the blue scale component of the transform
////////////////////////////////////////////////////////////////////
48
inline PN_stdfloat NodePath::get_sb(void) const;

2408 6 get_sa 0 4 3502 16 NodePath::get_sa 0 1 686 263
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_sa
//       Access: Published
//  Description: Gets the alpha scale component of the transform
////////////////////////////////////////////////////////////////////
48
inline PN_stdfloat NodePath::get_sa(void) const;

2409 9 set_light 0 4 3502 19 NodePath::set_light 0 1 687 593
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_light
//       Access: Published
//  Description: Adds the indicated Light or PolylightNode to the list
//               of lights that illuminate geometry at this node and
//               below.  The light itself should be parented into the
//               scene graph elsewhere, to represent the light's
//               position in space; but until set_light() is called it
//               will illuminate no geometry.
////////////////////////////////////////////////////////////////////
66
void NodePath::set_light(NodePath const &light, int priority = 0);

2410 13 set_light_off 0 4 3502 23 NodePath::set_light_off 0 2 688 689 1449
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_light_off
//       Access: Published
//  Description: Sets the geometry at this level and below to render
//               using no lights at all.  This is different
//               from not specifying a light; rather, this
//               specifically contradicts set_light() at a higher
//               node level (or, with a priority, overrides a
//               set_light() at a lower level).
//
//               If no lights are in effect on a particular piece of
//               geometry, that geometry is rendered with lighting
//               disabled.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_light_off
//       Access: Published
//  Description: Sets the geometry at this level and below to render
//               without using the indicated Light.  This is different
//               from not specifying the Light; rather, this
//               specifically contradicts set_light() at a higher node
//               level (or, with a priority, overrides a set_light()
//               at a lower level).
//
//               This interface does not support PolylightNodes, which
//               cannot be turned off at a lower level.
////////////////////////////////////////////////////////////////////
118
void NodePath::set_light_off(int priority = 0);
void NodePath::set_light_off(NodePath const &light, int priority = 0);

2411 11 clear_light 0 4 3502 21 NodePath::clear_light 0 2 690 691 702
////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_light
//       Access: Published
//  Description: Completely removes any lighting operations that may
//               have been set via set_light() or set_light_off()
//               from this particular node.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_light
//       Access: Published
//  Description: Removes any reference to the indicated Light or
//               PolylightNode from the NodePath.
////////////////////////////////////////////////////////////////////
84
void NodePath::clear_light(void);
void NodePath::clear_light(NodePath const &light);

2412 9 has_light 0 4 3502 19 NodePath::has_light 0 1 692 460
////////////////////////////////////////////////////////////////////
//     Function: NodePath::has_light
//       Access: Published
//  Description: Returns true if the indicated Light or PolylightNode
//               has been specifically enabled on this particular
//               node.  This means that someone called set_light() on
//               this node with the indicated light.
////////////////////////////////////////////////////////////////////
54
bool NodePath::has_light(NodePath const &light) const;

2413 13 has_light_off 0 4 3502 23 NodePath::has_light_off 0 2 693 694 1022
////////////////////////////////////////////////////////////////////
//     Function: NodePath::has_light_off
//       Access: Published
//  Description: Returns true if all Lights have been specifically
//               disabled on this particular node.  This means that
//               someone called set_light_off() on this node with no
//               parameters.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::has_light_off
//       Access: Published
//  Description: Returns true if the indicated Light has been
//               specifically disabled on this particular node.  This
//               means that someone called set_light_off() on this
//               node with the indicated light.
//
//               This interface does not support PolylightNodes, which
//               cannot be turned off at a lower level.
////////////////////////////////////////////////////////////////////
100
bool NodePath::has_light_off(void) const;
bool NodePath::has_light_off(NodePath const &light) const;

2414 14 set_clip_plane 0 4 3502 24 NodePath::set_clip_plane 0 1 695 609
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_clip_plane
//       Access: Published
//  Description: Adds the indicated clipping plane to the list of
//               planes that apply to geometry at this node and below.
//               The clipping plane itself, a PlaneNode, should be
//               parented into the scene graph elsewhere, to represent
//               the plane's position in space; but until
//               set_clip_plane() is called it will clip no geometry.
////////////////////////////////////////////////////////////////////
76
void NodePath::set_clip_plane(NodePath const &clip_plane, int priority = 0);

2415 18 set_clip_plane_off 0 4 3502 28 NodePath::set_clip_plane_off 0 2 696 697 1434
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_clip_plane_off
//       Access: Published
//  Description: Sets the geometry at this level and below to render
//               using no clip_planes at all.  This is different
//               from not specifying a clip_plane; rather, this
//               specifically contradicts set_clip_plane() at a higher
//               node level (or, with a priority, overrides a
//               set_clip_plane() at a lower level).
//
//               If no clip_planes are in effect on a particular piece
//               of geometry, that geometry is rendered without being
//               clipped (other than by the viewing frustum).
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_clip_plane_off
//       Access: Published
//  Description: Sets the geometry at this level and below to render
//               without being clipped by the indicated PlaneNode.
//               This is different from not specifying the PlaneNode;
//               rather, this specifically contradicts
//               set_clip_plane() at a higher node level (or, with a
//               priority, overrides a set_clip_plane() at a lower
//               level).
////////////////////////////////////////////////////////////////////
133
void NodePath::set_clip_plane_off(int priority = 0);
void NodePath::set_clip_plane_off(NodePath const &clip_plane, int priority = 0);

2416 16 clear_clip_plane 0 4 3502 26 NodePath::clear_clip_plane 0 2 698 699 706
////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_clip_plane
//       Access: Published
//  Description: Completely removes any clip planes that may have been
//               set via set_clip_plane() or set_clip_plane_off() from
//               this particular node.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_clip_plane
//       Access: Published
//  Description: Removes any reference to the indicated clipping plane
//               from the NodePath.
////////////////////////////////////////////////////////////////////
99
void NodePath::clear_clip_plane(void);
void NodePath::clear_clip_plane(NodePath const &clip_plane);

2417 14 has_clip_plane 0 4 3502 24 NodePath::has_clip_plane 0 1 700 467
////////////////////////////////////////////////////////////////////
//     Function: NodePath::has_clip_plane
//       Access: Published
//  Description: Returns true if the indicated clipping plane has been
//               specifically applied to this particular node.  This
//               means that someone called set_clip_plane() on this
//               node with the indicated clip_plane.
////////////////////////////////////////////////////////////////////
64
bool NodePath::has_clip_plane(NodePath const &clip_plane) const;

2418 18 has_clip_plane_off 0 4 3502 28 NodePath::has_clip_plane_off 0 2 701 702 935
////////////////////////////////////////////////////////////////////
//     Function: NodePath::has_clip_plane_off
//       Access: Published
//  Description: Returns true if all clipping planes have been
//               specifically disabled on this particular node.  This
//               means that someone called set_clip_plane_off() on
//               this node with no parameters.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::has_clip_plane_off
//       Access: Published
//  Description: Returns true if the indicated clipping plane has been
//               specifically disabled on this particular node.  This
//               means that someone called set_clip_plane_off() on
//               this node with the indicated clip_plane.
////////////////////////////////////////////////////////////////////
115
bool NodePath::has_clip_plane_off(void) const;
bool NodePath::has_clip_plane_off(NodePath const &clip_plane) const;

2419 11 set_scissor 0 4 3502 21 NodePath::set_scissor 0 5 703 704 705 706 707 3091
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_scissor
//       Access: Published
//  Description: Sets up a scissor region on the nodes rendered at
//               this level and below.  The four coordinates are
//               understood to define a rectangle in screen space.
//               These numbers are relative to the current
//               DisplayRegion, where (0,0) is the lower-left corner
//               of the DisplayRegion, and (1,1) is the upper-right
//               corner.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_scissor
//       Access: Published
//  Description: Sets up a scissor region on the nodes rendered at
//               this level and below.  The two points are understood
//               to be relative to this node.  When these points are
//               projected into screen space, they define the
//               diagonally-opposite points that determine the scissor
//               region.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_scissor
//       Access: Published
//  Description: Sets up a scissor region on the nodes rendered at
//               this level and below.  The four points are understood
//               to be relative to this node.  When these points are
//               projected into screen space, they define the
//               bounding volume of the scissor region (the scissor
//               region is the smallest onscreen rectangle that
//               encloses all four points).
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_scissor
//       Access: Published
//  Description: Sets up a scissor region on the nodes rendered at
//               this level and below.  The two points are understood
//               to be relative to the indicated other node.  When
//               these points are projected into screen space, they
//               define the diagonally-opposite points that determine
//               the scissor region.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_scissor
//       Access: Published
//  Description: Sets up a scissor region on the nodes rendered at
//               this level and below.  The four points are understood
//               to be relative to the indicated other node.  When
//               these points are projected into screen space, they
//               define the bounding volume of the scissor region (the
//               scissor region is the smallest onscreen rectangle
//               that encloses all four points).
////////////////////////////////////////////////////////////////////
475
void NodePath::set_scissor(PN_stdfloat left, PN_stdfloat right, PN_stdfloat bottom, PN_stdfloat top);
void NodePath::set_scissor(LPoint3 const &a, LPoint3 const &b);
void NodePath::set_scissor(LPoint3 const &a, LPoint3 const &b, LPoint3 const &c, LPoint3 const &d);
void NodePath::set_scissor(NodePath const &other, LPoint3 const &a, LPoint3 const &b);
void NodePath::set_scissor(NodePath const &other, LPoint3 const &a, LPoint3 const &b, LPoint3 const &c, LPoint3 const &d);

2420 13 clear_scissor 0 4 3502 23 NodePath::clear_scissor 0 1 708 339
////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_scissor
//       Access: Published
//  Description: Removes the scissor region that was defined at this
//               node level by a previous call to set_scissor().
////////////////////////////////////////////////////////////////////
35
void NodePath::clear_scissor(void);

2421 11 has_scissor 0 4 3502 21 NodePath::has_scissor 0 1 709 607
////////////////////////////////////////////////////////////////////
//     Function: NodePath::has_scissor
//       Access: Published
//  Description: Returns true if a scissor region was defined at this
//               node by a previous call to set_scissor().  This does
//               not check for scissor regions inherited from a parent
//               class.  It also does not check for the presence of a
//               low-level ScissorAttrib, which is different from the
//               ScissorEffect added by set_scissor.
////////////////////////////////////////////////////////////////////
39
bool NodePath::has_scissor(void) const;

2422 12 set_occluder 0 4 3502 22 NodePath::set_occluder 0 1 710 603
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_occluder
//       Access: Published
//  Description: Adds the indicated occluder to the list of
//               occluders that apply to geometry at this node and below.
//               The occluder itself, an OccluderNode, should be
//               parented into the scene graph elsewhere, to represent
//               the occluder's position in space; but until
//               set_occluder() is called it will clip no geometry.
////////////////////////////////////////////////////////////////////
54
void NodePath::set_occluder(NodePath const &occluder);

2423 14 clear_occluder 0 4 3502 24 NodePath::clear_occluder 0 2 711 712 651
////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_occluder
//       Access: Published
//  Description: Completely removes any occluders that may have been
//               set via set_occluder() from this particular node.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_occluder
//       Access: Published
//  Description: Removes any reference to the indicated occluder
//               from the NodePath.
////////////////////////////////////////////////////////////////////
93
void NodePath::clear_occluder(void);
void NodePath::clear_occluder(NodePath const &occluder);

2424 12 has_occluder 0 4 3502 22 NodePath::has_occluder 0 1 713 455
////////////////////////////////////////////////////////////////////
//     Function: NodePath::has_occluder
//       Access: Published
//  Description: Returns true if the indicated occluder has been
//               specifically applied to this particular node.  This
//               means that someone called set_occluder() on this
//               node with the indicated occluder.
////////////////////////////////////////////////////////////////////
60
bool NodePath::has_occluder(NodePath const &occluder) const;

2425 7 set_bin 0 4 3502 17 NodePath::set_bin 0 1 714 1343
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_bin
//       Access: Published
//  Description: Assigns the geometry at this level and below to the
//               named rendering bin.  It is the user's responsibility
//               to ensure that such a bin already exists, either via
//               the cull-bin Configrc variable, or by explicitly
//               creating a GeomBin of the appropriate type at
//               runtime.
//
//               There are two default bins created when Panda is
//               started: "default" and "fixed".  Normally, all
//               geometry is assigned to "default" unless specified
//               otherwise.  This bin renders opaque geometry in
//               state-sorted order, followed by transparent geometry
//               sorted back-to-front.  If any geometry is assigned to
//               "fixed", this will be rendered following all the
//               geometry in "default", in the order specified by
//               draw_order for each piece of geometry so assigned.
//
//               The draw_order parameter is meaningful only for
//               GeomBinFixed type bins, e.g. "fixed".  Other kinds of
//               bins ignore it.
////////////////////////////////////////////////////////////////////
81
void NodePath::set_bin(string const &bin_name, int draw_order, int priority = 0);

2426 9 clear_bin 0 4 3502 19 NodePath::clear_bin 0 1 715 337
////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_bin
//       Access: Published
//  Description: Completely removes any bin adjustment that may have
//               been set via set_bin() from this particular node.
////////////////////////////////////////////////////////////////////
31
void NodePath::clear_bin(void);

2427 7 has_bin 0 4 3502 17 NodePath::has_bin 0 1 716 359
////////////////////////////////////////////////////////////////////
//     Function: NodePath::has_bin
//       Access: Published
//  Description: Returns true if the node has been assigned to the a
//               particular rendering bin via set_bin(), false
//               otherwise.
////////////////////////////////////////////////////////////////////
35
bool NodePath::has_bin(void) const;

2428 12 get_bin_name 0 4 3502 22 NodePath::get_bin_name 0 1 717 414
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_bin_name
//       Access: Published
//  Description: Returns the name of the bin that this particular node
//               was assigned to via set_bin(), or the empty string if
//               no bin was assigned.  See set_bin() and has_bin().
////////////////////////////////////////////////////////////////////
42
string NodePath::get_bin_name(void) const;

2429 18 get_bin_draw_order 0 4 3502 28 NodePath::get_bin_draw_order 0 1 718 444
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_bin_draw_order
//       Access: Published
//  Description: Returns the drawing order associated with the bin
//               that this particular node was assigned to via
//               set_bin(), or 0 if no bin was assigned.  See
//               set_bin() and has_bin().
////////////////////////////////////////////////////////////////////
45
int NodePath::get_bin_draw_order(void) const;

2430 11 set_texture 0 4 3502 21 NodePath::set_texture 0 4 719 720 721 722 3158
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_texture
//       Access: Published
//  Description: Adds the indicated texture to the list of textures
//               that will be rendered on the default texture stage.
//
//               This is the convenience single-texture variant of
//               this method; it is now superceded by set_texture()
//               that accepts a stage and texture.  You may use this
//               method if you just want to adjust the default stage.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_texture
//       Access: Published
//  Description: Adds the indicated texture to the list of textures
//               that will be rendered on the indicated multitexture
//               stage.  If there are multiple texture stages
//               specified (possibly on multiple different nodes at
//               different levels), they will all be applied to
//               geometry together, according to the stage
//               specification set up in the TextureStage object.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_texture
//       Access: Published
//  Description: Adds the indicated texture to the list of textures
//               that will be rendered on the default texture stage.
//
//               The given sampler state will override the sampling
//               settings on the texture itself.  Note that this
//               method makes a copy of the sampler settings that
//               you give; further changes to this object will not
//               be reflected.
//
//               This is the convenience single-texture variant of
//               this method; it is now superceded by set_texture()
//               that accepts a stage and texture.  You may use this
//               method if you just want to adjust the default stage.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_texture
//       Access: Published
//  Description: Adds the indicated texture to the list of textures
//               that will be rendered on the indicated multitexture
//               stage.  If there are multiple texture stages
//               specified (possibly on multiple different nodes at
//               different levels), they will all be applied to
//               geometry together, according to the stage
//               specification set up in the TextureStage object.
//
//               The given sampler state will override the sampling
//               settings on the texture itself.  Note that this
//               method makes a copy of the sampler settings that
//               you give; further changes to this object will not
//               be reflected.
////////////////////////////////////////////////////////////////////
339
void NodePath::set_texture(Texture *tex, int priority = 0);
void NodePath::set_texture(TextureStage *stage, Texture *tex, int priority = 0);
void NodePath::set_texture(Texture *tex, SamplerState const &sampler, int priority = 0);
void NodePath::set_texture(TextureStage *stage, Texture *tex, SamplerState const &sampler, int priority = 0);

2431 15 set_texture_off 0 4 3502 25 NodePath::set_texture_off 0 2 723 724 1182
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_texture_off
//       Access: Published
//  Description: Sets the geometry at this level and below to render
//               using no texture, on any stage.  This is different
//               from not specifying a texture; rather, this
//               specifically contradicts set_texture() at a higher
//               node level (or, with a priority, overrides a
//               set_texture() at a lower level).
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_texture_off
//       Access: Published
//  Description: Sets the geometry at this level and below to render
//               using no texture, on the indicated stage.  This is
//               different from not specifying a texture; rather, this
//               specifically contradicts set_texture() at a higher
//               node level (or, with a priority, overrides a
//               set_texture() at a lower level).
////////////////////////////////////////////////////////////////////
120
void NodePath::set_texture_off(int priority = 0);
void NodePath::set_texture_off(TextureStage *stage, int priority = 0);

2432 13 clear_texture 0 4 3502 23 NodePath::clear_texture 0 2 725 726 824
////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_texture
//       Access: Published
//  Description: Completely removes any texture adjustment that may
//               have been set via set_texture() or set_texture_off()
//               from this particular node.  This allows whatever
//               textures might be otherwise affecting the geometry to
//               show instead.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_texture
//       Access: Published
//  Description: Removes any reference to the indicated texture stage
//               from the NodePath.
////////////////////////////////////////////////////////////////////
86
void NodePath::clear_texture(void);
void NodePath::clear_texture(TextureStage *stage);

2433 11 has_texture 0 4 3502 21 NodePath::has_texture 0 2 727 728 1172
////////////////////////////////////////////////////////////////////
//     Function: NodePath::has_texture
//       Access: Published
//  Description: Returns true if a texture has been applied to this
//               particular node via set_texture(), false otherwise.
//               This is not the same thing as asking whether the
//               geometry at this node will be rendered with
//               texturing, as there may be a texture in effect from a
//               higher or lower level.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::has_texture
//       Access: Published
//  Description: Returns true if texturing has been specifically
//               enabled on this particular node for the indicated
//               stage.  This means that someone called
//               set_texture() on this node with the indicated stage
//               name, or the stage_name is the default stage_name,
//               and someone called set_texture() on this node.
////////////////////////////////////////////////////////////////////
94
bool NodePath::has_texture(void) const;
bool NodePath::has_texture(TextureStage *stage) const;

2434 15 has_texture_off 0 4 3502 25 NodePath::has_texture_off 0 2 729 730 1184
////////////////////////////////////////////////////////////////////
//     Function: NodePath::has_texture_off
//       Access: Published
//  Description: Returns true if texturing has been specifically
//               disabled on this particular node via
//               set_texture_off(), false otherwise.  This is not the
//               same thing as asking whether the geometry at this
//               node will be rendered untextured, as there may be a
//               texture in effect from a higher or lower level.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::has_texture_off
//       Access: Published
//  Description: Returns true if texturing has been specifically
//               disabled on this particular node for the indicated
//               stage.  This means that someone called
//               set_texture_off() on this node with the indicated
//               stage name, or that someone called set_texture_off()
//               on this node to remove all stages.
////////////////////////////////////////////////////////////////////
102
bool NodePath::has_texture_off(void) const;
bool NodePath::has_texture_off(TextureStage *stage) const;

2435 11 get_texture 0 4 3502 21 NodePath::get_texture 0 2 731 732 1012
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_texture
//       Access: Published
//  Description: Returns the base-level texture that has been set on
//               this particular node, or NULL if no texture has been
//               set.  This is not necessarily the texture that will
//               be applied to the geometry at or below this level, as
//               another texture at a higher or lower level may
//               override.
//
//               See also find_texture().
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_texture
//       Access: Published
//  Description: Returns the texture that has been set on the
//               indicated stage for this particular node, or NULL if
//               no texture has been set for this stage.
////////////////////////////////////////////////////////////////////
102
Texture *NodePath::get_texture(void) const;
Texture *NodePath::get_texture(TextureStage *stage) const;

2436 19 get_texture_sampler 0 4 3502 29 NodePath::get_texture_sampler 0 2 733 734 1231
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_texture_sampler
//       Access: Published
//  Description: Returns the sampler state that has been given for
//               the base-level texture that has been set on this
//               particular node.  If no sampler state was given,
//               this returns the texture's default sampler settings.
//
//               It is an error to call this if there is no base-level
//               texture applied to this particular node.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_texture_sampler
//       Access: Published
//  Description: Returns the sampler state that has been given for
//               the indicated texture stage that has been set on this
//               particular node.  If no sampler state was given,
//               this returns the texture's default sampler settings.
//
//               It is an error to call this if there is no texture
//               set for this stage on this particular node.
////////////////////////////////////////////////////////////////////
140
SamplerState const &NodePath::get_texture_sampler(void) const;
SamplerState const &NodePath::get_texture_sampler(TextureStage *stage) const;

2437 10 set_shader 0 4 3502 20 NodePath::set_shader 0 1 735 219
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shader
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
63
void NodePath::set_shader(Shader const *sha, int priority = 0);

2438 14 set_shader_off 0 4 3502 24 NodePath::set_shader_off 0 1 736 223
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shader_off
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
48
void NodePath::set_shader_off(int priority = 0);

2439 15 set_shader_auto 0 4 3502 25 NodePath::set_shader_auto 0 2 737 738 491
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shader_auto
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shader_auto
//       Access: Published
//  Description: overloaded for auto shader customization
////////////////////////////////////////////////////////////////////
124
void NodePath::set_shader_auto(int priority = 0);
void NodePath::set_shader_auto(BitMask32 shader_switch, int priority = 0);

2440 12 clear_shader 0 4 3502 22 NodePath::clear_shader 0 1 739 221
////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_shader
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
34
void NodePath::clear_shader(void);

2441 16 set_shader_input 0 4 3502 26 NodePath::set_shader_input 0 26 740 741 742 743 744 745 746 747 748 749 750 751 752 753 754 755 756 757 758 759 760 761 762 763 764 765 5900
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shader_input
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shader_input
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shader_input
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shader_input
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shader_input
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shader_input
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shader_input
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shader_input
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shader_input
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shader_input
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shader_input
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shader_input
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shader_input
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shader_input
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shader_input
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shader_input
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shader_input
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shader_input
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shader_input
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shader_input
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shader_input
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shader_input
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shader_input
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shader_input
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shader_input
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shader_input
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
2701
void NodePath::set_shader_input(ShaderInput const *inp);
inline void NodePath::set_shader_input(CPT_InternalName id, Texture *tex, int priority = 0);
inline void NodePath::set_shader_input(CPT_InternalName id, Texture *tex, SamplerState const &sampler, int priority = 0);
inline void NodePath::set_shader_input(CPT_InternalName id, Texture *tex, bool read, bool write, int z = -1, int n = 0, int priority = 0);
inline void NodePath::set_shader_input(CPT_InternalName id, NodePath const &np, int priority = 0);
inline void NodePath::set_shader_input(CPT_InternalName id, PTA_float const &v, int priority = 0);
inline void NodePath::set_shader_input(CPT_InternalName id, PTA_double const &v, int priority = 0);
inline void NodePath::set_shader_input(CPT_InternalName id, PTA_int const &v, int priority = 0);
inline void NodePath::set_shader_input(CPT_InternalName id, PTA_LVecBase4 const &v, int priority = 0);
inline void NodePath::set_shader_input(CPT_InternalName id, PTA_LVecBase3 const &v, int priority = 0);
inline void NodePath::set_shader_input(CPT_InternalName id, PTA_LVecBase2 const &v, int priority = 0);
inline void NodePath::set_shader_input(CPT_InternalName id, PTA_LMatrix4 const &v, int priority = 0);
inline void NodePath::set_shader_input(CPT_InternalName id, PTA_LMatrix3 const &v, int priority = 0);
inline void NodePath::set_shader_input(CPT_InternalName id, LVecBase4 const &v, int priority = 0);
inline void NodePath::set_shader_input(CPT_InternalName id, LVecBase3 const &v, int priority = 0);
inline void NodePath::set_shader_input(CPT_InternalName id, LVecBase2 const &v, int priority = 0);
inline void NodePath::set_shader_input(CPT_InternalName id, LMatrix4 const &v, int priority = 0);
inline void NodePath::set_shader_input(CPT_InternalName id, LMatrix3 const &v, int priority = 0);
inline void NodePath::set_shader_input(CPT_InternalName id, PTA_LVecBase4i const &v, int priority = 0);
inline void NodePath::set_shader_input(CPT_InternalName id, PTA_LVecBase3i const &v, int priority = 0);
inline void NodePath::set_shader_input(CPT_InternalName id, PTA_LVecBase2i const &v, int priority = 0);
inline void NodePath::set_shader_input(CPT_InternalName id, LVecBase4i const &v, int priority = 0);
inline void NodePath::set_shader_input(CPT_InternalName id, LVecBase3i const &v, int priority = 0);
inline void NodePath::set_shader_input(CPT_InternalName id, LVecBase2i const &v, int priority = 0);
inline void NodePath::set_shader_input(CPT_InternalName id, int n1, int n2 = 0, int n3 = 0, int n4 = 0, int priority = 0);
inline void NodePath::set_shader_input(CPT_InternalName id, PN_stdfloat n1, PN_stdfloat n2 = 0, PN_stdfloat n3 = 0, PN_stdfloat n4 = 0, int priority = 0);

2442 18 clear_shader_input 0 4 3502 28 NodePath::clear_shader_input 0 1 766 227
////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_shader_input
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
55
void NodePath::clear_shader_input(CPT_InternalName id);

2443 18 set_instance_count 0 4 3502 28 NodePath::set_instance_count 0 1 767 435
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_instance_count
//       Access: Published
//  Description: Sets the geometry instance count, or 0 if
//               geometry instancing should be disabled. Do not
//               confuse with instanceTo which only applies to
//               animation instancing.
////////////////////////////////////////////////////////////////////
54
void NodePath::set_instance_count(int instance_count);

2444 10 get_shader 0 4 3502 20 NodePath::get_shader 0 1 768 219
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_shader
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
47
Shader const *NodePath::get_shader(void) const;

2445 16 get_shader_input 0 4 3502 26 NodePath::get_shader_input 0 1 769 225
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_shader_input
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
73
ShaderInput const *NodePath::get_shader_input(CPT_InternalName id) const;

2446 18 get_instance_count 0 4 3502 28 NodePath::get_instance_count 0 1 770 323
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_instance_count
//       Access: Published
//  Description: Returns the geometry instance count, or 0 if
//               disabled. See set_instance_count.
////////////////////////////////////////////////////////////////////
45
int NodePath::get_instance_count(void) const;

2447 17 set_tex_transform 0 4 3502 27 NodePath::set_tex_transform 0 2 771 772 672
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_tex_transform
//       Access: Published
//  Description: Sets the texture matrix on the current node to the
//               indicated transform for the given stage.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_tex_transform
//       Access: Published
//  Description: Sets the texture matrix on the current node to the
//               indicated transform for the given stage.
////////////////////////////////////////////////////////////////////
198
void NodePath::set_tex_transform(TextureStage *stage, TransformState const *transform);
void NodePath::set_tex_transform(NodePath const &other, TextureStage *stage, TransformState const *transform);

2448 19 clear_tex_transform 0 4 3502 29 NodePath::clear_tex_transform 0 2 773 774 595
////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_tex_transform
//       Access: Published
//  Description: Removes all texture matrices from the current node.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_tex_transform
//       Access: Published
//  Description: Removes the texture matrix on the current node for
//               the given stage.
////////////////////////////////////////////////////////////////////
98
void NodePath::clear_tex_transform(void);
void NodePath::clear_tex_transform(TextureStage *stage);

2449 17 has_tex_transform 0 4 3502 27 NodePath::has_tex_transform 0 1 775 336
////////////////////////////////////////////////////////////////////
//     Function: NodePath::has_tex_transform
//       Access: Published
//  Description: Returns true if there is an explicit texture matrix
//               on the current node for the given stage.
////////////////////////////////////////////////////////////////////
60
bool NodePath::has_tex_transform(TextureStage *stage) const;

2450 17 get_tex_transform 0 4 3502 27 NodePath::get_tex_transform 0 2 776 777 750
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_tex_transform
//       Access: Published
//  Description: Returns the texture matrix on the current node for the
//               given stage, or identity transform if there is no
//               explicit transform set for the given stage.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_tex_transform
//       Access: Published
//  Description: Returns the texture matrix on the current node for the
//               given stage, relative to the other node.
////////////////////////////////////////////////////////////////////
200
ConstPointerTo< TransformState > NodePath::get_tex_transform(TextureStage *stage) const;
ConstPointerTo< TransformState > NodePath::get_tex_transform(NodePath const &other, TextureStage *stage) const;

2451 14 set_tex_offset 0 4 3502 24 NodePath::set_tex_offset 0 4 778 779 780 781 1770
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_tex_offset
//       Access: Published
//  Description: Sets a texture matrix on the current node to apply
//               the indicated offset to UV's for the given stage.
//
//               This call is appropriate for ordinary 2-d texture
//               coordinates.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_tex_offset
//       Access: Published
//  Description: Sets a texture matrix on the current node to apply
//               the indicated offset to UV's for the given stage.
//
//               This call is appropriate for ordinary 2-d texture
//               coordinates.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_tex_offset
//       Access: Published
//  Description: Sets a texture matrix on the current node to apply
//               the indicated offset to UV's for the given stage.
//
//               This call is appropriate for ordinary 2-d texture
//               coordinates.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_tex_offset
//       Access: Published
//  Description: Sets a texture matrix on the current node to apply
//               the indicated offset to UV's for the given stage.
//
//               This call is appropriate for ordinary 2-d texture
//               coordinates.
////////////////////////////////////////////////////////////////////
383
inline void NodePath::set_tex_offset(TextureStage *stage, PN_stdfloat u, PN_stdfloat v);
inline void NodePath::set_tex_offset(TextureStage *stage, LVecBase2 const &uv);
inline void NodePath::set_tex_offset(NodePath const &other, TextureStage *stage, PN_stdfloat u, PN_stdfloat v);
inline void NodePath::set_tex_offset(NodePath const &other, TextureStage *stage, LVecBase2 const &uv);

2452 14 set_tex_rotate 0 4 3502 24 NodePath::set_tex_rotate 0 2 782 783 968
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_tex_rotate
//       Access: Published
//  Description: Sets a texture matrix on the current node to apply
//               the indicated rotation, clockwise in degrees, to UV's
//               for the given stage.
//
//               This call is appropriate for ordinary 2-d texture
//               coordinates.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_tex_rotate
//       Access: Published
//  Description: Sets a texture matrix on the current node to apply
//               the indicated rotation, clockwise in degrees, to UV's
//               for the given stage.
//
//               This call is appropriate for ordinary 2-d texture
//               coordinates.
////////////////////////////////////////////////////////////////////
170
inline void NodePath::set_tex_rotate(TextureStage *stage, PN_stdfloat r);
inline void NodePath::set_tex_rotate(NodePath const &other, TextureStage *stage, PN_stdfloat r);

2453 13 set_tex_scale 0 4 3502 23 NodePath::set_tex_scale 0 10 784 785 786 787 788 789 790 791 792 793 4305
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_tex_scale
//       Access: Published
//  Description: Sets a texture matrix on the current node to apply
//               the indicated scale to UVW's for the given stage.
//
//               This call is appropriate for 2-d or 3-d texture
//               coordinates.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_tex_scale
//       Access: Published
//  Description: Sets a texture matrix on the current node to apply
//               the indicated scale to UV's for the given stage.
//
//               This call is appropriate for ordinary 2-d texture
//               coordinates.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_tex_scale
//       Access: Published
//  Description: Sets a texture matrix on the current node to apply
//               the indicated scale to UV's for the given stage.
//
//               This call is appropriate for ordinary 2-d texture
//               coordinates.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_tex_scale
//       Access: Published
//  Description: Sets a texture matrix on the current node to apply
//               the indicated scale to UVW's for the given stage.
//
//               This call is appropriate for 3-d texture coordinates.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_tex_scale
//       Access: Published
//  Description: Sets a texture matrix on the current node to apply
//               the indicated scale to UVW's for the given stage.
//
//               This call is appropriate for 3-d texture coordinates.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_tex_scale
//       Access: Published
//  Description: Sets a texture matrix on the current node to apply
//               the indicated scale to UV's for the given stage.
//
//               This call is appropriate for 2-d or 3-d texture
//               coordinates.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_tex_scale
//       Access: Published
//  Description: Sets a texture matrix on the current node to apply
//               the indicated scale to UV's for the given stage.
//
//               This call is appropriate for ordinary 2-d texture
//               coordinates.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_tex_scale
//       Access: Published
//  Description: Sets a texture matrix on the current node to apply
//               the indicated scale to UV's for the given stage.
//
//               This call is appropriate for ordinary 2-d texture
//               coordinates.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_tex_scale
//       Access: Published
//  Description: Sets a texture matrix on the current node to apply
//               the indicated scale to UVW's for the given stage.
//
//               This call is appropriate for 3-d texture coordinates.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_tex_scale
//       Access: Published
//  Description: Sets a texture matrix on the current node to apply
//               the indicated scale to UVW's for the given stage.
//
//               This call is appropriate for 3-d texture coordinates.
////////////////////////////////////////////////////////////////////
988
inline void NodePath::set_tex_scale(TextureStage *stage, PN_stdfloat scale);
inline void NodePath::set_tex_scale(TextureStage *stage, PN_stdfloat su, PN_stdfloat sv);
inline void NodePath::set_tex_scale(TextureStage *stage, LVecBase2 const &scale);
inline void NodePath::set_tex_scale(TextureStage *stage, PN_stdfloat su, PN_stdfloat sv, PN_stdfloat sw);
inline void NodePath::set_tex_scale(TextureStage *stage, LVecBase3 const &scale);
inline void NodePath::set_tex_scale(NodePath const &other, TextureStage *stage, PN_stdfloat scale);
inline void NodePath::set_tex_scale(NodePath const &other, TextureStage *stage, PN_stdfloat su, PN_stdfloat sv);
inline void NodePath::set_tex_scale(NodePath const &other, TextureStage *stage, LVecBase2 const &scale);
inline void NodePath::set_tex_scale(NodePath const &other, TextureStage *stage, PN_stdfloat su, PN_stdfloat sv, PN_stdfloat sw);
inline void NodePath::set_tex_scale(NodePath const &other, TextureStage *stage, LVecBase3 const &scale);

2454 14 get_tex_offset 0 4 3502 24 NodePath::get_tex_offset 0 2 794 795 836
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_tex_offset
//       Access: Published
//  Description: Returns the offset set for the UV's for the given
//               stage on the current node.
//
//               This call is appropriate for ordinary 2-d texture
//               coordinates.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_tex_offset
//       Access: Published
//  Description: Returns the offset set for the UV's for the given
//               stage on the current node.
//
//               This call is appropriate for ordinary 2-d texture
//               coordinates.
////////////////////////////////////////////////////////////////////
162
inline LVecBase2 NodePath::get_tex_offset(TextureStage *stage) const;
inline LVecBase2 NodePath::get_tex_offset(NodePath const &other, TextureStage *stage) const;

2455 14 get_tex_rotate 0 4 3502 24 NodePath::get_tex_rotate 0 2 796 797 840
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_tex_rotate
//       Access: Published
//  Description: Returns the rotation set for the UV's for the given
//               stage on the current node.
//
//               This call is appropriate for ordinary 2-d texture
//               coordinates.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_tex_rotate
//       Access: Published
//  Description: Returns the rotation set for the UV's for the given
//               stage on the current node.
//
//               This call is appropriate for ordinary 2-d texture
//               coordinates.
////////////////////////////////////////////////////////////////////
166
inline PN_stdfloat NodePath::get_tex_rotate(TextureStage *stage) const;
inline PN_stdfloat NodePath::get_tex_rotate(NodePath const &other, TextureStage *stage) const;

2456 13 get_tex_scale 0 4 3502 23 NodePath::get_tex_scale 0 2 798 799 832
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_tex_scale
//       Access: Published
//  Description: Returns the scale set for the UV's for the given
//               stage on the current node.
//
//               This call is appropriate for ordinary 2-d texture
//               coordinates.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_tex_scale
//       Access: Published
//  Description: Returns the scale set for the UV's for the given
//               stage on the current node.
//
//               This call is appropriate for ordinary 2-d texture
//               coordinates.
////////////////////////////////////////////////////////////////////
160
inline LVecBase2 NodePath::get_tex_scale(TextureStage *stage) const;
inline LVecBase2 NodePath::get_tex_scale(NodePath const &other, TextureStage *stage) const;

2457 11 set_tex_pos 0 4 3502 21 NodePath::set_tex_pos 0 4 800 801 802 803 1658
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_tex_pos
//       Access: Published
//  Description: Sets a texture matrix on the current node to apply
//               the indicated offset to UVW's for the given stage.
//
//               This call is appropriate for 3-d texture coordinates.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_tex_pos
//       Access: Published
//  Description: Sets a texture matrix on the current node to apply
//               the indicated offset to UVW's for the given stage.
//
//               This call is appropriate for 3-d texture coordinates.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_tex_pos
//       Access: Published
//  Description: Sets a texture matrix on the current node to apply
//               the indicated offset to UVW's for the given stage.
//
//               This call is appropriate for 3-d texture coordinates.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_tex_pos
//       Access: Published
//  Description: Sets a texture matrix on the current node to apply
//               the indicated offset to UVW's for the given stage.
//
//               This call is appropriate for 3-d texture coordinates.
////////////////////////////////////////////////////////////////////
403
inline void NodePath::set_tex_pos(TextureStage *stage, PN_stdfloat u, PN_stdfloat v, PN_stdfloat w);
inline void NodePath::set_tex_pos(TextureStage *stage, LVecBase3 const &uvw);
inline void NodePath::set_tex_pos(NodePath const &other, TextureStage *stage, PN_stdfloat u, PN_stdfloat v, PN_stdfloat w);
inline void NodePath::set_tex_pos(NodePath const &other, TextureStage *stage, LVecBase3 const &uvw);

2458 11 set_tex_hpr 0 4 3502 21 NodePath::set_tex_hpr 0 4 804 805 806 807 1794
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_tex_hpr
//       Access: Published
//  Description: Sets a texture matrix on the current node to apply
//               the indicated rotation, as a 3-D HPR, to UVW's
//               for the given stage.
//
//               This call is appropriate for 3-d texture coordinates.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_tex_hpr
//       Access: Published
//  Description: Sets a texture matrix on the current node to apply
//               the indicated rotation, as a 3-D HPR, to UVW's
//               for the given stage.
//
//               This call is appropriate for 3-d texture coordinates.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_tex_hpr
//       Access: Published
//  Description: Sets a texture matrix on the current node to apply
//               the indicated rotation, as a 3-D HPR, to UVW's
//               for the given stage.
//
//               This call is appropriate for 3-d texture coordinates.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_tex_hpr
//       Access: Published
//  Description: Sets a texture matrix on the current node to apply
//               the indicated rotation, as a 3-D HPR, to UVW's
//               for the given stage.
//
//               This call is appropriate for 3-d texture coordinates.
////////////////////////////////////////////////////////////////////
403
inline void NodePath::set_tex_hpr(TextureStage *stage, PN_stdfloat h, PN_stdfloat p, PN_stdfloat r);
inline void NodePath::set_tex_hpr(TextureStage *stage, LVecBase3 const &hpr);
inline void NodePath::set_tex_hpr(NodePath const &other, TextureStage *stage, PN_stdfloat h, PN_stdfloat p, PN_stdfloat r);
inline void NodePath::set_tex_hpr(NodePath const &other, TextureStage *stage, LVecBase3 const &hpr);

2459 11 get_tex_pos 0 4 3502 21 NodePath::get_tex_pos 0 2 808 809 780
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_tex_pos
//       Access: Published
//  Description: Returns the offset set for the UVW's for the given
//               stage on the current node.
//
//               This call is appropriate for 3-d texture coordinates.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_tex_pos
//       Access: Published
//  Description: Returns the offset set for the UVW's for the given
//               stage on the current node.
//
//               This call is appropriate for 3-d texture coordinates.
////////////////////////////////////////////////////////////////////
156
inline LVecBase3 NodePath::get_tex_pos(TextureStage *stage) const;
inline LVecBase3 NodePath::get_tex_pos(NodePath const &other, TextureStage *stage) const;

2460 11 get_tex_hpr 0 4 3502 21 NodePath::get_tex_hpr 0 2 810 811 782
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_tex_hpr
//       Access: Published
//  Description: Returns the 3-D HPR set for the UVW's for the given
//               stage on the current node.
//
//               This call is appropriate for 3-d texture coordinates.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_tex_hpr
//       Access: Published
//  Description: Returns the 3-D HPR set for the UVW's for the given
//               stage on the current node.
//
//               This call is appropriate for 3-d texture coordinates.
////////////////////////////////////////////////////////////////////
156
inline LVecBase3 NodePath::get_tex_hpr(TextureStage *stage) const;
inline LVecBase3 NodePath::get_tex_hpr(NodePath const &other, TextureStage *stage) const;

2461 16 get_tex_scale_3d 0 4 3502 26 NodePath::get_tex_scale_3d 0 2 812 813 788
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_tex_scale_3d
//       Access: Published
//  Description: Returns the scale set for the UVW's for the given
//               stage on the current node.
//
//               This call is appropriate for 3-d texture coordinates.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_tex_scale_3d
//       Access: Published
//  Description: Returns the scale set for the UVW's for the given
//               stage on the current node.
//
//               This call is appropriate for 3-d texture coordinates.
////////////////////////////////////////////////////////////////////
166
inline LVecBase3 NodePath::get_tex_scale_3d(TextureStage *stage) const;
inline LVecBase3 NodePath::get_tex_scale_3d(NodePath const &other, TextureStage *stage) const;

2462 11 set_tex_gen 0 4 3502 21 NodePath::set_tex_gen 0 2 814 815 788
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_tex_gen
//       Access: Published
//  Description: Enables automatic texture coordinate generation for
//               the indicated texture stage.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_tex_gen
//       Access: Published
//  Description: Enables automatic texture coordinate generation for
//               the indicated texture stage.  This version of this
//               method is useful when setting M_constant, which
//               requires a constant texture coordinate value.
////////////////////////////////////////////////////////////////////
229
void NodePath::set_tex_gen(TextureStage *stage, RenderAttrib::TexGenMode mode, int priority = 0);
void NodePath::set_tex_gen(TextureStage *stage, RenderAttrib::TexGenMode mode, LTexCoord3 const &constant_value, int priority = 0);

2463 13 clear_tex_gen 0 4 3502 23 NodePath::clear_tex_gen 0 2 816 817 647
////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_tex_gen
//       Access: Published
//  Description: Removes the texture coordinate generation mode from
//               all texture stages on this node.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_tex_gen
//       Access: Published
//  Description: Disables automatic texture coordinate generation for
//               the indicated texture stage.
////////////////////////////////////////////////////////////////////
86
void NodePath::clear_tex_gen(void);
void NodePath::clear_tex_gen(TextureStage *stage);

2464 11 has_tex_gen 0 4 3502 21 NodePath::has_tex_gen 0 1 818 371
////////////////////////////////////////////////////////////////////
//     Function: NodePath::has_tex_gen
//       Access: Published
//  Description: Returns true if there is a mode for automatic texture
//               coordinate generation on the current node for the
//               given stage.
////////////////////////////////////////////////////////////////////
54
bool NodePath::has_tex_gen(TextureStage *stage) const;

2465 11 get_tex_gen 0 4 3502 21 NodePath::get_tex_gen 0 1 819 385
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_tex_gen
//       Access: Published
//  Description: Returns the texture coordinate generation mode for
//               the given stage, or M_off if there is no explicit
//               mode set for the given stage.
////////////////////////////////////////////////////////////////////
74
RenderAttrib::TexGenMode NodePath::get_tex_gen(TextureStage *stage) const;

2466 17 set_tex_projector 0 4 3502 27 NodePath::set_tex_projector 0 1 820 877
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_tex_projector
//       Access: Published
//  Description: Establishes a TexProjectorEffect on this node, which
//               can be used to establish projective texturing (but
//               see also the NodePath::project_texture() convenience
//               function), or it can be used to bind this node's
//               texture transform to particular node's position in
//               space, allowing a LerpInterval (for instance) to
//               adjust this node's texture coordinates.
//
//               If to is a LensNode, then the fourth parameter,
//               lens_index, can be provided to select a particular
//               lens to apply.  Otherwise lens_index is not used.
////////////////////////////////////////////////////////////////////
116
void NodePath::set_tex_projector(TextureStage *stage, NodePath const &from, NodePath const &to, int lens_index = 0);

2467 19 clear_tex_projector 0 4 3502 29 NodePath::clear_tex_projector 0 2 821 822 625
////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_tex_projector
//       Access: Published
//  Description: Removes the TexProjectorEffect for the indicated
//               stage from this node.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_tex_projector
//       Access: Published
//  Description: Removes the TexProjectorEffect for all stages from
//               this node.
////////////////////////////////////////////////////////////////////
98
void NodePath::clear_tex_projector(TextureStage *stage);
void NodePath::clear_tex_projector(void);

2468 17 has_tex_projector 0 4 3502 27 NodePath::has_tex_projector 0 1 823 336
////////////////////////////////////////////////////////////////////
//     Function: NodePath::has_tex_projector
//       Access: Published
//  Description: Returns true if this node has a TexProjectorEffect
//               for the indicated stage, false otherwise.
////////////////////////////////////////////////////////////////////
60
bool NodePath::has_tex_projector(TextureStage *stage) const;

2469 22 get_tex_projector_from 0 4 3502 32 NodePath::get_tex_projector_from 0 1 824 510
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_tex_projector_from
//       Access: Published
//  Description: Returns the "from" node associated with the
//               TexProjectorEffect on the indicated stage.  The
//               relative transform between the "from" and the "to"
//               nodes is automatically applied to the texture
//               transform each frame.
////////////////////////////////////////////////////////////////////
69
NodePath NodePath::get_tex_projector_from(TextureStage *stage) const;

2470 20 get_tex_projector_to 0 4 3502 30 NodePath::get_tex_projector_to 0 1 825 506
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_tex_projector_to
//       Access: Published
//  Description: Returns the "to" node associated with the
//               TexProjectorEffect on the indicated stage.  The
//               relative transform between the "from" and the "to"
//               nodes is automatically applied to the texture
//               transform each frame.
////////////////////////////////////////////////////////////////////
67
NodePath NodePath::get_tex_projector_to(TextureStage *stage) const;

2471 15 project_texture 0 4 3502 25 NodePath::project_texture 0 1 826 440
////////////////////////////////////////////////////////////////////
//     Function: NodePath::project_texture
//       Access: Published
//  Description: A convenience function to enable projective texturing
//               at this node level and below, using the indicated
//               NodePath (which should contain a LensNode) as the
//               projector.
////////////////////////////////////////////////////////////////////
93
void NodePath::project_texture(TextureStage *stage, Texture *tex, NodePath const &projector);

2472 21 clear_project_texture 0 4 3502 31 NodePath::clear_project_texture 0 1 827 270
////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_project_texture
//       Access: Published
//  Description: Undoes the effect of project_texture().
////////////////////////////////////////////////////////////////////
65
inline void NodePath::clear_project_texture(TextureStage *stage);

2473 12 has_texcoord 0 4 3502 22 NodePath::has_texcoord 0 1 828 467
////////////////////////////////////////////////////////////////////
//     Function: NodePath::has_texcoord
//       Access: Published
//  Description: Returns true if there are at least some vertices at
//               this node and below that use the named texture
//               coordinate set, false otherwise.  Pass the empty
//               string for the default texture coordinate set.
////////////////////////////////////////////////////////////////////
70
inline bool NodePath::has_texcoord(string const &texcoord_name) const;

2474 17 has_vertex_column 0 4 3502 27 NodePath::has_vertex_column 0 1 829 598
////////////////////////////////////////////////////////////////////
//     Function: NodePath::has_vertex_column
//       Access: Published
//  Description: Returns true if there are at least some vertices at
//               this node and below that contain a reference to the
//               indicated vertex data column name, false otherwise.
//
//               This is particularly useful for testing whether a
//               particular model has a given texture coordinate set
//               (but see has_texcoord()).
////////////////////////////////////////////////////////////////////
65
bool NodePath::has_vertex_column(InternalName const *name) const;

2475 23 find_all_vertex_columns 0 4 3502 33 NodePath::find_all_vertex_columns 0 2 830 831 810
////////////////////////////////////////////////////////////////////
//     Function: NodePath::find_all_vertex_columns
//       Access: Published
//  Description: Returns a list of all vertex array columns stored on
//               some geometry found at this node level and below.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::find_all_vertex_columns
//       Access: Published
//  Description: Returns a list of all vertex array columns stored on
//               some geometry found at this node level and below that
//               match the indicated name (which may contain wildcard
//               characters).
////////////////////////////////////////////////////////////////////
153
InternalNameCollection NodePath::find_all_vertex_columns(void) const;
InternalNameCollection NodePath::find_all_vertex_columns(string const &name) const;

2476 18 find_all_texcoords 0 4 3502 28 NodePath::find_all_texcoords 0 2 832 833 788
////////////////////////////////////////////////////////////////////
//     Function: NodePath::find_all_texcoords
//       Access: Published
//  Description: Returns a list of all texture coordinate sets used by
//               any geometry at this node level and below.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::find_all_texcoords
//       Access: Published
//  Description: Returns a list of all texture coordinate sets used by
//               any geometry at this node level and below that match
//               the indicated name (which may contain wildcard
//               characters).
////////////////////////////////////////////////////////////////////
143
InternalNameCollection NodePath::find_all_texcoords(void) const;
InternalNameCollection NodePath::find_all_texcoords(string const &name) const;

2477 12 find_texture 0 4 3502 22 NodePath::find_texture 0 2 834 835 924
////////////////////////////////////////////////////////////////////
//     Function: NodePath::find_texture
//       Access: Published
//  Description: Returns the first texture found applied to geometry
//               at this node or below that matches the indicated name
//               (which may contain wildcards).  Returns the texture
//               if it is found, or NULL if it is not.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::find_texture
//       Access: Published
//  Description: Returns the first texture found applied to geometry
//               at this node or below that is assigned to the
//               indicated texture stage.  Returns the texture if it
//               is found, or NULL if it is not.
////////////////////////////////////////////////////////////////////
118
Texture *NodePath::find_texture(string const &name) const;
Texture *NodePath::find_texture(TextureStage *stage) const;

2478 17 find_all_textures 0 4 3502 27 NodePath::find_all_textures 0 3 836 837 838 1097
////////////////////////////////////////////////////////////////////
//     Function: NodePath::find_all_textures
//       Access: Published
//  Description: Returns a list of a textures applied to geometry at
//               this node and below.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::find_all_textures
//       Access: Published
//  Description: Returns a list of a textures applied to geometry at
//               this node and below that match the indicated name
//               (which may contain wildcard characters).
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::find_all_textures
//       Access: Published
//  Description: Returns a list of a textures on geometry at
//               this node and below that are assigned to the
//               indicated texture stage.
////////////////////////////////////////////////////////////////////
205
TextureCollection NodePath::find_all_textures(void) const;
TextureCollection NodePath::find_all_textures(string const &name) const;
TextureCollection NodePath::find_all_textures(TextureStage *stage) const;

2479 18 find_texture_stage 0 4 3502 28 NodePath::find_texture_stage 0 1 839 500
////////////////////////////////////////////////////////////////////
//     Function: NodePath::find_texture_stage
//       Access: Published
//  Description: Returns the first TextureStage found applied to
//               geometry at this node or below that matches the
//               indicated name (which may contain wildcards).
//               Returns the TextureStage if it is found, or NULL if
//               it is not.
////////////////////////////////////////////////////////////////////
69
TextureStage *NodePath::find_texture_stage(string const &name) const;

2480 23 find_all_texture_stages 0 4 3502 33 NodePath::find_all_texture_stages 0 2 840 841 743
////////////////////////////////////////////////////////////////////
//     Function: NodePath::find_all_texture_stages
//       Access: Published
//  Description: Returns a list of a TextureStages applied to geometry
//               at this node and below.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::find_all_texture_stages
//       Access: Published
//  Description: Returns a list of a TextureStages applied to geometry
//               at this node and below that match the indicated name
//               (which may contain wildcard characters).
////////////////////////////////////////////////////////////////////
153
TextureStageCollection NodePath::find_all_texture_stages(void) const;
TextureStageCollection NodePath::find_all_texture_stages(string const &name) const;

2481 20 unify_texture_stages 0 4 3502 30 NodePath::unify_texture_stages 0 1 842 615
////////////////////////////////////////////////////////////////////
//     Function: NodePath::unify_texture_stages
//       Access: Published
//  Description: Searches through all TextureStages at this node and
//               below.  Any TextureStages that share the same name as
//               the indicated TextureStage object are replaced with
//               this object, thus ensuring that all geometry at this
//               node and below with a particular TextureStage name is
//               using the same TextureStage object.
////////////////////////////////////////////////////////////////////
57
void NodePath::unify_texture_stages(TextureStage *stage);

2482 13 find_material 0 4 3502 23 NodePath::find_material 0 1 843 471
////////////////////////////////////////////////////////////////////
//     Function: NodePath::find_material
//       Access: Published
//  Description: Returns the first material found applied to geometry
//               at this node or below that matches the indicated name
//               (which may contain wildcards).  Returns the material
//               if it is found, or NULL if it is not.
////////////////////////////////////////////////////////////////////
60
Material *NodePath::find_material(string const &name) const;

2483 18 find_all_materials 0 4 3502 28 NodePath::find_all_materials 0 2 844 845 725
////////////////////////////////////////////////////////////////////
//     Function: NodePath::find_all_materials
//       Access: Published
//  Description: Returns a list of a materials applied to geometry at
//               this node and below.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::find_all_materials
//       Access: Published
//  Description: Returns a list of a materials applied to geometry at
//               this node and below that match the indicated name
//               (which may contain wildcard characters).
////////////////////////////////////////////////////////////////////
135
MaterialCollection NodePath::find_all_materials(void) const;
MaterialCollection NodePath::find_all_materials(string const &name) const;

2484 12 set_material 0 4 3502 22 NodePath::set_material 0 1 846 486
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_material
//       Access: Published
//  Description: Sets the geometry at this level and below to render
//               using the indicated material.
//
//               Previously, this operation made a copy of the
//               material structure, but nowadays it assigns the
//               pointer directly.
////////////////////////////////////////////////////////////////////
61
void NodePath::set_material(Material *tex, int priority = 0);

2485 16 set_material_off 0 4 3502 26 NodePath::set_material_off 0 1 847 567
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_material_off
//       Access: Published
//  Description: Sets the geometry at this level and below to render
//               using no material.  This is normally the default, but
//               it may be useful to use this to contradict
//               set_material() at a higher node level (or, with a
//               priority, to override a set_material() at a lower
//               level).
////////////////////////////////////////////////////////////////////
50
void NodePath::set_material_off(int priority = 0);

2486 14 clear_material 0 4 3502 24 NodePath::clear_material 0 1 848 369
////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_material
//       Access: Published
//  Description: Completely removes any material adjustment that may
//               have been set via set_material() from this particular
//               node.
////////////////////////////////////////////////////////////////////
36
void NodePath::clear_material(void);

2487 12 has_material 0 4 3502 22 NodePath::has_material 0 1 849 343
////////////////////////////////////////////////////////////////////
//     Function: NodePath::has_material
//       Access: Published
//  Description: Returns true if a material has been applied to this
//               particular node via set_material(), false otherwise.
////////////////////////////////////////////////////////////////////
40
bool NodePath::has_material(void) const;

2488 12 get_material 0 4 3502 22 NodePath::get_material 0 1 850 111
//               See also find_material().
////////////////////////////////////////////////////////////////////
57
PointerTo< Material > NodePath::get_material(void) const;

2489 7 set_fog 0 4 3502 17 NodePath::set_fog 0 1 851 310
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_fog
//       Access: Published
//  Description: Sets the geometry at this level and below to render
//               using the indicated fog.
////////////////////////////////////////////////////////////////////
51
void NodePath::set_fog(Fog *fog, int priority = 0);

2490 11 set_fog_off 0 4 3502 21 NodePath::set_fog_off 0 1 852 547
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_fog_off
//       Access: Published
//  Description: Sets the geometry at this level and below to render
//               using no fog.  This is normally the default, but
//               it may be useful to use this to contradict
//               set_fog() at a higher node level (or, with a
//               priority, to override a set_fog() at a lower
//               level).
////////////////////////////////////////////////////////////////////
45
void NodePath::set_fog_off(int priority = 0);

2491 9 clear_fog 0 4 3502 19 NodePath::clear_fog 0 1 853 491
////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_fog
//       Access: Published
//  Description: Completely removes any fog adjustment that may
//               have been set via set_fog() or set_fog_off()
//               from this particular node.  This allows whatever
//               fogs might be otherwise affecting the geometry to
//               show instead.
////////////////////////////////////////////////////////////////////
31
void NodePath::clear_fog(void);

2492 7 has_fog 0 4 3502 17 NodePath::has_fog 0 1 854 556
////////////////////////////////////////////////////////////////////
//     Function: NodePath::has_fog
//       Access: Published
//  Description: Returns true if a fog has been applied to this
//               particular node via set_fog(), false otherwise.
//               This is not the same thing as asking whether the
//               geometry at this node will be rendered with
//               fog, as there may be a fog in effect from a higher or
//               lower level.
////////////////////////////////////////////////////////////////////
35
bool NodePath::has_fog(void) const;

2493 11 has_fog_off 0 4 3502 21 NodePath::has_fog_off 0 1 855 579
////////////////////////////////////////////////////////////////////
//     Function: NodePath::has_fog_off
//       Access: Published
//  Description: Returns true if a fog has been specifically
//               disabled on this particular node via
//               set_fog_off(), false otherwise.  This is not the
//               same thing as asking whether the geometry at this
//               node will be rendered unfogged, as there may be a
//               fog in effect from a higher or lower level.
////////////////////////////////////////////////////////////////////
39
bool NodePath::has_fog_off(void) const;

2494 7 get_fog 0 4 3502 17 NodePath::get_fog 0 1 856 541
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_fog
//       Access: Published
//  Description: Returns the fog that has been set on this
//               particular node, or NULL if no fog has been set.
//               This is not necessarily the fog that will be
//               applied to the geometry at or below this level, as
//               another fog at a higher or lower level may
//               override.
////////////////////////////////////////////////////////////////////
35
Fog *NodePath::get_fog(void) const;

2495 25 set_render_mode_wireframe 0 4 3502 35 NodePath::set_render_mode_wireframe 0 1 857 345
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_render_mode_wireframe
//       Access: Published
//  Description: Sets up the geometry at this level and below (unless
//               overridden) to render in wireframe mode.
////////////////////////////////////////////////////////////////////
59
void NodePath::set_render_mode_wireframe(int priority = 0);

2496 22 set_render_mode_filled 0 4 3502 32 NodePath::set_render_mode_filled 0 1 858 377
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_render_mode_filled
//       Access: Published
//  Description: Sets up the geometry at this level and below (unless
//               overridden) to render in filled (i.e. not wireframe)
//               mode.
////////////////////////////////////////////////////////////////////
56
void NodePath::set_render_mode_filled(int priority = 0);

2497 32 set_render_mode_filled_wireframe 0 4 3502 42 NodePath::set_render_mode_filled_wireframe 0 1 859 473
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_render_mode_filled_wireframe
//       Access: Published
//  Description: Sets up the geometry at this level and below (unless
//               overridden) to render in filled, but overlay the
//               wireframe on top with a fixed color.  This is useful
//               for debug visualizations.
////////////////////////////////////////////////////////////////////
97
void NodePath::set_render_mode_filled_wireframe(LColor const &wireframe_color, int priority = 0);

2498 25 set_render_mode_thickness 0 4 3502 35 NodePath::set_render_mode_thickness 0 1 860 690
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_render_mode_thickness
//       Access: Published
//  Description: Sets up the point geometry at this level and below to
//               render as thick points (that is, billboarded
//               quads).  The thickness is in pixels, unless
//               set_render_mode_perspective is also true, in which
//               case it is in 3-D units.
//
//               If you want the quads to be individually textured,
//               you should also set a TexGenAttrib::M_point_sprite on
//               the node.
////////////////////////////////////////////////////////////////////
82
void NodePath::set_render_mode_thickness(PN_stdfloat thickness, int priority = 0);

2499 27 set_render_mode_perspective 0 4 3502 37 NodePath::set_render_mode_perspective 0 1 861 822
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_render_mode_perspective
//       Access: Published
//  Description: Sets up the point geometry at this level and below to
//               render as perspective sprites (that is, billboarded
//               quads).  The thickness, as specified with
//               set_render_mode_thickness(), is the width of each
//               point in 3-D units, unless it is overridden on a
//               per-vertex basis.  This does not affect geometry
//               other than points.
//
//               If you want the quads to be individually textured,
//               you should also set a TexGenAttrib::M_point_sprite on
//               the node.
////////////////////////////////////////////////////////////////////
79
void NodePath::set_render_mode_perspective(bool perspective, int priority = 0);

2500 15 set_render_mode 0 4 3502 25 NodePath::set_render_mode 0 1 862 407
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_render_mode
//       Access: Published
//  Description: Sets up the geometry at this level and below (unless
//               overridden) to render in the specified mode and with
//               the indicated line and/or point thickness.
////////////////////////////////////////////////////////////////////
101
void NodePath::set_render_mode(RenderModeAttrib::Mode mode, PN_stdfloat thickness, int priority = 0);

2501 17 clear_render_mode 0 4 3502 27 NodePath::clear_render_mode 0 1 863 420
////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_render_mode
//       Access: Published
//  Description: Completely removes any render mode adjustment that
//               may have been set on this node via
//               set_render_mode_wireframe() or
//               set_render_mode_filled().
////////////////////////////////////////////////////////////////////
39
void NodePath::clear_render_mode(void);

2502 15 has_render_mode 0 4 3502 25 NodePath::has_render_mode 0 1 864 454
////////////////////////////////////////////////////////////////////
//     Function: NodePath::has_render_mode
//       Access: Published
//  Description: Returns true if a render mode has been explicitly set
//               on this particular node via set_render_mode() (or
//               set_render_mode_wireframe() or
//               set_render_mode_filled()), false otherwise.
////////////////////////////////////////////////////////////////////
43
bool NodePath::has_render_mode(void) const;

2503 15 get_render_mode 0 4 3502 25 NodePath::get_render_mode 0 1 865 389
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_render_mode
//       Access: Published
//  Description: Returns the render mode that has been specifically
//               set on this node via set_render_mode(), or
//               M_unchanged if nothing has been set.
////////////////////////////////////////////////////////////////////
61
RenderModeAttrib::Mode NodePath::get_render_mode(void) const;

2504 25 get_render_mode_thickness 0 4 3502 35 NodePath::get_render_mode_thickness 0 1 866 401
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_render_mode_thickness
//       Access: Published
//  Description: Returns the render mode thickness that has been
//               specifically set on this node via set_render_mode(),
//               or 1.0 if nothing has been set.
////////////////////////////////////////////////////////////////////
60
PN_stdfloat NodePath::get_render_mode_thickness(void) const;

2505 27 get_render_mode_perspective 0 4 3502 37 NodePath::get_render_mode_perspective 0 1 867 387
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_render_mode_perspective
//       Access: Published
//  Description: Returns the flag that has been set on this node via
//               set_render_mode_perspective(), or false if no flag
//               has been set.
////////////////////////////////////////////////////////////////////
55
bool NodePath::get_render_mode_perspective(void) const;

2506 13 set_two_sided 0 4 3502 23 NodePath::set_two_sided 0 1 868 511
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_two_sided
//       Access: Published
//  Description: Specifically sets or disables two-sided rendering
//               mode on this particular node.  If no other nodes
//               override, this will cause backfacing polygons to be
//               drawn (in two-sided mode, true) or culled (in
//               one-sided mode, false).
////////////////////////////////////////////////////////////////////
63
void NodePath::set_two_sided(bool two_sided, int priority = 0);

2507 15 clear_two_sided 0 4 3502 25 NodePath::clear_two_sided 0 1 869 640
////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_two_sided
//       Access: Published
//  Description: Completely removes any two-sided adjustment that
//               may have been set on this node via set_two_sided().
//               The geometry at this level and below will
//               subsequently be rendered either two-sided or
//               one-sided, according to whatever other nodes may have
//               had set_two_sided() on it, or according to the
//               initial state otherwise.
////////////////////////////////////////////////////////////////////
37
void NodePath::clear_two_sided(void);

2508 13 has_two_sided 0 4 3502 23 NodePath::has_two_sided 0 1 870 489
////////////////////////////////////////////////////////////////////
//     Function: NodePath::has_two_sided
//       Access: Published
//  Description: Returns true if a two-sided adjustment has been
//               explicitly set on this particular node via
//               set_two_sided().  If this returns true, then
//               get_two_sided() may be called to determine which has
//               been set.
////////////////////////////////////////////////////////////////////
41
bool NodePath::has_two_sided(void) const;

2509 13 get_two_sided 0 4 3502 23 NodePath::get_two_sided 0 1 871 681
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_two_sided
//       Access: Published
//  Description: Returns true if two-sided rendering has been
//               specifically set on this node via set_two_sided(), or
//               false if one-sided rendering has been specifically
//               set, or if nothing has been specifically set.  See
//               also has_two_sided().  This does not necessarily
//               imply that the geometry will or will not be rendered
//               two-sided, as there may be other nodes that override.
////////////////////////////////////////////////////////////////////
41
bool NodePath::get_two_sided(void) const;

2510 14 set_depth_test 0 4 3502 24 NodePath::set_depth_test 0 1 872 511
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_depth_test
//       Access: Published
//  Description: Specifically sets or disables the testing of the
//               depth buffer on this particular node.  This is
//               normally on in the 3-d scene graph and off in the 2-d
//               scene graph; it should be on for rendering most 3-d
//               objects properly.
////////////////////////////////////////////////////////////////////
65
void NodePath::set_depth_test(bool depth_test, int priority = 0);

2511 16 clear_depth_test 0 4 3502 26 NodePath::clear_depth_test 0 1 873 345
////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_depth_test
//       Access: Published
//  Description: Completely removes any depth-test adjustment that
//               may have been set on this node via set_depth_test().
////////////////////////////////////////////////////////////////////
38
void NodePath::clear_depth_test(void);

2512 14 has_depth_test 0 4 3502 24 NodePath::has_depth_test 0 1 874 493
////////////////////////////////////////////////////////////////////
//     Function: NodePath::has_depth_test
//       Access: Published
//  Description: Returns true if a depth-test adjustment has been
//               explicitly set on this particular node via
//               set_depth_test().  If this returns true, then
//               get_depth_test() may be called to determine which has
//               been set.
////////////////////////////////////////////////////////////////////
42
bool NodePath::has_depth_test(void) const;

2513 14 get_depth_test 0 4 3502 24 NodePath::get_depth_test 0 1 875 535
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_depth_test
//       Access: Published
//  Description: Returns true if depth-test rendering has been
//               specifically set on this node via set_depth_test(), or
//               false if depth-test rendering has been specifically
//               disabled.  If nothing has been specifically set,
//               returns true.  See also has_depth_test().
////////////////////////////////////////////////////////////////////
42
bool NodePath::get_depth_test(void) const;

2514 15 set_depth_write 0 4 3502 25 NodePath::set_depth_write 0 1 876 512
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_depth_write
//       Access: Published
//  Description: Specifically sets or disables the writing to the
//               depth buffer on this particular node.  This is
//               normally on in the 3-d scene graph and off in the 2-d
//               scene graph; it should be on for rendering most 3-d
//               objects properly.
////////////////////////////////////////////////////////////////////
67
void NodePath::set_depth_write(bool depth_write, int priority = 0);

2515 17 clear_depth_write 0 4 3502 27 NodePath::clear_depth_write 0 1 877 348
////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_depth_write
//       Access: Published
//  Description: Completely removes any depth-write adjustment that
//               may have been set on this node via set_depth_write().
////////////////////////////////////////////////////////////////////
39
void NodePath::clear_depth_write(void);

2516 15 has_depth_write 0 4 3502 25 NodePath::has_depth_write 0 1 878 497
////////////////////////////////////////////////////////////////////
//     Function: NodePath::has_depth_write
//       Access: Published
//  Description: Returns true if a depth-write adjustment has been
//               explicitly set on this particular node via
//               set_depth_write().  If this returns true, then
//               get_depth_write() may be called to determine which has
//               been set.
////////////////////////////////////////////////////////////////////
43
bool NodePath::has_depth_write(void) const;

2517 15 get_depth_write 0 4 3502 25 NodePath::get_depth_write 0 1 879 540
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_depth_write
//       Access: Published
//  Description: Returns true if depth-write rendering has been
//               specifically set on this node via set_depth_write(), or
//               false if depth-write rendering has been specifically
//               disabled.  If nothing has been specifically set,
//               returns true.  See also has_depth_write().
////////////////////////////////////////////////////////////////////
43
bool NodePath::get_depth_write(void) const;

2518 16 set_depth_offset 0 4 3502 26 NodePath::set_depth_offset 0 1 880 906
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_depth_offset
//       Access: Published
//  Description: This instructs the graphics driver to apply an
//               offset or bias to the generated depth values for
//               rendered polygons, before they are written to the
//               depth buffer. This can be used to shift polygons
//               forward slightly, to resolve depth conflicts, or
//               self-shadowing artifacts on thin objects.
//               The bias is always an integer number, and each
//               integer increment represents the smallest possible
//               increment in Z that is sufficient to completely
//               resolve two coplanar polygons. Positive numbers
//               are closer towards the camera.
////////////////////////////////////////////////////////////////////
60
void NodePath::set_depth_offset(int bias, int priority = 0);

2519 18 clear_depth_offset 0 4 3502 28 NodePath::clear_depth_offset 0 1 881 351
////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_depth_offset
//       Access: Published
//  Description: Completely removes any depth-offset adjustment that
//               may have been set on this node via set_depth_offset().
////////////////////////////////////////////////////////////////////
40
void NodePath::clear_depth_offset(void);

2520 16 has_depth_offset 0 4 3502 26 NodePath::has_depth_offset 0 1 882 501
////////////////////////////////////////////////////////////////////
//     Function: NodePath::has_depth_offset
//       Access: Published
//  Description: Returns true if a depth-offset adjustment has been
//               explicitly set on this particular node via
//               set_depth_offset().  If this returns true, then
//               get_depth_offset() may be called to determine which has
//               been set.
////////////////////////////////////////////////////////////////////
44
bool NodePath::has_depth_offset(void) const;

2521 16 get_depth_offset 0 4 3502 26 NodePath::get_depth_offset 0 1 883 335
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_depth_offset
//       Access: Published
//  Description: Returns the depth offset value if it has been
//               specified using set_depth_offset, or 0 if not.
////////////////////////////////////////////////////////////////////
43
int NodePath::get_depth_offset(void) const;

2522 17 do_billboard_axis 0 4 3502 27 NodePath::do_billboard_axis 0 1 884 414
////////////////////////////////////////////////////////////////////
//     Function: NodePath::do_billboard_axis
//       Access: Published
//  Description: Performs a billboard-type rotate to the indicated
//               camera node, one time only, and leaves the object
//               rotated.  This is similar in principle to heads_up().
////////////////////////////////////////////////////////////////////
77
void NodePath::do_billboard_axis(NodePath const &camera, PN_stdfloat offset);

2523 22 do_billboard_point_eye 0 4 3502 32 NodePath::do_billboard_point_eye 0 1 885 546
////////////////////////////////////////////////////////////////////
//     Function: NodePath::do_billboard_point_eye
//       Access: Published
//  Description: Performs a billboard-type rotate to the indicated
//               camera node, one time only, and leaves the object
//               rotated.  This is similar in principle to look_at(),
//               although the point_eye billboard effect cannot be
//               achieved using the ordinary look_at() call.
////////////////////////////////////////////////////////////////////
82
void NodePath::do_billboard_point_eye(NodePath const &camera, PN_stdfloat offset);

2524 24 do_billboard_point_world 0 4 3502 34 NodePath::do_billboard_point_world 0 1 886 420
////////////////////////////////////////////////////////////////////
//     Function: NodePath::do_billboard_point_world
//       Access: Published
//  Description: Performs a billboard-type rotate to the indicated
//               camera node, one time only, and leaves the object
//               rotated.  This is similar in principle to look_at().
////////////////////////////////////////////////////////////////////
84
void NodePath::do_billboard_point_world(NodePath const &camera, PN_stdfloat offset);

2525 18 set_billboard_axis 0 4 3502 28 NodePath::set_billboard_axis 0 2 887 888 793
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_billboard_axis
//       Access: Published
//  Description: Puts a billboard transition on the node such that it
//               will rotate in two dimensions around the up axis.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_billboard_axis
//       Access: Published
//  Description: Puts a billboard transition on the node such that it
//               will rotate in two dimensions around the up axis,
//               towards a specified "camera" instead of to the
//               viewing camera.
////////////////////////////////////////////////////////////////////
146
inline void NodePath::set_billboard_axis(PN_stdfloat offset = 0.0);
void NodePath::set_billboard_axis(NodePath const &camera, PN_stdfloat offset);

2526 23 set_billboard_point_eye 0 4 3502 33 NodePath::set_billboard_point_eye 0 2 889 890 968
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_billboard_point_eye
//       Access: Published
//  Description: Puts a billboard transition on the node such that it
//               will rotate in three dimensions about the origin,
//               keeping its up vector oriented to the top of the
//               camera.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_billboard_point_eye
//       Access: Published
//  Description: Puts a billboard transition on the node such that it
//               will rotate in three dimensions about the origin,
//               keeping its up vector oriented to the top of the
//               camera, towards a specified "camera" instead of to
//               the viewing camera.
////////////////////////////////////////////////////////////////////
156
inline void NodePath::set_billboard_point_eye(PN_stdfloat offset = 0.0);
void NodePath::set_billboard_point_eye(NodePath const &camera, PN_stdfloat offset);

2527 25 set_billboard_point_world 0 4 3502 35 NodePath::set_billboard_point_world 0 2 891 892 910
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_billboard_point_world
//       Access: Published
//  Description: Puts a billboard transition on the node such that it
//               will rotate in three dimensions about the origin,
//               keeping its up vector oriented to the sky.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_billboard_point_world
//       Access: Published
//  Description: Puts a billboard transition on the node such that it
//               will rotate in three dimensions about the origin,
//               keeping its up vector oriented to the sky, towards a
//               specified "camera" instead of to the viewing camera.
////////////////////////////////////////////////////////////////////
160
inline void NodePath::set_billboard_point_world(PN_stdfloat offset = 0.0);
void NodePath::set_billboard_point_world(NodePath const &camera, PN_stdfloat offset);

2528 15 clear_billboard 0 4 3502 25 NodePath::clear_billboard 0 1 893 268
////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_billboard
//       Access: Published
//  Description: Removes any billboard effect from the node.
////////////////////////////////////////////////////////////////////
37
void NodePath::clear_billboard(void);

2529 13 has_billboard 0 4 3502 23 NodePath::has_billboard 0 1 894 298
////////////////////////////////////////////////////////////////////
//     Function: NodePath::has_billboard
//       Access: Published
//  Description: Returns true if there is any billboard effect on
//               the node.
////////////////////////////////////////////////////////////////////
41
bool NodePath::has_billboard(void) const;

2530 11 set_compass 0 4 3502 21 NodePath::set_compass 0 1 895 459
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_compass
//       Access: Published
//  Description: Puts a compass effect on the node, so that it will
//               retain a fixed rotation relative to the reference
//               node (or render if the reference node is empty)
//               regardless of the transforms above it.
////////////////////////////////////////////////////////////////////
67
void NodePath::set_compass(NodePath const &reference = NodePath());

2531 13 clear_compass 0 4 3502 23 NodePath::clear_compass 0 1 896 264
////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_compass
//       Access: Published
//  Description: Removes any compass effect from the node.
////////////////////////////////////////////////////////////////////
35
void NodePath::clear_compass(void);

2532 11 has_compass 0 4 3502 21 NodePath::has_compass 0 1 897 294
////////////////////////////////////////////////////////////////////
//     Function: NodePath::has_compass
//       Access: Published
//  Description: Returns true if there is any compass effect on
//               the node.
////////////////////////////////////////////////////////////////////
39
bool NodePath::has_compass(void) const;

2533 16 set_transparency 0 4 3502 26 NodePath::set_transparency 0 1 898 482
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_transparency
//       Access: Published
//  Description: Specifically sets or disables transparent rendering
//               mode on this particular node.  If no other nodes
//               override, this will cause items with a non-1 value
//               for alpha color to be rendered partially transparent.
////////////////////////////////////////////////////////////////////
81
void NodePath::set_transparency(TransparencyAttrib::Mode mode, int priority = 0);

2534 18 clear_transparency 0 4 3502 28 NodePath::clear_transparency 0 1 899 578
////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_transparency
//       Access: Published
//  Description: Completely removes any transparency adjustment that
//               may have been set on this node via set_transparency().
//               The geometry at this level and below will
//               subsequently be rendered either transparent or not,
//               to whatever other nodes may have had
//               set_transparency() on them.
////////////////////////////////////////////////////////////////////
40
void NodePath::clear_transparency(void);

2535 16 has_transparency 0 4 3502 26 NodePath::has_transparency 0 1 900 594
////////////////////////////////////////////////////////////////////
//     Function: NodePath::has_transparency
//       Access: Published
//  Description: Returns true if a transparent-rendering adjustment
//               has been explicitly set on this particular node via
//               set_transparency().  If this returns true, then
//               get_transparency() may be called to determine whether
//               transparency has been explicitly enabled or
//               explicitly disabled for this node.
////////////////////////////////////////////////////////////////////
44
bool NodePath::has_transparency(void) const;

2536 16 get_transparency 0 4 3502 26 NodePath::get_transparency 0 1 901 701
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_transparency
//       Access: Published
//  Description: Returns the transparent rendering that has been
//               specifically set on this node via set_transparency(), or
//               M_none if nontransparent rendering has been specifically
//               set, or if nothing has been specifically set.  See
//               also has_transparency().  This does not necessarily
//               imply that the geometry will or will not be rendered
//               transparent, as there may be other nodes that override.
////////////////////////////////////////////////////////////////////
64
TransparencyAttrib::Mode NodePath::get_transparency(void) const;

2537 13 set_antialias 0 4 3502 23 NodePath::set_antialias 0 1 902 340
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_antialias
//       Access: Published
//  Description: Specifies the antialiasing type that should be
//               applied at this node and below.  See AntialiasAttrib.
////////////////////////////////////////////////////////////////////
72
void NodePath::set_antialias(unsigned short int mode, int priority = 0);

2538 15 clear_antialias 0 4 3502 25 NodePath::clear_antialias 0 1 903 339
////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_antialias
//       Access: Published
//  Description: Completely removes any antialias setting that
//               may have been set on this node via set_antialias().
////////////////////////////////////////////////////////////////////
37
void NodePath::clear_antialias(void);

2539 13 has_antialias 0 4 3502 23 NodePath::has_antialias 0 1 904 490
////////////////////////////////////////////////////////////////////
//     Function: NodePath::has_antialias
//       Access: Published
//  Description: Returns true if an antialias setting has been
//               explicitly mode on this particular node via
//               set_antialias().  If this returns true, then
//               get_antialias() may be called to determine what the
//               setting was.
////////////////////////////////////////////////////////////////////
41
bool NodePath::has_antialias(void) const;

2540 13 get_antialias 0 4 3502 23 NodePath::get_antialias 0 1 905 390
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_antialias
//       Access: Published
//  Description: Returns the antialias setting that has been
//               specifically set on this node via set_antialias(), or
//               M_none if no setting has been made.
////////////////////////////////////////////////////////////////////
55
unsigned short int NodePath::get_antialias(void) const;

2541 16 has_audio_volume 0 4 3502 26 NodePath::has_audio_volume 0 1 906 457
////////////////////////////////////////////////////////////////////
//     Function: NodePath::has_audio_volume
//       Access: Published
//  Description: Returns true if an audio volume has been applied
//               to the referenced node, false otherwise.  It is still
//               possible that volume at this node might have been
//               scaled by an ancestor node.
////////////////////////////////////////////////////////////////////
44
bool NodePath::has_audio_volume(void) const;

2542 18 clear_audio_volume 0 4 3502 28 NodePath::clear_audio_volume 0 1 907 504
////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_audio_volume
//       Access: Published
//  Description: Completely removes any audio volume from the
//               referenced node.  This is preferable to simply
//               setting the audio volume to identity, as it also
//               removes the overhead associated with having an audio
//               volume at all.
////////////////////////////////////////////////////////////////////
40
void NodePath::clear_audio_volume(void);

2543 16 set_audio_volume 0 4 3502 26 NodePath::set_audio_volume 0 1 908 274
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_audio_volume
//       Access: Published
//  Description: Sets the audio volume component of the transform
////////////////////////////////////////////////////////////////////
70
void NodePath::set_audio_volume(PN_stdfloat volume, int priority = 0);

2544 20 set_audio_volume_off 0 4 3502 30 NodePath::set_audio_volume_off 0 1 909 787
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_audio_volume_off
//       Access: Published
//  Description: Disables any audio volume attribute inherited from
//               above.  This is not the same thing as
//               clear_audio_volume(), which undoes any previous
//               set_audio_volume() operation on this node; rather,
//               this actively disables any set_audio_volume() that
//               might be inherited from a parent node.
//
//               It is legal to specify a new volume on the same
//               node with a subsequent call to set_audio_volume();
//               this new scale will apply to lower nodes.
////////////////////////////////////////////////////////////////////
54
void NodePath::set_audio_volume_off(int priority = 0);

2545 16 get_audio_volume 0 4 3502 26 NodePath::get_audio_volume 0 1 910 460
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_audio_volume
//       Access: Published
//  Description: Returns the complete audio volume that has been
//               applied to this node via a previous call to
//               set_audio_volume(), or 1. (identity) if no volume has
//               been applied to this particular node.
////////////////////////////////////////////////////////////////////
51
PN_stdfloat NodePath::get_audio_volume(void) const;

2546 20 get_net_audio_volume 0 4 3502 30 NodePath::get_net_audio_volume 0 1 911 342
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_net_audio_volume
//       Access: Published
//  Description: Returns the complete audio volume for this node
//               taking highers nodes in the graph into account.
////////////////////////////////////////////////////////////////////
55
PN_stdfloat NodePath::get_net_audio_volume(void) const;

2547 21 adjust_all_priorities 0 4 3502 31 NodePath::adjust_all_priorities 0 1 912 649
////////////////////////////////////////////////////////////////////
//     Function: NodePath::adjust_all_priorities
//       Access: Published
//  Description: Adds the indicated adjustment amount (which may be
//               negative) to the priority for all transitions on the
//               referenced node, and for all nodes in the subgraph
//               below.  This can be used to force these nodes not to
//               be overridden by a high-level state change above.  If
//               the priority would drop below zero, it is set to
//               zero.
////////////////////////////////////////////////////////////////////
60
inline void NodePath::adjust_all_priorities(int adjustment);

2548 4 show 0 4 3502 14 NodePath::show 0 2 913 914 1051
// Variants on show and hide

////////////////////////////////////////////////////////////////////
//     Function: NodePath::show
//       Access: Published
//  Description: Undoes the effect of a previous hide() on this node:
//               makes the referenced node (and the entire subgraph
//               below this node) visible to all cameras.
//
//               This will not reveal the node if a parent node has
//               been hidden.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::show
//       Access: Published
//  Description: Makes the referenced node visible just to the
//               cameras whose camera_mask shares the indicated bits.
//
//               This undoes the effect of a previous hide() call.  It
//               will not reveal the node if a parent node has been
//               hidden.  However, see show_through().
////////////////////////////////////////////////////////////////////
83
inline void NodePath::show(void);
inline void NodePath::show(DrawMask camera_mask);

2549 12 show_through 0 4 3502 22 NodePath::show_through 0 2 915 916 1220
////////////////////////////////////////////////////////////////////
//     Function: NodePath::show_through
//       Access: Published
//  Description: Makes the referenced node visible just to the
//               cameras whose camera_mask shares the indicated bits.
//
//               Unlike show(), this will reveal the node even if a
//               parent node has been hidden, thus "showing through" a
//               parent's hide().
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::show_through
//       Access: Published
//  Description: Makes the referenced node visible just to the
//               cameras whose camera_mask shares the indicated bits.
//
//               Unlike show(), this will reveal the node even if a
//               parent node has been hidden via the one-parameter
//               hide() method, thus "showing through" a parent's
//               hide().  (However, it will not show through a
//               parent's hide() call if the no-parameter form of
//               hide() was used.)
////////////////////////////////////////////////////////////////////
99
inline void NodePath::show_through(void);
inline void NodePath::show_through(DrawMask camera_mask);

2550 4 hide 0 4 3502 14 NodePath::hide 0 2 917 918 1139
////////////////////////////////////////////////////////////////////
//     Function: NodePath::hide
//       Access: Published
//  Description: Makes the referenced node (and the entire subgraph
//               below this node) invisible to all cameras.  It
//               remains part of the scene graph, its bounding volume
//               still contributes to its parent's bounding volume,
//               and it will still be involved in collision tests.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::hide
//       Access: Published
//  Description: Makes the referenced node invisible just to the
//               cameras whose camera_mask shares the indicated bits.
//
//               This will also hide any nodes below this node in the
//               scene graph, including those nodes for which show()
//               has been called, but it will not hide descendent
//               nodes for which show_through() has been called.
////////////////////////////////////////////////////////////////////
83
inline void NodePath::hide(void);
inline void NodePath::hide(DrawMask camera_mask);

2551 9 is_hidden 0 4 3502 19 NodePath::is_hidden 0 1 919 380
////////////////////////////////////////////////////////////////////
//     Function: NodePath::is_hidden
//       Access: Published
//  Description: Returns true if the referenced node is hidden from
//               the indicated camera(s) either directly, or because
//               some ancestor is hidden.
////////////////////////////////////////////////////////////////////
82
inline bool NodePath::is_hidden(DrawMask camera_mask = (get_overall_bit())) const;

2552 19 get_hidden_ancestor 0 4 3502 29 NodePath::get_hidden_ancestor 0 1 920 478
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_hidden_ancestor
//       Access: Published
//  Description: Returns the NodePath at or above the referenced node
//               that is hidden to the indicated camera(s), or an
//               empty NodePath if no ancestor of the referenced node
//               is hidden (and the node should be visible).
////////////////////////////////////////////////////////////////////
138
NodePath NodePath::get_hidden_ancestor(DrawMask camera_mask = (get_overall_bit()), Thread *current_thread = (get_current_thread())) const;

2553 5 stash 0 4 3502 15 NodePath::stash 0 1 921 819
////////////////////////////////////////////////////////////////////
//     Function: NodePath::stash
//       Access: Published
//  Description: Removes the referenced node (and the entire subgraph
//               below this node) from the scene graph in any normal
//               sense.  The node will no longer be visible and is not
//               tested for collisions; furthermore, no normal scene
//               graph traversal will visit the node.  The node's
//               bounding volume no longer contributes to its parent's
//               bounding volume.
//
//               A stashed node cannot be located by a normal find()
//               operation (although a special find string can still
//               retrieve it).
////////////////////////////////////////////////////////////////////
84
void NodePath::stash(int sort = 0, Thread *current_thread = (get_current_thread()));

2554 7 unstash 0 4 3502 17 NodePath::unstash 0 1 922 425
////////////////////////////////////////////////////////////////////
//     Function: NodePath::unstash
//       Access: Published
//  Description: Undoes the effect of a previous stash() on this
//               node: makes the referenced node (and the entire
//               subgraph below this node) once again part of the
//               scene graph.
////////////////////////////////////////////////////////////////////
86
void NodePath::unstash(int sort = 0, Thread *current_thread = (get_current_thread()));

2555 11 unstash_all 0 4 3502 21 NodePath::unstash_all 0 1 923 269
////////////////////////////////////////////////////////////////////
//     Function: NodePath::unstash_all
//       Access: Published
//  Description: Unstashes this node and all stashed child nodes.
////////////////////////////////////////////////////////////////////
76
void NodePath::unstash_all(Thread *current_thread = (get_current_thread()));

2556 10 is_stashed 0 4 3502 20 NodePath::is_stashed 0 1 924 337
////////////////////////////////////////////////////////////////////
//     Function: NodePath::is_stashed
//       Access: Published
//  Description: Returns true if the referenced node is stashed either
//               directly, or because some ancestor is stashed.
////////////////////////////////////////////////////////////////////
45
inline bool NodePath::is_stashed(void) const;

2557 20 get_stashed_ancestor 0 4 3502 30 NodePath::get_stashed_ancestor 0 1 925 454
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_stashed_ancestor
//       Access: Published
//  Description: Returns the NodePath at or above the referenced node
//               that is stashed, or an empty NodePath if no ancestor
//               of the referenced node is stashed (and the node should
//               be visible).
////////////////////////////////////////////////////////////////////
95
NodePath NodePath::get_stashed_ancestor(Thread *current_thread = (get_current_thread())) const;

2558 16 get_collide_mask 0 4 3502 26 NodePath::get_collide_mask 0 1 926 600
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_collide_mask
//       Access: Published
//  Description: Returns the union of all of the into_collide_masks
//               for nodes at this level and below.  This is the same
//               thing as node()->get_net_collide_mask().
//
//               If you want to return what the into_collide_mask of
//               this node itself is, without regard to its children,
//               use node()->get_into_collide_mask().
////////////////////////////////////////////////////////////////////
58
inline CollideMask NodePath::get_collide_mask(void) const;

2559 16 set_collide_mask 0 4 3502 26 NodePath::set_collide_mask 0 1 927 839
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_collide_mask
//       Access: Published
//  Description: Recursively applies the indicated CollideMask to the
//               into_collide_masks for all nodes at this level and
//               below.  If node_type is not TypeHandle::none(), then
//               only nodes matching (or inheriting from) the
//               indicated PandaNode subclass are modified.
//
//               The default is to change all bits, but if
//               bits_to_change is not all bits on, then only the bits
//               that are set in bits_to_change are modified, allowing
//               this call to change only a subset of the bits in the
//               subgraph.
////////////////////////////////////////////////////////////////////
135
inline void NodePath::set_collide_mask(CollideMask new_mask, CollideMask bits_to_change = (all_on()), TypeHandle node_type = (none()));

2560 11 operator == 0 4 3502 21 NodePath::operator == 0 1 928 21
// Comparison methods
63
inline bool NodePath::operator ==(NodePath const &other) const;

2561 11 operator != 0 4 3502 21 NodePath::operator != 0 1 929 0
63
inline bool NodePath::operator !=(NodePath const &other) const;

2562 10 operator < 0 4 3502 20 NodePath::operator < 0 1 930 0
62
inline bool NodePath::operator <(NodePath const &other) const;

2563 10 compare_to 0 4 3502 20 NodePath::compare_to 0 1 931 830
////////////////////////////////////////////////////////////////////
//     Function: NodePath::compare_to
//       Access: Published
//  Description: Returns a number less than zero if this NodePath
//               sorts before the other one, greater than zero if it
//               sorts after, or zero if they are equivalent.
//
//               Two NodePaths are considered equivalent if they
//               consist of exactly the same list of nodes in the same
//               order.  Otherwise, they are different; different
//               NodePaths will be ranked in a consistent but
//               undefined ordering; the ordering is useful only for
//               placing the NodePaths in a sorted container like an
//               STL set.
////////////////////////////////////////////////////////////////////
61
inline int NodePath::compare_to(NodePath const &other) const;

2564 15 verify_complete 0 4 3502 25 NodePath::verify_complete 0 1 932 353
// Miscellaneous

////////////////////////////////////////////////////////////////////
//     Function: NodePath::verify_complete
//       Access: Published
//  Description: Returns true if all of the nodes described in the
//               NodePath are connected, or false otherwise.
////////////////////////////////////////////////////////////////////
86
bool NodePath::verify_complete(Thread *current_thread = (get_current_thread())) const;

2565 14 premunge_scene 0 4 3502 24 NodePath::premunge_scene 0 1 933 749
////////////////////////////////////////////////////////////////////
//     Function: NodePath::premunge_scene
//       Access: Published
//  Description: Walks through the scene graph beginning at the bottom
//               node, and internally adjusts any GeomVertexFormats
//               for optimal rendering on the indicated GSG.  If this
//               step is not done prior to rendering, the formats will
//               be optimized at render time instead, for a small
//               cost.
//
//               It is not normally necessary to do this on a model
//               loaded directly from disk, since the loader will do
//               this by default.
////////////////////////////////////////////////////////////////////
66
void NodePath::premunge_scene(GraphicsStateGuardianBase *gsg = 0);

2566 13 prepare_scene 0 4 3502 23 NodePath::prepare_scene 0 1 934 823
////////////////////////////////////////////////////////////////////
//     Function: NodePath::prepare_scene
//       Access: Published
//  Description: Walks through the scene graph beginning at the bottom
//               node, and does whatever initialization is required to
//               render the scene properly with the indicated GSG.  It
//               is not strictly necessary to call this, since the GSG
//               will initialize itself when the scene is rendered,
//               but this may take some of the overhead away from that
//               process.
//
//               In particular, this will ensure that textures and
//               vertex buffers within the scene are loaded into
//               graphics memory.
////////////////////////////////////////////////////////////////////
61
void NodePath::prepare_scene(GraphicsStateGuardianBase *gsg);

2567 11 show_bounds 0 4 3502 21 NodePath::show_bounds 0 1 935 542
////////////////////////////////////////////////////////////////////
//     Function: NodePath::show_bounds
//       Access: Published
//  Description: Causes the bounding volume of the bottom node and all
//               of its descendants (that is, the bounding volume
//               associated with the the bottom arc) to be rendered,
//               if possible.  The rendering method is less than
//               optimal; this is intended primarily for debugging.
////////////////////////////////////////////////////////////////////
33
void NodePath::show_bounds(void);

2568 17 show_tight_bounds 0 4 3502 27 NodePath::show_tight_bounds 0 1 936 580
////////////////////////////////////////////////////////////////////
//     Function: NodePath::show_tight_bounds
//       Access: Published
//  Description: Similar to show_bounds(), this draws a bounding box
//               representing the "tight" bounds of this node and all
//               of its descendants.  The bounding box is recomputed
//               every frame by reexamining all of the vertices; this
//               is far from efficient, but this is intended for
//               debugging.
////////////////////////////////////////////////////////////////////
39
void NodePath::show_tight_bounds(void);

2569 11 hide_bounds 0 4 3502 21 NodePath::hide_bounds 0 1 937 306
////////////////////////////////////////////////////////////////////
//     Function: NodePath::hide_bounds
//       Access: Published
//  Description: Stops the rendering of the bounding volume begun with
//               show_bounds().
////////////////////////////////////////////////////////////////////
33
void NodePath::hide_bounds(void);

2570 10 get_bounds 0 4 3502 20 NodePath::get_bounds 0 1 938 468
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_bounds
//       Access: Published
//  Description: Returns a newly-allocated bounding volume containing
//               the bottom node and all of its descendants.  This is
//               the bounding volume on the bottom arc, converted to
//               the local coordinate space of the node.
////////////////////////////////////////////////////////////////////
104
PointerTo< BoundingVolume > NodePath::get_bounds(Thread *current_thread = (get_current_thread())) const;

2571 22 force_recompute_bounds 0 4 3502 32 NodePath::force_recompute_bounds 0 1 939 890
////////////////////////////////////////////////////////////////////
//     Function: NodePath::force_recompute_bounds
//       Access: Published
//  Description: Forces the recomputing of all the bounding volumes at
//               every node in the subgraph beginning at this node and
//               below.
//
//               This should not normally need to be called, since the
//               bounding volumes are supposed to be recomputed
//               automatically when necessary.  It may be useful when
//               debugging, to verify that the bounding volumes have
//               not become inadvertently stale; it may also be useful
//               to force animated characters to update their bounding
//               volumes (which does not presently happen
//               automatically).
////////////////////////////////////////////////////////////////////
44
void NodePath::force_recompute_bounds(void);

2572 12 write_bounds 0 4 3502 22 NodePath::write_bounds 0 1 940 385
////////////////////////////////////////////////////////////////////
//     Function: NodePath::write_bounds
//       Access: Published
//  Description: Writes a description of the bounding volume
//               containing the bottom node and all of its descendants
//               to the indicated output stream.
////////////////////////////////////////////////////////////////////
48
void NodePath::write_bounds(ostream &out) const;

2573 17 calc_tight_bounds 0 4 3502 27 NodePath::calc_tight_bounds 0 1 941 1132
////////////////////////////////////////////////////////////////////
//     Function: NodePath::calc_tight_bounds
//       Access: Published
//  Description: Calculates the minimum and maximum vertices of all
//               Geoms at this NodePath's bottom node and below.  This
//               is a tight bounding box; it will generally be tighter
//               than the bounding volume returned by get_bounds()
//               (but it is more expensive to compute).
//
//               The bounding box is computed relative to the parent
//               node's coordinate system by default.  You can
//               optionally specify a different NodePath to compute
//               the bounds relative to.  Note that the box is always
//               axis-aligned against the given NodePath's coordinate
//               system, so you might get a differently sized box
//               depending on which node you pass.
//
//               The return value is true if any points are within the
//               bounding volume, or false if none are.
////////////////////////////////////////////////////////////////////
164
bool NodePath::calc_tight_bounds(LPoint3 &min_point, LPoint3 &max_point, NodePath const &other = NodePath(), Thread *current_thread = (get_current_thread())) const;

2574 16 get_tight_bounds 0 4 3502 26 NodePath::get_tight_bounds 0 1 942 0
79
PyObject *NodePath::get_tight_bounds(NodePath const &other = NodePath()) const;

2575 13 flatten_light 0 4 3502 23 NodePath::flatten_light 0 1 943 1259
////////////////////////////////////////////////////////////////////
//     Function: NodePath::flatten_light
//       Access: Published
//  Description: Lightly flattens out the hierarchy below this node by
//               applying transforms, colors, and texture matrices
//               from the nodes onto the vertices, but does not remove
//               any nodes.
//
//               This can result in improved rendering performance
//               because there will be fewer transforms in the
//               resulting scene graph, but the number of nodes will
//               remain the same.
//
//               In particular, any NodePaths that reference nodes
//               within this hierarchy will not be damaged.  However,
//               since this operation will remove transforms from the
//               scene graph, it may be dangerous to apply to nodes
//               where you expect to dynamically modify the transform,
//               or where you expect the geometry to remain in a
//               particular local coordinate system.
//
//               The return value is always 0, since flatten_light
//               does not remove any nodes.
////////////////////////////////////////////////////////////////////
34
int NodePath::flatten_light(void);

2576 14 flatten_medium 0 4 3502 24 NodePath::flatten_medium 0 1 944 836
////////////////////////////////////////////////////////////////////
//     Function: NodePath::flatten_medium
//       Access: Published
//  Description: A more thorough flattening than flatten_light(), this
//               first applies all the transforms, colors, and texture
//               matrices from the nodes onto the vertices, and then
//               removes unneeded grouping nodes--nodes that have
//               exactly one child, for instance, but have no special
//               properties in themselves.
//
//               This results in improved performance over
//               flatten_light() because the number of nodes in the
//               scene graph is reduced.
//
//               The return value is the number of nodes removed.
////////////////////////////////////////////////////////////////////
35
int NodePath::flatten_medium(void);

2577 14 flatten_strong 0 4 3502 24 NodePath::flatten_strong 0 1 945 1005
////////////////////////////////////////////////////////////////////
//     Function: NodePath::flatten_strong
//       Access: Published
//  Description: The strongest possible flattening.  This first
//               applies all of the transforms to the vertices, as in
//               flatten_medium(), but then it will combine sibling
//               nodes together when possible, in addition to removing
//               unnecessary parent-child nodes.  This can result in
//               substantially fewer nodes, but any nicely-grouped
//               hierachical bounding volumes may be lost.
//
//               It is generally a good idea to apply this kind of
//               flattening only to nodes that will be culled largely
//               as a single unit, like a car.  Applying this to an
//               entire scene may result in overall poorer performance
//               because of less-effective culling.
////////////////////////////////////////////////////////////////////
35
int NodePath::flatten_strong(void);

2578 20 apply_texture_colors 0 4 3502 30 NodePath::apply_texture_colors 0 1 946 1105
////////////////////////////////////////////////////////////////////
//     Function: NodePath::apply_texture_colors
//       Access: Published
//  Description: Removes textures from Geoms at this node and below by
//               applying the texture colors to the vertices.  This is
//               primarily useful to simplify a low-LOD model.  The
//               texture colors are replaced by flat colors that
//               approximate the original textures.
//
//               Only the bottommost texture on each Geom is used (if
//               there is more than one), and it is applied as if it
//               were M_modulate, and WM_repeat, regardless of its
//               actual settings.  If the texture has a
//               simple_ram_image, this may be used if the main image
//               isn't resident.
//
//               After this call, there will be no texturing specified
//               at this level and below.  Of course, there might
//               still be texturing inherited from above.
////////////////////////////////////////////////////////////////////
42
void NodePath::apply_texture_colors(void);

2579 17 clear_model_nodes 0 4 3502 27 NodePath::clear_model_nodes 0 1 947 604
////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_model_nodes
//       Access: Published
//  Description: Recursively walks through the scene graph at this
//               level and below, looking for ModelNodes, and calls
//               model_node->set_preserve_transform(PT_drop_node) on
//               each one.  This allows a subsequent call to
//               flatten_strong() to eliminate all of the ModelNodes.
//
//               Returns the number of ModelNodes found.
////////////////////////////////////////////////////////////////////
45
inline int NodePath::clear_model_nodes(void);

2580 7 set_tag 0 4 3502 17 NodePath::set_tag 0 1 948 700
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_tag
//       Access: Published
//  Description: Associates a user-defined value with a user-defined
//               key which is stored on the node.  This value has no
//               meaning to Panda; but it is stored indefinitely on
//               the node until it is requested again.
//
//               Each unique key stores a different string value.
//               There is no effective limit on the number of
//               different keys that may be stored or on the length of
//               any one key's value.
////////////////////////////////////////////////////////////////////
70
inline void NodePath::set_tag(string const &key, string const &value);

2581 7 get_tag 0 4 3502 17 NodePath::get_tag 0 1 949 458
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_tag
//       Access: Published
//  Description: Retrieves the user-defined value that was previously
//               set on this node for the particular key, if any.  If
//               no value has been previously set, returns the empty
//               string.  See also get_net_tag().
////////////////////////////////////////////////////////////////////
57
inline string NodePath::get_tag(string const &key) const;

2582 12 get_tag_keys 0 4 3502 22 NodePath::get_tag_keys 0 2 950 951 505
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_tag_keys
//       Access: Published
//  Description: Fills the given vector up with the
//               list of tags on this PandaNode.
//
//               It is the user's responsibility to ensure that the
//               keys vector is empty before making this call;
//               otherwise, the new files will be appended to it.
////////////////////////////////////////////////////////////////////
115
inline void NodePath::get_tag_keys(vector_string &keys) const;
inline PyObject *NodePath::get_tag_keys(void) const;

2583 7 has_tag 0 4 3502 17 NodePath::has_tag 0 1 952 445
////////////////////////////////////////////////////////////////////
//     Function: NodePath::has_tag
//       Access: Published
//  Description: Returns true if a value has been defined on this node
//               for the particular key (even if that value is the
//               empty string), or false if no value has been set.
//               See also has_net_tag().
////////////////////////////////////////////////////////////////////
55
inline bool NodePath::has_tag(string const &key) const;

2584 9 clear_tag 0 4 3502 19 NodePath::clear_tag 0 1 953 397
////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_tag
//       Access: Published
//  Description: Removes the value defined for this key on this
//               particular node.  After a call to clear_tag(),
//               has_tag() will return false for the indicated key.
////////////////////////////////////////////////////////////////////
51
inline void NodePath::clear_tag(string const &key);

2585 11 get_net_tag 0 4 3502 21 NodePath::get_net_tag 0 1 954 519
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_net_tag
//       Access: Published
//  Description: Returns the tag value that has been defined on this
//               node, or the nearest ancestor node, for the indicated
//               key.  If no value has been defined for the indicated
//               key on any ancestor node, returns the empty string.
//               See also get_tag().
////////////////////////////////////////////////////////////////////
61
inline string NodePath::get_net_tag(string const &key) const;

2586 11 has_net_tag 0 4 3502 21 NodePath::has_net_tag 0 1 955 390
////////////////////////////////////////////////////////////////////
//     Function: NodePath::has_net_tag
//       Access: Published
//  Description: Returns true if the indicated tag value has been
//               defined on this node or on any ancestor node, or
//               false otherwise.  See also has_tag().
////////////////////////////////////////////////////////////////////
59
inline bool NodePath::has_net_tag(string const &key) const;

2587 12 find_net_tag 0 4 3502 22 NodePath::find_net_tag 0 1 956 471
////////////////////////////////////////////////////////////////////
//     Function: NodePath::find_net_tag
//       Access: Published
//  Description: Returns the lowest ancestor of this node that
//               contains a tag definition with the indicated key, if
//               any, or an empty NodePath if no ancestor of this node
//               contains this tag definition.  See set_tag().
////////////////////////////////////////////////////////////////////
57
NodePath NodePath::find_net_tag(string const &key) const;

2588 14 set_python_tag 0 4 3502 24 NodePath::set_python_tag 0 1 957 0
73
inline void NodePath::set_python_tag(string const &key, PyObject *value);

2589 14 get_python_tag 0 4 3502 24 NodePath::get_python_tag 0 1 958 0
67
inline PyObject *NodePath::get_python_tag(string const &key) const;

2590 19 get_python_tag_keys 0 4 3502 29 NodePath::get_python_tag_keys 0 2 959 960 0
129
inline void NodePath::get_python_tag_keys(vector_string &keys) const;
inline PyObject *NodePath::get_python_tag_keys(void) const;

2591 14 has_python_tag 0 4 3502 24 NodePath::has_python_tag 0 1 961 0
62
inline bool NodePath::has_python_tag(string const &key) const;

2592 16 clear_python_tag 0 4 3502 26 NodePath::clear_python_tag 0 1 962 0
58
inline void NodePath::clear_python_tag(string const &key);

2593 18 get_net_python_tag 0 4 3502 28 NodePath::get_net_python_tag 0 1 963 0
71
inline PyObject *NodePath::get_net_python_tag(string const &key) const;

2594 18 has_net_python_tag 0 4 3502 28 NodePath::has_net_python_tag 0 1 964 0
66
inline bool NodePath::has_net_python_tag(string const &key) const;

2595 19 find_net_python_tag 0 4 3502 29 NodePath::find_net_python_tag 0 1 965 0
64
NodePath NodePath::find_net_python_tag(string const &key) const;

2596 9 list_tags 0 4 3502 19 NodePath::list_tags 0 1 966 389
////////////////////////////////////////////////////////////////////
//     Function: NodePath::list_tags
//       Access: Published
//  Description: Lists the tags to the nout stream, one per line.  See
//               PandaNode::list_tags() for a variant that allows you
//               to specify the output stream.
////////////////////////////////////////////////////////////////////
44
inline void NodePath::list_tags(void) const;

2597 8 set_name 0 4 3502 18 NodePath::set_name 0 1 967 258
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_name
//       Access: Published
//  Description: Changes the name of the referenced node.
////////////////////////////////////////////////////////////////////
51
inline void NodePath::set_name(string const &name);

2598 8 get_name 0 4 3502 18 NodePath::get_name 0 1 968 258
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_name
//       Access: Published
//  Description: Returns the name of the referenced node.
////////////////////////////////////////////////////////////////////
45
inline string NodePath::get_name(void) const;

2599 14 write_bam_file 0 4 3502 24 NodePath::write_bam_file 0 1 969 504
////////////////////////////////////////////////////////////////////
//     Function: NodePath::write_bam_file
//       Access: Published
//  Description: Writes the contents of this node and below out to a
//               bam file with the indicated filename.  This file may
//               then be read in again, as is, at some later point.
//               Returns true if successful, false on some kind of
//               error.
////////////////////////////////////////////////////////////////////
62
bool NodePath::write_bam_file(Filename const &filename) const;

2600 16 write_bam_stream 0 4 3502 26 NodePath::write_bam_stream 0 1 970 314
////////////////////////////////////////////////////////////////////
//     Function: NodePath::write_bam_stream
//       Access: Published
//  Description: Writes the contents of this node and below out to the
//               indicated stream.
////////////////////////////////////////////////////////////////////
52
bool NodePath::write_bam_stream(ostream &out) const;

2601 20 encode_to_bam_stream 0 4 3502 30 NodePath::encode_to_bam_stream 0 2 971 972 2177
////////////////////////////////////////////////////////////////////
//     Function: NodePath::encode_to_bam_stream
//       Access: Published
//  Description: Converts the NodePath object into a single
//               stream of data using a BamWriter, and returns that
//               data as a string string.  Returns empty string on
//               failure.  This is similar to write_bam_stream().
//
//               This method is used by __reduce__ to handle streaming
//               of NodePaths to a pickle file.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::encode_to_bam_stream
//       Access: Published
//  Description: Converts the NodePath object into a single
//               stream of data using a BamWriter, and stores that
//               data in the indicated string.  Returns true on
//               success, false on failure.
//
//               If the BamWriter is NULL, this behaves the same way
//               as NodePath::write_bam_stream() and
//               PandaNode::encode_to_bam_stream(), in the sense that
//               it only writes this node and all nodes below it.
//
//               However, if the BamWriter is not NULL, it behaves
//               very differently.  In this case, it encodes the
//               *entire graph* of all nodes connected to the
//               NodePath, including all parent nodes and siblings.
//               This is necessary for correct streaming of related
//               NodePaths and restoration of instances, etc., but it
//               does mean you must detach() a node before writing it
//               if you want to limit the nodes that get written.
//
//               This method is used by __reduce__ to handle streaming
//               of NodePaths to a pickle file.  The BamWriter case is
//               used by the direct.stdpy.pickle module, while the
//               saner, non-BamWriter case is used when the standard
//               pickle module calls this function.
////////////////////////////////////////////////////////////////////
137
inline string NodePath::encode_to_bam_stream(void) const;
bool NodePath::encode_to_bam_stream(string &data, BamWriter *writer = 0) const;

2602 22 decode_from_bam_stream 0 4 3502 32 NodePath::decode_from_bam_stream 0 1 973 439
////////////////////////////////////////////////////////////////////
//     Function: NodePath::decode_from_bam_stream
//       Access: Published, Static
//  Description: Reads the string created by a previous call to
//               encode_to_bam_stream(), and extracts and
//               returns the NodePath on that string.  Returns NULL on
//               error.
////////////////////////////////////////////////////////////////////
92
static NodePath NodePath::decode_from_bam_stream(string const &data, BamReader *reader = 0);

2603 14 get_class_type 0 4 3502 24 NodePath::get_class_type 0 1 974 0
49
static TypeHandle NodePath::get_class_type(void);

2604 9 ~NodePath 0 4 3502 19 NodePath::~NodePath 0 0 0
26
NodePath::~NodePath(void);

2605 8 add_node 0 4 3504 28 AttribNodeRegistry::add_node 0 1 976 919
////////////////////////////////////////////////////////////////////
//     Function: AttribNodeRegistry::add_node
//       Access: Published
//  Description: Adds the indicated NodePath to the registry.  The
//               name and type of the node are noted at the time of
//               this call; if the name changes later, it will not
//               update the registry index.
//
//               The NodePath must reference some kind of an attribute
//               node, such as a LightNode or a PlaneNode.  When bam
//               files that reference an attribute node of the same
//               type and the same name are loaded, they will quietly
//               be redirected to reference this NodePath.
//
//               If there is already a node matching the indicated
//               name and type, it will be replaced.
////////////////////////////////////////////////////////////////////
63
void AttribNodeRegistry::add_node(NodePath const &attrib_node);

2606 11 remove_node 0 4 3504 31 AttribNodeRegistry::remove_node 0 2 977 978 901
////////////////////////////////////////////////////////////////////
//     Function: AttribNodeRegistry::remove_node
//       Access: Published
//  Description: Removes the indicated NodePath from the registry.
//               The name of the node must not have changed since the
//               matching call to add_node(), or it will not be
//               successfully removed.
//
//               Returns true if the NodePath is found and removed,
//               false if it is not found (for instance, because the
//               name has changed).
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: AttribNodeRegistry::remove_node
//       Access: Published
//  Description: Removes the nth node from the registry.
////////////////////////////////////////////////////////////////////
111
bool AttribNodeRegistry::remove_node(NodePath const &attrib_node);
void AttribNodeRegistry::remove_node(int n);

2607 11 lookup_node 0 4 3504 31 AttribNodeRegistry::lookup_node 0 1 979 480
////////////////////////////////////////////////////////////////////
//     Function: AttribNodeRegistry::lookup_node
//       Access: Published
//  Description: Looks up the indicated NodePath in the registry.  If
//               there is a node already in the registry with the
//               matching name and type, returns that NodePath
//               instead; otherwise, returns the original NodePath.
////////////////////////////////////////////////////////////////////
74
NodePath AttribNodeRegistry::lookup_node(NodePath const &orig_node) const;

2608 13 get_num_nodes 0 4 3504 33 AttribNodeRegistry::get_num_nodes 0 1 980 283
////////////////////////////////////////////////////////////////////
//     Function: AttribNodeRegistry::get_num_nodes
//       Access: Published
//  Description: Returns the total number of nodes in the registry.
////////////////////////////////////////////////////////////////////
50
int AttribNodeRegistry::get_num_nodes(void) const;

2609 8 get_node 0 4 3504 28 AttribNodeRegistry::get_node 0 1 981 278
////////////////////////////////////////////////////////////////////
//     Function: AttribNodeRegistry::get_node
//       Access: Published
//  Description: Returns the nth NodePath recorded in the registry.
////////////////////////////////////////////////////////////////////
51
NodePath AttribNodeRegistry::get_node(int n) const;

2610 13 get_node_type 0 4 3504 33 AttribNodeRegistry::get_node_type 0 1 982 312
////////////////////////////////////////////////////////////////////
//     Function: AttribNodeRegistry::get_node_type
//       Access: Published
//  Description: Returns the type of the nth node, as recorded in the
//               registry.
////////////////////////////////////////////////////////////////////
58
TypeHandle AttribNodeRegistry::get_node_type(int n) const;

2611 13 get_node_name 0 4 3504 33 AttribNodeRegistry::get_node_name 0 1 983 520
////////////////////////////////////////////////////////////////////
//     Function: AttribNodeRegistry::get_node_name
//       Access: Published
//  Description: Returns the name of the nth node, as recorded in the
//               registry.  This will be the node name as it was at
//               the time the node was recorded; if the node has
//               changed names since then, this will still return the
//               original name.
////////////////////////////////////////////////////////////////////
54
string AttribNodeRegistry::get_node_name(int n) const;

2612 9 find_node 0 4 3504 29 AttribNodeRegistry::find_node 0 2 984 985 920
////////////////////////////////////////////////////////////////////
//     Function: AttribNodeRegistry::find_node
//       Access: Published
//  Description: Returns the index number of the indicated NodePath in
//               the registry (assuming its name hasn't changed since
//               it was recorded in the registry), or -1 if the
//               NodePath cannot be found (for instance, because its
//               name has changed).
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: AttribNodeRegistry::find_node
//       Access: Published
//  Description: Returns the index number of the node with the
//               indicated type and name in the registry, or -1 if
//               there is no such node in the registry.
////////////////////////////////////////////////////////////////////
147
int AttribNodeRegistry::find_node(NodePath const &attrib_node) const;
int AttribNodeRegistry::find_node(TypeHandle type, string const &name) const;

2613 5 clear 0 4 3504 25 AttribNodeRegistry::clear 0 1 986 261
////////////////////////////////////////////////////////////////////
//     Function: AttribNodeRegistry::clear
//       Access: Published
//  Description: Removes all nodes from the registry.
////////////////////////////////////////////////////////////////////
37
void AttribNodeRegistry::clear(void);

2614 6 output 0 4 3504 26 AttribNodeRegistry::output 0 1 987 226
////////////////////////////////////////////////////////////////////
//     Function: AttribNodeRegistry::output
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
52
void AttribNodeRegistry::output(ostream &out) const;

2615 5 write 0 4 3504 25 AttribNodeRegistry::write 0 1 988 225
////////////////////////////////////////////////////////////////////
//     Function: AttribNodeRegistry::write
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
51
void AttribNodeRegistry::write(ostream &out) const;

2616 14 get_global_ptr 0 4 3504 34 AttribNodeRegistry::get_global_ptr 0 1 989 242
////////////////////////////////////////////////////////////////////
//     Function: AttribNodeRegistry::get_global_ptr
//       Access: Published, Static
//  Description: 
////////////////////////////////////////////////////////////////////
75
static inline AttribNodeRegistry *AttribNodeRegistry::get_global_ptr(void);

2617 19 ~AttribNodeRegistry 0 4 3504 39 AttribNodeRegistry::~AttribNodeRegistry 0 0 0
46
AttribNodeRegistry::~AttribNodeRegistry(void);

2618 13 make_identity 0 4 3505 32 AudioVolumeAttrib::make_identity 0 1 990 283
////////////////////////////////////////////////////////////////////
//     Function: AudioVolumeAttrib::make_identity
//       Access: Published, Static
//  Description: Constructs an identity audio volume attrib.
////////////////////////////////////////////////////////////////////
77
static ConstPointerTo< RenderAttrib > AudioVolumeAttrib::make_identity(void);

2619 4 make 0 4 3505 23 AudioVolumeAttrib::make 0 1 991 359
////////////////////////////////////////////////////////////////////
//     Function: AudioVolumeAttrib::make
//       Access: Published, Static
//  Description: Constructs a new AudioVolumeAttrib object that indicates
//               audio volume should be scaled by the indicated factor.
////////////////////////////////////////////////////////////////////
82
static ConstPointerTo< RenderAttrib > AudioVolumeAttrib::make(PN_stdfloat volume);

2620 8 make_off 0 4 3505 27 AudioVolumeAttrib::make_off 0 1 992 482
////////////////////////////////////////////////////////////////////
//     Function: AudioVolumeAttrib::make_off
//       Access: Published, Static
//  Description: Constructs a new AudioVolumeAttrib object that ignores
//               any AudioVolumeAttrib inherited from above.  You may
//               also specify an additional volume scale to apply to
//               geometry below (using set_volume()).
////////////////////////////////////////////////////////////////////
72
static ConstPointerTo< RenderAttrib > AudioVolumeAttrib::make_off(void);

2621 12 make_default 0 4 3505 31 AudioVolumeAttrib::make_default 0 1 993 404
////////////////////////////////////////////////////////////////////
//     Function: AudioVolumeAttrib::make_default
//       Access: Published, Static
//  Description: Returns a RenderAttrib that corresponds to whatever
//               the standard default properties for render attributes
//               of this type ought to be.
////////////////////////////////////////////////////////////////////
76
static ConstPointerTo< RenderAttrib > AudioVolumeAttrib::make_default(void);

2622 6 is_off 0 4 3505 25 AudioVolumeAttrib::is_off 0 1 994 529
////////////////////////////////////////////////////////////////////
//     Function: AudioVolumeAttrib::is_off
//       Access: Published
//  Description: Returns true if the AudioVolumeAttrib will ignore any
//               color scales inherited from above, false otherwise.
//               This is not the same thing as !has_scale(); a
//               AudioVolumeAttrib may have the "off" flag set and also
//               have another scale specified.
////////////////////////////////////////////////////////////////////
50
inline bool AudioVolumeAttrib::is_off(void) const;

2623 10 has_volume 0 4 3505 29 AudioVolumeAttrib::has_volume 0 1 995 408
////////////////////////////////////////////////////////////////////
//     Function: AudioVolumeAttrib::has_volume
//       Access: Published
//  Description: Returns true if the AudioVolumeAttrib has a
//               non-identity volume, false otherwise (in which case it
//               might be an off attrib or an identity attrib).
////////////////////////////////////////////////////////////////////
54
inline bool AudioVolumeAttrib::has_volume(void) const;

2624 10 get_volume 0 4 3505 29 AudioVolumeAttrib::get_volume 0 1 996 272
////////////////////////////////////////////////////////////////////
//     Function: AudioVolumeAttrib::get_volume
//       Access: Published
//  Description: Returns the volume to be applied to sounds.
////////////////////////////////////////////////////////////////////
61
inline PN_stdfloat AudioVolumeAttrib::get_volume(void) const;

2625 10 set_volume 0 4 3505 29 AudioVolumeAttrib::set_volume 0 1 997 350
////////////////////////////////////////////////////////////////////
//     Function: AudioVolumeAttrib::set_volume
//       Access: Published
//  Description: Returns a new AudioVolumeAttrib, just like this one, but
//               with the volume changed to the indicated value.
////////////////////////////////////////////////////////////////////
87
ConstPointerTo< RenderAttrib > AudioVolumeAttrib::set_volume(PN_stdfloat volume) const;

2626 14 get_class_slot 0 4 3505 33 AudioVolumeAttrib::get_class_slot 0 1 998 0
51
static int AudioVolumeAttrib::get_class_slot(void);

2627 14 get_class_type 0 4 3505 33 AudioVolumeAttrib::get_class_type 0 1 999 0
58
static TypeHandle AudioVolumeAttrib::get_class_type(void);

2628 18 ~AudioVolumeAttrib 0 4 3505 37 AudioVolumeAttrib::~AudioVolumeAttrib 0 0 0
44
AudioVolumeAttrib::~AudioVolumeAttrib(void);

2629 4 make 0 4 3506 23 AuxBitplaneAttrib::make 0 2 1000 1001 558
////////////////////////////////////////////////////////////////////
//     Function: AuxBitplaneAttrib::make
//       Access: Published, Static
//  Description: Constructs a default AuxBitplaneAttrib object.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: AuxBitplaneAttrib::make
//       Access: Published, Static
//  Description: Constructs a specified AuxBitplaneAttrib object.
////////////////////////////////////////////////////////////////////
144
static ConstPointerTo< RenderAttrib > AuxBitplaneAttrib::make(void);
static ConstPointerTo< RenderAttrib > AuxBitplaneAttrib::make(int outputs);

2630 12 make_default 0 4 3506 31 AuxBitplaneAttrib::make_default 0 1 1002 404
////////////////////////////////////////////////////////////////////
//     Function: AuxBitplaneAttrib::make_default
//       Access: Published, Static
//  Description: Returns a RenderAttrib that corresponds to whatever
//               the standard default properties for render attributes
//               of this type ought to be.
////////////////////////////////////////////////////////////////////
76
static ConstPointerTo< RenderAttrib > AuxBitplaneAttrib::make_default(void);

2631 11 get_outputs 0 4 3506 30 AuxBitplaneAttrib::get_outputs 0 1 1003 272
////////////////////////////////////////////////////////////////////
//     Function: AuxBitplaneAttrib::get_outputs
//       Access: Published
//  Description: Returns the AuxBitplaneAttrib output bits.
////////////////////////////////////////////////////////////////////
54
inline int AuxBitplaneAttrib::get_outputs(void) const;

2632 14 get_class_slot 0 4 3506 33 AuxBitplaneAttrib::get_class_slot 0 1 1004 0
51
static int AuxBitplaneAttrib::get_class_slot(void);

2633 14 get_class_type 0 4 3506 33 AuxBitplaneAttrib::get_class_type 0 1 1005 0
58
static TypeHandle AuxBitplaneAttrib::get_class_type(void);

2634 18 ~AuxBitplaneAttrib 0 4 3506 37 AuxBitplaneAttrib::~AuxBitplaneAttrib 0 0 0
44
AuxBitplaneAttrib::~AuxBitplaneAttrib(void);

2635 12 set_duration 0 4 3508 26 AuxSceneData::set_duration 0 1 1006 402
////////////////////////////////////////////////////////////////////
//     Function: AuxSceneData::set_duration
//       Access: Public
//  Description: Specifies the minimum length in time, in seconds, to
//               keep this AuxSceneData object around in the scene
//               graph after the last time it was rendered.
////////////////////////////////////////////////////////////////////
56
inline void AuxSceneData::set_duration(double duration);

2636 12 get_duration 0 4 3508 26 AuxSceneData::get_duration 0 1 1007 400
////////////////////////////////////////////////////////////////////
//     Function: AuxSceneData::get_duration
//       Access: Public
//  Description: Returns the minimum length in time, in seconds, to
//               keep this AuxSceneData object around in the scene
//               graph after the last time it was rendered.
////////////////////////////////////////////////////////////////////
53
inline double AuxSceneData::get_duration(void) const;

2637 20 set_last_render_time 0 4 3508 34 AuxSceneData::set_last_render_time 0 1 1008 345
////////////////////////////////////////////////////////////////////
//     Function: AuxSceneData::set_last_render_time
//       Access: Public
//  Description: Should be called with the current frame_time each
//               time the AuxSceneData is used during traversal.
////////////////////////////////////////////////////////////////////
67
inline void AuxSceneData::set_last_render_time(double render_time);

2638 20 get_last_render_time 0 4 3508 34 AuxSceneData::get_last_render_time 0 1 1009 346
////////////////////////////////////////////////////////////////////
//     Function: AuxSceneData::get_last_render_time
//       Access: Public
//  Description: Returns the last time this object was used during
//               traversal (according to set_last_render_time()).
////////////////////////////////////////////////////////////////////
61
inline double AuxSceneData::get_last_render_time(void) const;

2639 19 get_expiration_time 0 4 3508 33 AuxSceneData::get_expiration_time 0 1 1010 379
////////////////////////////////////////////////////////////////////
//     Function: AuxSceneData::get_expiration_time
//       Access: Public
//  Description: Returns the frame_time at which this AuxSceneData
//               object is currently scheduled to be removed from the
//               scene graph.
////////////////////////////////////////////////////////////////////
60
inline double AuxSceneData::get_expiration_time(void) const;

2640 6 output 0 6 3508 20 AuxSceneData::output 0 1 1011 229
////////////////////////////////////////////////////////////////////
//     Function: AuxSceneData::output
//       Access: Published, Virtual
//  Description: 
////////////////////////////////////////////////////////////////////
54
virtual void AuxSceneData::output(ostream &out) const;

2641 5 write 0 6 3508 19 AuxSceneData::write 0 1 1012 228
////////////////////////////////////////////////////////////////////
//     Function: AuxSceneData::write
//       Access: Published, Virtual
//  Description: 
////////////////////////////////////////////////////////////////////
75
virtual void AuxSceneData::write(ostream &out, int indent_level = 0) const;

2642 14 get_class_type 0 4 3508 28 AuxSceneData::get_class_type 0 1 1013 0
53
static TypeHandle AuxSceneData::get_class_type(void);

2643 13 ~AuxSceneData 0 4 3508 27 AuxSceneData::~AuxSceneData 0 0 0
34
AuxSceneData::~AuxSceneData(void);

2644 7 BamFile 0 4 3510 16 BamFile::BamFile 0 1 1014 216
////////////////////////////////////////////////////////////////////
//     Function: BamFile::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
23
BamFile::BamFile(void);

2645 8 ~BamFile 0 4 3510 17 BamFile::~BamFile 0 0 215
////////////////////////////////////////////////////////////////////
//     Function: BamFile::Destructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
24
BamFile::~BamFile(void);

2646 9 open_read 0 4 3510 18 BamFile::open_read 0 2 1015 1016 725
////////////////////////////////////////////////////////////////////
//     Function: BamFile::open_read
//       Access: Public
//  Description: Attempts to open the indicated filename for reading.
//               Returns true if successful, false on error.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: BamFile::open_read
//       Access: Public
//  Description: Attempts to open the indicated stream for reading.
//               The filename is just for information purposes only.
//               Returns true if successful, false on error.
////////////////////////////////////////////////////////////////////
179
bool BamFile::open_read(Filename const &bam_filename, bool report_errors = 1);
bool BamFile::open_read(istream &in, string const &bam_filename = "stream", bool report_errors = 1);

2647 11 read_object 0 4 3510 20 BamFile::read_object 0 1 1017 592
////////////////////////////////////////////////////////////////////
//     Function: BamFile::read_object
//       Access: Public
//  Description: Reads and returns the next object from the Bam file,
//               or NULL if the end of the file has been reached, or
//               if there is an error condition.  Use is_eof() to
//               differentiate these two cases.
//
//               The pointers returned by this method will not be
//               valid for use until resolve() is subsequently called.
////////////////////////////////////////////////////////////////////
42
TypedWritable *BamFile::read_object(void);

2648 6 is_eof 0 4 3510 15 BamFile::is_eof 0 1 1018 370
////////////////////////////////////////////////////////////////////
//     Function: BamFile::is_eof
//       Access: Public
//  Description: Returns true if the reader has reached end-of-file,
//               false otherwise.  This call is only valid after a
//               call to read_object().
////////////////////////////////////////////////////////////////////
33
bool BamFile::is_eof(void) const;

2649 7 resolve 0 4 3510 16 BamFile::resolve 0 1 1019 650
////////////////////////////////////////////////////////////////////
//     Function: BamFile::resolve
//       Access: Public
//  Description: This must be called after one or more objects have
//               been read via calls to read_object() in order to
//               resolve all internal pointer references in the
//               objects read and make all the pointers valid.  It
//               returns true if all objects are successfully
//               resolved, or false if some have not been (in which
//               case you must call resolve() again later).
////////////////////////////////////////////////////////////////////
28
bool BamFile::resolve(void);

2650 9 read_node 0 4 3510 18 BamFile::read_node 0 1 1020 1170
////////////////////////////////////////////////////////////////////
//     Function: BamFile::read_node
//       Access: Public
//  Description: Although the bam file format is general enough to
//               store a list of objects of arbitrary type, bam files
//               on disk usually contain just one object, a PandaNode
//               that is the root of a scene graph.  (Bam files that
//               store other kinds of things are usually given the
//               extension "boo", for "binary other objects", to
//               differentiate them from the normal scene graph type
//               file.)
//
//               This is a convenience method for when you believe you
//               are reading a scene graph bam file.  It reads the one
//               PandaNode and returns it.  It also calls resolve() to
//               fully resolve the object, since we expect this will
//               be the only object in the file.
//
//               If the bam file contains something other than a
//               PandaNode, an error is printed and NULL is returned.
////////////////////////////////////////////////////////////////////
66
PointerTo< PandaNode > BamFile::read_node(bool report_errors = 1);

2651 10 open_write 0 4 3510 19 BamFile::open_write 0 2 1021 1022 838
////////////////////////////////////////////////////////////////////
//     Function: BamFile::open_write
//       Access: Public
//  Description: Attempts to open the indicated file for writing.  If
//               another file by the same name already exists, it will
//               be silently removed.  Returns true if successful,
//               false otherwise.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: BamFile::open_write
//       Access: Public
//  Description: Attempts to open the indicated stream for writing.
//               The filename is just for information purposes only.
//               Returns true if successful, false on error.
////////////////////////////////////////////////////////////////////
182
bool BamFile::open_write(Filename const &bam_filename, bool report_errors = 1);
bool BamFile::open_write(ostream &out, string const &bam_filename = "stream", bool report_errors = 1);

2652 12 write_object 0 4 3510 21 BamFile::write_object 0 1 1023 324
////////////////////////////////////////////////////////////////////
//     Function: BamFile::write_object
//       Access: Public
//  Description: Writes the indicated object to the Bam file.  Returns
//               true if successful, false on error.
////////////////////////////////////////////////////////////////////
56
bool BamFile::write_object(TypedWritable const *object);

2653 5 close 0 4 3510 14 BamFile::close 0 1 1024 245
////////////////////////////////////////////////////////////////////
//     Function: BamFile::close
//       Access: Public
//  Description: Closes the input or output stream.
////////////////////////////////////////////////////////////////////
26
void BamFile::close(void);

2654 13 is_valid_read 0 4 3510 22 BamFile::is_valid_read 0 1 1025 363
////////////////////////////////////////////////////////////////////
//     Function: BamFile::is_valid_read
//       Access: Public
//  Description: Returns true if the Bam file is open and ready for
//               reading with no errors so far detected, or false
//               otherwise.
////////////////////////////////////////////////////////////////////
47
inline bool BamFile::is_valid_read(void) const;

2655 14 is_valid_write 0 4 3510 23 BamFile::is_valid_write 0 1 1026 364
////////////////////////////////////////////////////////////////////
//     Function: BamFile::is_valid_write
//       Access: Public
//  Description: Returns true if the Bam file is open and ready for
//               writing with no errors so far detected, or false
//               otherwise.
////////////////////////////////////////////////////////////////////
48
inline bool BamFile::is_valid_write(void) const;

2656 18 get_file_major_ver 0 4 3510 27 BamFile::get_file_major_ver 0 1 1027 426
////////////////////////////////////////////////////////////////////
//     Function: BamFile::get_file_major_ver
//       Access: Public
//  Description: Returns the major version number of the file
//               currently being read, or the system current major
//               version number if no file is currently open for
//               reading.
////////////////////////////////////////////////////////////////////
38
int BamFile::get_file_major_ver(void);

2657 18 get_file_minor_ver 0 4 3510 27 BamFile::get_file_minor_ver 0 1 1028 426
////////////////////////////////////////////////////////////////////
//     Function: BamFile::get_file_minor_ver
//       Access: Public
//  Description: Returns the minor version number of the file
//               currently being read, or the system current minor
//               version number if no file is currently open for
//               reading.
////////////////////////////////////////////////////////////////////
38
int BamFile::get_file_minor_ver(void);

2658 15 get_file_endian 0 4 3510 24 BamFile::get_file_endian 0 1 1029 326
////////////////////////////////////////////////////////////////////
//     Function: BamFile::get_file_endian
//       Access: Public
//  Description: Returns the endian preference indicated by the Bam
//               file currently being read or written.
////////////////////////////////////////////////////////////////////
57
BamEnums::BamEndian BamFile::get_file_endian(void) const;

2659 24 get_file_stdfloat_double 0 4 3510 33 BamFile::get_file_stdfloat_double 0 1 1030 372
////////////////////////////////////////////////////////////////////
//     Function: BamFile::get_file_stdfloat_double
//       Access: Public
//  Description: Returns true if the file stores all "standard"
//               floats as 64-bit doubles, or false if they are 32-bit
//               floats.
////////////////////////////////////////////////////////////////////
51
bool BamFile::get_file_stdfloat_double(void) const;

2660 21 get_current_major_ver 0 4 3510 30 BamFile::get_current_major_ver 0 1 1031 386
////////////////////////////////////////////////////////////////////
//     Function: BamFile::get_current_major_ver
//       Access: Public
//  Description: Returns the system current major version number.
//               This is the version number that will be assigned to
//               any generated Bam files.
////////////////////////////////////////////////////////////////////
41
int BamFile::get_current_major_ver(void);

2661 21 get_current_minor_ver 0 4 3510 30 BamFile::get_current_minor_ver 0 1 1032 386
////////////////////////////////////////////////////////////////////
//     Function: BamFile::get_current_minor_ver
//       Access: Public
//  Description: Returns the system current minor version number.
//               This is the version number that will be assigned to
//               any generated Bam files.
////////////////////////////////////////////////////////////////////
41
int BamFile::get_current_minor_ver(void);

2662 10 get_reader 0 4 3510 19 BamFile::get_reader 0 1 1033 370
////////////////////////////////////////////////////////////////////
//     Function: BamFile::get_reader
//       Access: Public
//  Description: Returns the BamReader in charge of performing the
//               read operations.  This will return NULL unless
//               open_read() was called.
////////////////////////////////////////////////////////////////////
37
BamReader *BamFile::get_reader(void);

2663 10 get_writer 0 4 3510 19 BamFile::get_writer 0 1 1034 372
////////////////////////////////////////////////////////////////////
//     Function: BamFile::get_writer
//       Access: Public
//  Description: Returns the BamWriter in charge of performing the
//               write operations.  This will return NULL unless
//               open_write() was called.
////////////////////////////////////////////////////////////////////
37
BamWriter *BamFile::get_writer(void);

2664 4 make 0 4 3512 21 BillboardEffect::make 0 1 1035 316
////////////////////////////////////////////////////////////////////
//     Function: BillboardEffect::make
//       Access: Published, Static
//  Description: Constructs a new BillboardEffect object with the
//               indicated properties.
////////////////////////////////////////////////////////////////////
200
static ConstPointerTo< RenderEffect > BillboardEffect::make(LVector3 const &up_vector, bool eye_relative, bool axial_rotate, PN_stdfloat offset, NodePath const &look_at, LPoint3 const &look_at_point);

2665 9 make_axis 0 4 3512 26 BillboardEffect::make_axis 0 1 1036 316
////////////////////////////////////////////////////////////////////
//     Function: BillboardEffect::make_axis
//       Access: Published, Static
//  Description: A convenience function to make a typical
//               axis-rotating billboard.
////////////////////////////////////////////////////////////////////
78
static inline ConstPointerTo< RenderEffect > BillboardEffect::make_axis(void);

2666 14 make_point_eye 0 4 3512 31 BillboardEffect::make_point_eye 0 1 1037 335
////////////////////////////////////////////////////////////////////
//     Function: BillboardEffect::make_point_eye
//       Access: Published, Static
//  Description: A convenience function to make a typical
//               eye-relative point-rotating billboard.
////////////////////////////////////////////////////////////////////
83
static inline ConstPointerTo< RenderEffect > BillboardEffect::make_point_eye(void);

2667 16 make_point_world 0 4 3512 33 BillboardEffect::make_point_world 0 1 1038 339
////////////////////////////////////////////////////////////////////
//     Function: BillboardEffect::make_point_world
//       Access: Published, Static
//  Description: A convenience function to make a typical
//               world-relative point-rotating billboard.
////////////////////////////////////////////////////////////////////
85
static inline ConstPointerTo< RenderEffect > BillboardEffect::make_point_world(void);

2668 6 is_off 0 4 3512 23 BillboardEffect::is_off 0 1 1039 625
////////////////////////////////////////////////////////////////////
//     Function: BillboardEffect::is_off
//       Access: Published
//  Description: Returns true if the BillboardEffect is an 'off'
//               BillboardEffect, indicating that it does not enable
//               billboarding.  This kind of BillboardEffect isn't
//               particularly useful and isn't normally created or
//               stored in the graph; it might be implicitly
//               discovered as the result of a
//               NodePath::get_rel_state().
////////////////////////////////////////////////////////////////////
48
inline bool BillboardEffect::is_off(void) const;

2669 13 get_up_vector 0 4 3512 30 BillboardEffect::get_up_vector 0 1 1040 281
////////////////////////////////////////////////////////////////////
//     Function: BillboardEffect::get_up_vector
//       Access: Published
//  Description: Returns the up vector in effect for this billboard.
////////////////////////////////////////////////////////////////////
66
inline LVector3 const &BillboardEffect::get_up_vector(void) const;

2670 16 get_eye_relative 0 4 3512 33 BillboardEffect::get_eye_relative 0 1 1041 387
////////////////////////////////////////////////////////////////////
//     Function: BillboardEffect::get_eye_relative
//       Access: Published
//  Description: Returns true if this billboard interprets the up
//               vector relative to the camera, or false if it is
//               relative to the world.
////////////////////////////////////////////////////////////////////
58
inline bool BillboardEffect::get_eye_relative(void) const;

2671 16 get_axial_rotate 0 4 3512 33 BillboardEffect::get_axial_rotate 0 1 1042 395
////////////////////////////////////////////////////////////////////
//     Function: BillboardEffect::get_axial_rotate
//       Access: Published
//  Description: Returns true if this billboard rotates only around
//               the axis of the up vector, or false if it rotates
//               freely in three dimensions.
////////////////////////////////////////////////////////////////////
58
inline bool BillboardEffect::get_axial_rotate(void) const;

2672 10 get_offset 0 4 3512 27 BillboardEffect::get_offset 0 1 1043 465
////////////////////////////////////////////////////////////////////
//     Function: BillboardEffect::get_offset
//       Access: Published
//  Description: Returns the distance toward the camera (or the
//               look_at_point) the billboard is moved towards, after
//               rotating.  This can be used to ensure the billboard
//               is not obscured by nearby geometry.
////////////////////////////////////////////////////////////////////
59
inline PN_stdfloat BillboardEffect::get_offset(void) const;

2673 11 get_look_at 0 4 3512 28 BillboardEffect::get_look_at 0 1 1044 450
////////////////////////////////////////////////////////////////////
//     Function: BillboardEffect::get_look_at
//       Access: Published
//  Description: Returns the node this billboard will rotate to look
//               towards.  If this is empty, it means the billboard
//               will rotate towards the current camera node, wherever
//               that might be.
////////////////////////////////////////////////////////////////////
64
inline NodePath const &BillboardEffect::get_look_at(void) const;

2674 17 get_look_at_point 0 4 3512 34 BillboardEffect::get_look_at_point 0 1 1045 386
////////////////////////////////////////////////////////////////////
//     Function: BillboardEffect::get_look_at_point
//       Access: Published
//  Description: Returns the point, relative to the look_at node,
//               towards which the billboard will rotate.  Normally
//               this is (0, 0, 0).
////////////////////////////////////////////////////////////////////
69
inline LPoint3 const &BillboardEffect::get_look_at_point(void) const;

2675 14 get_class_type 0 4 3512 31 BillboardEffect::get_class_type 0 1 1046 0
56
static TypeHandle BillboardEffect::get_class_type(void);

2676 16 ~BillboardEffect 0 4 3512 33 BillboardEffect::~BillboardEffect 0 0 0
40
BillboardEffect::~BillboardEffect(void);

2677 8 LensNode 0 4 3513 18 LensNode::LensNode 0 1 1047 447
////////////////////////////////////////////////////////////////////
//     Function: LensNode::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LensNode::Copy Constructor
//       Access: Protected
//  Description:
////////////////////////////////////////////////////////////////////
55
LensNode::LensNode(string const &name, Lens *lens = 0);

2678 9 copy_lens 0 4 3513 19 LensNode::copy_lens 0 2 1048 1049 675
////////////////////////////////////////////////////////////////////
//     Function: LensNode::copy_lens
//       Access: Published
//  Description: Sets up the LensNode using a copy of the
//               indicated Lens.  If the original Lens is
//               changed or destroyed, this LensNode is not
//               affected.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LensNode::copy_lens
//       Access: Published
//  Description: Copies the indicated lens into the specified slot.
////////////////////////////////////////////////////////////////////
112
inline void LensNode::copy_lens(Lens const &lens);
inline void LensNode::copy_lens(int index, Lens const &lens);

2679 8 set_lens 0 4 3513 18 LensNode::set_lens 0 2 1050 1051 990
////////////////////////////////////////////////////////////////////
//     Function: LensNode::set_lens
//       Access: Published
//  Description: Sets up the LensNode using this particular Lens
//               pointer.  If the lens is subsequently modified, the
//               LensNode properties immediately reflect the change.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LensNode::set_lens
//       Access: Published
//  Description: Sets the indicated lens.  Although a LensNode
//               normally holds only one lens, it may optionally
//               include multiple lenses, each with a different index
//               number.  The different lenses may be referenced by
//               index number on the DisplayRegion.  Adding a new lens
//               automatically makes it active.
////////////////////////////////////////////////////////////////////
91
inline void LensNode::set_lens(Lens *lens);
void LensNode::set_lens(int index, Lens *lens);

2680 8 get_lens 0 4 3513 18 LensNode::get_lens 0 1 1052 443
////////////////////////////////////////////////////////////////////
//     Function: LensNode::get_lens
//       Access: Published
//  Description: Returns a pointer to the particular Lens
//               associated with this LensNode, or NULL if there is
//               not yet a Lens associated.  If an index number is
//               specified, returns the nth lens.
////////////////////////////////////////////////////////////////////
53
inline Lens *LensNode::get_lens(int index = 0) const;

2681 15 set_lens_active 0 4 3513 25 LensNode::set_lens_active 0 1 1053 536
////////////////////////////////////////////////////////////////////
//     Function: LensNode::set_lens_active
//       Access: Published
//  Description: Sets the active flag for the nth lens.  When a lens
//               is inactive, it is not used for rendering, and any
//               DisplayRegions associated with it are implicitly
//               inactive as well.  Returns true if the flag is
//               changed, false if it already had this value.
////////////////////////////////////////////////////////////////////
55
bool LensNode::set_lens_active(int index, bool active);

2682 15 get_lens_active 0 4 3513 25 LensNode::get_lens_active 0 1 1054 266
////////////////////////////////////////////////////////////////////
//     Function: LensNode::get_lens_active
//       Access: Published
//  Description: Returns the active flag for the nth lens.
////////////////////////////////////////////////////////////////////
55
inline bool LensNode::get_lens_active(int index) const;

2683 13 activate_lens 0 4 3513 23 LensNode::activate_lens 0 1 1055 294
////////////////////////////////////////////////////////////////////
//     Function: LensNode::activate_lens
//       Access: Published
//  Description: An alternate way to call set_lens_active(index,
//               true).
////////////////////////////////////////////////////////////////////
47
inline bool LensNode::activate_lens(int index);

2684 15 deactivate_lens 0 4 3513 25 LensNode::deactivate_lens 0 1 1056 297
////////////////////////////////////////////////////////////////////
//     Function: LensNode::deactivate_lens
//       Access: Published
//  Description: An alternate way to call set_lens_active(index,
//               false).
////////////////////////////////////////////////////////////////////
49
inline bool LensNode::deactivate_lens(int index);

2685 10 is_in_view 0 4 3513 20 LensNode::is_in_view 0 2 1057 1058 750
////////////////////////////////////////////////////////////////////
//     Function: LensNode::is_in_view
//       Access: Published
//  Description: Returns true if the given point is within the bounds
//               of the lens of the LensNode (i.e. if the camera can
//               see the point).
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LensNode::is_in_view
//       Access: Published
//  Description: Returns true if the given point is within the bounds
//               of the lens of the LensNode (i.e. if the camera can
//               see the point).
////////////////////////////////////////////////////////////////////
111
inline bool LensNode::is_in_view(LPoint3 const &pos);
bool LensNode::is_in_view(int index, LPoint3 const &pos);

2686 12 show_frustum 0 4 3513 22 LensNode::show_frustum 0 1 1059 391
////////////////////////////////////////////////////////////////////
//     Function: LensNode::show_frustum
//       Access: Published
//  Description: Enables the drawing of the lens's frustum to aid in
//               visualization.  This actually creates a GeomNode
//               which is parented to the LensNode.
////////////////////////////////////////////////////////////////////
34
void LensNode::show_frustum(void);

2687 12 hide_frustum 0 4 3513 22 LensNode::hide_frustum 0 1 1060 306
////////////////////////////////////////////////////////////////////
//     Function: LensNode::hide_frustum
//       Access: Published
//  Description: Disables the drawing of the lens's frustum to aid in
//               visualization.
////////////////////////////////////////////////////////////////////
34
void LensNode::hide_frustum(void);

2688 14 get_class_type 0 4 3513 24 LensNode::get_class_type 0 1 1061 0
49
static TypeHandle LensNode::get_class_type(void);

2689 9 ~LensNode 0 4 3513 19 LensNode::~LensNode 0 0 0
26
LensNode::~LensNode(void);

2690 6 Camera 0 4 3514 14 Camera::Camera 0 2 1062 1063 443
////////////////////////////////////////////////////////////////////
//     Function: Camera::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Camera::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
118
explicit Camera::Camera(string const &name, Lens *lens = (new PerspectiveLens()));
Camera::Camera(Camera const &copy);

2691 10 set_active 0 4 3514 18 Camera::set_active 0 1 1064 328
////////////////////////////////////////////////////////////////////
//     Function: Camera::set_active
//       Access: Published
//  Description: Sets the active flag on the camera.  When the camera
//               is not active, nothing will be rendered.
////////////////////////////////////////////////////////////////////
44
inline void Camera::set_active(bool active);

2692 9 is_active 0 4 3514 17 Camera::is_active 0 1 1065 295
////////////////////////////////////////////////////////////////////
//     Function: Camera::is_active
//       Access: Published
//  Description: Returns the current setting of the active flag on the
//               camera.
////////////////////////////////////////////////////////////////////
42
inline bool Camera::is_active(void) const;

2693 9 set_scene 0 4 3514 17 Camera::set_scene 0 1 1066 801
////////////////////////////////////////////////////////////////////
//     Function: Camera::set_scene
//       Access: Published
//  Description: Sets the scene that will be rendered by the camera.
//               This is normally the root node of a scene graph,
//               typically a node called 'render', although it could
//               represent the root of any subgraph.
//
//               Note that the use of this method is now deprecated.
//               In the absence of an explicit scene set on the
//               camera, the camera will render whatever scene it is
//               parented into.  This is the preferred way to specify
//               the scene, since it is the more intuitive mechanism.
////////////////////////////////////////////////////////////////////
53
inline void Camera::set_scene(NodePath const &scene);

2694 9 get_scene 0 4 3514 17 Camera::get_scene 0 1 1067 306
////////////////////////////////////////////////////////////////////
//     Function: Camera::get_scene
//       Access: Published
//  Description: Returns the scene that will be rendered by the
//               camera.  See set_scene().
////////////////////////////////////////////////////////////////////
53
inline NodePath const &Camera::get_scene(void) const;

2695 23 get_num_display_regions 0 4 3514 31 Camera::get_num_display_regions 0 1 1068 313
////////////////////////////////////////////////////////////////////
//     Function: Camera::get_num_display_regions
//       Access: Published
//  Description: Returns the number of display regions associated with
//               the camera.
////////////////////////////////////////////////////////////////////
55
inline int Camera::get_num_display_regions(void) const;

2696 18 get_display_region 0 4 3514 26 Camera::get_display_region 0 1 1069 301
////////////////////////////////////////////////////////////////////
//     Function: Camera::get_display_region
//       Access: Published
//  Description: Returns the nth display region associated with the
//               camera.
////////////////////////////////////////////////////////////////////
66
inline DisplayRegionBase *Camera::get_display_region(int n) const;

2697 15 set_camera_mask 0 4 3514 23 Camera::set_camera_mask 0 1 1070 717
////////////////////////////////////////////////////////////////////
//     Function: Camera::set_camera_mask
//       Access: Published
//  Description: Changes the set of bits that represent the subset of
//               the scene graph the camera will render.
//
//               During the cull traversal, a node is not visited if
//               none of its draw mask bits intersect with the
//               camera's camera mask bits.  These masks can be used
//               to selectively hide and show different parts of the
//               scene graph from different cameras that are otherwise
//               viewing the same scene.
////////////////////////////////////////////////////////////////////
51
inline void Camera::set_camera_mask(DrawMask mask);

2698 15 get_camera_mask 0 4 3514 23 Camera::get_camera_mask 0 1 1071 373
////////////////////////////////////////////////////////////////////
//     Function: Camera::get_camera_mask
//       Access: Published
//  Description: Returns the set of bits that represent the subset of
//               the scene graph the camera will render.  See
//               set_camera_mask().
////////////////////////////////////////////////////////////////////
52
inline DrawMask Camera::get_camera_mask(void) const;

2699 15 set_cull_center 0 4 3514 23 Camera::set_cull_center 0 1 1072 606
////////////////////////////////////////////////////////////////////
//     Function: Camera::set_cull_center
//       Access: Published
//  Description: Specifies the point from which the culling operations
//               are performed.  Normally, this is the same as the
//               camera, and that is the default if this is not
//               specified; but it may sometimes be useful to perform
//               the culling from some other viewpoint, particularly
//               when you are debugging the culling itself.
////////////////////////////////////////////////////////////////////
65
inline void Camera::set_cull_center(NodePath const &cull_center);

2700 15 get_cull_center 0 4 3514 23 Camera::get_cull_center 0 1 1073 396
////////////////////////////////////////////////////////////////////
//     Function: Camera::get_cull_center
//       Access: Published
//  Description: Returns the point from which the culling operations
//               will be performed, if it was set by
//               set_cull_center(), or the empty NodePath otherwise.
////////////////////////////////////////////////////////////////////
59
inline NodePath const &Camera::get_cull_center(void) const;

2701 15 set_cull_bounds 0 4 3514 23 Camera::set_cull_bounds 0 1 1074 681
////////////////////////////////////////////////////////////////////
//     Function: Camera::set_cull_bounds
//       Access: Published
//  Description: Specifies the bounding volume that should be used to
//               perform culling from this camera.  Normally, this is
//               the bounding volume returned from the active lens'
//               make_bounds() call, but you may override this to
//               specify a custom volume if you require.  The
//               specified bounding volume will be understood to be in
//               the coordinate space of the get_cull_center() node.
////////////////////////////////////////////////////////////////////
65
inline void Camera::set_cull_bounds(BoundingVolume *cull_bounds);

2702 15 get_cull_bounds 0 4 3514 23 Camera::get_cull_bounds 0 1 1075 372
////////////////////////////////////////////////////////////////////
//     Function: Camera::get_cull_bounds
//       Access: Published
//  Description: Returns the custom cull volume that was set by
//               set_cull_bounds(), if any, or NULL if no custom cull
//               volume was set.
////////////////////////////////////////////////////////////////////
59
inline BoundingVolume *Camera::get_cull_bounds(void) const;

2703 14 set_lod_center 0 4 3514 22 Camera::set_lod_center 0 1 1076 680
////////////////////////////////////////////////////////////////////
//     Function: Camera::set_lod_center
//       Access: Published
//  Description: Specifies the point from which the LOD distances
//               are measured.  Normally, this is the same as the
//               camera, and that is the default if this is not
//               specified; but it may sometimes be useful to perform
//               the distance test from some other viewpoint.  This
//               may be used, for instance, to reduce LOD popping when
//               the camera rotates in a small circle about an avatar.
////////////////////////////////////////////////////////////////////
63
inline void Camera::set_lod_center(NodePath const &lod_center);

2704 14 get_lod_center 0 4 3514 22 Camera::get_lod_center 0 1 1077 388
////////////////////////////////////////////////////////////////////
//     Function: Camera::get_lod_center
//       Access: Published
//  Description: Returns the point from which the LOD distances will
//               be measured, if it was set by set_lod_center(), or
//               the empty NodePath otherwise.
////////////////////////////////////////////////////////////////////
58
inline NodePath const &Camera::get_lod_center(void) const;

2705 17 set_initial_state 0 4 3514 25 Camera::set_initial_state 0 1 1078 374
////////////////////////////////////////////////////////////////////
//     Function: Camera::set_initial_state
//       Access: Published
//  Description: Sets the initial state which is applied to all nodes
//               in the scene, as if it were set at the top of the
//               scene graph.
////////////////////////////////////////////////////////////////////
64
inline void Camera::set_initial_state(RenderState const *state);

2706 17 get_initial_state 0 4 3514 25 Camera::get_initial_state 0 1 1079 317
////////////////////////////////////////////////////////////////////
//     Function: Camera::get_initial_state
//       Access: Published
//  Description: Returns the initial state as set by a previous call
//               to set_initial_state().
////////////////////////////////////////////////////////////////////
75
inline ConstPointerTo< RenderState > Camera::get_initial_state(void) const;

2707 17 set_tag_state_key 0 4 3514 25 Camera::set_tag_state_key 0 1 1080 477
////////////////////////////////////////////////////////////////////
//     Function: Camera::set_tag_state_key
//       Access: Published
//  Description: Sets the tag key which, when encountered as a tag on
//               nodes in the scene graph, causes this Camera to apply
//               an arbitrary state transition based on the value of
//               the tag (as specified to set_tag_state()).
////////////////////////////////////////////////////////////////////
67
inline void Camera::set_tag_state_key(string const &tag_state_key);

2708 17 get_tag_state_key 0 4 3514 25 Camera::get_tag_state_key 0 1 1081 311
////////////////////////////////////////////////////////////////////
//     Function: Camera::get_tag_state_key
//       Access: Published
//  Description: Returns the tag key as set by a previous call to
//               set_tag_state_key().
////////////////////////////////////////////////////////////////////
59
inline string const &Camera::get_tag_state_key(void) const;

2709 13 set_lod_scale 0 4 3514 21 Camera::set_lod_scale 0 1 1082 337
////////////////////////////////////////////////////////////////////
//     Function: Camera::set_lod_scale
//       Access: Published
//  Description: Sets the multiplier for LOD distances. This value
//               is multiplied with the LOD scale set on LodNodes.
////////////////////////////////////////////////////////////////////
53
inline void Camera::set_lod_scale(PN_stdfloat value);

2710 13 get_lod_scale 0 4 3514 21 Camera::get_lod_scale 0 1 1083 262
////////////////////////////////////////////////////////////////////
//     Function: Camera::get_lod_scale
//       Access: Published
//  Description: Returns the multiplier for LOD distances.
////////////////////////////////////////////////////////////////////
53
inline PN_stdfloat Camera::get_lod_scale(void) const;

2711 13 set_tag_state 0 4 3514 21 Camera::set_tag_state 0 1 1084 959
////////////////////////////////////////////////////////////////////
//     Function: Camera::set_tag_state
//       Access: Published
//  Description: Associates a particular state transition with the
//               indicated tag value.  When a node is encountered
//               during traversal with the tag key specified by
//               set_tag_state_key(), if the value of that tag matches
//               tag_state, then the indicated state is applied to
//               this node--but only when it is rendered by this
//               camera.
//
//               This can be used to apply special effects to nodes
//               when they are rendered by certain cameras.  It is
//               particularly useful for multipass rendering, in which
//               specialty cameras might be needed to render the scene
//               with a particular set of effects.
////////////////////////////////////////////////////////////////////
78
void Camera::set_tag_state(string const &tag_state, RenderState const *state);

2712 15 clear_tag_state 0 4 3514 23 Camera::clear_tag_state 0 1 1085 314
////////////////////////////////////////////////////////////////////
//     Function: Camera::clear_tag_state
//       Access: Published
//  Description: Removes the association established by a previous
//               call to set_tag_state().
////////////////////////////////////////////////////////////////////
54
void Camera::clear_tag_state(string const &tag_state);

2713 13 has_tag_state 0 4 3514 21 Camera::has_tag_state 0 1 1086 343
////////////////////////////////////////////////////////////////////
//     Function: Camera::has_tag_state
//       Access: Published
//  Description: Returns true if set_tag_state() has previously been
//               called with the indicated tag state, false otherwise.
////////////////////////////////////////////////////////////////////
58
bool Camera::has_tag_state(string const &tag_state) const;

2714 13 get_tag_state 0 4 3514 21 Camera::get_tag_state 0 1 1087 402
////////////////////////////////////////////////////////////////////
//     Function: Camera::get_tag_state
//       Access: Published
//  Description: Returns the state associated with the indicated tag
//               state by a previous call to set_tag_state(), or the
//               empty state if nothing has been associated.
////////////////////////////////////////////////////////////////////
83
ConstPointerTo< RenderState > Camera::get_tag_state(string const &tag_state) const;

2715 18 set_aux_scene_data 0 4 3514 26 Camera::set_aux_scene_data 0 1 1088 403
////////////////////////////////////////////////////////////////////
//     Function: Camera::set_aux_scene_data
//       Access: Published
//  Description: Associates the indicated AuxSceneData object with the
//               given NodePath, possibly replacing a previous
//               data defined for the same NodePath, if any.
////////////////////////////////////////////////////////////////////
79
void Camera::set_aux_scene_data(NodePath const &node_path, AuxSceneData *data);

2716 20 clear_aux_scene_data 0 4 3514 28 Camera::clear_aux_scene_data 0 1 1089 401
////////////////////////////////////////////////////////////////////
//     Function: Camera::clear_aux_scene_data
//       Access: Published
//  Description: Removes the AuxSceneData associated with the
//               indicated NodePath.  Returns true if it is removed
//               successfully, false if it was already gone.
////////////////////////////////////////////////////////////////////
61
bool Camera::clear_aux_scene_data(NodePath const &node_path);

2717 18 get_aux_scene_data 0 4 3514 26 Camera::get_aux_scene_data 0 1 1090 341
////////////////////////////////////////////////////////////////////
//     Function: Camera::get_aux_scene_data
//       Access: Published
//  Description: Returns the AuxSceneData associated with the
//               indicated NodePath, or NULL if nothing is associated.
////////////////////////////////////////////////////////////////////
74
AuxSceneData *Camera::get_aux_scene_data(NodePath const &node_path) const;

2718 19 list_aux_scene_data 0 4 3514 27 Camera::list_aux_scene_data 0 1 1091 298
////////////////////////////////////////////////////////////////////
//     Function: Camera::list_aux_scene_data
//       Access: Published
//  Description: Outputs all of the NodePaths and AuxSceneDatas in
//               use.
////////////////////////////////////////////////////////////////////
53
void Camera::list_aux_scene_data(ostream &out) const;

2719 22 cleanup_aux_scene_data 0 4 3514 30 Camera::cleanup_aux_scene_data 0 1 1092 443
////////////////////////////////////////////////////////////////////
//     Function: Camera::cleanup_aux_scene_data
//       Access: Published
//  Description: Walks through the list of currently-assigned
//               AuxSceneData objects and releases any that are
//               past their expiration times.  Returns the number of
//               elements released.
////////////////////////////////////////////////////////////////////
84
int Camera::cleanup_aux_scene_data(Thread *current_thread = (get_current_thread()));

2720 14 get_class_type 0 4 3514 22 Camera::get_class_type 0 1 1093 0
47
static TypeHandle Camera::get_class_type(void);

2721 9 PlaneNode 0 4 3515 20 PlaneNode::PlaneNode 0 1 1094 446
////////////////////////////////////////////////////////////////////
//     Function: PlaneNode::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PlaneNode::Copy Constructor
//       Access: Protected
//  Description:
////////////////////////////////////////////////////////////////////
73
PlaneNode::PlaneNode(string const &name, LPlane const &plane = LPlane());

2722 9 set_plane 0 4 3515 20 PlaneNode::set_plane 0 1 1095 289
////////////////////////////////////////////////////////////////////
//     Function: PlaneNode::set_plane
//       Access: Public
//  Description: Sets the particular plane represented by the
//               PlaneNode.
////////////////////////////////////////////////////////////////////
54
inline void PlaneNode::set_plane(LPlane const &plane);

2723 9 get_plane 0 4 3515 20 PlaneNode::get_plane 0 1 1096 264
////////////////////////////////////////////////////////////////////
//     Function: PlaneNode::get_plane
//       Access: Public
//  Description: Returns the plane represented by the PlaneNode.
////////////////////////////////////////////////////////////////////
54
inline LPlane const &PlaneNode::get_plane(void) const;

2724 13 set_viz_scale 0 4 3515 24 PlaneNode::set_viz_scale 0 1 1097 339
////////////////////////////////////////////////////////////////////
//     Function: PlaneNode::set_viz_scale
//       Access: Public
//  Description: Specifies the size of the visual representation of
//               the plane that is drawn if the PlaneNode is shown.
////////////////////////////////////////////////////////////////////
60
inline void PlaneNode::set_viz_scale(PN_stdfloat viz_scale);

2725 13 get_viz_scale 0 4 3515 24 PlaneNode::get_viz_scale 0 1 1098 337
////////////////////////////////////////////////////////////////////
//     Function: PlaneNode::get_viz_scale
//       Access: Public
//  Description: Returns the size of the visual representation of
//               the plane that is drawn if the PlaneNode is shown.
////////////////////////////////////////////////////////////////////
56
inline PN_stdfloat PlaneNode::get_viz_scale(void) const;

2726 12 set_priority 0 4 3515 23 PlaneNode::set_priority 0 1 1099 784
////////////////////////////////////////////////////////////////////
//     Function: PlaneNode::set_priority
//       Access: Published
//  Description: Changes the relative importance of this PlaneNode
//               (when it is used as a clip plane) relative to the
//               other clip planes that are applied simultaneously.
//
//               The priority number is used to decide which of the
//               requested clip planes are to be activated when more
//               clip planes are requested than the hardware will
//               support.  The highest-priority n planes are selected
//               for rendering.
//
//               This is similar to TextureStage::set_priority().
////////////////////////////////////////////////////////////////////
50
inline void PlaneNode::set_priority(int priority);

2727 12 get_priority 0 4 3515 23 PlaneNode::get_priority 0 1 1100 314
////////////////////////////////////////////////////////////////////
//     Function: PlaneNode::get_priority
//       Access: Published
//  Description: Returns the priority associated with this clip
//               plane.  See set_priority().
////////////////////////////////////////////////////////////////////
47
inline int PlaneNode::get_priority(void) const;

2728 15 set_clip_effect 0 4 3515 26 PlaneNode::set_clip_effect 0 1 1101 755
////////////////////////////////////////////////////////////////////
//     Function: PlaneNode::set_clip_effect
//       Access: Published
//  Description: Specifies the sort of things this plane will actually
//               clip (when it is used as a clip plane).  This is a
//               bitmask union of ClipEffect values.  If it includes
//               CE_visible, then it will clip visible geometry; if it
//               includes CE_collision, then it will clip collision
//               polygons.  If it includes neither bit, it will still
//               affect culling, but objects will either be wholly
//               behind the clipping plane, or wholly present.
////////////////////////////////////////////////////////////////////
56
inline void PlaneNode::set_clip_effect(int clip_effect);

2729 15 get_clip_effect 0 4 3515 26 PlaneNode::get_clip_effect 0 1 1102 315
////////////////////////////////////////////////////////////////////
//     Function: PlaneNode::get_clip_effect
//       Access: Published
//  Description: Returns the clip_effect bits for this clip plane.
//               See set_clip_effect().
////////////////////////////////////////////////////////////////////
50
inline int PlaneNode::get_clip_effect(void) const;

2730 14 get_class_type 0 4 3515 25 PlaneNode::get_class_type 0 1 1103 0
50
static TypeHandle PlaneNode::get_class_type(void);

2731 10 ~PlaneNode 0 4 3515 21 PlaneNode::~PlaneNode 0 0 0
28
PlaneNode::~PlaneNode(void);

2732 4 make 0 4 3517 21 ClipPlaneAttrib::make 0 5 1104 1105 1106 1107 1108 2253
// The following is the new, more general interface to the
// ClipPlaneAttrib.

////////////////////////////////////////////////////////////////////
//     Function: ClipPlaneAttrib::make
//       Access: Published, Static
//  Description: Constructs a new ClipPlaneAttrib object that enables (or
//               disables, according to op) the indicated plane(s).
//
//               This method is now deprecated.  Use add_on_plane() or
//               add_off_plane() instead.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ClipPlaneAttrib::make
//       Access: Published, Static
//  Description: Constructs a new ClipPlaneAttrib object that turns on (or
//               off, according to op) the indicate plane(s).
//
//               This method is now deprecated.  Use add_on_plane() or
//               add_off_plane() instead.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ClipPlaneAttrib::make
//       Access: Published, Static
//  Description: Constructs a new ClipPlaneAttrib object that turns on (or
//               off, according to op) the indicate plane(s).
//
//               This method is now deprecated.  Use add_on_plane() or
//               add_off_plane() instead.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ClipPlaneAttrib::make
//       Access: Published, Static
//  Description: Constructs a new ClipPlaneAttrib object that turns on (or
//               off, according to op) the indicate plane(s).
//
//               This method is now deprecated.  Use add_on_plane() or
//               add_off_plane() instead.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ClipPlaneAttrib::make
//       Access: Published, Static
//  Description: Constructs a new ClipPlaneAttrib object that does
//               nothing.
////////////////////////////////////////////////////////////////////
623
static ConstPointerTo< RenderAttrib > ClipPlaneAttrib::make(ClipPlaneAttrib::Operation op, PlaneNode *plane);
static ConstPointerTo< RenderAttrib > ClipPlaneAttrib::make(ClipPlaneAttrib::Operation op, PlaneNode *plane1, PlaneNode *plane2);
static ConstPointerTo< RenderAttrib > ClipPlaneAttrib::make(ClipPlaneAttrib::Operation op, PlaneNode *plane1, PlaneNode *plane2, PlaneNode *plane3);
static ConstPointerTo< RenderAttrib > ClipPlaneAttrib::make(ClipPlaneAttrib::Operation op, PlaneNode *plane1, PlaneNode *plane2, PlaneNode *plane3, PlaneNode *plane4);
static ConstPointerTo< RenderAttrib > ClipPlaneAttrib::make(void);

2733 12 make_default 0 4 3517 29 ClipPlaneAttrib::make_default 0 1 1109 402
////////////////////////////////////////////////////////////////////
//     Function: ClipPlaneAttrib::make_default
//       Access: Published, Static
//  Description: Returns a RenderAttrib that corresponds to whatever
//               the standard default properties for render attributes
//               of this type ought to be.
////////////////////////////////////////////////////////////////////
74
static ConstPointerTo< RenderAttrib > ClipPlaneAttrib::make_default(void);

2734 13 get_operation 0 4 3517 30 ClipPlaneAttrib::get_operation 0 1 1110 900
////////////////////////////////////////////////////////////////////
//     Function: ClipPlaneAttrib::get_operation
//       Access: Published
//  Description: Returns the basic operation type of the ClipPlaneAttrib.
//               If this is O_set, the planes listed here completely
//               replace any planes that were already on.  If this is
//               O_add, the planes here are added to the set of of
//               planes that were already on, and if O_remove, the
//               planes here are removed from the set of planes that
//               were on.
//
//               This method is now deprecated.  ClipPlaneAttribs
//               nowadays have a separate list of on_planes and
//               off_planes, so this method doesn't make sense.  Query
//               the lists independently.
////////////////////////////////////////////////////////////////////
70
ClipPlaneAttrib::Operation ClipPlaneAttrib::get_operation(void) const;

2735 14 get_num_planes 0 4 3517 31 ClipPlaneAttrib::get_num_planes 0 1 1111 530
////////////////////////////////////////////////////////////////////
//     Function: ClipPlaneAttrib::get_num_planes
//       Access: Published
//  Description: Returns the number of planes listed in the attribute.
//
//               This method is now deprecated.  ClipPlaneAttribs
//               nowadays have a separate list of on_planes and
//               off_planes, so this method doesn't make sense.  Query
//               the lists independently.
////////////////////////////////////////////////////////////////////
48
int ClipPlaneAttrib::get_num_planes(void) const;

2736 9 get_plane 0 4 3517 26 ClipPlaneAttrib::get_plane 0 1 1112 518
////////////////////////////////////////////////////////////////////
//     Function: ClipPlaneAttrib::get_plane
//       Access: Published
//  Description: Returns the nth plane listed in the attribute.
//
//               This method is now deprecated.  ClipPlaneAttribs
//               nowadays have a separate list of on_planes and
//               off_planes, so this method doesn't make sense.  Query
//               the lists independently.
////////////////////////////////////////////////////////////////////
51
PlaneNode *ClipPlaneAttrib::get_plane(int n) const;

2737 9 has_plane 0 4 3517 26 ClipPlaneAttrib::has_plane 0 1 1113 566
////////////////////////////////////////////////////////////////////
//     Function: ClipPlaneAttrib::has_plane
//       Access: Published
//  Description: Returns true if the indicated plane is listed in the
//               attrib, false otherwise.
//
//               This method is now deprecated.  ClipPlaneAttribs
//               nowadays have a separate list of on_planes and
//               off_planes, so this method doesn't make sense.  Query
//               the lists independently.
////////////////////////////////////////////////////////////////////
56
bool ClipPlaneAttrib::has_plane(PlaneNode *plane) const;

2738 9 add_plane 0 4 3517 26 ClipPlaneAttrib::add_plane 0 1 1114 467
////////////////////////////////////////////////////////////////////
//     Function: ClipPlaneAttrib::add_plane
//       Access: Published
//  Description: Returns a new ClipPlaneAttrib, just like this one, but
//               with the indicated plane added to the list of planes.
//
//               This method is now deprecated.  Use add_on_plane() or
//               add_off_plane() instead.
////////////////////////////////////////////////////////////////////
82
ConstPointerTo< RenderAttrib > ClipPlaneAttrib::add_plane(PlaneNode *plane) const;

2739 12 remove_plane 0 4 3517 29 ClipPlaneAttrib::remove_plane 0 1 1115 497
////////////////////////////////////////////////////////////////////
//     Function: ClipPlaneAttrib::remove_plane
//       Access: Published
//  Description: Returns a new ClipPlaneAttrib, just like this one, but
//               with the indicated plane removed from the list of
//               planes.
//
//               This method is now deprecated.  Use remove_on_plane()
//               or remove_off_plane() instead.
////////////////////////////////////////////////////////////////////
85
ConstPointerTo< RenderAttrib > ClipPlaneAttrib::remove_plane(PlaneNode *plane) const;

2740 12 make_all_off 0 4 3517 29 ClipPlaneAttrib::make_all_off 0 1 1116 350
////////////////////////////////////////////////////////////////////
//     Function: ClipPlaneAttrib::make_all_off
//       Access: Published, Static
//  Description: Constructs a new ClipPlaneAttrib object that disables 
//               all planes (and hence disables clipping).
////////////////////////////////////////////////////////////////////
74
static ConstPointerTo< RenderAttrib > ClipPlaneAttrib::make_all_off(void);

2741 17 get_num_on_planes 0 4 3517 34 ClipPlaneAttrib::get_num_on_planes 0 1 1117 314
////////////////////////////////////////////////////////////////////
//     Function: ClipPlaneAttrib::get_num_on_planes
//       Access: Published
//  Description: Returns the number of planes that are enabled by
//               the attribute.
////////////////////////////////////////////////////////////////////
58
inline int ClipPlaneAttrib::get_num_on_planes(void) const;

2742 12 get_on_plane 0 4 3517 29 ClipPlaneAttrib::get_on_plane 0 1 1118 317
////////////////////////////////////////////////////////////////////
//     Function: ClipPlaneAttrib::get_on_plane
//       Access: Published
//  Description: Returns the nth plane enabled by the attribute,
//               sorted in render order.
////////////////////////////////////////////////////////////////////
59
inline NodePath ClipPlaneAttrib::get_on_plane(int n) const;

2743 12 has_on_plane 0 4 3517 29 ClipPlaneAttrib::has_on_plane 0 1 1119 324
////////////////////////////////////////////////////////////////////
//     Function: ClipPlaneAttrib::has_on_plane
//       Access: Published
//  Description: Returns true if the indicated plane is enabled by
//               the attrib, false otherwise.
////////////////////////////////////////////////////////////////////
71
inline bool ClipPlaneAttrib::has_on_plane(NodePath const &plane) const;

2744 18 get_num_off_planes 0 4 3517 35 ClipPlaneAttrib::get_num_off_planes 0 1 1120 316
////////////////////////////////////////////////////////////////////
//     Function: ClipPlaneAttrib::get_num_off_planes
//       Access: Published
//  Description: Returns the number of planes that are disabled by
//               the attribute.
////////////////////////////////////////////////////////////////////
59
inline int ClipPlaneAttrib::get_num_off_planes(void) const;

2745 13 get_off_plane 0 4 3517 30 ClipPlaneAttrib::get_off_plane 0 1 1121 332
////////////////////////////////////////////////////////////////////
//     Function: ClipPlaneAttrib::get_off_plane
//       Access: Published
//  Description: Returns the nth plane disabled by the attribute,
//               sorted in arbitrary (pointer) order.
////////////////////////////////////////////////////////////////////
60
inline NodePath ClipPlaneAttrib::get_off_plane(int n) const;

2746 13 has_off_plane 0 4 3517 30 ClipPlaneAttrib::has_off_plane 0 1 1122 326
////////////////////////////////////////////////////////////////////
//     Function: ClipPlaneAttrib::has_off_plane
//       Access: Published
//  Description: Returns true if the indicated plane is disabled by
//               the attrib, false otherwise.
////////////////////////////////////////////////////////////////////
72
inline bool ClipPlaneAttrib::has_off_plane(NodePath const &plane) const;

2747 11 has_all_off 0 4 3517 28 ClipPlaneAttrib::has_all_off 0 1 1123 328
////////////////////////////////////////////////////////////////////
//     Function: ClipPlaneAttrib::has_all_off
//       Access: Published
//  Description: Returns true if this attrib disables all planes
//               (although it may also enable some).
////////////////////////////////////////////////////////////////////
53
inline bool ClipPlaneAttrib::has_all_off(void) const;

2748 11 is_identity 0 4 3517 28 ClipPlaneAttrib::is_identity 0 1 1124 333
////////////////////////////////////////////////////////////////////
//     Function: ClipPlaneAttrib::is_identity
//       Access: Published
//  Description: Returns true if this is an identity attrib: it does
//               not change the set of planes in use.
////////////////////////////////////////////////////////////////////
53
inline bool ClipPlaneAttrib::is_identity(void) const;

2749 12 add_on_plane 0 4 3517 29 ClipPlaneAttrib::add_on_plane 0 1 1125 394
////////////////////////////////////////////////////////////////////
//     Function: ClipPlaneAttrib::add_on_plane
//       Access: Published
//  Description: Returns a new ClipPlaneAttrib, just like this one, but
//               with the indicated plane added to the list of planes
//               enabled by this attrib.
////////////////////////////////////////////////////////////////////
90
ConstPointerTo< RenderAttrib > ClipPlaneAttrib::add_on_plane(NodePath const &plane) const;

2750 15 remove_on_plane 0 4 3517 32 ClipPlaneAttrib::remove_on_plane 0 1 1126 401
////////////////////////////////////////////////////////////////////
//     Function: ClipPlaneAttrib::remove_on_plane
//       Access: Published
//  Description: Returns a new ClipPlaneAttrib, just like this one, but
//               with the indicated plane removed from the list of
//               planes enabled by this attrib.
////////////////////////////////////////////////////////////////////
93
ConstPointerTo< RenderAttrib > ClipPlaneAttrib::remove_on_plane(NodePath const &plane) const;

2751 13 add_off_plane 0 4 3517 30 ClipPlaneAttrib::add_off_plane 0 1 1127 396
////////////////////////////////////////////////////////////////////
//     Function: ClipPlaneAttrib::add_off_plane
//       Access: Published
//  Description: Returns a new ClipPlaneAttrib, just like this one, but
//               with the indicated plane added to the list of planes
//               disabled by this attrib.
////////////////////////////////////////////////////////////////////
91
ConstPointerTo< RenderAttrib > ClipPlaneAttrib::add_off_plane(NodePath const &plane) const;

2752 16 remove_off_plane 0 4 3517 33 ClipPlaneAttrib::remove_off_plane 0 1 1128 403
////////////////////////////////////////////////////////////////////
//     Function: ClipPlaneAttrib::remove_off_plane
//       Access: Published
//  Description: Returns a new ClipPlaneAttrib, just like this one, but
//               with the indicated plane removed from the list of
//               planes disabled by this attrib.
////////////////////////////////////////////////////////////////////
94
ConstPointerTo< RenderAttrib > ClipPlaneAttrib::remove_off_plane(NodePath const &plane) const;

2753 13 filter_to_max 0 4 3517 30 ClipPlaneAttrib::filter_to_max 0 1 1129 477
////////////////////////////////////////////////////////////////////
//     Function: ClipPlaneAttrib::filter_to_max
//       Access: Public
//  Description: Returns a new ClipPlaneAttrib, very much like this one,
//               but with the number of on_planes reduced to be no
//               more than max_clip_planes.  The number of off_planes in
//               the new ClipPlaneAttrib is undefined.
////////////////////////////////////////////////////////////////////
92
ConstPointerTo< ClipPlaneAttrib > ClipPlaneAttrib::filter_to_max(int max_clip_planes) const;

2754 14 get_class_slot 0 4 3517 31 ClipPlaneAttrib::get_class_slot 0 1 1130 0
49
static int ClipPlaneAttrib::get_class_slot(void);

2755 14 get_class_type 0 4 3517 31 ClipPlaneAttrib::get_class_type 0 1 1131 0
56
static TypeHandle ClipPlaneAttrib::get_class_type(void);

2756 16 ~ClipPlaneAttrib 0 4 3517 33 ClipPlaneAttrib::~ClipPlaneAttrib 0 0 0
40
ClipPlaneAttrib::~ClipPlaneAttrib(void);

2757 11 make_vertex 0 4 3519 24 ColorAttrib::make_vertex 0 1 1132 379
////////////////////////////////////////////////////////////////////
//     Function: ColorAttrib::make_vertex
//       Access: Published, Static
//  Description: Constructs a new ColorAttrib object that indicates
//               geometry should be rendered according to its own
//               vertex color.
////////////////////////////////////////////////////////////////////
69
static ConstPointerTo< RenderAttrib > ColorAttrib::make_vertex(void);

2758 9 make_flat 0 4 3519 22 ColorAttrib::make_flat 0 1 1133 349
////////////////////////////////////////////////////////////////////
//     Function: ColorAttrib::make_flat
//       Access: Published, Static
//  Description: Constructs a new ColorAttrib object that indicates
//               geometry should be rendered in the indicated color.
////////////////////////////////////////////////////////////////////
82
static ConstPointerTo< RenderAttrib > ColorAttrib::make_flat(LColor const &color);

2759 8 make_off 0 4 3519 21 ColorAttrib::make_off 0 1 1134 334
////////////////////////////////////////////////////////////////////
//     Function: ColorAttrib::make_off
//       Access: Published, Static
//  Description: Constructs a new ColorAttrib object that indicates
//               geometry should be rendered in white.
////////////////////////////////////////////////////////////////////
66
static ConstPointerTo< RenderAttrib > ColorAttrib::make_off(void);

2760 12 make_default 0 4 3519 25 ColorAttrib::make_default 0 1 1135 398
////////////////////////////////////////////////////////////////////
//     Function: ColorAttrib::make_default
//       Access: Published, Static
//  Description: Returns a RenderAttrib that corresponds to whatever
//               the standard default properties for render attributes
//               of this type ought to be.
////////////////////////////////////////////////////////////////////
70
static ConstPointerTo< RenderAttrib > ColorAttrib::make_default(void);

2761 14 get_color_type 0 4 3519 27 ColorAttrib::get_color_type 0 1 1136 648
////////////////////////////////////////////////////////////////////
//     Function: ColorAttrib::get_color_type
//       Access: Published
//  Description: Returns the type of color specified by this
//               ColorAttrib.  The options are:
//
//                 T_vertex - use the vertex color specified in the
//                 geometry itself.
//
//                 T_flat - use the color specified in this
//                 ColorAttrib for all geometry.  You can get this
//                 color via get_color().
//
//                 T_off - use the color white.
////////////////////////////////////////////////////////////////////
65
inline ColorAttrib::Type ColorAttrib::get_color_type(void) const;

2762 9 get_color 0 4 3519 22 ColorAttrib::get_color 0 1 1137 391
////////////////////////////////////////////////////////////////////
//     Function: ColorAttrib::get_color
//       Access: Published
//  Description: If the type is T_flat or T_off, this returns the
//               color that will be applied to geometry.  If the type
//               is T_vertex, this is meaningless.
////////////////////////////////////////////////////////////////////
56
inline LColor const &ColorAttrib::get_color(void) const;

2763 14 get_class_slot 0 4 3519 27 ColorAttrib::get_class_slot 0 1 1138 0
45
static int ColorAttrib::get_class_slot(void);

2764 14 get_class_type 0 4 3519 27 ColorAttrib::get_class_type 0 1 1139 0
52
static TypeHandle ColorAttrib::get_class_type(void);

2765 12 ~ColorAttrib 0 4 3519 25 ColorAttrib::~ColorAttrib 0 0 0
32
ColorAttrib::~ColorAttrib(void);

2766 8 make_off 0 4 3521 26 ColorBlendAttrib::make_off 0 1 1140 396
////////////////////////////////////////////////////////////////////
//     Function: ColorBlendAttrib::make_off
//       Access: Published, Static
//  Description: Constructs a new ColorBlendAttrib object that
//               disables special-effect blending, allowing normal
//               transparency to be used instead.
////////////////////////////////////////////////////////////////////
71
static ConstPointerTo< RenderAttrib > ColorBlendAttrib::make_off(void);

2767 4 make 0 4 3521 22 ColorBlendAttrib::make 0 2 1141 1142 779
////////////////////////////////////////////////////////////////////
//     Function: ColorBlendAttrib::make
//       Access: Published, Static
//  Description: Constructs a new ColorBlendAttrib object.  This
//               constructor is deprecated; use the one below, which
//               takes three or four parameters, instead.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ColorBlendAttrib::make
//       Access: Published, Static
//  Description: Constructs a new ColorBlendAttrib object that enables
//               special-effect blending.  This supercedes
//               transparency.
////////////////////////////////////////////////////////////////////
271
static ConstPointerTo< RenderAttrib > ColorBlendAttrib::make(ColorBlendAttrib::Mode mode);
static ConstPointerTo< RenderAttrib > ColorBlendAttrib::make(ColorBlendAttrib::Mode mode, ColorBlendAttrib::Operand a, ColorBlendAttrib::Operand b, LColor const &color = (zero()));

2768 12 make_default 0 4 3521 30 ColorBlendAttrib::make_default 0 1 1143 403
////////////////////////////////////////////////////////////////////
//     Function: ColorBlendAttrib::make_default
//       Access: Published, Static
//  Description: Returns a RenderAttrib that corresponds to whatever
//               the standard default properties for render attributes
//               of this type ought to be.
////////////////////////////////////////////////////////////////////
75
static ConstPointerTo< RenderAttrib > ColorBlendAttrib::make_default(void);

2769 8 get_mode 0 4 3521 26 ColorBlendAttrib::get_mode 0 1 1144 254
////////////////////////////////////////////////////////////////////
//     Function: ColorBlendAttrib::get_mode
//       Access: Published
//  Description: Returns the colorBlend mode.
////////////////////////////////////////////////////////////////////
69
inline ColorBlendAttrib::Mode ColorBlendAttrib::get_mode(void) const;

2770 13 get_operand_a 0 4 3521 31 ColorBlendAttrib::get_operand_a 0 1 1145 278
////////////////////////////////////////////////////////////////////
//     Function: ColorBlendAttrib::get_operand_a
//       Access: Published
//  Description: Returns the multiplier for the first component.
////////////////////////////////////////////////////////////////////
77
inline ColorBlendAttrib::Operand ColorBlendAttrib::get_operand_a(void) const;

2771 13 get_operand_b 0 4 3521 31 ColorBlendAttrib::get_operand_b 0 1 1146 279
////////////////////////////////////////////////////////////////////
//     Function: ColorBlendAttrib::get_operand_b
//       Access: Published
//  Description: Returns the multiplier for the second component.
////////////////////////////////////////////////////////////////////
77
inline ColorBlendAttrib::Operand ColorBlendAttrib::get_operand_b(void) const;

2772 9 get_color 0 4 3521 27 ColorBlendAttrib::get_color 0 1 1147 281
////////////////////////////////////////////////////////////////////
//     Function: ColorBlendAttrib::get_color
//       Access: Published
//  Description: Returns the constant color associated with the attrib.
////////////////////////////////////////////////////////////////////
54
inline LColor ColorBlendAttrib::get_color(void) const;

2773 23 involves_constant_color 0 4 3521 41 ColorBlendAttrib::involves_constant_color 0 2 1148 1149 678
////////////////////////////////////////////////////////////////////
//     Function: ColorBlendAttrib::involves_constant_color
//       Access: Published
//  Description: Returns true if the this attrib uses the
//               constant color, false otherwise.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ColorBlendAttrib::involves_constant_color
//       Access: Published, Static
//  Description: Returns true if the indicated operand uses the
//               constant color, false otherwise.
////////////////////////////////////////////////////////////////////
163
inline bool ColorBlendAttrib::involves_constant_color(void) const;
static inline bool ColorBlendAttrib::involves_constant_color(ColorBlendAttrib::Operand operand);

2774 20 involves_color_scale 0 4 3521 38 ColorBlendAttrib::involves_color_scale 0 2 1150 1151 680
////////////////////////////////////////////////////////////////////
//     Function: ColorBlendAttrib::involves_color_scale
//       Access: Published
//  Description: Returns true if the this attrib uses the
//               color scale attrib, false otherwise.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ColorBlendAttrib::involves_color_scale
//       Access: Published, Static
//  Description: Returns true if the indicated operand uses the
//               color scale attrib, false otherwise.
////////////////////////////////////////////////////////////////////
157
inline bool ColorBlendAttrib::involves_color_scale(void) const;
static inline bool ColorBlendAttrib::involves_color_scale(ColorBlendAttrib::Operand operand);

2775 14 get_class_slot 0 4 3521 32 ColorBlendAttrib::get_class_slot 0 1 1152 0
50
static int ColorBlendAttrib::get_class_slot(void);

2776 14 get_class_type 0 4 3521 32 ColorBlendAttrib::get_class_type 0 1 1153 0
57
static TypeHandle ColorBlendAttrib::get_class_type(void);

2777 17 ~ColorBlendAttrib 0 4 3521 35 ColorBlendAttrib::~ColorBlendAttrib 0 0 0
42
ColorBlendAttrib::~ColorBlendAttrib(void);

2778 13 make_identity 0 4 3524 31 ColorScaleAttrib::make_identity 0 1 1154 275
////////////////////////////////////////////////////////////////////
//     Function: ColorScaleAttrib::make_identity
//       Access: Published, Static
//  Description: Constructs an identity scale attrib.
////////////////////////////////////////////////////////////////////
76
static ConstPointerTo< RenderAttrib > ColorScaleAttrib::make_identity(void);

2779 4 make 0 4 3524 22 ColorScaleAttrib::make 0 1 1155 353
////////////////////////////////////////////////////////////////////
//     Function: ColorScaleAttrib::make
//       Access: Published, Static
//  Description: Constructs a new ColorScaleAttrib object that indicates
//               geometry should be scaled by the indicated factor.
////////////////////////////////////////////////////////////////////
85
static ConstPointerTo< RenderAttrib > ColorScaleAttrib::make(LVecBase4 const &scale);

2780 8 make_off 0 4 3524 26 ColorScaleAttrib::make_off 0 1 1156 477
////////////////////////////////////////////////////////////////////
//     Function: ColorScaleAttrib::make_off
//       Access: Published, Static
//  Description: Constructs a new ColorScaleAttrib object that ignores
//               any ColorScaleAttrib inherited from above.  You may
//               also specify an additional color scale to apply to
//               geometry below (using set_scale()).
////////////////////////////////////////////////////////////////////
71
static ConstPointerTo< RenderAttrib > ColorScaleAttrib::make_off(void);

2781 12 make_default 0 4 3524 30 ColorScaleAttrib::make_default 0 1 1157 403
////////////////////////////////////////////////////////////////////
//     Function: ColorScaleAttrib::make_default
//       Access: Published, Static
//  Description: Returns a RenderAttrib that corresponds to whatever
//               the standard default properties for render attributes
//               of this type ought to be.
////////////////////////////////////////////////////////////////////
75
static ConstPointerTo< RenderAttrib > ColorScaleAttrib::make_default(void);

2782 6 is_off 0 4 3524 24 ColorScaleAttrib::is_off 0 1 1158 526
////////////////////////////////////////////////////////////////////
//     Function: ColorScaleAttrib::is_off
//       Access: Published
//  Description: Returns true if the ColorScaleAttrib will ignore any
//               color scales inherited from above, false otherwise.
//               This is not the same thing as !has_scale(); a
//               ColorScaleAttrib may have the "off" flag set and also
//               have another scale specified.
////////////////////////////////////////////////////////////////////
49
inline bool ColorScaleAttrib::is_off(void) const;

2783 11 is_identity 0 4 3524 29 ColorScaleAttrib::is_identity 0 1 1159 377
////////////////////////////////////////////////////////////////////
//     Function: ColorScaleAttrib::is_identity
//       Access: Published
//  Description: Returns true if the ColorScaleAttrib is an identity
//               attrib, false if it is either an off attrib or it has
//               a scale.
////////////////////////////////////////////////////////////////////
54
inline bool ColorScaleAttrib::is_identity(void) const;

2784 9 has_scale 0 4 3524 27 ColorScaleAttrib::has_scale 0 1 1160 404
////////////////////////////////////////////////////////////////////
//     Function: ColorScaleAttrib::has_scale
//       Access: Published
//  Description: Returns true if the ColorScaleAttrib has a
//               non-identity scale, false otherwise (in which case it
//               might be an off attrib or an identity attrib).
////////////////////////////////////////////////////////////////////
52
inline bool ColorScaleAttrib::has_scale(void) const;

2785 13 has_rgb_scale 0 4 3524 31 ColorScaleAttrib::has_rgb_scale 0 1 1161 386
////////////////////////////////////////////////////////////////////
//     Function: ColorScaleAttrib::has_rgb_scale
//       Access: Published
//  Description: Returns true if the ColorScaleAttrib has a
//               non-identity scale in the RGB components (ignoring
//               alpha), or false otherwise.
////////////////////////////////////////////////////////////////////
56
inline bool ColorScaleAttrib::has_rgb_scale(void) const;

2786 15 has_alpha_scale 0 4 3524 33 ColorScaleAttrib::has_alpha_scale 0 1 1162 387
////////////////////////////////////////////////////////////////////
//     Function: ColorScaleAttrib::has_alpha_scale
//       Access: Published
//  Description: Returns true if the ColorScaleAttrib has a
//               non-identity scale in the alpha component (ignoring
//               RGB), or false otherwise.
////////////////////////////////////////////////////////////////////
58
inline bool ColorScaleAttrib::has_alpha_scale(void) const;

2787 9 get_scale 0 4 3524 27 ColorScaleAttrib::get_scale 0 1 1163 269
////////////////////////////////////////////////////////////////////
//     Function: ColorScaleAttrib::get_scale
//       Access: Published
//  Description: Returns the scale to be applied to colors.
////////////////////////////////////////////////////////////////////
64
inline LVecBase4 const &ColorScaleAttrib::get_scale(void) const;

2788 9 set_scale 0 4 3524 27 ColorScaleAttrib::set_scale 0 1 1164 346
////////////////////////////////////////////////////////////////////
//     Function: ColorScaleAttrib::set_scale
//       Access: Published
//  Description: Returns a new ColorScaleAttrib, just like this one, but
//               with the scale changed to the indicated value.
////////////////////////////////////////////////////////////////////
89
ConstPointerTo< RenderAttrib > ColorScaleAttrib::set_scale(LVecBase4 const &scale) const;

2789 14 get_class_slot 0 4 3524 32 ColorScaleAttrib::get_class_slot 0 1 1165 0
50
static int ColorScaleAttrib::get_class_slot(void);

2790 14 get_class_type 0 4 3524 32 ColorScaleAttrib::get_class_type 0 1 1166 0
57
static TypeHandle ColorScaleAttrib::get_class_type(void);

2791 17 ~ColorScaleAttrib 0 4 3524 35 ColorScaleAttrib::~ColorScaleAttrib 0 0 0
42
ColorScaleAttrib::~ColorScaleAttrib(void);

2792 4 make 0 4 3525 22 ColorWriteAttrib::make 0 1 1167 271
////////////////////////////////////////////////////////////////////
//     Function: ColorWriteAttrib::make
//       Access: Published, Static
//  Description: Constructs a new ColorWriteAttrib object.
////////////////////////////////////////////////////////////////////
84
static ConstPointerTo< RenderAttrib > ColorWriteAttrib::make(unsigned int channels);

2793 12 make_default 0 4 3525 30 ColorWriteAttrib::make_default 0 1 1168 403
////////////////////////////////////////////////////////////////////
//     Function: ColorWriteAttrib::make_default
//       Access: Published, Static
//  Description: Returns a RenderAttrib that corresponds to whatever
//               the standard default properties for render attributes
//               of this type ought to be.
////////////////////////////////////////////////////////////////////
75
static ConstPointerTo< RenderAttrib > ColorWriteAttrib::make_default(void);

2794 12 get_channels 0 4 3525 30 ColorWriteAttrib::get_channels 0 1 1169 314
////////////////////////////////////////////////////////////////////
//     Function: ColorWriteAttrib::get_channels
//       Access: Published
//  Description: Returns the mask of color channels that are enabled
//               by this attrib.
////////////////////////////////////////////////////////////////////
63
inline unsigned int ColorWriteAttrib::get_channels(void) const;

2795 14 get_class_slot 0 4 3525 32 ColorWriteAttrib::get_class_slot 0 1 1170 0
50
static int ColorWriteAttrib::get_class_slot(void);

2796 14 get_class_type 0 4 3525 32 ColorWriteAttrib::get_class_type 0 1 1171 0
57
static TypeHandle ColorWriteAttrib::get_class_type(void);

2797 17 ~ColorWriteAttrib 0 4 3525 35 ColorWriteAttrib::~ColorWriteAttrib 0 0 0
42
ColorWriteAttrib::~ColorWriteAttrib(void);

2798 4 make 0 4 3527 19 CompassEffect::make 0 1 1172 660
////////////////////////////////////////////////////////////////////
//     Function: CompassEffect::make
//       Access: Published, Static
//  Description: Constructs a new CompassEffect object.  If the
//               reference is an empty NodePath, it means the
//               CompassEffect is relative to the root of the scene
//               graph; otherwise, it's relative to the indicated
//               node.  The properties bitmask specifies the set of
//               properties that the compass node inherits from the
//               reference instead of from its parent.
////////////////////////////////////////////////////////////////////
126
static ConstPointerTo< RenderEffect > CompassEffect::make(NodePath const &reference, int properties = ::CompassEffect::P_rot);

2799 13 get_reference 0 4 3527 28 CompassEffect::get_reference 0 1 1173 398
////////////////////////////////////////////////////////////////////
//     Function: CompassEffect::get_reference
//       Access: Published
//  Description: Returns the reference node from which the
//               CompassEffect inherits its transform.  If this is
//               empty, it means the root of the scene graph.
////////////////////////////////////////////////////////////////////
64
inline NodePath const &CompassEffect::get_reference(void) const;

2800 14 get_properties 0 4 3527 29 CompassEffect::get_properties 0 1 1174 237
//               Returns the bitmask of properties that this
//               CompassEffect object inherits from its reference node
//               (or from the root).
////////////////////////////////////////////////////////////////////
53
inline int CompassEffect::get_properties(void) const;

2801 14 get_class_type 0 4 3527 29 CompassEffect::get_class_type 0 1 1175 0
54
static TypeHandle CompassEffect::get_class_type(void);

2802 14 ~CompassEffect 0 4 3527 29 CompassEffect::~CompassEffect 0 0 0
36
CompassEffect::~CompassEffect(void);

2803 13 ~CullBinEnums 0 4 3529 27 CullBinEnums::~CullBinEnums 0 0 0
34
CullBinEnums::~CullBinEnums(void);

2804 4 make 0 4 3531 19 CullBinAttrib::make 0 1 1176 589
////////////////////////////////////////////////////////////////////
//     Function: CullBinAttrib::make
//       Access: Published, Static
//  Description: Constructs a new CullBinAttrib assigning geometry
//               into the named bin.  If the bin name is the empty
//               string, the default bin is used.
//
//               The draw_order specifies further ordering information
//               which is relevant only to certain kinds of bins (in
//               particular CullBinFixed type bins).
////////////////////////////////////////////////////////////////////
98
static ConstPointerTo< RenderAttrib > CullBinAttrib::make(string const &bin_name, int draw_order);

2805 12 make_default 0 4 3531 27 CullBinAttrib::make_default 0 1 1177 400
////////////////////////////////////////////////////////////////////
//     Function: CullBinAttrib::make_default
//       Access: Published, Static
//  Description: Returns a RenderAttrib that corresponds to whatever
//               the standard default properties for render attributes
//               of this type ought to be.
////////////////////////////////////////////////////////////////////
72
static ConstPointerTo< RenderAttrib > CullBinAttrib::make_default(void);

2806 12 get_bin_name 0 4 3531 27 CullBinAttrib::get_bin_name 0 1 1178 373
////////////////////////////////////////////////////////////////////
//     Function: CullBinAttrib::get_bin_name
//       Access: Published
//  Description: Returns the name of the bin this attribute specifies.
//               If this is the empty string, it refers to the default
//               bin.
////////////////////////////////////////////////////////////////////
61
inline string const &CullBinAttrib::get_bin_name(void) const;

2807 14 get_draw_order 0 4 3531 29 CullBinAttrib::get_draw_order 0 1 1179 448
////////////////////////////////////////////////////////////////////
//     Function: CullBinAttrib::get_draw_order
//       Access: Published
//  Description: Returns the draw order this attribute specifies.
//               Some bins (in particular, CullBinFixed bins) use this
//               to further specify the order in which objects should
//               be rendered.
////////////////////////////////////////////////////////////////////
53
inline int CullBinAttrib::get_draw_order(void) const;

2808 14 get_class_slot 0 4 3531 29 CullBinAttrib::get_class_slot 0 1 1180 0
47
static int CullBinAttrib::get_class_slot(void);

2809 14 get_class_type 0 4 3531 29 CullBinAttrib::get_class_type 0 1 1181 0
54
static TypeHandle CullBinAttrib::get_class_type(void);

2810 14 ~CullBinAttrib 0 4 3531 29 CullBinAttrib::~CullBinAttrib 0 0 0
36
CullBinAttrib::~CullBinAttrib(void);

2811 7 add_bin 0 4 3532 23 CullBinManager::add_bin 0 1 1182 507
////////////////////////////////////////////////////////////////////
//     Function: CullBinManager::add_bin
//       Access: Published
//  Description: Defines a new bin with the indicated name, and
//               returns the new bin_index.  If there is already a bin
//               with the same name returns its bin_index if it had
//               the same properties; otherwise, reports an error and
//               returns -1.
////////////////////////////////////////////////////////////////////
88
int CullBinManager::add_bin(string const &name, CullBinManager::BinType type, int sort);

2812 10 remove_bin 0 4 3532 26 CullBinManager::remove_bin 0 1 1183 663
////////////////////////////////////////////////////////////////////
//     Function: CullBinManager::remove_bin
//       Access: Published
//  Description: Permanently removes the indicated bin.  This
//               operation is not protected from the pipeline and will
//               disturb whatever is currently rendering in draw.  You
//               should not call this during the normal course of
//               rendering a frame; it is intended only as an aid to
//               development, to allow the developer to interactively
//               fiddle with the set of bins.
////////////////////////////////////////////////////////////////////
47
void CullBinManager::remove_bin(int bin_index);

2813 12 get_num_bins 0 4 3532 28 CullBinManager::get_num_bins 0 1 1184 268
////////////////////////////////////////////////////////////////////
//     Function: CullBinManager::get_num_bins
//       Access: Published
//  Description: Returns the number of bins in the world.
////////////////////////////////////////////////////////////////////
52
inline int CullBinManager::get_num_bins(void) const;

2814 7 get_bin 0 4 3532 23 CullBinManager::get_bin 0 1 1185 511
////////////////////////////////////////////////////////////////////
//     Function: CullBinManager::get_bin
//       Access: Published
//  Description: Returns the bin_index of the nth bin in the set,
//               where n is a number between 0 and get_num_bins().
//               This returns the list of bin_index numbers, in sorted
//               order (that is, in the order in which the bins should
//               be rendered).
////////////////////////////////////////////////////////////////////
48
inline int CullBinManager::get_bin(int n) const;

2815 8 find_bin 0 4 3532 24 CullBinManager::find_bin 0 1 1186 336
////////////////////////////////////////////////////////////////////
//     Function: CullBinManager::find_bin
//       Access: Published
//  Description: Returns the bin_index associated with the bin of the
//               given name, or -1 if no bin has that name.
////////////////////////////////////////////////////////////////////
55
int CullBinManager::find_bin(string const &name) const;

2816 12 get_bin_name 0 4 3532 28 CullBinManager::get_bin_name 0 1 1187 458
////////////////////////////////////////////////////////////////////
//     Function: CullBinManager::get_bin_name
//       Access: Published
//  Description: Returns the name of the bin with the indicated
//               bin_index (where bin_index was retrieved by get_bin()
//               or find_bin()).  The bin's name may not be changed
//               during the life of the bin.
////////////////////////////////////////////////////////////////////
64
inline string CullBinManager::get_bin_name(int bin_index) const;

2817 12 get_bin_type 0 4 3532 28 CullBinManager::get_bin_type 0 2 1188 1189 677
////////////////////////////////////////////////////////////////////
//     Function: CullBinManager::get_bin_type
//       Access: Published
//  Description: Returns the type of the bin with the indicated
//               bin_index (where bin_index was retrieved by get_bin()
//               or find_bin()).
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: CullBinManager::get_bin_type
//       Access: Published
//  Description: Returns the type of the bin with the indicated
//               name.
////////////////////////////////////////////////////////////////////
168
inline CullBinManager::BinType CullBinManager::get_bin_type(int bin_index) const;
inline CullBinManager::BinType CullBinManager::get_bin_type(string const &name) const;

2818 12 set_bin_type 0 4 3532 28 CullBinManager::set_bin_type 0 2 1190 1191 995
////////////////////////////////////////////////////////////////////
//     Function: CullBinManager::set_bin_type
//       Access: Published
//  Description: Changes the type of the bin with the indicated
//               bin_index (where bin_index was retrieved by get_bin()
//               or find_bin()).
//
//               The change might be effective immediately, or it
//               might take place next frame, depending on the bin
//               type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: CullBinManager::set_bin_type
//       Access: Published
//  Description: Changes the type of the bin with the indicated
//               name.
//
//               The change might be effective immediately, or it
//               might take place next frame, depending on the bin
//               type.
////////////////////////////////////////////////////////////////////
178
inline void CullBinManager::set_bin_type(int bin_index, CullBinManager::BinType type);
inline void CullBinManager::set_bin_type(string const &name, CullBinManager::BinType type);

2819 12 get_bin_sort 0 4 3532 28 CullBinManager::get_bin_sort 0 2 1192 1193 1055
////////////////////////////////////////////////////////////////////
//     Function: CullBinManager::get_bin_sort
//       Access: Published
//  Description: Returns the sort order of the bin with the indicated
//               bin_index (where bin_index was retrieved by get_bin()
//               or find_bin()).
//
//               The bins are rendered in increasing order by their
//               sort order; this number may be changed from time to
//               time to reorder the bins.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: CullBinManager::get_bin_sort
//       Access: Published
//  Description: Returns the sort order of the bin with the indicated
//               name.
//
//               The bins are rendered in increasing order by their
//               sort order; this number may be changed from time to
//               time to reorder the bins.
////////////////////////////////////////////////////////////////////
128
inline int CullBinManager::get_bin_sort(int bin_index) const;
inline int CullBinManager::get_bin_sort(string const &name) const;

2820 12 set_bin_sort 0 4 3532 28 CullBinManager::set_bin_sort 0 2 1194 1195 1055
////////////////////////////////////////////////////////////////////
//     Function: CullBinManager::set_bin_sort
//       Access: Published
//  Description: Changes the sort order of the bin with the indicated
//               bin_index (where bin_index was retrieved by get_bin()
//               or find_bin()).
//
//               The bins are rendered in increasing order by their
//               sort order; this number may be changed from time to
//               time to reorder the bins.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: CullBinManager::set_bin_sort
//       Access: Published
//  Description: Changes the sort order of the bin with the indicated
//               name.
//
//               The bins are rendered in increasing order by their
//               sort order; this number may be changed from time to
//               time to reorder the bins.
////////////////////////////////////////////////////////////////////
138
inline void CullBinManager::set_bin_sort(int bin_index, int sort);
inline void CullBinManager::set_bin_sort(string const &name, int sort);

2821 14 get_bin_active 0 4 3532 30 CullBinManager::get_bin_active 0 2 1196 1197 921
////////////////////////////////////////////////////////////////////
//     Function: CullBinManager::get_bin_active
//       Access: Published
//  Description: Returns the active flag of the bin with the indicated
//               bin_index (where bin_index was retrieved by get_bin()
//               or find_bin()).
//
//               When a bin is marked inactive, all geometry assigned
//               to it is not rendered.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: CullBinManager::get_bin_active
//       Access: Published
//  Description: Returns the active flag of the bin with the indicated
//               name.
//
//               When a bin is marked inactive, all geometry assigned
//               to it is not rendered.
////////////////////////////////////////////////////////////////////
134
inline bool CullBinManager::get_bin_active(int bin_index) const;
inline bool CullBinManager::get_bin_active(string const &name) const;

2822 14 set_bin_active 0 4 3532 30 CullBinManager::set_bin_active 0 2 1198 1199 921
////////////////////////////////////////////////////////////////////
//     Function: CullBinManager::set_bin_active
//       Access: Published
//  Description: Changes the active flag of the bin with the indicated
//               bin_index (where bin_index was retrieved by get_bin()
//               or find_bin()).
//
//               When a bin is marked inactive, all geometry assigned
//               to it is not rendered.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: CullBinManager::set_bin_active
//       Access: Published
//  Description: Changes the active flag of the bin with the indicated
//               name.
//
//               When a bin is marked inactive, all geometry assigned
//               to it is not rendered.
////////////////////////////////////////////////////////////////////
148
inline void CullBinManager::set_bin_active(int bin_index, bool active);
inline void CullBinManager::set_bin_active(string const &name, bool active);

2823 20 get_bin_flash_active 0 4 3532 36 CullBinManager::get_bin_flash_active 0 1 1200 494
////////////////////////////////////////////////////////////////////
//     Function: CullBinManager::get_bin_flash_active
//       Access: Published
//  Description: Returns true if the bin with the given bin_index is
//               configured to flash at a predetermined color (where
//               bin_index was retrieved by get_bin() or find_bin()).
//
//               This method is not available in release builds.
////////////////////////////////////////////////////////////////////
70
inline bool CullBinManager::get_bin_flash_active(int bin_index) const;

2824 19 get_bin_flash_color 0 4 3532 35 CullBinManager::get_bin_flash_color 0 1 1201 399
////////////////////////////////////////////////////////////////////
//     Function: CullBinManager::get_bin_flash_color
//       Access: Published
//  Description: Returns the color that this bin has been configured
//               to flash to, if configured.
//
//               This method is not available in release builds.
////////////////////////////////////////////////////////////////////
78
inline LColor const &CullBinManager::get_bin_flash_color(int bin_index) const;

2825 20 set_bin_flash_active 0 4 3532 36 CullBinManager::set_bin_flash_active 0 1 1202 483
////////////////////////////////////////////////////////////////////
//     Function: CullBinManager::set_bin_flash_active
//       Access: Published
//  Description: When set to true, the given bin_index is configured
//               to flash at a predetermined color (where
//               bin_index was retrieved by get_bin() or find_bin()).
//
//               This method is not available in release builds.
////////////////////////////////////////////////////////////////////
77
inline void CullBinManager::set_bin_flash_active(int bin_index, bool active);

2826 19 set_bin_flash_color 0 4 3532 35 CullBinManager::set_bin_flash_color 0 1 1203 133
//               This method is not available in release builds.
////////////////////////////////////////////////////////////////////
84
inline void CullBinManager::set_bin_flash_color(int bin_index, LColor const &color);

2827 5 write 0 4 3532 21 CullBinManager::write 0 1 1204 220
////////////////////////////////////////////////////////////////////
//     Function: CullBinManager::write
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
47
void CullBinManager::write(ostream &out) const;

2828 14 get_global_ptr 0 4 3532 30 CullBinManager::get_global_ptr 0 1 1205 311
////////////////////////////////////////////////////////////////////
//     Function: CullBinManager::get_global_ptr
//       Access: Published, Static
//  Description: Returns the pointer to the global CullBinManager
//               object.
////////////////////////////////////////////////////////////////////
67
static inline CullBinManager *CullBinManager::get_global_ptr(void);

2829 4 make 0 4 3533 20 CullFaceAttrib::make 0 1 1206 739
////////////////////////////////////////////////////////////////////
//     Function: CullFaceAttrib::make
//       Access: Published, Static
//  Description: Constructs a new CullFaceAttrib object that specifies
//               how to cull geometry.  By Panda convention, vertices
//               are ordered counterclockwise when seen from the
//               front, so the M_cull_clockwise will cull backfacing
//               polygons.
//
//               M_cull_unchanged is an identity attrib; if this is
//               applied to vertices without any other intervening
//               attrib, it is the same as applying the default
//               attrib.
////////////////////////////////////////////////////////////////////
123
static ConstPointerTo< RenderAttrib > CullFaceAttrib::make(CullFaceAttrib::Mode mode = ::CullFaceAttrib::M_cull_clockwise);

2830 12 make_reverse 0 4 3533 28 CullFaceAttrib::make_reverse 0 1 1207 529
////////////////////////////////////////////////////////////////////
//     Function: CullFaceAttrib::make_reverse
//       Access: Published, Static
//  Description: Constructs a new CullFaceAttrib object that reverses
//               the effects of any other CullFaceAttrib objects in
//               the scene graph.  M_cull_clockwise will be treated as
//               M_cull_counter_clockwise, and vice-versa.
//               M_cull_none is unchanged.
////////////////////////////////////////////////////////////////////
73
static ConstPointerTo< RenderAttrib > CullFaceAttrib::make_reverse(void);

2831 12 make_default 0 4 3533 28 CullFaceAttrib::make_default 0 1 1208 401
////////////////////////////////////////////////////////////////////
//     Function: CullFaceAttrib::make_default
//       Access: Published, Static
//  Description: Returns a RenderAttrib that corresponds to whatever
//               the standard default properties for render attributes
//               of this type ought to be.
////////////////////////////////////////////////////////////////////
73
static ConstPointerTo< RenderAttrib > CullFaceAttrib::make_default(void);

2832 15 get_actual_mode 0 4 3533 31 CullFaceAttrib::get_actual_mode 0 1 1209 382
////////////////////////////////////////////////////////////////////
//     Function: CullFaceAttrib::get_actual_mode
//       Access: Published
//  Description: Returns the actual culling mode, without considering
//               the effects of the reverse flag.  See also
//               get_effective_mode().
////////////////////////////////////////////////////////////////////
72
inline CullFaceAttrib::Mode CullFaceAttrib::get_actual_mode(void) const;

2833 11 get_reverse 0 4 3533 27 CullFaceAttrib::get_reverse 0 1 1210 608
////////////////////////////////////////////////////////////////////
//     Function: CullFaceAttrib::get_reverse
//       Access: Published
//  Description: Returns the 'reverse' flag.  If this is true, the
//               actual cull direction (clockwise
//               vs. counterclockwise) is the reverse of what is
//               specified here.  This allows support for
//               make_reverse(), which defines a CullFaceAttrib that
//               reverses whatever the sense of culling would have
//               been.
////////////////////////////////////////////////////////////////////
52
inline bool CullFaceAttrib::get_reverse(void) const;

2834 18 get_effective_mode 0 4 3533 34 CullFaceAttrib::get_effective_mode 0 1 1211 487
////////////////////////////////////////////////////////////////////
//     Function: CullFaceAttrib::get_effective_mode
//       Access: Published
//  Description: Returns the effective culling mode.  This is the same
//               as the actual culling mode, unless the reverse flag
//               is set, which swaps CW for CCW and vice-versa.  Also,
//               M_cull_unchanged is mapped to M_cull_none.
////////////////////////////////////////////////////////////////////
68
CullFaceAttrib::Mode CullFaceAttrib::get_effective_mode(void) const;

2835 14 get_class_slot 0 4 3533 30 CullFaceAttrib::get_class_slot 0 1 1212 0
48
static int CullFaceAttrib::get_class_slot(void);

2836 14 get_class_type 0 4 3533 30 CullFaceAttrib::get_class_type 0 1 1213 0
55
static TypeHandle CullFaceAttrib::get_class_type(void);

2837 15 ~CullFaceAttrib 0 4 3533 31 CullFaceAttrib::~CullFaceAttrib 0 0 0
38
CullFaceAttrib::~CullFaceAttrib(void);

2838 8 GeomNode 0 4 3535 18 GeomNode::GeomNode 0 1 1214 447
////////////////////////////////////////////////////////////////////
//     Function: GeomNode::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GeomNode::Copy Constructor
//       Access: Protected
//  Description:
////////////////////////////////////////////////////////////////////
48
explicit GeomNode::GeomNode(string const &name);

2839 13 set_preserved 0 4 3535 23 GeomNode::set_preserved 0 1 1215 366
////////////////////////////////////////////////////////////////////
//     Function: GeomNode::set_preserved
//       Access: Published
//  Description: Sets the "preserved" flag.  When this is true, the
//               GeomNode will be left untouched by any flatten
//               operations.
////////////////////////////////////////////////////////////////////
48
inline void GeomNode::set_preserved(bool value);

2840 13 get_preserved 0 4 3535 23 GeomNode::get_preserved 0 1 1216 369
////////////////////////////////////////////////////////////////////
//     Function: GeomNode::get_preserved
//       Access: Published
//  Description: Returns the "preserved" flag.  When this is true, the
//               GeomNode will be left untouched by any flatten
//               operations.
////////////////////////////////////////////////////////////////////
48
inline bool GeomNode::get_preserved(void) const;

2841 13 get_num_geoms 0 4 3535 23 GeomNode::get_num_geoms 0 1 1217 263
////////////////////////////////////////////////////////////////////
//     Function: GeomNode::get_num_geoms
//       Access: Published
//  Description: Returns the number of geoms in the node.
////////////////////////////////////////////////////////////////////
47
inline int GeomNode::get_num_geoms(void) const;

2842 8 get_geom 0 4 3535 18 GeomNode::get_geom 0 1 1218 438
////////////////////////////////////////////////////////////////////
//     Function: GeomNode::get_geom
//       Access: Published
//  Description: Returns the nth geom of the node.  This object should
//               not be modified, since the same object might be
//               shared between multiple different GeomNodes, but see
//               modify_geom().
////////////////////////////////////////////////////////////////////
62
inline ConstPointerTo< Geom > GeomNode::get_geom(int n) const;

2843 11 modify_geom 0 4 3535 21 GeomNode::modify_geom 0 1 1219 1031
////////////////////////////////////////////////////////////////////
//     Function: GeomNode::modify_geom
//       Access: Published
//  Description: Returns the nth geom of the node, suitable for
//               modifying it.  If the nth Geom has multiple reference
//               counts to it, reassigns it to an identical copy
//               first, and returns the new copy--this provides a
//               "copy on write" that ensures that the Geom that is
//               returned is unique to this GeomNode and is not shared
//               with any other GeomNodes.
//
//               Note that if this method is called in a downstream
//               stage (for instance, during cull or draw), then it
//               will propagate the new list of Geoms upstream all the
//               way to pipeline stage 0, which may step on changes
//               that were made independently in pipeline stage 0.
//               Use with caution.
////////////////////////////////////////////////////////////////////
54
inline PointerTo< Geom > GeomNode::modify_geom(int n);

2844 14 get_geom_state 0 4 3535 24 GeomNode::get_geom_state 0 1 1220 585
////////////////////////////////////////////////////////////////////
//     Function: GeomNode::get_geom_state
//       Access: Published
//  Description: Returns the RenderState associated with the nth geom
//               of the node.  This is just the RenderState directly
//               associated with the Geom; the actual state in which
//               the Geom is rendered will also be affected by
//               RenderStates that appear on the scene graph in nodes
//               above this GeomNode.
////////////////////////////////////////////////////////////////////
64
inline RenderState const *GeomNode::get_geom_state(int n) const;

2845 14 set_geom_state 0 4 3535 24 GeomNode::set_geom_state 0 1 1221 965
////////////////////////////////////////////////////////////////////
//     Function: GeomNode::set_geom_state
//       Access: Published
//  Description: Changes the RenderState associated with the nth geom
//               of the node.  This is just the RenderState directly
//               associated with the Geom; the actual state in which
//               the Geom is rendered will also be affected by
//               RenderStates that appear on the scene graph in nodes
//               above this GeomNode.
//
//               Note that if this method is called in a downstream
//               stage (for instance, during cull or draw), then it
//               will propagate the new list of Geoms upstream all the
//               way to pipeline stage 0, which may step on changes
//               that were made independently in pipeline stage 0.
//               Use with caution.
////////////////////////////////////////////////////////////////////
70
inline void GeomNode::set_geom_state(int n, RenderState const *state);

2846 8 add_geom 0 4 3535 18 GeomNode::add_geom 0 1 1222 432
////////////////////////////////////////////////////////////////////
//     Function: GeomNode::add_geom
//       Access: Published
//  Description: Adds a new Geom to the node.  The geom is given the
//               indicated state (which may be
//               RenderState::make_empty(), to completely inherit its
//               state from the scene graph).
////////////////////////////////////////////////////////////////////
79
void GeomNode::add_geom(Geom *geom, RenderState const *state = (make_empty()));

2847 14 add_geoms_from 0 4 3535 24 GeomNode::add_geoms_from 0 1 1223 336
////////////////////////////////////////////////////////////////////
//     Function: GeomNode::add_geoms_from
//       Access: Published
//  Description: Copies the Geoms (and their associated RenderStates)
//               from the indicated GeomNode into this one.
////////////////////////////////////////////////////////////////////
53
void GeomNode::add_geoms_from(GeomNode const *other);

2848 8 set_geom 0 4 3535 18 GeomNode::set_geom 0 1 1224 708
////////////////////////////////////////////////////////////////////
//     Function: GeomNode::set_geom
//       Access: Public
//  Description: Replaces the nth Geom of the node with a new pointer.
//               There must already be a Geom in this slot.
//
//               Note that if this method is called in a downstream
//               stage (for instance, during cull or draw), then it
//               will propagate the new list of Geoms upstream all the
//               way to pipeline stage 0, which may step on changes
//               that were made independently in pipeline stage 0.
//               Use with caution.
////////////////////////////////////////////////////////////////////
43
void GeomNode::set_geom(int n, Geom *geom);

2849 11 remove_geom 0 4 3535 21 GeomNode::remove_geom 0 1 1225 256
////////////////////////////////////////////////////////////////////
//     Function: GeomNode::remove_geom
//       Access: Published
//  Description: Removes the nth geom from the node.
////////////////////////////////////////////////////////////////////
41
inline void GeomNode::remove_geom(int n);

2850 16 remove_all_geoms 0 4 3535 26 GeomNode::remove_all_geoms 0 1 1226 270
////////////////////////////////////////////////////////////////////
//     Function: GeomNode::remove_all_geoms
//       Access: Published
//  Description: Removes all the geoms from the node at once.
////////////////////////////////////////////////////////////////////
45
inline void GeomNode::remove_all_geoms(void);

2851 11 check_valid 0 4 3535 21 GeomNode::check_valid 0 1 1227 453
////////////////////////////////////////////////////////////////////
//     Function: GeomNode::check_valid
//       Access: Published
//  Description: Verifies that the each Geom within the GeomNode
//               reference vertices that actually exist within its
//               GeomVertexData.  Returns true if the GeomNode appears
//               to be valid, false otherwise.
////////////////////////////////////////////////////////////////////
39
bool GeomNode::check_valid(void) const;

2852 9 decompose 0 4 3535 19 GeomNode::decompose 0 1 1228 755
////////////////////////////////////////////////////////////////////
//     Function: GeomNode::decompose
//       Access: Published
//  Description: Calls decompose() on each Geom with the GeomNode.
//               This decomposes higher-order primitive types, like
//               triangle strips, into lower-order types like indexed
//               triangles.  Normally there is no reason to do this,
//               but it can be useful as an early preprocessing step,
//               to allow a later call to unify() to proceed more
//               quickly.
//
//               See also SceneGraphReducer::decompose(), which is the
//               normal way this is called.
////////////////////////////////////////////////////////////////////
31
void GeomNode::decompose(void);

2853 5 unify 0 4 3535 15 GeomNode::unify 0 1 1229 1354
////////////////////////////////////////////////////////////////////
//     Function: GeomNode::unify
//       Access: Published
//  Description: Attempts to unify all of the Geoms contained within
//               this node into a single Geom, or at least as few
//               Geoms as possible.  In turn, the individual
//               GeomPrimitives contained within each resulting Geom
//               are also unified.  The goal is to reduce the number
//               of GeomPrimitives within the node as far as possible.
//               This may result in composite primitives, such as
//               triangle strips and triangle fans, being decomposed
//               into triangles.  See also Geom::unify().
//
//               max_indices represents the maximum number of indices
//               that will be put in any one GeomPrimitive.  If
//               preserve_order is true, then the primitives will not
//               be reordered during the operation, even if this
//               results in a suboptimal result.
//
//               In order for this to be successful, the primitives
//               must reference the same GeomVertexData, have the same
//               fundamental primitive type, and have compatible shade
//               models.
////////////////////////////////////////////////////////////////////
59
void GeomNode::unify(int max_indices, bool preserve_order);

2854 11 write_geoms 0 4 3535 21 GeomNode::write_geoms 0 1 1230 294
////////////////////////////////////////////////////////////////////
//     Function: GeomNode::write_geoms
//       Access: Published
//  Description: Writes a short description of all the Geoms in the
//               node.
////////////////////////////////////////////////////////////////////
65
void GeomNode::write_geoms(ostream &out, int indent_level) const;

2855 13 write_verbose 0 4 3535 23 GeomNode::write_verbose 0 1 1231 299
////////////////////////////////////////////////////////////////////
//     Function: GeomNode::write_verbose
//       Access: Published
//  Description: Writes a detailed description of all the Geoms in the
//               node.
////////////////////////////////////////////////////////////////////
67
void GeomNode::write_verbose(ostream &out, int indent_level) const;

2856 24 get_default_collide_mask 0 4 3535 34 GeomNode::get_default_collide_mask 0 1 1232 323
////////////////////////////////////////////////////////////////////
//     Function: GeomNode::get_default_collide_mask
//       Access: Published, Static
//  Description: Returns the default into_collide_mask assigned to new
//               GeomNodes.
////////////////////////////////////////////////////////////////////
67
static inline CollideMask GeomNode::get_default_collide_mask(void);

2857 14 get_class_type 0 4 3535 24 GeomNode::get_class_type 0 1 1233 0
49
static TypeHandle GeomNode::get_class_type(void);

2858 18 ~CullTraverserData 0 4 3536 37 CullTraverserData::~CullTraverserData 0 0 225
////////////////////////////////////////////////////////////////////
//     Function: CullTraverserData::Destructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
51
inline CullTraverserData::~CullTraverserData(void);

2859 4 node 0 4 3536 23 CullTraverserData::node 0 1 1234 260
////////////////////////////////////////////////////////////////////
//     Function: CullTraverserData::node
//       Access: Published
//  Description: Returns the node traversed to so far.
////////////////////////////////////////////////////////////////////
54
inline PandaNode *CullTraverserData::node(void) const;

2860 23 get_modelview_transform 0 4 3536 42 CullTraverserData::get_modelview_transform 0 1 1235 344
////////////////////////////////////////////////////////////////////
//     Function: CullTraverserData::get_modelview_transform
//       Access: Published
//  Description: Returns the modelview transform: the relative
//               transform from the camera to the model.
////////////////////////////////////////////////////////////////////
116
inline ConstPointerTo< TransformState > CullTraverserData::get_modelview_transform(CullTraverser const *trav) const;

2861 22 get_internal_transform 0 4 3536 41 CullTraverserData::get_internal_transform 0 1 1236 354
////////////////////////////////////////////////////////////////////
//     Function: CullTraverserData::get_internal_transform
//       Access: Published
//  Description: Returns the internal transform: the modelview
//               transform in the GSG's internal coordinate system.
////////////////////////////////////////////////////////////////////
115
inline ConstPointerTo< TransformState > CullTraverserData::get_internal_transform(CullTraverser const *trav) const;

2862 17 get_net_transform 0 4 3536 36 CullTraverserData::get_net_transform 0 1 1237 352
////////////////////////////////////////////////////////////////////
//     Function: CullTraverserData::get_net_transform
//       Access: Published
//  Description: Returns the net transform: the relative transform
//               from root of the scene graph to the current node.
////////////////////////////////////////////////////////////////////
99
inline TransformState const *CullTraverserData::get_net_transform(CullTraverser const *trav) const;

2863 10 is_in_view 0 4 3536 29 CullTraverserData::is_in_view 0 1 1238 529
////////////////////////////////////////////////////////////////////
//     Function: CullTraverserData::is_in_view
//       Access: Published
//  Description: Returns true if the current node is within the view
//               frustum, false otherwise.  If the node's bounding
//               volume falls completely within the view frustum, this
//               will also reset the view frustum pointer, saving some
//               work for future nodes.
////////////////////////////////////////////////////////////////////
71
inline bool CullTraverserData::is_in_view(DrawMask const &camera_mask);

2864 19 is_this_node_hidden 0 4 3536 38 CullTraverserData::is_this_node_hidden 0 1 1239 523
////////////////////////////////////////////////////////////////////
//     Function: CullTraverserData::is_this_node_hidden
//       Access: Published
//  Description: Returns true if this particular node is hidden, even
//               though we might be traversing past this node to find
//               a child node that has had show_through() called for
//               it.  If this returns true, the node should not be
//               rendered.
////////////////////////////////////////////////////////////////////
86
inline bool CullTraverserData::is_this_node_hidden(DrawMask const &camera_mask) const;

2865 25 apply_transform_and_state 0 4 3536 44 CullTraverserData::apply_transform_and_state 0 2 1240 1241 814
////////////////////////////////////////////////////////////////////
//     Function: CullTraverserData::apply_transform_and_state
//       Access: Published
//  Description: Applies the transform and state from the current
//               node onto the current data.  This also evaluates
//               billboards, etc.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: CullTraverserData::apply_transform_and_state
//       Access: Published
//  Description: Applies the indicated transform and state changes
//               (e.g. as extracted from a node) onto the current
//               data.  This also evaluates billboards, etc.
////////////////////////////////////////////////////////////////////
317
void CullTraverserData::apply_transform_and_state(CullTraverser *trav);
void CullTraverserData::apply_transform_and_state(CullTraverser *trav, ConstPointerTo< TransformState > node_transform, ConstPointerTo< RenderState > node_state, ConstPointerTo< RenderEffects > node_effects, RenderAttrib const *off_clip_planes);

2866 18 set_display_region 0 4 3537 30 SceneSetup::set_display_region 0 1 1242 273
////////////////////////////////////////////////////////////////////
//     Function: SceneSetup::set_display_region
//       Access: Published
//  Description: Specifies the display region for the scene.
////////////////////////////////////////////////////////////////////
74
inline void SceneSetup::set_display_region(DisplayRegion *display_region);

2867 18 get_display_region 0 4 3537 30 SceneSetup::get_display_region 0 1 1243 271
////////////////////////////////////////////////////////////////////
//     Function: SceneSetup::get_display_region
//       Access: Published
//  Description: Returns the display region for the scene.
////////////////////////////////////////////////////////////////////
65
inline DisplayRegion *SceneSetup::get_display_region(void) const;

2868 17 set_viewport_size 0 4 3537 29 SceneSetup::set_viewport_size 0 1 1244 309
////////////////////////////////////////////////////////////////////
//     Function: SceneSetup::set_viewport_size
//       Access: Published
//  Description: Specifies the size of the viewport (display region),
//               in pixels.
////////////////////////////////////////////////////////////////////
65
inline void SceneSetup::set_viewport_size(int width, int height);

2869 18 get_viewport_width 0 4 3537 30 SceneSetup::get_viewport_width 0 1 1245 308
////////////////////////////////////////////////////////////////////
//     Function: SceneSetup::get_viewport_width
//       Access: Published
//  Description: Returns the width of the viewport (display region) in
//               pixels.
////////////////////////////////////////////////////////////////////
54
inline int SceneSetup::get_viewport_width(void) const;

2870 19 get_viewport_height 0 4 3537 31 SceneSetup::get_viewport_height 0 1 1246 310
////////////////////////////////////////////////////////////////////
//     Function: SceneSetup::get_viewport_height
//       Access: Published
//  Description: Returns the height of the viewport (display region) in
//               pixels.
////////////////////////////////////////////////////////////////////
55
inline int SceneSetup::get_viewport_height(void) const;

2871 14 set_scene_root 0 4 3537 26 SceneSetup::set_scene_root 0 1 1247 263
////////////////////////////////////////////////////////////////////
//     Function: SceneSetup::set_scene_root
//       Access: Published
//  Description: Specifies the root node of the scene.
////////////////////////////////////////////////////////////////////
67
inline void SceneSetup::set_scene_root(NodePath const &scene_root);

2872 14 get_scene_root 0 4 3537 26 SceneSetup::get_scene_root 0 1 1248 261
////////////////////////////////////////////////////////////////////
//     Function: SceneSetup::get_scene_root
//       Access: Published
//  Description: Returns the root node of the scene.
////////////////////////////////////////////////////////////////////
62
inline NodePath const &SceneSetup::get_scene_root(void) const;

2873 15 set_camera_path 0 4 3537 27 SceneSetup::set_camera_path 0 1 1249 264
////////////////////////////////////////////////////////////////////
//     Function: SceneSetup::set_camera_path
//       Access: Published
//  Description: Specifies the NodePath to the camera.
////////////////////////////////////////////////////////////////////
69
inline void SceneSetup::set_camera_path(NodePath const &camera_path);

2874 15 get_camera_path 0 4 3537 27 SceneSetup::get_camera_path 0 1 1250 262
////////////////////////////////////////////////////////////////////
//     Function: SceneSetup::get_camera_path
//       Access: Published
//  Description: Returns the NodePath to the camera.
////////////////////////////////////////////////////////////////////
63
inline NodePath const &SceneSetup::get_camera_path(void) const;

2875 15 set_camera_node 0 4 3537 27 SceneSetup::set_camera_node 0 1 1251 273
////////////////////////////////////////////////////////////////////
//     Function: SceneSetup::set_camera_node
//       Access: Published
//  Description: Specifies the camera used to render the scene.
////////////////////////////////////////////////////////////////////
61
inline void SceneSetup::set_camera_node(Camera *camera_node);

2876 15 get_camera_node 0 4 3537 27 SceneSetup::get_camera_node 0 1 1252 271
////////////////////////////////////////////////////////////////////
//     Function: SceneSetup::get_camera_node
//       Access: Published
//  Description: Returns the camera used to render the scene.
////////////////////////////////////////////////////////////////////
55
inline Camera *SceneSetup::get_camera_node(void) const;

2877 8 set_lens 0 4 3537 20 SceneSetup::set_lens 0 1 1253 269
////////////////////////////////////////////////////////////////////
//     Function: SceneSetup::set_lens
//       Access: Published
//  Description: Indicates the particular Lens used for rendering.
////////////////////////////////////////////////////////////////////
51
inline void SceneSetup::set_lens(Lens const *lens);

2878 8 get_lens 0 4 3537 20 SceneSetup::get_lens 0 1 1254 267
////////////////////////////////////////////////////////////////////
//     Function: SceneSetup::get_lens
//       Access: Published
//  Description: Returns the particular Lens used for rendering.
////////////////////////////////////////////////////////////////////
52
inline Lens const *SceneSetup::get_lens(void) const;

2879 12 set_inverted 0 4 3537 24 SceneSetup::set_inverted 0 1 1255 477
////////////////////////////////////////////////////////////////////
//     Function: SceneSetup::set_inverted
//       Access: Published
//  Description: Changes the current setting of the inverted flag.
//               When this is true, the scene is rendered into the
//               window upside-down and backwards, that is, inverted
//               as if viewed through a mirror placed on the floor.
////////////////////////////////////////////////////////////////////
52
inline void SceneSetup::set_inverted(bool inverted);

2880 12 get_inverted 0 4 3537 24 SceneSetup::get_inverted 0 1 1256 434
////////////////////////////////////////////////////////////////////
//     Function: SceneSetup::get_inverted
//       Access: Published
//  Description: Returns the current setting of the inverted flag.
//               When this is true, the scene is rendered into the
//               window upside-down, flipped like a mirror along the X
//               axis.
////////////////////////////////////////////////////////////////////
49
inline bool SceneSetup::get_inverted(void) const;

2881 15 get_cull_center 0 4 3537 27 SceneSetup::get_cull_center 0 1 1257 469
////////////////////////////////////////////////////////////////////
//     Function: SceneSetup::get_cull_center
//       Access: Published
//  Description: Returns the point from which the culling operations
//               will be performed.  This is normally the camera, but
//               if camera->set_cull_center() has been specified, it
//               will be that special node instead.
////////////////////////////////////////////////////////////////////
63
inline NodePath const &SceneSetup::get_cull_center(void) const;

2882 15 get_cull_bounds 0 4 3537 27 SceneSetup::get_cull_bounds 0 1 1258 521
////////////////////////////////////////////////////////////////////
//     Function: SceneSetup::get_cull_bounds
//       Access: Published
//  Description: Returns the bounding volume that should be used to
//               perform view-frustum culling (in the space of
//               get_cull_center()).  This is normally the current
//               lens' bounding volume, but it may be overridden with
//               Camera::set_cull_bounds().
////////////////////////////////////////////////////////////////////
75
inline PointerTo< BoundingVolume > SceneSetup::get_cull_bounds(void) const;

2883 17 set_initial_state 0 4 3537 29 SceneSetup::set_initial_state 0 1 1259 378
////////////////////////////////////////////////////////////////////
//     Function: SceneSetup::set_initial_state
//       Access: Published
//  Description: Sets the initial state which is applied to all nodes
//               in the scene, as if it were set at the top of the
//               scene graph.
////////////////////////////////////////////////////////////////////
76
inline void SceneSetup::set_initial_state(RenderState const *initial_state);

2884 17 get_initial_state 0 4 3537 29 SceneSetup::get_initial_state 0 1 1260 321
////////////////////////////////////////////////////////////////////
//     Function: SceneSetup::get_initial_state
//       Access: Published
//  Description: Returns the initial state as set by a previous call
//               to set_initial_state().
////////////////////////////////////////////////////////////////////
68
inline RenderState const *SceneSetup::get_initial_state(void) const;

2885 20 set_camera_transform 0 4 3537 32 SceneSetup::set_camera_transform 0 1 1261 316
////////////////////////////////////////////////////////////////////
//     Function: SceneSetup::set_camera_transform
//       Access: Published
//  Description: Specifies the position of the camera relative to the
//               starting node.
////////////////////////////////////////////////////////////////////
85
inline void SceneSetup::set_camera_transform(TransformState const *camera_transform);

2886 20 get_camera_transform 0 4 3537 32 SceneSetup::get_camera_transform 0 1 1262 314
////////////////////////////////////////////////////////////////////
//     Function: SceneSetup::get_camera_transform
//       Access: Published
//  Description: Returns the position of the camera relative to the
//               starting node.
////////////////////////////////////////////////////////////////////
74
inline TransformState const *SceneSetup::get_camera_transform(void) const;

2887 19 set_world_transform 0 4 3537 31 SceneSetup::set_world_transform 0 1 1263 378
////////////////////////////////////////////////////////////////////
//     Function: SceneSetup::set_world_transform
//       Access: Published
//  Description: Specifies the position of the starting node relative
//               to the camera.  This is the inverse of the camera
//               transform.
////////////////////////////////////////////////////////////////////
83
inline void SceneSetup::set_world_transform(TransformState const *world_transform);

2888 19 get_world_transform 0 4 3537 31 SceneSetup::get_world_transform 0 1 1264 376
////////////////////////////////////////////////////////////////////
//     Function: SceneSetup::get_world_transform
//       Access: Published
//  Description: Returns the position of the starting node relative
//               to the camera.  This is the inverse of the camera
//               transform.
////////////////////////////////////////////////////////////////////
73
inline TransformState const *SceneSetup::get_world_transform(void) const;

2889 16 set_cs_transform 0 4 3537 28 SceneSetup::set_cs_transform 0 1 1265 345
////////////////////////////////////////////////////////////////////
//     Function: SceneSetup::set_cs_transform
//       Access: Published
//  Description: Specifies the transform from the camera's coordinate
//               system to the GSG's internal coordinate system.
////////////////////////////////////////////////////////////////////
77
inline void SceneSetup::set_cs_transform(TransformState const *cs_transform);

2890 16 get_cs_transform 0 4 3537 28 SceneSetup::get_cs_transform 0 1 1266 343
////////////////////////////////////////////////////////////////////
//     Function: SceneSetup::get_cs_transform
//       Access: Published
//  Description: Returns the transform from the camera's coordinate
//               system to the GSG's internal coordinate system.
////////////////////////////////////////////////////////////////////
70
inline TransformState const *SceneSetup::get_cs_transform(void) const;

2891 22 set_cs_world_transform 0 4 3537 34 SceneSetup::set_cs_world_transform 0 1 1267 378
////////////////////////////////////////////////////////////////////
//     Function: SceneSetup::set_cs_world_transform
//       Access: Published
//  Description: Specifies the position from the starting node
//               relative to the camera, in the GSG's internal
//               coordinate system.
////////////////////////////////////////////////////////////////////
89
inline void SceneSetup::set_cs_world_transform(TransformState const *cs_world_transform);

2892 22 get_cs_world_transform 0 4 3537 34 SceneSetup::get_cs_world_transform 0 1 1268 376
////////////////////////////////////////////////////////////////////
//     Function: SceneSetup::get_cs_world_transform
//       Access: Published
//  Description: Returns the position from the starting node
//               relative to the camera, in the GSG's internal
//               coordinate system.
////////////////////////////////////////////////////////////////////
76
inline TransformState const *SceneSetup::get_cs_world_transform(void) const;

2893 14 get_class_type 0 4 3537 26 SceneSetup::get_class_type 0 1 1269 0
51
static TypeHandle SceneSetup::get_class_type(void);

2894 11 ~SceneSetup 0 4 3537 23 SceneSetup::~SceneSetup 0 0 0
30
SceneSetup::~SceneSetup(void);

2895 3 Fog 0 4 3538 8 Fog::Fog 0 1 1270 437
////////////////////////////////////////////////////////////////////
//     Function: Fog::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Fog::Copy Constructor
//       Access: Protected
//  Description:
////////////////////////////////////////////////////////////////////
29
Fog::Fog(string const &name);

2896 8 get_mode 0 4 3538 13 Fog::get_mode 0 1 1271 212
////////////////////////////////////////////////////////////////////
//     Function: Fog::get_mode
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
43
inline Fog::Mode Fog::get_mode(void) const;

2897 8 set_mode 0 4 3538 13 Fog::set_mode 0 1 1272 934
////////////////////////////////////////////////////////////////////
//     Function: Fog::set_mode
//       Access: Published
//  Description: Specifies the computation that is used to determine
//               the fog effect.  If this is M_linear, then the fog
//               will range from linearly from the onset point to the
//               opaque point (or for the distances specified in
//               set_linear_range), and the fog object should be
//               parented into the scene graph, or to the camera.
//
//               If this is anything else, the onset point and opaque
//               point are not used, and the fog effect is based on
//               the value specified to set_exp_density(), and it
//               doesn't matter to which node the fog object is
//               parented, or if it is parented anywhere at all.
////////////////////////////////////////////////////////////////////
42
inline void Fog::set_mode(Fog::Mode mode);

2898 9 get_color 0 4 3538 14 Fog::get_color 0 1 1273 243
////////////////////////////////////////////////////////////////////
//     Function: Fog::get_color
//       Access: Published
//  Description: Returns the color of the fog.
////////////////////////////////////////////////////////////////////
48
inline LColor const &Fog::get_color(void) const;

2899 9 set_color 0 4 3538 14 Fog::set_color 0 2 1274 1275 533
////////////////////////////////////////////////////////////////////
//     Function: Fog::set_color
//       Access: Published
//  Description: Sets the color of the fog.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Fog::set_color
//       Access: Published
//  Description: Sets the color of the fog.  The alpha component is
//               not used.
////////////////////////////////////////////////////////////////////
121
inline void Fog::set_color(PN_stdfloat r, PN_stdfloat g, PN_stdfloat b);
inline void Fog::set_color(LColor const &color);

2900 16 set_linear_range 0 4 3538 21 Fog::set_linear_range 0 1 1276 711
////////////////////////////////////////////////////////////////////
//     Function: Fog::set_linear_range
//       Access: Published
//  Description: Specifies the effects of the fog in linear distance
//               units.  This is only used if the mode is M_linear.
//
//               This specifies a fog that begins at distance onset
//               units from the origin, and becomes totally opaque at
//               distance opaque units from the origin, along the
//               forward axis (usually Y).
//
//               This function also implicitly sets the mode the
//               M_linear, if it is not already set.
////////////////////////////////////////////////////////////////////
73
inline void Fog::set_linear_range(PN_stdfloat onset, PN_stdfloat opaque);

2901 22 get_linear_onset_point 0 4 3538 27 Fog::get_linear_onset_point 0 1 1277 338
////////////////////////////////////////////////////////////////////
//     Function: Fog::get_linear_onset_point
//       Access: Published
//  Description: Returns the point in space at which the fog begins.
//               This is only used if the mode is M_linear.
////////////////////////////////////////////////////////////////////
62
inline LPoint3 const &Fog::get_linear_onset_point(void) const;

2902 22 set_linear_onset_point 0 4 3538 27 Fog::set_linear_onset_point 0 2 1278 1279 682
////////////////////////////////////////////////////////////////////
//     Function: Fog::set_linear_onset_point
//       Access: Published
//  Description: Specifies the point in space at which the fog begins.
//               This is only used if the mode is M_linear.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Fog::set_linear_onset_point
//       Access: Published
//  Description: Specifies the point in space at which the fog begins.
//               This is only used if the mode is M_linear.
////////////////////////////////////////////////////////////////////
161
inline void Fog::set_linear_onset_point(PN_stdfloat x, PN_stdfloat y, PN_stdfloat z);
inline void Fog::set_linear_onset_point(LPoint3 const &linear_onset_point);

2903 23 get_linear_opaque_point 0 4 3538 28 Fog::get_linear_opaque_point 0 1 1280 379
////////////////////////////////////////////////////////////////////
//     Function: Fog::get_linear_opaque_point
//       Access: Published
//  Description: Returns the point in space at which the fog
//               completely obscures geometry.  This is only used if
//               the mode is M_linear.
////////////////////////////////////////////////////////////////////
63
inline LPoint3 const &Fog::get_linear_opaque_point(void) const;

2904 23 set_linear_opaque_point 0 4 3538 28 Fog::set_linear_opaque_point 0 2 1281 1282 764
////////////////////////////////////////////////////////////////////
//     Function: Fog::set_linear_opaque_point
//       Access: Published
//  Description: Specifies the point in space at which the fog
//               completely obscures geometry.  This is only used if
//               the mode is M_linear.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Fog::set_linear_opaque_point
//       Access: Published
//  Description: Specifies the point in space at which the fog
//               completely obscures geometry.  This is only used if
//               the mode is M_linear.
////////////////////////////////////////////////////////////////////
164
inline void Fog::set_linear_opaque_point(LPoint3 const &linear_opaque_point);
inline void Fog::set_linear_opaque_point(PN_stdfloat x, PN_stdfloat y, PN_stdfloat z);

2905 19 set_linear_fallback 0 4 3538 24 Fog::set_linear_fallback 0 1 1283 2210
////////////////////////////////////////////////////////////////////
//     Function: Fog::set_linear_fallback
//       Access: Published
//  Description: Fog effects are traditionally defined in
//               camera-relative space, but the Panda Fog node has a
//               special mode in which it can define a linear fog
//               effect in an arbitrary coordinate space.
//
//               This is done by specifying 3-d onset and opaque
//               points, and parenting the Fog object somewhere within
//               the scene graph.  In this mode, the fog will be
//               rendered as if it extended along the vector from the
//               onset point to the opaque point, in 3-d space.
//
//               However, the underlying fog effect supported by
//               hardware is generally only one-dimensional, and must
//               be rendered based on linear distance from the camera
//               plane.  Thus, this in-the-world effect is most
//               effective when the fog vector from onset point to
//               opaque point is most nearly parallel to the camera's
//               eye vector.
//
//               As the angle between the fog vector and the eye
//               vector increases, the accuracy of the effect
//               diminishes, up to a complete breakdown of the effect
//               at a 90 degree angle.
//
//               This function exists to define the workaround to this
//               problem.  The linear fallback parameters given here
//               specify how the fog should be rendered when the
//               parameters are exceeded in this way.
//
//               The angle parameter is the minimum angle, in degrees,
//               of the fog vector to the eye vector, at which the
//               fallback effect should be employed.  The onset and
//               opaque parameters specify the camera-relative onset
//               and opaque distances to pass to the rendering
//               hardware when employing the fallback effect.  This
//               supercedes the 3-d onset point and opaque points.
////////////////////////////////////////////////////////////////////
95
inline void Fog::set_linear_fallback(PN_stdfloat angle, PN_stdfloat onset, PN_stdfloat opaque);

2906 15 get_exp_density 0 4 3538 20 Fog::get_exp_density 0 1 1284 362
////////////////////////////////////////////////////////////////////
//     Function: Fog::get_exp_density
//       Access: Published
//  Description: Returns the density of the fog for exponential
//               calculations.  This is only used if the mode is not
//               M_linear.
////////////////////////////////////////////////////////////////////
52
inline PN_stdfloat Fog::get_exp_density(void) const;

2907 15 set_exp_density 0 4 3538 20 Fog::set_exp_density 0 1 1285 489
////////////////////////////////////////////////////////////////////
//     Function: Fog::set_exp_density
//       Access: Published
//  Description: Sets the density of the fog for exponential
//               calculations.  This is only used if the mode is not
//               M_linear.
//
//               If the mode is currently set to M_linear, this
//               function implicitly sets it to M_exponential.
////////////////////////////////////////////////////////////////////
58
inline void Fog::set_exp_density(PN_stdfloat exp_density);

2908 14 get_class_type 0 4 3538 19 Fog::get_class_type 0 1 1286 0
44
static TypeHandle Fog::get_class_type(void);

2909 4 make 0 4 3540 15 FogAttrib::make 0 1 1287 329
////////////////////////////////////////////////////////////////////
//     Function: FogAttrib::make
//       Access: Published, Static
//  Description: Constructs a new FogAttrib object suitable for
//               rendering the indicated fog onto geometry.
////////////////////////////////////////////////////////////////////
64
static ConstPointerTo< RenderAttrib > FogAttrib::make(Fog *fog);

2910 8 make_off 0 4 3540 19 FogAttrib::make_off 0 1 1288 317
////////////////////////////////////////////////////////////////////
//     Function: FogAttrib::make_off
//       Access: Published, Static
//  Description: Constructs a new FogAttrib object suitable for
//               rendering unfogd geometry.
////////////////////////////////////////////////////////////////////
64
static ConstPointerTo< RenderAttrib > FogAttrib::make_off(void);

2911 12 make_default 0 4 3540 23 FogAttrib::make_default 0 1 1289 396
////////////////////////////////////////////////////////////////////
//     Function: FogAttrib::make_default
//       Access: Published, Static
//  Description: Returns a RenderAttrib that corresponds to whatever
//               the standard default properties for render attributes
//               of this type ought to be.
////////////////////////////////////////////////////////////////////
68
static ConstPointerTo< RenderAttrib > FogAttrib::make_default(void);

2912 6 is_off 0 4 3540 17 FogAttrib::is_off 0 1 1290 325
////////////////////////////////////////////////////////////////////
//     Function: FogAttrib::is_off
//       Access: Published
//  Description: Returns true if the FogAttrib is an 'off' FogAttrib,
//               indicating that it should disable fog.
////////////////////////////////////////////////////////////////////
42
inline bool FogAttrib::is_off(void) const;

2913 7 get_fog 0 4 3540 18 FogAttrib::get_fog 0 1 1291 356
////////////////////////////////////////////////////////////////////
//     Function: FogAttrib::get_fog
//       Access: Published
//  Description: If the FogAttrib is not an 'off' FogAttrib,
//               returns the fog that is associated.  Otherwise,
//               return NULL.
////////////////////////////////////////////////////////////////////
43
inline Fog *FogAttrib::get_fog(void) const;

2914 14 get_class_slot 0 4 3540 25 FogAttrib::get_class_slot 0 1 1292 0
43
static int FogAttrib::get_class_slot(void);

2915 14 get_class_type 0 4 3540 25 FogAttrib::get_class_type 0 1 1293 0
50
static TypeHandle FogAttrib::get_class_type(void);

2916 10 ~FogAttrib 0 4 3540 21 FogAttrib::~FogAttrib 0 0 0
28
FogAttrib::~FogAttrib(void);

2917 13 CullTraverser 0 4 3541 28 CullTraverser::CullTraverser 0 2 1294 1295 457
////////////////////////////////////////////////////////////////////
//     Function: CullTraverser::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: CullTraverser::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
92
CullTraverser::CullTraverser(void);
CullTraverser::CullTraverser(CullTraverser const &copy);

2918 7 get_gsg 0 4 3541 22 CullTraverser::get_gsg 0 1 1296 266
////////////////////////////////////////////////////////////////////
//     Function: CullTraverser::get_gsg
//       Access: Published
//  Description: Returns the GraphicsStateGuardian in effect.
////////////////////////////////////////////////////////////////////
69
inline GraphicsStateGuardianBase *CullTraverser::get_gsg(void) const;

2919 18 get_current_thread 0 4 3541 33 CullTraverser::get_current_thread 0 1 1297 340
////////////////////////////////////////////////////////////////////
//     Function: CullTraverser::get_current_thread
//       Access: Published
//  Description: Returns the currently-executing thread object, as
//               passed to the CullTraverser constructor.
////////////////////////////////////////////////////////////////////
61
inline Thread *CullTraverser::get_current_thread(void) const;

2920 9 set_scene 0 6 3541 24 CullTraverser::set_scene 0 1 1298 388
////////////////////////////////////////////////////////////////////
//     Function: CullTraverser::set_scene
//       Access: Published, Virtual
//  Description: Sets the SceneSetup object that indicates the initial
//               camera position, etc.  This must be called before
//               traversal begins.
////////////////////////////////////////////////////////////////////
122
virtual void CullTraverser::set_scene(SceneSetup *scene_setup, GraphicsStateGuardianBase *gsg, bool dr_incomplete_render);

2921 9 get_scene 0 4 3541 24 CullTraverser::get_scene 0 1 1299 254
////////////////////////////////////////////////////////////////////
//     Function: CullTraverser::get_scene
//       Access: Published
//  Description: Returns the SceneSetup object.
////////////////////////////////////////////////////////////////////
56
inline SceneSetup *CullTraverser::get_scene(void) const;

2922 17 has_tag_state_key 0 4 3541 32 CullTraverser::has_tag_state_key 0 1 1300 349
////////////////////////////////////////////////////////////////////
//     Function: CullTraverser::has_tag_state_key
//       Access: Published
//  Description: Returns true if a nonempty tag state key has been
//               specified for the scene's camera, false otherwise.
////////////////////////////////////////////////////////////////////
57
inline bool CullTraverser::has_tag_state_key(void) const;

2923 17 get_tag_state_key 0 4 3541 32 CullTraverser::get_tag_state_key 0 1 1301 330
////////////////////////////////////////////////////////////////////
//     Function: CullTraverser::get_tag_state_key
//       Access: Published
//  Description: Returns the tag state key that has been specified for
//               the scene's camera, if any.
////////////////////////////////////////////////////////////////////
66
inline string const &CullTraverser::get_tag_state_key(void) const;

2924 15 set_camera_mask 0 4 3541 30 CullTraverser::set_camera_mask 0 1 1302 571
////////////////////////////////////////////////////////////////////
//     Function: CullTraverser::set_camera_mask
//       Access: Published
//  Description: Changes the visibility mask for the camera viewing
//               the scene.  This is normally set automatically
//               at the time setup_scene() is called; you should
//               change this only if you want to render some set of
//               objects different from what the camera normally would
//               draw.
////////////////////////////////////////////////////////////////////
72
inline void CullTraverser::set_camera_mask(DrawMask const &camera_mask);

2925 15 get_camera_mask 0 4 3541 30 CullTraverser::get_camera_mask 0 1 1303 309
////////////////////////////////////////////////////////////////////
//     Function: CullTraverser::get_camera_mask
//       Access: Published
//  Description: Returns the visibility mask from the camera viewing
//               the scene.
////////////////////////////////////////////////////////////////////
66
inline DrawMask const &CullTraverser::get_camera_mask(void) const;

2926 20 get_camera_transform 0 4 3541 35 CullTraverser::get_camera_transform 0 1 1304 317
////////////////////////////////////////////////////////////////////
//     Function: CullTraverser::get_camera_transform
//       Access: Published
//  Description: Returns the position of the camera relative to the
//               starting node.
////////////////////////////////////////////////////////////////////
77
inline TransformState const *CullTraverser::get_camera_transform(void) const;

2927 19 get_world_transform 0 4 3541 34 CullTraverser::get_world_transform 0 1 1305 689
////////////////////////////////////////////////////////////////////
//     Function: CullTraverser::get_world_transform
//       Access: Published
//  Description: Returns the position of the starting node relative
//               to the camera.  This is the inverse of the camera
//               transform.
//
//               Note that this value is always the position of the
//               starting node, not the current node, even if it is
//               sampled during a traversal.  To get the transform of
//               the current node use
//               CullTraverserData::get_modelview_transform().
////////////////////////////////////////////////////////////////////
76
inline TransformState const *CullTraverser::get_world_transform(void) const;

2928 17 get_initial_state 0 4 3541 32 CullTraverser::get_initial_state 0 1 1306 401
////////////////////////////////////////////////////////////////////
//     Function: CullTraverser::get_initial_state
//       Access: Published
//  Description: Returns the initial RenderState at the top of the
//               scene graph we are traversing, or the empty state if
//               the initial state was never set.
////////////////////////////////////////////////////////////////////
71
inline RenderState const *CullTraverser::get_initial_state(void) const;

2929 23 get_depth_offset_decals 0 4 3541 38 CullTraverser::get_depth_offset_decals 0 1 1307 337
////////////////////////////////////////////////////////////////////
//     Function: CullTraverser::get_depth_offset_decals
//       Access: Published
//  Description: Returns true, as depth offsets are the only way
//               that we implement decals nowadays.
////////////////////////////////////////////////////////////////////
63
inline bool CullTraverser::get_depth_offset_decals(void) const;

2930 16 set_view_frustum 0 4 3541 31 CullTraverser::set_view_frustum 0 1 1308 405
////////////////////////////////////////////////////////////////////
//     Function: CullTraverser::set_view_frustum
//       Access: Published
//  Description: Specifies the bounding volume that corresponds to the
//               view frustum.  Any primitives that fall entirely
//               outside of this volume are not drawn.
////////////////////////////////////////////////////////////////////
83
inline void CullTraverser::set_view_frustum(GeometricBoundingVolume *view_frustum);

2931 16 get_view_frustum 0 4 3541 31 CullTraverser::get_view_frustum 0 1 1309 764
////////////////////////////////////////////////////////////////////
//     Function: CullTraverser::get_view_frustum
//       Access: Published
//  Description: Returns the bounding volume that corresponds to the
//               view frustum, or NULL if the view frustum is not in
//               use or has not been set.
//
//               Note that the view frustum returned here is always in
//               the coordinate space of the starting node, not the
//               current node, even if it is sampled during a
//               traversal.  To get the view frustum in the current
//               node's coordinate space, check in the current
//               CullTraverserData.
////////////////////////////////////////////////////////////////////
76
inline GeometricBoundingVolume *CullTraverser::get_view_frustum(void) const;

2932 16 set_cull_handler 0 4 3541 31 CullTraverser::set_cull_handler 0 1 1310 349
////////////////////////////////////////////////////////////////////
//     Function: CullTraverser::set_cull_handler
//       Access: Published
//  Description: Specifies the object that will receive the culled
//               Geoms.  This must be set before calling traverse().
////////////////////////////////////////////////////////////////////
71
inline void CullTraverser::set_cull_handler(CullHandler *cull_handler);

2933 16 get_cull_handler 0 4 3541 31 CullTraverser::get_cull_handler 0 1 1311 302
////////////////////////////////////////////////////////////////////
//     Function: CullTraverser::get_cull_handler
//       Access: Published
//  Description: Returns the object that will receive the culled
//               Geoms.
////////////////////////////////////////////////////////////////////
64
inline CullHandler *CullTraverser::get_cull_handler(void) const;

2934 18 set_portal_clipper 0 4 3541 33 CullTraverser::set_portal_clipper 0 1 1312 344
////////////////////////////////////////////////////////////////////
//     Function: CullTraverser::set_portal_clipper
//       Access: Published
//  Description: Specifies _portal_clipper object pointer that
//               subsequent traverse() or traverse_below may use.
////////////////////////////////////////////////////////////////////
77
inline void CullTraverser::set_portal_clipper(PortalClipper *portal_clipper);

2935 18 get_portal_clipper 0 4 3541 33 CullTraverser::get_portal_clipper 0 1 1313 268
////////////////////////////////////////////////////////////////////
//     Function: CullTraverser::get_portal_clipper
//       Access: Published
//  Description: Returns the _portal_clipper pointer
////////////////////////////////////////////////////////////////////
68
inline PortalClipper *CullTraverser::get_portal_clipper(void) const;

2936 31 get_effective_incomplete_render 0 4 3541 46 CullTraverser::get_effective_incomplete_render 0 1 1314 666
////////////////////////////////////////////////////////////////////
//     Function: CullTraverser::get_effective_incomplete_render
//       Access: Published
//  Description: Returns true if the cull traversal is effectively in
//               incomplete_render state, considering both the GSG's
//               incomplete_render and the current DisplayRegion's
//               incomplete_render flags.  This returns the flag
//               during the cull traversal; see
//               GSG::get_effective_incomplete_render() for this same
//               flag during the draw traversal.
////////////////////////////////////////////////////////////////////
71
inline bool CullTraverser::get_effective_incomplete_render(void) const;

2937 8 traverse 0 4 3541 23 CullTraverser::traverse 0 2 1315 1316 671
////////////////////////////////////////////////////////////////////
//     Function: CullTraverser::traverse
//       Access: Published
//  Description: Begins the traversal from the indicated node.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: CullTraverser::traverse
//       Access: Published
//  Description: Traverses from the next node with the given
//               data, which has been constructed with the node but
//               has not yet been converted into the node's space.
////////////////////////////////////////////////////////////////////
106
void CullTraverser::traverse(NodePath const &root);
void CullTraverser::traverse(CullTraverserData &data);

2938 14 traverse_below 0 6 3541 29 CullTraverser::traverse_below 0 1 1317 390
////////////////////////////////////////////////////////////////////
//     Function: CullTraverser::traverse_below
//       Access: Published, Virtual
//  Description: Traverses all the children of the indicated node,
//               with the given data, which has been converted into
//               the node's space.
////////////////////////////////////////////////////////////////////
68
virtual void CullTraverser::traverse_below(CullTraverserData &data);

2939 12 end_traverse 0 6 3541 27 CullTraverser::end_traverse 0 1 1318 397
////////////////////////////////////////////////////////////////////
//     Function: CullTraverser::end_traverse
//       Access: Published, Virtual
//  Description: Should be called when the traverser has finished
//               traversing its scene, this gives it a chance to do
//               any necessary finalization.
////////////////////////////////////////////////////////////////////
47
virtual void CullTraverser::end_traverse(void);

2940 11 flush_level 0 4 3541 26 CullTraverser::flush_level 0 1 1319 284
////////////////////////////////////////////////////////////////////
//     Function: CullTraverser::flush_level
//       Access: Published, Static
//  Description: Flushes the PStatCollectors used during traversal.
////////////////////////////////////////////////////////////////////
52
static inline void CullTraverser::flush_level(void);

2941 20 draw_bounding_volume 0 4 3541 35 CullTraverser::draw_bounding_volume 0 1 1320 320
////////////////////////////////////////////////////////////////////
//     Function: CullTraverser::draw_bounding_volume
//       Access: Published
//  Description: Draws an appropriate visualization of the indicated
//               bounding volume.
////////////////////////////////////////////////////////////////////
116
void CullTraverser::draw_bounding_volume(BoundingVolume const *vol, TransformState const *internal_transform) const;

2942 14 get_class_type 0 4 3541 29 CullTraverser::get_class_type 0 1 1321 0
54
static TypeHandle CullTraverser::get_class_type(void);

2943 14 ~CullTraverser 0 4 3541 29 CullTraverser::~CullTraverser 0 0 0
36
CullTraverser::~CullTraverser(void);

2944 10 get_object 0 4 3542 32 GeomDrawCallbackData::get_object 0 1 1322 312
////////////////////////////////////////////////////////////////////
//     Function: GeomDrawCallbackData::get_object
//       Access: Published
//  Description: Returns a pointer to the particular object that is
//               being drawn.
////////////////////////////////////////////////////////////////////
68
inline CullableObject *GeomDrawCallbackData::get_object(void) const;

2945 7 get_gsg 0 4 3542 29 GeomDrawCallbackData::get_gsg 0 1 1323 266
////////////////////////////////////////////////////////////////////
//     Function: GeomDrawCallbackData::get_gsg
//       Access: Published
//  Description: Returns a pointer to the current GSG.
////////////////////////////////////////////////////////////////////
76
inline GraphicsStateGuardianBase *GeomDrawCallbackData::get_gsg(void) const;

2946 9 get_force 0 4 3542 31 GeomDrawCallbackData::get_force 0 1 1324 525
////////////////////////////////////////////////////////////////////
//     Function: GeomDrawCallbackData::get_force
//       Access: Published
//  Description: Returns true if any required data should be forced
//               into memory if necessary to render the object, or
//               false if the object should be omitted if some of the
//               data is not available (at least until the data
//               becomes available later).
////////////////////////////////////////////////////////////////////
56
inline bool GeomDrawCallbackData::get_force(void) const;

2947 14 set_lost_state 0 4 3542 36 GeomDrawCallbackData::set_lost_state 0 1 1325 807
////////////////////////////////////////////////////////////////////
//     Function: GeomDrawCallbackData::set_lost_state
//       Access: Published
//  Description: Sets the lost_state flag.  If this is true, the
//               callback does not have to be quite so careful to
//               clean up after itself; Panda will assume that the
//               graphics state is in an unknown state after the
//               callback has finished, and will issue all the
//               necessary calls to restore it.  If this is false,
//               Panda will assume the callback will leave the
//               graphics state exactly as it came in, and won't
//               bother to try to restore it.  The default is true.
////////////////////////////////////////////////////////////////////
66
inline void GeomDrawCallbackData::set_lost_state(bool lost_state);

2948 14 get_lost_state 0 4 3542 36 GeomDrawCallbackData::get_lost_state 0 1 1326 287
////////////////////////////////////////////////////////////////////
//     Function: GeomDrawCallbackData::get_lost_state
//       Access: Published
//  Description: Returns the lost_state flag.  See set_lost_state().
////////////////////////////////////////////////////////////////////
61
inline bool GeomDrawCallbackData::get_lost_state(void) const;

2949 14 get_class_type 0 4 3542 36 GeomDrawCallbackData::get_class_type 0 1 1327 0
61
static TypeHandle GeomDrawCallbackData::get_class_type(void);

2950 21 ~GeomDrawCallbackData 0 4 3542 43 GeomDrawCallbackData::~GeomDrawCallbackData 0 0 0
50
GeomDrawCallbackData::~GeomDrawCallbackData(void);

2951 9 make_next 0 4 3544 21 CullResult::make_next 0 1 1328 440
////////////////////////////////////////////////////////////////////
//     Function: CullResult::make_next
//       Access: Published
//  Description: Returns a newly-allocated CullResult object that
//               contains a copy of just the subset of the data from
//               this CullResult object that is worth keeping around
//               for next frame.
////////////////////////////////////////////////////////////////////
58
PointerTo< CullResult > CullResult::make_next(void) const;

2952 7 get_bin 0 4 3544 19 CullResult::get_bin 0 1 1329 505
////////////////////////////////////////////////////////////////////
//     Function: CullResult::get_bin
//       Access: Public
//  Description: Returns the CullBin associated with the indicated
//               bin_index, or NULL if the bin_index is invalid.  If
//               there is the first time this bin_index has been
//               requested for this CullResult, creates a new CullBin
//               object on the fly.
////////////////////////////////////////////////////////////////////
51
inline CullBin *CullResult::get_bin(int bin_index);

2953 10 add_object 0 4 3544 22 CullResult::add_object 0 1 1330 394
////////////////////////////////////////////////////////////////////
//     Function: CullResult::add_object
//       Access: Published
//  Description: Adds the indicated CullableObject to the appropriate
//               bin.  The bin becomes the owner of the object
//               pointer, and will eventually delete it.
////////////////////////////////////////////////////////////////////
84
void CullResult::add_object(CullableObject *object, CullTraverser const *traverser);

2954 11 finish_cull 0 4 3544 23 CullResult::finish_cull 0 1 1331 493
////////////////////////////////////////////////////////////////////
//     Function: CullResult::finish_cull
//       Access: Published
//  Description: Called after all the geoms have been added, this
//               indicates that the cull process is finished for this
//               frame and gives the bins a chance to do any
//               post-processing (like sorting) before moving on to
//               draw.
////////////////////////////////////////////////////////////////////
78
void CullResult::finish_cull(SceneSetup *scene_setup, Thread *current_thread);

2955 4 draw 0 4 3544 16 CullResult::draw 0 1 1332 291
////////////////////////////////////////////////////////////////////
//     Function: CullResult::draw
//       Access: Published
//  Description: Asks all the bins to draw themselves in the correct
//               order.
////////////////////////////////////////////////////////////////////
46
void CullResult::draw(Thread *current_thread);

2956 17 make_result_graph 0 4 3544 29 CullResult::make_result_graph 0 1 1333 865
////////////////////////////////////////////////////////////////////
//     Function: CullResult::make_result_graph
//       Access: Published
//  Description: Returns a special scene graph constructed to
//               represent the results of the cull.  This will be a
//               hierarchy of nodes, one node for each bin, each of
//               which will in term be a parent of a number of
//               GeomNodes, representing the geometry drawn in each
//               bin.
//
//               This is useful mainly for high-level debugging and
//               abstraction tools; it should not be mistaken for the
//               low-level cull result itself.  For the low-level cull
//               result, use draw() to efficiently draw the culled
//               scene.
////////////////////////////////////////////////////////////////////
59
PointerTo< PandaNode > CullResult::make_result_graph(void);

2957 14 get_class_type 0 4 3544 26 CullResult::get_class_type 0 1 1334 0
51
static TypeHandle CullResult::get_class_type(void);

2958 4 make 0 4 3546 17 DecalEffect::make 0 1 1335 261
////////////////////////////////////////////////////////////////////
//     Function: DecalEffect::make
//       Access: Published, Static
//  Description: Constructs a new DecalEffect object.
////////////////////////////////////////////////////////////////////
62
static ConstPointerTo< RenderEffect > DecalEffect::make(void);

2959 14 get_class_type 0 4 3546 27 DecalEffect::get_class_type 0 1 1336 0
52
static TypeHandle DecalEffect::get_class_type(void);

2960 12 ~DecalEffect 0 4 3546 25 DecalEffect::~DecalEffect 0 0 0
32
DecalEffect::~DecalEffect(void);

2961 4 make 0 4 3547 23 DepthOffsetAttrib::make 0 2 1337 1338 1064
////////////////////////////////////////////////////////////////////
//     Function: DepthOffsetAttrib::make
//       Access: Published, Static
//  Description: Constructs a new DepthOffsetAttrib object that
//               indicates the relative amount of bias to write to the
//               depth buffer for subsequent geometry.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: DepthOffsetAttrib::make
//       Access: Published, Static
//  Description: Constructs a new DepthOffsetAttrib object that
//               indicates the bias, and also specifies a minimum and
//               maximum (or, more precisely, nearest and farthest)
//               values to write to the depth buffer, in the range 0
//               .. 1.  This range is 0, 1 by default; setting it to
//               some other range can be used to create additional
//               depth buffer effects.
////////////////////////////////////////////////////////////////////
199
static ConstPointerTo< RenderAttrib > DepthOffsetAttrib::make(int offset = 1);
static ConstPointerTo< RenderAttrib > DepthOffsetAttrib::make(int offset, PN_stdfloat min_value, PN_stdfloat max_value);

2962 12 make_default 0 4 3547 31 DepthOffsetAttrib::make_default 0 1 1339 404
////////////////////////////////////////////////////////////////////
//     Function: DepthOffsetAttrib::make_default
//       Access: Published, Static
//  Description: Returns a RenderAttrib that corresponds to whatever
//               the standard default properties for render attributes
//               of this type ought to be.
////////////////////////////////////////////////////////////////////
76
static ConstPointerTo< RenderAttrib > DepthOffsetAttrib::make_default(void);

2963 10 get_offset 0 4 3547 29 DepthOffsetAttrib::get_offset 0 1 1340 281
////////////////////////////////////////////////////////////////////
//     Function: DepthOffsetAttrib::get_offset
//       Access: Published
//  Description: Returns the depth offset represented by this attrib.
////////////////////////////////////////////////////////////////////
53
inline int DepthOffsetAttrib::get_offset(void) const;

2964 13 get_min_value 0 4 3547 32 DepthOffsetAttrib::get_min_value 0 1 1341 370
////////////////////////////////////////////////////////////////////
//     Function: DepthOffsetAttrib::get_min_value
//       Access: Published
//  Description: Returns the value for the minimum (closest) depth
//               value to be stored in the buffer, in the range 0
//               .. 1.
////////////////////////////////////////////////////////////////////
64
inline PN_stdfloat DepthOffsetAttrib::get_min_value(void) const;

2965 13 get_max_value 0 4 3547 32 DepthOffsetAttrib::get_max_value 0 1 1342 371
////////////////////////////////////////////////////////////////////
//     Function: DepthOffsetAttrib::get_max_value
//       Access: Published
//  Description: Returns the value for the maximum (farthest) depth
//               value to be stored in the buffer, in the range 0
//               .. 1.
////////////////////////////////////////////////////////////////////
64
inline PN_stdfloat DepthOffsetAttrib::get_max_value(void) const;

2966 14 get_class_slot 0 4 3547 33 DepthOffsetAttrib::get_class_slot 0 1 1343 0
51
static int DepthOffsetAttrib::get_class_slot(void);

2967 14 get_class_type 0 4 3547 33 DepthOffsetAttrib::get_class_type 0 1 1344 0
58
static TypeHandle DepthOffsetAttrib::get_class_type(void);

2968 18 ~DepthOffsetAttrib 0 4 3547 37 DepthOffsetAttrib::~DepthOffsetAttrib 0 0 0
44
DepthOffsetAttrib::~DepthOffsetAttrib(void);

2969 4 make 0 4 3548 21 DepthTestAttrib::make 0 1 1345 269
////////////////////////////////////////////////////////////////////
//     Function: DepthTestAttrib::make
//       Access: Published, Static
//  Description: Constructs a new DepthTestAttrib object.
////////////////////////////////////////////////////////////////////
97
static ConstPointerTo< RenderAttrib > DepthTestAttrib::make(RenderAttrib::PandaCompareFunc mode);

2970 12 make_default 0 4 3548 29 DepthTestAttrib::make_default 0 1 1346 402
////////////////////////////////////////////////////////////////////
//     Function: DepthTestAttrib::make_default
//       Access: Published, Static
//  Description: Returns a RenderAttrib that corresponds to whatever
//               the standard default properties for render attributes
//               of this type ought to be.
////////////////////////////////////////////////////////////////////
74
static ConstPointerTo< RenderAttrib > DepthTestAttrib::make_default(void);

2971 8 get_mode 0 4 3548 25 DepthTestAttrib::get_mode 0 1 1347 254
////////////////////////////////////////////////////////////////////
//     Function: DepthTestAttrib::get_mode
//       Access: Published
//  Description: Returns the depth write mode.
////////////////////////////////////////////////////////////////////
76
inline RenderAttrib::PandaCompareFunc DepthTestAttrib::get_mode(void) const;

2972 14 get_class_slot 0 4 3548 31 DepthTestAttrib::get_class_slot 0 1 1348 0
49
static int DepthTestAttrib::get_class_slot(void);

2973 14 get_class_type 0 4 3548 31 DepthTestAttrib::get_class_type 0 1 1349 0
56
static TypeHandle DepthTestAttrib::get_class_type(void);

2974 16 ~DepthTestAttrib 0 4 3548 33 DepthTestAttrib::~DepthTestAttrib 0 0 0
40
DepthTestAttrib::~DepthTestAttrib(void);

2975 4 make 0 4 3549 22 DepthWriteAttrib::make 0 1 1350 271
////////////////////////////////////////////////////////////////////
//     Function: DepthWriteAttrib::make
//       Access: Published, Static
//  Description: Constructs a new DepthWriteAttrib object.
////////////////////////////////////////////////////////////////////
90
static ConstPointerTo< RenderAttrib > DepthWriteAttrib::make(DepthWriteAttrib::Mode mode);

2976 12 make_default 0 4 3549 30 DepthWriteAttrib::make_default 0 1 1351 403
////////////////////////////////////////////////////////////////////
//     Function: DepthWriteAttrib::make_default
//       Access: Published, Static
//  Description: Returns a RenderAttrib that corresponds to whatever
//               the standard default properties for render attributes
//               of this type ought to be.
////////////////////////////////////////////////////////////////////
75
static ConstPointerTo< RenderAttrib > DepthWriteAttrib::make_default(void);

2977 8 get_mode 0 4 3549 26 DepthWriteAttrib::get_mode 0 1 1352 255
////////////////////////////////////////////////////////////////////
//     Function: DepthWriteAttrib::get_mode
//       Access: Published
//  Description: Returns the depth write mode.
////////////////////////////////////////////////////////////////////
69
inline DepthWriteAttrib::Mode DepthWriteAttrib::get_mode(void) const;

2978 14 get_class_slot 0 4 3549 32 DepthWriteAttrib::get_class_slot 0 1 1353 0
50
static int DepthWriteAttrib::get_class_slot(void);

2979 14 get_class_type 0 4 3549 32 DepthWriteAttrib::get_class_type 0 1 1354 0
57
static TypeHandle DepthWriteAttrib::get_class_type(void);

2980 17 ~DepthWriteAttrib 0 4 3549 35 DepthWriteAttrib::~DepthWriteAttrib 0 0 0
42
DepthWriteAttrib::~DepthWriteAttrib(void);

2981 22 InternalNameCollection 0 4 3551 46 InternalNameCollection::InternalNameCollection 0 2 1355 1356 475
////////////////////////////////////////////////////////////////////
//     Function: InternalNameCollection::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: InternalNameCollection::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
137
InternalNameCollection::InternalNameCollection(void);
InternalNameCollection::InternalNameCollection(InternalNameCollection const &copy);

2982 10 operator = 0 4 3551 34 InternalNameCollection::operator = 0 1 1357 0
76
void InternalNameCollection::operator =(InternalNameCollection const &copy);

2983 23 ~InternalNameCollection 0 4 3551 47 InternalNameCollection::~InternalNameCollection 0 0 233
////////////////////////////////////////////////////////////////////
//     Function: InternalNameCollection::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
61
inline InternalNameCollection::~InternalNameCollection(void);

2984 8 add_name 0 4 3551 32 InternalNameCollection::add_name 0 1 1358 274
////////////////////////////////////////////////////////////////////
//     Function: InternalNameCollection::add_name
//       Access: Published
//  Description: Adds a new InternalName to the collection.
////////////////////////////////////////////////////////////////////
64
void InternalNameCollection::add_name(InternalName const *name);

2985 11 remove_name 0 4 3551 35 InternalNameCollection::remove_name 0 1 1359 410
////////////////////////////////////////////////////////////////////
//     Function: InternalNameCollection::remove_name
//       Access: Published
//  Description: Removes the indicated InternalName from the collection.
//               Returns true if the name was removed, false if it was
//               not a member of the collection.
////////////////////////////////////////////////////////////////////
67
bool InternalNameCollection::remove_name(InternalName const *name);

2986 14 add_names_from 0 4 3551 38 InternalNameCollection::add_names_from 0 1 1360 480
////////////////////////////////////////////////////////////////////
//     Function: InternalNameCollection::add_names_from
//       Access: Published
//  Description: Adds all the InternalNames indicated in the other
//               collection to this name.  The other names are simply
//               appended to the end of the names in this list;
//               duplicates are not automatically removed.
////////////////////////////////////////////////////////////////////
81
void InternalNameCollection::add_names_from(InternalNameCollection const &other);

2987 17 remove_names_from 0 4 3551 41 InternalNameCollection::remove_names_from 0 1 1361 343
////////////////////////////////////////////////////////////////////
//     Function: InternalNameCollection::remove_names_from
//       Access: Published
//  Description: Removes from this collection all of the InternalNames
//               listed in the other collection.
////////////////////////////////////////////////////////////////////
84
void InternalNameCollection::remove_names_from(InternalNameCollection const &other);

2988 22 remove_duplicate_names 0 4 3551 46 InternalNameCollection::remove_duplicate_names 0 1 1362 485
////////////////////////////////////////////////////////////////////
//     Function: InternalNameCollection::remove_duplicate_names
//       Access: Published
//  Description: Removes any duplicate entries of the same InternalNames
//               on this collection.  If a InternalName appears multiple
//               times, the first appearance is retained; subsequent
//               appearances are removed.
////////////////////////////////////////////////////////////////////
58
void InternalNameCollection::remove_duplicate_names(void);

2989 8 has_name 0 4 3551 32 InternalNameCollection::has_name 0 1 1363 336
////////////////////////////////////////////////////////////////////
//     Function: InternalNameCollection::has_name
//       Access: Published
//  Description: Returns true if the indicated InternalName appears in
//               this collection, false otherwise.
////////////////////////////////////////////////////////////////////
70
bool InternalNameCollection::has_name(InternalName const *name) const;

2990 5 clear 0 4 3551 29 InternalNameCollection::clear 0 1 1364 275
////////////////////////////////////////////////////////////////////
//     Function: InternalNameCollection::clear
//       Access: Published
//  Description: Removes all InternalNames from the collection.
////////////////////////////////////////////////////////////////////
41
void InternalNameCollection::clear(void);

2991 13 get_num_names 0 4 3551 37 InternalNameCollection::get_num_names 0 1 1365 291
////////////////////////////////////////////////////////////////////
//     Function: InternalNameCollection::get_num_names
//       Access: Published
//  Description: Returns the number of InternalNames in the collection.
////////////////////////////////////////////////////////////////////
54
int InternalNameCollection::get_num_names(void) const;

2992 8 get_name 0 4 3551 32 InternalNameCollection::get_name 0 1 1366 279
////////////////////////////////////////////////////////////////////
//     Function: InternalNameCollection::get_name
//       Access: Published
//  Description: Returns the nth InternalName in the collection.
////////////////////////////////////////////////////////////////////
70
InternalName const *InternalNameCollection::get_name(int index) const;

2993 11 operator [] 0 4 3551 35 InternalNameCollection::operator [] 0 1 1367 399
////////////////////////////////////////////////////////////////////
//     Function: InternalNameCollection::operator []
//       Access: Published
//  Description: Returns the nth InternalName in the collection.  This is
//               the same as get_name(), but it may be a more
//               convenient way to access it.
////////////////////////////////////////////////////////////////////
73
InternalName const *InternalNameCollection::operator [](int index) const;

2994 4 size 0 4 3551 28 InternalNameCollection::size 0 1 1368 335
////////////////////////////////////////////////////////////////////
//     Function: InternalNameCollection::size
//       Access: Published
//  Description: Returns the number of names in the collection.  This
//               is the same thing as get_num_names().
////////////////////////////////////////////////////////////////////
45
int InternalNameCollection::size(void) const;

2995 11 operator += 0 4 3551 35 InternalNameCollection::operator += 0 1 1369 0
85
inline void InternalNameCollection::operator +=(InternalNameCollection const &other);

2996 10 operator + 0 4 3551 34 InternalNameCollection::operator + 0 1 1370 0
108
inline InternalNameCollection InternalNameCollection::operator +(InternalNameCollection const &other) const;

2997 6 output 0 4 3551 30 InternalNameCollection::output 0 1 1371 344
////////////////////////////////////////////////////////////////////
//     Function: InternalNameCollection::output
//       Access: Published
//  Description: Writes a brief one-line description of the
//               InternalNameCollection to the indicated output stream.
////////////////////////////////////////////////////////////////////
56
void InternalNameCollection::output(ostream &out) const;

2998 5 write 0 4 3551 29 InternalNameCollection::write 0 1 1372 348
////////////////////////////////////////////////////////////////////
//     Function: InternalNameCollection::write
//       Access: Published
//  Description: Writes a complete multi-line description of the
//               InternalNameCollection to the indicated output stream.
////////////////////////////////////////////////////////////////////
77
void InternalNameCollection::write(ostream &out, int indent_level = 0) const;

2999 6 ~Light 0 6 3552 13 Light::~Light 0 0 225
////////////////////////////////////////////////////////////////////
//     Function: Light::Destructor
//       Access: Published, Virtual
//  Description:
////////////////////////////////////////////////////////////////////
28
virtual Light::~Light(void);

3000 7 as_node 0 6 3552 14 Light::as_node 0 1 1373 0
44
virtual PandaNode *Light::as_node(void) = 0;

3001 16 is_ambient_light 0 6 3552 23 Light::is_ambient_light 0 1 1374 330
////////////////////////////////////////////////////////////////////
//     Function: Light::is_ambient_light
//       Access: Published, Virtual
//  Description: Returns true if this is an AmbientLight, false if it
//               is some other kind of light.
////////////////////////////////////////////////////////////////////
49
virtual bool Light::is_ambient_light(void) const;

3002 9 get_color 0 4 3552 16 Light::get_color 0 1 1375 253
////////////////////////////////////////////////////////////////////
//     Function: Light::get_color
//       Access: Published
//  Description: Returns the basic color of the light.
////////////////////////////////////////////////////////////////////
50
inline LColor const &Light::get_color(void) const;

3003 9 set_color 0 4 3552 16 Light::set_color 0 1 1376 250
////////////////////////////////////////////////////////////////////
//     Function: Light::set_color
//       Access: Published
//  Description: Sets the basic color of the light.
////////////////////////////////////////////////////////////////////
50
inline void Light::set_color(LColor const &color);

3004 12 get_exponent 0 6 3552 19 Light::get_exponent 0 1 1377 410
////////////////////////////////////////////////////////////////////
//     Function: Light::get_exponent
//       Access: Public, Virtual
//  Description: For spotlights, returns the exponent that controls
//               the amount of light falloff from the center of the
//               spotlight.  For other kinds of lights, returns 0.
////////////////////////////////////////////////////////////////////
52
virtual PN_stdfloat Light::get_exponent(void) const;

3005 18 get_specular_color 0 6 3552 25 Light::get_specular_color 0 1 1378 376
////////////////////////////////////////////////////////////////////
//     Function: Light::get_specular_color
//       Access: Public, Virtual
//  Description: Returns the color of specular highlights generated
//               by the light.  This value is meaningless for ambient
//               lights.
////////////////////////////////////////////////////////////////////
60
virtual LColor const &Light::get_specular_color(void) const;

3006 15 get_attenuation 0 6 3552 22 Light::get_attenuation 0 1 1379 455
////////////////////////////////////////////////////////////////////
//     Function: Light::get_attenuation
//       Access: Public, Virtual
//  Description: Returns the terms of the attenuation equation for the
//               light.  These are, in order, the constant, linear,
//               and quadratic terms based on the distance from the
//               point to the vertex.
////////////////////////////////////////////////////////////////////
60
virtual LVecBase3 const &Light::get_attenuation(void) const;

3007 12 set_priority 0 4 3552 19 Light::set_priority 0 1 1380 740
////////////////////////////////////////////////////////////////////
//     Function: Light::set_priority
//       Access: Published
//  Description: Changes the relative importance of this light
//               relative to the other lights that are applied
//               simultaneously.
//
//               The priority number is used to decide which of the
//               requested lights are to be selected for rendering
//               when more lights are requested than the hardware will
//               support.  The highest-priority n lights are selected
//               for rendering.
//
//               This is similar to TextureStage::set_priority().
////////////////////////////////////////////////////////////////////
46
inline void Light::set_priority(int priority);

3008 12 get_priority 0 4 3552 19 Light::get_priority 0 1 1381 305
////////////////////////////////////////////////////////////////////
//     Function: Light::get_priority
//       Access: Published
//  Description: Returns the priority associated with this light.  See
//               set_priority().
////////////////////////////////////////////////////////////////////
43
inline int Light::get_priority(void) const;

3009 18 get_class_priority 0 6 3552 25 Light::get_class_priority 0 1 1382 0
54
virtual int Light::get_class_priority(void) const = 0;

3010 14 get_class_type 0 4 3552 21 Light::get_class_type 0 1 1383 0
46
static TypeHandle Light::get_class_type(void);

3011 4 make 0 4 3553 17 LightAttrib::make 0 5 1384 1385 1386 1387 1388 2205
// The following is the new, more general interface to the
// LightAttrib.

////////////////////////////////////////////////////////////////////
//     Function: LightAttrib::make
//       Access: Published, Static
//  Description: Constructs a new LightAttrib object that turns on (or
//               off, according to op) the indicated light(s).
//
//               This method is now deprecated.  Use add_on_light() or
//               add_off_light() instead.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LightAttrib::make
//       Access: Published, Static
//  Description: Constructs a new LightAttrib object that turns on (or
//               off, according to op) the indicate light(s).
//
//               This method is now deprecated.  Use add_on_light() or
//               add_off_light() instead.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LightAttrib::make
//       Access: Published, Static
//  Description: Constructs a new LightAttrib object that turns on (or
//               off, according to op) the indicate light(s).
//
//               This method is now deprecated.  Use add_on_light() or
//               add_off_light() instead.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LightAttrib::make
//       Access: Published, Static
//  Description: Constructs a new LightAttrib object that turns on (or
//               off, according to op) the indicate light(s).
//
//               This method is now deprecated.  Use add_on_light() or
//               add_off_light() instead.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LightAttrib::make
//       Access: Published, Static
//  Description: Constructs a new LightAttrib object that does
//               nothing.
////////////////////////////////////////////////////////////////////
547
static ConstPointerTo< RenderAttrib > LightAttrib::make(LightAttrib::Operation op, Light *light);
static ConstPointerTo< RenderAttrib > LightAttrib::make(LightAttrib::Operation op, Light *light1, Light *light2);
static ConstPointerTo< RenderAttrib > LightAttrib::make(LightAttrib::Operation op, Light *light1, Light *light2, Light *light3);
static ConstPointerTo< RenderAttrib > LightAttrib::make(LightAttrib::Operation op, Light *light1, Light *light2, Light *light3, Light *light4);
static ConstPointerTo< RenderAttrib > LightAttrib::make(void);

3012 12 make_default 0 4 3553 25 LightAttrib::make_default 0 1 1389 398
////////////////////////////////////////////////////////////////////
//     Function: LightAttrib::make_default
//       Access: Published, Static
//  Description: Returns a RenderAttrib that corresponds to whatever
//               the standard default properties for render attributes
//               of this type ought to be.
////////////////////////////////////////////////////////////////////
70
static ConstPointerTo< RenderAttrib > LightAttrib::make_default(void);

3013 13 get_operation 0 4 3553 26 LightAttrib::get_operation 0 1 1390 888
////////////////////////////////////////////////////////////////////
//     Function: LightAttrib::get_operation
//       Access: Published
//  Description: Returns the basic operation type of the LightAttrib.
//               If this is O_set, the lights listed here completely
//               replace any lights that were already on.  If this is
//               O_add, the lights here are added to the set of of
//               lights that were already on, and if O_remove, the
//               lights here are removed from the set of lights that
//               were on.
//
//               This method is now deprecated.  LightAttribs nowadays
//               have a separate list of on_lights and off_lights, so
//               this method doesn't make sense.  Query the lists
//               independently.
////////////////////////////////////////////////////////////////////
62
LightAttrib::Operation LightAttrib::get_operation(void) const;

3014 14 get_num_lights 0 4 3553 27 LightAttrib::get_num_lights 0 1 1391 522
////////////////////////////////////////////////////////////////////
//     Function: LightAttrib::get_num_lights
//       Access: Published
//  Description: Returns the number of lights listed in the attribute.
//
//               This method is now deprecated.  LightAttribs nowadays
//               have a separate list of on_lights and off_lights, so
//               this method doesn't make sense.  Query the lists
//               independently.
////////////////////////////////////////////////////////////////////
44
int LightAttrib::get_num_lights(void) const;

3015 9 get_light 0 4 3553 22 LightAttrib::get_light 0 1 1392 510
////////////////////////////////////////////////////////////////////
//     Function: LightAttrib::get_light
//       Access: Published
//  Description: Returns the nth light listed in the attribute.
//
//               This method is now deprecated.  LightAttribs nowadays
//               have a separate list of on_lights and off_lights, so
//               this method doesn't make sense.  Query the lists
//               independently.
////////////////////////////////////////////////////////////////////
43
Light *LightAttrib::get_light(int n) const;

3016 9 has_light 0 4 3553 22 LightAttrib::has_light 0 1 1393 558
////////////////////////////////////////////////////////////////////
//     Function: LightAttrib::has_light
//       Access: Published
//  Description: Returns true if the indicated light is listed in the
//               attrib, false otherwise.
//
//               This method is now deprecated.  LightAttribs nowadays
//               have a separate list of on_lights and off_lights, so
//               this method doesn't make sense.  Query the lists
//               independently.
////////////////////////////////////////////////////////////////////
48
bool LightAttrib::has_light(Light *light) const;

3017 9 add_light 0 4 3553 22 LightAttrib::add_light 0 1 1394 459
////////////////////////////////////////////////////////////////////
//     Function: LightAttrib::add_light
//       Access: Published
//  Description: Returns a new LightAttrib, just like this one, but
//               with the indicated light added to the list of lights.
//
//               This method is now deprecated.  Use add_on_light() or
//               add_off_light() instead.
////////////////////////////////////////////////////////////////////
74
ConstPointerTo< RenderAttrib > LightAttrib::add_light(Light *light) const;

3018 12 remove_light 0 4 3553 25 LightAttrib::remove_light 0 1 1395 489
////////////////////////////////////////////////////////////////////
//     Function: LightAttrib::remove_light
//       Access: Published
//  Description: Returns a new LightAttrib, just like this one, but
//               with the indicated light removed from the list of
//               lights.
//
//               This method is now deprecated.  Use remove_on_light()
//               or remove_off_light() instead.
////////////////////////////////////////////////////////////////////
77
ConstPointerTo< RenderAttrib > LightAttrib::remove_light(Light *light) const;

3019 12 make_all_off 0 4 3553 25 LightAttrib::make_all_off 0 1 1396 342
////////////////////////////////////////////////////////////////////
//     Function: LightAttrib::make_all_off
//       Access: Published, Static
//  Description: Constructs a new LightAttrib object that turns off
//               all lights (and hence disables lighting).
////////////////////////////////////////////////////////////////////
70
static ConstPointerTo< RenderAttrib > LightAttrib::make_all_off(void);

3020 17 get_num_on_lights 0 4 3553 30 LightAttrib::get_num_on_lights 0 1 1397 312
////////////////////////////////////////////////////////////////////
//     Function: LightAttrib::get_num_on_lights
//       Access: Published
//  Description: Returns the number of lights that are turned on by
//               the attribute.
////////////////////////////////////////////////////////////////////
54
inline int LightAttrib::get_num_on_lights(void) const;

3021 12 get_on_light 0 4 3553 25 LightAttrib::get_on_light 0 1 1398 315
////////////////////////////////////////////////////////////////////
//     Function: LightAttrib::get_on_light
//       Access: Published
//  Description: Returns the nth light turned on by the attribute,
//               sorted in render order.
////////////////////////////////////////////////////////////////////
55
inline NodePath LightAttrib::get_on_light(int n) const;

3022 12 has_on_light 0 4 3553 25 LightAttrib::has_on_light 0 1 1399 322
////////////////////////////////////////////////////////////////////
//     Function: LightAttrib::has_on_light
//       Access: Published
//  Description: Returns true if the indicated light is turned on by
//               the attrib, false otherwise.
////////////////////////////////////////////////////////////////////
67
inline bool LightAttrib::has_on_light(NodePath const &light) const;

3023 18 get_num_off_lights 0 4 3553 31 LightAttrib::get_num_off_lights 0 1 1400 314
////////////////////////////////////////////////////////////////////
//     Function: LightAttrib::get_num_off_lights
//       Access: Published
//  Description: Returns the number of lights that are turned off by
//               the attribute.
////////////////////////////////////////////////////////////////////
55
inline int LightAttrib::get_num_off_lights(void) const;

3024 13 get_off_light 0 4 3553 26 LightAttrib::get_off_light 0 1 1401 330
////////////////////////////////////////////////////////////////////
//     Function: LightAttrib::get_off_light
//       Access: Published
//  Description: Returns the nth light turned off by the attribute,
//               sorted in arbitrary (pointer) order.
////////////////////////////////////////////////////////////////////
56
inline NodePath LightAttrib::get_off_light(int n) const;

3025 13 has_off_light 0 4 3553 26 LightAttrib::has_off_light 0 1 1402 324
////////////////////////////////////////////////////////////////////
//     Function: LightAttrib::has_off_light
//       Access: Published
//  Description: Returns true if the indicated light is turned off by
//               the attrib, false otherwise.
////////////////////////////////////////////////////////////////////
68
inline bool LightAttrib::has_off_light(NodePath const &light) const;

3026 11 has_all_off 0 4 3553 24 LightAttrib::has_all_off 0 1 1403 326
////////////////////////////////////////////////////////////////////
//     Function: LightAttrib::has_all_off
//       Access: Published
//  Description: Returns true if this attrib turns off all lights
//               (although it may also turn some on).
////////////////////////////////////////////////////////////////////
49
inline bool LightAttrib::has_all_off(void) const;

3027 11 is_identity 0 4 3553 24 LightAttrib::is_identity 0 1 1404 329
////////////////////////////////////////////////////////////////////
//     Function: LightAttrib::is_identity
//       Access: Published
//  Description: Returns true if this is an identity attrib: it does
//               not change the set of lights in use.
////////////////////////////////////////////////////////////////////
49
inline bool LightAttrib::is_identity(void) const;

3028 12 add_on_light 0 4 3553 25 LightAttrib::add_on_light 0 1 1405 388
////////////////////////////////////////////////////////////////////
//     Function: LightAttrib::add_on_light
//       Access: Published
//  Description: Returns a new LightAttrib, just like this one, but
//               with the indicated light added to the list of lights
//               turned on by this attrib.
////////////////////////////////////////////////////////////////////
86
ConstPointerTo< RenderAttrib > LightAttrib::add_on_light(NodePath const &light) const;

3029 15 remove_on_light 0 4 3553 28 LightAttrib::remove_on_light 0 1 1406 395
////////////////////////////////////////////////////////////////////
//     Function: LightAttrib::remove_on_light
//       Access: Published
//  Description: Returns a new LightAttrib, just like this one, but
//               with the indicated light removed from the list of
//               lights turned on by this attrib.
////////////////////////////////////////////////////////////////////
89
ConstPointerTo< RenderAttrib > LightAttrib::remove_on_light(NodePath const &light) const;

3030 13 add_off_light 0 4 3553 26 LightAttrib::add_off_light 0 1 1407 390
////////////////////////////////////////////////////////////////////
//     Function: LightAttrib::add_off_light
//       Access: Published
//  Description: Returns a new LightAttrib, just like this one, but
//               with the indicated light added to the list of lights
//               turned off by this attrib.
////////////////////////////////////////////////////////////////////
87
ConstPointerTo< RenderAttrib > LightAttrib::add_off_light(NodePath const &light) const;

3031 16 remove_off_light 0 4 3553 29 LightAttrib::remove_off_light 0 1 1408 397
////////////////////////////////////////////////////////////////////
//     Function: LightAttrib::remove_off_light
//       Access: Published
//  Description: Returns a new LightAttrib, just like this one, but
//               with the indicated light removed from the list of
//               lights turned off by this attrib.
////////////////////////////////////////////////////////////////////
90
ConstPointerTo< RenderAttrib > LightAttrib::remove_off_light(NodePath const &light) const;

3032 13 filter_to_max 0 4 3553 26 LightAttrib::filter_to_max 0 1 1409 705
////////////////////////////////////////////////////////////////////
//     Function: LightAttrib::filter_to_max
//       Access: Public
//  Description: Returns a new LightAttrib, very much like this one,
//               but with the number of on_lights reduced to be no
//               more than max_lights.  The number of off_lights in
//               the new LightAttrib is undefined.
//
//               The number of AmbientLights is not included in the
//               count.  All AmbientLights in the original attrib are
//               always included in the result, regardless of the
//               value of max_lights.
////////////////////////////////////////////////////////////////////
79
ConstPointerTo< LightAttrib > LightAttrib::filter_to_max(int max_lights) const;

3033 24 get_most_important_light 0 4 3553 37 LightAttrib::get_most_important_light 0 1 1410 477
////////////////////////////////////////////////////////////////////
//     Function: LightAttrib::get_most_important_light
//       Access: Public
//  Description: Returns the most important light (that is, the light
//               with the highest priority) in the LightAttrib,
//               excluding any ambient lights.  Returns an empty
//               NodePath if no non-ambient lights are found.
////////////////////////////////////////////////////////////////////
59
NodePath LightAttrib::get_most_important_light(void) const;

3034 14 get_class_slot 0 4 3553 27 LightAttrib::get_class_slot 0 1 1411 0
45
static int LightAttrib::get_class_slot(void);

3035 14 get_class_type 0 4 3553 27 LightAttrib::get_class_type 0 1 1412 0
52
static TypeHandle LightAttrib::get_class_type(void);

3036 12 ~LightAttrib 0 4 3553 25 LightAttrib::~LightAttrib 0 0 0
32
LightAttrib::~LightAttrib(void);

3037 12 make_default 0 4 3555 29 LightRampAttrib::make_default 0 1 1413 408
////////////////////////////////////////////////////////////////////
//     Function: LightRampAttrib::make_default
//       Access: Published, Static
//  Description: Constructs a new LightRampAttrib object.  This
//               is the standard OpenGL lighting ramp, which clamps
//               the final light total to the 0-1 range.
////////////////////////////////////////////////////////////////////
74
static ConstPointerTo< RenderAttrib > LightRampAttrib::make_default(void);

3038 13 make_identity 0 4 3555 30 LightRampAttrib::make_identity 0 1 1414 424
////////////////////////////////////////////////////////////////////
//     Function: LightRampAttrib::make_identity
//       Access: Published, Static
//  Description: Constructs a new LightRampAttrib object.  This
//               differs from the usual OpenGL lighting model in that
//               it does not clamp the final lighting total to (0,1).
////////////////////////////////////////////////////////////////////
75
static ConstPointerTo< RenderAttrib > LightRampAttrib::make_identity(void);

3039 21 make_single_threshold 0 4 3555 38 LightRampAttrib::make_single_threshold 0 1 1415 652
////////////////////////////////////////////////////////////////////
//     Function: LightRampAttrib::make_single_threshold
//       Access: Published, Static
//  Description: Constructs a new LightRampAttrib object.  This 
//               causes the luminance of the diffuse lighting
//               contribution to be quantized using a single threshold:
//               @code
//               if (original_luminance > threshold0) {
//                 luminance = level0;
//               } else {
//                 luminance = 0.0;
//               }
//               @endcode
////////////////////////////////////////////////////////////////////
116
static ConstPointerTo< RenderAttrib > LightRampAttrib::make_single_threshold(PN_stdfloat thresh0, PN_stdfloat lev0);

3040 21 make_double_threshold 0 4 3555 38 LightRampAttrib::make_double_threshold 0 1 1416 750
////////////////////////////////////////////////////////////////////
//     Function: LightRampAttrib::make_double_threshold
//       Access: Published, Static
//  Description: Constructs a new LightRampAttrib object.  This 
//               causes the luminance of the diffuse lighting
//               contribution to be quantized using two thresholds:
//               @code
//               if (original_luminance > threshold1) {
//                 luminance = level1;
//               } else if (original_luminance > threshold0) {
//                 luminance = level0;
//               } else {
//                 luminance = 0.0;
//               }
//               @endcode
////////////////////////////////////////////////////////////////////
155
static ConstPointerTo< RenderAttrib > LightRampAttrib::make_double_threshold(PN_stdfloat thresh0, PN_stdfloat lev0, PN_stdfloat thresh1, PN_stdfloat lev1);

3041 9 make_hdr0 0 4 3555 26 LightRampAttrib::make_hdr0 0 1 1417 1249
////////////////////////////////////////////////////////////////////
//     Function: LightRampAttrib::make_hdr0
//       Access: Published, Static
//  Description: Constructs a new LightRampAttrib object.  This causes
//               an HDR tone mapping operation to be applied.
//
//               Normally, brightness values greater than 1 cannot be
//               distinguished from each other, causing very brightly lit
//               objects to wash out white and all detail to be erased.
//               HDR tone mapping remaps brightness values in the range
//               0-infinity into the range (0,1), making it possible to
//               distinguish detail in scenes whose brightness exceeds 1.
//
//               However, the monitor has finite contrast.  Normally, all
//               of that contrast is used to represent brightnesses in
//               the range 0-1.  The HDR0 tone mapping operator 'steals'
//               one quarter of that contrast to represent brightnesses in
//               the range 1-infinity.
//               @code
//               FINAL_RGB = (RGB^3 + RGB^2 + RGB) / (RGB^3 + RGB^2 + RGB + 1)
//               @endcode
////////////////////////////////////////////////////////////////////
71
static ConstPointerTo< RenderAttrib > LightRampAttrib::make_hdr0(void);

3042 9 make_hdr1 0 4 3555 26 LightRampAttrib::make_hdr1 0 1 1418 1231
////////////////////////////////////////////////////////////////////
//     Function: LightRampAttrib::make_hdr1
//       Access: Published, Static
//  Description: Constructs a new LightRampAttrib object.  This causes
//               an HDR tone mapping operation to be applied.
//
//               Normally, brightness values greater than 1 cannot be
//               distinguished from each other, causing very brightly lit
//               objects to wash out white and all detail to be erased.
//               HDR tone mapping remaps brightness values in the range
//               0-infinity into the range (0,1), making it possible to
//               distinguish detail in scenes whose brightness exceeds 1.
//
//               However, the monitor has finite contrast.  Normally, all
//               of that contrast is used to represent brightnesses in
//               the range 0-1.  The HDR1 tone mapping operator 'steals'
//               one third of that contrast to represent brightnesses in
//               the range 1-infinity.
//               @code
//               FINAL_RGB = (RGB^2 + RGB) / (RGB^2 + RGB + 1)
//               @endcode
////////////////////////////////////////////////////////////////////
71
static ConstPointerTo< RenderAttrib > LightRampAttrib::make_hdr1(void);

3043 9 make_hdr2 0 4 3555 26 LightRampAttrib::make_hdr2 0 1 1419 1214
////////////////////////////////////////////////////////////////////
//     Function: LightRampAttrib::make_hdr2
//       Access: Published, Static
//  Description: Constructs a new LightRampAttrib object.  This causes
//               an HDR tone mapping operation to be applied.
//
//               Normally, brightness values greater than 1 cannot be
//               distinguished from each other, causing very brightly lit
//               objects to wash out white and all detail to be erased.
//               HDR tone mapping remaps brightness values in the range
//               0-infinity into the range (0,1), making it possible to
//               distinguish detail in scenes whose brightness exceeds 1.
//
//               However, the monitor has finite contrast.  Normally, all
//               of that contrast is used to represent brightnesses in
//               the range 0-1.  The HDR2 tone mapping operator 'steals'
//               one half of that contrast to represent brightnesses in
//               the range 1-infinity.
//               @code
//               FINAL_RGB = (RGB) / (RGB + 1)
//               @endcode
////////////////////////////////////////////////////////////////////
71
static ConstPointerTo< RenderAttrib > LightRampAttrib::make_hdr2(void);

3044 8 get_mode 0 4 3555 25 LightRampAttrib::get_mode 0 1 1420 258
////////////////////////////////////////////////////////////////////
//     Function: LightRampAttrib::get_mode
//       Access: Published
//  Description: Returns the LightRampAttrib mode.
////////////////////////////////////////////////////////////////////
76
inline LightRampAttrib::LightRampMode LightRampAttrib::get_mode(void) const;

3045 9 get_level 0 4 3555 26 LightRampAttrib::get_level 0 1 1421 257
////////////////////////////////////////////////////////////////////
//     Function: LightRampAttrib::get_level
//       Access: Published
//  Description: Returns the nth lighting level.
////////////////////////////////////////////////////////////////////
59
inline PN_stdfloat LightRampAttrib::get_level(int n) const;

3046 13 get_threshold 0 4 3555 30 LightRampAttrib::get_threshold 0 1 1422 262
////////////////////////////////////////////////////////////////////
//     Function: LightRampAttrib::get_threshold
//       Access: Published
//  Description: Returns the nth threshold level.
////////////////////////////////////////////////////////////////////
63
inline PN_stdfloat LightRampAttrib::get_threshold(int n) const;

3047 14 get_class_slot 0 4 3555 31 LightRampAttrib::get_class_slot 0 1 1423 0
49
static int LightRampAttrib::get_class_slot(void);

3048 14 get_class_type 0 4 3555 31 LightRampAttrib::get_class_type 0 1 1424 0
56
static TypeHandle LightRampAttrib::get_class_type(void);

3049 16 ~LightRampAttrib 0 4 3555 33 LightRampAttrib::~LightRampAttrib 0 0 0
40
LightRampAttrib::~LightRampAttrib(void);

3050 29 upcast_to_TypedReferenceCount 0 12 3557 37 Loader::upcast_to_TypedReferenceCount 0 1 1442 41
upcast from Loader to TypedReferenceCount
65
TypedReferenceCount *Loader::upcast_to_TypedReferenceCount(void);

3051 18 downcast_to_Loader 0 12 3509 39 TypedReferenceCount::downcast_to_Loader 0 1 1443 43
downcast from TypedReferenceCount to Loader
54
Loader *TypedReferenceCount::downcast_to_Loader(void);

3052 17 upcast_to_Namable 0 12 3557 25 Loader::upcast_to_Namable 0 1 1444 29
upcast from Loader to Namable
41
Namable *Loader::upcast_to_Namable(void);

3053 18 downcast_to_Loader 0 12 3492 27 Namable::downcast_to_Loader 0 1 1445 31
downcast from Namable to Loader
42
Loader *Namable::downcast_to_Loader(void);

3054 7 Results 0 4 3558 24 Loader::Results::Results 0 2 1446 1447 461
////////////////////////////////////////////////////////////////////
//     Function: Loader::Results::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Loader::Results::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
100
inline Loader::Results::Results(void);
inline Loader::Results::Results(Loader::Results const &copy);

3055 10 operator = 0 4 3558 27 Loader::Results::operator = 0 1 1448 0
69
inline void Loader::Results::operator =(Loader::Results const &copy);

3056 8 ~Results 0 4 3558 25 Loader::Results::~Results 0 0 226
////////////////////////////////////////////////////////////////////
//     Function: Loader::Results::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
39
inline Loader::Results::~Results(void);

3057 5 clear 0 4 3558 22 Loader::Results::clear 0 1 1449 258
////////////////////////////////////////////////////////////////////
//     Function: Loader::Results::clear
//       Access: Published
//  Description: Removes all the files from the list.
////////////////////////////////////////////////////////////////////
41
inline void Loader::Results::clear(void);

3058 13 get_num_files 0 4 3558 30 Loader::Results::get_num_files 0 1 1450 277
////////////////////////////////////////////////////////////////////
//     Function: Loader::Results::get_num_files
//       Access: Published
//  Description: Returns the number of files on the result list.
////////////////////////////////////////////////////////////////////
54
inline int Loader::Results::get_num_files(void) const;

3059 8 get_file 0 4 3558 25 Loader::Results::get_file 0 1 1451 265
////////////////////////////////////////////////////////////////////
//     Function: Loader::Results::get_file
//       Access: Published
//  Description: Returns the nth file on the result list.
////////////////////////////////////////////////////////////////////
62
inline Filename const &Loader::Results::get_file(int n) const;

3060 13 get_file_type 0 4 3558 30 Loader::Results::get_file_type 0 1 1452 304
////////////////////////////////////////////////////////////////////
//     Function: Loader::Results::get_file_type
//       Access: Published
//  Description: Returns the file type of the nth file on the result
//               list.
////////////////////////////////////////////////////////////////////
67
inline LoaderFileType *Loader::Results::get_file_type(int n) const;

3061 6 Loader 0 4 3557 14 Loader::Loader 0 1 1425 218
////////////////////////////////////////////////////////////////////
//     Function: Loader::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
46
Loader::Loader(string const &name = "loader");

3062 16 set_task_manager 0 4 3557 24 Loader::set_task_manager 0 1 1426 362
////////////////////////////////////////////////////////////////////
//     Function: Loader::set_task_manager
//       Access: Published
//  Description: Specifies the task manager that is used for
//               asynchronous loads.  The default is the global task
//               manager.
////////////////////////////////////////////////////////////////////
69
inline void Loader::set_task_manager(AsyncTaskManager *task_manager);

3063 16 get_task_manager 0 4 3557 24 Loader::get_task_manager 0 1 1427 302
////////////////////////////////////////////////////////////////////
//     Function: Loader::get_task_manager
//       Access: Published
//  Description: Returns the task manager that is used for
//               asynchronous loads.
////////////////////////////////////////////////////////////////////
62
inline AsyncTaskManager *Loader::get_task_manager(void) const;

3064 14 set_task_chain 0 4 3557 22 Loader::set_task_chain 0 1 1428 372
////////////////////////////////////////////////////////////////////
//     Function: Loader::set_task_chain
//       Access: Published
//  Description: Specifies the task chain that is used for
//               asynchronous loads.  The default is the initial name
//               of the Loader object.
////////////////////////////////////////////////////////////////////
61
inline void Loader::set_task_chain(string const &task_chain);

3065 14 get_task_chain 0 4 3557 22 Loader::get_task_chain 0 1 1429 298
////////////////////////////////////////////////////////////////////
//     Function: Loader::get_task_chain
//       Access: Published
//  Description: Returns the task chain that is used for
//               asynchronous loads.
////////////////////////////////////////////////////////////////////
56
inline string const &Loader::get_task_chain(void) const;

3066 12 stop_threads 0 4 3557 20 Loader::stop_threads 0 1 1430 265
////////////////////////////////////////////////////////////////////
//     Function: Loader::stop_threads
//       Access: Published
//  Description: Stop any threads used for asynchronous loads.
////////////////////////////////////////////////////////////////////
39
inline void Loader::stop_threads(void);

3067 6 remove 0 4 3557 14 Loader::remove 0 1 1431 321
////////////////////////////////////////////////////////////////////
//     Function: Loader::remove
//       Access: Published
//  Description: Removes a pending asynchronous load request.  Returns
//               true if successful, false otherwise.
////////////////////////////////////////////////////////////////////
44
inline bool Loader::remove(AsyncTask *task);

3068 9 load_sync 0 4 3557 17 Loader::load_sync 0 1 1432 455
////////////////////////////////////////////////////////////////////
//     Function: Loader::load_sync
//       Access: Published
//  Description: Loads the file immediately, waiting for it to
//               complete.
//
//               If search is true, the file is searched for along the
//               model path; otherwise, only the exact filename is
//               loaded.
////////////////////////////////////////////////////////////////////
128
inline PointerTo< PandaNode > Loader::load_sync(Filename const &filename, LoaderOptions const &options = LoaderOptions()) const;

3069 18 make_async_request 0 4 3557 26 Loader::make_async_request 0 1 1433 346
////////////////////////////////////////////////////////////////////
//     Function: Loader::make_async_request
//       Access: Published
//  Description: Returns a new AsyncTask object suitable for adding to
//               load_async() to start an asynchronous model load.
////////////////////////////////////////////////////////////////////
124
PointerTo< AsyncTask > Loader::make_async_request(Filename const &filename, LoaderOptions const &options = LoaderOptions());

3070 10 load_async 0 4 3557 18 Loader::load_async 0 1 1434 944
////////////////////////////////////////////////////////////////////
//     Function: Loader::load_async
//       Access: Published
//  Description: Begins an asynchronous load request.  To use this
//               call, first call make_async_request() to create a new
//               ModelLoadRequest object with the filename you wish to
//               load, and then add that object to the Loader with
//               load_async.  This function will return immediately,
//               and the model will be loaded in the background.
//
//               To determine when the model has completely loaded,
//               you may poll request->is_ready() from time to time,
//               or set the done_event on the request object and
//               listen for that event.  When the model is ready, you
//               may retrieve it via request->get_model().
////////////////////////////////////////////////////////////////////
51
inline void Loader::load_async(AsyncTask *request);

3071 9 save_sync 0 4 3557 17 Loader::save_sync 0 1 1435 289
////////////////////////////////////////////////////////////////////
//     Function: Loader::save_sync
//       Access: Published
//  Description: Saves the file immediately, waiting for it to
//               complete.
////////////////////////////////////////////////////////////////////
109
inline bool Loader::save_sync(Filename const &filename, LoaderOptions const &options, PandaNode *node) const;

3072 23 make_async_save_request 0 4 3557 31 Loader::make_async_save_request 0 1 1436 351
////////////////////////////////////////////////////////////////////
//     Function: Loader::make_async_save_request
//       Access: Published
//  Description: Returns a new AsyncTask object suitable for adding to
//               save_async() to start an asynchronous model save.
////////////////////////////////////////////////////////////////////
128
PointerTo< AsyncTask > Loader::make_async_save_request(Filename const &filename, LoaderOptions const &options, PandaNode *node);

3073 10 save_async 0 4 3557 18 Loader::save_async 0 1 1437 1007
////////////////////////////////////////////////////////////////////
//     Function: Loader::save_async
//       Access: Published
//  Description: Begins an asynchronous save request.  To use this
//               call, first call make_async_save_request() to create
//               a new ModelSaveRequest object with the filename you
//               wish to load, and then add that object to the Loader
//               with save_async.  This function will return
//               immediately, and the model will be loaded in the
//               background.
//
//               To determine when the model has completely loaded,
//               you may poll request->is_ready() from time to time,
//               or set the done_event on the request object and
//               listen for that event.  When the request is ready,
//               you may retrieve the success or failure via
//               request->get_success().
////////////////////////////////////////////////////////////////////
51
inline void Loader::save_async(AsyncTask *request);

3074 15 load_bam_stream 0 4 3557 23 Loader::load_bam_stream 0 1 1438 335
////////////////////////////////////////////////////////////////////
//     Function: Loader::load_bam_stream
//       Access: Published
//  Description: Attempts to read a bam file from the indicated stream
//               and return the scene graph defined there.
////////////////////////////////////////////////////////////////////
60
PointerTo< PandaNode > Loader::load_bam_stream(istream &in);

3075 6 output 0 6 3557 14 Loader::output 0 1 1439 222
////////////////////////////////////////////////////////////////////
//     Function: Loader::output
//       Access: Published, Virtual
//  Description:
////////////////////////////////////////////////////////////////////
48
virtual void Loader::output(ostream &out) const;

3076 14 get_global_ptr 0 4 3557 22 Loader::get_global_ptr 0 1 1440 344
////////////////////////////////////////////////////////////////////
//     Function: Loader::get_global_ptr
//       Access: Published
//  Description: Returns a pointer to the global Loader.  This is the
//               Loader that most code should use for loading models.
////////////////////////////////////////////////////////////////////
51
static inline Loader *Loader::get_global_ptr(void);

3077 14 get_class_type 0 4 3557 22 Loader::get_class_type 0 1 1441 0
47
static TypeHandle Loader::get_class_type(void);

3078 7 ~Loader 0 4 3557 15 Loader::~Loader 0 0 0
22
Loader::~Loader(void);

3079 8 get_name 0 6 3559 24 LoaderFileType::get_name 0 1 1453 0
56
virtual string LoaderFileType::get_name(void) const = 0;

3080 13 get_extension 0 6 3559 29 LoaderFileType::get_extension 0 1 1454 0
61
virtual string LoaderFileType::get_extension(void) const = 0;

3081 25 get_additional_extensions 0 6 3559 41 LoaderFileType::get_additional_extensions 0 1 1455 416
////////////////////////////////////////////////////////////////////
//     Function: LoaderFileType::get_additional_extensions
//       Access: Published, Virtual
//  Description: Returns a space-separated list of extension, in
//               addition to the one returned by get_extension(), that
//               are recognized by this loader.
////////////////////////////////////////////////////////////////////
69
virtual string LoaderFileType::get_additional_extensions(void) const;

3082 19 supports_compressed 0 6 3559 35 LoaderFileType::supports_compressed 0 1 1456 389
////////////////////////////////////////////////////////////////////
//     Function: LoaderFileType::supports_compressed
//       Access: Published, Virtual
//  Description: Returns true if this file type can transparently load
//               compressed files (with a .pz extension), false
//               otherwise.
////////////////////////////////////////////////////////////////////
61
virtual bool LoaderFileType::supports_compressed(void) const;

3083 20 get_allow_disk_cache 0 6 3559 36 LoaderFileType::get_allow_disk_cache 0 1 1457 402
////////////////////////////////////////////////////////////////////
//     Function: LoaderFileType::get_allow_disk_cache
//       Access: Published, Virtual
//  Description: Returns true if the loader flags allow retrieving the
//               model from the on-disk bam cache (if it is enabled),
//               false otherwise.
////////////////////////////////////////////////////////////////////
86
virtual bool LoaderFileType::get_allow_disk_cache(LoaderOptions const &options) const;

3084 19 get_allow_ram_cache 0 6 3559 35 LoaderFileType::get_allow_ram_cache 0 1 1458 390
////////////////////////////////////////////////////////////////////
//     Function: LoaderFileType::get_allow_ram_cache
//       Access: Published, Virtual
//  Description: Returns true if the loader flags allow retrieving the
//               model from the in-memory ModelPool cache, false
//               otherwise.
////////////////////////////////////////////////////////////////////
85
virtual bool LoaderFileType::get_allow_ram_cache(LoaderOptions const &options) const;

3085 13 supports_load 0 6 3559 29 LoaderFileType::supports_load 0 1 1459 427
////////////////////////////////////////////////////////////////////
//     Function: LoaderFileType::supports_load
//       Access: Published, Virtual
//  Description: Returns true if the file type can be used to load
//               files, and load_file() is supported.  Returns false
//               if load_file() is unimplemented and will always fail.
////////////////////////////////////////////////////////////////////
55
virtual bool LoaderFileType::supports_load(void) const;

3086 13 supports_save 0 6 3559 29 LoaderFileType::supports_save 0 1 1460 427
////////////////////////////////////////////////////////////////////
//     Function: LoaderFileType::supports_save
//       Access: Published, Virtual
//  Description: Returns true if the file type can be used to save
//               files, and save_file() is supported.  Returns false
//               if save_file() is unimplemented and will always fail.
////////////////////////////////////////////////////////////////////
55
virtual bool LoaderFileType::supports_save(void) const;

3087 14 get_class_type 0 4 3559 30 LoaderFileType::get_class_type 0 1 1461 0
55
static TypeHandle LoaderFileType::get_class_type(void);

3088 23 ~LoaderFileTypeRegistry 0 4 3561 47 LoaderFileTypeRegistry::~LoaderFileTypeRegistry 0 0 230
////////////////////////////////////////////////////////////////////
//     Function: LoaderFileTypeRegistry::Destructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
54
LoaderFileTypeRegistry::~LoaderFileTypeRegistry(void);

3089 13 get_num_types 0 4 3561 37 LoaderFileTypeRegistry::get_num_types 0 1 1462 282
////////////////////////////////////////////////////////////////////
//     Function: LoaderFileTypeRegistry::get_num_types
//       Access: Published
//  Description: Returns the total number of types registered.
////////////////////////////////////////////////////////////////////
54
int LoaderFileTypeRegistry::get_num_types(void) const;

3090 8 get_type 0 4 3561 32 LoaderFileTypeRegistry::get_type 0 1 1463 264
////////////////////////////////////////////////////////////////////
//     Function: LoaderFileTypeRegistry::get_type
//       Access: Published
//  Description: Returns the nth type registered.
////////////////////////////////////////////////////////////////////
62
LoaderFileType *LoaderFileTypeRegistry::get_type(int n) const;

3091 23 get_type_from_extension 0 4 3561 47 LoaderFileTypeRegistry::get_type_from_extension 0 1 1464 430
////////////////////////////////////////////////////////////////////
//     Function: LoaderFileTypeRegistry::get_type_from_extension
//       Access: Published
//  Description: Determines the type of the file based on the indicated
//               extension (without a leading dot).  Returns NULL if
//               the extension matches no known file types.
////////////////////////////////////////////////////////////////////
89
LoaderFileType *LoaderFileTypeRegistry::get_type_from_extension(string const &extension);

3092 5 write 0 4 3561 29 LoaderFileTypeRegistry::write 0 1 1465 329
////////////////////////////////////////////////////////////////////
//     Function: LoaderFileTypeRegistry::write
//       Access: Published
//  Description: Writes a list of supported file types to the
//               indicated output stream, one per line.
////////////////////////////////////////////////////////////////////
77
void LoaderFileTypeRegistry::write(ostream &out, int indent_level = 0) const;

3093 14 get_global_ptr 0 4 3561 38 LoaderFileTypeRegistry::get_global_ptr 0 1 1466 325
////////////////////////////////////////////////////////////////////
//     Function: LoaderFileTypeRegistry::get_global_ptr
//       Access: Published, Static
//  Description: Returns a pointer to the global LoaderFileTypeRegistry
//               object.
////////////////////////////////////////////////////////////////////
76
static LoaderFileTypeRegistry *LoaderFileTypeRegistry::get_global_ptr(void);

3094 4 make 0 4 3562 20 MaterialAttrib::make 0 1 1467 344
////////////////////////////////////////////////////////////////////
//     Function: MaterialAttrib::make
//       Access: Published, Static
//  Description: Constructs a new MaterialAttrib object suitable for
//               rendering the indicated material onto geometry.
////////////////////////////////////////////////////////////////////
79
static ConstPointerTo< RenderAttrib > MaterialAttrib::make(Material *material);

3095 8 make_off 0 4 3562 24 MaterialAttrib::make_off 0 1 1468 332
////////////////////////////////////////////////////////////////////
//     Function: MaterialAttrib::make_off
//       Access: Published, Static
//  Description: Constructs a new MaterialAttrib object suitable for
//               rendering unmateriald geometry.
////////////////////////////////////////////////////////////////////
69
static ConstPointerTo< RenderAttrib > MaterialAttrib::make_off(void);

3096 12 make_default 0 4 3562 28 MaterialAttrib::make_default 0 1 1469 401
////////////////////////////////////////////////////////////////////
//     Function: MaterialAttrib::make_default
//       Access: Published, Static
//  Description: Returns a RenderAttrib that corresponds to whatever
//               the standard default properties for render attributes
//               of this type ought to be.
////////////////////////////////////////////////////////////////////
73
static ConstPointerTo< RenderAttrib > MaterialAttrib::make_default(void);

3097 6 is_off 0 4 3562 22 MaterialAttrib::is_off 0 1 1470 374
////////////////////////////////////////////////////////////////////
//     Function: MaterialAttrib::is_off
//       Access: Published
//  Description: Returns true if the MaterialAttrib is an 'off'
//               MaterialAttrib, indicating that it should disable
//               the use of materials.
////////////////////////////////////////////////////////////////////
47
inline bool MaterialAttrib::is_off(void) const;

3098 12 get_material 0 4 3562 28 MaterialAttrib::get_material 0 1 1471 381
////////////////////////////////////////////////////////////////////
//     Function: MaterialAttrib::get_material
//       Access: Published
//  Description: If the MaterialAttrib is not an 'off' MaterialAttrib,
//               returns the material that is associated.  Otherwise,
//               return NULL.
////////////////////////////////////////////////////////////////////
58
inline Material *MaterialAttrib::get_material(void) const;

3099 14 get_class_slot 0 4 3562 30 MaterialAttrib::get_class_slot 0 1 1472 0
48
static int MaterialAttrib::get_class_slot(void);

3100 14 get_class_type 0 4 3562 30 MaterialAttrib::get_class_type 0 1 1473 0
55
static TypeHandle MaterialAttrib::get_class_type(void);

3101 15 ~MaterialAttrib 0 4 3562 31 MaterialAttrib::~MaterialAttrib 0 0 0
38
MaterialAttrib::~MaterialAttrib(void);

3102 18 MaterialCollection 0 4 3563 38 MaterialCollection::MaterialCollection 0 2 1474 1475 467
////////////////////////////////////////////////////////////////////
//     Function: MaterialCollection::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: MaterialCollection::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
117
MaterialCollection::MaterialCollection(void);
MaterialCollection::MaterialCollection(MaterialCollection const &copy);

3103 10 operator = 0 4 3563 30 MaterialCollection::operator = 0 1 1476 0
68
void MaterialCollection::operator =(MaterialCollection const &copy);

3104 19 ~MaterialCollection 0 4 3563 39 MaterialCollection::~MaterialCollection 0 0 229
////////////////////////////////////////////////////////////////////
//     Function: MaterialCollection::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
53
inline MaterialCollection::~MaterialCollection(void);

3105 12 add_material 0 4 3563 32 MaterialCollection::add_material 0 1 1477 270
////////////////////////////////////////////////////////////////////
//     Function: MaterialCollection::add_material
//       Access: Published
//  Description: Adds a new Material to the collection.
////////////////////////////////////////////////////////////////////
63
void MaterialCollection::add_material(Material *node_material);

3106 15 remove_material 0 4 3563 35 MaterialCollection::remove_material 0 1 1478 410
////////////////////////////////////////////////////////////////////
//     Function: MaterialCollection::remove_material
//       Access: Published
//  Description: Removes the indicated Material from the collection.
//               Returns true if the material was removed, false if it was
//               not a member of the collection.
////////////////////////////////////////////////////////////////////
66
bool MaterialCollection::remove_material(Material *node_material);

3107 18 add_materials_from 0 4 3563 38 MaterialCollection::add_materials_from 0 1 1479 488
////////////////////////////////////////////////////////////////////
//     Function: MaterialCollection::add_materials_from
//       Access: Published
//  Description: Adds all the Materials indicated in the other
//               collection to this material.  The other materials are simply
//               appended to the end of the materials in this list;
//               duplicates are not automatically removed.
////////////////////////////////////////////////////////////////////
77
void MaterialCollection::add_materials_from(MaterialCollection const &other);

3108 21 remove_materials_from 0 4 3563 41 MaterialCollection::remove_materials_from 0 1 1480 339
////////////////////////////////////////////////////////////////////
//     Function: MaterialCollection::remove_materials_from
//       Access: Published
//  Description: Removes from this collection all of the Materials
//               listed in the other collection.
////////////////////////////////////////////////////////////////////
80
void MaterialCollection::remove_materials_from(MaterialCollection const &other);

3109 26 remove_duplicate_materials 0 4 3563 46 MaterialCollection::remove_duplicate_materials 0 1 1481 477
////////////////////////////////////////////////////////////////////
//     Function: MaterialCollection::remove_duplicate_materials
//       Access: Published
//  Description: Removes any duplicate entries of the same Materials
//               on this collection.  If a Material appears multiple
//               times, the first appearance is retained; subsequent
//               appearances are removed.
////////////////////////////////////////////////////////////////////
58
void MaterialCollection::remove_duplicate_materials(void);

3110 12 has_material 0 4 3563 32 MaterialCollection::has_material 0 1 1482 332
////////////////////////////////////////////////////////////////////
//     Function: MaterialCollection::has_material
//       Access: Published
//  Description: Returns true if the indicated Material appears in
//               this collection, false otherwise.
////////////////////////////////////////////////////////////////////
64
bool MaterialCollection::has_material(Material *material) const;

3111 5 clear 0 4 3563 25 MaterialCollection::clear 0 1 1483 267
////////////////////////////////////////////////////////////////////
//     Function: MaterialCollection::clear
//       Access: Published
//  Description: Removes all Materials from the collection.
////////////////////////////////////////////////////////////////////
37
void MaterialCollection::clear(void);

3112 13 find_material 0 4 3563 33 MaterialCollection::find_material 0 1 1484 376
////////////////////////////////////////////////////////////////////
//     Function: MaterialCollection::find_material
//       Access: Published
//  Description: Returns the material in the collection with the
//               indicated name, if any, or NULL if no material has
//               that name.
////////////////////////////////////////////////////////////////////
70
Material *MaterialCollection::find_material(string const &name) const;

3113 17 get_num_materials 0 4 3563 37 MaterialCollection::get_num_materials 0 1 1485 287
////////////////////////////////////////////////////////////////////
//     Function: MaterialCollection::get_num_materials
//       Access: Published
//  Description: Returns the number of Materials in the collection.
////////////////////////////////////////////////////////////////////
54
int MaterialCollection::get_num_materials(void) const;

3114 12 get_material 0 4 3563 32 MaterialCollection::get_material 0 1 1486 275
////////////////////////////////////////////////////////////////////
//     Function: MaterialCollection::get_material
//       Access: Published
//  Description: Returns the nth Material in the collection.
////////////////////////////////////////////////////////////////////
60
Material *MaterialCollection::get_material(int index) const;

3115 11 operator [] 0 4 3563 31 MaterialCollection::operator [] 0 1 1487 395
////////////////////////////////////////////////////////////////////
//     Function: MaterialCollection::operator []
//       Access: Published
//  Description: Returns the nth Material in the collection.  This is
//               the same as get_material(), but it may be a more
//               convenient way to access it.
////////////////////////////////////////////////////////////////////
59
Material *MaterialCollection::operator [](int index) const;

3116 4 size 0 4 3563 24 MaterialCollection::size 0 1 1488 339
////////////////////////////////////////////////////////////////////
//     Function: MaterialCollection::size
//       Access: Published
//  Description: Returns the number of materials in the collection.  This
//               is the same thing as get_num_materials().
////////////////////////////////////////////////////////////////////
41
int MaterialCollection::size(void) const;

3117 11 operator += 0 4 3563 31 MaterialCollection::operator += 0 1 1489 0
77
inline void MaterialCollection::operator +=(MaterialCollection const &other);

3118 10 operator + 0 4 3563 30 MaterialCollection::operator + 0 1 1490 0
96
inline MaterialCollection MaterialCollection::operator +(MaterialCollection const &other) const;

3119 6 output 0 4 3563 26 MaterialCollection::output 0 1 1491 336
////////////////////////////////////////////////////////////////////
//     Function: MaterialCollection::output
//       Access: Published
//  Description: Writes a brief one-line description of the
//               MaterialCollection to the indicated output stream.
////////////////////////////////////////////////////////////////////
52
void MaterialCollection::output(ostream &out) const;

3120 5 write 0 4 3563 25 MaterialCollection::write 0 1 1492 340
////////////////////////////////////////////////////////////////////
//     Function: MaterialCollection::write
//       Access: Published
//  Description: Writes a complete multi-line description of the
//               MaterialCollection to the indicated output stream.
////////////////////////////////////////////////////////////////////
73
void MaterialCollection::write(ostream &out, int indent_level = 0) const;

3121 19 ModelFlattenRequest 0 4 3564 40 ModelFlattenRequest::ModelFlattenRequest 0 1 1493 356
////////////////////////////////////////////////////////////////////
//     Function: ModelFlattenRequest::Constructor
//       Access: Published
//  Description: Create a new ModelFlattenRequest, and add it to the loader
//               via load_async(), to begin an asynchronous load.
////////////////////////////////////////////////////////////////////
65
inline ModelFlattenRequest::ModelFlattenRequest(PandaNode *orig);

3122 8 get_orig 0 4 3564 29 ModelFlattenRequest::get_orig 0 1 1494 268
////////////////////////////////////////////////////////////////////
//     Function: ModelFlattenRequest::get_orig
//       Access: Published
//  Description: Returns the original, unflattened node.
////////////////////////////////////////////////////////////////////
60
inline PandaNode *ModelFlattenRequest::get_orig(void) const;

3123 8 is_ready 0 4 3564 29 ModelFlattenRequest::is_ready 0 1 1495 420
////////////////////////////////////////////////////////////////////
//     Function: ModelFlattenRequest::is_ready
//       Access: Published
//  Description: Returns true if this request has completed, false if
//               it is still pending.  When this returns true, you may
//               retrieve the model loaded by calling get_result().
////////////////////////////////////////////////////////////////////
54
inline bool ModelFlattenRequest::is_ready(void) const;

3124 9 get_model 0 4 3564 30 ModelFlattenRequest::get_model 0 1 1496 348
////////////////////////////////////////////////////////////////////
//     Function: ModelFlattenRequest::get_model
//       Access: Published
//  Description: Returns the flattened copy of the model.  It is an
//               error to call this unless is_ready() returns true.
////////////////////////////////////////////////////////////////////
61
inline PandaNode *ModelFlattenRequest::get_model(void) const;

3125 14 get_class_type 0 4 3564 35 ModelFlattenRequest::get_class_type 0 1 1497 0
60
static TypeHandle ModelFlattenRequest::get_class_type(void);

3126 20 ~ModelFlattenRequest 0 4 3564 41 ModelFlattenRequest::~ModelFlattenRequest 0 0 0
48
ModelFlattenRequest::~ModelFlattenRequest(void);

3127 16 ModelLoadRequest 0 4 3566 34 ModelLoadRequest::ModelLoadRequest 0 1 1498 350
////////////////////////////////////////////////////////////////////
//     Function: ModelLoadRequest::Constructor
//       Access: Published
//  Description: Create a new ModelLoadRequest, and add it to the loader
//               via load_async(), to begin an asynchronous load.
////////////////////////////////////////////////////////////////////
127
ModelLoadRequest::ModelLoadRequest(string const &name, Filename const &filename, LoaderOptions const &options, Loader *loader);

3128 12 get_filename 0 4 3566 30 ModelLoadRequest::get_filename 0 1 1499 319
////////////////////////////////////////////////////////////////////
//     Function: ModelLoadRequest::get_filename
//       Access: Published
//  Description: Returns the filename associated with this
//               asynchronous ModelLoadRequest.
////////////////////////////////////////////////////////////////////
66
inline Filename const &ModelLoadRequest::get_filename(void) const;

3129 11 get_options 0 4 3566 29 ModelLoadRequest::get_options 0 1 1500 323
////////////////////////////////////////////////////////////////////
//     Function: ModelLoadRequest::get_options
//       Access: Published
//  Description: Returns the LoaderOptions associated with this
//               asynchronous ModelLoadRequest.
////////////////////////////////////////////////////////////////////
70
inline LoaderOptions const &ModelLoadRequest::get_options(void) const;

3130 10 get_loader 0 4 3566 28 ModelLoadRequest::get_loader 0 1 1501 322
////////////////////////////////////////////////////////////////////
//     Function: ModelLoadRequest::get_loader
//       Access: Published
//  Description: Returns the Loader object associated with this
//               asynchronous ModelLoadRequest.
////////////////////////////////////////////////////////////////////
56
inline Loader *ModelLoadRequest::get_loader(void) const;

3131 8 is_ready 0 4 3566 26 ModelLoadRequest::is_ready 0 1 1502 416
////////////////////////////////////////////////////////////////////
//     Function: ModelLoadRequest::is_ready
//       Access: Published
//  Description: Returns true if this request has completed, false if
//               it is still pending.  When this returns true, you may
//               retrieve the model loaded by calling get_model().
////////////////////////////////////////////////////////////////////
51
inline bool ModelLoadRequest::is_ready(void) const;

3132 9 get_model 0 4 3566 27 ModelLoadRequest::get_model 0 1 1503 410
////////////////////////////////////////////////////////////////////
//     Function: ModelLoadRequest::get_model
//       Access: Published
//  Description: Returns the model that was loaded asynchronously, if
//               any, or NULL if there was an error.  It is an error
//               to call this unless is_ready() returns true.
////////////////////////////////////////////////////////////////////
58
inline PandaNode *ModelLoadRequest::get_model(void) const;

3133 14 get_class_type 0 4 3566 32 ModelLoadRequest::get_class_type 0 1 1504 0
57
static TypeHandle ModelLoadRequest::get_class_type(void);

3134 17 ~ModelLoadRequest 0 4 3566 35 ModelLoadRequest::~ModelLoadRequest 0 0 0
42
ModelLoadRequest::~ModelLoadRequest(void);

3135 9 ModelNode 0 4 3567 20 ModelNode::ModelNode 0 1 1505 446
////////////////////////////////////////////////////////////////////
//     Function: ModelNode::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ModelNode::Copy Constructor
//       Access: Protected
//  Description:
////////////////////////////////////////////////////////////////////
48
inline ModelNode::ModelNode(string const &name);

3136 22 set_preserve_transform 0 4 3567 33 ModelNode::set_preserve_transform 0 1 1506 1760
////////////////////////////////////////////////////////////////////
//     Function: ModelNode::set_preserve_transform
//       Access: Public
//  Description: Sets the preserve_transform flag.  This restricts the
//               ability of a flatten operation to affect the
//               transform stored on this node, and/or the node
//               itself.  In the order from weakest to strongest
//               restrictions, the possible flags are:
//
//               PT_drop_node - This node should be removed at the
//               next flatten call.
//
//               PT_none - The transform may be adjusted at will.  The
//               node itself will not be removed.  This is the
//               default.
//
//               PT_net - Preserve the net transform from the root,
//               but it's acceptable to modify the local transform
//               stored on this particular node if necessary, so long
//               as the net transform is not changed.  This eliminates
//               the need to drop an extra transform on the node
//               above.
//
//               PT_local - The local (and net) transform should not
//               be changed in any way.  If necessary, an extra
//               transform will be left on the node above to guarantee
//               this.  This is a stronger restriction than PT_net.
//
//               PT_no_touch - The local transform will not be
//               changed, the node will not be removed, and
//               furthermore any flatten operation will not continue
//               below this node--this node and all descendents are
//               protected from the effects of flatten.
////////////////////////////////////////////////////////////////////
95
inline void ModelNode::set_preserve_transform(ModelNode::PreserveTransform preserve_transform);

3137 22 get_preserve_transform 0 4 3567 33 ModelNode::get_preserve_transform 0 1 1507 337
////////////////////////////////////////////////////////////////////
//     Function: ModelNode::get_preserve_transform
//       Access: Public
//  Description: Returns the current setting of the preserve_transform
//               flag.  See set_preserve_transform().
////////////////////////////////////////////////////////////////////
82
inline ModelNode::PreserveTransform ModelNode::get_preserve_transform(void) const;

3138 23 set_preserve_attributes 0 4 3567 34 ModelNode::set_preserve_attributes 0 1 1508 591
////////////////////////////////////////////////////////////////////
//     Function: ModelNode::set_preserve_attributes
//       Access: Public
//  Description: Sets the preserve_attributes flag.  This restricts the
//               ability of a flatten operation to affect the
//               render attributes stored on this node.
//
//               The value should be the union of bits from
//               SceneGraphReducer::AttribTypes that represent the
//               attributes that should *not* be changed.
////////////////////////////////////////////////////////////////////
64
inline void ModelNode::set_preserve_attributes(int attrib_mask);

3139 23 get_preserve_attributes 0 4 3567 34 ModelNode::get_preserve_attributes 0 1 1509 340
////////////////////////////////////////////////////////////////////
//     Function: ModelNode::get_preserve_attributes
//       Access: Public
//  Description: Returns the current setting of the preserve_attributes
//               flag.  See set_preserve_attributes().
////////////////////////////////////////////////////////////////////
58
inline int ModelNode::get_preserve_attributes(void) const;

3140 19 set_transform_limit 0 4 3567 30 ModelNode::set_transform_limit 0 1 1510 0
55
void ModelNode::set_transform_limit(PN_stdfloat limit);

3141 14 get_class_type 0 4 3567 25 ModelNode::get_class_type 0 1 1511 0
50
static TypeHandle ModelNode::get_class_type(void);

3142 10 ~ModelNode 0 4 3567 21 ModelNode::~ModelNode 0 0 0
28
ModelNode::~ModelNode(void);

3143 9 ModelRoot 0 4 3569 20 ModelRoot::ModelRoot 0 2 1512 1513 672
////////////////////////////////////////////////////////////////////
//     Function: ModelRoot::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ModelRoot::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ModelRoot::Copy Constructor
//       Access: Protected
//  Description:
////////////////////////////////////////////////////////////////////
122
inline ModelRoot::ModelRoot(string const &name);
inline ModelRoot::ModelRoot(Filename const &fulllpath, time_t timestamp);

3144 19 get_model_ref_count 0 4 3569 30 ModelRoot::get_model_ref_count 0 1 1514 654
////////////////////////////////////////////////////////////////////
//     Function: ModelRoot::get_model_ref_count
//       Access: Published
//  Description: Returns the number of copies that exist of this
//               particular ModelRoot node.  Each time
//               ModelRoot::copy_subgraph() or make_copy() is called
//               (or some other copying mechanism, such as
//               NodePath.copy_to(), is used), this count will
//               increment by one in all copies; when one of the
//               copies is destructed, this count will decrement.
////////////////////////////////////////////////////////////////////
54
inline int ModelRoot::get_model_ref_count(void) const;

3145 12 get_fullpath 0 4 3569 23 ModelRoot::get_fullpath 0 1 1515 463
////////////////////////////////////////////////////////////////////
//     Function: ModelRoot::get_fullpath
//       Access: Published
//  Description: Returns the full pathname of the model represented by
//               this node, as found on disk.  This is mainly useful
//               for reference purposes, but is also used to index the
//               ModelRoot into the ModelPool.
////////////////////////////////////////////////////////////////////
59
inline Filename const &ModelRoot::get_fullpath(void) const;

3146 12 set_fullpath 0 4 3569 23 ModelRoot::set_fullpath 0 1 1516 714
////////////////////////////////////////////////////////////////////
//     Function: ModelRoot::set_fullpath
//       Access: Published
//  Description: Sets the full pathname of the model represented by
//               this node, as found on disk.  This is mainly useful
//               for reference purposes, but is also used to index the
//               ModelRoot into the ModelPool.
//
//               This is normally set automatically when a model is
//               loaded, and should not be set directly by the user.
//               If you change this on a loaded model, then
//               ModelPool::release_model() may fail.
////////////////////////////////////////////////////////////////////
62
inline void ModelRoot::set_fullpath(Filename const &fullpath);

3147 13 get_timestamp 0 4 3569 24 ModelRoot::get_timestamp 0 1 1517 610
////////////////////////////////////////////////////////////////////
//     Function: ModelRoot::get_timestamp
//       Access: Published
//  Description: Returns the timestamp of the file on disk that was
//               read for this model, at the time it was read, if it
//               is known.  Returns 0 if the timestamp is not known or
//               could not be provided.  This can be used as a quick
//               (but fallible) check to verify whether the file might
//               have changed since the model was read.
////////////////////////////////////////////////////////////////////
51
inline time_t ModelRoot::get_timestamp(void) const;

3148 13 set_timestamp 0 4 3569 24 ModelRoot::set_timestamp 0 1 1518 447
////////////////////////////////////////////////////////////////////
//     Function: ModelRoot::set_timestamp
//       Access: Published
//  Description: Sets the timestamp of the file on disk that was read
//               for this model.  This is normally set automatically
//               when a model is loaded, and should not be set
//               directly by the user.
////////////////////////////////////////////////////////////////////
55
inline void ModelRoot::set_timestamp(time_t timestamp);

3149 14 ModelReference 0 4 3570 41 ModelRoot::ModelReference::ModelReference 0 1 1522 237
////////////////////////////////////////////////////////////////////
//     Function: ModelRoot::ModelReference::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
55
inline ModelRoot::ModelReference::ModelReference(void);

3150 15 ~ModelReference 0 4 3570 42 ModelRoot::ModelReference::~ModelReference 0 0 0
49
ModelRoot::ModelReference::~ModelReference(void);

3151 13 get_reference 0 4 3569 24 ModelRoot::get_reference 0 1 1519 604
////////////////////////////////////////////////////////////////////
//     Function: ModelRoot::get_reference
//       Access: Published
//  Description: Returns the pointer that represents the object shared
//               between all copies of this ModelRoot.  Since there's
//               not much associated with this object other than a
//               reference count, normally there's not much reason to
//               get the pointer (though it may be compared
//               pointerwise with other ModelRoot objects).
////////////////////////////////////////////////////////////////////
71
inline ModelRoot::ModelReference *ModelRoot::get_reference(void) const;

3152 13 set_reference 0 4 3569 24 ModelRoot::set_reference 0 1 1520 469
////////////////////////////////////////////////////////////////////
//     Function: ModelRoot::set_reference
//       Access: Published
//  Description: Changes the pointer that represents the object shared
//               between all copies of this ModelRoot.  This will
//               disassociate this ModelRoot from all of its copies.
//               Normally, there's no reason to do this.
////////////////////////////////////////////////////////////////////
62
void ModelRoot::set_reference(ModelRoot::ModelReference *ref);

3153 14 get_class_type 0 4 3569 25 ModelRoot::get_class_type 0 1 1521 0
50
static TypeHandle ModelRoot::get_class_type(void);

3154 10 ~ModelRoot 0 4 3569 21 ModelRoot::~ModelRoot 0 0 0
28
ModelRoot::~ModelRoot(void);

3155 9 has_model 0 4 3571 20 ModelPool::has_model 0 1 1523 394
////////////////////////////////////////////////////////////////////
//     Function: ModelPool::has_model
//       Access: Public, Static
//  Description: Returns true if the model has ever been loaded,
//               false otherwise.  Note that this does not guarantee
//               that the model is still up-to-date.
////////////////////////////////////////////////////////////////////
66
static inline bool ModelPool::has_model(Filename const &filename);

3156 12 verify_model 0 4 3571 23 ModelPool::verify_model 0 1 1524 915
////////////////////////////////////////////////////////////////////
//     Function: ModelPool::verify_model
//       Access: Public, Static
//  Description: Loads the given filename up as a model, if it has
//               not already been loaded, and returns true to indicate
//               success, or false to indicate failure.  If this
//               returns true, it is probable that a subsequent call
//               to load_model() with the same model name will
//               return a valid PandaNode.
//
//               However, even if this returns true, it is still
//               possible for a subsequent call to load_model() to
//               fail.  This can happen if cache-check-timestamps is
//               true, and the on-disk file is subsequently modified
//               to replace it with an invalid model.
////////////////////////////////////////////////////////////////////
69
static inline bool ModelPool::verify_model(Filename const &filename);

3157 9 get_model 0 4 3571 20 ModelPool::get_model 0 1 1525 516
////////////////////////////////////////////////////////////////////
//     Function: ModelPool::get_model
//       Access: Public, Static
//  Description: Returns the model that has already been previously
//               loaded, or NULL otherwise.  If verify is true, it
//               will check if the file is still up-to-date (and
//               hasn't been modified in the meantime), and if not,
//               will still return NULL.
////////////////////////////////////////////////////////////////////
85
static inline ModelRoot *ModelPool::get_model(Filename const &filename, bool verify);

3158 10 load_model 0 4 3571 21 ModelPool::load_model 0 1 1526 690
////////////////////////////////////////////////////////////////////
//     Function: ModelPool::load_model
//       Access: Public, Static
//  Description: Loads the given filename up as a model, if it has
//               not already been loaded, and returns the new model.
//               If a model with the same filename was previously
//               loaded, returns that one instead (unless
//               cache-check-timestamps is true and the file has
//               recently changed).  If the model file cannot be
//               found, or cannot be loaded for some reason, returns
//               NULL.
////////////////////////////////////////////////////////////////////
121
static inline ModelRoot *ModelPool::load_model(Filename const &filename, LoaderOptions const &options = LoaderOptions());

3159 9 add_model 0 4 3571 20 ModelPool::add_model 0 2 1527 1528 967
////////////////////////////////////////////////////////////////////
//     Function: ModelPool::add_model
//       Access: Public, Static
//  Description: Adds the indicated already-loaded model to the
//               pool.  The model will replace any previously-loaded
//               model in the pool that had the same filename.
//
//               This two-parameter version of this method is
//               deprecated; use the one-parameter add_model(model)
//               instead.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ModelPool::add_model
//       Access: Public, Static
//  Description: Adds the indicated already-loaded model to the
//               pool.  The model will replace any previously-loaded
//               model in the pool that had the same filename.
////////////////////////////////////////////////////////////////////
143
static inline void ModelPool::add_model(Filename const &filename, ModelRoot *model);
static inline void ModelPool::add_model(ModelRoot *model);

3160 13 release_model 0 4 3571 24 ModelPool::release_model 0 2 1529 1530 1432
////////////////////////////////////////////////////////////////////
//     Function: ModelPool::release_model
//       Access: Public, Static
//  Description: Removes the indicated model from the pool,
//               indicating it will never be loaded again; the model
//               may then be freed.  If this function is never called,
//               a reference count will be maintained on every model
//               every loaded, and models will never be freed.
//
//               This version of this method is deprecated; use
//               release_model(model) instead.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ModelPool::release_model
//       Access: Public, Static
//  Description: Removes the indicated model from the pool,
//               indicating it will never be loaded again; the model
//               may then be freed.  If this function (and
//               garbage_collect()) is never called, a reference count
//               will be maintained on every model every loaded, and
//               models will never be freed.
//
//               The model's get_fullpath() value should not have been
//               changed during its lifetime, or this function may
//               fail to locate it in the pool.
////////////////////////////////////////////////////////////////////
133
static inline void ModelPool::release_model(Filename const &filename);
static inline void ModelPool::release_model(ModelRoot *model);

3161 18 release_all_models 0 4 3571 29 ModelPool::release_all_models 0 1 1531 324
////////////////////////////////////////////////////////////////////
//     Function: ModelPool::release_all_models
//       Access: Public, Static
//  Description: Releases all models in the pool and restores the
//               pool to the empty state.
////////////////////////////////////////////////////////////////////
55
static inline void ModelPool::release_all_models(void);

3162 15 garbage_collect 0 4 3571 26 ModelPool::garbage_collect 0 1 1532 469
////////////////////////////////////////////////////////////////////
//     Function: ModelPool::garbage_collect
//       Access: Public, Static
//  Description: Releases only those models in the pool that have a
//               reference count of exactly 1; i.e. only those
//               models that are not being used outside of the pool.
//               Returns the number of models released.
////////////////////////////////////////////////////////////////////
51
static inline int ModelPool::garbage_collect(void);

3163 13 list_contents 0 4 3571 24 ModelPool::list_contents 0 2 1533 1534 590
////////////////////////////////////////////////////////////////////
//     Function: ModelPool::list_contents
//       Access: Public, Static
//  Description: Lists the contents of the model pool to the
//               indicated output stream.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ModelPool::list_contents
//       Access: Public, Static
//  Description: Lists the contents of the model pool to cout.
////////////////////////////////////////////////////////////////////
109
static inline void ModelPool::list_contents(ostream &out);
static inline void ModelPool::list_contents(void);

3164 5 write 0 4 3571 16 ModelPool::write 0 1 1535 348
////////////////////////////////////////////////////////////////////
//     Function: ModelPool::write
//       Access: Published, Static
//  Description: Lists the contents of the model pool to the
//               indicated output stream.
//               Helps with debugging.
////////////////////////////////////////////////////////////////////
43
static void ModelPool::write(ostream &out);

3165 10 ~ModelPool 0 4 3571 21 ModelPool::~ModelPool 0 0 0
28
ModelPool::~ModelPool(void);

3166 16 ModelSaveRequest 0 4 3572 34 ModelSaveRequest::ModelSaveRequest 0 1 1536 350
////////////////////////////////////////////////////////////////////
//     Function: ModelSaveRequest::Constructor
//       Access: Published
//  Description: Create a new ModelSaveRequest, and add it to the loader
//               via save_async(), to begin an asynchronous save.
////////////////////////////////////////////////////////////////////
144
ModelSaveRequest::ModelSaveRequest(string const &name, Filename const &filename, LoaderOptions const &options, PandaNode *node, Loader *loader);

3167 12 get_filename 0 4 3572 30 ModelSaveRequest::get_filename 0 1 1537 319
////////////////////////////////////////////////////////////////////
//     Function: ModelSaveRequest::get_filename
//       Access: Published
//  Description: Returns the filename associated with this
//               asynchronous ModelSaveRequest.
////////////////////////////////////////////////////////////////////
66
inline Filename const &ModelSaveRequest::get_filename(void) const;

3168 11 get_options 0 4 3572 29 ModelSaveRequest::get_options 0 1 1538 323
////////////////////////////////////////////////////////////////////
//     Function: ModelSaveRequest::get_options
//       Access: Published
//  Description: Returns the LoaderOptions associated with this
//               asynchronous ModelSaveRequest.
////////////////////////////////////////////////////////////////////
70
inline LoaderOptions const &ModelSaveRequest::get_options(void) const;

3169 8 get_node 0 4 3572 26 ModelSaveRequest::get_node 0 1 1539 278
////////////////////////////////////////////////////////////////////
//     Function: ModelSaveRequest::get_node
//       Access: Published
//  Description: Returns the node that was passed to the constructor.
////////////////////////////////////////////////////////////////////
57
inline PandaNode *ModelSaveRequest::get_node(void) const;

3170 10 get_loader 0 4 3572 28 ModelSaveRequest::get_loader 0 1 1540 322
////////////////////////////////////////////////////////////////////
//     Function: ModelSaveRequest::get_loader
//       Access: Published
//  Description: Returns the Loader object associated with this
//               asynchronous ModelSaveRequest.
////////////////////////////////////////////////////////////////////
56
inline Loader *ModelSaveRequest::get_loader(void) const;

3171 8 is_ready 0 4 3572 26 ModelSaveRequest::is_ready 0 1 1541 412
////////////////////////////////////////////////////////////////////
//     Function: ModelSaveRequest::is_ready
//       Access: Published
//  Description: Returns true if this request has completed, false if
//               it is still pending.  When this returns true, you may
//               retrieve the success flag with get_success().
////////////////////////////////////////////////////////////////////
51
inline bool ModelSaveRequest::is_ready(void) const;

3172 11 get_success 0 4 3572 29 ModelSaveRequest::get_success 0 1 1542 394
////////////////////////////////////////////////////////////////////
//     Function: ModelSaveRequest::get_success
//       Access: Published
//  Description: Returns the true if the model was saved successfully,
//               false otherwise.  It is an error to call this unless
//               is_ready() returns true.
////////////////////////////////////////////////////////////////////
54
inline bool ModelSaveRequest::get_success(void) const;

3173 14 get_class_type 0 4 3572 32 ModelSaveRequest::get_class_type 0 1 1543 0
57
static TypeHandle ModelSaveRequest::get_class_type(void);

3174 17 ~ModelSaveRequest 0 4 3572 35 ModelSaveRequest::~ModelSaveRequest 0 0 0
42
ModelSaveRequest::~ModelSaveRequest(void);

3175 18 NodePathCollection 0 4 3573 38 NodePathCollection::NodePathCollection 0 3 1544 1545 1546 467
////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
193
NodePathCollection::NodePathCollection(void);
NodePathCollection::NodePathCollection(NodePathCollection const &copy);
NodePathCollection::NodePathCollection(PyObject *self, PyObject *sequence);

3176 10 operator = 0 4 3573 30 NodePathCollection::operator = 0 1 1547 0
68
void NodePathCollection::operator =(NodePathCollection const &copy);

3177 19 ~NodePathCollection 0 4 3573 39 NodePathCollection::~NodePathCollection 0 0 229
////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
53
inline NodePathCollection::~NodePathCollection(void);

3178 10 __reduce__ 0 4 3573 30 NodePathCollection::__reduce__ 0 1 1548 0
63
PyObject *NodePathCollection::__reduce__(PyObject *self) const;

3179 8 add_path 0 4 3573 28 NodePathCollection::add_path 0 1 1549 266
////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::add_path
//       Access: Published
//  Description: Adds a new NodePath to the collection.
////////////////////////////////////////////////////////////////////
61
void NodePathCollection::add_path(NodePath const &node_path);

3180 11 remove_path 0 4 3573 31 NodePathCollection::remove_path 0 1 1550 402
////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::remove_path
//       Access: Published
//  Description: Removes the indicated NodePath from the collection.
//               Returns true if the path was removed, false if it was
//               not a member of the collection.
////////////////////////////////////////////////////////////////////
64
bool NodePathCollection::remove_path(NodePath const &node_path);

3181 14 add_paths_from 0 4 3573 34 NodePathCollection::add_paths_from 0 1 1551 472
////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::add_paths_from
//       Access: Published
//  Description: Adds all the NodePaths indicated in the other
//               collection to this path.  The other paths are simply
//               appended to the end of the paths in this list;
//               duplicates are not automatically removed.
////////////////////////////////////////////////////////////////////
73
void NodePathCollection::add_paths_from(NodePathCollection const &other);

3182 17 remove_paths_from 0 4 3573 37 NodePathCollection::remove_paths_from 0 1 1552 335
////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::remove_paths_from
//       Access: Published
//  Description: Removes from this collection all of the NodePaths
//               listed in the other collection.
////////////////////////////////////////////////////////////////////
76
void NodePathCollection::remove_paths_from(NodePathCollection const &other);

3183 22 remove_duplicate_paths 0 4 3573 42 NodePathCollection::remove_duplicate_paths 0 1 1553 473
////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::remove_duplicate_paths
//       Access: Published
//  Description: Removes any duplicate entries of the same NodePaths
//               on this collection.  If a NodePath appears multiple
//               times, the first appearance is retained; subsequent
//               appearances are removed.
////////////////////////////////////////////////////////////////////
54
void NodePathCollection::remove_duplicate_paths(void);

3184 8 has_path 0 4 3573 28 NodePathCollection::has_path 0 1 1554 328
////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::has_path
//       Access: Published
//  Description: Returns true if the indicated NodePath appears in
//               this collection, false otherwise.
////////////////////////////////////////////////////////////////////
62
bool NodePathCollection::has_path(NodePath const &path) const;

3185 5 clear 0 4 3573 25 NodePathCollection::clear 0 1 1555 267
////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::clear
//       Access: Published
//  Description: Removes all NodePaths from the collection.
////////////////////////////////////////////////////////////////////
37
void NodePathCollection::clear(void);

3186 7 reserve 0 4 3573 27 NodePathCollection::reserve 0 1 1556 404
////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::reserve
//       Access: Published
//  Description: This is a hint to Panda to allocate enough memory
//               to hold the given number of NodePaths, if you know
//               ahead of time how many you will be adding.
////////////////////////////////////////////////////////////////////
45
void NodePathCollection::reserve(size_t num);

3187 8 is_empty 0 4 3573 28 NodePathCollection::is_empty 0 1 1557 319
////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::is_empty
//       Access: Published
//  Description: Returns true if there are no NodePaths in the
//               collection, false otherwise.
////////////////////////////////////////////////////////////////////
46
bool NodePathCollection::is_empty(void) const;

3188 13 get_num_paths 0 4 3573 33 NodePathCollection::get_num_paths 0 1 1558 283
////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::get_num_paths
//       Access: Published
//  Description: Returns the number of NodePaths in the collection.
////////////////////////////////////////////////////////////////////
50
int NodePathCollection::get_num_paths(void) const;

3189 8 get_path 0 4 3573 28 NodePathCollection::get_path 0 1 1559 271
////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::get_path
//       Access: Published
//  Description: Returns the nth NodePath in the collection.
////////////////////////////////////////////////////////////////////
55
NodePath NodePathCollection::get_path(int index) const;

3190 11 operator [] 0 4 3573 31 NodePathCollection::operator [] 0 1 1560 0
58
NodePath NodePathCollection::operator [](int index) const;

3191 4 size 0 4 3573 24 NodePathCollection::size 0 1 1561 331
////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::size
//       Access: Published
//  Description: Returns the number of paths in the collection.  This
//               is the same thing as get_num_paths().
////////////////////////////////////////////////////////////////////
41
int NodePathCollection::size(void) const;

3192 11 operator += 0 4 3573 31 NodePathCollection::operator += 0 1 1562 0
77
inline void NodePathCollection::operator +=(NodePathCollection const &other);

3193 10 operator + 0 4 3573 30 NodePathCollection::operator + 0 1 1563 0
96
inline NodePathCollection NodePathCollection::operator +(NodePathCollection const &other) const;

3194 6 append 0 4 3573 26 NodePathCollection::append 0 1 1564 449
// Method names to satisfy Python's conventions.

////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::append
//       Access: Published
//  Description: Adds a new NodePath to the collection.  This method
//               duplicates the add_path() method; it is provided to
//               satisfy Python's naming convention.
////////////////////////////////////////////////////////////////////
66
inline void NodePathCollection::append(NodePath const &node_path);

3195 6 extend 0 4 3573 26 NodePathCollection::extend 0 1 1565 402
////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::extend
//       Access: Published
//  Description: Appends the other list onto the end of this one.
//               This method duplicates the += operator; it is
//               provided to satisfy Python's naming convention.
////////////////////////////////////////////////////////////////////
72
inline void NodePathCollection::extend(NodePathCollection const &other);

3196 2 ls 0 4 3573 22 NodePathCollection::ls 0 2 1566 1567 680
// Handy operations on many NodePaths at once.

////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::ls
//       Access: Published
//  Description: Lists all the nodes at and below each node in the
//               collection hierarchically.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::ls
//       Access: Published
//  Description: Lists all the nodes at and below each node in the
//               collection hierarchically.
////////////////////////////////////////////////////////////////////
118
inline void NodePathCollection::ls(void) const;
void NodePathCollection::ls(ostream &out, int indent_level = 0) const;

3197 16 find_all_matches 0 4 3573 36 NodePathCollection::find_all_matches 0 1 1568 447
////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::find_all_matches
//       Access: Published
//  Description: Returns the complete set of all NodePaths that begin
//               with any NodePath in this collection and can be
//               extended by path.  The shortest paths will be listed
//               first.
////////////////////////////////////////////////////////////////////
82
NodePathCollection NodePathCollection::find_all_matches(string const &path) const;

3198 11 reparent_to 0 4 3573 31 NodePathCollection::reparent_to 0 1 1569 316
////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::reparent_to
//       Access: Published
//  Description: Reparents all the NodePaths in the collection to the
//               indicated node.
////////////////////////////////////////////////////////////////////
60
void NodePathCollection::reparent_to(NodePath const &other);

3199 15 wrt_reparent_to 0 4 3573 35 NodePathCollection::wrt_reparent_to 0 1 1570 402
////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::wrt_reparent_to
//       Access: Published
//  Description: Reparents all the NodePaths in the collection to the
//               indicated node, adjusting each transform so as not to
//               move in world coordinates.
////////////////////////////////////////////////////////////////////
64
void NodePathCollection::wrt_reparent_to(NodePath const &other);

3200 4 show 0 4 3573 24 NodePathCollection::show 0 1 1571 262
////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::show
//       Access: Published
//  Description: Shows all NodePaths in the collection.
////////////////////////////////////////////////////////////////////
36
void NodePathCollection::show(void);

3201 4 hide 0 4 3573 24 NodePathCollection::hide 0 1 1572 262
////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::show
//       Access: Published
//  Description: Hides all NodePaths in the collection.
////////////////////////////////////////////////////////////////////
36
void NodePathCollection::hide(void);

3202 5 stash 0 4 3573 25 NodePathCollection::stash 0 1 1573 265
////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::stash
//       Access: Published
//  Description: Stashes all NodePaths in the collection.
////////////////////////////////////////////////////////////////////
37
void NodePathCollection::stash(void);

3203 7 unstash 0 4 3573 27 NodePathCollection::unstash 0 1 1574 269
////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::unstash
//       Access: Published
//  Description: Unstashes all NodePaths in the collection.
////////////////////////////////////////////////////////////////////
39
void NodePathCollection::unstash(void);

3204 6 detach 0 4 3573 26 NodePathCollection::detach 0 1 1575 267
////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::detach
//       Access: Published
//  Description: Detaches all NodePaths in the collection.
////////////////////////////////////////////////////////////////////
38
void NodePathCollection::detach(void);

3205 16 get_collide_mask 0 4 3573 36 NodePathCollection::get_collide_mask 0 1 1576 610
////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::get_collide_mask
//       Access: Published
//  Description: Returns the union of all of the into_collide_masks
//               for nodes at this level and below.  This is the same
//               thing as node()->get_net_collide_mask().
//
//               If you want to return what the into_collide_mask of
//               this node itself is, without regard to its children,
//               use node()->get_into_collide_mask().
////////////////////////////////////////////////////////////////////
61
CollideMask NodePathCollection::get_collide_mask(void) const;

3206 16 set_collide_mask 0 4 3573 36 NodePathCollection::set_collide_mask 0 1 1577 681
////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::set_collide_mask
//       Access: Published
//  Description: Recursively applies the indicated CollideMask to the
//               into_collide_masks for all nodes at this level and
//               below.
//
//               The default is to change all bits, but if
//               bits_to_change is not all bits on, then only the bits
//               that are set in bits_to_change are modified, allowing
//               this call to change only a subset of the bits in the
//               subgraph.
////////////////////////////////////////////////////////////////////
138
void NodePathCollection::set_collide_mask(CollideMask new_mask, CollideMask bits_to_change = (all_on()), TypeHandle node_type = (none()));

3207 17 calc_tight_bounds 0 4 3573 37 NodePathCollection::calc_tight_bounds 0 1 1578 682
////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::calc_tight_bounds
//       Access: Published
//  Description: Calculates the minimum and maximum vertices of all
//               Geoms at these NodePath's bottom nodes and below
//               This is a tight bounding box; it will generally be
//               tighter than the bounding volume returned by
//               get_bounds() (but it is more expensive to compute).
//
//               The return value is true if any points are within the
//               bounding volume, or false if none are.
////////////////////////////////////////////////////////////////////
89
bool NodePathCollection::calc_tight_bounds(LPoint3 &min_point, LPoint3 &max_point) const;

3208 16 get_tight_bounds 0 4 3573 36 NodePathCollection::get_tight_bounds 0 1 1579 0
59
PyObject *NodePathCollection::get_tight_bounds(void) const;

3209 11 set_texture 0 4 3573 31 NodePathCollection::set_texture 0 2 1580 1581 1355
////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::set_texture
//       Access: Published
//  Description: Adds the indicated texture to the list of textures
//               that will be rendered on the default texture stage.
//
//               This is the deprecated single-texture variant of this
//               method; it is now superceded by set_texture() that
//               accepts a stage and texture.  However, this method
//               may be used in the presence of multitexture if you
//               just want to adjust the default stage.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::set_texture
//       Access: Published
//  Description: Adds the indicated texture to the list of textures
//               that will be rendered on the indicated multitexture
//               stage.  If there are multiple texture stages
//               specified (possibly on multiple different nodes at
//               different levels), they will all be applied to
//               geometry together, according to the stage
//               specification set up in the TextureStage object.
////////////////////////////////////////////////////////////////////
160
void NodePathCollection::set_texture(Texture *tex, int priority = 0);
void NodePathCollection::set_texture(TextureStage *stage, Texture *tex, int priority = 0);

3210 15 set_texture_off 0 4 3573 35 NodePathCollection::set_texture_off 0 2 1582 1583 1202
////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::set_texture_off
//       Access: Published
//  Description: Sets the geometry at this level and below to render
//               using no texture, on any stage.  This is different
//               from not specifying a texture; rather, this
//               specifically contradicts set_texture() at a higher
//               node level (or, with a priority, overrides a
//               set_texture() at a lower level).
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::set_texture_off
//       Access: Published
//  Description: Sets the geometry at this level and below to render
//               using no texture, on the indicated stage.  This is
//               different from not specifying a texture; rather, this
//               specifically contradicts set_texture() at a higher
//               node level (or, with a priority, overrides a
//               set_texture() at a lower level).
////////////////////////////////////////////////////////////////////
140
void NodePathCollection::set_texture_off(int priority = 0);
void NodePathCollection::set_texture_off(TextureStage *stage, int priority = 0);

3211 9 set_color 0 4 3573 29 NodePathCollection::set_color 0 2 1584 1585 536
////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::set_color
//       Access: Published
//  Description: Colors all NodePaths in the collection
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::set_color
//       Access: Published
//  Description: Colors all NodePaths in the collection
////////////////////////////////////////////////////////////////////
201
inline void NodePathCollection::set_color(PN_stdfloat r, PN_stdfloat g, PN_stdfloat b, PN_stdfloat a = 1.0, int priority = 0);
void NodePathCollection::set_color(LColor const &color, int priority = 0);

3212 15 set_color_scale 0 4 3573 35 NodePathCollection::set_color_scale 0 2 1586 1587 696
////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::set_color_scale
//       Access: Published
//  Description: Applies color scales to all NodePaths in the
//               collection.  The existing color scale is replaced.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::set_color_scale
//       Access: Published
//  Description: Applies color scales to all NodePaths in the
//               collection.  The existing color scale is replaced.
////////////////////////////////////////////////////////////////////
216
inline void NodePathCollection::set_color_scale(PN_stdfloat r, PN_stdfloat g, PN_stdfloat b, PN_stdfloat a = 1.0, int priority = 0);
void NodePathCollection::set_color_scale(LVecBase4 const &scale, int priority = 0);

3213 19 compose_color_scale 0 4 3573 39 NodePathCollection::compose_color_scale 0 2 1588 1589 818
////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::compose_color_scale
//       Access: Published
//  Description: Applies color scales to all NodePaths in the
//               collection.  The existing color scale, if any, is
//               multiplied by the specified color scale.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::compose_color_scale
//       Access: Published
//  Description: Applies color scales to all NodePaths in the
//               collection.  The existing color scale, if any, is
//               multiplied by the specified color scale.
////////////////////////////////////////////////////////////////////
224
inline void NodePathCollection::compose_color_scale(PN_stdfloat r, PN_stdfloat g, PN_stdfloat b, PN_stdfloat a = 1.0, int priority = 0);
void NodePathCollection::compose_color_scale(LVecBase4 const &scale, int priority = 0);

3214 10 set_attrib 0 4 3573 30 NodePathCollection::set_attrib 0 1 1590 504
////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::set_attrib
//       Access: Published
//  Description: Applies the indicated RenderAttrib to all NodePaths
//               in the collection.  An effort is made to apply the
//               attrib to many NodePaths as quickly as possible;
//               redundant RenderState compositions are not
//               duplicated.
////////////////////////////////////////////////////////////////////
82
void NodePathCollection::set_attrib(RenderAttrib const *attrib, int priority = 0);

3215 6 output 0 4 3573 26 NodePathCollection::output 0 1 1591 336
////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::output
//       Access: Published
//  Description: Writes a brief one-line description of the
//               NodePathCollection to the indicated output stream.
////////////////////////////////////////////////////////////////////
52
void NodePathCollection::output(ostream &out) const;

3216 5 write 0 4 3573 25 NodePathCollection::write 0 1 1592 340
////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::write
//       Access: Published
//  Description: Writes a complete multi-line description of the
//               NodePathCollection to the indicated output stream.
////////////////////////////////////////////////////////////////////
73
void NodePathCollection::write(ostream &out, int indent_level = 0) const;

3217 4 make 0 4 3574 19 TextureAttrib::make 0 2 1593 1594 1089
// These methods are used to create a simple, single-textured layer.
// For multitexture, use the multitexture interfaces, further below.

// The following methods define the new multitexture mode for
// TextureAttrib.  Each TextureAttrib can add or remove individual
// texture stages from the complete set of textures that are to be
// applied; this is similar to the mechanism of LightAttrib.

////////////////////////////////////////////////////////////////////
//     Function: TextureAttrib::make
//       Access: Published, Static
//  Description: Constructs a new TextureAttrib object suitable for
//               rendering the indicated texture onto geometry, using
//               the default TextureStage.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: TextureAttrib::make
//       Access: Published, Static
//  Description: Constructs a new TextureAttrib object that does
//               nothing.
////////////////////////////////////////////////////////////////////
137
static ConstPointerTo< RenderAttrib > TextureAttrib::make(Texture *tex);
static ConstPointerTo< RenderAttrib > TextureAttrib::make(void);

3218 8 make_off 0 4 3574 23 TextureAttrib::make_off 0 1 1595 329
////////////////////////////////////////////////////////////////////
//     Function: TextureAttrib::make_off
//       Access: Published, Static
//  Description: Constructs a new TextureAttrib object suitable for
//               rendering untextured geometry.
////////////////////////////////////////////////////////////////////
68
static ConstPointerTo< RenderAttrib > TextureAttrib::make_off(void);

3219 12 make_default 0 4 3574 27 TextureAttrib::make_default 0 1 1596 400
////////////////////////////////////////////////////////////////////
//     Function: TextureAttrib::make_default
//       Access: Published, Static
//  Description: Returns a RenderAttrib that corresponds to whatever
//               the standard default properties for render attributes
//               of this type ought to be.
////////////////////////////////////////////////////////////////////
72
static ConstPointerTo< RenderAttrib > TextureAttrib::make_default(void);

3220 6 is_off 0 4 3574 21 TextureAttrib::is_off 0 1 1597 679
////////////////////////////////////////////////////////////////////
//     Function: TextureAttrib::is_off
//       Access: Published
//  Description: Returns true if the TextureAttrib is an 'off'
//               TextureAttrib, indicating that it should disable
//               texturing.
//
//               If multitexture is in effect, a TextureAttrib may not
//               be strictly "on" or "off"; therefore, to get a more
//               precise answer to this question, you should consider
//               using has_all_off() or get_num_off_stages() or
//               has_off_stage() instead.
////////////////////////////////////////////////////////////////////
46
inline bool TextureAttrib::is_off(void) const;

3221 11 get_texture 0 4 3574 26 TextureAttrib::get_texture 0 1 1598 386
////////////////////////////////////////////////////////////////////
//     Function: TextureAttrib::get_texture
//       Access: Published
//  Description: If the TextureAttrib is not an 'off' TextureAttrib,
//               returns the base-level texture that is associated.
//               Otherwise, return NULL.
////////////////////////////////////////////////////////////////////
55
inline Texture *TextureAttrib::get_texture(void) const;

3222 12 make_all_off 0 4 3574 27 TextureAttrib::make_all_off 0 1 1599 347
////////////////////////////////////////////////////////////////////
//     Function: TextureAttrib::make_all_off
//       Access: Published, Static
//  Description: Constructs a new TextureAttrib object that turns off
//               all stages (and hence disables texturing).
////////////////////////////////////////////////////////////////////
72
static ConstPointerTo< RenderAttrib > TextureAttrib::make_all_off(void);

3223 17 get_num_on_stages 0 4 3574 32 TextureAttrib::get_num_on_stages 0 1 1600 314
////////////////////////////////////////////////////////////////////
//     Function: TextureAttrib::get_num_on_stages
//       Access: Published
//  Description: Returns the number of stages that are turned on by
//               the attribute.
////////////////////////////////////////////////////////////////////
56
inline int TextureAttrib::get_num_on_stages(void) const;

3224 12 get_on_stage 0 4 3574 27 TextureAttrib::get_on_stage 0 1 1601 317
////////////////////////////////////////////////////////////////////
//     Function: TextureAttrib::get_on_stage
//       Access: Published
//  Description: Returns the nth stage turned on by the attribute,
//               sorted in render order.
////////////////////////////////////////////////////////////////////
62
inline TextureStage *TextureAttrib::get_on_stage(int n) const;

3225 20 get_num_on_ff_stages 0 4 3574 35 TextureAttrib::get_num_on_ff_stages 0 1 1602 409
////////////////////////////////////////////////////////////////////
//     Function: TextureAttrib::get_num_on_ff_stages
//       Access: Published
//  Description: Returns the number of on-stages that are relevant
//               to the classic fixed function pipeline.  This excludes
//               texture stages such as normal maps.
////////////////////////////////////////////////////////////////////
59
inline int TextureAttrib::get_num_on_ff_stages(void) const;

3226 15 get_on_ff_stage 0 4 3574 30 TextureAttrib::get_on_ff_stage 0 1 1603 479
////////////////////////////////////////////////////////////////////
//     Function: TextureAttrib::get_render_ff_stage
//       Access: Published
//  Description: Returns the nth stage turned on by the attribute,
//               sorted in render order, including only those relevant
//               to the classic fixed function pipeline.  This excludes
//               texture stages such as normal maps.
////////////////////////////////////////////////////////////////////
65
inline TextureStage *TextureAttrib::get_on_ff_stage(int n) const;

3227 15 get_ff_tc_index 0 4 3574 30 TextureAttrib::get_ff_tc_index 0 1 1604 610
////////////////////////////////////////////////////////////////////
//     Function: TextureAttrib::get_ff_tc_index
//       Access: Published
//  Description: For each TextureStage listed in get_on_ff_stage(),
//               this returns a unique index number for the texture
//               coordinate name used by that TextureStage.  It is
//               guaranteed to remain the same index number for each
//               texcoord name (for a given set of TextureStages),
//               even if the texture render order changes.
////////////////////////////////////////////////////////////////////
55
inline int TextureAttrib::get_ff_tc_index(int n) const;

3228 12 has_on_stage 0 4 3574 27 TextureAttrib::has_on_stage 0 1 1605 324
////////////////////////////////////////////////////////////////////
//     Function: TextureAttrib::has_on_stage
//       Access: Published
//  Description: Returns true if the indicated stage is turned on by
//               the attrib, false otherwise.
////////////////////////////////////////////////////////////////////
67
inline bool TextureAttrib::has_on_stage(TextureStage *stage) const;

3229 14 get_on_texture 0 4 3574 29 TextureAttrib::get_on_texture 0 1 1606 339
////////////////////////////////////////////////////////////////////
//     Function: TextureAttrib::get_on_texture
//       Access: Published
//  Description: Returns the texture associated with the indicated
//               stage, or NULL if no texture is associated.
////////////////////////////////////////////////////////////////////
73
inline Texture *TextureAttrib::get_on_texture(TextureStage *stage) const;

3230 14 get_on_sampler 0 4 3574 29 TextureAttrib::get_on_sampler 0 1 1607 472
////////////////////////////////////////////////////////////////////
//     Function: TextureAttrib::get_on_sampler
//       Access: Published
//  Description: Returns the sampler associated with the indicated
//               stage, or the one associated with its texture if
//               no custom stage has been specified.  It is an error
//               to call this if the stage does not exist.
////////////////////////////////////////////////////////////////////
84
inline SamplerState const &TextureAttrib::get_on_sampler(TextureStage *stage) const;

3231 21 get_on_stage_override 0 4 3574 36 TextureAttrib::get_on_stage_override 0 1 1608 316
////////////////////////////////////////////////////////////////////
//     Function: TextureAttrib::get_on_stage_override
//       Access: Published
//  Description: Returns the override value associated with the
//               indicated stage.
////////////////////////////////////////////////////////////////////
75
inline int TextureAttrib::get_on_stage_override(TextureStage *stage) const;

3232 13 find_on_stage 0 4 3574 28 TextureAttrib::find_on_stage 0 1 1609 390
////////////////////////////////////////////////////////////////////
//     Function: TextureAttrib::find_on_stage
//       Access: Published
//  Description: Returns the index number of the indicated
//               TextureStage within the list of on_stages, or -1 if
//               the indicated stage is not listed.
////////////////////////////////////////////////////////////////////
66
int TextureAttrib::find_on_stage(TextureStage const *stage) const;

3233 18 get_num_off_stages 0 4 3574 33 TextureAttrib::get_num_off_stages 0 1 1610 316
////////////////////////////////////////////////////////////////////
//     Function: TextureAttrib::get_num_off_stages
//       Access: Published
//  Description: Returns the number of stages that are turned off by
//               the attribute.
////////////////////////////////////////////////////////////////////
57
inline int TextureAttrib::get_num_off_stages(void) const;

3234 13 get_off_stage 0 4 3574 28 TextureAttrib::get_off_stage 0 1 1611 332
////////////////////////////////////////////////////////////////////
//     Function: TextureAttrib::get_off_stage
//       Access: Published
//  Description: Returns the nth stage turned off by the attribute,
//               sorted in arbitrary (pointer) order.
////////////////////////////////////////////////////////////////////
63
inline TextureStage *TextureAttrib::get_off_stage(int n) const;

3235 13 has_off_stage 0 4 3574 28 TextureAttrib::has_off_stage 0 1 1612 326
////////////////////////////////////////////////////////////////////
//     Function: TextureAttrib::has_off_stage
//       Access: Published
//  Description: Returns true if the indicated stage is turned off by
//               the attrib, false otherwise.
////////////////////////////////////////////////////////////////////
68
inline bool TextureAttrib::has_off_stage(TextureStage *stage) const;

3236 11 has_all_off 0 4 3574 26 TextureAttrib::has_all_off 0 1 1613 328
////////////////////////////////////////////////////////////////////
//     Function: TextureAttrib::has_all_off
//       Access: Published
//  Description: Returns true if this attrib turns off all stages
//               (although it may also turn some on).
////////////////////////////////////////////////////////////////////
51
inline bool TextureAttrib::has_all_off(void) const;

3237 11 is_identity 0 4 3574 26 TextureAttrib::is_identity 0 1 1614 331
////////////////////////////////////////////////////////////////////
//     Function: TextureAttrib::is_identity
//       Access: Published
//  Description: Returns true if this is an identity attrib: it does
//               not change the set of stages in use.
////////////////////////////////////////////////////////////////////
51
inline bool TextureAttrib::is_identity(void) const;

3238 12 add_on_stage 0 4 3574 27 TextureAttrib::add_on_stage 0 2 1615 1616 786
////////////////////////////////////////////////////////////////////
//     Function: TextureAttrib::add_on_stage
//       Access: Published
//  Description: Returns a new TextureAttrib, just like this one, but
//               with the indicated stage added to the list of stages
//               turned on by this attrib.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: TextureAttrib::add_on_stage
//       Access: Published
//  Description: Returns a new TextureAttrib, just like this one, but
//               with the indicated stage added to the list of stages
//               turned on by this attrib.
////////////////////////////////////////////////////////////////////
266
ConstPointerTo< RenderAttrib > TextureAttrib::add_on_stage(TextureStage *stage, Texture *tex, int override = 0) const;
ConstPointerTo< RenderAttrib > TextureAttrib::add_on_stage(TextureStage *stage, Texture *tex, SamplerState const &sampler, int override = 0) const;

3239 15 remove_on_stage 0 4 3574 30 TextureAttrib::remove_on_stage 0 1 1617 399
////////////////////////////////////////////////////////////////////
//     Function: TextureAttrib::remove_on_stage
//       Access: Published
//  Description: Returns a new TextureAttrib, just like this one, but
//               with the indicated stage removed from the list of
//               stages turned on by this attrib.
////////////////////////////////////////////////////////////////////
89
ConstPointerTo< RenderAttrib > TextureAttrib::remove_on_stage(TextureStage *stage) const;

3240 13 add_off_stage 0 4 3574 28 TextureAttrib::add_off_stage 0 1 1618 394
////////////////////////////////////////////////////////////////////
//     Function: TextureAttrib::add_off_stage
//       Access: Published
//  Description: Returns a new TextureAttrib, just like this one, but
//               with the indicated stage added to the list of stages
//               turned off by this attrib.
////////////////////////////////////////////////////////////////////
105
ConstPointerTo< RenderAttrib > TextureAttrib::add_off_stage(TextureStage *stage, int override = 0) const;

3241 16 remove_off_stage 0 4 3574 31 TextureAttrib::remove_off_stage 0 1 1619 401
////////////////////////////////////////////////////////////////////
//     Function: TextureAttrib::remove_off_stage
//       Access: Published
//  Description: Returns a new TextureAttrib, just like this one, but
//               with the indicated stage removed from the list of
//               stages turned off by this attrib.
////////////////////////////////////////////////////////////////////
90
ConstPointerTo< RenderAttrib > TextureAttrib::remove_off_stage(TextureStage *stage) const;

3242 20 unify_texture_stages 0 4 3574 35 TextureAttrib::unify_texture_stages 0 1 1620 451
////////////////////////////////////////////////////////////////////
//     Function: TextureAttrib::unify_texture_stages
//       Access: Published
//  Description: Returns a new TextureAttrib, just like this one, but
//               with any included TextureAttribs that happen to have
//               the same name as the given object replaced with the
//               object.
////////////////////////////////////////////////////////////////////
94
ConstPointerTo< RenderAttrib > TextureAttrib::unify_texture_stages(TextureStage *stage) const;

3243 14 get_class_slot 0 4 3574 29 TextureAttrib::get_class_slot 0 1 1621 0
47
static int TextureAttrib::get_class_slot(void);

3244 14 get_class_type 0 4 3574 29 TextureAttrib::get_class_type 0 1 1622 0
54
static TypeHandle TextureAttrib::get_class_type(void);

3245 14 ~TextureAttrib 0 4 3574 29 TextureAttrib::~TextureAttrib 0 0 0
36
TextureAttrib::~TextureAttrib(void);

3246 4 make 0 4 3575 18 TexGenAttrib::make 0 2 1623 1624 612
////////////////////////////////////////////////////////////////////
//     Function: TexGenAttrib::make
//       Access: Published, Static
//  Description: Constructs a TexGenAttrib that generates no stages at
//               all.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: TexGenAttrib::make
//       Access: Published, Static
//  Description: Constructs a TexGenAttrib that generates just the
//               indicated stage.
////////////////////////////////////////////////////////////////////
167
static ConstPointerTo< RenderAttrib > TexGenAttrib::make(void);
static ConstPointerTo< RenderAttrib > TexGenAttrib::make(TextureStage *stage, TexGenAttrib::Mode mode);

3247 12 make_default 0 4 3575 26 TexGenAttrib::make_default 0 1 1625 399
////////////////////////////////////////////////////////////////////
//     Function: TexGenAttrib::make_default
//       Access: Published, Static
//  Description: Returns a RenderAttrib that corresponds to whatever
//               the standard default properties for render attributes
//               of this type ought to be.
////////////////////////////////////////////////////////////////////
71
static ConstPointerTo< RenderAttrib > TexGenAttrib::make_default(void);

3248 9 add_stage 0 4 3575 23 TexGenAttrib::add_stage 0 2 1626 1627 1003
////////////////////////////////////////////////////////////////////
//     Function: TexGenAttrib::add_stage
//       Access: Published, Static
//  Description: Returns a new TexGenAttrib just like this one,
//               with the indicated generation mode for the given
//               stage.  If this stage already exists, its mode is
//               replaced.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: TexGenAttrib::add_stage
//       Access: Published, Static
//  Description: Returns a new TexGenAttrib just like this one,
//               with the indicated generation mode for the given
//               stage.  If this stage already exists, its mode is
//               replaced.
//
//               This variant also accepts constant_value, which is
//               only meaningful if mode is M_constant.
////////////////////////////////////////////////////////////////////
249
ConstPointerTo< RenderAttrib > TexGenAttrib::add_stage(TextureStage *stage, TexGenAttrib::Mode mode) const;
ConstPointerTo< RenderAttrib > TexGenAttrib::add_stage(TextureStage *stage, TexGenAttrib::Mode mode, LTexCoord3 const &constant_value) const;

3249 12 remove_stage 0 4 3575 26 TexGenAttrib::remove_stage 0 1 1628 331
////////////////////////////////////////////////////////////////////
//     Function: TexGenAttrib::remove_stage
//       Access: Published, Static
//  Description: Returns a new TexGenAttrib just like this one,
//               with the indicated stage removed.
////////////////////////////////////////////////////////////////////
85
ConstPointerTo< RenderAttrib > TexGenAttrib::remove_stage(TextureStage *stage) const;

3250 8 is_empty 0 4 3575 22 TexGenAttrib::is_empty 0 1 1629 323
////////////////////////////////////////////////////////////////////
//     Function: TexGenAttrib::is_empty
//       Access: Published
//  Description: Returns true if no stages are defined in the
//               TexGenAttrib, false if at least one is.
////////////////////////////////////////////////////////////////////
40
bool TexGenAttrib::is_empty(void) const;

3251 9 has_stage 0 4 3575 23 TexGenAttrib::has_stage 0 1 1630 400
////////////////////////////////////////////////////////////////////
//     Function: TexGenAttrib::has_stage
//       Access: Published
//  Description: Returns true if there is a mode associated with
//               the indicated stage, or false otherwise (in which
//               case get_transform(stage) will return M_off).
////////////////////////////////////////////////////////////////////
56
bool TexGenAttrib::has_stage(TextureStage *stage) const;

3252 8 get_mode 0 4 3575 22 TexGenAttrib::get_mode 0 1 1631 384
////////////////////////////////////////////////////////////////////
//     Function: TexGenAttrib::get_mode
//       Access: Published
//  Description: Returns the generation mode associated with
//               the named texture stage, or M_off if
//               nothing is associated with the indicated stage.
////////////////////////////////////////////////////////////////////
69
TexGenAttrib::Mode TexGenAttrib::get_mode(TextureStage *stage) const;

3253 22 has_gen_texcoord_stage 0 4 3575 36 TexGenAttrib::has_gen_texcoord_stage 0 1 1632 477
////////////////////////////////////////////////////////////////////
//     Function: TexGenAttrib::has_gen_texcoord_stage
//       Access: Published
//  Description: Returns true if the indicated TextureStage will have
//               texture coordinates generated for it automatically
//               (and thus there is no need to upload the texture
//               coordinates encoded in the vertices).
////////////////////////////////////////////////////////////////////
69
bool TexGenAttrib::has_gen_texcoord_stage(TextureStage *stage) const;

3254 18 get_constant_value 0 4 3575 32 TexGenAttrib::get_constant_value 0 1 1633 385
////////////////////////////////////////////////////////////////////
//     Function: TexGenAttrib::get_constant_value
//       Access: Published
//  Description: Returns the constant value associated with the named
//               texture stage.  This is only meaningful if the mode
//               is M_constant.
////////////////////////////////////////////////////////////////////
78
LTexCoord3 const &TexGenAttrib::get_constant_value(TextureStage *stage) const;

3255 18 get_geom_rendering 0 4 3575 32 TexGenAttrib::get_geom_rendering 0 1 1634 448
////////////////////////////////////////////////////////////////////
//     Function: TexGenAttrib::get_geom_rendering
//       Access: Published
//  Description: Returns the union of the Geom::GeomRendering bits
//               that will be required once this TexGenAttrib is
//               applied to a geom which includes the indicated
//               geom_rendering bits.
////////////////////////////////////////////////////////////////////
70
inline int TexGenAttrib::get_geom_rendering(int geom_rendering) const;

3256 14 get_class_slot 0 4 3575 28 TexGenAttrib::get_class_slot 0 1 1635 0
46
static int TexGenAttrib::get_class_slot(void);

3257 14 get_class_type 0 4 3575 28 TexGenAttrib::get_class_type 0 1 1636 0
53
static TypeHandle TexGenAttrib::get_class_type(void);

3258 12 OccluderNode 0 4 3576 26 OccluderNode::OccluderNode 0 1 1637 770
////////////////////////////////////////////////////////////////////
//     Function: OccluderNode::Constructor
//       Access: Public
//  Description: The default constructor creates a default occlusion
//               polygon in the XZ plane (or XY plane in a y-up
//               coordinate system).  Use the normal Panda set_pos(),
//               set_hpr(), set_scale() to position it appropriately,
//               or replace the vertices with set_vertices().
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: OccluderNode::Copy Constructor
//       Access: Protected
//  Description:
////////////////////////////////////////////////////////////////////
47
OccluderNode::OccluderNode(string const &name);

3259 16 set_double_sided 0 4 3576 30 OccluderNode::set_double_sided 0 1 1638 281
////////////////////////////////////////////////////////////////////
//     Function: OccluderNode::set_double_sided
//       Access: Published
//  Description: If true, the back-face will also be used to occlude
////////////////////////////////////////////////////////////////////
55
inline void OccluderNode::set_double_sided(bool value);

3260 15 is_double_sided 0 4 3576 29 OccluderNode::is_double_sided 0 1 1639 258
////////////////////////////////////////////////////////////////////
//     Function: OccluderNode::is_double_sided
//       Access: Published
//  Description: Is this occluder double-sided
////////////////////////////////////////////////////////////////////
48
inline bool OccluderNode::is_double_sided(void);

3261 16 set_min_coverage 0 4 3576 30 OccluderNode::set_min_coverage 0 1 1640 465
////////////////////////////////////////////////////////////////////
//     Function: OccluderNode::set_min_coverage
//       Access: Published
//  Description: Minimum screen coverage needed before occluder used.
//               Range should be 0 to 1. For example, setting to 0.2
//               would mean that the occluder needs to cover 20% of
//               the screen to be considered.
////////////////////////////////////////////////////////////////////
62
inline void OccluderNode::set_min_coverage(PN_stdfloat value);

3262 16 get_min_coverage 0 4 3576 30 OccluderNode::get_min_coverage 0 1 1641 266
////////////////////////////////////////////////////////////////////
//     Function: OccluderNode::get_min_coverage
//       Access: Published
//  Description: Returns the minimum screen coverage.
////////////////////////////////////////////////////////////////////
56
inline PN_stdfloat OccluderNode::get_min_coverage(void);

3263 12 set_vertices 0 4 3576 26 OccluderNode::set_vertices 0 1 1642 418
////////////////////////////////////////////////////////////////////
//     Function: OccluderNode::set_vertices
//       Access: Published
//  Description: Replaces the four vertices of the occluder polygon.
//               The vertices should be defined in a counterclockwise
//               orientation when looking at the face of the occluder.
////////////////////////////////////////////////////////////////////
115
inline void OccluderNode::set_vertices(LPoint3 const &v0, LPoint3 const &v1, LPoint3 const &v2, LPoint3 const &v3);

3264 16 get_num_vertices 0 4 3576 30 OccluderNode::get_num_vertices 0 1 1643 332
////////////////////////////////////////////////////////////////////
//     Function: OccluderNode::get_num_vertices
//       Access: Published
//  Description: Returns the number of vertices in the occluder
//               polygon.  This should always return 4.
////////////////////////////////////////////////////////////////////
54
inline int OccluderNode::get_num_vertices(void) const;

3265 10 get_vertex 0 4 3576 24 OccluderNode::get_vertex 0 1 1644 271
////////////////////////////////////////////////////////////////////
//     Function: OccluderNode::get_vertex
//       Access: Published
//  Description: Returns the nth vertex of the occluder polygon.
////////////////////////////////////////////////////////////////////
60
inline LPoint3 const &OccluderNode::get_vertex(int n) const;

3266 14 get_class_type 0 4 3576 28 OccluderNode::get_class_type 0 1 1645 0
53
static TypeHandle OccluderNode::get_class_type(void);

3267 4 make 0 4 3577 20 OccluderEffect::make 0 1 1646 302
////////////////////////////////////////////////////////////////////
//     Function: OccluderEffect::make
//       Access: Published, Static
//  Description: Constructs a new OccluderEffect object that does
//               nothing.
////////////////////////////////////////////////////////////////////
65
static ConstPointerTo< RenderEffect > OccluderEffect::make(void);

3268 20 get_num_on_occluders 0 4 3577 36 OccluderEffect::get_num_on_occluders 0 1 1647 319
////////////////////////////////////////////////////////////////////
//     Function: OccluderEffect::get_num_on_occluders
//       Access: Published
//  Description: Returns the number of occluders that are enabled by
//               the effectute.
////////////////////////////////////////////////////////////////////
60
inline int OccluderEffect::get_num_on_occluders(void) const;

3269 15 get_on_occluder 0 4 3577 31 OccluderEffect::get_on_occluder 0 1 1648 322
////////////////////////////////////////////////////////////////////
//     Function: OccluderEffect::get_on_occluder
//       Access: Published
//  Description: Returns the nth occluder enabled by the effectute,
//               sorted in render order.
////////////////////////////////////////////////////////////////////
61
inline NodePath OccluderEffect::get_on_occluder(int n) const;

3270 15 has_on_occluder 0 4 3577 31 OccluderEffect::has_on_occluder 0 1 1649 329
////////////////////////////////////////////////////////////////////
//     Function: OccluderEffect::has_on_occluder
//       Access: Published
//  Description: Returns true if the indicated occluder is enabled by
//               the effect, false otherwise.
////////////////////////////////////////////////////////////////////
76
inline bool OccluderEffect::has_on_occluder(NodePath const &occluder) const;

3271 11 is_identity 0 4 3577 27 OccluderEffect::is_identity 0 1 1650 335
////////////////////////////////////////////////////////////////////
//     Function: OccluderEffect::is_identity
//       Access: Published
//  Description: Returns true if this is an identity effect: it does
//               not change the set of occluders in use.
////////////////////////////////////////////////////////////////////
52
inline bool OccluderEffect::is_identity(void) const;

3272 15 add_on_occluder 0 4 3577 31 OccluderEffect::add_on_occluder 0 1 1651 401
////////////////////////////////////////////////////////////////////
//     Function: OccluderEffect::add_on_occluder
//       Access: Published
//  Description: Returns a new OccluderEffect, just like this one, but
//               with the indicated occluder added to the list of occluders
//               enabled by this effect.
////////////////////////////////////////////////////////////////////
95
ConstPointerTo< RenderEffect > OccluderEffect::add_on_occluder(NodePath const &occluder) const;

3273 18 remove_on_occluder 0 4 3577 34 OccluderEffect::remove_on_occluder 0 1 1652 408
////////////////////////////////////////////////////////////////////
//     Function: OccluderEffect::remove_on_occluder
//       Access: Published
//  Description: Returns a new OccluderEffect, just like this one, but
//               with the indicated occluder removed from the list of
//               occluders enabled by this effect.
////////////////////////////////////////////////////////////////////
98
ConstPointerTo< RenderEffect > OccluderEffect::remove_on_occluder(NodePath const &occluder) const;

3274 14 get_class_type 0 4 3577 30 OccluderEffect::get_class_type 0 1 1653 0
55
static TypeHandle OccluderEffect::get_class_type(void);

3275 15 ~OccluderEffect 0 4 3577 31 OccluderEffect::~OccluderEffect 0 0 0
38
OccluderEffect::~OccluderEffect(void);

3276 13 PolylightNode 0 4 3578 28 PolylightNode::PolylightNode 0 1 1654 303
////////////////////////////////////////////////////////////////////
//     Function: PolylightNode::Constructor
//       Access: Published
//  Description: Use PolylightNode() to construct a new
//               PolylightNode object.
////////////////////////////////////////////////////////////////////
49
PolylightNode::PolylightNode(string const &name);

3277 6 enable 0 4 3578 21 PolylightNode::enable 0 1 1655 238
////////////////////////////////////////////////////////////////////
//     Function: PolylightNode::enable
//       Access: Published
//  Description: Enable this light
////////////////////////////////////////////////////////////////////
40
inline void PolylightNode::enable(void);

3278 7 disable 0 4 3578 22 PolylightNode::disable 0 1 1656 240
////////////////////////////////////////////////////////////////////
//     Function: PolylightNode::disable
//       Access: Published
//  Description: Disable this light
////////////////////////////////////////////////////////////////////
41
inline void PolylightNode::disable(void);

3279 7 set_pos 0 4 3578 22 PolylightNode::set_pos 0 2 1657 1658 496
////////////////////////////////////////////////////////////////////
//     Function: PolylightNode::set_pos
//       Access: Published
//  Description: Set this light's position
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PolylightNode::set_pos
//       Access: Published
//  Description: Set this light's position
////////////////////////////////////////////////////////////////////
141
inline void PolylightNode::set_pos(LPoint3 const &position);
inline void PolylightNode::set_pos(PN_stdfloat x, PN_stdfloat y, PN_stdfloat z);

3280 7 get_pos 0 4 3578 22 PolylightNode::get_pos 0 1 1659 251
////////////////////////////////////////////////////////////////////
//     Function: PolylightNode::get_pos
//       Access: Published
//  Description: Returns position as a LPoint3
////////////////////////////////////////////////////////////////////
50
inline LPoint3 PolylightNode::get_pos(void) const;

3281 9 set_color 0 4 3578 24 PolylightNode::set_color 0 2 1660 1661 524
////////////////////////////////////////////////////////////////////
//     Function: PolylightNode::set_color
//       Access: Published
//  Description: Set the light's color... 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PolylightNode::set_color
//       Access: Published
//  Description: Set the light's color... 3 floats between 0 and 1
////////////////////////////////////////////////////////////////////
141
inline void PolylightNode::set_color(LColor const &color);
inline void PolylightNode::set_color(PN_stdfloat r, PN_stdfloat g, PN_stdfloat b);

3282 9 get_color 0 4 3578 24 PolylightNode::get_color 0 1 1662 259
////////////////////////////////////////////////////////////////////
//     Function: PolylightNode::get_color
//       Access: Published
//  Description: Returns the light's color as LColor
////////////////////////////////////////////////////////////////////
51
inline LColor PolylightNode::get_color(void) const;

3283 20 get_color_scenegraph 0 4 3578 35 PolylightNode::get_color_scenegraph 0 1 1663 443
////////////////////////////////////////////////////////////////////
//     Function: PolylightNode::get_color_scenegraph
//       Access: Published
//  Description: This differs from get_color in that when applying
//               the light color we need to make sure that a color
//               flattening external to the PolylightNode is not 
//               ignored.
////////////////////////////////////////////////////////////////////
62
inline LColor PolylightNode::get_color_scenegraph(void) const;

3284 10 set_radius 0 4 3578 25 PolylightNode::set_radius 0 1 1664 265
////////////////////////////////////////////////////////////////////
//     Function: PolylightNode::set_radius
//       Access: Published
//  Description: Set radius of the spherical light volume
////////////////////////////////////////////////////////////////////
53
inline void PolylightNode::set_radius(PN_stdfloat r);

3285 10 get_radius 0 4 3578 25 PolylightNode::get_radius 0 1 1665 265
////////////////////////////////////////////////////////////////////
//     Function: PolylightNode::get_radius
//       Access: Published
//  Description: Get radius of the spherical light volume
////////////////////////////////////////////////////////////////////
57
inline PN_stdfloat PolylightNode::get_radius(void) const;

3286 15 set_attenuation 0 4 3578 30 PolylightNode::set_attenuation 0 1 1666 267
////////////////////////////////////////////////////////////////////
//     Function: PolylightNode::set_attenuation
//       Access: Published
//  Description: Set ALINEAR or AQUADRATIC attenuation
////////////////////////////////////////////////////////////////////
81
inline bool PolylightNode::set_attenuation(PolylightNode::Attenuation_Type type);

3287 15 get_attenuation 0 4 3578 30 PolylightNode::get_attenuation 0 1 1667 274
////////////////////////////////////////////////////////////////////
//     Function: PolylightNode::get_attenuation
//       Access: Published
//  Description: Get "linear" or "quadratic" attenuation type
////////////////////////////////////////////////////////////////////
82
inline PolylightNode::Attenuation_Type PolylightNode::get_attenuation(void) const;

3288 6 set_a0 0 4 3578 21 PolylightNode::set_a0 0 1 1668 329
////////////////////////////////////////////////////////////////////
//     Function: PolylightNode::set_a0
//       Access: Published
//  Description: Set the quadratic attenuation factor a0
//               fd = 1 / ( a0 + a1*distance + a2*distance*distance)
////////////////////////////////////////////////////////////////////
50
inline void PolylightNode::set_a0(PN_stdfloat a0);

3289 6 set_a1 0 4 3578 21 PolylightNode::set_a1 0 1 1669 329
////////////////////////////////////////////////////////////////////
//     Function: PolylightNode::set_a1
//       Access: Published
//  Description: Set the quadratic attenuation factor a1
//               fd = 1 / ( a0 + a1*distance + a2*distance*distance)
////////////////////////////////////////////////////////////////////
50
inline void PolylightNode::set_a1(PN_stdfloat a1);

3290 6 set_a2 0 4 3578 21 PolylightNode::set_a2 0 1 1670 329
////////////////////////////////////////////////////////////////////
//     Function: PolylightNode::set_a2
//       Access: Published
//  Description: Set the quadratic attenuation factor a2
//               fd = 1 / ( a0 + a1*distance + a2*distance*distance)
////////////////////////////////////////////////////////////////////
50
inline void PolylightNode::set_a2(PN_stdfloat a2);

3291 6 get_a0 0 4 3578 21 PolylightNode::get_a0 0 1 1671 329
////////////////////////////////////////////////////////////////////
//     Function: PolylightNode::get_a0
//       Access: Published
//  Description: Get the quadratic attenuation factor a0
//               fd = 1 / ( a0 + a1*distance + a2*distance*distance)
////////////////////////////////////////////////////////////////////
53
inline PN_stdfloat PolylightNode::get_a0(void) const;

3292 6 get_a1 0 4 3578 21 PolylightNode::get_a1 0 1 1672 329
////////////////////////////////////////////////////////////////////
//     Function: PolylightNode::get_a1
//       Access: Published
//  Description: Get the quadratic attenuation factor a1
//               fd = 1 / ( a0 + a1*distance + a2*distance*distance)
////////////////////////////////////////////////////////////////////
53
inline PN_stdfloat PolylightNode::get_a1(void) const;

3293 6 get_a2 0 4 3578 21 PolylightNode::get_a2 0 1 1673 329
////////////////////////////////////////////////////////////////////
//     Function: PolylightNode::get_a2
//       Access: Published
//  Description: Get the quadratic attenuation factor a2
//               fd = 1 / ( a0 + a1*distance + a2*distance*distance)
////////////////////////////////////////////////////////////////////
53
inline PN_stdfloat PolylightNode::get_a2(void) const;

3294 10 flicker_on 0 4 3578 25 PolylightNode::flicker_on 0 1 1674 332
////////////////////////////////////////////////////////////////////
//     Function: PolylightNode::flicker_on
//       Access: Published
//  Description: Set flickering to true so at every loop this light's
//               color is varied based on flicker_type
////////////////////////////////////////////////////////////////////
44
inline void PolylightNode::flicker_on(void);

3295 11 flicker_off 0 4 3578 26 PolylightNode::flicker_off 0 1 1675 245
////////////////////////////////////////////////////////////////////
//     Function: PolylightNode::flicker_off
//       Access: Published
//  Description: Turn flickering off
////////////////////////////////////////////////////////////////////
45
inline void PolylightNode::flicker_off(void);

3296 13 is_flickering 0 4 3578 28 PolylightNode::is_flickering 0 1 1676 261
////////////////////////////////////////////////////////////////////
//     Function: PolylightNode::is_flickering
//       Access: Published
//  Description: Check is this light is flickering
////////////////////////////////////////////////////////////////////
53
inline bool PolylightNode::is_flickering(void) const;

3297 16 set_flicker_type 0 4 3578 31 PolylightNode::set_flicker_type 0 1 1677 446
////////////////////////////////////////////////////////////////////
//     Function: PolylightNode::set_flicker_type
//       Access: Published
//  Description: Flicker type can be FRANDOM or FSIN
//               At a later point there might be a FCUSTOM
//               Custom flicker will be a set of fix points recorded
//               by animating the light's intensity
////////////////////////////////////////////////////////////////////
78
inline bool PolylightNode::set_flicker_type(PolylightNode::Flicker_Type type);

3298 16 get_flicker_type 0 4 3578 31 PolylightNode::get_flicker_type 0 1 1678 254
////////////////////////////////////////////////////////////////////
//     Function: PolylightNode::get_flicker_type
//       Access: Published
//  Description: Returns FRANDOM or FSIN
////////////////////////////////////////////////////////////////////
79
inline PolylightNode::Flicker_Type PolylightNode::get_flicker_type(void) const;

3299 10 set_offset 0 4 3578 25 PolylightNode::set_offset 0 1 1679 387
////////////////////////////////////////////////////////////////////
//     Function: PolylightNode::set_offset
//       Access: Published
//  Description: Set the offset value for the random and sin
//               flicker variations... used to tweak the flicker
//               This value is added to the variation
////////////////////////////////////////////////////////////////////
58
inline void PolylightNode::set_offset(PN_stdfloat offset);

3300 10 get_offset 0 4 3578 25 PolylightNode::get_offset 0 1 1680 304
////////////////////////////////////////////////////////////////////
//     Function: PolylightNode::get_offset
//       Access: Published
//  Description: Get the offset value for the random and sin
//               flicker variations
////////////////////////////////////////////////////////////////////
57
inline PN_stdfloat PolylightNode::get_offset(void) const;

3301 9 set_scale 0 4 3578 24 PolylightNode::set_scale 0 1 1681 392
////////////////////////////////////////////////////////////////////
//     Function: PolylightNode::set_scale
//       Access: Published
//  Description: Set the scale value for the random and sin
//               flicker variations... used to tweak the flicker
//               This value is multiplied with the variation
////////////////////////////////////////////////////////////////////
56
inline void PolylightNode::set_scale(PN_stdfloat scale);

3302 9 get_scale 0 4 3578 24 PolylightNode::get_scale 0 1 1682 302
////////////////////////////////////////////////////////////////////
//     Function: PolylightNode::get_scale
//       Access: Published
//  Description: Get the scale value for the random and sin
//               flicker variations
////////////////////////////////////////////////////////////////////
56
inline PN_stdfloat PolylightNode::get_scale(void) const;

3303 13 set_step_size 0 4 3578 28 PolylightNode::set_step_size 0 1 1683 381
////////////////////////////////////////////////////////////////////
//     Function: PolylightNode::set_step_size
//       Access: Published
//  Description: Set the step size for the sin function in flicker
//               This is the increment size for the value supplied
//               to the sin function
////////////////////////////////////////////////////////////////////
59
inline void PolylightNode::set_step_size(PN_stdfloat step);

3304 13 get_step_size 0 4 3578 28 PolylightNode::get_step_size 0 1 1684 381
////////////////////////////////////////////////////////////////////
//     Function: PolylightNode::get_step_size
//       Access: Published
//  Description: Get the step size for the sin function in flicker
//               This is the increment size for the value supplied
//               to the sin function
////////////////////////////////////////////////////////////////////
60
inline PN_stdfloat PolylightNode::get_step_size(void) const;

3305 8 set_freq 0 4 3578 23 PolylightNode::set_freq 0 1 1685 251
////////////////////////////////////////////////////////////////////
//     Function: PolylightNode::set_freq
//       Access: Published
//  Description: Set frequency of sin flicker
////////////////////////////////////////////////////////////////////
51
inline void PolylightNode::set_freq(PN_stdfloat f);

3306 8 get_freq 0 4 3578 23 PolylightNode::get_freq 0 1 1686 251
////////////////////////////////////////////////////////////////////
//     Function: PolylightNode::get_freq
//       Access: Published
//  Description: Get frequency of sin flicker
////////////////////////////////////////////////////////////////////
55
inline PN_stdfloat PolylightNode::get_freq(void) const;

3307 11 operator == 0 4 3578 26 PolylightNode::operator == 0 1 1687 21
// Comparison methods
73
inline bool PolylightNode::operator ==(PolylightNode const &other) const;

3308 11 operator != 0 4 3578 26 PolylightNode::operator != 0 1 1688 0
73
inline bool PolylightNode::operator !=(PolylightNode const &other) const;

3309 10 operator < 0 4 3578 25 PolylightNode::operator < 0 1 1689 0
72
inline bool PolylightNode::operator <(PolylightNode const &other) const;

3310 10 compare_to 0 4 3578 25 PolylightNode::compare_to 0 1 1690 832
////////////////////////////////////////////////////////////////////
//     Function: PolylightNode::compare_to
//       Access: Published
//  Description: Returns a number less than zero if this PolylightNode
//               sorts before the other one, greater than zero if it
//               sorts after, or zero if they are equivalent.
//
//               Two PolylightNodes are considered equivalent if they
//               consist of exactly the same properties
//               Otherwise, they are different; different
//               PolylightNodes will be ranked in a consistent but
//               undefined ordering; the ordering is useful only for
//               placing the PolylightNodes in a sorted container like an
//               STL set.
////////////////////////////////////////////////////////////////////
64
int PolylightNode::compare_to(PolylightNode const &other) const;

3311 10 is_enabled 0 4 3578 25 PolylightNode::is_enabled 0 1 1691 259
////////////////////////////////////////////////////////////////////
//     Function: PolylightNode::is_enabled
//       Access: Published
//  Description: Is this light is enabled/disabled?
////////////////////////////////////////////////////////////////////
50
inline bool PolylightNode::is_enabled(void) const;

3312 14 get_class_type 0 4 3578 29 PolylightNode::get_class_type 0 1 1692 0
54
static TypeHandle PolylightNode::get_class_type(void);

3313 14 ~PolylightNode 0 4 3578 29 PolylightNode::~PolylightNode 0 0 0
36
PolylightNode::~PolylightNode(void);

3314 4 make 0 4 3581 21 PolylightEffect::make 0 3 1693 1694 1695 811
////////////////////////////////////////////////////////////////////
//     Function: PolylightEffect::make
//       Access: Published, Static
//  Description: Constructs a new PolylightEffect object.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PolylightEffect::make
//       Access: Published, Static
//  Description: Constructs a new PolylightEffect object.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PolylightEffect::make
//       Access: Published, Static
//  Description: Constructs a new PolylightEffect object.
////////////////////////////////////////////////////////////////////
407
static ConstPointerTo< RenderEffect > PolylightEffect::make(void);
static ConstPointerTo< RenderEffect > PolylightEffect::make(PN_stdfloat weight, PolylightEffect::ContribType contrib, LPoint3 const &effect_center);
static ConstPointerTo< RenderEffect > PolylightEffect::make(PN_stdfloat weight, PolylightEffect::ContribType contrib, LPoint3 const &effect_center, PolylightEffect::LightGroup const &lights);

3315 9 add_light 0 4 3581 26 PolylightEffect::add_light 0 1 1696 308
////////////////////////////////////////////////////////////////////
//     Function: PolylightEffect::add_light
//       Access: Published
//  Description: Add a PolylightNode object to this effect and return
//               a new effect
////////////////////////////////////////////////////////////////////
90
ConstPointerTo< RenderEffect > PolylightEffect::add_light(NodePath const &newlight) const;

3316 12 remove_light 0 4 3581 29 PolylightEffect::remove_light 0 1 1697 308
////////////////////////////////////////////////////////////////////
//     Function: PolylightEffect::remove_light
//       Access: Published
//  Description: Remove a light from this effect. Return the new updated
//               effect
////////////////////////////////////////////////////////////////////
93
ConstPointerTo< RenderEffect > PolylightEffect::remove_light(NodePath const &newlight) const;

3317 10 set_weight 0 4 3581 27 PolylightEffect::set_weight 0 1 1698 517
////////////////////////////////////////////////////////////////////
//     Function: PolylightEffect::set_weight
//       Access: Published
//  Description: Set weight and return a new effect... the reason
//               this couldnt be done through make was because
//               that would return a new effect without the 
//               lightgroup which is static and cant be accessed
//               Here, we just pass that to the make
////////////////////////////////////////////////////////////////////
80
ConstPointerTo< RenderEffect > PolylightEffect::set_weight(PN_stdfloat w) const;

3318 11 set_contrib 0 4 3581 28 PolylightEffect::set_contrib 0 1 1699 524
////////////////////////////////////////////////////////////////////
//     Function: PolylightEffect::set_contrib
//       Access: Published
//  Description: Set Contrib Type and return a new effect... the reason
//               this couldnt be done through make was because
//               that would return a new effect without the 
//               lightgroup which is static and cant be accessed
//               Here, we just pass that to the make
////////////////////////////////////////////////////////////////////
98
ConstPointerTo< RenderEffect > PolylightEffect::set_contrib(PolylightEffect::ContribType c) const;

3319 17 set_effect_center 0 4 3581 34 PolylightEffect::set_effect_center 0 1 1700 524
////////////////////////////////////////////////////////////////////
//     Function: PolylightEffect::set_effect_center
//       Access: Published
//  Description: Set weight and return a new effect... the reason
//               this couldnt be done through make was because
//               that would return a new effect without the 
//               lightgroup which is static and cant be accessed
//               Here, we just pass that to the make
////////////////////////////////////////////////////////////////////
91
ConstPointerTo< RenderEffect > PolylightEffect::set_effect_center(LPoint3 const &ec) const;

3320 10 get_weight 0 4 3581 27 PolylightEffect::get_weight 0 1 1701 247
////////////////////////////////////////////////////////////////////
//     Function: PolylightEffect::get_weight
//       Access: Published
//  Description: Get the weight value
////////////////////////////////////////////////////////////////////
59
inline PN_stdfloat PolylightEffect::get_weight(void) const;

3321 11 get_contrib 0 4 3581 28 PolylightEffect::get_contrib 0 1 1702 257
////////////////////////////////////////////////////////////////////
//     Function: PolylightEffect::get_contrib
//       Access: Published
//  Description: Returns CT_all or CT_proximal
////////////////////////////////////////////////////////////////////
77
inline PolylightEffect::ContribType PolylightEffect::get_contrib(void) const;

3322 17 get_effect_center 0 4 3581 34 PolylightEffect::get_effect_center 0 1 1703 272
////////////////////////////////////////////////////////////////////
//     Function: PolylightEffect::get_effect_center
//       Access: Published
//  Description: Return the value of the _effect_center
////////////////////////////////////////////////////////////////////
62
inline LPoint3 PolylightEffect::get_effect_center(void) const;

3323 9 has_light 0 4 3581 26 PolylightEffect::has_light 0 1 1704 329
////////////////////////////////////////////////////////////////////
//     Function: PolylightEffect::has_light
//       Access: Published
//  Description: Returns true if the indicated light is listed in the
//               PolylightEffect, false otherwise.
////////////////////////////////////////////////////////////////////
61
bool PolylightEffect::has_light(NodePath const &light) const;

3324 14 get_class_type 0 4 3581 31 PolylightEffect::get_class_type 0 1 1705 0
56
static TypeHandle PolylightEffect::get_class_type(void);

3325 16 ~PolylightEffect 0 4 3581 33 PolylightEffect::~PolylightEffect 0 0 0
40
PolylightEffect::~PolylightEffect(void);

3326 4 make 0 4 3585 18 ShaderAttrib::make 0 1 1706 297
////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::make
//       Access: Published, Static
//  Description: Constructs a new ShaderAttrib object with nothing
//               set.
////////////////////////////////////////////////////////////////////
83
static ConstPointerTo< RenderAttrib > ShaderAttrib::make(Shader const *shader = 0);

3327 8 make_off 0 4 3585 22 ShaderAttrib::make_off 0 1 1707 383
////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::make_off
//       Access: Published, Static
//  Description: Constructs a new ShaderAttrib object that disables
//               the use of shaders (it does not clear out all shader
//               data, however.)
////////////////////////////////////////////////////////////////////
67
static ConstPointerTo< RenderAttrib > ShaderAttrib::make_off(void);

3328 12 make_default 0 4 3585 26 ShaderAttrib::make_default 0 1 1708 399
////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::make_default
//       Access: Published, Static
//  Description: Returns a RenderAttrib that corresponds to whatever
//               the standard default properties for render attributes
//               of this type ought to be.
////////////////////////////////////////////////////////////////////
71
static ConstPointerTo< RenderAttrib > ShaderAttrib::make_default(void);

3329 10 has_shader 0 4 3585 24 ShaderAttrib::has_shader 0 1 1709 336
////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::has_shader
//       Access: Published
//  Description: If true, the shader field of this attribute overrides
//               the shader field of the parent attribute.
////////////////////////////////////////////////////////////////////
49
inline bool ShaderAttrib::has_shader(void) const;

3330 11 auto_shader 0 4 3585 25 ShaderAttrib::auto_shader 0 1 1710 387
////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::auto_shader
//       Access: Published
//  Description: If true, then this ShaderAttrib does not contain an
//               explicit shader - instead, it requests the automatic
//               generation of a shader.
////////////////////////////////////////////////////////////////////
50
inline bool ShaderAttrib::auto_shader(void) const;

3331 19 get_shader_priority 0 4 3585 33 ShaderAttrib::get_shader_priority 0 1 1711 232
////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::get_shader_priority
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
57
inline int ShaderAttrib::get_shader_priority(void) const;

3332 18 get_instance_count 0 4 3585 32 ShaderAttrib::get_instance_count 0 1 1712 339
////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::get_instance_count
//       Access: Published
//  Description: Returns the number of geometry instances. A value
//               of 0 means not to use instancing at all.
////////////////////////////////////////////////////////////////////
56
inline int ShaderAttrib::get_instance_count(void) const;

3333 14 auto_normal_on 0 4 3585 28 ShaderAttrib::auto_normal_on 0 1 1713 238
//weifengh
////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::auto_normal_on
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
53
inline bool ShaderAttrib::auto_normal_on(void) const;

3334 12 auto_glow_on 0 4 3585 26 ShaderAttrib::auto_glow_on 0 1 1714 225
////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::auto_glow_on
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
51
inline bool ShaderAttrib::auto_glow_on(void) const;

3335 13 auto_gloss_on 0 4 3585 27 ShaderAttrib::auto_gloss_on 0 1 1715 226
////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::auto_gloss_on
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
52
inline bool ShaderAttrib::auto_gloss_on(void) const;

3336 12 auto_ramp_on 0 4 3585 26 ShaderAttrib::auto_ramp_on 0 1 1716 225
////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::auto_ramp_on
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
51
inline bool ShaderAttrib::auto_ramp_on(void) const;

3337 14 auto_shadow_on 0 4 3585 28 ShaderAttrib::auto_shadow_on 0 1 1717 227
////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::auto_shadow_on
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
53
inline bool ShaderAttrib::auto_shadow_on(void) const;

3338 10 set_shader 0 4 3585 24 ShaderAttrib::set_shader 0 1 1718 223
////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::set_shader
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
97
ConstPointerTo< RenderAttrib > ShaderAttrib::set_shader(Shader const *s, int priority = 0) const;

3339 14 set_shader_off 0 4 3585 28 ShaderAttrib::set_shader_off 0 1 1719 227
////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::set_shader_off
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
84
ConstPointerTo< RenderAttrib > ShaderAttrib::set_shader_off(int priority = 0) const;

3340 15 set_shader_auto 0 4 3585 29 ShaderAttrib::set_shader_auto 0 2 1720 1721 553
////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::set_shader_auto
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::set_shader_auto
//       Access: Published
//  Description: Set auto shader with bitmask to customize use,
//  e.g., to keep normal, glow, etc., on or off
////////////////////////////////////////////////////////////////////
196
ConstPointerTo< RenderAttrib > ShaderAttrib::set_shader_auto(int priority = 0) const;
ConstPointerTo< RenderAttrib > ShaderAttrib::set_shader_auto(BitMask32 shader_switch, int priority = 0) const;

3341 12 clear_shader 0 4 3585 26 ShaderAttrib::clear_shader 0 1 1722 225
////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::clear_shader
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
70
ConstPointerTo< RenderAttrib > ShaderAttrib::clear_shader(void) const;

3342 16 set_shader_input 0 4 3585 30 ShaderAttrib::set_shader_input 0 16 1723 1724 1725 1726 1727 1728 1729 1730 1731 1732 1733 1734 1735 1736 1737 1738 3712
// Shader Inputs

////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::set_shader_input
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::set_shader_input
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::set_shader_input
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::set_shader_input
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::set_shader_input
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::set_shader_input
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::set_shader_input
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::set_shader_input
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::set_shader_input
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::set_shader_input
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::set_shader_input
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::set_shader_input
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::set_shader_input
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::set_shader_input
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::set_shader_input
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::set_shader_input
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
2168
ConstPointerTo< RenderAttrib > ShaderAttrib::set_shader_input(ShaderInput const *inp) const;
inline ConstPointerTo< RenderAttrib > ShaderAttrib::set_shader_input(CPT_InternalName id, Texture *tex, int priority = 0) const;
inline ConstPointerTo< RenderAttrib > ShaderAttrib::set_shader_input(CPT_InternalName id, NodePath const &np, int priority = 0) const;
inline ConstPointerTo< RenderAttrib > ShaderAttrib::set_shader_input(CPT_InternalName id, PTA_float const &v, int priority = 0) const;
inline ConstPointerTo< RenderAttrib > ShaderAttrib::set_shader_input(CPT_InternalName id, PTA_double const &v, int priority = 0) const;
inline ConstPointerTo< RenderAttrib > ShaderAttrib::set_shader_input(CPT_InternalName id, PTA_LMatrix4 const &v, int priority = 0) const;
inline ConstPointerTo< RenderAttrib > ShaderAttrib::set_shader_input(CPT_InternalName id, PTA_LMatrix3 const &v, int priority = 0) const;
inline ConstPointerTo< RenderAttrib > ShaderAttrib::set_shader_input(CPT_InternalName id, PTA_LVecBase4 const &v, int priority = 0) const;
inline ConstPointerTo< RenderAttrib > ShaderAttrib::set_shader_input(CPT_InternalName id, PTA_LVecBase3 const &v, int priority = 0) const;
inline ConstPointerTo< RenderAttrib > ShaderAttrib::set_shader_input(CPT_InternalName id, PTA_LVecBase2 const &v, int priority = 0) const;
inline ConstPointerTo< RenderAttrib > ShaderAttrib::set_shader_input(CPT_InternalName id, LVecBase4 const &v, int priority = 0) const;
inline ConstPointerTo< RenderAttrib > ShaderAttrib::set_shader_input(CPT_InternalName id, LVecBase3 const &v, int priority = 0) const;
inline ConstPointerTo< RenderAttrib > ShaderAttrib::set_shader_input(CPT_InternalName id, LVecBase2 const &v, int priority = 0) const;
inline ConstPointerTo< RenderAttrib > ShaderAttrib::set_shader_input(CPT_InternalName id, LMatrix4 const &v, int priority = 0) const;
inline ConstPointerTo< RenderAttrib > ShaderAttrib::set_shader_input(CPT_InternalName id, LMatrix3 const &v, int priority = 0) const;
inline ConstPointerTo< RenderAttrib > ShaderAttrib::set_shader_input(CPT_InternalName id, double n1 = 0, double n2 = 0, double n3 = 0, double n4 = 1, int priority = 0) const;

3343 18 set_instance_count 0 4 3585 32 ShaderAttrib::set_instance_count 0 1 1739 475
////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::set_instance_count
//       Access: Published
//  Description: Sets the geometry instance count. Do not confuse
//               this with instanceTo, which is used for animation
//               instancing, and has nothing to do with this.
//               A value of 0 means not to use instancing at all.
////////////////////////////////////////////////////////////////////
90
ConstPointerTo< RenderAttrib > ShaderAttrib::set_instance_count(int instance_count) const;

3344 8 set_flag 0 4 3585 22 ShaderAttrib::set_flag 0 1 1740 221
////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::set_flag
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
82
ConstPointerTo< RenderAttrib > ShaderAttrib::set_flag(int flag, bool value) const;

3345 10 clear_flag 0 4 3585 24 ShaderAttrib::clear_flag 0 1 1741 223
////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::clear_flag
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
72
ConstPointerTo< RenderAttrib > ShaderAttrib::clear_flag(int flag) const;

3346 18 clear_shader_input 0 4 3585 32 ShaderAttrib::clear_shader_input 0 2 1742 1743 464
////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::clear_shader_input
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::clear_shader_input
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
183
ConstPointerTo< RenderAttrib > ShaderAttrib::clear_shader_input(InternalName const *id) const;
ConstPointerTo< RenderAttrib > ShaderAttrib::clear_shader_input(string const &id) const;

3347 23 clear_all_shader_inputs 0 4 3585 37 ShaderAttrib::clear_all_shader_inputs 0 1 1744 280
////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::clear_all_shader_inputs
//       Access: Published
//  Description: Clears all the shader inputs on the attrib.
////////////////////////////////////////////////////////////////////
81
ConstPointerTo< RenderAttrib > ShaderAttrib::clear_all_shader_inputs(void) const;

3348 8 get_flag 0 4 3585 22 ShaderAttrib::get_flag 0 1 1745 221
////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::get_flag
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
51
inline bool ShaderAttrib::get_flag(int flag) const;

3349 16 has_shader_input 0 4 3585 30 ShaderAttrib::has_shader_input 0 1 1746 304
////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::has_shader_input
//       Access: Published
//  Description: Returns true if there is a ShaderInput of the given
//               name.
////////////////////////////////////////////////////////////////////
70
inline bool ShaderAttrib::has_shader_input(CPT_InternalName id) const;

3350 10 get_shader 0 4 3585 24 ShaderAttrib::get_shader 0 1 1747 443
////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::get_shader
//       Access: Published
//  Description: Returns the shader object associated with the node.
//               If get_override returns true, but get_shader
//               returns NULL, that means that this attribute should
//               disable the shader.
////////////////////////////////////////////////////////////////////
51
Shader const *ShaderAttrib::get_shader(void) const;

3351 16 get_shader_input 0 4 3585 30 ShaderAttrib::get_shader_input 0 2 1748 1749 818
////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::get_shader_input
//       Access: Published
//  Description: Returns the ShaderInput of the given name.  If
//               no such name is found, this function does not return
//               NULL --- it returns the "blank" ShaderInput.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::get_shader_input
//       Access: Published
//  Description: Returns the ShaderInput of the given name.  If
//               no such name is found, this function does not return
//               NULL --- it returns the "blank" ShaderInput.
////////////////////////////////////////////////////////////////////
155
ShaderInput const *ShaderAttrib::get_shader_input(InternalName const *id) const;
ShaderInput const *ShaderAttrib::get_shader_input(string const &id) const;

3352 25 get_shader_input_nodepath 0 4 3585 39 ShaderAttrib::get_shader_input_nodepath 0 1 1750 357
////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::get_shader_input_nodepath
//       Access: Published
//  Description: Returns the ShaderInput as a nodepath.  Assertion
//               fails if there is none, or if it is not a nodepath.
////////////////////////////////////////////////////////////////////
86
NodePath const &ShaderAttrib::get_shader_input_nodepath(InternalName const *id) const;

3353 23 get_shader_input_vector 0 4 3585 37 ShaderAttrib::get_shader_input_vector 0 1 1751 351
////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::get_shader_input_vector
//       Access: Published
//  Description: Returns the ShaderInput as a vector.  Assertion
//               fails if there is none, or if it is not a vector.
////////////////////////////////////////////////////////////////////
72
LVecBase4 ShaderAttrib::get_shader_input_vector(InternalName *id) const;

3354 24 get_shader_input_texture 0 4 3585 38 ShaderAttrib::get_shader_input_texture 0 1 1752 476
////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::get_shader_input_texture
//       Access: Published
//  Description: Returns the ShaderInput as a texture.  Assertion
//               fails if there is none, or if it is not a texture.
//
//               If sampler is not NULL, the sampler state to use
//               for this texture is assigned to it.
////////////////////////////////////////////////////////////////////
105
Texture *ShaderAttrib::get_shader_input_texture(InternalName const *id, SamplerState *sampler = 0) const;

3355 20 get_shader_input_ptr 0 4 3585 34 ShaderAttrib::get_shader_input_ptr 0 1 1753 388
////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::get_shader_input_ptr
//       Access: Published
//  Description: Returns the ShaderInput as a ShaderPtrData struct.
//               Assertion fails if there is none. or if it is not
//               a PTA(double/float)
////////////////////////////////////////////////////////////////////
94
Shader::ShaderPtrData const *ShaderAttrib::get_shader_input_ptr(InternalName const *id) const;

3356 23 get_shader_input_matrix 0 4 3585 37 ShaderAttrib::get_shader_input_matrix 0 1 1754 380
////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::get_shader_input_matrix
//       Access: Published
//  Description: Returns the ShaderInput as a matrix.  Assertion
//               fails if there is none, or if it is not a matrix
//               or NodePath.
////////////////////////////////////////////////////////////////////
102
LMatrix4 const &ShaderAttrib::get_shader_input_matrix(InternalName const *id, LMatrix4 &matrix) const;

3357 26 register_with_read_factory 0 4 3585 40 ShaderAttrib::register_with_read_factory 0 1 1755 287
////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::register_with_read_factory
//       Access: Public, Static
//  Description: Factory method to generate a Shader object
////////////////////////////////////////////////////////////////////
59
static void ShaderAttrib::register_with_read_factory(void);

3358 14 get_class_slot 0 4 3585 28 ShaderAttrib::get_class_slot 0 1 1756 0
46
static int ShaderAttrib::get_class_slot(void);

3359 14 get_class_type 0 4 3585 28 ShaderAttrib::get_class_type 0 1 1757 0
53
static TypeHandle ShaderAttrib::get_class_type(void);

3360 13 ~ShaderAttrib 0 4 3585 27 ShaderAttrib::~ShaderAttrib 0 0 0
34
ShaderAttrib::~ShaderAttrib(void);

3361 4 make 0 4 3587 22 ShowBoundsEffect::make 0 1 1758 271
////////////////////////////////////////////////////////////////////
//     Function: ShowBoundsEffect::make
//       Access: Published, Static
//  Description: Constructs a new ShowBoundsEffect object.
////////////////////////////////////////////////////////////////////
77
static ConstPointerTo< RenderEffect > ShowBoundsEffect::make(bool tight = 0);

3362 9 get_tight 0 4 3587 27 ShowBoundsEffect::get_tight 0 1 1759 404
////////////////////////////////////////////////////////////////////
//     Function: ShowBoundsEffect::get_tight
//       Access: Published
//  Description: Returns true if the "tight" flag was set, meaning the
//               effect should compute and draw the tight bounding-box
//               of the node's vertices every frame.
////////////////////////////////////////////////////////////////////
52
inline bool ShowBoundsEffect::get_tight(void) const;

3363 14 get_class_type 0 4 3587 32 ShowBoundsEffect::get_class_type 0 1 1760 0
57
static TypeHandle ShowBoundsEffect::get_class_type(void);

3364 17 ~ShowBoundsEffect 0 4 3587 35 ShowBoundsEffect::~ShowBoundsEffect 0 0 0
42
ShowBoundsEffect::~ShowBoundsEffect(void);

3365 4 make 0 4 3588 24 TexProjectorEffect::make 0 1 1761 312
////////////////////////////////////////////////////////////////////
//     Function: TexProjectorEffect::make
//       Access: Published, Static
//  Description: Constructs a TexProjectorEffect that modifies
//               no stages at all.
////////////////////////////////////////////////////////////////////
69
static ConstPointerTo< RenderEffect > TexProjectorEffect::make(void);

3366 9 add_stage 0 4 3588 29 TexProjectorEffect::add_stage 0 1 1762 910
////////////////////////////////////////////////////////////////////
//     Function: TexProjectorEffect::add_stage
//       Access: Published, Static
//  Description: Returns a new TexProjectorEffect just like this one,
//               with the indicated projection for the given stage.
//               If this stage already exists, its projection
//               definition is replaced.
//
//               The relative transform between the "from" and the
//               "to" nodes is automatically applied to the texture
//               transform each frame.
//
//               Furthermore, if the "to" node is a LensNode, its
//               projection matrix is also applied to the texture
//               transform.  In this case, the lens_index may be used
//               to select the particular lens that should be used.
////////////////////////////////////////////////////////////////////
150
ConstPointerTo< RenderEffect > TexProjectorEffect::add_stage(TextureStage *stage, NodePath const &from, NodePath const &to, int lens_index = 0) const;

3367 12 remove_stage 0 4 3588 32 TexProjectorEffect::remove_stage 0 1 1763 343
////////////////////////////////////////////////////////////////////
//     Function: TexProjectorEffect::remove_stage
//       Access: Published, Static
//  Description: Returns a new TexProjectorEffect just like this one,
//               with the indicated stage removed.
////////////////////////////////////////////////////////////////////
91
ConstPointerTo< RenderEffect > TexProjectorEffect::remove_stage(TextureStage *stage) const;

3368 8 is_empty 0 4 3588 28 TexProjectorEffect::is_empty 0 1 1764 335
////////////////////////////////////////////////////////////////////
//     Function: TexProjectorEffect::is_empty
//       Access: Published
//  Description: Returns true if no stages are defined in the
//               TexProjectorEffect, false if at least one is.
////////////////////////////////////////////////////////////////////
46
bool TexProjectorEffect::is_empty(void) const;

3369 9 has_stage 0 4 3588 29 TexProjectorEffect::has_stage 0 1 1765 445
////////////////////////////////////////////////////////////////////
//     Function: TexProjectorEffect::has_stage
//       Access: Published
//  Description: Returns true if there is a transform associated with
//               the indicated stage, or false otherwise (in which
//               case get_transform(stage) will return the identity
//               transform).
////////////////////////////////////////////////////////////////////
62
bool TexProjectorEffect::has_stage(TextureStage *stage) const;

3370 8 get_from 0 4 3588 28 TexProjectorEffect::get_from 0 1 1766 506
////////////////////////////////////////////////////////////////////
//     Function: TexProjectorEffect::get_from
//       Access: Published
//  Description: Returns the "from" node associated with the
//               TexProjectorEffect on the indicated stage.  The
//               relative transform between the "from" and the "to"
//               nodes is automatically applied to the texture
//               transform each frame.
////////////////////////////////////////////////////////////////////
65
NodePath TexProjectorEffect::get_from(TextureStage *stage) const;

3371 6 get_to 0 4 3588 26 TexProjectorEffect::get_to 0 1 1767 665
////////////////////////////////////////////////////////////////////
//     Function: TexProjectorEffect::get_to
//       Access: Published
//  Description: Returns the "to" node associated with the
//               TexProjectorEffect on the indicated stage.  The
//               relative transform between the "from" and the "to"
//               nodes is automatically applied to the texture
//               transform each frame.
//
//               Furthermore, if the "to" node is a LensNode, its
//               projection matrix is also applied to the texture
//               transform.
////////////////////////////////////////////////////////////////////
63
NodePath TexProjectorEffect::get_to(TextureStage *stage) const;

3372 14 get_lens_index 0 4 3588 34 TexProjectorEffect::get_lens_index 0 1 1768 506
////////////////////////////////////////////////////////////////////
//     Function: TexProjectorEffect::get_lens_index
//       Access: Published
//  Description: Returns the lens_index associated with the
//               TexProjectorEffect on the indicated stage.  This is
//               only used if the "to" node is a LensNode, in which
//               case it specifies the particular lens that should be
//               used.
////////////////////////////////////////////////////////////////////
66
int TexProjectorEffect::get_lens_index(TextureStage *stage) const;

3373 14 get_class_type 0 4 3588 34 TexProjectorEffect::get_class_type 0 1 1769 0
59
static TypeHandle TexProjectorEffect::get_class_type(void);

3374 11 make_screen 0 4 3589 26 ScissorEffect::make_screen 0 1 1770 420
////////////////////////////////////////////////////////////////////
//     Function: ScissorEffect::make_screen
//       Access: Published, Static
//  Description: Constructs a new screen-relative ScissorEffect.  The
//               frame defines a left, right, bottom, top region,
//               relative to the DisplayRegion.  See ScissorAttrib.
////////////////////////////////////////////////////////////////////
104
static ConstPointerTo< RenderEffect > ScissorEffect::make_screen(LVecBase4 const &frame, bool clip = 1);

3375 9 make_node 0 4 3589 24 ScissorEffect::make_node 0 3 1771 1772 1773 1525
////////////////////////////////////////////////////////////////////
//     Function: ScissorEffect::make_node
//       Access: Published, Static
//  Description: Constructs a new node-relative ScissorEffect, with no
//               points.  This empty ScissorEffect does nothing.  You
//               must then call add_point a number of times to add the
//               points you require.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ScissorEffect::make_node
//       Access: Published, Static
//  Description: Constructs a new node-relative ScissorEffect.  The
//               two points are understood to be relative to the
//               indicated node, or the current node if the NodePath
//               is empty, and determine the diagonally opposite
//               corners of the scissor region.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ScissorEffect::make_node
//       Access: Published, Static
//  Description: Constructs a new node-relative ScissorEffect.  The
//               four points are understood to be relative to the
//               indicated node, or the current node if the indicated
//               NodePath is empty, and determine four points
//               surrounding the scissor region.
////////////////////////////////////////////////////////////////////
384
static ConstPointerTo< RenderEffect > ScissorEffect::make_node(bool clip = 1);
static ConstPointerTo< RenderEffect > ScissorEffect::make_node(LPoint3 const &a, LPoint3 const &b, NodePath const &node = NodePath());
static ConstPointerTo< RenderEffect > ScissorEffect::make_node(LPoint3 const &a, LPoint3 const &b, LPoint3 const &c, LPoint3 const &d, NodePath const &node = NodePath());

3376 9 add_point 0 4 3589 24 ScissorEffect::add_point 0 1 1774 628
////////////////////////////////////////////////////////////////////
//     Function: ScissorEffect::add_point
//       Access: Published
//  Description: Returns a new ScissorEffect with the indicated point
//               added.  It is only valid to call this on a "node"
//               type ScissorEffect.  The full set of points,
//               projected into screen space, defines the bounding
//               volume of the rectangular scissor region.
//
//               Each point may be relative to a different node, if
//               desired.
////////////////////////////////////////////////////////////////////
119
ConstPointerTo< RenderEffect > ScissorEffect::add_point(LPoint3 const &point, NodePath const &node = NodePath()) const;

3377 9 is_screen 0 4 3589 24 ScissorEffect::is_screen 0 1 1775 393
////////////////////////////////////////////////////////////////////
//     Function: ScissorEffect::is_screen
//       Access: Published
//  Description: Returns true if the ScissorEffect is a screen-based
//               effect, meaning get_frame() has a meaningful value,
//               but get_a() and get_b() do not.
////////////////////////////////////////////////////////////////////
49
inline bool ScissorEffect::is_screen(void) const;

3378 9 get_frame 0 4 3589 24 ScissorEffect::get_frame 0 1 1776 524
////////////////////////////////////////////////////////////////////
//     Function: ScissorEffect::get_frame
//       Access: Published
//  Description: If is_screen() returns true, this method may be
//               called to query the screen-based scissor frame.  This
//               is a series of left, right, bottom, top, representing
//               the scissor frame relative to the current
//               DisplayRegion.  See ScissorAttrib.
////////////////////////////////////////////////////////////////////
61
inline LVecBase4 const &ScissorEffect::get_frame(void) const;

3379 14 get_num_points 0 4 3589 29 ScissorEffect::get_num_points 0 1 1777 312
////////////////////////////////////////////////////////////////////
//     Function: ScissorEffect::get_num_points
//       Access: Published
//  Description: Returns the number of node-based scissor points.  See
//               get_point().
////////////////////////////////////////////////////////////////////
53
inline int ScissorEffect::get_num_points(void) const;

3380 9 get_point 0 4 3589 24 ScissorEffect::get_point 0 1 1778 582
////////////////////////////////////////////////////////////////////
//     Function: ScissorEffect::get_point
//       Access: Published
//  Description: If is_screen() returns false, then get_num_points() and
//               get_point() may be called to query the node-based scissor
//               frame.  These return n points (at least two), which
//               are understood to be in the space of this node, and
//               which define any opposite corners of the scissor
//               frame.
////////////////////////////////////////////////////////////////////
60
inline LPoint3 const &ScissorEffect::get_point(int n) const;

3381 8 get_node 0 4 3589 23 ScissorEffect::get_node 0 1 1779 340
////////////////////////////////////////////////////////////////////
//     Function: ScissorEffect::get_node
//       Access: Published
//  Description: Returns the node to which the nth point is relative,
//               or empty NodePath to indicate the current node.
////////////////////////////////////////////////////////////////////
53
inline NodePath ScissorEffect::get_node(int n) const;

3382 8 get_clip 0 4 3589 23 ScissorEffect::get_clip 0 1 1780 330
////////////////////////////////////////////////////////////////////
//     Function: ScissorEffect::get_clip
//       Access: Published
//  Description: Returns true if this ScissorEffect actually enables
//               scissoring, or false if it culls only.
////////////////////////////////////////////////////////////////////
48
inline bool ScissorEffect::get_clip(void) const;

3383 14 get_class_type 0 4 3589 29 ScissorEffect::get_class_type 0 1 1781 0
54
static TypeHandle ScissorEffect::get_class_type(void);

3384 14 ~ScissorEffect 0 4 3589 29 ScissorEffect::~ScissorEffect 0 0 0
36
ScissorEffect::~ScissorEffect(void);

3385 17 SceneGraphReducer 0 4 3590 36 SceneGraphReducer::SceneGraphReducer 0 1 1782 229
////////////////////////////////////////////////////////////////////
//     Function: SceneGraphReducer::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
80
inline SceneGraphReducer::SceneGraphReducer(GraphicsStateGuardianBase *gsg = 0);

3386 18 ~SceneGraphReducer 0 4 3590 37 SceneGraphReducer::~SceneGraphReducer 0 0 228
////////////////////////////////////////////////////////////////////
//     Function: SceneGraphReducer::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
51
inline SceneGraphReducer::~SceneGraphReducer(void);

3387 7 set_gsg 0 4 3590 26 SceneGraphReducer::set_gsg 0 1 1783 664
////////////////////////////////////////////////////////////////////
//     Function: SceneGraphReducer::set_gsg
//       Access: Published
//  Description: Specifies the particular GraphicsStateGuardian that
//               this object will attempt to optimize to.  The GSG may
//               specify parameters such as maximum number of vertices
//               per vertex data, max number of vertices per
//               primitive, and whether triangle strips are preferred.
//               It also affects the types of vertex column data that
//               is created by premunge().
////////////////////////////////////////////////////////////////////
64
void SceneGraphReducer::set_gsg(GraphicsStateGuardianBase *gsg);

3388 9 clear_gsg 0 4 3590 28 SceneGraphReducer::clear_gsg 0 1 1784 480
////////////////////////////////////////////////////////////////////
//     Function: SceneGraphReducer::clear_gsg
//       Access: Published
//  Description: Specifies that no particular GraphicsStateGuardian
//               will be used to guide the optimization.  The
//               SceneGraphReducer will instead use config variables
//               such as max-collect-vertices and max-collect-indices.
////////////////////////////////////////////////////////////////////
40
void SceneGraphReducer::clear_gsg(void);

3389 7 get_gsg 0 4 3590 26 SceneGraphReducer::get_gsg 0 1 1785 366
////////////////////////////////////////////////////////////////////
//     Function: SceneGraphReducer::get_gsg
//       Access: Published
//  Description: Returns the particular GraphicsStateGuardian that
//               this object will attempt to optimize to. 
//               See set_gsg().
////////////////////////////////////////////////////////////////////
73
inline GraphicsStateGuardianBase *SceneGraphReducer::get_gsg(void) const;

3390 18 set_combine_radius 0 4 3590 37 SceneGraphReducer::set_combine_radius 0 1 1786 757
////////////////////////////////////////////////////////////////////
//     Function: SceneGraphReducer::set_combine_radius
//       Access: Published
//  Description: Specifies the radius that is used in conjunction with
//               CS_within_radius to decide whether a subgraph's
//               siblings should be combined into a single node or
//               not.
//
//               If the CS_within_radius bit is included in the
//               combine_siblings_bits parameter passed to flatten,
//               than any nodes whose bounding volume is smaller than
//               the indicated radius will be combined together (as if
//               CS_other were set).
////////////////////////////////////////////////////////////////////
78
inline void SceneGraphReducer::set_combine_radius(PN_stdfloat combine_radius);

3391 18 get_combine_radius 0 4 3590 37 SceneGraphReducer::get_combine_radius 0 1 1787 350
////////////////////////////////////////////////////////////////////
//     Function: SceneGraphReducer::get_combine_radius
//       Access: Published
//  Description: Returns the radius that is used in conjunction with
//               CS_within_radius.  See set_combine_radius().
////////////////////////////////////////////////////////////////////
69
inline PN_stdfloat SceneGraphReducer::get_combine_radius(void) const;

3392 13 apply_attribs 0 4 3590 32 SceneGraphReducer::apply_attribs 0 2 1788 1789 1409
////////////////////////////////////////////////////////////////////
//     Function: SceneGraphReducer::apply_attribs
//       Access: Published
//  Description: Walks the scene graph, accumulating attribs of
//               the indicated types, applying them to the vertices,
//               and removing them from the scene graph.  This has a
//               performance optimization benefit in itself, but is
//               especially useful to pave the way for a call to
//               flatten() and greatly improve the effectiveness of
//               the flattening operation.
//
//               Multiply instanced geometry is duplicated before the
//               attribs are applied.
//
//               Of course, this operation does make certain dynamic
//               operations impossible.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: SceneGraphReducer::apply_attribs
//       Access: Published
//  Description: This flavor of apply_attribs() can be called
//               recursively from within another flatten process
//               (e.g. from PandaNode::apply_attribs_to_vertices()).
//               The parameters were presumably received from a parent
//               SceneGraphReducer object.
////////////////////////////////////////////////////////////////////
353
inline void SceneGraphReducer::apply_attribs(PandaNode *node, int attrib_types = (~ ((::SceneGraphReducer::TT_clip_plane | ::SceneGraphReducer::TT_cull_face) | ::SceneGraphReducer::TT_apply_texture_color)));
inline void SceneGraphReducer::apply_attribs(PandaNode *node, AccumulatedAttribs const &attribs, int attrib_types, GeomTransformer &transformer);

3393 7 flatten 0 4 3590 26 SceneGraphReducer::flatten 0 1 1790 940
////////////////////////////////////////////////////////////////////
//     Function: SceneGraphReducer::flatten
//       Access: Published
//  Description: Simplifies the graph by removing unnecessary nodes
//               and nodes.
//
//               In general, a node (and its parent node) is a
//               candidate for removal if the node has no siblings and
//               the node has no special properties.
//
//               If combine_siblings_bits is nonzero, some sibling
//               nodes (according to the bits set in
//               combine_siblings_bits) may also be collapsed into a
//               single node.  This will further reduce scene graph
//               complexity, sometimes substantially, at the cost of
//               reduced spatial separation.
//
//               Returns the number of nodes removed from the graph.
////////////////////////////////////////////////////////////////////
75
int SceneGraphReducer::flatten(PandaNode *root, int combine_siblings_bits);

3394 13 remove_column 0 4 3590 32 SceneGraphReducer::remove_column 0 1 1791 406
////////////////////////////////////////////////////////////////////
//     Function: SceneGraphReducer::remove_column
//       Access: Published
//  Description: Removes the indicated data column from any
//               GeomVertexDatas found at the indicated root and
//               below.  Returns the number of GeomNodes modified.
////////////////////////////////////////////////////////////////////
82
int SceneGraphReducer::remove_column(PandaNode *root, InternalName const *column);

3395 21 make_compatible_state 0 4 3590 40 SceneGraphReducer::make_compatible_state 0 1 1792 542
////////////////////////////////////////////////////////////////////
//     Function: SceneGraphReducer::make_compatible_state
//       Access: Published
//  Description: Searches for GeomNodes that contain multiple Geoms
//               that differ only in their ColorAttribs.  If such a
//               GeomNode is found, then all the colors are pushed
//               down into the vertices.  This makes it feasible for
//               the geoms to be unified later.
////////////////////////////////////////////////////////////////////
62
int SceneGraphReducer::make_compatible_state(PandaNode *root);

3396 22 make_compatible_format 0 4 3590 41 SceneGraphReducer::make_compatible_format 0 1 1793 1154
////////////////////////////////////////////////////////////////////
//     Function: SceneGraphReducer::make_compatible_format
//       Access: Published
//  Description: Walks through the tree at this node and below and
//               unifies the GeomVertexFormat for any GeomVertexData
//               objects that are found, so that all eligible vdatas
//               (according to collect_bits; see collect_vertex_data)
//               will share the same vertex format.
//
//               This will add unused columns where necessary to match
//               formats.  It can result in suboptimal performance if
//               used needlessly.
//
//               There is usually no reason to call this explicitly,
//               since collect_vertex_data() will do this anyway if it
//               has not been done already.  However, calling it ahead
//               of time can make that future call to
//               collect_vertex_data() run a little bit faster.
//
//               The return value is the number of vertex datas
//               modified.
////////////////////////////////////////////////////////////////////
96
inline int SceneGraphReducer::make_compatible_format(PandaNode *root, int collect_bits = (~ 0));

3397 9 decompose 0 4 3590 28 SceneGraphReducer::decompose 0 1 1794 716
////////////////////////////////////////////////////////////////////
//     Function: SceneGraphReducer::decompose
//       Access: Published
//  Description: Calls decompose() on every GeomNode at this level and
//               below.
//
//               There is usually no reason to call this explicitly,
//               since unify() will do this anyway if it needs to be
//               done.  However, calling it ahead of time can make
//               that future call to unify() run a little bit faster.
//
//               This operation has no effect if the config variable
//               preserve-triangle-strips has been set true.
////////////////////////////////////////////////////////////////////
51
void SceneGraphReducer::decompose(PandaNode *root);

3398 19 collect_vertex_data 0 4 3590 38 SceneGraphReducer::collect_vertex_data 0 1 1795 955
////////////////////////////////////////////////////////////////////
//     Function: SceneGraphReducer::collect_vertex_data
//       Access: Published
//  Description: Collects all different GeomVertexData blocks that
//               have compatible formats at this node and below into a
//               single, unified block (or at least multiple larger
//               blocks).  This is intended to reduce rendering
//               overhead incurred by switching vertex buffers.  It
//               can also make a subsequent call to unify() much more
//               effective than it would have been otherwise.
//
//               The set of bits passed in collect_bits indicates
//               which properties are used to differentiate
//               GeomVertexData blocks.  If it is 0, then more blocks
//               will be combined together than if it is nonzero.
////////////////////////////////////////////////////////////////////
93
inline int SceneGraphReducer::collect_vertex_data(PandaNode *root, int collect_bits = (~ 0));

3399 15 make_nonindexed 0 4 3590 34 SceneGraphReducer::make_nonindexed 0 1 1796 604
////////////////////////////////////////////////////////////////////
//     Function: SceneGraphReducer::make_nonindexed
//       Access: Published
//  Description: Converts indexed geometry to nonindexed geometry at
//               the indicated node and below, by duplicating vertices
//               where necessary.  The parameter nonindexed_bits is a
//               union of bits defined in
//               SceneGraphReducer::MakeNonindexed, which specifes
//               which types of geometry to avoid making nonindexed.
////////////////////////////////////////////////////////////////////
92
inline int SceneGraphReducer::make_nonindexed(PandaNode *root, int nonindexed_bits = (~ 0));

3400 5 unify 0 4 3590 24 SceneGraphReducer::unify 0 1 1797 499
////////////////////////////////////////////////////////////////////
//     Function: SceneGraphReducer::unify
//       Access: Published
//  Description: Calls unify() on every GeomNode at this level and
//               below.  This attempts to reduce the total number of
//               individual Geoms and GeomPrimitives by combining
//               these objects wherever possible.  See
//               GeomNode::unify().
////////////////////////////////////////////////////////////////////
68
void SceneGraphReducer::unify(PandaNode *root, bool preserve_order);

3401 22 remove_unused_vertices 0 4 3590 41 SceneGraphReducer::remove_unused_vertices 0 1 1798 579
////////////////////////////////////////////////////////////////////
//     Function: SceneGraphReducer::remove_unused_vertices
//       Access: Published
//  Description: Removes any vertices in GeomVertexDatas that are no
//               longer used at this level and below.  This requires
//               remapping vertex indices in all of the
//               GeomPrimitives, to remove holes in the
//               GeomVertexDatas.  It is normally not necessary to
//               call this explicitly.
////////////////////////////////////////////////////////////////////
64
void SceneGraphReducer::remove_unused_vertices(PandaNode *root);

3402 8 premunge 0 4 3590 27 SceneGraphReducer::premunge 0 1 1799 609
////////////////////////////////////////////////////////////////////
//     Function: SceneGraphReducer::premunge
//       Access: Published
//  Description: Walks the scene graph rooted at this node and below,
//               and uses the indicated GSG to premunge every Geom
//               found to optimize it for eventual rendering on the
//               indicated GSG.  If there is no GSG indicated for the
//               SceneGraphReducer, this is a no-op.
//
//               This operation will also apply to stashed children.
////////////////////////////////////////////////////////////////////
91
inline void SceneGraphReducer::premunge(PandaNode *root, RenderState const *initial_state);

3403 18 check_live_flatten 0 4 3590 37 SceneGraphReducer::check_live_flatten 0 1 1800 672
////////////////////////////////////////////////////////////////////
//     Function: SceneGraphReducer::check_live_flatten
//       Access: Published
//  Description: In a non-release build, returns false if the node is
//               correctly not in a live scene graph.  (Calling
//               flatten on a node that is part of a live scene graph,
//               for instance, a node somewhere under render, can
//               cause problems in a multithreaded environment.)
//
//               If allow_live_flatten is true, or in a release build,
//               this always returns true.
////////////////////////////////////////////////////////////////////
60
bool SceneGraphReducer::check_live_flatten(PandaNode *node);

3404 34 py_decode_NodePath_from_bam_stream 0 1 0 34 py_decode_NodePath_from_bam_stream 0 1 1866 0
64
NodePath py_decode_NodePath_from_bam_stream(string const &data);

3405 42 py_decode_NodePath_from_bam_stream_persist 0 1 0 42 py_decode_NodePath_from_bam_stream_persist 0 1 1867 0
93
NodePath py_decode_NodePath_from_bam_stream_persist(PyObject *unpickler, string const &data);

3406 13 ParamNodePath 0 4 3595 28 ParamNodePath::ParamNodePath 0 1 1801 306
////////////////////////////////////////////////////////////////////
//     Function: ParamNodePath::Constructor
//       Access: Published
//  Description: Creates a new ParamNodePath storing the given
//               node path object.
////////////////////////////////////////////////////////////////////
63
inline ParamNodePath::ParamNodePath(NodePath const &node_path);

3407 9 get_value 0 4 3595 24 ParamNodePath::get_value 0 1 1802 271
////////////////////////////////////////////////////////////////////
//     Function: ParamNodePath::get_value
//       Access: Published
//  Description: Retrieves the NodePath stored in the parameter.
////////////////////////////////////////////////////////////////////
60
inline NodePath const &ParamNodePath::get_value(void) const;

3408 14 get_class_type 0 4 3595 29 ParamNodePath::get_class_type 0 1 1803 0
54
static TypeHandle ParamNodePath::get_class_type(void);

3409 14 ~ParamNodePath 0 4 3595 29 ParamNodePath::~ParamNodePath 0 0 0
36
ParamNodePath::~ParamNodePath(void);

3410 10 PortalNode 0 4 3597 22 PortalNode::PortalNode 0 2 1804 1805 1041
////////////////////////////////////////////////////////////////////
//     Function: PortalNode::Constructor
//       Access: Public
//  Description: Default constructor, just an empty node, no geo
//               This is used to read portal from model. You can also
//               use this from python to create an empty portal. Then
//               you can set the vertices yourself, with addVertex.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PortalNode::Constructor
//       Access: Public
//  Description: Create a default rectangle as portal. Use this
//               to create an arbitrary portal and setup from Python
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PortalNode::Copy Constructor
//       Access: Protected
//  Description:
////////////////////////////////////////////////////////////////////
126
PortalNode::PortalNode(string const &name);
PortalNode::PortalNode(string const &name, LPoint3 pos, PN_stdfloat scale = 10.0);

3411 15 set_portal_mask 0 4 3597 27 PortalNode::set_portal_mask 0 1 1806 327
////////////////////////////////////////////////////////////////////
//     Function: PortalNode::set_portal_mask
//       Access: Published
//  Description: Simultaneously sets both the "from" and "into"
//               PortalMask values to the same thing.
////////////////////////////////////////////////////////////////////
57
inline void PortalNode::set_portal_mask(PortalMask mask);

3412 20 set_from_portal_mask 0 4 3597 32 PortalNode::set_from_portal_mask 0 1 1807 501
////////////////////////////////////////////////////////////////////
//     Function: PortalNode::set_from_portal_mask
//       Access: Published
//  Description: Sets the "from" PortalMask.  In order for a
//               portal to be detected from this object into
//               another object, the intersection of this object's
//               "from" mask and the other object's "into" mask must
//               be nonzero.
////////////////////////////////////////////////////////////////////
62
inline void PortalNode::set_from_portal_mask(PortalMask mask);

3413 20 set_into_portal_mask 0 4 3597 32 PortalNode::set_into_portal_mask 0 1 1808 501
////////////////////////////////////////////////////////////////////
//     Function: PortalNode::set_into_portal_mask
//       Access: Published
//  Description: Sets the "into" PortalMask.  In order for a
//               portal to be detected from another object into
//               this object, the intersection of the other object's
//               "from" mask and this object's "into" mask must be
//               nonzero.
////////////////////////////////////////////////////////////////////
62
inline void PortalNode::set_into_portal_mask(PortalMask mask);

3414 20 get_from_portal_mask 0 4 3597 32 PortalNode::get_from_portal_mask 0 1 1809 512
////////////////////////////////////////////////////////////////////
//     Function: PortalNode::get_from_portal_mask
//       Access: Published
//  Description: Returns the current "from" PortalMask.  In order for
//               a portal to be detected from this object into
//               another object, the intersection of this object's
//               "from" mask and the other object's "into" mask must
//               be nonzero.
////////////////////////////////////////////////////////////////////
63
inline PortalMask PortalNode::get_from_portal_mask(void) const;

3415 20 get_into_portal_mask 0 4 3597 32 PortalNode::get_into_portal_mask 0 1 1810 512
////////////////////////////////////////////////////////////////////
//     Function: PortalNode::get_into_portal_mask
//       Access: Published
//  Description: Returns the current "into" PortalMask.  In order for
//               a portal to be detected from another object into
//               this object, the intersection of the other object's
//               "from" mask and this object's "into" mask must be
//               nonzero.
////////////////////////////////////////////////////////////////////
63
inline PortalMask PortalNode::get_into_portal_mask(void) const;

3416 15 set_portal_geom 0 4 3597 27 PortalNode::set_portal_geom 0 1 1811 847
////////////////////////////////////////////////////////////////////
//     Function: PortalNode::set_portal_geom
//       Access: Published
//  Description: Sets the state of the "portal geom" flag for this
//               PortalNode.  Normally, this is false; when this is
//               set true, the PortalSolids in this node will test
//               for portals with actual renderable geometry, in
//               addition to whatever PortalSolids may be indicated
//               by the from_portal_mask.
//
//               Setting this to true causes this to test *all*
//               GeomNodes for portals.  It is an all-or-none
//               thing; there is no way to portal with only some
//               GeomNodes, as GeomNodes have no into_portal_mask.
////////////////////////////////////////////////////////////////////
51
inline void PortalNode::set_portal_geom(bool flag);

3417 15 get_portal_geom 0 4 3597 27 PortalNode::get_portal_geom 0 1 1812 317
////////////////////////////////////////////////////////////////////
//     Function: PortalNode::get_portal_geom
//       Access: Published
//  Description: Returns the current state of the portal_geom flag.
//               See set_portal_geom().
////////////////////////////////////////////////////////////////////
52
inline bool PortalNode::get_portal_geom(void) const;

3418 14 clear_vertices 0 4 3597 26 PortalNode::clear_vertices 0 1 1813 278
////////////////////////////////////////////////////////////////////
//     Function: PortalNode::clear_vertices
//       Access: Published
//  Description: Resets the vertices of the portal to the empty list.
////////////////////////////////////////////////////////////////////
45
inline void PortalNode::clear_vertices(void);

3419 10 add_vertex 0 4 3597 22 PortalNode::add_vertex 0 1 1814 395
////////////////////////////////////////////////////////////////////
//     Function: PortalNode::add_vertex
//       Access: Published
//  Description: Adds a new vertex to the portal polygon.  The
//               vertices should be defined in a counterclockwise
//               orientation when viewing through the portal.
////////////////////////////////////////////////////////////////////
58
inline void PortalNode::add_vertex(LPoint3 const &vertex);

3420 16 get_num_vertices 0 4 3597 28 PortalNode::get_num_vertices 0 1 1815 281
////////////////////////////////////////////////////////////////////
//     Function: PortalNode::get_num_vertices
//       Access: Published
//  Description: Returns the number of vertices in the portal polygon.
////////////////////////////////////////////////////////////////////
52
inline int PortalNode::get_num_vertices(void) const;

3421 10 get_vertex 0 4 3597 22 PortalNode::get_vertex 0 1 1816 267
////////////////////////////////////////////////////////////////////
//     Function: PortalNode::get_vertex
//       Access: Published
//  Description: Returns the nth vertex of the portal polygon.
////////////////////////////////////////////////////////////////////
58
inline LPoint3 const &PortalNode::get_vertex(int n) const;

3422 11 set_cell_in 0 4 3597 23 PortalNode::set_cell_in 0 1 1817 264
////////////////////////////////////////////////////////////////////
//     Function: PortalNode::set_cell_in
//       Access: Published
//  Description: Sets the cell that this portal belongs to
////////////////////////////////////////////////////////////////////
58
inline void PortalNode::set_cell_in(NodePath const &cell);

3423 11 get_cell_in 0 4 3597 23 PortalNode::get_cell_in 0 1 1818 264
////////////////////////////////////////////////////////////////////
//     Function: PortalNode::get_cell_in
//       Access: Published
//  Description: Sets the cell that this portal belongs to
////////////////////////////////////////////////////////////////////
52
inline NodePath PortalNode::get_cell_in(void) const;

3424 12 set_cell_out 0 4 3597 24 PortalNode::set_cell_out 0 1 1819 267
////////////////////////////////////////////////////////////////////
//     Function: PortalNode::set_cell_out
//       Access: Published
//  Description: Sets the cell that this portal leads out to
////////////////////////////////////////////////////////////////////
59
inline void PortalNode::set_cell_out(NodePath const &cell);

3425 12 get_cell_out 0 4 3597 24 PortalNode::get_cell_out 0 1 1820 267
////////////////////////////////////////////////////////////////////
//     Function: PortalNode::get_cell_out
//       Access: Published
//  Description: Sets the cell that this portal leads out to
////////////////////////////////////////////////////////////////////
53
inline NodePath PortalNode::get_cell_out(void) const;

3426 14 set_clip_plane 0 4 3597 26 PortalNode::set_clip_plane 0 1 1821 313
////////////////////////////////////////////////////////////////////
//     Function: PortalNode::set_clip_plane
//       Access: Published
//  Description: this is set if the portal will clip against its 
//               left and right planes
////////////////////////////////////////////////////////////////////
51
inline void PortalNode::set_clip_plane(bool value);

3427 13 is_clip_plane 0 4 3597 25 PortalNode::is_clip_plane 0 1 1822 278
////////////////////////////////////////////////////////////////////
//     Function: PortalNode::is_clip_plane
//       Access: Published
//  Description: Is this portal clipping against its left-right planes
////////////////////////////////////////////////////////////////////
44
inline bool PortalNode::is_clip_plane(void);

3428 11 set_visible 0 4 3597 23 PortalNode::set_visible 0 1 1823 265
////////////////////////////////////////////////////////////////////
//     Function: PortalNode::set_visible
//       Access: Published
//  Description: this is set if the portal is facing camera
////////////////////////////////////////////////////////////////////
48
inline void PortalNode::set_visible(bool value);

3429 10 is_visible 0 4 3597 22 PortalNode::is_visible 0 1 1824 254
////////////////////////////////////////////////////////////////////
//     Function: PortalNode::is_visible
//       Access: Published
//  Description: Is this portal facing the camera
////////////////////////////////////////////////////////////////////
41
inline bool PortalNode::is_visible(void);

3430 13 set_max_depth 0 4 3597 25 PortalNode::set_max_depth 0 1 1825 277
////////////////////////////////////////////////////////////////////
//     Function: PortalNode::set_max_depth
//       Access: Published
//  Description: Set the maximum depth this portal will be visible at
////////////////////////////////////////////////////////////////////
49
inline void PortalNode::set_max_depth(int value);

3431 13 get_max_depth 0 4 3597 25 PortalNode::get_max_depth 0 1 1826 281
////////////////////////////////////////////////////////////////////
//     Function: PortalNode::get_max_depth
//       Access: Published
//  Description: Returns the maximum depth this portal will be visible at
////////////////////////////////////////////////////////////////////
43
inline int PortalNode::get_max_depth(void);

3432 8 set_open 0 4 3597 20 PortalNode::set_open 0 1 1827 264
////////////////////////////////////////////////////////////////////
//     Function: PortalNode::set_open
//       Access: Published
//  Description: Python sets this based on curent camera zone
////////////////////////////////////////////////////////////////////
45
inline void PortalNode::set_open(bool value);

3433 7 is_open 0 4 3597 19 PortalNode::is_open 0 1 1828 263
////////////////////////////////////////////////////////////////////
//     Function: PortalNode::is_open
//       Access: Published
//  Description: Is this portal open from current camera zone
////////////////////////////////////////////////////////////////////
38
inline bool PortalNode::is_open(void);

3434 14 get_class_type 0 4 3597 26 PortalNode::get_class_type 0 1 1829 0
51
static TypeHandle PortalNode::get_class_type(void);

3435 4 make 0 4 3598 25 RescaleNormalAttrib::make 0 1 1830 419
////////////////////////////////////////////////////////////////////
//     Function: RescaleNormalAttrib::make
//       Access: Published, Static
//  Description: Constructs a new RescaleNormalAttrib object that
//               specifies whether to rescale normals to compensate
//               for transform scales or incorrectly defined normals.
////////////////////////////////////////////////////////////////////
96
static ConstPointerTo< RenderAttrib > RescaleNormalAttrib::make(RescaleNormalAttrib::Mode mode);

3436 12 make_default 0 4 3598 33 RescaleNormalAttrib::make_default 0 1 1831 483
////////////////////////////////////////////////////////////////////
//     Function: RescaleNormalAttrib::make_default
//       Access: Published, Static
//  Description: Constructs a RescaleNoramlAttrib object that's
//               suitable for putting at the top of a scene graph.
//               This will contain whatever attrib was suggested by
//               the user's rescale-normals Config variable.
////////////////////////////////////////////////////////////////////
78
static ConstPointerTo< RenderAttrib > RescaleNormalAttrib::make_default(void);

3437 8 get_mode 0 4 3598 29 RescaleNormalAttrib::get_mode 0 1 1832 253
////////////////////////////////////////////////////////////////////
//     Function: RescaleNormalAttrib::get_mode
//       Access: Published
//  Description: Returns the render mode.
////////////////////////////////////////////////////////////////////
75
inline RescaleNormalAttrib::Mode RescaleNormalAttrib::get_mode(void) const;

3438 14 get_class_slot 0 4 3598 35 RescaleNormalAttrib::get_class_slot 0 1 1833 0
53
static int RescaleNormalAttrib::get_class_slot(void);

3439 14 get_class_type 0 4 3598 35 RescaleNormalAttrib::get_class_type 0 1 1834 0
60
static TypeHandle RescaleNormalAttrib::get_class_type(void);

3440 20 ~RescaleNormalAttrib 0 4 3598 41 RescaleNormalAttrib::~RescaleNormalAttrib 0 0 0
48
RescaleNormalAttrib::~RescaleNormalAttrib(void);

3441 8 make_off 0 4 3600 23 ScissorAttrib::make_off 0 1 1835 346
////////////////////////////////////////////////////////////////////
//     Function: ScissorAttrib::make_off
//       Access: Published, Static
//  Description: Constructs a new ScissorAttrib object that removes
//               the scissor region and fills the DisplayRegion.
////////////////////////////////////////////////////////////////////
68
static ConstPointerTo< RenderAttrib > ScissorAttrib::make_off(void);

3442 4 make 0 4 3600 19 ScissorAttrib::make 0 2 1836 1837 956
////////////////////////////////////////////////////////////////////
//     Function: ScissorAttrib::make
//       Access: Published, Static
//  Description: Constructs a ScissorAttrib that restricts rendering
//               to the indicated frame within the current
//               DisplayRegion.  (0,0) is the lower-left corner of the
//               DisplayRegion, and (1,1) is the upper-right corner.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ScissorAttrib::make
//       Access: Published, Static
//  Description: Constructs a ScissorAttrib that restricts rendering
//               to the indicated frame within the current
//               DisplayRegion.  (0,0) is the lower-left corner of the
//               DisplayRegion, and (1,1) is the upper-right corner.
////////////////////////////////////////////////////////////////////
222
static inline ConstPointerTo< RenderAttrib > ScissorAttrib::make(PN_stdfloat left, PN_stdfloat right, PN_stdfloat bottom, PN_stdfloat top);
static ConstPointerTo< RenderAttrib > ScissorAttrib::make(LVecBase4 const &frame);

3443 12 make_default 0 4 3600 27 ScissorAttrib::make_default 0 1 1838 400
////////////////////////////////////////////////////////////////////
//     Function: ScissorAttrib::make_default
//       Access: Published, Static
//  Description: Returns a RenderAttrib that corresponds to whatever
//               the standard default properties for render attributes
//               of this type ought to be.
////////////////////////////////////////////////////////////////////
72
static ConstPointerTo< RenderAttrib > ScissorAttrib::make_default(void);

3444 6 is_off 0 4 3600 21 ScissorAttrib::is_off 0 1 1839 360
////////////////////////////////////////////////////////////////////
//     Function: ScissorAttrib::is_off
//       Access: Published
//  Description: Returns true if the ScissorAttrib is an 'off'
//               ScissorAttrib, indicating that scissor testing is
//               disabled.
////////////////////////////////////////////////////////////////////
46
inline bool ScissorAttrib::is_off(void) const;

3445 9 get_frame 0 4 3600 24 ScissorAttrib::get_frame 0 1 1840 510
////////////////////////////////////////////////////////////////////
//     Function: ScissorAttrib::get_frame
//       Access: Published
//  Description: Returns the left, right, bottom, top coordinates of
//               the scissor frame.  This defines a frame within the
//               current DisplayRegion, where 0,0 is the lower-left
//               corner of the DisplayRegion, and 1,1 is the
//               upper-right corner.
////////////////////////////////////////////////////////////////////
61
inline LVecBase4 const &ScissorAttrib::get_frame(void) const;

3446 14 get_class_slot 0 4 3600 29 ScissorAttrib::get_class_slot 0 1 1841 0
47
static int ScissorAttrib::get_class_slot(void);

3447 14 get_class_type 0 4 3600 29 ScissorAttrib::get_class_type 0 1 1842 0
54
static TypeHandle ScissorAttrib::get_class_type(void);

3448 14 ~ScissorAttrib 0 4 3600 29 ScissorAttrib::~ScissorAttrib 0 0 0
36
ScissorAttrib::~ScissorAttrib(void);

3449 4 make 0 4 3601 22 ShadeModelAttrib::make 0 1 1843 399
////////////////////////////////////////////////////////////////////
//     Function: ShadeModelAttrib::make
//       Access: Published, Static
//  Description: Constructs a new ShadeModelAttrib object that specifies
//               whether to draw polygons with flat shading or with
//               per-vertex (smooth) shading.
////////////////////////////////////////////////////////////////////
90
static ConstPointerTo< RenderAttrib > ShadeModelAttrib::make(ShadeModelAttrib::Mode mode);

3450 12 make_default 0 4 3601 30 ShadeModelAttrib::make_default 0 1 1844 403
////////////////////////////////////////////////////////////////////
//     Function: ShadeModelAttrib::make_default
//       Access: Published, Static
//  Description: Returns a RenderAttrib that corresponds to whatever
//               the standard default properties for render attributes
//               of this type ought to be.
////////////////////////////////////////////////////////////////////
75
static ConstPointerTo< RenderAttrib > ShadeModelAttrib::make_default(void);

3451 8 get_mode 0 4 3601 26 ShadeModelAttrib::get_mode 0 1 1845 249
////////////////////////////////////////////////////////////////////
//     Function: ShadeModelAttrib::get_mode
//       Access: Published
//  Description: Returns the shade mode.
////////////////////////////////////////////////////////////////////
69
inline ShadeModelAttrib::Mode ShadeModelAttrib::get_mode(void) const;

3452 14 get_class_slot 0 4 3601 32 ShadeModelAttrib::get_class_slot 0 1 1846 0
50
static int ShadeModelAttrib::get_class_slot(void);

3453 14 get_class_type 0 4 3601 32 ShadeModelAttrib::get_class_type 0 1 1847 0
57
static TypeHandle ShadeModelAttrib::get_class_type(void);

3454 17 ~ShadeModelAttrib 0 4 3601 35 ShadeModelAttrib::~ShadeModelAttrib 0 0 0
42
ShadeModelAttrib::~ShadeModelAttrib(void);

3455 8 make_off 0 4 3603 23 StencilAttrib::make_off 0 1 1848 306
////////////////////////////////////////////////////////////////////
//     Function: StencilAttrib::make_off
//       Access: Published, Static
//  Description: Constructs a StencilAttrib that has stenciling
//               turned off.
////////////////////////////////////////////////////////////////////
68
static ConstPointerTo< RenderAttrib > StencilAttrib::make_off(void);

3456 12 make_default 0 4 3603 27 StencilAttrib::make_default 0 1 1849 400
////////////////////////////////////////////////////////////////////
//     Function: StencilAttrib::make_default
//       Access: Published, Static
//  Description: Returns a RenderAttrib that corresponds to whatever
//               the standard default properties for render attributes
//               of this type ought to be.
////////////////////////////////////////////////////////////////////
72
static ConstPointerTo< RenderAttrib > StencilAttrib::make_default(void);

3457 4 make 0 4 3603 19 StencilAttrib::make 0 1 1850 265
////////////////////////////////////////////////////////////////////
//     Function: StencilAttrib::make
//       Access: Published, Static
//  Description: Constructs a front face StencilAttrib.
////////////////////////////////////////////////////////////////////
396
static ConstPointerTo< RenderAttrib > StencilAttrib::make(bool front_enable, RenderAttrib::PandaCompareFunc front_comparison_function, StencilAttrib::StencilOperation stencil_fail_operation, StencilAttrib::StencilOperation stencil_pass_z_fail_operation, StencilAttrib::StencilOperation front_stencil_pass_z_pass_operation, unsigned int reference, unsigned int read_mask, unsigned int write_mask);

3458 12 make_2_sided 0 4 3603 27 StencilAttrib::make_2_sided 0 1 1851 272
////////////////////////////////////////////////////////////////////
//     Function: StencilAttrib::make_2_sided
//       Access: Published, Static
//  Description: Constructs a two-sided StencilAttrib.
////////////////////////////////////////////////////////////////////
676
static ConstPointerTo< RenderAttrib > StencilAttrib::make_2_sided(bool front_enable, bool back_enable, RenderAttrib::PandaCompareFunc front_comparison_function, StencilAttrib::StencilOperation stencil_fail_operation, StencilAttrib::StencilOperation stencil_pass_z_fail_operation, StencilAttrib::StencilOperation front_stencil_pass_z_pass_operation, unsigned int reference, unsigned int read_mask, unsigned int write_mask, RenderAttrib::PandaCompareFunc back_comparison_function, StencilAttrib::StencilOperation back_stencil_fail_operation, StencilAttrib::StencilOperation back_stencil_pass_z_fail_operation, StencilAttrib::StencilOperation back_stencil_pass_z_pass_operation);

3459 15 make_with_clear 0 4 3603 30 StencilAttrib::make_with_clear 0 1 1852 265
////////////////////////////////////////////////////////////////////
//     Function: StencilAttrib::make
//       Access: Published, Static
//  Description: Constructs a front face StencilAttrib.
////////////////////////////////////////////////////////////////////
445
static ConstPointerTo< RenderAttrib > StencilAttrib::make_with_clear(bool front_enable, RenderAttrib::PandaCompareFunc front_comparison_function, StencilAttrib::StencilOperation stencil_fail_operation, StencilAttrib::StencilOperation stencil_pass_z_fail_operation, StencilAttrib::StencilOperation front_stencil_pass_z_pass_operation, unsigned int reference, unsigned int read_mask, unsigned int write_mask, bool clear, unsigned int clear_value);

3460 23 make_2_sided_with_clear 0 4 3603 38 StencilAttrib::make_2_sided_with_clear 0 1 1853 272
////////////////////////////////////////////////////////////////////
//     Function: StencilAttrib::make_2_sided
//       Access: Published, Static
//  Description: Constructs a two-sided StencilAttrib.
////////////////////////////////////////////////////////////////////
725
static ConstPointerTo< RenderAttrib > StencilAttrib::make_2_sided_with_clear(bool front_enable, bool back_enable, RenderAttrib::PandaCompareFunc front_comparison_function, StencilAttrib::StencilOperation stencil_fail_operation, StencilAttrib::StencilOperation stencil_pass_z_fail_operation, StencilAttrib::StencilOperation front_stencil_pass_z_pass_operation, unsigned int reference, unsigned int read_mask, unsigned int write_mask, RenderAttrib::PandaCompareFunc back_comparison_function, StencilAttrib::StencilOperation back_stencil_fail_operation, StencilAttrib::StencilOperation back_stencil_pass_z_fail_operation, StencilAttrib::StencilOperation back_stencil_pass_z_pass_operation, bool clear, unsigned int clear_value);

3461 16 get_render_state 0 4 3603 31 StencilAttrib::get_render_state 0 1 1854 252
////////////////////////////////////////////////////////////////////
//     Function: StencilAttrib::get_render_state
//       Access: Published
//  Description: Returns render state.
////////////////////////////////////////////////////////////////////
117
inline unsigned int StencilAttrib::get_render_state(StencilAttrib::StencilRenderState render_state_identifier) const;

3462 14 get_class_slot 0 4 3603 29 StencilAttrib::get_class_slot 0 1 1855 0
47
static int StencilAttrib::get_class_slot(void);

3463 14 get_class_type 0 4 3603 29 StencilAttrib::get_class_type 0 1 1856 0
54
static TypeHandle StencilAttrib::get_class_type(void);

3464 14 ~StencilAttrib 0 4 3603 29 StencilAttrib::~StencilAttrib 0 0 0
36
StencilAttrib::~StencilAttrib(void);

3465 10 has_shader 0 4 3607 22 ShaderPool::has_shader 0 1 1857 309
////////////////////////////////////////////////////////////////////
//     Function: ShaderPool::has_shader
//       Access: Public, Static
//  Description: Returns true if the shader has ever been loaded,
//               false otherwise.
////////////////////////////////////////////////////////////////////
68
static inline bool ShaderPool::has_shader(Filename const &filename);

3466 13 verify_shader 0 4 3607 25 ShaderPool::verify_shader 0 1 1858 602
////////////////////////////////////////////////////////////////////
//     Function: ShaderPool::verify_shader
//       Access: Public, Static
//  Description: Loads the given filename up into a shader, if it has
//               not already been loaded, and returns true to indicate
//               success, or false to indicate failure.  If this
//               returns true, it is guaranteed that a subsequent call
//               to load_shader() with the same shader name will
//               return a valid Shader pointer.
////////////////////////////////////////////////////////////////////
71
static inline bool ShaderPool::verify_shader(Filename const &filename);

3467 11 load_shader 0 4 3607 23 ShaderPool::load_shader 0 1 1859 536
////////////////////////////////////////////////////////////////////
//     Function: ShaderPool::load_shader
//       Access: Public, Static
//  Description: Loads the given filename up into a shader, if it has
//               not already been loaded, and returns the new shader.
//               If a shader with the same filename was previously
//               loaded, returns that one instead.  If the shader
//               file cannot be found, returns NULL.
////////////////////////////////////////////////////////////////////
89
static inline ConstPointerTo< Shader > ShaderPool::load_shader(Filename const &filename);

3468 10 add_shader 0 4 3607 22 ShaderPool::add_shader 0 1 1860 432
////////////////////////////////////////////////////////////////////
//     Function: ShaderPool::add_shader
//       Access: Public, Static
//  Description: Adds the indicated already-loaded shader to the
//               pool.  The shader will always replace any
//               previously-loaded shader in the pool that had the
//               same filename.
////////////////////////////////////////////////////////////////////
84
static inline void ShaderPool::add_shader(Filename const &filename, Shader *shader);

3469 14 release_shader 0 4 3607 26 ShaderPool::release_shader 0 1 1861 549
////////////////////////////////////////////////////////////////////
//     Function: ShaderPool::release_shader
//       Access: Public, Static
//  Description: Removes the indicated shader from the pool,
//               indicating it will never be loaded again; the shader
//               may then be freed.  If this function is never called,
//               a reference count will be maintained on every shader
//               every loaded, and shaders will never be freed.
////////////////////////////////////////////////////////////////////
72
static inline void ShaderPool::release_shader(Filename const &filename);

3470 19 release_all_shaders 0 4 3607 31 ShaderPool::release_all_shaders 0 1 1862 327
////////////////////////////////////////////////////////////////////
//     Function: ShaderPool::release_all_shaders
//       Access: Public, Static
//  Description: Releases all shaders in the pool and restores the
//               pool to the empty state.
////////////////////////////////////////////////////////////////////
57
static inline void ShaderPool::release_all_shaders(void);

3471 15 garbage_collect 0 4 3607 27 ShaderPool::garbage_collect 0 1 1863 473
////////////////////////////////////////////////////////////////////
//     Function: ShaderPool::garbage_collect
//       Access: Public, Static
//  Description: Releases only those shaders in the pool that have a
//               reference count of exactly 1; i.e. only those
//               shaders that are not being used outside of the pool.
//               Returns the number of shaders released.
////////////////////////////////////////////////////////////////////
52
static inline int ShaderPool::garbage_collect(void);

3472 13 list_contents 0 4 3607 25 ShaderPool::list_contents 0 1 1864 316
////////////////////////////////////////////////////////////////////
//     Function: ShaderPool::list_contents
//       Access: Public, Static
//  Description: Lists the contents of the shader pool to the
//               indicated output stream.
////////////////////////////////////////////////////////////////////
59
static inline void ShaderPool::list_contents(ostream &out);

3473 5 write 0 4 3607 17 ShaderPool::write 0 1 1865 311
////////////////////////////////////////////////////////////////////
//     Function: ShaderPool::write
//       Access: Published, Static
//  Description: Lists the contents of the shader pool to the
//               indicated output stream.
////////////////////////////////////////////////////////////////////
44
static void ShaderPool::write(ostream &out);

3474 11 ~ShaderPool 0 4 3607 23 ShaderPool::~ShaderPool 0 0 0
30
ShaderPool::~ShaderPool(void);

1867
1 0 0 6 3 3610 0 0 0 2 4 this 3 3608  5 other 1 3608  
2 0 0 6 4 3611 0 0 608 ////////////////////////////////////////////////////////////////////
//     Function: TransformState::compare_to
//       Access: Published
//  Description: Provides an arbitrary ordering among all unique
//               TransformStates, so we can store the essentially
//               different ones in a big set and throw away the rest.
//
//               Note that if this returns 0, it doesn't necessarily
//               imply that operator == returns true; it uses a very
//               slightly different comparison threshold.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3608  5 other 1 3608  
3 0 0 6 4 3611 0 0 895 ////////////////////////////////////////////////////////////////////
//     Function: TransformState::compare_to
//       Access: Published
//  Description: Provides an arbitrary ordering among all unique
//               TransformStates, so we can store the essentially
//               different ones in a big set and throw away the rest.
//
//               Note that if this returns 0, it doesn't necessarily
//               imply that operator == returns true; it uses a very
//               slightly different comparison threshold.
//
//               If uniquify_matrix is true, then matrix-defined
//               TransformStates are also uniqified.  If
//               uniquify_matrix is false, then only component-defined
//               TransformStates are uniquified, which is less
//               expensive.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3608  5 other 1 3608  15 uniquify_matrix 1 3610  
4 0 0 6 5 3610 0 0 0 2 4 this 3 3608  5 other 1 3608  
5 0 0 6 6 3612 0 0 268 ////////////////////////////////////////////////////////////////////
//     Function: TransformState::get_hash
//       Access: Published
//  Description: Returns a suitable hash value for phash_map.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3608  
6 0 0 7 7 3608 0 0 270 ////////////////////////////////////////////////////////////////////
//     Function: TransformState::make_identity
//       Access: Published, Static
//  Description: Constructs an identity transform.
//////////////////////////////////////////////////////////////////// 0 
7 0 0 7 8 3608 0 0 342 ////////////////////////////////////////////////////////////////////
//     Function: TransformState::make_invalid
//       Access: Published, Static
//  Description: Constructs an invalid transform; for instance, the
//               result of inverting a singular matrix.
//////////////////////////////////////////////////////////////////// 0 
8 0 0 7 9 3608 0 0 306 ////////////////////////////////////////////////////////////////////
//     Function: TransformState::make_pos
//       Access: Published, Static
//  Description: Makes a new TransformState with the specified
//               components.
//////////////////////////////////////////////////////////////////// 1 3 pos 1 3614  
9 0 0 7 10 3608 0 0 306 ////////////////////////////////////////////////////////////////////
//     Function: TransformState::make_hpr
//       Access: Published, Static
//  Description: Makes a new TransformState with the specified
//               components.
//////////////////////////////////////////////////////////////////// 1 3 hpr 1 3614  
10 0 0 7 11 3608 0 0 307 ////////////////////////////////////////////////////////////////////
//     Function: TransformState::make_quat
//       Access: Published, Static
//  Description: Makes a new TransformState with the specified
//               components.
//////////////////////////////////////////////////////////////////// 1 4 quat 1 3618  
11 0 0 7 12 3608 0 0 310 ////////////////////////////////////////////////////////////////////
//     Function: TransformState::make_pos_hpr
//       Access: Published, Static
//  Description: Makes a new TransformState with the specified
//               components.
//////////////////////////////////////////////////////////////////// 2 3 pos 1 3614  3 hpr 1 3614  
12 0 0 7 13 3608 0 0 308 ////////////////////////////////////////////////////////////////////
//     Function: TransformState::make_scale
//       Access: Published, Static
//  Description: Makes a new TransformState with the specified
//               components.
//////////////////////////////////////////////////////////////////// 1 5 scale 1 3614  
13 0 0 7 13 3608 0 0 308 ////////////////////////////////////////////////////////////////////
//     Function: TransformState::make_scale
//       Access: Published, Static
//  Description: Makes a new TransformState with the specified
//               components.
//////////////////////////////////////////////////////////////////// 1 5 scale 1 3622  
14 0 0 7 14 3608 0 0 308 ////////////////////////////////////////////////////////////////////
//     Function: TransformState::make_shear
//       Access: Published, Static
//  Description: Makes a new TransformState with the specified
//               components.
//////////////////////////////////////////////////////////////////// 1 5 shear 1 3614  
15 0 0 7 15 3608 0 0 316 ////////////////////////////////////////////////////////////////////
//     Function: TransformState::make_pos_hpr_scale
//       Access: Published, Static
//  Description: Makes a new TransformState with the specified
//               components.
//////////////////////////////////////////////////////////////////// 3 3 pos 1 3614  3 hpr 1 3614  5 scale 1 3614  
16 0 0 7 16 3608 0 0 317 ////////////////////////////////////////////////////////////////////
//     Function: TransformState::make_pos_quat_scale
//       Access: Published, Static
//  Description: Makes a new TransformState with the specified
//               components.
//////////////////////////////////////////////////////////////////// 3 3 pos 1 3614  4 quat 1 3618  5 scale 1 3614  
17 0 0 7 17 3608 0 0 322 ////////////////////////////////////////////////////////////////////
//     Function: TransformState::make_pos_hpr_scale_shear
//       Access: Published, Static
//  Description: Makes a new TransformState with the specified
//               components.
//////////////////////////////////////////////////////////////////// 4 3 pos 1 3614  3 hpr 1 3614  5 scale 1 3614  5 shear 1 3614  
18 0 0 7 18 3608 0 0 323 ////////////////////////////////////////////////////////////////////
//     Function: TransformState::make_pos_quat_scale_shear
//       Access: Published, Static
//  Description: Makes a new TransformState with the specified
//               components.
//////////////////////////////////////////////////////////////////// 4 3 pos 1 3614  4 quat 1 3618  5 scale 1 3614  5 shear 1 3614  
19 0 0 7 19 3608 0 0 317 ////////////////////////////////////////////////////////////////////
//     Function: TransformState::make_mat
//       Access: Published, Static
//  Description: Makes a new TransformState with the specified
//               transformation matrix.
//////////////////////////////////////////////////////////////////// 1 3 mat 1 3624  
20 0 0 7 20 3608 0 0 312 ////////////////////////////////////////////////////////////////////
//     Function: TransformState::make_pos2d
//       Access: Published, Static
//  Description: Makes a new 2-d TransformState with the specified
//               components.
//////////////////////////////////////////////////////////////////// 1 3 pos 1 3628  
21 0 0 7 21 3608 0 0 315 ////////////////////////////////////////////////////////////////////
//     Function: TransformState::make_rotate2d
//       Access: Published, Static
//  Description: Makes a new 2-d TransformState with the specified
//               components.
//////////////////////////////////////////////////////////////////// 1 6 rotate 1 3622  
22 0 0 7 22 3608 0 0 319 ////////////////////////////////////////////////////////////////////
//     Function: TransformState::make_pos_rotate2d
//       Access: Published, Static
//  Description: Makes a new 2-d TransformState with the specified
//               components.
//////////////////////////////////////////////////////////////////// 2 3 pos 1 3628  6 rotate 1 3622  
23 0 0 7 23 3608 0 0 314 ////////////////////////////////////////////////////////////////////
//     Function: TransformState::make_scale2d
//       Access: Published, Static
//  Description: Makes a new 2-d TransformState with the specified
//               components.
//////////////////////////////////////////////////////////////////// 1 5 scale 1 3628  
24 0 0 7 23 3608 0 0 314 ////////////////////////////////////////////////////////////////////
//     Function: TransformState::make_scale2d
//       Access: Published, Static
//  Description: Makes a new 2-d TransformState with the specified
//               components.
//////////////////////////////////////////////////////////////////// 1 5 scale 1 3622  
25 0 0 7 24 3608 0 0 314 ////////////////////////////////////////////////////////////////////
//     Function: TransformState::make_shear2d
//       Access: Published, Static
//  Description: Makes a new 2-d TransformState with the specified
//               components.
//////////////////////////////////////////////////////////////////// 1 5 shear 1 3622  
26 0 0 7 25 3608 0 0 325 ////////////////////////////////////////////////////////////////////
//     Function: TransformState::make_pos_rotate_scale2d
//       Access: Published, Static
//  Description: Makes a new 2-d TransformState with the specified
//               components.
//////////////////////////////////////////////////////////////////// 3 3 pos 1 3628  6 rotate 1 3622  5 scale 1 3628  
27 0 0 7 26 3608 0 0 343 ////////////////////////////////////////////////////////////////////
//     Function: TransformState::make_pos_rotate_scale_shear2d
//       Access: Published, Static
//  Description: Makes a new two-dimensional TransformState with the
//               specified components.
//////////////////////////////////////////////////////////////////// 4 3 pos 1 3628  6 rotate 1 3622  5 scale 1 3628  5 shear 1 3622  
28 0 0 7 27 3608 0 0 338 ////////////////////////////////////////////////////////////////////
//     Function: TransformState::make_mat3
//       Access: Published, Static
//  Description: Makes a new two-dimensional TransformState with the
//               specified 3x3 transformation matrix.
//////////////////////////////////////////////////////////////////// 1 3 mat 1 3632  
29 0 0 6 28 3610 0 0 322 ////////////////////////////////////////////////////////////////////
//     Function: TransformState::is_identity
//       Access: Published
//  Description: Returns true if the transform represents the identity
//               matrix, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3608  
30 0 0 6 29 3610 0 0 411 ////////////////////////////////////////////////////////////////////
//     Function: TransformState::is_invalid
//       Access: Published
//  Description: Returns true if the transform represents an invalid
//               matrix, for instance the result of inverting a
//               singular matrix, or false if the transform is valid.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3608  
31 0 0 6 30 3610 0 0 401 ////////////////////////////////////////////////////////////////////
//     Function: TransformState::is_singular
//       Access: Published
//  Description: Returns true if the transform represents a singular
//               transform (that is, it has a zero scale, and it
//               cannot be inverted), or false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3608  
32 0 0 6 31 3610 0 0 460 ////////////////////////////////////////////////////////////////////
//     Function: TransformState::is_2d
//       Access: Published
//  Description: Returns true if the transform has been constructed
//               entirely using the 2-d transform operations,
//               e.g. make_pos2d(), and therefore operates strictly in
//               two-dimensional space on X and Y only.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3608  
33 0 0 6 32 3610 0 0 1050 ////////////////////////////////////////////////////////////////////
//     Function: TransformState::has_components
//       Access: Published
//  Description: Returns true if the transform can be described by
//               separate pos, hpr, and scale components.  Most
//               transforms we use in everyday life can be so
//               described, but some kinds of transforms (for
//               instance, those involving a skew) cannot.
//
//               This is not related to whether the transform was
//               originally described componentwise.  Even a transform
//               that was constructed with a 4x4 may return true here
//               if the matrix is a simple affine matrix with no skew.
//
//               If this returns true, you may safely call get_hpr()
//               and get_scale() to retrieve the components.  (You
//               may always safely call get_pos() whether this returns
//               true or false.)
//////////////////////////////////////////////////////////////////// 1 4 this 3 3608  
34 0 0 6 33 3610 0 0 796 ////////////////////////////////////////////////////////////////////
//     Function: TransformState::components_given
//       Access: Published
//  Description: Returns true if the transform was specified
//               componentwise, or false if it was specified with a
//               general 4x4 matrix.  If this is true, the components
//               returned by get_pos() and get_scale() will be exactly
//               those that were set; otherwise, these functions will
//               return computed values.  If this is true, the
//               rotation may have been set either with a hpr trio or
//               with a quaternion; hpr_given() or quat_given() can
//               resolve the difference.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3608  
35 0 0 6 34 3610 0 0 459 ////////////////////////////////////////////////////////////////////
//     Function: TransformState::hpr_given
//       Access: Published
//  Description: Returns true if the rotation was specified via a trio
//               of Euler angles, false otherwise.  If this is true,
//               get_hpr() will be exactly as set; otherwise, it will
//               return a computed value.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3608  
36 0 0 6 35 3610 0 0 451 ////////////////////////////////////////////////////////////////////
//     Function: TransformState::quat_given
//       Access: Published
//  Description: Returns true if the rotation was specified via a
//               quaternion, false otherwise.  If this is true,
//               get_quat() will be exactly as set; otherwise, it will
//               return a computed value.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3608  
37 0 0 6 36 3610 0 0 450 ////////////////////////////////////////////////////////////////////
//     Function: TransformState::has_pos
//       Access: Published
//  Description: Returns true if the transform's pos component can be
//               extracted out separately.  This is generally always
//               true, unless the transform is invalid
//               (i.e. is_invalid() returns true).
//////////////////////////////////////////////////////////////////// 1 4 this 3 3608  
38 0 0 6 37 3610 0 0 456 ////////////////////////////////////////////////////////////////////
//     Function: TransformState::has_hpr
//       Access: Published
//  Description: Returns true if the transform's rotation component
//               can be extracted out separately and described as a
//               set of Euler angles.  This is generally true only
//               when has_components() is true.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3608  
39 0 0 6 38 3610 0 0 448 ////////////////////////////////////////////////////////////////////
//     Function: TransformState::has_quat
//       Access: Published
//  Description: Returns true if the transform's rotation component
//               can be extracted out separately and described as a
//               quaternion.  This is generally true only when
//               has_components() is true.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3608  
40 0 0 6 39 3610 0 0 399 ////////////////////////////////////////////////////////////////////
//     Function: TransformState::has_scale
//       Access: Published
//  Description: Returns true if the transform's scale component
//               can be extracted out separately.  This is generally
//               true only when has_components() is true.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3608  
41 0 0 6 40 3610 0 0 335 ////////////////////////////////////////////////////////////////////
//     Function: TransformState::has_identity_scale
//       Access: Published
//  Description: Returns true if the scale is uniform 1.0, or false if
//               the scale has some real value.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3608  
42 0 0 6 41 3610 0 0 468 ////////////////////////////////////////////////////////////////////
//     Function: TransformState::has_uniform_scale
//       Access: Published
//  Description: Returns true if the scale is uniform across all three
//               axes (and therefore can be expressed as a single
//               number), or false if the transform has a different
//               scale in different dimensions.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3608  
43 0 0 6 42 3610 0 0 399 ////////////////////////////////////////////////////////////////////
//     Function: TransformState::has_shear
//       Access: Published
//  Description: Returns true if the transform's shear component
//               can be extracted out separately.  This is generally
//               true only when has_components() is true.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3608  
44 0 0 6 43 3610 0 0 374 ////////////////////////////////////////////////////////////////////
//     Function: TransformState::has_nonzero_shear
//       Access: Published
//  Description: Returns true if the shear component is non-zero,
//               false if it is zero or if the matrix cannot be
//               decomposed.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3608  
45 0 0 6 44 3610 0 0 377 ////////////////////////////////////////////////////////////////////
//     Function: TransformState::has_mat
//       Access: Published
//  Description: Returns true if the transform can be described as a
//               matrix.  This is generally always true, unless
//               is_invalid() is true.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3608  
46 0 0 6 45 3636 0 0 341 ////////////////////////////////////////////////////////////////////
//     Function: TransformState::get_pos
//       Access: Published
//  Description: Returns the pos component of the transform.  It is an
//               error to call this if has_pos() returned false.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3608  
47 0 0 6 46 3614 0 0 396 ////////////////////////////////////////////////////////////////////
//     Function: TransformState::get_hpr
//       Access: Published
//  Description: Returns the rotation component of the transform as a
//               trio of Euler angles.  It is an error to call this if
//               has_components() returned false.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3608  
48 0 0 6 47 3618 0 0 746 ////////////////////////////////////////////////////////////////////
//     Function: TransformState::get_quat
//       Access: Published
//  Description: Returns the rotation component of the transform as a
//               quaternion.  The return value will be normalized if a
//               normalized quaternion was given to the constructor
//               (or if the quaternion was computed implicitly); it
//               will be non-normalized if a non-normalized quaternion
//               was given to the constructor.  See also
//               get_norm_quat().
//
//               It is an error to call this if has_components()
//               returned false.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3608  
49 0 0 6 48 3618 0 0 524 ////////////////////////////////////////////////////////////////////
//     Function: TransformState::get_norm_quat
//       Access: Published
//  Description: Returns the rotation component of the transform as a
//               quaternion.  Unlike the result of get_quat(), the
//               return value of this method is guaranteed to be
//               normalized.  It is an error to call this if
//               has_components() returned false.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3608  
50 0 0 6 49 3614 0 0 369 ////////////////////////////////////////////////////////////////////
//     Function: TransformState::get_scale
//       Access: Published
//  Description: Returns the scale component of the transform.  It is an
//               error to call this if has_components() returned
//               false.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3608  
51 0 0 6 50 3622 0 0 400 ////////////////////////////////////////////////////////////////////
//     Function: TransformState::get_uniform_scale
//       Access: Published
//  Description: Returns the scale component of the transform, as a
//               single number.  It is an error to call this if
//               has_uniform_scale() returned false.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3608  
52 0 0 6 51 3614 0 0 369 ////////////////////////////////////////////////////////////////////
//     Function: TransformState::get_shear
//       Access: Published
//  Description: Returns the shear component of the transform.  It is
//               an error to call this if has_components() returned
//               false.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3608  
53 0 0 6 52 3624 0 0 271 ////////////////////////////////////////////////////////////////////
//     Function: TransformState::get_mat
//       Access: Published
//  Description: Returns the matrix that describes the transform.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3608  
54 0 0 7 53 3640 0 0 375 ////////////////////////////////////////////////////////////////////
//     Function: TransformState::get_pos2d
//       Access: Published
//  Description: Returns the pos component of the 2-d transform.  It
//               is an error to call this if has_pos() or is_2d()
//               returned false.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3608  
55 0 0 6 54 3622 0 0 456 ////////////////////////////////////////////////////////////////////
//     Function: TransformState::get_rotate2d
//       Access: Published
//  Description: Returns the rotation component of the 2-d transform
//               as an angle in degrees clockwise about the origin.
//               It is an error to call this if has_components() or
//               is_2d() returned false.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3608  
56 0 0 7 55 3640 0 0 386 ////////////////////////////////////////////////////////////////////
//     Function: TransformState::get_scale2d
//       Access: Published
//  Description: Returns the scale component of the 2-d transform.  It
//               is an error to call this if has_components() or
//               is_2d() returned false.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3608  
57 0 0 6 56 3622 0 0 386 ////////////////////////////////////////////////////////////////////
//     Function: TransformState::get_shear2d
//       Access: Published
//  Description: Returns the shear component of the 2-d transform.  It
//               is an error to call this if has_components() or
//               is_2d() returned false.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3608  
58 0 0 7 57 3641 0 0 370 ////////////////////////////////////////////////////////////////////
//     Function: TransformState::get_mat3
//       Access: Published
//  Description: Returns the 3x3 matrix that describes the 2-d
//               transform.  It is an error to call this if is_2d()
//               returned false.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3608  
59 0 0 7 58 3608 0 0 394 ////////////////////////////////////////////////////////////////////
//     Function: TransformState::set_pos
//       Access: Published
//  Description: Returns a new TransformState object that represents the
//               original TransformState with its pos component
//               replaced with the indicated value.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3608  3 pos 1 3614  
60 0 0 7 59 3608 0 0 412 ////////////////////////////////////////////////////////////////////
//     Function: TransformState::set_hpr
//       Access: Published
//  Description: Returns a new TransformState object that represents the
//               original TransformState with its rotation component
//               replaced with the indicated value, if possible.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3608  3 hpr 1 3614  
61 0 0 7 60 3608 0 0 413 ////////////////////////////////////////////////////////////////////
//     Function: TransformState::set_quat
//       Access: Published
//  Description: Returns a new TransformState object that represents the
//               original TransformState with its rotation component
//               replaced with the indicated value, if possible.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3608  4 quat 1 3618  
62 0 0 7 61 3608 0 0 411 ////////////////////////////////////////////////////////////////////
//     Function: TransformState::set_scale
//       Access: Published
//  Description: Returns a new TransformState object that represents the
//               original TransformState with its scale component
//               replaced with the indicated value, if possible.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3608  5 scale 1 3614  
63 0 0 7 62 3608 0 0 411 ////////////////////////////////////////////////////////////////////
//     Function: TransformState::set_shear
//       Access: Published
//  Description: Returns a new TransformState object that represents the
//               original TransformState with its shear component
//               replaced with the indicated value, if possible.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3608  5 shear 1 3614  
64 0 0 7 63 3608 0 0 400 ////////////////////////////////////////////////////////////////////
//     Function: TransformState::set_pos2d
//       Access: Published
//  Description: Returns a new TransformState object that represents the
//               original 2-d TransformState with its pos component
//               replaced with the indicated value.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3608  3 pos 1 3628  
65 0 0 7 64 3608 0 0 421 ////////////////////////////////////////////////////////////////////
//     Function: TransformState::set_rotate2d
//       Access: Published
//  Description: Returns a new TransformState object that represents the
//               original 2-d TransformState with its rotation component
//               replaced with the indicated value, if possible.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3608  6 rotate 1 3622  
66 0 0 7 65 3608 0 0 417 ////////////////////////////////////////////////////////////////////
//     Function: TransformState::set_scale2d
//       Access: Published
//  Description: Returns a new TransformState object that represents the
//               original 2-d TransformState with its scale component
//               replaced with the indicated value, if possible.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3608  5 scale 1 3628  
67 0 0 7 66 3608 0 0 417 ////////////////////////////////////////////////////////////////////
//     Function: TransformState::set_shear2d
//       Access: Published
//  Description: Returns a new TransformState object that represents the
//               original 2-d TransformState with its shear component
//               replaced with the indicated value, if possible.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3608  5 shear 1 3622  
68 0 0 7 67 3608 0 0 723 ////////////////////////////////////////////////////////////////////
//     Function: TransformState::compose
//       Access: Published
//  Description: Returns a new TransformState object that represents the
//               composition of this state with the other state.
//
//               The result of this operation is cached, and will be
//               retained as long as both this TransformState object and
//               the other TransformState object continue to exist.
//               Should one of them destruct, the cached entry will be
//               removed, and its pointer will be allowed to destruct
//               as well.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3608  5 other 1 3608  
69 0 0 7 68 3608 0 0 563 ////////////////////////////////////////////////////////////////////
//     Function: TransformState::invert_compose
//       Access: Published
//  Description: Returns a new TransformState object that represents the
//               composition of this state's inverse with the other
//               state.
//
//               This is similar to compose(), but is particularly
//               useful for computing the relative state of a node as
//               viewed from some other node.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3608  5 other 1 3608  
70 0 0 7 69 3608 0 0 460 ////////////////////////////////////////////////////////////////////
//     Function: TransformState::get_inverse
//       Access: Published
//  Description: Returns the inverse of this transform.  If you are
//               going to immediately compose this result with another
//               TransformState, it is faster to do it in one
//               operation with invert_compose().
//////////////////////////////////////////////////////////////////// 1 4 this 3 3608  
71 0 0 7 70 3608 0 0 619 ////////////////////////////////////////////////////////////////////
//     Function: TransformState::get_unique
//       Access: Published
//  Description: Returns the pointer to the unique TransformState in
//               the cache that is equivalent to this one.  This may
//               be the same pointer as this object, or it may be a
//               different pointer; but it will be an equivalent
//               object, and it will be a shared pointer.  This may be
//               called from time to time to improve cache benefits.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3608  
72 0 0 6 71 3611 0 0 560 ////////////////////////////////////////////////////////////////////
//     Function: TransformState::get_geom_rendering
//       Access: Published
//  Description: Returns the union of the Geom::GeomRendering bits
//               that will be required once this TransformState is
//               applied to a geom which includes the indicated
//               geom_rendering bits.  The RenderState's
//               get_geom_rendering() should already have been
//               applied.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3608  14 geom_rendering 1 3611  
73 0 0 4 72 3642 0 0 278 ////////////////////////////////////////////////////////////////////
//     Function: TransformState::cache_ref
//       Access: Published
//  Description: Overrides this method to update PStats appropriately.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3608  
74 0 0 6 73 3610 0 0 280 ////////////////////////////////////////////////////////////////////
//     Function: TransformState::cache_unref
//       Access: Published
//  Description: Overrides this method to update PStats appropriately.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3608  
75 0 0 4 74 3642 0 0 277 ////////////////////////////////////////////////////////////////////
//     Function: TransformState::node_ref
//       Access: Published
//  Description: Overrides this method to update PStats appropriately.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3608  
76 0 0 6 75 3610 0 0 279 ////////////////////////////////////////////////////////////////////
//     Function: TransformState::node_unref
//       Access: Published
//  Description: Overrides this method to update PStats appropriately.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3608  
77 0 0 6 76 3611 0 0 575 ////////////////////////////////////////////////////////////////////
//     Function: TransformState::get_composition_cache_num_entries
//       Access: Published
//  Description: Returns the number of entries in the composition
//               cache for this TransformState.  This is the number of
//               other TransformStates whose composition with this one
//               has been cached.  This number is not useful for any
//               practical reason other than performance analysis.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3608  
78 0 0 6 77 3611 0 0 559 ////////////////////////////////////////////////////////////////////
//     Function: TransformState::get_invert_composition_cache_num_entries
//       Access: Published
//  Description: Returns the number of entries in the
//               invert_composition cache for this TransformState.
//               This is similar to the composition cache, but it
//               records cache entries for the invert_compose()
//               operation.  See get_composition_cache_num_entries().
//////////////////////////////////////////////////////////////////// 1 4 this 3 3608  
79 0 0 6 78 3611 0 0 655 ////////////////////////////////////////////////////////////////////
//     Function: TransformState::get_composition_cache_size
//       Access: Published
//  Description: Returns the number of slots in the composition
//               cache for this TransformState.  You may use this as
//               an upper bound when walking through all of the
//               composition cache results via
//               get_composition_cache_source() or result().
//
//               This has no practical value other than for examining
//               the cache for performance analysis.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3608  
80 0 0 7 79 3608 0 0 608 ////////////////////////////////////////////////////////////////////
//     Function: TransformState::get_composition_cache_source
//       Access: Published
//  Description: Returns the source TransformState of the nth element
//               in the composition cache.  Returns NULL if there
//               doesn't happen to be an entry in the nth element.
//               See get_composition_cache_result().
//
//               This has no practical value other than for examining
//               the cache for performance analysis.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3608  1 n 1 3611  
81 0 0 7 80 3608 0 0 707 ////////////////////////////////////////////////////////////////////
//     Function: TransformState::get_composition_cache_result
//       Access: Published
//  Description: Returns the result TransformState of the nth element
//               in the composition cache.  Returns NULL if there
//               doesn't happen to be an entry in the nth element.
//
//               In general,
//               a->compose(a->get_composition_cache_source(n)) ==
//               a->get_composition_cache_result(n).
//
//               This has no practical value other than for examining
//               the cache for performance analysis.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3608  1 n 1 3611  
82 0 0 6 81 3611 0 0 669 ////////////////////////////////////////////////////////////////////
//     Function: TransformState::get_invert_composition_cache_size
//       Access: Published
//  Description: Returns the number of slots in the composition
//               cache for this TransformState.  You may use this as
//               an upper bound when walking through all of the
//               composition cache results via
//               get_invert_composition_cache_source() or result().
//
//               This has no practical value other than for examining
//               the cache for performance analysis.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3608  
83 0 0 7 82 3608 0 0 630 ////////////////////////////////////////////////////////////////////
//     Function: TransformState::get_invert_composition_cache_source
//       Access: Published
//  Description: Returns the source TransformState of the nth element
//               in the invert composition cache.  Returns NULL if
//               there doesn't happen to be an entry in the nth
//               element.  See get_invert_composition_cache_result().
//
//               This has no practical value other than for examining
//               the cache for performance analysis.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3608  1 n 1 3611  
84 0 0 7 83 3608 0 0 759 ////////////////////////////////////////////////////////////////////
//     Function: TransformState::get_invert_composition_cache_result
//       Access: Published
//  Description: Returns the result TransformState of the nth element
//               in the invert composition cache.  Returns NULL if
//               there doesn't happen to be an entry in the nth
//               element.
//
//               In general,
//               a->invert_compose(a->get_invert_composition_cache_source(n))
//               == a->get_invert_composition_cache_result(n).
//
//               This has no practical value other than for examining
//               the cache for performance analysis.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3608  1 n 1 3611  
85 0 0 6 84 3610 0 0 425 ////////////////////////////////////////////////////////////////////
//     Function: TransformState::validate_composition_cache
//       Access: Published
//  Description: Returns true if the composition cache and invert
//               composition cache for this particular TransformState
//               are self-consistent and valid, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3608  
86 0 0 6 85 3643 0 0 0 1 4 this 3 3608  
87 0 0 6 86 3643 0 0 0 1 4 this 3 3608  
88 0 0 4 87 3642 0 0 221 ////////////////////////////////////////////////////////////////////
//     Function: TransformState::output
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3608  3 out 1 3646  
89 0 0 4 88 3642 0 0 220 ////////////////////////////////////////////////////////////////////
//     Function: TransformState::write
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 3608  3 out 1 3646  12 indent_level 1 3611  
90 0 0 4 89 3642 0 0 481 ////////////////////////////////////////////////////////////////////
//     Function: TransformState::write_composition_cache
//       Access: Published
//  Description: Writes a brief description of the composition cache
//               and invert composition cache to the indicated
//               ostream.  This is not useful except for performance
//               analysis, to examine the cache structure.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3608  3 out 1 3646  12 indent_level 1 3611  
91 0 0 6 90 3611 0 0 405 ////////////////////////////////////////////////////////////////////
//     Function: TransformState::get_num_states
//       Access: Published, Static
//  Description: Returns the total number of unique TransformState
//               objects allocated in the world.  This will go up and
//               down during normal operations.
//////////////////////////////////////////////////////////////////// 0 
92 0 0 6 91 3611 0 0 1009 ////////////////////////////////////////////////////////////////////
//     Function: TransformState::get_num_unused_states
//       Access: Published, Static
//  Description: Returns the total number of TransformState objects that
//               have been allocated but have no references outside of
//               the internal TransformState cache.
//
//               A nonzero return value is not necessarily indicative
//               of leaked references; it is normal for two
//               TransformState objects, both of which have references
//               held outside the cache, to have the result of their
//               composition stored within the cache.  This result
//               will be retained within the cache until one of the
//               base TransformStates is released.
//
//               Use list_cycles() to get an idea of the number of
//               actual "leaked" TransformState objects.
//////////////////////////////////////////////////////////////////// 0 
93 0 0 6 92 3611 0 0 1021 ////////////////////////////////////////////////////////////////////
//     Function: TransformState::clear_cache
//       Access: Published, Static
//  Description: Empties the cache of composed TransformStates.  This
//               makes every TransformState forget what results when
//               it is composed with other TransformStates.
//
//               This will eliminate any TransformState objects that
//               have been allocated but have no references outside of
//               the internal TransformState map.  It will not
//               eliminate TransformState objects that are still in
//               use.
//
//               Nowadays, this method should not be necessary, as
//               reference-count cycles in the composition cache
//               should be automatically detected and broken.
//
//               The return value is the number of TransformStates
//               freed by this operation.
//////////////////////////////////////////////////////////////////// 0 
94 0 0 6 93 3611 0 0 601 ////////////////////////////////////////////////////////////////////
//     Function: TransformState::garbage_collect
//       Access: Published, Static
//  Description: Performs a garbage-collection cycle.  This must be
//               called periodically if garbage-collect-states is true
//               to ensure that TransformStates get cleaned up
//               appropriately.  It does no harm to call it even if
//               this variable is not true, but there is probably no
//               advantage in that case.
//////////////////////////////////////////////////////////////////// 0 
95 0 0 4 94 3642 0 0 951 ////////////////////////////////////////////////////////////////////
//     Function: TransformState::list_cycles
//       Access: Published, Static
//  Description: Detects all of the reference-count cycles in the
//               cache and reports them to standard output.
//
//               These cycles may be inadvertently created when state
//               compositions cycle back to a starting point.
//               Nowadays, these cycles should be automatically
//               detected and broken, so this method should never list
//               any cycles unless there is a bug in that detection
//               logic.
//
//               The cycles listed here are not leaks in the strictest
//               sense of the word, since they can be reclaimed by a
//               call to clear_cache(); but they will not be reclaimed
//               automatically.
//////////////////////////////////////////////////////////////////// 1 3 out 1 3646  
96 0 0 4 95 3642 0 0 424 ////////////////////////////////////////////////////////////////////
//     Function: TransformState::list_states
//       Access: Published, Static
//  Description: Lists all of the TransformStates in the cache to the
//               output stream, one per line.  This can be quite a lot
//               of output if the cache is large, so be prepared.
//////////////////////////////////////////////////////////////////// 1 3 out 1 3646  
97 0 0 6 96 3610 0 0 586 ////////////////////////////////////////////////////////////////////
//     Function: TransformState::validate_states
//       Access: Published, Static
//  Description: Ensures that the cache is still stored in sorted
//               order, and that none of the cache elements have been
//               inadvertently deleted.  Returns true if so, false if
//               there is a problem (which implies someone has
//               modified one of the supposedly-const TransformState
//               objects).
//////////////////////////////////////////////////////////////////// 0 
98 0 0 6 97 3643 0 0 0 0 
99 0 0 6 98 3643 0 0 0 0 
100 0 0 7 99 3649 0 0 0 0 
101 0 0 6 101 3611 0 0 350 ////////////////////////////////////////////////////////////////////
//     Function: RenderAttribRegistry::get_slot
//       Access: Published
//  Description: Returns the slot number assigned to the indicated
//               TypeHandle, or 0 if no slot number has been assigned.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3650  11 type_handle 1 3649  
102 0 0 6 102 3611 0 0 709 ////////////////////////////////////////////////////////////////////
//     Function: RenderAttribRegistry::get_max_slots
//       Access: Published
//  Description: Returns the maximum number that any slot number is
//               allowed to grow.  Actually, this number will be one
//               higher than the highest possible slot number.  This
//               puts an upper bound on the number of RenderAttrib
//               slots that may be allocated, and allows other code to
//               define an array of slots.
//
//               This number will not change during the lifetime of
//               the application.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3650  
103 0 0 6 103 3611 0 0 390 ////////////////////////////////////////////////////////////////////
//     Function: RenderAttribRegistry::get_num_slots
//       Access: Published
//  Description: Returns the number of RenderAttrib slots that have
//               been allocated.  This is one more than the highest
//               slot number in use.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3650  
104 0 0 7 104 3649 0 0 281 ////////////////////////////////////////////////////////////////////
//     Function: RenderAttribRegistry::get_slot_type
//       Access: Published
//  Description: Returns the TypeHandle associated with slot n.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3650  4 slot 1 3611  
105 0 0 6 105 3611 0 0 282 ////////////////////////////////////////////////////////////////////
//     Function: RenderAttribRegistry::get_slot_sort
//       Access: Published
//  Description: Returns the sort number associated with slot n.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3650  4 slot 1 3611  
106 0 0 4 106 3642 0 0 282 ////////////////////////////////////////////////////////////////////
//     Function: RenderAttribRegistry::set_slot_sort
//       Access: Published
//  Description: Changes the sort number associated with slot n.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3652  4 slot 1 3611  4 sort 1 3611  
107 0 0 7 107 3654 0 0 444 ////////////////////////////////////////////////////////////////////
//     Function: RenderAttribRegistry::get_slot_default
//       Access: Published
//  Description: Returns the default RenderAttrib object associated
//               with slot n.  This is the attrib that should be
//               applied in the absence of any other attrib of this
//               type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3650  4 slot 1 3611  
108 0 0 6 108 3611 0 0 314 ////////////////////////////////////////////////////////////////////
//     Function: RenderAttribRegistry::get_num_sorted_slots
//       Access: Published
//  Description: Returns the number of entries in the sorted_slots
//               list.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3650  
109 0 0 6 109 3611 0 0 424 ////////////////////////////////////////////////////////////////////
//     Function: RenderAttribRegistry::get_sorted_slot
//       Access: Published
//  Description: Returns the nth slot in sorted order.  By traversing
//               this list, you will retrieve all the slot numbers in
//               order according to their registered sort value.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3650  1 n 1 3611  
110 0 0 6 110 3655 0 0 400 ////////////////////////////////////////////////////////////////////
//     Function: RenderAttribRegistry::get_array_chain
//       Access: Published
//  Description: Returns the DeletedBufferChain object that may be
//               used to allocated appropriately-sized arrays of
//               RenderState::Attribute objects.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3650  
111 0 0 6 111 3652 0 0 243 ////////////////////////////////////////////////////////////////////
//     Function: RenderAttribRegistry::get_global_ptr
//       Access: Published, Static
//  Description:
//////////////////////////////////////////////////////////////////// 0 
112 0 0 7 114 3654 0 0 605 ////////////////////////////////////////////////////////////////////
//     Function: RenderAttrib::compose
//       Access: Published
//  Description: Returns a new RenderAttrib object that represents the
//               composition of this attrib with the other attrib.  In
//               most cases, this is the same as the other attrib; a
//               compose b produces b.  Some kinds of attributes, like
//               a TextureTransform, for instance, might produce a new
//               result: a compose b produces c.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3654  5 other 1 3654  
113 0 0 7 115 3654 0 0 946 ////////////////////////////////////////////////////////////////////
//     Function: RenderAttrib::invert_compose
//       Access: Published
//  Description: Returns a new RenderAttrib object that represents the
//               composition of the inverse of this attrib with the
//               other attrib.  In most cases, this is the same as the
//               other attrib; !a compose b produces b.  Some kinds of
//               attributes, like a TextureTransform, for instance,
//               might produce a new result: !a compose b produces c.
//
//               This is similar to compose() except that the source
//               attrib is inverted first.  This is used to compute
//               the relative attribute for one node as viewed from
//               some other node, which is especially useful for
//               transform-type attributes.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3654  5 other 1 3654  
114 0 0 6 116 3610 0 0 1472 ////////////////////////////////////////////////////////////////////
//     Function: RenderAttrib::lower_attrib_can_override
//       Access: Public, Virtual
//  Description: Intended to be overridden by derived RenderAttrib
//               types to specify how two consecutive RenderAttrib
//               objects of the same type interact.
//
//               This should return false if a RenderAttrib on a
//               higher node will compose into a RenderAttrib on a
//               lower node that has a higher override value, or true
//               if the lower RenderAttrib will completely replace the
//               state.
//
//               The default behavior is false: normally, a
//               RenderAttrib in the graph cannot completely override
//               a RenderAttrib above it, regardless of its override
//               value--instead, the two attribs are composed.  But
//               for some kinds of RenderAttribs, it is useful to
//               allow this kind of override.
//
//               This method only handles the one special case of a
//               lower RenderAttrib with a higher override value.  If
//               the higher RenderAttrib has a higher override value,
//               it always completely overrides.  And if both
//               RenderAttribs have the same override value, they are
//               always composed.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3654  
115 0 0 6 117 3611 0 0 671 ////////////////////////////////////////////////////////////////////
//     Function: RenderAttrib::compare_to
//       Access: Published
//  Description: Provides an arbitrary ordering among all unique
//               RenderAttribs, so we can store the essentially
//               different ones in a big set and throw away the rest.
//
//               This method is not needed outside of the RenderAttrib
//               class because all equivalent RenderAttrib objects are
//               guaranteed to share the same pointer; thus, a pointer
//               comparison is always sufficient.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3654  5 other 1 3654  
116 0 0 6 118 3612 0 0 266 ////////////////////////////////////////////////////////////////////
//     Function: RenderAttrib::get_hash
//       Access: Published
//  Description: Returns a suitable hash value for phash_map.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3654  
117 0 0 7 119 3654 0 0 615 ////////////////////////////////////////////////////////////////////
//     Function: RenderAttrib::get_unique
//       Access: Published
//  Description: Returns the pointer to the unique RenderAttrib in
//               the cache that is equivalent to this one.  This may
//               be the same pointer as this object, or it may be a
//               different pointer; but it will be an equivalent
//               object, and it will be a shared pointer.  This may be
//               called from time to time to improve cache benefits.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3654  
118 0 0 7 120 3654 0 0 1198 ////////////////////////////////////////////////////////////////////
//     Function: RenderAttrib::get_auto_shader_attrib
//       Access: Published
//  Description: Returns the variant of this RenderAttrib that's most
//               relevant for associating with an auto-generated
//               shader.  This should be a new RenderAttrib of the
//               same type as this one, with any superfluous data set
//               to neutral.  Only the parts of the attrib that
//               contribute to the shader should be reflected in the
//               returned attrib.  The idea is to associate the
//               auto-generated shader with the most neutral form of
//               all states, to allow it to be shared across as many
//               RenderState objects as possible.
//
//               If this RenderAttrib is completely irrelevant to the
//               auto-shader, this should return NULL to indicate that
//               the attrib won't be assocaited with the shader at
//               all.  In this case the attrib does not contribute to
//               the shader meaningfully.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3654  5 state 1 3657  
119 0 0 4 121 3642 0 0 228 ////////////////////////////////////////////////////////////////////
//     Function: RenderAttrib::output
//       Access: Published, Virtual
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3654  3 out 1 3646  
120 0 0 4 122 3642 0 0 227 ////////////////////////////////////////////////////////////////////
//     Function: RenderAttrib::write
//       Access: Published, Virtual
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 3654  3 out 1 3646  12 indent_level 1 3611  
121 0 0 6 123 3611 0 0 402 ////////////////////////////////////////////////////////////////////
//     Function: RenderAttrib::get_num_attribs
//       Access: Published, Static
//  Description: Returns the total number of unique RenderAttrib
//               objects allocated in the world.  This will go up and
//               down during normal operations.
//////////////////////////////////////////////////////////////////// 0 
122 0 0 4 124 3642 0 0 421 ////////////////////////////////////////////////////////////////////
//     Function: RenderAttrib::list_attribs
//       Access: Published, Static
//  Description: Lists all of the RenderAttribs in the cache to the
//               output stream, one per line.  This can be quite a lot
//               of output if the cache is large, so be prepared.
//////////////////////////////////////////////////////////////////// 1 3 out 1 3646  
123 0 0 6 125 3611 0 0 412 ////////////////////////////////////////////////////////////////////
//     Function: RenderAttrib::garbage_collect
//       Access: Published, Static
//  Description: Performs a garbage-collection cycle.  This is called
//               automatically from RenderState::garbage_collect();
//               see that method for more information.
//////////////////////////////////////////////////////////////////// 0 
124 0 0 6 126 3610 0 0 480 ////////////////////////////////////////////////////////////////////
//     Function: RenderAttrib::validate_attribs
//       Access: Published, Static
//  Description: Ensures that the cache is still stored in sorted
//               order.  Returns true if so, false if there is a
//               problem (which implies someone has modified one of
//               the supposedly-const RenderAttrib objects).
//////////////////////////////////////////////////////////////////// 0 
125 0 0 6 127 3611 0 0 0 1 4 this 3 3654  
126 0 0 7 130 3649 0 0 0 0 
127 0 0 7 133 3654 0 0 1410 ////////////////////////////////////////////////////////////////////
//     Function: RenderModeAttrib::make
//       Access: Published, Static
//  Description: Constructs a new RenderModeAttrib object that specifies
//               whether to draw polygons in the normal, filled mode,
//               or wireframe mode, or in some other yet-to-be-defined
//               mode.
//
//               The thickness parameter specifies the thickness to be
//               used for wireframe lines, as well as for ordinary
//               linestrip lines; it also specifies the diameter of
//               points.  (Thick lines are presently only supported in
//               OpenGL; but thick points are supported on either
//               platform.)
//
//               If perspective is true, the point thickness
//               represented is actually a width in 3-d units, and the
//               points should scale according to perspective.  When
//               it is false, the point thickness is actually a width
//               in pixels, and points are a uniform screen size
//               regardless of distance from the camera.
//
//               In M_filled_wireframe mode, you should also specify
//               the wireframe_color, indicating the flat color to
//               assign to the overlayed wireframe.
//////////////////////////////////////////////////////////////////// 4 4 mode 1 3483  9 thickness 1 3622  11 perspective 1 3610  15 wireframe_color 1 3659  
128 0 0 7 134 3654 0 0 403 ////////////////////////////////////////////////////////////////////
//     Function: RenderModeAttrib::make_default
//       Access: Published, Static
//  Description: Returns a RenderAttrib that corresponds to whatever
//               the standard default properties for render attributes
//               of this type ought to be.
//////////////////////////////////////////////////////////////////// 0 
129 0 0 6 135 3483 0 0 250 ////////////////////////////////////////////////////////////////////
//     Function: RenderModeAttrib::get_mode
//       Access: Published
//  Description: Returns the render mode.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3664  
130 0 0 6 136 3622 0 0 517 ////////////////////////////////////////////////////////////////////
//     Function: RenderModeAttrib::get_thickness
//       Access: Published
//  Description: Returns the line width or point thickness.  This is
//               only relevant when rendering points or lines, such as
//               when the mode is M_wireframe or M_point (or when
//               rendering actual points or lines primitives in
//               M_polygon mode).
//////////////////////////////////////////////////////////////////// 1 4 this 3 3664  
131 0 0 6 137 3610 0 0 676 ////////////////////////////////////////////////////////////////////
//     Function: RenderModeAttrib::get_perspective
//       Access: Published
//  Description: Returns the perspective flag.  When this is true, the
//               point thickness represented by get_thickness() is
//               actually a width in 3-d units, and the points should
//               scale according to perspective.  When it is false,
//               the default, the point thickness is actually a width
//               in pixels, and points are a uniform size regardless
//               of distance from the camera.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3664  
132 0 0 6 138 3659 0 0 388 ////////////////////////////////////////////////////////////////////
//     Function: RenderModeAttrib::get_wireframe_color
//       Access: Published
//  Description: Returns the color that is used in M_filled_wireframe
//               mode to distinguish the wireframe from the rest of
//               the geometry.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3664  
133 0 0 6 139 3611 0 0 456 ////////////////////////////////////////////////////////////////////
//     Function: RenderModeAttrib::get_geom_rendering
//       Access: Published
//  Description: Returns the union of the Geom::GeomRendering bits
//               that will be required once this RenderModeAttrib is
//               applied to a geom which includes the indicated
//               geom_rendering bits.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3664  14 geom_rendering 1 3611  
134 0 0 6 140 3611 0 0 0 0 
135 0 0 7 141 3649 0 0 0 0 
136 0 0 7 144 3654 0 0 305 ////////////////////////////////////////////////////////////////////
//     Function: TexMatrixAttrib::make
//       Access: Published, Static
//  Description: Constructs a TexMatrixAttrib that applies
//               no stages at all.
//////////////////////////////////////////////////////////////////// 0 
137 0 0 7 144 3654 0 0 386 ////////////////////////////////////////////////////////////////////
//     Function: TexMatrixAttrib::make
//       Access: Published, Static
//  Description: Constructs a TexMatrixAttrib that applies the
//               indicated matrix to the default texture stage.  This
//               interface is deprecated.
//////////////////////////////////////////////////////////////////// 1 3 mat 1 3624  
138 0 0 7 144 3654 0 0 339 ////////////////////////////////////////////////////////////////////
//     Function: TexMatrixAttrib::make
//       Access: Published, Static
//  Description: Constructs a TexMatrixAttrib that applies the
//               indicated transform to the named texture stage.
//////////////////////////////////////////////////////////////////// 2 5 stage 1 3666  9 transform 1 3608  
139 0 0 7 145 3654 0 0 402 ////////////////////////////////////////////////////////////////////
//     Function: TexMatrixAttrib::make_default
//       Access: Published, Static
//  Description: Returns a RenderAttrib that corresponds to whatever
//               the standard default properties for render attributes
//               of this type ought to be.
//////////////////////////////////////////////////////////////////// 0 
140 0 0 7 146 3654 0 0 425 ////////////////////////////////////////////////////////////////////
//     Function: TexMatrixAttrib::add_stage
//       Access: Published, Static
//  Description: Returns a new TexMatrixAttrib just like this one,
//               with the indicated transform for the given stage.  If
//               this stage already exists, its transform is replaced.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3668  5 stage 1 3666  9 transform 1 3608  8 override 1 3611  
141 0 0 7 147 3654 0 0 337 ////////////////////////////////////////////////////////////////////
//     Function: TexMatrixAttrib::remove_stage
//       Access: Published, Static
//  Description: Returns a new TexMatrixAttrib just like this one,
//               with the indicated stage removed.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3668  5 stage 1 3666  
142 0 0 6 148 3610 0 0 329 ////////////////////////////////////////////////////////////////////
//     Function: TexMatrixAttrib::is_empty
//       Access: Published
//  Description: Returns true if no stages are defined in the
//               TexMatrixAttrib, false if at least one is.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3668  
143 0 0 6 149 3610 0 0 442 ////////////////////////////////////////////////////////////////////
//     Function: TexMatrixAttrib::has_stage
//       Access: Published
//  Description: Returns true if there is a transform associated with
//               the indicated stage, or false otherwise (in which
//               case get_transform(stage) will return the identity
//               transform).
//////////////////////////////////////////////////////////////////// 2 4 this 3 3668  5 stage 1 3666  
144 0 0 6 150 3611 0 0 313 ////////////////////////////////////////////////////////////////////
//     Function: TexMatrixAttrib::get_num_stages
//       Access: Published
//  Description: Returns the number of stages that are represented by
//               this attrib.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3668  
145 0 0 7 151 3666 0 0 364 ////////////////////////////////////////////////////////////////////
//     Function: TexMatrixAttrib::get_stage
//       Access: Published
//  Description: Returns the nth stage that is represented by this
//               attrib.  The TextureStages are in no particular
//               order.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3668  1 n 1 3611  
146 0 0 6 152 3624 0 0 317 ////////////////////////////////////////////////////////////////////
//     Function: TexMatrixAttrib::get_mat
//       Access: Published
//  Description: Returns the transformation matrix associated with
//               the default texture stage.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3668  
147 0 0 6 152 3624 0 0 406 ////////////////////////////////////////////////////////////////////
//     Function: TexMatrixAttrib::get_mat
//       Access: Published
//  Description: Returns the transformation matrix associated with
//               the indicated texture stage, or identity matrix if
//               nothing is associated with the indicated stage.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3668  5 stage 1 3666  
148 0 0 7 153 3608 0 0 405 ////////////////////////////////////////////////////////////////////
//     Function: TexMatrixAttrib::get_transform
//       Access: Published
//  Description: Returns the transformation associated with
//               the indicated texture stage, or identity matrix if
//               nothing is associated with the indicated stage.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3668  5 stage 1 3666  
149 0 0 6 154 3611 0 0 309 ////////////////////////////////////////////////////////////////////
//     Function: TexMatrixAttrib::get_override
//       Access: Published
//  Description: Returns the override value associated with the
//               indicated stage.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3668  5 stage 1 3666  
150 0 0 6 155 3611 0 0 454 ////////////////////////////////////////////////////////////////////
//     Function: TexMatrixAttrib::get_geom_rendering
//       Access: Published
//  Description: Returns the union of the Geom::GeomRendering bits
//               that will be required once this TexMatrixAttrib is
//               applied to a geom which includes the indicated
//               geom_rendering bits.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3668  14 geom_rendering 1 3611  
151 0 0 6 156 3611 0 0 0 0 
152 0 0 7 157 3649 0 0 0 0 
153 0 0 6 159 3611 0 0 667 ////////////////////////////////////////////////////////////////////
//     Function: RenderState::compare_to
//       Access: Published
//  Description: Provides an arbitrary ordering among all unique
//               RenderStates, so we can store the essentially
//               different ones in a big set and throw away the rest.
//
//               This method is not needed outside of the RenderState
//               class because all equivalent RenderState objects are
//               guaranteed to share the same pointer; thus, a pointer
//               comparison is always sufficient.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3657  5 other 1 3657  
154 0 0 6 160 3611 0 0 620 ////////////////////////////////////////////////////////////////////
//     Function: RenderState::compare_sort
//       Access: Published
//  Description: Returns -1, 0, or 1 according to the relative sorting
//               of these two RenderStates, with regards to rendering
//               performance, so that "heavier" RenderAttribs (as
//               defined by RenderAttribRegistry::get_slot_sort()) are
//               more likely to be grouped together.  This is not
//               related to the sorting order defined by compare_to.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3657  5 other 1 3657  
155 0 0 6 161 3611 0 0 450 ////////////////////////////////////////////////////////////////////
//     Function: RenderState::compare_mask
//       Access: Published
//  Description: This version of compare_to takes a slot mask that
//               indicates which attributes to include in the
//               comparison.  Unlike compare_to, this method
//               compares the attributes by pointer.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3657  5 other 1 3657  12 compare_mask 1 3670  
156 0 0 6 162 3612 0 0 265 ////////////////////////////////////////////////////////////////////
//     Function: RenderState::get_hash
//       Access: Published
//  Description: Returns a suitable hash value for phash_map.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3657  
157 0 0 6 163 3610 0 0 273 ////////////////////////////////////////////////////////////////////
//     Function: RenderState::is_empty
//       Access: Published
//  Description: Returns true if the state is empty, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3657  
158 0 0 6 164 3610 0 0 371 ////////////////////////////////////////////////////////////////////
//     Function: RenderState::has_cull_callback
//       Access: Published
//  Description: Returns true if any of the RenderAttribs in this
//               state request a cull_callback(), false if none of
//               them do.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3657  
159 0 0 6 165 3610 0 0 443 ////////////////////////////////////////////////////////////////////
//     Function: RenderState::cull_callback
//       Access: Published
//  Description: Calls cull_callback() on each attrib.  If any attrib
//               returns false, interrupts the list and returns false
//               immediately; otherwise, completes the list and
//               returns true.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3657  4 trav 1 3675  4 data 1 3676  
160 0 0 7 166 3657 0 0 276 ////////////////////////////////////////////////////////////////////
//     Function: RenderState::make_empty
//       Access: Published, Static
//  Description: Returns a RenderState with no attributes set.
//////////////////////////////////////////////////////////////////// 0 
161 0 0 7 167 3657 0 0 333 ////////////////////////////////////////////////////////////////////
//     Function: RenderState::make_full_default
//       Access: Published, Static
//  Description: Returns a RenderState with all possible attributes
//               set to their default value.
//////////////////////////////////////////////////////////////////// 0 
162 0 0 7 168 3657 0 0 272 ////////////////////////////////////////////////////////////////////
//     Function: RenderState::make
//       Access: Published, Static
//  Description: Returns a RenderState with four attributes set.
//////////////////////////////////////////////////////////////////// 5 7 attrib1 1 3654  7 attrib2 1 3654  7 attrib3 1 3654  7 attrib4 1 3654  8 override 1 3611  
163 0 0 7 168 3657 0 0 273 ////////////////////////////////////////////////////////////////////
//     Function: RenderState::make
//       Access: Published, Static
//  Description: Returns a RenderState with three attributes set.
//////////////////////////////////////////////////////////////////// 4 7 attrib1 1 3654  7 attrib2 1 3654  7 attrib3 1 3654  8 override 1 3611  
164 0 0 7 168 3657 0 0 271 ////////////////////////////////////////////////////////////////////
//     Function: RenderState::make
//       Access: Published, Static
//  Description: Returns a RenderState with two attributes set.
//////////////////////////////////////////////////////////////////// 3 7 attrib1 1 3654  7 attrib2 1 3654  8 override 1 3611  
165 0 0 7 168 3657 0 0 270 ////////////////////////////////////////////////////////////////////
//     Function: RenderState::make
//       Access: Published, Static
//  Description: Returns a RenderState with one attribute set.
//////////////////////////////////////////////////////////////////// 2 6 attrib 1 3654  8 override 1 3611  
166 0 0 7 169 3657 0 0 711 ////////////////////////////////////////////////////////////////////
//     Function: RenderState::compose
//       Access: Published
//  Description: Returns a new RenderState object that represents the
//               composition of this state with the other state.
//
//               The result of this operation is cached, and will be
//               retained as long as both this RenderState object and
//               the other RenderState object continue to exist.
//               Should one of them destruct, the cached entry will be
//               removed, and its pointer will be allowed to destruct
//               as well.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3657  5 other 1 3657  
167 0 0 7 170 3657 0 0 557 ////////////////////////////////////////////////////////////////////
//     Function: RenderState::invert_compose
//       Access: Published
//  Description: Returns a new RenderState object that represents the
//               composition of this state's inverse with the other
//               state.
//
//               This is similar to compose(), but is particularly
//               useful for computing the relative state of a node as
//               viewed from some other node.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3657  5 other 1 3657  
168 0 0 7 171 3657 0 0 505 ////////////////////////////////////////////////////////////////////
//     Function: RenderState::add_attrib
//       Access: Published
//  Description: Returns a new RenderState object that represents the
//               same as the source state, with the new RenderAttrib
//               added.  If there is already a RenderAttrib with the
//               same type, it is replaced (unless the override is
//               lower).
//////////////////////////////////////////////////////////////////// 3 4 this 3 3657  6 attrib 1 3654  8 override 1 3611  
169 0 0 7 172 3657 0 0 520 ////////////////////////////////////////////////////////////////////
//     Function: RenderState::set_attrib
//       Access: Published
//  Description: Returns a new RenderState object that represents the
//               same as the source state, with the new RenderAttrib
//               added.  If there is already a RenderAttrib with the
//               same type, it is replaced unconditionally.  The
//               override is not changed.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3657  6 attrib 1 3654  
170 0 0 7 172 3657 0 0 538 ////////////////////////////////////////////////////////////////////
//     Function: RenderState::set_attrib
//       Access: Published
//  Description: Returns a new RenderState object that represents the
//               same as the source state, with the new RenderAttrib
//               added.  If there is already a RenderAttrib with the
//               same type, it is replaced unconditionally.  The
//               override is also replaced unconditionally.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3657  6 attrib 1 3654  8 override 1 3611  
171 0 0 7 173 3657 0 0 379 ////////////////////////////////////////////////////////////////////
//     Function: RenderState::remove_attrib
//       Access: Published
//  Description: Returns a new RenderState object that represents the
//               same as the source state, with the indicated
//               RenderAttrib removed.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3657  4 type 1 3649  
172 0 0 7 173 3657 0 0 379 ////////////////////////////////////////////////////////////////////
//     Function: RenderState::remove_attrib
//       Access: Published
//  Description: Returns a new RenderState object that represents the
//               same as the source state, with the indicated
//               RenderAttrib removed.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3657  4 slot 1 3611  
173 0 0 7 174 3657 0 0 543 ////////////////////////////////////////////////////////////////////
//     Function: RenderState::adjust_all_priorities
//       Access: Published
//  Description: Returns a new RenderState object that represents the
//               same as the source state, with all attributes'
//               override values incremented (or decremented, if
//               negative) by the indicated amount.  If the override
//               would drop below zero, it is set to zero.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3657  10 adjustment 1 3611  
174 0 0 6 175 3610 0 0 316 ////////////////////////////////////////////////////////////////////
//     Function: RenderState::has_attrib
//       Access: Published
//  Description: Returns true if an attrib of the indicated type is
//               present, false otherwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3657  4 type 1 3649  
175 0 0 6 175 3610 0 0 316 ////////////////////////////////////////////////////////////////////
//     Function: RenderState::has_attrib
//       Access: Published
//  Description: Returns true if an attrib of the indicated type is
//               present, false otherwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3657  4 slot 1 3611  
176 0 0 7 176 3654 0 0 370 ////////////////////////////////////////////////////////////////////
//     Function: RenderState::get_attrib
//       Access: Published
//  Description: Looks for a RenderAttrib of the indicated type in the
//               state, and returns it if it is found, or NULL if it
//               is not.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3657  4 type 1 3649  
177 0 0 7 176 3654 0 0 367 ////////////////////////////////////////////////////////////////////
//     Function: RenderState::get_attrib
//       Access: Published
//  Description: Returns the RenderAttrib with the indicated slot
//               index, or NULL if there is no such RenderAttrib in
//               the state.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3657  4 slot 1 3611  
178 0 0 7 177 3654 0 0 399 ////////////////////////////////////////////////////////////////////
//     Function: RenderState::get_attrib_def
//       Access: Published
//  Description: Returns the RenderAttrib with the indicated slot
//               index, or the default attrib for that slot if there
//               is no such RenderAttrib in the state.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3657  4 slot 1 3611  
179 0 0 6 178 3611 0 0 385 ////////////////////////////////////////////////////////////////////
//     Function: RenderState::get_override
//       Access: Published
//  Description: Looks for a RenderAttrib of the indicated type in the
//               state, and returns its override value if it is found,
//               or 0 if it is not.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3657  4 type 1 3649  
180 0 0 6 178 3611 0 0 385 ////////////////////////////////////////////////////////////////////
//     Function: RenderState::get_override
//       Access: Published
//  Description: Looks for a RenderAttrib of the indicated type in the
//               state, and returns its override value if it is found,
//               or 0 if it is not.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3657  4 slot 1 3611  
181 0 0 7 179 3657 0 0 613 ////////////////////////////////////////////////////////////////////
//     Function: RenderState::get_unique
//       Access: Published
//  Description: Returns the pointer to the unique RenderState in
//               the cache that is equivalent to this one.  This may
//               be the same pointer as this object, or it may be a
//               different pointer; but it will be an equivalent
//               object, and it will be a shared pointer.  This may be
//               called from time to time to improve cache benefits.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3657  
182 0 0 4 180 3642 0 0 275 ////////////////////////////////////////////////////////////////////
//     Function: RenderState::cache_ref
//       Access: Published
//  Description: Overrides this method to update PStats appropriately.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3657  
183 0 0 6 181 3610 0 0 277 ////////////////////////////////////////////////////////////////////
//     Function: RenderState::cache_unref
//       Access: Published
//  Description: Overrides this method to update PStats appropriately.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3657  
184 0 0 4 182 3642 0 0 274 ////////////////////////////////////////////////////////////////////
//     Function: RenderState::node_ref
//       Access: Published
//  Description: Overrides this method to update PStats appropriately.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3657  
185 0 0 6 183 3610 0 0 276 ////////////////////////////////////////////////////////////////////
//     Function: RenderState::node_unref
//       Access: Published
//  Description: Overrides this method to update PStats appropriately.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3657  
186 0 0 6 184 3611 0 0 566 ////////////////////////////////////////////////////////////////////
//     Function: RenderState::get_composition_cache_num_entries
//       Access: Published
//  Description: Returns the number of entries in the composition
//               cache for this RenderState.  This is the number of
//               other RenderStates whose composition with this one
//               has been cached.  This number is not useful for any
//               practical reason other than performance analysis.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3657  
187 0 0 6 185 3611 0 0 553 ////////////////////////////////////////////////////////////////////
//     Function: RenderState::get_invert_composition_cache_num_entries
//       Access: Published
//  Description: Returns the number of entries in the
//               invert_composition cache for this RenderState.
//               This is similar to the composition cache, but it
//               records cache entries for the invert_compose()
//               operation.  See get_composition_cache_num_entries().
//////////////////////////////////////////////////////////////////// 1 4 this 3 3657  
188 0 0 6 186 3611 0 0 649 ////////////////////////////////////////////////////////////////////
//     Function: RenderState::get_composition_cache_size
//       Access: Published
//  Description: Returns the number of slots in the composition
//               cache for this RenderState.  You may use this as
//               an upper bound when walking through all of the
//               composition cache results via
//               get_composition_cache_source() or result().
//
//               This has no practical value other than for examining
//               the cache for performance analysis.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3657  
189 0 0 7 187 3657 0 0 602 ////////////////////////////////////////////////////////////////////
//     Function: RenderState::get_composition_cache_source
//       Access: Published
//  Description: Returns the source RenderState of the nth element
//               in the composition cache.  Returns NULL if there
//               doesn't happen to be an entry in the nth element.
//               See get_composition_cache_result().
//
//               This has no practical value other than for examining
//               the cache for performance analysis.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3657  1 n 1 3611  
190 0 0 7 188 3657 0 0 701 ////////////////////////////////////////////////////////////////////
//     Function: RenderState::get_composition_cache_result
//       Access: Published
//  Description: Returns the result RenderState of the nth element
//               in the composition cache.  Returns NULL if there
//               doesn't happen to be an entry in the nth element.
//
//               In general,
//               a->compose(a->get_composition_cache_source(n)) ==
//               a->get_composition_cache_result(n).
//
//               This has no practical value other than for examining
//               the cache for performance analysis.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3657  1 n 1 3611  
191 0 0 6 189 3611 0 0 663 ////////////////////////////////////////////////////////////////////
//     Function: RenderState::get_invert_composition_cache_size
//       Access: Published
//  Description: Returns the number of slots in the composition
//               cache for this RenderState.  You may use this as
//               an upper bound when walking through all of the
//               composition cache results via
//               get_invert_composition_cache_source() or result().
//
//               This has no practical value other than for examining
//               the cache for performance analysis.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3657  
192 0 0 7 190 3657 0 0 624 ////////////////////////////////////////////////////////////////////
//     Function: RenderState::get_invert_composition_cache_source
//       Access: Published
//  Description: Returns the source RenderState of the nth element
//               in the invert composition cache.  Returns NULL if
//               there doesn't happen to be an entry in the nth
//               element.  See get_invert_composition_cache_result().
//
//               This has no practical value other than for examining
//               the cache for performance analysis.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3657  1 n 1 3611  
193 0 0 7 191 3657 0 0 753 ////////////////////////////////////////////////////////////////////
//     Function: RenderState::get_invert_composition_cache_result
//       Access: Published
//  Description: Returns the result RenderState of the nth element
//               in the invert composition cache.  Returns NULL if
//               there doesn't happen to be an entry in the nth
//               element.
//
//               In general,
//               a->invert_compose(a->get_invert_composition_cache_source(n))
//               == a->get_invert_composition_cache_result(n).
//
//               This has no practical value other than for examining
//               the cache for performance analysis.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3657  1 n 1 3611  
194 0 0 6 192 3643 0 0 0 1 4 this 3 3657  
195 0 0 6 193 3643 0 0 0 1 4 this 3 3657  
196 0 0 7 194 3657 0 0 831 ////////////////////////////////////////////////////////////////////
//     Function: RenderState::get_auto_shader_state
//       Access: Published
//  Description: Returns the base RenderState that should have the
//               generated_shader stored within it, for generated
//               shader states.  The returned object might be the same
//               as this object, or it might be a different
//               RenderState with certain attributes removed, or set
//               to their default values.
//
//               The point is to avoid needless regeneration of the
//               shader attrib by storing the generated shader on a
//               common RenderState object, with all irrelevant
//               attributes removed.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3657  
197 0 0 4 195 3642 0 0 218 ////////////////////////////////////////////////////////////////////
//     Function: RenderState::output
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3657  3 out 1 3646  
198 0 0 4 196 3642 0 0 217 ////////////////////////////////////////////////////////////////////
//     Function: RenderState::write
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 3657  3 out 1 3646  12 indent_level 1 3611  
199 0 0 6 197 3611 0 0 599 ////////////////////////////////////////////////////////////////////
//     Function: RenderState::get_max_priority
//       Access: Published, Static
//  Description: Returns the maximum priority number (sometimes called
//               override) that may be set on any node.  This may or
//               may not be enforced, but the scene graph code assumes
//               that no priority numbers will be larger than this,
//               and some effects may not work properly if you use a
//               larger number.
//////////////////////////////////////////////////////////////////// 0 
200 0 0 6 198 3611 0 0 399 ////////////////////////////////////////////////////////////////////
//     Function: RenderState::get_num_states
//       Access: Published, Static
//  Description: Returns the total number of unique RenderState
//               objects allocated in the world.  This will go up and
//               down during normal operations.
//////////////////////////////////////////////////////////////////// 0 
201 0 0 6 199 3611 0 0 990 ////////////////////////////////////////////////////////////////////
//     Function: RenderState::get_num_unused_states
//       Access: Published, Static
//  Description: Returns the total number of RenderState objects that
//               have been allocated but have no references outside of
//               the internal RenderState cache.
//
//               A nonzero return value is not necessarily indicative
//               of leaked references; it is normal for two
//               RenderState objects, both of which have references
//               held outside the cache, to have to result of their
//               composition stored within the cache.  This result
//               will be retained within the cache until one of the
//               base RenderStates is released.
//
//               Use list_cycles() to get an idea of the number of
//               actual "leaked" RenderState objects.
//////////////////////////////////////////////////////////////////// 0 
202 0 0 6 200 3611 0 0 997 ////////////////////////////////////////////////////////////////////
//     Function: RenderState::clear_cache
//       Access: Published, Static
//  Description: Empties the cache of composed RenderStates.  This
//               makes every RenderState forget what results when
//               it is composed with other RenderStates.
//
//               This will eliminate any RenderState objects that
//               have been allocated but have no references outside of
//               the internal RenderState map.  It will not
//               eliminate RenderState objects that are still in
//               use.
//
//               Nowadays, this method should not be necessary, as
//               reference-count cycles in the composition cache
//               should be automatically detected and broken.
//
//               The return value is the number of RenderStates
//               freed by this operation.
//////////////////////////////////////////////////////////////////// 0 
203 0 0 4 201 3642 0 0 405 ////////////////////////////////////////////////////////////////////
//     Function: RenderState::clear_munger_cache
//       Access: Published, Static
//  Description: Completely empties the cache of state + gsg ->
//               munger, for all states and all gsg's.  Normally there
//               is no need to empty this cache.
//////////////////////////////////////////////////////////////////// 0 
204 0 0 6 202 3611 0 0 698 ////////////////////////////////////////////////////////////////////
//     Function: RenderState::garbage_collect
//       Access: Published, Static
//  Description: Performs a garbage-collection cycle.  This must be
//               called periodically if garbage-collect-states is true
//               to ensure that RenderStates get cleaned up
//               appropriately.  It does no harm to call it even if
//               this variable is not true, but there is probably no
//               advantage in that case.
//
//               This automatically calls
//               RenderAttrib::garbage_collect() as well.
//////////////////////////////////////////////////////////////////// 0 
205 0 0 4 203 3642 0 0 948 ////////////////////////////////////////////////////////////////////
//     Function: RenderState::list_cycles
//       Access: Published, Static
//  Description: Detects all of the reference-count cycles in the
//               cache and reports them to standard output.
//
//               These cycles may be inadvertently created when state
//               compositions cycle back to a starting point.
//               Nowadays, these cycles should be automatically
//               detected and broken, so this method should never list
//               any cycles unless there is a bug in that detection
//               logic.
//
//               The cycles listed here are not leaks in the strictest
//               sense of the word, since they can be reclaimed by a
//               call to clear_cache(); but they will not be reclaimed
//               automatically.
//////////////////////////////////////////////////////////////////// 1 3 out 1 3646  
206 0 0 4 204 3642 0 0 418 ////////////////////////////////////////////////////////////////////
//     Function: RenderState::list_states
//       Access: Published, Static
//  Description: Lists all of the RenderStates in the cache to the
//               output stream, one per line.  This can be quite a lot
//               of output if the cache is large, so be prepared.
//////////////////////////////////////////////////////////////////// 1 3 out 1 3646  
207 0 0 6 205 3610 0 0 580 ////////////////////////////////////////////////////////////////////
//     Function: RenderState::validate_states
//       Access: Published, Static
//  Description: Ensures that the cache is still stored in sorted
//               order, and that none of the cache elements have been
//               inadvertently deleted.  Returns true if so, false if
//               there is a problem (which implies someone has
//               modified one of the supposedly-const RenderState
//               objects).
//////////////////////////////////////////////////////////////////// 0 
208 0 0 6 206 3643 0 0 0 0 
209 0 0 6 207 3611 0 0 407 ////////////////////////////////////////////////////////////////////
//     Function: RenderState::get_draw_order
//       Access: Published
//  Description: Returns the draw order indicated by the
//               CullBinAttrib, if any, associated by this state (or 0
//               if there is no CullBinAttrib).  See get_bin_index().
//////////////////////////////////////////////////////////////////// 1 4 this 3 3657  
210 0 0 6 208 3611 0 0 520 ////////////////////////////////////////////////////////////////////
//     Function: RenderState::get_bin_index
//       Access: Published
//  Description: Returns the bin index indicated by the CullBinAttrib,
//               if any, associated by this state (or the default bin
//               index if there is no CullBinAttrib).  This function
//               is provided as an optimization for determining this
//               at render time.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3657  
211 0 0 6 209 3611 0 0 446 ////////////////////////////////////////////////////////////////////
//     Function: RenderState::get_geom_rendering
//       Access: Published
//  Description: Returns the union of the Geom::GeomRendering bits
//               that will be required once this RenderState is
//               applied to a geom which includes the indicated
//               geom_rendering bits.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3657  14 geom_rendering 1 3611  
212 0 0 7 210 3649 0 0 0 0 
213 0 0 7 212 3654 0 0 269 ////////////////////////////////////////////////////////////////////
//     Function: AlphaTestAttrib::make
//       Access: Published, Static
//  Description: Constructs a new AlphaTestAttrib object.
//////////////////////////////////////////////////////////////////// 2 4 mode 1 3480  15 reference_alpha 1 3622  
214 0 0 7 213 3654 0 0 402 ////////////////////////////////////////////////////////////////////
//     Function: AlphaTestAttrib::make_default
//       Access: Published, Static
//  Description: Returns a RenderAttrib that corresponds to whatever
//               the standard default properties for render attributes
//               of this type ought to be.
//////////////////////////////////////////////////////////////////// 0 
215 0 0 6 214 3622 0 0 270 ////////////////////////////////////////////////////////////////////
//     Function: AlphaTestAttrib::get_reference_alpha
//       Access: Published
//  Description: Returns the alpha reference value.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3678  
216 0 0 6 215 3480 0 0 254 ////////////////////////////////////////////////////////////////////
//     Function: AlphaTestAttrib::get_mode
//       Access: Published
//  Description: Returns the alpha write mode.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3678  
217 0 0 6 216 3611 0 0 0 0 
218 0 0 7 217 3649 0 0 0 0 
219 0 0 7 221 3654 0 0 1915 ////////////////////////////////////////////////////////////////////
//     Function: AntialiasAttrib::make
//       Access: Published, Static
//  Description: Constructs a new AntialiasAttrib object.
//
//               The mode should be either M_none, M_auto, or a union
//               of any or all of M_point, M_line, M_polygon, and
//               M_multisample.  Also, in addition to the above
//               choices, it may include either of M_better of
//               M_faster to specify a performance/quality tradeoff
//               hint.
//
//               If M_none is specified, no antialiasing is performed.
//
//               If M_multisample is specified, it means to use the
//               special framebuffer multisample bits for
//               antialiasing, if it is available.  If so, the
//               M_point, M_line, and M_polygon modes are ignored.
//               This advanced antialiasing mode is only available on
//               certain graphics hardware.  If it is not available,
//               the M_multisample bit is ignored (and the other modes
//               may be used instead, if specified).
//
//               M_point, M_line, and/or M_polygon specify
//               per-primitive smoothing.  When enabled, M_point and
//               M_line may force transparency on.  M_polygon requires
//               a frame buffer that includes an alpha channel, and it
//               works best if the primitives are sorted
//               front-to-back.
//
//               If M_auto is specified, M_multisample is selected if
//               it is available, otherwise M_polygon is selected,
//               unless drawing lines or points, in which case M_line
//               or M_point is selected (these two generally produce
//               better results than M_multisample)
//////////////////////////////////////////////////////////////////// 1 4 mode 1 3680  
220 0 0 7 222 3654 0 0 402 ////////////////////////////////////////////////////////////////////
//     Function: AntialiasAttrib::make_default
//       Access: Published, Static
//  Description: Returns a RenderAttrib that corresponds to whatever
//               the standard default properties for render attributes
//               of this type ought to be.
//////////////////////////////////////////////////////////////////// 0 
221 0 0 6 223 3680 0 0 262 ////////////////////////////////////////////////////////////////////
//     Function: AntialiasAttrib::get_mode
//       Access: Published
//  Description: Returns the specified antialias mode.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3681  
222 0 0 6 224 3680 0 0 465 ////////////////////////////////////////////////////////////////////
//     Function: AntialiasAttrib::get_mode_type
//       Access: Published
//  Description: Returns the specified antialias mode, with the
//               quality bits masked out.  This therefore indicates
//               only the requested type of antialiasing: M_none,
//               M_auto, or some specific combination.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3681  
223 0 0 6 225 3680 0 0 478 ////////////////////////////////////////////////////////////////////
//     Function: AntialiasAttrib::get_mode_quality
//       Access: Published
//  Description: Returns the specified antialias mode, with the type
//               bits masked out.  This therefore indicates only the
//               requested quality settings: one of M_faster,
//               M_better, M_dont_care, or zero (unspecified).
//////////////////////////////////////////////////////////////////// 1 4 this 3 3681  
224 0 0 6 226 3611 0 0 0 0 
225 0 0 7 227 3649 0 0 0 0 
226 0 0 6 230 3611 0 0 671 ////////////////////////////////////////////////////////////////////
//     Function: RenderEffect::compare_to
//       Access: Published
//  Description: Provides an arbitrary ordering among all unique
//               RenderEffects, so we can store the essentially
//               different ones in a big set and throw away the rest.
//
//               This method is not needed outside of the RenderEffect
//               class because all equivalent RenderEffect objects are
//               guaranteed to share the same pointer; thus, a pointer
//               comparison is always sufficient.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3683  5 other 1 3683  
227 0 0 4 231 3642 0 0 229 ////////////////////////////////////////////////////////////////////
//     Function: RenderEffect::output
//       Access: Published, Virtual
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3683  3 out 1 3646  
228 0 0 4 232 3642 0 0 228 ////////////////////////////////////////////////////////////////////
//     Function: RenderEffect::write
//       Access: Published, Virtual
//  Description: 
//////////////////////////////////////////////////////////////////// 3 4 this 3 3683  3 out 1 3646  12 indent_level 1 3611  
229 0 0 6 233 3611 0 0 402 ////////////////////////////////////////////////////////////////////
//     Function: RenderEffect::get_num_effects
//       Access: Published, Static
//  Description: Returns the total number of unique RenderEffect
//               objects allocated in the world.  This will go up and
//               down during normal operations.
//////////////////////////////////////////////////////////////////// 0 
230 0 0 4 234 3642 0 0 421 ////////////////////////////////////////////////////////////////////
//     Function: RenderEffect::list_effects
//       Access: Published, Static
//  Description: Lists all of the RenderEffects in the cache to the
//               output stream, one per line.  This can be quite a lot
//               of output if the cache is large, so be prepared.
//////////////////////////////////////////////////////////////////// 1 3 out 1 3646  
231 0 0 6 235 3610 0 0 480 ////////////////////////////////////////////////////////////////////
//     Function: RenderEffect::validate_effects
//       Access: Published, Static
//  Description: Ensures that the cache is still stored in sorted
//               order.  Returns true if so, false if there is a
//               problem (which implies someone has modified one of
//               the supposedly-const RenderEffect objects).
//////////////////////////////////////////////////////////////////// 0 
232 0 0 7 236 3649 0 0 0 0 
233 0 0 6 238 3610 0 0 0 2 4 this 3 3685  5 other 1 3685  
234 0 0 6 239 3610 0 0 275 ////////////////////////////////////////////////////////////////////
//     Function: RenderEffects::is_empty
//       Access: Published
//  Description: Returns true if the state is empty, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3685  
235 0 0 6 240 3611 0 0 309 ////////////////////////////////////////////////////////////////////
//     Function: RenderEffects::get_num_effects
//       Access: Published
//  Description: Returns the number of separate effects indicated
//               in the state.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3685  
236 0 0 7 241 3683 0 0 381 ////////////////////////////////////////////////////////////////////
//     Function: RenderEffects::get_effect
//       Access: Published, Virtual
//  Description: Looks for a RenderEffect of the indicated type in the
//               state, and returns it if it is found, or NULL if it
//               is not.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3685  4 type 1 3649  
237 0 0 7 241 3683 0 0 261 ////////////////////////////////////////////////////////////////////
//     Function: RenderEffects::get_effect
//       Access: Published
//  Description: Returns the nth effect in the state.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3685  1 n 1 3611  
238 0 0 6 242 3611 0 0 378 ////////////////////////////////////////////////////////////////////
//     Function: RenderEffects::find_effect
//       Access: Published
//  Description: Searches for an effect with the indicated type in
//               the state, and returns its index if it is found, or
//               -1 if it is not.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3685  4 type 1 3649  
239 0 0 7 243 3685 0 0 277 ////////////////////////////////////////////////////////////////////
//     Function: RenderEffects::make_empty
//       Access: Published, Static
//  Description: Returns a RenderEffects with no effects set.
//////////////////////////////////////////////////////////////////// 0 
240 0 0 7 244 3685 0 0 271 ////////////////////////////////////////////////////////////////////
//     Function: RenderEffects::make
//       Access: Published, Static
//  Description: Returns a RenderEffects with one effect set.
//////////////////////////////////////////////////////////////////// 1 6 effect 1 3683  
241 0 0 7 244 3685 0 0 272 ////////////////////////////////////////////////////////////////////
//     Function: RenderEffects::make
//       Access: Published, Static
//  Description: Returns a RenderEffects with two effects set.
//////////////////////////////////////////////////////////////////// 2 7 effect1 1 3683  7 effect2 1 3683  
242 0 0 7 244 3685 0 0 274 ////////////////////////////////////////////////////////////////////
//     Function: RenderEffects::make
//       Access: Published, Static
//  Description: Returns a RenderEffects with three effects set.
//////////////////////////////////////////////////////////////////// 3 7 effect1 1 3683  7 effect2 1 3683  7 effect3 1 3683  
243 0 0 7 244 3685 0 0 273 ////////////////////////////////////////////////////////////////////
//     Function: RenderEffects::make
//       Access: Published, Static
//  Description: Returns a RenderEffects with four effects set.
//////////////////////////////////////////////////////////////////// 4 7 effect1 1 3683  7 effect2 1 3683  7 effect3 1 3683  7 effect4 1 3683  
244 0 0 7 245 3685 0 0 461 ////////////////////////////////////////////////////////////////////
//     Function: RenderEffects::add_effect
//       Access: Published
//  Description: Returns a new RenderEffects object that represents the
//               same as the source state, with the new RenderEffect
//               added.  If there is already a RenderEffect with the
//               same type, it is replaced.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3685  6 effect 1 3683  
245 0 0 7 246 3685 0 0 383 ////////////////////////////////////////////////////////////////////
//     Function: RenderEffects::remove_effect
//       Access: Published
//  Description: Returns a new RenderEffects object that represents the
//               same as the source state, with the indicated
//               RenderEffect removed.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3685  4 type 1 3649  
246 0 0 4 247 3642 0 0 230 ////////////////////////////////////////////////////////////////////
//     Function: RenderEffects::output
//       Access: Published, Virtual
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3685  3 out 1 3646  
247 0 0 4 248 3642 0 0 229 ////////////////////////////////////////////////////////////////////
//     Function: RenderEffects::write
//       Access: Published, Virtual
//  Description: 
//////////////////////////////////////////////////////////////////// 3 4 this 3 3685  3 out 1 3646  12 indent_level 1 3611  
248 0 0 6 249 3611 0 0 403 ////////////////////////////////////////////////////////////////////
//     Function: RenderEffects::get_num_states
//       Access: Published, Static
//  Description: Returns the total number of unique RenderEffects
//               objects allocated in the world.  This will go up and
//               down during normal operations.
//////////////////////////////////////////////////////////////////// 0 
249 0 0 4 250 3642 0 0 421 ////////////////////////////////////////////////////////////////////
//     Function: RenderEffects::list_states
//       Access: Published, Static
//  Description: Lists all of the RenderEffects in the cache to the
//               output stream, one per line.  This can be quite a lot
//               of output if the cache is large, so be prepared.
//////////////////////////////////////////////////////////////////// 1 3 out 1 3646  
250 0 0 6 251 3610 0 0 481 ////////////////////////////////////////////////////////////////////
//     Function: RenderEffects::validate_states
//       Access: Published, Static
//  Description: Ensures that the cache is still stored in sorted
//               order.  Returns true if so, false if there is a
//               problem (which implies someone has modified one of
//               the supposedly-const RenderEffects objects).
//////////////////////////////////////////////////////////////////// 0 
251 0 0 7 252 3649 0 0 0 0 
252 0 0 7 262 3688 2111 0 221 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 name 1 3687  
253 0 0 7 264 3688 2111 0 828 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::combine_with
//       Access: Public, Virtual
//  Description: Collapses this PandaNode with the other PandaNode, if
//               possible, and returns a pointer to the combined
//               PandaNode, or NULL if the two PandaNodes cannot
//               safely be combined.
//
//               The return value may be this, other, or a new
//               PandaNode altogether.
//
//               This function is called from GraphReducer::flatten(),
//               and need not deal with children; its job is just to
//               decide whether to collapse the two PandaNodes and
//               what the collapsed PandaNode should look like.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3688  5 other 1 3688  
254 0 0 7 265 3688 2111 0 514 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::make_copy
//       Access: Published, Virtual
//  Description: Returns a newly-allocated PandaNode that is a shallow
//               copy of this one.  It will be a different pointer,
//               but its internal data may or may not be shared with
//               that of the original PandaNode.  No children will be
//               copied.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3689  
255 0 0 7 266 3688 2111 0 535 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::copy_subgraph
//       Access: Published
//  Description: Allocates and returns a complete copy of this
//               PandaNode and the entire scene graph rooted at this
//               PandaNode.  Some data may still be shared from the
//               original (e.g. vertex index tables), but nothing that
//               will impede normal use of the PandaNode.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3689  14 current_thread 1 3691  
256 0 0 7 267 3688 2111 0 0 1 4 this 3 3689  
257 0 0 6 268 3643 0 0 0 2 4 this 3 3689  4 memo 1 3643  
258 0 0 6 269 3611 0 0 538 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::get_num_parents
//       Access: Published
//  Description: Returns the number of parent nodes this node has.  If
//               this number is greater than 1, the node has been
//               multiply instanced.  The order of the parent nodes is
//               not meaningful and is not related to the order in
//               which the node was instanced to them.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3689  14 current_thread 1 3691  
259 0 0 7 270 3688 2111 0 474 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::get_parent
//       Access: Published
//  Description: Returns the nth parent node of this node.  See
//               get_num_parents().  Also see get_parents(), if your
//               intention is to iterate through the complete list of
//               parents; get_parents() is preferable in this case.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3689  1 n 1 3611  14 current_thread 1 3691  
260 0 0 6 271 3611 0 0 325 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::find_parent
//       Access: Published
//  Description: Returns the index of the indicated parent node, if it
//               is a parent, or -1 if it is not.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3689  4 node 1 3688  14 current_thread 1 3691  
261 0 0 6 272 3611 0 0 489 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::get_num_children
//       Access: Published
//  Description: Returns the number of child nodes this node has.  The
//               order of the child nodes *is* meaningful and is based
//               on the sort number that was passed to add_child(),
//               and also on the order in which the nodes were added.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3689  14 current_thread 1 3691  
262 0 0 7 273 3688 2111 0 476 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::get_child
//       Access: Published
//  Description: Returns the nth child node of this node.  See
//               get_num_children().  Also see get_children(), if your
//               intention is to iterate through the complete list of
//               children; get_children() is preferable in this case.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3689  1 n 1 3611  14 current_thread 1 3691  
263 0 0 6 274 3611 0 0 395 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::get_child_sort
//       Access: Published
//  Description: Returns the sort index of the nth child node of this
//               node (that is, the number that was passed to
//               add_child()).  See get_num_children().
//////////////////////////////////////////////////////////////////// 3 4 this 3 3689  1 n 1 3611  14 current_thread 1 3691  
264 0 0 6 275 3611 0 0 322 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::find_child
//       Access: Published
//  Description: Returns the index of the indicated child node, if it
//               is a child, or -1 if it is not.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3689  4 node 1 3688  14 current_thread 1 3691  
265 0 0 6 276 3611 0 0 284 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::count_num_descendants
//       Access: Published
//  Description: Returns the number of nodes at and below this level.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3689  
266 0 0 4 277 3642 0 0 567 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::add_child
//       Access: Published
//  Description: Adds a new child to the node.  The child is added in
//               the relative position indicated by sort; if all
//               children have the same sort index, the child is added
//               at the end.
//
//               If the same child is added to a node more than once,
//               the previous instance is first removed.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3688  10 child_node 1 3688  4 sort 1 3611  14 current_thread 1 3691  
267 0 0 6 278 3610 0 0 475 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::remove_child
//       Access: Published
//  Description: Removes the indicated child from the node.  Returns
//               true if the child was removed, false if it was not
//               already a child of the node.  This will also
//               successfully remove the child if it had been stashed.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3688  10 child_node 1 3688  14 current_thread 1 3691  
268 0 0 4 278 3642 0 0 259 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::remove_child
//       Access: Published
//  Description: Removes the nth child from the node.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3688  11 child_index 1 3611  14 current_thread 1 3691  
269 0 0 6 279 3610 0 0 513 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::replace_child
//       Access: Published
//  Description: Searches for the orig_child node in the node's list
//               of children, and replaces it with the new_child
//               instead.  Returns true if the replacement is made, or
//               false if the node is not a child or if there is some
//               other problem.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3688  10 orig_child 1 3688  9 new_child 1 3688  14 current_thread 1 3691  
270 0 0 6 280 3610 0 0 919 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::stash_child
//       Access: Published
//  Description: Stashes the indicated child node.  This removes the
//               child from the list of active children and puts it on
//               a special list of stashed children.  This child node
//               no longer contributes to the bounding volume of the
//               PandaNode, and is not visited in normal traversals.
//               It is invisible and uncollidable.  The child may
//               later be restored by calling unstash_child().
//
//               This function returns true if the child node was
//               successfully stashed, or false if it was not a child
//               of the node in the first place (e.g. it was
//               previously stashed).
//////////////////////////////////////////////////////////////////// 3 4 this 3 3688  10 child_node 1 3688  14 current_thread 1 3691  
271 0 0 4 280 3642 0 0 787 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::stash_child
//       Access: Published
//  Description: Stashes the indicated child node.  This removes the
//               child from the list of active children and puts it on
//               a special list of stashed children.  This child node
//               no longer contributes to the bounding volume of the
//               PandaNode, and is not visited in normal traversals.
//               It is invisible and uncollidable.  The child may
//               later be restored by calling unstash_child().
//
//               This can only be called from the top pipeline stage
//               (i.e. from App).
//////////////////////////////////////////////////////////////////// 3 4 this 3 3688  11 child_index 1 3611  14 current_thread 1 3691  
272 0 0 6 281 3610 0 0 885 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::unstash_child
//       Access: Published
//  Description: Returns the indicated stashed node to normal child
//               status.  This removes the child from the list of
//               stashed children and puts it on the normal list of
//               active children.  This child node once again
//               contributes to the bounding volume of the PandaNode,
//               and will be visited in normal traversals.  It is
//               visible and collidable.
//
//               This function returns true if the child node was
//               successfully stashed, or false if it was not a child
//               of the node in the first place (e.g. it was
//               previously stashed).
//////////////////////////////////////////////////////////////////// 3 4 this 3 3688  10 child_node 1 3688  14 current_thread 1 3691  
273 0 0 4 281 3642 0 0 753 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::unstash_child
//       Access: Published
//  Description: Returns the indicated stashed node to normal child
//               status.  This removes the child from the list of
//               stashed children and puts it on the normal list of
//               active children.  This child node once again
//               contributes to the bounding volume of the PandaNode,
//               and will be visited in normal traversals.  It is
//               visible and collidable.
//
//               This can only be called from the top pipeline stage
//               (i.e. from App).
//////////////////////////////////////////////////////////////////// 3 4 this 3 3688  13 stashed_index 1 3611  14 current_thread 1 3691  
274 0 0 6 282 3611 0 0 416 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::get_num_stashed
//       Access: Published
//  Description: Returns the number of stashed nodes this node has.
//               These are former children of the node that have been
//               moved to the special stashed list via stash_child().
//////////////////////////////////////////////////////////////////// 2 4 this 3 3689  14 current_thread 1 3691  
275 0 0 7 283 3688 2111 0 503 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::get_stashed
//       Access: Published
//  Description: Returns the nth stashed child of this node.  See
//               get_num_stashed().  Also see get_stashed(), if your
//               intention is to iterate through the complete list of
//               stashed children; get_stashed() is preferable in this
//               case.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3689  1 n 1 3611  14 current_thread 1 3691  
276 0 0 6 284 3611 0 0 398 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::get_stashed_sort
//       Access: Published
//  Description: Returns the sort index of the nth stashed node of this
//               node (that is, the number that was passed to
//               add_child()).  See get_num_stashed().
//////////////////////////////////////////////////////////////////// 3 4 this 3 3689  1 n 1 3611  14 current_thread 1 3691  
277 0 0 6 285 3611 0 0 334 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::find_stashed
//       Access: Published
//  Description: Returns the index of the indicated stashed node, if
//               it is a stashed child, or -1 if it is not.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3689  4 node 1 3688  14 current_thread 1 3691  
278 0 0 4 286 3642 0 0 675 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::add_stashed
//       Access: Published
//  Description: Adds a new child to the node, directly as a stashed
//               child.  The child is not added in the normal sense,
//               but will be revealed if unstash_child() is called on
//               it later.
//
//               If the same child is added to a node more than once,
//               the previous instance is first removed.
//
//               This can only be called from the top pipeline stage
//               (i.e. from App).
//////////////////////////////////////////////////////////////////// 4 4 this 3 3688  10 child_node 1 3688  4 sort 1 3611  14 current_thread 1 3691  
279 0 0 4 287 3642 0 0 269 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::remove_stashed
//       Access: Published
//  Description: Removes the nth stashed child from the node.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3688  11 child_index 1 3611  14 current_thread 1 3691  
280 0 0 4 288 3642 0 0 428 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::remove_all_children
//       Access: Published
//  Description: Removes all the children from the node at once,
//               including stashed children.
//
//               This can only be called from the top pipeline stage
//               (i.e. from App).
//////////////////////////////////////////////////////////////////// 2 4 this 3 3688  14 current_thread 1 3691  
281 0 0 4 289 3642 0 0 436 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::steal_children
//       Access: Published
//  Description: Moves all the children from the other node onto this
//               node.
//
//               Any NodePaths to child nodes of the other node are
//               truncated, rather than moved to the new parent.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3688  5 other 1 3688  14 current_thread 1 3691  
282 0 0 4 290 3642 0 0 329 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::copy_children
//       Access: Published
//  Description: Makes another instance of all the children of the
//               other node, copying them to this node.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3688  5 other 1 3688  14 current_thread 1 3691  
283 0 0 4 291 3642 0 0 475 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::set_attrib
//       Access: Published
//  Description: Adds the indicated render attribute to the scene
//               graph on this node.  This attribute will now apply to
//               this node and everything below.  If there was already
//               an attribute of the same type, it is replaced.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3688  6 attrib 1 3654  8 override 1 3611  
284 0 0 7 292 3654 0 0 538 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::get_attrib
//       Access: Published
//  Description: Returns the render attribute of the indicated type,
//               if it is defined on the node, or NULL if it is not.
//               This checks only what is set on this particular node
//               level, and has nothing to do with what render
//               attributes may be inherited from parent nodes.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3689  4 type 1 3649  
285 0 0 7 292 3654 0 0 538 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::get_attrib
//       Access: Published
//  Description: Returns the render attribute of the indicated type,
//               if it is defined on the node, or NULL if it is not.
//               This checks only what is set on this particular node
//               level, and has nothing to do with what render
//               attributes may be inherited from parent nodes.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3689  4 slot 1 3611  
286 0 0 6 293 3610 0 0 368 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::has_attrib
//       Access: Published
//  Description: Returns true if there is a render attribute of the
//               indicated type defined on this node, or false if
//               there is not.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3689  4 type 1 3649  
287 0 0 6 293 3610 0 0 368 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::has_attrib
//       Access: Published
//  Description: Returns true if there is a render attribute of the
//               indicated type defined on this node, or false if
//               there is not.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3689  4 slot 1 3611  
288 0 0 4 294 3642 0 0 451 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::clear_attrib
//       Access: Published
//  Description: Removes the render attribute of the given type from
//               this node.  This node, and the subgraph below, will
//               now inherit the indicated render attribute from the
//               nodes above this one.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3688  4 type 1 3649  
289 0 0 4 294 3642 0 0 451 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::clear_attrib
//       Access: Published
//  Description: Removes the render attribute of the given type from
//               this node.  This node, and the subgraph below, will
//               now inherit the indicated render attribute from the
//               nodes above this one.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3688  4 slot 1 3611  
290 0 0 4 295 3642 0 0 386 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::set_effect
//       Access: Published
//  Description: Adds the indicated render effect to the scene
//               graph on this node.  If there was already an effect
//               of the same type, it is replaced.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3688  6 effect 1 3683  
291 0 0 7 296 3683 0 0 338 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::get_effect
//       Access: Published
//  Description: Returns the render effect of the indicated type,
//               if it is defined on the node, or NULL if it is not.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3689  4 type 1 3649  
292 0 0 6 297 3610 0 0 365 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::has_effect
//       Access: Published
//  Description: Returns true if there is a render effect of the
//               indicated type defined on this node, or false if
//               there is not.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3689  4 type 1 3649  
293 0 0 4 298 3642 0 0 299 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::clear_effect
//       Access: Published
//  Description: Removes the render effect of the given type from
//               this node.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3688  4 type 1 3649  
294 0 0 4 299 3642 0 0 620 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::set_state
//       Access: Published
//  Description: Sets the complete RenderState that will be applied to
//               all nodes at this level and below.  (The actual state
//               that will be applied to lower nodes is based on the
//               composition of RenderStates from above this node as
//               well).  This completely replaces whatever has been
//               set on this node via repeated calls to set_attrib().
//////////////////////////////////////////////////////////////////// 3 4 this 3 3688  5 state 1 3657  14 current_thread 1 3691  
295 0 0 7 300 3657 0 0 533 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::get_state
//       Access: Published
//  Description: Returns the complete RenderState that will be applied
//               to all nodes at this level and below, as set on this
//               node.  This returns only the RenderState set on this
//               particular node, and has nothing to do with state
//               that might be inherited from above.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3689  14 current_thread 1 3691  
296 0 0 4 301 3642 0 0 438 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::clear_state
//       Access: Published
//  Description: Resets this node to leave the render state alone.
//               Nodes at this level and below will once again inherit
//               their render state unchanged from the nodes above
//               this level.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3688  14 current_thread 1 3691  
297 0 0 4 302 3642 0 0 433 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::set_effects
//       Access: Published
//  Description: Sets the complete RenderEffects that will be applied
//               this node.  This completely replaces whatever has
//               been set on this node via repeated calls to
//               set_attrib().
//////////////////////////////////////////////////////////////////// 3 4 this 3 3688  7 effects 1 3685  14 current_thread 1 3691  
298 0 0 7 303 3685 0 0 308 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::get_effects
//       Access: Published
//  Description: Returns the complete RenderEffects that will be
//               applied to this node.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3689  14 current_thread 1 3691  
299 0 0 4 304 3642 0 0 267 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::clear_effects
//       Access: Published
//  Description: Resets this node to have no render effects.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3688  14 current_thread 1 3691  
300 0 0 4 305 3642 0 0 402 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::set_transform
//       Access: Published
//  Description: Sets the transform that will be applied to this node
//               and below.  This defines a new coordinate space at
//               this point in the scene graph and below.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3688  9 transform 1 3608  14 current_thread 1 3691  
301 0 0 7 306 3608 0 0 435 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::get_transform
//       Access: Published
//  Description: Returns the transform that has been set on this
//               particular node.  This is not the net transform from
//               the root, but simply the transform on this particular
//               node.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3689  14 current_thread 1 3691  
302 0 0 4 307 3642 0 0 303 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::clear_transform
//       Access: Published
//  Description: Resets the transform on this node to the identity
//               transform.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3688  14 current_thread 1 3691  
303 0 0 4 308 3642 0 0 436 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::set_prev_transform
//       Access: Published
//  Description: Sets the transform that represents this node's
//               "previous" position, one frame ago, for the purposes
//               of detecting motion for accurate collision
//               calculations.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3688  9 transform 1 3608  14 current_thread 1 3691  
304 0 0 7 309 3608 0 0 365 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::get_prev_transform
//       Access: Published
//  Description: Returns the transform that has been set as this
//               node's "previous" position.  See
//               set_prev_transform().
//////////////////////////////////////////////////////////////////// 2 4 this 3 3689  14 current_thread 1 3691  
305 0 0 4 310 3642 0 0 444 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::reset_prev_transform
//       Access: Published
//  Description: Resets the transform that represents this node's
//               "previous" position to the same as the current
//               transform.  This is not the same thing as clearing it
//               to identity.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3688  14 current_thread 1 3691  
306 0 0 6 311 3610 0 0 533 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::has_dirty_prev_transform
//       Access: Published
//  Description: Returns true if this node has the
//               _dirty_prev_transform flag set, which indicates its
//               _prev_transform is different from its _transform
//               value (in pipeline stage 0).  In this case, the node
//               will be visited by reset_prev_transform().
//////////////////////////////////////////////////////////////////// 1 4 this 3 3689  
307 0 0 4 312 3642 0 0 533 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::reset_all_prev_transform
//       Access: Published, Static
//  Description: Visits all nodes in the world with the
//               _dirty_prev_transform flag--that is, all nodes whose
//               _prev_transform is different from the _transform in
//               pipeline stage 0--and resets the _prev_transform to
//               be the same as _transform.
//////////////////////////////////////////////////////////////////// 1 14 current_thread 1 3691  
308 0 0 4 313 3642 0 0 701 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::set_tag
//       Access: Published
//  Description: Associates a user-defined value with a user-defined
//               key which is stored on the node.  This value has no
//               meaning to Panda; but it is stored indefinitely on
//               the node until it is requested again.
//
//               Each unique key stores a different string value.
//               There is no effective limit on the number of
//               different keys that may be stored or on the length of
//               any one key's value.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3688  3 key 1 3687  5 value 1 3687  14 current_thread 1 3691  
309 0 0 6 314 3687 0 0 434 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::get_tag
//       Access: Published
//  Description: Retrieves the user-defined value that was previously
//               set on this node for the particular key, if any.  If
//               no value has been previously set, returns the empty
//               string.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3689  3 key 1 3687  14 current_thread 1 3691  
310 0 0 6 315 3610 0 0 405 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::has_tag
//       Access: Published
//  Description: Returns true if a value has been defined on this node
//               for the particular key (even if that value is the
//               empty string), or false if no value has been set.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3689  3 key 1 3687  14 current_thread 1 3691  
311 0 0 4 316 3642 0 0 398 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::clear_tag
//       Access: Published
//  Description: Removes the value defined for this key on this
//               particular node.  After a call to clear_tag(),
//               has_tag() will return false for the indicated key.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3688  3 key 1 3687  14 current_thread 1 3691  
312 0 0 6 317 3643 0 0 0 1 4 this 3 3689  
313 0 0 4 317 3642 0 0 504 ////////////////////////////////////////////////////////////////////
//     Function: Filename::get_tag_keys
//       Access: Published
//  Description: Fills the given vector up with the
//               list of tags on this PandaNode.
//
//               It is the user's responsibility to ensure that the
//               keys vector is empty before making this call;
//               otherwise, the new keys will be appended to it.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3689  4 keys 1 3693  
314 0 0 4 318 3642 0 0 0 3 4 this 3 3688  3 key 1 3687  5 value 1 3643  
315 0 0 6 319 3643 0 0 0 2 4 this 3 3689  3 key 1 3687  
316 0 0 6 320 3610 0 0 0 2 4 this 3 3689  3 key 1 3687  
317 0 0 4 321 3642 0 0 0 2 4 this 3 3688  3 key 1 3687  
318 0 0 6 322 3643 0 0 0 1 4 this 3 3689  
319 0 0 4 322 3642 0 0 0 2 4 this 3 3689  4 keys 1 3693  
320 0 0 6 323 3610 0 0 324 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::has_tags
//       Access: Published
//  Description: Returns true if the node has any tags (or any Python
//               tags) at all, false if it has none.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3689  
321 0 0 4 324 3642 0 0 445 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::copy_tags
//       Access: Published
//  Description: Copies all of the tags stored on the other node onto
//               this node.  If a particular tag exists on both nodes,
//               the contents of this node's value is replaced by that
//               of the other.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3688  5 other 1 3688  
322 0 0 4 325 3642 0 0 660 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::list_tags
//       Access: Published
//  Description: Writes a list of all the tag keys assigned to the
//               node to the indicated stream.  Writes one instance of
//               the separator following each key (but does not write
//               a terminal separator).  The value associated with
//               each key is not written.
//
//               This is mainly for the benefit of the realtime user,
//               to see the list of all of the associated tag keys.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3689  3 out 1 3646  9 separator 1 3687  
323 0 0 6 326 3611 0 0 643 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::compare_tags
//       Access: Published
//  Description: Returns a number less than 0, 0, or greater than 0,
//               to indicate the similarity of tags between this node
//               and the other one.  If this returns 0, the tags are
//               identical.  If it returns other than 0, then the tags
//               are different; and the nodes may be sorted into a
//               consistent (but arbitrary) ordering based on this
//               number.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3689  5 other 1 3689  
324 0 0 4 327 3642 0 0 542 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::copy_all_properties
//       Access: Published
//  Description: Copies the TransformState, RenderState,
//               RenderEffects, tags, Python tags, and the show/hide
//               state from the other node onto this one.  Typically
//               this is used to prepare a node to replace another
//               node in the scene graph (also see replace_node()).
//////////////////////////////////////////////////////////////////// 2 4 this 3 3688  5 other 1 3688  
325 0 0 4 328 3642 0 0 974 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::replace_node
//       Access: Published
//  Description: Inserts this node into the scene graph in place of
//               the other one, and removes the other node.  All scene
//               graph attributes (TransformState, RenderState, etc.)
//               are copied to this node.
//
//               All children are moved to this node, and removed from
//               the old node.  The new node is left in the same place
//               in the old node's parent's list of children.
//
//               Even NodePaths that reference the old node are
//               updated in-place to reference the new node instead.
//
//               This method is intended to be used to replace a node
//               of a given type in the scene graph with a node of a
//               different type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3688  5 other 1 3688  
326 0 0 4 330 3642 0 0 1028 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::set_unexpected_change
//       Access: Published
//  Description: Sets one or more of the PandaNode::UnexpectedChange
//               bits on, indicating that the corresponding property
//               should not change again on this node.  Once one of
//               these bits has been set, if the property changes, an
//               assertion failure will be raised, which is designed
//               to assist the developer in identifying the
//               troublesome code that modified the property
//               unexpectedly.
//
//               The input parameter is the union of bits that are to
//               be set.  To clear these bits later, use
//               clear_unexpected_change().
//
//               Since this is a developer debugging tool only, this
//               function does nothing in a production (NDEBUG) build.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3688  5 flags 1 3696  
327 0 0 6 331 3696 0 0 751 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::get_unexpected_change
//       Access: Published
//  Description: Returns nonzero if any of the bits in the input
//               parameter are set on this node, or zero if none of
//               them are set.  More specifically, this returns the
//               particular set of bits (masked by the input
//               parameter) that have been set on this node.  See
//               set_unexpected_change().
//
//               Since this is a developer debugging tool only, this
//               function always returns zero in a production (NDEBUG)
//               build.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3689  5 flags 1 3696  
328 0 0 4 332 3642 0 0 700 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::clear_unexpected_change
//       Access: Published
//  Description: Sets one or more of the PandaNode::UnexpectedChange
//               bits off, indicating that the corresponding property
//               may once again change on this node.  See
//               set_unexpected_change().
//
//               The input parameter is the union of bits that are to
//               be cleared.
//
//               Since this is a developer debugging tool only, this
//               function does nothing in a production (NDEBUG) build.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3688  5 flags 1 3696  
329 0 0 7 333 3698 0 0 457 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::get_overall_bit
//       Access: Published, Static
//  Description: Returns the special bit that, when specifically
//               cleared in the node's DrawMask, indicates that the
//               node is hidden to all cameras, regardless of the
//               remaining DrawMask bits.
//////////////////////////////////////////////////////////////////// 0 
330 0 0 7 334 3698 0 0 323 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::get_all_camera_mask
//       Access: Published, Static
//  Description: Returns a DrawMask that is appropriate for rendering
//               to all cameras.
//////////////////////////////////////////////////////////////////// 0 
331 0 0 6 335 3610 0 0 337 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::is_overall_hidden
//       Access: Published, Static
//  Description: Returns true if the node has been hidden to all
//               cameras by clearing its overall bit.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3689  
332 0 0 4 336 3642 0 0 750 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::set_overall_hidden
//       Access: Published
//  Description: Sets or clears the hidden flag.  When the hidden flag
//               is true, the node and all of its children are
//               invisible to all cameras, regardless of the setting
//               of any draw masks.  Setting the hidden flag to false
//               restores the previous visibility as established by
//               the draw masks.
//
//               This actually works by twiddling the reserved
//               _overall_bit in the node's draw mask, which has
//               special meaning.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3688  14 overall_hidden 1 3610  
333 0 0 4 337 3642 0 0 1941 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::adjust_draw_mask
//       Access: Published
//  Description: Adjusts the hide/show bits of this particular node.
//
//               These three parameters can be used to adjust the
//               _draw_control_mask and _draw_show_mask independently,
//               which work together to provide per-camera visibility
//               for the node and its descendents.
//
//               _draw_control_mask indicates the bits in
//               _draw_show_mask that are significant.  Each different
//               bit corresponds to a different camera (and these bits
//               are assigned via Camera::set_camera_mask()).
//
//               Where _draw_control_mask has a 1 bit, a 1 bit in
//               _draw_show_mask indicates the node is visible to that
//               camera, and a 0 bit indicates the node is hidden to
//               that camera.  Where _draw_control_mask is 0, the node
//               is hidden only if a parent node is hidden.
//
//               The meaning of the three parameters is as follows:
//
//               * Wherever show_mask is 1, _draw_show_mask and
//               _draw_control_mask will be set 1.  Thus, show_mask
//               indicates the set of cameras to which the node should
//               be shown.
//
//               * Wherever hide_mask is 1, _draw_show_mask will be
//               set 0 and _draw_control_mask will be set 1.  Thus,
//               hide_mask indicates the set of cameras from which the
//               node should be hidden.
//
//               * Wherever clear_mask is 1, _draw_control_mask will
//               be set 0.  Thus, clear_mask indicates the set of
//               cameras from which the hidden state should be
//               inherited from a parent.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3688  9 show_mask 1 3698  9 hide_mask 1 3698  10 clear_mask 1 3698  
334 0 0 7 338 3698 0 0 347 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::get_draw_control_mask
//       Access: Published
//  Description: Returns the set of bits in draw_show_mask that are
//               considered meaningful.  See adjust_draw_mask().
//////////////////////////////////////////////////////////////////// 1 4 this 3 3689  
335 0 0 7 339 3698 0 0 321 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::get_draw_show_mask
//       Access: Published
//  Description: Returns the hide/show bits of this particular node.
//               See adjust_draw_mask().
//////////////////////////////////////////////////////////////////// 1 4 this 3 3689  
336 0 0 7 340 3698 0 0 681 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::get_net_draw_control_mask
//       Access: Published
//  Description: Returns the set of bits in get_net_draw_show_mask()
//               that have been explicitly set via adjust_draw_mask(),
//               rather than implicitly inherited.
//
//               A 1 bit in any position of this mask indicates that
//               (a) this node has renderable children, and (b) some
//               child of this node has made an explicit hide() or
//               show_through() call for the corresponding bit.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3689  
337 0 0 7 341 3698 0 0 943 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::get_net_draw_show_mask
//       Access: Published
//  Description: Returns the union of all draw_show_mask values--of
//               renderable nodes only--at this level and below.  If
//               any bit in this mask is 0, there is no reason to
//               traverse below this node for a camera with the
//               corresponding camera_mask.
//
//               The bits in this mask that do not correspond to a 1
//               bit in the net_draw_control_mask are meaningless (and
//               will be set to 1).  For bits that *do* correspond to
//               a 1 bit in the net_draw_control_mask, a 1 bit
//               indicates that at least one child should be visible,
//               while a 0 bit indicates that all children are hidden.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3689  
338 0 0 4 342 3642 0 0 880 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::set_into_collide_mask
//       Access: Published
//  Description: Sets the "into" CollideMask.
//
//               This specifies the set of bits that must be shared
//               with a CollisionNode's "from" CollideMask in order
//               for the CollisionNode to detect a collision with this
//               particular node.
//
//               The actual CollideMask that will be set is masked by
//               the return value from get_legal_collide_mask().
//               Thus, the into_collide_mask cannot be set to anything
//               other than nonzero except for those types of nodes
//               that can be collided into, such as CollisionNodes and
//               GeomNodes.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3688  4 mask 1 3699  
339 0 0 7 343 3699 0 0 278 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::get_into_collide_mask
//       Access: Published
//  Description: Returns the "into" collide mask for this node.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3689  
340 0 0 7 344 3699 0 0 618 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::get_legal_collide_mask
//       Access: Published, Virtual
//  Description: Returns the subset of CollideMask bits that may be
//               set for this particular type of PandaNode.  For most
//               nodes, this is 0; it doesn't make sense to set a
//               CollideMask for most kinds of nodes.
//
//               For nodes that can be collided with, such as GeomNode
//               and CollisionNode, this returns all bits on.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3689  
341 0 0 7 345 3699 0 0 346 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::get_net_collide_mask
//       Access: Published
//  Description: Returns the union of all into_collide_mask() values
//               set at CollisionNodes at this level and below.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3689  14 current_thread 1 3691  
342 0 0 7 346 3654 0 0 395 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::get_off_clip_planes
//       Access: Published
//  Description: Returns a ClipPlaneAttrib which represents the union
//               of all of the clip planes that have been turned *off*
//               at this level and below.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3689  14 current_thread 1 3691  
343 0 0 4 347 3642 0 0 818 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::prepare_scene
//       Access: Published
//  Description: Walks through the scene graph beginning at this node,
//               and does whatever initialization is required to
//               render the scene properly with the indicated GSG.  It
//               is not strictly necessary to call this, since the GSG
//               will initialize itself when the scene is rendered,
//               but this may take some of the overhead away from that
//               process.
//
//               In particular, this will ensure that textures and
//               vertex buffers within the scene are loaded into
//               graphics memory.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3688  3 gsg 1 3701  10 node_state 1 3657  
344 0 0 6 348 3610 0 0 431 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::is_scene_root
//       Access: Published
//  Description: Returns true if this particular node is known to be
//               the render root of some active DisplayRegion
//               associated with the global GraphicsEngine, false
//               otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3689  
345 0 0 6 349 3610 0 0 601 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::is_under_scene_root
//       Access: Published
//  Description: Returns true if this particular node is in a live
//               scene graph: that is, it is a child or descendent of
//               a node that is itself a scene root.  If this is true,
//               this node may potentially be traversed by the render
//               traverser.  Stashed nodes don't count for this
//               purpose, but hidden nodes do.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3689  
346 0 0 4 350 3642 0 0 225 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::output
//       Access: Published, Virtual
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3689  3 out 1 3646  
347 0 0 4 351 3642 0 0 224 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::write
//       Access: Published, Virtual
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 3689  3 out 1 3646  12 indent_level 1 3611  
348 0 0 4 352 3642 0 0 295 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::ls
//       Access: Published
//  Description: Lists all the nodes at and below the current path
//               hierarchically.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3689  3 out 1 3646  12 indent_level 1 3611  
349 0 0 4 353 3642 0 0 1042 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::set_bounds_type
//       Access: Published
//  Description: Specifies the desired type of bounding volume that
//               will be created for this node.  This is normally
//               BoundingVolume::BT_default, which means to set the
//               type according to the config variable "bounds-type".
//
//               If this is BT_sphere or BT_box, a BoundingSphere or
//               BoundingBox is explicitly created.  If it is BT_best,
//               the appropriate type to best enclose the node's
//               children is created.
//
//               This affects the bounding volume returned by
//               get_bounds(), which is not exactly the same bounding
//               volume modified by set_bounds(), because a new
//               bounding volume has to be created that includes this
//               node and all of its children.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3688  11 bounds_type 1 3703  
350 0 0 6 354 3703 0 0 303 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::get_bounds_type
//       Access: Published
//  Description: Returns the bounding volume type set with
//               set_bounds_type().
//////////////////////////////////////////////////////////////////// 1 4 this 3 3689  
351 0 0 4 355 3642 0 0 806 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::set_bounds
//       Access: Published
//  Description: Resets the bounding volume so that it is the
//               indicated volume.  When it is explicitly set, the
//               bounding volume will no longer be automatically
//               computed according to the contents of the node
//               itself, for nodes like GeomNodes and TextNodes that
//               contain substance (but the bounding volume will still
//               be automatically expanded to include its children).
//
//               Call clear_bounds() if you would like to return the
//               bounding volume to its default behavior later.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3688  6 volume 1 3705  
352 0 0 4 356 3642 0 0 258 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::set_bound
//       Access: Published
//  Description: Deprecated.  Use set_bounds() instead.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3688  6 volume 1 3705  
353 0 0 4 357 3642 0 0 441 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::clear_bounds
//       Access: Published
//  Description: Reverses the effect of a previous call to
//               set_bounds(), and allows the node's bounding volume
//               to be automatically computed once more based on the
//               contents of the node.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3688  
354 0 0 7 358 3705 0 0 454 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::get_bounds
//       Access: Published
//  Description: Returns the external bounding volume of this node: a
//               bounding volume that contains the user bounding
//               volume, the internal bounding volume, and all of the
//               children's bounding volumes.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3689  14 current_thread 1 3691  
355 0 0 7 358 3705 0 0 947 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::get_bounds
//       Access: Published
//  Description: This flavor of get_bounds() return the external
//               bounding volume, and also fills in seq with the
//               bounding volume's current sequence number.  When this
//               sequence number changes, it indicates that the
//               bounding volume might have changed, e.g. because some
//               nested child's bounding volume has changed.
//
//               Although this might occasionally increment without
//               changing the bounding volume, the bounding volume
//               will never change without incrementing this counter,
//               so as long as this counter remains unchanged you can
//               be confident the bounding volume is also unchanged.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3689  3 seq 1 3707  14 current_thread 1 3691  
356 0 0 6 359 3611 0 0 744 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::get_nested_vertices
//       Access: Published
//  Description: Returns the total number of vertices that will be
//               rendered by this node and all of its descendents.
//
//               This is not necessarily an accurate count of vertices
//               that will actually be rendered, since this will
//               include all vertices of all LOD's, and it will also
//               include hidden nodes.  It may also omit or only
//               approximate certain kinds of dynamic geometry.
//               However, it will not include stashed nodes.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3689  14 current_thread 1 3691  
357 0 0 7 360 3705 0 0 502 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::get_internal_bounds
//       Access: Published
//  Description: Returns the node's internal bounding volume.  This is
//               the bounding volume around the node alone, without
//               including children.  If the user has called
//               set_bounds(), it will be the specified bounding
//               volume.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3689  14 current_thread 1 3691  
358 0 0 6 361 3611 0 0 488 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::get_internal_vertices
//       Access: Published
//  Description: Returns the total number of vertices that will be
//               rendered by this particular node alone, not
//               accounting for its children.
//
//               This may not include all vertices for certain dynamic
//               effects.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3689  14 current_thread 1 3691  
359 0 0 4 362 3642 0 0 926 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::mark_bounds_stale
//       Access: Published
//  Description: Indicates that the bounding volume, or something that
//               influences the bounding volume (or any of the other
//               things stored in CData, like net_collide_mask),
//               may have changed for this node, and that it must be
//               recomputed.
//
//               With no parameters, this means to iterate through all
//               stages including and upstream of the current pipeline
//               stage.
//
//               This method is intended for internal use; usually it
//               is not necessary for a user to call this directly.
//               It will be called automatically by derived classes
//               when appropriate.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3689  14 current_thread 1 3691  
360 0 0 4 363 3642 0 0 822 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::mark_internal_bounds_stale
//       Access: Published
//  Description: Should be called by a derived class to mark the
//               internal bounding volume stale, so that
//               compute_internal_bounds() will be called when the
//               bounding volume is next requested.
//
//               With no parameters, this means to iterate through all
//               stages including and upstream of the current pipeline
//               stage.
//
//               It is normally not necessary to call this method
//               directly; each node should be responsible for calling
//               it when its internals have changed.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3688  14 current_thread 1 3691  
361 0 0 6 364 3610 0 0 454 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::is_bounds_stale
//       Access: Published
//  Description: Returns true if the bounding volume of this node is
//               stale and will be implicitly recomputed at the next
//               call to get_bounds(), or false if it is fresh and
//               need not be recomputed.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3689  
362 0 0 4 365 3642 0 0 995 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::set_final
//       Access: Published
//  Description: Sets the "final" flag on this PandaNode.  If
//               this is true, than no bounding volume need be tested
//               below it; a positive intersection with this node's
//               bounding volume is deemed to be a positive
//               intersection with all geometry inside.
//
//               This is useful to quickly force a larger bounding
//               volume around a node when the GeomNodes themselves
//               are inaccurate for some reason, without forcing a
//               recompute of every nested bounding volume.  It's also
//               helpful when the bounding volume is tricked by some
//               special properties, like billboards, that may move
//               geometry out of its bounding volume otherwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3688  4 flag 1 3610  
363 0 0 6 366 3610 0 0 429 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::is_final
//       Access: Published
//  Description: Returns the current state of the "final" flag.
//               Initially, this flag is off (false), but it may be
//               changed by an explicit call to set_final().  See
//               set_final().
//////////////////////////////////////////////////////////////////// 2 4 this 3 3689  14 current_thread 1 3691  
364 0 0 6 367 3610 0 0 570 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::is_geom_node
//       Access: Published, Virtual
//  Description: A simple downcast check.  Returns true if this kind
//               of node happens to inherit from GeomNode, false
//               otherwise.
//
//               This is provided as a a faster alternative to calling
//               is_of_type(GeomNode::get_class_type()), since this
//               test is so important to rendering.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3689  
365 0 0 6 368 3610 0 0 504 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::is_lod_node
//       Access: Published, Virtual
//  Description: A simple downcast check.  Returns true if this kind
//               of node happens to inherit from LODNode, false
//               otherwise.
//
//               This is provided as a a faster alternative to calling
//               is_of_type(LODNode::get_class_type()).
//////////////////////////////////////////////////////////////////// 1 4 this 3 3689  
366 0 0 6 369 3610 0 0 522 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::is_collision_node
//       Access: Published, Virtual
//  Description: A simple downcast check.  Returns true if this kind
//               of node happens to inherit from CollisionNode, false
//               otherwise.
//
//               This is provided as a a faster alternative to calling
//               is_of_type(CollisionNode::get_class_type()).
//////////////////////////////////////////////////////////////////// 1 4 this 3 3689  
367 0 0 6 370 3709 0 0 379 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::as_light
//       Access: Published, Virtual
//  Description: Cross-casts the node to a Light pointer, if it is one
//               of the four kinds of Light nodes, or returns NULL if
//               it is not.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3688  
368 0 0 6 371 3610 0 0 356 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::is_ambient_light
//       Access: Published, Virtual
//  Description: Returns true if this is an AmbientLight, false if it
//               is not a light, or it is some other kind of light.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3689  
369 0 0 6 373 3611 0 0 617 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::get_fancy_bits
//       Access: Published
//  Description: Returns the union of all of the enum FancyBits values
//               corresponding to the various "fancy" attributes that
//               are set on the node.  If this returns 0, the node has
//               nothing interesting about it.  This is intended to
//               speed traversal by quickly skipping past nodes that
//               don't particularly affect the render state.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3689  14 current_thread 1 3691  
370 0 0 7 374 3688 2111 0 819 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::decode_from_bam_stream
//       Access: Published, Static
//  Description: Reads the string created by a previous call to
//               encode_to_bam_stream(), and extracts and returns the
//               single object on that string.  Returns NULL on error.
//
//               This method is intended to replace
//               decode_raw_from_bam_stream() when you know the stream
//               in question returns an object of type PandaNode,
//               allowing for easier reference count management.  Note
//               that the caller is still responsible for maintaining
//               the reference count on the return value.
//////////////////////////////////////////////////////////////////// 2 4 data 1 3687  6 reader 1 3710  
371 0 0 7 375 3649 0 0 0 0 
372 0 0 7 254 3712 0 0 0 1 4 this 3 3688  
373 0 0 7 255 3688 2111 0 0 1 4 this 3 3712  
374 0 0 6 257 3713 0 0 0 1 4 this 3 3688  
375 0 0 7 258 3688 2111 0 0 1 4 this 3 3713  
376 0 0 6 260 3714 0 0 0 1 4 this 3 3688  
377 0 0 7 261 3688 2111 0 0 1 4 this 3 3714  
378 0 0 7 378 3654 0 0 275 ////////////////////////////////////////////////////////////////////
//     Function: TransparencyAttrib::make
//       Access: Published, Static
//  Description: Constructs a new TransparencyAttrib object.
//////////////////////////////////////////////////////////////////// 1 4 mode 1 3497  
379 0 0 7 379 3654 0 0 405 ////////////////////////////////////////////////////////////////////
//     Function: TransparencyAttrib::make_default
//       Access: Published, Static
//  Description: Returns a RenderAttrib that corresponds to whatever
//               the standard default properties for render attributes
//               of this type ought to be.
//////////////////////////////////////////////////////////////////// 0 
380 0 0 6 380 3497 0 0 258 ////////////////////////////////////////////////////////////////////
//     Function: TransparencyAttrib::get_mode
//       Access: Published
//  Description: Returns the transparency mode.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3715  
381 0 0 6 381 3611 0 0 0 0 
382 0 0 7 382 3649 0 0 0 0 
383 0 0 7 387 3723 0 0 223 ////////////////////////////////////////////////////////////////////
//     Function: ShaderInput::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 name 1 3717  3 mat 1 3720  8 priority 1 3611  
384 0 0 7 387 3723 0 0 223 ////////////////////////////////////////////////////////////////////
//     Function: ShaderInput::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 name 1 3717  3 mat 1 3724  8 priority 1 3611  
385 0 0 7 387 3723 0 0 223 ////////////////////////////////////////////////////////////////////
//     Function: ShaderInput::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 name 1 3717  3 mat 1 3726  8 priority 1 3611  
386 0 0 7 387 3723 0 0 223 ////////////////////////////////////////////////////////////////////
//     Function: ShaderInput::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 name 1 3717  3 mat 1 3729  8 priority 1 3611  
387 0 0 7 387 3723 0 0 223 ////////////////////////////////////////////////////////////////////
//     Function: ShaderInput::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 name 1 3717  3 vec 1 3731  8 priority 1 3611  
388 0 0 7 387 3723 0 0 223 ////////////////////////////////////////////////////////////////////
//     Function: ShaderInput::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 name 1 3717  3 vec 1 3734  8 priority 1 3611  
389 0 0 7 387 3723 0 0 223 ////////////////////////////////////////////////////////////////////
//     Function: ShaderInput::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 name 1 3717  3 vec 1 3736  8 priority 1 3611  
390 0 0 7 387 3723 0 0 223 ////////////////////////////////////////////////////////////////////
//     Function: ShaderInput::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 name 1 3717  3 vec 1 3739  8 priority 1 3611  
391 0 0 7 387 3723 0 0 223 ////////////////////////////////////////////////////////////////////
//     Function: ShaderInput::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 name 1 3717  3 vec 1 3742  8 priority 1 3611  
392 0 0 7 387 3723 0 0 223 ////////////////////////////////////////////////////////////////////
//     Function: ShaderInput::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 name 1 3717  3 vec 1 3744  8 priority 1 3611  
393 0 0 7 387 3723 0 0 223 ////////////////////////////////////////////////////////////////////
//     Function: ShaderInput::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 name 1 3717  3 vec 1 3747  8 priority 1 3611  
394 0 0 7 387 3723 0 0 223 ////////////////////////////////////////////////////////////////////
//     Function: ShaderInput::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 name 1 3717  3 vec 1 3750  8 priority 1 3611  
395 0 0 7 387 3723 0 0 223 ////////////////////////////////////////////////////////////////////
//     Function: ShaderInput::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 name 1 3717  3 vec 1 3752  8 priority 1 3611  
396 0 0 7 387 3723 0 0 223 ////////////////////////////////////////////////////////////////////
//     Function: ShaderInput::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 name 1 3717  2 np 1 3755  8 priority 1 3611  
397 0 0 7 387 3723 0 0 223 ////////////////////////////////////////////////////////////////////
//     Function: ShaderInput::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 name 1 3717  3 ptr 1 3757  8 priority 1 3611  
398 0 0 7 387 3723 0 0 223 ////////////////////////////////////////////////////////////////////
//     Function: ShaderInput::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 name 1 3717  3 ptr 1 3761  8 priority 1 3611  
399 0 0 7 387 3723 0 0 223 ////////////////////////////////////////////////////////////////////
//     Function: ShaderInput::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 name 1 3717  3 ptr 1 3765  8 priority 1 3611  
400 0 0 7 387 3723 0 0 223 ////////////////////////////////////////////////////////////////////
//     Function: ShaderInput::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 name 1 3717  3 ptr 1 3769  8 priority 1 3611  
401 0 0 7 387 3723 0 0 223 ////////////////////////////////////////////////////////////////////
//     Function: ShaderInput::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 name 1 3717  3 ptr 1 3773  8 priority 1 3611  
402 0 0 7 387 3723 0 0 223 ////////////////////////////////////////////////////////////////////
//     Function: ShaderInput::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 name 1 3717  3 ptr 1 3777  8 priority 1 3611  
403 0 0 7 387 3723 0 0 223 ////////////////////////////////////////////////////////////////////
//     Function: ShaderInput::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 name 1 3717  3 ptr 1 3781  8 priority 1 3611  
404 0 0 7 387 3723 0 0 223 ////////////////////////////////////////////////////////////////////
//     Function: ShaderInput::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 name 1 3717  3 ptr 1 3785  8 priority 1 3611  
405 0 0 7 387 3723 0 0 223 ////////////////////////////////////////////////////////////////////
//     Function: ShaderInput::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 name 1 3717  3 ptr 1 3789  8 priority 1 3611  
406 0 0 7 387 3723 0 0 223 ////////////////////////////////////////////////////////////////////
//     Function: ShaderInput::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 name 1 3717  3 ptr 1 3793  8 priority 1 3611  
407 0 0 7 387 3723 0 0 223 ////////////////////////////////////////////////////////////////////
//     Function: ShaderInput::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 name 1 3717  3 ptr 1 3797  8 priority 1 3611  
408 0 0 7 387 3723 0 0 223 ////////////////////////////////////////////////////////////////////
//     Function: ShaderInput::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 name 1 3717  3 ptr 1 3801  8 priority 1 3611  
409 0 0 7 387 3723 0 0 223 ////////////////////////////////////////////////////////////////////
//     Function: ShaderInput::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 name 1 3717  3 ptr 1 3805  8 priority 1 3611  
410 0 0 7 387 3723 0 0 223 ////////////////////////////////////////////////////////////////////
//     Function: ShaderInput::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 name 1 3717  3 ptr 1 3809  8 priority 1 3611  
411 0 0 7 387 3723 0 0 223 ////////////////////////////////////////////////////////////////////
//     Function: ShaderInput::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 name 1 3717  3 ptr 1 3813  8 priority 1 3611  
412 0 0 7 387 3723 0 0 223 ////////////////////////////////////////////////////////////////////
//     Function: ShaderInput::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 name 1 3717  3 ptr 1 3817  8 priority 1 3611  
413 0 0 7 387 3723 0 0 223 ////////////////////////////////////////////////////////////////////
//     Function: ShaderInput::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 name 1 3717  5 param 1 3821  8 priority 1 3611  
414 0 0 7 387 3723 0 0 223 ////////////////////////////////////////////////////////////////////
//     Function: ShaderInput::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 4 4 name 1 3717  3 tex 1 3822  7 sampler 1 3824  8 priority 1 3611  
415 0 0 7 387 3723 0 0 223 ////////////////////////////////////////////////////////////////////
//     Function: ShaderInput::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 7 4 name 1 3717  3 tex 1 3822  4 read 1 3610  5 write 1 3610  1 z 1 3611  1 n 1 3611  8 priority 1 3611  
416 0 0 7 387 3723 0 0 223 ////////////////////////////////////////////////////////////////////
//     Function: ShaderInput::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 name 1 3717  3 tex 1 3822  8 priority 1 3611  
417 0 0 7 387 3723 0 0 223 ////////////////////////////////////////////////////////////////////
//     Function: ShaderInput::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 name 1 3717  8 priority 1 3611  
418 0 0 7 386 3828 0 0 371 ////////////////////////////////////////////////////////////////////
//     Function: ShaderInput::get_blank
//       Access: Public, Static
//  Description: Returns a static ShaderInput object with
//               name NULL, priority zero, type INVALID, and
//               all value-fields cleared.
//////////////////////////////////////////////////////////////////// 0 
419 0 0 7 389 3717 0 0 220 ////////////////////////////////////////////////////////////////////
//     Function: ShaderInput::get_name
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 3828  
420 0 0 6 390 3611 0 0 226 ////////////////////////////////////////////////////////////////////
//     Function: ShaderInput::get_value_type
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 3828  
421 0 0 6 391 3611 0 0 224 ////////////////////////////////////////////////////////////////////
//     Function: ShaderInput::get_priority
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 3828  
422 0 0 6 392 3829 0 0 222 ////////////////////////////////////////////////////////////////////
//     Function: ShaderInput::get_vector
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 3828  
423 0 0 6 393 3832 0 0 219 ////////////////////////////////////////////////////////////////////
//     Function: ShaderInput::get_ptr
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 3828  
424 0 0 6 394 3755 0 0 335 ////////////////////////////////////////////////////////////////////
//     Function: ShaderInput::get_nodepath
//       Access: Published
//  Description: Warning: no error checking is done.  This *will*
//               crash if get_value_type() is not M_nodepath.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3828  
425 0 0 7 395 3822 0 0 223 ////////////////////////////////////////////////////////////////////
//     Function: ShaderInput::get_texture
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 3828  
426 0 0 6 396 3824 0 0 259 ////////////////////////////////////////////////////////////////////
//     Function: ShaderInput::get_sampler
//       Access: Published
//  Description: Warning: no error checking is done.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3828  
427 0 0 7 397 3649 0 0 0 0 
428 0 0 7 399 3836 2241 0 234 ////////////////////////////////////////////////////////////////////
//     Function: TextureStageCollection::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
429 0 0 7 399 3836 2241 0 239 ////////////////////////////////////////////////////////////////////
//     Function: TextureStageCollection::Copy Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 3837  
430 0 0 6 400 3836 0 0 0 2 4 this 3 3836  4 copy 1 3837  
431 0 0 4 402 3642 0 0 283 ////////////////////////////////////////////////////////////////////
//     Function: TextureStageCollection::add_texture_stage
//       Access: Published
//  Description: Adds a new TextureStage to the collection.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3836  18 node_texture_stage 1 3666  
432 0 0 6 403 3610 0 0 428 ////////////////////////////////////////////////////////////////////
//     Function: TextureStageCollection::remove_texture_stage
//       Access: Published
//  Description: Removes the indicated TextureStage from the collection.
//               Returns true if the texture_stage was removed, false if it was
//               not a member of the collection.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3836  18 node_texture_stage 1 3666  
433 0 0 4 404 3642 0 0 516 ////////////////////////////////////////////////////////////////////
//     Function: TextureStageCollection::add_texture_stages_from
//       Access: Published
//  Description: Adds all the TextureStages indicated in the other
//               collection to this texture_stage.  The other texture_stages are simply
//               appended to the end of the texture_stages in this list;
//               duplicates are not automatically removed.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3836  5 other 1 3837  
434 0 0 4 405 3642 0 0 352 ////////////////////////////////////////////////////////////////////
//     Function: TextureStageCollection::remove_texture_stages_from
//       Access: Published
//  Description: Removes from this collection all of the TextureStages
//               listed in the other collection.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3836  5 other 1 3837  
435 0 0 4 406 3642 0 0 494 ////////////////////////////////////////////////////////////////////
//     Function: TextureStageCollection::remove_duplicate_texture_stages
//       Access: Published
//  Description: Removes any duplicate entries of the same TextureStages
//               on this collection.  If a TextureStage appears multiple
//               times, the first appearance is retained; subsequent
//               appearances are removed.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3836  
436 0 0 6 407 3610 0 0 345 ////////////////////////////////////////////////////////////////////
//     Function: TextureStageCollection::has_texture_stage
//       Access: Published
//  Description: Returns true if the indicated TextureStage appears in
//               this collection, false otherwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3837  13 texture_stage 1 3666  
437 0 0 4 408 3642 0 0 275 ////////////////////////////////////////////////////////////////////
//     Function: TextureStageCollection::clear
//       Access: Published
//  Description: Removes all TextureStages from the collection.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3836  
438 0 0 7 409 3666 0 0 395 ////////////////////////////////////////////////////////////////////
//     Function: TextureStageCollection::find_texture_stage
//       Access: Published
//  Description: Returns the texture_stage in the collection with the
//               indicated name, if any, or NULL if no texture_stage has
//               that name.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3837  4 name 1 3687  
439 0 0 6 410 3611 0 0 300 ////////////////////////////////////////////////////////////////////
//     Function: TextureStageCollection::get_num_texture_stages
//       Access: Published
//  Description: Returns the number of TextureStages in the collection.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3837  
440 0 0 7 411 3666 0 0 288 ////////////////////////////////////////////////////////////////////
//     Function: TextureStageCollection::get_texture_stage
//       Access: Published
//  Description: Returns the nth TextureStage in the collection.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3837  5 index 1 3611  
441 0 0 7 412 3666 0 0 408 ////////////////////////////////////////////////////////////////////
//     Function: TextureStageCollection::operator []
//       Access: Published
//  Description: Returns the nth TextureStage in the collection.  This is
//               the same as get_texture_stage(), but it may be a more
//               convenient way to access it.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3837  5 index 1 3611  
442 0 0 6 413 3611 0 0 370 ////////////////////////////////////////////////////////////////////
//     Function: TextureStageCollection::size
//       Access: Published
//  Description: Returns the number of texture stages in the
//               collection.  This is the same thing as
//               get_num_texture_stages().
//////////////////////////////////////////////////////////////////// 1 4 this 3 3837  
443 0 0 6 414 3836 0 0 0 2 4 this 3 3836  5 other 1 3837  
444 0 0 7 415 3836 2241 0 0 2 4 this 3 3837  5 other 1 3837  
445 0 0 4 416 3642 0 0 347 ////////////////////////////////////////////////////////////////////
//     Function: TextureStageCollection::sort
//       Access: Published
//  Description: Sorts the TextureStages in this collection into order
//               by TextureStage::sort(), from lowest to highest.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3836  
446 0 0 4 417 3642 0 0 344 ////////////////////////////////////////////////////////////////////
//     Function: TextureStageCollection::output
//       Access: Published
//  Description: Writes a brief one-line description of the
//               TextureStageCollection to the indicated output stream.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3837  3 out 1 3646  
447 0 0 4 418 3642 0 0 348 ////////////////////////////////////////////////////////////////////
//     Function: TextureStageCollection::write
//       Access: Published
//  Description: Writes a complete multi-line description of the
//               TextureStageCollection to the indicated output stream.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3837  3 out 1 3646  12 indent_level 1 3611  
448 0 0 7 421 3839 2604 0 277 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::Default Constructor
//       Access: Published
//  Description: This constructs an empty NodePath with no nodes.
//////////////////////////////////////////////////////////////////// 0 
449 0 0 7 421 3839 2604 0 225 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::Copy Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 3755  
450 0 0 7 421 3839 2604 0 394 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::Constructor
//       Access: Published
//  Description: Constructs a NodePath with the indicated parent
//               NodePath and child node; the child node must be a
//               stashed or unstashed child of the parent.
//////////////////////////////////////////////////////////////////// 3 6 parent 1 3755  10 child_node 1 3688  14 current_thread 1 3691  
451 0 0 7 421 3839 2604 0 670 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::Constructor
//       Access: Published
//  Description: This constructs a NodePath for the indicated node.
//               If the node does not have any parents, this creates a
//               singleton NodePath; otherwise, it automatically finds
//               the path from the node to the root.  If the node has
//               multiple paths to the root, one path is chosen
//               arbitrarily and a warning message is printed (but see
//               also NodePath::any_path(), below).
//////////////////////////////////////////////////////////////////// 2 4 node 1 3688  14 current_thread 1 3691  
452 0 0 7 421 3839 2604 0 376 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::Constructor
//       Access: Published
//  Description: This constructs a new NodePath with a single
//               node.  An ordinary, unattached PandaNode is created
//               with the indicated name.
//////////////////////////////////////////////////////////////////// 2 13 top_node_name 1 3687  14 current_thread 1 3691  
453 0 0 7 422 3839 2604 0 531 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::any_path named constructor
//       Access: Published, Static
//  Description: Returns a new NodePath that represents any arbitrary
//               path from the root to the indicated node.  This is
//               the same thing that would be returned by
//               NodePath(node), except that no warning is issued if
//               the path is ambiguous.
//////////////////////////////////////////////////////////////////// 2 4 node 1 3688  14 current_thread 1 3691  
454 0 0 6 423 3839 0 0 0 2 4 this 3 3839  4 copy 1 3755  
455 0 0 4 424 3642 0 0 311 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear
//       Access: Published
//  Description: Sets this NodePath to the empty NodePath.  It will
//               no longer point to any node.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3839  
456 0 0 7 425 3839 2604 0 0 1 4 this 3 3755  
457 0 0 6 426 3643 0 0 0 2 4 this 3 3755  4 memo 1 3643  
458 0 0 6 427 3643 0 0 0 1 4 this 3 3755  
459 0 0 6 428 3643 0 0 0 2 4 this 3 3755  7 pickler 1 3643  
460 0 0 7 429 3839 2604 0 318 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::not_found named constructor
//       Access: Published, Static
//  Description: Creates a NodePath with the ET_not_found error type
//               set.
//////////////////////////////////////////////////////////////////// 0 
461 0 0 7 430 3839 2604 0 314 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::removed named constructor
//       Access: Published, Static
//  Description: Creates a NodePath with the ET_removed error type
//               set.
//////////////////////////////////////////////////////////////////// 0 
462 0 0 7 431 3839 2604 0 308 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::fail named constructor
//       Access: Published, Static
//  Description: Creates a NodePath with the ET_fail error type
//               set.
//////////////////////////////////////////////////////////////////// 0 
463 0 0 4 432 3642 0 0 1267 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_max_search_depth
//       Access: Published, Static
//  Description: Certain operations, such as find() or
//               find_all_matches(), require a traversal of the scene
//               graph to search for the target node or nodes.  This
//               traversal does not attempt to detect cycles, so an
//               arbitrary cap is set on the depth of the traversal as
//               a poor man's cycle detection, in the event that a
//               cycle has inadvertently been introduced into the
//               scene graph.
//
//               There may be other reasons you'd want to truncate a
//               search before the bottom of the scene graph has been
//               reached.  In any event, this function sets the limit
//               on the number of levels that a traversal will
//               continue, and hence the maximum length of a path that
//               may be returned by a traversal.
//
//               This is a static method, and so changing this
//               parameter affects all of the NodePaths in the
//               universe.
//////////////////////////////////////////////////////////////////// 1 16 max_search_depth 1 3611  
464 0 0 6 433 3611 0 0 336 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_max_search_depth
//       Access: Published, Static
//  Description: Returns the current setting of the search depth
//               limit.  See set_max_search_depth.
//////////////////////////////////////////////////////////////////// 0 
465 0 0 6 434 3610 0 0 265 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::is_empty
//       Access: Published
//  Description: Returns true if the NodePath contains no nodes.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3755  
466 0 0 6 436 3610 0 0 294 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::is_singleton
//       Access: Published
//  Description: Returns true if the NodePath contains exactly one
//               node.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3755  14 current_thread 1 3691  
467 0 0 6 437 3611 0 0 263 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_num_nodes
//       Access: Published
//  Description: Returns the number of nodes in the path.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3755  14 current_thread 1 3691  
468 0 0 7 438 3688 2111 0 812 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_node
//       Access: Published
//  Description: Returns the nth node of the path, where 0 is the
//               referenced (bottom) node and get_num_nodes() - 1 is
//               the top node.  This requires iterating through the
//               path.
//
//               Also see node(), which is a convenience function to
//               return the same thing as get_node(0) (since the
//               bottom node is the most important node in the
//               NodePath, and is the one most frequently referenced).
//
//               Note that this function returns the same thing as
//               get_ancestor(index).node().
//////////////////////////////////////////////////////////////////// 3 4 this 3 3755  5 index 1 3611  14 current_thread 1 3691  
469 0 0 7 439 3839 2604 0 531 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_ancestor
//       Access: Published
//  Description: Returns the nth ancestor of the path, where 0 is the
//               NodePath itself and get_num_nodes() - 1 is get_top().
//               This requires iterating through the path.
//
//               Also see get_node(), which returns the same thing as
//               a PandaNode pointer, not a NodePath.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3755  5 index 1 3611  14 current_thread 1 3691  
470 0 0 6 440 3503 0 0 337 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_error_type
//       Access: Published
//  Description: If is_empty() is true, this returns a code that
//               represents the reason why the NodePath is empty.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3755  
471 0 0 7 441 3688 2111 0 345 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_top_node
//       Access: Published
//  Description: Returns the top node of the path, or NULL if the path
//               is empty.  This requires iterating through the path.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3755  14 current_thread 1 3691  
472 0 0 7 442 3839 2604 0 340 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_top
//       Access: Published
//  Description: Returns a singleton NodePath that represents the top
//               of the path, or empty NodePath if this path is empty.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3755  14 current_thread 1 3691  
473 0 0 7 443 3688 2111 0 254 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::node
//       Access: Published
//  Description: Returns the referenced node of the path.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3755  
474 0 0 6 444 3611 0 0 986 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_key
//       Access: Published
//  Description: Returns an integer that is guaranteed to be the same
//               for all NodePaths that represent the same node
//               instance, and different for all NodePaths that
//               represent a different node instance.
//
//               The same key will be returned for a particular
//               instance as long as at least one NodePath exists that
//               represents that instance; if all NodePaths for a
//               particular instance destruct and a new one is later
//               created, it may have a different index.  However, a
//               given key will never be reused for a different
//               instance (unless the app has been running long enough
//               that we overflow the integer key value).
//////////////////////////////////////////////////////////////////// 1 4 this 3 3755  
475 0 0 6 445 3612 0 0 866 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::add_hash
//       Access: Published
//  Description: Adds the NodePath into the running hash.  This is
//               intended to be used by lower-level code that computes
//               a hash for each NodePath.  It modifies the hash value
//               passed in by a unique adjustment for each NodePath,
//               and returns the modified hash.
//
//               This is similar to the unique integer returned by
//               get_key(), but it is not guaranteed to remain unique
//               beyond the lifetime of this particular NodePath.
//               Once this NodePath destructs, a different NodePath
//               may be created which shares the same hash value.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3755  4 hash 1 3612  
476 0 0 6 446 3610 0 0 526 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::is_same_graph
//       Access: Published
//  Description: Returns true if the node represented by this NodePath
//               is parented within the same graph as that of the
//               other NodePath.  This is essentially the same thing
//               as asking whether get_top() of both NodePaths is the
//               same (e.g., both "render").
//////////////////////////////////////////////////////////////////// 3 4 this 3 3755  5 other 1 3755  14 current_thread 1 3691  
477 0 0 6 447 3610 0 0 387 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::is_ancestor_of
//       Access: Published
//  Description: Returns true if the node represented by this NodePath
//               is a parent or other ancestor of the other NodePath,
//               or false if it is not.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3755  5 other 1 3755  14 current_thread 1 3691  
478 0 0 7 448 3839 2604 0 468 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_common_ancestor
//       Access: Published
//  Description: Returns the lowest NodePath that both of these two
//               NodePaths have in common: the first ancestor that
//               both of them share.  If the two NodePaths are
//               unrelated, returns NodePath::not_found().
//////////////////////////////////////////////////////////////////// 3 4 this 3 3755  5 other 1 3755  14 current_thread 1 3691  
479 0 0 7 449 3840 3177 0 297 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_children
//       Access: Published
//  Description: Returns the set of all child nodes of the referenced
//               node.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3755  14 current_thread 1 3691  
480 0 0 6 450 3611 0 0 280 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_num_children
//       Access: Published
//  Description: Returns the number of children of the referenced node.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3755  14 current_thread 1 3691  
481 0 0 7 451 3839 2604 0 305 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_child
//       Access: Published
//  Description: Returns a NodePath representing the nth child of the
//               referenced node.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3755  1 n 1 3611  14 current_thread 1 3691  
482 0 0 7 452 3840 3177 0 474 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_stashed_children
//       Access: Published
//  Description: Returns the set of all child nodes of the referenced
//               node that have been stashed.  These children are not
//               normally visible on the node, and do not appear in
//               the list returned by get_children().
//////////////////////////////////////////////////////////////////// 2 4 this 3 3755  14 current_thread 1 3691  
483 0 0 6 453 3611 0 0 283 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::count_num_descendants
//       Access: Published
//  Description: Returns the number of nodes at and below this level.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3755  
484 0 0 6 454 3610 0 0 339 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::has_parent
//       Access: Published
//  Description: Returns true if the referenced node has a parent;
//               i.e. the NodePath chain contains at least two nodes.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3755  14 current_thread 1 3691  
485 0 0 7 455 3839 2604 0 448 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_parent
//       Access: Published
//  Description: Returns the NodePath to the parent of the referenced
//               node: that is, this NodePath, shortened by one node.
//               The parent of a singleton NodePath is defined to be
//               the empty NodePath.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3755  14 current_thread 1 3691  
486 0 0 6 456 3611 0 0 513 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_sort
//       Access: Published
//  Description: Returns the sort value of the referenced node within
//               its parent; that is, the sort number passed on the
//               last reparenting operation for this node.  This will
//               control the position of the node within its parent's
//               list of children.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3755  14 current_thread 1 3691  
487 0 0 7 457 3839 2604 0 435 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::find
//       Access: Published
//  Description: Searches for a node below the referenced node that
//               matches the indicated string.  Returns the shortest
//               match found, if any, or an empty NodePath if no match
//               can be found.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3755  4 path 1 3687  
488 0 0 7 458 3839 2604 0 340 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::find_path_to
//       Access: Published
//  Description: Searches for the indicated node below this node and
//               returns the shortest NodePath that connects them.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3755  4 node 1 3688  
489 0 0 7 459 3840 3177 0 419 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::find_all_matches
//       Access: Published
//  Description: Returns the complete set of all NodePaths that begin
//               with this NodePath and can be extended by
//               path.  The shortest paths will be listed
//               first.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3755  4 path 1 3687  
490 0 0 7 460 3840 3177 0 394 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::find_all_paths_to
//       Access: Published
//  Description: Returns the set of all NodePaths that extend from
//               this NodePath down to the indicated node.  The
//               shortest paths will be listed first.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3755  4 node 1 3688  
491 0 0 4 461 3642 0 0 708 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::reparent_to
//       Access: Published
//  Description: Removes the referenced node of the NodePath from its
//               current parent and attaches it to the referenced node
//               of the indicated NodePath.
//
//               If the destination NodePath is empty, this is the
//               same thing as detach_node().
//
//               If the referenced node is already a child of the
//               indicated NodePath (via some other instance), this
//               operation fails and leaves the NodePath detached.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3839  5 other 1 3755  4 sort 1 3611  14 current_thread 1 3691  
492 0 0 4 462 3642 0 0 441 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::stash_to
//       Access: Published
//  Description: Similar to reparent_to(), but the node is added to
//               its new parent's stashed list, so that the result is
//               equivalent to calling reparent_to() immediately
//               followed by stash().
//////////////////////////////////////////////////////////////////// 4 4 this 3 3839  5 other 1 3755  4 sort 1 3611  14 current_thread 1 3691  
493 0 0 4 463 3642 0 0 514 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::wrt_reparent_to
//       Access: Published
//  Description: This functions identically to reparent_to(), except
//               the transform on this node is also adjusted so that
//               the node remains in the same place in world
//               coordinates, even if it is reparented into a
//               different coordinate system.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3839  5 other 1 3755  4 sort 1 3611  14 current_thread 1 3691  
494 0 0 7 464 3839 2604 0 1455 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::instance_to
//       Access: Published
//  Description: Adds the referenced node of the NodePath as a child
//               of the referenced node of the indicated other
//               NodePath.  Any other parent-child relations of the
//               node are unchanged; in particular, the node is not
//               removed from its existing parent, if any.
//
//               If the node already had an existing parent, this
//               method will create a new instance of the node within
//               the scene graph.
//
//               This does not change the NodePath itself, but does
//               return a new NodePath that reflects the new instance
//               node.
//
//               If the destination NodePath is empty, this creates a
//               new instance which is not yet parented to any node.
//               A new instance of this sort cannot easily be
//               differentiated from other similar instances, but it
//               is nevertheless a different instance and it will
//               return a different get_id() value.
//
//               If the referenced node is already a child of the
//               indicated NodePath, returns that already-existing
//               instance, unstashing it first if necessary.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3755  5 other 1 3755  4 sort 1 3611  14 current_thread 1 3691  
495 0 0 7 465 3839 2604 0 516 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::instance_under_node
//       Access: Published
//  Description: Behaves like instance_to(), but implicitly creates a
//               new node to instance the geometry under, and returns a
//               NodePath to that new node.  This allows the
//               programmer to set a unique state and/or transform on
//               this instance.
//////////////////////////////////////////////////////////////////// 5 4 this 3 3755  5 other 1 3755  4 name 1 3687  4 sort 1 3611  14 current_thread 1 3691  
496 0 0 7 466 3839 2604 0 489 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::copy_to
//       Access: Published
//  Description: Functions like instance_to(), except a deep
//               copy is made of the referenced node and all of its
//               descendents, which is then parented to the indicated
//               node.  A NodePath to the newly created copy is
//               returned.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3755  5 other 1 3755  4 sort 1 3611  14 current_thread 1 3691  
497 0 0 7 467 3839 2604 0 800 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::attach_new_node
//       Access: Published
//  Description: Attaches a new node, with or without existing
//               parents, to the scene graph below the referenced node
//               of this NodePath.  This is the preferred way to add
//               nodes to the graph.
//
//               If the node was already a child of the parent, this
//               returns a NodePath to the existing child.
//
//               This does *not* automatically extend the current
//               NodePath to reflect the attachment; however, a
//               NodePath that does reflect this extension is
//               returned.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3755  4 node 1 3688  4 sort 1 3611  14 current_thread 1 3691  
498 0 0 7 467 3839 2604 0 377 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::attach_new_node
//       Access: Published
//  Description: Creates an ordinary PandaNode and attaches it below
//               the current NodePath, returning a new NodePath that
//               references it.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3755  4 name 1 3687  4 sort 1 3611  14 current_thread 1 3691  
499 0 0 4 468 3642 0 0 1171 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::remove_node
//       Access: Published
//  Description: Disconnects the referenced node from the scene graph.
//               This will also delete the node if there are no other
//               pointers to it.
//
//               Normally, this should be called only when you are
//               really done with the node.  If you want to remove a
//               node from the scene graph but keep it around for
//               later, you should probably use detach_node() instead.
//
//               In practice, the only difference between
//               remove_node() and detach_node() is that remove_node()
//               also resets the NodePath to empty, which will cause
//               the node to be deleted immediately if there are no
//               other references.  On the other hand, detach_node()
//               leaves the NodePath referencing the node, which will
//               keep at least one reference to the node for as long
//               as the NodePath exists.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3839  14 current_thread 1 3691  
500 0 0 4 469 3642 0 0 1153 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::detach_node
//       Access: Published
//  Description: Disconnects the referenced node from its parent, but
//               does not immediately delete it.  The NodePath retains
//               a pointer to the node, and becomes a singleton
//               NodePath.
//
//               This should be called to detach a node from the scene
//               graph, with the option of reattaching it later to the
//               same parent or to a different parent.
//
//               In practice, the only difference between
//               remove_node() and detach_node() is that remove_node()
//               also resets the NodePath to empty, which will cause
//               the node to be deleted immediately if there are no
//               other references.  On the other hand, detach_node()
//               leaves the NodePath referencing the node, which will
//               keep at least one reference to the node for as long
//               as the NodePath exists.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3839  14 current_thread 1 3691  
501 0 0 4 470 3642 0 0 310 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::output
//       Access: Published
//  Description: Writes a sensible description of the NodePath to the
//               indicated output stream.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3755  3 out 1 3646  
502 0 0 4 471 3642 0 0 265 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::ls
//       Access: Published
//  Description: Lists the hierarchy at and below the referenced node.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3755  
503 0 0 4 471 3642 0 0 265 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::ls
//       Access: Published
//  Description: Lists the hierarchy at and below the referenced node.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3755  3 out 1 3646  12 indent_level 1 3611  
504 0 0 4 472 3642 0 0 273 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::reverse_ls
//       Access: Published
//  Description: Lists the hierarchy at and above the referenced node.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3755  
505 0 0 6 472 3611 0 0 273 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::reverse_ls
//       Access: Published
//  Description: Lists the hierarchy at and above the referenced node.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3755  3 out 1 3646  12 indent_level 1 3611  
506 0 0 7 473 3657 0 0 384 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_state
//       Access: Published
//  Description: Returns the state changes that must be made to
//               transition to the render state of this node from the
//               render state of the other node.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3755  5 other 1 3755  14 current_thread 1 3691  
507 0 0 7 473 3657 0 0 270 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_state
//       Access: Published
//  Description: Returns the complete state object set on this node.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3755  14 current_thread 1 3691  
508 0 0 4 474 3642 0 0 433 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_state
//       Access: Published
//  Description: Sets the state object on this node, relative to
//               the other node.  This computes a new state object
//               that will have the indicated value when seen from the
//               other node.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3839  5 other 1 3755  5 state 1 3657  14 current_thread 1 3691  
509 0 0 4 474 3642 0 0 266 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_state
//       Access: Published
//  Description: Changes the complete state object on this node.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3839  5 state 1 3657  14 current_thread 1 3691  
510 0 0 7 475 3657 0 0 272 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_net_state
//       Access: Published
//  Description: Returns the net state on this node from the root.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3755  14 current_thread 1 3691  
511 0 0 4 476 3642 0 0 474 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_attrib
//       Access: Published
//  Description: Adds the indicated render attribute to the scene
//               graph on this node.  This attribute will now apply to
//               this node and everything below.  If there was already
//               an attribute of the same type, it is replaced.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3839  6 attrib 1 3654  8 priority 1 3611  
512 0 0 7 477 3654 0 0 537 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_attrib
//       Access: Published
//  Description: Returns the render attribute of the indicated type,
//               if it is defined on the node, or NULL if it is not.
//               This checks only what is set on this particular node
//               level, and has nothing to do with what render
//               attributes may be inherited from parent nodes.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3755  4 type 1 3649  
513 0 0 6 478 3610 0 0 367 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::has_attrib
//       Access: Published
//  Description: Returns true if there is a render attribute of the
//               indicated type defined on this node, or false if
//               there is not.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3755  4 type 1 3649  
514 0 0 4 479 3642 0 0 450 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_attrib
//       Access: Published
//  Description: Removes the render attribute of the given type from
//               this node.  This node, and the subgraph below, will
//               now inherit the indicated render attribute from the
//               nodes above this one.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3839  4 type 1 3649  
515 0 0 4 480 3642 0 0 385 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_effect
//       Access: Published
//  Description: Adds the indicated render effect to the scene
//               graph on this node.  If there was already an effect
//               of the same type, it is replaced.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3839  6 effect 1 3683  
516 0 0 7 481 3683 0 0 337 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_effect
//       Access: Published
//  Description: Returns the render effect of the indicated type,
//               if it is defined on the node, or NULL if it is not.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3755  4 type 1 3649  
517 0 0 6 482 3610 0 0 364 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::has_effect
//       Access: Published
//  Description: Returns true if there is a render effect of the
//               indicated type defined on this node, or false if
//               there is not.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3755  4 type 1 3649  
518 0 0 4 483 3642 0 0 298 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_effect
//       Access: Published
//  Description: Removes the render effect of the given type from
//               this node.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3839  4 type 1 3649  
519 0 0 4 484 3642 0 0 432 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_effects
//       Access: Published
//  Description: Sets the complete RenderEffects that will be applied
//               this node.  This completely replaces whatever has
//               been set on this node via repeated calls to
//               set_attrib().
//////////////////////////////////////////////////////////////////// 2 4 this 3 3839  7 effects 1 3685  
520 0 0 7 485 3685 0 0 307 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_effects
//       Access: Published
//  Description: Returns the complete RenderEffects that will be
//               applied to this node.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3755  
521 0 0 4 486 3642 0 0 266 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_effects
//       Access: Published
//  Description: Resets this node to have no render effects.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3839  
522 0 0 7 487 3608 0 0 387 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_transform
//       Access: Published
//  Description: Returns the relative transform to this node from the
//               other node; i.e. the transformation of this node
//               as seen from the other node.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3755  5 other 1 3755  14 current_thread 1 3691  
523 0 0 7 487 3608 0 0 278 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_transform
//       Access: Published
//  Description: Returns the complete transform object set on this node.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3755  14 current_thread 1 3691  
524 0 0 4 488 3642 0 0 413 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_transform
//       Access: Published
//  Description: Sets the transform object on this node to identity,
//               relative to the other node.  This effectively places
//               this node at the same position as the other node.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3839  5 other 1 3755  14 current_thread 1 3691  
525 0 0 4 488 3642 0 0 276 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_transform
//       Access: Published
//  Description: Sets the transform object on this node to identity.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3839  14 current_thread 1 3691  
526 0 0 4 489 3642 0 0 445 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_transform
//       Access: Published
//  Description: Sets the transform object on this node, relative to
//               the other node.  This computes a new transform object
//               that will have the indicated value when seen from the
//               other node.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3839  5 other 1 3755  9 transform 1 3608  14 current_thread 1 3691  
527 0 0 4 489 3642 0 0 274 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_transform
//       Access: Published
//  Description: Changes the complete transform object on this node.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3839  9 transform 1 3608  14 current_thread 1 3691  
528 0 0 7 490 3608 0 0 280 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_net_transform
//       Access: Published
//  Description: Returns the net transform on this node from the root.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3755  14 current_thread 1 3691  
529 0 0 7 491 3608 0 0 457 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_prev_transform
//       Access: Published
//  Description: Returns the relative "previous" transform to this
//               node from the other node; i.e. the position of this
//               node in the previous frame, as seen by the other node
//               in the previous frame.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3755  5 other 1 3755  14 current_thread 1 3691  
530 0 0 7 491 3608 0 0 364 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_prev_transform
//       Access: Published
//  Description: Returns the transform that has been set as this
//               node's "previous" position.  See
//               set_prev_transform().
//////////////////////////////////////////////////////////////////// 2 4 this 3 3755  14 current_thread 1 3691  
531 0 0 4 492 3642 0 0 461 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_prev_transform
//       Access: Published
//  Description: Sets the "previous" transform object on this node,
//               relative to the other node.  This computes a new
//               transform object that will have the indicated value
//               when seen from the other node.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3839  5 other 1 3755  9 transform 1 3608  14 current_thread 1 3691  
532 0 0 4 492 3642 0 0 435 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_prev_transform
//       Access: Published
//  Description: Sets the transform that represents this node's
//               "previous" position, one frame ago, for the purposes
//               of detecting motion for accurate collision
//               calculations.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3839  9 transform 1 3608  14 current_thread 1 3691  
533 0 0 7 493 3608 0 0 340 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_net_prev_transform
//       Access: Published
//  Description: Returns the net "previous" transform on this node
//               from the root.  See set_prev_transform().
//////////////////////////////////////////////////////////////////// 2 4 this 3 3755  14 current_thread 1 3691  
534 0 0 4 494 3642 0 0 614 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_pos
//       Access: Published
//  Description: Sets the translation component of the transform,
//               leaving rotation and scale untouched.  This also
//               resets the node's "previous" position, so that the
//               collision system will see the node as having suddenly
//               appeared in the new position, without passing any
//               points in between.
//     See Also: NodePath::set_fluid_pos
//////////////////////////////////////////////////////////////////// 2 4 this 3 3839  3 pos 1 3614  
535 0 0 4 494 3642 0 0 310 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_pos
//       Access: Published
//  Description: Sets the translation component of the transform,
//               relative to the other node.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3839  5 other 1 3755  3 pos 1 3614  
536 0 0 4 494 3642 0 0 310 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_pos
//       Access: Published
//  Description: Sets the translation component of the transform,
//               relative to the other node.
//////////////////////////////////////////////////////////////////// 5 4 this 3 3839  5 other 1 3755  1 x 1 3622  1 y 1 3622  1 z 1 3622  
537 0 0 4 494 3642 0 0 573 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_pos
//       Access: Published
//  Description: Sets the translation component of the transform,
//               leaving rotation and scale untouched.  This also
//               resets the node's "previous" position, so that the
//               collision system will see the node as having suddenly
//               appeared in the new position, without passing any
//               points in between.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3839  1 x 1 3622  1 y 1 3622  1 z 1 3622  
538 0 0 4 495 3642 0 0 0 3 4 this 3 3839  5 other 1 3755  1 x 1 3622  
539 0 0 4 495 3642 0 0 0 2 4 this 3 3839  1 x 1 3622  
540 0 0 4 496 3642 0 0 0 3 4 this 3 3839  5 other 1 3755  1 y 1 3622  
541 0 0 4 496 3642 0 0 0 2 4 this 3 3839  1 y 1 3622  
542 0 0 4 497 3642 0 0 0 3 4 this 3 3839  5 other 1 3755  1 z 1 3622  
543 0 0 4 497 3642 0 0 0 2 4 this 3 3839  1 z 1 3622  
544 0 0 4 498 3642 0 0 495 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_fluid_pos
//       Access: Published
//  Description: Sets the translation component, without changing the
//               "previous" position, so that the collision system
//               will see the node as moving fluidly from its previous
//               position to its new position.
//     See Also: NodePath::set_pos
//////////////////////////////////////////////////////////////////// 2 4 this 3 3839  3 pos 1 3614  
545 0 0 4 498 3642 0 0 316 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_fluid_pos
//       Access: Published
//  Description: Sets the translation component of the transform,
//               relative to the other node.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3839  5 other 1 3755  3 pos 1 3614  
546 0 0 4 498 3642 0 0 460 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_fluid_pos
//       Access: Published
//  Description: Sets the translation component, without changing the
//               "previous" position, so that the collision system
//               will see the node as moving fluidly from its previous
//               position to its new position.
//////////////////////////////////////////////////////////////////// 5 4 this 3 3839  5 other 1 3755  1 x 1 3622  1 y 1 3622  1 z 1 3622  
547 0 0 4 498 3642 0 0 460 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_fluid_pos
//       Access: Published
//  Description: Sets the translation component, without changing the
//               "previous" position, so that the collision system
//               will see the node as moving fluidly from its previous
//               position to its new position.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3839  1 x 1 3622  1 y 1 3622  1 z 1 3622  
548 0 0 4 499 3642 0 0 0 3 4 this 3 3839  5 other 1 3755  1 x 1 3622  
549 0 0 4 499 3642 0 0 0 2 4 this 3 3839  1 x 1 3622  
550 0 0 4 500 3642 0 0 0 3 4 this 3 3839  5 other 1 3755  1 y 1 3622  
551 0 0 4 500 3642 0 0 0 2 4 this 3 3839  1 y 1 3622  
552 0 0 4 501 3642 0 0 0 3 4 this 3 3839  5 other 1 3755  1 z 1 3622  
553 0 0 4 501 3642 0 0 0 2 4 this 3 3839  1 z 1 3622  
554 0 0 7 502 3841 0 0 270 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_pos
//       Access: Published
//  Description: Retrieves the translation component of the transform.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3755  
555 0 0 7 502 3841 0 0 315 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_pos
//       Access: Published
//  Description: Returns the relative position of the referenced node
//               as seen from the other node.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3755  5 other 1 3755  
556 0 0 6 503 3622 0 0 0 1 4 this 3 3755  
557 0 0 6 503 3622 0 0 0 2 4 this 3 3755  5 other 1 3755  
558 0 0 6 504 3622 0 0 0 1 4 this 3 3755  
559 0 0 6 504 3622 0 0 0 2 4 this 3 3755  5 other 1 3755  
560 0 0 6 505 3622 0 0 0 1 4 this 3 3755  
561 0 0 6 505 3622 0 0 0 2 4 this 3 3755  5 other 1 3755  
562 0 0 7 506 3844 0 0 816 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_pos_delta
//       Access: Published
//  Description: Returns the delta vector from this node's position in
//               the previous frame (according to
//               set_prev_transform(), typically set via the use of
//               set_fluid_pos()) and its position in the current
//               frame.  This is the vector used to determine
//               collisions.  Generally, if the node was last
//               repositioned via set_pos(), the delta will be zero;
//               if it was adjusted via set_fluid_pos(), the delta
//               will represent the change from the previous frame's
//               position.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3755  
563 0 0 7 506 3844 0 0 883 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_pos_delta
//       Access: Published
//  Description: Returns the delta vector from this node's position in
//               the previous frame (according to
//               set_prev_transform(), typically set via the use of
//               set_fluid_pos()) and its position in the current
//               frame, as seen in the indicated node's coordinate
//               space.  This is the vector used to determine
//               collisions.  Generally, if the node was last
//               repositioned via set_pos(), the delta will be zero;
//               if it was adjusted via set_fluid_pos(), the delta
//               will represent the change from the previous frame's
//               position.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3755  5 other 1 3755  
564 0 0 4 507 3642 0 0 320 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_hpr
//       Access: Published
//  Description: Sets the rotation component of the transform,
//               leaving translation and scale untouched.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3839  3 hpr 1 3614  
565 0 0 4 507 3642 0 0 307 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_hpr
//       Access: Published
//  Description: Sets the rotation component of the transform,
//               relative to the other node.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3839  5 other 1 3755  3 hpr 1 3614  
566 0 0 4 507 3642 0 0 307 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_hpr
//       Access: Published
//  Description: Sets the rotation component of the transform,
//               relative to the other node.
//////////////////////////////////////////////////////////////////// 5 4 this 3 3839  5 other 1 3755  1 h 1 3622  1 p 1 3622  1 r 1 3622  
567 0 0 4 507 3642 0 0 320 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_hpr
//       Access: Published
//  Description: Sets the rotation component of the transform,
//               leaving translation and scale untouched.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3839  1 h 1 3622  1 p 1 3622  1 r 1 3622  
568 0 0 4 508 3642 0 0 0 3 4 this 3 3839  5 other 1 3755  1 h 1 3622  
569 0 0 4 508 3642 0 0 0 2 4 this 3 3839  1 h 1 3622  
570 0 0 4 509 3642 0 0 0 3 4 this 3 3839  5 other 1 3755  1 p 1 3622  
571 0 0 4 509 3642 0 0 0 2 4 this 3 3839  1 p 1 3622  
572 0 0 4 510 3642 0 0 0 3 4 this 3 3839  5 other 1 3755  1 r 1 3622  
573 0 0 4 510 3642 0 0 0 2 4 this 3 3839  1 r 1 3622  
574 0 0 7 511 3845 0 0 267 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_hpr
//       Access: Published
//  Description: Retrieves the rotation component of the transform.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3755  
575 0 0 7 511 3845 0 0 314 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_hpr
//       Access: Published
//  Description: Returns the relative orientation of the bottom node
//               as seen from the other node.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3755  5 other 1 3755  
576 0 0 6 512 3622 0 0 0 1 4 this 3 3755  
577 0 0 6 512 3622 0 0 0 2 4 this 3 3755  5 other 1 3755  
578 0 0 6 513 3622 0 0 0 1 4 this 3 3755  
579 0 0 6 513 3622 0 0 0 2 4 this 3 3755  5 other 1 3755  
580 0 0 6 514 3622 0 0 0 1 4 this 3 3755  
581 0 0 6 514 3622 0 0 0 2 4 this 3 3755  5 other 1 3755  
582 0 0 4 515 3642 0 0 321 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_quat
//       Access: Published
//  Description: Sets the rotation component of the transform,
//               leaving translation and scale untouched.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3839  4 quat 1 3618  
583 0 0 4 515 3642 0 0 308 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_quat
//       Access: Published
//  Description: Sets the rotation component of the transform,
//               relative to the other node.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3839  5 other 1 3755  4 quat 1 3618  
584 0 0 7 516 3846 0 0 268 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_quat
//       Access: Published
//  Description: Retrieves the rotation component of the transform.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3755  
585 0 0 7 516 3846 0 0 315 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_quat
//       Access: Published
//  Description: Returns the relative orientation of the bottom node
//               as seen from the other node.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3755  5 other 1 3755  
586 0 0 4 517 3642 0 0 322 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_scale
//       Access: Published
//  Description: Sets the scale component of the transform,
//               leaving translation and rotation untouched.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3839  5 scale 1 3614  
587 0 0 4 517 3642 0 0 306 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_scale
//       Access: Published
//  Description: Sets the scale component of the transform,
//               relative to the other node.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3839  5 other 1 3755  5 scale 1 3614  
588 0 0 4 517 3642 0 0 306 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_scale
//       Access: Published
//  Description: Sets the scale component of the transform,
//               relative to the other node.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3839  5 other 1 3755  5 scale 1 3622  
589 0 0 4 517 3642 0 0 306 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_scale
//       Access: Published
//  Description: Sets the scale component of the transform,
//               relative to the other node.
//////////////////////////////////////////////////////////////////// 5 4 this 3 3839  5 other 1 3755  2 sx 1 3622  2 sy 1 3622  2 sz 1 3622  
590 0 0 4 517 3642 0 0 322 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_scale
//       Access: Published
//  Description: Sets the scale component of the transform,
//               leaving translation and rotation untouched.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3839  5 scale 1 3622  
591 0 0 4 517 3642 0 0 0 4 4 this 3 3839  2 sx 1 3622  2 sy 1 3622  2 sz 1 3622  
592 0 0 4 518 3642 0 0 0 3 4 this 3 3839  5 other 1 3755  2 sx 1 3622  
593 0 0 4 518 3642 0 0 0 2 4 this 3 3839  2 sx 1 3622  
594 0 0 4 519 3642 0 0 0 3 4 this 3 3839  5 other 1 3755  2 sy 1 3622  
595 0 0 4 519 3642 0 0 0 2 4 this 3 3839  2 sy 1 3622  
596 0 0 4 520 3642 0 0 0 3 4 this 3 3839  5 other 1 3755  2 sz 1 3622  
597 0 0 4 520 3642 0 0 0 2 4 this 3 3839  2 sz 1 3622  
598 0 0 7 521 3845 0 0 266 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_scale
//       Access: Published
//  Description: Retrieves the scale component of the transform.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3755  
599 0 0 7 521 3845 0 0 310 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_scale
//       Access: Published
//  Description: Returns the relative scale of the bottom node
//               as seen from the other node.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3755  5 other 1 3755  
600 0 0 6 522 3622 0 0 0 1 4 this 3 3755  
601 0 0 6 522 3622 0 0 314 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_scale
//       Access: Published
//  Description: Returns the relative scale of the referenced node
//               as seen from the other node.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3755  5 other 1 3755  
602 0 0 6 523 3622 0 0 0 1 4 this 3 3755  
603 0 0 6 523 3622 0 0 0 2 4 this 3 3755  5 other 1 3755  
604 0 0 6 524 3622 0 0 0 1 4 this 3 3755  
605 0 0 6 524 3622 0 0 0 2 4 this 3 3755  5 other 1 3755  
606 0 0 4 525 3642 0 0 322 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shear
//       Access: Published
//  Description: Sets the shear component of the transform,
//               leaving translation and rotation untouched.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3839  5 shear 1 3614  
607 0 0 4 525 3642 0 0 306 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shear
//       Access: Published
//  Description: Sets the shear component of the transform,
//               relative to the other node.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3839  5 other 1 3755  5 shear 1 3614  
608 0 0 4 525 3642 0 0 306 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shear
//       Access: Published
//  Description: Sets the shear component of the transform,
//               relative to the other node.
//////////////////////////////////////////////////////////////////// 5 4 this 3 3839  5 other 1 3755  4 shxy 1 3622  4 shxz 1 3622  4 shyz 1 3622  
609 0 0 4 525 3642 0 0 330 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shear
//       Access: Published
//  Description: Sets the shear component of the transform,
//               leaving translation, rotation, and scale untouched.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3839  4 shxy 1 3622  4 shxz 1 3622  4 shyz 1 3622  
610 0 0 4 526 3642 0 0 0 3 4 this 3 3839  5 other 1 3755  4 shxy 1 3622  
611 0 0 4 526 3642 0 0 0 2 4 this 3 3839  4 shxy 1 3622  
612 0 0 4 527 3642 0 0 0 3 4 this 3 3839  5 other 1 3755  4 shxz 1 3622  
613 0 0 4 527 3642 0 0 0 2 4 this 3 3839  4 shxz 1 3622  
614 0 0 4 528 3642 0 0 0 3 4 this 3 3839  5 other 1 3755  4 shyz 1 3622  
615 0 0 4 528 3642 0 0 0 2 4 this 3 3839  4 shyz 1 3622  
616 0 0 7 529 3845 0 0 266 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_shear
//       Access: Published
//  Description: Retrieves the shear component of the transform.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3755  
617 0 0 7 529 3845 0 0 310 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_shear
//       Access: Published
//  Description: Returns the relative shear of the bottom node
//               as seen from the other node.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3755  5 other 1 3755  
618 0 0 6 530 3622 0 0 0 1 4 this 3 3755  
619 0 0 6 530 3622 0 0 314 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_shear
//       Access: Published
//  Description: Returns the relative shear of the referenced node
//               as seen from the other node.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3755  5 other 1 3755  
620 0 0 6 531 3622 0 0 0 1 4 this 3 3755  
621 0 0 6 531 3622 0 0 0 2 4 this 3 3755  5 other 1 3755  
622 0 0 6 532 3622 0 0 0 1 4 this 3 3755  
623 0 0 6 532 3622 0 0 0 2 4 this 3 3755  5 other 1 3755  
624 0 0 4 533 3642 0 0 324 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_pos_hpr
//       Access: Published
//  Description: Sets the translation and rotation component of the
//               transform, leaving scale untouched.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3839  3 pos 1 3614  3 hpr 1 3614  
625 0 0 4 533 3642 0 0 327 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_pos_hpr
//       Access: Published
//  Description: Sets the translation and rotation component of the
//               transform, relative to the other node.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3839  5 other 1 3755  3 pos 1 3614  3 hpr 1 3614  
626 0 0 4 533 3642 0 0 327 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_pos_hpr
//       Access: Published
//  Description: Sets the translation and rotation component of the
//               transform, relative to the other node.
//////////////////////////////////////////////////////////////////// 8 4 this 3 3839  5 other 1 3755  1 x 1 3622  1 y 1 3622  1 z 1 3622  1 h 1 3622  1 p 1 3622  1 r 1 3622  
627 0 0 4 533 3642 0 0 324 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_pos_hpr
//       Access: Published
//  Description: Sets the translation and rotation component of the
//               transform, leaving scale untouched.
//////////////////////////////////////////////////////////////////// 7 4 this 3 3839  1 x 1 3622  1 y 1 3622  1 z 1 3622  1 h 1 3622  1 p 1 3622  1 r 1 3622  
628 0 0 4 534 3642 0 0 325 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_pos_quat
//       Access: Published
//  Description: Sets the translation and rotation component of the
//               transform, leaving scale untouched.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3839  3 pos 1 3614  4 quat 1 3618  
629 0 0 4 534 3642 0 0 328 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_pos_quat
//       Access: Published
//  Description: Sets the translation and rotation component of the
//               transform, relative to the other node.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3839  5 other 1 3755  3 pos 1 3614  4 quat 1 3618  
630 0 0 4 535 3642 0 0 327 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_hpr_scale
//       Access: Published
//  Description: Sets the rotation and scale components of the
//               transform, leaving translation untouched.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3839  3 hpr 1 3614  5 scale 1 3614  
631 0 0 4 535 3642 0 0 476 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_hpr_scale
//       Access: Published
//  Description: Sets the rotation and scale components of the
//               transform, leaving translation untouched.  This, or
//               set_pos_hpr_scale, is the preferred way to update a
//               transform when both hpr and scale are to be changed.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3839  5 other 1 3755  3 hpr 1 3614  5 scale 1 3614  
632 0 0 4 535 3642 0 0 476 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_hpr_scale
//       Access: Published
//  Description: Sets the rotation and scale components of the
//               transform, leaving translation untouched.  This, or
//               set_pos_hpr_scale, is the preferred way to update a
//               transform when both hpr and scale are to be changed.
//////////////////////////////////////////////////////////////////// 8 4 this 3 3839  5 other 1 3755  1 h 1 3622  1 p 1 3622  1 r 1 3622  2 sx 1 3622  2 sy 1 3622  2 sz 1 3622  
633 0 0 4 535 3642 0 0 327 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_hpr_scale
//       Access: Published
//  Description: Sets the rotation and scale components of the
//               transform, leaving translation untouched.
//////////////////////////////////////////////////////////////////// 7 4 this 3 3839  1 h 1 3622  1 p 1 3622  1 r 1 3622  2 sx 1 3622  2 sy 1 3622  2 sz 1 3622  
634 0 0 4 536 3642 0 0 328 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_quat_scale
//       Access: Published
//  Description: Sets the rotation and scale components of the
//               transform, leaving translation untouched.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3839  4 quat 1 3618  5 scale 1 3614  
635 0 0 4 536 3642 0 0 479 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_quat_scale
//       Access: Published
//  Description: Sets the rotation and scale components of the
//               transform, leaving translation untouched.  This, or
//               set_pos_quat_scale, is the preferred way to update a
//               transform when both quat and scale are to be changed.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3839  5 other 1 3755  4 quat 1 3618  5 scale 1 3614  
636 0 0 4 537 3642 0 0 332 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_pos_hpr_scale
//       Access: Published
//  Description: Replaces the translation, rotation, and scale
//               components, implicitly setting shear to 0.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3839  3 pos 1 3614  3 hpr 1 3614  5 scale 1 3614  
637 0 0 4 537 3642 0 0 407 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_pos_hpr_scale
//       Access: Published
//  Description: Completely replaces the transform with new
//               translation, rotation, and scale components, relative
//               to the other node, implicitly setting shear to 0.
//////////////////////////////////////////////////////////////////// 5 4 this 3 3839  5 other 1 3755  3 pos 1 3614  3 hpr 1 3614  5 scale 1 3614  
638 0 0 4 537 3642 0 0 376 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_pos_hpr_scale
//       Access: Published
//  Description: Completely replaces the transform with new
//               translation, rotation, and scale components, relative
//               to the other node.
//////////////////////////////////////////////////////////////////// 11 4 this 3 3839  5 other 1 3755  1 x 1 3622  1 y 1 3622  1 z 1 3622  1 h 1 3622  1 p 1 3622  1 r 1 3622  2 sx 1 3622  2 sy 1 3622  2 sz 1 3622  
639 0 0 4 537 3642 0 0 331 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_pos_hpr_scale
//       Access: Published
//  Description: Completely replaces the transform with new
//               translation, rotation, and scale components.
//////////////////////////////////////////////////////////////////// 10 4 this 3 3839  1 x 1 3622  1 y 1 3622  1 z 1 3622  1 h 1 3622  1 p 1 3622  1 r 1 3622  2 sx 1 3622  2 sy 1 3622  2 sz 1 3622  
640 0 0 4 538 3642 0 0 333 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_pos_quat_scale
//       Access: Published
//  Description: Replaces the translation, rotation, and scale
//               components, implicitly setting shear to 0.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3839  3 pos 1 3614  4 quat 1 3618  5 scale 1 3614  
641 0 0 4 538 3642 0 0 408 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_pos_quat_scale
//       Access: Published
//  Description: Completely replaces the transform with new
//               translation, rotation, and scale components, relative
//               to the other node, implicitly setting shear to 0.
//////////////////////////////////////////////////////////////////// 5 4 this 3 3839  5 other 1 3755  3 pos 1 3614  4 quat 1 3618  5 scale 1 3614  
642 0 0 4 539 3642 0 0 344 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_pos_hpr_scale_shear
//       Access: Published
//  Description: Completely replaces the transform with new
//               translation, rotation, scale, and shear components.
//////////////////////////////////////////////////////////////////// 5 4 this 3 3839  3 pos 1 3614  3 hpr 1 3614  5 scale 1 3614  5 shear 1 3614  
643 0 0 4 539 3642 0 0 389 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_pos_hpr_scale_shear
//       Access: Published
//  Description: Completely replaces the transform with new
//               translation, rotation, scale, and shear components,
//               relative to the other node.
//////////////////////////////////////////////////////////////////// 6 4 this 3 3839  5 other 1 3755  3 pos 1 3614  3 hpr 1 3614  5 scale 1 3614  5 shear 1 3614  
644 0 0 4 540 3642 0 0 345 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_pos_quat_scale_shear
//       Access: Published
//  Description: Completely replaces the transform with new
//               translation, rotation, scale, and shear components.
//////////////////////////////////////////////////////////////////// 5 4 this 3 3839  3 pos 1 3614  4 quat 1 3618  5 scale 1 3614  5 shear 1 3614  
645 0 0 4 540 3642 0 0 390 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_pos_quat_scale_shear
//       Access: Published
//  Description: Completely replaces the transform with new
//               translation, rotation, scale, and shear components,
//               relative to the other node.
//////////////////////////////////////////////////////////////////// 6 4 this 3 3839  5 other 1 3755  3 pos 1 3614  4 quat 1 3618  5 scale 1 3614  5 shear 1 3614  
646 0 0 4 541 3642 0 0 265 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_mat
//       Access: Published
//  Description: Directly sets an arbitrary 4x4 transform matrix.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3839  3 mat 1 3624  
647 0 0 4 541 3642 0 0 373 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_mat
//       Access: Published
//  Description: Converts the indicated matrix from the other's
//               coordinate space to the local coordinate space, and
//               applies it to the node.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3839  5 other 1 3755  3 mat 1 3624  
648 0 0 4 542 3642 0 0 294 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_mat
//       Access: Published
//  Description: Completely removes any transform from the referenced
//               node.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3839  
649 0 0 6 543 3610 0 0 339 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::has_mat
//       Access: Published
//  Description: Returns true if a non-identity transform matrix has
//               been applied to the referenced node, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3755  
650 0 0 6 544 3624 0 0 379 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_mat
//       Access: Published
//  Description: Returns the transform matrix that has been applied to
//               the referenced node, or the identity matrix if no
//               matrix has been applied.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3755  
651 0 0 7 544 3847 0 0 386 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_mat
//       Access: Published
//  Description: Returns the matrix that describes the coordinate
//               space of the bottom node, relative to the other
//               path's bottom node's coordinate space.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3755  5 other 1 3755  
652 0 0 4 545 3642 0 0 320 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::look_at
//       Access: Published
//  Description: Sets the hpr on this NodePath so that it
//               rotates to face the indicated point in space.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3839  5 point 1 3636  2 up 1 3848  
653 0 0 4 545 3642 0 0 384 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::look_at
//       Access: Published
//  Description: Sets the transform on this NodePath so that it
//               rotates to face the indicated point in space, which
//               is relative to the other NodePath.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3839  5 other 1 3755  5 point 1 3636  2 up 1 3848  
654 0 0 4 545 3642 0 0 378 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::look_at
//       Access: Published
//  Description: Sets the hpr on this NodePath so that it rotates to
//               face the indicated point in space, which is relative
//               to the other NodePath.
//////////////////////////////////////////////////////////////////// 5 4 this 3 3839  5 other 1 3755  1 x 1 3622  1 y 1 3622  1 z 1 3622  
655 0 0 4 545 3642 0 0 467 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::look_at
//       Access: Published
//  Description: Sets the transform on this NodePath so that it
//               rotates to face the indicated point in space.  This
//               will overwrite any previously existing scale on the
//               node, although it will preserve any translation.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3839  1 x 1 3622  1 y 1 3622  1 z 1 3622  
656 0 0 4 546 3642 0 0 371 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::heads_up
//       Access: Published
//  Description: Behaves like look_at(), but with a strong preference
//               to keeping the up vector oriented in the indicated
//               "up" direction.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3839  5 point 1 3636  2 up 1 3848  
657 0 0 4 546 3642 0 0 371 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::heads_up
//       Access: Published
//  Description: Behaves like look_at(), but with a strong preference
//               to keeping the up vector oriented in the indicated
//               "up" direction.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3839  5 other 1 3755  5 point 1 3636  2 up 1 3848  
658 0 0 4 546 3642 0 0 371 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::heads_up
//       Access: Published
//  Description: Behaves like look_at(), but with a strong preference
//               to keeping the up vector oriented in the indicated
//               "up" direction.
//////////////////////////////////////////////////////////////////// 5 4 this 3 3839  5 other 1 3755  1 x 1 3622  1 y 1 3622  1 z 1 3622  
659 0 0 4 546 3642 0 0 371 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::heads_up
//       Access: Published
//  Description: Behaves like look_at(), but with a strong preference
//               to keeping the up vector oriented in the indicated
//               "up" direction.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3839  1 x 1 3622  1 y 1 3622  1 z 1 3622  
660 0 0 7 547 3841 0 0 396 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_relative_point
//       Access: Published
//  Description: Given that the indicated point is in the coordinate
//               system of the other node, returns the same point in
//               this node's coordinate system.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3755  5 other 1 3755  5 point 1 3614  
661 0 0 7 548 3844 0 0 399 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_relative_vector
//       Access: Published
//  Description: Given that the indicated vector is in the coordinate
//               system of the other node, returns the same vector in
//               this node's coordinate system.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3755  5 other 1 3755  3 vec 1 3614  
662 0 0 6 549 3622 0 0 385 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_distance
//       Access: Published
//  Description: Returns the straight-line distance between this
//               referenced node's coordinate frame's origin, and that
//               of the other node's origin.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3755  5 other 1 3755  
663 0 0 4 550 3642 0 0 441 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_color
//       Access: Published
//  Description: Applies a scene-graph color to the referenced node.
//               This color will apply to all geometry at this level
//               and below (that does not specify a new color or a
//               set_color_off()).
//////////////////////////////////////////////////////////////////// 3 4 this 3 3839  5 color 1 3659  8 priority 1 3611  
664 0 0 4 550 3642 0 0 441 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_color
//       Access: Published
//  Description: Applies a scene-graph color to the referenced node.
//               This color will apply to all geometry at this level
//               and below (that does not specify a new color or a
//               set_color_off()).
//////////////////////////////////////////////////////////////////// 6 4 this 3 3839  1 r 1 3622  1 g 1 3622  1 b 1 3622  1 a 1 3622  8 priority 1 3611  
665 0 0 4 551 3642 0 0 565 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_color_off
//       Access: Published
//  Description: Sets the geometry at this level and below to render
//               using the geometry color.  This is normally the
//               default, but it may be useful to use this to
//               contradict set_color() at a higher node level (or,
//               with a priority, to override a set_color() at a lower
//               level).
//////////////////////////////////////////////////////////////////// 2 4 this 3 3839  8 priority 1 3611  
666 0 0 4 552 3642 0 0 463 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_color
//       Access: Published
//  Description: Completely removes any color adjustment from the node.
//               This allows the natural color of the geometry, or
//               whatever color transitions might be otherwise
//               affecting the geometry, to show instead.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3839  
667 0 0 6 553 3610 0 0 312 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::has_color
//       Access: Published
//  Description: Returns true if a color has been applied to the given
//               node, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3755  
668 0 0 7 554 3850 0 0 329 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_color
//       Access: Published
//  Description: Returns the color that has been assigned to the node,
//               or black if no color has been assigned.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3755  
669 0 0 6 555 3610 0 0 453 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::has_color_scale
//       Access: Published
//  Description: Returns true if a color scale has been applied
//               to the referenced node, false otherwise.  It is still
//               possible that color at this node might have been
//               scaled by an ancestor node.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3755  
670 0 0 4 556 3642 0 0 499 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_color_scale
//       Access: Published
//  Description: Completely removes any color scale from the
//               referenced node.  This is preferable to simply
//               setting the color scale to identity, as it also
//               removes the overhead associated with having a color
//               scale at all.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3839  
671 0 0 4 557 3642 0 0 334 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_color_scale
//       Access: Published
//  Description: Sets the color scale component of the transform,
//               leaving translation and rotation untouched.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3839  5 scale 1 3829  8 priority 1 3611  
672 0 0 4 557 3642 0 0 272 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_color_scale
//       Access: Published
//  Description: Sets the color scale component of the transform
//////////////////////////////////////////////////////////////////// 6 4 this 3 3839  2 sx 1 3622  2 sy 1 3622  2 sz 1 3622  2 sa 1 3622  8 priority 1 3611  
673 0 0 4 558 3642 0 0 387 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::compose_color_scale
//       Access: Published
//  Description: multiplies the color scale component of the transform,
//               with previous color scale leaving translation and
//               rotation untouched.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3839  5 scale 1 3829  8 priority 1 3611  
674 0 0 4 558 3642 0 0 276 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::compose_color_scale
//       Access: Published
//  Description: Sets the color scale component of the transform
//////////////////////////////////////////////////////////////////// 6 4 this 3 3839  2 sx 1 3622  2 sy 1 3622  2 sz 1 3622  2 sa 1 3622  8 priority 1 3611  
675 0 0 4 559 3642 0 0 900 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_color_scale_off
//       Access: Published
//  Description: Disables any color scale attribute inherited from
//               above.  This is not the same thing as
//               clear_color_scale(), which undoes any previous
//               set_color_scale() operation on this node; rather,
//               this actively disables any set_color_scale() that
//               might be inherited from a parent node.  This also
//               disables set_alpha_scale() at the same time.
//
//               It is legal to specify a new color scale on the same
//               node with a subsequent call to set_color_scale() or
//               set_alpha_scale(); this new scale will apply to lower
//               geometry.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3839  8 priority 1 3611  
676 0 0 4 560 3642 0 0 435 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_alpha_scale
//       Access: Published
//  Description: Sets the alpha scale component of the transform
//               without (much) affecting the color scale.  Note that
//               any priority specified will also apply to the color
//               scale.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3839  5 scale 1 3622  8 priority 1 3611  
677 0 0 4 561 3642 0 0 469 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_all_color_scale
//       Access: Published
//  Description: Scales all the color components of the object by the
//               same amount, darkening the object, without (much)
//               affecting alpha.  Note that any priority specified
//               will also apply to the alpha scale.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3839  5 scale 1 3622  8 priority 1 3611  
678 0 0 4 562 3642 0 0 261 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_sr
//       Access: Published
//  Description: Sets the red scale component of the transform
//////////////////////////////////////////////////////////////////// 2 4 this 3 3839  2 sr 1 3622  
679 0 0 4 563 3642 0 0 263 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_sg
//       Access: Published
//  Description: Sets the alpha scale component of the transform
//////////////////////////////////////////////////////////////////// 2 4 this 3 3839  2 sg 1 3622  
680 0 0 4 564 3642 0 0 262 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_sb
//       Access: Published
//  Description: Sets the blue scale component of the transform
//////////////////////////////////////////////////////////////////// 2 4 this 3 3839  2 sb 1 3622  
681 0 0 4 565 3642 0 0 263 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_sa
//       Access: Published
//  Description: Sets the alpha scale component of the transform
//////////////////////////////////////////////////////////////////// 2 4 this 3 3839  2 sa 1 3622  
682 0 0 6 566 3829 0 0 510 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_color_scale
//       Access: Published
//  Description: Returns the complete color scale vector that has been
//               applied to this node via a previous call to
//               set_color_scale() and/or set_alpha_scale(), or all
//               1's (identity) if no scale has been applied to this
//               particular node.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3755  
683 0 0 6 567 3622 0 0 261 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_sr
//       Access: Published
//  Description: Gets the red scale component of the transform
//////////////////////////////////////////////////////////////////// 1 4 this 3 3755  
684 0 0 6 568 3622 0 0 263 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_sg
//       Access: Published
//  Description: Gets the green scale component of the transform
//////////////////////////////////////////////////////////////////// 1 4 this 3 3755  
685 0 0 6 569 3622 0 0 262 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_sb
//       Access: Published
//  Description: Gets the blue scale component of the transform
//////////////////////////////////////////////////////////////////// 1 4 this 3 3755  
686 0 0 6 570 3622 0 0 263 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_sa
//       Access: Published
//  Description: Gets the alpha scale component of the transform
//////////////////////////////////////////////////////////////////// 1 4 this 3 3755  
687 0 0 4 571 3642 0 0 593 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_light
//       Access: Published
//  Description: Adds the indicated Light or PolylightNode to the list
//               of lights that illuminate geometry at this node and
//               below.  The light itself should be parented into the
//               scene graph elsewhere, to represent the light's
//               position in space; but until set_light() is called it
//               will illuminate no geometry.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3839  5 light 1 3755  8 priority 1 3611  
688 0 0 4 572 3642 0 0 712 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_light_off
//       Access: Published
//  Description: Sets the geometry at this level and below to render
//               without using the indicated Light.  This is different
//               from not specifying the Light; rather, this
//               specifically contradicts set_light() at a higher node
//               level (or, with a priority, overrides a set_light()
//               at a lower level).
//
//               This interface does not support PolylightNodes, which
//               cannot be turned off at a lower level.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3839  5 light 1 3755  8 priority 1 3611  
689 0 0 4 572 3642 0 0 735 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_light_off
//       Access: Published
//  Description: Sets the geometry at this level and below to render
//               using no lights at all.  This is different
//               from not specifying a light; rather, this
//               specifically contradicts set_light() at a higher
//               node level (or, with a priority, overrides a
//               set_light() at a lower level).
//
//               If no lights are in effect on a particular piece of
//               geometry, that geometry is rendered with lighting
//               disabled.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3839  8 priority 1 3611  
690 0 0 4 573 3642 0 0 382 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_light
//       Access: Published
//  Description: Completely removes any lighting operations that may
//               have been set via set_light() or set_light_off()
//               from this particular node.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3839  
691 0 0 4 573 3642 0 0 318 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_light
//       Access: Published
//  Description: Removes any reference to the indicated Light or
//               PolylightNode from the NodePath.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3839  5 light 1 3755  
692 0 0 6 574 3610 0 0 460 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::has_light
//       Access: Published
//  Description: Returns true if the indicated Light or PolylightNode
//               has been specifically enabled on this particular
//               node.  This means that someone called set_light() on
//               this node with the indicated light.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3755  5 light 1 3755  
693 0 0 6 575 3610 0 0 438 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::has_light_off
//       Access: Published
//  Description: Returns true if all Lights have been specifically
//               disabled on this particular node.  This means that
//               someone called set_light_off() on this node with no
//               parameters.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3755  
694 0 0 6 575 3610 0 0 582 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::has_light_off
//       Access: Published
//  Description: Returns true if the indicated Light has been
//               specifically disabled on this particular node.  This
//               means that someone called set_light_off() on this
//               node with the indicated light.
//
//               This interface does not support PolylightNodes, which
//               cannot be turned off at a lower level.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3755  5 light 1 3755  
695 0 0 4 576 3642 0 0 609 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_clip_plane
//       Access: Published
//  Description: Adds the indicated clipping plane to the list of
//               planes that apply to geometry at this node and below.
//               The clipping plane itself, a PlaneNode, should be
//               parented into the scene graph elsewhere, to represent
//               the plane's position in space; but until
//               set_clip_plane() is called it will clip no geometry.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3839  10 clip_plane 1 3755  8 priority 1 3611  
696 0 0 4 577 3642 0 0 632 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_clip_plane_off
//       Access: Published
//  Description: Sets the geometry at this level and below to render
//               without being clipped by the indicated PlaneNode.
//               This is different from not specifying the PlaneNode;
//               rather, this specifically contradicts
//               set_clip_plane() at a higher node level (or, with a
//               priority, overrides a set_clip_plane() at a lower
//               level).
//////////////////////////////////////////////////////////////////// 3 4 this 3 3839  10 clip_plane 1 3755  8 priority 1 3611  
697 0 0 4 577 3642 0 0 800 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_clip_plane_off
//       Access: Published
//  Description: Sets the geometry at this level and below to render
//               using no clip_planes at all.  This is different
//               from not specifying a clip_plane; rather, this
//               specifically contradicts set_clip_plane() at a higher
//               node level (or, with a priority, overrides a
//               set_clip_plane() at a lower level).
//
//               If no clip_planes are in effect on a particular piece
//               of geometry, that geometry is rendered without being
//               clipped (other than by the viewing frustum).
//////////////////////////////////////////////////////////////////// 2 4 this 3 3839  8 priority 1 3611  
698 0 0 4 578 3642 0 0 389 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_clip_plane
//       Access: Published
//  Description: Completely removes any clip planes that may have been
//               set via set_clip_plane() or set_clip_plane_off() from
//               this particular node.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3839  
699 0 0 4 578 3642 0 0 315 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_clip_plane
//       Access: Published
//  Description: Removes any reference to the indicated clipping plane
//               from the NodePath.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3839  10 clip_plane 1 3755  
700 0 0 6 579 3610 0 0 467 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::has_clip_plane
//       Access: Published
//  Description: Returns true if the indicated clipping plane has been
//               specifically applied to this particular node.  This
//               means that someone called set_clip_plane() on this
//               node with the indicated clip_plane.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3755  10 clip_plane 1 3755  
701 0 0 6 580 3610 0 0 457 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::has_clip_plane_off
//       Access: Published
//  Description: Returns true if all clipping planes have been
//               specifically disabled on this particular node.  This
//               means that someone called set_clip_plane_off() on
//               this node with no parameters.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3755  
702 0 0 6 580 3610 0 0 476 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::has_clip_plane_off
//       Access: Published
//  Description: Returns true if the indicated clipping plane has been
//               specifically disabled on this particular node.  This
//               means that someone called set_clip_plane_off() on
//               this node with the indicated clip_plane.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3755  10 clip_plane 1 3755  
703 0 0 4 581 3642 0 0 567 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_scissor
//       Access: Published
//  Description: Sets up a scissor region on the nodes rendered at
//               this level and below.  The two points are understood
//               to be relative to this node.  When these points are
//               projected into screen space, they define the
//               diagonally-opposite points that determine the scissor
//               region.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3839  1 a 1 3636  1 b 1 3636  
704 0 0 4 581 3642 0 0 648 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_scissor
//       Access: Published
//  Description: Sets up a scissor region on the nodes rendered at
//               this level and below.  The four points are understood
//               to be relative to this node.  When these points are
//               projected into screen space, they define the
//               bounding volume of the scissor region (the scissor
//               region is the smallest onscreen rectangle that
//               encloses all four points).
//////////////////////////////////////////////////////////////////// 5 4 this 3 3839  1 a 1 3636  1 b 1 3636  1 c 1 3636  1 d 1 3636  
705 0 0 4 581 3642 0 0 582 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_scissor
//       Access: Published
//  Description: Sets up a scissor region on the nodes rendered at
//               this level and below.  The two points are understood
//               to be relative to the indicated other node.  When
//               these points are projected into screen space, they
//               define the diagonally-opposite points that determine
//               the scissor region.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3839  5 other 1 3755  1 a 1 3636  1 b 1 3636  
706 0 0 4 581 3642 0 0 663 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_scissor
//       Access: Published
//  Description: Sets up a scissor region on the nodes rendered at
//               this level and below.  The four points are understood
//               to be relative to the indicated other node.  When
//               these points are projected into screen space, they
//               define the bounding volume of the scissor region (the
//               scissor region is the smallest onscreen rectangle
//               that encloses all four points).
//////////////////////////////////////////////////////////////////// 6 4 this 3 3839  5 other 1 3755  1 a 1 3636  1 b 1 3636  1 c 1 3636  1 d 1 3636  
707 0 0 4 581 3642 0 0 623 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_scissor
//       Access: Published
//  Description: Sets up a scissor region on the nodes rendered at
//               this level and below.  The four coordinates are
//               understood to define a rectangle in screen space.
//               These numbers are relative to the current
//               DisplayRegion, where (0,0) is the lower-left corner
//               of the DisplayRegion, and (1,1) is the upper-right
//               corner.
//////////////////////////////////////////////////////////////////// 5 4 this 3 3839  4 left 1 3622  5 right 1 3622  6 bottom 1 3622  3 top 1 3622  
708 0 0 4 582 3642 0 0 339 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_scissor
//       Access: Published
//  Description: Removes the scissor region that was defined at this
//               node level by a previous call to set_scissor().
//////////////////////////////////////////////////////////////////// 1 4 this 3 3839  
709 0 0 6 583 3610 0 0 607 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::has_scissor
//       Access: Published
//  Description: Returns true if a scissor region was defined at this
//               node by a previous call to set_scissor().  This does
//               not check for scissor regions inherited from a parent
//               class.  It also does not check for the presence of a
//               low-level ScissorAttrib, which is different from the
//               ScissorEffect added by set_scissor.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3755  
710 0 0 4 584 3642 0 0 603 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_occluder
//       Access: Published
//  Description: Adds the indicated occluder to the list of
//               occluders that apply to geometry at this node and below.
//               The occluder itself, an OccluderNode, should be
//               parented into the scene graph elsewhere, to represent
//               the occluder's position in space; but until
//               set_occluder() is called it will clip no geometry.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3839  8 occluder 1 3755  
711 0 0 4 585 3642 0 0 342 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_occluder
//       Access: Published
//  Description: Completely removes any occluders that may have been
//               set via set_occluder() from this particular node.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3839  
712 0 0 4 585 3642 0 0 307 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_occluder
//       Access: Published
//  Description: Removes any reference to the indicated occluder
//               from the NodePath.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3839  8 occluder 1 3755  
713 0 0 6 586 3610 0 0 455 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::has_occluder
//       Access: Published
//  Description: Returns true if the indicated occluder has been
//               specifically applied to this particular node.  This
//               means that someone called set_occluder() on this
//               node with the indicated occluder.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3755  8 occluder 1 3755  
714 0 0 4 587 3642 0 0 1343 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_bin
//       Access: Published
//  Description: Assigns the geometry at this level and below to the
//               named rendering bin.  It is the user's responsibility
//               to ensure that such a bin already exists, either via
//               the cull-bin Configrc variable, or by explicitly
//               creating a GeomBin of the appropriate type at
//               runtime.
//
//               There are two default bins created when Panda is
//               started: "default" and "fixed".  Normally, all
//               geometry is assigned to "default" unless specified
//               otherwise.  This bin renders opaque geometry in
//               state-sorted order, followed by transparent geometry
//               sorted back-to-front.  If any geometry is assigned to
//               "fixed", this will be rendered following all the
//               geometry in "default", in the order specified by
//               draw_order for each piece of geometry so assigned.
//
//               The draw_order parameter is meaningful only for
//               GeomBinFixed type bins, e.g. "fixed".  Other kinds of
//               bins ignore it.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3839  8 bin_name 1 3687  10 draw_order 1 3611  8 priority 1 3611  
715 0 0 4 588 3642 0 0 337 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_bin
//       Access: Published
//  Description: Completely removes any bin adjustment that may have
//               been set via set_bin() from this particular node.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3839  
716 0 0 6 589 3610 0 0 359 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::has_bin
//       Access: Published
//  Description: Returns true if the node has been assigned to the a
//               particular rendering bin via set_bin(), false
//               otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3755  
717 0 0 6 590 3687 0 0 414 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_bin_name
//       Access: Published
//  Description: Returns the name of the bin that this particular node
//               was assigned to via set_bin(), or the empty string if
//               no bin was assigned.  See set_bin() and has_bin().
//////////////////////////////////////////////////////////////////// 1 4 this 3 3755  
718 0 0 6 591 3611 0 0 444 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_bin_draw_order
//       Access: Published
//  Description: Returns the drawing order associated with the bin
//               that this particular node was assigned to via
//               set_bin(), or 0 if no bin was assigned.  See
//               set_bin() and has_bin().
//////////////////////////////////////////////////////////////////// 1 4 this 3 3755  
719 0 0 4 592 3642 0 0 917 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_texture
//       Access: Published
//  Description: Adds the indicated texture to the list of textures
//               that will be rendered on the default texture stage.
//
//               The given sampler state will override the sampling
//               settings on the texture itself.  Note that this
//               method makes a copy of the sampler settings that
//               you give; further changes to this object will not
//               be reflected.
//
//               This is the convenience single-texture variant of
//               this method; it is now superceded by set_texture()
//               that accepts a stage and texture.  You may use this
//               method if you just want to adjust the default stage.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3839  3 tex 1 3822  7 sampler 1 3824  8 priority 1 3611  
720 0 0 4 592 3642 0 0 617 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_texture
//       Access: Published
//  Description: Adds the indicated texture to the list of textures
//               that will be rendered on the default texture stage.
//
//               This is the convenience single-texture variant of
//               this method; it is now superceded by set_texture()
//               that accepts a stage and texture.  You may use this
//               method if you just want to adjust the default stage.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3839  3 tex 1 3822  8 priority 1 3611  
721 0 0 4 592 3642 0 0 959 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_texture
//       Access: Published
//  Description: Adds the indicated texture to the list of textures
//               that will be rendered on the indicated multitexture
//               stage.  If there are multiple texture stages
//               specified (possibly on multiple different nodes at
//               different levels), they will all be applied to
//               geometry together, according to the stage
//               specification set up in the TextureStage object.
//
//               The given sampler state will override the sampling
//               settings on the texture itself.  Note that this
//               method makes a copy of the sampler settings that
//               you give; further changes to this object will not
//               be reflected.
//////////////////////////////////////////////////////////////////// 5 4 this 3 3839  5 stage 1 3666  3 tex 1 3822  7 sampler 1 3824  8 priority 1 3611  
722 0 0 4 592 3642 0 0 659 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_texture
//       Access: Published
//  Description: Adds the indicated texture to the list of textures
//               that will be rendered on the indicated multitexture
//               stage.  If there are multiple texture stages
//               specified (possibly on multiple different nodes at
//               different levels), they will all be applied to
//               geometry together, according to the stage
//               specification set up in the TextureStage object.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3839  5 stage 1 3666  3 tex 1 3822  8 priority 1 3611  
723 0 0 4 593 3642 0 0 595 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_texture_off
//       Access: Published
//  Description: Sets the geometry at this level and below to render
//               using no texture, on the indicated stage.  This is
//               different from not specifying a texture; rather, this
//               specifically contradicts set_texture() at a higher
//               node level (or, with a priority, overrides a
//               set_texture() at a lower level).
//////////////////////////////////////////////////////////////////// 3 4 this 3 3839  5 stage 1 3666  8 priority 1 3611  
724 0 0 4 593 3642 0 0 585 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_texture_off
//       Access: Published
//  Description: Sets the geometry at this level and below to render
//               using no texture, on any stage.  This is different
//               from not specifying a texture; rather, this
//               specifically contradicts set_texture() at a higher
//               node level (or, with a priority, overrides a
//               set_texture() at a lower level).
//////////////////////////////////////////////////////////////////// 2 4 this 3 3839  8 priority 1 3611  
725 0 0 4 594 3642 0 0 511 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_texture
//       Access: Published
//  Description: Completely removes any texture adjustment that may
//               have been set via set_texture() or set_texture_off()
//               from this particular node.  This allows whatever
//               textures might be otherwise affecting the geometry to
//               show instead.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3839  
726 0 0 4 594 3642 0 0 311 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_texture
//       Access: Published
//  Description: Removes any reference to the indicated texture stage
//               from the NodePath.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3839  5 stage 1 3666  
727 0 0 6 595 3610 0 0 578 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::has_texture
//       Access: Published
//  Description: Returns true if a texture has been applied to this
//               particular node via set_texture(), false otherwise.
//               This is not the same thing as asking whether the
//               geometry at this node will be rendered with
//               texturing, as there may be a texture in effect from a
//               higher or lower level.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3755  
728 0 0 6 595 3610 0 0 592 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::has_texture
//       Access: Published
//  Description: Returns true if texturing has been specifically
//               enabled on this particular node for the indicated
//               stage.  This means that someone called
//               set_texture() on this node with the indicated stage
//               name, or the stage_name is the default stage_name,
//               and someone called set_texture() on this node.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3755  5 stage 1 3666  
729 0 0 6 596 3610 0 0 597 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::has_texture_off
//       Access: Published
//  Description: Returns true if texturing has been specifically
//               disabled on this particular node via
//               set_texture_off(), false otherwise.  This is not the
//               same thing as asking whether the geometry at this
//               node will be rendered untextured, as there may be a
//               texture in effect from a higher or lower level.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3755  
730 0 0 6 596 3610 0 0 585 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::has_texture_off
//       Access: Published
//  Description: Returns true if texturing has been specifically
//               disabled on this particular node for the indicated
//               stage.  This means that someone called
//               set_texture_off() on this node with the indicated
//               stage name, or that someone called set_texture_off()
//               on this node to remove all stages.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3755  5 stage 1 3666  
731 0 0 7 597 3822 0 0 618 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_texture
//       Access: Published
//  Description: Returns the base-level texture that has been set on
//               this particular node, or NULL if no texture has been
//               set.  This is not necessarily the texture that will
//               be applied to the geometry at or below this level, as
//               another texture at a higher or lower level may
//               override.
//
//               See also find_texture().
//////////////////////////////////////////////////////////////////// 1 4 this 3 3755  
732 0 0 7 597 3822 0 0 392 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_texture
//       Access: Published
//  Description: Returns the texture that has been set on the
//               indicated stage for this particular node, or NULL if
//               no texture has been set for this stage.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3755  5 stage 1 3666  
733 0 0 6 598 3824 0 0 612 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_texture_sampler
//       Access: Published
//  Description: Returns the sampler state that has been given for
//               the base-level texture that has been set on this
//               particular node.  If no sampler state was given,
//               this returns the texture's default sampler settings.
//
//               It is an error to call this if there is no base-level
//               texture applied to this particular node.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3755  
734 0 0 6 598 3824 0 0 617 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_texture_sampler
//       Access: Published
//  Description: Returns the sampler state that has been given for
//               the indicated texture stage that has been set on this
//               particular node.  If no sampler state was given,
//               this returns the texture's default sampler settings.
//
//               It is an error to call this if there is no texture
//               set for this stage on this particular node.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3755  5 stage 1 3666  
735 0 0 4 599 3642 0 0 219 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shader
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 3839  3 sha 1 3851  8 priority 1 3611  
736 0 0 4 600 3642 0 0 223 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shader_off
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3839  8 priority 1 3611  
737 0 0 4 601 3642 0 0 265 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shader_auto
//       Access: Published
//  Description: overloaded for auto shader customization
//////////////////////////////////////////////////////////////////// 3 4 this 3 3839  13 shader_switch 1 3853  8 priority 1 3611  
738 0 0 4 601 3642 0 0 224 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shader_auto
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3839  8 priority 1 3611  
739 0 0 4 602 3642 0 0 221 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_shader
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 3839  
740 0 0 4 603 3642 0 0 225 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shader_input
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 4 4 this 3 3839  2 id 1 3717  1 v 1 3632  8 priority 1 3611  
741 0 0 4 603 3642 0 0 225 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shader_input
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 4 4 this 3 3839  2 id 1 3717  1 v 1 3624  8 priority 1 3611  
742 0 0 4 603 3642 0 0 225 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shader_input
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 4 4 this 3 3839  2 id 1 3717  1 v 1 3628  8 priority 1 3611  
743 0 0 4 603 3642 0 0 225 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shader_input
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 4 4 this 3 3839  2 id 1 3717  1 v 1 3736  8 priority 1 3611  
744 0 0 4 603 3642 0 0 225 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shader_input
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 4 4 this 3 3839  2 id 1 3717  1 v 1 3614  8 priority 1 3611  
745 0 0 4 603 3642 0 0 225 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shader_input
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 4 4 this 3 3839  2 id 1 3717  1 v 1 3744  8 priority 1 3611  
746 0 0 4 603 3642 0 0 225 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shader_input
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 4 4 this 3 3839  2 id 1 3717  1 v 1 3829  8 priority 1 3611  
747 0 0 4 603 3642 0 0 225 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shader_input
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 4 4 this 3 3839  2 id 1 3717  1 v 1 3752  8 priority 1 3611  
748 0 0 4 603 3642 0 0 225 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shader_input
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 4 4 this 3 3839  2 id 1 3717  2 np 1 3755  8 priority 1 3611  
749 0 0 4 603 3642 0 0 225 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shader_input
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 7 4 this 3 3839  2 id 1 3717  2 n1 1 3622  2 n2 1 3622  2 n3 1 3622  2 n4 1 3622  8 priority 1 3611  
750 0 0 4 603 3642 0 0 225 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shader_input
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 4 4 this 3 3839  2 id 1 3717  1 v 1 3854  8 priority 1 3611  
751 0 0 4 603 3642 0 0 225 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shader_input
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 4 4 this 3 3839  2 id 1 3717  1 v 1 3857  8 priority 1 3611  
752 0 0 4 603 3642 0 0 225 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shader_input
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 4 4 this 3 3839  2 id 1 3717  1 v 1 3860  8 priority 1 3611  
753 0 0 4 603 3642 0 0 225 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shader_input
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 4 4 this 3 3839  2 id 1 3717  1 v 1 3781  8 priority 1 3611  
754 0 0 4 603 3642 0 0 225 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shader_input
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 4 4 this 3 3839  2 id 1 3717  1 v 1 3863  8 priority 1 3611  
755 0 0 4 603 3642 0 0 225 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shader_input
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 4 4 this 3 3839  2 id 1 3717  1 v 1 3793  8 priority 1 3611  
756 0 0 4 603 3642 0 0 225 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shader_input
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 4 4 this 3 3839  2 id 1 3717  1 v 1 3866  8 priority 1 3611  
757 0 0 4 603 3642 0 0 225 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shader_input
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 4 4 this 3 3839  2 id 1 3717  1 v 1 3805  8 priority 1 3611  
758 0 0 4 603 3642 0 0 225 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shader_input
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 4 4 this 3 3839  2 id 1 3717  1 v 1 3809  8 priority 1 3611  
759 0 0 4 603 3642 0 0 225 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shader_input
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 4 4 this 3 3839  2 id 1 3717  1 v 1 3813  8 priority 1 3611  
760 0 0 4 603 3642 0 0 225 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shader_input
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 4 4 this 3 3839  2 id 1 3717  1 v 1 3817  8 priority 1 3611  
761 0 0 4 603 3642 0 0 225 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shader_input
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 5 4 this 3 3839  2 id 1 3717  3 tex 1 3822  7 sampler 1 3824  8 priority 1 3611  
762 0 0 4 603 3642 0 0 225 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shader_input
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 8 4 this 3 3839  2 id 1 3717  3 tex 1 3822  4 read 1 3610  5 write 1 3610  1 z 1 3611  1 n 1 3611  8 priority 1 3611  
763 0 0 4 603 3642 0 0 225 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shader_input
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 4 4 this 3 3839  2 id 1 3717  3 tex 1 3822  8 priority 1 3611  
764 0 0 4 603 3642 0 0 225 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shader_input
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 7 4 this 3 3839  2 id 1 3717  2 n1 1 3611  2 n2 1 3611  2 n3 1 3611  2 n4 1 3611  8 priority 1 3611  
765 0 0 4 603 3642 0 0 225 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shader_input
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3839  3 inp 1 3828  
766 0 0 4 604 3642 0 0 227 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_shader_input
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3839  2 id 1 3717  
767 0 0 4 605 3642 0 0 435 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_instance_count
//       Access: Published
//  Description: Sets the geometry instance count, or 0 if
//               geometry instancing should be disabled. Do not
//               confuse with instanceTo which only applies to
//               animation instancing.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3839  14 instance_count 1 3611  
768 0 0 7 606 3851 0 0 219 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_shader
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 3755  
769 0 0 7 607 3828 0 0 225 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_shader_input
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3755  2 id 1 3717  
770 0 0 6 608 3611 0 0 323 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_instance_count
//       Access: Published
//  Description: Returns the geometry instance count, or 0 if
//               disabled. See set_instance_count.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3755  
771 0 0 4 609 3642 0 0 335 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_tex_transform
//       Access: Published
//  Description: Sets the texture matrix on the current node to the
//               indicated transform for the given stage.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3839  5 other 1 3755  5 stage 1 3666  9 transform 1 3608  
772 0 0 4 609 3642 0 0 335 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_tex_transform
//       Access: Published
//  Description: Sets the texture matrix on the current node to the
//               indicated transform for the given stage.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3839  5 stage 1 3666  9 transform 1 3608  
773 0 0 4 610 3642 0 0 280 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_tex_transform
//       Access: Published
//  Description: Removes all texture matrices from the current node.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3839  
774 0 0 4 610 3642 0 0 313 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_tex_transform
//       Access: Published
//  Description: Removes the texture matrix on the current node for
//               the given stage.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3839  5 stage 1 3666  
775 0 0 6 611 3610 0 0 336 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::has_tex_transform
//       Access: Published
//  Description: Returns true if there is an explicit texture matrix
//               on the current node for the given stage.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3755  5 stage 1 3666  
776 0 0 7 612 3608 0 0 339 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_tex_transform
//       Access: Published
//  Description: Returns the texture matrix on the current node for the
//               given stage, relative to the other node.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3755  5 other 1 3755  5 stage 1 3666  
777 0 0 7 612 3608 0 0 409 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_tex_transform
//       Access: Published
//  Description: Returns the texture matrix on the current node for the
//               given stage, or identity transform if there is no
//               explicit transform set for the given stage.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3755  5 stage 1 3666  
778 0 0 4 613 3642 0 0 441 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_tex_offset
//       Access: Published
//  Description: Sets a texture matrix on the current node to apply
//               the indicated offset to UV's for the given stage.
//
//               This call is appropriate for ordinary 2-d texture
//               coordinates.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3839  5 other 1 3755  5 stage 1 3666  2 uv 1 3628  
779 0 0 4 613 3642 0 0 441 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_tex_offset
//       Access: Published
//  Description: Sets a texture matrix on the current node to apply
//               the indicated offset to UV's for the given stage.
//
//               This call is appropriate for ordinary 2-d texture
//               coordinates.
//////////////////////////////////////////////////////////////////// 5 4 this 3 3839  5 other 1 3755  5 stage 1 3666  1 u 1 3622  1 v 1 3622  
780 0 0 4 613 3642 0 0 441 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_tex_offset
//       Access: Published
//  Description: Sets a texture matrix on the current node to apply
//               the indicated offset to UV's for the given stage.
//
//               This call is appropriate for ordinary 2-d texture
//               coordinates.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3839  5 stage 1 3666  2 uv 1 3628  
781 0 0 4 613 3642 0 0 441 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_tex_offset
//       Access: Published
//  Description: Sets a texture matrix on the current node to apply
//               the indicated offset to UV's for the given stage.
//
//               This call is appropriate for ordinary 2-d texture
//               coordinates.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3839  5 stage 1 3666  1 u 1 3622  1 v 1 3622  
782 0 0 4 614 3642 0 0 483 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_tex_rotate
//       Access: Published
//  Description: Sets a texture matrix on the current node to apply
//               the indicated rotation, clockwise in degrees, to UV's
//               for the given stage.
//
//               This call is appropriate for ordinary 2-d texture
//               coordinates.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3839  5 other 1 3755  5 stage 1 3666  1 r 1 3622  
783 0 0 4 614 3642 0 0 483 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_tex_rotate
//       Access: Published
//  Description: Sets a texture matrix on the current node to apply
//               the indicated rotation, clockwise in degrees, to UV's
//               for the given stage.
//
//               This call is appropriate for ordinary 2-d texture
//               coordinates.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3839  5 stage 1 3666  1 r 1 3622  
784 0 0 4 615 3642 0 0 439 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_tex_scale
//       Access: Published
//  Description: Sets a texture matrix on the current node to apply
//               the indicated scale to UV's for the given stage.
//
//               This call is appropriate for ordinary 2-d texture
//               coordinates.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3839  5 other 1 3755  5 stage 1 3666  5 scale 1 3628  
785 0 0 4 615 3642 0 0 414 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_tex_scale
//       Access: Published
//  Description: Sets a texture matrix on the current node to apply
//               the indicated scale to UVW's for the given stage.
//
//               This call is appropriate for 3-d texture coordinates.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3839  5 other 1 3755  5 stage 1 3666  5 scale 1 3614  
786 0 0 4 615 3642 0 0 437 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_tex_scale
//       Access: Published
//  Description: Sets a texture matrix on the current node to apply
//               the indicated scale to UV's for the given stage.
//
//               This call is appropriate for 2-d or 3-d texture
//               coordinates.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3839  5 other 1 3755  5 stage 1 3666  5 scale 1 3622  
787 0 0 4 615 3642 0 0 439 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_tex_scale
//       Access: Published
//  Description: Sets a texture matrix on the current node to apply
//               the indicated scale to UV's for the given stage.
//
//               This call is appropriate for ordinary 2-d texture
//               coordinates.
//////////////////////////////////////////////////////////////////// 5 4 this 3 3839  5 other 1 3755  5 stage 1 3666  2 su 1 3622  2 sv 1 3622  
788 0 0 4 615 3642 0 0 414 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_tex_scale
//       Access: Published
//  Description: Sets a texture matrix on the current node to apply
//               the indicated scale to UVW's for the given stage.
//
//               This call is appropriate for 3-d texture coordinates.
//////////////////////////////////////////////////////////////////// 6 4 this 3 3839  5 other 1 3755  5 stage 1 3666  2 su 1 3622  2 sv 1 3622  2 sw 1 3622  
789 0 0 4 615 3642 0 0 439 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_tex_scale
//       Access: Published
//  Description: Sets a texture matrix on the current node to apply
//               the indicated scale to UV's for the given stage.
//
//               This call is appropriate for ordinary 2-d texture
//               coordinates.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3839  5 stage 1 3666  5 scale 1 3628  
790 0 0 4 615 3642 0 0 414 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_tex_scale
//       Access: Published
//  Description: Sets a texture matrix on the current node to apply
//               the indicated scale to UVW's for the given stage.
//
//               This call is appropriate for 3-d texture coordinates.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3839  5 stage 1 3666  5 scale 1 3614  
791 0 0 4 615 3642 0 0 438 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_tex_scale
//       Access: Published
//  Description: Sets a texture matrix on the current node to apply
//               the indicated scale to UVW's for the given stage.
//
//               This call is appropriate for 2-d or 3-d texture
//               coordinates.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3839  5 stage 1 3666  5 scale 1 3622  
792 0 0 4 615 3642 0 0 439 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_tex_scale
//       Access: Published
//  Description: Sets a texture matrix on the current node to apply
//               the indicated scale to UV's for the given stage.
//
//               This call is appropriate for ordinary 2-d texture
//               coordinates.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3839  5 stage 1 3666  2 su 1 3622  2 sv 1 3622  
793 0 0 4 615 3642 0 0 414 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_tex_scale
//       Access: Published
//  Description: Sets a texture matrix on the current node to apply
//               the indicated scale to UVW's for the given stage.
//
//               This call is appropriate for 3-d texture coordinates.
//////////////////////////////////////////////////////////////////// 5 4 this 3 3839  5 stage 1 3666  2 su 1 3622  2 sv 1 3622  2 sw 1 3622  
794 0 0 7 616 3640 0 0 417 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_tex_offset
//       Access: Published
//  Description: Returns the offset set for the UV's for the given
//               stage on the current node.
//
//               This call is appropriate for ordinary 2-d texture
//               coordinates.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3755  5 other 1 3755  5 stage 1 3666  
795 0 0 7 616 3640 0 0 417 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_tex_offset
//       Access: Published
//  Description: Returns the offset set for the UV's for the given
//               stage on the current node.
//
//               This call is appropriate for ordinary 2-d texture
//               coordinates.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3755  5 stage 1 3666  
796 0 0 6 617 3622 0 0 419 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_tex_rotate
//       Access: Published
//  Description: Returns the rotation set for the UV's for the given
//               stage on the current node.
//
//               This call is appropriate for ordinary 2-d texture
//               coordinates.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3755  5 other 1 3755  5 stage 1 3666  
797 0 0 6 617 3622 0 0 419 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_tex_rotate
//       Access: Published
//  Description: Returns the rotation set for the UV's for the given
//               stage on the current node.
//
//               This call is appropriate for ordinary 2-d texture
//               coordinates.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3755  5 stage 1 3666  
798 0 0 7 618 3640 0 0 415 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_tex_scale
//       Access: Published
//  Description: Returns the scale set for the UV's for the given
//               stage on the current node.
//
//               This call is appropriate for ordinary 2-d texture
//               coordinates.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3755  5 other 1 3755  5 stage 1 3666  
799 0 0 7 618 3640 0 0 415 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_tex_scale
//       Access: Published
//  Description: Returns the scale set for the UV's for the given
//               stage on the current node.
//
//               This call is appropriate for ordinary 2-d texture
//               coordinates.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3755  5 stage 1 3666  
800 0 0 4 619 3642 0 0 413 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_tex_pos
//       Access: Published
//  Description: Sets a texture matrix on the current node to apply
//               the indicated offset to UVW's for the given stage.
//
//               This call is appropriate for 3-d texture coordinates.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3839  5 other 1 3755  5 stage 1 3666  3 uvw 1 3614  
801 0 0 4 619 3642 0 0 413 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_tex_pos
//       Access: Published
//  Description: Sets a texture matrix on the current node to apply
//               the indicated offset to UVW's for the given stage.
//
//               This call is appropriate for 3-d texture coordinates.
//////////////////////////////////////////////////////////////////// 6 4 this 3 3839  5 other 1 3755  5 stage 1 3666  1 u 1 3622  1 v 1 3622  1 w 1 3622  
802 0 0 4 619 3642 0 0 413 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_tex_pos
//       Access: Published
//  Description: Sets a texture matrix on the current node to apply
//               the indicated offset to UVW's for the given stage.
//
//               This call is appropriate for 3-d texture coordinates.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3839  5 stage 1 3666  3 uvw 1 3614  
803 0 0 4 619 3642 0 0 413 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_tex_pos
//       Access: Published
//  Description: Sets a texture matrix on the current node to apply
//               the indicated offset to UVW's for the given stage.
//
//               This call is appropriate for 3-d texture coordinates.
//////////////////////////////////////////////////////////////////// 5 4 this 3 3839  5 stage 1 3666  1 u 1 3622  1 v 1 3622  1 w 1 3622  
804 0 0 4 620 3642 0 0 447 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_tex_hpr
//       Access: Published
//  Description: Sets a texture matrix on the current node to apply
//               the indicated rotation, as a 3-D HPR, to UVW's
//               for the given stage.
//
//               This call is appropriate for 3-d texture coordinates.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3839  5 other 1 3755  5 stage 1 3666  3 hpr 1 3614  
805 0 0 4 620 3642 0 0 447 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_tex_hpr
//       Access: Published
//  Description: Sets a texture matrix on the current node to apply
//               the indicated rotation, as a 3-D HPR, to UVW's
//               for the given stage.
//
//               This call is appropriate for 3-d texture coordinates.
//////////////////////////////////////////////////////////////////// 6 4 this 3 3839  5 other 1 3755  5 stage 1 3666  1 h 1 3622  1 p 1 3622  1 r 1 3622  
806 0 0 4 620 3642 0 0 447 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_tex_hpr
//       Access: Published
//  Description: Sets a texture matrix on the current node to apply
//               the indicated rotation, as a 3-D HPR, to UVW's
//               for the given stage.
//
//               This call is appropriate for 3-d texture coordinates.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3839  5 stage 1 3666  3 hpr 1 3614  
807 0 0 4 620 3642 0 0 447 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_tex_hpr
//       Access: Published
//  Description: Sets a texture matrix on the current node to apply
//               the indicated rotation, as a 3-D HPR, to UVW's
//               for the given stage.
//
//               This call is appropriate for 3-d texture coordinates.
//////////////////////////////////////////////////////////////////// 5 4 this 3 3839  5 stage 1 3666  1 h 1 3622  1 p 1 3622  1 r 1 3622  
808 0 0 7 621 3845 0 0 389 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_tex_pos
//       Access: Published
//  Description: Returns the offset set for the UVW's for the given
//               stage on the current node.
//
//               This call is appropriate for 3-d texture coordinates.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3755  5 other 1 3755  5 stage 1 3666  
809 0 0 7 621 3845 0 0 389 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_tex_pos
//       Access: Published
//  Description: Returns the offset set for the UVW's for the given
//               stage on the current node.
//
//               This call is appropriate for 3-d texture coordinates.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3755  5 stage 1 3666  
810 0 0 7 622 3845 0 0 390 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_tex_hpr
//       Access: Published
//  Description: Returns the 3-D HPR set for the UVW's for the given
//               stage on the current node.
//
//               This call is appropriate for 3-d texture coordinates.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3755  5 other 1 3755  5 stage 1 3666  
811 0 0 7 622 3845 0 0 390 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_tex_hpr
//       Access: Published
//  Description: Returns the 3-D HPR set for the UVW's for the given
//               stage on the current node.
//
//               This call is appropriate for 3-d texture coordinates.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3755  5 stage 1 3666  
812 0 0 7 623 3845 0 0 393 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_tex_scale_3d
//       Access: Published
//  Description: Returns the scale set for the UVW's for the given
//               stage on the current node.
//
//               This call is appropriate for 3-d texture coordinates.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3755  5 other 1 3755  5 stage 1 3666  
813 0 0 7 623 3845 0 0 393 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_tex_scale_3d
//       Access: Published
//  Description: Returns the scale set for the UVW's for the given
//               stage on the current node.
//
//               This call is appropriate for 3-d texture coordinates.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3755  5 stage 1 3666  
814 0 0 4 624 3642 0 0 468 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_tex_gen
//       Access: Published
//  Description: Enables automatic texture coordinate generation for
//               the indicated texture stage.  This version of this
//               method is useful when setting M_constant, which
//               requires a constant texture coordinate value.
//////////////////////////////////////////////////////////////////// 5 4 this 3 3839  5 stage 1 3666  4 mode 1 3481  14 constant_value 1 3869  8 priority 1 3611  
815 0 0 4 624 3642 0 0 318 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_tex_gen
//       Access: Published
//  Description: Enables automatic texture coordinate generation for
//               the indicated texture stage.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3839  5 stage 1 3666  4 mode 1 3481  8 priority 1 3611  
816 0 0 4 625 3642 0 0 324 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_tex_gen
//       Access: Published
//  Description: Removes the texture coordinate generation mode from
//               all texture stages on this node.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3839  
817 0 0 4 625 3642 0 0 321 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_tex_gen
//       Access: Published
//  Description: Disables automatic texture coordinate generation for
//               the indicated texture stage.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3839  5 stage 1 3666  
818 0 0 6 626 3610 0 0 371 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::has_tex_gen
//       Access: Published
//  Description: Returns true if there is a mode for automatic texture
//               coordinate generation on the current node for the
//               given stage.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3755  5 stage 1 3666  
819 0 0 6 627 3481 0 0 385 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_tex_gen
//       Access: Published
//  Description: Returns the texture coordinate generation mode for
//               the given stage, or M_off if there is no explicit
//               mode set for the given stage.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3755  5 stage 1 3666  
820 0 0 4 628 3642 0 0 877 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_tex_projector
//       Access: Published
//  Description: Establishes a TexProjectorEffect on this node, which
//               can be used to establish projective texturing (but
//               see also the NodePath::project_texture() convenience
//               function), or it can be used to bind this node's
//               texture transform to particular node's position in
//               space, allowing a LerpInterval (for instance) to
//               adjust this node's texture coordinates.
//
//               If to is a LensNode, then the fourth parameter,
//               lens_index, can be provided to select a particular
//               lens to apply.  Otherwise lens_index is not used.
//////////////////////////////////////////////////////////////////// 5 4 this 3 3839  5 stage 1 3666  4 from 1 3755  2 to 1 3755  10 lens_index 1 3611  
821 0 0 4 629 3642 0 0 307 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_tex_projector
//       Access: Published
//  Description: Removes the TexProjectorEffect for all stages from
//               this node.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3839  
822 0 0 4 629 3642 0 0 316 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_tex_projector
//       Access: Published
//  Description: Removes the TexProjectorEffect for the indicated
//               stage from this node.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3839  5 stage 1 3666  
823 0 0 6 630 3610 0 0 336 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::has_tex_projector
//       Access: Published
//  Description: Returns true if this node has a TexProjectorEffect
//               for the indicated stage, false otherwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3755  5 stage 1 3666  
824 0 0 7 631 3839 2604 0 510 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_tex_projector_from
//       Access: Published
//  Description: Returns the "from" node associated with the
//               TexProjectorEffect on the indicated stage.  The
//               relative transform between the "from" and the "to"
//               nodes is automatically applied to the texture
//               transform each frame.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3755  5 stage 1 3666  
825 0 0 7 632 3839 2604 0 506 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_tex_projector_to
//       Access: Published
//  Description: Returns the "to" node associated with the
//               TexProjectorEffect on the indicated stage.  The
//               relative transform between the "from" and the "to"
//               nodes is automatically applied to the texture
//               transform each frame.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3755  5 stage 1 3666  
826 0 0 4 633 3642 0 0 440 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::project_texture
//       Access: Published
//  Description: A convenience function to enable projective texturing
//               at this node level and below, using the indicated
//               NodePath (which should contain a LensNode) as the
//               projector.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3839  5 stage 1 3666  3 tex 1 3822  9 projector 1 3755  
827 0 0 4 634 3642 0 0 270 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_project_texture
//       Access: Published
//  Description: Undoes the effect of project_texture().
//////////////////////////////////////////////////////////////////// 2 4 this 3 3839  5 stage 1 3666  
828 0 0 6 635 3610 0 0 467 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::has_texcoord
//       Access: Published
//  Description: Returns true if there are at least some vertices at
//               this node and below that use the named texture
//               coordinate set, false otherwise.  Pass the empty
//               string for the default texture coordinate set.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3755  13 texcoord_name 1 3687  
829 0 0 6 636 3610 0 0 598 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::has_vertex_column
//       Access: Published
//  Description: Returns true if there are at least some vertices at
//               this node and below that contain a reference to the
//               indicated vertex data column name, false otherwise.
//
//               This is particularly useful for testing whether a
//               particular model has a given texture coordinate set
//               (but see has_texcoord()).
//////////////////////////////////////////////////////////////////// 2 4 this 3 3755  4 name 1 3717  
830 0 0 7 637 3873 2983 0 352 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::find_all_vertex_columns
//       Access: Published
//  Description: Returns a list of all vertex array columns stored on
//               some geometry found at this node level and below.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3755  
831 0 0 7 637 3873 2983 0 456 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::find_all_vertex_columns
//       Access: Published
//  Description: Returns a list of all vertex array columns stored on
//               some geometry found at this node level and below that
//               match the indicated name (which may contain wildcard
//               characters).
//////////////////////////////////////////////////////////////////// 2 4 this 3 3755  4 name 1 3687  
832 0 0 7 638 3873 2983 0 341 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::find_all_texcoords
//       Access: Published
//  Description: Returns a list of all texture coordinate sets used by
//               any geometry at this node level and below.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3755  
833 0 0 7 638 3873 2983 0 445 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::find_all_texcoords
//       Access: Published
//  Description: Returns a list of all texture coordinate sets used by
//               any geometry at this node level and below that match
//               the indicated name (which may contain wildcard
//               characters).
//////////////////////////////////////////////////////////////////// 2 4 this 3 3755  4 name 1 3687  
834 0 0 7 639 3822 0 0 454 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::find_texture
//       Access: Published
//  Description: Returns the first texture found applied to geometry
//               at this node or below that is assigned to the
//               indicated texture stage.  Returns the texture if it
//               is found, or NULL if it is not.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3755  5 stage 1 3666  
835 0 0 7 639 3822 0 0 468 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::find_texture
//       Access: Published
//  Description: Returns the first texture found applied to geometry
//               at this node or below that matches the indicated name
//               (which may contain wildcards).  Returns the texture
//               if it is found, or NULL if it is not.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3755  4 name 1 3687  
836 0 0 7 640 3875 0 0 316 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::find_all_textures
//       Access: Published
//  Description: Returns a list of a textures applied to geometry at
//               this node and below.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3755  
837 0 0 7 640 3875 0 0 374 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::find_all_textures
//       Access: Published
//  Description: Returns a list of a textures on geometry at
//               this node and below that are assigned to the
//               indicated texture stage.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3755  5 stage 1 3666  
838 0 0 7 640 3875 0 0 403 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::find_all_textures
//       Access: Published
//  Description: Returns a list of a textures applied to geometry at
//               this node and below that match the indicated name
//               (which may contain wildcard characters).
//////////////////////////////////////////////////////////////////// 2 4 this 3 3755  4 name 1 3687  
839 0 0 7 641 3666 0 0 500 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::find_texture_stage
//       Access: Published
//  Description: Returns the first TextureStage found applied to
//               geometry at this node or below that matches the
//               indicated name (which may contain wildcards).
//               Returns the TextureStage if it is found, or NULL if
//               it is not.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3755  4 name 1 3687  
840 0 0 7 642 3836 2241 0 327 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::find_all_texture_stages
//       Access: Published
//  Description: Returns a list of a TextureStages applied to geometry
//               at this node and below.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3755  
841 0 0 7 642 3836 2241 0 414 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::find_all_texture_stages
//       Access: Published
//  Description: Returns a list of a TextureStages applied to geometry
//               at this node and below that match the indicated name
//               (which may contain wildcard characters).
//////////////////////////////////////////////////////////////////// 2 4 this 3 3755  4 name 1 3687  
842 0 0 4 643 3642 0 0 615 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::unify_texture_stages
//       Access: Published
//  Description: Searches through all TextureStages at this node and
//               below.  Any TextureStages that share the same name as
//               the indicated TextureStage object are replaced with
//               this object, thus ensuring that all geometry at this
//               node and below with a particular TextureStage name is
//               using the same TextureStage object.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3839  5 stage 1 3666  
843 0 0 7 644 3877 0 0 471 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::find_material
//       Access: Published
//  Description: Returns the first material found applied to geometry
//               at this node or below that matches the indicated name
//               (which may contain wildcards).  Returns the material
//               if it is found, or NULL if it is not.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3755  4 name 1 3687  
844 0 0 7 645 3878 3104 0 318 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::find_all_materials
//       Access: Published
//  Description: Returns a list of a materials applied to geometry at
//               this node and below.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3755  
845 0 0 7 645 3878 3104 0 405 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::find_all_materials
//       Access: Published
//  Description: Returns a list of a materials applied to geometry at
//               this node and below that match the indicated name
//               (which may contain wildcard characters).
//////////////////////////////////////////////////////////////////// 2 4 this 3 3755  4 name 1 3687  
846 0 0 4 646 3642 0 0 486 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_material
//       Access: Published
//  Description: Sets the geometry at this level and below to render
//               using the indicated material.
//
//               Previously, this operation made a copy of the
//               material structure, but nowadays it assigns the
//               pointer directly.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3839  3 tex 1 3877  8 priority 1 3611  
847 0 0 4 647 3642 0 0 567 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_material_off
//       Access: Published
//  Description: Sets the geometry at this level and below to render
//               using no material.  This is normally the default, but
//               it may be useful to use this to contradict
//               set_material() at a higher node level (or, with a
//               priority, to override a set_material() at a lower
//               level).
//////////////////////////////////////////////////////////////////// 2 4 this 3 3839  8 priority 1 3611  
848 0 0 4 648 3642 0 0 369 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_material
//       Access: Published
//  Description: Completely removes any material adjustment that may
//               have been set via set_material() from this particular
//               node.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3839  
849 0 0 6 649 3610 0 0 343 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::has_material
//       Access: Published
//  Description: Returns true if a material has been applied to this
//               particular node via set_material(), false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3755  
850 0 0 7 650 3877 0 0 111 //               See also find_material().
//////////////////////////////////////////////////////////////////// 1 4 this 3 3755  
851 0 0 4 651 3642 0 0 310 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_fog
//       Access: Published
//  Description: Sets the geometry at this level and below to render
//               using the indicated fog.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3839  3 fog 1 3879  8 priority 1 3611  
852 0 0 4 652 3642 0 0 547 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_fog_off
//       Access: Published
//  Description: Sets the geometry at this level and below to render
//               using no fog.  This is normally the default, but
//               it may be useful to use this to contradict
//               set_fog() at a higher node level (or, with a
//               priority, to override a set_fog() at a lower
//               level).
//////////////////////////////////////////////////////////////////// 2 4 this 3 3839  8 priority 1 3611  
853 0 0 4 653 3642 0 0 491 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_fog
//       Access: Published
//  Description: Completely removes any fog adjustment that may
//               have been set via set_fog() or set_fog_off()
//               from this particular node.  This allows whatever
//               fogs might be otherwise affecting the geometry to
//               show instead.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3839  
854 0 0 6 654 3610 0 0 556 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::has_fog
//       Access: Published
//  Description: Returns true if a fog has been applied to this
//               particular node via set_fog(), false otherwise.
//               This is not the same thing as asking whether the
//               geometry at this node will be rendered with
//               fog, as there may be a fog in effect from a higher or
//               lower level.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3755  
855 0 0 6 655 3610 0 0 579 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::has_fog_off
//       Access: Published
//  Description: Returns true if a fog has been specifically
//               disabled on this particular node via
//               set_fog_off(), false otherwise.  This is not the
//               same thing as asking whether the geometry at this
//               node will be rendered unfogged, as there may be a
//               fog in effect from a higher or lower level.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3755  
856 0 0 7 656 3879 2111 0 541 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_fog
//       Access: Published
//  Description: Returns the fog that has been set on this
//               particular node, or NULL if no fog has been set.
//               This is not necessarily the fog that will be
//               applied to the geometry at or below this level, as
//               another fog at a higher or lower level may
//               override.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3755  
857 0 0 4 657 3642 0 0 345 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_render_mode_wireframe
//       Access: Published
//  Description: Sets up the geometry at this level and below (unless
//               overridden) to render in wireframe mode.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3839  8 priority 1 3611  
858 0 0 4 658 3642 0 0 377 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_render_mode_filled
//       Access: Published
//  Description: Sets up the geometry at this level and below (unless
//               overridden) to render in filled (i.e. not wireframe)
//               mode.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3839  8 priority 1 3611  
859 0 0 4 659 3642 0 0 473 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_render_mode_filled_wireframe
//       Access: Published
//  Description: Sets up the geometry at this level and below (unless
//               overridden) to render in filled, but overlay the
//               wireframe on top with a fixed color.  This is useful
//               for debug visualizations.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3839  15 wireframe_color 1 3659  8 priority 1 3611  
860 0 0 4 660 3642 0 0 690 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_render_mode_thickness
//       Access: Published
//  Description: Sets up the point geometry at this level and below to
//               render as thick points (that is, billboarded
//               quads).  The thickness is in pixels, unless
//               set_render_mode_perspective is also true, in which
//               case it is in 3-D units.
//
//               If you want the quads to be individually textured,
//               you should also set a TexGenAttrib::M_point_sprite on
//               the node.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3839  9 thickness 1 3622  8 priority 1 3611  
861 0 0 4 661 3642 0 0 822 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_render_mode_perspective
//       Access: Published
//  Description: Sets up the point geometry at this level and below to
//               render as perspective sprites (that is, billboarded
//               quads).  The thickness, as specified with
//               set_render_mode_thickness(), is the width of each
//               point in 3-D units, unless it is overridden on a
//               per-vertex basis.  This does not affect geometry
//               other than points.
//
//               If you want the quads to be individually textured,
//               you should also set a TexGenAttrib::M_point_sprite on
//               the node.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3839  11 perspective 1 3610  8 priority 1 3611  
862 0 0 4 662 3642 0 0 407 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_render_mode
//       Access: Published
//  Description: Sets up the geometry at this level and below (unless
//               overridden) to render in the specified mode and with
//               the indicated line and/or point thickness.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3839  4 mode 1 3483  9 thickness 1 3622  8 priority 1 3611  
863 0 0 4 663 3642 0 0 420 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_render_mode
//       Access: Published
//  Description: Completely removes any render mode adjustment that
//               may have been set on this node via
//               set_render_mode_wireframe() or
//               set_render_mode_filled().
//////////////////////////////////////////////////////////////////// 1 4 this 3 3839  
864 0 0 6 664 3610 0 0 454 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::has_render_mode
//       Access: Published
//  Description: Returns true if a render mode has been explicitly set
//               on this particular node via set_render_mode() (or
//               set_render_mode_wireframe() or
//               set_render_mode_filled()), false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3755  
865 0 0 6 665 3483 0 0 389 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_render_mode
//       Access: Published
//  Description: Returns the render mode that has been specifically
//               set on this node via set_render_mode(), or
//               M_unchanged if nothing has been set.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3755  
866 0 0 6 666 3622 0 0 401 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_render_mode_thickness
//       Access: Published
//  Description: Returns the render mode thickness that has been
//               specifically set on this node via set_render_mode(),
//               or 1.0 if nothing has been set.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3755  
867 0 0 6 667 3610 0 0 387 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_render_mode_perspective
//       Access: Published
//  Description: Returns the flag that has been set on this node via
//               set_render_mode_perspective(), or false if no flag
//               has been set.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3755  
868 0 0 4 668 3642 0 0 511 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_two_sided
//       Access: Published
//  Description: Specifically sets or disables two-sided rendering
//               mode on this particular node.  If no other nodes
//               override, this will cause backfacing polygons to be
//               drawn (in two-sided mode, true) or culled (in
//               one-sided mode, false).
//////////////////////////////////////////////////////////////////// 3 4 this 3 3839  9 two_sided 1 3610  8 priority 1 3611  
869 0 0 4 669 3642 0 0 640 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_two_sided
//       Access: Published
//  Description: Completely removes any two-sided adjustment that
//               may have been set on this node via set_two_sided().
//               The geometry at this level and below will
//               subsequently be rendered either two-sided or
//               one-sided, according to whatever other nodes may have
//               had set_two_sided() on it, or according to the
//               initial state otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3839  
870 0 0 6 670 3610 0 0 489 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::has_two_sided
//       Access: Published
//  Description: Returns true if a two-sided adjustment has been
//               explicitly set on this particular node via
//               set_two_sided().  If this returns true, then
//               get_two_sided() may be called to determine which has
//               been set.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3755  
871 0 0 6 671 3610 0 0 681 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_two_sided
//       Access: Published
//  Description: Returns true if two-sided rendering has been
//               specifically set on this node via set_two_sided(), or
//               false if one-sided rendering has been specifically
//               set, or if nothing has been specifically set.  See
//               also has_two_sided().  This does not necessarily
//               imply that the geometry will or will not be rendered
//               two-sided, as there may be other nodes that override.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3755  
872 0 0 4 672 3642 0 0 511 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_depth_test
//       Access: Published
//  Description: Specifically sets or disables the testing of the
//               depth buffer on this particular node.  This is
//               normally on in the 3-d scene graph and off in the 2-d
//               scene graph; it should be on for rendering most 3-d
//               objects properly.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3839  10 depth_test 1 3610  8 priority 1 3611  
873 0 0 4 673 3642 0 0 345 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_depth_test
//       Access: Published
//  Description: Completely removes any depth-test adjustment that
//               may have been set on this node via set_depth_test().
//////////////////////////////////////////////////////////////////// 1 4 this 3 3839  
874 0 0 6 674 3610 0 0 493 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::has_depth_test
//       Access: Published
//  Description: Returns true if a depth-test adjustment has been
//               explicitly set on this particular node via
//               set_depth_test().  If this returns true, then
//               get_depth_test() may be called to determine which has
//               been set.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3755  
875 0 0 6 675 3610 0 0 535 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_depth_test
//       Access: Published
//  Description: Returns true if depth-test rendering has been
//               specifically set on this node via set_depth_test(), or
//               false if depth-test rendering has been specifically
//               disabled.  If nothing has been specifically set,
//               returns true.  See also has_depth_test().
//////////////////////////////////////////////////////////////////// 1 4 this 3 3755  
876 0 0 4 676 3642 0 0 512 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_depth_write
//       Access: Published
//  Description: Specifically sets or disables the writing to the
//               depth buffer on this particular node.  This is
//               normally on in the 3-d scene graph and off in the 2-d
//               scene graph; it should be on for rendering most 3-d
//               objects properly.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3839  11 depth_write 1 3610  8 priority 1 3611  
877 0 0 4 677 3642 0 0 348 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_depth_write
//       Access: Published
//  Description: Completely removes any depth-write adjustment that
//               may have been set on this node via set_depth_write().
//////////////////////////////////////////////////////////////////// 1 4 this 3 3839  
878 0 0 6 678 3610 0 0 497 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::has_depth_write
//       Access: Published
//  Description: Returns true if a depth-write adjustment has been
//               explicitly set on this particular node via
//               set_depth_write().  If this returns true, then
//               get_depth_write() may be called to determine which has
//               been set.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3755  
879 0 0 6 679 3610 0 0 540 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_depth_write
//       Access: Published
//  Description: Returns true if depth-write rendering has been
//               specifically set on this node via set_depth_write(), or
//               false if depth-write rendering has been specifically
//               disabled.  If nothing has been specifically set,
//               returns true.  See also has_depth_write().
//////////////////////////////////////////////////////////////////// 1 4 this 3 3755  
880 0 0 4 680 3642 0 0 906 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_depth_offset
//       Access: Published
//  Description: This instructs the graphics driver to apply an
//               offset or bias to the generated depth values for
//               rendered polygons, before they are written to the
//               depth buffer. This can be used to shift polygons
//               forward slightly, to resolve depth conflicts, or
//               self-shadowing artifacts on thin objects.
//               The bias is always an integer number, and each
//               integer increment represents the smallest possible
//               increment in Z that is sufficient to completely
//               resolve two coplanar polygons. Positive numbers
//               are closer towards the camera.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3839  4 bias 1 3611  8 priority 1 3611  
881 0 0 4 681 3642 0 0 351 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_depth_offset
//       Access: Published
//  Description: Completely removes any depth-offset adjustment that
//               may have been set on this node via set_depth_offset().
//////////////////////////////////////////////////////////////////// 1 4 this 3 3839  
882 0 0 6 682 3610 0 0 501 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::has_depth_offset
//       Access: Published
//  Description: Returns true if a depth-offset adjustment has been
//               explicitly set on this particular node via
//               set_depth_offset().  If this returns true, then
//               get_depth_offset() may be called to determine which has
//               been set.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3755  
883 0 0 6 683 3611 0 0 335 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_depth_offset
//       Access: Published
//  Description: Returns the depth offset value if it has been
//               specified using set_depth_offset, or 0 if not.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3755  
884 0 0 4 684 3642 0 0 414 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::do_billboard_axis
//       Access: Published
//  Description: Performs a billboard-type rotate to the indicated
//               camera node, one time only, and leaves the object
//               rotated.  This is similar in principle to heads_up().
//////////////////////////////////////////////////////////////////// 3 4 this 3 3839  6 camera 1 3755  6 offset 1 3622  
885 0 0 4 685 3642 0 0 546 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::do_billboard_point_eye
//       Access: Published
//  Description: Performs a billboard-type rotate to the indicated
//               camera node, one time only, and leaves the object
//               rotated.  This is similar in principle to look_at(),
//               although the point_eye billboard effect cannot be
//               achieved using the ordinary look_at() call.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3839  6 camera 1 3755  6 offset 1 3622  
886 0 0 4 686 3642 0 0 420 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::do_billboard_point_world
//       Access: Published
//  Description: Performs a billboard-type rotate to the indicated
//               camera node, one time only, and leaves the object
//               rotated.  This is similar in principle to look_at().
//////////////////////////////////////////////////////////////////// 3 4 this 3 3839  6 camera 1 3755  6 offset 1 3622  
887 0 0 4 687 3642 0 0 444 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_billboard_axis
//       Access: Published
//  Description: Puts a billboard transition on the node such that it
//               will rotate in two dimensions around the up axis,
//               towards a specified "camera" instead of to the
//               viewing camera.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3839  6 camera 1 3755  6 offset 1 3622  
888 0 0 4 687 3642 0 0 347 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_billboard_axis
//       Access: Published
//  Description: Puts a billboard transition on the node such that it
//               will rotate in two dimensions around the up axis.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3839  6 offset 1 3622  
889 0 0 4 688 3642 0 0 523 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_billboard_point_eye
//       Access: Published
//  Description: Puts a billboard transition on the node such that it
//               will rotate in three dimensions about the origin,
//               keeping its up vector oriented to the top of the
//               camera, towards a specified "camera" instead of to
//               the viewing camera.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3839  6 camera 1 3755  6 offset 1 3622  
890 0 0 4 688 3642 0 0 443 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_billboard_point_eye
//       Access: Published
//  Description: Puts a billboard transition on the node such that it
//               will rotate in three dimensions about the origin,
//               keeping its up vector oriented to the top of the
//               camera.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3839  6 offset 1 3622  
891 0 0 4 689 3642 0 0 494 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_billboard_point_world
//       Access: Published
//  Description: Puts a billboard transition on the node such that it
//               will rotate in three dimensions about the origin,
//               keeping its up vector oriented to the sky, towards a
//               specified "camera" instead of to the viewing camera.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3839  6 camera 1 3755  6 offset 1 3622  
892 0 0 4 689 3642 0 0 414 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_billboard_point_world
//       Access: Published
//  Description: Puts a billboard transition on the node such that it
//               will rotate in three dimensions about the origin,
//               keeping its up vector oriented to the sky.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3839  6 offset 1 3622  
893 0 0 4 690 3642 0 0 268 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_billboard
//       Access: Published
//  Description: Removes any billboard effect from the node.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3839  
894 0 0 6 691 3610 0 0 298 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::has_billboard
//       Access: Published
//  Description: Returns true if there is any billboard effect on
//               the node.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3755  
895 0 0 4 692 3642 0 0 459 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_compass
//       Access: Published
//  Description: Puts a compass effect on the node, so that it will
//               retain a fixed rotation relative to the reference
//               node (or render if the reference node is empty)
//               regardless of the transforms above it.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3839  9 reference 1 3755  
896 0 0 4 693 3642 0 0 264 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_compass
//       Access: Published
//  Description: Removes any compass effect from the node.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3839  
897 0 0 6 694 3610 0 0 294 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::has_compass
//       Access: Published
//  Description: Returns true if there is any compass effect on
//               the node.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3755  
898 0 0 4 695 3642 0 0 482 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_transparency
//       Access: Published
//  Description: Specifically sets or disables transparent rendering
//               mode on this particular node.  If no other nodes
//               override, this will cause items with a non-1 value
//               for alpha color to be rendered partially transparent.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3839  4 mode 1 3497  8 priority 1 3611  
899 0 0 4 696 3642 0 0 578 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_transparency
//       Access: Published
//  Description: Completely removes any transparency adjustment that
//               may have been set on this node via set_transparency().
//               The geometry at this level and below will
//               subsequently be rendered either transparent or not,
//               to whatever other nodes may have had
//               set_transparency() on them.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3839  
900 0 0 6 697 3610 0 0 594 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::has_transparency
//       Access: Published
//  Description: Returns true if a transparent-rendering adjustment
//               has been explicitly set on this particular node via
//               set_transparency().  If this returns true, then
//               get_transparency() may be called to determine whether
//               transparency has been explicitly enabled or
//               explicitly disabled for this node.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3755  
901 0 0 6 698 3497 0 0 701 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_transparency
//       Access: Published
//  Description: Returns the transparent rendering that has been
//               specifically set on this node via set_transparency(), or
//               M_none if nontransparent rendering has been specifically
//               set, or if nothing has been specifically set.  See
//               also has_transparency().  This does not necessarily
//               imply that the geometry will or will not be rendered
//               transparent, as there may be other nodes that override.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3755  
902 0 0 4 699 3642 0 0 340 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_antialias
//       Access: Published
//  Description: Specifies the antialiasing type that should be
//               applied at this node and below.  See AntialiasAttrib.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3839  4 mode 1 3680  8 priority 1 3611  
903 0 0 4 700 3642 0 0 339 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_antialias
//       Access: Published
//  Description: Completely removes any antialias setting that
//               may have been set on this node via set_antialias().
//////////////////////////////////////////////////////////////////// 1 4 this 3 3839  
904 0 0 6 701 3610 0 0 490 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::has_antialias
//       Access: Published
//  Description: Returns true if an antialias setting has been
//               explicitly mode on this particular node via
//               set_antialias().  If this returns true, then
//               get_antialias() may be called to determine what the
//               setting was.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3755  
905 0 0 6 702 3680 0 0 390 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_antialias
//       Access: Published
//  Description: Returns the antialias setting that has been
//               specifically set on this node via set_antialias(), or
//               M_none if no setting has been made.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3755  
906 0 0 6 703 3610 0 0 457 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::has_audio_volume
//       Access: Published
//  Description: Returns true if an audio volume has been applied
//               to the referenced node, false otherwise.  It is still
//               possible that volume at this node might have been
//               scaled by an ancestor node.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3755  
907 0 0 4 704 3642 0 0 504 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_audio_volume
//       Access: Published
//  Description: Completely removes any audio volume from the
//               referenced node.  This is preferable to simply
//               setting the audio volume to identity, as it also
//               removes the overhead associated with having an audio
//               volume at all.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3839  
908 0 0 4 705 3642 0 0 274 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_audio_volume
//       Access: Published
//  Description: Sets the audio volume component of the transform
//////////////////////////////////////////////////////////////////// 3 4 this 3 3839  6 volume 1 3622  8 priority 1 3611  
909 0 0 4 706 3642 0 0 787 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_audio_volume_off
//       Access: Published
//  Description: Disables any audio volume attribute inherited from
//               above.  This is not the same thing as
//               clear_audio_volume(), which undoes any previous
//               set_audio_volume() operation on this node; rather,
//               this actively disables any set_audio_volume() that
//               might be inherited from a parent node.
//
//               It is legal to specify a new volume on the same
//               node with a subsequent call to set_audio_volume();
//               this new scale will apply to lower nodes.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3839  8 priority 1 3611  
910 0 0 6 707 3622 0 0 460 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_audio_volume
//       Access: Published
//  Description: Returns the complete audio volume that has been
//               applied to this node via a previous call to
//               set_audio_volume(), or 1. (identity) if no volume has
//               been applied to this particular node.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3755  
911 0 0 6 708 3622 0 0 342 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_net_audio_volume
//       Access: Published
//  Description: Returns the complete audio volume for this node
//               taking highers nodes in the graph into account.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3755  
912 0 0 4 709 3642 0 0 649 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::adjust_all_priorities
//       Access: Published
//  Description: Adds the indicated adjustment amount (which may be
//               negative) to the priority for all transitions on the
//               referenced node, and for all nodes in the subgraph
//               below.  This can be used to force these nodes not to
//               be overridden by a high-level state change above.  If
//               the priority would drop below zero, it is set to
//               zero.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3839  10 adjustment 1 3611  
913 0 0 4 710 3642 0 0 493 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::show
//       Access: Published
//  Description: Undoes the effect of a previous hide() on this node:
//               makes the referenced node (and the entire subgraph
//               below this node) visible to all cameras.
//
//               This will not reveal the node if a parent node has
//               been hidden.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3839  
914 0 0 4 710 3642 0 0 526 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::show
//       Access: Published
//  Description: Makes the referenced node visible just to the
//               cameras whose camera_mask shares the indicated bits.
//
//               This undoes the effect of a previous hide() call.  It
//               will not reveal the node if a parent node has been
//               hidden.  However, see show_through().
//////////////////////////////////////////////////////////////////// 2 4 this 3 3839  11 camera_mask 1 3698  
915 0 0 4 711 3642 0 0 513 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::show_through
//       Access: Published
//  Description: Makes the referenced node visible just to the
//               cameras whose camera_mask shares the indicated bits.
//
//               Unlike show(), this will reveal the node even if a
//               parent node has been hidden, thus "showing through" a
//               parent's hide().
//////////////////////////////////////////////////////////////////// 1 4 this 3 3839  
916 0 0 4 711 3642 0 0 705 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::show_through
//       Access: Published
//  Description: Makes the referenced node visible just to the
//               cameras whose camera_mask shares the indicated bits.
//
//               Unlike show(), this will reveal the node even if a
//               parent node has been hidden via the one-parameter
//               hide() method, thus "showing through" a parent's
//               hide().  (However, it will not show through a
//               parent's hide() call if the no-parameter form of
//               hide() was used.)
//////////////////////////////////////////////////////////////////// 2 4 this 3 3839  11 camera_mask 1 3698  
917 0 0 4 712 3642 0 0 533 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::hide
//       Access: Published
//  Description: Makes the referenced node (and the entire subgraph
//               below this node) invisible to all cameras.  It
//               remains part of the scene graph, its bounding volume
//               still contributes to its parent's bounding volume,
//               and it will still be involved in collision tests.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3839  
918 0 0 4 712 3642 0 0 604 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::hide
//       Access: Published
//  Description: Makes the referenced node invisible just to the
//               cameras whose camera_mask shares the indicated bits.
//
//               This will also hide any nodes below this node in the
//               scene graph, including those nodes for which show()
//               has been called, but it will not hide descendent
//               nodes for which show_through() has been called.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3839  11 camera_mask 1 3698  
919 0 0 6 713 3610 0 0 380 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::is_hidden
//       Access: Published
//  Description: Returns true if the referenced node is hidden from
//               the indicated camera(s) either directly, or because
//               some ancestor is hidden.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3755  11 camera_mask 1 3698  
920 0 0 7 714 3839 2604 0 478 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_hidden_ancestor
//       Access: Published
//  Description: Returns the NodePath at or above the referenced node
//               that is hidden to the indicated camera(s), or an
//               empty NodePath if no ancestor of the referenced node
//               is hidden (and the node should be visible).
//////////////////////////////////////////////////////////////////// 3 4 this 3 3755  11 camera_mask 1 3698  14 current_thread 1 3691  
921 0 0 4 715 3642 0 0 819 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::stash
//       Access: Published
//  Description: Removes the referenced node (and the entire subgraph
//               below this node) from the scene graph in any normal
//               sense.  The node will no longer be visible and is not
//               tested for collisions; furthermore, no normal scene
//               graph traversal will visit the node.  The node's
//               bounding volume no longer contributes to its parent's
//               bounding volume.
//
//               A stashed node cannot be located by a normal find()
//               operation (although a special find string can still
//               retrieve it).
//////////////////////////////////////////////////////////////////// 3 4 this 3 3839  4 sort 1 3611  14 current_thread 1 3691  
922 0 0 4 716 3642 0 0 425 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::unstash
//       Access: Published
//  Description: Undoes the effect of a previous stash() on this
//               node: makes the referenced node (and the entire
//               subgraph below this node) once again part of the
//               scene graph.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3839  4 sort 1 3611  14 current_thread 1 3691  
923 0 0 4 717 3642 0 0 269 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::unstash_all
//       Access: Published
//  Description: Unstashes this node and all stashed child nodes.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3839  14 current_thread 1 3691  
924 0 0 6 718 3610 0 0 337 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::is_stashed
//       Access: Published
//  Description: Returns true if the referenced node is stashed either
//               directly, or because some ancestor is stashed.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3755  
925 0 0 7 719 3839 2604 0 454 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_stashed_ancestor
//       Access: Published
//  Description: Returns the NodePath at or above the referenced node
//               that is stashed, or an empty NodePath if no ancestor
//               of the referenced node is stashed (and the node should
//               be visible).
//////////////////////////////////////////////////////////////////// 2 4 this 3 3755  14 current_thread 1 3691  
926 0 0 7 720 3699 0 0 600 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_collide_mask
//       Access: Published
//  Description: Returns the union of all of the into_collide_masks
//               for nodes at this level and below.  This is the same
//               thing as node()->get_net_collide_mask().
//
//               If you want to return what the into_collide_mask of
//               this node itself is, without regard to its children,
//               use node()->get_into_collide_mask().
//////////////////////////////////////////////////////////////////// 1 4 this 3 3755  
927 0 0 4 721 3642 0 0 839 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_collide_mask
//       Access: Published
//  Description: Recursively applies the indicated CollideMask to the
//               into_collide_masks for all nodes at this level and
//               below.  If node_type is not TypeHandle::none(), then
//               only nodes matching (or inheriting from) the
//               indicated PandaNode subclass are modified.
//
//               The default is to change all bits, but if
//               bits_to_change is not all bits on, then only the bits
//               that are set in bits_to_change are modified, allowing
//               this call to change only a subset of the bits in the
//               subgraph.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3839  8 new_mask 1 3699  14 bits_to_change 1 3699  9 node_type 1 3649  
928 0 0 6 722 3610 0 0 21 // Comparison methods 2 4 this 3 3755  5 other 1 3755  
929 0 0 6 723 3610 0 0 0 2 4 this 3 3755  5 other 1 3755  
930 0 0 6 724 3610 0 0 0 2 4 this 3 3755  5 other 1 3755  
931 0 0 6 725 3611 0 0 830 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::compare_to
//       Access: Published
//  Description: Returns a number less than zero if this NodePath
//               sorts before the other one, greater than zero if it
//               sorts after, or zero if they are equivalent.
//
//               Two NodePaths are considered equivalent if they
//               consist of exactly the same list of nodes in the same
//               order.  Otherwise, they are different; different
//               NodePaths will be ranked in a consistent but
//               undefined ordering; the ordering is useful only for
//               placing the NodePaths in a sorted container like an
//               STL set.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3755  5 other 1 3755  
932 0 0 6 726 3610 0 0 335 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::verify_complete
//       Access: Published
//  Description: Returns true if all of the nodes described in the
//               NodePath are connected, or false otherwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3755  14 current_thread 1 3691  
933 0 0 4 727 3642 0 0 749 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::premunge_scene
//       Access: Published
//  Description: Walks through the scene graph beginning at the bottom
//               node, and internally adjusts any GeomVertexFormats
//               for optimal rendering on the indicated GSG.  If this
//               step is not done prior to rendering, the formats will
//               be optimized at render time instead, for a small
//               cost.
//
//               It is not normally necessary to do this on a model
//               loaded directly from disk, since the loader will do
//               this by default.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3839  3 gsg 1 3701  
934 0 0 4 728 3642 0 0 823 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::prepare_scene
//       Access: Published
//  Description: Walks through the scene graph beginning at the bottom
//               node, and does whatever initialization is required to
//               render the scene properly with the indicated GSG.  It
//               is not strictly necessary to call this, since the GSG
//               will initialize itself when the scene is rendered,
//               but this may take some of the overhead away from that
//               process.
//
//               In particular, this will ensure that textures and
//               vertex buffers within the scene are loaded into
//               graphics memory.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3839  3 gsg 1 3701  
935 0 0 4 729 3642 0 0 542 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::show_bounds
//       Access: Published
//  Description: Causes the bounding volume of the bottom node and all
//               of its descendants (that is, the bounding volume
//               associated with the the bottom arc) to be rendered,
//               if possible.  The rendering method is less than
//               optimal; this is intended primarily for debugging.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3839  
936 0 0 4 730 3642 0 0 580 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::show_tight_bounds
//       Access: Published
//  Description: Similar to show_bounds(), this draws a bounding box
//               representing the "tight" bounds of this node and all
//               of its descendants.  The bounding box is recomputed
//               every frame by reexamining all of the vertices; this
//               is far from efficient, but this is intended for
//               debugging.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3839  
937 0 0 4 731 3642 0 0 306 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::hide_bounds
//       Access: Published
//  Description: Stops the rendering of the bounding volume begun with
//               show_bounds().
//////////////////////////////////////////////////////////////////// 1 4 this 3 3839  
938 0 0 7 732 3880 0 0 468 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_bounds
//       Access: Published
//  Description: Returns a newly-allocated bounding volume containing
//               the bottom node and all of its descendants.  This is
//               the bounding volume on the bottom arc, converted to
//               the local coordinate space of the node.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3755  14 current_thread 1 3691  
939 0 0 4 733 3642 0 0 890 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::force_recompute_bounds
//       Access: Published
//  Description: Forces the recomputing of all the bounding volumes at
//               every node in the subgraph beginning at this node and
//               below.
//
//               This should not normally need to be called, since the
//               bounding volumes are supposed to be recomputed
//               automatically when necessary.  It may be useful when
//               debugging, to verify that the bounding volumes have
//               not become inadvertently stale; it may also be useful
//               to force animated characters to update their bounding
//               volumes (which does not presently happen
//               automatically).
//////////////////////////////////////////////////////////////////// 1 4 this 3 3839  
940 0 0 4 734 3642 0 0 385 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::write_bounds
//       Access: Published
//  Description: Writes a description of the bounding volume
//               containing the bottom node and all of its descendants
//               to the indicated output stream.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3755  3 out 1 3646  
941 0 0 6 735 3610 0 0 1132 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::calc_tight_bounds
//       Access: Published
//  Description: Calculates the minimum and maximum vertices of all
//               Geoms at this NodePath's bottom node and below.  This
//               is a tight bounding box; it will generally be tighter
//               than the bounding volume returned by get_bounds()
//               (but it is more expensive to compute).
//
//               The bounding box is computed relative to the parent
//               node's coordinate system by default.  You can
//               optionally specify a different NodePath to compute
//               the bounds relative to.  Note that the box is always
//               axis-aligned against the given NodePath's coordinate
//               system, so you might get a differently sized box
//               depending on which node you pass.
//
//               The return value is true if any points are within the
//               bounding volume, or false if none are.
//////////////////////////////////////////////////////////////////// 5 4 this 3 3755  9 min_point 1 3841  9 max_point 1 3841  5 other 1 3755  14 current_thread 1 3691  
942 0 0 6 736 3643 0 0 0 2 4 this 3 3755  5 other 1 3755  
943 0 0 6 737 3611 0 0 1259 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::flatten_light
//       Access: Published
//  Description: Lightly flattens out the hierarchy below this node by
//               applying transforms, colors, and texture matrices
//               from the nodes onto the vertices, but does not remove
//               any nodes.
//
//               This can result in improved rendering performance
//               because there will be fewer transforms in the
//               resulting scene graph, but the number of nodes will
//               remain the same.
//
//               In particular, any NodePaths that reference nodes
//               within this hierarchy will not be damaged.  However,
//               since this operation will remove transforms from the
//               scene graph, it may be dangerous to apply to nodes
//               where you expect to dynamically modify the transform,
//               or where you expect the geometry to remain in a
//               particular local coordinate system.
//
//               The return value is always 0, since flatten_light
//               does not remove any nodes.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3839  
944 0 0 6 738 3611 0 0 836 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::flatten_medium
//       Access: Published
//  Description: A more thorough flattening than flatten_light(), this
//               first applies all the transforms, colors, and texture
//               matrices from the nodes onto the vertices, and then
//               removes unneeded grouping nodes--nodes that have
//               exactly one child, for instance, but have no special
//               properties in themselves.
//
//               This results in improved performance over
//               flatten_light() because the number of nodes in the
//               scene graph is reduced.
//
//               The return value is the number of nodes removed.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3839  
945 0 0 6 739 3611 0 0 1005 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::flatten_strong
//       Access: Published
//  Description: The strongest possible flattening.  This first
//               applies all of the transforms to the vertices, as in
//               flatten_medium(), but then it will combine sibling
//               nodes together when possible, in addition to removing
//               unnecessary parent-child nodes.  This can result in
//               substantially fewer nodes, but any nicely-grouped
//               hierachical bounding volumes may be lost.
//
//               It is generally a good idea to apply this kind of
//               flattening only to nodes that will be culled largely
//               as a single unit, like a car.  Applying this to an
//               entire scene may result in overall poorer performance
//               because of less-effective culling.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3839  
946 0 0 4 740 3642 0 0 1105 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::apply_texture_colors
//       Access: Published
//  Description: Removes textures from Geoms at this node and below by
//               applying the texture colors to the vertices.  This is
//               primarily useful to simplify a low-LOD model.  The
//               texture colors are replaced by flat colors that
//               approximate the original textures.
//
//               Only the bottommost texture on each Geom is used (if
//               there is more than one), and it is applied as if it
//               were M_modulate, and WM_repeat, regardless of its
//               actual settings.  If the texture has a
//               simple_ram_image, this may be used if the main image
//               isn't resident.
//
//               After this call, there will be no texturing specified
//               at this level and below.  Of course, there might
//               still be texturing inherited from above.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3839  
947 0 0 6 741 3611 0 0 604 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_model_nodes
//       Access: Published
//  Description: Recursively walks through the scene graph at this
//               level and below, looking for ModelNodes, and calls
//               model_node->set_preserve_transform(PT_drop_node) on
//               each one.  This allows a subsequent call to
//               flatten_strong() to eliminate all of the ModelNodes.
//
//               Returns the number of ModelNodes found.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3839  
948 0 0 4 742 3642 0 0 700 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_tag
//       Access: Published
//  Description: Associates a user-defined value with a user-defined
//               key which is stored on the node.  This value has no
//               meaning to Panda; but it is stored indefinitely on
//               the node until it is requested again.
//
//               Each unique key stores a different string value.
//               There is no effective limit on the number of
//               different keys that may be stored or on the length of
//               any one key's value.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3839  3 key 1 3687  5 value 1 3687  
949 0 0 6 743 3687 0 0 458 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_tag
//       Access: Published
//  Description: Retrieves the user-defined value that was previously
//               set on this node for the particular key, if any.  If
//               no value has been previously set, returns the empty
//               string.  See also get_net_tag().
//////////////////////////////////////////////////////////////////// 2 4 this 3 3755  3 key 1 3687  
950 0 0 6 744 3643 0 0 0 1 4 this 3 3755  
951 0 0 4 744 3642 0 0 505 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_tag_keys
//       Access: Published
//  Description: Fills the given vector up with the
//               list of tags on this PandaNode.
//
//               It is the user's responsibility to ensure that the
//               keys vector is empty before making this call;
//               otherwise, the new files will be appended to it.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3755  4 keys 1 3693  
952 0 0 6 745 3610 0 0 445 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::has_tag
//       Access: Published
//  Description: Returns true if a value has been defined on this node
//               for the particular key (even if that value is the
//               empty string), or false if no value has been set.
//               See also has_net_tag().
//////////////////////////////////////////////////////////////////// 2 4 this 3 3755  3 key 1 3687  
953 0 0 4 746 3642 0 0 397 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_tag
//       Access: Published
//  Description: Removes the value defined for this key on this
//               particular node.  After a call to clear_tag(),
//               has_tag() will return false for the indicated key.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3839  3 key 1 3687  
954 0 0 6 747 3687 0 0 519 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_net_tag
//       Access: Published
//  Description: Returns the tag value that has been defined on this
//               node, or the nearest ancestor node, for the indicated
//               key.  If no value has been defined for the indicated
//               key on any ancestor node, returns the empty string.
//               See also get_tag().
//////////////////////////////////////////////////////////////////// 2 4 this 3 3755  3 key 1 3687  
955 0 0 6 748 3610 0 0 390 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::has_net_tag
//       Access: Published
//  Description: Returns true if the indicated tag value has been
//               defined on this node or on any ancestor node, or
//               false otherwise.  See also has_tag().
//////////////////////////////////////////////////////////////////// 2 4 this 3 3755  3 key 1 3687  
956 0 0 7 749 3839 2604 0 471 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::find_net_tag
//       Access: Published
//  Description: Returns the lowest ancestor of this node that
//               contains a tag definition with the indicated key, if
//               any, or an empty NodePath if no ancestor of this node
//               contains this tag definition.  See set_tag().
//////////////////////////////////////////////////////////////////// 2 4 this 3 3755  3 key 1 3687  
957 0 0 4 750 3642 0 0 0 3 4 this 3 3839  3 key 1 3687  5 value 1 3643  
958 0 0 6 751 3643 0 0 0 2 4 this 3 3755  3 key 1 3687  
959 0 0 6 752 3643 0 0 0 1 4 this 3 3755  
960 0 0 4 752 3642 0 0 0 2 4 this 3 3755  4 keys 1 3693  
961 0 0 6 753 3610 0 0 0 2 4 this 3 3755  3 key 1 3687  
962 0 0 4 754 3642 0 0 0 2 4 this 3 3839  3 key 1 3687  
963 0 0 6 755 3643 0 0 0 2 4 this 3 3755  3 key 1 3687  
964 0 0 6 756 3610 0 0 0 2 4 this 3 3755  3 key 1 3687  
965 0 0 7 757 3839 2604 0 0 2 4 this 3 3755  3 key 1 3687  
966 0 0 4 758 3642 0 0 389 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::list_tags
//       Access: Published
//  Description: Lists the tags to the nout stream, one per line.  See
//               PandaNode::list_tags() for a variant that allows you
//               to specify the output stream.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3755  
967 0 0 4 759 3642 0 0 258 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_name
//       Access: Published
//  Description: Changes the name of the referenced node.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3839  4 name 1 3687  
968 0 0 6 760 3687 0 0 258 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_name
//       Access: Published
//  Description: Returns the name of the referenced node.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3755  
969 0 0 6 761 3610 0 0 504 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::write_bam_file
//       Access: Published
//  Description: Writes the contents of this node and below out to a
//               bam file with the indicated filename.  This file may
//               then be read in again, as is, at some later point.
//               Returns true if successful, false on some kind of
//               error.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3755  8 filename 1 3881  
970 0 0 6 762 3610 0 0 314 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::write_bam_stream
//       Access: Published
//  Description: Writes the contents of this node and below out to the
//               indicated stream.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3755  3 out 1 3646  
971 0 0 6 763 3687 0 0 595 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::encode_to_bam_stream
//       Access: Published
//  Description: Converts the NodePath object into a single
//               stream of data using a BamWriter, and returns that
//               data as a string string.  Returns empty string on
//               failure.  This is similar to write_bam_stream().
//
//               This method is used by __reduce__ to handle streaming
//               of NodePaths to a pickle file.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3755  
972 0 0 6 763 3610 0 0 1580 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::encode_to_bam_stream
//       Access: Published
//  Description: Converts the NodePath object into a single
//               stream of data using a BamWriter, and stores that
//               data in the indicated string.  Returns true on
//               success, false on failure.
//
//               If the BamWriter is NULL, this behaves the same way
//               as NodePath::write_bam_stream() and
//               PandaNode::encode_to_bam_stream(), in the sense that
//               it only writes this node and all nodes below it.
//
//               However, if the BamWriter is not NULL, it behaves
//               very differently.  In this case, it encodes the
//               *entire graph* of all nodes connected to the
//               NodePath, including all parent nodes and siblings.
//               This is necessary for correct streaming of related
//               NodePaths and restoration of instances, etc., but it
//               does mean you must detach() a node before writing it
//               if you want to limit the nodes that get written.
//
//               This method is used by __reduce__ to handle streaming
//               of NodePaths to a pickle file.  The BamWriter case is
//               used by the direct.stdpy.pickle module, while the
//               saner, non-BamWriter case is used when the standard
//               pickle module calls this function.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3755  4 data 1 3884  6 writer 1 3887  
973 0 0 7 764 3839 2604 0 439 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::decode_from_bam_stream
//       Access: Published, Static
//  Description: Reads the string created by a previous call to
//               encode_to_bam_stream(), and extracts and
//               returns the NodePath on that string.  Returns NULL on
//               error.
//////////////////////////////////////////////////////////////////// 2 4 data 1 3687  6 reader 1 3710  
974 0 0 7 765 3649 0 0 0 0 
975 0 0 6 435 3610 0 0 0 1 4 this 3 3755  
976 0 0 4 768 3642 0 0 919 ////////////////////////////////////////////////////////////////////
//     Function: AttribNodeRegistry::add_node
//       Access: Published
//  Description: Adds the indicated NodePath to the registry.  The
//               name and type of the node are noted at the time of
//               this call; if the name changes later, it will not
//               update the registry index.
//
//               The NodePath must reference some kind of an attribute
//               node, such as a LightNode or a PlaneNode.  When bam
//               files that reference an attribute node of the same
//               type and the same name are loaded, they will quietly
//               be redirected to reference this NodePath.
//
//               If there is already a node matching the indicated
//               name and type, it will be replaced.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3889  11 attrib_node 1 3755  
977 0 0 6 769 3610 0 0 629 ////////////////////////////////////////////////////////////////////
//     Function: AttribNodeRegistry::remove_node
//       Access: Published
//  Description: Removes the indicated NodePath from the registry.
//               The name of the node must not have changed since the
//               matching call to add_node(), or it will not be
//               successfully removed.
//
//               Returns true if the NodePath is found and removed,
//               false if it is not found (for instance, because the
//               name has changed).
//////////////////////////////////////////////////////////////////// 2 4 this 3 3889  11 attrib_node 1 3755  
978 0 0 4 769 3642 0 0 270 ////////////////////////////////////////////////////////////////////
//     Function: AttribNodeRegistry::remove_node
//       Access: Published
//  Description: Removes the nth node from the registry.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3889  1 n 1 3611  
979 0 0 7 770 3839 2604 0 480 ////////////////////////////////////////////////////////////////////
//     Function: AttribNodeRegistry::lookup_node
//       Access: Published
//  Description: Looks up the indicated NodePath in the registry.  If
//               there is a node already in the registry with the
//               matching name and type, returns that NodePath
//               instead; otherwise, returns the original NodePath.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3890  9 orig_node 1 3755  
980 0 0 6 771 3611 0 0 283 ////////////////////////////////////////////////////////////////////
//     Function: AttribNodeRegistry::get_num_nodes
//       Access: Published
//  Description: Returns the total number of nodes in the registry.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3890  
981 0 0 7 772 3839 2604 0 278 ////////////////////////////////////////////////////////////////////
//     Function: AttribNodeRegistry::get_node
//       Access: Published
//  Description: Returns the nth NodePath recorded in the registry.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3890  1 n 1 3611  
982 0 0 7 773 3649 0 0 312 ////////////////////////////////////////////////////////////////////
//     Function: AttribNodeRegistry::get_node_type
//       Access: Published
//  Description: Returns the type of the nth node, as recorded in the
//               registry.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3890  1 n 1 3611  
983 0 0 6 774 3687 0 0 520 ////////////////////////////////////////////////////////////////////
//     Function: AttribNodeRegistry::get_node_name
//       Access: Published
//  Description: Returns the name of the nth node, as recorded in the
//               registry.  This will be the node name as it was at
//               the time the node was recorded; if the node has
//               changed names since then, this will still return the
//               original name.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3890  1 n 1 3611  
984 0 0 6 775 3611 0 0 521 ////////////////////////////////////////////////////////////////////
//     Function: AttribNodeRegistry::find_node
//       Access: Published
//  Description: Returns the index number of the indicated NodePath in
//               the registry (assuming its name hasn't changed since
//               it was recorded in the registry), or -1 if the
//               NodePath cannot be found (for instance, because its
//               name has changed).
//////////////////////////////////////////////////////////////////// 2 4 this 3 3890  11 attrib_node 1 3755  
985 0 0 6 775 3611 0 0 397 ////////////////////////////////////////////////////////////////////
//     Function: AttribNodeRegistry::find_node
//       Access: Published
//  Description: Returns the index number of the node with the
//               indicated type and name in the registry, or -1 if
//               there is no such node in the registry.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3890  4 type 1 3649  4 name 1 3687  
986 0 0 4 776 3642 0 0 261 ////////////////////////////////////////////////////////////////////
//     Function: AttribNodeRegistry::clear
//       Access: Published
//  Description: Removes all nodes from the registry.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3889  
987 0 0 4 777 3642 0 0 226 ////////////////////////////////////////////////////////////////////
//     Function: AttribNodeRegistry::output
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3890  3 out 1 3646  
988 0 0 4 778 3642 0 0 225 ////////////////////////////////////////////////////////////////////
//     Function: AttribNodeRegistry::write
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3890  3 out 1 3646  
989 0 0 6 779 3889 0 0 242 ////////////////////////////////////////////////////////////////////
//     Function: AttribNodeRegistry::get_global_ptr
//       Access: Published, Static
//  Description: 
//////////////////////////////////////////////////////////////////// 0 
990 0 0 7 782 3654 0 0 283 ////////////////////////////////////////////////////////////////////
//     Function: AudioVolumeAttrib::make_identity
//       Access: Published, Static
//  Description: Constructs an identity audio volume attrib.
//////////////////////////////////////////////////////////////////// 0 
991 0 0 7 783 3654 0 0 359 ////////////////////////////////////////////////////////////////////
//     Function: AudioVolumeAttrib::make
//       Access: Published, Static
//  Description: Constructs a new AudioVolumeAttrib object that indicates
//               audio volume should be scaled by the indicated factor.
//////////////////////////////////////////////////////////////////// 1 6 volume 1 3622  
992 0 0 7 784 3654 0 0 482 ////////////////////////////////////////////////////////////////////
//     Function: AudioVolumeAttrib::make_off
//       Access: Published, Static
//  Description: Constructs a new AudioVolumeAttrib object that ignores
//               any AudioVolumeAttrib inherited from above.  You may
//               also specify an additional volume scale to apply to
//               geometry below (using set_volume()).
//////////////////////////////////////////////////////////////////// 0 
993 0 0 7 785 3654 0 0 404 ////////////////////////////////////////////////////////////////////
//     Function: AudioVolumeAttrib::make_default
//       Access: Published, Static
//  Description: Returns a RenderAttrib that corresponds to whatever
//               the standard default properties for render attributes
//               of this type ought to be.
//////////////////////////////////////////////////////////////////// 0 
994 0 0 6 786 3610 0 0 529 ////////////////////////////////////////////////////////////////////
//     Function: AudioVolumeAttrib::is_off
//       Access: Published
//  Description: Returns true if the AudioVolumeAttrib will ignore any
//               color scales inherited from above, false otherwise.
//               This is not the same thing as !has_scale(); a
//               AudioVolumeAttrib may have the "off" flag set and also
//               have another scale specified.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3892  
995 0 0 6 787 3610 0 0 408 ////////////////////////////////////////////////////////////////////
//     Function: AudioVolumeAttrib::has_volume
//       Access: Published
//  Description: Returns true if the AudioVolumeAttrib has a
//               non-identity volume, false otherwise (in which case it
//               might be an off attrib or an identity attrib).
//////////////////////////////////////////////////////////////////// 1 4 this 3 3892  
996 0 0 6 788 3622 0 0 272 ////////////////////////////////////////////////////////////////////
//     Function: AudioVolumeAttrib::get_volume
//       Access: Published
//  Description: Returns the volume to be applied to sounds.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3892  
997 0 0 7 789 3654 0 0 350 ////////////////////////////////////////////////////////////////////
//     Function: AudioVolumeAttrib::set_volume
//       Access: Published
//  Description: Returns a new AudioVolumeAttrib, just like this one, but
//               with the volume changed to the indicated value.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3892  6 volume 1 3622  
998 0 0 6 790 3611 0 0 0 0 
999 0 0 7 791 3649 0 0 0 0 
1000 0 0 7 795 3654 0 0 277 ////////////////////////////////////////////////////////////////////
//     Function: AuxBitplaneAttrib::make
//       Access: Published, Static
//  Description: Constructs a default AuxBitplaneAttrib object.
//////////////////////////////////////////////////////////////////// 0 
1001 0 0 7 795 3654 0 0 279 ////////////////////////////////////////////////////////////////////
//     Function: AuxBitplaneAttrib::make
//       Access: Published, Static
//  Description: Constructs a specified AuxBitplaneAttrib object.
//////////////////////////////////////////////////////////////////// 1 7 outputs 1 3611  
1002 0 0 7 796 3654 0 0 404 ////////////////////////////////////////////////////////////////////
//     Function: AuxBitplaneAttrib::make_default
//       Access: Published, Static
//  Description: Returns a RenderAttrib that corresponds to whatever
//               the standard default properties for render attributes
//               of this type ought to be.
//////////////////////////////////////////////////////////////////// 0 
1003 0 0 6 797 3611 0 0 272 ////////////////////////////////////////////////////////////////////
//     Function: AuxBitplaneAttrib::get_outputs
//       Access: Published
//  Description: Returns the AuxBitplaneAttrib output bits.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3894  
1004 0 0 6 798 3611 0 0 0 0 
1005 0 0 7 799 3649 0 0 0 0 
1006 0 0 4 803 3642 0 0 402 ////////////////////////////////////////////////////////////////////
//     Function: AuxSceneData::set_duration
//       Access: Public
//  Description: Specifies the minimum length in time, in seconds, to
//               keep this AuxSceneData object around in the scene
//               graph after the last time it was rendered.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3896  8 duration 1 3897  
1007 0 0 6 804 3897 0 0 400 ////////////////////////////////////////////////////////////////////
//     Function: AuxSceneData::get_duration
//       Access: Public
//  Description: Returns the minimum length in time, in seconds, to
//               keep this AuxSceneData object around in the scene
//               graph after the last time it was rendered.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3898  
1008 0 0 4 805 3642 0 0 345 ////////////////////////////////////////////////////////////////////
//     Function: AuxSceneData::set_last_render_time
//       Access: Public
//  Description: Should be called with the current frame_time each
//               time the AuxSceneData is used during traversal.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3896  11 render_time 1 3897  
1009 0 0 6 806 3897 0 0 346 ////////////////////////////////////////////////////////////////////
//     Function: AuxSceneData::get_last_render_time
//       Access: Public
//  Description: Returns the last time this object was used during
//               traversal (according to set_last_render_time()).
//////////////////////////////////////////////////////////////////// 1 4 this 3 3898  
1010 0 0 6 807 3897 0 0 379 ////////////////////////////////////////////////////////////////////
//     Function: AuxSceneData::get_expiration_time
//       Access: Public
//  Description: Returns the frame_time at which this AuxSceneData
//               object is currently scheduled to be removed from the
//               scene graph.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3898  
1011 0 0 4 808 3642 0 0 229 ////////////////////////////////////////////////////////////////////
//     Function: AuxSceneData::output
//       Access: Published, Virtual
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3898  3 out 1 3646  
1012 0 0 4 809 3642 0 0 228 ////////////////////////////////////////////////////////////////////
//     Function: AuxSceneData::write
//       Access: Published, Virtual
//  Description: 
//////////////////////////////////////////////////////////////////// 3 4 this 3 3898  3 out 1 3646  12 indent_level 1 3611  
1013 0 0 7 810 3649 0 0 0 0 
1014 0 0 7 814 3900 2645 0 216 ////////////////////////////////////////////////////////////////////
//     Function: BamFile::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
1015 0 0 6 816 3610 0 0 328 ////////////////////////////////////////////////////////////////////
//     Function: BamFile::open_read
//       Access: Public
//  Description: Attempts to open the indicated filename for reading.
//               Returns true if successful, false on error.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3900  12 bam_filename 1 3881  13 report_errors 1 3610  
1016 0 0 6 816 3610 0 0 395 ////////////////////////////////////////////////////////////////////
//     Function: BamFile::open_read
//       Access: Public
//  Description: Attempts to open the indicated stream for reading.
//               The filename is just for information purposes only.
//               Returns true if successful, false on error.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3900  2 in 1 3901  12 bam_filename 1 3687  13 report_errors 1 3610  
1017 0 0 6 817 3903 0 0 592 ////////////////////////////////////////////////////////////////////
//     Function: BamFile::read_object
//       Access: Public
//  Description: Reads and returns the next object from the Bam file,
//               or NULL if the end of the file has been reached, or
//               if there is an error condition.  Use is_eof() to
//               differentiate these two cases.
//
//               The pointers returned by this method will not be
//               valid for use until resolve() is subsequently called.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3900  
1018 0 0 6 818 3610 0 0 370 ////////////////////////////////////////////////////////////////////
//     Function: BamFile::is_eof
//       Access: Public
//  Description: Returns true if the reader has reached end-of-file,
//               false otherwise.  This call is only valid after a
//               call to read_object().
//////////////////////////////////////////////////////////////////// 1 4 this 3 3905  
1019 0 0 6 819 3610 0 0 650 ////////////////////////////////////////////////////////////////////
//     Function: BamFile::resolve
//       Access: Public
//  Description: This must be called after one or more objects have
//               been read via calls to read_object() in order to
//               resolve all internal pointer references in the
//               objects read and make all the pointers valid.  It
//               returns true if all objects are successfully
//               resolved, or false if some have not been (in which
//               case you must call resolve() again later).
//////////////////////////////////////////////////////////////////// 1 4 this 3 3900  
1020 0 0 7 820 3688 2111 0 1170 ////////////////////////////////////////////////////////////////////
//     Function: BamFile::read_node
//       Access: Public
//  Description: Although the bam file format is general enough to
//               store a list of objects of arbitrary type, bam files
//               on disk usually contain just one object, a PandaNode
//               that is the root of a scene graph.  (Bam files that
//               store other kinds of things are usually given the
//               extension "boo", for "binary other objects", to
//               differentiate them from the normal scene graph type
//               file.)
//
//               This is a convenience method for when you believe you
//               are reading a scene graph bam file.  It reads the one
//               PandaNode and returns it.  It also calls resolve() to
//               fully resolve the object, since we expect this will
//               be the only object in the file.
//
//               If the bam file contains something other than a
//               PandaNode, an error is printed and NULL is returned.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3900  13 report_errors 1 3610  
1021 0 0 6 821 3610 0 0 440 ////////////////////////////////////////////////////////////////////
//     Function: BamFile::open_write
//       Access: Public
//  Description: Attempts to open the indicated file for writing.  If
//               another file by the same name already exists, it will
//               be silently removed.  Returns true if successful,
//               false otherwise.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3900  12 bam_filename 1 3881  13 report_errors 1 3610  
1022 0 0 6 821 3610 0 0 396 ////////////////////////////////////////////////////////////////////
//     Function: BamFile::open_write
//       Access: Public
//  Description: Attempts to open the indicated stream for writing.
//               The filename is just for information purposes only.
//               Returns true if successful, false on error.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3900  3 out 1 3646  12 bam_filename 1 3687  13 report_errors 1 3610  
1023 0 0 6 822 3610 0 0 324 ////////////////////////////////////////////////////////////////////
//     Function: BamFile::write_object
//       Access: Public
//  Description: Writes the indicated object to the Bam file.  Returns
//               true if successful, false on error.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3900  6 object 1 3907  
1024 0 0 4 823 3642 0 0 245 ////////////////////////////////////////////////////////////////////
//     Function: BamFile::close
//       Access: Public
//  Description: Closes the input or output stream.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3900  
1025 0 0 6 824 3610 0 0 363 ////////////////////////////////////////////////////////////////////
//     Function: BamFile::is_valid_read
//       Access: Public
//  Description: Returns true if the Bam file is open and ready for
//               reading with no errors so far detected, or false
//               otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3905  
1026 0 0 6 825 3610 0 0 364 ////////////////////////////////////////////////////////////////////
//     Function: BamFile::is_valid_write
//       Access: Public
//  Description: Returns true if the Bam file is open and ready for
//               writing with no errors so far detected, or false
//               otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3905  
1027 0 0 6 826 3611 0 0 426 ////////////////////////////////////////////////////////////////////
//     Function: BamFile::get_file_major_ver
//       Access: Public
//  Description: Returns the major version number of the file
//               currently being read, or the system current major
//               version number if no file is currently open for
//               reading.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3900  
1028 0 0 6 827 3611 0 0 426 ////////////////////////////////////////////////////////////////////
//     Function: BamFile::get_file_minor_ver
//       Access: Public
//  Description: Returns the minor version number of the file
//               currently being read, or the system current minor
//               version number if no file is currently open for
//               reading.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3900  
1029 0 0 6 828 3909 0 0 326 ////////////////////////////////////////////////////////////////////
//     Function: BamFile::get_file_endian
//       Access: Public
//  Description: Returns the endian preference indicated by the Bam
//               file currently being read or written.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3905  
1030 0 0 6 829 3610 0 0 372 ////////////////////////////////////////////////////////////////////
//     Function: BamFile::get_file_stdfloat_double
//       Access: Public
//  Description: Returns true if the file stores all "standard"
//               floats as 64-bit doubles, or false if they are 32-bit
//               floats.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3905  
1031 0 0 6 830 3611 0 0 386 ////////////////////////////////////////////////////////////////////
//     Function: BamFile::get_current_major_ver
//       Access: Public
//  Description: Returns the system current major version number.
//               This is the version number that will be assigned to
//               any generated Bam files.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3900  
1032 0 0 6 831 3611 0 0 386 ////////////////////////////////////////////////////////////////////
//     Function: BamFile::get_current_minor_ver
//       Access: Public
//  Description: Returns the system current minor version number.
//               This is the version number that will be assigned to
//               any generated Bam files.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3900  
1033 0 0 6 832 3710 0 0 370 ////////////////////////////////////////////////////////////////////
//     Function: BamFile::get_reader
//       Access: Public
//  Description: Returns the BamReader in charge of performing the
//               read operations.  This will return NULL unless
//               open_read() was called.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3900  
1034 0 0 6 833 3887 0 0 372 ////////////////////////////////////////////////////////////////////
//     Function: BamFile::get_writer
//       Access: Public
//  Description: Returns the BamWriter in charge of performing the
//               write operations.  This will return NULL unless
//               open_write() was called.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3900  
1035 0 0 7 835 3683 0 0 316 ////////////////////////////////////////////////////////////////////
//     Function: BillboardEffect::make
//       Access: Published, Static
//  Description: Constructs a new BillboardEffect object with the
//               indicated properties.
//////////////////////////////////////////////////////////////////// 6 9 up_vector 1 3848  12 eye_relative 1 3610  12 axial_rotate 1 3610  6 offset 1 3622  7 look_at 1 3755  13 look_at_point 1 3636  
1036 0 0 7 836 3683 0 0 316 ////////////////////////////////////////////////////////////////////
//     Function: BillboardEffect::make_axis
//       Access: Published, Static
//  Description: A convenience function to make a typical
//               axis-rotating billboard.
//////////////////////////////////////////////////////////////////// 0 
1037 0 0 7 837 3683 0 0 335 ////////////////////////////////////////////////////////////////////
//     Function: BillboardEffect::make_point_eye
//       Access: Published, Static
//  Description: A convenience function to make a typical
//               eye-relative point-rotating billboard.
//////////////////////////////////////////////////////////////////// 0 
1038 0 0 7 838 3683 0 0 339 ////////////////////////////////////////////////////////////////////
//     Function: BillboardEffect::make_point_world
//       Access: Published, Static
//  Description: A convenience function to make a typical
//               world-relative point-rotating billboard.
//////////////////////////////////////////////////////////////////// 0 
1039 0 0 6 839 3610 0 0 625 ////////////////////////////////////////////////////////////////////
//     Function: BillboardEffect::is_off
//       Access: Published
//  Description: Returns true if the BillboardEffect is an 'off'
//               BillboardEffect, indicating that it does not enable
//               billboarding.  This kind of BillboardEffect isn't
//               particularly useful and isn't normally created or
//               stored in the graph; it might be implicitly
//               discovered as the result of a
//               NodePath::get_rel_state().
//////////////////////////////////////////////////////////////////// 1 4 this 3 3910  
1040 0 0 6 840 3848 0 0 281 ////////////////////////////////////////////////////////////////////
//     Function: BillboardEffect::get_up_vector
//       Access: Published
//  Description: Returns the up vector in effect for this billboard.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3910  
1041 0 0 6 841 3610 0 0 387 ////////////////////////////////////////////////////////////////////
//     Function: BillboardEffect::get_eye_relative
//       Access: Published
//  Description: Returns true if this billboard interprets the up
//               vector relative to the camera, or false if it is
//               relative to the world.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3910  
1042 0 0 6 842 3610 0 0 395 ////////////////////////////////////////////////////////////////////
//     Function: BillboardEffect::get_axial_rotate
//       Access: Published
//  Description: Returns true if this billboard rotates only around
//               the axis of the up vector, or false if it rotates
//               freely in three dimensions.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3910  
1043 0 0 6 843 3622 0 0 465 ////////////////////////////////////////////////////////////////////
//     Function: BillboardEffect::get_offset
//       Access: Published
//  Description: Returns the distance toward the camera (or the
//               look_at_point) the billboard is moved towards, after
//               rotating.  This can be used to ensure the billboard
//               is not obscured by nearby geometry.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3910  
1044 0 0 6 844 3755 0 0 450 ////////////////////////////////////////////////////////////////////
//     Function: BillboardEffect::get_look_at
//       Access: Published
//  Description: Returns the node this billboard will rotate to look
//               towards.  If this is empty, it means the billboard
//               will rotate towards the current camera node, wherever
//               that might be.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3910  
1045 0 0 6 845 3636 0 0 386 ////////////////////////////////////////////////////////////////////
//     Function: BillboardEffect::get_look_at_point
//       Access: Published
//  Description: Returns the point, relative to the look_at node,
//               towards which the billboard will rotate.  Normally
//               this is (0, 0, 0).
//////////////////////////////////////////////////////////////////// 1 4 this 3 3910  
1046 0 0 7 846 3649 0 0 0 0 
1047 0 0 7 849 3914 2689 0 220 ////////////////////////////////////////////////////////////////////
//     Function: LensNode::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 name 1 3687  4 lens 1 3912  
1048 0 0 4 850 3642 0 0 404 ////////////////////////////////////////////////////////////////////
//     Function: LensNode::copy_lens
//       Access: Published
//  Description: Sets up the LensNode using a copy of the
//               indicated Lens.  If the original Lens is
//               changed or destroyed, this LensNode is not
//               affected.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3914  4 lens 1 3915  
1049 0 0 4 850 3642 0 0 269 ////////////////////////////////////////////////////////////////////
//     Function: LensNode::copy_lens
//       Access: Published
//  Description: Copies the indicated lens into the specified slot.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3914  5 index 1 3611  4 lens 1 3915  
1050 0 0 4 851 3642 0 0 403 ////////////////////////////////////////////////////////////////////
//     Function: LensNode::set_lens
//       Access: Published
//  Description: Sets up the LensNode using this particular Lens
//               pointer.  If the lens is subsequently modified, the
//               LensNode properties immediately reflect the change.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3914  4 lens 1 3912  
1051 0 0 4 851 3642 0 0 585 ////////////////////////////////////////////////////////////////////
//     Function: LensNode::set_lens
//       Access: Published
//  Description: Sets the indicated lens.  Although a LensNode
//               normally holds only one lens, it may optionally
//               include multiple lenses, each with a different index
//               number.  The different lenses may be referenced by
//               index number on the DisplayRegion.  Adding a new lens
//               automatically makes it active.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3914  5 index 1 3611  4 lens 1 3912  
1052 0 0 7 852 3912 0 0 443 ////////////////////////////////////////////////////////////////////
//     Function: LensNode::get_lens
//       Access: Published
//  Description: Returns a pointer to the particular Lens
//               associated with this LensNode, or NULL if there is
//               not yet a Lens associated.  If an index number is
//               specified, returns the nth lens.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3917  5 index 1 3611  
1053 0 0 6 853 3610 0 0 536 ////////////////////////////////////////////////////////////////////
//     Function: LensNode::set_lens_active
//       Access: Published
//  Description: Sets the active flag for the nth lens.  When a lens
//               is inactive, it is not used for rendering, and any
//               DisplayRegions associated with it are implicitly
//               inactive as well.  Returns true if the flag is
//               changed, false if it already had this value.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3914  5 index 1 3611  6 active 1 3610  
1054 0 0 6 854 3610 0 0 266 ////////////////////////////////////////////////////////////////////
//     Function: LensNode::get_lens_active
//       Access: Published
//  Description: Returns the active flag for the nth lens.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3917  5 index 1 3611  
1055 0 0 6 855 3610 0 0 294 ////////////////////////////////////////////////////////////////////
//     Function: LensNode::activate_lens
//       Access: Published
//  Description: An alternate way to call set_lens_active(index,
//               true).
//////////////////////////////////////////////////////////////////// 2 4 this 3 3914  5 index 1 3611  
1056 0 0 6 856 3610 0 0 297 ////////////////////////////////////////////////////////////////////
//     Function: LensNode::deactivate_lens
//       Access: Published
//  Description: An alternate way to call set_lens_active(index,
//               false).
//////////////////////////////////////////////////////////////////// 2 4 this 3 3914  5 index 1 3611  
1057 0 0 6 857 3610 0 0 374 ////////////////////////////////////////////////////////////////////
//     Function: LensNode::is_in_view
//       Access: Published
//  Description: Returns true if the given point is within the bounds
//               of the lens of the LensNode (i.e. if the camera can
//               see the point).
//////////////////////////////////////////////////////////////////// 2 4 this 3 3914  3 pos 1 3636  
1058 0 0 6 857 3610 0 0 374 ////////////////////////////////////////////////////////////////////
//     Function: LensNode::is_in_view
//       Access: Published
//  Description: Returns true if the given point is within the bounds
//               of the lens of the LensNode (i.e. if the camera can
//               see the point).
//////////////////////////////////////////////////////////////////// 3 4 this 3 3914  5 index 1 3611  3 pos 1 3636  
1059 0 0 4 858 3642 0 0 391 ////////////////////////////////////////////////////////////////////
//     Function: LensNode::show_frustum
//       Access: Published
//  Description: Enables the drawing of the lens's frustum to aid in
//               visualization.  This actually creates a GeomNode
//               which is parented to the LensNode.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3914  
1060 0 0 4 859 3642 0 0 306 ////////////////////////////////////////////////////////////////////
//     Function: LensNode::hide_frustum
//       Access: Published
//  Description: Disables the drawing of the lens's frustum to aid in
//               visualization.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3914  
1061 0 0 7 860 3649 0 0 0 0 
1062 0 0 7 863 3921 2689 0 223 ////////////////////////////////////////////////////////////////////
//     Function: Camera::Copy Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 3919  
1063 0 0 7 863 3921 2689 0 218 ////////////////////////////////////////////////////////////////////
//     Function: Camera::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 name 1 3687  4 lens 1 3912  
1064 0 0 4 864 3642 0 0 328 ////////////////////////////////////////////////////////////////////
//     Function: Camera::set_active
//       Access: Published
//  Description: Sets the active flag on the camera.  When the camera
//               is not active, nothing will be rendered.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3921  6 active 1 3610  
1065 0 0 6 865 3610 0 0 295 ////////////////////////////////////////////////////////////////////
//     Function: Camera::is_active
//       Access: Published
//  Description: Returns the current setting of the active flag on the
//               camera.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3919  
1066 0 0 4 866 3642 0 0 801 ////////////////////////////////////////////////////////////////////
//     Function: Camera::set_scene
//       Access: Published
//  Description: Sets the scene that will be rendered by the camera.
//               This is normally the root node of a scene graph,
//               typically a node called 'render', although it could
//               represent the root of any subgraph.
//
//               Note that the use of this method is now deprecated.
//               In the absence of an explicit scene set on the
//               camera, the camera will render whatever scene it is
//               parented into.  This is the preferred way to specify
//               the scene, since it is the more intuitive mechanism.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3921  5 scene 1 3755  
1067 0 0 6 867 3755 0 0 306 ////////////////////////////////////////////////////////////////////
//     Function: Camera::get_scene
//       Access: Published
//  Description: Returns the scene that will be rendered by the
//               camera.  See set_scene().
//////////////////////////////////////////////////////////////////// 1 4 this 3 3919  
1068 0 0 6 868 3611 0 0 313 ////////////////////////////////////////////////////////////////////
//     Function: Camera::get_num_display_regions
//       Access: Published
//  Description: Returns the number of display regions associated with
//               the camera.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3919  
1069 0 0 7 869 3923 0 0 301 ////////////////////////////////////////////////////////////////////
//     Function: Camera::get_display_region
//       Access: Published
//  Description: Returns the nth display region associated with the
//               camera.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3919  1 n 1 3611  
1070 0 0 4 870 3642 0 0 717 ////////////////////////////////////////////////////////////////////
//     Function: Camera::set_camera_mask
//       Access: Published
//  Description: Changes the set of bits that represent the subset of
//               the scene graph the camera will render.
//
//               During the cull traversal, a node is not visited if
//               none of its draw mask bits intersect with the
//               camera's camera mask bits.  These masks can be used
//               to selectively hide and show different parts of the
//               scene graph from different cameras that are otherwise
//               viewing the same scene.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3921  4 mask 1 3698  
1071 0 0 7 871 3698 0 0 373 ////////////////////////////////////////////////////////////////////
//     Function: Camera::get_camera_mask
//       Access: Published
//  Description: Returns the set of bits that represent the subset of
//               the scene graph the camera will render.  See
//               set_camera_mask().
//////////////////////////////////////////////////////////////////// 1 4 this 3 3919  
1072 0 0 4 872 3642 0 0 606 ////////////////////////////////////////////////////////////////////
//     Function: Camera::set_cull_center
//       Access: Published
//  Description: Specifies the point from which the culling operations
//               are performed.  Normally, this is the same as the
//               camera, and that is the default if this is not
//               specified; but it may sometimes be useful to perform
//               the culling from some other viewpoint, particularly
//               when you are debugging the culling itself.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3921  11 cull_center 1 3755  
1073 0 0 6 873 3755 0 0 396 ////////////////////////////////////////////////////////////////////
//     Function: Camera::get_cull_center
//       Access: Published
//  Description: Returns the point from which the culling operations
//               will be performed, if it was set by
//               set_cull_center(), or the empty NodePath otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3919  
1074 0 0 4 874 3642 0 0 681 ////////////////////////////////////////////////////////////////////
//     Function: Camera::set_cull_bounds
//       Access: Published
//  Description: Specifies the bounding volume that should be used to
//               perform culling from this camera.  Normally, this is
//               the bounding volume returned from the active lens'
//               make_bounds() call, but you may override this to
//               specify a custom volume if you require.  The
//               specified bounding volume will be understood to be in
//               the coordinate space of the get_cull_center() node.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3921  11 cull_bounds 1 3880  
1075 0 0 7 875 3880 0 0 372 ////////////////////////////////////////////////////////////////////
//     Function: Camera::get_cull_bounds
//       Access: Published
//  Description: Returns the custom cull volume that was set by
//               set_cull_bounds(), if any, or NULL if no custom cull
//               volume was set.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3919  
1076 0 0 4 876 3642 0 0 680 ////////////////////////////////////////////////////////////////////
//     Function: Camera::set_lod_center
//       Access: Published
//  Description: Specifies the point from which the LOD distances
//               are measured.  Normally, this is the same as the
//               camera, and that is the default if this is not
//               specified; but it may sometimes be useful to perform
//               the distance test from some other viewpoint.  This
//               may be used, for instance, to reduce LOD popping when
//               the camera rotates in a small circle about an avatar.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3921  10 lod_center 1 3755  
1077 0 0 6 877 3755 0 0 388 ////////////////////////////////////////////////////////////////////
//     Function: Camera::get_lod_center
//       Access: Published
//  Description: Returns the point from which the LOD distances will
//               be measured, if it was set by set_lod_center(), or
//               the empty NodePath otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3919  
1078 0 0 4 878 3642 0 0 374 ////////////////////////////////////////////////////////////////////
//     Function: Camera::set_initial_state
//       Access: Published
//  Description: Sets the initial state which is applied to all nodes
//               in the scene, as if it were set at the top of the
//               scene graph.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3921  5 state 1 3657  
1079 0 0 7 879 3657 0 0 317 ////////////////////////////////////////////////////////////////////
//     Function: Camera::get_initial_state
//       Access: Published
//  Description: Returns the initial state as set by a previous call
//               to set_initial_state().
//////////////////////////////////////////////////////////////////// 1 4 this 3 3919  
1080 0 0 4 880 3642 0 0 477 ////////////////////////////////////////////////////////////////////
//     Function: Camera::set_tag_state_key
//       Access: Published
//  Description: Sets the tag key which, when encountered as a tag on
//               nodes in the scene graph, causes this Camera to apply
//               an arbitrary state transition based on the value of
//               the tag (as specified to set_tag_state()).
//////////////////////////////////////////////////////////////////// 2 4 this 3 3921  13 tag_state_key 1 3687  
1081 0 0 6 881 3687 0 0 311 ////////////////////////////////////////////////////////////////////
//     Function: Camera::get_tag_state_key
//       Access: Published
//  Description: Returns the tag key as set by a previous call to
//               set_tag_state_key().
//////////////////////////////////////////////////////////////////// 1 4 this 3 3919  
1082 0 0 4 882 3642 0 0 337 ////////////////////////////////////////////////////////////////////
//     Function: Camera::set_lod_scale
//       Access: Published
//  Description: Sets the multiplier for LOD distances. This value
//               is multiplied with the LOD scale set on LodNodes.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3921  5 value 1 3622  
1083 0 0 6 883 3622 0 0 262 ////////////////////////////////////////////////////////////////////
//     Function: Camera::get_lod_scale
//       Access: Published
//  Description: Returns the multiplier for LOD distances.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3919  
1084 0 0 4 884 3642 0 0 959 ////////////////////////////////////////////////////////////////////
//     Function: Camera::set_tag_state
//       Access: Published
//  Description: Associates a particular state transition with the
//               indicated tag value.  When a node is encountered
//               during traversal with the tag key specified by
//               set_tag_state_key(), if the value of that tag matches
//               tag_state, then the indicated state is applied to
//               this node--but only when it is rendered by this
//               camera.
//
//               This can be used to apply special effects to nodes
//               when they are rendered by certain cameras.  It is
//               particularly useful for multipass rendering, in which
//               specialty cameras might be needed to render the scene
//               with a particular set of effects.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3921  9 tag_state 1 3687  5 state 1 3657  
1085 0 0 4 885 3642 0 0 314 ////////////////////////////////////////////////////////////////////
//     Function: Camera::clear_tag_state
//       Access: Published
//  Description: Removes the association established by a previous
//               call to set_tag_state().
//////////////////////////////////////////////////////////////////// 2 4 this 3 3921  9 tag_state 1 3687  
1086 0 0 6 886 3610 0 0 343 ////////////////////////////////////////////////////////////////////
//     Function: Camera::has_tag_state
//       Access: Published
//  Description: Returns true if set_tag_state() has previously been
//               called with the indicated tag state, false otherwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3919  9 tag_state 1 3687  
1087 0 0 7 887 3657 0 0 402 ////////////////////////////////////////////////////////////////////
//     Function: Camera::get_tag_state
//       Access: Published
//  Description: Returns the state associated with the indicated tag
//               state by a previous call to set_tag_state(), or the
//               empty state if nothing has been associated.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3919  9 tag_state 1 3687  
1088 0 0 4 888 3642 0 0 403 ////////////////////////////////////////////////////////////////////
//     Function: Camera::set_aux_scene_data
//       Access: Published
//  Description: Associates the indicated AuxSceneData object with the
//               given NodePath, possibly replacing a previous
//               data defined for the same NodePath, if any.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3921  9 node_path 1 3755  4 data 1 3896  
1089 0 0 6 889 3610 0 0 401 ////////////////////////////////////////////////////////////////////
//     Function: Camera::clear_aux_scene_data
//       Access: Published
//  Description: Removes the AuxSceneData associated with the
//               indicated NodePath.  Returns true if it is removed
//               successfully, false if it was already gone.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3921  9 node_path 1 3755  
1090 0 0 7 890 3896 2643 0 341 ////////////////////////////////////////////////////////////////////
//     Function: Camera::get_aux_scene_data
//       Access: Published
//  Description: Returns the AuxSceneData associated with the
//               indicated NodePath, or NULL if nothing is associated.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3919  9 node_path 1 3755  
1091 0 0 4 891 3642 0 0 298 ////////////////////////////////////////////////////////////////////
//     Function: Camera::list_aux_scene_data
//       Access: Published
//  Description: Outputs all of the NodePaths and AuxSceneDatas in
//               use.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3919  3 out 1 3646  
1092 0 0 6 892 3611 0 0 443 ////////////////////////////////////////////////////////////////////
//     Function: Camera::cleanup_aux_scene_data
//       Access: Published
//  Description: Walks through the list of currently-assigned
//               AuxSceneData objects and releases any that are
//               past their expiration times.  Returns the number of
//               elements released.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3921  14 current_thread 1 3691  
1093 0 0 7 893 3649 0 0 0 0 
1094 0 0 7 895 3928 2731 0 218 ////////////////////////////////////////////////////////////////////
//     Function: PlaneNode::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 name 1 3687  5 plane 1 3924  
1095 0 0 4 896 3642 0 0 289 ////////////////////////////////////////////////////////////////////
//     Function: PlaneNode::set_plane
//       Access: Public
//  Description: Sets the particular plane represented by the
//               PlaneNode.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3928  5 plane 1 3924  
1096 0 0 6 897 3924 0 0 264 ////////////////////////////////////////////////////////////////////
//     Function: PlaneNode::get_plane
//       Access: Public
//  Description: Returns the plane represented by the PlaneNode.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3929  
1097 0 0 4 898 3642 0 0 339 ////////////////////////////////////////////////////////////////////
//     Function: PlaneNode::set_viz_scale
//       Access: Public
//  Description: Specifies the size of the visual representation of
//               the plane that is drawn if the PlaneNode is shown.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3928  9 viz_scale 1 3622  
1098 0 0 6 899 3622 0 0 337 ////////////////////////////////////////////////////////////////////
//     Function: PlaneNode::get_viz_scale
//       Access: Public
//  Description: Returns the size of the visual representation of
//               the plane that is drawn if the PlaneNode is shown.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3929  
1099 0 0 4 900 3642 0 0 784 ////////////////////////////////////////////////////////////////////
//     Function: PlaneNode::set_priority
//       Access: Published
//  Description: Changes the relative importance of this PlaneNode
//               (when it is used as a clip plane) relative to the
//               other clip planes that are applied simultaneously.
//
//               The priority number is used to decide which of the
//               requested clip planes are to be activated when more
//               clip planes are requested than the hardware will
//               support.  The highest-priority n planes are selected
//               for rendering.
//
//               This is similar to TextureStage::set_priority().
//////////////////////////////////////////////////////////////////// 2 4 this 3 3928  8 priority 1 3611  
1100 0 0 6 901 3611 0 0 314 ////////////////////////////////////////////////////////////////////
//     Function: PlaneNode::get_priority
//       Access: Published
//  Description: Returns the priority associated with this clip
//               plane.  See set_priority().
//////////////////////////////////////////////////////////////////// 1 4 this 3 3929  
1101 0 0 4 903 3642 0 0 755 ////////////////////////////////////////////////////////////////////
//     Function: PlaneNode::set_clip_effect
//       Access: Published
//  Description: Specifies the sort of things this plane will actually
//               clip (when it is used as a clip plane).  This is a
//               bitmask union of ClipEffect values.  If it includes
//               CE_visible, then it will clip visible geometry; if it
//               includes CE_collision, then it will clip collision
//               polygons.  If it includes neither bit, it will still
//               affect culling, but objects will either be wholly
//               behind the clipping plane, or wholly present.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3928  11 clip_effect 1 3611  
1102 0 0 6 904 3611 0 0 315 ////////////////////////////////////////////////////////////////////
//     Function: PlaneNode::get_clip_effect
//       Access: Published
//  Description: Returns the clip_effect bits for this clip plane.
//               See set_clip_effect().
//////////////////////////////////////////////////////////////////// 1 4 this 3 3929  
1103 0 0 7 905 3649 0 0 0 0 
1104 0 0 7 909 3654 0 0 304 ////////////////////////////////////////////////////////////////////
//     Function: ClipPlaneAttrib::make
//       Access: Published, Static
//  Description: Constructs a new ClipPlaneAttrib object that does
//               nothing.
//////////////////////////////////////////////////////////////////// 0 
1105 0 0 7 909 3654 0 0 469 ////////////////////////////////////////////////////////////////////
//     Function: ClipPlaneAttrib::make
//       Access: Published, Static
//  Description: Constructs a new ClipPlaneAttrib object that enables (or
//               disables, according to op) the indicated plane(s).
//
//               This method is now deprecated.  Use add_on_plane() or
//               add_off_plane() instead.
//////////////////////////////////////////////////////////////////// 2 2 op 1 3518  5 plane 1 3928  
1106 0 0 7 909 3654 0 0 464 ////////////////////////////////////////////////////////////////////
//     Function: ClipPlaneAttrib::make
//       Access: Published, Static
//  Description: Constructs a new ClipPlaneAttrib object that turns on (or
//               off, according to op) the indicate plane(s).
//
//               This method is now deprecated.  Use add_on_plane() or
//               add_off_plane() instead.
//////////////////////////////////////////////////////////////////// 3 2 op 1 3518  6 plane1 1 3928  6 plane2 1 3928  
1107 0 0 7 909 3654 0 0 464 ////////////////////////////////////////////////////////////////////
//     Function: ClipPlaneAttrib::make
//       Access: Published, Static
//  Description: Constructs a new ClipPlaneAttrib object that turns on (or
//               off, according to op) the indicate plane(s).
//
//               This method is now deprecated.  Use add_on_plane() or
//               add_off_plane() instead.
//////////////////////////////////////////////////////////////////// 4 2 op 1 3518  6 plane1 1 3928  6 plane2 1 3928  6 plane3 1 3928  
1108 0 0 7 909 3654 0 0 464 ////////////////////////////////////////////////////////////////////
//     Function: ClipPlaneAttrib::make
//       Access: Published, Static
//  Description: Constructs a new ClipPlaneAttrib object that turns on (or
//               off, according to op) the indicate plane(s).
//
//               This method is now deprecated.  Use add_on_plane() or
//               add_off_plane() instead.
//////////////////////////////////////////////////////////////////// 5 2 op 1 3518  6 plane1 1 3928  6 plane2 1 3928  6 plane3 1 3928  6 plane4 1 3928  
1109 0 0 7 910 3654 0 0 402 ////////////////////////////////////////////////////////////////////
//     Function: ClipPlaneAttrib::make_default
//       Access: Published, Static
//  Description: Returns a RenderAttrib that corresponds to whatever
//               the standard default properties for render attributes
//               of this type ought to be.
//////////////////////////////////////////////////////////////////// 0 
1110 0 0 6 911 3518 0 0 900 ////////////////////////////////////////////////////////////////////
//     Function: ClipPlaneAttrib::get_operation
//       Access: Published
//  Description: Returns the basic operation type of the ClipPlaneAttrib.
//               If this is O_set, the planes listed here completely
//               replace any planes that were already on.  If this is
//               O_add, the planes here are added to the set of of
//               planes that were already on, and if O_remove, the
//               planes here are removed from the set of planes that
//               were on.
//
//               This method is now deprecated.  ClipPlaneAttribs
//               nowadays have a separate list of on_planes and
//               off_planes, so this method doesn't make sense.  Query
//               the lists independently.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3931  
1111 0 0 6 912 3611 0 0 530 ////////////////////////////////////////////////////////////////////
//     Function: ClipPlaneAttrib::get_num_planes
//       Access: Published
//  Description: Returns the number of planes listed in the attribute.
//
//               This method is now deprecated.  ClipPlaneAttribs
//               nowadays have a separate list of on_planes and
//               off_planes, so this method doesn't make sense.  Query
//               the lists independently.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3931  
1112 0 0 7 913 3928 2731 0 518 ////////////////////////////////////////////////////////////////////
//     Function: ClipPlaneAttrib::get_plane
//       Access: Published
//  Description: Returns the nth plane listed in the attribute.
//
//               This method is now deprecated.  ClipPlaneAttribs
//               nowadays have a separate list of on_planes and
//               off_planes, so this method doesn't make sense.  Query
//               the lists independently.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3931  1 n 1 3611  
1113 0 0 6 914 3610 0 0 566 ////////////////////////////////////////////////////////////////////
//     Function: ClipPlaneAttrib::has_plane
//       Access: Published
//  Description: Returns true if the indicated plane is listed in the
//               attrib, false otherwise.
//
//               This method is now deprecated.  ClipPlaneAttribs
//               nowadays have a separate list of on_planes and
//               off_planes, so this method doesn't make sense.  Query
//               the lists independently.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3931  5 plane 1 3928  
1114 0 0 7 915 3654 0 0 467 ////////////////////////////////////////////////////////////////////
//     Function: ClipPlaneAttrib::add_plane
//       Access: Published
//  Description: Returns a new ClipPlaneAttrib, just like this one, but
//               with the indicated plane added to the list of planes.
//
//               This method is now deprecated.  Use add_on_plane() or
//               add_off_plane() instead.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3931  5 plane 1 3928  
1115 0 0 7 916 3654 0 0 497 ////////////////////////////////////////////////////////////////////
//     Function: ClipPlaneAttrib::remove_plane
//       Access: Published
//  Description: Returns a new ClipPlaneAttrib, just like this one, but
//               with the indicated plane removed from the list of
//               planes.
//
//               This method is now deprecated.  Use remove_on_plane()
//               or remove_off_plane() instead.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3931  5 plane 1 3928  
1116 0 0 7 917 3654 0 0 350 ////////////////////////////////////////////////////////////////////
//     Function: ClipPlaneAttrib::make_all_off
//       Access: Published, Static
//  Description: Constructs a new ClipPlaneAttrib object that disables 
//               all planes (and hence disables clipping).
//////////////////////////////////////////////////////////////////// 0 
1117 0 0 6 918 3611 0 0 314 ////////////////////////////////////////////////////////////////////
//     Function: ClipPlaneAttrib::get_num_on_planes
//       Access: Published
//  Description: Returns the number of planes that are enabled by
//               the attribute.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3931  
1118 0 0 7 919 3839 2604 0 317 ////////////////////////////////////////////////////////////////////
//     Function: ClipPlaneAttrib::get_on_plane
//       Access: Published
//  Description: Returns the nth plane enabled by the attribute,
//               sorted in render order.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3931  1 n 1 3611  
1119 0 0 6 920 3610 0 0 324 ////////////////////////////////////////////////////////////////////
//     Function: ClipPlaneAttrib::has_on_plane
//       Access: Published
//  Description: Returns true if the indicated plane is enabled by
//               the attrib, false otherwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3931  5 plane 1 3755  
1120 0 0 6 921 3611 0 0 316 ////////////////////////////////////////////////////////////////////
//     Function: ClipPlaneAttrib::get_num_off_planes
//       Access: Published
//  Description: Returns the number of planes that are disabled by
//               the attribute.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3931  
1121 0 0 7 922 3839 2604 0 332 ////////////////////////////////////////////////////////////////////
//     Function: ClipPlaneAttrib::get_off_plane
//       Access: Published
//  Description: Returns the nth plane disabled by the attribute,
//               sorted in arbitrary (pointer) order.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3931  1 n 1 3611  
1122 0 0 6 923 3610 0 0 326 ////////////////////////////////////////////////////////////////////
//     Function: ClipPlaneAttrib::has_off_plane
//       Access: Published
//  Description: Returns true if the indicated plane is disabled by
//               the attrib, false otherwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3931  5 plane 1 3755  
1123 0 0 6 924 3610 0 0 328 ////////////////////////////////////////////////////////////////////
//     Function: ClipPlaneAttrib::has_all_off
//       Access: Published
//  Description: Returns true if this attrib disables all planes
//               (although it may also enable some).
//////////////////////////////////////////////////////////////////// 1 4 this 3 3931  
1124 0 0 6 925 3610 0 0 333 ////////////////////////////////////////////////////////////////////
//     Function: ClipPlaneAttrib::is_identity
//       Access: Published
//  Description: Returns true if this is an identity attrib: it does
//               not change the set of planes in use.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3931  
1125 0 0 7 926 3654 0 0 394 ////////////////////////////////////////////////////////////////////
//     Function: ClipPlaneAttrib::add_on_plane
//       Access: Published
//  Description: Returns a new ClipPlaneAttrib, just like this one, but
//               with the indicated plane added to the list of planes
//               enabled by this attrib.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3931  5 plane 1 3755  
1126 0 0 7 927 3654 0 0 401 ////////////////////////////////////////////////////////////////////
//     Function: ClipPlaneAttrib::remove_on_plane
//       Access: Published
//  Description: Returns a new ClipPlaneAttrib, just like this one, but
//               with the indicated plane removed from the list of
//               planes enabled by this attrib.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3931  5 plane 1 3755  
1127 0 0 7 928 3654 0 0 396 ////////////////////////////////////////////////////////////////////
//     Function: ClipPlaneAttrib::add_off_plane
//       Access: Published
//  Description: Returns a new ClipPlaneAttrib, just like this one, but
//               with the indicated plane added to the list of planes
//               disabled by this attrib.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3931  5 plane 1 3755  
1128 0 0 7 929 3654 0 0 403 ////////////////////////////////////////////////////////////////////
//     Function: ClipPlaneAttrib::remove_off_plane
//       Access: Published
//  Description: Returns a new ClipPlaneAttrib, just like this one, but
//               with the indicated plane removed from the list of
//               planes disabled by this attrib.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3931  5 plane 1 3755  
1129 0 0 7 930 3931 0 0 477 ////////////////////////////////////////////////////////////////////
//     Function: ClipPlaneAttrib::filter_to_max
//       Access: Public
//  Description: Returns a new ClipPlaneAttrib, very much like this one,
//               but with the number of on_planes reduced to be no
//               more than max_clip_planes.  The number of off_planes in
//               the new ClipPlaneAttrib is undefined.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3931  15 max_clip_planes 1 3611  
1130 0 0 6 931 3611 0 0 0 0 
1131 0 0 7 932 3649 0 0 0 0 
1132 0 0 7 936 3654 0 0 379 ////////////////////////////////////////////////////////////////////
//     Function: ColorAttrib::make_vertex
//       Access: Published, Static
//  Description: Constructs a new ColorAttrib object that indicates
//               geometry should be rendered according to its own
//               vertex color.
//////////////////////////////////////////////////////////////////// 0 
1133 0 0 7 937 3654 0 0 349 ////////////////////////////////////////////////////////////////////
//     Function: ColorAttrib::make_flat
//       Access: Published, Static
//  Description: Constructs a new ColorAttrib object that indicates
//               geometry should be rendered in the indicated color.
//////////////////////////////////////////////////////////////////// 1 5 color 1 3659  
1134 0 0 7 938 3654 0 0 334 ////////////////////////////////////////////////////////////////////
//     Function: ColorAttrib::make_off
//       Access: Published, Static
//  Description: Constructs a new ColorAttrib object that indicates
//               geometry should be rendered in white.
//////////////////////////////////////////////////////////////////// 0 
1135 0 0 7 939 3654 0 0 398 ////////////////////////////////////////////////////////////////////
//     Function: ColorAttrib::make_default
//       Access: Published, Static
//  Description: Returns a RenderAttrib that corresponds to whatever
//               the standard default properties for render attributes
//               of this type ought to be.
//////////////////////////////////////////////////////////////////// 0 
1136 0 0 6 940 3520 0 0 648 ////////////////////////////////////////////////////////////////////
//     Function: ColorAttrib::get_color_type
//       Access: Published
//  Description: Returns the type of color specified by this
//               ColorAttrib.  The options are:
//
//                 T_vertex - use the vertex color specified in the
//                 geometry itself.
//
//                 T_flat - use the color specified in this
//                 ColorAttrib for all geometry.  You can get this
//                 color via get_color().
//
//                 T_off - use the color white.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3933  
1137 0 0 6 941 3659 0 0 391 ////////////////////////////////////////////////////////////////////
//     Function: ColorAttrib::get_color
//       Access: Published
//  Description: If the type is T_flat or T_off, this returns the
//               color that will be applied to geometry.  If the type
//               is T_vertex, this is meaningless.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3933  
1138 0 0 6 942 3611 0 0 0 0 
1139 0 0 7 943 3649 0 0 0 0 
1140 0 0 7 948 3654 0 0 396 ////////////////////////////////////////////////////////////////////
//     Function: ColorBlendAttrib::make_off
//       Access: Published, Static
//  Description: Constructs a new ColorBlendAttrib object that
//               disables special-effect blending, allowing normal
//               transparency to be used instead.
//////////////////////////////////////////////////////////////////// 0 
1141 0 0 7 949 3654 0 0 404 ////////////////////////////////////////////////////////////////////
//     Function: ColorBlendAttrib::make
//       Access: Published, Static
//  Description: Constructs a new ColorBlendAttrib object.  This
//               constructor is deprecated; use the one below, which
//               takes three or four parameters, instead.
//////////////////////////////////////////////////////////////////// 1 4 mode 1 3522  
1142 0 0 7 949 3654 0 0 373 ////////////////////////////////////////////////////////////////////
//     Function: ColorBlendAttrib::make
//       Access: Published, Static
//  Description: Constructs a new ColorBlendAttrib object that enables
//               special-effect blending.  This supercedes
//               transparency.
//////////////////////////////////////////////////////////////////// 4 4 mode 1 3522  1 a 1 3523  1 b 1 3523  5 color 1 3659  
1143 0 0 7 950 3654 0 0 403 ////////////////////////////////////////////////////////////////////
//     Function: ColorBlendAttrib::make_default
//       Access: Published, Static
//  Description: Returns a RenderAttrib that corresponds to whatever
//               the standard default properties for render attributes
//               of this type ought to be.
//////////////////////////////////////////////////////////////////// 0 
1144 0 0 6 951 3522 0 0 254 ////////////////////////////////////////////////////////////////////
//     Function: ColorBlendAttrib::get_mode
//       Access: Published
//  Description: Returns the colorBlend mode.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3935  
1145 0 0 6 952 3523 0 0 278 ////////////////////////////////////////////////////////////////////
//     Function: ColorBlendAttrib::get_operand_a
//       Access: Published
//  Description: Returns the multiplier for the first component.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3935  
1146 0 0 6 953 3523 0 0 279 ////////////////////////////////////////////////////////////////////
//     Function: ColorBlendAttrib::get_operand_b
//       Access: Published
//  Description: Returns the multiplier for the second component.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3935  
1147 0 0 7 954 3850 0 0 281 ////////////////////////////////////////////////////////////////////
//     Function: ColorBlendAttrib::get_color
//       Access: Published
//  Description: Returns the constant color associated with the attrib.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3935  
1148 0 0 6 955 3610 0 0 331 ////////////////////////////////////////////////////////////////////
//     Function: ColorBlendAttrib::involves_constant_color
//       Access: Published
//  Description: Returns true if the this attrib uses the
//               constant color, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3935  
1149 0 0 6 955 3610 0 0 345 ////////////////////////////////////////////////////////////////////
//     Function: ColorBlendAttrib::involves_constant_color
//       Access: Published, Static
//  Description: Returns true if the indicated operand uses the
//               constant color, false otherwise.
//////////////////////////////////////////////////////////////////// 1 7 operand 1 3523  
1150 0 0 6 956 3610 0 0 332 ////////////////////////////////////////////////////////////////////
//     Function: ColorBlendAttrib::involves_color_scale
//       Access: Published
//  Description: Returns true if the this attrib uses the
//               color scale attrib, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3935  
1151 0 0 6 956 3610 0 0 346 ////////////////////////////////////////////////////////////////////
//     Function: ColorBlendAttrib::involves_color_scale
//       Access: Published, Static
//  Description: Returns true if the indicated operand uses the
//               color scale attrib, false otherwise.
//////////////////////////////////////////////////////////////////// 1 7 operand 1 3523  
1152 0 0 6 957 3611 0 0 0 0 
1153 0 0 7 958 3649 0 0 0 0 
1154 0 0 7 961 3654 0 0 275 ////////////////////////////////////////////////////////////////////
//     Function: ColorScaleAttrib::make_identity
//       Access: Published, Static
//  Description: Constructs an identity scale attrib.
//////////////////////////////////////////////////////////////////// 0 
1155 0 0 7 962 3654 0 0 353 ////////////////////////////////////////////////////////////////////
//     Function: ColorScaleAttrib::make
//       Access: Published, Static
//  Description: Constructs a new ColorScaleAttrib object that indicates
//               geometry should be scaled by the indicated factor.
//////////////////////////////////////////////////////////////////// 1 5 scale 1 3829  
1156 0 0 7 963 3654 0 0 477 ////////////////////////////////////////////////////////////////////
//     Function: ColorScaleAttrib::make_off
//       Access: Published, Static
//  Description: Constructs a new ColorScaleAttrib object that ignores
//               any ColorScaleAttrib inherited from above.  You may
//               also specify an additional color scale to apply to
//               geometry below (using set_scale()).
//////////////////////////////////////////////////////////////////// 0 
1157 0 0 7 964 3654 0 0 403 ////////////////////////////////////////////////////////////////////
//     Function: ColorScaleAttrib::make_default
//       Access: Published, Static
//  Description: Returns a RenderAttrib that corresponds to whatever
//               the standard default properties for render attributes
//               of this type ought to be.
//////////////////////////////////////////////////////////////////// 0 
1158 0 0 6 965 3610 0 0 526 ////////////////////////////////////////////////////////////////////
//     Function: ColorScaleAttrib::is_off
//       Access: Published
//  Description: Returns true if the ColorScaleAttrib will ignore any
//               color scales inherited from above, false otherwise.
//               This is not the same thing as !has_scale(); a
//               ColorScaleAttrib may have the "off" flag set and also
//               have another scale specified.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3937  
1159 0 0 6 966 3610 0 0 377 ////////////////////////////////////////////////////////////////////
//     Function: ColorScaleAttrib::is_identity
//       Access: Published
//  Description: Returns true if the ColorScaleAttrib is an identity
//               attrib, false if it is either an off attrib or it has
//               a scale.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3937  
1160 0 0 6 967 3610 0 0 404 ////////////////////////////////////////////////////////////////////
//     Function: ColorScaleAttrib::has_scale
//       Access: Published
//  Description: Returns true if the ColorScaleAttrib has a
//               non-identity scale, false otherwise (in which case it
//               might be an off attrib or an identity attrib).
//////////////////////////////////////////////////////////////////// 1 4 this 3 3937  
1161 0 0 6 968 3610 0 0 386 ////////////////////////////////////////////////////////////////////
//     Function: ColorScaleAttrib::has_rgb_scale
//       Access: Published
//  Description: Returns true if the ColorScaleAttrib has a
//               non-identity scale in the RGB components (ignoring
//               alpha), or false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3937  
1162 0 0 6 969 3610 0 0 387 ////////////////////////////////////////////////////////////////////
//     Function: ColorScaleAttrib::has_alpha_scale
//       Access: Published
//  Description: Returns true if the ColorScaleAttrib has a
//               non-identity scale in the alpha component (ignoring
//               RGB), or false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3937  
1163 0 0 6 970 3829 0 0 269 ////////////////////////////////////////////////////////////////////
//     Function: ColorScaleAttrib::get_scale
//       Access: Published
//  Description: Returns the scale to be applied to colors.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3937  
1164 0 0 7 971 3654 0 0 346 ////////////////////////////////////////////////////////////////////
//     Function: ColorScaleAttrib::set_scale
//       Access: Published
//  Description: Returns a new ColorScaleAttrib, just like this one, but
//               with the scale changed to the indicated value.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3937  5 scale 1 3829  
1165 0 0 6 972 3611 0 0 0 0 
1166 0 0 7 973 3649 0 0 0 0 
1167 0 0 7 977 3654 0 0 271 ////////////////////////////////////////////////////////////////////
//     Function: ColorWriteAttrib::make
//       Access: Published, Static
//  Description: Constructs a new ColorWriteAttrib object.
//////////////////////////////////////////////////////////////////// 1 8 channels 1 3696  
1168 0 0 7 978 3654 0 0 403 ////////////////////////////////////////////////////////////////////
//     Function: ColorWriteAttrib::make_default
//       Access: Published, Static
//  Description: Returns a RenderAttrib that corresponds to whatever
//               the standard default properties for render attributes
//               of this type ought to be.
//////////////////////////////////////////////////////////////////// 0 
1169 0 0 6 979 3696 0 0 314 ////////////////////////////////////////////////////////////////////
//     Function: ColorWriteAttrib::get_channels
//       Access: Published
//  Description: Returns the mask of color channels that are enabled
//               by this attrib.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3939  
1170 0 0 6 980 3611 0 0 0 0 
1171 0 0 7 981 3649 0 0 0 0 
1172 0 0 7 985 3683 0 0 660 ////////////////////////////////////////////////////////////////////
//     Function: CompassEffect::make
//       Access: Published, Static
//  Description: Constructs a new CompassEffect object.  If the
//               reference is an empty NodePath, it means the
//               CompassEffect is relative to the root of the scene
//               graph; otherwise, it's relative to the indicated
//               node.  The properties bitmask specifies the set of
//               properties that the compass node inherits from the
//               reference instead of from its parent.
//////////////////////////////////////////////////////////////////// 2 9 reference 1 3755  10 properties 1 3611  
1173 0 0 6 986 3755 0 0 398 ////////////////////////////////////////////////////////////////////
//     Function: CompassEffect::get_reference
//       Access: Published
//  Description: Returns the reference node from which the
//               CompassEffect inherits its transform.  If this is
//               empty, it means the root of the scene graph.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3941  
1174 0 0 6 987 3611 0 0 237 //               Returns the bitmask of properties that this
//               CompassEffect object inherits from its reference node
//               (or from the root).
//////////////////////////////////////////////////////////////////// 1 4 this 3 3941  
1175 0 0 7 988 3649 0 0 0 0 
1176 0 0 7 994 3654 0 0 589 ////////////////////////////////////////////////////////////////////
//     Function: CullBinAttrib::make
//       Access: Published, Static
//  Description: Constructs a new CullBinAttrib assigning geometry
//               into the named bin.  If the bin name is the empty
//               string, the default bin is used.
//
//               The draw_order specifies further ordering information
//               which is relevant only to certain kinds of bins (in
//               particular CullBinFixed type bins).
//////////////////////////////////////////////////////////////////// 2 8 bin_name 1 3687  10 draw_order 1 3611  
1177 0 0 7 995 3654 0 0 400 ////////////////////////////////////////////////////////////////////
//     Function: CullBinAttrib::make_default
//       Access: Published, Static
//  Description: Returns a RenderAttrib that corresponds to whatever
//               the standard default properties for render attributes
//               of this type ought to be.
//////////////////////////////////////////////////////////////////// 0 
1178 0 0 6 996 3687 0 0 373 ////////////////////////////////////////////////////////////////////
//     Function: CullBinAttrib::get_bin_name
//       Access: Published
//  Description: Returns the name of the bin this attribute specifies.
//               If this is the empty string, it refers to the default
//               bin.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3943  
1179 0 0 6 997 3611 0 0 448 ////////////////////////////////////////////////////////////////////
//     Function: CullBinAttrib::get_draw_order
//       Access: Published
//  Description: Returns the draw order this attribute specifies.
//               Some bins (in particular, CullBinFixed bins) use this
//               to further specify the order in which objects should
//               be rendered.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3943  
1180 0 0 6 998 3611 0 0 0 0 
1181 0 0 7 999 3649 0 0 0 0 
1182 0 0 6 1002 3611 0 0 507 ////////////////////////////////////////////////////////////////////
//     Function: CullBinManager::add_bin
//       Access: Published
//  Description: Defines a new bin with the indicated name, and
//               returns the new bin_index.  If there is already a bin
//               with the same name returns its bin_index if it had
//               the same properties; otherwise, reports an error and
//               returns -1.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3945  4 name 1 3687  4 type 1 3946  4 sort 1 3611  
1183 0 0 4 1003 3642 0 0 663 ////////////////////////////////////////////////////////////////////
//     Function: CullBinManager::remove_bin
//       Access: Published
//  Description: Permanently removes the indicated bin.  This
//               operation is not protected from the pipeline and will
//               disturb whatever is currently rendering in draw.  You
//               should not call this during the normal course of
//               rendering a frame; it is intended only as an aid to
//               development, to allow the developer to interactively
//               fiddle with the set of bins.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3945  9 bin_index 1 3611  
1184 0 0 6 1004 3611 0 0 268 ////////////////////////////////////////////////////////////////////
//     Function: CullBinManager::get_num_bins
//       Access: Published
//  Description: Returns the number of bins in the world.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3947  
1185 0 0 6 1005 3611 0 0 511 ////////////////////////////////////////////////////////////////////
//     Function: CullBinManager::get_bin
//       Access: Published
//  Description: Returns the bin_index of the nth bin in the set,
//               where n is a number between 0 and get_num_bins().
//               This returns the list of bin_index numbers, in sorted
//               order (that is, in the order in which the bins should
//               be rendered).
//////////////////////////////////////////////////////////////////// 2 4 this 3 3947  1 n 1 3611  
1186 0 0 6 1006 3611 0 0 336 ////////////////////////////////////////////////////////////////////
//     Function: CullBinManager::find_bin
//       Access: Published
//  Description: Returns the bin_index associated with the bin of the
//               given name, or -1 if no bin has that name.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3947  4 name 1 3687  
1187 0 0 6 1007 3687 0 0 458 ////////////////////////////////////////////////////////////////////
//     Function: CullBinManager::get_bin_name
//       Access: Published
//  Description: Returns the name of the bin with the indicated
//               bin_index (where bin_index was retrieved by get_bin()
//               or find_bin()).  The bin's name may not be changed
//               during the life of the bin.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3947  9 bin_index 1 3611  
1188 0 0 6 1008 3946 0 0 378 ////////////////////////////////////////////////////////////////////
//     Function: CullBinManager::get_bin_type
//       Access: Published
//  Description: Returns the type of the bin with the indicated
//               bin_index (where bin_index was retrieved by get_bin()
//               or find_bin()).
//////////////////////////////////////////////////////////////////// 2 4 this 3 3947  9 bin_index 1 3611  
1189 0 0 6 1008 3946 0 0 297 ////////////////////////////////////////////////////////////////////
//     Function: CullBinManager::get_bin_type
//       Access: Published
//  Description: Returns the type of the bin with the indicated
//               name.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3947  4 name 1 3687  
1190 0 0 4 1009 3642 0 0 537 ////////////////////////////////////////////////////////////////////
//     Function: CullBinManager::set_bin_type
//       Access: Published
//  Description: Changes the type of the bin with the indicated
//               bin_index (where bin_index was retrieved by get_bin()
//               or find_bin()).
//
//               The change might be effective immediately, or it
//               might take place next frame, depending on the bin
//               type.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3945  9 bin_index 1 3611  4 type 1 3946  
1191 0 0 4 1009 3642 0 0 456 ////////////////////////////////////////////////////////////////////
//     Function: CullBinManager::set_bin_type
//       Access: Published
//  Description: Changes the type of the bin with the indicated
//               name.
//
//               The change might be effective immediately, or it
//               might take place next frame, depending on the bin
//               type.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3945  4 name 1 3687  4 type 1 3946  
1192 0 0 6 1010 3611 0 0 567 ////////////////////////////////////////////////////////////////////
//     Function: CullBinManager::get_bin_sort
//       Access: Published
//  Description: Returns the sort order of the bin with the indicated
//               bin_index (where bin_index was retrieved by get_bin()
//               or find_bin()).
//
//               The bins are rendered in increasing order by their
//               sort order; this number may be changed from time to
//               time to reorder the bins.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3947  9 bin_index 1 3611  
1193 0 0 6 1010 3611 0 0 486 ////////////////////////////////////////////////////////////////////
//     Function: CullBinManager::get_bin_sort
//       Access: Published
//  Description: Returns the sort order of the bin with the indicated
//               name.
//
//               The bins are rendered in increasing order by their
//               sort order; this number may be changed from time to
//               time to reorder the bins.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3947  4 name 1 3687  
1194 0 0 4 1011 3642 0 0 567 ////////////////////////////////////////////////////////////////////
//     Function: CullBinManager::set_bin_sort
//       Access: Published
//  Description: Changes the sort order of the bin with the indicated
//               bin_index (where bin_index was retrieved by get_bin()
//               or find_bin()).
//
//               The bins are rendered in increasing order by their
//               sort order; this number may be changed from time to
//               time to reorder the bins.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3945  9 bin_index 1 3611  4 sort 1 3611  
1195 0 0 4 1011 3642 0 0 486 ////////////////////////////////////////////////////////////////////
//     Function: CullBinManager::set_bin_sort
//       Access: Published
//  Description: Changes the sort order of the bin with the indicated
//               name.
//
//               The bins are rendered in increasing order by their
//               sort order; this number may be changed from time to
//               time to reorder the bins.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3945  4 name 1 3687  4 sort 1 3611  
1196 0 0 6 1012 3610 0 0 500 ////////////////////////////////////////////////////////////////////
//     Function: CullBinManager::get_bin_active
//       Access: Published
//  Description: Returns the active flag of the bin with the indicated
//               bin_index (where bin_index was retrieved by get_bin()
//               or find_bin()).
//
//               When a bin is marked inactive, all geometry assigned
//               to it is not rendered.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3947  9 bin_index 1 3611  
1197 0 0 6 1012 3610 0 0 419 ////////////////////////////////////////////////////////////////////
//     Function: CullBinManager::get_bin_active
//       Access: Published
//  Description: Returns the active flag of the bin with the indicated
//               name.
//
//               When a bin is marked inactive, all geometry assigned
//               to it is not rendered.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3947  4 name 1 3687  
1198 0 0 4 1013 3642 0 0 500 ////////////////////////////////////////////////////////////////////
//     Function: CullBinManager::set_bin_active
//       Access: Published
//  Description: Changes the active flag of the bin with the indicated
//               bin_index (where bin_index was retrieved by get_bin()
//               or find_bin()).
//
//               When a bin is marked inactive, all geometry assigned
//               to it is not rendered.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3945  9 bin_index 1 3611  6 active 1 3610  
1199 0 0 4 1013 3642 0 0 419 ////////////////////////////////////////////////////////////////////
//     Function: CullBinManager::set_bin_active
//       Access: Published
//  Description: Changes the active flag of the bin with the indicated
//               name.
//
//               When a bin is marked inactive, all geometry assigned
//               to it is not rendered.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3945  4 name 1 3687  6 active 1 3610  
1200 0 0 6 1014 3610 0 0 494 ////////////////////////////////////////////////////////////////////
//     Function: CullBinManager::get_bin_flash_active
//       Access: Published
//  Description: Returns true if the bin with the given bin_index is
//               configured to flash at a predetermined color (where
//               bin_index was retrieved by get_bin() or find_bin()).
//
//               This method is not available in release builds.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3947  9 bin_index 1 3611  
1201 0 0 6 1015 3659 0 0 399 ////////////////////////////////////////////////////////////////////
//     Function: CullBinManager::get_bin_flash_color
//       Access: Published
//  Description: Returns the color that this bin has been configured
//               to flash to, if configured.
//
//               This method is not available in release builds.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3947  9 bin_index 1 3611  
1202 0 0 4 1016 3642 0 0 483 ////////////////////////////////////////////////////////////////////
//     Function: CullBinManager::set_bin_flash_active
//       Access: Published
//  Description: When set to true, the given bin_index is configured
//               to flash at a predetermined color (where
//               bin_index was retrieved by get_bin() or find_bin()).
//
//               This method is not available in release builds.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3945  9 bin_index 1 3611  6 active 1 3610  
1203 0 0 4 1017 3642 0 0 133 //               This method is not available in release builds.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3945  9 bin_index 1 3611  5 color 1 3659  
1204 0 0 4 1018 3642 0 0 220 ////////////////////////////////////////////////////////////////////
//     Function: CullBinManager::write
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3947  3 out 1 3646  
1205 0 0 6 1019 3945 0 0 311 ////////////////////////////////////////////////////////////////////
//     Function: CullBinManager::get_global_ptr
//       Access: Published, Static
//  Description: Returns the pointer to the global CullBinManager
//               object.
//////////////////////////////////////////////////////////////////// 0 
1206 0 0 7 1022 3654 0 0 739 ////////////////////////////////////////////////////////////////////
//     Function: CullFaceAttrib::make
//       Access: Published, Static
//  Description: Constructs a new CullFaceAttrib object that specifies
//               how to cull geometry.  By Panda convention, vertices
//               are ordered counterclockwise when seen from the
//               front, so the M_cull_clockwise will cull backfacing
//               polygons.
//
//               M_cull_unchanged is an identity attrib; if this is
//               applied to vertices without any other intervening
//               attrib, it is the same as applying the default
//               attrib.
//////////////////////////////////////////////////////////////////// 1 4 mode 1 3534  
1207 0 0 7 1023 3654 0 0 529 ////////////////////////////////////////////////////////////////////
//     Function: CullFaceAttrib::make_reverse
//       Access: Published, Static
//  Description: Constructs a new CullFaceAttrib object that reverses
//               the effects of any other CullFaceAttrib objects in
//               the scene graph.  M_cull_clockwise will be treated as
//               M_cull_counter_clockwise, and vice-versa.
//               M_cull_none is unchanged.
//////////////////////////////////////////////////////////////////// 0 
1208 0 0 7 1024 3654 0 0 401 ////////////////////////////////////////////////////////////////////
//     Function: CullFaceAttrib::make_default
//       Access: Published, Static
//  Description: Returns a RenderAttrib that corresponds to whatever
//               the standard default properties for render attributes
//               of this type ought to be.
//////////////////////////////////////////////////////////////////// 0 
1209 0 0 6 1025 3534 0 0 382 ////////////////////////////////////////////////////////////////////
//     Function: CullFaceAttrib::get_actual_mode
//       Access: Published
//  Description: Returns the actual culling mode, without considering
//               the effects of the reverse flag.  See also
//               get_effective_mode().
//////////////////////////////////////////////////////////////////// 1 4 this 3 3949  
1210 0 0 6 1026 3610 0 0 608 ////////////////////////////////////////////////////////////////////
//     Function: CullFaceAttrib::get_reverse
//       Access: Published
//  Description: Returns the 'reverse' flag.  If this is true, the
//               actual cull direction (clockwise
//               vs. counterclockwise) is the reverse of what is
//               specified here.  This allows support for
//               make_reverse(), which defines a CullFaceAttrib that
//               reverses whatever the sense of culling would have
//               been.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3949  
1211 0 0 6 1027 3534 0 0 487 ////////////////////////////////////////////////////////////////////
//     Function: CullFaceAttrib::get_effective_mode
//       Access: Published
//  Description: Returns the effective culling mode.  This is the same
//               as the actual culling mode, unless the reverse flag
//               is set, which swaps CW for CCW and vice-versa.  Also,
//               M_cull_unchanged is mapped to M_cull_none.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3949  
1212 0 0 6 1028 3611 0 0 0 0 
1213 0 0 7 1029 3649 0 0 0 0 
1214 0 0 7 1032 3951 2111 0 220 ////////////////////////////////////////////////////////////////////
//     Function: GeomNode::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 name 1 3687  
1215 0 0 4 1033 3642 0 0 366 ////////////////////////////////////////////////////////////////////
//     Function: GeomNode::set_preserved
//       Access: Published
//  Description: Sets the "preserved" flag.  When this is true, the
//               GeomNode will be left untouched by any flatten
//               operations.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3951  5 value 1 3610  
1216 0 0 6 1034 3610 0 0 369 ////////////////////////////////////////////////////////////////////
//     Function: GeomNode::get_preserved
//       Access: Published
//  Description: Returns the "preserved" flag.  When this is true, the
//               GeomNode will be left untouched by any flatten
//               operations.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3952  
1217 0 0 6 1035 3611 0 0 263 ////////////////////////////////////////////////////////////////////
//     Function: GeomNode::get_num_geoms
//       Access: Published
//  Description: Returns the number of geoms in the node.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3952  
1218 0 0 7 1036 3956 0 0 438 ////////////////////////////////////////////////////////////////////
//     Function: GeomNode::get_geom
//       Access: Published
//  Description: Returns the nth geom of the node.  This object should
//               not be modified, since the same object might be
//               shared between multiple different GeomNodes, but see
//               modify_geom().
//////////////////////////////////////////////////////////////////// 2 4 this 3 3952  1 n 1 3611  
1219 0 0 7 1037 3957 0 0 1031 ////////////////////////////////////////////////////////////////////
//     Function: GeomNode::modify_geom
//       Access: Published
//  Description: Returns the nth geom of the node, suitable for
//               modifying it.  If the nth Geom has multiple reference
//               counts to it, reassigns it to an identical copy
//               first, and returns the new copy--this provides a
//               "copy on write" that ensures that the Geom that is
//               returned is unique to this GeomNode and is not shared
//               with any other GeomNodes.
//
//               Note that if this method is called in a downstream
//               stage (for instance, during cull or draw), then it
//               will propagate the new list of Geoms upstream all the
//               way to pipeline stage 0, which may step on changes
//               that were made independently in pipeline stage 0.
//               Use with caution.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3951  1 n 1 3611  
1220 0 0 7 1038 3657 0 0 585 ////////////////////////////////////////////////////////////////////
//     Function: GeomNode::get_geom_state
//       Access: Published
//  Description: Returns the RenderState associated with the nth geom
//               of the node.  This is just the RenderState directly
//               associated with the Geom; the actual state in which
//               the Geom is rendered will also be affected by
//               RenderStates that appear on the scene graph in nodes
//               above this GeomNode.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3952  1 n 1 3611  
1221 0 0 4 1039 3642 0 0 965 ////////////////////////////////////////////////////////////////////
//     Function: GeomNode::set_geom_state
//       Access: Published
//  Description: Changes the RenderState associated with the nth geom
//               of the node.  This is just the RenderState directly
//               associated with the Geom; the actual state in which
//               the Geom is rendered will also be affected by
//               RenderStates that appear on the scene graph in nodes
//               above this GeomNode.
//
//               Note that if this method is called in a downstream
//               stage (for instance, during cull or draw), then it
//               will propagate the new list of Geoms upstream all the
//               way to pipeline stage 0, which may step on changes
//               that were made independently in pipeline stage 0.
//               Use with caution.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3951  1 n 1 3611  5 state 1 3657  
1222 0 0 4 1040 3642 0 0 432 ////////////////////////////////////////////////////////////////////
//     Function: GeomNode::add_geom
//       Access: Published
//  Description: Adds a new Geom to the node.  The geom is given the
//               indicated state (which may be
//               RenderState::make_empty(), to completely inherit its
//               state from the scene graph).
//////////////////////////////////////////////////////////////////// 3 4 this 3 3951  4 geom 1 3957  5 state 1 3657  
1223 0 0 4 1041 3642 0 0 336 ////////////////////////////////////////////////////////////////////
//     Function: GeomNode::add_geoms_from
//       Access: Published
//  Description: Copies the Geoms (and their associated RenderStates)
//               from the indicated GeomNode into this one.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3951  5 other 1 3952  
1224 0 0 4 1042 3642 0 0 708 ////////////////////////////////////////////////////////////////////
//     Function: GeomNode::set_geom
//       Access: Public
//  Description: Replaces the nth Geom of the node with a new pointer.
//               There must already be a Geom in this slot.
//
//               Note that if this method is called in a downstream
//               stage (for instance, during cull or draw), then it
//               will propagate the new list of Geoms upstream all the
//               way to pipeline stage 0, which may step on changes
//               that were made independently in pipeline stage 0.
//               Use with caution.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3951  1 n 1 3611  4 geom 1 3957  
1225 0 0 4 1043 3642 0 0 256 ////////////////////////////////////////////////////////////////////
//     Function: GeomNode::remove_geom
//       Access: Published
//  Description: Removes the nth geom from the node.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3951  1 n 1 3611  
1226 0 0 4 1044 3642 0 0 270 ////////////////////////////////////////////////////////////////////
//     Function: GeomNode::remove_all_geoms
//       Access: Published
//  Description: Removes all the geoms from the node at once.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3951  
1227 0 0 6 1045 3610 0 0 453 ////////////////////////////////////////////////////////////////////
//     Function: GeomNode::check_valid
//       Access: Published
//  Description: Verifies that the each Geom within the GeomNode
//               reference vertices that actually exist within its
//               GeomVertexData.  Returns true if the GeomNode appears
//               to be valid, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3952  
1228 0 0 4 1046 3642 0 0 755 ////////////////////////////////////////////////////////////////////
//     Function: GeomNode::decompose
//       Access: Published
//  Description: Calls decompose() on each Geom with the GeomNode.
//               This decomposes higher-order primitive types, like
//               triangle strips, into lower-order types like indexed
//               triangles.  Normally there is no reason to do this,
//               but it can be useful as an early preprocessing step,
//               to allow a later call to unify() to proceed more
//               quickly.
//
//               See also SceneGraphReducer::decompose(), which is the
//               normal way this is called.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3951  
1229 0 0 4 1047 3642 0 0 1354 ////////////////////////////////////////////////////////////////////
//     Function: GeomNode::unify
//       Access: Published
//  Description: Attempts to unify all of the Geoms contained within
//               this node into a single Geom, or at least as few
//               Geoms as possible.  In turn, the individual
//               GeomPrimitives contained within each resulting Geom
//               are also unified.  The goal is to reduce the number
//               of GeomPrimitives within the node as far as possible.
//               This may result in composite primitives, such as
//               triangle strips and triangle fans, being decomposed
//               into triangles.  See also Geom::unify().
//
//               max_indices represents the maximum number of indices
//               that will be put in any one GeomPrimitive.  If
//               preserve_order is true, then the primitives will not
//               be reordered during the operation, even if this
//               results in a suboptimal result.
//
//               In order for this to be successful, the primitives
//               must reference the same GeomVertexData, have the same
//               fundamental primitive type, and have compatible shade
//               models.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3951  11 max_indices 1 3611  14 preserve_order 1 3610  
1230 0 0 4 1048 3642 0 0 294 ////////////////////////////////////////////////////////////////////
//     Function: GeomNode::write_geoms
//       Access: Published
//  Description: Writes a short description of all the Geoms in the
//               node.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3952  3 out 1 3646  12 indent_level 1 3611  
1231 0 0 4 1049 3642 0 0 299 ////////////////////////////////////////////////////////////////////
//     Function: GeomNode::write_verbose
//       Access: Published
//  Description: Writes a detailed description of all the Geoms in the
//               node.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3952  3 out 1 3646  12 indent_level 1 3611  
1232 0 0 7 1050 3699 0 0 323 ////////////////////////////////////////////////////////////////////
//     Function: GeomNode::get_default_collide_mask
//       Access: Published, Static
//  Description: Returns the default into_collide_mask assigned to new
//               GeomNodes.
//////////////////////////////////////////////////////////////////// 0 
1233 0 0 7 1051 3649 0 0 0 0 
1234 0 0 7 1054 3688 2111 0 260 ////////////////////////////////////////////////////////////////////
//     Function: CullTraverserData::node
//       Access: Published
//  Description: Returns the node traversed to so far.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3676  
1235 0 0 7 1055 3608 0 0 344 ////////////////////////////////////////////////////////////////////
//     Function: CullTraverserData::get_modelview_transform
//       Access: Published
//  Description: Returns the modelview transform: the relative
//               transform from the camera to the model.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3676  4 trav 1 3958  
1236 0 0 7 1056 3608 0 0 354 ////////////////////////////////////////////////////////////////////
//     Function: CullTraverserData::get_internal_transform
//       Access: Published
//  Description: Returns the internal transform: the modelview
//               transform in the GSG's internal coordinate system.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3676  4 trav 1 3958  
1237 0 0 7 1057 3608 0 0 352 ////////////////////////////////////////////////////////////////////
//     Function: CullTraverserData::get_net_transform
//       Access: Published
//  Description: Returns the net transform: the relative transform
//               from root of the scene graph to the current node.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3676  4 trav 1 3958  
1238 0 0 6 1058 3610 0 0 529 ////////////////////////////////////////////////////////////////////
//     Function: CullTraverserData::is_in_view
//       Access: Published
//  Description: Returns true if the current node is within the view
//               frustum, false otherwise.  If the node's bounding
//               volume falls completely within the view frustum, this
//               will also reset the view frustum pointer, saving some
//               work for future nodes.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3960  11 camera_mask 1 3961  
1239 0 0 6 1059 3610 0 0 523 ////////////////////////////////////////////////////////////////////
//     Function: CullTraverserData::is_this_node_hidden
//       Access: Published
//  Description: Returns true if this particular node is hidden, even
//               though we might be traversing past this node to find
//               a child node that has had show_through() called for
//               it.  If this returns true, the node should not be
//               rendered.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3676  11 camera_mask 1 3961  
1240 0 0 4 1060 3642 0 0 392 ////////////////////////////////////////////////////////////////////
//     Function: CullTraverserData::apply_transform_and_state
//       Access: Published
//  Description: Applies the transform and state from the current
//               node onto the current data.  This also evaluates
//               billboards, etc.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3960  4 trav 1 3675  
1241 0 0 4 1060 3642 0 0 420 ////////////////////////////////////////////////////////////////////
//     Function: CullTraverserData::apply_transform_and_state
//       Access: Published
//  Description: Applies the indicated transform and state changes
//               (e.g. as extracted from a node) onto the current
//               data.  This also evaluates billboards, etc.
//////////////////////////////////////////////////////////////////// 6 4 this 3 3960  4 trav 1 3675  14 node_transform 1 3608  10 node_state 1 3657  12 node_effects 1 3685  15 off_clip_planes 1 3654  
1242 0 0 4 1062 3642 0 0 273 ////////////////////////////////////////////////////////////////////
//     Function: SceneSetup::set_display_region
//       Access: Published
//  Description: Specifies the display region for the scene.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3963  14 display_region 1 3964  
1243 0 0 6 1063 3964 0 0 271 ////////////////////////////////////////////////////////////////////
//     Function: SceneSetup::get_display_region
//       Access: Published
//  Description: Returns the display region for the scene.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3966  
1244 0 0 4 1064 3642 0 0 309 ////////////////////////////////////////////////////////////////////
//     Function: SceneSetup::set_viewport_size
//       Access: Published
//  Description: Specifies the size of the viewport (display region),
//               in pixels.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3963  5 width 1 3611  6 height 1 3611  
1245 0 0 6 1065 3611 0 0 308 ////////////////////////////////////////////////////////////////////
//     Function: SceneSetup::get_viewport_width
//       Access: Published
//  Description: Returns the width of the viewport (display region) in
//               pixels.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3966  
1246 0 0 6 1066 3611 0 0 310 ////////////////////////////////////////////////////////////////////
//     Function: SceneSetup::get_viewport_height
//       Access: Published
//  Description: Returns the height of the viewport (display region) in
//               pixels.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3966  
1247 0 0 4 1067 3642 0 0 263 ////////////////////////////////////////////////////////////////////
//     Function: SceneSetup::set_scene_root
//       Access: Published
//  Description: Specifies the root node of the scene.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3963  10 scene_root 1 3755  
1248 0 0 6 1068 3755 0 0 261 ////////////////////////////////////////////////////////////////////
//     Function: SceneSetup::get_scene_root
//       Access: Published
//  Description: Returns the root node of the scene.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3966  
1249 0 0 4 1069 3642 0 0 264 ////////////////////////////////////////////////////////////////////
//     Function: SceneSetup::set_camera_path
//       Access: Published
//  Description: Specifies the NodePath to the camera.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3963  11 camera_path 1 3755  
1250 0 0 6 1070 3755 0 0 262 ////////////////////////////////////////////////////////////////////
//     Function: SceneSetup::get_camera_path
//       Access: Published
//  Description: Returns the NodePath to the camera.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3966  
1251 0 0 4 1071 3642 0 0 273 ////////////////////////////////////////////////////////////////////
//     Function: SceneSetup::set_camera_node
//       Access: Published
//  Description: Specifies the camera used to render the scene.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3963  11 camera_node 1 3921  
1252 0 0 7 1072 3921 2689 0 271 ////////////////////////////////////////////////////////////////////
//     Function: SceneSetup::get_camera_node
//       Access: Published
//  Description: Returns the camera used to render the scene.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3966  
1253 0 0 4 1073 3642 0 0 269 ////////////////////////////////////////////////////////////////////
//     Function: SceneSetup::set_lens
//       Access: Published
//  Description: Indicates the particular Lens used for rendering.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3963  4 lens 1 3915  
1254 0 0 7 1074 3915 0 0 267 ////////////////////////////////////////////////////////////////////
//     Function: SceneSetup::get_lens
//       Access: Published
//  Description: Returns the particular Lens used for rendering.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3966  
1255 0 0 4 1075 3642 0 0 477 ////////////////////////////////////////////////////////////////////
//     Function: SceneSetup::set_inverted
//       Access: Published
//  Description: Changes the current setting of the inverted flag.
//               When this is true, the scene is rendered into the
//               window upside-down and backwards, that is, inverted
//               as if viewed through a mirror placed on the floor.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3963  8 inverted 1 3610  
1256 0 0 6 1076 3610 0 0 434 ////////////////////////////////////////////////////////////////////
//     Function: SceneSetup::get_inverted
//       Access: Published
//  Description: Returns the current setting of the inverted flag.
//               When this is true, the scene is rendered into the
//               window upside-down, flipped like a mirror along the X
//               axis.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3966  
1257 0 0 6 1077 3755 0 0 469 ////////////////////////////////////////////////////////////////////
//     Function: SceneSetup::get_cull_center
//       Access: Published
//  Description: Returns the point from which the culling operations
//               will be performed.  This is normally the camera, but
//               if camera->set_cull_center() has been specified, it
//               will be that special node instead.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3966  
1258 0 0 7 1078 3880 0 0 521 ////////////////////////////////////////////////////////////////////
//     Function: SceneSetup::get_cull_bounds
//       Access: Published
//  Description: Returns the bounding volume that should be used to
//               perform view-frustum culling (in the space of
//               get_cull_center()).  This is normally the current
//               lens' bounding volume, but it may be overridden with
//               Camera::set_cull_bounds().
//////////////////////////////////////////////////////////////////// 1 4 this 3 3966  
1259 0 0 4 1079 3642 0 0 378 ////////////////////////////////////////////////////////////////////
//     Function: SceneSetup::set_initial_state
//       Access: Published
//  Description: Sets the initial state which is applied to all nodes
//               in the scene, as if it were set at the top of the
//               scene graph.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3963  13 initial_state 1 3657  
1260 0 0 7 1080 3657 0 0 321 ////////////////////////////////////////////////////////////////////
//     Function: SceneSetup::get_initial_state
//       Access: Published
//  Description: Returns the initial state as set by a previous call
//               to set_initial_state().
//////////////////////////////////////////////////////////////////// 1 4 this 3 3966  
1261 0 0 4 1081 3642 0 0 316 ////////////////////////////////////////////////////////////////////
//     Function: SceneSetup::set_camera_transform
//       Access: Published
//  Description: Specifies the position of the camera relative to the
//               starting node.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3963  16 camera_transform 1 3608  
1262 0 0 7 1082 3608 0 0 314 ////////////////////////////////////////////////////////////////////
//     Function: SceneSetup::get_camera_transform
//       Access: Published
//  Description: Returns the position of the camera relative to the
//               starting node.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3966  
1263 0 0 4 1083 3642 0 0 378 ////////////////////////////////////////////////////////////////////
//     Function: SceneSetup::set_world_transform
//       Access: Published
//  Description: Specifies the position of the starting node relative
//               to the camera.  This is the inverse of the camera
//               transform.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3963  15 world_transform 1 3608  
1264 0 0 7 1084 3608 0 0 376 ////////////////////////////////////////////////////////////////////
//     Function: SceneSetup::get_world_transform
//       Access: Published
//  Description: Returns the position of the starting node relative
//               to the camera.  This is the inverse of the camera
//               transform.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3966  
1265 0 0 4 1085 3642 0 0 345 ////////////////////////////////////////////////////////////////////
//     Function: SceneSetup::set_cs_transform
//       Access: Published
//  Description: Specifies the transform from the camera's coordinate
//               system to the GSG's internal coordinate system.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3963  12 cs_transform 1 3608  
1266 0 0 7 1086 3608 0 0 343 ////////////////////////////////////////////////////////////////////
//     Function: SceneSetup::get_cs_transform
//       Access: Published
//  Description: Returns the transform from the camera's coordinate
//               system to the GSG's internal coordinate system.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3966  
1267 0 0 4 1087 3642 0 0 378 ////////////////////////////////////////////////////////////////////
//     Function: SceneSetup::set_cs_world_transform
//       Access: Published
//  Description: Specifies the position from the starting node
//               relative to the camera, in the GSG's internal
//               coordinate system.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3963  18 cs_world_transform 1 3608  
1268 0 0 7 1088 3608 0 0 376 ////////////////////////////////////////////////////////////////////
//     Function: SceneSetup::get_cs_world_transform
//       Access: Published
//  Description: Returns the position from the starting node
//               relative to the camera, in the GSG's internal
//               coordinate system.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3966  
1269 0 0 7 1089 3649 0 0 0 0 
1270 0 0 7 1092 3879 2111 0 215 ////////////////////////////////////////////////////////////////////
//     Function: Fog::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 name 1 3687  
1271 0 0 6 1094 3539 0 0 212 ////////////////////////////////////////////////////////////////////
//     Function: Fog::get_mode
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 3968  
1272 0 0 4 1095 3642 0 0 934 ////////////////////////////////////////////////////////////////////
//     Function: Fog::set_mode
//       Access: Published
//  Description: Specifies the computation that is used to determine
//               the fog effect.  If this is M_linear, then the fog
//               will range from linearly from the onset point to the
//               opaque point (or for the distances specified in
//               set_linear_range), and the fog object should be
//               parented into the scene graph, or to the camera.
//
//               If this is anything else, the onset point and opaque
//               point are not used, and the fog effect is based on
//               the value specified to set_exp_density(), and it
//               doesn't matter to which node the fog object is
//               parented, or if it is parented anywhere at all.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3879  4 mode 1 3539  
1273 0 0 6 1096 3659 0 0 243 ////////////////////////////////////////////////////////////////////
//     Function: Fog::get_color
//       Access: Published
//  Description: Returns the color of the fog.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3968  
1274 0 0 4 1097 3642 0 0 291 ////////////////////////////////////////////////////////////////////
//     Function: Fog::set_color
//       Access: Published
//  Description: Sets the color of the fog.  The alpha component is
//               not used.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3879  5 color 1 3659  
1275 0 0 4 1097 3642 0 0 240 ////////////////////////////////////////////////////////////////////
//     Function: Fog::set_color
//       Access: Published
//  Description: Sets the color of the fog.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3879  1 r 1 3622  1 g 1 3622  1 b 1 3622  
1276 0 0 4 1098 3642 0 0 711 ////////////////////////////////////////////////////////////////////
//     Function: Fog::set_linear_range
//       Access: Published
//  Description: Specifies the effects of the fog in linear distance
//               units.  This is only used if the mode is M_linear.
//
//               This specifies a fog that begins at distance onset
//               units from the origin, and becomes totally opaque at
//               distance opaque units from the origin, along the
//               forward axis (usually Y).
//
//               This function also implicitly sets the mode the
//               M_linear, if it is not already set.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3879  5 onset 1 3622  6 opaque 1 3622  
1277 0 0 6 1099 3636 0 0 338 ////////////////////////////////////////////////////////////////////
//     Function: Fog::get_linear_onset_point
//       Access: Published
//  Description: Returns the point in space at which the fog begins.
//               This is only used if the mode is M_linear.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3968  
1278 0 0 4 1100 3642 0 0 340 ////////////////////////////////////////////////////////////////////
//     Function: Fog::set_linear_onset_point
//       Access: Published
//  Description: Specifies the point in space at which the fog begins.
//               This is only used if the mode is M_linear.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3879  18 linear_onset_point 1 3636  
1279 0 0 4 1100 3642 0 0 340 ////////////////////////////////////////////////////////////////////
//     Function: Fog::set_linear_onset_point
//       Access: Published
//  Description: Specifies the point in space at which the fog begins.
//               This is only used if the mode is M_linear.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3879  1 x 1 3622  1 y 1 3622  1 z 1 3622  
1280 0 0 6 1101 3636 0 0 379 ////////////////////////////////////////////////////////////////////
//     Function: Fog::get_linear_opaque_point
//       Access: Published
//  Description: Returns the point in space at which the fog
//               completely obscures geometry.  This is only used if
//               the mode is M_linear.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3968  
1281 0 0 4 1102 3642 0 0 381 ////////////////////////////////////////////////////////////////////
//     Function: Fog::set_linear_opaque_point
//       Access: Published
//  Description: Specifies the point in space at which the fog
//               completely obscures geometry.  This is only used if
//               the mode is M_linear.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3879  19 linear_opaque_point 1 3636  
1282 0 0 4 1102 3642 0 0 381 ////////////////////////////////////////////////////////////////////
//     Function: Fog::set_linear_opaque_point
//       Access: Published
//  Description: Specifies the point in space at which the fog
//               completely obscures geometry.  This is only used if
//               the mode is M_linear.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3879  1 x 1 3622  1 y 1 3622  1 z 1 3622  
1283 0 0 4 1103 3642 0 0 2210 ////////////////////////////////////////////////////////////////////
//     Function: Fog::set_linear_fallback
//       Access: Published
//  Description: Fog effects are traditionally defined in
//               camera-relative space, but the Panda Fog node has a
//               special mode in which it can define a linear fog
//               effect in an arbitrary coordinate space.
//
//               This is done by specifying 3-d onset and opaque
//               points, and parenting the Fog object somewhere within
//               the scene graph.  In this mode, the fog will be
//               rendered as if it extended along the vector from the
//               onset point to the opaque point, in 3-d space.
//
//               However, the underlying fog effect supported by
//               hardware is generally only one-dimensional, and must
//               be rendered based on linear distance from the camera
//               plane.  Thus, this in-the-world effect is most
//               effective when the fog vector from onset point to
//               opaque point is most nearly parallel to the camera's
//               eye vector.
//
//               As the angle between the fog vector and the eye
//               vector increases, the accuracy of the effect
//               diminishes, up to a complete breakdown of the effect
//               at a 90 degree angle.
//
//               This function exists to define the workaround to this
//               problem.  The linear fallback parameters given here
//               specify how the fog should be rendered when the
//               parameters are exceeded in this way.
//
//               The angle parameter is the minimum angle, in degrees,
//               of the fog vector to the eye vector, at which the
//               fallback effect should be employed.  The onset and
//               opaque parameters specify the camera-relative onset
//               and opaque distances to pass to the rendering
//               hardware when employing the fallback effect.  This
//               supercedes the 3-d onset point and opaque points.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3879  5 angle 1 3622  5 onset 1 3622  6 opaque 1 3622  
1284 0 0 6 1104 3622 0 0 362 ////////////////////////////////////////////////////////////////////
//     Function: Fog::get_exp_density
//       Access: Published
//  Description: Returns the density of the fog for exponential
//               calculations.  This is only used if the mode is not
//               M_linear.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3968  
1285 0 0 4 1105 3642 0 0 489 ////////////////////////////////////////////////////////////////////
//     Function: Fog::set_exp_density
//       Access: Published
//  Description: Sets the density of the fog for exponential
//               calculations.  This is only used if the mode is not
//               M_linear.
//
//               If the mode is currently set to M_linear, this
//               function implicitly sets it to M_exponential.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3879  11 exp_density 1 3622  
1286 0 0 7 1106 3649 0 0 0 0 
1287 0 0 7 1108 3654 0 0 329 ////////////////////////////////////////////////////////////////////
//     Function: FogAttrib::make
//       Access: Published, Static
//  Description: Constructs a new FogAttrib object suitable for
//               rendering the indicated fog onto geometry.
//////////////////////////////////////////////////////////////////// 1 3 fog 1 3879  
1288 0 0 7 1109 3654 0 0 317 ////////////////////////////////////////////////////////////////////
//     Function: FogAttrib::make_off
//       Access: Published, Static
//  Description: Constructs a new FogAttrib object suitable for
//               rendering unfogd geometry.
//////////////////////////////////////////////////////////////////// 0 
1289 0 0 7 1110 3654 0 0 396 ////////////////////////////////////////////////////////////////////
//     Function: FogAttrib::make_default
//       Access: Published, Static
//  Description: Returns a RenderAttrib that corresponds to whatever
//               the standard default properties for render attributes
//               of this type ought to be.
//////////////////////////////////////////////////////////////////// 0 
1290 0 0 6 1111 3610 0 0 325 ////////////////////////////////////////////////////////////////////
//     Function: FogAttrib::is_off
//       Access: Published
//  Description: Returns true if the FogAttrib is an 'off' FogAttrib,
//               indicating that it should disable fog.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3970  
1291 0 0 7 1112 3879 2111 0 356 ////////////////////////////////////////////////////////////////////
//     Function: FogAttrib::get_fog
//       Access: Published
//  Description: If the FogAttrib is not an 'off' FogAttrib,
//               returns the fog that is associated.  Otherwise,
//               return NULL.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3970  
1292 0 0 6 1113 3611 0 0 0 0 
1293 0 0 7 1114 3649 0 0 0 0 
1294 0 0 7 1117 3675 2943 0 225 ////////////////////////////////////////////////////////////////////
//     Function: CullTraverser::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
1295 0 0 7 1117 3675 2943 0 230 ////////////////////////////////////////////////////////////////////
//     Function: CullTraverser::Copy Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 3958  
1296 0 0 7 1118 3701 0 0 266 ////////////////////////////////////////////////////////////////////
//     Function: CullTraverser::get_gsg
//       Access: Published
//  Description: Returns the GraphicsStateGuardian in effect.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3958  
1297 0 0 7 1119 3691 0 0 340 ////////////////////////////////////////////////////////////////////
//     Function: CullTraverser::get_current_thread
//       Access: Published
//  Description: Returns the currently-executing thread object, as
//               passed to the CullTraverser constructor.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3958  
1298 0 0 4 1120 3642 0 0 388 ////////////////////////////////////////////////////////////////////
//     Function: CullTraverser::set_scene
//       Access: Published, Virtual
//  Description: Sets the SceneSetup object that indicates the initial
//               camera position, etc.  This must be called before
//               traversal begins.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3675  11 scene_setup 1 3963  3 gsg 1 3701  20 dr_incomplete_render 1 3610  
1299 0 0 7 1121 3963 2894 0 254 ////////////////////////////////////////////////////////////////////
//     Function: CullTraverser::get_scene
//       Access: Published
//  Description: Returns the SceneSetup object.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3958  
1300 0 0 6 1122 3610 0 0 349 ////////////////////////////////////////////////////////////////////
//     Function: CullTraverser::has_tag_state_key
//       Access: Published
//  Description: Returns true if a nonempty tag state key has been
//               specified for the scene's camera, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3958  
1301 0 0 6 1123 3687 0 0 330 ////////////////////////////////////////////////////////////////////
//     Function: CullTraverser::get_tag_state_key
//       Access: Published
//  Description: Returns the tag state key that has been specified for
//               the scene's camera, if any.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3958  
1302 0 0 4 1124 3642 0 0 571 ////////////////////////////////////////////////////////////////////
//     Function: CullTraverser::set_camera_mask
//       Access: Published
//  Description: Changes the visibility mask for the camera viewing
//               the scene.  This is normally set automatically
//               at the time setup_scene() is called; you should
//               change this only if you want to render some set of
//               objects different from what the camera normally would
//               draw.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3675  11 camera_mask 1 3961  
1303 0 0 6 1125 3961 0 0 309 ////////////////////////////////////////////////////////////////////
//     Function: CullTraverser::get_camera_mask
//       Access: Published
//  Description: Returns the visibility mask from the camera viewing
//               the scene.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3958  
1304 0 0 7 1126 3608 0 0 317 ////////////////////////////////////////////////////////////////////
//     Function: CullTraverser::get_camera_transform
//       Access: Published
//  Description: Returns the position of the camera relative to the
//               starting node.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3958  
1305 0 0 7 1127 3608 0 0 689 ////////////////////////////////////////////////////////////////////
//     Function: CullTraverser::get_world_transform
//       Access: Published
//  Description: Returns the position of the starting node relative
//               to the camera.  This is the inverse of the camera
//               transform.
//
//               Note that this value is always the position of the
//               starting node, not the current node, even if it is
//               sampled during a traversal.  To get the transform of
//               the current node use
//               CullTraverserData::get_modelview_transform().
//////////////////////////////////////////////////////////////////// 1 4 this 3 3958  
1306 0 0 7 1128 3657 0 0 401 ////////////////////////////////////////////////////////////////////
//     Function: CullTraverser::get_initial_state
//       Access: Published
//  Description: Returns the initial RenderState at the top of the
//               scene graph we are traversing, or the empty state if
//               the initial state was never set.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3958  
1307 0 0 6 1129 3610 0 0 337 ////////////////////////////////////////////////////////////////////
//     Function: CullTraverser::get_depth_offset_decals
//       Access: Published
//  Description: Returns true, as depth offsets are the only way
//               that we implement decals nowadays.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3958  
1308 0 0 4 1130 3642 0 0 405 ////////////////////////////////////////////////////////////////////
//     Function: CullTraverser::set_view_frustum
//       Access: Published
//  Description: Specifies the bounding volume that corresponds to the
//               view frustum.  Any primitives that fall entirely
//               outside of this volume are not drawn.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3675  12 view_frustum 1 3972  
1309 0 0 7 1131 3972 0 0 764 ////////////////////////////////////////////////////////////////////
//     Function: CullTraverser::get_view_frustum
//       Access: Published
//  Description: Returns the bounding volume that corresponds to the
//               view frustum, or NULL if the view frustum is not in
//               use or has not been set.
//
//               Note that the view frustum returned here is always in
//               the coordinate space of the starting node, not the
//               current node, even if it is sampled during a
//               traversal.  To get the view frustum in the current
//               node's coordinate space, check in the current
//               CullTraverserData.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3958  
1310 0 0 4 1132 3642 0 0 349 ////////////////////////////////////////////////////////////////////
//     Function: CullTraverser::set_cull_handler
//       Access: Published
//  Description: Specifies the object that will receive the culled
//               Geoms.  This must be set before calling traverse().
//////////////////////////////////////////////////////////////////// 2 4 this 3 3675  12 cull_handler 1 3974  
1311 0 0 6 1133 3974 0 0 302 ////////////////////////////////////////////////////////////////////
//     Function: CullTraverser::get_cull_handler
//       Access: Published
//  Description: Returns the object that will receive the culled
//               Geoms.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3958  
1312 0 0 4 1134 3642 0 0 344 ////////////////////////////////////////////////////////////////////
//     Function: CullTraverser::set_portal_clipper
//       Access: Published
//  Description: Specifies _portal_clipper object pointer that
//               subsequent traverse() or traverse_below may use.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3675  14 portal_clipper 1 3976  
1313 0 0 6 1135 3976 0 0 268 ////////////////////////////////////////////////////////////////////
//     Function: CullTraverser::get_portal_clipper
//       Access: Published
//  Description: Returns the _portal_clipper pointer
//////////////////////////////////////////////////////////////////// 1 4 this 3 3958  
1314 0 0 6 1136 3610 0 0 666 ////////////////////////////////////////////////////////////////////
//     Function: CullTraverser::get_effective_incomplete_render
//       Access: Published
//  Description: Returns true if the cull traversal is effectively in
//               incomplete_render state, considering both the GSG's
//               incomplete_render and the current DisplayRegion's
//               incomplete_render flags.  This returns the flag
//               during the cull traversal; see
//               GSG::get_effective_incomplete_render() for this same
//               flag during the draw traversal.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3958  
1315 0 0 4 1137 3642 0 0 401 ////////////////////////////////////////////////////////////////////
//     Function: CullTraverser::traverse
//       Access: Published
//  Description: Traverses from the next node with the given
//               data, which has been constructed with the node but
//               has not yet been converted into the node's space.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3675  4 data 1 3960  
1316 0 0 4 1137 3642 0 0 268 ////////////////////////////////////////////////////////////////////
//     Function: CullTraverser::traverse
//       Access: Published
//  Description: Begins the traversal from the indicated node.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3675  4 root 1 3755  
1317 0 0 4 1138 3642 0 0 390 ////////////////////////////////////////////////////////////////////
//     Function: CullTraverser::traverse_below
//       Access: Published, Virtual
//  Description: Traverses all the children of the indicated node,
//               with the given data, which has been converted into
//               the node's space.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3675  4 data 1 3960  
1318 0 0 4 1139 3642 0 0 397 ////////////////////////////////////////////////////////////////////
//     Function: CullTraverser::end_traverse
//       Access: Published, Virtual
//  Description: Should be called when the traverser has finished
//               traversing its scene, this gives it a chance to do
//               any necessary finalization.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3675  
1319 0 0 4 1140 3642 0 0 284 ////////////////////////////////////////////////////////////////////
//     Function: CullTraverser::flush_level
//       Access: Published, Static
//  Description: Flushes the PStatCollectors used during traversal.
//////////////////////////////////////////////////////////////////// 0 
1320 0 0 4 1141 3642 0 0 320 ////////////////////////////////////////////////////////////////////
//     Function: CullTraverser::draw_bounding_volume
//       Access: Published
//  Description: Draws an appropriate visualization of the indicated
//               bounding volume.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3958  3 vol 1 3705  18 internal_transform 1 3608  
1321 0 0 7 1142 3649 0 0 0 0 
1322 0 0 7 1146 3981 0 0 312 ////////////////////////////////////////////////////////////////////
//     Function: GeomDrawCallbackData::get_object
//       Access: Published
//  Description: Returns a pointer to the particular object that is
//               being drawn.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3979  
1323 0 0 7 1147 3701 0 0 266 ////////////////////////////////////////////////////////////////////
//     Function: GeomDrawCallbackData::get_gsg
//       Access: Published
//  Description: Returns a pointer to the current GSG.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3979  
1324 0 0 6 1148 3610 0 0 525 ////////////////////////////////////////////////////////////////////
//     Function: GeomDrawCallbackData::get_force
//       Access: Published
//  Description: Returns true if any required data should be forced
//               into memory if necessary to render the object, or
//               false if the object should be omitted if some of the
//               data is not available (at least until the data
//               becomes available later).
//////////////////////////////////////////////////////////////////// 1 4 this 3 3979  
1325 0 0 4 1149 3642 0 0 807 ////////////////////////////////////////////////////////////////////
//     Function: GeomDrawCallbackData::set_lost_state
//       Access: Published
//  Description: Sets the lost_state flag.  If this is true, the
//               callback does not have to be quite so careful to
//               clean up after itself; Panda will assume that the
//               graphics state is in an unknown state after the
//               callback has finished, and will issue all the
//               necessary calls to restore it.  If this is false,
//               Panda will assume the callback will leave the
//               graphics state exactly as it came in, and won't
//               bother to try to restore it.  The default is true.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3982  10 lost_state 1 3610  
1326 0 0 6 1150 3610 0 0 287 ////////////////////////////////////////////////////////////////////
//     Function: GeomDrawCallbackData::get_lost_state
//       Access: Published
//  Description: Returns the lost_state flag.  See set_lost_state().
//////////////////////////////////////////////////////////////////// 1 4 this 3 3979  
1327 0 0 7 1151 3649 0 0 0 0 
1328 0 0 7 1155 3985 0 0 440 ////////////////////////////////////////////////////////////////////
//     Function: CullResult::make_next
//       Access: Published
//  Description: Returns a newly-allocated CullResult object that
//               contains a copy of just the subset of the data from
//               this CullResult object that is worth keeping around
//               for next frame.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3983  
1329 0 0 7 1156 3987 0 0 505 ////////////////////////////////////////////////////////////////////
//     Function: CullResult::get_bin
//       Access: Public
//  Description: Returns the CullBin associated with the indicated
//               bin_index, or NULL if the bin_index is invalid.  If
//               there is the first time this bin_index has been
//               requested for this CullResult, creates a new CullBin
//               object on the fly.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3985  9 bin_index 1 3611  
1330 0 0 4 1157 3642 0 0 394 ////////////////////////////////////////////////////////////////////
//     Function: CullResult::add_object
//       Access: Published
//  Description: Adds the indicated CullableObject to the appropriate
//               bin.  The bin becomes the owner of the object
//               pointer, and will eventually delete it.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3985  6 object 1 3981  9 traverser 1 3958  
1331 0 0 4 1158 3642 0 0 493 ////////////////////////////////////////////////////////////////////
//     Function: CullResult::finish_cull
//       Access: Published
//  Description: Called after all the geoms have been added, this
//               indicates that the cull process is finished for this
//               frame and gives the bins a chance to do any
//               post-processing (like sorting) before moving on to
//               draw.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3985  11 scene_setup 1 3963  14 current_thread 1 3691  
1332 0 0 4 1159 3642 0 0 291 ////////////////////////////////////////////////////////////////////
//     Function: CullResult::draw
//       Access: Published
//  Description: Asks all the bins to draw themselves in the correct
//               order.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3985  14 current_thread 1 3691  
1333 0 0 7 1160 3688 2111 0 865 ////////////////////////////////////////////////////////////////////
//     Function: CullResult::make_result_graph
//       Access: Published
//  Description: Returns a special scene graph constructed to
//               represent the results of the cull.  This will be a
//               hierarchy of nodes, one node for each bin, each of
//               which will in term be a parent of a number of
//               GeomNodes, representing the geometry drawn in each
//               bin.
//
//               This is useful mainly for high-level debugging and
//               abstraction tools; it should not be mistaken for the
//               low-level cull result itself.  For the low-level cull
//               result, use draw() to efficiently draw the culled
//               scene.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3985  
1334 0 0 7 1161 3649 0 0 0 0 
1335 0 0 7 1163 3683 0 0 261 ////////////////////////////////////////////////////////////////////
//     Function: DecalEffect::make
//       Access: Published, Static
//  Description: Constructs a new DecalEffect object.
//////////////////////////////////////////////////////////////////// 0 
1336 0 0 7 1164 3649 0 0 0 0 
1337 0 0 7 1167 3654 0 0 403 ////////////////////////////////////////////////////////////////////
//     Function: DepthOffsetAttrib::make
//       Access: Published, Static
//  Description: Constructs a new DepthOffsetAttrib object that
//               indicates the relative amount of bias to write to the
//               depth buffer for subsequent geometry.
//////////////////////////////////////////////////////////////////// 1 6 offset 1 3611  
1338 0 0 7 1167 3654 0 0 659 ////////////////////////////////////////////////////////////////////
//     Function: DepthOffsetAttrib::make
//       Access: Published, Static
//  Description: Constructs a new DepthOffsetAttrib object that
//               indicates the bias, and also specifies a minimum and
//               maximum (or, more precisely, nearest and farthest)
//               values to write to the depth buffer, in the range 0
//               .. 1.  This range is 0, 1 by default; setting it to
//               some other range can be used to create additional
//               depth buffer effects.
//////////////////////////////////////////////////////////////////// 3 6 offset 1 3611  9 min_value 1 3622  9 max_value 1 3622  
1339 0 0 7 1168 3654 0 0 404 ////////////////////////////////////////////////////////////////////
//     Function: DepthOffsetAttrib::make_default
//       Access: Published, Static
//  Description: Returns a RenderAttrib that corresponds to whatever
//               the standard default properties for render attributes
//               of this type ought to be.
//////////////////////////////////////////////////////////////////// 0 
1340 0 0 6 1169 3611 0 0 281 ////////////////////////////////////////////////////////////////////
//     Function: DepthOffsetAttrib::get_offset
//       Access: Published
//  Description: Returns the depth offset represented by this attrib.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3988  
1341 0 0 6 1170 3622 0 0 370 ////////////////////////////////////////////////////////////////////
//     Function: DepthOffsetAttrib::get_min_value
//       Access: Published
//  Description: Returns the value for the minimum (closest) depth
//               value to be stored in the buffer, in the range 0
//               .. 1.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3988  
1342 0 0 6 1171 3622 0 0 371 ////////////////////////////////////////////////////////////////////
//     Function: DepthOffsetAttrib::get_max_value
//       Access: Published
//  Description: Returns the value for the maximum (farthest) depth
//               value to be stored in the buffer, in the range 0
//               .. 1.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3988  
1343 0 0 6 1172 3611 0 0 0 0 
1344 0 0 7 1173 3649 0 0 0 0 
1345 0 0 7 1176 3654 0 0 269 ////////////////////////////////////////////////////////////////////
//     Function: DepthTestAttrib::make
//       Access: Published, Static
//  Description: Constructs a new DepthTestAttrib object.
//////////////////////////////////////////////////////////////////// 1 4 mode 1 3480  
1346 0 0 7 1177 3654 0 0 402 ////////////////////////////////////////////////////////////////////
//     Function: DepthTestAttrib::make_default
//       Access: Published, Static
//  Description: Returns a RenderAttrib that corresponds to whatever
//               the standard default properties for render attributes
//               of this type ought to be.
//////////////////////////////////////////////////////////////////// 0 
1347 0 0 6 1178 3480 0 0 254 ////////////////////////////////////////////////////////////////////
//     Function: DepthTestAttrib::get_mode
//       Access: Published
//  Description: Returns the depth write mode.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3990  
1348 0 0 6 1179 3611 0 0 0 0 
1349 0 0 7 1180 3649 0 0 0 0 
1350 0 0 7 1184 3654 0 0 271 ////////////////////////////////////////////////////////////////////
//     Function: DepthWriteAttrib::make
//       Access: Published, Static
//  Description: Constructs a new DepthWriteAttrib object.
//////////////////////////////////////////////////////////////////// 1 4 mode 1 3550  
1351 0 0 7 1185 3654 0 0 403 ////////////////////////////////////////////////////////////////////
//     Function: DepthWriteAttrib::make_default
//       Access: Published, Static
//  Description: Returns a RenderAttrib that corresponds to whatever
//               the standard default properties for render attributes
//               of this type ought to be.
//////////////////////////////////////////////////////////////////// 0 
1352 0 0 6 1186 3550 0 0 255 ////////////////////////////////////////////////////////////////////
//     Function: DepthWriteAttrib::get_mode
//       Access: Published
//  Description: Returns the depth write mode.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3992  
1353 0 0 6 1187 3611 0 0 0 0 
1354 0 0 7 1188 3649 0 0 0 0 
1355 0 0 7 1191 3873 2983 0 234 ////////////////////////////////////////////////////////////////////
//     Function: InternalNameCollection::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
1356 0 0 7 1191 3873 2983 0 239 ////////////////////////////////////////////////////////////////////
//     Function: InternalNameCollection::Copy Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 3994  
1357 0 0 6 1192 3873 0 0 0 2 4 this 3 3873  4 copy 1 3994  
1358 0 0 4 1194 3642 0 0 274 ////////////////////////////////////////////////////////////////////
//     Function: InternalNameCollection::add_name
//       Access: Published
//  Description: Adds a new InternalName to the collection.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3873  4 name 1 3717  
1359 0 0 6 1195 3610 0 0 410 ////////////////////////////////////////////////////////////////////
//     Function: InternalNameCollection::remove_name
//       Access: Published
//  Description: Removes the indicated InternalName from the collection.
//               Returns true if the name was removed, false if it was
//               not a member of the collection.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3873  4 name 1 3717  
1360 0 0 4 1196 3642 0 0 480 ////////////////////////////////////////////////////////////////////
//     Function: InternalNameCollection::add_names_from
//       Access: Published
//  Description: Adds all the InternalNames indicated in the other
//               collection to this name.  The other names are simply
//               appended to the end of the names in this list;
//               duplicates are not automatically removed.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3873  5 other 1 3994  
1361 0 0 4 1197 3642 0 0 343 ////////////////////////////////////////////////////////////////////
//     Function: InternalNameCollection::remove_names_from
//       Access: Published
//  Description: Removes from this collection all of the InternalNames
//               listed in the other collection.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3873  5 other 1 3994  
1362 0 0 4 1198 3642 0 0 485 ////////////////////////////////////////////////////////////////////
//     Function: InternalNameCollection::remove_duplicate_names
//       Access: Published
//  Description: Removes any duplicate entries of the same InternalNames
//               on this collection.  If a InternalName appears multiple
//               times, the first appearance is retained; subsequent
//               appearances are removed.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3873  
1363 0 0 6 1199 3610 0 0 336 ////////////////////////////////////////////////////////////////////
//     Function: InternalNameCollection::has_name
//       Access: Published
//  Description: Returns true if the indicated InternalName appears in
//               this collection, false otherwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3994  4 name 1 3717  
1364 0 0 4 1200 3642 0 0 275 ////////////////////////////////////////////////////////////////////
//     Function: InternalNameCollection::clear
//       Access: Published
//  Description: Removes all InternalNames from the collection.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3873  
1365 0 0 6 1201 3611 0 0 291 ////////////////////////////////////////////////////////////////////
//     Function: InternalNameCollection::get_num_names
//       Access: Published
//  Description: Returns the number of InternalNames in the collection.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3994  
1366 0 0 7 1202 3717 0 0 279 ////////////////////////////////////////////////////////////////////
//     Function: InternalNameCollection::get_name
//       Access: Published
//  Description: Returns the nth InternalName in the collection.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3994  5 index 1 3611  
1367 0 0 7 1203 3717 0 0 399 ////////////////////////////////////////////////////////////////////
//     Function: InternalNameCollection::operator []
//       Access: Published
//  Description: Returns the nth InternalName in the collection.  This is
//               the same as get_name(), but it may be a more
//               convenient way to access it.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3994  5 index 1 3611  
1368 0 0 6 1204 3611 0 0 335 ////////////////////////////////////////////////////////////////////
//     Function: InternalNameCollection::size
//       Access: Published
//  Description: Returns the number of names in the collection.  This
//               is the same thing as get_num_names().
//////////////////////////////////////////////////////////////////// 1 4 this 3 3994  
1369 0 0 6 1205 3873 0 0 0 2 4 this 3 3873  5 other 1 3994  
1370 0 0 7 1206 3873 2983 0 0 2 4 this 3 3994  5 other 1 3994  
1371 0 0 4 1207 3642 0 0 344 ////////////////////////////////////////////////////////////////////
//     Function: InternalNameCollection::output
//       Access: Published
//  Description: Writes a brief one-line description of the
//               InternalNameCollection to the indicated output stream.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3994  3 out 1 3646  
1372 0 0 4 1208 3642 0 0 348 ////////////////////////////////////////////////////////////////////
//     Function: InternalNameCollection::write
//       Access: Published
//  Description: Writes a complete multi-line description of the
//               InternalNameCollection to the indicated output stream.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3994  3 out 1 3646  12 indent_level 1 3611  
1373 0 0 7 1211 3688 2111 0 0 1 4 this 3 3709  
1374 0 0 6 1212 3610 0 0 330 ////////////////////////////////////////////////////////////////////
//     Function: Light::is_ambient_light
//       Access: Published, Virtual
//  Description: Returns true if this is an AmbientLight, false if it
//               is some other kind of light.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3996  
1375 0 0 6 1213 3659 0 0 253 ////////////////////////////////////////////////////////////////////
//     Function: Light::get_color
//       Access: Published
//  Description: Returns the basic color of the light.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3996  
1376 0 0 4 1214 3642 0 0 250 ////////////////////////////////////////////////////////////////////
//     Function: Light::set_color
//       Access: Published
//  Description: Sets the basic color of the light.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3709  5 color 1 3659  
1377 0 0 6 1215 3622 0 0 410 ////////////////////////////////////////////////////////////////////
//     Function: Light::get_exponent
//       Access: Public, Virtual
//  Description: For spotlights, returns the exponent that controls
//               the amount of light falloff from the center of the
//               spotlight.  For other kinds of lights, returns 0.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3996  
1378 0 0 6 1216 3659 0 0 376 ////////////////////////////////////////////////////////////////////
//     Function: Light::get_specular_color
//       Access: Public, Virtual
//  Description: Returns the color of specular highlights generated
//               by the light.  This value is meaningless for ambient
//               lights.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3996  
1379 0 0 6 1217 3614 0 0 455 ////////////////////////////////////////////////////////////////////
//     Function: Light::get_attenuation
//       Access: Public, Virtual
//  Description: Returns the terms of the attenuation equation for the
//               light.  These are, in order, the constant, linear,
//               and quadratic terms based on the distance from the
//               point to the vertex.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3996  
1380 0 0 4 1218 3642 0 0 740 ////////////////////////////////////////////////////////////////////
//     Function: Light::set_priority
//       Access: Published
//  Description: Changes the relative importance of this light
//               relative to the other lights that are applied
//               simultaneously.
//
//               The priority number is used to decide which of the
//               requested lights are to be selected for rendering
//               when more lights are requested than the hardware will
//               support.  The highest-priority n lights are selected
//               for rendering.
//
//               This is similar to TextureStage::set_priority().
//////////////////////////////////////////////////////////////////// 2 4 this 3 3709  8 priority 1 3611  
1381 0 0 6 1219 3611 0 0 305 ////////////////////////////////////////////////////////////////////
//     Function: Light::get_priority
//       Access: Published
//  Description: Returns the priority associated with this light.  See
//               set_priority().
//////////////////////////////////////////////////////////////////// 1 4 this 3 3996  
1382 0 0 6 1220 3611 0 0 0 1 4 this 3 3996  
1383 0 0 7 1221 3649 0 0 0 0 
1384 0 0 7 1224 3654 0 0 296 ////////////////////////////////////////////////////////////////////
//     Function: LightAttrib::make
//       Access: Published, Static
//  Description: Constructs a new LightAttrib object that does
//               nothing.
//////////////////////////////////////////////////////////////////// 0 
1385 0 0 7 1224 3654 0 0 457 ////////////////////////////////////////////////////////////////////
//     Function: LightAttrib::make
//       Access: Published, Static
//  Description: Constructs a new LightAttrib object that turns on (or
//               off, according to op) the indicated light(s).
//
//               This method is now deprecated.  Use add_on_light() or
//               add_off_light() instead.
//////////////////////////////////////////////////////////////////// 2 2 op 1 3554  5 light 1 3709  
1386 0 0 7 1224 3654 0 0 456 ////////////////////////////////////////////////////////////////////
//     Function: LightAttrib::make
//       Access: Published, Static
//  Description: Constructs a new LightAttrib object that turns on (or
//               off, according to op) the indicate light(s).
//
//               This method is now deprecated.  Use add_on_light() or
//               add_off_light() instead.
//////////////////////////////////////////////////////////////////// 3 2 op 1 3554  6 light1 1 3709  6 light2 1 3709  
1387 0 0 7 1224 3654 0 0 456 ////////////////////////////////////////////////////////////////////
//     Function: LightAttrib::make
//       Access: Published, Static
//  Description: Constructs a new LightAttrib object that turns on (or
//               off, according to op) the indicate light(s).
//
//               This method is now deprecated.  Use add_on_light() or
//               add_off_light() instead.
//////////////////////////////////////////////////////////////////// 4 2 op 1 3554  6 light1 1 3709  6 light2 1 3709  6 light3 1 3709  
1388 0 0 7 1224 3654 0 0 456 ////////////////////////////////////////////////////////////////////
//     Function: LightAttrib::make
//       Access: Published, Static
//  Description: Constructs a new LightAttrib object that turns on (or
//               off, according to op) the indicate light(s).
//
//               This method is now deprecated.  Use add_on_light() or
//               add_off_light() instead.
//////////////////////////////////////////////////////////////////// 5 2 op 1 3554  6 light1 1 3709  6 light2 1 3709  6 light3 1 3709  6 light4 1 3709  
1389 0 0 7 1225 3654 0 0 398 ////////////////////////////////////////////////////////////////////
//     Function: LightAttrib::make_default
//       Access: Published, Static
//  Description: Returns a RenderAttrib that corresponds to whatever
//               the standard default properties for render attributes
//               of this type ought to be.
//////////////////////////////////////////////////////////////////// 0 
1390 0 0 6 1226 3554 0 0 888 ////////////////////////////////////////////////////////////////////
//     Function: LightAttrib::get_operation
//       Access: Published
//  Description: Returns the basic operation type of the LightAttrib.
//               If this is O_set, the lights listed here completely
//               replace any lights that were already on.  If this is
//               O_add, the lights here are added to the set of of
//               lights that were already on, and if O_remove, the
//               lights here are removed from the set of lights that
//               were on.
//
//               This method is now deprecated.  LightAttribs nowadays
//               have a separate list of on_lights and off_lights, so
//               this method doesn't make sense.  Query the lists
//               independently.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3998  
1391 0 0 6 1227 3611 0 0 522 ////////////////////////////////////////////////////////////////////
//     Function: LightAttrib::get_num_lights
//       Access: Published
//  Description: Returns the number of lights listed in the attribute.
//
//               This method is now deprecated.  LightAttribs nowadays
//               have a separate list of on_lights and off_lights, so
//               this method doesn't make sense.  Query the lists
//               independently.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3998  
1392 0 0 6 1228 3709 0 0 510 ////////////////////////////////////////////////////////////////////
//     Function: LightAttrib::get_light
//       Access: Published
//  Description: Returns the nth light listed in the attribute.
//
//               This method is now deprecated.  LightAttribs nowadays
//               have a separate list of on_lights and off_lights, so
//               this method doesn't make sense.  Query the lists
//               independently.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3998  1 n 1 3611  
1393 0 0 6 1229 3610 0 0 558 ////////////////////////////////////////////////////////////////////
//     Function: LightAttrib::has_light
//       Access: Published
//  Description: Returns true if the indicated light is listed in the
//               attrib, false otherwise.
//
//               This method is now deprecated.  LightAttribs nowadays
//               have a separate list of on_lights and off_lights, so
//               this method doesn't make sense.  Query the lists
//               independently.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3998  5 light 1 3709  
1394 0 0 7 1230 3654 0 0 459 ////////////////////////////////////////////////////////////////////
//     Function: LightAttrib::add_light
//       Access: Published
//  Description: Returns a new LightAttrib, just like this one, but
//               with the indicated light added to the list of lights.
//
//               This method is now deprecated.  Use add_on_light() or
//               add_off_light() instead.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3998  5 light 1 3709  
1395 0 0 7 1231 3654 0 0 489 ////////////////////////////////////////////////////////////////////
//     Function: LightAttrib::remove_light
//       Access: Published
//  Description: Returns a new LightAttrib, just like this one, but
//               with the indicated light removed from the list of
//               lights.
//
//               This method is now deprecated.  Use remove_on_light()
//               or remove_off_light() instead.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3998  5 light 1 3709  
1396 0 0 7 1232 3654 0 0 342 ////////////////////////////////////////////////////////////////////
//     Function: LightAttrib::make_all_off
//       Access: Published, Static
//  Description: Constructs a new LightAttrib object that turns off
//               all lights (and hence disables lighting).
//////////////////////////////////////////////////////////////////// 0 
1397 0 0 6 1233 3611 0 0 312 ////////////////////////////////////////////////////////////////////
//     Function: LightAttrib::get_num_on_lights
//       Access: Published
//  Description: Returns the number of lights that are turned on by
//               the attribute.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3998  
1398 0 0 7 1234 3839 2604 0 315 ////////////////////////////////////////////////////////////////////
//     Function: LightAttrib::get_on_light
//       Access: Published
//  Description: Returns the nth light turned on by the attribute,
//               sorted in render order.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3998  1 n 1 3611  
1399 0 0 6 1235 3610 0 0 322 ////////////////////////////////////////////////////////////////////
//     Function: LightAttrib::has_on_light
//       Access: Published
//  Description: Returns true if the indicated light is turned on by
//               the attrib, false otherwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3998  5 light 1 3755  
1400 0 0 6 1236 3611 0 0 314 ////////////////////////////////////////////////////////////////////
//     Function: LightAttrib::get_num_off_lights
//       Access: Published
//  Description: Returns the number of lights that are turned off by
//               the attribute.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3998  
1401 0 0 7 1237 3839 2604 0 330 ////////////////////////////////////////////////////////////////////
//     Function: LightAttrib::get_off_light
//       Access: Published
//  Description: Returns the nth light turned off by the attribute,
//               sorted in arbitrary (pointer) order.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3998  1 n 1 3611  
1402 0 0 6 1238 3610 0 0 324 ////////////////////////////////////////////////////////////////////
//     Function: LightAttrib::has_off_light
//       Access: Published
//  Description: Returns true if the indicated light is turned off by
//               the attrib, false otherwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3998  5 light 1 3755  
1403 0 0 6 1239 3610 0 0 326 ////////////////////////////////////////////////////////////////////
//     Function: LightAttrib::has_all_off
//       Access: Published
//  Description: Returns true if this attrib turns off all lights
//               (although it may also turn some on).
//////////////////////////////////////////////////////////////////// 1 4 this 3 3998  
1404 0 0 6 1240 3610 0 0 329 ////////////////////////////////////////////////////////////////////
//     Function: LightAttrib::is_identity
//       Access: Published
//  Description: Returns true if this is an identity attrib: it does
//               not change the set of lights in use.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3998  
1405 0 0 7 1241 3654 0 0 388 ////////////////////////////////////////////////////////////////////
//     Function: LightAttrib::add_on_light
//       Access: Published
//  Description: Returns a new LightAttrib, just like this one, but
//               with the indicated light added to the list of lights
//               turned on by this attrib.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3998  5 light 1 3755  
1406 0 0 7 1242 3654 0 0 395 ////////////////////////////////////////////////////////////////////
//     Function: LightAttrib::remove_on_light
//       Access: Published
//  Description: Returns a new LightAttrib, just like this one, but
//               with the indicated light removed from the list of
//               lights turned on by this attrib.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3998  5 light 1 3755  
1407 0 0 7 1243 3654 0 0 390 ////////////////////////////////////////////////////////////////////
//     Function: LightAttrib::add_off_light
//       Access: Published
//  Description: Returns a new LightAttrib, just like this one, but
//               with the indicated light added to the list of lights
//               turned off by this attrib.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3998  5 light 1 3755  
1408 0 0 7 1244 3654 0 0 397 ////////////////////////////////////////////////////////////////////
//     Function: LightAttrib::remove_off_light
//       Access: Published
//  Description: Returns a new LightAttrib, just like this one, but
//               with the indicated light removed from the list of
//               lights turned off by this attrib.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3998  5 light 1 3755  
1409 0 0 7 1245 3998 0 0 705 ////////////////////////////////////////////////////////////////////
//     Function: LightAttrib::filter_to_max
//       Access: Public
//  Description: Returns a new LightAttrib, very much like this one,
//               but with the number of on_lights reduced to be no
//               more than max_lights.  The number of off_lights in
//               the new LightAttrib is undefined.
//
//               The number of AmbientLights is not included in the
//               count.  All AmbientLights in the original attrib are
//               always included in the result, regardless of the
//               value of max_lights.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3998  10 max_lights 1 3611  
1410 0 0 7 1246 3839 2604 0 477 ////////////////////////////////////////////////////////////////////
//     Function: LightAttrib::get_most_important_light
//       Access: Public
//  Description: Returns the most important light (that is, the light
//               with the highest priority) in the LightAttrib,
//               excluding any ambient lights.  Returns an empty
//               NodePath if no non-ambient lights are found.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3998  
1411 0 0 6 1247 3611 0 0 0 0 
1412 0 0 7 1248 3649 0 0 0 0 
1413 0 0 7 1252 3654 0 0 408 ////////////////////////////////////////////////////////////////////
//     Function: LightRampAttrib::make_default
//       Access: Published, Static
//  Description: Constructs a new LightRampAttrib object.  This
//               is the standard OpenGL lighting ramp, which clamps
//               the final light total to the 0-1 range.
//////////////////////////////////////////////////////////////////// 0 
1414 0 0 7 1253 3654 0 0 424 ////////////////////////////////////////////////////////////////////
//     Function: LightRampAttrib::make_identity
//       Access: Published, Static
//  Description: Constructs a new LightRampAttrib object.  This
//               differs from the usual OpenGL lighting model in that
//               it does not clamp the final lighting total to (0,1).
//////////////////////////////////////////////////////////////////// 0 
1415 0 0 7 1254 3654 0 0 652 ////////////////////////////////////////////////////////////////////
//     Function: LightRampAttrib::make_single_threshold
//       Access: Published, Static
//  Description: Constructs a new LightRampAttrib object.  This 
//               causes the luminance of the diffuse lighting
//               contribution to be quantized using a single threshold:
//               @code
//               if (original_luminance > threshold0) {
//                 luminance = level0;
//               } else {
//                 luminance = 0.0;
//               }
//               @endcode
//////////////////////////////////////////////////////////////////// 2 7 thresh0 1 3622  4 lev0 1 3622  
1416 0 0 7 1255 3654 0 0 750 ////////////////////////////////////////////////////////////////////
//     Function: LightRampAttrib::make_double_threshold
//       Access: Published, Static
//  Description: Constructs a new LightRampAttrib object.  This 
//               causes the luminance of the diffuse lighting
//               contribution to be quantized using two thresholds:
//               @code
//               if (original_luminance > threshold1) {
//                 luminance = level1;
//               } else if (original_luminance > threshold0) {
//                 luminance = level0;
//               } else {
//                 luminance = 0.0;
//               }
//               @endcode
//////////////////////////////////////////////////////////////////// 4 7 thresh0 1 3622  4 lev0 1 3622  7 thresh1 1 3622  4 lev1 1 3622  
1417 0 0 7 1256 3654 0 0 1249 ////////////////////////////////////////////////////////////////////
//     Function: LightRampAttrib::make_hdr0
//       Access: Published, Static
//  Description: Constructs a new LightRampAttrib object.  This causes
//               an HDR tone mapping operation to be applied.
//
//               Normally, brightness values greater than 1 cannot be
//               distinguished from each other, causing very brightly lit
//               objects to wash out white and all detail to be erased.
//               HDR tone mapping remaps brightness values in the range
//               0-infinity into the range (0,1), making it possible to
//               distinguish detail in scenes whose brightness exceeds 1.
//
//               However, the monitor has finite contrast.  Normally, all
//               of that contrast is used to represent brightnesses in
//               the range 0-1.  The HDR0 tone mapping operator 'steals'
//               one quarter of that contrast to represent brightnesses in
//               the range 1-infinity.
//               @code
//               FINAL_RGB = (RGB^3 + RGB^2 + RGB) / (RGB^3 + RGB^2 + RGB + 1)
//               @endcode
//////////////////////////////////////////////////////////////////// 0 
1418 0 0 7 1257 3654 0 0 1231 ////////////////////////////////////////////////////////////////////
//     Function: LightRampAttrib::make_hdr1
//       Access: Published, Static
//  Description: Constructs a new LightRampAttrib object.  This causes
//               an HDR tone mapping operation to be applied.
//
//               Normally, brightness values greater than 1 cannot be
//               distinguished from each other, causing very brightly lit
//               objects to wash out white and all detail to be erased.
//               HDR tone mapping remaps brightness values in the range
//               0-infinity into the range (0,1), making it possible to
//               distinguish detail in scenes whose brightness exceeds 1.
//
//               However, the monitor has finite contrast.  Normally, all
//               of that contrast is used to represent brightnesses in
//               the range 0-1.  The HDR1 tone mapping operator 'steals'
//               one third of that contrast to represent brightnesses in
//               the range 1-infinity.
//               @code
//               FINAL_RGB = (RGB^2 + RGB) / (RGB^2 + RGB + 1)
//               @endcode
//////////////////////////////////////////////////////////////////// 0 
1419 0 0 7 1258 3654 0 0 1214 ////////////////////////////////////////////////////////////////////
//     Function: LightRampAttrib::make_hdr2
//       Access: Published, Static
//  Description: Constructs a new LightRampAttrib object.  This causes
//               an HDR tone mapping operation to be applied.
//
//               Normally, brightness values greater than 1 cannot be
//               distinguished from each other, causing very brightly lit
//               objects to wash out white and all detail to be erased.
//               HDR tone mapping remaps brightness values in the range
//               0-infinity into the range (0,1), making it possible to
//               distinguish detail in scenes whose brightness exceeds 1.
//
//               However, the monitor has finite contrast.  Normally, all
//               of that contrast is used to represent brightnesses in
//               the range 0-1.  The HDR2 tone mapping operator 'steals'
//               one half of that contrast to represent brightnesses in
//               the range 1-infinity.
//               @code
//               FINAL_RGB = (RGB) / (RGB + 1)
//               @endcode
//////////////////////////////////////////////////////////////////// 0 
1420 0 0 6 1259 3556 0 0 258 ////////////////////////////////////////////////////////////////////
//     Function: LightRampAttrib::get_mode
//       Access: Published
//  Description: Returns the LightRampAttrib mode.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4000  
1421 0 0 6 1260 3622 0 0 257 ////////////////////////////////////////////////////////////////////
//     Function: LightRampAttrib::get_level
//       Access: Published
//  Description: Returns the nth lighting level.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4000  1 n 1 3611  
1422 0 0 6 1261 3622 0 0 262 ////////////////////////////////////////////////////////////////////
//     Function: LightRampAttrib::get_threshold
//       Access: Published
//  Description: Returns the nth threshold level.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4000  1 n 1 3611  
1423 0 0 6 1262 3611 0 0 0 0 
1424 0 0 7 1263 3649 0 0 0 0 
1425 0 0 7 1278 4002 3078 0 218 ////////////////////////////////////////////////////////////////////
//     Function: Loader::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 name 1 3687  
1426 0 0 4 1279 3642 0 0 362 ////////////////////////////////////////////////////////////////////
//     Function: Loader::set_task_manager
//       Access: Published
//  Description: Specifies the task manager that is used for
//               asynchronous loads.  The default is the global task
//               manager.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4002  12 task_manager 1 4003  
1427 0 0 7 1280 4003 0 0 302 ////////////////////////////////////////////////////////////////////
//     Function: Loader::get_task_manager
//       Access: Published
//  Description: Returns the task manager that is used for
//               asynchronous loads.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4005  
1428 0 0 4 1281 3642 0 0 372 ////////////////////////////////////////////////////////////////////
//     Function: Loader::set_task_chain
//       Access: Published
//  Description: Specifies the task chain that is used for
//               asynchronous loads.  The default is the initial name
//               of the Loader object.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4002  10 task_chain 1 3687  
1429 0 0 6 1282 3687 0 0 298 ////////////////////////////////////////////////////////////////////
//     Function: Loader::get_task_chain
//       Access: Published
//  Description: Returns the task chain that is used for
//               asynchronous loads.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4005  
1430 0 0 4 1283 3642 0 0 265 ////////////////////////////////////////////////////////////////////
//     Function: Loader::stop_threads
//       Access: Published
//  Description: Stop any threads used for asynchronous loads.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4002  
1431 0 0 6 1284 3610 0 0 321 ////////////////////////////////////////////////////////////////////
//     Function: Loader::remove
//       Access: Published
//  Description: Removes a pending asynchronous load request.  Returns
//               true if successful, false otherwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4002  4 task 1 4007  
1432 0 0 7 1285 3688 2111 0 455 ////////////////////////////////////////////////////////////////////
//     Function: Loader::load_sync
//       Access: Published
//  Description: Loads the file immediately, waiting for it to
//               complete.
//
//               If search is true, the file is searched for along the
//               model path; otherwise, only the exact filename is
//               loaded.
//////////////////////////////////////////////////////////////////// 3 4 this 3 4005  8 filename 1 3881  7 options 1 4008  
1433 0 0 7 1286 4007 0 0 346 ////////////////////////////////////////////////////////////////////
//     Function: Loader::make_async_request
//       Access: Published
//  Description: Returns a new AsyncTask object suitable for adding to
//               load_async() to start an asynchronous model load.
//////////////////////////////////////////////////////////////////// 3 4 this 3 4002  8 filename 1 3881  7 options 1 4008  
1434 0 0 4 1287 3642 0 0 944 ////////////////////////////////////////////////////////////////////
//     Function: Loader::load_async
//       Access: Published
//  Description: Begins an asynchronous load request.  To use this
//               call, first call make_async_request() to create a new
//               ModelLoadRequest object with the filename you wish to
//               load, and then add that object to the Loader with
//               load_async.  This function will return immediately,
//               and the model will be loaded in the background.
//
//               To determine when the model has completely loaded,
//               you may poll request->is_ready() from time to time,
//               or set the done_event on the request object and
//               listen for that event.  When the model is ready, you
//               may retrieve it via request->get_model().
//////////////////////////////////////////////////////////////////// 2 4 this 3 4002  7 request 1 4007  
1435 0 0 6 1288 3610 0 0 289 ////////////////////////////////////////////////////////////////////
//     Function: Loader::save_sync
//       Access: Published
//  Description: Saves the file immediately, waiting for it to
//               complete.
//////////////////////////////////////////////////////////////////// 4 4 this 3 4005  8 filename 1 3881  7 options 1 4008  4 node 1 3688  
1436 0 0 7 1289 4007 0 0 351 ////////////////////////////////////////////////////////////////////
//     Function: Loader::make_async_save_request
//       Access: Published
//  Description: Returns a new AsyncTask object suitable for adding to
//               save_async() to start an asynchronous model save.
//////////////////////////////////////////////////////////////////// 4 4 this 3 4002  8 filename 1 3881  7 options 1 4008  4 node 1 3688  
1437 0 0 4 1290 3642 0 0 1007 ////////////////////////////////////////////////////////////////////
//     Function: Loader::save_async
//       Access: Published
//  Description: Begins an asynchronous save request.  To use this
//               call, first call make_async_save_request() to create
//               a new ModelSaveRequest object with the filename you
//               wish to load, and then add that object to the Loader
//               with save_async.  This function will return
//               immediately, and the model will be loaded in the
//               background.
//
//               To determine when the model has completely loaded,
//               you may poll request->is_ready() from time to time,
//               or set the done_event on the request object and
//               listen for that event.  When the request is ready,
//               you may retrieve the success or failure via
//               request->get_success().
//////////////////////////////////////////////////////////////////// 2 4 this 3 4002  7 request 1 4007  
1438 0 0 7 1291 3688 2111 0 335 ////////////////////////////////////////////////////////////////////
//     Function: Loader::load_bam_stream
//       Access: Published
//  Description: Attempts to read a bam file from the indicated stream
//               and return the scene graph defined there.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4002  2 in 1 3901  
1439 0 0 4 1292 3642 0 0 222 ////////////////////////////////////////////////////////////////////
//     Function: Loader::output
//       Access: Published, Virtual
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 4005  3 out 1 3646  
1440 0 0 7 1293 4002 3078 0 344 ////////////////////////////////////////////////////////////////////
//     Function: Loader::get_global_ptr
//       Access: Published
//  Description: Returns a pointer to the global Loader.  This is the
//               Loader that most code should use for loading models.
//////////////////////////////////////////////////////////////////// 0 
1441 0 0 7 1294 3649 0 0 0 0 
1442 0 0 7 1266 4011 0 0 0 1 4 this 3 4002  
1443 0 0 7 1267 4002 3078 0 0 1 4 this 3 4011  
1444 0 0 6 1268 3713 0 0 0 1 4 this 3 4002  
1445 0 0 7 1269 4002 3078 0 0 1 4 this 3 3713  
1446 0 0 7 1271 4012 3056 0 227 ////////////////////////////////////////////////////////////////////
//     Function: Loader::Results::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
1447 0 0 7 1271 4012 3056 0 232 ////////////////////////////////////////////////////////////////////
//     Function: Loader::Results::Copy Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 4013  
1448 0 0 6 1272 4012 0 0 0 2 4 this 3 4012  4 copy 1 4013  
1449 0 0 4 1274 3642 0 0 258 ////////////////////////////////////////////////////////////////////
//     Function: Loader::Results::clear
//       Access: Published
//  Description: Removes all the files from the list.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4012  
1450 0 0 6 1275 3611 0 0 277 ////////////////////////////////////////////////////////////////////
//     Function: Loader::Results::get_num_files
//       Access: Published
//  Description: Returns the number of files on the result list.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4013  
1451 0 0 6 1276 3881 0 0 265 ////////////////////////////////////////////////////////////////////
//     Function: Loader::Results::get_file
//       Access: Published
//  Description: Returns the nth file on the result list.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4013  1 n 1 3611  
1452 0 0 6 1277 4015 0 0 304 ////////////////////////////////////////////////////////////////////
//     Function: Loader::Results::get_file_type
//       Access: Published
//  Description: Returns the file type of the nth file on the result
//               list.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4013  1 n 1 3611  
1453 0 0 6 1298 3687 0 0 0 1 4 this 3 4016  
1454 0 0 6 1299 3687 0 0 0 1 4 this 3 4016  
1455 0 0 6 1300 3687 0 0 416 ////////////////////////////////////////////////////////////////////
//     Function: LoaderFileType::get_additional_extensions
//       Access: Published, Virtual
//  Description: Returns a space-separated list of extension, in
//               addition to the one returned by get_extension(), that
//               are recognized by this loader.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4016  
1456 0 0 6 1301 3610 0 0 389 ////////////////////////////////////////////////////////////////////
//     Function: LoaderFileType::supports_compressed
//       Access: Published, Virtual
//  Description: Returns true if this file type can transparently load
//               compressed files (with a .pz extension), false
//               otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4016  
1457 0 0 6 1302 3610 0 0 402 ////////////////////////////////////////////////////////////////////
//     Function: LoaderFileType::get_allow_disk_cache
//       Access: Published, Virtual
//  Description: Returns true if the loader flags allow retrieving the
//               model from the on-disk bam cache (if it is enabled),
//               false otherwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4016  7 options 1 4008  
1458 0 0 6 1303 3610 0 0 390 ////////////////////////////////////////////////////////////////////
//     Function: LoaderFileType::get_allow_ram_cache
//       Access: Published, Virtual
//  Description: Returns true if the loader flags allow retrieving the
//               model from the in-memory ModelPool cache, false
//               otherwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4016  7 options 1 4008  
1459 0 0 6 1304 3610 0 0 427 ////////////////////////////////////////////////////////////////////
//     Function: LoaderFileType::supports_load
//       Access: Published, Virtual
//  Description: Returns true if the file type can be used to load
//               files, and load_file() is supported.  Returns false
//               if load_file() is unimplemented and will always fail.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4016  
1460 0 0 6 1305 3610 0 0 427 ////////////////////////////////////////////////////////////////////
//     Function: LoaderFileType::supports_save
//       Access: Published, Virtual
//  Description: Returns true if the file type can be used to save
//               files, and save_file() is supported.  Returns false
//               if save_file() is unimplemented and will always fail.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4016  
1461 0 0 7 1306 3649 0 0 0 0 
1462 0 0 6 1309 3611 0 0 282 ////////////////////////////////////////////////////////////////////
//     Function: LoaderFileTypeRegistry::get_num_types
//       Access: Published
//  Description: Returns the total number of types registered.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4018  
1463 0 0 6 1310 4015 0 0 264 ////////////////////////////////////////////////////////////////////
//     Function: LoaderFileTypeRegistry::get_type
//       Access: Published
//  Description: Returns the nth type registered.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4018  1 n 1 3611  
1464 0 0 6 1311 4015 0 0 430 ////////////////////////////////////////////////////////////////////
//     Function: LoaderFileTypeRegistry::get_type_from_extension
//       Access: Published
//  Description: Determines the type of the file based on the indicated
//               extension (without a leading dot).  Returns NULL if
//               the extension matches no known file types.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4020  9 extension 1 3687  
1465 0 0 4 1312 3642 0 0 329 ////////////////////////////////////////////////////////////////////
//     Function: LoaderFileTypeRegistry::write
//       Access: Published
//  Description: Writes a list of supported file types to the
//               indicated output stream, one per line.
//////////////////////////////////////////////////////////////////// 3 4 this 3 4018  3 out 1 3646  12 indent_level 1 3611  
1466 0 0 6 1313 4020 0 0 325 ////////////////////////////////////////////////////////////////////
//     Function: LoaderFileTypeRegistry::get_global_ptr
//       Access: Published, Static
//  Description: Returns a pointer to the global LoaderFileTypeRegistry
//               object.
//////////////////////////////////////////////////////////////////// 0 
1467 0 0 7 1315 3654 0 0 344 ////////////////////////////////////////////////////////////////////
//     Function: MaterialAttrib::make
//       Access: Published, Static
//  Description: Constructs a new MaterialAttrib object suitable for
//               rendering the indicated material onto geometry.
//////////////////////////////////////////////////////////////////// 1 8 material 1 3877  
1468 0 0 7 1316 3654 0 0 332 ////////////////////////////////////////////////////////////////////
//     Function: MaterialAttrib::make_off
//       Access: Published, Static
//  Description: Constructs a new MaterialAttrib object suitable for
//               rendering unmateriald geometry.
//////////////////////////////////////////////////////////////////// 0 
1469 0 0 7 1317 3654 0 0 401 ////////////////////////////////////////////////////////////////////
//     Function: MaterialAttrib::make_default
//       Access: Published, Static
//  Description: Returns a RenderAttrib that corresponds to whatever
//               the standard default properties for render attributes
//               of this type ought to be.
//////////////////////////////////////////////////////////////////// 0 
1470 0 0 6 1318 3610 0 0 374 ////////////////////////////////////////////////////////////////////
//     Function: MaterialAttrib::is_off
//       Access: Published
//  Description: Returns true if the MaterialAttrib is an 'off'
//               MaterialAttrib, indicating that it should disable
//               the use of materials.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4021  
1471 0 0 7 1319 3877 0 0 381 ////////////////////////////////////////////////////////////////////
//     Function: MaterialAttrib::get_material
//       Access: Published
//  Description: If the MaterialAttrib is not an 'off' MaterialAttrib,
//               returns the material that is associated.  Otherwise,
//               return NULL.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4021  
1472 0 0 6 1320 3611 0 0 0 0 
1473 0 0 7 1321 3649 0 0 0 0 
1474 0 0 7 1324 3878 3104 0 230 ////////////////////////////////////////////////////////////////////
//     Function: MaterialCollection::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
1475 0 0 7 1324 3878 3104 0 235 ////////////////////////////////////////////////////////////////////
//     Function: MaterialCollection::Copy Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 4023  
1476 0 0 6 1325 3878 0 0 0 2 4 this 3 3878  4 copy 1 4023  
1477 0 0 4 1327 3642 0 0 270 ////////////////////////////////////////////////////////////////////
//     Function: MaterialCollection::add_material
//       Access: Published
//  Description: Adds a new Material to the collection.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3878  13 node_material 1 3877  
1478 0 0 6 1328 3610 0 0 410 ////////////////////////////////////////////////////////////////////
//     Function: MaterialCollection::remove_material
//       Access: Published
//  Description: Removes the indicated Material from the collection.
//               Returns true if the material was removed, false if it was
//               not a member of the collection.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3878  13 node_material 1 3877  
1479 0 0 4 1329 3642 0 0 488 ////////////////////////////////////////////////////////////////////
//     Function: MaterialCollection::add_materials_from
//       Access: Published
//  Description: Adds all the Materials indicated in the other
//               collection to this material.  The other materials are simply
//               appended to the end of the materials in this list;
//               duplicates are not automatically removed.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3878  5 other 1 4023  
1480 0 0 4 1330 3642 0 0 339 ////////////////////////////////////////////////////////////////////
//     Function: MaterialCollection::remove_materials_from
//       Access: Published
//  Description: Removes from this collection all of the Materials
//               listed in the other collection.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3878  5 other 1 4023  
1481 0 0 4 1331 3642 0 0 477 ////////////////////////////////////////////////////////////////////
//     Function: MaterialCollection::remove_duplicate_materials
//       Access: Published
//  Description: Removes any duplicate entries of the same Materials
//               on this collection.  If a Material appears multiple
//               times, the first appearance is retained; subsequent
//               appearances are removed.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3878  
1482 0 0 6 1332 3610 0 0 332 ////////////////////////////////////////////////////////////////////
//     Function: MaterialCollection::has_material
//       Access: Published
//  Description: Returns true if the indicated Material appears in
//               this collection, false otherwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4023  8 material 1 3877  
1483 0 0 4 1333 3642 0 0 267 ////////////////////////////////////////////////////////////////////
//     Function: MaterialCollection::clear
//       Access: Published
//  Description: Removes all Materials from the collection.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3878  
1484 0 0 7 1334 3877 0 0 376 ////////////////////////////////////////////////////////////////////
//     Function: MaterialCollection::find_material
//       Access: Published
//  Description: Returns the material in the collection with the
//               indicated name, if any, or NULL if no material has
//               that name.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4023  4 name 1 3687  
1485 0 0 6 1335 3611 0 0 287 ////////////////////////////////////////////////////////////////////
//     Function: MaterialCollection::get_num_materials
//       Access: Published
//  Description: Returns the number of Materials in the collection.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4023  
1486 0 0 7 1336 3877 0 0 275 ////////////////////////////////////////////////////////////////////
//     Function: MaterialCollection::get_material
//       Access: Published
//  Description: Returns the nth Material in the collection.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4023  5 index 1 3611  
1487 0 0 7 1337 3877 0 0 395 ////////////////////////////////////////////////////////////////////
//     Function: MaterialCollection::operator []
//       Access: Published
//  Description: Returns the nth Material in the collection.  This is
//               the same as get_material(), but it may be a more
//               convenient way to access it.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4023  5 index 1 3611  
1488 0 0 6 1338 3611 0 0 339 ////////////////////////////////////////////////////////////////////
//     Function: MaterialCollection::size
//       Access: Published
//  Description: Returns the number of materials in the collection.  This
//               is the same thing as get_num_materials().
//////////////////////////////////////////////////////////////////// 1 4 this 3 4023  
1489 0 0 6 1339 3878 0 0 0 2 4 this 3 3878  5 other 1 4023  
1490 0 0 7 1340 3878 3104 0 0 2 4 this 3 4023  5 other 1 4023  
1491 0 0 4 1341 3642 0 0 336 ////////////////////////////////////////////////////////////////////
//     Function: MaterialCollection::output
//       Access: Published
//  Description: Writes a brief one-line description of the
//               MaterialCollection to the indicated output stream.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4023  3 out 1 3646  
1492 0 0 4 1342 3642 0 0 340 ////////////////////////////////////////////////////////////////////
//     Function: MaterialCollection::write
//       Access: Published
//  Description: Writes a complete multi-line description of the
//               MaterialCollection to the indicated output stream.
//////////////////////////////////////////////////////////////////// 3 4 this 3 4023  3 out 1 3646  12 indent_level 1 3611  
1493 0 0 7 1345 4025 3126 0 356 ////////////////////////////////////////////////////////////////////
//     Function: ModelFlattenRequest::Constructor
//       Access: Published
//  Description: Create a new ModelFlattenRequest, and add it to the loader
//               via load_async(), to begin an asynchronous load.
//////////////////////////////////////////////////////////////////// 1 4 orig 1 3688  
1494 0 0 7 1346 3688 2111 0 268 ////////////////////////////////////////////////////////////////////
//     Function: ModelFlattenRequest::get_orig
//       Access: Published
//  Description: Returns the original, unflattened node.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4026  
1495 0 0 6 1347 3610 0 0 420 ////////////////////////////////////////////////////////////////////
//     Function: ModelFlattenRequest::is_ready
//       Access: Published
//  Description: Returns true if this request has completed, false if
//               it is still pending.  When this returns true, you may
//               retrieve the model loaded by calling get_result().
//////////////////////////////////////////////////////////////////// 1 4 this 3 4026  
1496 0 0 7 1348 3688 2111 0 348 ////////////////////////////////////////////////////////////////////
//     Function: ModelFlattenRequest::get_model
//       Access: Published
//  Description: Returns the flattened copy of the model.  It is an
//               error to call this unless is_ready() returns true.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4026  
1497 0 0 7 1349 3649 0 0 0 0 
1498 0 0 7 1352 4028 3134 0 350 ////////////////////////////////////////////////////////////////////
//     Function: ModelLoadRequest::Constructor
//       Access: Published
//  Description: Create a new ModelLoadRequest, and add it to the loader
//               via load_async(), to begin an asynchronous load.
//////////////////////////////////////////////////////////////////// 4 4 name 1 3687  8 filename 1 3881  7 options 1 4008  6 loader 1 4002  
1499 0 0 6 1353 3881 0 0 319 ////////////////////////////////////////////////////////////////////
//     Function: ModelLoadRequest::get_filename
//       Access: Published
//  Description: Returns the filename associated with this
//               asynchronous ModelLoadRequest.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4029  
1500 0 0 6 1354 4008 0 0 323 ////////////////////////////////////////////////////////////////////
//     Function: ModelLoadRequest::get_options
//       Access: Published
//  Description: Returns the LoaderOptions associated with this
//               asynchronous ModelLoadRequest.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4029  
1501 0 0 7 1355 4002 3078 0 322 ////////////////////////////////////////////////////////////////////
//     Function: ModelLoadRequest::get_loader
//       Access: Published
//  Description: Returns the Loader object associated with this
//               asynchronous ModelLoadRequest.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4029  
1502 0 0 6 1356 3610 0 0 416 ////////////////////////////////////////////////////////////////////
//     Function: ModelLoadRequest::is_ready
//       Access: Published
//  Description: Returns true if this request has completed, false if
//               it is still pending.  When this returns true, you may
//               retrieve the model loaded by calling get_model().
//////////////////////////////////////////////////////////////////// 1 4 this 3 4029  
1503 0 0 7 1357 3688 2111 0 410 ////////////////////////////////////////////////////////////////////
//     Function: ModelLoadRequest::get_model
//       Access: Published
//  Description: Returns the model that was loaded asynchronously, if
//               any, or NULL if there was an error.  It is an error
//               to call this unless is_ready() returns true.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4029  
1504 0 0 7 1358 3649 0 0 0 0 
1505 0 0 7 1361 4031 3142 0 218 ////////////////////////////////////////////////////////////////////
//     Function: ModelNode::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 name 1 3687  
1506 0 0 4 1363 3642 0 0 1760 ////////////////////////////////////////////////////////////////////
//     Function: ModelNode::set_preserve_transform
//       Access: Public
//  Description: Sets the preserve_transform flag.  This restricts the
//               ability of a flatten operation to affect the
//               transform stored on this node, and/or the node
//               itself.  In the order from weakest to strongest
//               restrictions, the possible flags are:
//
//               PT_drop_node - This node should be removed at the
//               next flatten call.
//
//               PT_none - The transform may be adjusted at will.  The
//               node itself will not be removed.  This is the
//               default.
//
//               PT_net - Preserve the net transform from the root,
//               but it's acceptable to modify the local transform
//               stored on this particular node if necessary, so long
//               as the net transform is not changed.  This eliminates
//               the need to drop an extra transform on the node
//               above.
//
//               PT_local - The local (and net) transform should not
//               be changed in any way.  If necessary, an extra
//               transform will be left on the node above to guarantee
//               this.  This is a stronger restriction than PT_net.
//
//               PT_no_touch - The local transform will not be
//               changed, the node will not be removed, and
//               furthermore any flatten operation will not continue
//               below this node--this node and all descendents are
//               protected from the effects of flatten.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4031  18 preserve_transform 1 3568  
1507 0 0 6 1364 3568 0 0 337 ////////////////////////////////////////////////////////////////////
//     Function: ModelNode::get_preserve_transform
//       Access: Public
//  Description: Returns the current setting of the preserve_transform
//               flag.  See set_preserve_transform().
//////////////////////////////////////////////////////////////////// 1 4 this 3 4032  
1508 0 0 4 1365 3642 0 0 591 ////////////////////////////////////////////////////////////////////
//     Function: ModelNode::set_preserve_attributes
//       Access: Public
//  Description: Sets the preserve_attributes flag.  This restricts the
//               ability of a flatten operation to affect the
//               render attributes stored on this node.
//
//               The value should be the union of bits from
//               SceneGraphReducer::AttribTypes that represent the
//               attributes that should *not* be changed.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4031  11 attrib_mask 1 3611  
1509 0 0 6 1366 3611 0 0 340 ////////////////////////////////////////////////////////////////////
//     Function: ModelNode::get_preserve_attributes
//       Access: Public
//  Description: Returns the current setting of the preserve_attributes
//               flag.  See set_preserve_attributes().
//////////////////////////////////////////////////////////////////// 1 4 this 3 4032  
1510 0 0 4 1367 3642 0 0 0 2 4 this 3 4031  5 limit 1 3622  
1511 0 0 7 1368 3649 0 0 0 0 
1512 0 0 7 1371 4035 3154 0 221 ////////////////////////////////////////////////////////////////////
//     Function: ModelRoot::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 9 fulllpath 1 3881  9 timestamp 1 4034  
1513 0 0 7 1371 4035 3154 0 221 ////////////////////////////////////////////////////////////////////
//     Function: ModelRoot::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 name 1 3687  
1514 0 0 6 1372 3611 0 0 654 ////////////////////////////////////////////////////////////////////
//     Function: ModelRoot::get_model_ref_count
//       Access: Published
//  Description: Returns the number of copies that exist of this
//               particular ModelRoot node.  Each time
//               ModelRoot::copy_subgraph() or make_copy() is called
//               (or some other copying mechanism, such as
//               NodePath.copy_to(), is used), this count will
//               increment by one in all copies; when one of the
//               copies is destructed, this count will decrement.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4036  
1515 0 0 6 1373 3881 0 0 463 ////////////////////////////////////////////////////////////////////
//     Function: ModelRoot::get_fullpath
//       Access: Published
//  Description: Returns the full pathname of the model represented by
//               this node, as found on disk.  This is mainly useful
//               for reference purposes, but is also used to index the
//               ModelRoot into the ModelPool.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4036  
1516 0 0 4 1374 3642 0 0 714 ////////////////////////////////////////////////////////////////////
//     Function: ModelRoot::set_fullpath
//       Access: Published
//  Description: Sets the full pathname of the model represented by
//               this node, as found on disk.  This is mainly useful
//               for reference purposes, but is also used to index the
//               ModelRoot into the ModelPool.
//
//               This is normally set automatically when a model is
//               loaded, and should not be set directly by the user.
//               If you change this on a loaded model, then
//               ModelPool::release_model() may fail.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4035  8 fullpath 1 3881  
1517 0 0 6 1375 4034 0 0 610 ////////////////////////////////////////////////////////////////////
//     Function: ModelRoot::get_timestamp
//       Access: Published
//  Description: Returns the timestamp of the file on disk that was
//               read for this model, at the time it was read, if it
//               is known.  Returns 0 if the timestamp is not known or
//               could not be provided.  This can be used as a quick
//               (but fallible) check to verify whether the file might
//               have changed since the model was read.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4036  
1518 0 0 4 1376 3642 0 0 447 ////////////////////////////////////////////////////////////////////
//     Function: ModelRoot::set_timestamp
//       Access: Published
//  Description: Sets the timestamp of the file on disk that was read
//               for this model.  This is normally set automatically
//               when a model is loaded, and should not be set
//               directly by the user.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4035  9 timestamp 1 4034  
1519 0 0 7 1380 4038 3150 0 604 ////////////////////////////////////////////////////////////////////
//     Function: ModelRoot::get_reference
//       Access: Published
//  Description: Returns the pointer that represents the object shared
//               between all copies of this ModelRoot.  Since there's
//               not much associated with this object other than a
//               reference count, normally there's not much reason to
//               get the pointer (though it may be compared
//               pointerwise with other ModelRoot objects).
//////////////////////////////////////////////////////////////////// 1 4 this 3 4036  
1520 0 0 4 1381 3642 0 0 469 ////////////////////////////////////////////////////////////////////
//     Function: ModelRoot::set_reference
//       Access: Published
//  Description: Changes the pointer that represents the object shared
//               between all copies of this ModelRoot.  This will
//               disassociate this ModelRoot from all of its copies.
//               Normally, there's no reason to do this.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4035  3 ref 1 4038  
1521 0 0 7 1382 3649 0 0 0 0 
1522 0 0 7 1378 4038 3150 0 237 ////////////////////////////////////////////////////////////////////
//     Function: ModelRoot::ModelReference::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
1523 0 0 6 1385 3610 0 0 394 ////////////////////////////////////////////////////////////////////
//     Function: ModelPool::has_model
//       Access: Public, Static
//  Description: Returns true if the model has ever been loaded,
//               false otherwise.  Note that this does not guarantee
//               that the model is still up-to-date.
//////////////////////////////////////////////////////////////////// 1 8 filename 1 3881  
1524 0 0 6 1386 3610 0 0 915 ////////////////////////////////////////////////////////////////////
//     Function: ModelPool::verify_model
//       Access: Public, Static
//  Description: Loads the given filename up as a model, if it has
//               not already been loaded, and returns true to indicate
//               success, or false to indicate failure.  If this
//               returns true, it is probable that a subsequent call
//               to load_model() with the same model name will
//               return a valid PandaNode.
//
//               However, even if this returns true, it is still
//               possible for a subsequent call to load_model() to
//               fail.  This can happen if cache-check-timestamps is
//               true, and the on-disk file is subsequently modified
//               to replace it with an invalid model.
//////////////////////////////////////////////////////////////////// 1 8 filename 1 3881  
1525 0 0 7 1387 4035 3154 0 516 ////////////////////////////////////////////////////////////////////
//     Function: ModelPool::get_model
//       Access: Public, Static
//  Description: Returns the model that has already been previously
//               loaded, or NULL otherwise.  If verify is true, it
//               will check if the file is still up-to-date (and
//               hasn't been modified in the meantime), and if not,
//               will still return NULL.
//////////////////////////////////////////////////////////////////// 2 8 filename 1 3881  6 verify 1 3610  
1526 0 0 7 1388 4035 3154 0 690 ////////////////////////////////////////////////////////////////////
//     Function: ModelPool::load_model
//       Access: Public, Static
//  Description: Loads the given filename up as a model, if it has
//               not already been loaded, and returns the new model.
//               If a model with the same filename was previously
//               loaded, returns that one instead (unless
//               cache-check-timestamps is true and the file has
//               recently changed).  If the model file cannot be
//               found, or cannot be loaded for some reason, returns
//               NULL.
//////////////////////////////////////////////////////////////////// 2 8 filename 1 3881  7 options 1 4008  
1527 0 0 4 1389 3642 0 0 562 ////////////////////////////////////////////////////////////////////
//     Function: ModelPool::add_model
//       Access: Public, Static
//  Description: Adds the indicated already-loaded model to the
//               pool.  The model will replace any previously-loaded
//               model in the pool that had the same filename.
//
//               This two-parameter version of this method is
//               deprecated; use the one-parameter add_model(model)
//               instead.
//////////////////////////////////////////////////////////////////// 2 8 filename 1 3881  5 model 1 4035  
1528 0 0 4 1389 3642 0 0 403 ////////////////////////////////////////////////////////////////////
//     Function: ModelPool::add_model
//       Access: Public, Static
//  Description: Adds the indicated already-loaded model to the
//               pool.  The model will replace any previously-loaded
//               model in the pool that had the same filename.
//////////////////////////////////////////////////////////////////// 1 5 model 1 4035  
1529 0 0 4 1390 3642 0 0 657 ////////////////////////////////////////////////////////////////////
//     Function: ModelPool::release_model
//       Access: Public, Static
//  Description: Removes the indicated model from the pool,
//               indicating it will never be loaded again; the model
//               may then be freed.  If this function is never called,
//               a reference count will be maintained on every model
//               every loaded, and models will never be freed.
//
//               This version of this method is deprecated; use
//               release_model(model) instead.
//////////////////////////////////////////////////////////////////// 1 8 filename 1 3881  
1530 0 0 4 1390 3642 0 0 773 ////////////////////////////////////////////////////////////////////
//     Function: ModelPool::release_model
//       Access: Public, Static
//  Description: Removes the indicated model from the pool,
//               indicating it will never be loaded again; the model
//               may then be freed.  If this function (and
//               garbage_collect()) is never called, a reference count
//               will be maintained on every model every loaded, and
//               models will never be freed.
//
//               The model's get_fullpath() value should not have been
//               changed during its lifetime, or this function may
//               fail to locate it in the pool.
//////////////////////////////////////////////////////////////////// 1 5 model 1 4035  
1531 0 0 4 1391 3642 0 0 324 ////////////////////////////////////////////////////////////////////
//     Function: ModelPool::release_all_models
//       Access: Public, Static
//  Description: Releases all models in the pool and restores the
//               pool to the empty state.
//////////////////////////////////////////////////////////////////// 0 
1532 0 0 6 1392 3611 0 0 469 ////////////////////////////////////////////////////////////////////
//     Function: ModelPool::garbage_collect
//       Access: Public, Static
//  Description: Releases only those models in the pool that have a
//               reference count of exactly 1; i.e. only those
//               models that are not being used outside of the pool.
//               Returns the number of models released.
//////////////////////////////////////////////////////////////////// 0 
1533 0 0 4 1393 3642 0 0 274 ////////////////////////////////////////////////////////////////////
//     Function: ModelPool::list_contents
//       Access: Public, Static
//  Description: Lists the contents of the model pool to cout.
//////////////////////////////////////////////////////////////////// 0 
1534 0 0 4 1393 3642 0 0 314 ////////////////////////////////////////////////////////////////////
//     Function: ModelPool::list_contents
//       Access: Public, Static
//  Description: Lists the contents of the model pool to the
//               indicated output stream.
//////////////////////////////////////////////////////////////////// 1 3 out 1 3646  
1535 0 0 4 1394 3642 0 0 348 ////////////////////////////////////////////////////////////////////
//     Function: ModelPool::write
//       Access: Published, Static
//  Description: Lists the contents of the model pool to the
//               indicated output stream.
//               Helps with debugging.
//////////////////////////////////////////////////////////////////// 1 3 out 1 3646  
1536 0 0 7 1397 4039 3174 0 350 ////////////////////////////////////////////////////////////////////
//     Function: ModelSaveRequest::Constructor
//       Access: Published
//  Description: Create a new ModelSaveRequest, and add it to the loader
//               via save_async(), to begin an asynchronous save.
//////////////////////////////////////////////////////////////////// 5 4 name 1 3687  8 filename 1 3881  7 options 1 4008  4 node 1 3688  6 loader 1 4002  
1537 0 0 6 1398 3881 0 0 319 ////////////////////////////////////////////////////////////////////
//     Function: ModelSaveRequest::get_filename
//       Access: Published
//  Description: Returns the filename associated with this
//               asynchronous ModelSaveRequest.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4040  
1538 0 0 6 1399 4008 0 0 323 ////////////////////////////////////////////////////////////////////
//     Function: ModelSaveRequest::get_options
//       Access: Published
//  Description: Returns the LoaderOptions associated with this
//               asynchronous ModelSaveRequest.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4040  
1539 0 0 7 1400 3688 2111 0 278 ////////////////////////////////////////////////////////////////////
//     Function: ModelSaveRequest::get_node
//       Access: Published
//  Description: Returns the node that was passed to the constructor.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4040  
1540 0 0 7 1401 4002 3078 0 322 ////////////////////////////////////////////////////////////////////
//     Function: ModelSaveRequest::get_loader
//       Access: Published
//  Description: Returns the Loader object associated with this
//               asynchronous ModelSaveRequest.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4040  
1541 0 0 6 1402 3610 0 0 412 ////////////////////////////////////////////////////////////////////
//     Function: ModelSaveRequest::is_ready
//       Access: Published
//  Description: Returns true if this request has completed, false if
//               it is still pending.  When this returns true, you may
//               retrieve the success flag with get_success().
//////////////////////////////////////////////////////////////////// 1 4 this 3 4040  
1542 0 0 6 1403 3610 0 0 394 ////////////////////////////////////////////////////////////////////
//     Function: ModelSaveRequest::get_success
//       Access: Published
//  Description: Returns the true if the model was saved successfully,
//               false otherwise.  It is an error to call this unless
//               is_ready() returns true.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4040  
1543 0 0 7 1404 3649 0 0 0 0 
1544 0 0 7 1407 3840 3177 0 230 ////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
1545 0 0 7 1407 3840 3177 0 235 ////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::Copy Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 4042  
1546 0 0 7 1407 3840 3177 0 0 1 8 sequence 1 3643  
1547 0 0 6 1408 3840 0 0 0 2 4 this 3 3840  4 copy 1 4042  
1548 0 0 6 1410 3643 0 0 0 1 4 this 3 4042  
1549 0 0 4 1411 3642 0 0 266 ////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::add_path
//       Access: Published
//  Description: Adds a new NodePath to the collection.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3840  9 node_path 1 3755  
1550 0 0 6 1412 3610 0 0 402 ////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::remove_path
//       Access: Published
//  Description: Removes the indicated NodePath from the collection.
//               Returns true if the path was removed, false if it was
//               not a member of the collection.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3840  9 node_path 1 3755  
1551 0 0 4 1413 3642 0 0 472 ////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::add_paths_from
//       Access: Published
//  Description: Adds all the NodePaths indicated in the other
//               collection to this path.  The other paths are simply
//               appended to the end of the paths in this list;
//               duplicates are not automatically removed.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3840  5 other 1 4042  
1552 0 0 4 1414 3642 0 0 335 ////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::remove_paths_from
//       Access: Published
//  Description: Removes from this collection all of the NodePaths
//               listed in the other collection.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3840  5 other 1 4042  
1553 0 0 4 1415 3642 0 0 473 ////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::remove_duplicate_paths
//       Access: Published
//  Description: Removes any duplicate entries of the same NodePaths
//               on this collection.  If a NodePath appears multiple
//               times, the first appearance is retained; subsequent
//               appearances are removed.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3840  
1554 0 0 6 1416 3610 0 0 328 ////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::has_path
//       Access: Published
//  Description: Returns true if the indicated NodePath appears in
//               this collection, false otherwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4042  4 path 1 3755  
1555 0 0 4 1417 3642 0 0 267 ////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::clear
//       Access: Published
//  Description: Removes all NodePaths from the collection.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3840  
1556 0 0 4 1418 3642 0 0 404 ////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::reserve
//       Access: Published
//  Description: This is a hint to Panda to allocate enough memory
//               to hold the given number of NodePaths, if you know
//               ahead of time how many you will be adding.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3840  3 num 1 3612  
1557 0 0 6 1419 3610 0 0 319 ////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::is_empty
//       Access: Published
//  Description: Returns true if there are no NodePaths in the
//               collection, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4042  
1558 0 0 6 1420 3611 0 0 283 ////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::get_num_paths
//       Access: Published
//  Description: Returns the number of NodePaths in the collection.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4042  
1559 0 0 7 1421 3839 2604 0 271 ////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::get_path
//       Access: Published
//  Description: Returns the nth NodePath in the collection.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4042  5 index 1 3611  
1560 0 0 7 1422 3839 2604 0 0 2 4 this 3 4042  5 index 1 3611  
1561 0 0 6 1423 3611 0 0 331 ////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::size
//       Access: Published
//  Description: Returns the number of paths in the collection.  This
//               is the same thing as get_num_paths().
//////////////////////////////////////////////////////////////////// 1 4 this 3 4042  
1562 0 0 6 1424 3840 0 0 0 2 4 this 3 3840  5 other 1 4042  
1563 0 0 7 1425 3840 3177 0 0 2 4 this 3 4042  5 other 1 4042  
1564 0 0 4 1426 3642 0 0 399 ////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::append
//       Access: Published
//  Description: Adds a new NodePath to the collection.  This method
//               duplicates the add_path() method; it is provided to
//               satisfy Python's naming convention.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3840  9 node_path 1 3755  
1565 0 0 4 1427 3642 0 0 402 ////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::extend
//       Access: Published
//  Description: Appends the other list onto the end of this one.
//               This method duplicates the += operator; it is
//               provided to satisfy Python's naming convention.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3840  5 other 1 4042  
1566 0 0 4 1428 3642 0 0 315 ////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::ls
//       Access: Published
//  Description: Lists all the nodes at and below each node in the
//               collection hierarchically.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4042  
1567 0 0 4 1428 3642 0 0 315 ////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::ls
//       Access: Published
//  Description: Lists all the nodes at and below each node in the
//               collection hierarchically.
//////////////////////////////////////////////////////////////////// 3 4 this 3 4042  3 out 1 3646  12 indent_level 1 3611  
1568 0 0 7 1429 3840 3177 0 447 ////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::find_all_matches
//       Access: Published
//  Description: Returns the complete set of all NodePaths that begin
//               with any NodePath in this collection and can be
//               extended by path.  The shortest paths will be listed
//               first.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4042  4 path 1 3687  
1569 0 0 4 1430 3642 0 0 316 ////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::reparent_to
//       Access: Published
//  Description: Reparents all the NodePaths in the collection to the
//               indicated node.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3840  5 other 1 3755  
1570 0 0 4 1431 3642 0 0 402 ////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::wrt_reparent_to
//       Access: Published
//  Description: Reparents all the NodePaths in the collection to the
//               indicated node, adjusting each transform so as not to
//               move in world coordinates.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3840  5 other 1 3755  
1571 0 0 4 1432 3642 0 0 262 ////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::show
//       Access: Published
//  Description: Shows all NodePaths in the collection.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3840  
1572 0 0 4 1433 3642 0 0 262 ////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::show
//       Access: Published
//  Description: Hides all NodePaths in the collection.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3840  
1573 0 0 4 1434 3642 0 0 265 ////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::stash
//       Access: Published
//  Description: Stashes all NodePaths in the collection.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3840  
1574 0 0 4 1435 3642 0 0 269 ////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::unstash
//       Access: Published
//  Description: Unstashes all NodePaths in the collection.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3840  
1575 0 0 4 1436 3642 0 0 267 ////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::detach
//       Access: Published
//  Description: Detaches all NodePaths in the collection.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3840  
1576 0 0 7 1437 3699 0 0 610 ////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::get_collide_mask
//       Access: Published
//  Description: Returns the union of all of the into_collide_masks
//               for nodes at this level and below.  This is the same
//               thing as node()->get_net_collide_mask().
//
//               If you want to return what the into_collide_mask of
//               this node itself is, without regard to its children,
//               use node()->get_into_collide_mask().
//////////////////////////////////////////////////////////////////// 1 4 this 3 4042  
1577 0 0 4 1438 3642 0 0 681 ////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::set_collide_mask
//       Access: Published
//  Description: Recursively applies the indicated CollideMask to the
//               into_collide_masks for all nodes at this level and
//               below.
//
//               The default is to change all bits, but if
//               bits_to_change is not all bits on, then only the bits
//               that are set in bits_to_change are modified, allowing
//               this call to change only a subset of the bits in the
//               subgraph.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3840  8 new_mask 1 3699  14 bits_to_change 1 3699  9 node_type 1 3649  
1578 0 0 6 1439 3610 0 0 682 ////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::calc_tight_bounds
//       Access: Published
//  Description: Calculates the minimum and maximum vertices of all
//               Geoms at these NodePath's bottom nodes and below
//               This is a tight bounding box; it will generally be
//               tighter than the bounding volume returned by
//               get_bounds() (but it is more expensive to compute).
//
//               The return value is true if any points are within the
//               bounding volume, or false if none are.
//////////////////////////////////////////////////////////////////// 3 4 this 3 4042  9 min_point 1 3841  9 max_point 1 3841  
1579 0 0 6 1440 3643 0 0 0 1 4 this 3 4042  
1580 0 0 4 1441 3642 0 0 684 ////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::set_texture
//       Access: Published
//  Description: Adds the indicated texture to the list of textures
//               that will be rendered on the default texture stage.
//
//               This is the deprecated single-texture variant of this
//               method; it is now superceded by set_texture() that
//               accepts a stage and texture.  However, this method
//               may be used in the presence of multitexture if you
//               just want to adjust the default stage.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3840  3 tex 1 3822  8 priority 1 3611  
1581 0 0 4 1441 3642 0 0 669 ////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::set_texture
//       Access: Published
//  Description: Adds the indicated texture to the list of textures
//               that will be rendered on the indicated multitexture
//               stage.  If there are multiple texture stages
//               specified (possibly on multiple different nodes at
//               different levels), they will all be applied to
//               geometry together, according to the stage
//               specification set up in the TextureStage object.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3840  5 stage 1 3666  3 tex 1 3822  8 priority 1 3611  
1582 0 0 4 1442 3642 0 0 605 ////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::set_texture_off
//       Access: Published
//  Description: Sets the geometry at this level and below to render
//               using no texture, on the indicated stage.  This is
//               different from not specifying a texture; rather, this
//               specifically contradicts set_texture() at a higher
//               node level (or, with a priority, overrides a
//               set_texture() at a lower level).
//////////////////////////////////////////////////////////////////// 3 4 this 3 3840  5 stage 1 3666  8 priority 1 3611  
1583 0 0 4 1442 3642 0 0 595 ////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::set_texture_off
//       Access: Published
//  Description: Sets the geometry at this level and below to render
//               using no texture, on any stage.  This is different
//               from not specifying a texture; rather, this
//               specifically contradicts set_texture() at a higher
//               node level (or, with a priority, overrides a
//               set_texture() at a lower level).
//////////////////////////////////////////////////////////////////// 2 4 this 3 3840  8 priority 1 3611  
1584 0 0 4 1443 3642 0 0 267 ////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::set_color
//       Access: Published
//  Description: Colors all NodePaths in the collection
//////////////////////////////////////////////////////////////////// 3 4 this 3 3840  5 color 1 3659  8 priority 1 3611  
1585 0 0 4 1443 3642 0 0 267 ////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::set_color
//       Access: Published
//  Description: Colors all NodePaths in the collection
//////////////////////////////////////////////////////////////////// 6 4 this 3 3840  1 r 1 3622  1 g 1 3622  1 b 1 3622  1 a 1 3622  8 priority 1 3611  
1586 0 0 4 1444 3642 0 0 347 ////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::set_color_scale
//       Access: Published
//  Description: Applies color scales to all NodePaths in the
//               collection.  The existing color scale is replaced.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3840  5 scale 1 3829  8 priority 1 3611  
1587 0 0 4 1444 3642 0 0 347 ////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::set_color_scale
//       Access: Published
//  Description: Applies color scales to all NodePaths in the
//               collection.  The existing color scale is replaced.
//////////////////////////////////////////////////////////////////// 6 4 this 3 3840  1 r 1 3622  1 g 1 3622  1 b 1 3622  1 a 1 3622  8 priority 1 3611  
1588 0 0 4 1445 3642 0 0 408 ////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::compose_color_scale
//       Access: Published
//  Description: Applies color scales to all NodePaths in the
//               collection.  The existing color scale, if any, is
//               multiplied by the specified color scale.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3840  5 scale 1 3829  8 priority 1 3611  
1589 0 0 4 1445 3642 0 0 408 ////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::compose_color_scale
//       Access: Published
//  Description: Applies color scales to all NodePaths in the
//               collection.  The existing color scale, if any, is
//               multiplied by the specified color scale.
//////////////////////////////////////////////////////////////////// 6 4 this 3 3840  1 r 1 3622  1 g 1 3622  1 b 1 3622  1 a 1 3622  8 priority 1 3611  
1590 0 0 4 1446 3642 0 0 504 ////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::set_attrib
//       Access: Published
//  Description: Applies the indicated RenderAttrib to all NodePaths
//               in the collection.  An effort is made to apply the
//               attrib to many NodePaths as quickly as possible;
//               redundant RenderState compositions are not
//               duplicated.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3840  6 attrib 1 3654  8 priority 1 3611  
1591 0 0 4 1447 3642 0 0 336 ////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::output
//       Access: Published
//  Description: Writes a brief one-line description of the
//               NodePathCollection to the indicated output stream.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4042  3 out 1 3646  
1592 0 0 4 1448 3642 0 0 340 ////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::write
//       Access: Published
//  Description: Writes a complete multi-line description of the
//               NodePathCollection to the indicated output stream.
//////////////////////////////////////////////////////////////////// 3 4 this 3 4042  3 out 1 3646  12 indent_level 1 3611  
1593 0 0 7 1450 3654 0 0 300 ////////////////////////////////////////////////////////////////////
//     Function: TextureAttrib::make
//       Access: Published, Static
//  Description: Constructs a new TextureAttrib object that does
//               nothing.
//////////////////////////////////////////////////////////////////// 0 
1594 0 0 7 1450 3654 0 0 390 ////////////////////////////////////////////////////////////////////
//     Function: TextureAttrib::make
//       Access: Published, Static
//  Description: Constructs a new TextureAttrib object suitable for
//               rendering the indicated texture onto geometry, using
//               the default TextureStage.
//////////////////////////////////////////////////////////////////// 1 3 tex 1 3822  
1595 0 0 7 1451 3654 0 0 329 ////////////////////////////////////////////////////////////////////
//     Function: TextureAttrib::make_off
//       Access: Published, Static
//  Description: Constructs a new TextureAttrib object suitable for
//               rendering untextured geometry.
//////////////////////////////////////////////////////////////////// 0 
1596 0 0 7 1452 3654 0 0 400 ////////////////////////////////////////////////////////////////////
//     Function: TextureAttrib::make_default
//       Access: Published, Static
//  Description: Returns a RenderAttrib that corresponds to whatever
//               the standard default properties for render attributes
//               of this type ought to be.
//////////////////////////////////////////////////////////////////// 0 
1597 0 0 6 1453 3610 0 0 679 ////////////////////////////////////////////////////////////////////
//     Function: TextureAttrib::is_off
//       Access: Published
//  Description: Returns true if the TextureAttrib is an 'off'
//               TextureAttrib, indicating that it should disable
//               texturing.
//
//               If multitexture is in effect, a TextureAttrib may not
//               be strictly "on" or "off"; therefore, to get a more
//               precise answer to this question, you should consider
//               using has_all_off() or get_num_off_stages() or
//               has_off_stage() instead.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4044  
1598 0 0 7 1454 3822 0 0 386 ////////////////////////////////////////////////////////////////////
//     Function: TextureAttrib::get_texture
//       Access: Published
//  Description: If the TextureAttrib is not an 'off' TextureAttrib,
//               returns the base-level texture that is associated.
//               Otherwise, return NULL.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4044  
1599 0 0 7 1455 3654 0 0 347 ////////////////////////////////////////////////////////////////////
//     Function: TextureAttrib::make_all_off
//       Access: Published, Static
//  Description: Constructs a new TextureAttrib object that turns off
//               all stages (and hence disables texturing).
//////////////////////////////////////////////////////////////////// 0 
1600 0 0 6 1456 3611 0 0 314 ////////////////////////////////////////////////////////////////////
//     Function: TextureAttrib::get_num_on_stages
//       Access: Published
//  Description: Returns the number of stages that are turned on by
//               the attribute.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4044  
1601 0 0 7 1457 3666 0 0 317 ////////////////////////////////////////////////////////////////////
//     Function: TextureAttrib::get_on_stage
//       Access: Published
//  Description: Returns the nth stage turned on by the attribute,
//               sorted in render order.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4044  1 n 1 3611  
1602 0 0 6 1458 3611 0 0 409 ////////////////////////////////////////////////////////////////////
//     Function: TextureAttrib::get_num_on_ff_stages
//       Access: Published
//  Description: Returns the number of on-stages that are relevant
//               to the classic fixed function pipeline.  This excludes
//               texture stages such as normal maps.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4044  
1603 0 0 7 1459 3666 0 0 479 ////////////////////////////////////////////////////////////////////
//     Function: TextureAttrib::get_render_ff_stage
//       Access: Published
//  Description: Returns the nth stage turned on by the attribute,
//               sorted in render order, including only those relevant
//               to the classic fixed function pipeline.  This excludes
//               texture stages such as normal maps.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4044  1 n 1 3611  
1604 0 0 6 1460 3611 0 0 610 ////////////////////////////////////////////////////////////////////
//     Function: TextureAttrib::get_ff_tc_index
//       Access: Published
//  Description: For each TextureStage listed in get_on_ff_stage(),
//               this returns a unique index number for the texture
//               coordinate name used by that TextureStage.  It is
//               guaranteed to remain the same index number for each
//               texcoord name (for a given set of TextureStages),
//               even if the texture render order changes.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4044  1 n 1 3611  
1605 0 0 6 1461 3610 0 0 324 ////////////////////////////////////////////////////////////////////
//     Function: TextureAttrib::has_on_stage
//       Access: Published
//  Description: Returns true if the indicated stage is turned on by
//               the attrib, false otherwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4044  5 stage 1 3666  
1606 0 0 7 1462 3822 0 0 339 ////////////////////////////////////////////////////////////////////
//     Function: TextureAttrib::get_on_texture
//       Access: Published
//  Description: Returns the texture associated with the indicated
//               stage, or NULL if no texture is associated.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4044  5 stage 1 3666  
1607 0 0 6 1463 3824 0 0 472 ////////////////////////////////////////////////////////////////////
//     Function: TextureAttrib::get_on_sampler
//       Access: Published
//  Description: Returns the sampler associated with the indicated
//               stage, or the one associated with its texture if
//               no custom stage has been specified.  It is an error
//               to call this if the stage does not exist.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4044  5 stage 1 3666  
1608 0 0 6 1464 3611 0 0 316 ////////////////////////////////////////////////////////////////////
//     Function: TextureAttrib::get_on_stage_override
//       Access: Published
//  Description: Returns the override value associated with the
//               indicated stage.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4044  5 stage 1 3666  
1609 0 0 6 1465 3611 0 0 390 ////////////////////////////////////////////////////////////////////
//     Function: TextureAttrib::find_on_stage
//       Access: Published
//  Description: Returns the index number of the indicated
//               TextureStage within the list of on_stages, or -1 if
//               the indicated stage is not listed.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4044  5 stage 1 4046  
1610 0 0 6 1466 3611 0 0 316 ////////////////////////////////////////////////////////////////////
//     Function: TextureAttrib::get_num_off_stages
//       Access: Published
//  Description: Returns the number of stages that are turned off by
//               the attribute.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4044  
1611 0 0 7 1467 3666 0 0 332 ////////////////////////////////////////////////////////////////////
//     Function: TextureAttrib::get_off_stage
//       Access: Published
//  Description: Returns the nth stage turned off by the attribute,
//               sorted in arbitrary (pointer) order.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4044  1 n 1 3611  
1612 0 0 6 1468 3610 0 0 326 ////////////////////////////////////////////////////////////////////
//     Function: TextureAttrib::has_off_stage
//       Access: Published
//  Description: Returns true if the indicated stage is turned off by
//               the attrib, false otherwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4044  5 stage 1 3666  
1613 0 0 6 1469 3610 0 0 328 ////////////////////////////////////////////////////////////////////
//     Function: TextureAttrib::has_all_off
//       Access: Published
//  Description: Returns true if this attrib turns off all stages
//               (although it may also turn some on).
//////////////////////////////////////////////////////////////////// 1 4 this 3 4044  
1614 0 0 6 1470 3610 0 0 331 ////////////////////////////////////////////////////////////////////
//     Function: TextureAttrib::is_identity
//       Access: Published
//  Description: Returns true if this is an identity attrib: it does
//               not change the set of stages in use.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4044  
1615 0 0 7 1471 3654 0 0 392 ////////////////////////////////////////////////////////////////////
//     Function: TextureAttrib::add_on_stage
//       Access: Published
//  Description: Returns a new TextureAttrib, just like this one, but
//               with the indicated stage added to the list of stages
//               turned on by this attrib.
//////////////////////////////////////////////////////////////////// 5 4 this 3 4044  5 stage 1 3666  3 tex 1 3822  7 sampler 1 3824  8 override 1 3611  
1616 0 0 7 1471 3654 0 0 392 ////////////////////////////////////////////////////////////////////
//     Function: TextureAttrib::add_on_stage
//       Access: Published
//  Description: Returns a new TextureAttrib, just like this one, but
//               with the indicated stage added to the list of stages
//               turned on by this attrib.
//////////////////////////////////////////////////////////////////// 4 4 this 3 4044  5 stage 1 3666  3 tex 1 3822  8 override 1 3611  
1617 0 0 7 1472 3654 0 0 399 ////////////////////////////////////////////////////////////////////
//     Function: TextureAttrib::remove_on_stage
//       Access: Published
//  Description: Returns a new TextureAttrib, just like this one, but
//               with the indicated stage removed from the list of
//               stages turned on by this attrib.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4044  5 stage 1 3666  
1618 0 0 7 1473 3654 0 0 394 ////////////////////////////////////////////////////////////////////
//     Function: TextureAttrib::add_off_stage
//       Access: Published
//  Description: Returns a new TextureAttrib, just like this one, but
//               with the indicated stage added to the list of stages
//               turned off by this attrib.
//////////////////////////////////////////////////////////////////// 3 4 this 3 4044  5 stage 1 3666  8 override 1 3611  
1619 0 0 7 1474 3654 0 0 401 ////////////////////////////////////////////////////////////////////
//     Function: TextureAttrib::remove_off_stage
//       Access: Published
//  Description: Returns a new TextureAttrib, just like this one, but
//               with the indicated stage removed from the list of
//               stages turned off by this attrib.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4044  5 stage 1 3666  
1620 0 0 7 1475 3654 0 0 451 ////////////////////////////////////////////////////////////////////
//     Function: TextureAttrib::unify_texture_stages
//       Access: Published
//  Description: Returns a new TextureAttrib, just like this one, but
//               with any included TextureAttribs that happen to have
//               the same name as the given object replaced with the
//               object.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4044  5 stage 1 3666  
1621 0 0 6 1476 3611 0 0 0 0 
1622 0 0 7 1477 3649 0 0 0 0 
1623 0 0 7 1480 3654 0 0 301 ////////////////////////////////////////////////////////////////////
//     Function: TexGenAttrib::make
//       Access: Published, Static
//  Description: Constructs a TexGenAttrib that generates no stages at
//               all.
//////////////////////////////////////////////////////////////////// 0 
1624 0 0 7 1480 3654 0 0 309 ////////////////////////////////////////////////////////////////////
//     Function: TexGenAttrib::make
//       Access: Published, Static
//  Description: Constructs a TexGenAttrib that generates just the
//               indicated stage.
//////////////////////////////////////////////////////////////////// 2 5 stage 1 3666  4 mode 1 4048  
1625 0 0 7 1481 3654 0 0 399 ////////////////////////////////////////////////////////////////////
//     Function: TexGenAttrib::make_default
//       Access: Published, Static
//  Description: Returns a RenderAttrib that corresponds to whatever
//               the standard default properties for render attributes
//               of this type ought to be.
//////////////////////////////////////////////////////////////////// 0 
1626 0 0 7 1482 3654 0 0 437 ////////////////////////////////////////////////////////////////////
//     Function: TexGenAttrib::add_stage
//       Access: Published, Static
//  Description: Returns a new TexGenAttrib just like this one,
//               with the indicated generation mode for the given
//               stage.  If this stage already exists, its mode is
//               replaced.
//////////////////////////////////////////////////////////////////// 3 4 this 3 4049  5 stage 1 3666  4 mode 1 4048  
1627 0 0 7 1482 3654 0 0 564 ////////////////////////////////////////////////////////////////////
//     Function: TexGenAttrib::add_stage
//       Access: Published, Static
//  Description: Returns a new TexGenAttrib just like this one,
//               with the indicated generation mode for the given
//               stage.  If this stage already exists, its mode is
//               replaced.
//
//               This variant also accepts constant_value, which is
//               only meaningful if mode is M_constant.
//////////////////////////////////////////////////////////////////// 4 4 this 3 4049  5 stage 1 3666  4 mode 1 4048  14 constant_value 1 3869  
1628 0 0 7 1483 3654 0 0 331 ////////////////////////////////////////////////////////////////////
//     Function: TexGenAttrib::remove_stage
//       Access: Published, Static
//  Description: Returns a new TexGenAttrib just like this one,
//               with the indicated stage removed.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4049  5 stage 1 3666  
1629 0 0 6 1484 3610 0 0 323 ////////////////////////////////////////////////////////////////////
//     Function: TexGenAttrib::is_empty
//       Access: Published
//  Description: Returns true if no stages are defined in the
//               TexGenAttrib, false if at least one is.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4049  
1630 0 0 6 1485 3610 0 0 400 ////////////////////////////////////////////////////////////////////
//     Function: TexGenAttrib::has_stage
//       Access: Published
//  Description: Returns true if there is a mode associated with
//               the indicated stage, or false otherwise (in which
//               case get_transform(stage) will return M_off).
//////////////////////////////////////////////////////////////////// 2 4 this 3 4049  5 stage 1 3666  
1631 0 0 6 1486 4048 0 0 384 ////////////////////////////////////////////////////////////////////
//     Function: TexGenAttrib::get_mode
//       Access: Published
//  Description: Returns the generation mode associated with
//               the named texture stage, or M_off if
//               nothing is associated with the indicated stage.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4049  5 stage 1 3666  
1632 0 0 6 1487 3610 0 0 477 ////////////////////////////////////////////////////////////////////
//     Function: TexGenAttrib::has_gen_texcoord_stage
//       Access: Published
//  Description: Returns true if the indicated TextureStage will have
//               texture coordinates generated for it automatically
//               (and thus there is no need to upload the texture
//               coordinates encoded in the vertices).
//////////////////////////////////////////////////////////////////// 2 4 this 3 4049  5 stage 1 3666  
1633 0 0 6 1488 3869 0 0 385 ////////////////////////////////////////////////////////////////////
//     Function: TexGenAttrib::get_constant_value
//       Access: Published
//  Description: Returns the constant value associated with the named
//               texture stage.  This is only meaningful if the mode
//               is M_constant.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4049  5 stage 1 3666  
1634 0 0 6 1489 3611 0 0 448 ////////////////////////////////////////////////////////////////////
//     Function: TexGenAttrib::get_geom_rendering
//       Access: Published
//  Description: Returns the union of the Geom::GeomRendering bits
//               that will be required once this TexGenAttrib is
//               applied to a geom which includes the indicated
//               geom_rendering bits.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4049  14 geom_rendering 1 3611  
1635 0 0 6 1490 3611 0 0 0 0 
1636 0 0 7 1491 3649 0 0 0 0 
1637 0 0 7 1493 4051 2111 0 539 ////////////////////////////////////////////////////////////////////
//     Function: OccluderNode::Constructor
//       Access: Public
//  Description: The default constructor creates a default occlusion
//               polygon in the XZ plane (or XY plane in a y-up
//               coordinate system).  Use the normal Panda set_pos(),
//               set_hpr(), set_scale() to position it appropriately,
//               or replace the vertices with set_vertices().
//////////////////////////////////////////////////////////////////// 1 4 name 1 3687  
1638 0 0 4 1494 3642 0 0 281 ////////////////////////////////////////////////////////////////////
//     Function: OccluderNode::set_double_sided
//       Access: Published
//  Description: If true, the back-face will also be used to occlude
//////////////////////////////////////////////////////////////////// 2 4 this 3 4051  5 value 1 3610  
1639 0 0 6 1495 3610 0 0 258 ////////////////////////////////////////////////////////////////////
//     Function: OccluderNode::is_double_sided
//       Access: Published
//  Description: Is this occluder double-sided
//////////////////////////////////////////////////////////////////// 1 4 this 3 4051  
1640 0 0 4 1496 3642 0 0 465 ////////////////////////////////////////////////////////////////////
//     Function: OccluderNode::set_min_coverage
//       Access: Published
//  Description: Minimum screen coverage needed before occluder used.
//               Range should be 0 to 1. For example, setting to 0.2
//               would mean that the occluder needs to cover 20% of
//               the screen to be considered.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4051  5 value 1 3622  
1641 0 0 6 1497 3622 0 0 266 ////////////////////////////////////////////////////////////////////
//     Function: OccluderNode::get_min_coverage
//       Access: Published
//  Description: Returns the minimum screen coverage.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4051  
1642 0 0 4 1498 3642 0 0 418 ////////////////////////////////////////////////////////////////////
//     Function: OccluderNode::set_vertices
//       Access: Published
//  Description: Replaces the four vertices of the occluder polygon.
//               The vertices should be defined in a counterclockwise
//               orientation when looking at the face of the occluder.
//////////////////////////////////////////////////////////////////// 5 4 this 3 4051  2 v0 1 3636  2 v1 1 3636  2 v2 1 3636  2 v3 1 3636  
1643 0 0 6 1499 3611 0 0 332 ////////////////////////////////////////////////////////////////////
//     Function: OccluderNode::get_num_vertices
//       Access: Published
//  Description: Returns the number of vertices in the occluder
//               polygon.  This should always return 4.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4052  
1644 0 0 6 1500 3636 0 0 271 ////////////////////////////////////////////////////////////////////
//     Function: OccluderNode::get_vertex
//       Access: Published
//  Description: Returns the nth vertex of the occluder polygon.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4052  1 n 1 3611  
1645 0 0 7 1501 3649 0 0 0 0 
1646 0 0 7 1503 3683 0 0 302 ////////////////////////////////////////////////////////////////////
//     Function: OccluderEffect::make
//       Access: Published, Static
//  Description: Constructs a new OccluderEffect object that does
//               nothing.
//////////////////////////////////////////////////////////////////// 0 
1647 0 0 6 1504 3611 0 0 319 ////////////////////////////////////////////////////////////////////
//     Function: OccluderEffect::get_num_on_occluders
//       Access: Published
//  Description: Returns the number of occluders that are enabled by
//               the effectute.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4054  
1648 0 0 7 1505 3839 2604 0 322 ////////////////////////////////////////////////////////////////////
//     Function: OccluderEffect::get_on_occluder
//       Access: Published
//  Description: Returns the nth occluder enabled by the effectute,
//               sorted in render order.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4054  1 n 1 3611  
1649 0 0 6 1506 3610 0 0 329 ////////////////////////////////////////////////////////////////////
//     Function: OccluderEffect::has_on_occluder
//       Access: Published
//  Description: Returns true if the indicated occluder is enabled by
//               the effect, false otherwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4054  8 occluder 1 3755  
1650 0 0 6 1507 3610 0 0 335 ////////////////////////////////////////////////////////////////////
//     Function: OccluderEffect::is_identity
//       Access: Published
//  Description: Returns true if this is an identity effect: it does
//               not change the set of occluders in use.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4054  
1651 0 0 7 1508 3683 0 0 401 ////////////////////////////////////////////////////////////////////
//     Function: OccluderEffect::add_on_occluder
//       Access: Published
//  Description: Returns a new OccluderEffect, just like this one, but
//               with the indicated occluder added to the list of occluders
//               enabled by this effect.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4054  8 occluder 1 3755  
1652 0 0 7 1509 3683 0 0 408 ////////////////////////////////////////////////////////////////////
//     Function: OccluderEffect::remove_on_occluder
//       Access: Published
//  Description: Returns a new OccluderEffect, just like this one, but
//               with the indicated occluder removed from the list of
//               occluders enabled by this effect.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4054  8 occluder 1 3755  
1653 0 0 7 1510 3649 0 0 0 0 
1654 0 0 7 1515 4056 3313 0 303 ////////////////////////////////////////////////////////////////////
//     Function: PolylightNode::Constructor
//       Access: Published
//  Description: Use PolylightNode() to construct a new
//               PolylightNode object.
//////////////////////////////////////////////////////////////////// 1 4 name 1 3687  
1655 0 0 4 1516 3642 0 0 238 ////////////////////////////////////////////////////////////////////
//     Function: PolylightNode::enable
//       Access: Published
//  Description: Enable this light
//////////////////////////////////////////////////////////////////// 1 4 this 3 4056  
1656 0 0 4 1517 3642 0 0 240 ////////////////////////////////////////////////////////////////////
//     Function: PolylightNode::disable
//       Access: Published
//  Description: Disable this light
//////////////////////////////////////////////////////////////////// 1 4 this 3 4056  
1657 0 0 4 1518 3642 0 0 247 ////////////////////////////////////////////////////////////////////
//     Function: PolylightNode::set_pos
//       Access: Published
//  Description: Set this light's position
//////////////////////////////////////////////////////////////////// 2 4 this 3 4056  8 position 1 3636  
1658 0 0 4 1518 3642 0 0 247 ////////////////////////////////////////////////////////////////////
//     Function: PolylightNode::set_pos
//       Access: Published
//  Description: Set this light's position
//////////////////////////////////////////////////////////////////// 4 4 this 3 4056  1 x 1 3622  1 y 1 3622  1 z 1 3622  
1659 0 0 7 1519 3841 0 0 251 ////////////////////////////////////////////////////////////////////
//     Function: PolylightNode::get_pos
//       Access: Published
//  Description: Returns position as a LPoint3
//////////////////////////////////////////////////////////////////// 1 4 this 3 4057  
1660 0 0 4 1520 3642 0 0 249 ////////////////////////////////////////////////////////////////////
//     Function: PolylightNode::set_color
//       Access: Published
//  Description: Set the light's color... 
//////////////////////////////////////////////////////////////////// 2 4 this 3 4056  5 color 1 3659  
1661 0 0 4 1520 3642 0 0 273 ////////////////////////////////////////////////////////////////////
//     Function: PolylightNode::set_color
//       Access: Published
//  Description: Set the light's color... 3 floats between 0 and 1
//////////////////////////////////////////////////////////////////// 4 4 this 3 4056  1 r 1 3622  1 g 1 3622  1 b 1 3622  
1662 0 0 7 1521 3850 0 0 259 ////////////////////////////////////////////////////////////////////
//     Function: PolylightNode::get_color
//       Access: Published
//  Description: Returns the light's color as LColor
//////////////////////////////////////////////////////////////////// 1 4 this 3 4057  
1663 0 0 7 1522 3850 0 0 443 ////////////////////////////////////////////////////////////////////
//     Function: PolylightNode::get_color_scenegraph
//       Access: Published
//  Description: This differs from get_color in that when applying
//               the light color we need to make sure that a color
//               flattening external to the PolylightNode is not 
//               ignored.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4057  
1664 0 0 4 1523 3642 0 0 265 ////////////////////////////////////////////////////////////////////
//     Function: PolylightNode::set_radius
//       Access: Published
//  Description: Set radius of the spherical light volume
//////////////////////////////////////////////////////////////////// 2 4 this 3 4056  1 r 1 3622  
1665 0 0 6 1524 3622 0 0 265 ////////////////////////////////////////////////////////////////////
//     Function: PolylightNode::get_radius
//       Access: Published
//  Description: Get radius of the spherical light volume
//////////////////////////////////////////////////////////////////// 1 4 this 3 4057  
1666 0 0 6 1525 3610 0 0 267 ////////////////////////////////////////////////////////////////////
//     Function: PolylightNode::set_attenuation
//       Access: Published
//  Description: Set ALINEAR or AQUADRATIC attenuation
//////////////////////////////////////////////////////////////////// 2 4 this 3 4056  4 type 1 3580  
1667 0 0 6 1526 3580 0 0 274 ////////////////////////////////////////////////////////////////////
//     Function: PolylightNode::get_attenuation
//       Access: Published
//  Description: Get "linear" or "quadratic" attenuation type
//////////////////////////////////////////////////////////////////// 1 4 this 3 4057  
1668 0 0 4 1527 3642 0 0 329 ////////////////////////////////////////////////////////////////////
//     Function: PolylightNode::set_a0
//       Access: Published
//  Description: Set the quadratic attenuation factor a0
//               fd = 1 / ( a0 + a1*distance + a2*distance*distance)
//////////////////////////////////////////////////////////////////// 2 4 this 3 4056  2 a0 1 3622  
1669 0 0 4 1528 3642 0 0 329 ////////////////////////////////////////////////////////////////////
//     Function: PolylightNode::set_a1
//       Access: Published
//  Description: Set the quadratic attenuation factor a1
//               fd = 1 / ( a0 + a1*distance + a2*distance*distance)
//////////////////////////////////////////////////////////////////// 2 4 this 3 4056  2 a1 1 3622  
1670 0 0 4 1529 3642 0 0 329 ////////////////////////////////////////////////////////////////////
//     Function: PolylightNode::set_a2
//       Access: Published
//  Description: Set the quadratic attenuation factor a2
//               fd = 1 / ( a0 + a1*distance + a2*distance*distance)
//////////////////////////////////////////////////////////////////// 2 4 this 3 4056  2 a2 1 3622  
1671 0 0 6 1530 3622 0 0 329 ////////////////////////////////////////////////////////////////////
//     Function: PolylightNode::get_a0
//       Access: Published
//  Description: Get the quadratic attenuation factor a0
//               fd = 1 / ( a0 + a1*distance + a2*distance*distance)
//////////////////////////////////////////////////////////////////// 1 4 this 3 4057  
1672 0 0 6 1531 3622 0 0 329 ////////////////////////////////////////////////////////////////////
//     Function: PolylightNode::get_a1
//       Access: Published
//  Description: Get the quadratic attenuation factor a1
//               fd = 1 / ( a0 + a1*distance + a2*distance*distance)
//////////////////////////////////////////////////////////////////// 1 4 this 3 4057  
1673 0 0 6 1532 3622 0 0 329 ////////////////////////////////////////////////////////////////////
//     Function: PolylightNode::get_a2
//       Access: Published
//  Description: Get the quadratic attenuation factor a2
//               fd = 1 / ( a0 + a1*distance + a2*distance*distance)
//////////////////////////////////////////////////////////////////// 1 4 this 3 4057  
1674 0 0 4 1533 3642 0 0 332 ////////////////////////////////////////////////////////////////////
//     Function: PolylightNode::flicker_on
//       Access: Published
//  Description: Set flickering to true so at every loop this light's
//               color is varied based on flicker_type
//////////////////////////////////////////////////////////////////// 1 4 this 3 4056  
1675 0 0 4 1534 3642 0 0 245 ////////////////////////////////////////////////////////////////////
//     Function: PolylightNode::flicker_off
//       Access: Published
//  Description: Turn flickering off
//////////////////////////////////////////////////////////////////// 1 4 this 3 4056  
1676 0 0 6 1535 3610 0 0 261 ////////////////////////////////////////////////////////////////////
//     Function: PolylightNode::is_flickering
//       Access: Published
//  Description: Check is this light is flickering
//////////////////////////////////////////////////////////////////// 1 4 this 3 4057  
1677 0 0 6 1536 3610 0 0 446 ////////////////////////////////////////////////////////////////////
//     Function: PolylightNode::set_flicker_type
//       Access: Published
//  Description: Flicker type can be FRANDOM or FSIN
//               At a later point there might be a FCUSTOM
//               Custom flicker will be a set of fix points recorded
//               by animating the light's intensity
//////////////////////////////////////////////////////////////////// 2 4 this 3 4056  4 type 1 3579  
1678 0 0 6 1537 3579 0 0 254 ////////////////////////////////////////////////////////////////////
//     Function: PolylightNode::get_flicker_type
//       Access: Published
//  Description: Returns FRANDOM or FSIN
//////////////////////////////////////////////////////////////////// 1 4 this 3 4057  
1679 0 0 4 1538 3642 0 0 387 ////////////////////////////////////////////////////////////////////
//     Function: PolylightNode::set_offset
//       Access: Published
//  Description: Set the offset value for the random and sin
//               flicker variations... used to tweak the flicker
//               This value is added to the variation
//////////////////////////////////////////////////////////////////// 2 4 this 3 4056  6 offset 1 3622  
1680 0 0 6 1539 3622 0 0 304 ////////////////////////////////////////////////////////////////////
//     Function: PolylightNode::get_offset
//       Access: Published
//  Description: Get the offset value for the random and sin
//               flicker variations
//////////////////////////////////////////////////////////////////// 1 4 this 3 4057  
1681 0 0 4 1540 3642 0 0 392 ////////////////////////////////////////////////////////////////////
//     Function: PolylightNode::set_scale
//       Access: Published
//  Description: Set the scale value for the random and sin
//               flicker variations... used to tweak the flicker
//               This value is multiplied with the variation
//////////////////////////////////////////////////////////////////// 2 4 this 3 4056  5 scale 1 3622  
1682 0 0 6 1541 3622 0 0 302 ////////////////////////////////////////////////////////////////////
//     Function: PolylightNode::get_scale
//       Access: Published
//  Description: Get the scale value for the random and sin
//               flicker variations
//////////////////////////////////////////////////////////////////// 1 4 this 3 4057  
1683 0 0 4 1542 3642 0 0 381 ////////////////////////////////////////////////////////////////////
//     Function: PolylightNode::set_step_size
//       Access: Published
//  Description: Set the step size for the sin function in flicker
//               This is the increment size for the value supplied
//               to the sin function
//////////////////////////////////////////////////////////////////// 2 4 this 3 4056  4 step 1 3622  
1684 0 0 6 1543 3622 0 0 381 ////////////////////////////////////////////////////////////////////
//     Function: PolylightNode::get_step_size
//       Access: Published
//  Description: Get the step size for the sin function in flicker
//               This is the increment size for the value supplied
//               to the sin function
//////////////////////////////////////////////////////////////////// 1 4 this 3 4057  
1685 0 0 4 1544 3642 0 0 251 ////////////////////////////////////////////////////////////////////
//     Function: PolylightNode::set_freq
//       Access: Published
//  Description: Set frequency of sin flicker
//////////////////////////////////////////////////////////////////// 2 4 this 3 4056  1 f 1 3622  
1686 0 0 6 1545 3622 0 0 251 ////////////////////////////////////////////////////////////////////
//     Function: PolylightNode::get_freq
//       Access: Published
//  Description: Get frequency of sin flicker
//////////////////////////////////////////////////////////////////// 1 4 this 3 4057  
1687 0 0 6 1546 3610 0 0 21 // Comparison methods 2 4 this 3 4057  5 other 1 4057  
1688 0 0 6 1547 3610 0 0 0 2 4 this 3 4057  5 other 1 4057  
1689 0 0 6 1548 3610 0 0 0 2 4 this 3 4057  5 other 1 4057  
1690 0 0 6 1549 3611 0 0 832 ////////////////////////////////////////////////////////////////////
//     Function: PolylightNode::compare_to
//       Access: Published
//  Description: Returns a number less than zero if this PolylightNode
//               sorts before the other one, greater than zero if it
//               sorts after, or zero if they are equivalent.
//
//               Two PolylightNodes are considered equivalent if they
//               consist of exactly the same properties
//               Otherwise, they are different; different
//               PolylightNodes will be ranked in a consistent but
//               undefined ordering; the ordering is useful only for
//               placing the PolylightNodes in a sorted container like an
//               STL set.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4057  5 other 1 4057  
1691 0 0 6 1550 3610 0 0 259 ////////////////////////////////////////////////////////////////////
//     Function: PolylightNode::is_enabled
//       Access: Published
//  Description: Is this light is enabled/disabled?
//////////////////////////////////////////////////////////////////// 1 4 this 3 4057  
1692 0 0 7 1551 3649 0 0 0 0 
1693 0 0 7 1557 3683 0 0 269 ////////////////////////////////////////////////////////////////////
//     Function: PolylightEffect::make
//       Access: Published, Static
//  Description: Constructs a new PolylightEffect object.
//////////////////////////////////////////////////////////////////// 0 
1694 0 0 7 1557 3683 0 0 269 ////////////////////////////////////////////////////////////////////
//     Function: PolylightEffect::make
//       Access: Published, Static
//  Description: Constructs a new PolylightEffect object.
//////////////////////////////////////////////////////////////////// 3 6 weight 1 3622  7 contrib 1 3582  13 effect_center 1 3636  
1695 0 0 7 1557 3683 0 0 269 ////////////////////////////////////////////////////////////////////
//     Function: PolylightEffect::make
//       Access: Published, Static
//  Description: Constructs a new PolylightEffect object.
//////////////////////////////////////////////////////////////////// 4 6 weight 1 3622  7 contrib 1 3582  13 effect_center 1 3636  6 lights 1 4059  
1696 0 0 7 1558 3683 0 0 308 ////////////////////////////////////////////////////////////////////
//     Function: PolylightEffect::add_light
//       Access: Published
//  Description: Add a PolylightNode object to this effect and return
//               a new effect
//////////////////////////////////////////////////////////////////// 2 4 this 3 4061  8 newlight 1 3755  
1697 0 0 7 1559 3683 0 0 308 ////////////////////////////////////////////////////////////////////
//     Function: PolylightEffect::remove_light
//       Access: Published
//  Description: Remove a light from this effect. Return the new updated
//               effect
//////////////////////////////////////////////////////////////////// 2 4 this 3 4061  8 newlight 1 3755  
1698 0 0 7 1560 3683 0 0 517 ////////////////////////////////////////////////////////////////////
//     Function: PolylightEffect::set_weight
//       Access: Published
//  Description: Set weight and return a new effect... the reason
//               this couldnt be done through make was because
//               that would return a new effect without the 
//               lightgroup which is static and cant be accessed
//               Here, we just pass that to the make
//////////////////////////////////////////////////////////////////// 2 4 this 3 4061  1 w 1 3622  
1699 0 0 7 1561 3683 0 0 524 ////////////////////////////////////////////////////////////////////
//     Function: PolylightEffect::set_contrib
//       Access: Published
//  Description: Set Contrib Type and return a new effect... the reason
//               this couldnt be done through make was because
//               that would return a new effect without the 
//               lightgroup which is static and cant be accessed
//               Here, we just pass that to the make
//////////////////////////////////////////////////////////////////// 2 4 this 3 4061  1 c 1 3582  
1700 0 0 7 1562 3683 0 0 524 ////////////////////////////////////////////////////////////////////
//     Function: PolylightEffect::set_effect_center
//       Access: Published
//  Description: Set weight and return a new effect... the reason
//               this couldnt be done through make was because
//               that would return a new effect without the 
//               lightgroup which is static and cant be accessed
//               Here, we just pass that to the make
//////////////////////////////////////////////////////////////////// 2 4 this 3 4061  2 ec 1 3636  
1701 0 0 6 1563 3622 0 0 247 ////////////////////////////////////////////////////////////////////
//     Function: PolylightEffect::get_weight
//       Access: Published
//  Description: Get the weight value
//////////////////////////////////////////////////////////////////// 1 4 this 3 4061  
1702 0 0 6 1564 3582 0 0 257 ////////////////////////////////////////////////////////////////////
//     Function: PolylightEffect::get_contrib
//       Access: Published
//  Description: Returns CT_all or CT_proximal
//////////////////////////////////////////////////////////////////// 1 4 this 3 4061  
1703 0 0 7 1565 3841 0 0 272 ////////////////////////////////////////////////////////////////////
//     Function: PolylightEffect::get_effect_center
//       Access: Published
//  Description: Return the value of the _effect_center
//////////////////////////////////////////////////////////////////// 1 4 this 3 4061  
1704 0 0 6 1566 3610 0 0 329 ////////////////////////////////////////////////////////////////////
//     Function: PolylightEffect::has_light
//       Access: Published
//  Description: Returns true if the indicated light is listed in the
//               PolylightEffect, false otherwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4061  5 light 1 3755  
1705 0 0 7 1567 3649 0 0 0 0 
1706 0 0 7 1570 3654 0 0 297 ////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::make
//       Access: Published, Static
//  Description: Constructs a new ShaderAttrib object with nothing
//               set.
//////////////////////////////////////////////////////////////////// 1 6 shader 1 3851  
1707 0 0 7 1571 3654 0 0 383 ////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::make_off
//       Access: Published, Static
//  Description: Constructs a new ShaderAttrib object that disables
//               the use of shaders (it does not clear out all shader
//               data, however.)
//////////////////////////////////////////////////////////////////// 0 
1708 0 0 7 1572 3654 0 0 399 ////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::make_default
//       Access: Published, Static
//  Description: Returns a RenderAttrib that corresponds to whatever
//               the standard default properties for render attributes
//               of this type ought to be.
//////////////////////////////////////////////////////////////////// 0 
1709 0 0 6 1574 3610 0 0 336 ////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::has_shader
//       Access: Published
//  Description: If true, the shader field of this attribute overrides
//               the shader field of the parent attribute.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4063  
1710 0 0 6 1575 3610 0 0 387 ////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::auto_shader
//       Access: Published
//  Description: If true, then this ShaderAttrib does not contain an
//               explicit shader - instead, it requests the automatic
//               generation of a shader.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4063  
1711 0 0 6 1576 3611 0 0 232 ////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::get_shader_priority
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 4063  
1712 0 0 6 1577 3611 0 0 339 ////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::get_instance_count
//       Access: Published
//  Description: Returns the number of geometry instances. A value
//               of 0 means not to use instancing at all.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4063  
1713 0 0 6 1578 3610 0 0 238 //weifengh
////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::auto_normal_on
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 4063  
1714 0 0 6 1579 3610 0 0 225 ////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::auto_glow_on
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 4063  
1715 0 0 6 1580 3610 0 0 226 ////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::auto_gloss_on
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 4063  
1716 0 0 6 1581 3610 0 0 225 ////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::auto_ramp_on
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 4063  
1717 0 0 6 1582 3610 0 0 227 ////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::auto_shadow_on
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 4063  
1718 0 0 7 1583 3654 0 0 223 ////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::set_shader
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 4063  1 s 1 3851  8 priority 1 3611  
1719 0 0 7 1584 3654 0 0 227 ////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::set_shader_off
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 4063  8 priority 1 3611  
1720 0 0 7 1585 3654 0 0 323 ////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::set_shader_auto
//       Access: Published
//  Description: Set auto shader with bitmask to customize use,
//  e.g., to keep normal, glow, etc., on or off
//////////////////////////////////////////////////////////////////// 3 4 this 3 4063  13 shader_switch 1 3853  8 priority 1 3611  
1721 0 0 7 1585 3654 0 0 228 ////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::set_shader_auto
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 4063  8 priority 1 3611  
1722 0 0 7 1586 3654 0 0 225 ////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::clear_shader
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 4063  
1723 0 0 7 1587 3654 0 0 229 ////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::set_shader_input
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 4 4 this 3 4063  2 id 1 3717  1 v 1 3632  8 priority 1 3611  
1724 0 0 7 1587 3654 0 0 229 ////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::set_shader_input
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 4 4 this 3 4063  2 id 1 3717  1 v 1 3624  8 priority 1 3611  
1725 0 0 7 1587 3654 0 0 229 ////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::set_shader_input
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 4 4 this 3 4063  2 id 1 3717  1 v 1 3628  8 priority 1 3611  
1726 0 0 7 1587 3654 0 0 229 ////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::set_shader_input
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 4 4 this 3 4063  2 id 1 3717  1 v 1 3614  8 priority 1 3611  
1727 0 0 7 1587 3654 0 0 229 ////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::set_shader_input
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 4 4 this 3 4063  2 id 1 3717  1 v 1 3829  8 priority 1 3611  
1728 0 0 7 1587 3654 0 0 229 ////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::set_shader_input
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 4 4 this 3 4063  2 id 1 3717  2 np 1 3755  8 priority 1 3611  
1729 0 0 7 1587 3654 0 0 229 ////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::set_shader_input
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 4 4 this 3 4063  2 id 1 3717  1 v 1 3854  8 priority 1 3611  
1730 0 0 7 1587 3654 0 0 229 ////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::set_shader_input
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 4 4 this 3 4063  2 id 1 3717  1 v 1 3857  8 priority 1 3611  
1731 0 0 7 1587 3654 0 0 229 ////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::set_shader_input
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 4 4 this 3 4063  2 id 1 3717  1 v 1 3860  8 priority 1 3611  
1732 0 0 7 1587 3654 0 0 229 ////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::set_shader_input
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 4 4 this 3 4063  2 id 1 3717  1 v 1 3863  8 priority 1 3611  
1733 0 0 7 1587 3654 0 0 229 ////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::set_shader_input
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 4 4 this 3 4063  2 id 1 3717  1 v 1 3866  8 priority 1 3611  
1734 0 0 7 1587 3654 0 0 229 ////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::set_shader_input
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 4 4 this 3 4063  2 id 1 3717  1 v 1 3809  8 priority 1 3611  
1735 0 0 7 1587 3654 0 0 229 ////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::set_shader_input
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 4 4 this 3 4063  2 id 1 3717  1 v 1 3813  8 priority 1 3611  
1736 0 0 7 1587 3654 0 0 229 ////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::set_shader_input
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 4 4 this 3 4063  2 id 1 3717  3 tex 1 3822  8 priority 1 3611  
1737 0 0 7 1587 3654 0 0 229 ////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::set_shader_input
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 7 4 this 3 4063  2 id 1 3717  2 n1 1 3897  2 n2 1 3897  2 n3 1 3897  2 n4 1 3897  8 priority 1 3611  
1738 0 0 7 1587 3654 0 0 229 ////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::set_shader_input
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 4063  3 inp 1 3828  
1739 0 0 7 1588 3654 0 0 475 ////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::set_instance_count
//       Access: Published
//  Description: Sets the geometry instance count. Do not confuse
//               this with instanceTo, which is used for animation
//               instancing, and has nothing to do with this.
//               A value of 0 means not to use instancing at all.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4063  14 instance_count 1 3611  
1740 0 0 7 1589 3654 0 0 221 ////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::set_flag
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 4063  4 flag 1 3611  5 value 1 3610  
1741 0 0 7 1590 3654 0 0 223 ////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::clear_flag
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 4063  4 flag 1 3611  
1742 0 0 7 1591 3654 0 0 231 ////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::clear_shader_input
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 4063  2 id 1 3717  
1743 0 0 7 1591 3654 0 0 231 ////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::clear_shader_input
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 4063  2 id 1 3687  
1744 0 0 7 1592 3654 0 0 280 ////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::clear_all_shader_inputs
//       Access: Published
//  Description: Clears all the shader inputs on the attrib.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4063  
1745 0 0 6 1593 3610 0 0 221 ////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::get_flag
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 4063  4 flag 1 3611  
1746 0 0 6 1594 3610 0 0 304 ////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::has_shader_input
//       Access: Published
//  Description: Returns true if there is a ShaderInput of the given
//               name.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4063  2 id 1 3717  
1747 0 0 7 1595 3851 0 0 443 ////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::get_shader
//       Access: Published
//  Description: Returns the shader object associated with the node.
//               If get_override returns true, but get_shader
//               returns NULL, that means that this attribute should
//               disable the shader.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4063  
1748 0 0 7 1596 3828 0 0 408 ////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::get_shader_input
//       Access: Published
//  Description: Returns the ShaderInput of the given name.  If
//               no such name is found, this function does not return
//               NULL --- it returns the "blank" ShaderInput.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4063  2 id 1 3717  
1749 0 0 7 1596 3828 0 0 408 ////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::get_shader_input
//       Access: Published
//  Description: Returns the ShaderInput of the given name.  If
//               no such name is found, this function does not return
//               NULL --- it returns the "blank" ShaderInput.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4063  2 id 1 3687  
1750 0 0 6 1597 3755 0 0 357 ////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::get_shader_input_nodepath
//       Access: Published
//  Description: Returns the ShaderInput as a nodepath.  Assertion
//               fails if there is none, or if it is not a nodepath.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4063  2 id 1 3717  
1751 0 0 7 1598 4066 0 0 351 ////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::get_shader_input_vector
//       Access: Published
//  Description: Returns the ShaderInput as a vector.  Assertion
//               fails if there is none, or if it is not a vector.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4063  2 id 1 4065  
1752 0 0 7 1599 3822 0 0 476 ////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::get_shader_input_texture
//       Access: Published
//  Description: Returns the ShaderInput as a texture.  Assertion
//               fails if there is none, or if it is not a texture.
//
//               If sampler is not NULL, the sampler state to use
//               for this texture is assigned to it.
//////////////////////////////////////////////////////////////////// 3 4 this 3 4063  2 id 1 3717  7 sampler 1 4067  
1753 0 0 6 1600 3832 0 0 388 ////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::get_shader_input_ptr
//       Access: Published
//  Description: Returns the ShaderInput as a ShaderPtrData struct.
//               Assertion fails if there is none. or if it is not
//               a PTA(double/float)
//////////////////////////////////////////////////////////////////// 2 4 this 3 4063  2 id 1 3717  
1754 0 0 6 1601 3624 0 0 380 ////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::get_shader_input_matrix
//       Access: Published
//  Description: Returns the ShaderInput as a matrix.  Assertion
//               fails if there is none, or if it is not a matrix
//               or NodePath.
//////////////////////////////////////////////////////////////////// 3 4 this 3 4063  2 id 1 3717  6 matrix 1 3847  
1755 0 0 4 1602 3642 0 0 287 ////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::register_with_read_factory
//       Access: Public, Static
//  Description: Factory method to generate a Shader object
//////////////////////////////////////////////////////////////////// 0 
1756 0 0 6 1603 3611 0 0 0 0 
1757 0 0 7 1604 3649 0 0 0 0 
1758 0 0 7 1607 3683 0 0 271 ////////////////////////////////////////////////////////////////////
//     Function: ShowBoundsEffect::make
//       Access: Published, Static
//  Description: Constructs a new ShowBoundsEffect object.
//////////////////////////////////////////////////////////////////// 1 5 tight 1 3610  
1759 0 0 6 1608 3610 0 0 404 ////////////////////////////////////////////////////////////////////
//     Function: ShowBoundsEffect::get_tight
//       Access: Published
//  Description: Returns true if the "tight" flag was set, meaning the
//               effect should compute and draw the tight bounding-box
//               of the node's vertices every frame.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4068  
1760 0 0 7 1609 3649 0 0 0 0 
1761 0 0 7 1612 3683 0 0 312 ////////////////////////////////////////////////////////////////////
//     Function: TexProjectorEffect::make
//       Access: Published, Static
//  Description: Constructs a TexProjectorEffect that modifies
//               no stages at all.
//////////////////////////////////////////////////////////////////// 0 
1762 0 0 7 1613 3683 0 0 910 ////////////////////////////////////////////////////////////////////
//     Function: TexProjectorEffect::add_stage
//       Access: Published, Static
//  Description: Returns a new TexProjectorEffect just like this one,
//               with the indicated projection for the given stage.
//               If this stage already exists, its projection
//               definition is replaced.
//
//               The relative transform between the "from" and the
//               "to" nodes is automatically applied to the texture
//               transform each frame.
//
//               Furthermore, if the "to" node is a LensNode, its
//               projection matrix is also applied to the texture
//               transform.  In this case, the lens_index may be used
//               to select the particular lens that should be used.
//////////////////////////////////////////////////////////////////// 5 4 this 3 4070  5 stage 1 3666  4 from 1 3755  2 to 1 3755  10 lens_index 1 3611  
1763 0 0 7 1614 3683 0 0 343 ////////////////////////////////////////////////////////////////////
//     Function: TexProjectorEffect::remove_stage
//       Access: Published, Static
//  Description: Returns a new TexProjectorEffect just like this one,
//               with the indicated stage removed.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4070  5 stage 1 3666  
1764 0 0 6 1615 3610 0 0 335 ////////////////////////////////////////////////////////////////////
//     Function: TexProjectorEffect::is_empty
//       Access: Published
//  Description: Returns true if no stages are defined in the
//               TexProjectorEffect, false if at least one is.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4070  
1765 0 0 6 1616 3610 0 0 445 ////////////////////////////////////////////////////////////////////
//     Function: TexProjectorEffect::has_stage
//       Access: Published
//  Description: Returns true if there is a transform associated with
//               the indicated stage, or false otherwise (in which
//               case get_transform(stage) will return the identity
//               transform).
//////////////////////////////////////////////////////////////////// 2 4 this 3 4070  5 stage 1 3666  
1766 0 0 7 1617 3839 2604 0 506 ////////////////////////////////////////////////////////////////////
//     Function: TexProjectorEffect::get_from
//       Access: Published
//  Description: Returns the "from" node associated with the
//               TexProjectorEffect on the indicated stage.  The
//               relative transform between the "from" and the "to"
//               nodes is automatically applied to the texture
//               transform each frame.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4070  5 stage 1 3666  
1767 0 0 7 1618 3839 2604 0 665 ////////////////////////////////////////////////////////////////////
//     Function: TexProjectorEffect::get_to
//       Access: Published
//  Description: Returns the "to" node associated with the
//               TexProjectorEffect on the indicated stage.  The
//               relative transform between the "from" and the "to"
//               nodes is automatically applied to the texture
//               transform each frame.
//
//               Furthermore, if the "to" node is a LensNode, its
//               projection matrix is also applied to the texture
//               transform.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4070  5 stage 1 3666  
1768 0 0 6 1619 3611 0 0 506 ////////////////////////////////////////////////////////////////////
//     Function: TexProjectorEffect::get_lens_index
//       Access: Published
//  Description: Returns the lens_index associated with the
//               TexProjectorEffect on the indicated stage.  This is
//               only used if the "to" node is a LensNode, in which
//               case it specifies the particular lens that should be
//               used.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4070  5 stage 1 3666  
1769 0 0 7 1620 3649 0 0 0 0 
1770 0 0 7 1622 3683 0 0 420 ////////////////////////////////////////////////////////////////////
//     Function: ScissorEffect::make_screen
//       Access: Published, Static
//  Description: Constructs a new screen-relative ScissorEffect.  The
//               frame defines a left, right, bottom, top region,
//               relative to the DisplayRegion.  See ScissorAttrib.
//////////////////////////////////////////////////////////////////// 2 5 frame 1 3829  4 clip 1 3610  
1771 0 0 7 1623 3683 0 0 529 ////////////////////////////////////////////////////////////////////
//     Function: ScissorEffect::make_node
//       Access: Published, Static
//  Description: Constructs a new node-relative ScissorEffect.  The
//               four points are understood to be relative to the
//               indicated node, or the current node if the indicated
//               NodePath is empty, and determine four points
//               surrounding the scissor region.
//////////////////////////////////////////////////////////////////// 5 1 a 1 3636  1 b 1 3636  1 c 1 3636  1 d 1 3636  4 node 1 3755  
1772 0 0 7 1623 3683 0 0 529 ////////////////////////////////////////////////////////////////////
//     Function: ScissorEffect::make_node
//       Access: Published, Static
//  Description: Constructs a new node-relative ScissorEffect.  The
//               two points are understood to be relative to the
//               indicated node, or the current node if the NodePath
//               is empty, and determine the diagonally opposite
//               corners of the scissor region.
//////////////////////////////////////////////////////////////////// 3 1 a 1 3636  1 b 1 3636  4 node 1 3755  
1773 0 0 7 1623 3683 0 0 463 ////////////////////////////////////////////////////////////////////
//     Function: ScissorEffect::make_node
//       Access: Published, Static
//  Description: Constructs a new node-relative ScissorEffect, with no
//               points.  This empty ScissorEffect does nothing.  You
//               must then call add_point a number of times to add the
//               points you require.
//////////////////////////////////////////////////////////////////// 1 4 clip 1 3610  
1774 0 0 7 1624 3683 0 0 628 ////////////////////////////////////////////////////////////////////
//     Function: ScissorEffect::add_point
//       Access: Published
//  Description: Returns a new ScissorEffect with the indicated point
//               added.  It is only valid to call this on a "node"
//               type ScissorEffect.  The full set of points,
//               projected into screen space, defines the bounding
//               volume of the rectangular scissor region.
//
//               Each point may be relative to a different node, if
//               desired.
//////////////////////////////////////////////////////////////////// 3 4 this 3 4072  5 point 1 3636  4 node 1 3755  
1775 0 0 6 1625 3610 0 0 393 ////////////////////////////////////////////////////////////////////
//     Function: ScissorEffect::is_screen
//       Access: Published
//  Description: Returns true if the ScissorEffect is a screen-based
//               effect, meaning get_frame() has a meaningful value,
//               but get_a() and get_b() do not.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4072  
1776 0 0 6 1626 3829 0 0 524 ////////////////////////////////////////////////////////////////////
//     Function: ScissorEffect::get_frame
//       Access: Published
//  Description: If is_screen() returns true, this method may be
//               called to query the screen-based scissor frame.  This
//               is a series of left, right, bottom, top, representing
//               the scissor frame relative to the current
//               DisplayRegion.  See ScissorAttrib.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4072  
1777 0 0 6 1627 3611 0 0 312 ////////////////////////////////////////////////////////////////////
//     Function: ScissorEffect::get_num_points
//       Access: Published
//  Description: Returns the number of node-based scissor points.  See
//               get_point().
//////////////////////////////////////////////////////////////////// 1 4 this 3 4072  
1778 0 0 6 1628 3636 0 0 582 ////////////////////////////////////////////////////////////////////
//     Function: ScissorEffect::get_point
//       Access: Published
//  Description: If is_screen() returns false, then get_num_points() and
//               get_point() may be called to query the node-based scissor
//               frame.  These return n points (at least two), which
//               are understood to be in the space of this node, and
//               which define any opposite corners of the scissor
//               frame.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4072  1 n 1 3611  
1779 0 0 7 1629 3839 2604 0 340 ////////////////////////////////////////////////////////////////////
//     Function: ScissorEffect::get_node
//       Access: Published
//  Description: Returns the node to which the nth point is relative,
//               or empty NodePath to indicate the current node.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4072  1 n 1 3611  
1780 0 0 6 1630 3610 0 0 330 ////////////////////////////////////////////////////////////////////
//     Function: ScissorEffect::get_clip
//       Access: Published
//  Description: Returns true if this ScissorEffect actually enables
//               scissoring, or false if it culls only.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4072  
1781 0 0 7 1631 3649 0 0 0 0 
1782 0 0 7 1634 4074 3386 0 229 ////////////////////////////////////////////////////////////////////
//     Function: SceneGraphReducer::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 3 gsg 1 3701  
1783 0 0 4 1640 3642 0 0 664 ////////////////////////////////////////////////////////////////////
//     Function: SceneGraphReducer::set_gsg
//       Access: Published
//  Description: Specifies the particular GraphicsStateGuardian that
//               this object will attempt to optimize to.  The GSG may
//               specify parameters such as maximum number of vertices
//               per vertex data, max number of vertices per
//               primitive, and whether triangle strips are preferred.
//               It also affects the types of vertex column data that
//               is created by premunge().
//////////////////////////////////////////////////////////////////// 2 4 this 3 4074  3 gsg 1 3701  
1784 0 0 4 1641 3642 0 0 480 ////////////////////////////////////////////////////////////////////
//     Function: SceneGraphReducer::clear_gsg
//       Access: Published
//  Description: Specifies that no particular GraphicsStateGuardian
//               will be used to guide the optimization.  The
//               SceneGraphReducer will instead use config variables
//               such as max-collect-vertices and max-collect-indices.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4074  
1785 0 0 7 1642 3701 0 0 366 ////////////////////////////////////////////////////////////////////
//     Function: SceneGraphReducer::get_gsg
//       Access: Published
//  Description: Returns the particular GraphicsStateGuardian that
//               this object will attempt to optimize to. 
//               See set_gsg().
//////////////////////////////////////////////////////////////////// 1 4 this 3 4075  
1786 0 0 4 1643 3642 0 0 757 ////////////////////////////////////////////////////////////////////
//     Function: SceneGraphReducer::set_combine_radius
//       Access: Published
//  Description: Specifies the radius that is used in conjunction with
//               CS_within_radius to decide whether a subgraph's
//               siblings should be combined into a single node or
//               not.
//
//               If the CS_within_radius bit is included in the
//               combine_siblings_bits parameter passed to flatten,
//               than any nodes whose bounding volume is smaller than
//               the indicated radius will be combined together (as if
//               CS_other were set).
//////////////////////////////////////////////////////////////////// 2 4 this 3 4074  14 combine_radius 1 3622  
1787 0 0 6 1644 3622 0 0 350 ////////////////////////////////////////////////////////////////////
//     Function: SceneGraphReducer::get_combine_radius
//       Access: Published
//  Description: Returns the radius that is used in conjunction with
//               CS_within_radius.  See set_combine_radius().
//////////////////////////////////////////////////////////////////// 1 4 this 3 4075  
1788 0 0 4 1645 3642 0 0 524 ////////////////////////////////////////////////////////////////////
//     Function: SceneGraphReducer::apply_attribs
//       Access: Published
//  Description: This flavor of apply_attribs() can be called
//               recursively from within another flatten process
//               (e.g. from PandaNode::apply_attribs_to_vertices()).
//               The parameters were presumably received from a parent
//               SceneGraphReducer object.
//////////////////////////////////////////////////////////////////// 5 4 this 3 4074  4 node 1 3688  7 attribs 1 4077  12 attrib_types 1 3611  11 transformer 1 4080  
1789 0 0 4 1645 3642 0 0 883 ////////////////////////////////////////////////////////////////////
//     Function: SceneGraphReducer::apply_attribs
//       Access: Published
//  Description: Walks the scene graph, accumulating attribs of
//               the indicated types, applying them to the vertices,
//               and removing them from the scene graph.  This has a
//               performance optimization benefit in itself, but is
//               especially useful to pave the way for a call to
//               flatten() and greatly improve the effectiveness of
//               the flattening operation.
//
//               Multiply instanced geometry is duplicated before the
//               attribs are applied.
//
//               Of course, this operation does make certain dynamic
//               operations impossible.
//////////////////////////////////////////////////////////////////// 3 4 this 3 4074  4 node 1 3688  12 attrib_types 1 3611  
1790 0 0 6 1646 3611 0 0 940 ////////////////////////////////////////////////////////////////////
//     Function: SceneGraphReducer::flatten
//       Access: Published
//  Description: Simplifies the graph by removing unnecessary nodes
//               and nodes.
//
//               In general, a node (and its parent node) is a
//               candidate for removal if the node has no siblings and
//               the node has no special properties.
//
//               If combine_siblings_bits is nonzero, some sibling
//               nodes (according to the bits set in
//               combine_siblings_bits) may also be collapsed into a
//               single node.  This will further reduce scene graph
//               complexity, sometimes substantially, at the cost of
//               reduced spatial separation.
//
//               Returns the number of nodes removed from the graph.
//////////////////////////////////////////////////////////////////// 3 4 this 3 4074  4 root 1 3688  21 combine_siblings_bits 1 3611  
1791 0 0 6 1647 3611 0 0 406 ////////////////////////////////////////////////////////////////////
//     Function: SceneGraphReducer::remove_column
//       Access: Published
//  Description: Removes the indicated data column from any
//               GeomVertexDatas found at the indicated root and
//               below.  Returns the number of GeomNodes modified.
//////////////////////////////////////////////////////////////////// 3 4 this 3 4074  4 root 1 3688  6 column 1 3717  
1792 0 0 6 1648 3611 0 0 542 ////////////////////////////////////////////////////////////////////
//     Function: SceneGraphReducer::make_compatible_state
//       Access: Published
//  Description: Searches for GeomNodes that contain multiple Geoms
//               that differ only in their ColorAttribs.  If such a
//               GeomNode is found, then all the colors are pushed
//               down into the vertices.  This makes it feasible for
//               the geoms to be unified later.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4074  4 root 1 3688  
1793 0 0 6 1649 3611 0 0 1154 ////////////////////////////////////////////////////////////////////
//     Function: SceneGraphReducer::make_compatible_format
//       Access: Published
//  Description: Walks through the tree at this node and below and
//               unifies the GeomVertexFormat for any GeomVertexData
//               objects that are found, so that all eligible vdatas
//               (according to collect_bits; see collect_vertex_data)
//               will share the same vertex format.
//
//               This will add unused columns where necessary to match
//               formats.  It can result in suboptimal performance if
//               used needlessly.
//
//               There is usually no reason to call this explicitly,
//               since collect_vertex_data() will do this anyway if it
//               has not been done already.  However, calling it ahead
//               of time can make that future call to
//               collect_vertex_data() run a little bit faster.
//
//               The return value is the number of vertex datas
//               modified.
//////////////////////////////////////////////////////////////////// 3 4 this 3 4074  4 root 1 3688  12 collect_bits 1 3611  
1794 0 0 4 1650 3642 0 0 716 ////////////////////////////////////////////////////////////////////
//     Function: SceneGraphReducer::decompose
//       Access: Published
//  Description: Calls decompose() on every GeomNode at this level and
//               below.
//
//               There is usually no reason to call this explicitly,
//               since unify() will do this anyway if it needs to be
//               done.  However, calling it ahead of time can make
//               that future call to unify() run a little bit faster.
//
//               This operation has no effect if the config variable
//               preserve-triangle-strips has been set true.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4074  4 root 1 3688  
1795 0 0 6 1651 3611 0 0 955 ////////////////////////////////////////////////////////////////////
//     Function: SceneGraphReducer::collect_vertex_data
//       Access: Published
//  Description: Collects all different GeomVertexData blocks that
//               have compatible formats at this node and below into a
//               single, unified block (or at least multiple larger
//               blocks).  This is intended to reduce rendering
//               overhead incurred by switching vertex buffers.  It
//               can also make a subsequent call to unify() much more
//               effective than it would have been otherwise.
//
//               The set of bits passed in collect_bits indicates
//               which properties are used to differentiate
//               GeomVertexData blocks.  If it is 0, then more blocks
//               will be combined together than if it is nonzero.
//////////////////////////////////////////////////////////////////// 3 4 this 3 4074  4 root 1 3688  12 collect_bits 1 3611  
1796 0 0 6 1652 3611 0 0 604 ////////////////////////////////////////////////////////////////////
//     Function: SceneGraphReducer::make_nonindexed
//       Access: Published
//  Description: Converts indexed geometry to nonindexed geometry at
//               the indicated node and below, by duplicating vertices
//               where necessary.  The parameter nonindexed_bits is a
//               union of bits defined in
//               SceneGraphReducer::MakeNonindexed, which specifes
//               which types of geometry to avoid making nonindexed.
//////////////////////////////////////////////////////////////////// 3 4 this 3 4074  4 root 1 3688  15 nonindexed_bits 1 3611  
1797 0 0 4 1653 3642 0 0 499 ////////////////////////////////////////////////////////////////////
//     Function: SceneGraphReducer::unify
//       Access: Published
//  Description: Calls unify() on every GeomNode at this level and
//               below.  This attempts to reduce the total number of
//               individual Geoms and GeomPrimitives by combining
//               these objects wherever possible.  See
//               GeomNode::unify().
//////////////////////////////////////////////////////////////////// 3 4 this 3 4074  4 root 1 3688  14 preserve_order 1 3610  
1798 0 0 4 1654 3642 0 0 579 ////////////////////////////////////////////////////////////////////
//     Function: SceneGraphReducer::remove_unused_vertices
//       Access: Published
//  Description: Removes any vertices in GeomVertexDatas that are no
//               longer used at this level and below.  This requires
//               remapping vertex indices in all of the
//               GeomPrimitives, to remove holes in the
//               GeomVertexDatas.  It is normally not necessary to
//               call this explicitly.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4074  4 root 1 3688  
1799 0 0 4 1655 3642 0 0 609 ////////////////////////////////////////////////////////////////////
//     Function: SceneGraphReducer::premunge
//       Access: Published
//  Description: Walks the scene graph rooted at this node and below,
//               and uses the indicated GSG to premunge every Geom
//               found to optimize it for eventual rendering on the
//               indicated GSG.  If there is no GSG indicated for the
//               SceneGraphReducer, this is a no-op.
//
//               This operation will also apply to stashed children.
//////////////////////////////////////////////////////////////////// 3 4 this 3 4074  4 root 1 3688  13 initial_state 1 3657  
1800 0 0 6 1656 3610 0 0 672 ////////////////////////////////////////////////////////////////////
//     Function: SceneGraphReducer::check_live_flatten
//       Access: Published
//  Description: In a non-release build, returns false if the node is
//               correctly not in a live scene graph.  (Calling
//               flatten on a node that is part of a live scene graph,
//               for instance, a node somewhere under render, can
//               cause problems in a multithreaded environment.)
//
//               If allow_live_flatten is true, or in a release build,
//               this always returns true.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4074  4 node 1 3688  
1801 0 0 7 1661 4082 3409 0 306 ////////////////////////////////////////////////////////////////////
//     Function: ParamNodePath::Constructor
//       Access: Published
//  Description: Creates a new ParamNodePath storing the given
//               node path object.
//////////////////////////////////////////////////////////////////// 1 9 node_path 1 3755  
1802 0 0 6 1662 3755 0 0 271 ////////////////////////////////////////////////////////////////////
//     Function: ParamNodePath::get_value
//       Access: Published
//  Description: Retrieves the NodePath stored in the parameter.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4083  
1803 0 0 7 1663 3649 0 0 0 0 
1804 0 0 7 1666 4085 2111 0 475 ////////////////////////////////////////////////////////////////////
//     Function: PortalNode::Constructor
//       Access: Public
//  Description: Default constructor, just an empty node, no geo
//               This is used to read portal from model. You can also
//               use this from python to create an empty portal. Then
//               you can set the vertices yourself, with addVertex.
//////////////////////////////////////////////////////////////////// 1 4 name 1 3687  
1805 0 0 7 1666 4085 2111 0 335 ////////////////////////////////////////////////////////////////////
//     Function: PortalNode::Constructor
//       Access: Public
//  Description: Create a default rectangle as portal. Use this
//               to create an arbitrary portal and setup from Python
//////////////////////////////////////////////////////////////////// 3 4 name 1 3687  3 pos 1 3841  5 scale 1 3622  
1806 0 0 4 1667 3642 0 0 327 ////////////////////////////////////////////////////////////////////
//     Function: PortalNode::set_portal_mask
//       Access: Published
//  Description: Simultaneously sets both the "from" and "into"
//               PortalMask values to the same thing.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4085  4 mask 1 4086  
1807 0 0 4 1668 3642 0 0 501 ////////////////////////////////////////////////////////////////////
//     Function: PortalNode::set_from_portal_mask
//       Access: Published
//  Description: Sets the "from" PortalMask.  In order for a
//               portal to be detected from this object into
//               another object, the intersection of this object's
//               "from" mask and the other object's "into" mask must
//               be nonzero.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4085  4 mask 1 4086  
1808 0 0 4 1669 3642 0 0 501 ////////////////////////////////////////////////////////////////////
//     Function: PortalNode::set_into_portal_mask
//       Access: Published
//  Description: Sets the "into" PortalMask.  In order for a
//               portal to be detected from another object into
//               this object, the intersection of the other object's
//               "from" mask and this object's "into" mask must be
//               nonzero.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4085  4 mask 1 4086  
1809 0 0 7 1670 4086 0 0 512 ////////////////////////////////////////////////////////////////////
//     Function: PortalNode::get_from_portal_mask
//       Access: Published
//  Description: Returns the current "from" PortalMask.  In order for
//               a portal to be detected from this object into
//               another object, the intersection of this object's
//               "from" mask and the other object's "into" mask must
//               be nonzero.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4088  
1810 0 0 7 1671 4086 0 0 512 ////////////////////////////////////////////////////////////////////
//     Function: PortalNode::get_into_portal_mask
//       Access: Published
//  Description: Returns the current "into" PortalMask.  In order for
//               a portal to be detected from another object into
//               this object, the intersection of the other object's
//               "from" mask and this object's "into" mask must be
//               nonzero.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4088  
1811 0 0 4 1672 3642 0 0 847 ////////////////////////////////////////////////////////////////////
//     Function: PortalNode::set_portal_geom
//       Access: Published
//  Description: Sets the state of the "portal geom" flag for this
//               PortalNode.  Normally, this is false; when this is
//               set true, the PortalSolids in this node will test
//               for portals with actual renderable geometry, in
//               addition to whatever PortalSolids may be indicated
//               by the from_portal_mask.
//
//               Setting this to true causes this to test *all*
//               GeomNodes for portals.  It is an all-or-none
//               thing; there is no way to portal with only some
//               GeomNodes, as GeomNodes have no into_portal_mask.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4085  4 flag 1 3610  
1812 0 0 6 1673 3610 0 0 317 ////////////////////////////////////////////////////////////////////
//     Function: PortalNode::get_portal_geom
//       Access: Published
//  Description: Returns the current state of the portal_geom flag.
//               See set_portal_geom().
//////////////////////////////////////////////////////////////////// 1 4 this 3 4088  
1813 0 0 4 1674 3642 0 0 278 ////////////////////////////////////////////////////////////////////
//     Function: PortalNode::clear_vertices
//       Access: Published
//  Description: Resets the vertices of the portal to the empty list.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4085  
1814 0 0 4 1675 3642 0 0 395 ////////////////////////////////////////////////////////////////////
//     Function: PortalNode::add_vertex
//       Access: Published
//  Description: Adds a new vertex to the portal polygon.  The
//               vertices should be defined in a counterclockwise
//               orientation when viewing through the portal.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4085  6 vertex 1 3636  
1815 0 0 6 1676 3611 0 0 281 ////////////////////////////////////////////////////////////////////
//     Function: PortalNode::get_num_vertices
//       Access: Published
//  Description: Returns the number of vertices in the portal polygon.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4088  
1816 0 0 6 1677 3636 0 0 267 ////////////////////////////////////////////////////////////////////
//     Function: PortalNode::get_vertex
//       Access: Published
//  Description: Returns the nth vertex of the portal polygon.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4088  1 n 1 3611  
1817 0 0 4 1678 3642 0 0 264 ////////////////////////////////////////////////////////////////////
//     Function: PortalNode::set_cell_in
//       Access: Published
//  Description: Sets the cell that this portal belongs to
//////////////////////////////////////////////////////////////////// 2 4 this 3 4085  4 cell 1 3755  
1818 0 0 7 1679 3839 2604 0 264 ////////////////////////////////////////////////////////////////////
//     Function: PortalNode::get_cell_in
//       Access: Published
//  Description: Sets the cell that this portal belongs to
//////////////////////////////////////////////////////////////////// 1 4 this 3 4088  
1819 0 0 4 1680 3642 0 0 267 ////////////////////////////////////////////////////////////////////
//     Function: PortalNode::set_cell_out
//       Access: Published
//  Description: Sets the cell that this portal leads out to
//////////////////////////////////////////////////////////////////// 2 4 this 3 4085  4 cell 1 3755  
1820 0 0 7 1681 3839 2604 0 267 ////////////////////////////////////////////////////////////////////
//     Function: PortalNode::get_cell_out
//       Access: Published
//  Description: Sets the cell that this portal leads out to
//////////////////////////////////////////////////////////////////// 1 4 this 3 4088  
1821 0 0 4 1682 3642 0 0 313 ////////////////////////////////////////////////////////////////////
//     Function: PortalNode::set_clip_plane
//       Access: Published
//  Description: this is set if the portal will clip against its 
//               left and right planes
//////////////////////////////////////////////////////////////////// 2 4 this 3 4085  5 value 1 3610  
1822 0 0 6 1683 3610 0 0 278 ////////////////////////////////////////////////////////////////////
//     Function: PortalNode::is_clip_plane
//       Access: Published
//  Description: Is this portal clipping against its left-right planes
//////////////////////////////////////////////////////////////////// 1 4 this 3 4085  
1823 0 0 4 1684 3642 0 0 265 ////////////////////////////////////////////////////////////////////
//     Function: PortalNode::set_visible
//       Access: Published
//  Description: this is set if the portal is facing camera
//////////////////////////////////////////////////////////////////// 2 4 this 3 4085  5 value 1 3610  
1824 0 0 6 1685 3610 0 0 254 ////////////////////////////////////////////////////////////////////
//     Function: PortalNode::is_visible
//       Access: Published
//  Description: Is this portal facing the camera
//////////////////////////////////////////////////////////////////// 1 4 this 3 4085  
1825 0 0 4 1686 3642 0 0 277 ////////////////////////////////////////////////////////////////////
//     Function: PortalNode::set_max_depth
//       Access: Published
//  Description: Set the maximum depth this portal will be visible at
//////////////////////////////////////////////////////////////////// 2 4 this 3 4085  5 value 1 3611  
1826 0 0 6 1687 3611 0 0 281 ////////////////////////////////////////////////////////////////////
//     Function: PortalNode::get_max_depth
//       Access: Published
//  Description: Returns the maximum depth this portal will be visible at
//////////////////////////////////////////////////////////////////// 1 4 this 3 4085  
1827 0 0 4 1688 3642 0 0 264 ////////////////////////////////////////////////////////////////////
//     Function: PortalNode::set_open
//       Access: Published
//  Description: Python sets this based on curent camera zone
//////////////////////////////////////////////////////////////////// 2 4 this 3 4085  5 value 1 3610  
1828 0 0 6 1689 3610 0 0 263 ////////////////////////////////////////////////////////////////////
//     Function: PortalNode::is_open
//       Access: Published
//  Description: Is this portal open from current camera zone
//////////////////////////////////////////////////////////////////// 1 4 this 3 4085  
1829 0 0 7 1690 3649 0 0 0 0 
1830 0 0 7 1693 3654 0 0 419 ////////////////////////////////////////////////////////////////////
//     Function: RescaleNormalAttrib::make
//       Access: Published, Static
//  Description: Constructs a new RescaleNormalAttrib object that
//               specifies whether to rescale normals to compensate
//               for transform scales or incorrectly defined normals.
//////////////////////////////////////////////////////////////////// 1 4 mode 1 3599  
1831 0 0 7 1694 3654 0 0 483 ////////////////////////////////////////////////////////////////////
//     Function: RescaleNormalAttrib::make_default
//       Access: Published, Static
//  Description: Constructs a RescaleNoramlAttrib object that's
//               suitable for putting at the top of a scene graph.
//               This will contain whatever attrib was suggested by
//               the user's rescale-normals Config variable.
//////////////////////////////////////////////////////////////////// 0 
1832 0 0 6 1695 3599 0 0 253 ////////////////////////////////////////////////////////////////////
//     Function: RescaleNormalAttrib::get_mode
//       Access: Published
//  Description: Returns the render mode.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4090  
1833 0 0 6 1696 3611 0 0 0 0 
1834 0 0 7 1697 3649 0 0 0 0 
1835 0 0 7 1700 3654 0 0 346 ////////////////////////////////////////////////////////////////////
//     Function: ScissorAttrib::make_off
//       Access: Published, Static
//  Description: Constructs a new ScissorAttrib object that removes
//               the scissor region and fills the DisplayRegion.
//////////////////////////////////////////////////////////////////// 0 
1836 0 0 7 1701 3654 0 0 477 ////////////////////////////////////////////////////////////////////
//     Function: ScissorAttrib::make
//       Access: Published, Static
//  Description: Constructs a ScissorAttrib that restricts rendering
//               to the indicated frame within the current
//               DisplayRegion.  (0,0) is the lower-left corner of the
//               DisplayRegion, and (1,1) is the upper-right corner.
//////////////////////////////////////////////////////////////////// 1 5 frame 1 3829  
1837 0 0 7 1701 3654 0 0 477 ////////////////////////////////////////////////////////////////////
//     Function: ScissorAttrib::make
//       Access: Published, Static
//  Description: Constructs a ScissorAttrib that restricts rendering
//               to the indicated frame within the current
//               DisplayRegion.  (0,0) is the lower-left corner of the
//               DisplayRegion, and (1,1) is the upper-right corner.
//////////////////////////////////////////////////////////////////// 4 4 left 1 3622  5 right 1 3622  6 bottom 1 3622  3 top 1 3622  
1838 0 0 7 1702 3654 0 0 400 ////////////////////////////////////////////////////////////////////
//     Function: ScissorAttrib::make_default
//       Access: Published, Static
//  Description: Returns a RenderAttrib that corresponds to whatever
//               the standard default properties for render attributes
//               of this type ought to be.
//////////////////////////////////////////////////////////////////// 0 
1839 0 0 6 1703 3610 0 0 360 ////////////////////////////////////////////////////////////////////
//     Function: ScissorAttrib::is_off
//       Access: Published
//  Description: Returns true if the ScissorAttrib is an 'off'
//               ScissorAttrib, indicating that scissor testing is
//               disabled.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4092  
1840 0 0 6 1704 3829 0 0 510 ////////////////////////////////////////////////////////////////////
//     Function: ScissorAttrib::get_frame
//       Access: Published
//  Description: Returns the left, right, bottom, top coordinates of
//               the scissor frame.  This defines a frame within the
//               current DisplayRegion, where 0,0 is the lower-left
//               corner of the DisplayRegion, and 1,1 is the
//               upper-right corner.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4092  
1841 0 0 6 1705 3611 0 0 0 0 
1842 0 0 7 1706 3649 0 0 0 0 
1843 0 0 7 1710 3654 0 0 399 ////////////////////////////////////////////////////////////////////
//     Function: ShadeModelAttrib::make
//       Access: Published, Static
//  Description: Constructs a new ShadeModelAttrib object that specifies
//               whether to draw polygons with flat shading or with
//               per-vertex (smooth) shading.
//////////////////////////////////////////////////////////////////// 1 4 mode 1 3602  
1844 0 0 7 1711 3654 0 0 403 ////////////////////////////////////////////////////////////////////
//     Function: ShadeModelAttrib::make_default
//       Access: Published, Static
//  Description: Returns a RenderAttrib that corresponds to whatever
//               the standard default properties for render attributes
//               of this type ought to be.
//////////////////////////////////////////////////////////////////// 0 
1845 0 0 6 1712 3602 0 0 249 ////////////////////////////////////////////////////////////////////
//     Function: ShadeModelAttrib::get_mode
//       Access: Published
//  Description: Returns the shade mode.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4094  
1846 0 0 6 1713 3611 0 0 0 0 
1847 0 0 7 1714 3649 0 0 0 0 
1848 0 0 7 1720 3654 0 0 306 ////////////////////////////////////////////////////////////////////
//     Function: StencilAttrib::make_off
//       Access: Published, Static
//  Description: Constructs a StencilAttrib that has stenciling
//               turned off.
//////////////////////////////////////////////////////////////////// 0 
1849 0 0 7 1721 3654 0 0 400 ////////////////////////////////////////////////////////////////////
//     Function: StencilAttrib::make_default
//       Access: Published, Static
//  Description: Returns a RenderAttrib that corresponds to whatever
//               the standard default properties for render attributes
//               of this type ought to be.
//////////////////////////////////////////////////////////////////// 0 
1850 0 0 7 1722 3654 0 0 265 ////////////////////////////////////////////////////////////////////
//     Function: StencilAttrib::make
//       Access: Published, Static
//  Description: Constructs a front face StencilAttrib.
//////////////////////////////////////////////////////////////////// 8 12 front_enable 1 3610  25 front_comparison_function 1 3480  22 stencil_fail_operation 1 3606  29 stencil_pass_z_fail_operation 1 3606  35 front_stencil_pass_z_pass_operation 1 3606  9 reference 1 3696  9 read_mask 1 3696  10 write_mask 1 3696  
1851 0 0 7 1723 3654 0 0 272 ////////////////////////////////////////////////////////////////////
//     Function: StencilAttrib::make_2_sided
//       Access: Published, Static
//  Description: Constructs a two-sided StencilAttrib.
//////////////////////////////////////////////////////////////////// 13 12 front_enable 1 3610  11 back_enable 1 3610  25 front_comparison_function 1 3480  22 stencil_fail_operation 1 3606  29 stencil_pass_z_fail_operation 1 3606  35 front_stencil_pass_z_pass_operation 1 3606  9 reference 1 3696  9 read_mask 1 3696  10 write_mask 1 3696  24 back_comparison_function 1 3480  27 back_stencil_fail_operation 1 3606  34 back_stencil_pass_z_fail_operation 1 3606  34 back_stencil_pass_z_pass_operation 1 3606  
1852 0 0 7 1724 3654 0 0 265 ////////////////////////////////////////////////////////////////////
//     Function: StencilAttrib::make
//       Access: Published, Static
//  Description: Constructs a front face StencilAttrib.
//////////////////////////////////////////////////////////////////// 10 12 front_enable 1 3610  25 front_comparison_function 1 3480  22 stencil_fail_operation 1 3606  29 stencil_pass_z_fail_operation 1 3606  35 front_stencil_pass_z_pass_operation 1 3606  9 reference 1 3696  9 read_mask 1 3696  10 write_mask 1 3696  5 clear 1 3610  11 clear_value 1 3696  
1853 0 0 7 1725 3654 0 0 272 ////////////////////////////////////////////////////////////////////
//     Function: StencilAttrib::make_2_sided
//       Access: Published, Static
//  Description: Constructs a two-sided StencilAttrib.
//////////////////////////////////////////////////////////////////// 15 12 front_enable 1 3610  11 back_enable 1 3610  25 front_comparison_function 1 3480  22 stencil_fail_operation 1 3606  29 stencil_pass_z_fail_operation 1 3606  35 front_stencil_pass_z_pass_operation 1 3606  9 reference 1 3696  9 read_mask 1 3696  10 write_mask 1 3696  24 back_comparison_function 1 3480  27 back_stencil_fail_operation 1 3606  34 back_stencil_pass_z_fail_operation 1 3606  34 back_stencil_pass_z_pass_operation 1 3606  5 clear 1 3610  11 clear_value 1 3696  
1854 0 0 6 1726 3696 0 0 252 ////////////////////////////////////////////////////////////////////
//     Function: StencilAttrib::get_render_state
//       Access: Published
//  Description: Returns render state.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4096  23 render_state_identifier 1 3604  
1855 0 0 6 1727 3611 0 0 0 0 
1856 0 0 7 1728 3649 0 0 0 0 
1857 0 0 6 1731 3610 0 0 309 ////////////////////////////////////////////////////////////////////
//     Function: ShaderPool::has_shader
//       Access: Public, Static
//  Description: Returns true if the shader has ever been loaded,
//               false otherwise.
//////////////////////////////////////////////////////////////////// 1 8 filename 1 3881  
1858 0 0 6 1732 3610 0 0 602 ////////////////////////////////////////////////////////////////////
//     Function: ShaderPool::verify_shader
//       Access: Public, Static
//  Description: Loads the given filename up into a shader, if it has
//               not already been loaded, and returns true to indicate
//               success, or false to indicate failure.  If this
//               returns true, it is guaranteed that a subsequent call
//               to load_shader() with the same shader name will
//               return a valid Shader pointer.
//////////////////////////////////////////////////////////////////// 1 8 filename 1 3881  
1859 0 0 7 1733 3851 0 0 536 ////////////////////////////////////////////////////////////////////
//     Function: ShaderPool::load_shader
//       Access: Public, Static
//  Description: Loads the given filename up into a shader, if it has
//               not already been loaded, and returns the new shader.
//               If a shader with the same filename was previously
//               loaded, returns that one instead.  If the shader
//               file cannot be found, returns NULL.
//////////////////////////////////////////////////////////////////// 1 8 filename 1 3881  
1860 0 0 4 1734 3642 0 0 432 ////////////////////////////////////////////////////////////////////
//     Function: ShaderPool::add_shader
//       Access: Public, Static
//  Description: Adds the indicated already-loaded shader to the
//               pool.  The shader will always replace any
//               previously-loaded shader in the pool that had the
//               same filename.
//////////////////////////////////////////////////////////////////// 2 8 filename 1 3881  6 shader 1 4098  
1861 0 0 4 1735 3642 0 0 549 ////////////////////////////////////////////////////////////////////
//     Function: ShaderPool::release_shader
//       Access: Public, Static
//  Description: Removes the indicated shader from the pool,
//               indicating it will never be loaded again; the shader
//               may then be freed.  If this function is never called,
//               a reference count will be maintained on every shader
//               every loaded, and shaders will never be freed.
//////////////////////////////////////////////////////////////////// 1 8 filename 1 3881  
1862 0 0 4 1736 3642 0 0 327 ////////////////////////////////////////////////////////////////////
//     Function: ShaderPool::release_all_shaders
//       Access: Public, Static
//  Description: Releases all shaders in the pool and restores the
//               pool to the empty state.
//////////////////////////////////////////////////////////////////// 0 
1863 0 0 6 1737 3611 0 0 473 ////////////////////////////////////////////////////////////////////
//     Function: ShaderPool::garbage_collect
//       Access: Public, Static
//  Description: Releases only those shaders in the pool that have a
//               reference count of exactly 1; i.e. only those
//               shaders that are not being used outside of the pool.
//               Returns the number of shaders released.
//////////////////////////////////////////////////////////////////// 0 
1864 0 0 4 1738 3642 0 0 316 ////////////////////////////////////////////////////////////////////
//     Function: ShaderPool::list_contents
//       Access: Public, Static
//  Description: Lists the contents of the shader pool to the
//               indicated output stream.
//////////////////////////////////////////////////////////////////// 1 3 out 1 3646  
1865 0 0 4 1739 3642 0 0 311 ////////////////////////////////////////////////////////////////////
//     Function: ShaderPool::write
//       Access: Published, Static
//  Description: Lists the contents of the shader pool to the
//               indicated output stream.
//////////////////////////////////////////////////////////////////// 1 3 out 1 3646  
1866 0 0 7 1657 3839 2604 0 0 1 4 data 1 3687  
1867 0 0 7 1658 3839 2604 0 0 2 9 unpickler 1 3643  4 data 1 3687  
625
3475 14 TransformState 0 75777 14 TransformState 14 TransformState 0 0 0 0 0 0 97 1868 1869 1870 1871 1872 1873 1874 1875 1876 1877 1878 1879 1880 1881 1882 1883 1884 1885 1886 1887 1888 1889 1890 1891 1892 1893 1894 1895 1896 1897 1898 1899 1900 1901 1902 1903 1904 1905 1906 1907 1908 1909 1910 1911 1912 1913 1914 1915 1916 1917 1918 1919 1920 1921 1922 1923 1924 1925 1926 1927 1928 1929 1930 1931 1932 1933 1934 1935 1936 1937 1938 1939 1940 1941 1942 1943 1944 1945 1946 1947 1948 1949 1950 1951 1952 1953 1954 1955 1956 1957 1958 1959 1960 1961 1962 1963 1964 0 0 1 0 3476 0 0 0 0 1138
////////////////////////////////////////////////////////////////////
//       Class : TransformState
// Description : Indicates a coordinate-system transform on vertices.
//               TransformStates are the primary means for storing
//               transformations on the scene graph.
//
//               Transforms may be specified in one of two ways:
//               componentwise, with a pos-hpr-scale, or with an
//               arbitrary transform matrix.  If you specify a
//               transform componentwise, it will remember its
//               original components.
//
//               TransformState objects are managed very much like
//               RenderState objects.  They are immutable and
//               reference-counted automatically.
//
//               You should not attempt to create or modify a
//               TransformState object directly.  Instead, call one of
//               the make() functions to create one for you.  And
//               instead of modifying a TransformState object, create a
//               new one.
////////////////////////////////////////////////////////////////////

3476 24 NodeCachedReferenceCount 0 2049 24 NodeCachedReferenceCount 24 NodeCachedReferenceCount 0 0 0 0 0 0 0 0 0 0 0 0 2143
////////////////////////////////////////////////////////////////////
//       Class : NodeCachedReferenceCount
// Description : This class further specializes
//               CachedTypedWritableReferenceCount to also add a
//               node_ref_count, for the purposes of counting the
//               number of times the object is referenced by a "node",
//               presumably a PandaNode.
//
//               This essentially combines the functionality of
//               NodeReferenceCount and
//               CachedTypedWritableReferenceCount, so that a
//               derivative of this object actually has three
//               counters: the standard reference count, the "cache"
//               reference count, and the "node" reference count.
//               Rather than multiply inheriting from the two
//               reference count classes, we inherit only from
//               CachedTypedWritableReferenceCount and simply
//               duplicate the functionality of NodeReferenceCount, to
//               avoid all of the problems associated with multiple
//               inheritance.
//
//               The intended design is to use this as a base class
//               for RenderState and TransformState, both of which are
//               held by PandaNodes, and also have caches which are
//               independently maintained.  By keeping track of how
//               many nodes hold a pointer to a particular object, we
//               can classify each object into node-referenced,
//               cache-referenced, or other, which is primarily useful
//               for PStats reporting.
//
//               As with CachedTypedWritableReferenceCount's
//               cache_ref() and cache_unref(), the new methods
//               node_ref() and node_unref() automatically increment
//               and decrement the primary reference count as well.
//               In this case, however, there does exist a
//               NodePointerTo<> class to maintain the node_ref
//               counters automatically.
////////////////////////////////////////////////////////////////////

3477 20 RenderAttribRegistry 0 43009 20 RenderAttribRegistry 20 RenderAttribRegistry 0 0 0 0 0 0 11 1965 1966 1967 1968 1969 1970 1971 1972 1973 1974 1975 0 0 0 0 0 439
////////////////////////////////////////////////////////////////////
//       Class : RenderAttribRegistry
// Description : This class is used to associate each RenderAttrib
//               with a different slot index at runtime, so we can
//               store a list of RenderAttribs in the RenderState
//               object, and very quickly look them up by type.
////////////////////////////////////////////////////////////////////

3478 12 RenderAttrib 0 75777 12 RenderAttrib 12 RenderAttrib 0 0 0 0 0 0 15 1976 1977 1978 1979 1980 1981 1982 1983 1984 1985 1986 1987 1988 1989 1990 0 0 1 0 3479 0 0 0 2 3480 3481 1564
////////////////////////////////////////////////////////////////////
//       Class : RenderAttrib
// Description : This is the base class for a number of render
//               attributes (other than transform) that may be set on
//               scene graph nodes to control the appearance of
//               geometry.  This includes TextureAttrib, ColorAttrib,
//               etc.
//
//               RenderAttrib represents render attributes that always
//               propagate down to the leaves without regard to the
//               particular node they are assigned to.  A RenderAttrib
//               will have the same effect on a leaf node whether it
//               is assigned to the graph at the leaf or several nodes
//               above.  This is different from RenderEffect, which
//               represents a particular render property that is
//               applied immediately to the node on which it is
//               encountered, like billboarding or decaling.
//
//               You should not attempt to create or modify a
//               RenderAttrib directly; instead, use the make() method
//               of the appropriate kind of attrib you want.  This
//               will allocate and return a new RenderAttrib of the
//               appropriate type, and it may share pointers if
//               possible.  Do not modify the new RenderAttrib if you
//               wish to change its properties; instead, create a new
//               one.
////////////////////////////////////////////////////////////////////

3479 27 TypedWritableReferenceCount 0 2049 27 TypedWritableReferenceCount 27 TypedWritableReferenceCount 0 0 0 0 0 0 0 0 0 0 0 0 722
////////////////////////////////////////////////////////////////////
//       Class : TypedWritableReferenceCount
// Description : A base class for things which need to inherit from
//               both TypedWritable and from ReferenceCount.  It's
//               convenient to define this intermediate base class
//               instead of multiply inheriting from the two classes
//               each time they are needed, so that we can sensibly
//               pass around pointers to things which are both
//               TypedWritables and ReferenceCounters.
//               
//               See also TypedObject for detailed instructions.
////////////////////////////////////////////////////////////////////

3480 16 PandaCompareFunc 0 794624 30 RenderAttrib::PandaCompareFunc 30 RenderAttrib::PandaCompareFunc 3478 0 0 0 0 0 0 0 0 0 9 6 M_none 20 RenderAttrib::M_none 36
// alpha-test disabled (always-draw)
0 7 M_never 21 RenderAttrib::M_never 14
// Never draw.
1 6 M_less 20 RenderAttrib::M_less 29
// incoming < reference_alpha
2 7 M_equal 21 RenderAttrib::M_equal 30
// incoming == reference_alpha
3 12 M_less_equal 26 RenderAttrib::M_less_equal 30
// incoming <= reference_alpha
4 9 M_greater 23 RenderAttrib::M_greater 29
// incoming > reference_alpha
5 11 M_not_equal 25 RenderAttrib::M_not_equal 30
// incoming != reference_alpha
6 15 M_greater_equal 29 RenderAttrib::M_greater_equal 30
// incoming >= reference_alpha
7 8 M_always 22 RenderAttrib::M_always 15
// Always draw.
8 0 44
// intentionally defined to match D3DCMPFUNC

3481 10 TexGenMode 0 794624 24 RenderAttrib::TexGenMode 24 RenderAttrib::TexGenMode 3478 0 0 0 0 0 0 0 0 0 12 5 M_off 19 RenderAttrib::M_off 0
0 16 M_eye_sphere_map 30 RenderAttrib::M_eye_sphere_map 213
// Sphere maps are classic static reflection maps.  They are
// supported on just about any hardware, and require a precomputed
// 360-degree fisheye image.  Sphere maps only make sense in eye
// coordinate space.
1 16 M_world_cube_map 30 RenderAttrib::M_world_cube_map 440
// Cube maps are a modern improvement on the sphere map; they
// don't suffer from any polar singularities, but they require six
// texture images.  They can also be generated dynamically for
// real-time reflections (see GraphicsOutput::make_cube_map()).
// Typically, a statically-generated cube map will be in eye
// space, while a dynamically-generated map will be in world
// space.
//
// Cube mapping is not supported on all hardware.
2 14 M_eye_cube_map 28 RenderAttrib::M_eye_cube_map 0
3 14 M_world_normal 28 RenderAttrib::M_world_normal 100
// Normal maps are most useful for applying diffuse lighting
// effects via a pregenerated cube map.
4 12 M_eye_normal 26 RenderAttrib::M_eye_normal 0
5 16 M_world_position 30 RenderAttrib::M_world_position 181
// Position maps convert XYZ coordinates directly to texture
// coordinates.  This is particularly useful for implementing
// projective texturing (see NodePath::project_texture()).
6 8 M_unused 22 RenderAttrib::M_unused 46
// formerly M_object_position, now deprecated.
7 14 M_eye_position 28 RenderAttrib::M_eye_position 0
8 14 M_point_sprite 28 RenderAttrib::M_point_sprite 687
// With M_point_sprite, texture coordinates will be generated for
// large points in the range (0,0) - (1,1) from upper-left to
// lower-right across the point's face.  Without this, each point
// will have just a single uniform texture coordinate value across
// its face.
//
// Unfortunately, the generated texture coordinates are inverted
// (upside-down) from Panda's usual convention, but this is what
// the graphics card manufacturers decided to use.  You could use
// a texture matrix to re-invert the texture, but that will
// probably force the sprites' vertices to be computed in the CPU.
// You'll have to paint your textures upside-down if you want true
// hardware sprites.
9 9 M_unused2 23 RenderAttrib::M_unused2 325
// M_light_vector generated special 3-d texture coordinates that
// represented the vector to a particular Light in the scene graph,
// expressed in each vertex's tangent space.  This has now been
// removed.  We need to reserve the slot in the enum, though, to
// make sure the following enum value still has the same value.
10 10 M_constant 24 RenderAttrib::M_constant 194
// M_constant generates the same fixed texture coordinates at each
// vertex.  Not terribly useful, of course, except for certain
// special effects involving moving a flat color over an object.
11 0 179
// This is the enumerated type for TexGenAttrib.  It is inherited
// into TexGenAttrib.  It is defined up at this level only to avoid
// circular dependencies in the header files.

3482 16 RenderModeAttrib 0 141313 16 RenderModeAttrib 16 RenderModeAttrib 0 0 0 0 2000 0 9 1991 1992 1993 1994 1995 1996 1997 1998 1999 0 0 1 0 3478 0 0 0 1 3483 228
////////////////////////////////////////////////////////////////////
//       Class : RenderModeAttrib
// Description : Specifies how polygons are to be drawn.
////////////////////////////////////////////////////////////////////

3483 4 Mode 0 794624 22 RenderModeAttrib::Mode 22 RenderModeAttrib::Mode 3482 0 0 0 0 0 0 0 0 0 6 11 M_unchanged 29 RenderModeAttrib::M_unchanged 0
0 8 M_filled 26 RenderModeAttrib::M_filled 27
// Normal, filled polygons.
1 11 M_wireframe 29 RenderModeAttrib::M_wireframe 47
// Wireframe polygons, possibly with thickness.
2 7 M_point 25 RenderModeAttrib::M_point 81
// Points at vertices only, possibly with thickness and/or
// perspective sizing.
3 13 M_filled_flat 31 RenderModeAttrib::M_filled_flat 152
// Filled polygons, without any particular emphasis on perspective
// correctness (a particularly useful designation for software
// rendering sprites).
4 18 M_filled_wireframe 36 RenderModeAttrib::M_filled_wireframe 93
// Filled polygons with wireframe rendered in front.
// The wireframe is given a solid color.
5 0 0

3484 15 TexMatrixAttrib 0 75777 15 TexMatrixAttrib 15 TexMatrixAttrib 0 0 0 0 0 0 14 2001 2002 2003 2004 2005 2006 2007 2008 2009 2010 2011 2012 2013 2014 1 4100 0 1 0 3478 0 0 0 0 265
////////////////////////////////////////////////////////////////////
//       Class : TexMatrixAttrib
// Description : Applies a transform matrix to UV's before they are
//               rendered.
////////////////////////////////////////////////////////////////////

3485 11 RenderState 0 75777 11 RenderState 11 RenderState 0 0 0 0 0 0 52 2015 2016 2017 2018 2019 2020 2021 2022 2023 2024 2025 2026 2027 2028 2029 2030 2031 2032 2033 2034 2035 2036 2037 2038 2039 2040 2041 2042 2043 2044 2045 2046 2047 2048 2049 2050 2051 2052 2053 2054 2055 2056 2057 2058 2059 2060 2061 2062 2063 2064 2065 2066 0 0 1 0 3476 0 0 0 0 621
////////////////////////////////////////////////////////////////////
//       Class : RenderState
// Description : This represents a unique collection of RenderAttrib
//               objects that correspond to a particular renderable
//               state.
//
//               You should not attempt to create or modify a
//               RenderState object directly.  Instead, call one of
//               the make() functions to create one for you.  And
//               instead of modifying a RenderState object, create a
//               new one.
////////////////////////////////////////////////////////////////////

3486 15 AlphaTestAttrib 0 141313 15 AlphaTestAttrib 15 AlphaTestAttrib 0 0 0 0 2073 0 6 2067 2068 2069 2070 2071 2072 0 0 1 0 3478 0 0 0 0 317
////////////////////////////////////////////////////////////////////
//       Class : AlphaTestAttrib
// Description : Enables or disables writing of pixel to framebuffer
//               based on its alpha value relative to a reference alpha value
////////////////////////////////////////////////////////////////////

3487 15 AntialiasAttrib 0 141313 15 AntialiasAttrib 15 AntialiasAttrib 0 0 0 0 2081 0 7 2074 2075 2076 2077 2078 2079 2080 0 0 1 0 3478 0 0 0 1 3488 291
////////////////////////////////////////////////////////////////////
//       Class : AntialiasAttrib
// Description : Specifies whether or how to enable antialiasing, if
//               supported by the backend renderer.
////////////////////////////////////////////////////////////////////

3488 4 Mode 0 794624 21 AntialiasAttrib::Mode 21 AntialiasAttrib::Mode 3487 0 0 0 0 0 0 0 0 0 10 6 M_none 23 AntialiasAttrib::M_none 0
0 7 M_point 24 AntialiasAttrib::M_point 0
1 6 M_line 23 AntialiasAttrib::M_line 0
2 9 M_polygon 26 AntialiasAttrib::M_polygon 0
4 13 M_multisample 30 AntialiasAttrib::M_multisample 0
8 6 M_auto 23 AntialiasAttrib::M_auto 0
31 11 M_type_mask 28 AntialiasAttrib::M_type_mask 0
31 8 M_faster 25 AntialiasAttrib::M_faster 51
// Extra add-on bits for performance/quality hints.
32 8 M_better 25 AntialiasAttrib::M_better 0
64 11 M_dont_care 28 AntialiasAttrib::M_dont_care 0
96 0 0

3489 12 RenderEffect 0 75777 12 RenderEffect 12 RenderEffect 0 0 0 0 0 0 7 2082 2083 2084 2085 2086 2087 2088 0 0 1 0 3479 0 0 0 0 1346
////////////////////////////////////////////////////////////////////
//       Class : RenderEffect
// Description : This is the base class for a number of special render
//               effects that may be set on scene graph nodes to
//               change the way they render.  This includes
//               BillboardEffect, DecalEffect, etc.
//
//               RenderEffect represents render properties that must
//               be applied as soon as they are encountered in the
//               scene graph, rather than propagating down to the
//               leaves.  This is different from RenderAttrib, which
//               represents properties like color and texture that
//               don't do anything until they propagate down to a
//               GeomNode.
//
//               You should not attempt to create or modify a
//               RenderEffect directly; instead, use the make() method
//               of the appropriate kind of effect you want.  This
//               will allocate and return a new RenderEffect of the
//               appropriate type, and it may share pointers if
//               possible.  Do not modify the new RenderEffect if you
//               wish to change its properties; instead, create a new
//               one.
////////////////////////////////////////////////////////////////////

3490 13 RenderEffects 0 75777 13 RenderEffects 13 RenderEffects 0 0 0 0 0 0 15 2089 2090 2091 2092 2093 2094 2095 2096 2097 2098 2099 2100 2101 2102 2103 0 0 1 0 3479 0 0 0 0 627
////////////////////////////////////////////////////////////////////
//       Class : RenderEffects
// Description : This represents a unique collection of RenderEffect
//               objects that correspond to a particular renderable
//               state.
//
//               You should not attempt to create or modify a
//               RenderEffects object directly.  Instead, call one of
//               the make() functions to create one for you.  And
//               instead of modifying a RenderEffects object, create a
//               new one.
////////////////////////////////////////////////////////////////////

3491 9 PandaNode 0 26625 9 PandaNode 9 PandaNode 0 0 0 1 2110 2111 0 110 2112 2113 2114 2115 2116 2117 2118 2119 2120 2121 2122 2123 2124 2125 2126 2127 2128 2129 2130 2131 2132 2133 2134 2135 2136 2137 2138 2139 2140 2141 2142 2143 2144 2145 2146 2147 2148 2149 2150 2151 2152 2153 2154 2155 2156 2157 2158 2159 2160 2161 2162 2163 2164 2165 2166 2167 2168 2169 2170 2171 2172 2173 2174 2175 2176 2177 2178 2179 2180 2181 2182 2183 2184 2185 2186 2187 2188 2189 2190 2191 2192 2193 2194 2195 2196 2197 2198 2199 2200 2201 2202 2203 2204 2205 2206 2207 2208 2209 2210 2211 2212 2213 2214 2215 2216 2217 2218 2219 2220 2221 3 4101 4102 4103 0 3 3 3479 2104 2105 3 3492 2106 2107 3 3493 2108 2109 0 2 3494 3495 374
////////////////////////////////////////////////////////////////////
//       Class : PandaNode
// Description : A basic node of the scene graph or data graph.  This
//               is the base class of all specialized nodes, and also
//               serves as a generic node with no special properties.
////////////////////////////////////////////////////////////////////

3492 7 Namable 0 2049 7 Namable 7 Namable 0 0 0 0 0 0 0 0 0 0 0 0 324
////////////////////////////////////////////////////////////////////
//       Class : Namable
// Description : A base class for all things which can have a name.
//               The name is either empty or nonempty, but it is never
//               NULL.
////////////////////////////////////////////////////////////////////

3493 14 LinkedListNode 0 2049 14 LinkedListNode 14 LinkedListNode 0 0 0 0 0 0 0 0 0 0 0 0 762
////////////////////////////////////////////////////////////////////
//       Class : LinkedListNode
// Description : This just stores the pointers to implement a
//               doubly-linked list of some kind of object.  There are
//               occasions when a hand-rolled linked list is more
//               appropriate than an STL container.
//
//               Typically, each node of the linked list, as well as
//               the root of the list, will inherit from this class.
//
//               Note that this class is not inherently thread-safe;
//               derived classes are responsible for protecting any
//               calls into it within mutexes, if necessary.
////////////////////////////////////////////////////////////////////

3494 16 UnexpectedChange 0 794624 27 PandaNode::UnexpectedChange 27 PandaNode::UnexpectedChange 3491 0 0 0 0 0 0 0 0 0 5 10 UC_parents 21 PandaNode::UC_parents 0
1 11 UC_children 22 PandaNode::UC_children 0
2 12 UC_transform 23 PandaNode::UC_transform 0
4 8 UC_state 19 PandaNode::UC_state 0
8 12 UC_draw_mask 23 PandaNode::UC_draw_mask 0
16 0 0

3495 9 FancyBits 0 794624 20 PandaNode::FancyBits 20 PandaNode::FancyBits 3491 0 0 0 0 0 0 0 0 0 6 12 FB_transform 23 PandaNode::FB_transform 0
1 8 FB_state 19 PandaNode::FB_state 0
2 10 FB_effects 21 PandaNode::FB_effects 0
4 6 FB_tag 17 PandaNode::FB_tag 0
16 12 FB_draw_mask 23 PandaNode::FB_draw_mask 0
32 16 FB_cull_callback 27 PandaNode::FB_cull_callback 0
64 0 0

3496 18 TransparencyAttrib 0 141313 18 TransparencyAttrib 18 TransparencyAttrib 0 0 0 0 2227 0 5 2222 2223 2224 2225 2226 0 0 1 0 3478 0 0 0 1 3497 727
////////////////////////////////////////////////////////////////////
//       Class : TransparencyAttrib
// Description : This controls the enabling of transparency.  Simply
//               setting an alpha component to non-1 does not in
//               itself make an object transparent; you must also
//               enable transparency mode with a suitable
//               TransparencyAttrib.  Similarly, it is wasteful to
//               render an object with a TransparencyAttrib in
//               effect unless you actually want it to be at least
//               partially transparent (and it has alpha components
//               less than 1).
////////////////////////////////////////////////////////////////////

3497 4 Mode 0 794624 24 TransparencyAttrib::Mode 24 TransparencyAttrib::Mode 3496 0 0 0 0 0 0 0 0 0 7 6 M_none 26 TransparencyAttrib::M_none 19
// No transparency.
0 7 M_alpha 27 TransparencyAttrib::M_alpha 54
// Normal transparency, panda will sort back-to-front.
1 9 M_notused 29 TransparencyAttrib::M_notused 40
// Unused placeholder.  Do not use this.
2 13 M_multisample 33 TransparencyAttrib::M_multisample 48
// Uses ms buffer, alpha values modified to 1.0.
3 18 M_multisample_mask 38 TransparencyAttrib::M_multisample_mask 45
// Uses ms buffer, alpha values not modified.
4 8 M_binary 28 TransparencyAttrib::M_binary 40
// Only writes pixels with alpha >= 0.5.
5 6 M_dual 26 TransparencyAttrib::M_dual 53
// opaque parts first, then sorted transparent parts.
6 0 0

3498 11 ShaderInput 0 75777 11 ShaderInput 11 ShaderInput 0 0 0 1 2229 0 0 10 2228 2230 2231 2232 2233 2234 2235 2236 2237 2238 0 0 1 0 3479 0 0 0 2 3499 3500 331
////////////////////////////////////////////////////////////////////
//       Class : ShaderInput
// Description : This is a small container class that can hold any
//               one of the value types that can be passed as input
//               to a shader.
////////////////////////////////////////////////////////////////////

3499 11 AccessFlags 0 794624 24 ShaderInput::AccessFlags 24 ShaderInput::AccessFlags 3498 0 0 0 0 0 0 0 0 0 3 6 A_read 19 ShaderInput::A_read 0
1 7 A_write 20 ShaderInput::A_write 0
2 9 A_layered 22 ShaderInput::A_layered 0
4 0 36
// Used when binding texture images.

3500 15 ShaderInputType 0 794624 28 ShaderInput::ShaderInputType 28 ShaderInput::ShaderInputType 3498 0 0 0 0 0 0 0 0 0 8 9 M_invalid 22 ShaderInput::M_invalid 0
0 9 M_texture 22 ShaderInput::M_texture 0
1 10 M_nodepath 23 ShaderInput::M_nodepath 0
2 8 M_vector 21 ShaderInput::M_vector 0
3 9 M_numeric 22 ShaderInput::M_numeric 0
4 17 M_texture_sampler 30 ShaderInput::M_texture_sampler 0
5 7 M_param 20 ShaderInput::M_param 0
6 15 M_texture_image 28 ShaderInput::M_texture_image 0
7 0 0

3501 22 TextureStageCollection 0 26625 22 TextureStageCollection 22 TextureStageCollection 0 0 0 1 2239 2241 0 18 2240 2242 2243 2244 2245 2246 2247 2248 2249 2250 2251 2252 2253 2254 2255 2256 2257 2258 1 4104 0 0 0 0 195
////////////////////////////////////////////////////////////////////
//       Class : TextureStageCollection
// Description : 
////////////////////////////////////////////////////////////////////

3502 8 NodePath 0 141313 8 NodePath 8 NodePath 0 0 0 1 2259 2604 0 343 2260 2261 2262 2263 2264 2265 2266 2267 2268 2269 2270 2271 2272 2274 2275 2276 2277 2278 2279 2280 2281 2282 2283 2284 2285 2286 2287 2288 2289 2290 2291 2292 2293 2294 2295 2296 2297 2298 2299 2300 2301 2302 2303 2304 2305 2306 2307 2308 2309 2310 2311 2312 2313 2314 2315 2316 2317 2318 2319 2320 2321 2322 2323 2324 2325 2326 2327 2328 2329 2330 2331 2332 2333 2334 2335 2336 2337 2338 2339 2340 2341 2342 2343 2344 2345 2346 2347 2348 2349 2350 2351 2352 2353 2354 2355 2356 2357 2358 2359 2360 2361 2362 2363 2364 2365 2366 2367 2368 2369 2370 2371 2372 2373 2374 2375 2376 2377 2378 2379 2380 2381 2382 2383 2384 2385 2386 2387 2388 2389 2390 2391 2392 2393 2394 2395 2396 2397 2398 2399 2400 2401 2402 2403 2404 2405 2406 2407 2408 2409 2410 2411 2412 2413 2414 2415 2416 2417 2418 2419 2420 2421 2422 2423 2424 2425 2426 2427 2428 2429 2430 2431 2432 2433 2434 2435 2436 2437 2438 2439 2440 2441 2442 2443 2444 2445 2446 2447 2448 2449 2450 2451 2452 2453 2454 2455 2456 2457 2458 2459 2460 2461 2462 2463 2464 2465 2466 2467 2468 2469 2470 2471 2472 2473 2474 2475 2476 2477 2478 2479 2480 2481 2482 2483 2484 2485 2486 2487 2488 2489 2490 2491 2492 2493 2494 2495 2496 2497 2498 2499 2500 2501 2502 2503 2504 2505 2506 2507 2508 2509 2510 2511 2512 2513 2514 2515 2516 2517 2518 2519 2520 2521 2522 2523 2524 2525 2526 2527 2528 2529 2530 2531 2532 2533 2534 2535 2536 2537 2538 2539 2540 2541 2542 2543 2544 2545 2546 2547 2548 2549 2550 2551 2552 2553 2554 2555 2556 2557 2558 2559 2560 2561 2562 2563 2564 2565 2566 2567 2568 2569 2570 2571 2572 2573 2574 2575 2576 2577 2578 2579 2580 2581 2582 2583 2584 2585 2586 2587 2588 2589 2590 2591 2592 2593 2594 2595 2596 2597 2598 2599 2600 2601 2602 2603 2 4105 4106 1 2273 0 0 1 3503 1139
////////////////////////////////////////////////////////////////////
//       Class : NodePath
// Description : NodePath is the fundamental system for disambiguating
//               instances, and also provides a higher-level interface
//               for manipulating the scene graph.
//
//               A NodePath is a list of connected nodes from the root
//               of the graph to any sub-node.  Each NodePath
//               therefore uniquely describes one instance of a node.
//
//               NodePaths themselves are lightweight objects that may
//               easily be copied and passed by value.  Their data is
//               stored as a series of NodePathComponents that are
//               stored on the nodes.  Holding a NodePath will keep a
//               reference count to all the nodes in the path.
//               However, if any node in the path is removed or
//               reparented (perhaps through a different NodePath),
//               the NodePath will automatically be updated to reflect
//               the changes.
////////////////////////////////////////////////////////////////////

3503 9 ErrorType 0 794624 19 NodePath::ErrorType 19 NodePath::ErrorType 3502 0 0 0 0 0 0 0 0 0 4 5 ET_ok 15 NodePath::ET_ok 49
// i.e. not empty, or never assigned to anything.
0 12 ET_not_found 22 NodePath::ET_not_found 53
// returned from a failed find() or similar function.
1 10 ET_removed 20 NodePath::ET_removed 56
// remove_node() was previously called on this NodePath.
2 7 ET_fail 17 NodePath::ET_fail 45
// general failure return from some function.
3 0 109
// This enumeration is returned by get_error_type() for an empty
// NodePath to report the reason it's empty.

3504 18 AttribNodeRegistry 0 141313 18 AttribNodeRegistry 18 AttribNodeRegistry 0 0 0 0 2617 0 12 2605 2606 2607 2608 2609 2610 2611 2612 2613 2614 2615 2616 1 4107 0 0 0 0 879
////////////////////////////////////////////////////////////////////
//       Class : AttribNodeRegistry
// Description : This global object records NodePaths that are
//               referenced by scene graph attribs, such as
//               ClipPlaneAttribs and LightAttribs.
//
//               Its primary purpose is to unify attribs that are
//               loaded in from bam files.  Attrib nodes are
//               identified by name and type; when a bam file that
//               contains references to some attrib nodes is loaded,
//               those nodes are first looked up here in the
//               AttribNodeRegistry.  If there is a match (by name and
//               node type), the identified node is used instead of
//               the node referenced within the bam file itself.
////////////////////////////////////////////////////////////////////

3505 17 AudioVolumeAttrib 0 141313 17 AudioVolumeAttrib 17 AudioVolumeAttrib 0 0 0 0 2628 0 10 2618 2619 2620 2621 2622 2623 2624 2625 2626 2627 0 0 1 0 3478 0 0 0 0 280
////////////////////////////////////////////////////////////////////
//       Class : AudioVolumeAttrib
// Description : Applies a scale to audio volume for positional sounds
//               in the scene graph.
////////////////////////////////////////////////////////////////////

3506 17 AuxBitplaneAttrib 0 141313 17 AuxBitplaneAttrib 17 AuxBitplaneAttrib 0 0 0 0 2634 0 5 2629 2630 2631 2632 2633 0 0 1 0 3478 0 0 0 1 3507 1769
////////////////////////////////////////////////////////////////////
//       Class : AuxBitplaneAttrib
// Description : Modern frame buffers can have 'aux' bitplanes, which
//               are additional bitplanes above and beyond the
//               standard depth and color.  This attrib controls what
//               gets rendered into those additional bitplanes.  It
//               can also affect what goes into the alpha channel
//               of the primary color buffer.
//
//               ABO_glow: copy the glow map into the alpha channel
//               of the primary frame buffer.  If there is no glow
//               map, set it to zero.  Caveat: it is not
//               possible to write glow or depth values to the
//               framebuffer alpha channel at the same time as using
//               alpha blending or alpha testing.  Any attempt to use
//               transparency, blending, or alpha testing will cause
//               this flag to be overridden.
//
//               ABO_aux_normal: put the camera-space normal into
//               the into the R,G components of the first auxiliary
//               bitplane.
//
//               ABO_aux_modelz: put the clip-space Z coordinate of
//               the center of the model (after perspective divide)
//               into the B channel of the first auxiliary bitplane.
//
//               ABO_aux_glow: put a copy of the glow map into the
//               alpha channel of the first auxiliary bitplane.
//               If there is no glow map, set it to zero.
//
//               AuxBitplaneAttrib is relevant only when shader
//               generation is enabled. Otherwise, it has no effect.
//
////////////////////////////////////////////////////////////////////

3507 17 AuxBitplaneOutput 0 794624 36 AuxBitplaneAttrib::AuxBitplaneOutput 36 AuxBitplaneAttrib::AuxBitplaneOutput 3506 0 0 0 0 0 0 0 0 0 3 8 ABO_glow 27 AuxBitplaneAttrib::ABO_glow 0
1 14 ABO_aux_normal 33 AuxBitplaneAttrib::ABO_aux_normal 0
2 12 ABO_aux_glow 31 AuxBitplaneAttrib::ABO_aux_glow 0
4 0 0

3508 12 AuxSceneData 0 141313 12 AuxSceneData 12 AuxSceneData 0 0 0 0 2643 0 8 2635 2636 2637 2638 2639 2640 2641 2642 0 0 1 0 3509 0 0 0 0 655
////////////////////////////////////////////////////////////////////
//       Class : AuxSceneData
// Description : This is a base class for a generic data structure
//               that can be attached per-instance to the camera, to
//               store per-instance data that must be preserved over
//               multiple frames.
//
//               In particular, this is used to implement the
//               FadeLODNode, which must remember during traversal at
//               what point it is in the fade, separately for each
//               instance and for each camera.
////////////////////////////////////////////////////////////////////

3509 19 TypedReferenceCount 0 2049 19 TypedReferenceCount 19 TypedReferenceCount 0 0 0 0 0 0 0 0 0 0 0 0 710
////////////////////////////////////////////////////////////////////
//       Class : TypedReferenceCount
// Description : A base class for things which need to inherit from
//               both TypedObject and from ReferenceCount.  It's
//               convenient to define this intermediate base class
//               instead of multiply inheriting from the two classes
//               each time they are needed, so that we can sensibly
//               pass around pointers to things which are both
//               TypedObjects and ReferenceCounters.
//               
//               See also TypedObject for detailed instructions.
////////////////////////////////////////////////////////////////////

3510 7 BamFile 0 26625 7 BamFile 7 BamFile 0 0 0 1 2644 2645 0 18 2646 2647 2648 2649 2650 2651 2652 2653 2654 2655 2656 2657 2658 2659 2660 2661 2662 2663 0 0 1 0 3511 0 0 0 0 889
////////////////////////////////////////////////////////////////////
//       Class : BamFile
// Description : The principle public interface to reading and writing
//               Bam disk files.  See also BamReader and BamWriter,
//               the more general implementation of this class.
//
//               Bam files are most often used to store scene graphs
//               or subgraphs, and by convention they are given
//               filenames ending in the extension ".bam" when they
//               are used for this purpose.  However, a Bam file may
//               store any arbitrary list of TypedWritable objects;
//               in this more general usage, they are given filenames
//               ending in ".boo" to differentiate them from the more
//               common scene graph files.
////////////////////////////////////////////////////////////////////

3511 8 BamEnums 0 2049 8 BamEnums 8 BamEnums 0 0 0 0 0 0 0 0 0 0 0 0 288
////////////////////////////////////////////////////////////////////
//       Class : BamEnums
// Description : This class exists just to provide scoping for the
//               enums shared by BamReader and BamWriter.
////////////////////////////////////////////////////////////////////

3512 15 BillboardEffect 0 141313 15 BillboardEffect 15 BillboardEffect 0 0 0 0 2676 0 12 2664 2665 2666 2667 2668 2669 2670 2671 2672 2673 2674 2675 0 0 1 0 3489 0 0 0 0 335
////////////////////////////////////////////////////////////////////
//       Class : BillboardEffect
// Description : Indicates that geometry at this node should
//               automatically rotate to face the camera, or any other
//               arbitrary node.
////////////////////////////////////////////////////////////////////

3513 8 LensNode 0 141313 8 LensNode 8 LensNode 0 0 0 1 2677 2689 0 11 2678 2679 2680 2681 2682 2683 2684 2685 2686 2687 2688 0 0 1 0 3491 0 0 0 0 396
////////////////////////////////////////////////////////////////////
//       Class : LensNode
// Description : A node that contains a Lens.  The most important
//               example of this kind of node is a Camera, but other
//               kinds of nodes also contain a lens (for instance, a
//               Spotlight).
////////////////////////////////////////////////////////////////////

3514 6 Camera 0 75777 6 Camera 6 Camera 0 0 0 1 2690 2689 0 30 2691 2692 2693 2694 2695 2696 2697 2698 2699 2700 2701 2702 2703 2704 2705 2706 2707 2708 2709 2710 2711 2712 2713 2714 2715 2716 2717 2718 2719 2720 1 4108 0 1 0 3513 0 0 0 0 320
////////////////////////////////////////////////////////////////////
//       Class : Camera
// Description : A node that can be positioned around in the scene
//               graph to represent a point of view for rendering a
//               scene.
////////////////////////////////////////////////////////////////////

3515 9 PlaneNode 0 141313 9 PlaneNode 9 PlaneNode 0 0 0 1 2721 2731 0 9 2722 2723 2724 2725 2726 2727 2728 2729 2730 0 0 1 0 3491 0 0 0 1 3516 429
////////////////////////////////////////////////////////////////////
//       Class : PlaneNode
// Description : A node that contains a plane.  This is most often
//               used as a clipping plane, but it can serve other
//               purposes as well; whenever a plane is needed to be
//               defined in some coordinate space in the world.
////////////////////////////////////////////////////////////////////

3516 10 ClipEffect 0 794624 21 PlaneNode::ClipEffect 21 PlaneNode::ClipEffect 3515 0 0 0 0 0 0 0 0 0 2 10 CE_visible 21 PlaneNode::CE_visible 0
1 12 CE_collision 23 PlaneNode::CE_collision 0
2 0 0

3517 15 ClipPlaneAttrib 0 141313 15 ClipPlaneAttrib 15 ClipPlaneAttrib 0 0 0 0 2756 0 24 2732 2733 2734 2735 2736 2737 2738 2739 2740 2741 2742 2743 2744 2745 2746 2747 2748 2749 2750 2751 2752 2753 2754 2755 2 4109 4110 0 1 0 3478 0 0 0 1 3518 496
////////////////////////////////////////////////////////////////////
//       Class : ClipPlaneAttrib
// Description : This functions similarly to a LightAttrib.  It
//               indicates the set of clipping planes that modify the
//               geometry at this level and below.  A ClipPlaneAttrib
//               can either add planes or remove planes from the total
//               set of clipping planes in effect.
////////////////////////////////////////////////////////////////////

3518 9 Operation 0 794624 26 ClipPlaneAttrib::Operation 26 ClipPlaneAttrib::Operation 3517 0 0 0 0 0 0 0 0 0 3 5 O_set 22 ClipPlaneAttrib::O_set 0
0 5 O_add 22 ClipPlaneAttrib::O_add 0
1 8 O_remove 25 ClipPlaneAttrib::O_remove 0
2 0 149
// This is the old, deprecated interface to ClipPlaneAttrib.  Do not
// use any of these methods for new code; these methods will be
// removed soon.

3519 11 ColorAttrib 0 141313 11 ColorAttrib 11 ColorAttrib 0 0 0 0 2765 0 8 2757 2758 2759 2760 2761 2762 2763 2764 0 0 1 0 3478 0 0 0 1 3520 263
////////////////////////////////////////////////////////////////////
//       Class : ColorAttrib
// Description : Indicates what color should be applied to renderable
//               geometry.
////////////////////////////////////////////////////////////////////

3520 4 Type 0 794624 17 ColorAttrib::Type 17 ColorAttrib::Type 3519 0 0 0 0 0 0 0 0 0 3 8 T_vertex 21 ColorAttrib::T_vertex 0
0 6 T_flat 19 ColorAttrib::T_flat 0
1 5 T_off 18 ColorAttrib::T_off 0
2 0 0

3521 16 ColorBlendAttrib 0 141313 16 ColorBlendAttrib 16 ColorBlendAttrib 0 0 0 0 2777 0 11 2766 2767 2768 2769 2770 2771 2772 2773 2774 2775 2776 0 0 1 0 3478 0 0 0 2 3522 3523 368
////////////////////////////////////////////////////////////////////
//       Class : ColorBlendAttrib
// Description : This specifies how colors are blended into the frame
//               buffer, for special effects.  This overrides
//               transparency if transparency is also specified.
////////////////////////////////////////////////////////////////////

3522 4 Mode 0 794624 22 ColorBlendAttrib::Mode 22 ColorBlendAttrib::Mode 3521 0 0 0 0 0 0 0 0 0 6 6 M_none 24 ColorBlendAttrib::M_none 23
// Blending is disabled
0 5 M_add 23 ColorBlendAttrib::M_add 41
// incoming color * A + fbuffer color * B
1 10 M_subtract 28 ColorBlendAttrib::M_subtract 41
// incoming color * A - fbuffer color * B
2 14 M_inv_subtract 32 ColorBlendAttrib::M_inv_subtract 41
// fbuffer color * B - incoming color * A
3 5 M_min 23 ColorBlendAttrib::M_min 37
// min(incoming color, fbuffer color)
4 5 M_max 23 ColorBlendAttrib::M_max 37
// max(incoming color, fbuffer color)
5 0 0

3523 7 Operand 0 794624 25 ColorBlendAttrib::Operand 25 ColorBlendAttrib::Operand 3521 0 0 0 0 0 0 0 0 0 19 6 O_zero 24 ColorBlendAttrib::O_zero 0
0 5 O_one 23 ColorBlendAttrib::O_one 0
1 16 O_incoming_color 34 ColorBlendAttrib::O_incoming_color 0
2 26 O_one_minus_incoming_color 44 ColorBlendAttrib::O_one_minus_incoming_color 0
3 15 O_fbuffer_color 33 ColorBlendAttrib::O_fbuffer_color 0
4 25 O_one_minus_fbuffer_color 43 ColorBlendAttrib::O_one_minus_fbuffer_color 0
5 16 O_incoming_alpha 34 ColorBlendAttrib::O_incoming_alpha 0
6 26 O_one_minus_incoming_alpha 44 ColorBlendAttrib::O_one_minus_incoming_alpha 0
7 15 O_fbuffer_alpha 33 ColorBlendAttrib::O_fbuffer_alpha 0
8 25 O_one_minus_fbuffer_alpha 43 ColorBlendAttrib::O_one_minus_fbuffer_alpha 0
9 16 O_constant_color 34 ColorBlendAttrib::O_constant_color 0
10 26 O_one_minus_constant_color 44 ColorBlendAttrib::O_one_minus_constant_color 0
11 16 O_constant_alpha 34 ColorBlendAttrib::O_constant_alpha 0
12 26 O_one_minus_constant_alpha 44 ColorBlendAttrib::O_one_minus_constant_alpha 0
13 25 O_incoming_color_saturate 43 ColorBlendAttrib::O_incoming_color_saturate 27
// valid only for operand a
14 13 O_color_scale 31 ColorBlendAttrib::O_color_scale 333
// If you set either of the operands to any of the below, the
// blend color is taken from the current ColorScaleAttrib.  This
// also inhibits the normal behavior of the ColorScaleAttrib; it
// no longer directly scales the vertex colors, on the assumption
// that you will instead take care of the scale here, in the blend
// mode.
15 23 O_one_minus_color_scale 41 ColorBlendAttrib::O_one_minus_color_scale 0
16 13 O_alpha_scale 31 ColorBlendAttrib::O_alpha_scale 0
17 23 O_one_minus_alpha_scale 41 ColorBlendAttrib::O_one_minus_alpha_scale 0
18 0 0

3524 16 ColorScaleAttrib 0 141313 16 ColorScaleAttrib 16 ColorScaleAttrib 0 0 0 0 2791 0 13 2778 2779 2780 2781 2782 2783 2784 2785 2786 2787 2788 2789 2790 0 0 1 0 3478 0 0 0 0 267
////////////////////////////////////////////////////////////////////
//       Class : ColorScaleAttrib
// Description : Applies a scale to colors in the scene graph and on
//               vertices.
////////////////////////////////////////////////////////////////////

3525 16 ColorWriteAttrib 0 141313 16 ColorWriteAttrib 16 ColorWriteAttrib 0 0 0 0 2797 0 5 2792 2793 2794 2795 2796 0 0 1 0 3478 0 0 0 1 3526 431
////////////////////////////////////////////////////////////////////
//       Class : ColorWriteAttrib
// Description : Enables or disables writing to the color buffer.
//               This is primarily useful for certain special effects
//               in which it is important to write to the depth buffer
//               without affecting the color buffer.
////////////////////////////////////////////////////////////////////

3526 8 Channels 0 794624 26 ColorWriteAttrib::Channels 26 ColorWriteAttrib::Channels 3525 0 0 0 0 0 0 0 0 0 7 5 C_off 23 ColorWriteAttrib::C_off 110
// By coincidence, these bits are the same as those for
// D3DCOLORWRITEENABLE_RED, _GREEN, _BLUE, and _ALPHA.
0 5 C_red 23 ColorWriteAttrib::C_red 0
1 7 C_green 25 ColorWriteAttrib::C_green 0
2 6 C_blue 24 ColorWriteAttrib::C_blue 0
4 5 C_rgb 23 ColorWriteAttrib::C_rgb 30
// == C_red | C_green | C_blue
7 7 C_alpha 25 ColorWriteAttrib::C_alpha 0
8 5 C_all 23 ColorWriteAttrib::C_all 0
15 0 0

3527 13 CompassEffect 0 141313 13 CompassEffect 13 CompassEffect 0 0 0 0 2802 0 4 2798 2799 2800 2801 0 0 1 0 3489 0 0 0 1 3528 1758
////////////////////////////////////////////////////////////////////
//       Class : CompassEffect
// Description : A CompassEffect causes a node to inherit its rotation
//               (or pos or scale, if specified) from some other
//               reference node in the graph, or more often from the
//               root.
//
//               In its purest form, a CompassEffect is used to keep
//               the node's rotation fixed relative to the top of the
//               scene graph, despite other transforms that may exist
//               above the node.  Hence the name: the node behaves
//               like a magnetic compass, always pointing in the same
//               direction.
//
//               As an couple of generalizing extensions, the
//               CompassEffect may also be set up to always orient its
//               node according to some other reference node than the
//               root of the scene graph.  Furthermore, it may
//               optionally adjust any of pos, rotation, or scale,
//               instead of necessarily rotation; and it may adjust
//               individual pos and scale components.  (Rotation may
//               not be adjusted on an individual component basis;
//               that's just asking for trouble.)
//
//               Be careful when using the pos and scale modes.  In
//               these modes, it's possible for the CompassEffect to
//               move its node far from its normal bounding volume,
//               causing culling to fail.  If this is an issue, you
//               may need to explicitly set a large (or infinite)
//               bounding volume on the effect node.
////////////////////////////////////////////////////////////////////

3528 10 Properties 0 794624 25 CompassEffect::Properties 25 CompassEffect::Properties 3527 0 0 0 0 0 0 0 0 0 10 3 P_x 18 CompassEffect::P_x 0
1 3 P_y 18 CompassEffect::P_y 0
2 3 P_z 18 CompassEffect::P_z 0
4 5 P_pos 20 CompassEffect::P_pos 0
7 5 P_rot 20 CompassEffect::P_rot 0
8 4 P_sx 19 CompassEffect::P_sx 0
16 4 P_sy 19 CompassEffect::P_sy 0
32 4 P_sz 19 CompassEffect::P_sz 0
64 7 P_scale 22 CompassEffect::P_scale 0
112 5 P_all 20 CompassEffect::P_all 0
127 0 0

3529 12 CullBinEnums 0 141313 12 CullBinEnums 12 CullBinEnums 0 0 0 0 2803 0 0 0 0 0 0 1 3530 280
////////////////////////////////////////////////////////////////////
//       Class : CullBinEnums
// Description : Provides scoping for the enumerated type shared by
//               CullBin and CullBinManager.
////////////////////////////////////////////////////////////////////

3530 7 BinType 0 794624 21 CullBinEnums::BinType 21 CullBinEnums::BinType 3529 0 0 0 0 0 0 0 0 0 6 10 BT_invalid 24 CullBinEnums::BT_invalid 0
0 11 BT_unsorted 25 CullBinEnums::BT_unsorted 0
1 15 BT_state_sorted 29 CullBinEnums::BT_state_sorted 0
2 16 BT_back_to_front 30 CullBinEnums::BT_back_to_front 0
3 16 BT_front_to_back 30 CullBinEnums::BT_front_to_back 0
4 8 BT_fixed 22 CullBinEnums::BT_fixed 0
5 0 0

3531 13 CullBinAttrib 0 141313 13 CullBinAttrib 13 CullBinAttrib 0 0 0 0 2810 0 6 2804 2805 2806 2807 2808 2809 0 0 1 0 3478 0 0 0 0 336
////////////////////////////////////////////////////////////////////
//       Class : CullBinAttrib
// Description : Assigns geometry to a particular bin by name.  The
//               bins must be created separately via the
//               CullBinManager interface.
////////////////////////////////////////////////////////////////////

3532 14 CullBinManager 0 43009 14 CullBinManager 14 CullBinManager 0 0 0 0 0 0 18 2811 2812 2813 2814 2815 2816 2817 2818 2819 2820 2821 2822 2823 2824 2825 2826 2827 2828 1 4111 0 1 0 3529 0 0 0 0 289
////////////////////////////////////////////////////////////////////
//       Class : CullBinManager
// Description : This is a global object that maintains the collection
//               of named CullBins in the world.
////////////////////////////////////////////////////////////////////

3533 14 CullFaceAttrib 0 141313 14 CullFaceAttrib 14 CullFaceAttrib 0 0 0 0 2837 0 8 2829 2830 2831 2832 2833 2834 2835 2836 0 0 1 0 3478 0 0 0 1 3534 274
////////////////////////////////////////////////////////////////////
//       Class : CullFaceAttrib
// Description : Indicates which faces should be culled based on their
//               vertex ordering.
////////////////////////////////////////////////////////////////////

3534 4 Mode 0 794624 20 CullFaceAttrib::Mode 20 CullFaceAttrib::Mode 3533 0 0 0 0 0 0 0 0 0 4 11 M_cull_none 27 CullFaceAttrib::M_cull_none 19
// Cull no polygons
0 16 M_cull_clockwise 32 CullFaceAttrib::M_cull_clockwise 35
// Cull clockwise-oriented polygons
1 24 M_cull_counter_clockwise 40 CullFaceAttrib::M_cull_counter_clockwise 43
// Cull counter-clockwise-oriented polygons
2 16 M_cull_unchanged 32 CullFaceAttrib::M_cull_unchanged 39
// Do not change existing cull behavior
3 0 0

3535 8 GeomNode 0 75777 8 GeomNode 8 GeomNode 0 0 0 1 2838 2111 0 19 2839 2840 2841 2842 2843 2844 2845 2846 2847 2848 2849 2850 2851 2852 2853 2854 2855 2856 2857 3 4112 4113 4114 0 1 0 3491 0 0 0 0 423
////////////////////////////////////////////////////////////////////
//       Class : GeomNode
// Description : A node that holds Geom objects, renderable pieces of
//               geometry.  This is the primary kind of leaf node in
//               the scene graph; almost all visible objects will be
//               contained in a GeomNode somewhere.
////////////////////////////////////////////////////////////////////

3536 17 CullTraverserData 0 26625 17 CullTraverserData 17 CullTraverserData 0 0 0 0 2858 0 7 2859 2860 2861 2862 2863 2864 2865 0 0 0 0 0 778
////////////////////////////////////////////////////////////////////
//       Class : CullTraverserData
// Description : This collects together the pieces of data that are
//               accumulated for each node while walking the scene
//               graph during the cull traversal.
//
//               Having this as a separate object simplifies the
//               parameter list to CullTraverser::r_traverse(), as
//               well as to other functions like
//               PandaNode::cull_callback().  It also makes it easier
//               to add cull parameters, and provides a place to
//               abstract out some of the cull behavior (like
//               view-frustum culling).
////////////////////////////////////////////////////////////////////

3537 10 SceneSetup 0 141313 10 SceneSetup 10 SceneSetup 0 0 0 0 2894 0 28 2866 2867 2868 2869 2870 2871 2872 2873 2874 2875 2876 2877 2878 2879 2880 2881 2882 2883 2884 2885 2886 2887 2888 2889 2890 2891 2892 2893 0 0 1 0 3509 0 0 0 0 331
////////////////////////////////////////////////////////////////////
//       Class : SceneSetup
// Description : This object holds the camera position, etc., and
//               other general setup information for rendering a
//               particular scene.
////////////////////////////////////////////////////////////////////

3538 3 Fog 0 75777 3 Fog 3 Fog 0 0 0 1 2895 2111 0 13 2896 2897 2898 2899 2900 2901 2902 2903 2904 2905 2906 2907 2908 0 0 1 0 3491 0 0 0 1 3539 1150
////////////////////////////////////////////////////////////////////
//       Class : Fog
// Description : Specifies how atmospheric fog effects are applied to
//               geometry.  The Fog object is now a PandaNode, which
//               means it can be used similarly to a Light to define
//               effects relative to a particular coordinate system
//               within the scene graph.
//
//               In exponential mode, the fog effects are always
//               camera-relative, and it does not matter where the Fog
//               node is parented.  However, in linear mode, the onset
//               and opaque distances are defined as offsets along the
//               local forward axis (e.g. the Y axis).  This allows
//               the fog effect to be localized to a particular region
//               in space, rather than always camera-relative.  If the
//               fog object is not parented to any node, it is used to
//               generate traditonal camera-relative fog, as if it
//               were parented to the camera.
////////////////////////////////////////////////////////////////////

3539 4 Mode 0 794624 9 Fog::Mode 9 Fog::Mode 3538 0 0 0 0 0 0 0 0 0 3 8 M_linear 13 Fog::M_linear 32
// f = (end - z) / (end - start)
0 13 M_exponential 18 Fog::M_exponential 23
// f = e^(-density * z)
1 21 M_exponential_squared 26 Fog::M_exponential_squared 27
// f = e^((-density * z)^2)
2 0 0

3540 9 FogAttrib 0 141313 9 FogAttrib 9 FogAttrib 0 0 0 0 2916 0 7 2909 2910 2911 2912 2913 2914 2915 0 0 1 0 3478 0 0 0 0 235
////////////////////////////////////////////////////////////////////
//       Class : FogAttrib
// Description : Applies a Fog to the geometry at and below this node.
////////////////////////////////////////////////////////////////////

3541 13 CullTraverser 0 141313 13 CullTraverser 13 CullTraverser 0 0 0 1 2917 2943 0 25 2918 2919 2920 2921 2922 2923 2924 2925 2926 2927 2928 2929 2930 2931 2932 2933 2934 2935 2936 2937 2938 2939 2940 2941 2942 0 0 1 0 3509 0 0 0 0 512
////////////////////////////////////////////////////////////////////
//       Class : CullTraverser
// Description : This object performs a depth-first traversal of the
//               scene graph, with optional view-frustum culling,
//               collecting CullState and searching for GeomNodes.
//               Each renderable Geom encountered is passed along with
//               its associated RenderState to the CullHandler object.
////////////////////////////////////////////////////////////////////

3542 20 GeomDrawCallbackData 0 141313 20 GeomDrawCallbackData 20 GeomDrawCallbackData 0 0 0 0 2950 0 6 2944 2945 2946 2947 2948 2949 0 0 1 0 3543 0 0 0 0 363
////////////////////////////////////////////////////////////////////
//       Class : GeomDrawCallbackData
// Description : This specialization on CallbackData is passed when
//               the callback is initiated from deep within the draw
//               traversal, for a particular Geom.
////////////////////////////////////////////////////////////////////

3543 12 CallbackData 0 2049 12 CallbackData 12 CallbackData 0 0 0 0 0 0 0 0 0 0 0 0 610
////////////////////////////////////////////////////////////////////
//       Class : CallbackData
// Description : This is a generic data block that is passed along to
//               a CallbackObject when a callback is made.  It
//               contains data specific to the particular callback
//               type in question.
//
//               This is actually an abstract base class and contains
//               no data.  Specializations of this class will contain
//               the actual data relevant to each callback type.
////////////////////////////////////////////////////////////////////

3544 10 CullResult 0 75777 10 CullResult 10 CullResult 0 0 0 0 0 0 7 2951 2952 2953 2954 2955 2956 2957 0 0 1 0 3545 0 0 0 0 611
////////////////////////////////////////////////////////////////////
//       Class : CullResult
// Description : This stores the result of a BinCullHandler traversal:
//               an ordered collection of CullBins, each of which
//               holds a number of Geoms and RenderStates to be
//               rendered in some defined order.
//
//               This is also used to keep the results of last frame's
//               cull traversal around to make next frame's traversal
//               of the same scene a little easier.
////////////////////////////////////////////////////////////////////

3545 14 ReferenceCount 0 2049 14 ReferenceCount 14 ReferenceCount 0 0 0 0 0 0 0 0 0 0 0 0 425
////////////////////////////////////////////////////////////////////
//       Class : ReferenceCount
// Description : A base class for all things that want to be
//               reference-counted.  ReferenceCount works in
//               conjunction with PointerTo to automatically delete
//               objects when the last pointer to them goes away.
////////////////////////////////////////////////////////////////////

3546 11 DecalEffect 0 141313 11 DecalEffect 11 DecalEffect 0 0 0 0 2960 0 2 2958 2959 0 0 1 0 3489 0 0 0 0 355
////////////////////////////////////////////////////////////////////
//       Class : DecalEffect
// Description : Applied to a GeomNode to indicate that the children
//               of this GeomNode are coplanar and should be drawn as
//               decals (eliminating Z-fighting).
////////////////////////////////////////////////////////////////////

3547 17 DepthOffsetAttrib 0 141313 17 DepthOffsetAttrib 17 DepthOffsetAttrib 0 0 0 0 2968 0 7 2961 2962 2963 2964 2965 2966 2967 0 0 1 0 3478 0 0 0 0 1898
////////////////////////////////////////////////////////////////////
//       Class : DepthOffsetAttrib
// Description : This is a special kind of attribute that instructs
//               the graphics driver to apply an offset or bias to the
//               generated depth values for rendered polygons, before
//               they are written to the depth buffer.
//
//               This can be used to shift polygons forward slightly,
//               to resolve depth conflicts.  The cull traverser may
//               optionally use this, for instance, to implement
//               decals.  However, driver support for this feature
//               seems to be spotty, so use with caution.
//
//               The bias is always an integer number, and each
//               integer increment represents the smallest possible
//               increment in Z that is sufficient to completely
//               resolve two coplanar polygons.  Positive numbers are
//               closer towards the camera.
//
//               Nested DepthOffsetAttrib values accumulate; that is,
//               a DepthOffsetAttrib with a value of 1 beneath another
//               DepthOffsetAttrib with a value of 2 presents a net
//               offset of 3.  (A DepthOffsetAttrib will not, however,
//               combine with any other DepthOffsetAttribs with a
//               lower override parameter.)  The net value should
//               probably not exceed 16 or drop below 0 for maximum
//               portability.
//
//               Also, and only tangentially related, the
//               DepthOffsetAttrib can be used to constrain the Z
//               output value to a subset of the usual [0, 1] range
//               (or reversing its direction) by specifying a new
//               min_value and max_value.
////////////////////////////////////////////////////////////////////

3548 15 DepthTestAttrib 0 141313 15 DepthTestAttrib 15 DepthTestAttrib 0 0 0 0 2974 0 5 2969 2970 2971 2972 2973 0 0 1 0 3478 0 0 0 0 236
////////////////////////////////////////////////////////////////////
//       Class : DepthTestAttrib
// Description : Enables or disables writing to the depth buffer.
////////////////////////////////////////////////////////////////////

3549 16 DepthWriteAttrib 0 141313 16 DepthWriteAttrib 16 DepthWriteAttrib 0 0 0 0 2980 0 5 2975 2976 2977 2978 2979 0 0 1 0 3478 0 0 0 1 3550 237
////////////////////////////////////////////////////////////////////
//       Class : DepthWriteAttrib
// Description : Enables or disables writing to the depth buffer.
////////////////////////////////////////////////////////////////////

3550 4 Mode 0 794624 22 DepthWriteAttrib::Mode 22 DepthWriteAttrib::Mode 3549 0 0 0 0 0 0 0 0 0 2 5 M_off 23 DepthWriteAttrib::M_off 0
0 4 M_on 22 DepthWriteAttrib::M_on 0
1 0 0

3551 22 InternalNameCollection 0 26625 22 InternalNameCollection 22 InternalNameCollection 0 0 0 1 2981 2983 0 16 2982 2984 2985 2986 2987 2988 2989 2990 2991 2992 2993 2994 2995 2996 2997 2998 1 4115 0 0 0 0 194
////////////////////////////////////////////////////////////////////
//       Class : InternalNameCollection
// Description :
////////////////////////////////////////////////////////////////////

3552 5 Light 0 26625 5 Light 5 Light 0 0 0 0 2999 0 11 3000 3001 3002 3003 3004 3005 3006 3007 3008 3009 3010 0 0 0 0 0 460
////////////////////////////////////////////////////////////////////
//       Class : Light
// Description : The abstract interface to all kinds of lights.  The
//               actual light objects also inherit from PandaNode, and
//               can therefore be added to the scene graph at some
//               arbitrary point to define the coordinate system of
//               effect.
////////////////////////////////////////////////////////////////////

3553 11 LightAttrib 0 141313 11 LightAttrib 11 LightAttrib 0 0 0 0 3036 0 25 3011 3012 3013 3014 3015 3016 3017 3018 3019 3020 3021 3022 3023 3024 3025 3026 3027 3028 3029 3030 3031 3032 3033 3034 3035 2 4116 4117 0 1 0 3478 0 0 0 1 3554 426
////////////////////////////////////////////////////////////////////
//       Class : LightAttrib
// Description : Indicates which set of lights should be considered
//               "on" to illuminate geometry at this level and below.
//               A LightAttrib can either add lights or remove lights
//               from the total set of "on" lights.
////////////////////////////////////////////////////////////////////

3554 9 Operation 0 794624 22 LightAttrib::Operation 22 LightAttrib::Operation 3553 0 0 0 0 0 0 0 0 0 3 5 O_set 18 LightAttrib::O_set 0
0 5 O_add 18 LightAttrib::O_add 0
1 8 O_remove 21 LightAttrib::O_remove 0
2 0 145
// This is the old, deprecated interface to LightAttrib.  Do not use
// any of these methods for new code; these methods will be removed
// soon.

3555 15 LightRampAttrib 0 141313 15 LightRampAttrib 15 LightRampAttrib 0 0 0 0 3049 0 12 3037 3038 3039 3040 3041 3042 3043 3044 3045 3046 3047 3048 0 0 1 0 3478 0 0 0 1 3556 556
////////////////////////////////////////////////////////////////////
//       Class : LightRampAttrib
// Description : A Light Ramp is any unary operator that takes a 
//               rendered pixel as input, and adjusts the brightness
//               of that pixel.  For example, gamma correction is a
//               kind of light ramp.  So is HDR tone mapping.  So is
//               cartoon shading.  See the constructors for an
//               explanation of each kind of ramp.
////////////////////////////////////////////////////////////////////

3556 13 LightRampMode 0 794624 30 LightRampAttrib::LightRampMode 30 LightRampAttrib::LightRampMode 3555 0 0 0 0 0 0 0 0 0 7 11 LRT_default 28 LightRampAttrib::LRT_default 0
0 12 LRT_identity 29 LightRampAttrib::LRT_identity 0
1 20 LRT_single_threshold 37 LightRampAttrib::LRT_single_threshold 0
2 20 LRT_double_threshold 37 LightRampAttrib::LRT_double_threshold 0
3 8 LRT_hdr0 25 LightRampAttrib::LRT_hdr0 0
4 8 LRT_hdr1 25 LightRampAttrib::LRT_hdr1 0
5 8 LRT_hdr2 25 LightRampAttrib::LRT_hdr2 0
6 0 0

3557 6 Loader 0 141313 6 Loader 6 Loader 0 0 0 1 3061 3078 0 16 3062 3063 3064 3065 3066 3067 3068 3069 3070 3071 3072 3073 3074 3075 3076 3077 0 0 2 3 3509 3050 3051 3 3492 3052 3053 0 1 3558 819
////////////////////////////////////////////////////////////////////
//       Class : Loader
// Description : A convenient class for loading models from disk, in
//               bam or egg format (or any of a number of other
//               formats implemented by a LoaderFileType, such as
//               ptloader).
//
//               This class supports synchronous as well as
//               asynchronous loading.  In asynchronous loading, the
//               model is loaded in the background by a thread, and an
//               event will be generated when the model is available.
//               If threading is not available, the asynchronous
//               loading interface may be used, but it loads
//               synchronously.
////////////////////////////////////////////////////////////////////

3558 7 Results 0 288769 15 Loader::Results 15 Loader::Results 3557 0 0 1 3054 3056 0 5 3055 3057 3058 3059 3060 2 4118 4119 0 0 0 0 0

3559 14 LoaderFileType 0 75777 14 LoaderFileType 14 LoaderFileType 0 0 0 0 0 0 9 3079 3080 3081 3082 3083 3084 3085 3086 3087 0 0 1 0 3560 0 0 0 0 436
////////////////////////////////////////////////////////////////////
//       Class : LoaderFileType
// Description : This is the base class for a family of scene-graph
//               file types that the Loader supports.  Each kind of
//               loader that's available should define a corresponding
//               LoaderFileType object and register itself.
////////////////////////////////////////////////////////////////////

3560 11 TypedObject 0 2049 11 TypedObject 11 TypedObject 0 0 0 0 0 0 0 0 0 0 0 0 3561
////////////////////////////////////////////////////////////////////
//       Class : TypedObject
// Description : This is an abstract class that all classes which
//               use TypeHandle, and also provide virtual functions to
//               support polymorphism, should inherit from.  Each
//               derived class should define get_type(), which should
//               return the specific type of the derived class.
//               Inheriting from this automatically provides support
//               for is_of_type() and is_exact_type().
//
//               All classes that inherit directly or indirectly from
//               TypedObject should redefine get_type() and
//               force_init_type(), as shown below.  Some classes that
//               do not inherit from TypedObject may still declare
//               TypeHandles for themselves by defining methods called
//               get_class_type() and init_type().  Classes such as
//               these may serve as base classes, but the dynamic type
//               identification system will be limited.  Classes that
//               do not inherit from TypedObject need not define the
//               virtual functions get_type() and force_init_type()
//               (or any other virtual functions).
//
//               There is a specific layout for defining the
//               overrides from this class.  Keeping the definitions
//               formatted just like these examples will allow
//               someone in the future to use a sed (or similar)
//               script to make global changes, if necessary.  Avoid
//               rearranging the braces or the order of the functions
//               unless you're ready to change them in every file all
//               at once.
//
//               What follows are some examples that can be used in
//               new classes that you create.
//
//               @par In the class definition (.h file):
//               @code
//               public:
//                 static TypeHandle get_class_type() {
//                   return _type_handle;
//                 }
//                 static void init_type() {
//                   <<<BaseClassOne>>>::init_type();
//                   <<<BaseClassTwo>>>::init_type();
//                   <<<BaseClassN>>>::init_type();
//                   register_type(_type_handle, "<<<ThisClassStringName>>>",
//                                 <<<BaseClassOne>>>::get_class_type(),
//                                 <<<BaseClassTwo>>>::get_class_type(),
//                                 <<<BaseClassN>>>::get_class_type());
//                 }
//                 virtual TypeHandle get_type() const {
//                   return get_class_type();
//                 }
//                 virtual TypeHandle force_init_type() {init_type(); return get_class_type();}
//
//               private:
//                 static TypeHandle _type_handle;
//               @endcode
//
//               @par In the class .cxx file:
//               @code
//               TypeHandle <<<ThisClassStringName>>>::_type_handle;
//               @endcode
//
//               @par In the class config_<<<PackageName>>>.cxx file:
//               @code
//               ConfigureFn(config_<<<PackageName>>>) {
//                 <<<ClassOne>>>::init_type();
//                 <<<ClassTwo>>>::init_type();
//                 <<<ClassN>>>::init_type();
//               }
//               @endcode
////////////////////////////////////////////////////////////////////

3561 22 LoaderFileTypeRegistry 0 26625 22 LoaderFileTypeRegistry 22 LoaderFileTypeRegistry 0 0 0 0 3088 0 5 3089 3090 3091 3092 3093 1 4120 0 0 0 0 286
////////////////////////////////////////////////////////////////////
//       Class : LoaderFileTypeRegistry
// Description : This class maintains the set of all known
//               LoaderFileTypes in the universe.
////////////////////////////////////////////////////////////////////

3562 14 MaterialAttrib 0 141313 14 MaterialAttrib 14 MaterialAttrib 0 0 0 0 3101 0 7 3094 3095 3096 3097 3098 3099 3100 0 0 1 0 3478 0 0 0 0 423
////////////////////////////////////////////////////////////////////
//       Class : MaterialAttrib
// Description : Indicates which, if any, material should be applied
//               to geometry.  The material is used primarily to
//               control lighting effects, and isn't necessary (or
//               useful) in the absence of lighting.
////////////////////////////////////////////////////////////////////

3563 18 MaterialCollection 0 26625 18 MaterialCollection 18 MaterialCollection 0 0 0 1 3102 3104 0 17 3103 3105 3106 3107 3108 3109 3110 3111 3112 3113 3114 3115 3116 3117 3118 3119 3120 0 0 0 0 0 191
////////////////////////////////////////////////////////////////////
//       Class : MaterialCollection
// Description : 
////////////////////////////////////////////////////////////////////

3564 19 ModelFlattenRequest 0 141313 19 ModelFlattenRequest 19 ModelFlattenRequest 0 0 0 1 3121 3126 0 4 3122 3123 3124 3125 0 0 1 0 3565 0 0 0 0 545
////////////////////////////////////////////////////////////////////
//       Class : ModelFlattenRequest
// Description : This class object manages a single asynchronous
//               request to flatten a model.  The model will be
//               duplicated and flattened in a sub-thread (if
//               threading is available), without affecting the
//               original model; and when the result is done it may be
//               retrieved from this object.
////////////////////////////////////////////////////////////////////

3565 9 AsyncTask 0 2049 9 AsyncTask 9 AsyncTask 0 0 0 0 0 0 0 0 0 0 0 0 434
////////////////////////////////////////////////////////////////////
//       Class : AsyncTask
// Description : This class represents a concrete task performed by an
//               AsyncManager.  Normally, you would subclass from this
//               class, and override do_task(), to define the
//               functionality you wish to have the task perform.
////////////////////////////////////////////////////////////////////

3566 16 ModelLoadRequest 0 141313 16 ModelLoadRequest 16 ModelLoadRequest 0 0 0 1 3127 3134 0 6 3128 3129 3130 3131 3132 3133 0 0 1 0 3565 0 0 0 0 415
////////////////////////////////////////////////////////////////////
//       Class : ModelLoadRequest
// Description : A class object that manages a single asynchronous
//               model load request.  Create a new ModelLoadRequest,
//               and add it to the loader via load_async(), to begin
//               an asynchronous load.
////////////////////////////////////////////////////////////////////

3567 9 ModelNode 0 141313 9 ModelNode 9 ModelNode 0 0 0 1 3135 3142 0 6 3136 3137 3138 3139 3140 3141 0 0 1 0 3491 0 0 0 1 3568 683
////////////////////////////////////////////////////////////////////
//       Class : ModelNode
// Description : This node is placed at key points within the scene
//               graph to indicate the roots of "models": subtrees
//               that are conceptually to be treated as a single unit,
//               like a car or a room, for instance.  It doesn't
//               affect rendering or any other operations; it's
//               primarily useful as a high-level model indication.
//
//               ModelNodes are created in response to a <Model> { 1 }
//               flag within an egg file.
////////////////////////////////////////////////////////////////////

3568 17 PreserveTransform 0 794624 28 ModelNode::PreserveTransform 28 ModelNode::PreserveTransform 3567 0 0 0 0 0 0 0 0 0 5 7 PT_none 18 ModelNode::PT_none 0
0 8 PT_local 19 ModelNode::PT_local 0
1 6 PT_net 17 ModelNode::PT_net 0
2 12 PT_drop_node 23 ModelNode::PT_drop_node 0
3 11 PT_no_touch 22 ModelNode::PT_no_touch 0
4 0 0

3569 9 ModelRoot 0 141313 9 ModelRoot 9 ModelRoot 0 0 0 1 3143 3154 0 8 3144 3145 3146 3147 3148 3151 3152 3153 0 0 1 0 3567 0 0 0 1 3570 561
////////////////////////////////////////////////////////////////////
//       Class : ModelRoot
// Description : A node of this type is created automatically at the
//               root of each model file that is loaded.  It may
//               eventually contain some information about the
//               contents of the model; at the moment, it contains no
//               special information, but can be used as a flag to
//               indicate the presence of a loaded model file.
////////////////////////////////////////////////////////////////////

3570 14 ModelReference 0 403457 25 ModelRoot::ModelReference 25 ModelRoot::ModelReference 3569 0 0 1 3149 3150 0 0 0 0 1 0 3545 0 0 0 0 60
// This class is used to unify references to the same model.

3571 9 ModelPool 0 141313 9 ModelPool 9 ModelPool 0 0 0 0 3165 0 10 3155 3156 3157 3158 3159 3160 3161 3162 3163 3164 0 0 0 0 0 1197
////////////////////////////////////////////////////////////////////
//       Class : ModelPool
// Description : This class unifies all references to the same
//               filename, so that multiple attempts to load the same
//               model will return the same pointer.  Note that the
//               default behavior is thus to make instances: use with
//               caution.  Use the copy_subgraph() method on Node (or
//               use NodePath::copy_to) to make modifiable copies of
//               the node.
//
//               Unlike TexturePool, this class does not automatically
//               resolve the model filenames before loading, so a
//               relative path and an absolute path to the same model
//               will appear to be different filenames.
//
//               However, see the Loader class, which is now the
//               preferred interface for loading models.  The Loader
//               class can resolve filenames, supports threaded
//               loading, and can automatically consult the ModelPool,
//               according to the supplied LoaderOptions.
////////////////////////////////////////////////////////////////////

3572 16 ModelSaveRequest 0 141313 16 ModelSaveRequest 16 ModelSaveRequest 0 0 0 1 3166 3174 0 7 3167 3168 3169 3170 3171 3172 3173 0 0 1 0 3565 0 0 0 0 415
////////////////////////////////////////////////////////////////////
//       Class : ModelSaveRequest
// Description : A class object that manages a single asynchronous
//               model save request.  Create a new ModelSaveRequest,
//               and add it to the loader via save_async(), to begin
//               an asynchronous save.
////////////////////////////////////////////////////////////////////

3573 18 NodePathCollection 0 26625 18 NodePathCollection 18 NodePathCollection 0 0 0 1 3175 3177 0 40 3176 3178 3179 3180 3181 3182 3183 3184 3185 3186 3187 3188 3189 3190 3191 3192 3193 3194 3195 3196 3197 3198 3199 3200 3201 3202 3203 3204 3205 3206 3207 3208 3209 3210 3211 3212 3213 3214 3215 3216 1 4121 0 0 0 0 403
////////////////////////////////////////////////////////////////////
//       Class : NodePathCollection
// Description : This is a set of zero or more NodePaths.  It's handy
//               for returning from functions that need to return
//               multiple NodePaths (for instance,
//               NodePaths::get_children).
////////////////////////////////////////////////////////////////////

3574 13 TextureAttrib 0 141313 13 TextureAttrib 13 TextureAttrib 0 0 0 0 3245 0 28 3217 3218 3219 3220 3221 3222 3223 3224 3225 3226 3227 3228 3229 3230 3231 3232 3233 3234 3235 3236 3237 3238 3239 3240 3241 3242 3243 3244 3 4122 4123 4124 0 1 0 3478 0 0 0 0 336
////////////////////////////////////////////////////////////////////
//       Class : TextureAttrib
// Description : Indicates the set of TextureStages and their
//               associated Textures that should be applied to (or
//               removed from) a node.
////////////////////////////////////////////////////////////////////

3575 12 TexGenAttrib 0 75777 12 TexGenAttrib 12 TexGenAttrib 0 0 0 0 0 0 12 3246 3247 3248 3249 3250 3251 3252 3253 3254 3255 3256 3257 0 0 1 0 3478 0 0 0 0 530
////////////////////////////////////////////////////////////////////
//       Class : TexGenAttrib
// Description : Computes texture coordinates for geometry
//               automatically based on vertex position and/or normal.
//               This can be used to implement reflection and/or
//               refraction maps, for instance to make shiny surfaces,
//               as well as other special effects such as projective
//               texturing.
////////////////////////////////////////////////////////////////////

3576 12 OccluderNode 0 75777 12 OccluderNode 12 OccluderNode 0 0 0 1 3258 2111 0 8 3259 3260 3261 3262 3263 3264 3265 3266 1 4125 0 1 0 3491 0 0 0 0 524
////////////////////////////////////////////////////////////////////
//       Class : OccluderNode 
// Description : A node in the scene graph that can hold an 
//               occluder polygon, which must be a rectangle.  When
//               the occluder is activated with something like
//               render.set_occluder(), then objects whose bouding
//               volume lies entirely behind the occluder will not be
//               rendered.
////////////////////////////////////////////////////////////////////

3577 14 OccluderEffect 0 141313 14 OccluderEffect 14 OccluderEffect 0 0 0 0 3275 0 8 3267 3268 3269 3270 3271 3272 3273 3274 1 4126 0 1 0 3489 0 0 0 0 602
////////////////////////////////////////////////////////////////////
//       Class : OccluderEffect
// Description : This functions similarly to a LightAttrib or
//               ClipPlaneAttrib.  It indicates the set of occluders
//               that modify the geometry at this level and below.
//               Unlike a ClipPlaneAttrib, an OccluderEffect takes
//               effect immediately when it is encountered during
//               traversal, and thus can only add occluders; it may
//               not remove them.
////////////////////////////////////////////////////////////////////

3578 13 PolylightNode 0 141313 13 PolylightNode 13 PolylightNode 0 0 0 1 3276 3313 0 36 3277 3278 3279 3280 3281 3282 3283 3284 3285 3286 3287 3288 3289 3290 3291 3292 3293 3294 3295 3296 3297 3298 3299 3300 3301 3302 3303 3304 3305 3306 3307 3308 3309 3310 3311 3312 0 0 1 0 3491 0 0 0 2 3579 3580 201
////////////////////////////////////////////////////////////////////
//       Class : PolylightNode
// Description : A PolylightNode
////////////////////////////////////////////////////////////////////

3579 12 Flicker_Type 0 794624 27 PolylightNode::Flicker_Type 27 PolylightNode::Flicker_Type 3578 0 0 0 0 0 0 0 0 0 3 7 FRANDOM 22 PolylightNode::FRANDOM 0
0 4 FSIN 19 PolylightNode::FSIN 0
1 7 FCUSTOM 22 PolylightNode::FCUSTOM 0
2 0 0

3580 16 Attenuation_Type 0 794624 31 PolylightNode::Attenuation_Type 31 PolylightNode::Attenuation_Type 3578 0 0 0 0 0 0 0 0 0 2 7 ALINEAR 22 PolylightNode::ALINEAR 0
0 10 AQUADRATIC 25 PolylightNode::AQUADRATIC 0
1 0 0

3581 15 PolylightEffect 0 141313 15 PolylightEffect 15 PolylightEffect 0 0 0 0 3325 0 11 3314 3315 3316 3317 3318 3319 3320 3321 3322 3323 3324 0 0 1 0 3489 0 0 0 2 3582 3583 559
////////////////////////////////////////////////////////////////////
//       Class : PolylightEffect
// Description : A PolylightEffect can be used on a node to define a
//               LightGroup  for that node. A LightGroup contains 
//               PolylightNodes which are essentially nodes that add 
//               color to the polygons of a model based on distance.
//               PolylightNode is a cheap way to get lighting effects
//               specially for night scenes
////////////////////////////////////////////////////////////////////

3582 11 ContribType 0 794624 28 PolylightEffect::ContribType 28 PolylightEffect::ContribType 3581 0 0 0 0 0 0 0 0 0 2 11 CT_proximal 28 PolylightEffect::CT_proximal 0
0 6 CT_all 23 PolylightEffect::CT_all 0
1 0 0

3583 10 LightGroup 0 2367488 27 PolylightEffect::LightGroup 27 PolylightEffect::LightGroup 3581 0 3584 0 0 0 0 0 0 0 0 0 0

3584 18 vector< NodePath > 0 2048 18 vector< NodePath > 18 vector< NodePath > 0 0 0 0 0 0 0 0 0 0 0 0 0

3585 12 ShaderAttrib 0 141313 12 ShaderAttrib 12 ShaderAttrib 0 0 0 0 3360 0 34 3326 3327 3328 3329 3330 3331 3332 3333 3334 3335 3336 3337 3338 3339 3340 3341 3342 3343 3344 3345 3346 3347 3348 3349 3350 3351 3352 3353 3354 3355 3356 3357 3358 3359 0 0 1 0 3478 0 0 0 1 3586 184
////////////////////////////////////////////////////////////////////
//       Class : ShaderAttrib
// Description :
////////////////////////////////////////////////////////////////////

3586 0 0 794624 14 ShaderAttrib:: 0 3585 0 0 0 0 0 0 0 0 0 3 21 F_disable_alpha_write 35 ShaderAttrib::F_disable_alpha_write 49
// Suppress writes to color buffer alpha channel.
0 20 F_subsume_alpha_test 34 ShaderAttrib::F_subsume_alpha_test 58
// Shader promises to subsume the alpha test using TEXKILL
1 19 F_hardware_skinning 33 ShaderAttrib::F_hardware_skinning 37
// Shader needs pre-animated vertices
2 0 0

3587 16 ShowBoundsEffect 0 141313 16 ShowBoundsEffect 16 ShowBoundsEffect 0 0 0 0 3364 0 3 3361 3362 3363 0 0 1 0 3489 0 0 0 0 412
////////////////////////////////////////////////////////////////////
//       Class : ShowBoundsEffect
// Description : Applied to a GeomNode to cause a visible bounding
//               volume to be drawn for this node.  This is generally
//               used only during development to help identify
//               bounding volume issues.
////////////////////////////////////////////////////////////////////

3588 18 TexProjectorEffect 0 75777 18 TexProjectorEffect 18 TexProjectorEffect 0 0 0 0 0 0 9 3365 3366 3367 3368 3369 3370 3371 3372 3373 0 0 1 0 3489 0 0 0 0 1911
////////////////////////////////////////////////////////////////////
//       Class : TexProjectorEffect
// Description : This effect automatically applies a computed texture
//               matrix to the specified texture stage, according to
//               the relative position of two specified nodes.
//
//               The relative transform from the "from" node to the
//               "to" node is applied directly to the texture matrix
//               each frame.  If the "to" node happens to be a
//               LensNode, its lens projection matrix is applied as
//               well.
//
//               This can be used to apply a number of special
//               effects.  Fundamentally, it may simply be used to
//               provide a separate PandaNode that may be adjusted
//               (e.g. via a LerpInterval) in order to easily apply a
//               linear transformation to an object's texture
//               coordinates (rather than having to explicitly call
//               NodePath.set_tex_transform() each frame).
//
//               In a more sophisticated case, the TexProjectorEffect
//               is particularly useful in conjunction with a
//               TexGenAttrib that specifies a mode of
//               M_world_position (which copies the world position of
//               each vertex to the texture coordinates).  Then the
//               TexProjector can be used to convert these world
//               coordinates to the relative coordinates of a
//               particular node, causing (for instance) a texture to
//               appear to follow a node around as it moves through
//               the world.  With a LensNode, you can project a
//               texture onto the walls, for instance to apply a
//               flashlight effect or an image-based shadow.
////////////////////////////////////////////////////////////////////

3589 13 ScissorEffect 0 141313 13 ScissorEffect 13 ScissorEffect 0 0 0 0 3384 0 10 3374 3375 3376 3377 3378 3379 3380 3381 3382 3383 2 4127 4128 0 1 0 3489 0 0 0 0 456
////////////////////////////////////////////////////////////////////
//       Class : ScissorEffect
// Description : This provides a higher-level wrapper around
//               ScissorAttrib.  It allows for the scissor region to
//               be defined via points relative to the current node,
//               and also performs culling based on the scissor
//               region.
////////////////////////////////////////////////////////////////////

3590 17 SceneGraphReducer 0 26625 17 SceneGraphReducer 17 SceneGraphReducer 0 0 0 1 3385 3386 0 17 3387 3388 3389 3390 3391 3392 3393 3394 3395 3396 3397 3398 3399 3400 3401 3402 3403 0 0 0 0 4 3591 3592 3593 3594 610
////////////////////////////////////////////////////////////////////
//       Class : SceneGraphReducer
// Description : An interface for simplifying ("flattening") scene
//               graphs by eliminating unneeded nodes and collapsing
//               out unneeded state changes and transforms.
//
//               This class is designed so that it may be inherited
//               from and specialized, if needed, to fine-tune the
//               flattening behavior, but normally the default
//               behavior is sufficient.
////////////////////////////////////////////////////////////////////

3591 11 AttribTypes 0 794624 30 SceneGraphReducer::AttribTypes 30 SceneGraphReducer::AttribTypes 3590 0 0 0 0 0 0 0 0 0 8 12 TT_transform 31 SceneGraphReducer::TT_transform 0
1 8 TT_color 27 SceneGraphReducer::TT_color 0
2 14 TT_color_scale 33 SceneGraphReducer::TT_color_scale 0
4 13 TT_tex_matrix 32 SceneGraphReducer::TT_tex_matrix 0
8 13 TT_clip_plane 32 SceneGraphReducer::TT_clip_plane 0
16 12 TT_cull_face 31 SceneGraphReducer::TT_cull_face 0
32 22 TT_apply_texture_color 41 SceneGraphReducer::TT_apply_texture_color 0
64 8 TT_other 27 SceneGraphReducer::TT_other 0
128 0 0

3592 15 CombineSiblings 0 794624 34 SceneGraphReducer::CombineSiblings 34 SceneGraphReducer::CombineSiblings 3590 0 0 0 0 0 0 0 0 0 4 12 CS_geom_node 31 SceneGraphReducer::CS_geom_node 0
1 16 CS_within_radius 35 SceneGraphReducer::CS_within_radius 0
2 8 CS_other 27 SceneGraphReducer::CS_other 0
4 10 CS_recurse 29 SceneGraphReducer::CS_recurse 0
8 0 0

3593 17 CollectVertexData 0 794624 36 SceneGraphReducer::CollectVertexData 36 SceneGraphReducer::CollectVertexData 3590 0 0 0 0 0 0 0 0 0 8 8 CVD_name 27 SceneGraphReducer::CVD_name 86
// If set, two GeomVertexDatas with different names will not be
// collected together.
1 9 CVD_model 28 SceneGraphReducer::CVD_model 132
// If set, a ModelNode begins a subgraph of nodes whose
// GeomVertexDatas will not be collected with nodes outside the
// subgraph.
2 13 CVD_transform 32 SceneGraphReducer::CVD_transform 145
// If set, a non-identity transform begins a subgraph of nodes
// whose GeomVertexDatas will not be collected with nodes outside
// the subgraph.
4 17 CVD_avoid_dynamic 36 SceneGraphReducer::CVD_avoid_dynamic 238
// If set, GeomVertexDatas with any usage_hint other than
// UH_static will not be collected with any other Geoms in a
// different GeomNode.  However, two different dynamic Geoms
// within the same node might still be collected together.
8 17 CVD_one_node_only 36 SceneGraphReducer::CVD_one_node_only 90
// If set, only those GeomVertexDatas within the same node might
// be collected together.
16 10 CVD_format 29 SceneGraphReducer::CVD_format 230
// If set, two GeomVertexDatas with different formats will not be
// collected together.  If not set, GeomVertexDatas of different
// formats may be combined by expanding all GeomVertexDatas to the
// union of all defined columns.
32 14 CVD_usage_hint 33 SceneGraphReducer::CVD_usage_hint 136
// If set, two GeomVertexDatas with different usage hints (for
// instance, UH_static vs. UH_dynamic) will not be collected
// together.
64 18 CVD_animation_type 37 SceneGraphReducer::CVD_animation_type 120
// If set, GeomVertexDatas with unanimated vertices will not be
// combined with GeomVertexDatas with animated vertices.
128 0 0

3594 14 MakeNonindexed 0 794624 33 SceneGraphReducer::MakeNonindexed 33 SceneGraphReducer::MakeNonindexed 3590 0 0 0 0 0 0 0 0 0 3 17 MN_composite_only 36 SceneGraphReducer::MN_composite_only 155
// If set, only composite primitives such as tristrips and trifans
// will be made nonindexed; simple primitives such as triangles
// will be left indexed.
1 17 MN_avoid_animated 36 SceneGraphReducer::MN_avoid_animated 163
// If set any GeomVertexData with any animation indication will
// not be adjusted, whether the animation is to be performed on
// the CPU or on the graphics pipe.
2 16 MN_avoid_dynamic 35 SceneGraphReducer::MN_avoid_dynamic 108
// If set, any GeomVertexData or Geom with a usage_hint other than
// UH_static will not be made nonindexed.
4 0 0

3595 13 ParamNodePath 0 141313 13 ParamNodePath 13 ParamNodePath 0 0 0 1 3406 3409 0 2 3407 3408 0 0 1 0 3596 0 0 0 0 239
////////////////////////////////////////////////////////////////////
//       Class : ParamNodePath
// Description : A class object for storing a NodePath as a parameter.
////////////////////////////////////////////////////////////////////

3596 14 ParamValueBase 0 2049 14 ParamValueBase 14 ParamValueBase 0 0 0 0 0 0 0 0 0 0 0 0 348
////////////////////////////////////////////////////////////////////
//       Class : ParamValueBase
// Description : A non-template base class of ParamValue (below),
//               which serves mainly to define the placeholder for the
//               virtual output function.
////////////////////////////////////////////////////////////////////

3597 10 PortalNode 0 75777 10 PortalNode 10 PortalNode 0 0 0 1 3410 2111 0 24 3411 3412 3413 3414 3415 3416 3417 3418 3419 3420 3421 3422 3423 3424 3425 3426 3427 3428 3429 3430 3431 3432 3433 3434 1 4129 0 1 0 3491 0 0 0 0 483
////////////////////////////////////////////////////////////////////
//       Class : PortalNode 
//       Description : A node in the scene graph that can hold a 
//                     Portal Polygon, which is a rectangle. Other 
//                     types of polygons are not supported for
//                     now. It also holds a PT(PandaNode) Cell that 
//                     this portal is connected to
////////////////////////////////////////////////////////////////////

3598 19 RescaleNormalAttrib 0 141313 19 RescaleNormalAttrib 19 RescaleNormalAttrib 0 0 0 0 3440 0 5 3435 3436 3437 3438 3439 0 0 1 0 3478 0 0 0 1 3599 231
////////////////////////////////////////////////////////////////////
//       Class : RescaleNormalAttrib
// Description : Specifies how polygons are to be drawn.
////////////////////////////////////////////////////////////////////

3599 4 Mode 0 794624 25 RescaleNormalAttrib::Mode 25 RescaleNormalAttrib::Mode 3598 0 0 0 0 0 0 0 0 0 4 6 M_none 27 RescaleNormalAttrib::M_none 38
// No adjustments are made to normals.
0 9 M_rescale 30 RescaleNormalAttrib::M_rescale 99
// Normals are counterscaled by the transform's uniform scale, if
// supported by the graphics API.
1 11 M_normalize 32 RescaleNormalAttrib::M_normalize 60
// Normals are scaled to unit length; potentially expensive.
2 6 M_auto 27 RescaleNormalAttrib::M_auto 144
// Normals are counterscaled in the presence of a uniform scale
// transform, or normalized in the presence of a non-uniform scale
// transform.
3 0 0

3600 13 ScissorAttrib 0 141313 13 ScissorAttrib 13 ScissorAttrib 0 0 0 0 3448 0 7 3441 3442 3443 3444 3445 3446 3447 0 0 1 0 3478 0 0 0 0 852
////////////////////////////////////////////////////////////////////
//       Class : ScissorAttrib
// Description : This restricts rendering to within a rectangular
//               region of the scene, without otherwise affecting the
//               viewport or lens properties.  Geometry that falls
//               outside the scissor region is not rendered.  It is
//               akin to the OpenGL glScissor() function.
//
//               The ScissorAttrib always specifies its region
//               relative to its enclosing DisplayRegion, in screen
//               space, and performs no culling.
//
//               See ScissorEffect if you wish to define a
//               region relative to 2-D or 3-D coordinates in the
//               scene graph, with culling.
////////////////////////////////////////////////////////////////////

3601 16 ShadeModelAttrib 0 141313 16 ShadeModelAttrib 16 ShadeModelAttrib 0 0 0 0 3454 0 5 3449 3450 3451 3452 3453 0 0 1 0 3478 0 0 0 1 3602 295
////////////////////////////////////////////////////////////////////
//       Class : ShadeModelAttrib
// Description : Specifies whether flat shading (per-polygon) or
//               smooth shading (per-vertex) is in effect.
////////////////////////////////////////////////////////////////////

3602 4 Mode 0 794624 22 ShadeModelAttrib::Mode 22 ShadeModelAttrib::Mode 3601 0 0 0 0 0 0 0 0 0 2 6 M_flat 24 ShadeModelAttrib::M_flat 0
0 8 M_smooth 26 ShadeModelAttrib::M_smooth 0
1 0 0

3603 13 StencilAttrib 0 141313 13 StencilAttrib 13 StencilAttrib 0 0 0 0 3464 0 9 3455 3456 3457 3458 3459 3460 3461 3462 3463 0 0 1 0 3478 0 0 0 3 3604 3605 3606 563
////////////////////////////////////////////////////////////////////
//       Class : StencilAttrib
// Description : A StencilAttrib is a collection of all stencil render
//               states.  The render states in a StencilAttrib are
//               read-only.  A StencilAttrib is created with make or
//               make_2_sided.  To determine if two sided stencil is
//               supported, call the function GraphicsStateGuardian::
//               get_supports_two_sided_stencil.
////////////////////////////////////////////////////////////////////

3604 18 StencilRenderState 0 794624 33 StencilAttrib::StencilRenderState 33 StencilAttrib::StencilRenderState 3603 0 0 0 0 0 0 0 0 0 14 29 SRS_front_comparison_function 44 StencilAttrib::SRS_front_comparison_function 0
0 32 SRS_front_stencil_fail_operation 47 StencilAttrib::SRS_front_stencil_fail_operation 0
1 39 SRS_front_stencil_pass_z_fail_operation 54 StencilAttrib::SRS_front_stencil_pass_z_fail_operation 0
2 39 SRS_front_stencil_pass_z_pass_operation 54 StencilAttrib::SRS_front_stencil_pass_z_pass_operation 0
3 13 SRS_reference 28 StencilAttrib::SRS_reference 0
4 13 SRS_read_mask 28 StencilAttrib::SRS_read_mask 0
5 14 SRS_write_mask 29 StencilAttrib::SRS_write_mask 0
6 28 SRS_back_comparison_function 43 StencilAttrib::SRS_back_comparison_function 0
7 31 SRS_back_stencil_fail_operation 46 StencilAttrib::SRS_back_stencil_fail_operation 0
8 38 SRS_back_stencil_pass_z_fail_operation 53 StencilAttrib::SRS_back_stencil_pass_z_fail_operation 0
9 38 SRS_back_stencil_pass_z_pass_operation 53 StencilAttrib::SRS_back_stencil_pass_z_pass_operation 0
10 9 SRS_clear 24 StencilAttrib::SRS_clear 0
11 15 SRS_clear_value 30 StencilAttrib::SRS_clear_value 0
12 9 SRS_total 24 StencilAttrib::SRS_total 0
13 0 77
// enums are duplicated here from class StencilRenderStates for use in Python

3605 25 StencilComparisonFunction 0 794624 40 StencilAttrib::StencilComparisonFunction 40 StencilAttrib::StencilComparisonFunction 3603 0 0 0 0 0 0 0 0 0 8 9 SCF_never 24 StencilAttrib::SCF_never 0
1 13 SCF_less_than 28 StencilAttrib::SCF_less_than 0
2 9 SCF_equal 24 StencilAttrib::SCF_equal 0
3 22 SCF_less_than_or_equal 37 StencilAttrib::SCF_less_than_or_equal 0
4 16 SCF_greater_than 31 StencilAttrib::SCF_greater_than 0
5 13 SCF_not_equal 28 StencilAttrib::SCF_not_equal 0
6 25 SCF_greater_than_or_equal 40 StencilAttrib::SCF_greater_than_or_equal 0
7 10 SCF_always 25 StencilAttrib::SCF_always 0
8 0 44
// Exists purely for backward compatibility.

3606 16 StencilOperation 0 794624 31 StencilAttrib::StencilOperation 31 StencilAttrib::StencilOperation 3603 0 0 0 0 0 0 0 0 0 8 7 SO_keep 22 StencilAttrib::SO_keep 0
0 7 SO_zero 22 StencilAttrib::SO_zero 0
1 10 SO_replace 25 StencilAttrib::SO_replace 0
2 12 SO_increment 27 StencilAttrib::SO_increment 0
3 12 SO_decrement 27 StencilAttrib::SO_decrement 0
4 9 SO_invert 24 StencilAttrib::SO_invert 0
5 21 SO_increment_saturate 36 StencilAttrib::SO_increment_saturate 0
6 21 SO_decrement_saturate 36 StencilAttrib::SO_decrement_saturate 0
7 0 0

3607 10 ShaderPool 0 141313 10 ShaderPool 10 ShaderPool 0 0 0 0 3474 0 9 3465 3466 3467 3468 3469 3470 3471 3472 3473 0 0 0 0 0 406
////////////////////////////////////////////////////////////////////
//       Class : ShaderPool
// Description : This is the preferred interface for loading shaders for
//               the TextNode system.  It is similar to ModelPool and
//               TexturePool in that it unifies references to the same
//               filename.
////////////////////////////////////////////////////////////////////

3608 22 TransformState const * 0 8576 22 TransformState const * 22 TransformState const * 0 0 3609 0 0 0 0 0 0 0 0 0 0

3609 20 TransformState const 0 8832 20 TransformState const 20 TransformState const 0 0 3475 0 0 0 0 0 0 0 0 0 0

3610 4 bool 0 8194 4 bool 4 bool 0 4 0 0 0 0 0 0 0 0 0 0 0

3611 3 int 0 8194 3 int 3 int 0 1 0 0 0 0 0 0 0 0 0 0 0

3612 6 size_t 0 2105344 6 size_t 6 size_t 0 0 3613 0 0 0 0 0 0 0 0 0 0

3613 17 unsigned long int 0 8214 17 unsigned long int 17 unsigned long int 0 1 0 0 0 0 0 0 0 0 0 0 0

3614 17 LVecBase3 const * 0 8576 17 LVecBase3 const * 17 LVecBase3 const * 0 0 3615 0 0 0 0 0 0 0 0 0 0

3615 15 LVecBase3 const 0 8832 15 LVecBase3 const 15 LVecBase3 const 0 0 3616 0 0 0 0 0 0 0 0 0 0

3616 9 LVecBase3 0 2105344 9 LVecBase3 9 LVecBase3 0 0 3617 0 0 0 0 0 0 0 0 0 0

3617 10 LVecBase3f 0 2048 10 LVecBase3f 10 LVecBase3f 0 0 0 0 0 0 0 0 0 0 0 0 265
////////////////////////////////////////////////////////////////////
//       Class : LVecBase3
// Description : This is the base class for all three-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

3618 19 LQuaternion const * 0 8576 19 LQuaternion const * 19 LQuaternion const * 0 0 3619 0 0 0 0 0 0 0 0 0 0

3619 17 LQuaternion const 0 8832 17 LQuaternion const 17 LQuaternion const 0 0 3620 0 0 0 0 0 0 0 0 0 0

3620 11 LQuaternion 0 2105344 11 LQuaternion 11 LQuaternion 0 0 3621 0 0 0 0 0 0 0 0 0 0

3621 12 LQuaternionf 0 2048 12 LQuaternionf 12 LQuaternionf 0 0 0 0 0 0 0 0 0 0 0 0 228
////////////////////////////////////////////////////////////////////
//       Class : FLOATNAME(LQuaternion)
// Description : This is the base quaternion class
////////////////////////////////////////////////////////////////////

3622 11 PN_stdfloat 0 2105344 11 PN_stdfloat 11 PN_stdfloat 0 0 3623 0 0 0 0 0 0 0 0 0 0

3623 5 float 0 8194 5 float 5 float 0 2 0 0 0 0 0 0 0 0 0 0 0

3624 16 LMatrix4 const * 0 8576 16 LMatrix4 const * 16 LMatrix4 const * 0 0 3625 0 0 0 0 0 0 0 0 0 0

3625 14 LMatrix4 const 0 8832 14 LMatrix4 const 14 LMatrix4 const 0 0 3626 0 0 0 0 0 0 0 0 0 0

3626 8 LMatrix4 0 2105344 8 LMatrix4 8 LMatrix4 0 0 3627 0 0 0 0 0 0 0 0 0 0

3627 9 LMatrix4f 0 2048 9 LMatrix4f 9 LMatrix4f 0 0 0 0 0 0 0 3 4130 4131 4132 0 0 0 0 215
////////////////////////////////////////////////////////////////////
//       Class : LMatrix4
// Description : This is a 4-by-4 transform matrix.
////////////////////////////////////////////////////////////////////

3628 17 LVecBase2 const * 0 8576 17 LVecBase2 const * 17 LVecBase2 const * 0 0 3629 0 0 0 0 0 0 0 0 0 0

3629 15 LVecBase2 const 0 8832 15 LVecBase2 const 15 LVecBase2 const 0 0 3630 0 0 0 0 0 0 0 0 0 0

3630 9 LVecBase2 0 2105344 9 LVecBase2 9 LVecBase2 0 0 3631 0 0 0 0 0 0 0 0 0 0

3631 10 LVecBase2f 0 2048 10 LVecBase2f 10 LVecBase2f 0 0 0 0 0 0 0 0 0 0 0 0 263
////////////////////////////////////////////////////////////////////
//       Class : LVecBase2
// Description : This is the base class for all two-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

3632 16 LMatrix3 const * 0 8576 16 LMatrix3 const * 16 LMatrix3 const * 0 0 3633 0 0 0 0 0 0 0 0 0 0

3633 14 LMatrix3 const 0 8832 14 LMatrix3 const 14 LMatrix3 const 0 0 3634 0 0 0 0 0 0 0 0 0 0

3634 8 LMatrix3 0 2105344 8 LMatrix3 8 LMatrix3 0 0 3635 0 0 0 0 0 0 0 0 0 0

3635 9 LMatrix3f 0 2048 9 LMatrix3f 9 LMatrix3f 0 0 0 0 0 0 0 4 4133 4134 4135 4136 0 0 0 0 462
////////////////////////////////////////////////////////////////////
//       Class : LMatrix3
// Description : This is a 3-by-3 transform matrix.  It typically will
//               represent either a rotation-and-scale (no
//               translation) matrix in 3-d, or a full affine matrix
//               (rotation, scale, translation) in 2-d, e.g. for a
//               texture matrix.
////////////////////////////////////////////////////////////////////

3636 15 LPoint3 const * 0 8576 15 LPoint3 const * 15 LPoint3 const * 0 0 3637 0 0 0 0 0 0 0 0 0 0

3637 13 LPoint3 const 0 8832 13 LPoint3 const 13 LPoint3 const 0 0 3638 0 0 0 0 0 0 0 0 0 0

3638 7 LPoint3 0 2105344 7 LPoint3 7 LPoint3 0 0 3639 0 0 0 0 0 0 0 0 0 0

3639 8 LPoint3f 0 2048 8 LPoint3f 8 LPoint3f 0 0 0 0 0 0 0 0 0 0 0 0 596
////////////////////////////////////////////////////////////////////
//       Class : LPoint3
// Description : This is a three-component point in space (as opposed
//               to a three-component vector, which represents a
//               direction and a distance).  Some of the methods are
//               slightly different between LPoint3 and LVector3; in
//               particular, subtraction of two points yields a
//               vector, while addition of a vector and a point yields
//               a point.
////////////////////////////////////////////////////////////////////

3640 11 LVecBase2 * 0 8576 11 LVecBase2 * 11 LVecBase2 * 0 0 3630 0 0 0 0 0 0 0 0 0 0

3641 10 LMatrix3 * 0 8576 10 LMatrix3 * 10 LMatrix3 * 0 0 3634 0 0 0 0 0 0 0 0 0 0

3642 4 void 0 8194 4 void 4 void 0 6 0 0 0 0 0 0 0 0 0 0 0

3643 10 PyObject * 0 8576 10 PyObject * 10 PyObject * 0 0 3644 0 0 0 0 0 0 0 0 0 0

3644 8 PyObject 0 2105344 8 PyObject 8 PyObject 0 0 3645 0 0 0 0 0 0 0 0 0 0

3645 7 _object 0 1024 7 _object 7 _object 0 0 0 0 0 0 0 0 0 0 0 0 0

3646 9 ostream * 0 8576 9 ostream * 9 ostream * 0 0 3647 0 0 0 0 0 0 0 0 0 0

3647 7 ostream 0 2048 7 ostream 7 ostream 0 0 0 0 0 0 0 0 0 0 0 0 0

3648 10 TypeHandle 0 2048 10 TypeHandle 10 TypeHandle 0 0 0 0 0 0 0 0 0 0 0 0 1098
////////////////////////////////////////////////////////////////////
//       Class : TypeHandle
// Description : TypeHandle is the identifier used to differentiate
//               C++ class types.  Any C++ classes that inherit from
//               some base class, and must be differentiated at run
//               time, should store a static TypeHandle object that
//               can be queried through a static member function
//               named get_class_type().  Most of the time, it is also
//               desirable to inherit from TypedObject, which provides
//               some virtual functions to return the TypeHandle for a
//               particular instance.
//
//               At its essence, a TypeHandle is simply a unique
//               identifier that is assigned by the TypeRegistry.  The
//               TypeRegistry stores a tree of TypeHandles, so that
//               ancestry of a particular type may be queried, and the
//               type name may be retrieved for run-time display.
////////////////////////////////////////////////////////////////////

3649 12 TypeHandle * 0 8576 12 TypeHandle * 12 TypeHandle * 0 0 3648 0 0 0 0 0 0 0 0 0 0

3650 28 RenderAttribRegistry const * 0 8576 28 RenderAttribRegistry const * 28 RenderAttribRegistry const * 0 0 3651 0 0 0 0 0 0 0 0 0 0

3651 26 RenderAttribRegistry const 0 8832 26 RenderAttribRegistry const 26 RenderAttribRegistry const 0 0 3477 0 0 0 0 0 0 0 0 0 0

3652 22 RenderAttribRegistry * 0 8576 22 RenderAttribRegistry * 22 RenderAttribRegistry * 0 0 3477 0 0 0 0 0 0 0 0 0 0

3653 18 RenderAttrib const 0 8832 18 RenderAttrib const 18 RenderAttrib const 0 0 3478 0 0 0 0 0 0 0 0 0 0

3654 20 RenderAttrib const * 0 8576 20 RenderAttrib const * 20 RenderAttrib const * 0 0 3653 0 0 0 0 0 0 0 0 0 0

3655 20 DeletedBufferChain * 0 8576 20 DeletedBufferChain * 20 DeletedBufferChain * 0 0 3656 0 0 0 0 0 0 0 0 0 0

3656 18 DeletedBufferChain 0 2048 18 DeletedBufferChain 18 DeletedBufferChain 0 0 0 0 0 0 0 0 0 0 0 0 911
////////////////////////////////////////////////////////////////////
//       Class : DeletedBufferChain
// Description : This template class can be used to provide faster
//               allocation/deallocation for many Panda objects.  It
//               works by maintaining a linked list of deleted buffers
//               that are all of the same size; when a new object is
//               allocated that matches that size, the same space is
//               just reused.
//
//               This class manages untyped buffers of a fixed size.
//               It can be used directly; or it also serves as a
//               backbone for DeletedChain, which is a template class
//               that manages object allocations.
//
//               Use MemoryHook to get a new DeletedBufferChain of a
//               particular size.
////////////////////////////////////////////////////////////////////

3657 19 RenderState const * 0 8576 19 RenderState const * 19 RenderState const * 0 0 3658 0 0 0 0 0 0 0 0 0 0

3658 17 RenderState const 0 8832 17 RenderState const 17 RenderState const 0 0 3485 0 0 0 0 0 0 0 0 0 0

3659 14 LColor const * 0 8576 14 LColor const * 14 LColor const * 0 0 3660 0 0 0 0 0 0 0 0 0 0

3660 12 LColor const 0 8832 12 LColor const 12 LColor const 0 0 3661 0 0 0 0 0 0 0 0 0 0

3661 6 LColor 0 2105344 6 LColor 6 LColor 0 0 3662 0 0 0 0 0 0 0 0 0 0

3662 7 LColorf 0 2105344 7 LColorf 7 LColorf 0 0 3663 0 0 0 0 0 0 0 0 0 0

3663 10 LVecBase4f 0 2048 10 LVecBase4f 10 LVecBase4f 0 0 0 0 0 0 0 0 0 0 0 0 265
////////////////////////////////////////////////////////////////////
//       Class : LVecBase4
// Description : This is the base class for all three-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

3664 24 RenderModeAttrib const * 0 8576 24 RenderModeAttrib const * 24 RenderModeAttrib const * 0 0 3665 0 0 0 0 0 0 0 0 0 0

3665 22 RenderModeAttrib const 0 8832 22 RenderModeAttrib const 22 RenderModeAttrib const 0 0 3482 0 0 0 0 0 0 0 0 0 0

3666 14 TextureStage * 0 8576 14 TextureStage * 14 TextureStage * 0 0 3667 0 0 0 0 0 0 0 0 0 0

3667 12 TextureStage 0 2048 12 TextureStage 12 TextureStage 0 0 0 0 0 0 0 0 0 0 0 0 600
////////////////////////////////////////////////////////////////////
//       Class : TextureStage
// Description : Defines the properties of a named stage of the
//               multitexture pipeline.  The TextureAttrib will
//               associated a number of these stages with Texture
//               objects, and the GSG will render geometry by sorting
//               all of the currently active TextureStages in order
//               and then issuing the appropriate rendering calls to
//               activate them.
////////////////////////////////////////////////////////////////////

3668 23 TexMatrixAttrib const * 0 8576 23 TexMatrixAttrib const * 23 TexMatrixAttrib const * 0 0 3669 0 0 0 0 0 0 0 0 0 0

3669 21 TexMatrixAttrib const 0 8832 21 TexMatrixAttrib const 21 TexMatrixAttrib const 0 0 3484 0 0 0 0 0 0 0 0 0 0

3670 10 SlotMask * 0 8576 23 RenderState::SlotMask * 23 RenderState::SlotMask * 0 0 3671 0 0 0 0 0 0 0 0 0 0

3671 8 SlotMask 0 2367488 21 RenderState::SlotMask 21 RenderState::SlotMask 3485 0 3672 0 0 0 0 0 0 0 0 0 0

3672 8 SlotMask 0 2367488 30 RenderAttribRegistry::SlotMask 30 RenderAttribRegistry::SlotMask 3477 0 3673 0 0 0 0 0 0 0 0 0 0

3673 9 BitMask32 0 2105344 9 BitMask32 9 BitMask32 0 0 3674 0 0 0 0 0 0 0 0 0 0

3674 24 BitMask< PN_uint32, 32 > 0 2048 24 BitMask< PN_uint32, 32 > 24 BitMask< PN_uint32, 32 > 0 0 0 0 0 0 0 0 0 0 0 0 0

3675 15 CullTraverser * 0 8576 15 CullTraverser * 15 CullTraverser * 0 0 3541 0 0 0 0 0 0 0 0 0 0

3676 25 CullTraverserData const * 0 8576 25 CullTraverserData const * 25 CullTraverserData const * 0 0 3677 0 0 0 0 0 0 0 0 0 0

3677 23 CullTraverserData const 0 8832 23 CullTraverserData const 23 CullTraverserData const 0 0 3536 0 0 0 0 0 0 0 0 0 0

3678 23 AlphaTestAttrib const * 0 8576 23 AlphaTestAttrib const * 23 AlphaTestAttrib const * 0 0 3679 0 0 0 0 0 0 0 0 0 0

3679 21 AlphaTestAttrib const 0 8832 21 AlphaTestAttrib const 21 AlphaTestAttrib const 0 0 3486 0 0 0 0 0 0 0 0 0 0

3680 18 unsigned short int 0 8262 18 unsigned short int 18 unsigned short int 0 1 0 0 0 0 0 0 0 0 0 0 0

3681 23 AntialiasAttrib const * 0 8576 23 AntialiasAttrib const * 23 AntialiasAttrib const * 0 0 3682 0 0 0 0 0 0 0 0 0 0

3682 21 AntialiasAttrib const 0 8832 21 AntialiasAttrib const 21 AntialiasAttrib const 0 0 3487 0 0 0 0 0 0 0 0 0 0

3683 20 RenderEffect const * 0 8576 20 RenderEffect const * 20 RenderEffect const * 0 0 3684 0 0 0 0 0 0 0 0 0 0

3684 18 RenderEffect const 0 8832 18 RenderEffect const 18 RenderEffect const 0 0 3489 0 0 0 0 0 0 0 0 0 0

3685 21 RenderEffects const * 0 8576 21 RenderEffects const * 21 RenderEffects const * 0 0 3686 0 0 0 0 0 0 0 0 0 0

3686 19 RenderEffects const 0 8832 19 RenderEffects const 19 RenderEffects const 0 0 3490 0 0 0 0 0 0 0 0 0 0

3687 13 atomic string 0 2 13 atomic string 13 atomic string 0 7 0 0 0 0 0 0 0 0 0 0 0

3688 11 PandaNode * 0 8576 11 PandaNode * 11 PandaNode * 0 0 3491 0 0 0 0 0 0 0 0 0 0

3689 17 PandaNode const * 0 8576 17 PandaNode const * 17 PandaNode const * 0 0 3690 0 0 0 0 0 0 0 0 0 0

3690 15 PandaNode const 0 8832 15 PandaNode const 15 PandaNode const 0 0 3491 0 0 0 0 0 0 0 0 0 0

3691 8 Thread * 0 8576 8 Thread * 8 Thread * 0 0 3692 0 0 0 0 0 0 0 0 0 0

3692 6 Thread 0 2048 6 Thread 6 Thread 0 0 0 0 0 0 0 0 0 0 0 0 668
////////////////////////////////////////////////////////////////////
//       Class : Thread
// Description : A thread; that is, a lightweight process.  This is an
//               abstract base class; to use it, you must subclass
//               from it and redefine thread_main().
//
//               The thread itself will keep a reference count on the
//               Thread object while it is running; when the thread
//               returns from its root function, the Thread object
//               will automatically be destructed if no other pointers
//               are referencing it.
////////////////////////////////////////////////////////////////////

3693 15 vector_string * 0 8576 15 vector_string * 15 vector_string * 0 0 3694 0 0 0 0 0 0 0 0 0 0

3694 13 vector_string 0 2105344 13 vector_string 13 vector_string 0 0 3695 0 0 0 0 0 0 0 0 0 0

3695 16 vector< string > 0 2048 16 vector< string > 16 vector< string > 0 0 0 0 0 0 0 0 0 0 0 0 0

3696 12 unsigned int 0 8198 12 unsigned int 12 unsigned int 0 1 0 0 0 0 0 0 0 0 0 0 0

3697 8 DrawMask 0 2105344 8 DrawMask 8 DrawMask 0 0 3673 0 0 0 0 0 0 0 0 0 0

3698 10 DrawMask * 0 8576 10 DrawMask * 10 DrawMask * 0 0 3697 0 0 0 0 0 0 0 0 0 0

3699 13 CollideMask * 0 8576 13 CollideMask * 13 CollideMask * 0 0 3700 0 0 0 0 0 0 0 0 0 0

3700 11 CollideMask 0 2105344 11 CollideMask 11 CollideMask 0 0 3673 0 0 0 0 0 0 0 0 0 0

3701 27 GraphicsStateGuardianBase * 0 8576 27 GraphicsStateGuardianBase * 27 GraphicsStateGuardianBase * 0 0 3702 0 0 0 0 0 0 0 0 0 0

3702 25 GraphicsStateGuardianBase 0 2048 25 GraphicsStateGuardianBase 25 GraphicsStateGuardianBase 0 0 0 0 0 0 0 1 4137 0 0 0 0 957
////////////////////////////////////////////////////////////////////
//       Class : GraphicsStateGuardianBase
// Description : This is a base class for the GraphicsStateGuardian
//               class, which is itself a base class for the various
//               GSG's for different platforms.  This class contains
//               all the function prototypes to support the
//               double-dispatch of GSG to geoms, transitions, etc.  It
//               lives in a separate class in its own package so we
//               can avoid circular build dependency problems.
//
//               GraphicsStateGuardians are not actually writable to
//               bam files, of course, but they may be passed as event
//               parameters, so they inherit from
//               TypedWritableReferenceCount instead of
//               TypedReferenceCount for that convenience.
////////////////////////////////////////////////////////////////////

3703 10 BoundsType 0 794624 26 BoundingVolume::BoundsType 26 BoundingVolume::BoundsType 3704 0 0 0 0 0 0 0 0 0 5 10 BT_default 26 BoundingVolume::BT_default 0
0 7 BT_best 23 BoundingVolume::BT_best 0
1 9 BT_sphere 25 BoundingVolume::BT_sphere 0
2 6 BT_box 22 BoundingVolume::BT_box 0
3 10 BT_fastest 26 BoundingVolume::BT_fastest 0
4 0 80
// This enum is used to control the automatic generation of bounding
// volumes.

3704 14 BoundingVolume 0 2048 14 BoundingVolume 14 BoundingVolume 0 0 0 0 0 0 0 0 0 0 0 0 596
////////////////////////////////////////////////////////////////////
//       Class : BoundingVolume
// Description : This is an abstract class for any volume in any sense
//               which can be said to define the locality of reference
//               of a node in a graph, along with all of its
//               descendants.  It is not necessarily a geometric
//               volume (although see GeometricBoundingVolume); this
//               is simply an abstract interface for bounds of any
//               sort.
////////////////////////////////////////////////////////////////////

3705 22 BoundingVolume const * 0 8576 22 BoundingVolume const * 22 BoundingVolume const * 0 0 3706 0 0 0 0 0 0 0 0 0 0

3706 20 BoundingVolume const 0 8832 20 BoundingVolume const 20 BoundingVolume const 0 0 3704 0 0 0 0 0 0 0 0 0 0

3707 11 UpdateSeq * 0 8576 11 UpdateSeq * 11 UpdateSeq * 0 0 3708 0 0 0 0 0 0 0 0 0 0

3708 9 UpdateSeq 0 2048 9 UpdateSeq 9 UpdateSeq 0 0 0 0 0 0 0 0 0 0 0 0 1140
////////////////////////////////////////////////////////////////////
//       Class : UpdateSeq
// Description : This is a sequence number that increments
//               monotonically.  It can be used to track cache
//               updates, or serve as a kind of timestamp for any
//               changing properties.
//
//               A special class is used instead of simply an int, so
//               we can elegantly handle such things as wraparound and
//               special cases.  There are two special cases.
//               Firstly, a sequence number is 'initial' when it is
//               first created.  This sequence is older than any other
//               sequence number.  Secondly, a sequence number may be
//               explicitly set to 'old'.  This is older than any
//               other sequence number except 'initial'.  Finally, we
//               have the explicit number 'fresh', which is newer
//               than any other sequence number.  All other sequences
//               are numeric and are monotonically increasing.
////////////////////////////////////////////////////////////////////

3709 7 Light * 0 8576 7 Light * 7 Light * 0 0 3552 0 0 0 0 0 0 0 0 0 0

3710 11 BamReader * 0 8576 11 BamReader * 11 BamReader * 0 0 3711 0 0 0 0 0 0 0 0 0 0

3711 9 BamReader 0 2048 9 BamReader 9 BamReader 0 0 0 0 0 0 0 0 0 0 0 0 1870
////////////////////////////////////////////////////////////////////
//       Class : BamReader
// Description : This is the fundamental interface for extracting
//               binary objects from a Bam file, as generated by a
//               BamWriter.
//
//               A Bam file can be thought of as a linear collection
//               of objects.  Each object is an instance of a class
//               that inherits, directly or indirectly, from
//               TypedWritable.  The objects may include pointers to
//               other objects within the Bam file; the BamReader
//               automatically manages these (with help from code
//               within each class) and restores the pointers
//               correctly.
//
//               This is the abstract interface and does not
//               specifically deal with disk files, but rather with a
//               DatagramGenerator of some kind, which is simply a
//               linear source of Datagrams.  It is probably from a
//               disk file, but it might conceivably be streamed
//               directly from a network or some such nonsense.
//
//               Bam files are most often used to store scene graphs
//               or subgraphs, and by convention they are given
//               filenames ending in the extension ".bam" when they
//               are used for this purpose.  However, a Bam file may
//               store any arbitrary list of TypedWritable objects;
//               in this more general usage, they are given filenames
//               ending in ".boo" to differentiate them from the more
//               common scene graph files.
//
//               See also BamFile, which defines a higher-level
//               interface to read and write Bam files on disk.
////////////////////////////////////////////////////////////////////

3712 29 TypedWritableReferenceCount * 0 8576 29 TypedWritableReferenceCount * 29 TypedWritableReferenceCount * 0 0 3479 0 0 0 0 0 0 0 0 0 0

3713 9 Namable * 0 8576 9 Namable * 9 Namable * 0 0 3492 0 0 0 0 0 0 0 0 0 0

3714 16 LinkedListNode * 0 8576 16 LinkedListNode * 16 LinkedListNode * 0 0 3493 0 0 0 0 0 0 0 0 0 0

3715 26 TransparencyAttrib const * 0 8576 26 TransparencyAttrib const * 26 TransparencyAttrib const * 0 0 3716 0 0 0 0 0 0 0 0 0 0

3716 24 TransparencyAttrib const 0 8832 24 TransparencyAttrib const 24 TransparencyAttrib const 0 0 3496 0 0 0 0 0 0 0 0 0 0

3717 20 InternalName const * 0 8576 20 InternalName const * 20 InternalName const * 0 0 3718 0 0 0 0 0 0 0 0 0 0

3718 18 InternalName const 0 8832 18 InternalName const 18 InternalName const 0 0 3719 0 0 0 0 0 0 0 0 0 0

3719 12 InternalName 0 2048 12 InternalName 12 InternalName 0 0 0 0 0 0 0 0 0 0 0 0 837
////////////////////////////////////////////////////////////////////
//       Class : InternalName
// Description : Encodes a string name in a hash table, mapping it to
//               a pointer.  This is used to tokenify names so they
//               may be used efficiently in low-level Panda
//               structures, for instance to differentiate the
//               multiple sets of texture coordinates that might be
//               stored on a Geom.
//
//               InternalNames are hierarchical, with the '.' used by
//               convention as a separator character.  You can
//               construct a single InternalName as a composition of
//               one or more other names, or by giving it a source
//               string directly.
////////////////////////////////////////////////////////////////////

3720 17 LMatrix3d const * 0 8576 17 LMatrix3d const * 17 LMatrix3d const * 0 0 3721 0 0 0 0 0 0 0 0 0 0

3721 15 LMatrix3d const 0 8832 15 LMatrix3d const 15 LMatrix3d const 0 0 3722 0 0 0 0 0 0 0 0 0 0

3722 9 LMatrix3d 0 2048 9 LMatrix3d 9 LMatrix3d 0 0 0 0 0 0 0 4 4138 4139 4140 4141 0 0 0 0 462
////////////////////////////////////////////////////////////////////
//       Class : LMatrix3
// Description : This is a 3-by-3 transform matrix.  It typically will
//               represent either a rotation-and-scale (no
//               translation) matrix in 3-d, or a full affine matrix
//               (rotation, scale, translation) in 2-d, e.g. for a
//               texture matrix.
////////////////////////////////////////////////////////////////////

3723 13 ShaderInput * 0 8576 13 ShaderInput * 13 ShaderInput * 0 0 3498 0 0 0 0 0 0 0 0 0 0

3724 17 LMatrix3f const * 0 8576 17 LMatrix3f const * 17 LMatrix3f const * 0 0 3725 0 0 0 0 0 0 0 0 0 0

3725 15 LMatrix3f const 0 8832 15 LMatrix3f const 15 LMatrix3f const 0 0 3635 0 0 0 0 0 0 0 0 0 0

3726 17 LMatrix4d const * 0 8576 17 LMatrix4d const * 17 LMatrix4d const * 0 0 3727 0 0 0 0 0 0 0 0 0 0

3727 15 LMatrix4d const 0 8832 15 LMatrix4d const 15 LMatrix4d const 0 0 3728 0 0 0 0 0 0 0 0 0 0

3728 9 LMatrix4d 0 2048 9 LMatrix4d 9 LMatrix4d 0 0 0 0 0 0 0 3 4142 4143 4144 0 0 0 0 215
////////////////////////////////////////////////////////////////////
//       Class : LMatrix4
// Description : This is a 4-by-4 transform matrix.
////////////////////////////////////////////////////////////////////

3729 17 LMatrix4f const * 0 8576 17 LMatrix4f const * 17 LMatrix4f const * 0 0 3730 0 0 0 0 0 0 0 0 0 0

3730 15 LMatrix4f const 0 8832 15 LMatrix4f const 15 LMatrix4f const 0 0 3627 0 0 0 0 0 0 0 0 0 0

3731 18 LVecBase2d const * 0 8576 18 LVecBase2d const * 18 LVecBase2d const * 0 0 3732 0 0 0 0 0 0 0 0 0 0

3732 16 LVecBase2d const 0 8832 16 LVecBase2d const 16 LVecBase2d const 0 0 3733 0 0 0 0 0 0 0 0 0 0

3733 10 LVecBase2d 0 2048 10 LVecBase2d 10 LVecBase2d 0 0 0 0 0 0 0 0 0 0 0 0 263
////////////////////////////////////////////////////////////////////
//       Class : LVecBase2
// Description : This is the base class for all two-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

3734 18 LVecBase2f const * 0 8576 18 LVecBase2f const * 18 LVecBase2f const * 0 0 3735 0 0 0 0 0 0 0 0 0 0

3735 16 LVecBase2f const 0 8832 16 LVecBase2f const 16 LVecBase2f const 0 0 3631 0 0 0 0 0 0 0 0 0 0

3736 18 LVecBase2i const * 0 8576 18 LVecBase2i const * 18 LVecBase2i const * 0 0 3737 0 0 0 0 0 0 0 0 0 0

3737 16 LVecBase2i const 0 8832 16 LVecBase2i const 16 LVecBase2i const 0 0 3738 0 0 0 0 0 0 0 0 0 0

3738 10 LVecBase2i 0 2048 10 LVecBase2i 10 LVecBase2i 0 0 0 0 0 0 0 0 0 0 0 0 263
////////////////////////////////////////////////////////////////////
//       Class : LVecBase2
// Description : This is the base class for all two-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

3739 18 LVecBase3d const * 0 8576 18 LVecBase3d const * 18 LVecBase3d const * 0 0 3740 0 0 0 0 0 0 0 0 0 0

3740 16 LVecBase3d const 0 8832 16 LVecBase3d const 16 LVecBase3d const 0 0 3741 0 0 0 0 0 0 0 0 0 0

3741 10 LVecBase3d 0 2048 10 LVecBase3d 10 LVecBase3d 0 0 0 0 0 0 0 0 0 0 0 0 265
////////////////////////////////////////////////////////////////////
//       Class : LVecBase3
// Description : This is the base class for all three-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

3742 18 LVecBase3f const * 0 8576 18 LVecBase3f const * 18 LVecBase3f const * 0 0 3743 0 0 0 0 0 0 0 0 0 0

3743 16 LVecBase3f const 0 8832 16 LVecBase3f const 16 LVecBase3f const 0 0 3617 0 0 0 0 0 0 0 0 0 0

3744 18 LVecBase3i const * 0 8576 18 LVecBase3i const * 18 LVecBase3i const * 0 0 3745 0 0 0 0 0 0 0 0 0 0

3745 16 LVecBase3i const 0 8832 16 LVecBase3i const 16 LVecBase3i const 0 0 3746 0 0 0 0 0 0 0 0 0 0

3746 10 LVecBase3i 0 2048 10 LVecBase3i 10 LVecBase3i 0 0 0 0 0 0 0 0 0 0 0 0 265
////////////////////////////////////////////////////////////////////
//       Class : LVecBase3
// Description : This is the base class for all three-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

3747 18 LVecBase4d const * 0 8576 18 LVecBase4d const * 18 LVecBase4d const * 0 0 3748 0 0 0 0 0 0 0 0 0 0

3748 16 LVecBase4d const 0 8832 16 LVecBase4d const 16 LVecBase4d const 0 0 3749 0 0 0 0 0 0 0 0 0 0

3749 10 LVecBase4d 0 2048 10 LVecBase4d 10 LVecBase4d 0 0 0 0 0 0 0 0 0 0 0 0 265
////////////////////////////////////////////////////////////////////
//       Class : LVecBase4
// Description : This is the base class for all three-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

3750 18 LVecBase4f const * 0 8576 18 LVecBase4f const * 18 LVecBase4f const * 0 0 3751 0 0 0 0 0 0 0 0 0 0

3751 16 LVecBase4f const 0 8832 16 LVecBase4f const 16 LVecBase4f const 0 0 3663 0 0 0 0 0 0 0 0 0 0

3752 18 LVecBase4i const * 0 8576 18 LVecBase4i const * 18 LVecBase4i const * 0 0 3753 0 0 0 0 0 0 0 0 0 0

3753 16 LVecBase4i const 0 8832 16 LVecBase4i const 16 LVecBase4i const 0 0 3754 0 0 0 0 0 0 0 0 0 0

3754 10 LVecBase4i 0 2048 10 LVecBase4i 10 LVecBase4i 0 0 0 0 0 0 0 0 0 0 0 0 265
////////////////////////////////////////////////////////////////////
//       Class : LVecBase4
// Description : This is the base class for all three-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

3755 16 NodePath const * 0 8576 16 NodePath const * 16 NodePath const * 0 0 3756 0 0 0 0 0 0 0 0 0 0

3756 14 NodePath const 0 8832 14 NodePath const 14 NodePath const 0 0 3502 0 0 0 0 0 0 0 0 0 0

3757 21 PTA_LMatrix3d const * 0 8576 21 PTA_LMatrix3d const * 21 PTA_LMatrix3d const * 0 0 3758 0 0 0 0 0 0 0 0 0 0

3758 19 PTA_LMatrix3d const 0 8832 19 PTA_LMatrix3d const 19 PTA_LMatrix3d const 0 0 3759 0 0 0 0 0 0 0 0 0 0

3759 13 PTA_LMatrix3d 0 2105344 13 PTA_LMatrix3d 13 PTA_LMatrix3d 0 0 3760 0 0 0 0 0 0 0 0 0 0

3760 27 PointerToArray< LMatrix3d > 0 2048 27 PointerToArray< LMatrix3d > 27 PointerToArray< LMatrix3d > 0 0 0 0 0 0 0 0 0 0 0 0 0

3761 21 PTA_LMatrix3f const * 0 8576 21 PTA_LMatrix3f const * 21 PTA_LMatrix3f const * 0 0 3762 0 0 0 0 0 0 0 0 0 0

3762 19 PTA_LMatrix3f const 0 8832 19 PTA_LMatrix3f const 19 PTA_LMatrix3f const 0 0 3763 0 0 0 0 0 0 0 0 0 0

3763 13 PTA_LMatrix3f 0 2105344 13 PTA_LMatrix3f 13 PTA_LMatrix3f 0 0 3764 0 0 0 0 0 0 0 0 0 0

3764 27 PointerToArray< LMatrix3f > 0 2048 27 PointerToArray< LMatrix3f > 27 PointerToArray< LMatrix3f > 0 0 0 0 0 0 0 0 0 0 0 0 0

3765 21 PTA_LMatrix4d const * 0 8576 21 PTA_LMatrix4d const * 21 PTA_LMatrix4d const * 0 0 3766 0 0 0 0 0 0 0 0 0 0

3766 19 PTA_LMatrix4d const 0 8832 19 PTA_LMatrix4d const 19 PTA_LMatrix4d const 0 0 3767 0 0 0 0 0 0 0 0 0 0

3767 13 PTA_LMatrix4d 0 2105344 13 PTA_LMatrix4d 13 PTA_LMatrix4d 0 0 3768 0 0 0 0 0 0 0 0 0 0

3768 36 PointerToArray< UnalignedLMatrix4d > 0 2048 36 PointerToArray< UnalignedLMatrix4d > 36 PointerToArray< UnalignedLMatrix4d > 0 0 0 0 0 0 0 0 0 0 0 0 0

3769 21 PTA_LMatrix4f const * 0 8576 21 PTA_LMatrix4f const * 21 PTA_LMatrix4f const * 0 0 3770 0 0 0 0 0 0 0 0 0 0

3770 19 PTA_LMatrix4f const 0 8832 19 PTA_LMatrix4f const 19 PTA_LMatrix4f const 0 0 3771 0 0 0 0 0 0 0 0 0 0

3771 13 PTA_LMatrix4f 0 2105344 13 PTA_LMatrix4f 13 PTA_LMatrix4f 0 0 3772 0 0 0 0 0 0 0 0 0 0

3772 36 PointerToArray< UnalignedLMatrix4f > 0 2048 36 PointerToArray< UnalignedLMatrix4f > 36 PointerToArray< UnalignedLMatrix4f > 0 0 0 0 0 0 0 0 0 0 0 0 0

3773 22 PTA_LVecBase2d const * 0 8576 22 PTA_LVecBase2d const * 22 PTA_LVecBase2d const * 0 0 3774 0 0 0 0 0 0 0 0 0 0

3774 20 PTA_LVecBase2d const 0 8832 20 PTA_LVecBase2d const 20 PTA_LVecBase2d const 0 0 3775 0 0 0 0 0 0 0 0 0 0

3775 14 PTA_LVecBase2d 0 2105344 14 PTA_LVecBase2d 14 PTA_LVecBase2d 0 0 3776 0 0 0 0 0 0 0 0 0 0

3776 28 PointerToArray< LVecBase2d > 0 2048 28 PointerToArray< LVecBase2d > 28 PointerToArray< LVecBase2d > 0 0 0 0 0 0 0 0 0 0 0 0 0

3777 22 PTA_LVecBase2f const * 0 8576 22 PTA_LVecBase2f const * 22 PTA_LVecBase2f const * 0 0 3778 0 0 0 0 0 0 0 0 0 0

3778 20 PTA_LVecBase2f const 0 8832 20 PTA_LVecBase2f const 20 PTA_LVecBase2f const 0 0 3779 0 0 0 0 0 0 0 0 0 0

3779 14 PTA_LVecBase2f 0 2105344 14 PTA_LVecBase2f 14 PTA_LVecBase2f 0 0 3780 0 0 0 0 0 0 0 0 0 0

3780 28 PointerToArray< LVecBase2f > 0 2048 28 PointerToArray< LVecBase2f > 28 PointerToArray< LVecBase2f > 0 0 0 0 0 0 0 0 0 0 0 0 0

3781 22 PTA_LVecBase2i const * 0 8576 22 PTA_LVecBase2i const * 22 PTA_LVecBase2i const * 0 0 3782 0 0 0 0 0 0 0 0 0 0

3782 20 PTA_LVecBase2i const 0 8832 20 PTA_LVecBase2i const 20 PTA_LVecBase2i const 0 0 3783 0 0 0 0 0 0 0 0 0 0

3783 14 PTA_LVecBase2i 0 2105344 14 PTA_LVecBase2i 14 PTA_LVecBase2i 0 0 3784 0 0 0 0 0 0 0 0 0 0

3784 28 PointerToArray< LVecBase2i > 0 2048 28 PointerToArray< LVecBase2i > 28 PointerToArray< LVecBase2i > 0 0 0 0 0 0 0 0 0 0 0 0 0

3785 22 PTA_LVecBase3d const * 0 8576 22 PTA_LVecBase3d const * 22 PTA_LVecBase3d const * 0 0 3786 0 0 0 0 0 0 0 0 0 0

3786 20 PTA_LVecBase3d const 0 8832 20 PTA_LVecBase3d const 20 PTA_LVecBase3d const 0 0 3787 0 0 0 0 0 0 0 0 0 0

3787 14 PTA_LVecBase3d 0 2105344 14 PTA_LVecBase3d 14 PTA_LVecBase3d 0 0 3788 0 0 0 0 0 0 0 0 0 0

3788 28 PointerToArray< LVecBase3d > 0 2048 28 PointerToArray< LVecBase3d > 28 PointerToArray< LVecBase3d > 0 0 0 0 0 0 0 0 0 0 0 0 0

3789 22 PTA_LVecBase3f const * 0 8576 22 PTA_LVecBase3f const * 22 PTA_LVecBase3f const * 0 0 3790 0 0 0 0 0 0 0 0 0 0

3790 20 PTA_LVecBase3f const 0 8832 20 PTA_LVecBase3f const 20 PTA_LVecBase3f const 0 0 3791 0 0 0 0 0 0 0 0 0 0

3791 14 PTA_LVecBase3f 0 2105344 14 PTA_LVecBase3f 14 PTA_LVecBase3f 0 0 3792 0 0 0 0 0 0 0 0 0 0

3792 28 PointerToArray< LVecBase3f > 0 2048 28 PointerToArray< LVecBase3f > 28 PointerToArray< LVecBase3f > 0 0 0 0 0 0 0 0 0 0 0 0 0

3793 22 PTA_LVecBase3i const * 0 8576 22 PTA_LVecBase3i const * 22 PTA_LVecBase3i const * 0 0 3794 0 0 0 0 0 0 0 0 0 0

3794 20 PTA_LVecBase3i const 0 8832 20 PTA_LVecBase3i const 20 PTA_LVecBase3i const 0 0 3795 0 0 0 0 0 0 0 0 0 0

3795 14 PTA_LVecBase3i 0 2105344 14 PTA_LVecBase3i 14 PTA_LVecBase3i 0 0 3796 0 0 0 0 0 0 0 0 0 0

3796 28 PointerToArray< LVecBase3i > 0 2048 28 PointerToArray< LVecBase3i > 28 PointerToArray< LVecBase3i > 0 0 0 0 0 0 0 0 0 0 0 0 0

3797 22 PTA_LVecBase4d const * 0 8576 22 PTA_LVecBase4d const * 22 PTA_LVecBase4d const * 0 0 3798 0 0 0 0 0 0 0 0 0 0

3798 20 PTA_LVecBase4d const 0 8832 20 PTA_LVecBase4d const 20 PTA_LVecBase4d const 0 0 3799 0 0 0 0 0 0 0 0 0 0

3799 14 PTA_LVecBase4d 0 2105344 14 PTA_LVecBase4d 14 PTA_LVecBase4d 0 0 3800 0 0 0 0 0 0 0 0 0 0

3800 37 PointerToArray< UnalignedLVecBase4d > 0 2048 37 PointerToArray< UnalignedLVecBase4d > 37 PointerToArray< UnalignedLVecBase4d > 0 0 0 0 0 0 0 0 0 0 0 0 0

3801 22 PTA_LVecBase4f const * 0 8576 22 PTA_LVecBase4f const * 22 PTA_LVecBase4f const * 0 0 3802 0 0 0 0 0 0 0 0 0 0

3802 20 PTA_LVecBase4f const 0 8832 20 PTA_LVecBase4f const 20 PTA_LVecBase4f const 0 0 3803 0 0 0 0 0 0 0 0 0 0

3803 14 PTA_LVecBase4f 0 2105344 14 PTA_LVecBase4f 14 PTA_LVecBase4f 0 0 3804 0 0 0 0 0 0 0 0 0 0

3804 37 PointerToArray< UnalignedLVecBase4f > 0 2048 37 PointerToArray< UnalignedLVecBase4f > 37 PointerToArray< UnalignedLVecBase4f > 0 0 0 0 0 0 0 0 0 0 0 0 0

3805 22 PTA_LVecBase4i const * 0 8576 22 PTA_LVecBase4i const * 22 PTA_LVecBase4i const * 0 0 3806 0 0 0 0 0 0 0 0 0 0

3806 20 PTA_LVecBase4i const 0 8832 20 PTA_LVecBase4i const 20 PTA_LVecBase4i const 0 0 3807 0 0 0 0 0 0 0 0 0 0

3807 14 PTA_LVecBase4i 0 2105344 14 PTA_LVecBase4i 14 PTA_LVecBase4i 0 0 3808 0 0 0 0 0 0 0 0 0 0

3808 37 PointerToArray< UnalignedLVecBase4i > 0 2048 37 PointerToArray< UnalignedLVecBase4i > 37 PointerToArray< UnalignedLVecBase4i > 0 0 0 0 0 0 0 0 0 0 0 0 0

3809 18 PTA_double const * 0 8576 18 PTA_double const * 18 PTA_double const * 0 0 3810 0 0 0 0 0 0 0 0 0 0

3810 16 PTA_double const 0 8832 16 PTA_double const 16 PTA_double const 0 0 3811 0 0 0 0 0 0 0 0 0 0

3811 10 PTA_double 0 2105344 10 PTA_double 10 PTA_double 0 0 3812 0 0 0 0 0 0 0 0 0 0

3812 24 PointerToArray< double > 0 2048 24 PointerToArray< double > 24 PointerToArray< double > 0 0 0 0 0 0 0 0 0 0 0 0 0

3813 17 PTA_float const * 0 8576 17 PTA_float const * 17 PTA_float const * 0 0 3814 0 0 0 0 0 0 0 0 0 0

3814 15 PTA_float const 0 8832 15 PTA_float const 15 PTA_float const 0 0 3815 0 0 0 0 0 0 0 0 0 0

3815 9 PTA_float 0 2105344 9 PTA_float 9 PTA_float 0 0 3816 0 0 0 0 0 0 0 0 0 0

3816 23 PointerToArray< float > 0 2048 23 PointerToArray< float > 23 PointerToArray< float > 0 0 0 0 0 0 0 0 0 0 0 0 0

3817 15 PTA_int const * 0 8576 15 PTA_int const * 15 PTA_int const * 0 0 3818 0 0 0 0 0 0 0 0 0 0

3818 13 PTA_int const 0 8832 13 PTA_int const 13 PTA_int const 0 0 3819 0 0 0 0 0 0 0 0 0 0

3819 7 PTA_int 0 2105344 7 PTA_int 7 PTA_int 0 0 3820 0 0 0 0 0 0 0 0 0 0

3820 21 PointerToArray< int > 0 2048 21 PointerToArray< int > 21 PointerToArray< int > 0 0 0 0 0 0 0 0 0 0 0 0 0

3821 16 ParamValueBase * 0 8576 16 ParamValueBase * 16 ParamValueBase * 0 0 3596 0 0 0 0 0 0 0 0 0 0

3822 9 Texture * 0 8576 9 Texture * 9 Texture * 0 0 3823 0 0 0 0 0 0 0 0 0 0

3823 7 Texture 0 2048 7 Texture 7 Texture 0 0 0 0 0 0 0 0 0 0 0 0 1051
////////////////////////////////////////////////////////////////////
//       Class : Texture
// Description : Represents a texture object, which is typically a
//               single 2-d image but may also represent a 1-d or 3-d
//               texture image, or the six 2-d faces of a cube map
//               texture.
//
//               A texture's image data might be stored in system RAM
//               (see get_ram_image()) or its image may be represented
//               in texture memory on one or more
//               GraphicsStateGuardians (see prepare()), or both.  The
//               typical usage pattern is that a texture is loaded
//               from an image file on disk, which copies its image
//               data into system RAM; then the first time the texture
//               is rendered its image data is copied to texture
//               memory (actually, to the graphics API), and the
//               system RAM image is automatically freed.
////////////////////////////////////////////////////////////////////

3824 20 SamplerState const * 0 8576 20 SamplerState const * 20 SamplerState const * 0 0 3825 0 0 0 0 0 0 0 0 0 0

3825 18 SamplerState const 0 8832 18 SamplerState const 18 SamplerState const 0 0 3826 0 0 0 0 0 0 0 0 0 0

3826 12 SamplerState 0 2048 12 SamplerState 12 SamplerState 0 0 0 0 0 0 0 0 0 0 0 0 395
////////////////////////////////////////////////////////////////////
//       Class : SamplerState
// Description : Represents a set of settings that indicate how a
//               texture is sampled.  This can be used to sample the
//               same texture using different settings in different
//               places.
////////////////////////////////////////////////////////////////////

3827 17 ShaderInput const 0 8832 17 ShaderInput const 17 ShaderInput const 0 0 3498 0 0 0 0 0 0 0 0 0 0

3828 19 ShaderInput const * 0 8576 19 ShaderInput const * 19 ShaderInput const * 0 0 3827 0 0 0 0 0 0 0 0 0 0

3829 17 LVecBase4 const * 0 8576 17 LVecBase4 const * 17 LVecBase4 const * 0 0 3830 0 0 0 0 0 0 0 0 0 0

3830 15 LVecBase4 const 0 8832 15 LVecBase4 const 15 LVecBase4 const 0 0 3831 0 0 0 0 0 0 0 0 0 0

3831 9 LVecBase4 0 2105344 9 LVecBase4 9 LVecBase4 0 0 3663 0 0 0 0 0 0 0 0 0 0

3832 21 ShaderPtrData const * 0 8576 29 Shader::ShaderPtrData const * 29 Shader::ShaderPtrData const * 0 0 3833 0 0 0 0 0 0 0 0 0 0

3833 19 ShaderPtrData const 0 8832 27 Shader::ShaderPtrData const 27 Shader::ShaderPtrData const 0 0 3834 0 0 0 0 0 0 0 0 0 0

3834 13 ShaderPtrData 0 263168 21 Shader::ShaderPtrData 21 Shader::ShaderPtrData 3835 0 0 0 0 0 0 0 0 0 0 0 60
// Container structure for data of parameters ShaderPtrSpec.

3835 6 Shader 0 2048 6 Shader 6 Shader 0 0 0 0 0 0 0 0 0 0 0 0 418
////////////////////////////////////////////////////////////////////
//       Class : Shader
//      Summary: The Shader class is meant to select the Shader Language,
//               select the available profile, compile the shader, and
//               finally compile and store the shader parameters
//               in the appropriate structure.
////////////////////////////////////////////////////////////////////

3836 24 TextureStageCollection * 0 8576 24 TextureStageCollection * 24 TextureStageCollection * 0 0 3501 0 0 0 0 0 0 0 0 0 0

3837 30 TextureStageCollection const * 0 8576 30 TextureStageCollection const * 30 TextureStageCollection const * 0 0 3838 0 0 0 0 0 0 0 0 0 0

3838 28 TextureStageCollection const 0 8832 28 TextureStageCollection const 28 TextureStageCollection const 0 0 3501 0 0 0 0 0 0 0 0 0 0

3839 10 NodePath * 0 8576 10 NodePath * 10 NodePath * 0 0 3502 0 0 0 0 0 0 0 0 0 0

3840 20 NodePathCollection * 0 8576 20 NodePathCollection * 20 NodePathCollection * 0 0 3573 0 0 0 0 0 0 0 0 0 0

3841 9 LPoint3 * 0 8576 9 LPoint3 * 9 LPoint3 * 0 0 3638 0 0 0 0 0 0 0 0 0 0

3842 8 LVector3 0 2105344 8 LVector3 8 LVector3 0 0 3843 0 0 0 0 0 0 0 0 0 0

3843 9 LVector3f 0 2048 9 LVector3f 9 LVector3f 0 0 0 0 0 0 0 0 0 0 0 0 598
////////////////////////////////////////////////////////////////////
//       Class : LVector3
// Description : This is a three-component vector distance (as opposed
//               to a three-component point, which represents a
//               particular point in space).  Some of the methods are
//               slightly different between LPoint3 and LVector3; in
//               particular, subtraction of two points yields a
//               vector, while addition of a vector and a point yields
//               a point.
////////////////////////////////////////////////////////////////////

3844 10 LVector3 * 0 8576 10 LVector3 * 10 LVector3 * 0 0 3842 0 0 0 0 0 0 0 0 0 0

3845 11 LVecBase3 * 0 8576 11 LVecBase3 * 11 LVecBase3 * 0 0 3616 0 0 0 0 0 0 0 0 0 0

3846 13 LQuaternion * 0 8576 13 LQuaternion * 13 LQuaternion * 0 0 3620 0 0 0 0 0 0 0 0 0 0

3847 10 LMatrix4 * 0 8576 10 LMatrix4 * 10 LMatrix4 * 0 0 3626 0 0 0 0 0 0 0 0 0 0

3848 16 LVector3 const * 0 8576 16 LVector3 const * 16 LVector3 const * 0 0 3849 0 0 0 0 0 0 0 0 0 0

3849 14 LVector3 const 0 8832 14 LVector3 const 14 LVector3 const 0 0 3842 0 0 0 0 0 0 0 0 0 0

3850 8 LColor * 0 8576 8 LColor * 8 LColor * 0 0 3661 0 0 0 0 0 0 0 0 0 0

3851 14 Shader const * 0 8576 14 Shader const * 14 Shader const * 0 0 3852 0 0 0 0 0 0 0 0 0 0

3852 12 Shader const 0 8832 12 Shader const 12 Shader const 0 0 3835 0 0 0 0 0 0 0 0 0 0

3853 11 BitMask32 * 0 8576 11 BitMask32 * 11 BitMask32 * 0 0 3673 0 0 0 0 0 0 0 0 0 0

3854 20 PTA_LMatrix3 const * 0 8576 20 PTA_LMatrix3 const * 20 PTA_LMatrix3 const * 0 0 3855 0 0 0 0 0 0 0 0 0 0

3855 18 PTA_LMatrix3 const 0 8832 18 PTA_LMatrix3 const 18 PTA_LMatrix3 const 0 0 3856 0 0 0 0 0 0 0 0 0 0

3856 12 PTA_LMatrix3 0 2105344 12 PTA_LMatrix3 12 PTA_LMatrix3 0 0 3763 0 0 0 0 0 0 0 0 0 0

3857 20 PTA_LMatrix4 const * 0 8576 20 PTA_LMatrix4 const * 20 PTA_LMatrix4 const * 0 0 3858 0 0 0 0 0 0 0 0 0 0

3858 18 PTA_LMatrix4 const 0 8832 18 PTA_LMatrix4 const 18 PTA_LMatrix4 const 0 0 3859 0 0 0 0 0 0 0 0 0 0

3859 12 PTA_LMatrix4 0 2105344 12 PTA_LMatrix4 12 PTA_LMatrix4 0 0 3771 0 0 0 0 0 0 0 0 0 0

3860 21 PTA_LVecBase2 const * 0 8576 21 PTA_LVecBase2 const * 21 PTA_LVecBase2 const * 0 0 3861 0 0 0 0 0 0 0 0 0 0

3861 19 PTA_LVecBase2 const 0 8832 19 PTA_LVecBase2 const 19 PTA_LVecBase2 const 0 0 3862 0 0 0 0 0 0 0 0 0 0

3862 13 PTA_LVecBase2 0 2105344 13 PTA_LVecBase2 13 PTA_LVecBase2 0 0 3779 0 0 0 0 0 0 0 0 0 0

3863 21 PTA_LVecBase3 const * 0 8576 21 PTA_LVecBase3 const * 21 PTA_LVecBase3 const * 0 0 3864 0 0 0 0 0 0 0 0 0 0

3864 19 PTA_LVecBase3 const 0 8832 19 PTA_LVecBase3 const 19 PTA_LVecBase3 const 0 0 3865 0 0 0 0 0 0 0 0 0 0

3865 13 PTA_LVecBase3 0 2105344 13 PTA_LVecBase3 13 PTA_LVecBase3 0 0 3791 0 0 0 0 0 0 0 0 0 0

3866 21 PTA_LVecBase4 const * 0 8576 21 PTA_LVecBase4 const * 21 PTA_LVecBase4 const * 0 0 3867 0 0 0 0 0 0 0 0 0 0

3867 19 PTA_LVecBase4 const 0 8832 19 PTA_LVecBase4 const 19 PTA_LVecBase4 const 0 0 3868 0 0 0 0 0 0 0 0 0 0

3868 13 PTA_LVecBase4 0 2105344 13 PTA_LVecBase4 13 PTA_LVecBase4 0 0 3803 0 0 0 0 0 0 0 0 0 0

3869 18 LTexCoord3 const * 0 8576 18 LTexCoord3 const * 18 LTexCoord3 const * 0 0 3870 0 0 0 0 0 0 0 0 0 0

3870 16 LTexCoord3 const 0 8832 16 LTexCoord3 const 16 LTexCoord3 const 0 0 3871 0 0 0 0 0 0 0 0 0 0

3871 10 LTexCoord3 0 2105344 10 LTexCoord3 10 LTexCoord3 0 0 3872 0 0 0 0 0 0 0 0 0 0

3872 11 LTexCoord3f 0 2105344 11 LTexCoord3f 11 LTexCoord3f 0 0 3639 0 0 0 0 0 0 0 0 0 0

3873 24 InternalNameCollection * 0 8576 24 InternalNameCollection * 24 InternalNameCollection * 0 0 3551 0 0 0 0 0 0 0 0 0 0

3874 17 TextureCollection 0 2048 17 TextureCollection 17 TextureCollection 0 0 0 0 0 0 0 1 4145 0 0 0 0 290
////////////////////////////////////////////////////////////////////
//       Class : TextureCollection
// Description : Manages a list of Texture objects, as returned by
//               TexturePool::find_all_textures().
////////////////////////////////////////////////////////////////////

3875 19 TextureCollection * 0 8576 19 TextureCollection * 19 TextureCollection * 0 0 3874 0 0 0 0 0 0 0 0 0 0

3876 8 Material 0 2048 8 Material 8 Material 0 0 0 0 0 0 0 0 0 0 0 0 373
////////////////////////////////////////////////////////////////////
//       Class : Material
// Description : Defines the way an object appears in the presence of
//               lighting.  A material is only necessary if lighting
//               is to be enabled; otherwise, the material isn't used.
////////////////////////////////////////////////////////////////////

3877 10 Material * 0 8576 10 Material * 10 Material * 0 0 3876 0 0 0 0 0 0 0 0 0 0

3878 20 MaterialCollection * 0 8576 20 MaterialCollection * 20 MaterialCollection * 0 0 3563 0 0 0 0 0 0 0 0 0 0

3879 5 Fog * 0 8576 5 Fog * 5 Fog * 0 0 3538 0 0 0 0 0 0 0 0 0 0

3880 16 BoundingVolume * 0 8576 16 BoundingVolume * 16 BoundingVolume * 0 0 3704 0 0 0 0 0 0 0 0 0 0

3881 16 Filename const * 0 8576 16 Filename const * 16 Filename const * 0 0 3882 0 0 0 0 0 0 0 0 0 0

3882 14 Filename const 0 8832 14 Filename const 14 Filename const 0 0 3883 0 0 0 0 0 0 0 0 0 0

3883 8 Filename 0 2048 8 Filename 8 Filename 0 0 0 0 0 0 0 0 0 0 0 0 869
////////////////////////////////////////////////////////////////////
//       Class : Filename
// Description : The name of a file, such as a texture file or an Egg
//               file.  Stores the full pathname, and includes
//               functions for extracting out the directory prefix
//               part and the file extension and stuff.
//
//               A Filename is also aware of the mapping between the
//               Unix-like filename convention we use internally, and
//               the local OS's specific filename convention, and it
//               knows how to perform basic OS-specific I/O, like
//               testing for file existence and searching a
//               searchpath, as well as the best way to open an
//               fstream for reading or writing.
////////////////////////////////////////////////////////////////////

3884 8 string * 0 8576 8 string * 8 string * 0 0 3885 0 0 0 0 0 0 0 0 0 0

3885 6 string 0 2105344 6 string 6 string 0 0 3886 0 0 0 0 0 0 0 0 0 0

3886 20 basic_string< char > 0 2048 20 basic_string< char > 20 basic_string< char > 0 0 0 0 0 0 0 0 0 0 0 0 0

3887 11 BamWriter * 0 8576 11 BamWriter * 11 BamWriter * 0 0 3888 0 0 0 0 0 0 0 0 0 0

3888 9 BamWriter 0 2048 9 BamWriter 9 BamWriter 0 0 0 0 0 0 0 0 0 0 0 0 1949
////////////////////////////////////////////////////////////////////
//       Class : BamWriter
// Description : This is the fundamental interface for writing binary
//               objects to a Bam file, to be extracted later by a
//               BamReader.
//
//               A Bam file can be thought of as a linear collection
//               of objects.  Each object is an instance of a class
//               that inherits, directly or indirectly, from
//               TypedWritable.  The objects may include pointers to
//               other objects; the BamWriter automatically manages
//               these (with help from code within each class) and
//               writes all referenced objects to the file in such a
//               way that the pointers may be correctly restored
//               later.
//
//               This is the abstract interface and does not
//               specifically deal with disk files, but rather with a
//               DatagramSink of some kind, which simply accepts a
//               linear stream of Datagrams.  It is probably written
//               to a disk file, but it might conceivably be streamed
//               directly to a network or some such nonsense.
//
//               Bam files are most often used to store scene graphs
//               or subgraphs, and by convention they are given
//               filenames ending in the extension ".bam" when they
//               are used for this purpose.  However, a Bam file may
//               store any arbitrary list of TypedWritable objects;
//               in this more general usage, they are given filenames
//               ending in ".boo" to differentiate them from the more
//               common scene graph files.
//
//               See also BamFile, which defines a higher-level
//               interface to read and write Bam files on disk.
////////////////////////////////////////////////////////////////////

3889 20 AttribNodeRegistry * 0 8576 20 AttribNodeRegistry * 20 AttribNodeRegistry * 0 0 3504 0 0 0 0 0 0 0 0 0 0

3890 26 AttribNodeRegistry const * 0 8576 26 AttribNodeRegistry const * 26 AttribNodeRegistry const * 0 0 3891 0 0 0 0 0 0 0 0 0 0

3891 24 AttribNodeRegistry const 0 8832 24 AttribNodeRegistry const 24 AttribNodeRegistry const 0 0 3504 0 0 0 0 0 0 0 0 0 0

3892 25 AudioVolumeAttrib const * 0 8576 25 AudioVolumeAttrib const * 25 AudioVolumeAttrib const * 0 0 3893 0 0 0 0 0 0 0 0 0 0

3893 23 AudioVolumeAttrib const 0 8832 23 AudioVolumeAttrib const 23 AudioVolumeAttrib const 0 0 3505 0 0 0 0 0 0 0 0 0 0

3894 25 AuxBitplaneAttrib const * 0 8576 25 AuxBitplaneAttrib const * 25 AuxBitplaneAttrib const * 0 0 3895 0 0 0 0 0 0 0 0 0 0

3895 23 AuxBitplaneAttrib const 0 8832 23 AuxBitplaneAttrib const 23 AuxBitplaneAttrib const 0 0 3506 0 0 0 0 0 0 0 0 0 0

3896 14 AuxSceneData * 0 8576 14 AuxSceneData * 14 AuxSceneData * 0 0 3508 0 0 0 0 0 0 0 0 0 0

3897 6 double 0 8194 6 double 6 double 0 3 0 0 0 0 0 0 0 0 0 0 0

3898 20 AuxSceneData const * 0 8576 20 AuxSceneData const * 20 AuxSceneData const * 0 0 3899 0 0 0 0 0 0 0 0 0 0

3899 18 AuxSceneData const 0 8832 18 AuxSceneData const 18 AuxSceneData const 0 0 3508 0 0 0 0 0 0 0 0 0 0

3900 9 BamFile * 0 8576 9 BamFile * 9 BamFile * 0 0 3510 0 0 0 0 0 0 0 0 0 0

3901 9 istream * 0 8576 9 istream * 9 istream * 0 0 3902 0 0 0 0 0 0 0 0 0 0

3902 7 istream 0 2048 7 istream 7 istream 0 0 0 0 0 0 0 0 0 0 0 0 0

3903 15 TypedWritable * 0 8576 15 TypedWritable * 15 TypedWritable * 0 0 3904 0 0 0 0 0 0 0 0 0 0

3904 13 TypedWritable 0 2048 13 TypedWritable 13 TypedWritable 0 0 0 0 0 0 0 0 0 0 0 0 341
////////////////////////////////////////////////////////////////////
//       Class : TypedWritable
// Description : Base class for objects that can be written to and
//               read from Bam files.
//
//               See also TypedObject for detailed instructions.
////////////////////////////////////////////////////////////////////

3905 15 BamFile const * 0 8576 15 BamFile const * 15 BamFile const * 0 0 3906 0 0 0 0 0 0 0 0 0 0

3906 13 BamFile const 0 8832 13 BamFile const 13 BamFile const 0 0 3510 0 0 0 0 0 0 0 0 0 0

3907 21 TypedWritable const * 0 8576 21 TypedWritable const * 21 TypedWritable const * 0 0 3908 0 0 0 0 0 0 0 0 0 0

3908 19 TypedWritable const 0 8832 19 TypedWritable const 19 TypedWritable const 0 0 3904 0 0 0 0 0 0 0 0 0 0

3909 9 BamEndian 0 794624 19 BamEnums::BamEndian 19 BamEnums::BamEndian 3511 0 0 0 0 0 0 0 0 0 3 12 BE_bigendian 22 BamEnums::BE_bigendian 0
0 15 BE_littleendian 25 BamEnums::BE_littleendian 0
1 9 BE_native 19 BamEnums::BE_native 0
1 0 345
// This defines an enumerated type used to represent the endianness of
// certain numeric values stored in a Bam file.  It really has only
// two possible values, either BE_bigendian or BE_littleendian; but
// through a preprocessor trick we also add BE_native, which is the
// same numerically as whichever value the hardware supports natively.

3910 23 BillboardEffect const * 0 8576 23 BillboardEffect const * 23 BillboardEffect const * 0 0 3911 0 0 0 0 0 0 0 0 0 0

3911 21 BillboardEffect const 0 8832 21 BillboardEffect const 21 BillboardEffect const 0 0 3512 0 0 0 0 0 0 0 0 0 0

3912 6 Lens * 0 8576 6 Lens * 6 Lens * 0 0 3913 0 0 0 0 0 0 0 0 0 0

3913 4 Lens 0 2048 4 Lens 4 Lens 0 0 0 0 0 0 0 0 0 0 0 0 668
////////////////////////////////////////////////////////////////////
//       Class : Lens
// Description : A base class for any number of different kinds of
//               lenses, linear and otherwise.  Presently, this
//               includes perspective and orthographic lenses.
//
//               A Lens object is the main part of a Camera node,
//               which defines the fundamental interface to
//               point-of-view for rendering.  Lenses are also used in
//               other contexts, however; for instance, a Spotlight is
//               also defined using a lens.
////////////////////////////////////////////////////////////////////

3914 10 LensNode * 0 8576 10 LensNode * 10 LensNode * 0 0 3513 0 0 0 0 0 0 0 0 0 0

3915 12 Lens const * 0 8576 12 Lens const * 12 Lens const * 0 0 3916 0 0 0 0 0 0 0 0 0 0

3916 10 Lens const 0 8832 10 Lens const 10 Lens const 0 0 3913 0 0 0 0 0 0 0 0 0 0

3917 16 LensNode const * 0 8576 16 LensNode const * 16 LensNode const * 0 0 3918 0 0 0 0 0 0 0 0 0 0

3918 14 LensNode const 0 8832 14 LensNode const 14 LensNode const 0 0 3513 0 0 0 0 0 0 0 0 0 0

3919 14 Camera const * 0 8576 14 Camera const * 14 Camera const * 0 0 3920 0 0 0 0 0 0 0 0 0 0

3920 12 Camera const 0 8832 12 Camera const 12 Camera const 0 0 3514 0 0 0 0 0 0 0 0 0 0

3921 8 Camera * 0 8576 8 Camera * 8 Camera * 0 0 3514 0 0 0 0 0 0 0 0 0 0

3922 17 DisplayRegionBase 0 2048 17 DisplayRegionBase 17 DisplayRegionBase 0 0 0 0 0 0 0 0 0 0 0 0 307
////////////////////////////////////////////////////////////////////
//       Class : DisplayRegionBase
// Description : An abstract base class for DisplayRegion, mainly so
//               we can store DisplayRegion pointers in a Camera.
////////////////////////////////////////////////////////////////////

3923 19 DisplayRegionBase * 0 8576 19 DisplayRegionBase * 19 DisplayRegionBase * 0 0 3922 0 0 0 0 0 0 0 0 0 0

3924 14 LPlane const * 0 8576 14 LPlane const * 14 LPlane const * 0 0 3925 0 0 0 0 0 0 0 0 0 0

3925 12 LPlane const 0 8832 12 LPlane const 12 LPlane const 0 0 3926 0 0 0 0 0 0 0 0 0 0

3926 6 LPlane 0 2105344 6 LPlane 6 LPlane 0 0 3927 0 0 0 0 0 0 0 0 0 0

3927 7 LPlanef 0 2048 7 LPlanef 7 LPlanef 0 0 0 0 0 0 0 0 0 0 0 0 302
////////////////////////////////////////////////////////////////////
//       Class : LPlane
// Description : An abstract mathematical description of a plane.  A
//               plane is defined by the equation Ax + By + Cz + D = 0.
////////////////////////////////////////////////////////////////////

3928 11 PlaneNode * 0 8576 11 PlaneNode * 11 PlaneNode * 0 0 3515 0 0 0 0 0 0 0 0 0 0

3929 17 PlaneNode const * 0 8576 17 PlaneNode const * 17 PlaneNode const * 0 0 3930 0 0 0 0 0 0 0 0 0 0

3930 15 PlaneNode const 0 8832 15 PlaneNode const 15 PlaneNode const 0 0 3515 0 0 0 0 0 0 0 0 0 0

3931 23 ClipPlaneAttrib const * 0 8576 23 ClipPlaneAttrib const * 23 ClipPlaneAttrib const * 0 0 3932 0 0 0 0 0 0 0 0 0 0

3932 21 ClipPlaneAttrib const 0 8832 21 ClipPlaneAttrib const 21 ClipPlaneAttrib const 0 0 3517 0 0 0 0 0 0 0 0 0 0

3933 19 ColorAttrib const * 0 8576 19 ColorAttrib const * 19 ColorAttrib const * 0 0 3934 0 0 0 0 0 0 0 0 0 0

3934 17 ColorAttrib const 0 8832 17 ColorAttrib const 17 ColorAttrib const 0 0 3519 0 0 0 0 0 0 0 0 0 0

3935 24 ColorBlendAttrib const * 0 8576 24 ColorBlendAttrib const * 24 ColorBlendAttrib const * 0 0 3936 0 0 0 0 0 0 0 0 0 0

3936 22 ColorBlendAttrib const 0 8832 22 ColorBlendAttrib const 22 ColorBlendAttrib const 0 0 3521 0 0 0 0 0 0 0 0 0 0

3937 24 ColorScaleAttrib const * 0 8576 24 ColorScaleAttrib const * 24 ColorScaleAttrib const * 0 0 3938 0 0 0 0 0 0 0 0 0 0

3938 22 ColorScaleAttrib const 0 8832 22 ColorScaleAttrib const 22 ColorScaleAttrib const 0 0 3524 0 0 0 0 0 0 0 0 0 0

3939 24 ColorWriteAttrib const * 0 8576 24 ColorWriteAttrib const * 24 ColorWriteAttrib const * 0 0 3940 0 0 0 0 0 0 0 0 0 0

3940 22 ColorWriteAttrib const 0 8832 22 ColorWriteAttrib const 22 ColorWriteAttrib const 0 0 3525 0 0 0 0 0 0 0 0 0 0

3941 21 CompassEffect const * 0 8576 21 CompassEffect const * 21 CompassEffect const * 0 0 3942 0 0 0 0 0 0 0 0 0 0

3942 19 CompassEffect const 0 8832 19 CompassEffect const 19 CompassEffect const 0 0 3527 0 0 0 0 0 0 0 0 0 0

3943 21 CullBinAttrib const * 0 8576 21 CullBinAttrib const * 21 CullBinAttrib const * 0 0 3944 0 0 0 0 0 0 0 0 0 0

3944 19 CullBinAttrib const 0 8832 19 CullBinAttrib const 19 CullBinAttrib const 0 0 3531 0 0 0 0 0 0 0 0 0 0

3945 16 CullBinManager * 0 8576 16 CullBinManager * 16 CullBinManager * 0 0 3532 0 0 0 0 0 0 0 0 0 0

3946 7 BinType 0 2367488 23 CullBinManager::BinType 23 CullBinManager::BinType 3532 0 3530 0 0 0 0 0 0 0 0 0 0

3947 22 CullBinManager const * 0 8576 22 CullBinManager const * 22 CullBinManager const * 0 0 3948 0 0 0 0 0 0 0 0 0 0

3948 20 CullBinManager const 0 8832 20 CullBinManager const 20 CullBinManager const 0 0 3532 0 0 0 0 0 0 0 0 0 0

3949 22 CullFaceAttrib const * 0 8576 22 CullFaceAttrib const * 22 CullFaceAttrib const * 0 0 3950 0 0 0 0 0 0 0 0 0 0

3950 20 CullFaceAttrib const 0 8832 20 CullFaceAttrib const 20 CullFaceAttrib const 0 0 3533 0 0 0 0 0 0 0 0 0 0

3951 10 GeomNode * 0 8576 10 GeomNode * 10 GeomNode * 0 0 3535 0 0 0 0 0 0 0 0 0 0

3952 16 GeomNode const * 0 8576 16 GeomNode const * 16 GeomNode const * 0 0 3953 0 0 0 0 0 0 0 0 0 0

3953 14 GeomNode const 0 8832 14 GeomNode const 14 GeomNode const 0 0 3535 0 0 0 0 0 0 0 0 0 0

3954 10 Geom const 0 8832 10 Geom const 10 Geom const 0 0 3955 0 0 0 0 0 0 0 0 0 0

3955 4 Geom 0 2048 4 Geom 4 Geom 0 0 0 0 0 0 0 1 4146 0 0 0 0 687
////////////////////////////////////////////////////////////////////
//       Class : Geom
// Description : A container for geometry primitives.  This class
//               associates one or more GeomPrimitive objects with a
//               table of vertices defined by a GeomVertexData object.
//               All of the primitives stored in a particular Geom are
//               drawn from the same set of vertices (each primitive
//               uses a subset of all of the vertices in the table),
//               and all of them must be rendered at the same time, in
//               the same graphics state.
////////////////////////////////////////////////////////////////////

3956 12 Geom const * 0 8576 12 Geom const * 12 Geom const * 0 0 3954 0 0 0 0 0 0 0 0 0 0

3957 6 Geom * 0 8576 6 Geom * 6 Geom * 0 0 3955 0 0 0 0 0 0 0 0 0 0

3958 21 CullTraverser const * 0 8576 21 CullTraverser const * 21 CullTraverser const * 0 0 3959 0 0 0 0 0 0 0 0 0 0

3959 19 CullTraverser const 0 8832 19 CullTraverser const 19 CullTraverser const 0 0 3541 0 0 0 0 0 0 0 0 0 0

3960 19 CullTraverserData * 0 8576 19 CullTraverserData * 19 CullTraverserData * 0 0 3536 0 0 0 0 0 0 0 0 0 0

3961 16 DrawMask const * 0 8576 16 DrawMask const * 16 DrawMask const * 0 0 3962 0 0 0 0 0 0 0 0 0 0

3962 14 DrawMask const 0 8832 14 DrawMask const 14 DrawMask const 0 0 3697 0 0 0 0 0 0 0 0 0 0

3963 12 SceneSetup * 0 8576 12 SceneSetup * 12 SceneSetup * 0 0 3537 0 0 0 0 0 0 0 0 0 0

3964 15 DisplayRegion * 0 8576 15 DisplayRegion * 15 DisplayRegion * 0 0 3965 0 0 0 0 0 0 0 0 0 0

3965 13 DisplayRegion 0 2048 13 DisplayRegion 13 DisplayRegion 0 0 0 0 0 0 0 0 0 0 0 0 0

3966 18 SceneSetup const * 0 8576 18 SceneSetup const * 18 SceneSetup const * 0 0 3967 0 0 0 0 0 0 0 0 0 0

3967 16 SceneSetup const 0 8832 16 SceneSetup const 16 SceneSetup const 0 0 3537 0 0 0 0 0 0 0 0 0 0

3968 11 Fog const * 0 8576 11 Fog const * 11 Fog const * 0 0 3969 0 0 0 0 0 0 0 0 0 0

3969 9 Fog const 0 8832 9 Fog const 9 Fog const 0 0 3538 0 0 0 0 0 0 0 0 0 0

3970 17 FogAttrib const * 0 8576 17 FogAttrib const * 17 FogAttrib const * 0 0 3971 0 0 0 0 0 0 0 0 0 0

3971 15 FogAttrib const 0 8832 15 FogAttrib const 15 FogAttrib const 0 0 3540 0 0 0 0 0 0 0 0 0 0

3972 25 GeometricBoundingVolume * 0 8576 25 GeometricBoundingVolume * 25 GeometricBoundingVolume * 0 0 3973 0 0 0 0 0 0 0 0 0 0

3973 23 GeometricBoundingVolume 0 2048 23 GeometricBoundingVolume 23 GeometricBoundingVolume 0 0 0 0 0 0 0 0 0 0 0 0 380
////////////////////////////////////////////////////////////////////
//       Class : GeometricBoundingVolume
// Description : This is another abstract class, for a general class
//               of bounding volumes that actually enclose points in
//               3-d space, such as BSP's and bounding spheres.
////////////////////////////////////////////////////////////////////

3974 13 CullHandler * 0 8576 13 CullHandler * 13 CullHandler * 0 0 3975 0 0 0 0 0 0 0 0 0 0

3975 11 CullHandler 0 2048 11 CullHandler 11 CullHandler 0 0 0 0 0 0 0 0 0 0 0 0 0

3976 15 PortalClipper * 0 8576 15 PortalClipper * 15 PortalClipper * 0 0 3977 0 0 0 0 0 0 0 0 0 0

3977 13 PortalClipper 0 2048 13 PortalClipper 13 PortalClipper 0 0 0 0 0 0 0 0 0 0 0 0 0

3978 14 CullableObject 0 1050624 14 CullableObject 14 CullableObject 0 0 0 0 0 0 0 0 0 0 0 0 340
////////////////////////////////////////////////////////////////////
//       Class : CullableObject
// Description : The smallest atom of cull.  This is normally just a
//               Geom and its associated state, but it also contain
//               a draw callback.
////////////////////////////////////////////////////////////////////

3979 28 GeomDrawCallbackData const * 0 8576 28 GeomDrawCallbackData const * 28 GeomDrawCallbackData const * 0 0 3980 0 0 0 0 0 0 0 0 0 0

3980 26 GeomDrawCallbackData const 0 8832 26 GeomDrawCallbackData const 26 GeomDrawCallbackData const 0 0 3542 0 0 0 0 0 0 0 0 0 0

3981 16 CullableObject * 0 8576 16 CullableObject * 16 CullableObject * 0 0 3978 0 0 0 0 0 0 0 0 0 0

3982 22 GeomDrawCallbackData * 0 8576 22 GeomDrawCallbackData * 22 GeomDrawCallbackData * 0 0 3542 0 0 0 0 0 0 0 0 0 0

3983 18 CullResult const * 0 8576 18 CullResult const * 18 CullResult const * 0 0 3984 0 0 0 0 0 0 0 0 0 0

3984 16 CullResult const 0 8832 16 CullResult const 16 CullResult const 0 0 3544 0 0 0 0 0 0 0 0 0 0

3985 12 CullResult * 0 8576 12 CullResult * 12 CullResult * 0 0 3544 0 0 0 0 0 0 0 0 0 0

3986 7 CullBin 0 1050624 7 CullBin 7 CullBin 0 0 0 0 0 0 0 0 0 0 0 0 580
////////////////////////////////////////////////////////////////////
//       Class : CullBin
// Description : A collection of Geoms and their associated state, for
//               a particular scene.  The cull traversal (and the
//               BinCullHandler) assigns Geoms to bins as it comes
//               across them.
//
//               This is an abstract base class; derived classes like
//               CullBinStateSorted and CullBinBackToFront provide the
//               actual implementation.
////////////////////////////////////////////////////////////////////

3987 9 CullBin * 0 8576 9 CullBin * 9 CullBin * 0 0 3986 0 0 0 0 0 0 0 0 0 0

3988 25 DepthOffsetAttrib const * 0 8576 25 DepthOffsetAttrib const * 25 DepthOffsetAttrib const * 0 0 3989 0 0 0 0 0 0 0 0 0 0

3989 23 DepthOffsetAttrib const 0 8832 23 DepthOffsetAttrib const 23 DepthOffsetAttrib const 0 0 3547 0 0 0 0 0 0 0 0 0 0

3990 23 DepthTestAttrib const * 0 8576 23 DepthTestAttrib const * 23 DepthTestAttrib const * 0 0 3991 0 0 0 0 0 0 0 0 0 0

3991 21 DepthTestAttrib const 0 8832 21 DepthTestAttrib const 21 DepthTestAttrib const 0 0 3548 0 0 0 0 0 0 0 0 0 0

3992 24 DepthWriteAttrib const * 0 8576 24 DepthWriteAttrib const * 24 DepthWriteAttrib const * 0 0 3993 0 0 0 0 0 0 0 0 0 0

3993 22 DepthWriteAttrib const 0 8832 22 DepthWriteAttrib const 22 DepthWriteAttrib const 0 0 3549 0 0 0 0 0 0 0 0 0 0

3994 30 InternalNameCollection const * 0 8576 30 InternalNameCollection const * 30 InternalNameCollection const * 0 0 3995 0 0 0 0 0 0 0 0 0 0

3995 28 InternalNameCollection const 0 8832 28 InternalNameCollection const 28 InternalNameCollection const 0 0 3551 0 0 0 0 0 0 0 0 0 0

3996 13 Light const * 0 8576 13 Light const * 13 Light const * 0 0 3997 0 0 0 0 0 0 0 0 0 0

3997 11 Light const 0 8832 11 Light const 11 Light const 0 0 3552 0 0 0 0 0 0 0 0 0 0

3998 19 LightAttrib const * 0 8576 19 LightAttrib const * 19 LightAttrib const * 0 0 3999 0 0 0 0 0 0 0 0 0 0

3999 17 LightAttrib const 0 8832 17 LightAttrib const 17 LightAttrib const 0 0 3553 0 0 0 0 0 0 0 0 0 0

4000 23 LightRampAttrib const * 0 8576 23 LightRampAttrib const * 23 LightRampAttrib const * 0 0 4001 0 0 0 0 0 0 0 0 0 0

4001 21 LightRampAttrib const 0 8832 21 LightRampAttrib const 21 LightRampAttrib const 0 0 3555 0 0 0 0 0 0 0 0 0 0

4002 8 Loader * 0 8576 8 Loader * 8 Loader * 0 0 3557 0 0 0 0 0 0 0 0 0 0

4003 18 AsyncTaskManager * 0 8576 18 AsyncTaskManager * 18 AsyncTaskManager * 0 0 4004 0 0 0 0 0 0 0 0 0 0

4004 16 AsyncTaskManager 0 2048 16 AsyncTaskManager 16 AsyncTaskManager 0 0 0 0 0 0 0 1 4147 0 0 0 0 1046
////////////////////////////////////////////////////////////////////
//       Class : AsyncTaskManager
// Description : A class to manage a loose queue of isolated tasks,
//               which can be performed either synchronously (in the
//               foreground thread) or asynchronously (by a background
//               thread).
//
//               The AsyncTaskManager is actually a collection of
//               AsyncTaskChains, each of which maintains a list of
//               tasks.  Each chain can be either foreground or
//               background (it may run only in the main thread, or it
//               may be serviced by one or more background threads).
//               See AsyncTaskChain for more information.
//
//               If you do not require background processing, it is
//               perfectly acceptable to create only one
//               AsyncTaskChain, which runs in the main thread.  This
//               is a common configuration.
////////////////////////////////////////////////////////////////////

4005 14 Loader const * 0 8576 14 Loader const * 14 Loader const * 0 0 4006 0 0 0 0 0 0 0 0 0 0

4006 12 Loader const 0 8832 12 Loader const 12 Loader const 0 0 3557 0 0 0 0 0 0 0 0 0 0

4007 11 AsyncTask * 0 8576 11 AsyncTask * 11 AsyncTask * 0 0 3565 0 0 0 0 0 0 0 0 0 0

4008 21 LoaderOptions const * 0 8576 21 LoaderOptions const * 21 LoaderOptions const * 0 0 4009 0 0 0 0 0 0 0 0 0 0

4009 19 LoaderOptions const 0 8832 19 LoaderOptions const 19 LoaderOptions const 0 0 4010 0 0 0 0 0 0 0 0 0 0

4010 13 LoaderOptions 0 2048 13 LoaderOptions 13 LoaderOptions 0 0 0 0 0 0 0 0 0 0 0 0 257
////////////////////////////////////////////////////////////////////
//       Class : LoaderOptions
// Description : Specifies parameters that may be passed to the
//               loader.
////////////////////////////////////////////////////////////////////

4011 21 TypedReferenceCount * 0 8576 21 TypedReferenceCount * 21 TypedReferenceCount * 0 0 3509 0 0 0 0 0 0 0 0 0 0

4012 9 Results * 0 8576 17 Loader::Results * 17 Loader::Results * 0 0 3558 0 0 0 0 0 0 0 0 0 0

4013 15 Results const * 0 8576 23 Loader::Results const * 23 Loader::Results const * 0 0 4014 0 0 0 0 0 0 0 0 0 0

4014 13 Results const 0 8832 21 Loader::Results const 21 Loader::Results const 0 0 3558 0 0 0 0 0 0 0 0 0 0

4015 16 LoaderFileType * 0 8576 16 LoaderFileType * 16 LoaderFileType * 0 0 3559 0 0 0 0 0 0 0 0 0 0

4016 22 LoaderFileType const * 0 8576 22 LoaderFileType const * 22 LoaderFileType const * 0 0 4017 0 0 0 0 0 0 0 0 0 0

4017 20 LoaderFileType const 0 8832 20 LoaderFileType const 20 LoaderFileType const 0 0 3559 0 0 0 0 0 0 0 0 0 0

4018 30 LoaderFileTypeRegistry const * 0 8576 30 LoaderFileTypeRegistry const * 30 LoaderFileTypeRegistry const * 0 0 4019 0 0 0 0 0 0 0 0 0 0

4019 28 LoaderFileTypeRegistry const 0 8832 28 LoaderFileTypeRegistry const 28 LoaderFileTypeRegistry const 0 0 3561 0 0 0 0 0 0 0 0 0 0

4020 24 LoaderFileTypeRegistry * 0 8576 24 LoaderFileTypeRegistry * 24 LoaderFileTypeRegistry * 0 0 3561 0 0 0 0 0 0 0 0 0 0

4021 22 MaterialAttrib const * 0 8576 22 MaterialAttrib const * 22 MaterialAttrib const * 0 0 4022 0 0 0 0 0 0 0 0 0 0

4022 20 MaterialAttrib const 0 8832 20 MaterialAttrib const 20 MaterialAttrib const 0 0 3562 0 0 0 0 0 0 0 0 0 0

4023 26 MaterialCollection const * 0 8576 26 MaterialCollection const * 26 MaterialCollection const * 0 0 4024 0 0 0 0 0 0 0 0 0 0

4024 24 MaterialCollection const 0 8832 24 MaterialCollection const 24 MaterialCollection const 0 0 3563 0 0 0 0 0 0 0 0 0 0

4025 21 ModelFlattenRequest * 0 8576 21 ModelFlattenRequest * 21 ModelFlattenRequest * 0 0 3564 0 0 0 0 0 0 0 0 0 0

4026 27 ModelFlattenRequest const * 0 8576 27 ModelFlattenRequest const * 27 ModelFlattenRequest const * 0 0 4027 0 0 0 0 0 0 0 0 0 0

4027 25 ModelFlattenRequest const 0 8832 25 ModelFlattenRequest const 25 ModelFlattenRequest const 0 0 3564 0 0 0 0 0 0 0 0 0 0

4028 18 ModelLoadRequest * 0 8576 18 ModelLoadRequest * 18 ModelLoadRequest * 0 0 3566 0 0 0 0 0 0 0 0 0 0

4029 24 ModelLoadRequest const * 0 8576 24 ModelLoadRequest const * 24 ModelLoadRequest const * 0 0 4030 0 0 0 0 0 0 0 0 0 0

4030 22 ModelLoadRequest const 0 8832 22 ModelLoadRequest const 22 ModelLoadRequest const 0 0 3566 0 0 0 0 0 0 0 0 0 0

4031 11 ModelNode * 0 8576 11 ModelNode * 11 ModelNode * 0 0 3567 0 0 0 0 0 0 0 0 0 0

4032 17 ModelNode const * 0 8576 17 ModelNode const * 17 ModelNode const * 0 0 4033 0 0 0 0 0 0 0 0 0 0

4033 15 ModelNode const 0 8832 15 ModelNode const 15 ModelNode const 0 0 3567 0 0 0 0 0 0 0 0 0 0

4034 6 time_t 0 2105344 6 time_t 6 time_t 0 0 3696 0 0 0 0 0 0 0 0 0 0

4035 11 ModelRoot * 0 8576 11 ModelRoot * 11 ModelRoot * 0 0 3569 0 0 0 0 0 0 0 0 0 0

4036 17 ModelRoot const * 0 8576 17 ModelRoot const * 17 ModelRoot const * 0 0 4037 0 0 0 0 0 0 0 0 0 0

4037 15 ModelRoot const 0 8832 15 ModelRoot const 15 ModelRoot const 0 0 3569 0 0 0 0 0 0 0 0 0 0

4038 16 ModelReference * 0 8576 27 ModelRoot::ModelReference * 27 ModelRoot::ModelReference * 0 0 3570 0 0 0 0 0 0 0 0 0 0

4039 18 ModelSaveRequest * 0 8576 18 ModelSaveRequest * 18 ModelSaveRequest * 0 0 3572 0 0 0 0 0 0 0 0 0 0

4040 24 ModelSaveRequest const * 0 8576 24 ModelSaveRequest const * 24 ModelSaveRequest const * 0 0 4041 0 0 0 0 0 0 0 0 0 0

4041 22 ModelSaveRequest const 0 8832 22 ModelSaveRequest const 22 ModelSaveRequest const 0 0 3572 0 0 0 0 0 0 0 0 0 0

4042 26 NodePathCollection const * 0 8576 26 NodePathCollection const * 26 NodePathCollection const * 0 0 4043 0 0 0 0 0 0 0 0 0 0

4043 24 NodePathCollection const 0 8832 24 NodePathCollection const 24 NodePathCollection const 0 0 3573 0 0 0 0 0 0 0 0 0 0

4044 21 TextureAttrib const * 0 8576 21 TextureAttrib const * 21 TextureAttrib const * 0 0 4045 0 0 0 0 0 0 0 0 0 0

4045 19 TextureAttrib const 0 8832 19 TextureAttrib const 19 TextureAttrib const 0 0 3574 0 0 0 0 0 0 0 0 0 0

4046 20 TextureStage const * 0 8576 20 TextureStage const * 20 TextureStage const * 0 0 4047 0 0 0 0 0 0 0 0 0 0

4047 18 TextureStage const 0 8832 18 TextureStage const 18 TextureStage const 0 0 3667 0 0 0 0 0 0 0 0 0 0

4048 4 Mode 0 2367488 18 TexGenAttrib::Mode 18 TexGenAttrib::Mode 3575 0 3481 0 0 0 0 0 0 0 0 0 0

4049 20 TexGenAttrib const * 0 8576 20 TexGenAttrib const * 20 TexGenAttrib const * 0 0 4050 0 0 0 0 0 0 0 0 0 0

4050 18 TexGenAttrib const 0 8832 18 TexGenAttrib const 18 TexGenAttrib const 0 0 3575 0 0 0 0 0 0 0 0 0 0

4051 14 OccluderNode * 0 8576 14 OccluderNode * 14 OccluderNode * 0 0 3576 0 0 0 0 0 0 0 0 0 0

4052 20 OccluderNode const * 0 8576 20 OccluderNode const * 20 OccluderNode const * 0 0 4053 0 0 0 0 0 0 0 0 0 0

4053 18 OccluderNode const 0 8832 18 OccluderNode const 18 OccluderNode const 0 0 3576 0 0 0 0 0 0 0 0 0 0

4054 22 OccluderEffect const * 0 8576 22 OccluderEffect const * 22 OccluderEffect const * 0 0 4055 0 0 0 0 0 0 0 0 0 0

4055 20 OccluderEffect const 0 8832 20 OccluderEffect const 20 OccluderEffect const 0 0 3577 0 0 0 0 0 0 0 0 0 0

4056 15 PolylightNode * 0 8576 15 PolylightNode * 15 PolylightNode * 0 0 3578 0 0 0 0 0 0 0 0 0 0

4057 21 PolylightNode const * 0 8576 21 PolylightNode const * 21 PolylightNode const * 0 0 4058 0 0 0 0 0 0 0 0 0 0

4058 19 PolylightNode const 0 8832 19 PolylightNode const 19 PolylightNode const 0 0 3578 0 0 0 0 0 0 0 0 0 0

4059 18 LightGroup const * 0 8576 35 PolylightEffect::LightGroup const * 35 PolylightEffect::LightGroup const * 0 0 4060 0 0 0 0 0 0 0 0 0 0

4060 16 LightGroup const 0 8832 33 PolylightEffect::LightGroup const 33 PolylightEffect::LightGroup const 0 0 3583 0 0 0 0 0 0 0 0 0 0

4061 23 PolylightEffect const * 0 8576 23 PolylightEffect const * 23 PolylightEffect const * 0 0 4062 0 0 0 0 0 0 0 0 0 0

4062 21 PolylightEffect const 0 8832 21 PolylightEffect const 21 PolylightEffect const 0 0 3581 0 0 0 0 0 0 0 0 0 0

4063 20 ShaderAttrib const * 0 8576 20 ShaderAttrib const * 20 ShaderAttrib const * 0 0 4064 0 0 0 0 0 0 0 0 0 0

4064 18 ShaderAttrib const 0 8832 18 ShaderAttrib const 18 ShaderAttrib const 0 0 3585 0 0 0 0 0 0 0 0 0 0

4065 14 InternalName * 0 8576 14 InternalName * 14 InternalName * 0 0 3719 0 0 0 0 0 0 0 0 0 0

4066 11 LVecBase4 * 0 8576 11 LVecBase4 * 11 LVecBase4 * 0 0 3831 0 0 0 0 0 0 0 0 0 0

4067 14 SamplerState * 0 8576 14 SamplerState * 14 SamplerState * 0 0 3826 0 0 0 0 0 0 0 0 0 0

4068 24 ShowBoundsEffect const * 0 8576 24 ShowBoundsEffect const * 24 ShowBoundsEffect const * 0 0 4069 0 0 0 0 0 0 0 0 0 0

4069 22 ShowBoundsEffect const 0 8832 22 ShowBoundsEffect const 22 ShowBoundsEffect const 0 0 3587 0 0 0 0 0 0 0 0 0 0

4070 26 TexProjectorEffect const * 0 8576 26 TexProjectorEffect const * 26 TexProjectorEffect const * 0 0 4071 0 0 0 0 0 0 0 0 0 0

4071 24 TexProjectorEffect const 0 8832 24 TexProjectorEffect const 24 TexProjectorEffect const 0 0 3588 0 0 0 0 0 0 0 0 0 0

4072 21 ScissorEffect const * 0 8576 21 ScissorEffect const * 21 ScissorEffect const * 0 0 4073 0 0 0 0 0 0 0 0 0 0

4073 19 ScissorEffect const 0 8832 19 ScissorEffect const 19 ScissorEffect const 0 0 3589 0 0 0 0 0 0 0 0 0 0

4074 19 SceneGraphReducer * 0 8576 19 SceneGraphReducer * 19 SceneGraphReducer * 0 0 3590 0 0 0 0 0 0 0 0 0 0

4075 25 SceneGraphReducer const * 0 8576 25 SceneGraphReducer const * 25 SceneGraphReducer const * 0 0 4076 0 0 0 0 0 0 0 0 0 0

4076 23 SceneGraphReducer const 0 8832 23 SceneGraphReducer const 23 SceneGraphReducer const 0 0 3590 0 0 0 0 0 0 0 0 0 0

4077 26 AccumulatedAttribs const * 0 8576 26 AccumulatedAttribs const * 26 AccumulatedAttribs const * 0 0 4078 0 0 0 0 0 0 0 0 0 0

4078 24 AccumulatedAttribs const 0 8832 24 AccumulatedAttribs const 24 AccumulatedAttribs const 0 0 4079 0 0 0 0 0 0 0 0 0 0

4079 18 AccumulatedAttribs 0 1050624 18 AccumulatedAttribs 18 AccumulatedAttribs 0 0 0 0 0 0 0 0 0 0 0 0 431
////////////////////////////////////////////////////////////////////
//       Class : AccumulatedAttribs
// Description : This class is used by the SceneGraphReducer to
//               maintain and accumulate the set of attributes we have
//               encountered on each node that might eventually be
//               applied to the vertices at the leaves.
////////////////////////////////////////////////////////////////////

4080 17 GeomTransformer * 0 8576 17 GeomTransformer * 17 GeomTransformer * 0 0 4081 0 0 0 0 0 0 0 0 0 0

4081 15 GeomTransformer 0 1050624 15 GeomTransformer 15 GeomTransformer 0 0 0 0 0 0 0 0 0 0 0 0 970
////////////////////////////////////////////////////////////////////
//       Class : GeomTransformer
// Description : An object specifically designed to transform the
//               vertices of a Geom without disturbing indexing or
//               affecting any other Geoms that may share the same
//               vertex arrays, and without needlessly wasting memory
//               when different Geoms sharing the same vertex arrays
//               are transformed by the same amount.
//
//               If you create a single GeomTransformer and use it to
//               transform a number of different Geoms by various
//               transformations, then those Geoms which happen to
//               share the same arrays and are transformed by the same
//               amounts will still share the same arrays as each
//               other (but different from the original arrays).
////////////////////////////////////////////////////////////////////

4082 15 ParamNodePath * 0 8576 15 ParamNodePath * 15 ParamNodePath * 0 0 3595 0 0 0 0 0 0 0 0 0 0

4083 21 ParamNodePath const * 0 8576 21 ParamNodePath const * 21 ParamNodePath const * 0 0 4084 0 0 0 0 0 0 0 0 0 0

4084 19 ParamNodePath const 0 8832 19 ParamNodePath const 19 ParamNodePath const 0 0 3595 0 0 0 0 0 0 0 0 0 0

4085 12 PortalNode * 0 8576 12 PortalNode * 12 PortalNode * 0 0 3597 0 0 0 0 0 0 0 0 0 0

4086 12 PortalMask * 0 8576 12 PortalMask * 12 PortalMask * 0 0 4087 0 0 0 0 0 0 0 0 0 0

4087 10 PortalMask 0 2105344 10 PortalMask 10 PortalMask 0 0 3673 0 0 0 0 0 0 0 0 0 0

4088 18 PortalNode const * 0 8576 18 PortalNode const * 18 PortalNode const * 0 0 4089 0 0 0 0 0 0 0 0 0 0

4089 16 PortalNode const 0 8832 16 PortalNode const 16 PortalNode const 0 0 3597 0 0 0 0 0 0 0 0 0 0

4090 27 RescaleNormalAttrib const * 0 8576 27 RescaleNormalAttrib const * 27 RescaleNormalAttrib const * 0 0 4091 0 0 0 0 0 0 0 0 0 0

4091 25 RescaleNormalAttrib const 0 8832 25 RescaleNormalAttrib const 25 RescaleNormalAttrib const 0 0 3598 0 0 0 0 0 0 0 0 0 0

4092 21 ScissorAttrib const * 0 8576 21 ScissorAttrib const * 21 ScissorAttrib const * 0 0 4093 0 0 0 0 0 0 0 0 0 0

4093 19 ScissorAttrib const 0 8832 19 ScissorAttrib const 19 ScissorAttrib const 0 0 3600 0 0 0 0 0 0 0 0 0 0

4094 24 ShadeModelAttrib const * 0 8576 24 ShadeModelAttrib const * 24 ShadeModelAttrib const * 0 0 4095 0 0 0 0 0 0 0 0 0 0

4095 22 ShadeModelAttrib const 0 8832 22 ShadeModelAttrib const 22 ShadeModelAttrib const 0 0 3601 0 0 0 0 0 0 0 0 0 0

4096 21 StencilAttrib const * 0 8576 21 StencilAttrib const * 21 StencilAttrib const * 0 0 4097 0 0 0 0 0 0 0 0 0 0

4097 19 StencilAttrib const 0 8832 19 StencilAttrib const 19 StencilAttrib const 0 0 3603 0 0 0 0 0 0 0 0 0 0

4098 8 Shader * 0 8576 8 Shader * 8 Shader * 0 0 3835 0 0 0 0 0 0 0 0 0 0

4099 30 ConstPointerTo< InternalName > 0 2048 30 ConstPointerTo< InternalName > 30 ConstPointerTo< InternalName > 0 0 0 0 0 0 0 0 0 0 0 0 0

0
0
48
4100 0 0 143 10 get_stages 14 get_num_stages 9 get_stage 
4101 0 0 253 11 get_parents 15 get_num_parents 10 get_parent 
4102 0 0 253 12 get_children 16 get_num_children 9 get_child 
4103 0 0 253 11 get_stashed 15 get_num_stashed 11 get_stashed 
4104 0 0 398 18 get_texture_stages 22 get_num_texture_stages 17 get_texture_stage 
4105 0 0 419 9 get_nodes 13 get_num_nodes 8 get_node 
4106 0 0 419 13 get_ancestors 13 get_num_nodes 12 get_ancestor 
4107 0 0 767 9 get_nodes 13 get_num_nodes 8 get_node 
4108 0 0 862 19 get_display_regions 23 get_num_display_regions 18 get_display_region 
4109 0 0 907 13 get_on_planes 17 get_num_on_planes 12 get_on_plane 
4110 0 0 907 14 get_off_planes 18 get_num_off_planes 13 get_off_plane 
4111 0 0 1001 8 get_bins 12 get_num_bins 7 get_bin 
4112 0 0 1031 9 get_geoms 13 get_num_geoms 8 get_geom 
4113 0 0 1031 12 modify_geoms 13 get_num_geoms 11 modify_geom 
4114 0 0 1031 15 get_geom_states 13 get_num_geoms 14 get_geom_state 
4115 0 0 1190 9 get_names 13 get_num_names 8 get_name 
4116 0 0 1222 13 get_on_lights 17 get_num_on_lights 12 get_on_light 
4117 0 0 1222 14 get_off_lights 18 get_num_off_lights 13 get_off_light 
4118 0 0 1270 9 get_files 13 get_num_files 8 get_file 
4119 0 0 1270 14 get_file_types 13 get_num_files 13 get_file_type 
4120 0 0 1307 9 get_types 13 get_num_types 8 get_type 
4121 0 0 1406 9 get_paths 13 get_num_paths 8 get_path 
4122 0 0 1449 13 get_on_stages 17 get_num_on_stages 12 get_on_stage 
4123 0 0 1449 16 get_on_ff_stages 20 get_num_on_ff_stages 15 get_on_ff_stage 
4124 0 0 1449 14 get_off_stages 18 get_num_off_stages 13 get_off_stage 
4125 0 0 1492 12 get_vertices 16 get_num_vertices 10 get_vertex 
4126 0 0 1502 16 get_on_occluders 20 get_num_on_occluders 15 get_on_occluder 
4127 0 0 1621 10 get_points 14 get_num_points 9 get_point 
4128 0 0 1621 9 get_nodes 14 get_num_points 8 get_node 
4129 0 0 1665 12 get_vertices 16 get_num_vertices 10 get_vertex 
4130 0 0 1779 8 get_rows 4 size 7 get_row 
4131 0 0 1779 8 get_cols 4 size 7 get_col 
4132 0 0 1779 9 get_row3s 4 size 8 get_row3 
4133 0 0 1796 8 get_rows 4 size 7 get_row 
4134 0 0 1796 8 get_cols 4 size 7 get_col 
4135 0 0 1796 9 get_col2s 4 size 8 get_col2 
4136 0 0 1796 9 get_row2s 4 size 8 get_row2 
4137 0 0 2179 8 get_gsgs 12 get_num_gsgs 7 get_gsg 
4138 0 0 2242 8 get_rows 4 size 7 get_row 
4139 0 0 2242 8 get_cols 4 size 7 get_col 
4140 0 0 2242 9 get_col2s 4 size 8 get_col2 
4141 0 0 2242 9 get_row2s 4 size 8 get_row2 
4142 0 0 2250 8 get_rows 4 size 7 get_row 
4143 0 0 2250 8 get_cols 4 size 7 get_col 
4144 0 0 2250 9 get_row3s 4 size 8 get_row3 
4145 0 0 2847 12 get_textures 16 get_num_textures 11 get_texture 
4146 0 0 3317 14 get_primitives 18 get_num_primitives 13 get_primitive 
4147 0 0 3581 15 get_task_chains 19 get_num_task_chains 14 get_task_chain 
