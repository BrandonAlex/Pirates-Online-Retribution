1436948387
2 3
9 libp3pgui 4 Q2_k 12 panda3d.core 
238
243 12 PGFrameStyle 0 4 481 26 PGFrameStyle::PGFrameStyle 0 2 1 2 457
////////////////////////////////////////////////////////////////////
//     Function: PGFrameStyle::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PGFrameStyle::Copy Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
101
inline PGFrameStyle::PGFrameStyle(void);
inline PGFrameStyle::PGFrameStyle(PGFrameStyle const &copy);

244 10 operator = 0 4 481 24 PGFrameStyle::operator = 0 1 3 0
63
inline void PGFrameStyle::operator =(PGFrameStyle const &copy);

245 13 ~PGFrameStyle 0 4 481 27 PGFrameStyle::~PGFrameStyle 0 0 224
////////////////////////////////////////////////////////////////////
//     Function: PGFrameStyle::Destructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
41
inline PGFrameStyle::~PGFrameStyle(void);

246 8 set_type 0 4 481 22 PGFrameStyle::set_type 0 1 4 251
////////////////////////////////////////////////////////////////////
//     Function: PGFrameStyle::set_type
//       Access: Published
//  Description: Sets the basic type of frame.
////////////////////////////////////////////////////////////////////
60
inline void PGFrameStyle::set_type(PGFrameStyle::Type type);

247 8 get_type 0 4 481 22 PGFrameStyle::get_type 0 1 5 254
////////////////////////////////////////////////////////////////////
//     Function: PGFrameStyle::get_type
//       Access: Published
//  Description: Returns the basic type of frame.
////////////////////////////////////////////////////////////////////
61
inline PGFrameStyle::Type PGFrameStyle::get_type(void) const;

248 9 set_color 0 4 481 23 PGFrameStyle::set_color 0 2 6 7 522
////////////////////////////////////////////////////////////////////
//     Function: PGFrameStyle::set_color
//       Access: Published
//  Description: Sets the dominant color of the frame.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PGFrameStyle::set_color
//       Access: Published
//  Description: Sets the dominant color of the frame.
////////////////////////////////////////////////////////////////////
154
inline void PGFrameStyle::set_color(PN_stdfloat r, PN_stdfloat g, PN_stdfloat b, PN_stdfloat a);
inline void PGFrameStyle::set_color(LColor const &color);

249 9 get_color 0 4 481 23 PGFrameStyle::get_color 0 1 8 263
////////////////////////////////////////////////////////////////////
//     Function: PGFrameStyle::set_color
//       Access: Published
//  Description: Returns the dominant color of the frame.
////////////////////////////////////////////////////////////////////
50
inline LColor PGFrameStyle::get_color(void) const;

250 11 set_texture 0 4 481 25 PGFrameStyle::set_texture 0 1 9 298
////////////////////////////////////////////////////////////////////
//     Function: PGFrameStyle::set_texture
//       Access: Published
//  Description: Specifies a texture that should be applied to the
//               frame.
////////////////////////////////////////////////////////////////////
56
inline void PGFrameStyle::set_texture(Texture *texture);

251 11 has_texture 0 4 481 25 PGFrameStyle::has_texture 0 1 10 298
////////////////////////////////////////////////////////////////////
//     Function: PGFrameStyle::has_texture
//       Access: Published
//  Description: Returns true if a texture has been applied to the
//               frame.
////////////////////////////////////////////////////////////////////
50
inline bool PGFrameStyle::has_texture(void) const;

252 11 get_texture 0 4 481 25 PGFrameStyle::get_texture 0 1 11 337
////////////////////////////////////////////////////////////////////
//     Function: PGFrameStyle::get_texture
//       Access: Published
//  Description: Returns the texture that has been applied to the
//               frame, or NULL if no texture has been applied.
////////////////////////////////////////////////////////////////////
54
inline Texture *PGFrameStyle::get_texture(void) const;

253 13 clear_texture 0 4 481 27 PGFrameStyle::clear_texture 0 1 12 262
////////////////////////////////////////////////////////////////////
//     Function: PGFrameStyle::clear_texture
//       Access: Published
//  Description: Removes the texture from the frame.
////////////////////////////////////////////////////////////////////
46
inline void PGFrameStyle::clear_texture(void);

254 9 set_width 0 4 481 23 PGFrameStyle::set_width 0 2 13 14 914
////////////////////////////////////////////////////////////////////
//     Function: PGFrameStyle::set_width
//       Access: Published
//  Description: Sets the width parameter, which has meaning only for
//               certain frame types.  For instance, this is the width
//               of the bevel for T_bevel_in or T_bevel_out.  The
//               units are in screen units.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PGFrameStyle::set_width
//       Access: Published
//  Description: Sets the width parameter, which has meaning only for
//               certain frame types.  For instance, this is the width
//               of the bevel for T_bevel_in or T_bevel_out.  The
//               units are in screen units.
////////////////////////////////////////////////////////////////////
127
inline void PGFrameStyle::set_width(PN_stdfloat x, PN_stdfloat y);
inline void PGFrameStyle::set_width(LVecBase2 const &width);

255 9 get_width 0 4 481 23 PGFrameStyle::get_width 0 1 15 458
////////////////////////////////////////////////////////////////////
//     Function: PGFrameStyle::get_width
//       Access: Published
//  Description: Returns the width parameter, which has meaning only
//               for certain frame types.  For instance, this is the
//               width of the bevel for T_bevel_in or T_bevel_out.
//               The units are in screen units.
////////////////////////////////////////////////////////////////////
60
inline LVecBase2 const &PGFrameStyle::get_width(void) const;

256 12 set_uv_width 0 4 481 26 PGFrameStyle::set_uv_width 0 2 16 17 900
////////////////////////////////////////////////////////////////////
//     Function: PGFrameStyle::set_uv_width
//       Access: Published
//  Description: Sets the uv_width parameter, which indicates the
//               amount of the texture that is consumed by the inner
//               bevel--the width in texture space of the amount
//               indicated by set_width.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PGFrameStyle::set_uv_width
//       Access: Published
//  Description: Sets the uv_width parameter, which indicates the
//               amount of the texture that is consumed by the inner
//               bevel--the width in texture space of the amount
//               indicated by set_width.
////////////////////////////////////////////////////////////////////
136
inline void PGFrameStyle::set_uv_width(PN_stdfloat u, PN_stdfloat v);
inline void PGFrameStyle::set_uv_width(LVecBase2 const &uv_width);

257 12 get_uv_width 0 4 481 26 PGFrameStyle::get_uv_width 0 1 18 245
////////////////////////////////////////////////////////////////////
//     Function: PGFrameStyle::get_uv_width
//       Access: Published
//  Description: See set_uv_width().
////////////////////////////////////////////////////////////////////
63
inline LVecBase2 const &PGFrameStyle::get_uv_width(void) const;

258 17 set_visible_scale 0 4 481 31 PGFrameStyle::set_visible_scale 0 2 19 20 1042
////////////////////////////////////////////////////////////////////
//     Function: PGFrameStyle::set_visible_scale
//       Access: Published
//  Description: Sets a scale factor on the visible representation of
//               the frame, in the X and Y directions.  If this scale
//               factor is other than 1, it will affect the size of
//               the visible frame representation within the actual
//               frame border.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PGFrameStyle::set_visible_scale
//       Access: Published
//  Description: Sets a scale factor on the visible representation of
//               the frame, in the X and Y directions.  If this scale
//               factor is other than 1, it will affect the size of
//               the visible frame representation within the actual
//               frame border.
////////////////////////////////////////////////////////////////////
151
inline void PGFrameStyle::set_visible_scale(PN_stdfloat x, PN_stdfloat y);
inline void PGFrameStyle::set_visible_scale(LVecBase2 const &visible_scale);

259 17 get_visible_scale 0 4 481 31 PGFrameStyle::get_visible_scale 0 1 21 525
////////////////////////////////////////////////////////////////////
//     Function: PGFrameStyle::get_visible_scale
//       Access: Published
//  Description: Returns the scale factor on the visible
//               representation of the frame, in the X and Y
//               directions.  If this scale factor is other than 1, it
//               will affect the size of the visible frame
//               representation within the actual frame border.
////////////////////////////////////////////////////////////////////
68
inline LVecBase2 const &PGFrameStyle::get_visible_scale(void) const;

260 18 get_internal_frame 0 4 481 32 PGFrameStyle::get_internal_frame 0 1 22 487
////////////////////////////////////////////////////////////////////
//     Function: PGFrameStyle::get_internal_frame
//       Access: Published
//  Description: Computes the size of the internal frame, given the
//               indicated external frame, appropriate for this kind
//               of frame style.  This simply subtracts the border
//               width for those frame styles that include a border.
////////////////////////////////////////////////////////////////////
73
LVecBase4 PGFrameStyle::get_internal_frame(LVecBase4 const &frame) const;

261 6 output 0 4 481 20 PGFrameStyle::output 0 1 23 220
////////////////////////////////////////////////////////////////////
//     Function: PGFrameStyle::output
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
46
void PGFrameStyle::output(ostream &out) const;

262 6 PGItem 0 4 483 14 PGItem::PGItem 0 1 24 442
////////////////////////////////////////////////////////////////////
//     Function: PGItem::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PGItem::Copy Constructor
//       Access: Public
//  Description: 
////////////////////////////////////////////////////////////////////
35
PGItem::PGItem(string const &name);

263 8 set_name 0 4 483 16 PGItem::set_name 0 1 25 212
////////////////////////////////////////////////////////////////////
//     Function: PGItem::set_name
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
49
inline void PGItem::set_name(string const &name);

264 9 set_frame 0 4 483 17 PGItem::set_frame 0 2 26 27 1076
////////////////////////////////////////////////////////////////////
//     Function: PGItem::set_frame
//       Access: Published
//  Description: Sets the bounding rectangle of the item, in local
//               coordinates.  This is the region on screen within
//               which the mouse will be considered to be within the
//               item.  Normally, it should correspond to the bounding
//               rectangle of the visible geometry of the item.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PGItem::set_frame
//       Access: Published
//  Description: Sets the bounding rectangle of the item, in local
//               coordinates.  This is the region on screen within
//               which the mouse will be considered to be within the
//               item.  Normally, it should correspond to the bounding
//               rectangle of the visible geometry of the item.
////////////////////////////////////////////////////////////////////
159
inline void PGItem::set_frame(PN_stdfloat left, PN_stdfloat right, PN_stdfloat bottom, PN_stdfloat top);
inline void PGItem::set_frame(LVecBase4 const &frame);

265 9 get_frame 0 4 483 17 PGItem::get_frame 0 1 28 371
////////////////////////////////////////////////////////////////////
//     Function: PGItem::get_frame
//       Access: Published
//  Description: Returns the bounding rectangle of the item.  See
//               set_frame().  It is an error to call this if
//               has_frame() returns false.
////////////////////////////////////////////////////////////////////
54
inline LVecBase4 const &PGItem::get_frame(void) const;

266 9 has_frame 0 4 483 17 PGItem::has_frame 0 1 29 301
////////////////////////////////////////////////////////////////////
//     Function: PGItem::has_frame
//       Access: Published
//  Description: Returns true if the item has a bounding rectangle;
//               see set_frame().
////////////////////////////////////////////////////////////////////
42
inline bool PGItem::has_frame(void) const;

267 11 clear_frame 0 4 483 19 PGItem::clear_frame 0 1 30 385
////////////////////////////////////////////////////////////////////
//     Function: PGItem::clear_frame
//       Access: Published
//  Description: Removes the bounding rectangle from the item.  It
//               will no longer be possible to position the mouse
//               within the item; see set_frame().
////////////////////////////////////////////////////////////////////
38
inline void PGItem::clear_frame(void);

268 9 set_state 0 4 483 17 PGItem::set_state 0 1 31 428
////////////////////////////////////////////////////////////////////
//     Function: PGItem::set_state
//       Access: Published
//  Description: Sets the "state" of this particular PGItem.  
//
//               The PGItem node will render as if it were the
//               subgraph assigned to the corresponding index via
//               set_state_def().
////////////////////////////////////////////////////////////////////
41
inline void PGItem::set_state(int state);

269 9 get_state 0 4 483 17 PGItem::get_state 0 1 32 298
////////////////////////////////////////////////////////////////////
//     Function: PGItem::get_state
//       Access: Published
//  Description: Returns the "state" of this particular PGItem.  See
//               set_state().
////////////////////////////////////////////////////////////////////
41
inline int PGItem::get_state(void) const;

270 10 set_active 0 6 483 18 PGItem::set_active 0 1 33 519
////////////////////////////////////////////////////////////////////
//     Function: PGItem::set_active
//       Access: Published, Virtual
//  Description: Sets whether the PGItem is active for mouse watching.
//               This is not necessarily related to the
//               active/inactive appearance of the item, which is
//               controlled by set_state(), but it does affect whether
//               it responds to mouse events.
////////////////////////////////////////////////////////////////////
45
virtual void PGItem::set_active(bool active);

271 10 get_active 0 4 483 18 PGItem::get_active 0 1 34 318
////////////////////////////////////////////////////////////////////
//     Function: PGItem::get_active
//       Access: Published
//  Description: Returns whether the PGItem is currently active for
//               mouse events.  See set_active().
////////////////////////////////////////////////////////////////////
43
inline bool PGItem::get_active(void) const;

272 9 set_focus 0 6 483 17 PGItem::set_focus 0 1 35 717
////////////////////////////////////////////////////////////////////
//     Function: PGItem::set_focus
//       Access: Published, Virtual
//  Description: Sets whether the PGItem currently has keyboard focus.
//               This simply means that the item may respond to
//               keyboard events as well as to mouse events; precisely
//               what this means is up to the individual item.  
//
//               Only one PGItem in the world is allowed to have focus
//               at any given time.  Setting the focus on any other
//               item automatically disables the focus from the
//               previous item.
////////////////////////////////////////////////////////////////////
43
virtual void PGItem::set_focus(bool focus);

273 9 get_focus 0 4 483 17 PGItem::get_focus 0 1 36 319
////////////////////////////////////////////////////////////////////
//     Function: PGItem::get_focus
//       Access: Published
//  Description: Returns whether the PGItem currently has focus for
//               keyboard events.  See set_focus().
////////////////////////////////////////////////////////////////////
42
inline bool PGItem::get_focus(void) const;

274 20 set_background_focus 0 4 483 28 PGItem::set_background_focus 0 1 37 554
////////////////////////////////////////////////////////////////////
//     Function: PGItem::set_background_focus
//       Access: Published
//  Description: Sets the background_focus flag for this item.  When
//               background_focus is enabled, the item will receive
//               keypress events even if it is not in focus; in fact,
//               even if it is not onscreen.  Unlike normal focus,
//               many items may have background_focus simultaneously.
////////////////////////////////////////////////////////////////////
46
void PGItem::set_background_focus(bool focus);

275 20 get_background_focus 0 4 483 28 PGItem::get_background_focus 0 1 38 328
////////////////////////////////////////////////////////////////////
//     Function: PGItem::get_background_focus
//       Access: Published
//  Description: Returns whether background_focus is currently
//               enabled.  See set_background_focus().
////////////////////////////////////////////////////////////////////
53
inline bool PGItem::get_background_focus(void) const;

276 18 set_suppress_flags 0 4 483 26 PGItem::set_suppress_flags 0 1 39 396
////////////////////////////////////////////////////////////////////
//     Function: PGItem::set_suppress_flags
//       Access: Published
//  Description: This is just an interface to set the suppress flags
//               on the underlying MouseWatcherRegion.  See
//               MouseWatcherRegion::set_suppress_flags().
////////////////////////////////////////////////////////////////////
59
inline void PGItem::set_suppress_flags(int suppress_flags);

277 18 get_suppress_flags 0 4 483 26 PGItem::get_suppress_flags 0 1 40 396
////////////////////////////////////////////////////////////////////
//     Function: PGItem::get_suppress_flags
//       Access: Published
//  Description: This is just an interface to get the suppress flags
//               on the underlying MouseWatcherRegion.  See
//               MouseWatcherRegion::get_suppress_flags().
////////////////////////////////////////////////////////////////////
50
inline int PGItem::get_suppress_flags(void) const;

278 18 get_num_state_defs 0 4 483 26 PGItem::get_num_state_defs 0 1 41 619
////////////////////////////////////////////////////////////////////
//     Function: PGItem::get_num_state_defs
//       Access: Published
//  Description: Returns one more than the highest-numbered state def
//               that was ever assigned to the PGItem.  The complete
//               set of state defs assigned may then be retrieved by
//               indexing from 0 to (get_num_state_defs() - 1).
//
//               This is only an upper limit on the actual number of
//               state defs, since there may be holes in the list.
////////////////////////////////////////////////////////////////////
43
int PGItem::get_num_state_defs(void) const;

279 15 clear_state_def 0 4 483 23 PGItem::clear_state_def 0 1 42 381
////////////////////////////////////////////////////////////////////
//     Function: PGItem::clear_state_def
//       Access: Published
//  Description: Resets the NodePath assigned to the indicated state
//               to its initial default, with only a frame
//               representation if appropriate.
////////////////////////////////////////////////////////////////////
40
void PGItem::clear_state_def(int state);

280 13 has_state_def 0 4 483 21 PGItem::has_state_def 0 1 43 404
////////////////////////////////////////////////////////////////////
//     Function: PGItem::has_state_def
//       Access: Published
//  Description: Returns true if get_state_def() has ever been called
//               for the indicated state (thus defining a render
//               subgraph for this state index), false otherwise.
////////////////////////////////////////////////////////////////////
44
bool PGItem::has_state_def(int state) const;

281 13 get_state_def 0 4 483 21 PGItem::get_state_def 0 1 44 468
////////////////////////////////////////////////////////////////////
//     Function: PGItem::get_state_def
//       Access: Published
//  Description: Returns the Node that is the root of the subgraph
//               that will be drawn when the PGItem is in the
//               indicated state.  The first time this is called for a
//               particular state index, it may create the Node.
////////////////////////////////////////////////////////////////////
43
NodePath &PGItem::get_state_def(int state);

282 21 instance_to_state_def 0 4 483 29 PGItem::instance_to_state_def 0 1 45 340
////////////////////////////////////////////////////////////////////
//     Function: PGItem::instance_to_state_def
//       Access: Published
//  Description: Parents an instance of the bottom node of the
//               indicated NodePath to the indicated state index.
////////////////////////////////////////////////////////////////////
72
NodePath PGItem::instance_to_state_def(int state, NodePath const &path);

283 15 get_frame_style 0 4 483 23 PGItem::get_frame_style 0 1 46 335
////////////////////////////////////////////////////////////////////
//     Function: PGItem::get_frame_style
//       Access: Published
//  Description: Returns the kind of frame that will be drawn behind
//               the item when it is in the indicated state.
////////////////////////////////////////////////////////////////////
48
PGFrameStyle PGItem::get_frame_style(int state);

284 15 set_frame_style 0 4 483 23 PGItem::set_frame_style 0 1 47 335
////////////////////////////////////////////////////////////////////
//     Function: PGItem::set_frame_style
//       Access: Published
//  Description: Changes the kind of frame that will be drawn behind
//               the item when it is in the indicated state.
////////////////////////////////////////////////////////////////////
67
void PGItem::set_frame_style(int state, PGFrameStyle const &style);

285 6 get_id 0 4 483 14 PGItem::get_id 0 1 48 426
////////////////////////////////////////////////////////////////////
//     Function: PGItem::get_id
//       Access: Published
//  Description: Returns the unique ID assigned to this PGItem.  This
//               will be assigned to the region created with the
//               MouseWatcher, and will thus be used to generate event
//               names.
////////////////////////////////////////////////////////////////////
48
inline string const &PGItem::get_id(void) const;

286 6 set_id 0 4 483 14 PGItem::set_id 0 1 49 654
////////////////////////////////////////////////////////////////////
//     Function: PGItem::set_id
//       Access: Published
//  Description: Set the unique ID assigned to this PGItem.  It is the
//               user's responsibility to ensure that this ID is
//               unique.
//
//               Normally, this should not need to be called, as the
//               PGItem will assign itself an ID when it is created,
//               but this function allows the user to decide to
//               redefine the ID to be something possibly more
//               meaningful.
////////////////////////////////////////////////////////////////////
45
inline void PGItem::set_id(string const &id);

287 16 get_enter_prefix 0 4 483 24 PGItem::get_enter_prefix 0 1 50 415
////////////////////////////////////////////////////////////////////
//     Function: PGItem::get_enter_prefix
//       Access: Published, Static
//  Description: Returns the prefix that is used to define the enter
//               event for all PGItems.  The enter event is the
//               concatenation of this string followed by get_id().
////////////////////////////////////////////////////////////////////
52
static inline string PGItem::get_enter_prefix(void);

288 15 get_exit_prefix 0 4 483 23 PGItem::get_exit_prefix 0 1 51 412
////////////////////////////////////////////////////////////////////
//     Function: PGItem::get_exit_prefix
//       Access: Published, Static
//  Description: Returns the prefix that is used to define the exit
//               event for all PGItems.  The exit event is the
//               concatenation of this string followed by get_id().
////////////////////////////////////////////////////////////////////
51
static inline string PGItem::get_exit_prefix(void);

289 17 get_within_prefix 0 4 483 25 PGItem::get_within_prefix 0 1 52 418
////////////////////////////////////////////////////////////////////
//     Function: PGItem::get_within_prefix
//       Access: Published, Static
//  Description: Returns the prefix that is used to define the within
//               event for all PGItems.  The within event is the
//               concatenation of this string followed by get_id().
////////////////////////////////////////////////////////////////////
53
static inline string PGItem::get_within_prefix(void);

290 18 get_without_prefix 0 4 483 26 PGItem::get_without_prefix 0 1 53 421
////////////////////////////////////////////////////////////////////
//     Function: PGItem::get_without_prefix
//       Access: Published, Static
//  Description: Returns the prefix that is used to define the without
//               event for all PGItems.  The without event is the
//               concatenation of this string followed by get_id().
////////////////////////////////////////////////////////////////////
54
static inline string PGItem::get_without_prefix(void);

291 19 get_focus_in_prefix 0 4 483 27 PGItem::get_focus_in_prefix 0 1 54 527
////////////////////////////////////////////////////////////////////
//     Function: PGItem::get_focus_in_prefix
//       Access: Published, Static
//  Description: Returns the prefix that is used to define the focus_in
//               event for all PGItems.  The focus_in event is the
//               concatenation of this string followed by get_id().
//
//               Unlike most item events, this event is thrown with no
//               parameters.
////////////////////////////////////////////////////////////////////
55
static inline string PGItem::get_focus_in_prefix(void);

292 20 get_focus_out_prefix 0 4 483 28 PGItem::get_focus_out_prefix 0 1 55 530
////////////////////////////////////////////////////////////////////
//     Function: PGItem::get_focus_out_prefix
//       Access: Published, Static
//  Description: Returns the prefix that is used to define the focus_out
//               event for all PGItems.  The focus_out event is the
//               concatenation of this string followed by get_id().
//
//               Unlike most item events, this event is thrown with no
//               parameters.
////////////////////////////////////////////////////////////////////
56
static inline string PGItem::get_focus_out_prefix(void);

293 16 get_press_prefix 0 4 483 24 PGItem::get_press_prefix 0 1 56 472
////////////////////////////////////////////////////////////////////
//     Function: PGItem::get_press_prefix
//       Access: Published, Static
//  Description: Returns the prefix that is used to define the press
//               event for all PGItems.  The press event is the
//               concatenation of this string followed by a button
//               name, followed by a hyphen and get_id().
////////////////////////////////////////////////////////////////////
52
static inline string PGItem::get_press_prefix(void);

294 17 get_repeat_prefix 0 4 483 25 PGItem::get_repeat_prefix 0 1 57 475
////////////////////////////////////////////////////////////////////
//     Function: PGItem::get_repeat_prefix
//       Access: Published, Static
//  Description: Returns the prefix that is used to define the repeat
//               event for all PGItems.  The repeat event is the
//               concatenation of this string followed by a button
//               name, followed by a hyphen and get_id().
////////////////////////////////////////////////////////////////////
53
static inline string PGItem::get_repeat_prefix(void);

295 18 get_release_prefix 0 4 483 26 PGItem::get_release_prefix 0 1 58 478
////////////////////////////////////////////////////////////////////
//     Function: PGItem::get_release_prefix
//       Access: Published, Static
//  Description: Returns the prefix that is used to define the release
//               event for all PGItems.  The release event is the
//               concatenation of this string followed by a button
//               name, followed by a hyphen and get_id().
////////////////////////////////////////////////////////////////////
54
static inline string PGItem::get_release_prefix(void);

296 20 get_keystroke_prefix 0 4 483 28 PGItem::get_keystroke_prefix 0 1 59 457
////////////////////////////////////////////////////////////////////
//     Function: PGItem::get_keystroke_prefix
//       Access: Published, Static
//  Description: Returns the prefix that is used to define the
//               keystroke event for all PGItems.  The keystroke event
//               is the concatenation of this string followed by a
//               hyphen and get_id().
////////////////////////////////////////////////////////////////////
56
static inline string PGItem::get_keystroke_prefix(void);

297 15 get_enter_event 0 4 483 23 PGItem::get_enter_event 0 1 60 382
////////////////////////////////////////////////////////////////////
//     Function: PGItem::get_enter_event
//       Access: Published
//  Description: Returns the event name that will be thrown when the
//               item is active and the mouse enters its frame, but
//               not any nested frames.
////////////////////////////////////////////////////////////////////
50
inline string PGItem::get_enter_event(void) const;

298 14 get_exit_event 0 4 483 22 PGItem::get_exit_event 0 1 61 379
////////////////////////////////////////////////////////////////////
//     Function: PGItem::get_exit_event
//       Access: Published
//  Description: Returns the event name that will be thrown when the
//               item is active and the mouse exits its frame, or
//               enters a nested frame.
////////////////////////////////////////////////////////////////////
49
inline string PGItem::get_exit_event(void) const;

299 16 get_within_event 0 4 483 24 PGItem::get_within_event 0 1 62 545
////////////////////////////////////////////////////////////////////
//     Function: PGItem::get_within_event
//       Access: Published
//  Description: Returns the event name that will be thrown when the
//               item is active and the mouse moves within the
//               boundaries of the frame.  This is different from the
//               enter_event in that the mouse is considered within
//               the frame even if it is also within a nested frame.
////////////////////////////////////////////////////////////////////
51
inline string PGItem::get_within_event(void) const;

300 17 get_without_event 0 4 483 25 PGItem::get_without_event 0 1 63 574
////////////////////////////////////////////////////////////////////
//     Function: PGItem::get_without_event
//       Access: Published
//  Description: Returns the event name that will be thrown when the
//               item is active and the mouse moves completely outside
//               the boundaries of the frame.  This is different from
//               the exit_event in that the mouse is considered
//               within the frame even if it is also within a nested
//               frame.
////////////////////////////////////////////////////////////////////
52
inline string PGItem::get_without_event(void) const;

301 18 get_focus_in_event 0 4 483 26 PGItem::get_focus_in_event 0 1 64 324
////////////////////////////////////////////////////////////////////
//     Function: PGItem::get_focus_in_event
//       Access: Published
//  Description: Returns the event name that will be thrown when the
//               item gets the keyboard focus.
////////////////////////////////////////////////////////////////////
53
inline string PGItem::get_focus_in_event(void) const;

302 19 get_focus_out_event 0 4 483 27 PGItem::get_focus_out_event 0 1 65 326
////////////////////////////////////////////////////////////////////
//     Function: PGItem::get_focus_out_event
//       Access: Published
//  Description: Returns the event name that will be thrown when the
//               item loses the keyboard focus.
////////////////////////////////////////////////////////////////////
54
inline string PGItem::get_focus_out_event(void) const;

303 15 get_press_event 0 4 483 23 PGItem::get_press_event 0 1 66 433
////////////////////////////////////////////////////////////////////
//     Function: PGItem::get_press_event
//       Access: Published
//  Description: Returns the event name that will be thrown when the
//               item is active and the indicated mouse or keyboard
//               button is depressed while the mouse is within the
//               frame.
////////////////////////////////////////////////////////////////////
72
inline string PGItem::get_press_event(ButtonHandle const &button) const;

304 16 get_repeat_event 0 4 483 24 PGItem::get_repeat_event 0 1 67 447
////////////////////////////////////////////////////////////////////
//     Function: PGItem::get_repeat_event
//       Access: Published
//  Description: Returns the event name that will be thrown when the
//               item is active and the indicated mouse or keyboard
//               button is continuously held down while the mouse is
//               within the frame.
////////////////////////////////////////////////////////////////////
73
inline string PGItem::get_repeat_event(ButtonHandle const &button) const;

305 17 get_release_event 0 4 483 25 PGItem::get_release_event 0 1 68 442
////////////////////////////////////////////////////////////////////
//     Function: PGItem::get_release_event
//       Access: Published
//  Description: Returns the event name that will be thrown when the
//               item is active and the indicated mouse or keyboard
//               button, formerly clicked down is within the frame, is
//               released.
////////////////////////////////////////////////////////////////////
74
inline string PGItem::get_release_event(ButtonHandle const &button) const;

306 19 get_keystroke_event 0 4 483 27 PGItem::get_keystroke_event 0 1 69 346
////////////////////////////////////////////////////////////////////
//     Function: PGItem::get_keystroke_event
//       Access: Published
//  Description: Returns the event name that will be thrown when the
//               item is active and any key is pressed by the user.
////////////////////////////////////////////////////////////////////
54
inline string PGItem::get_keystroke_event(void) const;

307 19 get_frame_inv_xform 0 4 483 27 PGItem::get_frame_inv_xform 0 1 70 284
////////////////////////////////////////////////////////////////////
//     Function: PGItem::get_frame_inv_xform
//       Access: Published, Static
//  Description: Returns the inverse of the frame transform matrix
////////////////////////////////////////////////////////////////////
56
inline LMatrix4 PGItem::get_frame_inv_xform(void) const;

308 9 set_sound 0 4 483 17 PGItem::set_sound 0 1 71 305
////////////////////////////////////////////////////////////////////
//     Function: PGItem::set_sound
//       Access: Published
//  Description: Sets the sound that will be played whenever the
//               indicated event occurs.
////////////////////////////////////////////////////////////////////
63
void PGItem::set_sound(string const &event, AudioSound *sound);

309 11 clear_sound 0 4 483 19 PGItem::clear_sound 0 1 72 290
////////////////////////////////////////////////////////////////////
//     Function: PGItem::clear_sound
//       Access: Published
//  Description: Removes the sound associated with the indicated
//               event.
////////////////////////////////////////////////////////////////////
46
void PGItem::clear_sound(string const &event);

310 9 get_sound 0 4 483 17 PGItem::get_sound 0 1 73 329
////////////////////////////////////////////////////////////////////
//     Function: PGItem::get_sound
//       Access: Published
//  Description: Returns the sound associated with the indicated
//               event, or NULL if there is no associated sound.
////////////////////////////////////////////////////////////////////
57
AudioSound *PGItem::get_sound(string const &event) const;

311 9 has_sound 0 4 483 17 PGItem::has_sound 0 1 74 323
////////////////////////////////////////////////////////////////////
//     Function: PGItem::has_sound
//       Access: Published
//  Description: Returns true if there is a sound associated with the
//               indicated event, or false otherwise.
////////////////////////////////////////////////////////////////////
50
bool PGItem::has_sound(string const &event) const;

312 13 get_text_node 0 4 483 21 PGItem::get_text_node 0 1 75 413
////////////////////////////////////////////////////////////////////
//     Function: PGItem::get_text_node
//       Access: Published, Static
//  Description: Returns the TextNode object that will be used by all
//               PGItems to generate default labels given a string.
//               This can be loaded with the default font, etc.
////////////////////////////////////////////////////////////////////
45
static TextNode *PGItem::get_text_node(void);

313 13 set_text_node 0 4 483 21 PGItem::set_text_node 0 1 76 413
////////////////////////////////////////////////////////////////////
//     Function: PGItem::set_text_node
//       Access: Published, Static
//  Description: Changes the TextNode object that will be used by all
//               PGItems to generate default labels given a string.
//               This can be loaded with the default font, etc.
////////////////////////////////////////////////////////////////////
57
static inline void PGItem::set_text_node(TextNode *node);

314 14 get_focus_item 0 4 483 22 PGItem::get_focus_item 0 1 77 486
////////////////////////////////////////////////////////////////////
//     Function: PGItem::get_focus_item
//       Access: Published, Static
//  Description: Returns the one PGItem in the world that currently
//               has keyboard focus, if any, or NULL if no item has
//               keyboard focus.  Use PGItem::set_focus() to activate
//               or deactivate keyboard focus on a particular item.
////////////////////////////////////////////////////////////////////
51
static inline PGItem *PGItem::get_focus_item(void);

315 14 get_class_type 0 4 483 22 PGItem::get_class_type 0 1 78 0
47
static TypeHandle PGItem::get_class_type(void);

316 8 PGButton 0 4 485 18 PGButton::PGButton 0 1 79 446
////////////////////////////////////////////////////////////////////
//     Function: PGButton::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PGButton::Copy Constructor
//       Access: Public
//  Description: 
////////////////////////////////////////////////////////////////////
39
PGButton::PGButton(string const &name);

317 5 setup 0 4 485 15 PGButton::setup 0 5 80 81 82 83 84 1741
////////////////////////////////////////////////////////////////////
//     Function: PGButton::setup
//       Access: Published
//  Description: Sets up the button using the indicated NodePath as
//               arbitrary geometry.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PGButton::setup
//       Access: Published
//  Description: Sets up the button using the indicated NodePath as
//               arbitrary geometry.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PGButton::setup
//       Access: Published
//  Description: Sets up the button using the indicated NodePath as
//               arbitrary geometry.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PGButton::setup
//       Access: Published
//  Description: Sets up the button as a default text button using the
//               indicated label string.  The TextNode defined by
//               PGItem::get_text_node() will be used to create the
//               label geometry.  This automatically sets up the frame
//               according to the size of the text.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PGButton::setup
//       Access: Published
//  Description: Sets up the button using the indicated NodePath as
//               arbitrary geometry.
////////////////////////////////////////////////////////////////////
427
void PGButton::setup(string const &label, PN_stdfloat bevel = 0.1);
inline void PGButton::setup(NodePath const &ready);
inline void PGButton::setup(NodePath const &ready, NodePath const &depressed);
inline void PGButton::setup(NodePath const &ready, NodePath const &depressed, NodePath const &rollover);
void PGButton::setup(NodePath const &ready, NodePath const &depressed, NodePath const &rollover, NodePath const &inactive);

318 16 add_click_button 0 4 485 26 PGButton::add_click_button 0 1 85 484
////////////////////////////////////////////////////////////////////
//     Function: PGButton::add_click_button
//       Access: Published
//  Description: Adds the indicated button to the set of buttons that
//               can effectively "click" the PGButton.  Normally, this
//               is just MouseButton::one().  Returns true if the
//               button was added, or false if it was already there.
////////////////////////////////////////////////////////////////////
60
bool PGButton::add_click_button(ButtonHandle const &button);

319 19 remove_click_button 0 4 485 29 PGButton::remove_click_button 0 1 86 512
////////////////////////////////////////////////////////////////////
//     Function: PGButton::remove_click_button
//       Access: Published
//  Description: Removes the indicated button from the set of buttons
//               that can effectively "click" the PGButton.  Normally,
//               this is just MouseButton::one().  Returns true if the
//               button was removed, or false if it was not in the
//               set.
////////////////////////////////////////////////////////////////////
63
bool PGButton::remove_click_button(ButtonHandle const &button);

320 16 has_click_button 0 4 485 26 PGButton::has_click_button 0 1 87 407
////////////////////////////////////////////////////////////////////
//     Function: PGButton::has_click_button
//       Access: Published
//  Description: Returns true if the indicated button is on the set of
//               buttons that can effectively "click" the PGButton.
//               Normally, this is just MouseButton::one().
////////////////////////////////////////////////////////////////////
60
bool PGButton::has_click_button(ButtonHandle const &button);

321 14 is_button_down 0 4 485 24 PGButton::is_button_down 0 1 88 340
////////////////////////////////////////////////////////////////////
//     Function: PGButton::is_button_down
//       Access: Published
//  Description: Returns true if the user is currently holding the
//               mouse button down on the button, false otherwise.
////////////////////////////////////////////////////////////////////
43
inline bool PGButton::is_button_down(void);

322 16 get_click_prefix 0 4 485 26 PGButton::get_click_prefix 0 1 89 419
////////////////////////////////////////////////////////////////////
//     Function: PGButton::get_click_prefix
//       Access: Published, Static
//  Description: Returns the prefix that is used to define the click
//               event for all PGButtons.  The click event is the
//               concatenation of this string followed by get_id().
////////////////////////////////////////////////////////////////////
54
static inline string PGButton::get_click_prefix(void);

323 15 get_click_event 0 4 485 25 PGButton::get_click_event 0 1 90 321
////////////////////////////////////////////////////////////////////
//     Function: PGButton::get_click_event
//       Access: Published
//  Description: Returns the event name that will be thrown when the
//               button is clicked normally.
////////////////////////////////////////////////////////////////////
74
inline string PGButton::get_click_event(ButtonHandle const &button) const;

324 14 get_class_type 0 4 485 24 PGButton::get_class_type 0 1 91 0
49
static TypeHandle PGButton::get_class_type(void);

325 5 PGTop 0 4 487 12 PGTop::PGTop 0 1 92 440
////////////////////////////////////////////////////////////////////
//     Function: PGTop::Copy Constructor
//       Access: Public
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PGTop::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
33
PGTop::PGTop(string const &name);

326 17 set_mouse_watcher 0 4 487 24 PGTop::set_mouse_watcher 0 1 93 388
////////////////////////////////////////////////////////////////////
//     Function: PGTop::set_mouse_watcher
//       Access: Published
//  Description: Sets the MouseWatcher pointer that the PGTop object
//               registers its PG items with.  This must be set before
//               the PG items are active.
////////////////////////////////////////////////////////////////////
53
void PGTop::set_mouse_watcher(MouseWatcher *watcher);

327 17 get_mouse_watcher 0 4 487 24 PGTop::get_mouse_watcher 0 1 94 391
////////////////////////////////////////////////////////////////////
//     Function: PGTop::get_mouse_watcher
//       Access: Published
//  Description: Returns the MouseWatcher pointer that the PGTop object
//               registers its PG items with, or NULL if the
//               MouseWatcher has not yet been set.
////////////////////////////////////////////////////////////////////
58
inline MouseWatcher *PGTop::get_mouse_watcher(void) const;

328 9 get_group 0 4 487 16 PGTop::get_group 0 1 95 388
////////////////////////////////////////////////////////////////////
//     Function: PGTop::get_group
//       Access: Published
//  Description: Returns the MouseWatcherGroup pointer that the PGTop
//               object registers its PG items with, or NULL if the
//               MouseWatcher has not yet been set.
////////////////////////////////////////////////////////////////////
55
inline MouseWatcherGroup *PGTop::get_group(void) const;

329 14 set_start_sort 0 4 487 21 PGTop::set_start_sort 0 1 96 1044
////////////////////////////////////////////////////////////////////
//     Function: PGTop::set_start_sort
//       Access: Published
//  Description: Specifies the sort index that is assigned during the
//               traversal to the first PGItem that is discovered
//               during traversal.  Subsequent PGItems will be
//               assigned consecutively higher sort indexes.
//
//               This number is used by the MouseWatcher system to
//               rank the clickable mouse regions in the same order in
//               which the items are rendered, so that items on top
//               will receive mouse priority.
//
//               Normally, it makes the most sense to leave this
//               initial value at its default value of 0, unless you
//               need the PGItems to have a particular sort value with
//               respect to some other objects in the scene
//               (particularly with a second PGTop node).
////////////////////////////////////////////////////////////////////
50
inline void PGTop::set_start_sort(int start_sort);

330 14 get_start_sort 0 4 487 21 PGTop::get_start_sort 0 1 97 395
////////////////////////////////////////////////////////////////////
//     Function: PGTop::get_start_sort
//       Access: Published
//  Description: Returns the sort index that is assigned during the
//               traversal to the first PGItem that is discovered
//               during traversal.  See set_start_sort().
////////////////////////////////////////////////////////////////////
45
inline int PGTop::get_start_sort(void) const;

331 14 get_class_type 0 4 487 21 PGTop::get_class_type 0 1 98 0
46
static TypeHandle PGTop::get_class_type(void);

332 7 PGEntry 0 4 488 16 PGEntry::PGEntry 0 1 99 447
////////////////////////////////////////////////////////////////////
//     Function: PGEntry::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PGEntry::Copy Constructor
//       Access: Protected
//  Description: 
////////////////////////////////////////////////////////////////////
37
PGEntry::PGEntry(string const &name);

333 5 setup 0 4 488 14 PGEntry::setup 0 1 100 538
////////////////////////////////////////////////////////////////////
//     Function: PGEntry::setup
//       Access: Published
//  Description: Sets up the entry for normal use.  The width is the
//               maximum width of characters that will be typed, and
//               num_lines is the integer number of lines of text of
//               the entry.  Both of these together determine the size
//               of the entry, based on the TextNode in effect.
////////////////////////////////////////////////////////////////////
54
void PGEntry::setup(PN_stdfloat width, int num_lines);

334 13 setup_minimal 0 4 488 22 PGEntry::setup_minimal 0 1 101 304
////////////////////////////////////////////////////////////////////
//     Function: PGEntry::setup_minimal
//       Access: Published
//  Description: Sets up the entry without creating any frame or other
//               decoration.
////////////////////////////////////////////////////////////////////
62
void PGEntry::setup_minimal(PN_stdfloat width, int num_lines);

335 8 set_text 0 4 488 17 PGEntry::set_text 0 1 102 630
////////////////////////////////////////////////////////////////////
//     Function: PGEntry::set_text
//       Access: Published
//  Description: Changes the text currently displayed within the
//               entry.  This uses the Unicode encoding currently
//               specified for the "focus" TextNode; therefore, the
//               TextNode must exist before calling set_text().
//
//               The return value is true if all the text is accepted,
//               or false if some was truncated (see set_max_width(),
//               etc.).
////////////////////////////////////////////////////////////////////
50
inline bool PGEntry::set_text(string const &text);

336 14 get_plain_text 0 4 488 23 PGEntry::get_plain_text 0 1 103 531
////////////////////////////////////////////////////////////////////
//     Function: PGEntry::get_plain_text
//       Access: Published
//  Description: Returns the text currently displayed within the
//               entry, without any embedded properties characters.
//
//               This uses the Unicode encoding currently specified
//               for the "focus" TextNode; therefore, the TextNode
//               must exist before calling get_text().
////////////////////////////////////////////////////////////////////
50
inline string PGEntry::get_plain_text(void) const;

337 8 get_text 0 4 488 17 PGEntry::get_text 0 1 104 462
////////////////////////////////////////////////////////////////////
//     Function: PGEntry::get_text
//       Access: Published
//  Description: Returns the text currently displayed within the
//               entry.  This uses the Unicode encoding currently
//               specified for the "focus" TextNode; therefore, the
//               TextNode must exist before calling get_text().
////////////////////////////////////////////////////////////////////
44
inline string PGEntry::get_text(void) const;

338 18 get_num_characters 0 4 488 27 PGEntry::get_num_characters 0 1 105 699
////////////////////////////////////////////////////////////////////
//     Function: PGEntry::get_num_characters
//       Access: Published
//  Description: Returns the number of characters of text in the
//               entry.  This is the actual number of visible
//               characters, not counting implicit newlines due to
//               wordwrapping, or formatted characters for text
//               properties changes.  If there is an embedded
//               TextGraphic object, it counts as one character.
//
//               This is also the length of the string returned by
//               get_plain_text().
////////////////////////////////////////////////////////////////////
51
inline int PGEntry::get_num_characters(void) const;

339 13 get_character 0 4 488 22 PGEntry::get_character 0 1 106 404
////////////////////////////////////////////////////////////////////
//     Function: PGEntry::get_character
//       Access: Published
//  Description: Returns the character at the indicated position in
//               the entry.  If the object at this position is a
//               graphic object instead of a character, returns 0.
////////////////////////////////////////////////////////////////////
51
inline wchar_t PGEntry::get_character(int n) const;

340 11 get_graphic 0 4 488 20 PGEntry::get_graphic 0 1 107 444
////////////////////////////////////////////////////////////////////
//     Function: PGEntry::get_graphic
//       Access: Published
//  Description: Returns the graphic object at the indicated position
//               in the pre-wordwrapped string.  If the object at this
//               position is a character instead of a graphic object,
//               returns NULL.
////////////////////////////////////////////////////////////////////
60
inline TextGraphic const *PGEntry::get_graphic(int n) const;

341 14 get_properties 0 4 488 23 PGEntry::get_properties 0 1 108 365
////////////////////////////////////////////////////////////////////
//     Function: PGEntry::get_properties
//       Access: Published
//  Description: Returns the TextProperties in effect for the object
//               at the indicated position in the pre-wordwrapped
//               string.
////////////////////////////////////////////////////////////////////
66
inline TextProperties const &PGEntry::get_properties(int n) const;

342 19 set_cursor_position 0 4 488 28 PGEntry::set_cursor_position 0 1 109 469
////////////////////////////////////////////////////////////////////
//     Function: PGEntry::set_cursor_position
//       Access: Published
//  Description: Sets the current position of the cursor.  This is the
//               position within the text at which the next letter
//               typed by the user will be inserted; normally it is
//               the same as the length of the text.
////////////////////////////////////////////////////////////////////
55
inline void PGEntry::set_cursor_position(int position);

343 19 get_cursor_position 0 4 488 28 PGEntry::get_cursor_position 0 1 110 271
////////////////////////////////////////////////////////////////////
//     Function: PGEntry::get_cursor_position
//       Access: Published
//  Description: Returns the current position of the cursor.
////////////////////////////////////////////////////////////////////
52
inline int PGEntry::get_cursor_position(void) const;

344 12 get_cursor_X 0 4 488 21 PGEntry::get_cursor_X 0 1 111 0
53
inline PN_stdfloat PGEntry::get_cursor_X(void) const;

345 12 get_cursor_Y 0 4 488 21 PGEntry::get_cursor_Y 0 1 112 0
53
inline PN_stdfloat PGEntry::get_cursor_Y(void) const;

346 13 set_max_chars 0 4 488 22 PGEntry::set_max_chars 0 1 113 507
////////////////////////////////////////////////////////////////////
//     Function: PGEntry::set_max_chars
//       Access: Published
//  Description: Sets the maximum number of characters that may be
//               typed into the entry.  This is a limit on the number
//               of characters, as opposed to the width of the entry;
//               see also set_max_width().
//
//               If this is 0, there is no limit.
////////////////////////////////////////////////////////////////////
50
inline void PGEntry::set_max_chars(int max_chars);

347 13 get_max_chars 0 4 488 22 PGEntry::get_max_chars 0 1 114 387
////////////////////////////////////////////////////////////////////
//     Function: PGEntry::get_max_chars
//       Access: Published
//  Description: Returns the current maximum number of characters that
//               may be typed into the entry, or 0 if there is no
//               limit.  See set_max_chars().
////////////////////////////////////////////////////////////////////
46
inline int PGEntry::get_max_chars(void) const;

348 13 set_max_width 0 4 488 22 PGEntry::set_max_width 0 1 115 790
////////////////////////////////////////////////////////////////////
//     Function: PGEntry::set_max_width
//       Access: Published
//  Description: Sets the maximum width of all characters that may be
//               typed into the entry.  This is a limit on the width
//               of the formatted text, not a fixed limit on the
//               number of characters; also set_max_chars().
//
//               If this is 0, there is no limit.
//
//               If _num_lines is more than 1, rather than being a
//               fixed width on the whole entry, this becomes instead
//               the wordwrap width (and the width limit on the entry
//               is essentially _max_width * _num_lines).
////////////////////////////////////////////////////////////////////
58
inline void PGEntry::set_max_width(PN_stdfloat max_width);

349 13 get_max_width 0 4 488 22 PGEntry::get_max_width 0 1 116 390
////////////////////////////////////////////////////////////////////
//     Function: PGEntry::get_max_width
//       Access: Published
//  Description: Returns the current maximum width of the characters
//               that may be typed into the entry, or 0 if there is no
//               limit.  See set_max_width().
////////////////////////////////////////////////////////////////////
54
inline PN_stdfloat PGEntry::get_max_width(void) const;

350 13 set_num_lines 0 4 488 22 PGEntry::set_num_lines 0 1 117 411
////////////////////////////////////////////////////////////////////
//     Function: PGEntry::set_num_lines
//       Access: Published
//  Description: Sets the number of lines of text the PGEntry will
//               use.  This only has meaning if _max_width is not 0;
//               _max_width indicates the wordwrap width of each line.
////////////////////////////////////////////////////////////////////
50
inline void PGEntry::set_num_lines(int num_lines);

351 13 get_num_lines 0 4 488 22 PGEntry::get_num_lines 0 1 118 342
////////////////////////////////////////////////////////////////////
//     Function: PGEntry::get_num_lines
//       Access: Published
//  Description: Returns the number of lines of text the PGEntry will
//               use, if _max_width is not 0.  See set_num_lines().
////////////////////////////////////////////////////////////////////
46
inline int PGEntry::get_num_lines(void) const;

352 14 set_blink_rate 0 4 488 23 PGEntry::set_blink_rate 0 1 119 431
////////////////////////////////////////////////////////////////////
//     Function: PGEntry::set_blink_rate
//       Access: Published
//  Description: Sets the number of times per second the cursor will
//               blink while the entry has keyboard focus.
//
//               If this is 0, the cursor does not blink, but is held
//               steady.
////////////////////////////////////////////////////////////////////
60
inline void PGEntry::set_blink_rate(PN_stdfloat blink_rate);

353 14 get_blink_rate 0 4 488 23 PGEntry::get_blink_rate 0 1 120 337
////////////////////////////////////////////////////////////////////
//     Function: PGEntry::get_blink_rate
//       Access: Published
//  Description: Returns the number of times per second the cursor
//               will blink, or 0 if the cursor is not to blink.
////////////////////////////////////////////////////////////////////
55
inline PN_stdfloat PGEntry::get_blink_rate(void) const;

354 14 get_cursor_def 0 4 488 23 PGEntry::get_cursor_def 0 1 121 375
////////////////////////////////////////////////////////////////////
//     Function: PGEntry::get_cursor_def
//       Access: Published
//  Description: Returns the Node that will be rendered to represent
//               the cursor.  You can attach suitable cursor geometry
//               to this node.
////////////////////////////////////////////////////////////////////
46
inline NodePath PGEntry::get_cursor_def(void);

355 16 clear_cursor_def 0 4 488 25 PGEntry::clear_cursor_def 0 1 122 336
////////////////////////////////////////////////////////////////////
//     Function: PGEntry::clear_cursor_def
//       Access: Published
//  Description: Removes all the children from the cursor_def node, in
//               preparation for adding a new definition.
////////////////////////////////////////////////////////////////////
44
inline void PGEntry::clear_cursor_def(void);

356 22 set_cursor_keys_active 0 4 488 31 PGEntry::set_cursor_keys_active 0 1 123 394
////////////////////////////////////////////////////////////////////
//     Function: PGEntry::set_cursor_keys_active
//       Access: Published
//  Description: Sets whether the arrow keys (and home/end) control
//               movement of the cursor.  If true, they are active; if
//               false, they are ignored.
////////////////////////////////////////////////////////////////////
55
inline void PGEntry::set_cursor_keys_active(bool flag);

357 22 get_cursor_keys_active 0 4 488 31 PGEntry::get_cursor_keys_active 0 1 124 378
////////////////////////////////////////////////////////////////////
//     Function: PGEntry::get_cursor_keys_active
//       Access: Published
//  Description: Returns whether the arrow keys are currently set to
//               control movement of the cursor; see
//               set_cursor_keys_active().
////////////////////////////////////////////////////////////////////
56
inline bool PGEntry::get_cursor_keys_active(void) const;

358 16 set_obscure_mode 0 4 488 25 PGEntry::set_obscure_mode 0 1 125 759
////////////////////////////////////////////////////////////////////
//     Function: PGEntry::set_obscure_mode
//       Access: Published
//  Description: Specifies whether obscure mode should be enabled.  In
//               obscure mode, a string of asterisks is displayed
//               instead of the literal text, e.g. for entering
//               passwords.
//
//               In obscure mode, the width of the text is computed
//               based on the width of the string of asterisks, not on
//               the width of the actual text.  This has implications
//               on the maximum length of text that may be entered if
//               max_width is in effect.
////////////////////////////////////////////////////////////////////
49
inline void PGEntry::set_obscure_mode(bool flag);

359 16 get_obscure_mode 0 4 488 25 PGEntry::get_obscure_mode 0 1 126 309
////////////////////////////////////////////////////////////////////
//     Function: PGEntry::get_obscure_mode
//       Access: Published
//  Description: Specifies whether obscure mode is enabled.  See
//               set_obscure_mode().
////////////////////////////////////////////////////////////////////
50
inline bool PGEntry::get_obscure_mode(void) const;

360 17 set_overflow_mode 0 4 488 26 PGEntry::set_overflow_mode 0 1 127 489
////////////////////////////////////////////////////////////////////
//     Function: PGEntry::set_overflow_mode
//       Access: Published
//  Description: Specifies whether overflow mode should be enabled.
//               In overflow mode, text can overflow the boundaries
//               of the Entry element horizontally.
//
//               Overflow mode only works when the number of lines
//               is 1.
////////////////////////////////////////////////////////////////////
50
inline void PGEntry::set_overflow_mode(bool flag);

361 17 get_overflow_mode 0 4 488 26 PGEntry::get_overflow_mode 0 1 128 312
////////////////////////////////////////////////////////////////////
//     Function: PGEntry::get_overflow_mode
//       Access: Published
//  Description: Specifies whether overflow mode is enabled.  See
//               set_overflow_mode().
////////////////////////////////////////////////////////////////////
51
inline bool PGEntry::get_overflow_mode(void) const;

362 20 set_candidate_active 0 4 488 29 PGEntry::set_candidate_active 0 1 129 984
////////////////////////////////////////////////////////////////////
//     Function: PGEntry::set_candidate_active
//       Access: Published
//  Description: Specifies the name of the TextProperties structure
//               added to the TextPropertiesManager that will be used
//               to render candidate strings from the IME, used for
//               typing characters in east Asian languages.  Each
//               candidate string represents one possible way to
//               interpret the sequence of keys the user has just
//               entered; it should not be considered typed yet, but
//               it is important for the user to be able to see what
//               he is considering entering.
//
//               This particular method sets the properties for the
//               subset of the current candidate string that the user
//               can actively scroll through.
////////////////////////////////////////////////////////////////////
74
inline void PGEntry::set_candidate_active(string const &candidate_active);

363 20 get_candidate_active 0 4 488 29 PGEntry::get_candidate_active 0 1 130 256
////////////////////////////////////////////////////////////////////
//     Function: PGEntry::get_candidate_active
//       Access: Published
//  Description: See set_candidate_active().
////////////////////////////////////////////////////////////////////
63
inline string const &PGEntry::get_candidate_active(void) const;

364 22 set_candidate_inactive 0 4 488 31 PGEntry::set_candidate_inactive 0 1 131 992
////////////////////////////////////////////////////////////////////
//     Function: PGEntry::set_candidate_inactive
//       Access: Published
//  Description: Specifies the name of the TextProperties structure
//               added to the TextPropertiesManager that will be used
//               to render candidate strings from the IME, used for
//               typing characters in east Asian languages.  Each
//               candidate string represents one possible way to
//               interpret the sequence of keys the user has just
//               entered; it should not be considered typed yet, but
//               it is important for the user to be able to see what
//               he is considering entering.
//
//               This particular method sets the properties for the
//               subset of the current candidate string that the user
//               is not actively scrolling through.
////////////////////////////////////////////////////////////////////
78
inline void PGEntry::set_candidate_inactive(string const &candidate_inactive);

365 22 get_candidate_inactive 0 4 488 31 PGEntry::get_candidate_inactive 0 1 132 260
////////////////////////////////////////////////////////////////////
//     Function: PGEntry::get_candidate_inactive
//       Access: Published
//  Description: See set_candidate_inactive().
////////////////////////////////////////////////////////////////////
65
inline string const &PGEntry::get_candidate_inactive(void) const;

366 12 set_text_def 0 4 488 21 PGEntry::set_text_def 0 1 133 500
////////////////////////////////////////////////////////////////////
//     Function: PGEntry::set_text_def
//       Access: Published
//  Description: Changes the TextNode that will be used to render the
//               text within the entry when the entry is in the
//               indicated state.  The default if nothing is specified
//               is the same TextNode returned by
//               PGItem::get_text_node().
////////////////////////////////////////////////////////////////////
54
void PGEntry::set_text_def(int state, TextNode *node);

367 12 get_text_def 0 4 488 21 PGEntry::get_text_def 0 1 134 392
////////////////////////////////////////////////////////////////////
//     Function: PGEntry::get_text_def
//       Access: Published
//  Description: Returns the TextNode that will be used to render the
//               text within the entry when the entry is in the
//               indicated state.  See set_text_def().
////////////////////////////////////////////////////////////////////
49
TextNode *PGEntry::get_text_def(int state) const;

368 17 get_accept_prefix 0 4 488 26 PGEntry::get_accept_prefix 0 1 135 421
////////////////////////////////////////////////////////////////////
//     Function: PGEntry::get_accept_prefix
//       Access: Published, Static
//  Description: Returns the prefix that is used to define the accept
//               event for all PGEntries.  The accept event is the
//               concatenation of this string followed by get_id().
////////////////////////////////////////////////////////////////////
54
static inline string PGEntry::get_accept_prefix(void);

369 24 get_accept_failed_prefix 0 4 488 33 PGEntry::get_accept_failed_prefix 0 1 136 429
////////////////////////////////////////////////////////////////////
//     Function: PGEntry::get_accept_failed_prefix
//       Access: Published, Static
//  Description: Returns the prefix that is used to define the accept
//               failed event for all PGEntries.  This event is the
//               concatenation of this string followed by get_id().
////////////////////////////////////////////////////////////////////
61
static inline string PGEntry::get_accept_failed_prefix(void);

370 19 get_overflow_prefix 0 4 488 28 PGEntry::get_overflow_prefix 0 1 137 427
////////////////////////////////////////////////////////////////////
//     Function: PGEntry::get_overflow_prefix
//       Access: Published, Static
//  Description: Returns the prefix that is used to define the overflow
//               event for all PGEntries.  The overflow event is the
//               concatenation of this string followed by get_id().
////////////////////////////////////////////////////////////////////
56
static inline string PGEntry::get_overflow_prefix(void);

371 15 get_type_prefix 0 4 488 24 PGEntry::get_type_prefix 0 1 138 415
////////////////////////////////////////////////////////////////////
//     Function: PGEntry::get_type_prefix
//       Access: Published, Static
//  Description: Returns the prefix that is used to define the type
//               event for all PGEntries.  The type event is the
//               concatenation of this string followed by get_id().
////////////////////////////////////////////////////////////////////
52
static inline string PGEntry::get_type_prefix(void);

372 16 get_erase_prefix 0 4 488 25 PGEntry::get_erase_prefix 0 1 139 418
////////////////////////////////////////////////////////////////////
//     Function: PGEntry::get_erase_prefix
//       Access: Published, Static
//  Description: Returns the prefix that is used to define the erase
//               event for all PGEntries.  The erase event is the
//               concatenation of this string followed by get_id().
////////////////////////////////////////////////////////////////////
53
static inline string PGEntry::get_erase_prefix(void);

373 21 get_cursormove_prefix 0 4 488 30 PGEntry::get_cursormove_prefix 0 1 140 425
////////////////////////////////////////////////////////////////////
//     Function: PGEntry::get_cursormove_prefix
//       Access: Published, Static
//  Description: Returns the prefix that is used to define the cursor
//               event for all PGEntries.  The cursor event is the
//               concatenation of this string followed by get_id().
////////////////////////////////////////////////////////////////////
58
static inline string PGEntry::get_cursormove_prefix(void);

374 16 get_accept_event 0 4 488 25 PGEntry::get_accept_event 0 1 141 321
////////////////////////////////////////////////////////////////////
//     Function: PGEntry::get_accept_event
//       Access: Published
//  Description: Returns the event name that will be thrown when the
//               entry is accepted normally.
////////////////////////////////////////////////////////////////////
74
inline string PGEntry::get_accept_event(ButtonHandle const &button) const;

375 23 get_accept_failed_event 0 4 488 32 PGEntry::get_accept_failed_event 0 1 142 329
////////////////////////////////////////////////////////////////////
//     Function: PGEntry::get_accept_failed_event
//       Access: Published
//  Description: Returns the event name that will be thrown when the
//               entry cannot accept an input
////////////////////////////////////////////////////////////////////
81
inline string PGEntry::get_accept_failed_event(ButtonHandle const &button) const;

376 18 get_overflow_event 0 4 488 27 PGEntry::get_overflow_event 0 1 143 459
////////////////////////////////////////////////////////////////////
//     Function: PGEntry::get_overflow_event
//       Access: Published
//  Description: Returns the event name that will be thrown when too
//               much text is attempted to be entered into the
//               PGEntry, exceeding either the limit set via
//               set_max_chars() or via set_max_width().
////////////////////////////////////////////////////////////////////
54
inline string PGEntry::get_overflow_event(void) const;

377 14 get_type_event 0 4 488 23 PGEntry::get_type_event 0 1 144 328
////////////////////////////////////////////////////////////////////
//     Function: PGEntry::get_type_event
//       Access: Published
//  Description: Returns the event name that will be thrown whenever
//               the user extends the text by typing.
////////////////////////////////////////////////////////////////////
50
inline string PGEntry::get_type_event(void) const;

378 15 get_erase_event 0 4 488 24 PGEntry::get_erase_event 0 1 145 332
////////////////////////////////////////////////////////////////////
//     Function: PGEntry::get_erase_event
//       Access: Published
//  Description: Returns the event name that will be thrown whenever
//               the user erases characters in the text.
////////////////////////////////////////////////////////////////////
51
inline string PGEntry::get_erase_event(void) const;

379 20 get_cursormove_event 0 4 488 29 PGEntry::get_cursormove_event 0 1 146 314
////////////////////////////////////////////////////////////////////
//     Function: PGEntry::get_cursormove_event
//       Access: Published
//  Description: Returns the event name that will be thrown whenever
//               the cursor moves
////////////////////////////////////////////////////////////////////
56
inline string PGEntry::get_cursormove_event(void) const;

380 9 set_wtext 0 4 488 18 PGEntry::set_wtext 0 1 147 457
////////////////////////////////////////////////////////////////////
//     Function: PGEntry::set_wtext
//       Access: Published
//  Description: Changes the text currently displayed within the
//               entry.
//
//               The return value is true if all the text is accepted,
//               or false if some was truncated (see set_max_width(),
//               etc.).
////////////////////////////////////////////////////////////////////
53
inline bool PGEntry::set_wtext(wstring const &wtext);

381 15 get_plain_wtext 0 4 488 24 PGEntry::get_plain_wtext 0 1 148 339
////////////////////////////////////////////////////////////////////
//     Function: PGEntry::get_plain_wtext
//       Access: Published
//  Description: Returns the text currently displayed within the
//               entry, without any embedded properties characters.
////////////////////////////////////////////////////////////////////
52
inline wstring PGEntry::get_plain_wtext(void) const;

382 9 get_wtext 0 4 488 18 PGEntry::get_wtext 0 1 149 289
////////////////////////////////////////////////////////////////////
//     Function: PGEntry::get_wtext
//       Access: Published
//  Description: Returns the text currently displayed within the
//               entry.
////////////////////////////////////////////////////////////////////
46
inline wstring PGEntry::get_wtext(void) const;

383 18 set_accept_enabled 0 4 488 27 PGEntry::set_accept_enabled 0 1 150 322
////////////////////////////////////////////////////////////////////
//     Function: PGEntry::set_accept_enabled
//       Access: Published
//  Description: Sets whether the input may be accepted--use to 
//               disable submission by the user
////////////////////////////////////////////////////////////////////
54
inline void PGEntry::set_accept_enabled(bool enabled);

384 8 is_wtext 0 4 488 17 PGEntry::is_wtext 0 1 151 462
////////////////////////////////////////////////////////////////////
//     Function: PGEntry::is_wtext
//       Access: Published
//  Description: Returns true if any of the characters in the string
//               returned by get_wtext() are out of the range of an
//               ASCII character (and, therefore, get_wtext() should
//               be called in preference to get_text()).
////////////////////////////////////////////////////////////////////
35
bool PGEntry::is_wtext(void) const;

385 14 get_class_type 0 4 488 23 PGEntry::get_class_type 0 1 152 0
48
static TypeHandle PGEntry::get_class_type(void);

386 37 upcast_to_TypedWritableReferenceCount 0 12 490 62 PGMouseWatcherParameter::upcast_to_TypedWritableReferenceCount 0 1 155 66
upcast from PGMouseWatcherParameter to TypedWritableReferenceCount
98
TypedWritableReferenceCount *PGMouseWatcherParameter::upcast_to_TypedWritableReferenceCount(void);

387 35 downcast_to_PGMouseWatcherParameter 0 12 491 64 TypedWritableReferenceCount::downcast_to_PGMouseWatcherParameter 0 1 156 68
downcast from TypedWritableReferenceCount to PGMouseWatcherParameter
96
PGMouseWatcherParameter *TypedWritableReferenceCount::downcast_to_PGMouseWatcherParameter(void);

388 31 upcast_to_MouseWatcherParameter 0 12 490 56 PGMouseWatcherParameter::upcast_to_MouseWatcherParameter 0 1 157 60
upcast from PGMouseWatcherParameter to MouseWatcherParameter
86
MouseWatcherParameter *PGMouseWatcherParameter::upcast_to_MouseWatcherParameter(void);

389 35 downcast_to_PGMouseWatcherParameter 0 12 492 58 MouseWatcherParameter::downcast_to_PGMouseWatcherParameter 0 1 158 62
downcast from MouseWatcherParameter to PGMouseWatcherParameter
90
PGMouseWatcherParameter *MouseWatcherParameter::downcast_to_PGMouseWatcherParameter(void);

390 24 ~PGMouseWatcherParameter 0 6 490 49 PGMouseWatcherParameter::~PGMouseWatcherParameter 0 0 241
////////////////////////////////////////////////////////////////////
//     Function: PGMouseWatcherParameter::Destructor
//       Access: Public, Virtual
//  Description: 
////////////////////////////////////////////////////////////////////
64
virtual PGMouseWatcherParameter::~PGMouseWatcherParameter(void);

391 6 output 0 4 490 31 PGMouseWatcherParameter::output 0 1 153 231
////////////////////////////////////////////////////////////////////
//     Function: PGMouseWatcherParameter::output
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
57
void PGMouseWatcherParameter::output(ostream &out) const;

392 14 get_class_type 0 4 490 39 PGMouseWatcherParameter::get_class_type 0 1 154 0
64
static TypeHandle PGMouseWatcherParameter::get_class_type(void);

393 24 PGMouseWatcherBackground 0 4 493 50 PGMouseWatcherBackground::PGMouseWatcherBackground 0 1 159 234
////////////////////////////////////////////////////////////////////
//     Function: PGMouseWatcherBackground::Constructor
//       Access: Public
//  Description: 
////////////////////////////////////////////////////////////////////
57
PGMouseWatcherBackground::PGMouseWatcherBackground(void);

394 14 get_class_type 0 4 493 40 PGMouseWatcherBackground::get_class_type 0 1 160 0
65
static TypeHandle PGMouseWatcherBackground::get_class_type(void);

395 14 PGVirtualFrame 0 4 495 30 PGVirtualFrame::PGVirtualFrame 0 1 161 461
////////////////////////////////////////////////////////////////////
//     Function: PGVirtualFrame::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PGVirtualFrame::Copy Constructor
//       Access: Protected
//  Description: 
////////////////////////////////////////////////////////////////////
56
PGVirtualFrame::PGVirtualFrame(string const &name = "");

396 5 setup 0 4 495 21 PGVirtualFrame::setup 0 1 162 294
////////////////////////////////////////////////////////////////////
//     Function: PGVirtualFrame::setup
//       Access: Published
//  Description: Creates a PGVirtualFrame with the indicated 
//               dimensions.
////////////////////////////////////////////////////////////////////
66
void PGVirtualFrame::setup(PN_stdfloat width, PN_stdfloat height);

397 14 set_clip_frame 0 4 495 30 PGVirtualFrame::set_clip_frame 0 2 163 164 1186
////////////////////////////////////////////////////////////////////
//     Function: PGVirtualFrame::set_clip_frame
//       Access: Published
//  Description: Sets the bounding rectangle of the clip frame.
//               This is the size of the small window through which we
//               can see the virtual canvas.  Normally, this is the
//               same size as the actual frame or smaller (typically
//               it is smaller by the size of the bevel, or to make
//               room for scroll bars).
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PGVirtualFrame::set_clip_frame
//       Access: Published
//  Description: Sets the bounding rectangle of the clip frame.
//               This is the size of the small window through which we
//               can see the virtual canvas.  Normally, this is the
//               same size as the actual frame or smaller (typically
//               it is smaller by the size of the bevel, or to make
//               room for scroll bars).
////////////////////////////////////////////////////////////////////
183
inline void PGVirtualFrame::set_clip_frame(PN_stdfloat left, PN_stdfloat right, PN_stdfloat bottom, PN_stdfloat top);
void PGVirtualFrame::set_clip_frame(LVecBase4 const &clip_frame);

398 14 get_clip_frame 0 4 495 30 PGVirtualFrame::get_clip_frame 0 1 165 404
////////////////////////////////////////////////////////////////////
//     Function: PGVirtualFrame::get_clip_frame
//       Access: Published
//  Description: Returns the bounding rectangle of the clip frame.
//               See set_clip_frame().  If has_clip_frame() is
//               false, this returns the item's actual frame.
////////////////////////////////////////////////////////////////////
67
inline LVecBase4 const &PGVirtualFrame::get_clip_frame(void) const;

399 14 has_clip_frame 0 4 495 30 PGVirtualFrame::has_clip_frame 0 1 166 405
////////////////////////////////////////////////////////////////////
//     Function: PGVirtualFrame::has_clip_frame
//       Access: Published
//  Description: Returns true if the clip frame has been set; see
//               set_clip_frame().  If it has not been set, objects in
//               the virtual frame will not be clipped.
////////////////////////////////////////////////////////////////////
55
inline bool PGVirtualFrame::has_clip_frame(void) const;

400 16 clear_clip_frame 0 4 495 32 PGVirtualFrame::clear_clip_frame 0 1 167 311
////////////////////////////////////////////////////////////////////
//     Function: PGVirtualFrame::clear_clip_frame
//       Access: Published
//  Description: Removes the clip frame from the item.  This
//               disables clipping.
////////////////////////////////////////////////////////////////////
44
void PGVirtualFrame::clear_clip_frame(void);

401 20 set_canvas_transform 0 4 495 36 PGVirtualFrame::set_canvas_transform 0 1 168 380
////////////////////////////////////////////////////////////////////
//     Function: PGVirtualFrame::set_canvas_transform
//       Access: Published
//  Description: Changes the transform of the virtual canvas.  This
//               transform is applied to all child nodes of the
//               canvas_node.
////////////////////////////////////////////////////////////////////
82
inline void PGVirtualFrame::set_canvas_transform(TransformState const *transform);

402 20 get_canvas_transform 0 4 495 36 PGVirtualFrame::get_canvas_transform 0 1 169 380
////////////////////////////////////////////////////////////////////
//     Function: PGVirtualFrame::get_canvas_transform
//       Access: Published
//  Description: Returns the transform of the virtual canvas.  This
//               transform is applied to all child nodes of the
//               canvas_node.
////////////////////////////////////////////////////////////////////
78
inline TransformState const *PGVirtualFrame::get_canvas_transform(void) const;

403 15 get_canvas_node 0 4 495 31 PGVirtualFrame::get_canvas_node 0 1 170 338
////////////////////////////////////////////////////////////////////
//     Function: PGVirtualFrame::get_canvas_node
//       Access: Published
//  Description: Returns the special node that holds all of the
//               children that appear in the virtual canvas.
////////////////////////////////////////////////////////////////////
62
inline PandaNode *PGVirtualFrame::get_canvas_node(void) const;

404 17 get_canvas_parent 0 4 495 33 PGVirtualFrame::get_canvas_parent 0 1 171 276
////////////////////////////////////////////////////////////////////
//     Function: PGVirtualFrame::get_canvas_parent
//       Access: Published
//  Description: Returns the parent node of the canvas_node.
////////////////////////////////////////////////////////////////////
64
inline PandaNode *PGVirtualFrame::get_canvas_parent(void) const;

405 14 get_class_type 0 4 495 30 PGVirtualFrame::get_class_type 0 1 172 0
55
static TypeHandle PGVirtualFrame::get_class_type(void);

406 16 upcast_to_PGItem 0 12 496 29 PGSliderBar::upcast_to_PGItem 0 1 209 33
upcast from PGSliderBar to PGItem
44
PGItem *PGSliderBar::upcast_to_PGItem(void);

407 23 downcast_to_PGSliderBar 0 12 483 31 PGItem::downcast_to_PGSliderBar 0 1 210 35
downcast from PGItem to PGSliderBar
51
PGSliderBar *PGItem::downcast_to_PGSliderBar(void);

408 24 upcast_to_PGButtonNotify 0 12 496 37 PGSliderBar::upcast_to_PGButtonNotify 0 0 41
upcast from PGSliderBar to PGButtonNotify
60
PGButtonNotify *PGSliderBar::upcast_to_PGButtonNotify(void);

409 23 downcast_to_PGSliderBar 0 12 497 39 PGButtonNotify::downcast_to_PGSliderBar 0 0 43
downcast from PGButtonNotify to PGSliderBar
59
PGSliderBar *PGButtonNotify::downcast_to_PGSliderBar(void);

410 11 PGSliderBar 0 4 496 24 PGSliderBar::PGSliderBar 0 1 173 455
////////////////////////////////////////////////////////////////////
//     Function: PGSliderBar::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PGSliderBar::Copy Constructor
//       Access: Protected
//  Description: 
////////////////////////////////////////////////////////////////////
50
PGSliderBar::PGSliderBar(string const &name = "");

411 12 ~PGSliderBar 0 6 496 25 PGSliderBar::~PGSliderBar 0 0 229
////////////////////////////////////////////////////////////////////
//     Function: PGSliderBar::Destructor
//       Access: Public, Virtual
//  Description: 
////////////////////////////////////////////////////////////////////
40
virtual PGSliderBar::~PGSliderBar(void);

412 16 setup_scroll_bar 0 4 496 29 PGSliderBar::setup_scroll_bar 0 1 174 797
////////////////////////////////////////////////////////////////////
//     Function: PGSliderBar::setup_scroll_bar
//       Access: Published
//  Description: Creates PGSliderBar that represents a vertical or
//               horizontal scroll bar (if vertical is true or false,
//               respectively), with additional buttons for scrolling,
//               and a range of 0 .. 1.
//
//               length here is the measurement along the scroll bar,
//               and width is the measurement across the scroll bar,
//               whether it is vertical or horizontal (so for a
//               horizontal scroll bar, the length is actually the x
//               dimension, and the width is the y dimension).
////////////////////////////////////////////////////////////////////
108
void PGSliderBar::setup_scroll_bar(bool vertical, PN_stdfloat length, PN_stdfloat width, PN_stdfloat bevel);

413 12 setup_slider 0 4 496 25 PGSliderBar::setup_slider 0 1 175 454
////////////////////////////////////////////////////////////////////
//     Function: PGSliderBar::setup_slider
//       Access: Published
//  Description: Creates PGSliderBar that represents a slider that the
//               user can use to control an analog quantity.
//
//               This is functionally the same as a scroll bar, but it
//               has a distinctive look.
////////////////////////////////////////////////////////////////////
104
void PGSliderBar::setup_slider(bool vertical, PN_stdfloat length, PN_stdfloat width, PN_stdfloat bevel);

414 8 set_axis 0 4 496 21 PGSliderBar::set_axis 0 1 176 926
////////////////////////////////////////////////////////////////////
//     Function: PGSliderBar::set_axis
//       Access: Published
//  Description: Specifies the axis of the slider bar's motion.  This
//               should be only one of four vectors: (1, 0, 0), (0, 0,
//               1), (-1, 0, 0), or (0, 0, -1).
//
//               This specifies the vector in which the thumb moves
//               when it is moving from the minimum to the maximum
//               value.
//
//               The axis must be parallel to one of the screen axes,
//               and it must be normalized.  Hence, it may only be one
//               of the above four possibilities; anything else is an
//               error and will result in indeterminate behavior.
//
//               Normally, you should not try to set the axis
//               directly.
////////////////////////////////////////////////////////////////////
56
inline void PGSliderBar::set_axis(LVector3 const &axis);

415 8 get_axis 0 4 496 21 PGSliderBar::get_axis 0 1 177 299
////////////////////////////////////////////////////////////////////
//     Function: PGSliderBar::get_axis
//       Access: Published
//  Description: Returns the axis of the slider bar's motion.  See
//               set_axis().
////////////////////////////////////////////////////////////////////
57
inline LVector3 const &PGSliderBar::get_axis(void) const;

416 9 set_range 0 4 496 22 PGSliderBar::set_range 0 1 178 273
////////////////////////////////////////////////////////////////////
//     Function: PGSliderBar::set_range
//       Access: Published
//  Description: Sets the minimum and maxmimum value for the slider.
////////////////////////////////////////////////////////////////////
81
inline void PGSliderBar::set_range(PN_stdfloat min_value, PN_stdfloat max_value);

417 13 get_min_value 0 4 496 26 PGSliderBar::get_min_value 0 1 179 304
////////////////////////////////////////////////////////////////////
//     Function: PGSliderBar::get_min_value
//       Access: Published
//  Description: Returns the value when the slider is all the way to
//               the left.
////////////////////////////////////////////////////////////////////
58
inline PN_stdfloat PGSliderBar::get_min_value(void) const;

418 13 get_max_value 0 4 496 26 PGSliderBar::get_max_value 0 1 180 305
////////////////////////////////////////////////////////////////////
//     Function: PGSliderBar::get_max_value
//       Access: Published
//  Description: Returns the value when the slider is all the way to
//               the right.
////////////////////////////////////////////////////////////////////
58
inline PN_stdfloat PGSliderBar::get_max_value(void) const;

419 15 set_scroll_size 0 4 496 28 PGSliderBar::set_scroll_size 0 1 181 337
////////////////////////////////////////////////////////////////////
//     Function: PGSliderBar::set_scroll_size
//       Access: Published
//  Description: Specifies the amount the slider will move when the
//               user clicks on the left or right buttons.
////////////////////////////////////////////////////////////////////
66
inline void PGSliderBar::set_scroll_size(PN_stdfloat scroll_size);

420 15 get_scroll_size 0 4 496 28 PGSliderBar::get_scroll_size 0 1 182 276
////////////////////////////////////////////////////////////////////
//     Function: PGSliderBar::get_scroll_size
//       Access: Published
//  Description: Returns the value last set by set_scroll_size().
////////////////////////////////////////////////////////////////////
60
inline PN_stdfloat PGSliderBar::get_scroll_size(void) const;

421 13 set_page_size 0 4 496 26 PGSliderBar::set_page_size 0 1 183 516
////////////////////////////////////////////////////////////////////
//     Function: PGSliderBar::set_page_size
//       Access: Published
//  Description: Specifies the amount of data contained in a single
//               page.  This indicates how much the thumb will jump
//               when the trough is directly clicked; and if
//               resize_thumb is true, it also controls the visible
//               size of the thumb button.
////////////////////////////////////////////////////////////////////
62
inline void PGSliderBar::set_page_size(PN_stdfloat page_size);

422 13 get_page_size 0 4 496 26 PGSliderBar::get_page_size 0 1 184 272
////////////////////////////////////////////////////////////////////
//     Function: PGSliderBar::get_page_size
//       Access: Published
//  Description: Returns the value last set by set_page_size().
////////////////////////////////////////////////////////////////////
58
inline PN_stdfloat PGSliderBar::get_page_size(void) const;

423 9 set_value 0 4 496 22 PGSliderBar::set_value 0 1 185 374
////////////////////////////////////////////////////////////////////
//     Function: PGSliderBar::set_value
//       Access: Published
//  Description: Sets the current value of the slider
//               programmatically.  This should range between
//               get_min_value() and get_max_value().
////////////////////////////////////////////////////////////////////
54
inline void PGSliderBar::set_value(PN_stdfloat value);

424 9 get_value 0 4 496 22 PGSliderBar::get_value 0 1 186 262
////////////////////////////////////////////////////////////////////
//     Function: PGSliderBar::get_value
//       Access: Published
//  Description: Returns the current value of the slider.
////////////////////////////////////////////////////////////////////
54
inline PN_stdfloat PGSliderBar::get_value(void) const;

425 9 set_ratio 0 4 496 22 PGSliderBar::set_ratio 0 1 187 307
////////////////////////////////////////////////////////////////////
//     Function: PGSliderBar::set_ratio
//       Access: Published
//  Description: Sets the current value of the slider, expressed in
//               the range 0 .. 1.
////////////////////////////////////////////////////////////////////
54
inline void PGSliderBar::set_ratio(PN_stdfloat ratio);

426 9 get_ratio 0 4 496 22 PGSliderBar::get_ratio 0 1 188 310
////////////////////////////////////////////////////////////////////
//     Function: PGSliderBar::get_ratio
//       Access: Published
//  Description: Returns the current value of the slider, expressed in
//               the range 0 .. 1.
////////////////////////////////////////////////////////////////////
54
inline PN_stdfloat PGSliderBar::get_ratio(void) const;

427 14 is_button_down 0 4 496 27 PGSliderBar::is_button_down 0 1 189 440
////////////////////////////////////////////////////////////////////
//     Function: PGSliderBar::is_button_down
//       Access: Published
//  Description: Returns true if the user is currently holding down
//               the mouse button to manipulate the slider.  When
//               true, calls to set_ratio() or set_value() will have
//               no effect.
////////////////////////////////////////////////////////////////////
52
inline bool PGSliderBar::is_button_down(void) const;

428 16 set_resize_thumb 0 4 496 29 PGSliderBar::set_resize_thumb 0 1 190 480
////////////////////////////////////////////////////////////////////
//     Function: PGSliderBar::set_resize_thumb
//       Access: Published
//  Description: Sets the resize_thumb flag.  When this is true, the
//               thumb button's frame will be adjusted so that its
//               width visually represents the page size.  When this
//               is false, the thumb button will be left alone.
////////////////////////////////////////////////////////////////////
61
inline void PGSliderBar::set_resize_thumb(bool resize_thumb);

429 16 get_resize_thumb 0 4 496 29 PGSliderBar::get_resize_thumb 0 1 191 301
////////////////////////////////////////////////////////////////////
//     Function: PGSliderBar::get_resize_thumb
//       Access: Published
//  Description: Returns the resize_thumb flag.  See
//               set_resize_thumb().
////////////////////////////////////////////////////////////////////
54
inline bool PGSliderBar::get_resize_thumb(void) const;

430 17 set_manage_pieces 0 4 496 30 PGSliderBar::set_manage_pieces 0 1 192 531
////////////////////////////////////////////////////////////////////
//     Function: PGSliderBar::set_manage_pieces
//       Access: Published
//  Description: Sets the manage_pieces flag.  When this is true, the
//               sub-pieces of the slider bar--that is, the thumb, and
//               the left and right scroll buttons--are automatically
//               positioned and/or resized when the slider bar's
//               overall frame is changed.
////////////////////////////////////////////////////////////////////
63
inline void PGSliderBar::set_manage_pieces(bool manage_pieces);

431 17 get_manage_pieces 0 4 496 30 PGSliderBar::get_manage_pieces 0 1 193 304
////////////////////////////////////////////////////////////////////
//     Function: PGSliderBar::get_manage_pieces
//       Access: Published
//  Description: Returns the manage_pieces flag.  See
//               set_manage_pieces().
////////////////////////////////////////////////////////////////////
55
inline bool PGSliderBar::get_manage_pieces(void) const;

432 16 set_thumb_button 0 4 496 29 PGSliderBar::set_thumb_button 0 1 194 621
////////////////////////////////////////////////////////////////////
//     Function: PGSliderBar::set_thumb_button
//       Access: Published
//  Description: Sets the PGButton object that will serve as the thumb
//               for this slider.  This button visually represents the
//               position of the slider, and can be dragged left and
//               right by the user.
//
//               It is the responsibility of the caller to ensure that
//               the button object is parented to the PGSliderBar
//               node.
////////////////////////////////////////////////////////////////////
66
inline void PGSliderBar::set_thumb_button(PGButton *thumb_button);

433 18 clear_thumb_button 0 4 496 31 PGSliderBar::clear_thumb_button 0 1 195 396
////////////////////////////////////////////////////////////////////
//     Function: PGSliderBar::clear_thumb_button
//       Access: Published
//  Description: Removes the thumb button object from control of the
//               frame.  It is your responsibility to actually remove
//               or hide the button itself.
////////////////////////////////////////////////////////////////////
50
inline void PGSliderBar::clear_thumb_button(void);

434 16 get_thumb_button 0 4 496 29 PGSliderBar::get_thumb_button 0 1 196 334
////////////////////////////////////////////////////////////////////
//     Function: PGSliderBar::get_thumb_button
//       Access: Published
//  Description: Returns the PGButton that serves as the thumb for
//               this slider, or NULL if it is not set.
////////////////////////////////////////////////////////////////////
59
inline PGButton *PGSliderBar::get_thumb_button(void) const;

435 15 set_left_button 0 4 496 28 PGSliderBar::set_left_button 0 1 197 637
////////////////////////////////////////////////////////////////////
//     Function: PGSliderBar::set_left_button
//       Access: Published
//  Description: Sets the PGButton object that will serve as the left
//               scroll button for this slider.  This button is
//               optional; if present, the user can click on it to
//               move scroll_size units at a time to the left.
//
//               It is the responsibility of the caller to ensure that
//               the button object is parented to the PGSliderBar
//               node.
////////////////////////////////////////////////////////////////////
64
inline void PGSliderBar::set_left_button(PGButton *left_button);

436 17 clear_left_button 0 4 496 30 PGSliderBar::clear_left_button 0 1 198 394
////////////////////////////////////////////////////////////////////
//     Function: PGSliderBar::clear_left_button
//       Access: Published
//  Description: Removes the left button object from control of the
//               frame.  It is your responsibility to actually remove
//               or hide the button itself.
////////////////////////////////////////////////////////////////////
49
inline void PGSliderBar::clear_left_button(void);

437 15 get_left_button 0 4 496 28 PGSliderBar::get_left_button 0 1 199 371
////////////////////////////////////////////////////////////////////
//     Function: PGSliderBar::get_left_button
//       Access: Published
//  Description: Returns the PGButton that serves as the left scroll
//               button for this slider, if any, or NULL if it is not
//               set.
////////////////////////////////////////////////////////////////////
58
inline PGButton *PGSliderBar::get_left_button(void) const;

438 16 set_right_button 0 4 496 29 PGSliderBar::set_right_button 0 1 200 640
////////////////////////////////////////////////////////////////////
//     Function: PGSliderBar::set_right_button
//       Access: Published
//  Description: Sets the PGButton object that will serve as the right
//               scroll button for this slider.  This button is
//               optional; if present, the user can click on it to
//               move scroll_size units at a time to the right.
//
//               It is the responsibility of the caller to ensure that
//               the button object is parented to the PGSliderBar
//               node.
////////////////////////////////////////////////////////////////////
66
inline void PGSliderBar::set_right_button(PGButton *right_button);

439 18 clear_right_button 0 4 496 31 PGSliderBar::clear_right_button 0 1 201 396
////////////////////////////////////////////////////////////////////
//     Function: PGSliderBar::clear_right_button
//       Access: Published
//  Description: Removes the right button object from control of the
//               frame.  It is your responsibility to actually remove
//               or hide the button itself.
////////////////////////////////////////////////////////////////////
50
inline void PGSliderBar::clear_right_button(void);

440 16 get_right_button 0 4 496 29 PGSliderBar::get_right_button 0 1 202 373
////////////////////////////////////////////////////////////////////
//     Function: PGSliderBar::get_right_button
//       Access: Published
//  Description: Returns the PGButton that serves as the right scroll
//               button for this slider, if any, or NULL if it is not
//               set.
////////////////////////////////////////////////////////////////////
59
inline PGButton *PGSliderBar::get_right_button(void) const;

441 17 get_adjust_prefix 0 4 496 30 PGSliderBar::get_adjust_prefix 0 1 203 428
////////////////////////////////////////////////////////////////////
//     Function: PGSliderBar::get_adjust_prefix
//       Access: Published, Static
//  Description: Returns the prefix that is used to define the adjust
//               event for all PGSliderBars.  The adjust event is the
//               concatenation of this string followed by get_id().
////////////////////////////////////////////////////////////////////
58
static inline string PGSliderBar::get_adjust_prefix(void);

442 16 get_adjust_event 0 4 496 29 PGSliderBar::get_adjust_event 0 1 204 376
////////////////////////////////////////////////////////////////////
//     Function: PGSliderBar::get_adjust_event
//       Access: Published
//  Description: Returns the event name that will be thrown when the
//               slider bar value is adjusted by the user or
//               programmatically.
////////////////////////////////////////////////////////////////////
56
inline string PGSliderBar::get_adjust_event(void) const;

443 10 set_active 0 6 496 23 PGSliderBar::set_active 0 1 205 524
////////////////////////////////////////////////////////////////////
//     Function: PGSliderBar::set_active
//       Access: Published, Virtual
//  Description: Sets whether the PGItem is active for mouse watching.
//               This is not necessarily related to the
//               active/inactive appearance of the item, which is
//               controlled by set_state(), but it does affect whether
//               it responds to mouse events.
////////////////////////////////////////////////////////////////////
50
virtual void PGSliderBar::set_active(bool active);

444 8 remanage 0 4 496 21 PGSliderBar::remanage 0 1 206 372
////////////////////////////////////////////////////////////////////
//     Function: PGSliderBar::remanage
//       Access: Published
//  Description: Manages the position and size of the scroll bars and
//               the thumb.  Normally this should not need to be
//               called directly.
////////////////////////////////////////////////////////////////////
33
void PGSliderBar::remanage(void);

445 9 recompute 0 4 496 22 PGSliderBar::recompute 0 1 207 338
////////////////////////////////////////////////////////////////////
//     Function: PGSliderBar::recompute
//       Access: Published
//  Description: Recomputes the position and size of the thumb.
//               Normally this should not need to be called directly.
////////////////////////////////////////////////////////////////////
34
void PGSliderBar::recompute(void);

446 14 get_class_type 0 4 496 27 PGSliderBar::get_class_type 0 1 208 0
52
static TypeHandle PGSliderBar::get_class_type(void);

447 24 upcast_to_PGVirtualFrame 0 12 498 39 PGScrollFrame::upcast_to_PGVirtualFrame 0 1 231 43
upcast from PGScrollFrame to PGVirtualFrame
62
PGVirtualFrame *PGScrollFrame::upcast_to_PGVirtualFrame(void);

448 25 downcast_to_PGScrollFrame 0 12 495 41 PGVirtualFrame::downcast_to_PGScrollFrame 0 1 232 45
downcast from PGVirtualFrame to PGScrollFrame
63
PGScrollFrame *PGVirtualFrame::downcast_to_PGScrollFrame(void);

449 27 upcast_to_PGSliderBarNotify 0 12 498 42 PGScrollFrame::upcast_to_PGSliderBarNotify 0 0 46
upcast from PGScrollFrame to PGSliderBarNotify
68
PGSliderBarNotify *PGScrollFrame::upcast_to_PGSliderBarNotify(void);

450 25 downcast_to_PGScrollFrame 0 12 499 44 PGSliderBarNotify::downcast_to_PGScrollFrame 0 0 48
downcast from PGSliderBarNotify to PGScrollFrame
66
PGScrollFrame *PGSliderBarNotify::downcast_to_PGScrollFrame(void);

451 13 PGScrollFrame 0 4 498 28 PGScrollFrame::PGScrollFrame 0 1 211 459
////////////////////////////////////////////////////////////////////
//     Function: PGScrollFrame::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PGScrollFrame::Copy Constructor
//       Access: Protected
//  Description: 
////////////////////////////////////////////////////////////////////
54
PGScrollFrame::PGScrollFrame(string const &name = "");

452 14 ~PGScrollFrame 0 6 498 29 PGScrollFrame::~PGScrollFrame 0 0 231
////////////////////////////////////////////////////////////////////
//     Function: PGScrollFrame::Destructor
//       Access: Public, Virtual
//  Description: 
////////////////////////////////////////////////////////////////////
44
virtual PGScrollFrame::~PGScrollFrame(void);

453 5 setup 0 4 498 20 PGScrollFrame::setup 0 1 212 325
////////////////////////////////////////////////////////////////////
//     Function: PGScrollFrame::setup
//       Access: Published
//  Description: Creates a PGScrollFrame with the indicated 
//               dimensions, and the indicated virtual frame.
////////////////////////////////////////////////////////////////////
184
void PGScrollFrame::setup(PN_stdfloat width, PN_stdfloat height, PN_stdfloat left, PN_stdfloat right, PN_stdfloat bottom, PN_stdfloat top, PN_stdfloat slider_width, PN_stdfloat bevel);

454 17 set_virtual_frame 0 4 498 32 PGScrollFrame::set_virtual_frame 0 2 213 214 832
////////////////////////////////////////////////////////////////////
//     Function: PGScrollFrame::set_virtual_frame
//       Access: Published
//  Description: Sets the bounding rectangle of the virtual frame.
//               This is the size of the large, virtual canvas which
//               we can see only a portion of at any given time.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PGScrollFrame::set_virtual_frame
//       Access: Published
//  Description: Sets the bounding rectangle of the virtual frame.
//               This is the size of the large, virtual canvas which
//               we can see only a portion of at any given time.
////////////////////////////////////////////////////////////////////
197
inline void PGScrollFrame::set_virtual_frame(PN_stdfloat left, PN_stdfloat right, PN_stdfloat bottom, PN_stdfloat top);
inline void PGScrollFrame::set_virtual_frame(LVecBase4 const &virtual_frame);

455 17 get_virtual_frame 0 4 498 32 PGScrollFrame::get_virtual_frame 0 1 215 413
////////////////////////////////////////////////////////////////////
//     Function: PGScrollFrame::get_virtual_frame
//       Access: Published
//  Description: Returns the bounding rectangle of the virtual frame.
//               See set_virtual_frame().  If has_virtual_frame() is
//               false, this returns the item's clip frame.
////////////////////////////////////////////////////////////////////
69
inline LVecBase4 const &PGScrollFrame::get_virtual_frame(void) const;

456 17 has_virtual_frame 0 4 498 32 PGScrollFrame::has_virtual_frame 0 1 216 405
////////////////////////////////////////////////////////////////////
//     Function: PGScrollFrame::has_virtual_frame
//       Access: Published
//  Description: Returns true if the virtual frame has a bounding
//               rectangle; see set_virtual_frame().  Most
//               PGScrollFrame objects will have a virtual frame.
////////////////////////////////////////////////////////////////////
57
inline bool PGScrollFrame::has_virtual_frame(void) const;

457 19 clear_virtual_frame 0 4 498 34 PGScrollFrame::clear_virtual_frame 0 1 217 441
////////////////////////////////////////////////////////////////////
//     Function: PGScrollFrame::clear_virtual_frame
//       Access: Published
//  Description: Removes the virtual frame from the item.  This
//               effectively sets the virtual frame to the same size
//               as the clip frame.  Scrolling will no longer be
//               possible.
////////////////////////////////////////////////////////////////////
53
inline void PGScrollFrame::clear_virtual_frame(void);

458 17 set_manage_pieces 0 4 498 32 PGScrollFrame::set_manage_pieces 0 1 218 614
////////////////////////////////////////////////////////////////////
//     Function: PGScrollFrame::set_manage_pieces
//       Access: Published
//  Description: Sets the manage_pieces flag.  When this is true, the
//               sub-pieces of the scroll frame--that is, the two
//               scroll bars--are automatically positioned and/or
//               resized when the scroll frame's overall frame is
//               changed.  They are also automatically resized to fill
//               in the gap when one or the other is hidden.
////////////////////////////////////////////////////////////////////
65
inline void PGScrollFrame::set_manage_pieces(bool manage_pieces);

459 17 get_manage_pieces 0 4 498 32 PGScrollFrame::get_manage_pieces 0 1 219 306
////////////////////////////////////////////////////////////////////
//     Function: PGScrollFrame::get_manage_pieces
//       Access: Published
//  Description: Returns the manage_pieces flag.  See
//               set_manage_pieces().
////////////////////////////////////////////////////////////////////
57
inline bool PGScrollFrame::get_manage_pieces(void) const;

460 13 set_auto_hide 0 4 498 28 PGScrollFrame::set_auto_hide 0 1 220 652
////////////////////////////////////////////////////////////////////
//     Function: PGScrollFrame::set_auto_hide
//       Access: Published
//  Description: Sets the auto_hide flag.  When this is true, the
//               two scroll bars are automatically hidden if they are
//               not needed (that is, if the virtual frame would fit
//               within the clip frame without them), and they are
//               automatically shown when they are needed.
//
//               Setting this flag true forces the manage_pieces flag
//               to also be set true.
////////////////////////////////////////////////////////////////////
57
inline void PGScrollFrame::set_auto_hide(bool auto_hide);

461 13 get_auto_hide 0 4 498 28 PGScrollFrame::get_auto_hide 0 1 221 294
////////////////////////////////////////////////////////////////////
//     Function: PGScrollFrame::get_auto_hide
//       Access: Published
//  Description: Returns the auto_hide flag.  See
//               set_auto_hide().
////////////////////////////////////////////////////////////////////
53
inline bool PGScrollFrame::get_auto_hide(void) const;

462 21 set_horizontal_slider 0 4 498 36 PGScrollFrame::set_horizontal_slider 0 1 222 479
////////////////////////////////////////////////////////////////////
//     Function: PGScrollFrame::set_horizontal_slider
//       Access: Published
//  Description: Sets the PGSliderBar object that will serve as the
//               horizontal scroll bar for this frame.  It is your
//               responsibility to parent this slider bar to the frame
//               and move it to the appropriate place.
////////////////////////////////////////////////////////////////////
81
inline void PGScrollFrame::set_horizontal_slider(PGSliderBar *horizontal_slider);

463 23 clear_horizontal_slider 0 4 498 38 PGScrollFrame::clear_horizontal_slider 0 1 223 405
////////////////////////////////////////////////////////////////////
//     Function: PGScrollFrame::clear_horizontal_slider
//       Access: Published
//  Description: Removes the horizontal scroll bar from control of the
//               frame.  It is your responsibility to actually remove
//               or hide the object itself.
////////////////////////////////////////////////////////////////////
57
inline void PGScrollFrame::clear_horizontal_slider(void);

464 21 get_horizontal_slider 0 4 498 36 PGScrollFrame::get_horizontal_slider 0 1 224 384
////////////////////////////////////////////////////////////////////
//     Function: PGScrollFrame::get_horizontal_slider
//       Access: Published
//  Description: Returns the PGSliderBar that serves as the horizontal
//               scroll bar for this frame, if any, or NULL if it is
//               not set.
////////////////////////////////////////////////////////////////////
69
inline PGSliderBar *PGScrollFrame::get_horizontal_slider(void) const;

465 19 set_vertical_slider 0 4 498 34 PGScrollFrame::set_vertical_slider 0 1 225 475
////////////////////////////////////////////////////////////////////
//     Function: PGScrollFrame::set_vertical_slider
//       Access: Published
//  Description: Sets the PGSliderBar object that will serve as the
//               vertical scroll bar for this frame.  It is your
//               responsibility to parent this slider bar to the frame
//               and move it to the appropriate place.
////////////////////////////////////////////////////////////////////
77
inline void PGScrollFrame::set_vertical_slider(PGSliderBar *vertical_slider);

466 21 clear_vertical_slider 0 4 498 36 PGScrollFrame::clear_vertical_slider 0 1 226 401
////////////////////////////////////////////////////////////////////
//     Function: PGScrollFrame::clear_vertical_slider
//       Access: Published
//  Description: Removes the vertical scroll bar from control of the
//               frame.  It is your responsibility to actually remove
//               or hide the object itself.
////////////////////////////////////////////////////////////////////
55
inline void PGScrollFrame::clear_vertical_slider(void);

467 19 get_vertical_slider 0 4 498 34 PGScrollFrame::get_vertical_slider 0 1 227 380
////////////////////////////////////////////////////////////////////
//     Function: PGScrollFrame::get_vertical_slider
//       Access: Published
//  Description: Returns the PGSliderBar that serves as the vertical
//               scroll bar for this frame, if any, or NULL if it is
//               not set.
////////////////////////////////////////////////////////////////////
67
inline PGSliderBar *PGScrollFrame::get_vertical_slider(void) const;

468 8 remanage 0 4 498 23 PGScrollFrame::remanage 0 1 228 342
////////////////////////////////////////////////////////////////////
//     Function: PGScrollFrame::remanage
//       Access: Published
//  Description: Manages the position and size of the scroll bars.
//               Normally this should not need to be called directly.
////////////////////////////////////////////////////////////////////
35
void PGScrollFrame::remanage(void);

469 9 recompute 0 4 498 24 PGScrollFrame::recompute 0 1 229 335
////////////////////////////////////////////////////////////////////
//     Function: PGScrollFrame::recompute
//       Access: Published
//  Description: Forces the PGScrollFrame to recompute itself right
//               now.  Normally this should not be required.
////////////////////////////////////////////////////////////////////
43
inline void PGScrollFrame::recompute(void);

470 14 get_class_type 0 4 498 29 PGScrollFrame::get_class_type 0 1 230 0
54
static TypeHandle PGScrollFrame::get_class_type(void);

471 9 PGWaitBar 0 4 500 20 PGWaitBar::PGWaitBar 0 1 233 451
////////////////////////////////////////////////////////////////////
//     Function: PGWaitBar::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PGWaitBar::Copy Constructor
//       Access: Protected
//  Description: 
////////////////////////////////////////////////////////////////////
46
PGWaitBar::PGWaitBar(string const &name = "");

472 5 setup 0 4 500 16 PGWaitBar::setup 0 1 234 317
////////////////////////////////////////////////////////////////////
//     Function: PGWaitBar::setup
//       Access: Published
//  Description: Creates a PGWaitBar with the indicated dimensions,
//               with the indicated maximum range.
////////////////////////////////////////////////////////////////////
80
void PGWaitBar::setup(PN_stdfloat width, PN_stdfloat height, PN_stdfloat range);

473 9 set_range 0 4 500 20 PGWaitBar::set_range 0 1 235 271
////////////////////////////////////////////////////////////////////
//     Function: PGWaitBar::set_range
//       Access: Published
//  Description: Sets the value at which the WaitBar indicates 100%.
////////////////////////////////////////////////////////////////////
52
inline void PGWaitBar::set_range(PN_stdfloat range);

474 9 get_range 0 4 500 20 PGWaitBar::get_range 0 1 236 274
////////////////////////////////////////////////////////////////////
//     Function: PGWaitBar::get_range
//       Access: Published
//  Description: Returns the value at which the WaitBar indicates 100%.
////////////////////////////////////////////////////////////////////
52
inline PN_stdfloat PGWaitBar::get_range(void) const;

475 9 set_value 0 4 500 20 PGWaitBar::set_value 0 1 237 317
////////////////////////////////////////////////////////////////////
//     Function: PGWaitBar::set_value
//       Access: Published
//  Description: Sets the current value of the bar.  This should range
//               between 0 and get_range().
////////////////////////////////////////////////////////////////////
52
inline void PGWaitBar::set_value(PN_stdfloat value);

476 9 get_value 0 4 500 20 PGWaitBar::get_value 0 1 238 257
////////////////////////////////////////////////////////////////////
//     Function: PGWaitBar::get_value
//       Access: Published
//  Description: Returns the current value of the bar.
////////////////////////////////////////////////////////////////////
52
inline PN_stdfloat PGWaitBar::get_value(void) const;

477 11 get_percent 0 4 500 22 PGWaitBar::get_percent 0 1 239 254
////////////////////////////////////////////////////////////////////
//     Function: PGWaitBar::get_percent
//       Access: Published
//  Description: Returns the percentage complete.
////////////////////////////////////////////////////////////////////
54
inline PN_stdfloat PGWaitBar::get_percent(void) const;

478 13 set_bar_style 0 4 500 24 PGWaitBar::set_bar_style 0 1 240 334
////////////////////////////////////////////////////////////////////
//     Function: PGWaitBar::set_bar_style
//       Access: Published
//  Description: Sets the kind of frame that is drawn on top of the
//               WaitBar to represent the amount completed.
////////////////////////////////////////////////////////////////////
64
inline void PGWaitBar::set_bar_style(PGFrameStyle const &style);

479 13 get_bar_style 0 4 500 24 PGWaitBar::get_bar_style 0 1 241 337
////////////////////////////////////////////////////////////////////
//     Function: PGWaitBar::get_bar_style
//       Access: Published
//  Description: Returns the kind of frame that is drawn on top of the
//               WaitBar to represent the amount completed.
////////////////////////////////////////////////////////////////////
57
inline PGFrameStyle PGWaitBar::get_bar_style(void) const;

480 14 get_class_type 0 4 500 25 PGWaitBar::get_class_type 0 1 242 0
50
static TypeHandle PGWaitBar::get_class_type(void);

242
1 0 0 7 2 501 245 0 225 ////////////////////////////////////////////////////////////////////
//     Function: PGFrameStyle::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 0 
2 0 0 7 2 501 245 0 230 ////////////////////////////////////////////////////////////////////
//     Function: PGFrameStyle::Copy Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 copy 1 502  
3 0 0 6 3 501 0 0 0 2 4 this 3 501  4 copy 1 502  
4 0 0 4 6 504 0 0 251 ////////////////////////////////////////////////////////////////////
//     Function: PGFrameStyle::set_type
//       Access: Published
//  Description: Sets the basic type of frame.
//////////////////////////////////////////////////////////////////// 2 4 this 3 501  4 type 1 482  
5 0 0 6 7 482 0 0 254 ////////////////////////////////////////////////////////////////////
//     Function: PGFrameStyle::get_type
//       Access: Published
//  Description: Returns the basic type of frame.
//////////////////////////////////////////////////////////////////// 1 4 this 3 502  
6 0 0 4 8 504 0 0 260 ////////////////////////////////////////////////////////////////////
//     Function: PGFrameStyle::set_color
//       Access: Published
//  Description: Sets the dominant color of the frame.
//////////////////////////////////////////////////////////////////// 2 4 this 3 501  5 color 1 505  
7 0 0 4 8 504 0 0 260 ////////////////////////////////////////////////////////////////////
//     Function: PGFrameStyle::set_color
//       Access: Published
//  Description: Sets the dominant color of the frame.
//////////////////////////////////////////////////////////////////// 5 4 this 3 501  1 r 1 510  1 g 1 510  1 b 1 510  1 a 1 510  
8 0 0 7 9 512 0 0 263 ////////////////////////////////////////////////////////////////////
//     Function: PGFrameStyle::set_color
//       Access: Published
//  Description: Returns the dominant color of the frame.
//////////////////////////////////////////////////////////////////// 1 4 this 3 502  
9 0 0 4 10 504 0 0 298 ////////////////////////////////////////////////////////////////////
//     Function: PGFrameStyle::set_texture
//       Access: Published
//  Description: Specifies a texture that should be applied to the
//               frame.
//////////////////////////////////////////////////////////////////// 2 4 this 3 501  7 texture 1 513  
10 0 0 6 11 515 0 0 298 ////////////////////////////////////////////////////////////////////
//     Function: PGFrameStyle::has_texture
//       Access: Published
//  Description: Returns true if a texture has been applied to the
//               frame.
//////////////////////////////////////////////////////////////////// 1 4 this 3 502  
11 0 0 7 12 513 0 0 337 ////////////////////////////////////////////////////////////////////
//     Function: PGFrameStyle::get_texture
//       Access: Published
//  Description: Returns the texture that has been applied to the
//               frame, or NULL if no texture has been applied.
//////////////////////////////////////////////////////////////////// 1 4 this 3 502  
12 0 0 4 13 504 0 0 262 ////////////////////////////////////////////////////////////////////
//     Function: PGFrameStyle::clear_texture
//       Access: Published
//  Description: Removes the texture from the frame.
//////////////////////////////////////////////////////////////////// 1 4 this 3 501  
13 0 0 4 14 504 0 0 456 ////////////////////////////////////////////////////////////////////
//     Function: PGFrameStyle::set_width
//       Access: Published
//  Description: Sets the width parameter, which has meaning only for
//               certain frame types.  For instance, this is the width
//               of the bevel for T_bevel_in or T_bevel_out.  The
//               units are in screen units.
//////////////////////////////////////////////////////////////////// 2 4 this 3 501  5 width 1 516  
14 0 0 4 14 504 0 0 456 ////////////////////////////////////////////////////////////////////
//     Function: PGFrameStyle::set_width
//       Access: Published
//  Description: Sets the width parameter, which has meaning only for
//               certain frame types.  For instance, this is the width
//               of the bevel for T_bevel_in or T_bevel_out.  The
//               units are in screen units.
//////////////////////////////////////////////////////////////////// 3 4 this 3 501  1 x 1 510  1 y 1 510  
15 0 0 6 15 516 0 0 458 ////////////////////////////////////////////////////////////////////
//     Function: PGFrameStyle::get_width
//       Access: Published
//  Description: Returns the width parameter, which has meaning only
//               for certain frame types.  For instance, this is the
//               width of the bevel for T_bevel_in or T_bevel_out.
//               The units are in screen units.
//////////////////////////////////////////////////////////////////// 1 4 this 3 502  
16 0 0 4 16 504 0 0 449 ////////////////////////////////////////////////////////////////////
//     Function: PGFrameStyle::set_uv_width
//       Access: Published
//  Description: Sets the uv_width parameter, which indicates the
//               amount of the texture that is consumed by the inner
//               bevel--the width in texture space of the amount
//               indicated by set_width.
//////////////////////////////////////////////////////////////////// 2 4 this 3 501  8 uv_width 1 516  
17 0 0 4 16 504 0 0 449 ////////////////////////////////////////////////////////////////////
//     Function: PGFrameStyle::set_uv_width
//       Access: Published
//  Description: Sets the uv_width parameter, which indicates the
//               amount of the texture that is consumed by the inner
//               bevel--the width in texture space of the amount
//               indicated by set_width.
//////////////////////////////////////////////////////////////////// 3 4 this 3 501  1 u 1 510  1 v 1 510  
18 0 0 6 17 516 0 0 245 ////////////////////////////////////////////////////////////////////
//     Function: PGFrameStyle::get_uv_width
//       Access: Published
//  Description: See set_uv_width().
//////////////////////////////////////////////////////////////////// 1 4 this 3 502  
19 0 0 4 18 504 0 0 520 ////////////////////////////////////////////////////////////////////
//     Function: PGFrameStyle::set_visible_scale
//       Access: Published
//  Description: Sets a scale factor on the visible representation of
//               the frame, in the X and Y directions.  If this scale
//               factor is other than 1, it will affect the size of
//               the visible frame representation within the actual
//               frame border.
//////////////////////////////////////////////////////////////////// 2 4 this 3 501  13 visible_scale 1 516  
20 0 0 4 18 504 0 0 520 ////////////////////////////////////////////////////////////////////
//     Function: PGFrameStyle::set_visible_scale
//       Access: Published
//  Description: Sets a scale factor on the visible representation of
//               the frame, in the X and Y directions.  If this scale
//               factor is other than 1, it will affect the size of
//               the visible frame representation within the actual
//               frame border.
//////////////////////////////////////////////////////////////////// 3 4 this 3 501  1 x 1 510  1 y 1 510  
21 0 0 6 19 516 0 0 525 ////////////////////////////////////////////////////////////////////
//     Function: PGFrameStyle::get_visible_scale
//       Access: Published
//  Description: Returns the scale factor on the visible
//               representation of the frame, in the X and Y
//               directions.  If this scale factor is other than 1, it
//               will affect the size of the visible frame
//               representation within the actual frame border.
//////////////////////////////////////////////////////////////////// 1 4 this 3 502  
22 0 0 7 20 523 0 0 487 ////////////////////////////////////////////////////////////////////
//     Function: PGFrameStyle::get_internal_frame
//       Access: Published
//  Description: Computes the size of the internal frame, given the
//               indicated external frame, appropriate for this kind
//               of frame style.  This simply subtracts the border
//               width for those frame styles that include a border.
//////////////////////////////////////////////////////////////////// 2 4 this 3 502  5 frame 1 521  
23 0 0 4 21 504 0 0 220 ////////////////////////////////////////////////////////////////////
//     Function: PGFrameStyle::output
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 502  3 out 1 524  
24 0 0 7 24 527 0 0 219 ////////////////////////////////////////////////////////////////////
//     Function: PGItem::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 name 1 526  
25 0 0 4 25 504 0 0 212 ////////////////////////////////////////////////////////////////////
//     Function: PGItem::set_name
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 527  4 name 1 526  
26 0 0 4 26 504 0 0 537 ////////////////////////////////////////////////////////////////////
//     Function: PGItem::set_frame
//       Access: Published
//  Description: Sets the bounding rectangle of the item, in local
//               coordinates.  This is the region on screen within
//               which the mouse will be considered to be within the
//               item.  Normally, it should correspond to the bounding
//               rectangle of the visible geometry of the item.
//////////////////////////////////////////////////////////////////// 2 4 this 3 527  5 frame 1 521  
27 0 0 4 26 504 0 0 537 ////////////////////////////////////////////////////////////////////
//     Function: PGItem::set_frame
//       Access: Published
//  Description: Sets the bounding rectangle of the item, in local
//               coordinates.  This is the region on screen within
//               which the mouse will be considered to be within the
//               item.  Normally, it should correspond to the bounding
//               rectangle of the visible geometry of the item.
//////////////////////////////////////////////////////////////////// 5 4 this 3 527  4 left 1 510  5 right 1 510  6 bottom 1 510  3 top 1 510  
28 0 0 6 27 521 0 0 371 ////////////////////////////////////////////////////////////////////
//     Function: PGItem::get_frame
//       Access: Published
//  Description: Returns the bounding rectangle of the item.  See
//               set_frame().  It is an error to call this if
//               has_frame() returns false.
//////////////////////////////////////////////////////////////////// 1 4 this 3 528  
29 0 0 6 28 515 0 0 301 ////////////////////////////////////////////////////////////////////
//     Function: PGItem::has_frame
//       Access: Published
//  Description: Returns true if the item has a bounding rectangle;
//               see set_frame().
//////////////////////////////////////////////////////////////////// 1 4 this 3 528  
30 0 0 4 29 504 0 0 385 ////////////////////////////////////////////////////////////////////
//     Function: PGItem::clear_frame
//       Access: Published
//  Description: Removes the bounding rectangle from the item.  It
//               will no longer be possible to position the mouse
//               within the item; see set_frame().
//////////////////////////////////////////////////////////////////// 1 4 this 3 527  
31 0 0 4 30 504 0 0 428 ////////////////////////////////////////////////////////////////////
//     Function: PGItem::set_state
//       Access: Published
//  Description: Sets the "state" of this particular PGItem.  
//
//               The PGItem node will render as if it were the
//               subgraph assigned to the corresponding index via
//               set_state_def().
//////////////////////////////////////////////////////////////////// 2 4 this 3 527  5 state 1 530  
32 0 0 6 31 530 0 0 298 ////////////////////////////////////////////////////////////////////
//     Function: PGItem::get_state
//       Access: Published
//  Description: Returns the "state" of this particular PGItem.  See
//               set_state().
//////////////////////////////////////////////////////////////////// 1 4 this 3 528  
33 0 0 4 32 504 0 0 519 ////////////////////////////////////////////////////////////////////
//     Function: PGItem::set_active
//       Access: Published, Virtual
//  Description: Sets whether the PGItem is active for mouse watching.
//               This is not necessarily related to the
//               active/inactive appearance of the item, which is
//               controlled by set_state(), but it does affect whether
//               it responds to mouse events.
//////////////////////////////////////////////////////////////////// 2 4 this 3 527  6 active 1 515  
34 0 0 6 33 515 0 0 318 ////////////////////////////////////////////////////////////////////
//     Function: PGItem::get_active
//       Access: Published
//  Description: Returns whether the PGItem is currently active for
//               mouse events.  See set_active().
//////////////////////////////////////////////////////////////////// 1 4 this 3 528  
35 0 0 4 34 504 0 0 717 ////////////////////////////////////////////////////////////////////
//     Function: PGItem::set_focus
//       Access: Published, Virtual
//  Description: Sets whether the PGItem currently has keyboard focus.
//               This simply means that the item may respond to
//               keyboard events as well as to mouse events; precisely
//               what this means is up to the individual item.  
//
//               Only one PGItem in the world is allowed to have focus
//               at any given time.  Setting the focus on any other
//               item automatically disables the focus from the
//               previous item.
//////////////////////////////////////////////////////////////////// 2 4 this 3 527  5 focus 1 515  
36 0 0 6 35 515 0 0 319 ////////////////////////////////////////////////////////////////////
//     Function: PGItem::get_focus
//       Access: Published
//  Description: Returns whether the PGItem currently has focus for
//               keyboard events.  See set_focus().
//////////////////////////////////////////////////////////////////// 1 4 this 3 528  
37 0 0 4 36 504 0 0 554 ////////////////////////////////////////////////////////////////////
//     Function: PGItem::set_background_focus
//       Access: Published
//  Description: Sets the background_focus flag for this item.  When
//               background_focus is enabled, the item will receive
//               keypress events even if it is not in focus; in fact,
//               even if it is not onscreen.  Unlike normal focus,
//               many items may have background_focus simultaneously.
//////////////////////////////////////////////////////////////////// 2 4 this 3 527  5 focus 1 515  
38 0 0 6 37 515 0 0 328 ////////////////////////////////////////////////////////////////////
//     Function: PGItem::get_background_focus
//       Access: Published
//  Description: Returns whether background_focus is currently
//               enabled.  See set_background_focus().
//////////////////////////////////////////////////////////////////// 1 4 this 3 528  
39 0 0 4 38 504 0 0 396 ////////////////////////////////////////////////////////////////////
//     Function: PGItem::set_suppress_flags
//       Access: Published
//  Description: This is just an interface to set the suppress flags
//               on the underlying MouseWatcherRegion.  See
//               MouseWatcherRegion::set_suppress_flags().
//////////////////////////////////////////////////////////////////// 2 4 this 3 527  14 suppress_flags 1 530  
40 0 0 6 39 530 0 0 396 ////////////////////////////////////////////////////////////////////
//     Function: PGItem::get_suppress_flags
//       Access: Published
//  Description: This is just an interface to get the suppress flags
//               on the underlying MouseWatcherRegion.  See
//               MouseWatcherRegion::get_suppress_flags().
//////////////////////////////////////////////////////////////////// 1 4 this 3 528  
41 0 0 6 40 530 0 0 619 ////////////////////////////////////////////////////////////////////
//     Function: PGItem::get_num_state_defs
//       Access: Published
//  Description: Returns one more than the highest-numbered state def
//               that was ever assigned to the PGItem.  The complete
//               set of state defs assigned may then be retrieved by
//               indexing from 0 to (get_num_state_defs() - 1).
//
//               This is only an upper limit on the actual number of
//               state defs, since there may be holes in the list.
//////////////////////////////////////////////////////////////////// 1 4 this 3 528  
42 0 0 4 41 504 0 0 381 ////////////////////////////////////////////////////////////////////
//     Function: PGItem::clear_state_def
//       Access: Published
//  Description: Resets the NodePath assigned to the indicated state
//               to its initial default, with only a frame
//               representation if appropriate.
//////////////////////////////////////////////////////////////////// 2 4 this 3 527  5 state 1 530  
43 0 0 6 42 515 0 0 404 ////////////////////////////////////////////////////////////////////
//     Function: PGItem::has_state_def
//       Access: Published
//  Description: Returns true if get_state_def() has ever been called
//               for the indicated state (thus defining a render
//               subgraph for this state index), false otherwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 528  5 state 1 530  
44 0 0 6 43 531 0 0 468 ////////////////////////////////////////////////////////////////////
//     Function: PGItem::get_state_def
//       Access: Published
//  Description: Returns the Node that is the root of the subgraph
//               that will be drawn when the PGItem is in the
//               indicated state.  The first time this is called for a
//               particular state index, it may create the Node.
//////////////////////////////////////////////////////////////////// 2 4 this 3 527  5 state 1 530  
45 0 0 7 44 531 0 0 340 ////////////////////////////////////////////////////////////////////
//     Function: PGItem::instance_to_state_def
//       Access: Published
//  Description: Parents an instance of the bottom node of the
//               indicated NodePath to the indicated state index.
//////////////////////////////////////////////////////////////////// 3 4 this 3 527  5 state 1 530  4 path 1 533  
46 0 0 7 45 501 245 0 335 ////////////////////////////////////////////////////////////////////
//     Function: PGItem::get_frame_style
//       Access: Published
//  Description: Returns the kind of frame that will be drawn behind
//               the item when it is in the indicated state.
//////////////////////////////////////////////////////////////////// 2 4 this 3 527  5 state 1 530  
47 0 0 4 46 504 0 0 335 ////////////////////////////////////////////////////////////////////
//     Function: PGItem::set_frame_style
//       Access: Published
//  Description: Changes the kind of frame that will be drawn behind
//               the item when it is in the indicated state.
//////////////////////////////////////////////////////////////////// 3 4 this 3 527  5 state 1 530  5 style 1 502  
48 0 0 6 47 526 0 0 426 ////////////////////////////////////////////////////////////////////
//     Function: PGItem::get_id
//       Access: Published
//  Description: Returns the unique ID assigned to this PGItem.  This
//               will be assigned to the region created with the
//               MouseWatcher, and will thus be used to generate event
//               names.
//////////////////////////////////////////////////////////////////// 1 4 this 3 528  
49 0 0 4 48 504 0 0 654 ////////////////////////////////////////////////////////////////////
//     Function: PGItem::set_id
//       Access: Published
//  Description: Set the unique ID assigned to this PGItem.  It is the
//               user's responsibility to ensure that this ID is
//               unique.
//
//               Normally, this should not need to be called, as the
//               PGItem will assign itself an ID when it is created,
//               but this function allows the user to decide to
//               redefine the ID to be something possibly more
//               meaningful.
//////////////////////////////////////////////////////////////////// 2 4 this 3 527  2 id 1 526  
50 0 0 6 49 526 0 0 415 ////////////////////////////////////////////////////////////////////
//     Function: PGItem::get_enter_prefix
//       Access: Published, Static
//  Description: Returns the prefix that is used to define the enter
//               event for all PGItems.  The enter event is the
//               concatenation of this string followed by get_id().
//////////////////////////////////////////////////////////////////// 0 
51 0 0 6 50 526 0 0 412 ////////////////////////////////////////////////////////////////////
//     Function: PGItem::get_exit_prefix
//       Access: Published, Static
//  Description: Returns the prefix that is used to define the exit
//               event for all PGItems.  The exit event is the
//               concatenation of this string followed by get_id().
//////////////////////////////////////////////////////////////////// 0 
52 0 0 6 51 526 0 0 418 ////////////////////////////////////////////////////////////////////
//     Function: PGItem::get_within_prefix
//       Access: Published, Static
//  Description: Returns the prefix that is used to define the within
//               event for all PGItems.  The within event is the
//               concatenation of this string followed by get_id().
//////////////////////////////////////////////////////////////////// 0 
53 0 0 6 52 526 0 0 421 ////////////////////////////////////////////////////////////////////
//     Function: PGItem::get_without_prefix
//       Access: Published, Static
//  Description: Returns the prefix that is used to define the without
//               event for all PGItems.  The without event is the
//               concatenation of this string followed by get_id().
//////////////////////////////////////////////////////////////////// 0 
54 0 0 6 53 526 0 0 527 ////////////////////////////////////////////////////////////////////
//     Function: PGItem::get_focus_in_prefix
//       Access: Published, Static
//  Description: Returns the prefix that is used to define the focus_in
//               event for all PGItems.  The focus_in event is the
//               concatenation of this string followed by get_id().
//
//               Unlike most item events, this event is thrown with no
//               parameters.
//////////////////////////////////////////////////////////////////// 0 
55 0 0 6 54 526 0 0 530 ////////////////////////////////////////////////////////////////////
//     Function: PGItem::get_focus_out_prefix
//       Access: Published, Static
//  Description: Returns the prefix that is used to define the focus_out
//               event for all PGItems.  The focus_out event is the
//               concatenation of this string followed by get_id().
//
//               Unlike most item events, this event is thrown with no
//               parameters.
//////////////////////////////////////////////////////////////////// 0 
56 0 0 6 55 526 0 0 472 ////////////////////////////////////////////////////////////////////
//     Function: PGItem::get_press_prefix
//       Access: Published, Static
//  Description: Returns the prefix that is used to define the press
//               event for all PGItems.  The press event is the
//               concatenation of this string followed by a button
//               name, followed by a hyphen and get_id().
//////////////////////////////////////////////////////////////////// 0 
57 0 0 6 56 526 0 0 475 ////////////////////////////////////////////////////////////////////
//     Function: PGItem::get_repeat_prefix
//       Access: Published, Static
//  Description: Returns the prefix that is used to define the repeat
//               event for all PGItems.  The repeat event is the
//               concatenation of this string followed by a button
//               name, followed by a hyphen and get_id().
//////////////////////////////////////////////////////////////////// 0 
58 0 0 6 57 526 0 0 478 ////////////////////////////////////////////////////////////////////
//     Function: PGItem::get_release_prefix
//       Access: Published, Static
//  Description: Returns the prefix that is used to define the release
//               event for all PGItems.  The release event is the
//               concatenation of this string followed by a button
//               name, followed by a hyphen and get_id().
//////////////////////////////////////////////////////////////////// 0 
59 0 0 6 58 526 0 0 457 ////////////////////////////////////////////////////////////////////
//     Function: PGItem::get_keystroke_prefix
//       Access: Published, Static
//  Description: Returns the prefix that is used to define the
//               keystroke event for all PGItems.  The keystroke event
//               is the concatenation of this string followed by a
//               hyphen and get_id().
//////////////////////////////////////////////////////////////////// 0 
60 0 0 6 59 526 0 0 382 ////////////////////////////////////////////////////////////////////
//     Function: PGItem::get_enter_event
//       Access: Published
//  Description: Returns the event name that will be thrown when the
//               item is active and the mouse enters its frame, but
//               not any nested frames.
//////////////////////////////////////////////////////////////////// 1 4 this 3 528  
61 0 0 6 60 526 0 0 379 ////////////////////////////////////////////////////////////////////
//     Function: PGItem::get_exit_event
//       Access: Published
//  Description: Returns the event name that will be thrown when the
//               item is active and the mouse exits its frame, or
//               enters a nested frame.
//////////////////////////////////////////////////////////////////// 1 4 this 3 528  
62 0 0 6 61 526 0 0 545 ////////////////////////////////////////////////////////////////////
//     Function: PGItem::get_within_event
//       Access: Published
//  Description: Returns the event name that will be thrown when the
//               item is active and the mouse moves within the
//               boundaries of the frame.  This is different from the
//               enter_event in that the mouse is considered within
//               the frame even if it is also within a nested frame.
//////////////////////////////////////////////////////////////////// 1 4 this 3 528  
63 0 0 6 62 526 0 0 574 ////////////////////////////////////////////////////////////////////
//     Function: PGItem::get_without_event
//       Access: Published
//  Description: Returns the event name that will be thrown when the
//               item is active and the mouse moves completely outside
//               the boundaries of the frame.  This is different from
//               the exit_event in that the mouse is considered
//               within the frame even if it is also within a nested
//               frame.
//////////////////////////////////////////////////////////////////// 1 4 this 3 528  
64 0 0 6 63 526 0 0 324 ////////////////////////////////////////////////////////////////////
//     Function: PGItem::get_focus_in_event
//       Access: Published
//  Description: Returns the event name that will be thrown when the
//               item gets the keyboard focus.
//////////////////////////////////////////////////////////////////// 1 4 this 3 528  
65 0 0 6 64 526 0 0 326 ////////////////////////////////////////////////////////////////////
//     Function: PGItem::get_focus_out_event
//       Access: Published
//  Description: Returns the event name that will be thrown when the
//               item loses the keyboard focus.
//////////////////////////////////////////////////////////////////// 1 4 this 3 528  
66 0 0 6 65 526 0 0 433 ////////////////////////////////////////////////////////////////////
//     Function: PGItem::get_press_event
//       Access: Published
//  Description: Returns the event name that will be thrown when the
//               item is active and the indicated mouse or keyboard
//               button is depressed while the mouse is within the
//               frame.
//////////////////////////////////////////////////////////////////// 2 4 this 3 528  6 button 1 535  
67 0 0 6 66 526 0 0 447 ////////////////////////////////////////////////////////////////////
//     Function: PGItem::get_repeat_event
//       Access: Published
//  Description: Returns the event name that will be thrown when the
//               item is active and the indicated mouse or keyboard
//               button is continuously held down while the mouse is
//               within the frame.
//////////////////////////////////////////////////////////////////// 2 4 this 3 528  6 button 1 535  
68 0 0 6 67 526 0 0 442 ////////////////////////////////////////////////////////////////////
//     Function: PGItem::get_release_event
//       Access: Published
//  Description: Returns the event name that will be thrown when the
//               item is active and the indicated mouse or keyboard
//               button, formerly clicked down is within the frame, is
//               released.
//////////////////////////////////////////////////////////////////// 2 4 this 3 528  6 button 1 535  
69 0 0 6 68 526 0 0 346 ////////////////////////////////////////////////////////////////////
//     Function: PGItem::get_keystroke_event
//       Access: Published
//  Description: Returns the event name that will be thrown when the
//               item is active and any key is pressed by the user.
//////////////////////////////////////////////////////////////////// 1 4 this 3 528  
70 0 0 7 69 540 0 0 284 ////////////////////////////////////////////////////////////////////
//     Function: PGItem::get_frame_inv_xform
//       Access: Published, Static
//  Description: Returns the inverse of the frame transform matrix
//////////////////////////////////////////////////////////////////// 1 4 this 3 528  
71 0 0 4 70 504 0 0 305 ////////////////////////////////////////////////////////////////////
//     Function: PGItem::set_sound
//       Access: Published
//  Description: Sets the sound that will be played whenever the
//               indicated event occurs.
//////////////////////////////////////////////////////////////////// 3 4 this 3 527  5 event 1 526  5 sound 1 541  
72 0 0 4 71 504 0 0 290 ////////////////////////////////////////////////////////////////////
//     Function: PGItem::clear_sound
//       Access: Published
//  Description: Removes the sound associated with the indicated
//               event.
//////////////////////////////////////////////////////////////////// 2 4 this 3 527  5 event 1 526  
73 0 0 7 72 541 0 0 329 ////////////////////////////////////////////////////////////////////
//     Function: PGItem::get_sound
//       Access: Published
//  Description: Returns the sound associated with the indicated
//               event, or NULL if there is no associated sound.
//////////////////////////////////////////////////////////////////// 2 4 this 3 528  5 event 1 526  
74 0 0 6 73 515 0 0 323 ////////////////////////////////////////////////////////////////////
//     Function: PGItem::has_sound
//       Access: Published
//  Description: Returns true if there is a sound associated with the
//               indicated event, or false otherwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 528  5 event 1 526  
75 0 0 7 74 544 0 0 413 ////////////////////////////////////////////////////////////////////
//     Function: PGItem::get_text_node
//       Access: Published, Static
//  Description: Returns the TextNode object that will be used by all
//               PGItems to generate default labels given a string.
//               This can be loaded with the default font, etc.
//////////////////////////////////////////////////////////////////// 0 
76 0 0 4 75 504 0 0 413 ////////////////////////////////////////////////////////////////////
//     Function: PGItem::set_text_node
//       Access: Published, Static
//  Description: Changes the TextNode object that will be used by all
//               PGItems to generate default labels given a string.
//               This can be loaded with the default font, etc.
//////////////////////////////////////////////////////////////////// 1 4 node 1 544  
77 0 0 7 76 527 0 0 486 ////////////////////////////////////////////////////////////////////
//     Function: PGItem::get_focus_item
//       Access: Published, Static
//  Description: Returns the one PGItem in the world that currently
//               has keyboard focus, if any, or NULL if no item has
//               keyboard focus.  Use PGItem::set_focus() to activate
//               or deactivate keyboard focus on a particular item.
//////////////////////////////////////////////////////////////////// 0 
78 0 0 7 77 546 0 0 0 0 
79 0 0 7 79 547 0 0 221 ////////////////////////////////////////////////////////////////////
//     Function: PGButton::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 name 1 526  
80 0 0 4 81 504 0 0 302 ////////////////////////////////////////////////////////////////////
//     Function: PGButton::setup
//       Access: Published
//  Description: Sets up the button using the indicated NodePath as
//               arbitrary geometry.
//////////////////////////////////////////////////////////////////// 2 4 this 3 547  5 ready 1 533  
81 0 0 4 81 504 0 0 302 ////////////////////////////////////////////////////////////////////
//     Function: PGButton::setup
//       Access: Published
//  Description: Sets up the button using the indicated NodePath as
//               arbitrary geometry.
//////////////////////////////////////////////////////////////////// 3 4 this 3 547  5 ready 1 533  9 depressed 1 533  
82 0 0 4 81 504 0 0 302 ////////////////////////////////////////////////////////////////////
//     Function: PGButton::setup
//       Access: Published
//  Description: Sets up the button using the indicated NodePath as
//               arbitrary geometry.
//////////////////////////////////////////////////////////////////// 4 4 this 3 547  5 ready 1 533  9 depressed 1 533  8 rollover 1 533  
83 0 0 4 81 504 0 0 302 ////////////////////////////////////////////////////////////////////
//     Function: PGButton::setup
//       Access: Published
//  Description: Sets up the button using the indicated NodePath as
//               arbitrary geometry.
//////////////////////////////////////////////////////////////////// 5 4 this 3 547  5 ready 1 533  9 depressed 1 533  8 rollover 1 533  8 inactive 1 533  
84 0 0 4 81 504 0 0 525 ////////////////////////////////////////////////////////////////////
//     Function: PGButton::setup
//       Access: Published
//  Description: Sets up the button as a default text button using the
//               indicated label string.  The TextNode defined by
//               PGItem::get_text_node() will be used to create the
//               label geometry.  This automatically sets up the frame
//               according to the size of the text.
//////////////////////////////////////////////////////////////////// 3 4 this 3 547  5 label 1 526  5 bevel 1 510  
85 0 0 6 82 515 0 0 484 ////////////////////////////////////////////////////////////////////
//     Function: PGButton::add_click_button
//       Access: Published
//  Description: Adds the indicated button to the set of buttons that
//               can effectively "click" the PGButton.  Normally, this
//               is just MouseButton::one().  Returns true if the
//               button was added, or false if it was already there.
//////////////////////////////////////////////////////////////////// 2 4 this 3 547  6 button 1 535  
86 0 0 6 83 515 0 0 512 ////////////////////////////////////////////////////////////////////
//     Function: PGButton::remove_click_button
//       Access: Published
//  Description: Removes the indicated button from the set of buttons
//               that can effectively "click" the PGButton.  Normally,
//               this is just MouseButton::one().  Returns true if the
//               button was removed, or false if it was not in the
//               set.
//////////////////////////////////////////////////////////////////// 2 4 this 3 547  6 button 1 535  
87 0 0 6 84 515 0 0 407 ////////////////////////////////////////////////////////////////////
//     Function: PGButton::has_click_button
//       Access: Published
//  Description: Returns true if the indicated button is on the set of
//               buttons that can effectively "click" the PGButton.
//               Normally, this is just MouseButton::one().
//////////////////////////////////////////////////////////////////// 2 4 this 3 547  6 button 1 535  
88 0 0 6 85 515 0 0 340 ////////////////////////////////////////////////////////////////////
//     Function: PGButton::is_button_down
//       Access: Published
//  Description: Returns true if the user is currently holding the
//               mouse button down on the button, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 547  
89 0 0 6 86 526 0 0 419 ////////////////////////////////////////////////////////////////////
//     Function: PGButton::get_click_prefix
//       Access: Published, Static
//  Description: Returns the prefix that is used to define the click
//               event for all PGButtons.  The click event is the
//               concatenation of this string followed by get_id().
//////////////////////////////////////////////////////////////////// 0 
90 0 0 6 87 526 0 0 321 ////////////////////////////////////////////////////////////////////
//     Function: PGButton::get_click_event
//       Access: Published
//  Description: Returns the event name that will be thrown when the
//               button is clicked normally.
//////////////////////////////////////////////////////////////////// 2 4 this 3 548  6 button 1 535  
91 0 0 7 88 546 0 0 0 0 
92 0 0 7 90 550 0 0 218 ////////////////////////////////////////////////////////////////////
//     Function: PGTop::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 name 1 526  
93 0 0 4 91 504 0 0 388 ////////////////////////////////////////////////////////////////////
//     Function: PGTop::set_mouse_watcher
//       Access: Published
//  Description: Sets the MouseWatcher pointer that the PGTop object
//               registers its PG items with.  This must be set before
//               the PG items are active.
//////////////////////////////////////////////////////////////////// 2 4 this 3 550  7 watcher 1 551  
94 0 0 7 92 551 0 0 391 ////////////////////////////////////////////////////////////////////
//     Function: PGTop::get_mouse_watcher
//       Access: Published
//  Description: Returns the MouseWatcher pointer that the PGTop object
//               registers its PG items with, or NULL if the
//               MouseWatcher has not yet been set.
//////////////////////////////////////////////////////////////////// 1 4 this 3 553  
95 0 0 7 93 556 0 0 388 ////////////////////////////////////////////////////////////////////
//     Function: PGTop::get_group
//       Access: Published
//  Description: Returns the MouseWatcherGroup pointer that the PGTop
//               object registers its PG items with, or NULL if the
//               MouseWatcher has not yet been set.
//////////////////////////////////////////////////////////////////// 1 4 this 3 553  
96 0 0 4 94 504 0 0 1044 ////////////////////////////////////////////////////////////////////
//     Function: PGTop::set_start_sort
//       Access: Published
//  Description: Specifies the sort index that is assigned during the
//               traversal to the first PGItem that is discovered
//               during traversal.  Subsequent PGItems will be
//               assigned consecutively higher sort indexes.
//
//               This number is used by the MouseWatcher system to
//               rank the clickable mouse regions in the same order in
//               which the items are rendered, so that items on top
//               will receive mouse priority.
//
//               Normally, it makes the most sense to leave this
//               initial value at its default value of 0, unless you
//               need the PGItems to have a particular sort value with
//               respect to some other objects in the scene
//               (particularly with a second PGTop node).
//////////////////////////////////////////////////////////////////// 2 4 this 3 550  10 start_sort 1 530  
97 0 0 6 95 530 0 0 395 ////////////////////////////////////////////////////////////////////
//     Function: PGTop::get_start_sort
//       Access: Published
//  Description: Returns the sort index that is assigned during the
//               traversal to the first PGItem that is discovered
//               during traversal.  See set_start_sort().
//////////////////////////////////////////////////////////////////// 1 4 this 3 553  
98 0 0 7 96 546 0 0 0 0 
99 0 0 7 98 557 0 0 220 ////////////////////////////////////////////////////////////////////
//     Function: PGEntry::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 name 1 526  
100 0 0 4 100 504 0 0 538 ////////////////////////////////////////////////////////////////////
//     Function: PGEntry::setup
//       Access: Published
//  Description: Sets up the entry for normal use.  The width is the
//               maximum width of characters that will be typed, and
//               num_lines is the integer number of lines of text of
//               the entry.  Both of these together determine the size
//               of the entry, based on the TextNode in effect.
//////////////////////////////////////////////////////////////////// 3 4 this 3 557  5 width 1 510  9 num_lines 1 530  
101 0 0 4 101 504 0 0 304 ////////////////////////////////////////////////////////////////////
//     Function: PGEntry::setup_minimal
//       Access: Published
//  Description: Sets up the entry without creating any frame or other
//               decoration.
//////////////////////////////////////////////////////////////////// 3 4 this 3 557  5 width 1 510  9 num_lines 1 530  
102 0 0 6 102 515 0 0 630 ////////////////////////////////////////////////////////////////////
//     Function: PGEntry::set_text
//       Access: Published
//  Description: Changes the text currently displayed within the
//               entry.  This uses the Unicode encoding currently
//               specified for the "focus" TextNode; therefore, the
//               TextNode must exist before calling set_text().
//
//               The return value is true if all the text is accepted,
//               or false if some was truncated (see set_max_width(),
//               etc.).
//////////////////////////////////////////////////////////////////// 2 4 this 3 557  4 text 1 526  
103 0 0 6 103 526 0 0 531 ////////////////////////////////////////////////////////////////////
//     Function: PGEntry::get_plain_text
//       Access: Published
//  Description: Returns the text currently displayed within the
//               entry, without any embedded properties characters.
//
//               This uses the Unicode encoding currently specified
//               for the "focus" TextNode; therefore, the TextNode
//               must exist before calling get_text().
//////////////////////////////////////////////////////////////////// 1 4 this 3 558  
104 0 0 6 104 526 0 0 462 ////////////////////////////////////////////////////////////////////
//     Function: PGEntry::get_text
//       Access: Published
//  Description: Returns the text currently displayed within the
//               entry.  This uses the Unicode encoding currently
//               specified for the "focus" TextNode; therefore, the
//               TextNode must exist before calling get_text().
//////////////////////////////////////////////////////////////////// 1 4 this 3 558  
105 0 0 6 105 530 0 0 699 ////////////////////////////////////////////////////////////////////
//     Function: PGEntry::get_num_characters
//       Access: Published
//  Description: Returns the number of characters of text in the
//               entry.  This is the actual number of visible
//               characters, not counting implicit newlines due to
//               wordwrapping, or formatted characters for text
//               properties changes.  If there is an embedded
//               TextGraphic object, it counts as one character.
//
//               This is also the length of the string returned by
//               get_plain_text().
//////////////////////////////////////////////////////////////////// 1 4 this 3 558  
106 0 0 6 106 560 0 0 404 ////////////////////////////////////////////////////////////////////
//     Function: PGEntry::get_character
//       Access: Published
//  Description: Returns the character at the indicated position in
//               the entry.  If the object at this position is a
//               graphic object instead of a character, returns 0.
//////////////////////////////////////////////////////////////////// 2 4 this 3 558  1 n 1 530  
107 0 0 6 107 561 0 0 444 ////////////////////////////////////////////////////////////////////
//     Function: PGEntry::get_graphic
//       Access: Published
//  Description: Returns the graphic object at the indicated position
//               in the pre-wordwrapped string.  If the object at this
//               position is a character instead of a graphic object,
//               returns NULL.
//////////////////////////////////////////////////////////////////// 2 4 this 3 558  1 n 1 530  
108 0 0 6 108 564 0 0 365 ////////////////////////////////////////////////////////////////////
//     Function: PGEntry::get_properties
//       Access: Published
//  Description: Returns the TextProperties in effect for the object
//               at the indicated position in the pre-wordwrapped
//               string.
//////////////////////////////////////////////////////////////////// 2 4 this 3 558  1 n 1 530  
109 0 0 4 109 504 0 0 469 ////////////////////////////////////////////////////////////////////
//     Function: PGEntry::set_cursor_position
//       Access: Published
//  Description: Sets the current position of the cursor.  This is the
//               position within the text at which the next letter
//               typed by the user will be inserted; normally it is
//               the same as the length of the text.
//////////////////////////////////////////////////////////////////// 2 4 this 3 557  8 position 1 530  
110 0 0 6 110 530 0 0 271 ////////////////////////////////////////////////////////////////////
//     Function: PGEntry::get_cursor_position
//       Access: Published
//  Description: Returns the current position of the cursor.
//////////////////////////////////////////////////////////////////// 1 4 this 3 558  
111 0 0 6 111 510 0 0 0 1 4 this 3 558  
112 0 0 6 112 510 0 0 0 1 4 this 3 558  
113 0 0 4 113 504 0 0 507 ////////////////////////////////////////////////////////////////////
//     Function: PGEntry::set_max_chars
//       Access: Published
//  Description: Sets the maximum number of characters that may be
//               typed into the entry.  This is a limit on the number
//               of characters, as opposed to the width of the entry;
//               see also set_max_width().
//
//               If this is 0, there is no limit.
//////////////////////////////////////////////////////////////////// 2 4 this 3 557  9 max_chars 1 530  
114 0 0 6 114 530 0 0 387 ////////////////////////////////////////////////////////////////////
//     Function: PGEntry::get_max_chars
//       Access: Published
//  Description: Returns the current maximum number of characters that
//               may be typed into the entry, or 0 if there is no
//               limit.  See set_max_chars().
//////////////////////////////////////////////////////////////////// 1 4 this 3 558  
115 0 0 4 115 504 0 0 790 ////////////////////////////////////////////////////////////////////
//     Function: PGEntry::set_max_width
//       Access: Published
//  Description: Sets the maximum width of all characters that may be
//               typed into the entry.  This is a limit on the width
//               of the formatted text, not a fixed limit on the
//               number of characters; also set_max_chars().
//
//               If this is 0, there is no limit.
//
//               If _num_lines is more than 1, rather than being a
//               fixed width on the whole entry, this becomes instead
//               the wordwrap width (and the width limit on the entry
//               is essentially _max_width * _num_lines).
//////////////////////////////////////////////////////////////////// 2 4 this 3 557  9 max_width 1 510  
116 0 0 6 116 510 0 0 390 ////////////////////////////////////////////////////////////////////
//     Function: PGEntry::get_max_width
//       Access: Published
//  Description: Returns the current maximum width of the characters
//               that may be typed into the entry, or 0 if there is no
//               limit.  See set_max_width().
//////////////////////////////////////////////////////////////////// 1 4 this 3 558  
117 0 0 4 117 504 0 0 411 ////////////////////////////////////////////////////////////////////
//     Function: PGEntry::set_num_lines
//       Access: Published
//  Description: Sets the number of lines of text the PGEntry will
//               use.  This only has meaning if _max_width is not 0;
//               _max_width indicates the wordwrap width of each line.
//////////////////////////////////////////////////////////////////// 2 4 this 3 557  9 num_lines 1 530  
118 0 0 6 118 530 0 0 342 ////////////////////////////////////////////////////////////////////
//     Function: PGEntry::get_num_lines
//       Access: Published
//  Description: Returns the number of lines of text the PGEntry will
//               use, if _max_width is not 0.  See set_num_lines().
//////////////////////////////////////////////////////////////////// 1 4 this 3 558  
119 0 0 4 119 504 0 0 431 ////////////////////////////////////////////////////////////////////
//     Function: PGEntry::set_blink_rate
//       Access: Published
//  Description: Sets the number of times per second the cursor will
//               blink while the entry has keyboard focus.
//
//               If this is 0, the cursor does not blink, but is held
//               steady.
//////////////////////////////////////////////////////////////////// 2 4 this 3 557  10 blink_rate 1 510  
120 0 0 6 120 510 0 0 337 ////////////////////////////////////////////////////////////////////
//     Function: PGEntry::get_blink_rate
//       Access: Published
//  Description: Returns the number of times per second the cursor
//               will blink, or 0 if the cursor is not to blink.
//////////////////////////////////////////////////////////////////// 1 4 this 3 558  
121 0 0 7 121 531 0 0 375 ////////////////////////////////////////////////////////////////////
//     Function: PGEntry::get_cursor_def
//       Access: Published
//  Description: Returns the Node that will be rendered to represent
//               the cursor.  You can attach suitable cursor geometry
//               to this node.
//////////////////////////////////////////////////////////////////// 1 4 this 3 557  
122 0 0 4 122 504 0 0 336 ////////////////////////////////////////////////////////////////////
//     Function: PGEntry::clear_cursor_def
//       Access: Published
//  Description: Removes all the children from the cursor_def node, in
//               preparation for adding a new definition.
//////////////////////////////////////////////////////////////////// 1 4 this 3 557  
123 0 0 4 123 504 0 0 394 ////////////////////////////////////////////////////////////////////
//     Function: PGEntry::set_cursor_keys_active
//       Access: Published
//  Description: Sets whether the arrow keys (and home/end) control
//               movement of the cursor.  If true, they are active; if
//               false, they are ignored.
//////////////////////////////////////////////////////////////////// 2 4 this 3 557  4 flag 1 515  
124 0 0 6 124 515 0 0 378 ////////////////////////////////////////////////////////////////////
//     Function: PGEntry::get_cursor_keys_active
//       Access: Published
//  Description: Returns whether the arrow keys are currently set to
//               control movement of the cursor; see
//               set_cursor_keys_active().
//////////////////////////////////////////////////////////////////// 1 4 this 3 558  
125 0 0 4 125 504 0 0 759 ////////////////////////////////////////////////////////////////////
//     Function: PGEntry::set_obscure_mode
//       Access: Published
//  Description: Specifies whether obscure mode should be enabled.  In
//               obscure mode, a string of asterisks is displayed
//               instead of the literal text, e.g. for entering
//               passwords.
//
//               In obscure mode, the width of the text is computed
//               based on the width of the string of asterisks, not on
//               the width of the actual text.  This has implications
//               on the maximum length of text that may be entered if
//               max_width is in effect.
//////////////////////////////////////////////////////////////////// 2 4 this 3 557  4 flag 1 515  
126 0 0 6 126 515 0 0 309 ////////////////////////////////////////////////////////////////////
//     Function: PGEntry::get_obscure_mode
//       Access: Published
//  Description: Specifies whether obscure mode is enabled.  See
//               set_obscure_mode().
//////////////////////////////////////////////////////////////////// 1 4 this 3 558  
127 0 0 4 127 504 0 0 489 ////////////////////////////////////////////////////////////////////
//     Function: PGEntry::set_overflow_mode
//       Access: Published
//  Description: Specifies whether overflow mode should be enabled.
//               In overflow mode, text can overflow the boundaries
//               of the Entry element horizontally.
//
//               Overflow mode only works when the number of lines
//               is 1.
//////////////////////////////////////////////////////////////////// 2 4 this 3 557  4 flag 1 515  
128 0 0 6 128 515 0 0 312 ////////////////////////////////////////////////////////////////////
//     Function: PGEntry::get_overflow_mode
//       Access: Published
//  Description: Specifies whether overflow mode is enabled.  See
//               set_overflow_mode().
//////////////////////////////////////////////////////////////////// 1 4 this 3 558  
129 0 0 4 129 504 0 0 984 ////////////////////////////////////////////////////////////////////
//     Function: PGEntry::set_candidate_active
//       Access: Published
//  Description: Specifies the name of the TextProperties structure
//               added to the TextPropertiesManager that will be used
//               to render candidate strings from the IME, used for
//               typing characters in east Asian languages.  Each
//               candidate string represents one possible way to
//               interpret the sequence of keys the user has just
//               entered; it should not be considered typed yet, but
//               it is important for the user to be able to see what
//               he is considering entering.
//
//               This particular method sets the properties for the
//               subset of the current candidate string that the user
//               can actively scroll through.
//////////////////////////////////////////////////////////////////// 2 4 this 3 557  16 candidate_active 1 526  
130 0 0 6 130 526 0 0 256 ////////////////////////////////////////////////////////////////////
//     Function: PGEntry::get_candidate_active
//       Access: Published
//  Description: See set_candidate_active().
//////////////////////////////////////////////////////////////////// 1 4 this 3 558  
131 0 0 4 131 504 0 0 992 ////////////////////////////////////////////////////////////////////
//     Function: PGEntry::set_candidate_inactive
//       Access: Published
//  Description: Specifies the name of the TextProperties structure
//               added to the TextPropertiesManager that will be used
//               to render candidate strings from the IME, used for
//               typing characters in east Asian languages.  Each
//               candidate string represents one possible way to
//               interpret the sequence of keys the user has just
//               entered; it should not be considered typed yet, but
//               it is important for the user to be able to see what
//               he is considering entering.
//
//               This particular method sets the properties for the
//               subset of the current candidate string that the user
//               is not actively scrolling through.
//////////////////////////////////////////////////////////////////// 2 4 this 3 557  18 candidate_inactive 1 526  
132 0 0 6 132 526 0 0 260 ////////////////////////////////////////////////////////////////////
//     Function: PGEntry::get_candidate_inactive
//       Access: Published
//  Description: See set_candidate_inactive().
//////////////////////////////////////////////////////////////////// 1 4 this 3 558  
133 0 0 4 133 504 0 0 500 ////////////////////////////////////////////////////////////////////
//     Function: PGEntry::set_text_def
//       Access: Published
//  Description: Changes the TextNode that will be used to render the
//               text within the entry when the entry is in the
//               indicated state.  The default if nothing is specified
//               is the same TextNode returned by
//               PGItem::get_text_node().
//////////////////////////////////////////////////////////////////// 3 4 this 3 557  5 state 1 530  4 node 1 544  
134 0 0 7 134 544 0 0 392 ////////////////////////////////////////////////////////////////////
//     Function: PGEntry::get_text_def
//       Access: Published
//  Description: Returns the TextNode that will be used to render the
//               text within the entry when the entry is in the
//               indicated state.  See set_text_def().
//////////////////////////////////////////////////////////////////// 2 4 this 3 558  5 state 1 530  
135 0 0 6 135 526 0 0 421 ////////////////////////////////////////////////////////////////////
//     Function: PGEntry::get_accept_prefix
//       Access: Published, Static
//  Description: Returns the prefix that is used to define the accept
//               event for all PGEntries.  The accept event is the
//               concatenation of this string followed by get_id().
//////////////////////////////////////////////////////////////////// 0 
136 0 0 6 136 526 0 0 429 ////////////////////////////////////////////////////////////////////
//     Function: PGEntry::get_accept_failed_prefix
//       Access: Published, Static
//  Description: Returns the prefix that is used to define the accept
//               failed event for all PGEntries.  This event is the
//               concatenation of this string followed by get_id().
//////////////////////////////////////////////////////////////////// 0 
137 0 0 6 137 526 0 0 427 ////////////////////////////////////////////////////////////////////
//     Function: PGEntry::get_overflow_prefix
//       Access: Published, Static
//  Description: Returns the prefix that is used to define the overflow
//               event for all PGEntries.  The overflow event is the
//               concatenation of this string followed by get_id().
//////////////////////////////////////////////////////////////////// 0 
138 0 0 6 138 526 0 0 415 ////////////////////////////////////////////////////////////////////
//     Function: PGEntry::get_type_prefix
//       Access: Published, Static
//  Description: Returns the prefix that is used to define the type
//               event for all PGEntries.  The type event is the
//               concatenation of this string followed by get_id().
//////////////////////////////////////////////////////////////////// 0 
139 0 0 6 139 526 0 0 418 ////////////////////////////////////////////////////////////////////
//     Function: PGEntry::get_erase_prefix
//       Access: Published, Static
//  Description: Returns the prefix that is used to define the erase
//               event for all PGEntries.  The erase event is the
//               concatenation of this string followed by get_id().
//////////////////////////////////////////////////////////////////// 0 
140 0 0 6 140 526 0 0 425 ////////////////////////////////////////////////////////////////////
//     Function: PGEntry::get_cursormove_prefix
//       Access: Published, Static
//  Description: Returns the prefix that is used to define the cursor
//               event for all PGEntries.  The cursor event is the
//               concatenation of this string followed by get_id().
//////////////////////////////////////////////////////////////////// 0 
141 0 0 6 141 526 0 0 321 ////////////////////////////////////////////////////////////////////
//     Function: PGEntry::get_accept_event
//       Access: Published
//  Description: Returns the event name that will be thrown when the
//               entry is accepted normally.
//////////////////////////////////////////////////////////////////// 2 4 this 3 558  6 button 1 535  
142 0 0 6 142 526 0 0 329 ////////////////////////////////////////////////////////////////////
//     Function: PGEntry::get_accept_failed_event
//       Access: Published
//  Description: Returns the event name that will be thrown when the
//               entry cannot accept an input
//////////////////////////////////////////////////////////////////// 2 4 this 3 558  6 button 1 535  
143 0 0 6 143 526 0 0 459 ////////////////////////////////////////////////////////////////////
//     Function: PGEntry::get_overflow_event
//       Access: Published
//  Description: Returns the event name that will be thrown when too
//               much text is attempted to be entered into the
//               PGEntry, exceeding either the limit set via
//               set_max_chars() or via set_max_width().
//////////////////////////////////////////////////////////////////// 1 4 this 3 558  
144 0 0 6 144 526 0 0 328 ////////////////////////////////////////////////////////////////////
//     Function: PGEntry::get_type_event
//       Access: Published
//  Description: Returns the event name that will be thrown whenever
//               the user extends the text by typing.
//////////////////////////////////////////////////////////////////// 1 4 this 3 558  
145 0 0 6 145 526 0 0 332 ////////////////////////////////////////////////////////////////////
//     Function: PGEntry::get_erase_event
//       Access: Published
//  Description: Returns the event name that will be thrown whenever
//               the user erases characters in the text.
//////////////////////////////////////////////////////////////////// 1 4 this 3 558  
146 0 0 6 146 526 0 0 314 ////////////////////////////////////////////////////////////////////
//     Function: PGEntry::get_cursormove_event
//       Access: Published
//  Description: Returns the event name that will be thrown whenever
//               the cursor moves
//////////////////////////////////////////////////////////////////// 1 4 this 3 558  
147 0 0 6 147 515 0 0 457 ////////////////////////////////////////////////////////////////////
//     Function: PGEntry::set_wtext
//       Access: Published
//  Description: Changes the text currently displayed within the
//               entry.
//
//               The return value is true if all the text is accepted,
//               or false if some was truncated (see set_max_width(),
//               etc.).
//////////////////////////////////////////////////////////////////// 2 4 this 3 557  5 wtext 1 526  
148 0 0 6 148 526 0 0 339 ////////////////////////////////////////////////////////////////////
//     Function: PGEntry::get_plain_wtext
//       Access: Published
//  Description: Returns the text currently displayed within the
//               entry, without any embedded properties characters.
//////////////////////////////////////////////////////////////////// 1 4 this 3 558  
149 0 0 6 149 526 0 0 289 ////////////////////////////////////////////////////////////////////
//     Function: PGEntry::get_wtext
//       Access: Published
//  Description: Returns the text currently displayed within the
//               entry.
//////////////////////////////////////////////////////////////////// 1 4 this 3 558  
150 0 0 4 150 504 0 0 322 ////////////////////////////////////////////////////////////////////
//     Function: PGEntry::set_accept_enabled
//       Access: Published
//  Description: Sets whether the input may be accepted--use to 
//               disable submission by the user
//////////////////////////////////////////////////////////////////// 2 4 this 3 557  7 enabled 1 515  
151 0 0 6 151 515 0 0 462 ////////////////////////////////////////////////////////////////////
//     Function: PGEntry::is_wtext
//       Access: Published
//  Description: Returns true if any of the characters in the string
//               returned by get_wtext() are out of the range of an
//               ASCII character (and, therefore, get_wtext() should
//               be called in preference to get_text()).
//////////////////////////////////////////////////////////////////// 1 4 this 3 558  
152 0 0 7 152 546 0 0 0 0 
153 0 0 4 161 504 0 0 231 ////////////////////////////////////////////////////////////////////
//     Function: PGMouseWatcherParameter::output
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 567  3 out 1 524  
154 0 0 7 162 546 0 0 0 0 
155 0 0 7 155 570 0 0 0 1 4 this 3 569  
156 0 0 7 156 569 390 0 0 1 4 this 3 570  
157 0 0 6 158 571 0 0 0 1 4 this 3 569  
158 0 0 7 159 569 390 0 0 1 4 this 3 571  
159 0 0 7 165 572 0 0 234 ////////////////////////////////////////////////////////////////////
//     Function: PGMouseWatcherBackground::Constructor
//       Access: Public
//  Description: 
//////////////////////////////////////////////////////////////////// 0 
160 0 0 7 166 546 0 0 0 0 
161 0 0 7 168 573 0 0 227 ////////////////////////////////////////////////////////////////////
//     Function: PGVirtualFrame::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 name 1 526  
162 0 0 4 169 504 0 0 294 ////////////////////////////////////////////////////////////////////
//     Function: PGVirtualFrame::setup
//       Access: Published
//  Description: Creates a PGVirtualFrame with the indicated 
//               dimensions.
//////////////////////////////////////////////////////////////////// 3 4 this 3 573  5 width 1 510  6 height 1 510  
163 0 0 4 170 504 0 0 592 ////////////////////////////////////////////////////////////////////
//     Function: PGVirtualFrame::set_clip_frame
//       Access: Published
//  Description: Sets the bounding rectangle of the clip frame.
//               This is the size of the small window through which we
//               can see the virtual canvas.  Normally, this is the
//               same size as the actual frame or smaller (typically
//               it is smaller by the size of the bevel, or to make
//               room for scroll bars).
//////////////////////////////////////////////////////////////////// 2 4 this 3 573  10 clip_frame 1 521  
164 0 0 4 170 504 0 0 592 ////////////////////////////////////////////////////////////////////
//     Function: PGVirtualFrame::set_clip_frame
//       Access: Published
//  Description: Sets the bounding rectangle of the clip frame.
//               This is the size of the small window through which we
//               can see the virtual canvas.  Normally, this is the
//               same size as the actual frame or smaller (typically
//               it is smaller by the size of the bevel, or to make
//               room for scroll bars).
//////////////////////////////////////////////////////////////////// 5 4 this 3 573  4 left 1 510  5 right 1 510  6 bottom 1 510  3 top 1 510  
165 0 0 6 171 521 0 0 404 ////////////////////////////////////////////////////////////////////
//     Function: PGVirtualFrame::get_clip_frame
//       Access: Published
//  Description: Returns the bounding rectangle of the clip frame.
//               See set_clip_frame().  If has_clip_frame() is
//               false, this returns the item's actual frame.
//////////////////////////////////////////////////////////////////// 1 4 this 3 574  
166 0 0 6 172 515 0 0 405 ////////////////////////////////////////////////////////////////////
//     Function: PGVirtualFrame::has_clip_frame
//       Access: Published
//  Description: Returns true if the clip frame has been set; see
//               set_clip_frame().  If it has not been set, objects in
//               the virtual frame will not be clipped.
//////////////////////////////////////////////////////////////////// 1 4 this 3 574  
167 0 0 4 173 504 0 0 311 ////////////////////////////////////////////////////////////////////
//     Function: PGVirtualFrame::clear_clip_frame
//       Access: Published
//  Description: Removes the clip frame from the item.  This
//               disables clipping.
//////////////////////////////////////////////////////////////////// 1 4 this 3 573  
168 0 0 4 174 504 0 0 380 ////////////////////////////////////////////////////////////////////
//     Function: PGVirtualFrame::set_canvas_transform
//       Access: Published
//  Description: Changes the transform of the virtual canvas.  This
//               transform is applied to all child nodes of the
//               canvas_node.
//////////////////////////////////////////////////////////////////// 2 4 this 3 573  9 transform 1 576  
169 0 0 7 175 576 0 0 380 ////////////////////////////////////////////////////////////////////
//     Function: PGVirtualFrame::get_canvas_transform
//       Access: Published
//  Description: Returns the transform of the virtual canvas.  This
//               transform is applied to all child nodes of the
//               canvas_node.
//////////////////////////////////////////////////////////////////// 1 4 this 3 574  
170 0 0 7 176 579 0 0 338 ////////////////////////////////////////////////////////////////////
//     Function: PGVirtualFrame::get_canvas_node
//       Access: Published
//  Description: Returns the special node that holds all of the
//               children that appear in the virtual canvas.
//////////////////////////////////////////////////////////////////// 1 4 this 3 574  
171 0 0 7 177 579 0 0 276 ////////////////////////////////////////////////////////////////////
//     Function: PGVirtualFrame::get_canvas_parent
//       Access: Published
//  Description: Returns the parent node of the canvas_node.
//////////////////////////////////////////////////////////////////// 1 4 this 3 574  
172 0 0 7 178 546 0 0 0 0 
173 0 0 7 185 580 411 0 224 ////////////////////////////////////////////////////////////////////
//     Function: PGSliderBar::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 name 1 526  
174 0 0 4 187 504 0 0 797 ////////////////////////////////////////////////////////////////////
//     Function: PGSliderBar::setup_scroll_bar
//       Access: Published
//  Description: Creates PGSliderBar that represents a vertical or
//               horizontal scroll bar (if vertical is true or false,
//               respectively), with additional buttons for scrolling,
//               and a range of 0 .. 1.
//
//               length here is the measurement along the scroll bar,
//               and width is the measurement across the scroll bar,
//               whether it is vertical or horizontal (so for a
//               horizontal scroll bar, the length is actually the x
//               dimension, and the width is the y dimension).
//////////////////////////////////////////////////////////////////// 5 4 this 3 580  8 vertical 1 515  6 length 1 510  5 width 1 510  5 bevel 1 510  
175 0 0 4 188 504 0 0 454 ////////////////////////////////////////////////////////////////////
//     Function: PGSliderBar::setup_slider
//       Access: Published
//  Description: Creates PGSliderBar that represents a slider that the
//               user can use to control an analog quantity.
//
//               This is functionally the same as a scroll bar, but it
//               has a distinctive look.
//////////////////////////////////////////////////////////////////// 5 4 this 3 580  8 vertical 1 515  6 length 1 510  5 width 1 510  5 bevel 1 510  
176 0 0 4 189 504 0 0 926 ////////////////////////////////////////////////////////////////////
//     Function: PGSliderBar::set_axis
//       Access: Published
//  Description: Specifies the axis of the slider bar's motion.  This
//               should be only one of four vectors: (1, 0, 0), (0, 0,
//               1), (-1, 0, 0), or (0, 0, -1).
//
//               This specifies the vector in which the thumb moves
//               when it is moving from the minimum to the maximum
//               value.
//
//               The axis must be parallel to one of the screen axes,
//               and it must be normalized.  Hence, it may only be one
//               of the above four possibilities; anything else is an
//               error and will result in indeterminate behavior.
//
//               Normally, you should not try to set the axis
//               directly.
//////////////////////////////////////////////////////////////////// 2 4 this 3 580  4 axis 1 581  
177 0 0 6 190 581 0 0 299 ////////////////////////////////////////////////////////////////////
//     Function: PGSliderBar::get_axis
//       Access: Published
//  Description: Returns the axis of the slider bar's motion.  See
//               set_axis().
//////////////////////////////////////////////////////////////////// 1 4 this 3 585  
178 0 0 4 191 504 0 0 273 ////////////////////////////////////////////////////////////////////
//     Function: PGSliderBar::set_range
//       Access: Published
//  Description: Sets the minimum and maxmimum value for the slider.
//////////////////////////////////////////////////////////////////// 3 4 this 3 580  9 min_value 1 510  9 max_value 1 510  
179 0 0 6 192 510 0 0 304 ////////////////////////////////////////////////////////////////////
//     Function: PGSliderBar::get_min_value
//       Access: Published
//  Description: Returns the value when the slider is all the way to
//               the left.
//////////////////////////////////////////////////////////////////// 1 4 this 3 585  
180 0 0 6 193 510 0 0 305 ////////////////////////////////////////////////////////////////////
//     Function: PGSliderBar::get_max_value
//       Access: Published
//  Description: Returns the value when the slider is all the way to
//               the right.
//////////////////////////////////////////////////////////////////// 1 4 this 3 585  
181 0 0 4 194 504 0 0 337 ////////////////////////////////////////////////////////////////////
//     Function: PGSliderBar::set_scroll_size
//       Access: Published
//  Description: Specifies the amount the slider will move when the
//               user clicks on the left or right buttons.
//////////////////////////////////////////////////////////////////// 2 4 this 3 580  11 scroll_size 1 510  
182 0 0 6 195 510 0 0 276 ////////////////////////////////////////////////////////////////////
//     Function: PGSliderBar::get_scroll_size
//       Access: Published
//  Description: Returns the value last set by set_scroll_size().
//////////////////////////////////////////////////////////////////// 1 4 this 3 585  
183 0 0 4 196 504 0 0 516 ////////////////////////////////////////////////////////////////////
//     Function: PGSliderBar::set_page_size
//       Access: Published
//  Description: Specifies the amount of data contained in a single
//               page.  This indicates how much the thumb will jump
//               when the trough is directly clicked; and if
//               resize_thumb is true, it also controls the visible
//               size of the thumb button.
//////////////////////////////////////////////////////////////////// 2 4 this 3 580  9 page_size 1 510  
184 0 0 6 197 510 0 0 272 ////////////////////////////////////////////////////////////////////
//     Function: PGSliderBar::get_page_size
//       Access: Published
//  Description: Returns the value last set by set_page_size().
//////////////////////////////////////////////////////////////////// 1 4 this 3 585  
185 0 0 4 198 504 0 0 374 ////////////////////////////////////////////////////////////////////
//     Function: PGSliderBar::set_value
//       Access: Published
//  Description: Sets the current value of the slider
//               programmatically.  This should range between
//               get_min_value() and get_max_value().
//////////////////////////////////////////////////////////////////// 2 4 this 3 580  5 value 1 510  
186 0 0 6 199 510 0 0 262 ////////////////////////////////////////////////////////////////////
//     Function: PGSliderBar::get_value
//       Access: Published
//  Description: Returns the current value of the slider.
//////////////////////////////////////////////////////////////////// 1 4 this 3 585  
187 0 0 4 200 504 0 0 307 ////////////////////////////////////////////////////////////////////
//     Function: PGSliderBar::set_ratio
//       Access: Published
//  Description: Sets the current value of the slider, expressed in
//               the range 0 .. 1.
//////////////////////////////////////////////////////////////////// 2 4 this 3 580  5 ratio 1 510  
188 0 0 6 201 510 0 0 310 ////////////////////////////////////////////////////////////////////
//     Function: PGSliderBar::get_ratio
//       Access: Published
//  Description: Returns the current value of the slider, expressed in
//               the range 0 .. 1.
//////////////////////////////////////////////////////////////////// 1 4 this 3 585  
189 0 0 6 202 515 0 0 440 ////////////////////////////////////////////////////////////////////
//     Function: PGSliderBar::is_button_down
//       Access: Published
//  Description: Returns true if the user is currently holding down
//               the mouse button to manipulate the slider.  When
//               true, calls to set_ratio() or set_value() will have
//               no effect.
//////////////////////////////////////////////////////////////////// 1 4 this 3 585  
190 0 0 4 203 504 0 0 480 ////////////////////////////////////////////////////////////////////
//     Function: PGSliderBar::set_resize_thumb
//       Access: Published
//  Description: Sets the resize_thumb flag.  When this is true, the
//               thumb button's frame will be adjusted so that its
//               width visually represents the page size.  When this
//               is false, the thumb button will be left alone.
//////////////////////////////////////////////////////////////////// 2 4 this 3 580  12 resize_thumb 1 515  
191 0 0 6 204 515 0 0 301 ////////////////////////////////////////////////////////////////////
//     Function: PGSliderBar::get_resize_thumb
//       Access: Published
//  Description: Returns the resize_thumb flag.  See
//               set_resize_thumb().
//////////////////////////////////////////////////////////////////// 1 4 this 3 585  
192 0 0 4 205 504 0 0 531 ////////////////////////////////////////////////////////////////////
//     Function: PGSliderBar::set_manage_pieces
//       Access: Published
//  Description: Sets the manage_pieces flag.  When this is true, the
//               sub-pieces of the slider bar--that is, the thumb, and
//               the left and right scroll buttons--are automatically
//               positioned and/or resized when the slider bar's
//               overall frame is changed.
//////////////////////////////////////////////////////////////////// 2 4 this 3 580  13 manage_pieces 1 515  
193 0 0 6 206 515 0 0 304 ////////////////////////////////////////////////////////////////////
//     Function: PGSliderBar::get_manage_pieces
//       Access: Published
//  Description: Returns the manage_pieces flag.  See
//               set_manage_pieces().
//////////////////////////////////////////////////////////////////// 1 4 this 3 585  
194 0 0 4 207 504 0 0 621 ////////////////////////////////////////////////////////////////////
//     Function: PGSliderBar::set_thumb_button
//       Access: Published
//  Description: Sets the PGButton object that will serve as the thumb
//               for this slider.  This button visually represents the
//               position of the slider, and can be dragged left and
//               right by the user.
//
//               It is the responsibility of the caller to ensure that
//               the button object is parented to the PGSliderBar
//               node.
//////////////////////////////////////////////////////////////////// 2 4 this 3 580  12 thumb_button 1 547  
195 0 0 4 208 504 0 0 396 ////////////////////////////////////////////////////////////////////
//     Function: PGSliderBar::clear_thumb_button
//       Access: Published
//  Description: Removes the thumb button object from control of the
//               frame.  It is your responsibility to actually remove
//               or hide the button itself.
//////////////////////////////////////////////////////////////////// 1 4 this 3 580  
196 0 0 7 209 547 0 0 334 ////////////////////////////////////////////////////////////////////
//     Function: PGSliderBar::get_thumb_button
//       Access: Published
//  Description: Returns the PGButton that serves as the thumb for
//               this slider, or NULL if it is not set.
//////////////////////////////////////////////////////////////////// 1 4 this 3 585  
197 0 0 4 210 504 0 0 637 ////////////////////////////////////////////////////////////////////
//     Function: PGSliderBar::set_left_button
//       Access: Published
//  Description: Sets the PGButton object that will serve as the left
//               scroll button for this slider.  This button is
//               optional; if present, the user can click on it to
//               move scroll_size units at a time to the left.
//
//               It is the responsibility of the caller to ensure that
//               the button object is parented to the PGSliderBar
//               node.
//////////////////////////////////////////////////////////////////// 2 4 this 3 580  11 left_button 1 547  
198 0 0 4 211 504 0 0 394 ////////////////////////////////////////////////////////////////////
//     Function: PGSliderBar::clear_left_button
//       Access: Published
//  Description: Removes the left button object from control of the
//               frame.  It is your responsibility to actually remove
//               or hide the button itself.
//////////////////////////////////////////////////////////////////// 1 4 this 3 580  
199 0 0 7 212 547 0 0 371 ////////////////////////////////////////////////////////////////////
//     Function: PGSliderBar::get_left_button
//       Access: Published
//  Description: Returns the PGButton that serves as the left scroll
//               button for this slider, if any, or NULL if it is not
//               set.
//////////////////////////////////////////////////////////////////// 1 4 this 3 585  
200 0 0 4 213 504 0 0 640 ////////////////////////////////////////////////////////////////////
//     Function: PGSliderBar::set_right_button
//       Access: Published
//  Description: Sets the PGButton object that will serve as the right
//               scroll button for this slider.  This button is
//               optional; if present, the user can click on it to
//               move scroll_size units at a time to the right.
//
//               It is the responsibility of the caller to ensure that
//               the button object is parented to the PGSliderBar
//               node.
//////////////////////////////////////////////////////////////////// 2 4 this 3 580  12 right_button 1 547  
201 0 0 4 214 504 0 0 396 ////////////////////////////////////////////////////////////////////
//     Function: PGSliderBar::clear_right_button
//       Access: Published
//  Description: Removes the right button object from control of the
//               frame.  It is your responsibility to actually remove
//               or hide the button itself.
//////////////////////////////////////////////////////////////////// 1 4 this 3 580  
202 0 0 7 215 547 0 0 373 ////////////////////////////////////////////////////////////////////
//     Function: PGSliderBar::get_right_button
//       Access: Published
//  Description: Returns the PGButton that serves as the right scroll
//               button for this slider, if any, or NULL if it is not
//               set.
//////////////////////////////////////////////////////////////////// 1 4 this 3 585  
203 0 0 6 216 526 0 0 428 ////////////////////////////////////////////////////////////////////
//     Function: PGSliderBar::get_adjust_prefix
//       Access: Published, Static
//  Description: Returns the prefix that is used to define the adjust
//               event for all PGSliderBars.  The adjust event is the
//               concatenation of this string followed by get_id().
//////////////////////////////////////////////////////////////////// 0 
204 0 0 6 217 526 0 0 376 ////////////////////////////////////////////////////////////////////
//     Function: PGSliderBar::get_adjust_event
//       Access: Published
//  Description: Returns the event name that will be thrown when the
//               slider bar value is adjusted by the user or
//               programmatically.
//////////////////////////////////////////////////////////////////// 1 4 this 3 585  
205 0 0 4 218 504 0 0 524 ////////////////////////////////////////////////////////////////////
//     Function: PGSliderBar::set_active
//       Access: Published, Virtual
//  Description: Sets whether the PGItem is active for mouse watching.
//               This is not necessarily related to the
//               active/inactive appearance of the item, which is
//               controlled by set_state(), but it does affect whether
//               it responds to mouse events.
//////////////////////////////////////////////////////////////////// 2 4 this 3 580  6 active 1 515  
206 0 0 4 219 504 0 0 372 ////////////////////////////////////////////////////////////////////
//     Function: PGSliderBar::remanage
//       Access: Published
//  Description: Manages the position and size of the scroll bars and
//               the thumb.  Normally this should not need to be
//               called directly.
//////////////////////////////////////////////////////////////////// 1 4 this 3 580  
207 0 0 4 220 504 0 0 338 ////////////////////////////////////////////////////////////////////
//     Function: PGSliderBar::recompute
//       Access: Published
//  Description: Recomputes the position and size of the thumb.
//               Normally this should not need to be called directly.
//////////////////////////////////////////////////////////////////// 1 4 this 3 580  
208 0 0 7 221 546 0 0 0 0 
209 0 0 7 180 527 0 0 0 1 4 this 3 580  
210 0 0 7 181 580 411 0 0 1 4 this 3 527  
211 0 0 7 228 587 452 0 226 ////////////////////////////////////////////////////////////////////
//     Function: PGScrollFrame::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 name 1 526  
212 0 0 4 230 504 0 0 325 ////////////////////////////////////////////////////////////////////
//     Function: PGScrollFrame::setup
//       Access: Published
//  Description: Creates a PGScrollFrame with the indicated 
//               dimensions, and the indicated virtual frame.
//////////////////////////////////////////////////////////////////// 9 4 this 3 587  5 width 1 510  6 height 1 510  4 left 1 510  5 right 1 510  6 bottom 1 510  3 top 1 510  12 slider_width 1 510  5 bevel 1 510  
213 0 0 4 231 504 0 0 415 ////////////////////////////////////////////////////////////////////
//     Function: PGScrollFrame::set_virtual_frame
//       Access: Published
//  Description: Sets the bounding rectangle of the virtual frame.
//               This is the size of the large, virtual canvas which
//               we can see only a portion of at any given time.
//////////////////////////////////////////////////////////////////// 2 4 this 3 587  13 virtual_frame 1 521  
214 0 0 4 231 504 0 0 415 ////////////////////////////////////////////////////////////////////
//     Function: PGScrollFrame::set_virtual_frame
//       Access: Published
//  Description: Sets the bounding rectangle of the virtual frame.
//               This is the size of the large, virtual canvas which
//               we can see only a portion of at any given time.
//////////////////////////////////////////////////////////////////// 5 4 this 3 587  4 left 1 510  5 right 1 510  6 bottom 1 510  3 top 1 510  
215 0 0 6 232 521 0 0 413 ////////////////////////////////////////////////////////////////////
//     Function: PGScrollFrame::get_virtual_frame
//       Access: Published
//  Description: Returns the bounding rectangle of the virtual frame.
//               See set_virtual_frame().  If has_virtual_frame() is
//               false, this returns the item's clip frame.
//////////////////////////////////////////////////////////////////// 1 4 this 3 588  
216 0 0 6 233 515 0 0 405 ////////////////////////////////////////////////////////////////////
//     Function: PGScrollFrame::has_virtual_frame
//       Access: Published
//  Description: Returns true if the virtual frame has a bounding
//               rectangle; see set_virtual_frame().  Most
//               PGScrollFrame objects will have a virtual frame.
//////////////////////////////////////////////////////////////////// 1 4 this 3 588  
217 0 0 4 234 504 0 0 441 ////////////////////////////////////////////////////////////////////
//     Function: PGScrollFrame::clear_virtual_frame
//       Access: Published
//  Description: Removes the virtual frame from the item.  This
//               effectively sets the virtual frame to the same size
//               as the clip frame.  Scrolling will no longer be
//               possible.
//////////////////////////////////////////////////////////////////// 1 4 this 3 587  
218 0 0 4 235 504 0 0 614 ////////////////////////////////////////////////////////////////////
//     Function: PGScrollFrame::set_manage_pieces
//       Access: Published
//  Description: Sets the manage_pieces flag.  When this is true, the
//               sub-pieces of the scroll frame--that is, the two
//               scroll bars--are automatically positioned and/or
//               resized when the scroll frame's overall frame is
//               changed.  They are also automatically resized to fill
//               in the gap when one or the other is hidden.
//////////////////////////////////////////////////////////////////// 2 4 this 3 587  13 manage_pieces 1 515  
219 0 0 6 236 515 0 0 306 ////////////////////////////////////////////////////////////////////
//     Function: PGScrollFrame::get_manage_pieces
//       Access: Published
//  Description: Returns the manage_pieces flag.  See
//               set_manage_pieces().
//////////////////////////////////////////////////////////////////// 1 4 this 3 588  
220 0 0 4 237 504 0 0 652 ////////////////////////////////////////////////////////////////////
//     Function: PGScrollFrame::set_auto_hide
//       Access: Published
//  Description: Sets the auto_hide flag.  When this is true, the
//               two scroll bars are automatically hidden if they are
//               not needed (that is, if the virtual frame would fit
//               within the clip frame without them), and they are
//               automatically shown when they are needed.
//
//               Setting this flag true forces the manage_pieces flag
//               to also be set true.
//////////////////////////////////////////////////////////////////// 2 4 this 3 587  9 auto_hide 1 515  
221 0 0 6 238 515 0 0 294 ////////////////////////////////////////////////////////////////////
//     Function: PGScrollFrame::get_auto_hide
//       Access: Published
//  Description: Returns the auto_hide flag.  See
//               set_auto_hide().
//////////////////////////////////////////////////////////////////// 1 4 this 3 588  
222 0 0 4 239 504 0 0 479 ////////////////////////////////////////////////////////////////////
//     Function: PGScrollFrame::set_horizontal_slider
//       Access: Published
//  Description: Sets the PGSliderBar object that will serve as the
//               horizontal scroll bar for this frame.  It is your
//               responsibility to parent this slider bar to the frame
//               and move it to the appropriate place.
//////////////////////////////////////////////////////////////////// 2 4 this 3 587  17 horizontal_slider 1 580  
223 0 0 4 240 504 0 0 405 ////////////////////////////////////////////////////////////////////
//     Function: PGScrollFrame::clear_horizontal_slider
//       Access: Published
//  Description: Removes the horizontal scroll bar from control of the
//               frame.  It is your responsibility to actually remove
//               or hide the object itself.
//////////////////////////////////////////////////////////////////// 1 4 this 3 587  
224 0 0 7 241 580 411 0 384 ////////////////////////////////////////////////////////////////////
//     Function: PGScrollFrame::get_horizontal_slider
//       Access: Published
//  Description: Returns the PGSliderBar that serves as the horizontal
//               scroll bar for this frame, if any, or NULL if it is
//               not set.
//////////////////////////////////////////////////////////////////// 1 4 this 3 588  
225 0 0 4 242 504 0 0 475 ////////////////////////////////////////////////////////////////////
//     Function: PGScrollFrame::set_vertical_slider
//       Access: Published
//  Description: Sets the PGSliderBar object that will serve as the
//               vertical scroll bar for this frame.  It is your
//               responsibility to parent this slider bar to the frame
//               and move it to the appropriate place.
//////////////////////////////////////////////////////////////////// 2 4 this 3 587  15 vertical_slider 1 580  
226 0 0 4 243 504 0 0 401 ////////////////////////////////////////////////////////////////////
//     Function: PGScrollFrame::clear_vertical_slider
//       Access: Published
//  Description: Removes the vertical scroll bar from control of the
//               frame.  It is your responsibility to actually remove
//               or hide the object itself.
//////////////////////////////////////////////////////////////////// 1 4 this 3 587  
227 0 0 7 244 580 411 0 380 ////////////////////////////////////////////////////////////////////
//     Function: PGScrollFrame::get_vertical_slider
//       Access: Published
//  Description: Returns the PGSliderBar that serves as the vertical
//               scroll bar for this frame, if any, or NULL if it is
//               not set.
//////////////////////////////////////////////////////////////////// 1 4 this 3 588  
228 0 0 4 245 504 0 0 342 ////////////////////////////////////////////////////////////////////
//     Function: PGScrollFrame::remanage
//       Access: Published
//  Description: Manages the position and size of the scroll bars.
//               Normally this should not need to be called directly.
//////////////////////////////////////////////////////////////////// 1 4 this 3 587  
229 0 0 4 246 504 0 0 335 ////////////////////////////////////////////////////////////////////
//     Function: PGScrollFrame::recompute
//       Access: Published
//  Description: Forces the PGScrollFrame to recompute itself right
//               now.  Normally this should not be required.
//////////////////////////////////////////////////////////////////// 1 4 this 3 587  
230 0 0 7 247 546 0 0 0 0 
231 0 0 7 223 573 0 0 0 1 4 this 3 587  
232 0 0 7 224 587 452 0 0 1 4 this 3 573  
233 0 0 7 249 590 0 0 222 ////////////////////////////////////////////////////////////////////
//     Function: PGWaitBar::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 name 1 526  
234 0 0 4 250 504 0 0 317 ////////////////////////////////////////////////////////////////////
//     Function: PGWaitBar::setup
//       Access: Published
//  Description: Creates a PGWaitBar with the indicated dimensions,
//               with the indicated maximum range.
//////////////////////////////////////////////////////////////////// 4 4 this 3 590  5 width 1 510  6 height 1 510  5 range 1 510  
235 0 0 4 251 504 0 0 271 ////////////////////////////////////////////////////////////////////
//     Function: PGWaitBar::set_range
//       Access: Published
//  Description: Sets the value at which the WaitBar indicates 100%.
//////////////////////////////////////////////////////////////////// 2 4 this 3 590  5 range 1 510  
236 0 0 6 252 510 0 0 274 ////////////////////////////////////////////////////////////////////
//     Function: PGWaitBar::get_range
//       Access: Published
//  Description: Returns the value at which the WaitBar indicates 100%.
//////////////////////////////////////////////////////////////////// 1 4 this 3 591  
237 0 0 4 253 504 0 0 317 ////////////////////////////////////////////////////////////////////
//     Function: PGWaitBar::set_value
//       Access: Published
//  Description: Sets the current value of the bar.  This should range
//               between 0 and get_range().
//////////////////////////////////////////////////////////////////// 2 4 this 3 590  5 value 1 510  
238 0 0 6 254 510 0 0 257 ////////////////////////////////////////////////////////////////////
//     Function: PGWaitBar::get_value
//       Access: Published
//  Description: Returns the current value of the bar.
//////////////////////////////////////////////////////////////////// 1 4 this 3 591  
239 0 0 6 255 510 0 0 254 ////////////////////////////////////////////////////////////////////
//     Function: PGWaitBar::get_percent
//       Access: Published
//  Description: Returns the percentage complete.
//////////////////////////////////////////////////////////////////// 1 4 this 3 591  
240 0 0 4 256 504 0 0 334 ////////////////////////////////////////////////////////////////////
//     Function: PGWaitBar::set_bar_style
//       Access: Published
//  Description: Sets the kind of frame that is drawn on top of the
//               WaitBar to represent the amount completed.
//////////////////////////////////////////////////////////////////// 2 4 this 3 590  5 style 1 502  
241 0 0 7 257 501 245 0 337 ////////////////////////////////////////////////////////////////////
//     Function: PGWaitBar::get_bar_style
//       Access: Published
//  Description: Returns the kind of frame that is drawn on top of the
//               WaitBar to represent the amount completed.
//////////////////////////////////////////////////////////////////// 1 4 this 3 591  
242 0 0 7 258 546 0 0 0 0 
112
481 12 PGFrameStyle 0 26625 12 PGFrameStyle 12 PGFrameStyle 0 0 0 1 243 245 0 17 244 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 0 0 0 0 1 482 185
////////////////////////////////////////////////////////////////////
//       Class : PGFrameStyle
// Description : 
////////////////////////////////////////////////////////////////////

482 4 Type 0 794624 18 PGFrameStyle::Type 18 PGFrameStyle::Type 481 0 0 0 0 0 0 0 0 0 7 6 T_none 20 PGFrameStyle::T_none 0
0 6 T_flat 20 PGFrameStyle::T_flat 0
1 11 T_bevel_out 25 PGFrameStyle::T_bevel_out 0
2 10 T_bevel_in 24 PGFrameStyle::T_bevel_in 0
3 8 T_groove 22 PGFrameStyle::T_groove 0
4 7 T_ridge 21 PGFrameStyle::T_ridge 0
5 16 T_texture_border 30 PGFrameStyle::T_texture_border 0
6 0 0

483 6 PGItem 0 75777 6 PGItem 6 PGItem 0 0 0 1 262 0 0 53 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 1 593 0 1 0 484 0 0 0 0 705
////////////////////////////////////////////////////////////////////
//       Class : PGItem
// Description : This is the base class for all the various kinds of
//               gui widget objects.
//
//               It is a Node which corresponds to a rectangular
//               region on the screen, and it may have any number of
//               "state" subgraphs, one of which is rendered at any
//               given time according to its current state.
//
//               The PGItem node must be parented to the scene graph
//               somewhere beneath a PGTop node in order for this
//               behavior to work.
////////////////////////////////////////////////////////////////////

484 9 PandaNode 0 2049 9 PandaNode 9 PandaNode 0 0 0 0 0 0 0 3 594 595 596 0 0 0 0 374
////////////////////////////////////////////////////////////////////
//       Class : PandaNode
// Description : A basic node of the scene graph or data graph.  This
//               is the base class of all specialized nodes, and also
//               serves as a generic node with no special properties.
////////////////////////////////////////////////////////////////////

485 8 PGButton 0 75777 8 PGButton 8 PGButton 0 0 0 1 316 0 0 8 317 318 319 320 321 322 323 324 0 0 1 0 483 0 0 0 1 486 394
////////////////////////////////////////////////////////////////////
//       Class : PGButton
// Description : This is a particular kind of PGItem that is
//               specialized to behave like a normal button object.
//               It keeps track of its own state, and handles mouse
//               events sensibly.
////////////////////////////////////////////////////////////////////

486 5 State 0 794624 15 PGButton::State 15 PGButton::State 485 0 0 0 0 0 0 0 0 0 4 7 S_ready 17 PGButton::S_ready 0
0 11 S_depressed 21 PGButton::S_depressed 0
1 10 S_rollover 20 PGButton::S_rollover 0
2 10 S_inactive 20 PGButton::S_inactive 0
3 0 0

487 5 PGTop 0 75777 5 PGTop 5 PGTop 0 0 0 1 325 0 0 6 326 327 328 329 330 331 0 0 1 0 484 0 0 0 0 779
////////////////////////////////////////////////////////////////////
//       Class : PGTop
// Description : The "top" node of the new Panda GUI system.  This
//               node must be parented to the 2-d scene graph, and all
//               PG objects should be parented to this node or
//               somewhere below it.  PG objects not parented within
//               this hierarchy will not be clickable.
//
//               This node begins the special traversal of the PG
//               objects that registers each node within the
//               MouseWatcher and forces everything to render in a
//               depth-first, left-to-right order, appropriate for 2-d
//               objects.
////////////////////////////////////////////////////////////////////

488 7 PGEntry 0 75777 7 PGEntry 7 PGEntry 0 0 0 1 332 0 0 53 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 0 0 1 0 483 0 0 0 1 489 791
////////////////////////////////////////////////////////////////////
//       Class : PGEntry
// Description : This is a particular kind of PGItem that handles
//               simple one-line or short multi-line text entries, of
//               the sort where the user can type any string.
//
//               A PGEntry does all of its internal manipulation on a
//               wide string, so it can store the full Unicode
//               character set.  The interface can support either the
//               wide string getters and setters, or the normal 8-bit
//               string getters and setters, which use whatever
//               encoding method is specified by the associated
//               TextNode.
////////////////////////////////////////////////////////////////////

489 5 State 0 794624 14 PGEntry::State 14 PGEntry::State 488 0 0 0 0 0 0 0 0 0 3 7 S_focus 16 PGEntry::S_focus 0
0 10 S_no_focus 19 PGEntry::S_no_focus 0
1 10 S_inactive 19 PGEntry::S_inactive 0
2 0 0

490 23 PGMouseWatcherParameter 0 26625 23 PGMouseWatcherParameter 23 PGMouseWatcherParameter 0 0 0 0 390 0 2 391 392 0 0 2 3 491 386 387 3 492 388 389 0 0 470
////////////////////////////////////////////////////////////////////
//       Class : PGMouseWatcherParameter
// Description : This specialization on MouseWatcherParameter allows
//               us to tag on additional elements to events for the
//               gui system, and also inherits from
//               TypedWritableReferenceCount so we can attach this thing to an
//               event.
////////////////////////////////////////////////////////////////////

491 27 TypedWritableReferenceCount 0 2049 27 TypedWritableReferenceCount 27 TypedWritableReferenceCount 0 0 0 0 0 0 0 0 0 0 0 0 722
////////////////////////////////////////////////////////////////////
//       Class : TypedWritableReferenceCount
// Description : A base class for things which need to inherit from
//               both TypedWritable and from ReferenceCount.  It's
//               convenient to define this intermediate base class
//               instead of multiply inheriting from the two classes
//               each time they are needed, so that we can sensibly
//               pass around pointers to things which are both
//               TypedWritables and ReferenceCounters.
//               
//               See also TypedObject for detailed instructions.
////////////////////////////////////////////////////////////////////

492 21 MouseWatcherParameter 0 2049 21 MouseWatcherParameter 21 MouseWatcherParameter 0 0 0 0 0 0 0 0 0 0 0 0 353
////////////////////////////////////////////////////////////////////
//       Class : MouseWatcherParameter
// Description : This is sent along as a parameter to most events
//               generated for a region to indicate the mouse and
//               button state for the event.
////////////////////////////////////////////////////////////////////

493 24 PGMouseWatcherBackground 0 75777 24 PGMouseWatcherBackground 24 PGMouseWatcherBackground 0 0 0 1 393 0 0 1 394 0 0 1 0 494 0 0 0 0 440
////////////////////////////////////////////////////////////////////
//       Class : PGMouseWatcherBackground
// Description : This is a special kind of MouseWatcherRegion that
//               doesn't have a rectangle and is never active, but
//               just quietly listens for keypresses and sends them to
//               all the PGItems with background focus.
////////////////////////////////////////////////////////////////////

494 18 MouseWatcherRegion 0 2049 18 MouseWatcherRegion 18 MouseWatcherRegion 0 0 0 0 0 0 0 0 0 0 0 0 295
////////////////////////////////////////////////////////////////////
//       Class : MouseWatcherRegion
// Description : This is the class that defines a rectangular region
//               on the screen for the MouseWatcher.
////////////////////////////////////////////////////////////////////

495 14 PGVirtualFrame 0 75777 14 PGVirtualFrame 14 PGVirtualFrame 0 0 0 1 395 0 0 10 396 397 398 399 400 401 402 403 404 405 0 0 1 0 483 0 0 0 0 1370
////////////////////////////////////////////////////////////////////
//       Class : PGVirtualFrame
// Description : This represents a frame that is rendered as a window
//               onto another (possibly much larger) canvas.  You can
//               only see the portion of the canvas that is below the
//               window at any given time.
//
//               This works simply by automatically defining a scissor
//               effect to be applied to a special child node, called
//               the canvas_node, of the PGVirtualFrame node.  Every
//               object that is parented to the canvas_node will be
//               clipped by the scissor effect.  Also, you can modify
//               the canvas_transform through convenience methods
//               here, which actually modifies the transform on the
//               canvas_node.
//
//               The net effect is that the virtual canvas is
//               arbitrarily large, and we can peek at it through the
//               scissor region, and scroll through different parts of
//               it by modifying the canvas_transform.
//
//               See PGScrollFrame for a specialization of this class
//               that handles the traditional scrolling canvas, with
//               scroll bars.
////////////////////////////////////////////////////////////////////

496 11 PGSliderBar 0 26625 11 PGSliderBar 11 PGSliderBar 0 0 0 1 410 411 0 35 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 0 0 2 3 483 406 407 3 497 408 409 0 0 479
////////////////////////////////////////////////////////////////////
//       Class : PGSliderBar
// Description : This is a particular kind of PGItem that draws a
//               little bar with a slider that moves from left to 
//               right indicating a value between the ranges.
//
//               This is used as an implementation for both
//               DirectSlider and for DirectScrollBar.
////////////////////////////////////////////////////////////////////

497 14 PGButtonNotify 0 1050625 14 PGButtonNotify 14 PGButtonNotify 0 0 0 0 0 0 0 0 0 0 0 0 339
////////////////////////////////////////////////////////////////////
//       Class : PGButtonNotify
// Description : Objects that inherit from this class can receive
//               notify messages when a slider bar moves or otherwise
//               is reconfigured.
////////////////////////////////////////////////////////////////////

498 13 PGScrollFrame 0 26625 13 PGScrollFrame 13 PGScrollFrame 0 0 0 1 451 452 0 18 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 0 0 2 3 495 447 448 3 499 449 450 0 0 891
////////////////////////////////////////////////////////////////////
//       Class : PGScrollFrame
// Description : This is a special kind of frame that pretends to be
//               much larger than it actually is.  You can scroll
//               through the frame, as if you're looking through a
//               window at the larger frame beneath.  All children of
//               this frame node are scrolled and clipped as if they
//               were children of the larger, virtual frame.
//
//               This is implemented as a specialization of
//               PGVirtualFrame, which handles the meat of the virtual
//               canvas.  This class adds automatic support for scroll
//               bars, and restricts the virtual transform to
//               translate only (no scale or rotate).
////////////////////////////////////////////////////////////////////

499 17 PGSliderBarNotify 0 1050625 17 PGSliderBarNotify 17 PGSliderBarNotify 0 0 0 0 0 0 0 0 0 0 0 0 342
////////////////////////////////////////////////////////////////////
//       Class : PGSliderBarNotify
// Description : Objects that inherit from this class can receive
//               notify messages when a slider bar moves or otherwise
//               is reconfigured.
////////////////////////////////////////////////////////////////////

500 9 PGWaitBar 0 75777 9 PGWaitBar 9 PGWaitBar 0 0 0 1 471 0 0 9 472 473 474 475 476 477 478 479 480 0 0 1 0 483 0 0 0 0 411
////////////////////////////////////////////////////////////////////
//       Class : PGWaitBar
// Description : This is a particular kind of PGItem that draws a
//               little bar that fills from left to right to indicate
//               a slow process gradually completing, like a
//               traditional "wait, loading" bar.
////////////////////////////////////////////////////////////////////

501 14 PGFrameStyle * 0 8576 14 PGFrameStyle * 14 PGFrameStyle * 0 0 481 0 0 0 0 0 0 0 0 0 0

502 20 PGFrameStyle const * 0 8576 20 PGFrameStyle const * 20 PGFrameStyle const * 0 0 503 0 0 0 0 0 0 0 0 0 0

503 18 PGFrameStyle const 0 8832 18 PGFrameStyle const 18 PGFrameStyle const 0 0 481 0 0 0 0 0 0 0 0 0 0

504 4 void 0 8194 4 void 4 void 0 6 0 0 0 0 0 0 0 0 0 0 0

505 14 LColor const * 0 8576 14 LColor const * 14 LColor const * 0 0 506 0 0 0 0 0 0 0 0 0 0

506 12 LColor const 0 8832 12 LColor const 12 LColor const 0 0 507 0 0 0 0 0 0 0 0 0 0

507 6 LColor 0 2105344 6 LColor 6 LColor 0 0 508 0 0 0 0 0 0 0 0 0 0

508 7 LColorf 0 2105344 7 LColorf 7 LColorf 0 0 509 0 0 0 0 0 0 0 0 0 0

509 10 LVecBase4f 0 2048 10 LVecBase4f 10 LVecBase4f 0 0 0 0 0 0 0 0 0 0 0 0 265
////////////////////////////////////////////////////////////////////
//       Class : LVecBase4
// Description : This is the base class for all three-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

510 11 PN_stdfloat 0 2105344 11 PN_stdfloat 11 PN_stdfloat 0 0 511 0 0 0 0 0 0 0 0 0 0

511 5 float 0 8194 5 float 5 float 0 2 0 0 0 0 0 0 0 0 0 0 0

512 8 LColor * 0 8576 8 LColor * 8 LColor * 0 0 507 0 0 0 0 0 0 0 0 0 0

513 9 Texture * 0 8576 9 Texture * 9 Texture * 0 0 514 0 0 0 0 0 0 0 0 0 0

514 7 Texture 0 2048 7 Texture 7 Texture 0 0 0 0 0 0 0 0 0 0 0 0 1051
////////////////////////////////////////////////////////////////////
//       Class : Texture
// Description : Represents a texture object, which is typically a
//               single 2-d image but may also represent a 1-d or 3-d
//               texture image, or the six 2-d faces of a cube map
//               texture.
//
//               A texture's image data might be stored in system RAM
//               (see get_ram_image()) or its image may be represented
//               in texture memory on one or more
//               GraphicsStateGuardians (see prepare()), or both.  The
//               typical usage pattern is that a texture is loaded
//               from an image file on disk, which copies its image
//               data into system RAM; then the first time the texture
//               is rendered its image data is copied to texture
//               memory (actually, to the graphics API), and the
//               system RAM image is automatically freed.
////////////////////////////////////////////////////////////////////

515 4 bool 0 8194 4 bool 4 bool 0 4 0 0 0 0 0 0 0 0 0 0 0

516 17 LVecBase2 const * 0 8576 17 LVecBase2 const * 17 LVecBase2 const * 0 0 517 0 0 0 0 0 0 0 0 0 0

517 15 LVecBase2 const 0 8832 15 LVecBase2 const 15 LVecBase2 const 0 0 518 0 0 0 0 0 0 0 0 0 0

518 9 LVecBase2 0 2105344 9 LVecBase2 9 LVecBase2 0 0 519 0 0 0 0 0 0 0 0 0 0

519 10 LVecBase2f 0 2048 10 LVecBase2f 10 LVecBase2f 0 0 0 0 0 0 0 0 0 0 0 0 263
////////////////////////////////////////////////////////////////////
//       Class : LVecBase2
// Description : This is the base class for all two-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

520 9 LVecBase4 0 2105344 9 LVecBase4 9 LVecBase4 0 0 509 0 0 0 0 0 0 0 0 0 0

521 17 LVecBase4 const * 0 8576 17 LVecBase4 const * 17 LVecBase4 const * 0 0 522 0 0 0 0 0 0 0 0 0 0

522 15 LVecBase4 const 0 8832 15 LVecBase4 const 15 LVecBase4 const 0 0 520 0 0 0 0 0 0 0 0 0 0

523 11 LVecBase4 * 0 8576 11 LVecBase4 * 11 LVecBase4 * 0 0 520 0 0 0 0 0 0 0 0 0 0

524 9 ostream * 0 8576 9 ostream * 9 ostream * 0 0 525 0 0 0 0 0 0 0 0 0 0

525 7 ostream 0 2048 7 ostream 7 ostream 0 0 0 0 0 0 0 0 0 0 0 0 0

526 13 atomic string 0 2 13 atomic string 13 atomic string 0 7 0 0 0 0 0 0 0 0 0 0 0

527 8 PGItem * 0 8576 8 PGItem * 8 PGItem * 0 0 483 0 0 0 0 0 0 0 0 0 0

528 14 PGItem const * 0 8576 14 PGItem const * 14 PGItem const * 0 0 529 0 0 0 0 0 0 0 0 0 0

529 12 PGItem const 0 8832 12 PGItem const 12 PGItem const 0 0 483 0 0 0 0 0 0 0 0 0 0

530 3 int 0 8194 3 int 3 int 0 1 0 0 0 0 0 0 0 0 0 0 0

531 10 NodePath * 0 8576 10 NodePath * 10 NodePath * 0 0 532 0 0 0 0 0 0 0 0 0 0

532 8 NodePath 0 2048 8 NodePath 8 NodePath 0 0 0 0 0 0 0 2 597 598 0 0 0 0 1139
////////////////////////////////////////////////////////////////////
//       Class : NodePath
// Description : NodePath is the fundamental system for disambiguating
//               instances, and also provides a higher-level interface
//               for manipulating the scene graph.
//
//               A NodePath is a list of connected nodes from the root
//               of the graph to any sub-node.  Each NodePath
//               therefore uniquely describes one instance of a node.
//
//               NodePaths themselves are lightweight objects that may
//               easily be copied and passed by value.  Their data is
//               stored as a series of NodePathComponents that are
//               stored on the nodes.  Holding a NodePath will keep a
//               reference count to all the nodes in the path.
//               However, if any node in the path is removed or
//               reparented (perhaps through a different NodePath),
//               the NodePath will automatically be updated to reflect
//               the changes.
////////////////////////////////////////////////////////////////////

533 16 NodePath const * 0 8576 16 NodePath const * 16 NodePath const * 0 0 534 0 0 0 0 0 0 0 0 0 0

534 14 NodePath const 0 8832 14 NodePath const 14 NodePath const 0 0 532 0 0 0 0 0 0 0 0 0 0

535 20 ButtonHandle const * 0 8576 20 ButtonHandle const * 20 ButtonHandle const * 0 0 536 0 0 0 0 0 0 0 0 0 0

536 18 ButtonHandle const 0 8832 18 ButtonHandle const 18 ButtonHandle const 0 0 537 0 0 0 0 0 0 0 0 0 0

537 12 ButtonHandle 0 2048 12 ButtonHandle 12 ButtonHandle 0 0 0 0 0 0 0 0 0 0 0 0 364
////////////////////////////////////////////////////////////////////
//       Class : ButtonHandle
// Description : A ButtonHandle represents a single button from any
//               device, including keyboard buttons and mouse buttons
//               (but see KeyboardButton and MouseButton).
////////////////////////////////////////////////////////////////////

538 8 LMatrix4 0 2105344 8 LMatrix4 8 LMatrix4 0 0 539 0 0 0 0 0 0 0 0 0 0

539 9 LMatrix4f 0 2048 9 LMatrix4f 9 LMatrix4f 0 0 0 0 0 0 0 3 599 600 601 0 0 0 0 215
////////////////////////////////////////////////////////////////////
//       Class : LMatrix4
// Description : This is a 4-by-4 transform matrix.
////////////////////////////////////////////////////////////////////

540 10 LMatrix4 * 0 8576 10 LMatrix4 * 10 LMatrix4 * 0 0 538 0 0 0 0 0 0 0 0 0 0

541 12 AudioSound * 0 8576 12 AudioSound * 12 AudioSound * 0 0 542 0 0 0 0 0 0 0 0 0 0

542 10 AudioSound 0 2048 10 AudioSound 10 AudioSound 0 0 0 0 0 0 0 0 0 0 0 0 0

543 8 TextNode 0 2048 8 TextNode 8 TextNode 0 0 0 0 0 0 0 0 0 0 0 0 1336
////////////////////////////////////////////////////////////////////
//       Class : TextNode
// Description : The primary interface to this module.  This class
//               does basic text assembly; given a string of text and
//               a TextFont object, it creates a piece of geometry
//               that may be placed in the 3-d or 2-d world to
//               represent the indicated text.
//
//               The TextNode may be used in one of two ways.
//               Naively, it may simply be parented directly into the
//               scene graph and rendered as if it were a GeomNode; in
//               this mode, the actual polygon geometry that renders
//               the text is not directly visible or accessible, but
//               remains hidden within the TextNode.
//
//               The second way TextNode may be used is as a text
//               generator.  To use it in this way, do not parent the
//               TextNode to the scene graph; instead, set the
//               properties of the text and call generate() to return
//               an ordinary node, containing ordinary geometry, which
//               you may use however you like.  Each time you call
//               generate() a new node is returned.
////////////////////////////////////////////////////////////////////

544 10 TextNode * 0 8576 10 TextNode * 10 TextNode * 0 0 543 0 0 0 0 0 0 0 0 0 0

545 10 TypeHandle 0 2048 10 TypeHandle 10 TypeHandle 0 0 0 0 0 0 0 0 0 0 0 0 1098
////////////////////////////////////////////////////////////////////
//       Class : TypeHandle
// Description : TypeHandle is the identifier used to differentiate
//               C++ class types.  Any C++ classes that inherit from
//               some base class, and must be differentiated at run
//               time, should store a static TypeHandle object that
//               can be queried through a static member function
//               named get_class_type().  Most of the time, it is also
//               desirable to inherit from TypedObject, which provides
//               some virtual functions to return the TypeHandle for a
//               particular instance.
//
//               At its essence, a TypeHandle is simply a unique
//               identifier that is assigned by the TypeRegistry.  The
//               TypeRegistry stores a tree of TypeHandles, so that
//               ancestry of a particular type may be queried, and the
//               type name may be retrieved for run-time display.
////////////////////////////////////////////////////////////////////

546 12 TypeHandle * 0 8576 12 TypeHandle * 12 TypeHandle * 0 0 545 0 0 0 0 0 0 0 0 0 0

547 10 PGButton * 0 8576 10 PGButton * 10 PGButton * 0 0 485 0 0 0 0 0 0 0 0 0 0

548 16 PGButton const * 0 8576 16 PGButton const * 16 PGButton const * 0 0 549 0 0 0 0 0 0 0 0 0 0

549 14 PGButton const 0 8832 14 PGButton const 14 PGButton const 0 0 485 0 0 0 0 0 0 0 0 0 0

550 7 PGTop * 0 8576 7 PGTop * 7 PGTop * 0 0 487 0 0 0 0 0 0 0 0 0 0

551 14 MouseWatcher * 0 8576 14 MouseWatcher * 14 MouseWatcher * 0 0 552 0 0 0 0 0 0 0 0 0 0

552 12 MouseWatcher 0 2048 12 MouseWatcher 12 MouseWatcher 0 0 0 0 0 0 0 1 602 0 0 0 0 1625
////////////////////////////////////////////////////////////////////
//       Class : MouseWatcher
// Description : This TFormer maintains a list of rectangular regions
//               on the screen that are considered special mouse
//               regions; typically these will be click buttons.  When
//               the mouse passes in or out of one of these regions,
//               or when a button is clicked while the mouse is in one
//               of these regions, an event is thrown.
//
//               Mouse events may also be suppressed from the rest of
//               the datagraph in these special regions.
//
//               This class can also implement a software mouse
//               pointer by automatically generating a transform to
//               apply to a piece of geometry placed under the 2-d
//               scene graph.  It will move the geometry around
//               according to the mouse's known position.
//
//               Finally, this class can keep a record of the mouse
//               trail.  This is useful if you want to know, not just
//               where the mouse is, but the exact sequence of movements
//               it took to get there.  This information is mainly useful
//               for gesture-recognition code.  To use trail logging,
//               you need to enable the generation of pointer events
//               in the GraphicsWindowInputDevice and set the trail
//               log duration in the MouseWatcher. Otherwise, the
//               trail log will be empty.
////////////////////////////////////////////////////////////////////

553 13 PGTop const * 0 8576 13 PGTop const * 13 PGTop const * 0 0 554 0 0 0 0 0 0 0 0 0 0

554 11 PGTop const 0 8832 11 PGTop const 11 PGTop const 0 0 487 0 0 0 0 0 0 0 0 0 0

555 17 MouseWatcherGroup 0 2048 17 MouseWatcherGroup 17 MouseWatcherGroup 0 0 0 0 0 0 0 0 0 0 0 0 439
////////////////////////////////////////////////////////////////////
//       Class : MouseWatcherGroup
// Description : This represents a collection of MouseWatcherRegions
//               that may be managed as a group.  The implementation
//               for this is in MouseWatcherBase; this class exists
//               so that we can inherit from ReferenceCount.
////////////////////////////////////////////////////////////////////

556 19 MouseWatcherGroup * 0 8576 19 MouseWatcherGroup * 19 MouseWatcherGroup * 0 0 555 0 0 0 0 0 0 0 0 0 0

557 9 PGEntry * 0 8576 9 PGEntry * 9 PGEntry * 0 0 488 0 0 0 0 0 0 0 0 0 0

558 15 PGEntry const * 0 8576 15 PGEntry const * 15 PGEntry const * 0 0 559 0 0 0 0 0 0 0 0 0 0

559 13 PGEntry const 0 8832 13 PGEntry const 13 PGEntry const 0 0 488 0 0 0 0 0 0 0 0 0 0

560 7 wchar_t 0 8194 7 wchar_t 7 wchar_t 0 1 0 0 0 0 0 0 0 0 0 0 0

561 19 TextGraphic const * 0 8576 19 TextGraphic const * 19 TextGraphic const * 0 0 562 0 0 0 0 0 0 0 0 0 0

562 17 TextGraphic const 0 8832 17 TextGraphic const 17 TextGraphic const 0 0 563 0 0 0 0 0 0 0 0 0 0

563 11 TextGraphic 0 2048 11 TextGraphic 11 TextGraphic 0 0 0 0 0 0 0 0 0 0 0 0 1140
////////////////////////////////////////////////////////////////////
//       Class : TextGraphic
// Description : This defines a special model that has been
//               constructed for the purposes of embedding an
//               arbitrary graphic image within a text paragraph.
//
//               It can be any arbitrary model, though it should be
//               built along the same scale as the text, and it should
//               probably be at least mostly two-dimensional.
//               Typically, this means it should be constructed in the
//               X-Z plane, and it should have a maximum vertical (Z)
//               height of 1.0.
//
//               The frame specifies an arbitrary bounding volume in
//               the form (left, right, bottom, top).  This indicates
//               the amount of space that will be reserved within the
//               paragraph.  The actual model is not actually required
//               to fit within this rectangle, but if it does not, it
//               may visually overlap with nearby text.
////////////////////////////////////////////////////////////////////

564 22 TextProperties const * 0 8576 22 TextProperties const * 22 TextProperties const * 0 0 565 0 0 0 0 0 0 0 0 0 0

565 20 TextProperties const 0 8832 20 TextProperties const 20 TextProperties const 0 0 566 0 0 0 0 0 0 0 0 0 0

566 14 TextProperties 0 2048 14 TextProperties 14 TextProperties 0 0 0 0 0 0 0 0 0 0 0 0 1219
////////////////////////////////////////////////////////////////////
//       Class : TextProperties
// Description : This defines the set of visual properties that may be
//               assigned to the individual characters of the text.
//               (Properties which affect the overall block of text
//               can only be specified on the TextNode directly).
//
//               Typically, there is just one set of properties on a
//               given block of text, which is set directly on the
//               TextNode (TextNode inherits from TextProperties).
//               That makes all of the text within a particular block
//               have the same appearance.
//
//               This separate class exists in order to implement
//               multiple different kinds of text appearing within one
//               block.  The text string itself may reference a
//               TextProperties structure by name using the \1 and \2
//               tokens embedded within the string; each nested
//               TextProperties structure modifies the appearance of
//               subsequent text within the block.
////////////////////////////////////////////////////////////////////

567 31 PGMouseWatcherParameter const * 0 8576 31 PGMouseWatcherParameter const * 31 PGMouseWatcherParameter const * 0 0 568 0 0 0 0 0 0 0 0 0 0

568 29 PGMouseWatcherParameter const 0 8832 29 PGMouseWatcherParameter const 29 PGMouseWatcherParameter const 0 0 490 0 0 0 0 0 0 0 0 0 0

569 25 PGMouseWatcherParameter * 0 8576 25 PGMouseWatcherParameter * 25 PGMouseWatcherParameter * 0 0 490 0 0 0 0 0 0 0 0 0 0

570 29 TypedWritableReferenceCount * 0 8576 29 TypedWritableReferenceCount * 29 TypedWritableReferenceCount * 0 0 491 0 0 0 0 0 0 0 0 0 0

571 23 MouseWatcherParameter * 0 8576 23 MouseWatcherParameter * 23 MouseWatcherParameter * 0 0 492 0 0 0 0 0 0 0 0 0 0

572 26 PGMouseWatcherBackground * 0 8576 26 PGMouseWatcherBackground * 26 PGMouseWatcherBackground * 0 0 493 0 0 0 0 0 0 0 0 0 0

573 16 PGVirtualFrame * 0 8576 16 PGVirtualFrame * 16 PGVirtualFrame * 0 0 495 0 0 0 0 0 0 0 0 0 0

574 22 PGVirtualFrame const * 0 8576 22 PGVirtualFrame const * 22 PGVirtualFrame const * 0 0 575 0 0 0 0 0 0 0 0 0 0

575 20 PGVirtualFrame const 0 8832 20 PGVirtualFrame const 20 PGVirtualFrame const 0 0 495 0 0 0 0 0 0 0 0 0 0

576 22 TransformState const * 0 8576 22 TransformState const * 22 TransformState const * 0 0 577 0 0 0 0 0 0 0 0 0 0

577 20 TransformState const 0 8832 20 TransformState const 20 TransformState const 0 0 578 0 0 0 0 0 0 0 0 0 0

578 14 TransformState 0 2048 14 TransformState 14 TransformState 0 0 0 0 0 0 0 0 0 0 0 0 1138
////////////////////////////////////////////////////////////////////
//       Class : TransformState
// Description : Indicates a coordinate-system transform on vertices.
//               TransformStates are the primary means for storing
//               transformations on the scene graph.
//
//               Transforms may be specified in one of two ways:
//               componentwise, with a pos-hpr-scale, or with an
//               arbitrary transform matrix.  If you specify a
//               transform componentwise, it will remember its
//               original components.
//
//               TransformState objects are managed very much like
//               RenderState objects.  They are immutable and
//               reference-counted automatically.
//
//               You should not attempt to create or modify a
//               TransformState object directly.  Instead, call one of
//               the make() functions to create one for you.  And
//               instead of modifying a TransformState object, create a
//               new one.
////////////////////////////////////////////////////////////////////

579 11 PandaNode * 0 8576 11 PandaNode * 11 PandaNode * 0 0 484 0 0 0 0 0 0 0 0 0 0

580 13 PGSliderBar * 0 8576 13 PGSliderBar * 13 PGSliderBar * 0 0 496 0 0 0 0 0 0 0 0 0 0

581 16 LVector3 const * 0 8576 16 LVector3 const * 16 LVector3 const * 0 0 582 0 0 0 0 0 0 0 0 0 0

582 14 LVector3 const 0 8832 14 LVector3 const 14 LVector3 const 0 0 583 0 0 0 0 0 0 0 0 0 0

583 8 LVector3 0 2105344 8 LVector3 8 LVector3 0 0 584 0 0 0 0 0 0 0 0 0 0

584 9 LVector3f 0 2048 9 LVector3f 9 LVector3f 0 0 0 0 0 0 0 0 0 0 0 0 598
////////////////////////////////////////////////////////////////////
//       Class : LVector3
// Description : This is a three-component vector distance (as opposed
//               to a three-component point, which represents a
//               particular point in space).  Some of the methods are
//               slightly different between LPoint3 and LVector3; in
//               particular, subtraction of two points yields a
//               vector, while addition of a vector and a point yields
//               a point.
////////////////////////////////////////////////////////////////////

585 19 PGSliderBar const * 0 8576 19 PGSliderBar const * 19 PGSliderBar const * 0 0 586 0 0 0 0 0 0 0 0 0 0

586 17 PGSliderBar const 0 8832 17 PGSliderBar const 17 PGSliderBar const 0 0 496 0 0 0 0 0 0 0 0 0 0

587 15 PGScrollFrame * 0 8576 15 PGScrollFrame * 15 PGScrollFrame * 0 0 498 0 0 0 0 0 0 0 0 0 0

588 21 PGScrollFrame const * 0 8576 21 PGScrollFrame const * 21 PGScrollFrame const * 0 0 589 0 0 0 0 0 0 0 0 0 0

589 19 PGScrollFrame const 0 8832 19 PGScrollFrame const 19 PGScrollFrame const 0 0 498 0 0 0 0 0 0 0 0 0 0

590 11 PGWaitBar * 0 8576 11 PGWaitBar * 11 PGWaitBar * 0 0 500 0 0 0 0 0 0 0 0 0 0

591 17 PGWaitBar const * 0 8576 17 PGWaitBar const * 17 PGWaitBar const * 0 0 592 0 0 0 0 0 0 0 0 0 0

592 15 PGWaitBar const 0 8832 15 PGWaitBar const 15 PGWaitBar const 0 0 500 0 0 0 0 0 0 0 0 0 0

0
0
10
593 0 0 22 14 get_state_defs 18 get_num_state_defs 13 get_state_def 
594 0 0 23 11 get_parents 15 get_num_parents 10 get_parent 
595 0 0 23 12 get_children 16 get_num_children 9 get_child 
596 0 0 23 11 get_stashed 15 get_num_stashed 11 get_stashed 
597 0 0 334 9 get_nodes 13 get_num_nodes 8 get_node 
598 0 0 334 13 get_ancestors 13 get_num_nodes 12 get_ancestor 
599 0 0 366 8 get_rows 4 size 7 get_row 
600 0 0 366 8 get_cols 4 size 7 get_col 
601 0 0 366 9 get_row3s 4 size 8 get_row3 
602 0 0 407 10 get_groups 14 get_num_groups 9 get_group 
