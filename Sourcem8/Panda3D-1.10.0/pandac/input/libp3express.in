1436948114
2 3
12 libp3express 4 vDgf 12 panda3d.core 
1317
1342 7 is_null 0 4 2663 22 PointerToVoid::is_null 0 1 15 372
////////////////////////////////////////////////////////////////////
//     Function: PointerToVoid::is_null
//       Access: Published
//  Description: Returns true if the PointerTo is a NULL pointer,
//               false otherwise.  (Direct comparison to a NULL
//               pointer also works.)
////////////////////////////////////////////////////////////////////
47
inline bool PointerToVoid::is_null(void) const;

1343 8 get_hash 0 4 2663 23 PointerToVoid::get_hash 0 1 16 219
////////////////////////////////////////////////////////////////////
//     Function: PointerToVoid::get_hash
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
50
inline size_t PointerToVoid::get_hash(void) const;

1344 5 clear 0 4 2662 56 PointerToBase< ReferenceCountedVector< double > >::clear 0 1 13 0
75
inline void PointerToBase< ReferenceCountedVector< double > >::clear(void);

1345 6 output 0 4 2662 57 PointerToBase< ReferenceCountedVector< double > >::output 0 1 14 0
83
void PointerToBase< ReferenceCountedVector< double > >::output(ostream &out) const;

1346 19 ~PointerToArrayBase 0 4 2661 49 PointerToArrayBase< double >::~PointerToArrayBase 0 0 0
63
inline PointerToArrayBase< double >::~PointerToArrayBase(void);

1347 19 ConstPointerToArray 0 4 2660 50 ConstPointerToArray< double >::ConstPointerToArray 0 3 1 2 3 0
284
inline ConstPointerToArray< double >::ConstPointerToArray(PointerToArray< double > const &copy);
inline ConstPointerToArray< double >::ConstPointerToArray(ConstPointerToArray< double > const &copy);
ConstPointerToArray< double >::ConstPointerToArray(PyObject *self, PyObject *source);

1348 4 size 0 4 2660 35 ConstPointerToArray< double >::size 0 1 4 0
62
inline size_t ConstPointerToArray< double >::size(void) const;

1349 11 get_element 0 4 2660 42 ConstPointerToArray< double >::get_element 0 1 5 0
80
inline double const &ConstPointerToArray< double >::get_element(size_t n) const;

1350 11 __getitem__ 0 4 2660 42 ConstPointerToArray< double >::__getitem__ 0 1 6 0
73
double const &ConstPointerToArray< double >::__getitem__(size_t n) const;

1351 8 get_data 0 4 2660 39 ConstPointerToArray< double >::get_data 0 1 7 0
66
inline string ConstPointerToArray< double >::get_data(void) const;

1352 11 get_subdata 0 4 2660 42 ConstPointerToArray< double >::get_subdata 0 1 8 0
87
inline string ConstPointerToArray< double >::get_subdata(size_t n, size_t count) const;

1353 13 get_ref_count 0 4 2660 44 ConstPointerToArray< double >::get_ref_count 0 1 9 0
68
inline int ConstPointerToArray< double >::get_ref_count(void) const;

1354 18 get_node_ref_count 0 4 2660 49 ConstPointerToArray< double >::get_node_ref_count 0 1 10 0
73
inline int ConstPointerToArray< double >::get_node_ref_count(void) const;

1355 13 __getbuffer__ 0 4 2660 44 ConstPointerToArray< double >::__getbuffer__ 0 1 11 0
99
int ConstPointerToArray< double >::__getbuffer__(PyObject *self, Py_buffer *view, int flags) const;

1356 17 __releasebuffer__ 0 4 2660 48 ConstPointerToArray< double >::__releasebuffer__ 0 1 12 0
93
void ConstPointerToArray< double >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

1357 20 ~ConstPointerToArray 0 4 2660 51 ConstPointerToArray< double >::~ConstPointerToArray 0 0 0
58
ConstPointerToArray< double >::~ConstPointerToArray(void);

1358 5 clear 0 4 2668 55 PointerToBase< ReferenceCountedVector< float > >::clear 0 1 29 0
74
inline void PointerToBase< ReferenceCountedVector< float > >::clear(void);

1359 6 output 0 4 2668 56 PointerToBase< ReferenceCountedVector< float > >::output 0 1 30 0
82
void PointerToBase< ReferenceCountedVector< float > >::output(ostream &out) const;

1360 19 ~PointerToArrayBase 0 4 2667 48 PointerToArrayBase< float >::~PointerToArrayBase 0 0 0
62
inline PointerToArrayBase< float >::~PointerToArrayBase(void);

1361 19 ConstPointerToArray 0 4 2666 49 ConstPointerToArray< float >::ConstPointerToArray 0 3 17 18 19 0
279
inline ConstPointerToArray< float >::ConstPointerToArray(PointerToArray< float > const &copy);
inline ConstPointerToArray< float >::ConstPointerToArray(ConstPointerToArray< float > const &copy);
ConstPointerToArray< float >::ConstPointerToArray(PyObject *self, PyObject *source);

1362 4 size 0 4 2666 34 ConstPointerToArray< float >::size 0 1 20 0
61
inline size_t ConstPointerToArray< float >::size(void) const;

1363 11 get_element 0 4 2666 41 ConstPointerToArray< float >::get_element 0 1 21 0
78
inline float const &ConstPointerToArray< float >::get_element(size_t n) const;

1364 11 __getitem__ 0 4 2666 41 ConstPointerToArray< float >::__getitem__ 0 1 22 0
71
float const &ConstPointerToArray< float >::__getitem__(size_t n) const;

1365 8 get_data 0 4 2666 38 ConstPointerToArray< float >::get_data 0 1 23 0
65
inline string ConstPointerToArray< float >::get_data(void) const;

1366 11 get_subdata 0 4 2666 41 ConstPointerToArray< float >::get_subdata 0 1 24 0
86
inline string ConstPointerToArray< float >::get_subdata(size_t n, size_t count) const;

1367 13 get_ref_count 0 4 2666 43 ConstPointerToArray< float >::get_ref_count 0 1 25 0
67
inline int ConstPointerToArray< float >::get_ref_count(void) const;

1368 18 get_node_ref_count 0 4 2666 48 ConstPointerToArray< float >::get_node_ref_count 0 1 26 0
72
inline int ConstPointerToArray< float >::get_node_ref_count(void) const;

1369 13 __getbuffer__ 0 4 2666 43 ConstPointerToArray< float >::__getbuffer__ 0 1 27 0
98
int ConstPointerToArray< float >::__getbuffer__(PyObject *self, Py_buffer *view, int flags) const;

1370 17 __releasebuffer__ 0 4 2666 47 ConstPointerToArray< float >::__releasebuffer__ 0 1 28 0
92
void ConstPointerToArray< float >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

1371 20 ~ConstPointerToArray 0 4 2666 50 ConstPointerToArray< float >::~ConstPointerToArray 0 0 0
57
ConstPointerToArray< float >::~ConstPointerToArray(void);

1372 5 clear 0 4 2672 53 PointerToBase< ReferenceCountedVector< int > >::clear 0 1 43 0
72
inline void PointerToBase< ReferenceCountedVector< int > >::clear(void);

1373 6 output 0 4 2672 54 PointerToBase< ReferenceCountedVector< int > >::output 0 1 44 0
80
void PointerToBase< ReferenceCountedVector< int > >::output(ostream &out) const;

1374 19 ~PointerToArrayBase 0 4 2671 46 PointerToArrayBase< int >::~PointerToArrayBase 0 0 0
60
inline PointerToArrayBase< int >::~PointerToArrayBase(void);

1375 19 ConstPointerToArray 0 4 2670 47 ConstPointerToArray< int >::ConstPointerToArray 0 3 31 32 33 0
269
inline ConstPointerToArray< int >::ConstPointerToArray(PointerToArray< int > const &copy);
inline ConstPointerToArray< int >::ConstPointerToArray(ConstPointerToArray< int > const &copy);
ConstPointerToArray< int >::ConstPointerToArray(PyObject *self, PyObject *source);

1376 4 size 0 4 2670 32 ConstPointerToArray< int >::size 0 1 34 0
59
inline size_t ConstPointerToArray< int >::size(void) const;

1377 11 get_element 0 4 2670 39 ConstPointerToArray< int >::get_element 0 1 35 0
74
inline int const &ConstPointerToArray< int >::get_element(size_t n) const;

1378 11 __getitem__ 0 4 2670 39 ConstPointerToArray< int >::__getitem__ 0 1 36 0
67
int const &ConstPointerToArray< int >::__getitem__(size_t n) const;

1379 8 get_data 0 4 2670 36 ConstPointerToArray< int >::get_data 0 1 37 0
63
inline string ConstPointerToArray< int >::get_data(void) const;

1380 11 get_subdata 0 4 2670 39 ConstPointerToArray< int >::get_subdata 0 1 38 0
84
inline string ConstPointerToArray< int >::get_subdata(size_t n, size_t count) const;

1381 13 get_ref_count 0 4 2670 41 ConstPointerToArray< int >::get_ref_count 0 1 39 0
65
inline int ConstPointerToArray< int >::get_ref_count(void) const;

1382 18 get_node_ref_count 0 4 2670 46 ConstPointerToArray< int >::get_node_ref_count 0 1 40 0
70
inline int ConstPointerToArray< int >::get_node_ref_count(void) const;

1383 13 __getbuffer__ 0 4 2670 41 ConstPointerToArray< int >::__getbuffer__ 0 1 41 0
96
int ConstPointerToArray< int >::__getbuffer__(PyObject *self, Py_buffer *view, int flags) const;

1384 17 __releasebuffer__ 0 4 2670 45 ConstPointerToArray< int >::__releasebuffer__ 0 1 42 0
90
void ConstPointerToArray< int >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

1385 20 ~ConstPointerToArray 0 4 2670 48 ConstPointerToArray< int >::~ConstPointerToArray 0 0 0
55
ConstPointerToArray< int >::~ConstPointerToArray(void);

1386 5 clear 0 4 2676 63 PointerToBase< ReferenceCountedVector< unsigned char > >::clear 0 1 57 0
82
inline void PointerToBase< ReferenceCountedVector< unsigned char > >::clear(void);

1387 6 output 0 4 2676 64 PointerToBase< ReferenceCountedVector< unsigned char > >::output 0 1 58 0
90
void PointerToBase< ReferenceCountedVector< unsigned char > >::output(ostream &out) const;

1388 19 ~PointerToArrayBase 0 4 2675 56 PointerToArrayBase< unsigned char >::~PointerToArrayBase 0 0 0
70
inline PointerToArrayBase< unsigned char >::~PointerToArrayBase(void);

1389 19 ConstPointerToArray 0 4 2674 57 ConstPointerToArray< unsigned char >::ConstPointerToArray 0 3 45 46 47 0
319
inline ConstPointerToArray< unsigned char >::ConstPointerToArray(PointerToArray< unsigned char > const &copy);
inline ConstPointerToArray< unsigned char >::ConstPointerToArray(ConstPointerToArray< unsigned char > const &copy);
ConstPointerToArray< unsigned char >::ConstPointerToArray(PyObject *self, PyObject *source);

1390 4 size 0 4 2674 42 ConstPointerToArray< unsigned char >::size 0 1 48 0
69
inline size_t ConstPointerToArray< unsigned char >::size(void) const;

1391 11 get_element 0 4 2674 49 ConstPointerToArray< unsigned char >::get_element 0 1 49 0
94
inline unsigned char const &ConstPointerToArray< unsigned char >::get_element(size_t n) const;

1392 11 __getitem__ 0 4 2674 49 ConstPointerToArray< unsigned char >::__getitem__ 0 1 50 0
87
unsigned char const &ConstPointerToArray< unsigned char >::__getitem__(size_t n) const;

1393 8 get_data 0 4 2674 46 ConstPointerToArray< unsigned char >::get_data 0 1 51 0
73
inline string ConstPointerToArray< unsigned char >::get_data(void) const;

1394 11 get_subdata 0 4 2674 49 ConstPointerToArray< unsigned char >::get_subdata 0 1 52 0
94
inline string ConstPointerToArray< unsigned char >::get_subdata(size_t n, size_t count) const;

1395 13 get_ref_count 0 4 2674 51 ConstPointerToArray< unsigned char >::get_ref_count 0 1 53 0
75
inline int ConstPointerToArray< unsigned char >::get_ref_count(void) const;

1396 18 get_node_ref_count 0 4 2674 56 ConstPointerToArray< unsigned char >::get_node_ref_count 0 1 54 0
80
inline int ConstPointerToArray< unsigned char >::get_node_ref_count(void) const;

1397 13 __getbuffer__ 0 4 2674 51 ConstPointerToArray< unsigned char >::__getbuffer__ 0 1 55 0
106
int ConstPointerToArray< unsigned char >::__getbuffer__(PyObject *self, Py_buffer *view, int flags) const;

1398 17 __releasebuffer__ 0 4 2674 55 ConstPointerToArray< unsigned char >::__releasebuffer__ 0 1 56 0
100
void ConstPointerToArray< unsigned char >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

1399 20 ~ConstPointerToArray 0 4 2674 58 ConstPointerToArray< unsigned char >::~ConstPointerToArray 0 0 0
65
ConstPointerToArray< unsigned char >::~ConstPointerToArray(void);

1400 12 ~ConfigFlags 0 4 2678 25 ConfigFlags::~ConfigFlags 0 0 0
32
ConfigFlags::~ConfigFlags(void);

1401 8 get_page 0 4 2677 27 ConfigDeclaration::get_page 0 1 59 297
////////////////////////////////////////////////////////////////////
//     Function: ConfigDeclaration::get_page
//       Access: Public
//  Description: Returns the page on which this declaration can be
//               found.
////////////////////////////////////////////////////////////////////
59
inline ConfigPage *ConfigDeclaration::get_page(void) const;

1402 12 get_variable 0 4 2677 31 ConfigDeclaration::get_variable 0 1 60 395
////////////////////////////////////////////////////////////////////
//     Function: ConfigDeclaration::get_variable
//       Access: Public
//  Description: Returns the variable that this declaration names.
//               This variable may or may not have been defined by the
//               time the declaration is read.
////////////////////////////////////////////////////////////////////
71
inline ConfigVariableCore *ConfigDeclaration::get_variable(void) const;

1403 16 get_string_value 0 4 2677 35 ConfigDeclaration::get_string_value 0 1 61 452
////////////////////////////////////////////////////////////////////
//     Function: ConfigDeclaration::get_string_value
//       Access: Public
//  Description: Returns the value assigned to this variable.  This is
//               the original one-line text defined for the variable
//               in the .prc file (or passed to
//               ConfigPage::make_declaration()).
////////////////////////////////////////////////////////////////////
69
inline string const &ConfigDeclaration::get_string_value(void) const;

1404 16 set_string_value 0 4 2677 35 ConfigDeclaration::set_string_value 0 1 62 276
////////////////////////////////////////////////////////////////////
//     Function: ConfigDeclaration::set_string_value
//       Access: Public
//  Description: Changes the value assigned to this variable.
////////////////////////////////////////////////////////////////////
69
inline void ConfigDeclaration::set_string_value(string const &value);

1405 13 get_num_words 0 4 2677 32 ConfigDeclaration::get_num_words 0 1 63 405
////////////////////////////////////////////////////////////////////
//     Function: ConfigDeclaration::get_num_words
//       Access: Public
//  Description: Returns the number of words in the declaration's
//               value.  A word is defined as a sequence of
//               non-whitespace characters delimited by whitespace.
////////////////////////////////////////////////////////////////////
56
inline int ConfigDeclaration::get_num_words(void) const;

1406 15 has_string_word 0 4 2677 34 ConfigDeclaration::has_string_word 0 1 64 449
////////////////////////////////////////////////////////////////////
//     Function: ConfigDeclaration::has_string_word
//       Access: Public
//  Description: Returns true if the declaration's value has a valid
//               string value for the nth word.  This is really the
//               same thing as asking if there are at least n words in
//               the value.
////////////////////////////////////////////////////////////////////
60
inline bool ConfigDeclaration::has_string_word(int n) const;

1407 13 has_bool_word 0 4 2677 32 ConfigDeclaration::has_bool_word 0 1 65 329
////////////////////////////////////////////////////////////////////
//     Function: ConfigDeclaration::has_bool_word
//       Access: Public
//  Description: Returns true if the declaration's value has a valid
//               boolean value for the nth word.
////////////////////////////////////////////////////////////////////
58
inline bool ConfigDeclaration::has_bool_word(int n) const;

1408 12 has_int_word 0 4 2677 31 ConfigDeclaration::has_int_word 0 1 66 328
////////////////////////////////////////////////////////////////////
//     Function: ConfigDeclaration::has_int_word
//       Access: Public
//  Description: Returns true if the declaration's value has a valid
//               integer value for the nth word.
////////////////////////////////////////////////////////////////////
57
inline bool ConfigDeclaration::has_int_word(int n) const;

1409 14 has_int64_word 0 4 2677 33 ConfigDeclaration::has_int64_word 0 1 67 328
////////////////////////////////////////////////////////////////////
//     Function: ConfigDeclaration::has_int64_word
//       Access: Public
//  Description: Returns true if the declaration's value has a valid
//               int64 value for the nth word.
////////////////////////////////////////////////////////////////////
59
inline bool ConfigDeclaration::has_int64_word(int n) const;

1410 15 has_double_word 0 4 2677 34 ConfigDeclaration::has_double_word 0 1 68 331
////////////////////////////////////////////////////////////////////
//     Function: ConfigDeclaration::has_double_word
//       Access: Public
//  Description: Returns true if the declaration's value has a valid
//               integer value for the nth word.
////////////////////////////////////////////////////////////////////
60
inline bool ConfigDeclaration::has_double_word(int n) const;

1411 15 get_string_word 0 4 2677 34 ConfigDeclaration::get_string_word 0 1 69 404
////////////////////////////////////////////////////////////////////
//     Function: ConfigDeclaration::get_string_word
//       Access: Public
//  Description: Returns the string value of the nth word of the
//               declaration's value, or empty string if there is no
//               nth value.  See also has_string_word().
////////////////////////////////////////////////////////////////////
62
inline string ConfigDeclaration::get_string_word(int n) const;

1412 13 get_bool_word 0 4 2677 32 ConfigDeclaration::get_bool_word 0 1 70 394
////////////////////////////////////////////////////////////////////
//     Function: ConfigDeclaration::get_bool_word
//       Access: Public
//  Description: Returns the boolean value of the nth word of the
//               declaration's value, or false if there is no nth
//               value.  See also has_bool_word().
////////////////////////////////////////////////////////////////////
58
inline bool ConfigDeclaration::get_bool_word(int n) const;

1413 12 get_int_word 0 4 2677 31 ConfigDeclaration::get_int_word 0 1 71 387
////////////////////////////////////////////////////////////////////
//     Function: ConfigDeclaration::get_int_word
//       Access: Public
//  Description: Returns the integer value of the nth word of the
//               declaration's value, or 0 if there is no nth value.
//               See also has_int_word().
////////////////////////////////////////////////////////////////////
56
inline int ConfigDeclaration::get_int_word(int n) const;

1414 14 get_int64_word 0 4 2677 33 ConfigDeclaration::get_int64_word 0 1 72 389
////////////////////////////////////////////////////////////////////
//     Function: ConfigDeclaration::get_int64_word
//       Access: Public
//  Description: Returns the int64 value of the nth word of the
//               declaration's value, or 0 if there is no nth value.
//               See also has_int64_word().
////////////////////////////////////////////////////////////////////
63
inline PN_int64 ConfigDeclaration::get_int64_word(int n) const;

1415 15 get_double_word 0 4 2677 34 ConfigDeclaration::get_double_word 0 1 73 393
////////////////////////////////////////////////////////////////////
//     Function: ConfigDeclaration::get_double_word
//       Access: Public
//  Description: Returns the integer value of the nth word of the
//               declaration's value, or 0 if there is no nth value.
//               See also has_double_word().
////////////////////////////////////////////////////////////////////
62
inline double ConfigDeclaration::get_double_word(int n) const;

1416 15 set_string_word 0 4 2677 34 ConfigDeclaration::set_string_word 0 1 74 0
68
void ConfigDeclaration::set_string_word(int n, string const &value);

1417 13 set_bool_word 0 4 2677 32 ConfigDeclaration::set_bool_word 0 1 75 0
57
void ConfigDeclaration::set_bool_word(int n, bool value);

1418 12 set_int_word 0 4 2677 31 ConfigDeclaration::set_int_word 0 1 76 0
55
void ConfigDeclaration::set_int_word(int n, int value);

1419 14 set_int64_word 0 4 2677 33 ConfigDeclaration::set_int64_word 0 1 77 0
62
void ConfigDeclaration::set_int64_word(int n, PN_int64 value);

1420 15 set_double_word 0 4 2677 34 ConfigDeclaration::set_double_word 0 1 78 0
61
void ConfigDeclaration::set_double_word(int n, double value);

1421 12 get_decl_seq 0 4 2677 31 ConfigDeclaration::get_decl_seq 0 1 79 530
////////////////////////////////////////////////////////////////////
//     Function: ConfigDeclaration::get_decl_seq
//       Access: Public
//  Description: Returns the sequence number of the declaration within
//               the page.  Sequence numbers are assigned as each
//               declaration is created; each declaration is given a
//               higher sequence number than all the declarations
//               created in the page before it.
////////////////////////////////////////////////////////////////////
55
inline int ConfigDeclaration::get_decl_seq(void) const;

1422 6 output 0 4 2677 25 ConfigDeclaration::output 0 1 80 0
51
void ConfigDeclaration::output(ostream &out) const;

1423 5 write 0 4 2677 24 ConfigDeclaration::write 0 1 81 0
50
void ConfigDeclaration::write(ostream &out) const;

1424 16 get_default_page 0 4 2681 28 ConfigPage::get_default_page 0 1 82 0
54
static ConfigPage *ConfigPage::get_default_page(void);

1425 14 get_local_page 0 4 2681 26 ConfigPage::get_local_page 0 1 83 0
52
static ConfigPage *ConfigPage::get_local_page(void);

1426 8 get_name 0 4 2681 20 ConfigPage::get_name 0 1 84 338
////////////////////////////////////////////////////////////////////
//     Function: ConfigPage::get_name
//       Access: Published
//  Description: Returns the name of the page.  If the page was loaded
//               from a .prc file, this is usually the filename.
////////////////////////////////////////////////////////////////////
54
inline string const &ConfigPage::get_name(void) const;

1427 10 is_special 0 4 2681 22 ConfigPage::is_special 0 1 85 517
////////////////////////////////////////////////////////////////////
//     Function: ConfigPage::is_special
//       Access: Published
//  Description: Returns true if this is the special "default" or
//               "local" page, or false if it is an ordinary page,
//               e.g. an implicit page loaded from a prc file at
//               startup, or an explicit page created by
//               ConfigPageManager::make_explicit_page().
////////////////////////////////////////////////////////////////////
47
inline bool ConfigPage::is_special(void) const;

1428 11 is_implicit 0 4 2681 23 ConfigPage::is_implicit 0 1 86 437
////////////////////////////////////////////////////////////////////
//     Function: ConfigPage::is_implicit
//       Access: Published
//  Description: Returns true if the page was loaded by implicitly
//               searching the config path on startup, or false if it
//               was explicitly loaded by dynamic code after initial
//               startup.
////////////////////////////////////////////////////////////////////
48
inline bool ConfigPage::is_implicit(void) const;

1429 8 set_sort 0 4 2681 20 ConfigPage::set_sort 0 1 87 0
36
void ConfigPage::set_sort(int sort);

1430 8 get_sort 0 4 2681 20 ConfigPage::get_sort 0 1 88 316
////////////////////////////////////////////////////////////////////
//     Function: ConfigPage::get_sort
//       Access: Published
//  Description: Returns the explicit sort order of this particular
//               ConfigPage.  See set_sort().
////////////////////////////////////////////////////////////////////
44
inline int ConfigPage::get_sort(void) const;

1431 12 get_page_seq 0 4 2681 24 ConfigPage::get_page_seq 0 1 89 728
////////////////////////////////////////////////////////////////////
//     Function: ConfigPage::get_page_seq
//       Access: Published
//  Description: Returns the sequence number of the page.  
//
//               Sequence numbers for a particular class (implicit
//               vs. explicit) of pages are assigned as each page is
//               loaded; each page is given a higher sequence number
//               than all the pages loaded before it.
//
//               The implicit_load pages, which are discovered in the
//               file system automatically, have a different set of
//               sequence numbers than the explicit pages.
////////////////////////////////////////////////////////////////////
48
inline int ConfigPage::get_page_seq(void) const;

1432 15 get_trust_level 0 4 2681 27 ConfigPage::get_trust_level 0 1 90 592
////////////////////////////////////////////////////////////////////
//     Function: ConfigPage::get_trust_level
//       Access: Published
//  Description: Returns the trust level associated with this page.
//               An untrusted page is trust level 0; if the page was
//               loaded from a signed .prc file, its trust level is
//               the index number of the certificate that signed it.
//               Generally, a higher trust level value represents
//               a greater level of trust.
////////////////////////////////////////////////////////////////////
51
inline int ConfigPage::get_trust_level(void) const;

1433 15 set_trust_level 0 4 2681 27 ConfigPage::set_trust_level 0 1 91 456
////////////////////////////////////////////////////////////////////
//     Function: ConfigPage::set_trust_level
//       Access: Published
//  Description: Explicitly sets the trust level on this particular
//               page.  Note that any subsequent changes to the page,
//               or to any variable declarations on it, will reset the
//               trust level to zero.
////////////////////////////////////////////////////////////////////
57
inline void ConfigPage::set_trust_level(int trust_level);

1434 13 get_signature 0 4 2681 25 ConfigPage::get_signature 0 1 92 399
////////////////////////////////////////////////////////////////////
//     Function: ConfigPage::get_signature
//       Access: Published
//  Description: Returns the raw binary signature that was found in
//               the prc file, if any.  This method is probably not
//               terribly useful for most applications.
////////////////////////////////////////////////////////////////////
59
inline string const &ConfigPage::get_signature(void) const;

1435 5 clear 0 4 2681 17 ConfigPage::clear 0 1 93 0
29
void ConfigPage::clear(void);

1436 8 read_prc 0 4 2681 20 ConfigPage::read_prc 0 1 94 0
39
bool ConfigPage::read_prc(istream &in);

1437 18 read_encrypted_prc 0 4 2681 30 ConfigPage::read_encrypted_prc 0 1 95 0
73
bool ConfigPage::read_encrypted_prc(istream &in, string const &password);

1438 16 make_declaration 0 4 2681 28 ConfigPage::make_declaration 0 2 96 97 0
193
ConfigDeclaration *ConfigPage::make_declaration(string const &variable, string const &value);
ConfigDeclaration *ConfigPage::make_declaration(ConfigVariableCore *variable, string const &value);

1439 18 delete_declaration 0 4 2681 30 ConfigPage::delete_declaration 0 1 98 0
61
bool ConfigPage::delete_declaration(ConfigDeclaration *decl);

1440 20 get_num_declarations 0 4 2681 32 ConfigPage::get_num_declarations 0 1 99 0
49
int ConfigPage::get_num_declarations(void) const;

1441 15 get_declaration 0 4 2681 27 ConfigPage::get_declaration 0 1 100 0
66
ConfigDeclaration const *ConfigPage::get_declaration(int n) const;

1442 18 modify_declaration 0 4 2681 30 ConfigPage::modify_declaration 0 1 101 0
57
ConfigDeclaration *ConfigPage::modify_declaration(int n);

1443 17 get_variable_name 0 4 2681 29 ConfigPage::get_variable_name 0 1 102 0
50
string ConfigPage::get_variable_name(int n) const;

1444 16 get_string_value 0 4 2681 28 ConfigPage::get_string_value 0 1 103 0
49
string ConfigPage::get_string_value(int n) const;

1445 16 is_variable_used 0 4 2681 28 ConfigPage::is_variable_used 0 1 104 0
47
bool ConfigPage::is_variable_used(int n) const;

1446 6 output 0 4 2681 18 ConfigPage::output 0 1 105 0
44
void ConfigPage::output(ostream &out) const;

1447 22 output_brief_signature 0 4 2681 34 ConfigPage::output_brief_signature 0 1 106 0
60
void ConfigPage::output_brief_signature(ostream &out) const;

1448 5 write 0 4 2681 17 ConfigPage::write 0 1 107 0
43
void ConfigPage::write(ostream &out) const;

1449 21 loaded_implicit_pages 0 4 2682 40 ConfigPageManager::loaded_implicit_pages 0 1 108 415
////////////////////////////////////////////////////////////////////
//     Function: ConfigPageManager::loaded_implicit_pages
//       Access: Published
//  Description: Returns true if the implicit *.prc files have already
//               been loaded, false otherwise.  Normally this will
//               only be false briefly before startup.
////////////////////////////////////////////////////////////////////
65
inline bool ConfigPageManager::loaded_implicit_pages(void) const;

1450 19 load_implicit_pages 0 4 2682 38 ConfigPageManager::load_implicit_pages 0 1 109 536
////////////////////////////////////////////////////////////////////
//     Function: ConfigPageManager::load_implicit_pages
//       Access: Published
//  Description: Searches the PRC_DIR and/or PRC_PATH directories for
//               *.prc files and loads them in as pages.  This is
//               normally called automatically at startup time, when
//               the first variable's value is referenced.  See also
//               reload_implicit_pages().
////////////////////////////////////////////////////////////////////
57
inline void ConfigPageManager::load_implicit_pages(void);

1451 21 reload_implicit_pages 0 4 2682 40 ConfigPageManager::reload_implicit_pages 0 1 110 0
52
void ConfigPageManager::reload_implicit_pages(void);

1452 15 get_search_path 0 4 2682 34 ConfigPageManager::get_search_path 0 1 111 556
////////////////////////////////////////////////////////////////////
//     Function: ConfigPageManager::get_search_path
//       Access: Published
//  Description: Returns the search path used to locate implicit .prc
//               files.  This is determined by the PRC_DIR and
//               PRC_PATH environment variables.  The object returned
//               by this method may be modified to change the path at
//               runtime, and then reload_implicit_pages() called.
////////////////////////////////////////////////////////////////////
61
inline DSearchPath &ConfigPageManager::get_search_path(void);

1453 20 get_num_prc_patterns 0 4 2682 39 ConfigPageManager::get_num_prc_patterns 0 1 112 574
////////////////////////////////////////////////////////////////////
//     Function: ConfigPageManager::get_num_prc_patterns
//       Access: Published
//  Description: Returns the number of patterns, like "*.prc", that
//               are compiled in that will be searched for as default
//               config filenames.  Normally there is only one
//               pattern, and it is "*.prc", but others may be
//               specified with the PRC_FILENAME variable in
//               Config.pp.
////////////////////////////////////////////////////////////////////
63
inline int ConfigPageManager::get_num_prc_patterns(void) const;

1454 15 get_prc_pattern 0 4 2682 34 ConfigPageManager::get_prc_pattern 0 1 113 385
////////////////////////////////////////////////////////////////////
//     Function: ConfigPageManager::get_prc_pattern
//       Access: Published
//  Description: Returns the nth filename pattern that will be
//               considered a match as a valid config file.  See
//               get_num_prc_patterns().
////////////////////////////////////////////////////////////////////
62
inline string ConfigPageManager::get_prc_pattern(int n) const;

1455 30 get_num_prc_encrypted_patterns 0 4 2682 49 ConfigPageManager::get_num_prc_encrypted_patterns 0 1 114 436
////////////////////////////////////////////////////////////////////
//     Function: ConfigPageManager::get_num_prc_encrypted_patterns
//       Access: Published
//  Description: Returns the number of patterns, like "*.pre", that
//               are compiled in that will be searched for as special
//               config files that are understood to be encrypted.
////////////////////////////////////////////////////////////////////
73
inline int ConfigPageManager::get_num_prc_encrypted_patterns(void) const;

1456 25 get_prc_encrypted_pattern 0 4 2682 44 ConfigPageManager::get_prc_encrypted_pattern 0 1 115 415
////////////////////////////////////////////////////////////////////
//     Function: ConfigPageManager::get_prc_encrypted_pattern
//       Access: Published
//  Description: Returns the nth filename pattern that will be
//               considered a match as a valid encrypted config
//               file.  See get_num_prc_encrypted_patterns().
////////////////////////////////////////////////////////////////////
72
inline string ConfigPageManager::get_prc_encrypted_pattern(int n) const;

1457 31 get_num_prc_executable_patterns 0 4 2682 50 ConfigPageManager::get_num_prc_executable_patterns 0 1 116 533
////////////////////////////////////////////////////////////////////
//     Function: ConfigPageManager::get_num_prc_executable_patterns
//       Access: Published
//  Description: Returns the number of patterns, like "*.exe", that
//               are compiled in that will be searched for as special
//               config files that are to be executed as a program,
//               and their output taken to be input.  This is normally
//               empty.
////////////////////////////////////////////////////////////////////
74
inline int ConfigPageManager::get_num_prc_executable_patterns(void) const;

1458 26 get_prc_executable_pattern 0 4 2682 45 ConfigPageManager::get_prc_executable_pattern 0 1 117 424
////////////////////////////////////////////////////////////////////
//     Function: ConfigPageManager::get_prc_executable_pattern
//       Access: Published
//  Description: Returns the nth filename pattern that will be
//               considered a match as a valid executable-style config
//               file.  See get_num_prc_executable_patterns().
////////////////////////////////////////////////////////////////////
73
inline string ConfigPageManager::get_prc_executable_pattern(int n) const;

1459 18 make_explicit_page 0 4 2682 37 ConfigPageManager::make_explicit_page 0 1 118 0
70
ConfigPage *ConfigPageManager::make_explicit_page(string const &name);

1460 20 delete_explicit_page 0 4 2682 39 ConfigPageManager::delete_explicit_page 0 1 119 0
63
bool ConfigPageManager::delete_explicit_page(ConfigPage *page);

1461 22 get_num_implicit_pages 0 4 2682 41 ConfigPageManager::get_num_implicit_pages 0 1 120 450
////////////////////////////////////////////////////////////////////
//     Function: ConfigPageManager::get_num_implicit_pages
//       Access: Published
//  Description: Returns the current number of implicitly-loaded
//               ConfigPages in the world.  These represent files that
//               were automatically discovered on the disk as .prc
//               files.
////////////////////////////////////////////////////////////////////
65
inline int ConfigPageManager::get_num_implicit_pages(void) const;

1462 17 get_implicit_page 0 4 2682 36 ConfigPageManager::get_implicit_page 0 1 121 332
////////////////////////////////////////////////////////////////////
//     Function: ConfigPageManager::get_implicit_page
//       Access: Published
//  Description: Returns the nth implicit ConfigPage in the world.
//               See get_num_implicit_pages().
////////////////////////////////////////////////////////////////////
69
inline ConfigPage *ConfigPageManager::get_implicit_page(int n) const;

1463 22 get_num_explicit_pages 0 4 2682 41 ConfigPageManager::get_num_explicit_pages 0 1 122 490
////////////////////////////////////////////////////////////////////
//     Function: ConfigPageManager::get_num_explicit_pages
//       Access: Published
//  Description: Returns the current number of explicitly-loaded
//               ConfigPages in the world.  These represent pages that
//               were loaded dynamically at runtime by explicit calls
//               to ConfigPageManager::make_explicit_page().
////////////////////////////////////////////////////////////////////
65
inline int ConfigPageManager::get_num_explicit_pages(void) const;

1464 17 get_explicit_page 0 4 2682 36 ConfigPageManager::get_explicit_page 0 1 123 332
////////////////////////////////////////////////////////////////////
//     Function: ConfigPageManager::get_explicit_page
//       Access: Published
//  Description: Returns the nth explicit ConfigPage in the world.
//               See get_num_explicit_pages().
////////////////////////////////////////////////////////////////////
69
inline ConfigPage *ConfigPageManager::get_explicit_page(int n) const;

1465 6 output 0 4 2682 25 ConfigPageManager::output 0 1 124 0
51
void ConfigPageManager::output(ostream &out) const;

1466 5 write 0 4 2682 24 ConfigPageManager::write 0 1 125 0
50
void ConfigPageManager::write(ostream &out) const;

1467 14 get_global_ptr 0 4 2682 33 ConfigPageManager::get_global_ptr 0 1 126 0
66
static ConfigPageManager *ConfigPageManager::get_global_ptr(void);

1468 8 get_name 0 4 2684 28 ConfigVariableBase::get_name 0 1 148 261
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableBase::get_name
//       Access: Published
//  Description: Returns the name of the variable.
////////////////////////////////////////////////////////////////////
62
inline string const &ConfigVariableBase::get_name(void) const;

1469 14 get_value_type 0 4 2684 34 ConfigVariableBase::get_value_type 0 1 149 386
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableBase::get_value_type
//       Access: Published
//  Description: Returns the stated type of this variable.  This
//               should be VT_list, unless a later variable
//               declaration has changed it.
////////////////////////////////////////////////////////////////////
77
inline ConfigFlags::ValueType ConfigVariableBase::get_value_type(void) const;

1470 15 get_description 0 4 2684 35 ConfigVariableBase::get_description 0 1 150 323
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableBase::get_description
//       Access: Published
//  Description: Returns the brief description of this variable, if
//               it has been defined.
////////////////////////////////////////////////////////////////////
69
inline string const &ConfigVariableBase::get_description(void) const;

1471 9 get_flags 0 4 2684 29 ConfigVariableBase::get_flags 0 1 151 522
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableBase::get_flags
//       Access: Public
//  Description: Returns the flags value as set by set_flags().  This
//               includes the trust level and some other settings.
//               See the individual methods is_closed(),
//               get_trust_level(), etc. to pull out the semantic
//               meaning of these flags individually.
////////////////////////////////////////////////////////////////////
53
inline int ConfigVariableBase::get_flags(void) const;

1472 9 is_closed 0 4 2684 29 ConfigVariableBase::is_closed 0 1 152 749
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableBase::is_closed
//       Access: Public
//  Description: Returns true if the variable is not trusted by any
//               prc file (and hence cannot be modified from its
//               compiled-in default value), or false for the normal
//               case, in which the variable can be modified by any
//               prc file at or above its trust level (see
//               get_trust_level()).
//
//               This value only has effect in a release build
//               (specifically, when PRC_RESPECT_TRUST_LEVEL is
//               defined true in Config.pp).
////////////////////////////////////////////////////////////////////
54
inline bool ConfigVariableBase::is_closed(void) const;

1473 15 get_trust_level 0 4 2684 35 ConfigVariableBase::get_trust_level 0 1 153 835
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableBase::get_trust_level
//       Access: Public
//  Description: Returns the minimum trust_level a prc file must
//               demonstrate in order to redefine the value for this
//               variable.  Arguably, this should be called the
//               "mistrust level", since the larger the value, the
//               more suspicious we are of prc files.  This value is
//               not used if is_closed() returns true, which indicates
//               no file may be trusted.
//
//               This value only has effect in a release build
//               (specifically, when PRC_RESPECT_TRUST_LEVEL is
//               defined true in Config.pp).
////////////////////////////////////////////////////////////////////
59
inline int ConfigVariableBase::get_trust_level(void) const;

1474 10 is_dynamic 0 4 2684 30 ConfigVariableBase::is_dynamic 0 1 154 510
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableBase::is_dynamic
//       Access: Public
//  Description: Returns true if the variable was indicated as
//               "dynamic" by its constructor, indicating that its
//               name was dynamically generated, possibly from a large
//               pool, and it should not be listed along with the
//               other variables.
////////////////////////////////////////////////////////////////////
55
inline bool ConfigVariableBase::is_dynamic(void) const;

1475 17 clear_local_value 0 4 2684 37 ConfigVariableBase::clear_local_value 0 1 155 525
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableBase::clear_local_value
//       Access: Published
//  Description: Removes the local value defined for this variable,
//               and allows its value to be once again retrieved from
//               the .prc files.
//
//               Returns true if the value was successfully removed,
//               false if it did not exist in the first place.
////////////////////////////////////////////////////////////////////
56
inline bool ConfigVariableBase::clear_local_value(void);

1476 15 has_local_value 0 4 2684 35 ConfigVariableBase::has_local_value 0 1 156 403
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableBase::has_local_value
//       Access: Published
//  Description: Returns true if this variable's value has been
//               shadowed by a local assignment (as created via
//               make_local_value()), or false otherwise.
////////////////////////////////////////////////////////////////////
60
inline bool ConfigVariableBase::has_local_value(void) const;

1477 9 has_value 0 4 2684 29 ConfigVariableBase::has_value 0 1 157 395
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableBase::has_value
//       Access: Public
//  Description: Returns true if this variable has an explicit value,
//               either from a prc file or locally set, or false if
//               variable has its default value.
////////////////////////////////////////////////////////////////////
54
inline bool ConfigVariableBase::has_value(void) const;

1478 6 output 0 4 2684 26 ConfigVariableBase::output 0 1 158 226
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableBase::output
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
59
inline void ConfigVariableBase::output(ostream &out) const;

1479 5 write 0 4 2684 25 ConfigVariableBase::write 0 1 159 225
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableBase::write
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
58
inline void ConfigVariableBase::write(ostream &out) const;

1480 14 ConfigVariable 0 4 2683 30 ConfigVariable::ConfigVariable 0 1 127 1180
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariable::Constructor
//       Access: Protected
//  Description: This constructor is only intended to be called from a
//               specialized ConfigVariableFoo derived class.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ConfigVariable::Constructor
//       Access: Protected
//  Description: This constructor is only intended to be called from a
//               specialized ConfigVariableFoo derived class.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ConfigVariable::Constructor
//       Access: Published
//  Description: Use this constructor to make a ConfigVariable of an
//               unspecified type.  Usually you'd want to do this just
//               to reference a previously-defined ConfigVariable of a
//               specific type, without having to know what type it is.
////////////////////////////////////////////////////////////////////
58
inline ConfigVariable::ConfigVariable(string const &name);

1481 15 ~ConfigVariable 0 4 2683 31 ConfigVariable::~ConfigVariable 0 0 226
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariable::Destructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
45
inline ConfigVariable::~ConfigVariable(void);

1482 17 get_default_value 0 4 2683 33 ConfigVariable::get_default_value 0 1 128 390
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariable::get_default_value
//       Access: Published
//  Description: Returns the default variable specified for this
//               variable.  If the variable has not yet been defined,
//               this will return NULL.
////////////////////////////////////////////////////////////////////
78
inline ConfigDeclaration const *ConfigVariable::get_default_value(void) const;

1483 16 get_string_value 0 4 2683 32 ConfigVariable::get_string_value 0 1 129 315
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariable::get_string_value
//       Access: Published
//  Description: Returns the toplevel value of the variable, formatted
//               as a string.
////////////////////////////////////////////////////////////////////
66
inline string const &ConfigVariable::get_string_value(void) const;

1484 16 set_string_value 0 4 2683 32 ConfigVariable::set_string_value 0 1 130 443
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariable::set_string_value
//       Access: Published
//  Description: Changes the value assigned to this variable.  This
//               creates a local value that shadows any values defined
//               in the .prc files, until clear_local_value() is
//               called.
////////////////////////////////////////////////////////////////////
66
inline void ConfigVariable::set_string_value(string const &value);

1485 11 clear_value 0 4 2683 27 ConfigVariable::clear_value 0 1 131 376
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariable::clear_value
//       Access: Published
//  Description: Removes the value assigned to this variable, and lets
//               its original value (as read from the prc files) show
//               through.
////////////////////////////////////////////////////////////////////
46
inline void ConfigVariable::clear_value(void);

1486 13 get_num_words 0 4 2683 29 ConfigVariable::get_num_words 0 1 132 402
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariable::get_num_words
//       Access: Published
//  Description: Returns the number of words in the variable's
//               value.  A word is defined as a sequence of
//               non-whitespace characters delimited by whitespace.
////////////////////////////////////////////////////////////////////
53
inline int ConfigVariable::get_num_words(void) const;

1487 15 has_string_word 0 4 2683 31 ConfigVariable::has_string_word 0 1 133 446
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariable::has_string_word
//       Access: Published
//  Description: Returns true if the variable's value has a valid
//               string value for the nth word.  This is really the
//               same thing as asking if there are at least n words in
//               the value.
////////////////////////////////////////////////////////////////////
57
inline bool ConfigVariable::has_string_word(int n) const;

1488 13 has_bool_word 0 4 2683 29 ConfigVariable::has_bool_word 0 1 134 326
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariable::has_bool_word
//       Access: Published
//  Description: Returns true if the variable's value has a valid
//               boolean value for the nth word.
////////////////////////////////////////////////////////////////////
55
inline bool ConfigVariable::has_bool_word(int n) const;

1489 12 has_int_word 0 4 2683 28 ConfigVariable::has_int_word 0 1 135 325
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariable::has_int_word
//       Access: Published
//  Description: Returns true if the variable's value has a valid
//               integer value for the nth word.
////////////////////////////////////////////////////////////////////
54
inline bool ConfigVariable::has_int_word(int n) const;

1490 14 has_int64_word 0 4 2683 30 ConfigVariable::has_int64_word 0 1 136 334
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariable::has_int64_word
//       Access: Published
//  Description: Returns true if the variable's value has a valid
//               64-bit integer value for the nth word.
////////////////////////////////////////////////////////////////////
56
inline bool ConfigVariable::has_int64_word(int n) const;

1491 15 has_double_word 0 4 2683 31 ConfigVariable::has_double_word 0 1 137 328
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariable::has_double_word
//       Access: Published
//  Description: Returns true if the variable's value has a valid
//               integer value for the nth word.
////////////////////////////////////////////////////////////////////
57
inline bool ConfigVariable::has_double_word(int n) const;

1492 15 get_string_word 0 4 2683 31 ConfigVariable::get_string_word 0 1 138 401
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariable::get_string_word
//       Access: Published
//  Description: Returns the string value of the nth word of the
//               variable's value, or empty string if there is no
//               nth value.  See also has_string_word().
////////////////////////////////////////////////////////////////////
59
inline string ConfigVariable::get_string_word(int n) const;

1493 13 get_bool_word 0 4 2683 29 ConfigVariable::get_bool_word 0 1 139 391
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariable::get_bool_word
//       Access: Published
//  Description: Returns the boolean value of the nth word of the
//               variable's value, or false if there is no nth
//               value.  See also has_bool_word().
////////////////////////////////////////////////////////////////////
55
inline bool ConfigVariable::get_bool_word(int n) const;

1494 12 get_int_word 0 4 2683 28 ConfigVariable::get_int_word 0 1 140 384
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariable::get_int_word
//       Access: Published
//  Description: Returns the integer value of the nth word of the
//               variable's value, or 0 if there is no nth value.
//               See also has_int_word().
////////////////////////////////////////////////////////////////////
53
inline int ConfigVariable::get_int_word(int n) const;

1495 14 get_int64_word 0 4 2683 30 ConfigVariable::get_int64_word 0 1 141 384
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariable::get_int64_word
//       Access: Published
//  Description: Returns the int64 value of the nth word of the
//               variable's value, or 0 if there is no nth value.
//               See also has_int_word().
////////////////////////////////////////////////////////////////////
60
inline PN_int64 ConfigVariable::get_int64_word(int n) const;

1496 15 get_double_word 0 4 2683 31 ConfigVariable::get_double_word 0 1 142 390
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariable::get_double_word
//       Access: Published
//  Description: Returns the integer value of the nth word of the
//               variable's value, or 0 if there is no nth value.
//               See also has_double_word().
////////////////////////////////////////////////////////////////////
59
inline double ConfigVariable::get_double_word(int n) const;

1497 15 set_string_word 0 4 2683 31 ConfigVariable::set_string_word 0 1 143 326
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariable::set_string_word
//       Access: Published
//  Description: Changes the nth word to the indicated value without
//               affecting the other words.
////////////////////////////////////////////////////////////////////
72
inline void ConfigVariable::set_string_word(int n, string const &value);

1498 13 set_bool_word 0 4 2683 29 ConfigVariable::set_bool_word 0 1 144 324
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariable::set_bool_word
//       Access: Published
//  Description: Changes the nth word to the indicated value without
//               affecting the other words.
////////////////////////////////////////////////////////////////////
61
inline void ConfigVariable::set_bool_word(int n, bool value);

1499 12 set_int_word 0 4 2683 28 ConfigVariable::set_int_word 0 1 145 323
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariable::set_int_word
//       Access: Published
//  Description: Changes the nth word to the indicated value without
//               affecting the other words.
////////////////////////////////////////////////////////////////////
59
inline void ConfigVariable::set_int_word(int n, int value);

1500 14 set_int64_word 0 4 2683 30 ConfigVariable::set_int64_word 0 1 146 325
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariable::set_int64_word
//       Access: Published
//  Description: Changes the nth word to the indicated value without
//               affecting the other words.
////////////////////////////////////////////////////////////////////
66
inline void ConfigVariable::set_int64_word(int n, PN_int64 value);

1501 15 set_double_word 0 4 2683 31 ConfigVariable::set_double_word 0 1 147 326
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariable::set_double_word
//       Access: Published
//  Description: Changes the nth word to the indicated value without
//               affecting the other words.
////////////////////////////////////////////////////////////////////
65
inline void ConfigVariable::set_double_word(int n, double value);

1502 18 ConfigVariableBool 0 4 2685 38 ConfigVariableBool::ConfigVariableBool 0 3 160 161 162 697
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableBool::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableBool::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableBool::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
355
inline ConfigVariableBool::ConfigVariableBool(string const &name);
inline ConfigVariableBool::ConfigVariableBool(string const &name, bool default_value, string const &description = string(), int flags = 0);
inline ConfigVariableBool::ConfigVariableBool(string const &name, string const &default_value, string const &description = string(), int flags = 0);

1503 10 operator = 0 4 2685 30 ConfigVariableBool::operator = 0 1 163 0
55
inline void ConfigVariableBool::operator =(bool value);

1504 22 operator typecast bool 0 132 2685 42 ConfigVariableBool::operator typecast bool 0 1 171 0
67
inline bool ConfigVariableBool::operator typecast bool(void) const;

1505 4 size 0 4 2685 24 ConfigVariableBool::size 0 1 164 277
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableBool::size()
//       Access: Published
//  Description: Returns the number of unique words in the variable.
////////////////////////////////////////////////////////////////////
48
inline int ConfigVariableBool::size(void) const;

1506 11 operator [] 0 4 2685 31 ConfigVariableBool::operator [] 0 1 165 0
57
inline bool ConfigVariableBool::operator [](int n) const;

1507 9 set_value 0 4 2685 29 ConfigVariableBool::set_value 0 1 166 266
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableBool::set_value
//       Access: Published
//  Description: Reassigns the variable's local value.
////////////////////////////////////////////////////////////////////
54
inline void ConfigVariableBool::set_value(bool value);

1508 9 get_value 0 4 2685 29 ConfigVariableBool::get_value 0 1 167 258
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableBool::get_value
//       Access: Published
//  Description: Returns the variable's value.
////////////////////////////////////////////////////////////////////
54
inline bool ConfigVariableBool::get_value(void) const;

1509 17 get_default_value 0 4 2685 37 ConfigVariableBool::get_default_value 0 1 168 274
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableBool::get_default_value
//       Access: Published
//  Description: Returns the variable's default value.
////////////////////////////////////////////////////////////////////
62
inline bool ConfigVariableBool::get_default_value(void) const;

1510 8 get_word 0 4 2685 28 ConfigVariableBool::get_word 0 1 169 261
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableBool::get_word
//       Access: Published
//  Description: Returns the variable's nth value.
////////////////////////////////////////////////////////////////////
54
inline bool ConfigVariableBool::get_word(int n) const;

1511 8 set_word 0 4 2685 28 ConfigVariableBool::set_word 0 1 170 338
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableBool::set_word
//       Access: Published
//  Description: Reassigns the variable's nth value.  This makes a
//               local copy of the variable's overall value.
////////////////////////////////////////////////////////////////////
60
inline void ConfigVariableBool::set_word(int n, bool value);

1512 19 ~ConfigVariableBool 0 4 2685 39 ConfigVariableBool::~ConfigVariableBool 0 0 0
46
ConfigVariableBool::~ConfigVariableBool(void);

1513 8 get_name 0 4 2686 28 ConfigVariableCore::get_name 0 1 172 258
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableCore::get_name
//       Access: Public
//  Description: Returns the name of the variable.
////////////////////////////////////////////////////////////////////
62
inline string const &ConfigVariableCore::get_name(void) const;

1514 7 is_used 0 4 2686 27 ConfigVariableCore::is_used 0 1 173 345
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableCore::is_used
//       Access: Public
//  Description: Returns true if the variable has been referenced by a
//               ConfigVariable somewhere in code, false otherwise.
////////////////////////////////////////////////////////////////////
52
inline bool ConfigVariableCore::is_used(void) const;

1515 14 get_value_type 0 4 2686 34 ConfigVariableCore::get_value_type 0 1 174 376
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableCore::get_value_type
//       Access: Public
//  Description: Returns the stated type of this variable.  If the
//               variable has not yet been defined, this will be
//               VT_undefined.
////////////////////////////////////////////////////////////////////
77
inline ConfigFlags::ValueType ConfigVariableCore::get_value_type(void) const;

1516 15 get_description 0 4 2686 35 ConfigVariableCore::get_description 0 1 175 320
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableCore::get_description
//       Access: Public
//  Description: Returns the brief description of this variable, if
//               it has been defined.
////////////////////////////////////////////////////////////////////
69
inline string const &ConfigVariableCore::get_description(void) const;

1517 9 get_flags 0 4 2686 29 ConfigVariableCore::get_flags 0 1 176 522
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableCore::get_flags
//       Access: Public
//  Description: Returns the flags value as set by set_flags().  This
//               includes the trust level and some other settings.
//               See the individual methods is_closed(),
//               get_trust_level(), etc. to pull out the semantic
//               meaning of these flags individually.
////////////////////////////////////////////////////////////////////
53
inline int ConfigVariableCore::get_flags(void) const;

1518 9 is_closed 0 4 2686 29 ConfigVariableCore::is_closed 0 1 177 749
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableCore::is_closed
//       Access: Public
//  Description: Returns true if the variable is not trusted by any
//               prc file (and hence cannot be modified from its
//               compiled-in default value), or false for the normal
//               case, in which the variable can be modified by any
//               prc file at or above its trust level (see
//               get_trust_level()).
//
//               This value only has effect in a release build
//               (specifically, when PRC_RESPECT_TRUST_LEVEL is
//               defined true in Config.pp).
////////////////////////////////////////////////////////////////////
54
inline bool ConfigVariableCore::is_closed(void) const;

1519 15 get_trust_level 0 4 2686 35 ConfigVariableCore::get_trust_level 0 1 178 835
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableCore::get_trust_level
//       Access: Public
//  Description: Returns the minimum trust_level a prc file must
//               demonstrate in order to redefine the value for this
//               variable.  Arguably, this should be called the
//               "mistrust level", since the larger the value, the
//               more suspicious we are of prc files.  This value is
//               not used if is_closed() returns true, which indicates
//               no file may be trusted.
//
//               This value only has effect in a release build
//               (specifically, when PRC_RESPECT_TRUST_LEVEL is
//               defined true in Config.pp).
////////////////////////////////////////////////////////////////////
59
inline int ConfigVariableCore::get_trust_level(void) const;

1520 10 is_dynamic 0 4 2686 30 ConfigVariableCore::is_dynamic 0 1 179 510
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableCore::is_dynamic
//       Access: Public
//  Description: Returns true if the variable was indicated as
//               "dynamic" by its constructor, indicating that its
//               name was dynamically generated, possibly from a large
//               pool, and it should not be listed along with the
//               other variables.
////////////////////////////////////////////////////////////////////
55
inline bool ConfigVariableCore::is_dynamic(void) const;

1521 17 get_default_value 0 4 2686 37 ConfigVariableCore::get_default_value 0 1 180 391
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableCore::get_default_value
//       Access: Public
//  Description: Returns the default variable specified for this
//               variable.  If the variable has not yet been defined,
//               this will return NULL.
////////////////////////////////////////////////////////////////////
82
inline ConfigDeclaration const *ConfigVariableCore::get_default_value(void) const;

1522 14 set_value_type 0 4 2686 34 ConfigVariableCore::set_value_type 0 1 181 0
75
void ConfigVariableCore::set_value_type(ConfigFlags::ValueType value_type);

1523 9 set_flags 0 4 2686 29 ConfigVariableCore::set_flags 0 1 182 0
46
void ConfigVariableCore::set_flags(int flags);

1524 15 set_description 0 4 2686 35 ConfigVariableCore::set_description 0 1 183 0
68
void ConfigVariableCore::set_description(string const &description);

1525 17 set_default_value 0 4 2686 37 ConfigVariableCore::set_default_value 0 1 184 0
72
void ConfigVariableCore::set_default_value(string const &default_value);

1526 8 set_used 0 4 2686 28 ConfigVariableCore::set_used 0 1 185 306
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableCore::set_used
//       Access: Public
//  Description: Marks that the variable has been "declared" by a
//               ConfigVariable.
////////////////////////////////////////////////////////////////////
47
inline void ConfigVariableCore::set_used(void);

1527 16 make_local_value 0 4 2686 36 ConfigVariableCore::make_local_value 0 1 186 0
62
ConfigDeclaration *ConfigVariableCore::make_local_value(void);

1528 17 clear_local_value 0 4 2686 37 ConfigVariableCore::clear_local_value 0 1 187 0
49
bool ConfigVariableCore::clear_local_value(void);

1529 15 has_local_value 0 4 2686 35 ConfigVariableCore::has_local_value 0 1 188 400
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableCore::has_local_value
//       Access: Public
//  Description: Returns true if this variable's value has been
//               shadowed by a local assignment (as created via
//               make_local_value()), or false otherwise.
////////////////////////////////////////////////////////////////////
60
inline bool ConfigVariableCore::has_local_value(void) const;

1530 9 has_value 0 4 2686 29 ConfigVariableCore::has_value 0 1 189 0
47
bool ConfigVariableCore::has_value(void) const;

1531 20 get_num_declarations 0 4 2686 40 ConfigVariableCore::get_num_declarations 0 1 190 0
57
int ConfigVariableCore::get_num_declarations(void) const;

1532 15 get_declaration 0 4 2686 35 ConfigVariableCore::get_declaration 0 1 191 0
74
ConfigDeclaration const *ConfigVariableCore::get_declaration(int n) const;

1533 18 get_num_references 0 4 2686 38 ConfigVariableCore::get_num_references 0 1 192 412
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableCore::get_num_references
//       Access: Public
//  Description: Returns the number of prc files that reference this
//               variable.  This is not exactly the same as the number
//               of declarations; see get_reference().
////////////////////////////////////////////////////////////////////
62
inline int ConfigVariableCore::get_num_references(void) const;

1534 13 get_reference 0 4 2686 33 ConfigVariableCore::get_reference 0 1 193 645
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableCore::get_reference
//       Access: Public
//  Description: Returns the nth declaration in a prc file that
//               references this variable.  This is similar, but not
//               identical to, get_declaration().  The difference is
//               that this will list *only* true references in a prc
//               file, and will not list default values or
//               locally-assigned values; it also will list even the
//               untrusted files.
////////////////////////////////////////////////////////////////////
79
inline ConfigDeclaration const *ConfigVariableCore::get_reference(int n) const;

1535 26 get_num_trusted_references 0 4 2686 46 ConfigVariableCore::get_num_trusted_references 0 1 194 378
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableCore::get_num_trusted_references
//       Access: Public
//  Description: Returns the number of trusted prc files that
//               reference this variable.  See also
//               get_num_references().
////////////////////////////////////////////////////////////////////
70
inline int ConfigVariableCore::get_num_trusted_references(void) const;

1536 21 get_trusted_reference 0 4 2686 41 ConfigVariableCore::get_trusted_reference 0 1 195 776
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableCore::get_trusted_reference
//       Access: Public
//  Description: Returns the nth declaration in a trusted prc file
//               that references this variable.  This is similar, but
//               not identical to, get_declaration().  The difference
//               is that this will list *only* true references in a
//               prc file, and will not list default values or
//               locally-assigned values.
//
//               This is also similar to get_reference(), except that
//               it only lists the trusted declarations, omitting the
//               untrusted ones.
////////////////////////////////////////////////////////////////////
87
inline ConfigDeclaration const *ConfigVariableCore::get_trusted_reference(int n) const;

1537 25 get_num_unique_references 0 4 2686 45 ConfigVariableCore::get_num_unique_references 0 1 196 352
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableCore::get_num_unique_references
//       Access: Public
//  Description: Returns the number of trusted, unique (by string
//               value) values there exist for this variable.
////////////////////////////////////////////////////////////////////
69
inline int ConfigVariableCore::get_num_unique_references(void) const;

1538 20 get_unique_reference 0 4 2686 40 ConfigVariableCore::get_unique_reference 0 1 197 431
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableCore::get_unique_reference
//       Access: Public
//  Description: Returns the nth trusted, unique value for this
//               variable.  This is similar to
//               get_trusted_reference(), except that duplicate values
//               are removed.
////////////////////////////////////////////////////////////////////
86
inline ConfigDeclaration const *ConfigVariableCore::get_unique_reference(int n) const;

1539 6 output 0 4 2686 26 ConfigVariableCore::output 0 1 198 0
52
void ConfigVariableCore::output(ostream &out) const;

1540 5 write 0 4 2686 25 ConfigVariableCore::write 0 1 199 0
51
void ConfigVariableCore::write(ostream &out) const;

1541 20 ConfigVariableDouble 0 4 2687 42 ConfigVariableDouble::ConfigVariableDouble 0 3 200 201 202 703
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableDouble::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableDouble::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableDouble::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
369
inline ConfigVariableDouble::ConfigVariableDouble(string const &name);
inline ConfigVariableDouble::ConfigVariableDouble(string const &name, double default_value, string const &description = string(), int flags = 0);
inline ConfigVariableDouble::ConfigVariableDouble(string const &name, string const &default_value, string const &description = string(), int flags = 0);

1542 10 operator = 0 4 2687 32 ConfigVariableDouble::operator = 0 1 203 0
59
inline void ConfigVariableDouble::operator =(double value);

1543 24 operator typecast double 0 132 2687 46 ConfigVariableDouble::operator typecast double 0 1 211 0
73
inline double ConfigVariableDouble::operator typecast double(void) const;

1544 4 size 0 4 2687 26 ConfigVariableDouble::size 0 1 204 279
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableDouble::size()
//       Access: Published
//  Description: Returns the number of unique words in the variable.
////////////////////////////////////////////////////////////////////
50
inline int ConfigVariableDouble::size(void) const;

1545 11 operator [] 0 4 2687 33 ConfigVariableDouble::operator [] 0 1 205 0
61
inline double ConfigVariableDouble::operator [](int n) const;

1546 9 set_value 0 4 2687 31 ConfigVariableDouble::set_value 0 1 206 268
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableDouble::set_value
//       Access: Published
//  Description: Reassigns the variable's local value.
////////////////////////////////////////////////////////////////////
58
inline void ConfigVariableDouble::set_value(double value);

1547 9 get_value 0 4 2687 31 ConfigVariableDouble::get_value 0 1 207 260
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableDouble::get_value
//       Access: Published
//  Description: Returns the variable's value.
////////////////////////////////////////////////////////////////////
58
inline double ConfigVariableDouble::get_value(void) const;

1548 17 get_default_value 0 4 2687 39 ConfigVariableDouble::get_default_value 0 1 208 276
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableDouble::get_default_value
//       Access: Published
//  Description: Returns the variable's default value.
////////////////////////////////////////////////////////////////////
66
inline double ConfigVariableDouble::get_default_value(void) const;

1549 8 get_word 0 4 2687 30 ConfigVariableDouble::get_word 0 1 209 263
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableDouble::get_word
//       Access: Published
//  Description: Returns the variable's nth value.
////////////////////////////////////////////////////////////////////
58
inline double ConfigVariableDouble::get_word(int n) const;

1550 8 set_word 0 4 2687 30 ConfigVariableDouble::set_word 0 1 210 340
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableDouble::set_word
//       Access: Published
//  Description: Reassigns the variable's nth value.  This makes a
//               local copy of the variable's overall value.
////////////////////////////////////////////////////////////////////
64
inline void ConfigVariableDouble::set_word(int n, double value);

1551 21 ~ConfigVariableDouble 0 4 2687 43 ConfigVariableDouble::~ConfigVariableDouble 0 0 0
50
ConfigVariableDouble::~ConfigVariableDouble(void);

1552 22 ConfigVariableFilename 0 4 2688 46 ConfigVariableFilename::ConfigVariableFilename 0 2 212 213 472
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableFilename::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableFilename::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
233
inline ConfigVariableFilename::ConfigVariableFilename(string const &name);
inline ConfigVariableFilename::ConfigVariableFilename(string const &name, Filename const &default_value, string const &description = string(), int flags = 0);

1553 10 operator = 0 4 2688 34 ConfigVariableFilename::operator = 0 1 214 0
70
inline void ConfigVariableFilename::operator =(Filename const &value);

1554 17 operator typecast 0 132 2688 41 ConfigVariableFilename::operator typecast 0 1 233 0
77
inline Filename const &ConfigVariableFilename::operator typecast(void) const;

1555 5 c_str 0 4 2688 29 ConfigVariableFilename::c_str 0 1 215 306
// These methods help the ConfigVariableFilename act like a Filename
// object.

////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableFilename::c_str
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
61
inline char const *ConfigVariableFilename::c_str(void) const;

1556 5 empty 0 4 2688 29 ConfigVariableFilename::empty 0 1 216 225
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableFilename::empty
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
54
inline bool ConfigVariableFilename::empty(void) const;

1557 6 length 0 4 2688 30 ConfigVariableFilename::length 0 1 217 226
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableFilename::length
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
57
inline size_t ConfigVariableFilename::length(void) const;

1558 11 operator [] 0 4 2688 35 ConfigVariableFilename::operator [] 0 1 218 0
61
inline char ConfigVariableFilename::operator [](int n) const;

1559 12 get_fullpath 0 4 2688 36 ConfigVariableFilename::get_fullpath 0 1 219 450
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableFilename::get_fullpath
//       Access: Public
//  Description: Returns the entire filename: directory, basename,
//               extension.  This is the same thing returned by the
//               string typecast operator, so this function is a
//               little redundant.
////////////////////////////////////////////////////////////////////
63
inline string ConfigVariableFilename::get_fullpath(void) const;

1560 11 get_dirname 0 4 2688 35 ConfigVariableFilename::get_dirname 0 1 220 391
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableFilename::get_dirname
//       Access: Public
//  Description: Returns the directory part of the filename.  This is
//               everything in the filename up to, but not including
//               the rightmost slash.
////////////////////////////////////////////////////////////////////
62
inline string ConfigVariableFilename::get_dirname(void) const;

1561 12 get_basename 0 4 2688 36 ConfigVariableFilename::get_basename 0 1 221 398
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableFilename::get_basename
//       Access: Public
//  Description: Returns the basename part of the filename.  This is
//               everything in the filename after the rightmost slash,
//               including any extensions.
////////////////////////////////////////////////////////////////////
63
inline string ConfigVariableFilename::get_basename(void) const;

1562 25 get_fullpath_wo_extension 0 4 2688 49 ConfigVariableFilename::get_fullpath_wo_extension 0 1 222 345
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableFilename::get_fullpath_wo_extension
//       Access: Public
//  Description: Returns the full filename--directory and basename
//               parts--except for the extension.
////////////////////////////////////////////////////////////////////
76
inline string ConfigVariableFilename::get_fullpath_wo_extension(void) const;

1563 25 get_basename_wo_extension 0 4 2688 49 ConfigVariableFilename::get_basename_wo_extension 0 1 223 333
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableFilename::get_basename_wo_extension
//       Access: Public
//  Description: Returns the basename part of the filename, without
//               the file extension.
////////////////////////////////////////////////////////////////////
76
inline string ConfigVariableFilename::get_basename_wo_extension(void) const;

1564 13 get_extension 0 4 2688 37 ConfigVariableFilename::get_extension 0 1 224 394
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableFilename::get_extension
//       Access: Public
//  Description: Returns the file extension.  This is everything after
//               the rightmost dot, if there is one, or the empty
//               string if there is not.
////////////////////////////////////////////////////////////////////
64
inline string ConfigVariableFilename::get_extension(void) const;

1565 11 operator == 0 4 2688 35 ConfigVariableFilename::operator == 0 1 225 34
// Comparison operators are handy.
77
inline bool ConfigVariableFilename::operator ==(Filename const &other) const;

1566 11 operator != 0 4 2688 35 ConfigVariableFilename::operator != 0 1 226 0
77
inline bool ConfigVariableFilename::operator !=(Filename const &other) const;

1567 10 operator < 0 4 2688 34 ConfigVariableFilename::operator < 0 1 227 0
76
inline bool ConfigVariableFilename::operator <(Filename const &other) const;

1568 9 set_value 0 4 2688 33 ConfigVariableFilename::set_value 0 1 228 270
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableFilename::set_value
//       Access: Published
//  Description: Reassigns the variable's local value.
////////////////////////////////////////////////////////////////////
69
inline void ConfigVariableFilename::set_value(Filename const &value);

1569 9 get_value 0 4 2688 33 ConfigVariableFilename::get_value 0 1 229 262
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableFilename::get_value
//       Access: Published
//  Description: Returns the variable's value.
////////////////////////////////////////////////////////////////////
62
inline Filename ConfigVariableFilename::get_value(void) const;

1570 17 get_default_value 0 4 2688 41 ConfigVariableFilename::get_default_value 0 1 230 278
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableFilename::get_default_value
//       Access: Published
//  Description: Returns the variable's default value.
////////////////////////////////////////////////////////////////////
70
inline Filename ConfigVariableFilename::get_default_value(void) const;

1571 8 get_word 0 4 2688 32 ConfigVariableFilename::get_word 0 1 231 265
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableFilename::get_word
//       Access: Published
//  Description: Returns the variable's nth value.
////////////////////////////////////////////////////////////////////
62
inline Filename ConfigVariableFilename::get_word(int n) const;

1572 8 set_word 0 4 2688 32 ConfigVariableFilename::set_word 0 1 232 342
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableFilename::set_word
//       Access: Published
//  Description: Reassigns the variable's nth value.  This makes a
//               local copy of the variable's overall value.
////////////////////////////////////////////////////////////////////
75
inline void ConfigVariableFilename::set_word(int n, Filename const &value);

1573 23 ~ConfigVariableFilename 0 4 2688 47 ConfigVariableFilename::~ConfigVariableFilename 0 0 0
54
ConfigVariableFilename::~ConfigVariableFilename(void);

1574 17 ConfigVariableInt 0 4 2689 36 ConfigVariableInt::ConfigVariableInt 0 3 234 235 236 694
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableInt::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableInt::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableInt::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
348
inline ConfigVariableInt::ConfigVariableInt(string const &name);
inline ConfigVariableInt::ConfigVariableInt(string const &name, int default_value, string const &description = string(), int flags = 0);
inline ConfigVariableInt::ConfigVariableInt(string const &name, string const &default_value, string const &description = string(), int flags = 0);

1575 10 operator = 0 4 2689 29 ConfigVariableInt::operator = 0 1 237 0
53
inline void ConfigVariableInt::operator =(int value);

1576 21 operator typecast int 0 132 2689 40 ConfigVariableInt::operator typecast int 0 1 245 0
64
inline int ConfigVariableInt::operator typecast int(void) const;

1577 4 size 0 4 2689 23 ConfigVariableInt::size 0 1 238 276
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableInt::size()
//       Access: Published
//  Description: Returns the number of unique words in the variable.
////////////////////////////////////////////////////////////////////
47
inline int ConfigVariableInt::size(void) const;

1578 11 operator [] 0 4 2689 30 ConfigVariableInt::operator [] 0 1 239 0
55
inline int ConfigVariableInt::operator [](int n) const;

1579 9 set_value 0 4 2689 28 ConfigVariableInt::set_value 0 1 240 265
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableInt::set_value
//       Access: Published
//  Description: Reassigns the variable's local value.
////////////////////////////////////////////////////////////////////
52
inline void ConfigVariableInt::set_value(int value);

1580 9 get_value 0 4 2689 28 ConfigVariableInt::get_value 0 1 241 257
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableInt::get_value
//       Access: Published
//  Description: Returns the variable's value.
////////////////////////////////////////////////////////////////////
52
inline int ConfigVariableInt::get_value(void) const;

1581 17 get_default_value 0 4 2689 36 ConfigVariableInt::get_default_value 0 1 242 273
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableInt::get_default_value
//       Access: Published
//  Description: Returns the variable's default value.
////////////////////////////////////////////////////////////////////
60
inline int ConfigVariableInt::get_default_value(void) const;

1582 8 get_word 0 4 2689 27 ConfigVariableInt::get_word 0 1 243 260
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableInt::get_word
//       Access: Published
//  Description: Returns the variable's nth value.
////////////////////////////////////////////////////////////////////
52
inline int ConfigVariableInt::get_word(int n) const;

1583 8 set_word 0 4 2689 27 ConfigVariableInt::set_word 0 1 244 337
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableInt::set_word
//       Access: Published
//  Description: Reassigns the variable's nth value.  This makes a
//               local copy of the variable's overall value.
////////////////////////////////////////////////////////////////////
58
inline void ConfigVariableInt::set_word(int n, int value);

1584 18 ~ConfigVariableInt 0 4 2689 37 ConfigVariableInt::~ConfigVariableInt 0 0 0
44
ConfigVariableInt::~ConfigVariableInt(void);

1585 19 ConfigVariableInt64 0 4 2690 40 ConfigVariableInt64::ConfigVariableInt64 0 3 246 247 248 700
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableInt64::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableInt64::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableInt64::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
375
inline ConfigVariableInt64::ConfigVariableInt64(string const &name);
inline ConfigVariableInt64::ConfigVariableInt64(string const &name, PN_int64 default_value, string const &description = string(), PN_int64 flags = 0);
inline ConfigVariableInt64::ConfigVariableInt64(string const &name, string const &default_value, string const &description = string(), PN_int64 flags = 0);

1586 10 operator = 0 4 2690 31 ConfigVariableInt64::operator = 0 1 249 0
60
inline void ConfigVariableInt64::operator =(PN_int64 value);

1587 26 operator typecast PN_int64 0 132 2690 47 ConfigVariableInt64::operator typecast PN_int64 0 1 257 0
76
inline PN_int64 ConfigVariableInt64::operator typecast PN_int64(void) const;

1588 4 size 0 4 2690 25 ConfigVariableInt64::size 0 1 250 278
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableInt64::size()
//       Access: Published
//  Description: Returns the number of unique words in the variable.
////////////////////////////////////////////////////////////////////
54
inline PN_int64 ConfigVariableInt64::size(void) const;

1589 11 operator [] 0 4 2690 32 ConfigVariableInt64::operator [] 0 1 251 0
62
inline PN_int64 ConfigVariableInt64::operator [](int n) const;

1590 9 set_value 0 4 2690 30 ConfigVariableInt64::set_value 0 1 252 267
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableInt64::set_value
//       Access: Published
//  Description: Reassigns the variable's local value.
////////////////////////////////////////////////////////////////////
59
inline void ConfigVariableInt64::set_value(PN_int64 value);

1591 9 get_value 0 4 2690 30 ConfigVariableInt64::get_value 0 1 253 259
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableInt64::get_value
//       Access: Published
//  Description: Returns the variable's value.
////////////////////////////////////////////////////////////////////
59
inline PN_int64 ConfigVariableInt64::get_value(void) const;

1592 17 get_default_value 0 4 2690 38 ConfigVariableInt64::get_default_value 0 1 254 275
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableInt64::get_default_value
//       Access: Published
//  Description: Returns the variable's default value.
////////////////////////////////////////////////////////////////////
67
inline PN_int64 ConfigVariableInt64::get_default_value(void) const;

1593 8 get_word 0 4 2690 29 ConfigVariableInt64::get_word 0 1 255 262
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableInt64::get_word
//       Access: Published
//  Description: Returns the variable's nth value.
////////////////////////////////////////////////////////////////////
59
inline PN_int64 ConfigVariableInt64::get_word(int n) const;

1594 8 set_word 0 4 2690 29 ConfigVariableInt64::set_word 0 1 256 339
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableInt64::set_word
//       Access: Published
//  Description: Reassigns the variable's nth value.  This makes a
//               local copy of the variable's overall value.
////////////////////////////////////////////////////////////////////
65
inline void ConfigVariableInt64::set_word(int n, PN_int64 value);

1595 20 ~ConfigVariableInt64 0 4 2690 41 ConfigVariableInt64::~ConfigVariableInt64 0 0 0
48
ConfigVariableInt64::~ConfigVariableInt64(void);

1596 18 ConfigVariableList 0 4 2691 38 ConfigVariableList::ConfigVariableList 0 1 258 231
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableList::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
119
inline ConfigVariableList::ConfigVariableList(string const &name, string const &description = string(), int flags = 0);

1597 19 ~ConfigVariableList 0 4 2691 39 ConfigVariableList::~ConfigVariableList 0 0 230
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableList::Destructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
53
inline ConfigVariableList::~ConfigVariableList(void);

1598 14 get_num_values 0 4 2691 34 ConfigVariableList::get_num_values 0 1 259 279
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableList::get_num_values
//       Access: Published
//  Description: Returns the number of values in the variable.
////////////////////////////////////////////////////////////////////
58
inline int ConfigVariableList::get_num_values(void) const;

1599 16 get_string_value 0 4 2691 36 ConfigVariableList::get_string_value 0 1 260 274
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableList::get_string_value
//       Access: Published
//  Description: Returns the nth value of the variable.
////////////////////////////////////////////////////////////////////
64
inline string ConfigVariableList::get_string_value(int n) const;

1600 21 get_num_unique_values 0 4 2691 41 ConfigVariableList::get_num_unique_values 0 1 261 293
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableList::get_num_unique_values
//       Access: Published
//  Description: Returns the number of unique values in the variable.
////////////////////////////////////////////////////////////////////
65
inline int ConfigVariableList::get_num_unique_values(void) const;

1601 16 get_unique_value 0 4 2691 36 ConfigVariableList::get_unique_value 0 1 262 281
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableList::get_unique_value
//       Access: Published
//  Description: Returns the nth unique value of the variable.
////////////////////////////////////////////////////////////////////
64
inline string ConfigVariableList::get_unique_value(int n) const;

1602 4 size 0 4 2691 24 ConfigVariableList::size 0 1 263 278
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableList::size()
//       Access: Published
//  Description: Returns the number of unique values of the variable.
////////////////////////////////////////////////////////////////////
48
inline int ConfigVariableList::size(void) const;

1603 11 operator [] 0 4 2691 31 ConfigVariableList::operator [] 0 1 264 0
59
inline string ConfigVariableList::operator [](int n) const;

1604 6 output 0 4 2691 26 ConfigVariableList::output 0 1 265 0
52
void ConfigVariableList::output(ostream &out) const;

1605 5 write 0 4 2691 25 ConfigVariableList::write 0 1 266 0
51
void ConfigVariableList::write(ostream &out) const;

1606 13 make_variable 0 4 2692 36 ConfigVariableManager::make_variable 0 1 267 0
77
ConfigVariableCore *ConfigVariableManager::make_variable(string const &name);

1607 22 make_variable_template 0 4 2692 45 ConfigVariableManager::make_variable_template 0 1 268 0
200
ConfigVariableCore *ConfigVariableManager::make_variable_template(string const &pattern, ConfigFlags::ValueType type, string const &default_value, string const &description = string(), int flags = 0);

1608 17 get_num_variables 0 4 2692 40 ConfigVariableManager::get_num_variables 0 1 269 327
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableManager::get_num_variables
//       Access: Published
//  Description: Returns the current number of active ConfigVariableCores in
//               the world.
////////////////////////////////////////////////////////////////////
64
inline int ConfigVariableManager::get_num_variables(void) const;

1609 12 get_variable 0 4 2692 35 ConfigVariableManager::get_variable 0 1 270 290
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableManager::get_variable
//       Access: Published
//  Description: Returns the nth active ConfigVariableCore in the world.
////////////////////////////////////////////////////////////////////
76
inline ConfigVariableCore *ConfigVariableManager::get_variable(int n) const;

1610 17 get_variable_name 0 4 2692 40 ConfigVariableManager::get_variable_name 0 1 271 0
61
string ConfigVariableManager::get_variable_name(int n) const;

1611 16 is_variable_used 0 4 2692 39 ConfigVariableManager::is_variable_used 0 1 272 0
58
bool ConfigVariableManager::is_variable_used(int n) const;

1612 6 output 0 4 2692 29 ConfigVariableManager::output 0 1 273 0
55
void ConfigVariableManager::output(ostream &out) const;

1613 5 write 0 4 2692 28 ConfigVariableManager::write 0 1 274 0
54
void ConfigVariableManager::write(ostream &out) const;

1614 19 write_prc_variables 0 4 2692 42 ConfigVariableManager::write_prc_variables 0 1 275 0
68
void ConfigVariableManager::write_prc_variables(ostream &out) const;

1615 21 list_unused_variables 0 4 2692 44 ConfigVariableManager::list_unused_variables 0 1 276 0
62
void ConfigVariableManager::list_unused_variables(void) const;

1616 14 list_variables 0 4 2692 37 ConfigVariableManager::list_variables 0 1 277 0
55
void ConfigVariableManager::list_variables(void) const;

1617 22 list_dynamic_variables 0 4 2692 45 ConfigVariableManager::list_dynamic_variables 0 1 278 0
63
void ConfigVariableManager::list_dynamic_variables(void) const;

1618 14 get_global_ptr 0 4 2692 37 ConfigVariableManager::get_global_ptr 0 1 279 0
74
static ConfigVariableManager *ConfigVariableManager::get_global_ptr(void);

1619 24 ConfigVariableSearchPath 0 4 2693 50 ConfigVariableSearchPath::ConfigVariableSearchPath 0 3 280 281 282 715
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableSearchPath::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableSearchPath::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableSearchPath::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
436
inline ConfigVariableSearchPath::ConfigVariableSearchPath(string const &name, string const &description = string(), int flags = 0);
inline ConfigVariableSearchPath::ConfigVariableSearchPath(string const &name, DSearchPath const &default_value, string const &description, int flags = 0);
inline ConfigVariableSearchPath::ConfigVariableSearchPath(string const &name, string const &default_value, string const &description, int flags = 0);

1620 25 ~ConfigVariableSearchPath 0 4 2693 51 ConfigVariableSearchPath::~ConfigVariableSearchPath 0 0 236
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableSearchPath::Destructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
65
inline ConfigVariableSearchPath::~ConfigVariableSearchPath(void);

1621 17 operator typecast 0 132 2693 43 ConfigVariableSearchPath::operator typecast 0 1 300 0
82
inline DSearchPath const &ConfigVariableSearchPath::operator typecast(void) const;

1622 9 get_value 0 4 2693 35 ConfigVariableSearchPath::get_value 0 1 283 235
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableSearchPath::get_value
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
74
inline DSearchPath const &ConfigVariableSearchPath::get_value(void) const;

1623 17 get_default_value 0 4 2693 43 ConfigVariableSearchPath::get_default_value 0 1 284 243
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableSearchPath::get_default_value
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
82
inline DSearchPath const &ConfigVariableSearchPath::get_default_value(void) const;

1624 17 clear_local_value 0 4 2693 43 ConfigVariableSearchPath::clear_local_value 0 1 285 359
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableSearchPath::clear_local_value
//       Access: Published
//  Description: Removes all the directories locally added to the
//               search list, and restores it to its original form.
////////////////////////////////////////////////////////////////////
62
inline bool ConfigVariableSearchPath::clear_local_value(void);

1625 5 clear 0 4 2693 31 ConfigVariableSearchPath::clear 0 1 286 347
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableSearchPath::clear
//       Access: Published
//  Description: Removes all the directories locally added to the
//               search list, and restores it to its original form.
////////////////////////////////////////////////////////////////////
50
inline void ConfigVariableSearchPath::clear(void);

1626 16 append_directory 0 4 2693 42 ConfigVariableSearchPath::append_directory 0 1 287 293
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableSearchPath::append_directory
//       Access: Published
//  Description: Adds a new directory to the end of the search list.
////////////////////////////////////////////////////////////////////
82
inline void ConfigVariableSearchPath::append_directory(Filename const &directory);

1627 17 prepend_directory 0 4 2693 43 ConfigVariableSearchPath::prepend_directory 0 1 288 296
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableSearchPath::prepend_directory
//       Access: Published
//  Description: Adds a new directory to the front of the search list.
////////////////////////////////////////////////////////////////////
83
inline void ConfigVariableSearchPath::prepend_directory(Filename const &directory);

1628 11 append_path 0 4 2693 37 ConfigVariableSearchPath::append_path 0 2 289 290 678
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableSearchPath::append_path
//       Access: Published
//  Description: Adds all of the directories listed in the search path
//               to the end of the search list.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableSearchPath::append_path
//       Access: Published
//  Description: Adds all of the directories listed in the search path
//               to the end of the search list.
////////////////////////////////////////////////////////////////////
182
inline void ConfigVariableSearchPath::append_path(string const &path, string const &separator = string());
inline void ConfigVariableSearchPath::append_path(DSearchPath const &path);

1629 12 prepend_path 0 4 2693 38 ConfigVariableSearchPath::prepend_path 0 1 291 345
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableSearchPath::prepend_path
//       Access: Published
//  Description: Adds all of the directories listed in the search path
//               to the beginning of the search list.
////////////////////////////////////////////////////////////////////
76
inline void ConfigVariableSearchPath::prepend_path(DSearchPath const &path);

1630 8 is_empty 0 4 2693 34 ConfigVariableSearchPath::is_empty 0 1 292 309
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableSearchPath::is_empty
//       Access: Published
//  Description: Returns true if the search list is empty, false
//               otherwise.
////////////////////////////////////////////////////////////////////
59
inline bool ConfigVariableSearchPath::is_empty(void) const;

1631 19 get_num_directories 0 4 2693 45 ConfigVariableSearchPath::get_num_directories 0 1 293 298
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableSearchPath::get_num_directories
//       Access: Published
//  Description: Returns the number of directories on the search list.
////////////////////////////////////////////////////////////////////
69
inline int ConfigVariableSearchPath::get_num_directories(void) const;

1632 13 get_directory 0 4 2693 39 ConfigVariableSearchPath::get_directory 0 1 294 284
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableSearchPath::get_directory
//       Access: Published
//  Description: Returns the nth directory on the search list.
////////////////////////////////////////////////////////////////////
76
inline Filename const &ConfigVariableSearchPath::get_directory(int n) const;

1633 9 find_file 0 4 2693 35 ConfigVariableSearchPath::find_file 0 1 295 466
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableSearchPath::find_file
//       Access: Published
//  Description: Searches all the directories in the search list for
//               the indicated file, in order.  Returns the full
//               matching pathname of the first match if found, or the
//               empty string if not found.
////////////////////////////////////////////////////////////////////
84
inline Filename ConfigVariableSearchPath::find_file(Filename const &filename) const;

1634 14 find_all_files 0 4 2693 40 ConfigVariableSearchPath::find_all_files 0 2 296 297 1142
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableSearchPath::find_all_files
//       Access: Published
//  Description: Searches all the directories in the search list for
//               the indicated file, in order.  Fills up the results
//               list with *all* of the matching filenames found, if
//               any.  Returns the number of matches found.
//
//               It is the responsibility of the the caller to clear
//               the results list first; otherwise, the newly-found
//               files will be appended to the list.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableSearchPath::find_all_files
//       Access: Published
//  Description: This variant of find_all_files() returns the new
//               Results object, instead of filling on in on the
//               parameter list.  This is a little more convenient to
//               call from Python.
////////////////////////////////////////////////////////////////////
217
inline int ConfigVariableSearchPath::find_all_files(Filename const &filename, DSearchPath::Results &results) const;
inline DSearchPath::Results ConfigVariableSearchPath::find_all_files(Filename const &filename) const;

1635 6 output 0 4 2693 32 ConfigVariableSearchPath::output 0 1 298 232
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableSearchPath::output
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
65
inline void ConfigVariableSearchPath::output(ostream &out) const;

1636 5 write 0 4 2693 31 ConfigVariableSearchPath::write 0 1 299 231
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableSearchPath::write
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
64
inline void ConfigVariableSearchPath::write(ostream &out) const;

1637 20 ConfigVariableString 0 4 2694 42 ConfigVariableString::ConfigVariableString 0 2 301 302 468
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableString::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableString::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
223
inline ConfigVariableString::ConfigVariableString(string const &name);
inline ConfigVariableString::ConfigVariableString(string const &name, string const &default_value, string const &description = string(), int flags = 0);

1638 10 operator = 0 4 2694 32 ConfigVariableString::operator = 0 1 303 0
66
inline void ConfigVariableString::operator =(string const &value);

1639 17 operator typecast 0 132 2694 39 ConfigVariableString::operator typecast 0 1 316 0
73
inline string const &ConfigVariableString::operator typecast(void) const;

1640 5 c_str 0 4 2694 27 ConfigVariableString::c_str 0 1 304 304
// These methods help the ConfigVariableString act like a C++ string
// object.

////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableString::c_str
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
59
inline char const *ConfigVariableString::c_str(void) const;

1641 5 empty 0 4 2694 27 ConfigVariableString::empty 0 1 305 223
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableString::empty
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
52
inline bool ConfigVariableString::empty(void) const;

1642 6 length 0 4 2694 28 ConfigVariableString::length 0 1 306 224
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableString::length
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
55
inline size_t ConfigVariableString::length(void) const;

1643 11 operator [] 0 4 2694 33 ConfigVariableString::operator [] 0 1 307 0
59
inline char ConfigVariableString::operator [](int n) const;

1644 11 operator == 0 4 2694 33 ConfigVariableString::operator == 0 1 308 34
// Comparison operators are handy.
73
inline bool ConfigVariableString::operator ==(string const &other) const;

1645 11 operator != 0 4 2694 33 ConfigVariableString::operator != 0 1 309 0
73
inline bool ConfigVariableString::operator !=(string const &other) const;

1646 10 operator < 0 4 2694 32 ConfigVariableString::operator < 0 1 310 0
72
inline bool ConfigVariableString::operator <(string const &other) const;

1647 9 set_value 0 4 2694 31 ConfigVariableString::set_value 0 1 311 268
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableString::set_value
//       Access: Published
//  Description: Reassigns the variable's local value.
////////////////////////////////////////////////////////////////////
65
inline void ConfigVariableString::set_value(string const &value);

1648 9 get_value 0 4 2694 31 ConfigVariableString::get_value 0 1 312 260
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableString::get_value
//       Access: Published
//  Description: Returns the variable's value.
////////////////////////////////////////////////////////////////////
65
inline string const &ConfigVariableString::get_value(void) const;

1649 17 get_default_value 0 4 2694 39 ConfigVariableString::get_default_value 0 1 313 276
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableString::get_default_value
//       Access: Published
//  Description: Returns the variable's default value.
////////////////////////////////////////////////////////////////////
66
inline string ConfigVariableString::get_default_value(void) const;

1650 8 get_word 0 4 2694 30 ConfigVariableString::get_word 0 1 314 263
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableString::get_word
//       Access: Published
//  Description: Returns the variable's nth value.
////////////////////////////////////////////////////////////////////
58
inline string ConfigVariableString::get_word(int n) const;

1651 8 set_word 0 4 2694 30 ConfigVariableString::set_word 0 1 315 340
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableString::set_word
//       Access: Published
//  Description: Reassigns the variable's nth value.  This makes a
//               local copy of the variable's overall value.
////////////////////////////////////////////////////////////////////
71
inline void ConfigVariableString::set_word(int n, string const &value);

1652 21 ~ConfigVariableString 0 4 2694 43 ConfigVariableString::~ConfigVariableString 0 0 0
50
ConfigVariableString::~ConfigVariableString(void);

1653 7 GetBool 0 4 2695 16 DConfig::GetBool 0 1 317 0
69
static inline bool DConfig::GetBool(string const &sym, bool def = 0);

1654 6 GetInt 0 4 2695 15 DConfig::GetInt 0 1 318 0
66
static inline int DConfig::GetInt(string const &sym, int def = 0);

1655 8 GetFloat 0 4 2695 17 DConfig::GetFloat 0 1 319 0
74
static inline float DConfig::GetFloat(string const &sym, float def = 0.0);

1656 9 GetDouble 0 4 2695 18 DConfig::GetDouble 0 1 320 0
77
static inline double DConfig::GetDouble(string const &sym, double def = 0.0);

1657 9 GetString 0 4 2695 18 DConfig::GetString 0 1 321 0
83
static inline string DConfig::GetString(string const &sym, string const &def = "");

1658 8 ~DConfig 0 4 2695 17 DConfig::~DConfig 0 0 0
24
DConfig::~DConfig(void);

1659 7 Results 0 4 2697 29 DSearchPath::Results::Results 0 2 342 343 0
101
DSearchPath::Results::Results(void);
DSearchPath::Results::Results(DSearchPath::Results const &copy);

1660 10 operator = 0 4 2697 32 DSearchPath::Results::operator = 0 1 344 0
72
void DSearchPath::Results::operator =(DSearchPath::Results const &copy);

1661 8 ~Results 0 4 2697 30 DSearchPath::Results::~Results 0 0 0
37
DSearchPath::Results::~Results(void);

1662 5 clear 0 4 2697 27 DSearchPath::Results::clear 0 1 345 0
39
void DSearchPath::Results::clear(void);

1663 13 get_num_files 0 4 2697 35 DSearchPath::Results::get_num_files 0 1 346 0
52
int DSearchPath::Results::get_num_files(void) const;

1664 8 get_file 0 4 2697 30 DSearchPath::Results::get_file 0 1 347 0
60
Filename const &DSearchPath::Results::get_file(int n) const;

1665 11 operator [] 0 4 2697 33 DSearchPath::Results::operator [] 0 1 348 0
63
inline Filename DSearchPath::Results::operator [](int n) const;

1666 4 size 0 4 2697 26 DSearchPath::Results::size 0 1 349 382
////////////////////////////////////////////////////////////////////
//     Function: DSearchPath::Results::size
//       Access: Published
//  Description: Returns the num of filenames in the set.  This method
//               is defined to make the Results object appear to be a
//               list in Python.
////////////////////////////////////////////////////////////////////
50
inline int DSearchPath::Results::size(void) const;

1667 6 output 0 4 2697 28 DSearchPath::Results::output 0 1 350 0
54
void DSearchPath::Results::output(ostream &out) const;

1668 5 write 0 4 2697 27 DSearchPath::Results::write 0 1 351 0
75
void DSearchPath::Results::write(ostream &out, int indent_level = 0) const;

1669 11 DSearchPath 0 4 2696 24 DSearchPath::DSearchPath 0 4 322 323 324 325 0
217
DSearchPath::DSearchPath(void);
DSearchPath::DSearchPath(string const &path, string const &separator = string());
DSearchPath::DSearchPath(Filename const &directory);
DSearchPath::DSearchPath(DSearchPath const &copy);

1670 10 operator = 0 4 2696 23 DSearchPath::operator = 0 1 326 0
54
void DSearchPath::operator =(DSearchPath const &copy);

1671 12 ~DSearchPath 0 4 2696 25 DSearchPath::~DSearchPath 0 0 0
32
DSearchPath::~DSearchPath(void);

1672 5 clear 0 4 2696 18 DSearchPath::clear 0 1 327 0
30
void DSearchPath::clear(void);

1673 16 append_directory 0 4 2696 29 DSearchPath::append_directory 0 1 328 0
62
void DSearchPath::append_directory(Filename const &directory);

1674 17 prepend_directory 0 4 2696 30 DSearchPath::prepend_directory 0 1 329 0
63
void DSearchPath::prepend_directory(Filename const &directory);

1675 11 append_path 0 4 2696 24 DSearchPath::append_path 0 2 330 331 0
142
void DSearchPath::append_path(string const &path, string const &separator = string());
void DSearchPath::append_path(DSearchPath const &path);

1676 12 prepend_path 0 4 2696 25 DSearchPath::prepend_path 0 1 332 0
56
void DSearchPath::prepend_path(DSearchPath const &path);

1677 8 is_empty 0 4 2696 21 DSearchPath::is_empty 0 1 333 0
39
bool DSearchPath::is_empty(void) const;

1678 19 get_num_directories 0 4 2696 32 DSearchPath::get_num_directories 0 1 334 0
49
int DSearchPath::get_num_directories(void) const;

1679 13 get_directory 0 4 2696 26 DSearchPath::get_directory 0 1 335 0
56
Filename const &DSearchPath::get_directory(int n) const;

1680 9 find_file 0 4 2696 22 DSearchPath::find_file 0 1 336 0
64
Filename DSearchPath::find_file(Filename const &filename) const;

1681 14 find_all_files 0 4 2696 27 DSearchPath::find_all_files 0 2 337 338 445
////////////////////////////////////////////////////////////////////
//     Function: DSearchPath::find_all_files
//       Access: Published
//  Description: This variant of find_all_files() returns the new
//               Results object, instead of filling on in on the
//               parameter list.  This is a little more convenient to
//               call from Python.
////////////////////////////////////////////////////////////////////
184
int DSearchPath::find_all_files(Filename const &filename, DSearchPath::Results &results) const;
inline DSearchPath::Results DSearchPath::find_all_files(Filename const &filename) const;

1682 11 search_path 0 4 2696 24 DSearchPath::search_path 0 1 339 531
////////////////////////////////////////////////////////////////////
//     Function: DSearchPath::search_path
//       Access: Published, Static
//  Description: A quick-and-easy way to search a searchpath for a
//               file when you don't feel like building or keeping
//               around a DSearchPath object.  This simply
//               constructs a temporary DSearchPath based on the
//               indicated path string, and searches that.
////////////////////////////////////////////////////////////////////
130
static inline Filename DSearchPath::search_path(Filename const &filename, string const &path, string const &separator = string());

1683 6 output 0 4 2696 19 DSearchPath::output 0 1 340 0
81
void DSearchPath::output(ostream &out, string const &separator = string()) const;

1684 5 write 0 4 2696 18 DSearchPath::write 0 1 341 0
66
void DSearchPath::write(ostream &out, int indent_level = 0) const;

1685 24 has_environment_variable 0 4 2698 46 ExecutionEnvironment::has_environment_variable 0 1 352 330
////////////////////////////////////////////////////////////////////
//     Function: ExecutionEnvironment::has_environment_variable
//       Access: Public, Static
//  Description: Returns true if the indicated environment variable
//               is defined.
////////////////////////////////////////////////////////////////////
85
static inline bool ExecutionEnvironment::has_environment_variable(string const &var);

1686 24 get_environment_variable 0 4 2698 46 ExecutionEnvironment::get_environment_variable 0 1 353 396
////////////////////////////////////////////////////////////////////
//     Function: ExecutionEnvironment::get_environment_variable
//       Access: Public, Static
//  Description: Returns the definition of the indicated environment
//               variable, or the empty string if the variable is
//               undefined.
////////////////////////////////////////////////////////////////////
87
static inline string ExecutionEnvironment::get_environment_variable(string const &var);

1687 24 set_environment_variable 0 4 2698 46 ExecutionEnvironment::set_environment_variable 0 1 354 329
////////////////////////////////////////////////////////////////////
//     Function: ExecutionEnvironment::set_environment_variable
//       Access: Public, Static
//  Description: Changes the definition of the indicated environment
//               variable.
////////////////////////////////////////////////////////////////////
106
static inline void ExecutionEnvironment::set_environment_variable(string const &var, string const &value);

1688 27 shadow_environment_variable 0 4 2698 49 ExecutionEnvironment::shadow_environment_variable 0 1 355 588
////////////////////////////////////////////////////////////////////
//     Function: ExecutionEnvironment::shadow_environment_variable
//       Access: Public, Static
//  Description: Changes the apparent definition of the indicated
//               environment variable by masking it within this class
//               with a new value.  This does not change the actual
//               environment variable, but future calls to
//               get_environment_variable() will return this new
//               value.
////////////////////////////////////////////////////////////////////
109
static inline void ExecutionEnvironment::shadow_environment_variable(string const &var, string const &value);

1689 12 clear_shadow 0 4 2698 34 ExecutionEnvironment::clear_shadow 0 1 356 399
////////////////////////////////////////////////////////////////////
//     Function: ExecutionEnvironment::clear_shadow
//       Access: Public, Static
//  Description: Removes a value set by a previous call to
//               shadow_environment_variable(), and lets the actual
//               value of the variable show again.
////////////////////////////////////////////////////////////////////
73
static inline void ExecutionEnvironment::clear_shadow(string const &var);

1690 13 expand_string 0 4 2698 35 ExecutionEnvironment::expand_string 0 1 357 0
69
static string ExecutionEnvironment::expand_string(string const &str);

1691 12 get_num_args 0 4 2698 34 ExecutionEnvironment::get_num_args 0 1 358 348
////////////////////////////////////////////////////////////////////
//     Function: ExecutionEnvironment::get_num_args
//       Access: Public, Static
//  Description: Returns the number of command-line arguments
//               available, not counting arg 0, the binary name.
////////////////////////////////////////////////////////////////////
59
static inline int ExecutionEnvironment::get_num_args(void);

1692 7 get_arg 0 4 2698 29 ExecutionEnvironment::get_arg 0 1 359 462
////////////////////////////////////////////////////////////////////
//     Function: ExecutionEnvironment::get_arg
//       Access: Public, Static
//  Description: Returns the nth command-line argument.  The index n
//               must be in the range [0 .. get_num_args()).  The
//               first parameter, n == 0, is the first actual
//               parameter, not the binary name.
////////////////////////////////////////////////////////////////////
58
static inline string ExecutionEnvironment::get_arg(int n);

1693 15 get_binary_name 0 4 2698 37 ExecutionEnvironment::get_binary_name 0 1 360 352
////////////////////////////////////////////////////////////////////
//     Function: ExecutionEnvironment::get_binary_name
//       Access: Public, Static
//  Description: Returns the name of the binary executable that
//               started this program, if it can be determined.
////////////////////////////////////////////////////////////////////
65
static inline string ExecutionEnvironment::get_binary_name(void);

1694 14 get_dtool_name 0 4 2698 36 ExecutionEnvironment::get_dtool_name 0 1 361 349
////////////////////////////////////////////////////////////////////
//     Function: ExecutionEnvironment::get_dtool_name
//       Access: Public, Static
//  Description: Returns the name of the libdtool DLL that
//               is used in this program, if it can be determined.
////////////////////////////////////////////////////////////////////
64
static inline string ExecutionEnvironment::get_dtool_name(void);

1695 15 set_binary_name 0 4 2698 37 ExecutionEnvironment::set_binary_name 0 1 362 253
////////////////////////////////////////////////////////////////////
//     Function: ExecutionEnvironment::set_binary_name
//       Access: Public, Static
//  Description: Do not use.
////////////////////////////////////////////////////////////////////
77
static inline void ExecutionEnvironment::set_binary_name(string const &name);

1696 14 set_dtool_name 0 4 2698 36 ExecutionEnvironment::set_dtool_name 0 1 363 252
////////////////////////////////////////////////////////////////////
//     Function: ExecutionEnvironment::set_dtool_name
//       Access: Public, Static
//  Description: Do not use.
////////////////////////////////////////////////////////////////////
76
static inline void ExecutionEnvironment::set_dtool_name(string const &name);

1697 7 get_cwd 0 4 2698 29 ExecutionEnvironment::get_cwd 0 1 364 0
52
static Filename ExecutionEnvironment::get_cwd(void);

1698 21 ~ExecutionEnvironment 0 4 2698 43 ExecutionEnvironment::~ExecutionEnvironment 0 0 0
50
ExecutionEnvironment::~ExecutionEnvironment(void);

1699 9 ~ios_base 0 4 2703 19 ios_base::~ios_base 0 0 0
26
ios_base::~ios_base(void);

1700 4 good 0 4 2702 9 ios::good 0 1 385 0
27
bool ios::good(void) const;

1701 3 eof 0 4 2702 8 ios::eof 0 1 386 0
26
bool ios::eof(void) const;

1702 4 fail 0 4 2702 9 ios::fail 0 1 387 0
27
bool ios::fail(void) const;

1703 3 bad 0 4 2702 8 ios::bad 0 1 388 0
26
bool ios::bad(void) const;

1704 5 clear 0 4 2702 10 ios::clear 0 1 389 0
22
void ios::clear(void);

1705 4 ~ios 0 4 2702 9 ios::~ios 0 0 0
16
ios::~ios(void);

1706 13 upcast_to_ios 0 12 2701 22 istream::upcast_to_ios 0 1 376 26
upcast from istream to ios
34
ios *istream::upcast_to_ios(void);

1707 3 get 0 4 2701 12 istream::get 0 1 372 0
23
int istream::get(void);

1708 5 tellg 0 4 2701 14 istream::tellg 0 1 373 0
36
ios::streamoff istream::tellg(void);

1709 5 seekg 0 4 2701 14 istream::seekg 0 2 374 375 0
104
void istream::seekg(ios::streamoff pos);
void istream::seekg(ios::streamoff off, ios_base::seekdir dir);

1710 8 ~istream 0 4 2701 17 istream::~istream 0 0 0
24
istream::~istream(void);

1711 17 upcast_to_istream 0 12 2700 27 iostream::upcast_to_istream 0 1 370 31
upcast from iostream to istream
43
istream *iostream::upcast_to_istream(void);

1712 20 downcast_to_iostream 0 12 2701 29 istream::downcast_to_iostream 0 1 371 33
downcast from istream to iostream
46
iostream *istream::downcast_to_iostream(void);

1713 13 upcast_to_ios 0 12 2706 22 ostream::upcast_to_ios 0 1 384 26
upcast from ostream to ios
34
ios *ostream::upcast_to_ios(void);

1714 3 put 0 4 2706 12 ostream::put 0 1 379 0
26
void ostream::put(char c);

1715 5 flush 0 4 2706 14 ostream::flush 0 1 380 0
26
void ostream::flush(void);

1716 5 tellp 0 4 2706 14 ostream::tellp 0 1 381 0
36
ios::streamoff ostream::tellp(void);

1717 5 seekp 0 4 2706 14 ostream::seekp 0 2 382 383 0
104
void ostream::seekp(ios::streamoff pos);
void ostream::seekp(ios::streamoff off, ios_base::seekdir dir);

1718 8 ~ostream 0 4 2706 17 ostream::~ostream 0 0 0
24
ostream::~ostream(void);

1719 17 upcast_to_ostream 0 12 2700 27 iostream::upcast_to_ostream 0 1 377 31
upcast from iostream to ostream
43
ostream *iostream::upcast_to_ostream(void);

1720 20 downcast_to_iostream 0 12 2706 29 ostream::downcast_to_iostream 0 1 378 33
downcast from ostream to iostream
46
iostream *ostream::downcast_to_iostream(void);

1721 5 flush 0 4 2700 15 iostream::flush 0 1 369 0
27
void iostream::flush(void);

1722 9 ~iostream 0 4 2700 19 iostream::~iostream 0 0 0
26
iostream::~iostream(void);

1723 10 FileStream 0 4 2699 22 FileStream::FileStream 0 2 365 366 446
////////////////////////////////////////////////////////////////////
//     Function: FileStream::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: FileStream::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
131
inline FileStream::FileStream(void);
inline FileStream::FileStream(char const *filename, ios_base::openmode mode = ::ios_base::in);

1724 11 ~FileStream 0 4 2699 23 FileStream::~FileStream 0 0 221
////////////////////////////////////////////////////////////////////
//     Function: FileStream::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
37
inline FileStream::~FileStream(void);

1725 4 open 0 4 2699 16 FileStream::open 0 1 367 216
////////////////////////////////////////////////////////////////////
//     Function: FileStream::open
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
93
inline void FileStream::open(char const *filename, ios_base::openmode mode = ::ios_base::in);

1726 5 close 0 4 2699 17 FileStream::close 0 1 368 217
////////////////////////////////////////////////////////////////////
//     Function: FileStream::close
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
36
inline void FileStream::close(void);

1727 8 Filename 0 4 2707 18 Filename::Filename 0 5 390 391 392 393 394 891
////////////////////////////////////////////////////////////////////
//     Function: Filename::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Filename::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Filename::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Filename::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
276
inline Filename::Filename(string const &filename = "");
inline Filename::Filename(wstring const &filename);
inline Filename::Filename(char const *filename);
inline Filename::Filename(Filename const &copy);
Filename::Filename(Filename const &dirname, Filename const &basename);

1728 9 ~Filename 0 4 2707 19 Filename::~Filename 0 0 219
////////////////////////////////////////////////////////////////////
//     Function: Filename::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
33
inline Filename::~Filename(void);

1729 10 __reduce__ 0 4 2707 20 Filename::__reduce__ 0 1 395 0
53
PyObject *Filename::__reduce__(PyObject *self) const;

1730 13 text_filename 0 4 2707 23 Filename::text_filename 0 2 396 397 652
// Static constructors to explicitly create a filename that refers
// to a text or binary file.  This is in lieu of calling set_text()
// or set_binary() or set_type().

////////////////////////////////////////////////////////////////////
//     Function: Filename::text_filename named constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Filename::text_filename named constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
145
static inline Filename Filename::text_filename(Filename const &filename);
static inline Filename Filename::text_filename(string const &filename);

1731 15 binary_filename 0 4 2707 25 Filename::binary_filename 0 2 398 399 486
////////////////////////////////////////////////////////////////////
//     Function: Filename::binary_filename named constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Filename::binary_filename named constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
149
static inline Filename Filename::binary_filename(Filename const &filename);
static inline Filename Filename::binary_filename(string const &filename);

1732 12 dso_filename 0 4 2707 22 Filename::dso_filename 0 1 400 239
////////////////////////////////////////////////////////////////////
//     Function: Filename::dso_filename named constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
70
static inline Filename Filename::dso_filename(string const &filename);

1733 19 executable_filename 0 4 2707 29 Filename::executable_filename 0 1 401 246
////////////////////////////////////////////////////////////////////
//     Function: Filename::executable_filename named constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
77
static inline Filename Filename::executable_filename(string const &filename);

1734 16 pattern_filename 0 4 2707 26 Filename::pattern_filename 0 1 402 348
////////////////////////////////////////////////////////////////////
//     Function: Filename::pattern_filename named constructor
//       Access: Published
//  Description: Constructs a filename that represents a sequence of
//               numbered files.  See set_pattern().
////////////////////////////////////////////////////////////////////
74
static inline Filename Filename::pattern_filename(string const &filename);

1735 16 from_os_specific 0 4 2707 26 Filename::from_os_specific 0 1 403 0
115
static Filename Filename::from_os_specific(string const &os_specific, Filename::Type type = ::Filename::T_general);

1736 18 from_os_specific_w 0 4 2707 28 Filename::from_os_specific_w 0 1 404 0
118
static Filename Filename::from_os_specific_w(wstring const &os_specific, Filename::Type type = ::Filename::T_general);

1737 11 expand_from 0 4 2707 21 Filename::expand_from 0 1 405 0
110
static Filename Filename::expand_from(string const &user_string, Filename::Type type = ::Filename::T_general);

1738 9 temporary 0 4 2707 19 Filename::temporary 0 1 406 0
159
static Filename Filename::temporary(string const &dirname, string const &prefix, string const &suffix = string(), Filename::Type type = ::Filename::T_general);

1739 18 get_home_directory 0 4 2707 28 Filename::get_home_directory 0 1 407 0
58
static Filename const &Filename::get_home_directory(void);

1740 18 get_temp_directory 0 4 2707 28 Filename::get_temp_directory 0 1 408 0
58
static Filename const &Filename::get_temp_directory(void);

1741 26 get_user_appdata_directory 0 4 2707 36 Filename::get_user_appdata_directory 0 1 409 0
66
static Filename const &Filename::get_user_appdata_directory(void);

1742 28 get_common_appdata_directory 0 4 2707 38 Filename::get_common_appdata_directory 0 1 410 0
68
static Filename const &Filename::get_common_appdata_directory(void);

1743 10 operator = 0 4 2707 20 Filename::operator = 0 4 411 412 413 414 961
// Assignment is via the = operator.

////////////////////////////////////////////////////////////////////
//     Function: Filename::Assignment operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Filename::Assignment operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Filename::Assignment operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Filename::Copy assignment operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
248
inline Filename &Filename::operator =(string const &filename);
inline Filename &Filename::operator =(wstring const &filename);
inline Filename &Filename::operator =(char const *filename);
inline Filename &Filename::operator =(Filename const &copy);

1744 17 operator typecast 0 132 2707 27 Filename::operator typecast 0 1 505 60
// And retrieval is by any of the classic string operations.
61
inline string const &Filename::operator typecast(void) const;

1745 5 c_str 0 4 2707 15 Filename::c_str 0 1 415 214
////////////////////////////////////////////////////////////////////
//     Function: Filename::c_str
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
47
inline char const *Filename::c_str(void) const;

1746 5 empty 0 4 2707 15 Filename::empty 0 1 416 214
////////////////////////////////////////////////////////////////////
//     Function: Filename::empty
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
40
inline bool Filename::empty(void) const;

1747 6 length 0 4 2707 16 Filename::length 0 1 417 215
////////////////////////////////////////////////////////////////////
//     Function: Filename::length
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
43
inline size_t Filename::length(void) const;

1748 11 operator [] 0 4 2707 21 Filename::operator [] 0 1 418 0
47
inline char Filename::operator [](int n) const;

1749 8 __repr__ 0 4 2707 18 Filename::__repr__ 0 1 419 0
41
PyObject *Filename::__repr__(void) const;

1750 6 substr 0 4 2707 16 Filename::substr 0 1 420 215
////////////////////////////////////////////////////////////////////
//     Function: Filename::substr
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
116
inline string Filename::substr(size_t begin, size_t end = ::template< ctype >::basic_string< wchar_t >::npos) const;

1751 11 operator += 0 4 2707 21 Filename::operator += 0 1 421 0
55
inline void Filename::operator +=(string const &other);

1752 10 operator + 0 4 2707 20 Filename::operator + 0 1 422 0
64
inline Filename Filename::operator +(string const &other) const;

1753 10 operator / 0 4 2707 20 Filename::operator / 0 1 423 0
66
inline Filename Filename::operator /(Filename const &other) const;

1754 12 get_fullpath 0 4 2707 22 Filename::get_fullpath 0 1 424 416
// Or, you can use any of these.

////////////////////////////////////////////////////////////////////
//     Function: Filename::get_fullpath
//       Access: Published
//  Description: Returns the entire filename: directory, basename,
//               extension.  This is the same thing returned by the
//               string typecast operator.
////////////////////////////////////////////////////////////////////
49
inline string Filename::get_fullpath(void) const;

1755 14 get_fullpath_w 0 4 2707 24 Filename::get_fullpath_w 0 1 425 296
////////////////////////////////////////////////////////////////////
//     Function: Filename::get_fullpath_w
//       Access: Published
//  Description: Returns the entire filename as a wide-character
//               string.
////////////////////////////////////////////////////////////////////
52
inline wstring Filename::get_fullpath_w(void) const;

1756 11 get_dirname 0 4 2707 21 Filename::get_dirname 0 1 426 380
////////////////////////////////////////////////////////////////////
//     Function: Filename::get_dirname
//       Access: Published
//  Description: Returns the directory part of the filename.  This is
//               everything in the filename up to, but not including
//               the rightmost slash.
////////////////////////////////////////////////////////////////////
48
inline string Filename::get_dirname(void) const;

1757 12 get_basename 0 4 2707 22 Filename::get_basename 0 1 427 387
////////////////////////////////////////////////////////////////////
//     Function: Filename::get_basename
//       Access: Published
//  Description: Returns the basename part of the filename.  This is
//               everything in the filename after the rightmost slash,
//               including any extensions.
////////////////////////////////////////////////////////////////////
49
inline string Filename::get_basename(void) const;

1758 25 get_fullpath_wo_extension 0 4 2707 35 Filename::get_fullpath_wo_extension 0 1 428 334
////////////////////////////////////////////////////////////////////
//     Function: Filename::get_fullpath_wo_extension
//       Access: Published
//  Description: Returns the full filename--directory and basename
//               parts--except for the extension.
////////////////////////////////////////////////////////////////////
62
inline string Filename::get_fullpath_wo_extension(void) const;

1759 25 get_basename_wo_extension 0 4 2707 35 Filename::get_basename_wo_extension 0 1 429 322
////////////////////////////////////////////////////////////////////
//     Function: Filename::get_basename_wo_extension
//       Access: Published
//  Description: Returns the basename part of the filename, without
//               the file extension.
////////////////////////////////////////////////////////////////////
62
inline string Filename::get_basename_wo_extension(void) const;

1760 13 get_extension 0 4 2707 23 Filename::get_extension 0 1 430 383
////////////////////////////////////////////////////////////////////
//     Function: Filename::get_extension
//       Access: Published
//  Description: Returns the file extension.  This is everything after
//               the rightmost dot, if there is one, or the empty
//               string if there is not.
////////////////////////////////////////////////////////////////////
50
inline string Filename::get_extension(void) const;

1761 12 set_fullpath 0 4 2707 22 Filename::set_fullpath 0 1 431 68
// You can also use any of these to reassign pieces of the filename.
45
void Filename::set_fullpath(string const &s);

1762 11 set_dirname 0 4 2707 21 Filename::set_dirname 0 1 432 0
44
void Filename::set_dirname(string const &s);

1763 12 set_basename 0 4 2707 22 Filename::set_basename 0 1 433 0
45
void Filename::set_basename(string const &s);

1764 25 set_fullpath_wo_extension 0 4 2707 35 Filename::set_fullpath_wo_extension 0 1 434 0
58
void Filename::set_fullpath_wo_extension(string const &s);

1765 25 set_basename_wo_extension 0 4 2707 35 Filename::set_basename_wo_extension 0 1 435 0
58
void Filename::set_basename_wo_extension(string const &s);

1766 13 set_extension 0 4 2707 23 Filename::set_extension 0 1 436 0
46
void Filename::set_extension(string const &s);

1767 10 set_binary 0 4 2707 20 Filename::set_binary 0 1 437 682
// Setting these flags appropriately is helpful when opening or
// searching for a file; it helps the Filename resolve OS-specific
// conventions (for instance, that dynamic library names should
// perhaps be changed from .so to .dll).

////////////////////////////////////////////////////////////////////
//     Function: Filename::set_binary
//       Access: Published
//  Description: Indicates that the filename represents a binary file.
//               This is primarily relevant to the read_file() and
//               write_file() methods, so they can set the appropriate
//               flags to the OS.
////////////////////////////////////////////////////////////////////
39
inline void Filename::set_binary(void);

1768 8 set_text 0 4 2707 18 Filename::set_text 0 1 438 441
////////////////////////////////////////////////////////////////////
//     Function: Filename::set_text
//       Access: Published
//  Description: Indicates that the filename represents a text file.
//               This is primarily relevant to the read_file() and
//               write_file() methods, so they can set the appropriate
//               flags to the OS.
////////////////////////////////////////////////////////////////////
37
inline void Filename::set_text(void);

1769 9 is_binary 0 4 2707 19 Filename::is_binary 0 1 439 523
////////////////////////////////////////////////////////////////////
//     Function: Filename::is_binary
//       Access: Published
//  Description: Returns true if the Filename has been indicated to
//               represent a binary file via a previous call to
//               set_binary().  It is possible that neither
//               is_binary() nor is_text() will be true, if neither
//               set_binary() nor set_text() was ever called.
////////////////////////////////////////////////////////////////////
44
inline bool Filename::is_binary(void) const;

1770 7 is_text 0 4 2707 17 Filename::is_text 0 1 440 517
////////////////////////////////////////////////////////////////////
//     Function: Filename::is_text
//       Access: Published
//  Description: Returns true if the Filename has been indicated to
//               represent a text file via a previous call to
//               set_text().  It is possible that neither is_binary()
//               nor is_text() will be true, if neither set_binary()
//               nor set_text() was ever called.
////////////////////////////////////////////////////////////////////
42
inline bool Filename::is_text(void) const;

1771 17 is_binary_or_text 0 4 2707 27 Filename::is_binary_or_text 0 1 441 459
////////////////////////////////////////////////////////////////////
//     Function: Filename::is_binary_or_text
//       Access: Published
//  Description: Returns true either is_binary() or is_text() is true;
//               that is, that the filename has been specified as
//               either binary or text.  If this is false, the
//               filename has not been specified.
////////////////////////////////////////////////////////////////////
52
inline bool Filename::is_binary_or_text(void) const;

1772 8 set_type 0 4 2707 18 Filename::set_type 0 1 442 646
////////////////////////////////////////////////////////////////////
//     Function: Filename::set_type
//       Access: Published
//  Description: Sets the type of the file represented by the
//               filename.  This is useful for to_os_specific(),
//               resolve_filename(), test_existence(), and all such
//               real-world access functions.  It helps the Filename
//               know how to map the internal filename to the
//               OS-specific filename (for instance, maybe executables
//               should have an .exe extension).
////////////////////////////////////////////////////////////////////
52
inline void Filename::set_type(Filename::Type type);

1773 8 get_type 0 4 2707 18 Filename::get_type 0 1 443 325
////////////////////////////////////////////////////////////////////
//     Function: Filename::get_type
//       Access: Published
//  Description: Returns the type of the file represented by the
//               filename, as previously set by set_type().
////////////////////////////////////////////////////////////////////
53
inline Filename::Type Filename::get_type(void) const;

1774 11 set_pattern 0 4 2707 21 Filename::set_pattern 0 1 444 1075
////////////////////////////////////////////////////////////////////
//     Function: Filename::set_pattern
//       Access: Published
//  Description: Sets the flag indicating whether this is a filename
//               pattern.  When this is true, the filename is
//               understood to be a placeholder for a numbered
//               sequence of filename, such as an image sequence.  In
//               this case, a sequence of one or more hash characters
//               ("#") should appear in the filename string; these
//               characters will be filled in with the corresponding
//               number (or more) of digits representing the sequence
//               number.  Sequence numbers always begin counting at 0.
//
//               When this is true, methods like has_hash() and
//               get_hash_to_end() and get_filename_index() may be
//               called.  Methods like is_exists() will implicitly
//               test for existance of filename sequence 0.
////////////////////////////////////////////////////////////////////
48
inline void Filename::set_pattern(bool pattern);

1775 11 get_pattern 0 4 2707 21 Filename::get_pattern 0 1 445 321
////////////////////////////////////////////////////////////////////
//     Function: Filename::get_pattern
//       Access: Published
//  Description: Returns the flag indicating whether this is a
//               filename pattern.  See set_pattern().
////////////////////////////////////////////////////////////////////
46
inline bool Filename::get_pattern(void) const;

1776 8 has_hash 0 4 2707 18 Filename::has_hash 0 1 446 651
////////////////////////////////////////////////////////////////////
//     Function: Filename::has_hash
//       Access: Published
//  Description: Returns true if the filename is indicated to be a
//               filename pattern (that is, set_pattern(true) was
//               called), and the filename pattern did include a
//               sequence of hash marks, or false if it was not a
//               filename pattern or did not include hash marks.  If
//               this is true, then get_filename_index() will return a
//               different filename each time.
////////////////////////////////////////////////////////////////////
43
inline bool Filename::has_hash(void) const;

1777 18 get_filename_index 0 4 2707 28 Filename::get_filename_index 0 1 447 0
55
Filename Filename::get_filename_index(int index) const;

1778 15 get_hash_to_end 0 4 2707 25 Filename::get_hash_to_end 0 1 448 375
////////////////////////////////////////////////////////////////////
//     Function: Filename::get_hash_to_end
//       Access: Published
//  Description: Returns the part of the filename beginning at the
//               hash sequence (if any), and continuing to the end of
//               the filename.
////////////////////////////////////////////////////////////////////
52
inline string Filename::get_hash_to_end(void) const;

1779 15 set_hash_to_end 0 4 2707 25 Filename::set_hash_to_end 0 1 449 0
48
void Filename::set_hash_to_end(string const &s);

1780 18 extract_components 0 4 2707 28 Filename::extract_components 0 1 450 0
67
void Filename::extract_components(vector_string &components) const;

1781 11 standardize 0 4 2707 21 Filename::standardize 0 1 451 0
33
void Filename::standardize(void);

1782 8 is_local 0 4 2707 18 Filename::is_local 0 1 452 383
////////////////////////////////////////////////////////////////////
//     Function: Filename::is_local
//       Access: Published
//  Description: Returns true if the filename is local, e.g. does not
//               begin with a slash, or false if the filename is fully
//               specified from the root.
////////////////////////////////////////////////////////////////////
43
inline bool Filename::is_local(void) const;

1783 18 is_fully_qualified 0 4 2707 28 Filename::is_fully_qualified 0 1 453 782
////////////////////////////////////////////////////////////////////
//     Function: Filename::is_fully_qualified
//       Access: Published
//  Description: Returns true if the filename is fully qualified,
//               e.g. begins with a slash.  This is almost, but not
//               quite, the same thing as !is_local().  It's not
//               exactly the same because a special case is made for
//               filenames that begin with a single dot followed by a
//               slash--these are considered to be fully qualified
//               (they are explicitly relative to the current
//               directory, and do not refer to a filename on a search
//               path somewhere).
////////////////////////////////////////////////////////////////////
53
inline bool Filename::is_fully_qualified(void) const;

1784 13 make_absolute 0 4 2707 23 Filename::make_absolute 0 2 454 455 0
98
void Filename::make_absolute(void);
void Filename::make_absolute(Filename const &start_directory);

1785 14 make_canonical 0 4 2707 24 Filename::make_canonical 0 1 456 0
36
bool Filename::make_canonical(void);

1786 14 make_true_case 0 4 2707 24 Filename::make_true_case 0 1 457 0
36
bool Filename::make_true_case(void);

1787 14 to_os_specific 0 4 2707 24 Filename::to_os_specific 0 1 458 0
44
string Filename::to_os_specific(void) const;

1788 16 to_os_specific_w 0 4 2707 26 Filename::to_os_specific_w 0 1 459 0
47
wstring Filename::to_os_specific_w(void) const;

1789 13 to_os_generic 0 4 2707 23 Filename::to_os_generic 0 1 460 0
43
string Filename::to_os_generic(void) const;

1790 16 to_os_short_name 0 4 2707 26 Filename::to_os_short_name 0 1 461 0
46
string Filename::to_os_short_name(void) const;

1791 15 to_os_long_name 0 4 2707 25 Filename::to_os_long_name 0 1 462 0
45
string Filename::to_os_long_name(void) const;

1792 6 exists 0 4 2707 16 Filename::exists 0 1 463 0
34
bool Filename::exists(void) const;

1793 15 is_regular_file 0 4 2707 25 Filename::is_regular_file 0 1 464 0
43
bool Filename::is_regular_file(void) const;

1794 11 is_writable 0 4 2707 21 Filename::is_writable 0 1 465 0
39
bool Filename::is_writable(void) const;

1795 12 is_directory 0 4 2707 22 Filename::is_directory 0 1 466 0
40
bool Filename::is_directory(void) const;

1796 13 is_executable 0 4 2707 23 Filename::is_executable 0 1 467 0
41
bool Filename::is_executable(void) const;

1797 18 compare_timestamps 0 4 2707 28 Filename::compare_timestamps 0 1 468 0
123
int Filename::compare_timestamps(Filename const &other, bool this_missing_is_old = 1, bool other_missing_is_old = 1) const;

1798 13 get_timestamp 0 4 2707 23 Filename::get_timestamp 0 1 469 0
43
time_t Filename::get_timestamp(void) const;

1799 20 get_access_timestamp 0 4 2707 30 Filename::get_access_timestamp 0 1 470 0
50
time_t Filename::get_access_timestamp(void) const;

1800 13 get_file_size 0 4 2707 23 Filename::get_file_size 0 1 471 0
47
streamsize Filename::get_file_size(void) const;

1801 16 resolve_filename 0 4 2707 26 Filename::resolve_filename 0 1 472 0
107
bool Filename::resolve_filename(DSearchPath const &searchpath, string const &default_extension = string());

1802 16 make_relative_to 0 4 2707 26 Filename::make_relative_to 0 1 473 0
76
bool Filename::make_relative_to(Filename directory, bool allow_backups = 1);

1803 18 find_on_searchpath 0 4 2707 28 Filename::find_on_searchpath 0 1 474 0
64
int Filename::find_on_searchpath(DSearchPath const &searchpath);

1804 14 scan_directory 0 4 2707 24 Filename::scan_directory 0 2 475 476 0
109
bool Filename::scan_directory(vector_string &contents) const;
PyObject *Filename::scan_directory(void) const;

1805 9 open_read 0 4 2707 19 Filename::open_read 0 2 477 478 0
100
bool Filename::open_read(ifstream &stream) const;
bool Filename::open_read(pifstream &stream) const;

1806 10 open_write 0 4 2707 20 Filename::open_write 0 2 479 480 0
140
bool Filename::open_write(ofstream &stream, bool truncate = 1) const;
bool Filename::open_write(pofstream &stream, bool truncate = 1) const;

1807 11 open_append 0 4 2707 21 Filename::open_append 0 2 481 482 0
104
bool Filename::open_append(ofstream &stream) const;
bool Filename::open_append(pofstream &stream) const;

1808 15 open_read_write 0 4 2707 25 Filename::open_read_write 0 2 483 484 0
148
bool Filename::open_read_write(fstream &stream, bool truncate = 0) const;
bool Filename::open_read_write(pfstream &stream, bool truncate = 0) const;

1809 16 open_read_append 0 4 2707 26 Filename::open_read_append 0 2 485 486 0
112
bool Filename::open_read_append(fstream &stream) const;
bool Filename::open_read_append(pfstream &stream) const;

1810 5 chdir 0 4 2707 15 Filename::chdir 0 1 487 0
33
bool Filename::chdir(void) const;

1811 5 touch 0 4 2707 15 Filename::touch 0 1 488 0
33
bool Filename::touch(void) const;

1812 6 unlink 0 4 2707 16 Filename::unlink 0 1 489 0
34
bool Filename::unlink(void) const;

1813 9 rename_to 0 4 2707 19 Filename::rename_to 0 1 490 0
54
bool Filename::rename_to(Filename const &other) const;

1814 7 copy_to 0 4 2707 17 Filename::copy_to 0 1 491 0
52
bool Filename::copy_to(Filename const &other) const;

1815 8 make_dir 0 4 2707 18 Filename::make_dir 0 1 492 0
36
bool Filename::make_dir(void) const;

1816 5 mkdir 0 4 2707 15 Filename::mkdir 0 1 493 0
33
bool Filename::mkdir(void) const;

1817 5 rmdir 0 4 2707 15 Filename::rmdir 0 1 494 0
33
bool Filename::rmdir(void) const;

1818 11 operator == 0 4 2707 21 Filename::operator == 0 1 495 34
// Comparison operators are handy.
61
inline bool Filename::operator ==(string const &other) const;

1819 11 operator != 0 4 2707 21 Filename::operator != 0 1 496 0
61
inline bool Filename::operator !=(string const &other) const;

1820 10 operator < 0 4 2707 20 Filename::operator < 0 1 497 0
60
inline bool Filename::operator <(string const &other) const;

1821 10 compare_to 0 4 2707 20 Filename::compare_to 0 1 498 219
////////////////////////////////////////////////////////////////////
//     Function: Filename::compare_to
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
61
inline int Filename::compare_to(Filename const &other) const;

1822 11 __nonzero__ 0 4 2707 21 Filename::__nonzero__ 0 1 499 646
////////////////////////////////////////////////////////////////////
//     Function: Filename::__nonzero__
//       Access: Published
//  Description: Returns true if the Filename is valid (not empty),
//               or false if it is an empty string.
//
//               This implements the Python equivalent to operator
//               bool.  Defining an actual operator bool method for
//               C++ use would work too, but it seems to cause too
//               many ambiguities for the C++ compiler, so we use this
//               Python-only approach instead.
////////////////////////////////////////////////////////////////////
46
inline bool Filename::__nonzero__(void) const;

1823 8 get_hash 0 4 2707 18 Filename::get_hash 0 1 500 0
35
int Filename::get_hash(void) const;

1824 6 output 0 4 2707 16 Filename::output 0 1 501 215
////////////////////////////////////////////////////////////////////
//     Function: Filename::output
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
49
inline void Filename::output(ostream &out) const;

1825 23 set_filesystem_encoding 0 4 2707 33 Filename::set_filesystem_encoding 0 1 502 557
////////////////////////////////////////////////////////////////////
//     Function: Filename::set_filesystem_encoding
//       Access: Published, Static
//  Description: Specifies the default encoding to be used for all
//               subsequent Filenames.  This is used to represent
//               wide-character (Unicode) filenames internally.  On
//               non-Windows-based systems, the encoded filename is
//               also passed to the underlying operating system.
////////////////////////////////////////////////////////////////////
85
static inline void Filename::set_filesystem_encoding(TextEncoder::Encoding encoding);

1826 23 get_filesystem_encoding 0 4 2707 33 Filename::get_filesystem_encoding 0 1 503 386
////////////////////////////////////////////////////////////////////
//     Function: Filename::get_filesystem_encoding
//       Access: Published, Static
//  Description: Specifies the default encoding to be used for all
//               subsequent Filenames objects.  See
//               set_filesystem_encoding().
////////////////////////////////////////////////////////////////////
76
static inline TextEncoder::Encoding Filename::get_filesystem_encoding(void);

1827 14 get_class_type 0 4 2707 24 Filename::get_class_type 0 1 504 0
49
static TypeHandle Filename::get_class_type(void);

1828 11 GlobPattern 0 4 2709 24 GlobPattern::GlobPattern 0 2 506 507 447
////////////////////////////////////////////////////////////////////
//     Function: GlobPattern::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GlobPattern::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
124
inline GlobPattern::GlobPattern(string const &pattern = string());
inline GlobPattern::GlobPattern(GlobPattern const &copy);

1829 10 operator = 0 4 2709 23 GlobPattern::operator = 0 1 508 0
61
inline void GlobPattern::operator =(GlobPattern const &copy);

1830 11 operator == 0 4 2709 24 GlobPattern::operator == 0 1 509 0
69
inline bool GlobPattern::operator ==(GlobPattern const &other) const;

1831 11 operator != 0 4 2709 24 GlobPattern::operator != 0 1 510 0
69
inline bool GlobPattern::operator !=(GlobPattern const &other) const;

1832 10 operator < 0 4 2709 23 GlobPattern::operator < 0 1 511 0
68
inline bool GlobPattern::operator <(GlobPattern const &other) const;

1833 11 set_pattern 0 4 2709 24 GlobPattern::set_pattern 0 1 512 301
////////////////////////////////////////////////////////////////////
//     Function: GlobPattern::set_pattern
//       Access: Public
//  Description: Changes the pattern string that the GlobPattern
//               object matches.
////////////////////////////////////////////////////////////////////
60
inline void GlobPattern::set_pattern(string const &pattern);

1834 11 get_pattern 0 4 2709 24 GlobPattern::get_pattern 0 1 513 301
////////////////////////////////////////////////////////////////////
//     Function: GlobPattern::get_pattern
//       Access: Public
//  Description: Returns the pattern string that the GlobPattern
//               object matches.
////////////////////////////////////////////////////////////////////
58
inline string const &GlobPattern::get_pattern(void) const;

1835 18 set_case_sensitive 0 4 2709 31 GlobPattern::set_case_sensitive 0 1 514 370
////////////////////////////////////////////////////////////////////
//     Function: GlobPattern::set_case_sensitive
//       Access: Public
//  Description: Sets whether the match is case sensitive (true) or
//               case insensitive (false).  The default is case
//               sensitive.
////////////////////////////////////////////////////////////////////
65
inline void GlobPattern::set_case_sensitive(bool case_sensitive);

1836 18 get_case_sensitive 0 4 2709 31 GlobPattern::get_case_sensitive 0 1 515 373
////////////////////////////////////////////////////////////////////
//     Function: GlobPattern::get_case_sensitive
//       Access: Public
//  Description: Returns whether the match is case sensitive (true) or
//               case insensitive (false).  The default is case
//               sensitive.
////////////////////////////////////////////////////////////////////
56
inline bool GlobPattern::get_case_sensitive(void) const;

1837 17 set_nomatch_chars 0 4 2709 30 GlobPattern::set_nomatch_chars 0 1 516 305
////////////////////////////////////////////////////////////////////
//     Function: GlobPattern::set_nomatch_chars
//       Access: Public
//  Description: Specifies a set of characters that are not matched by
//               * or ?.
////////////////////////////////////////////////////////////////////
72
inline void GlobPattern::set_nomatch_chars(string const &nomatch_chars);

1838 17 get_nomatch_chars 0 4 2709 30 GlobPattern::get_nomatch_chars 0 1 517 305
////////////////////////////////////////////////////////////////////
//     Function: GlobPattern::get_nomatch_chars
//       Access: Public
//  Description: Returns the set of characters that are not matched by
//               * or ?.
////////////////////////////////////////////////////////////////////
64
inline string const &GlobPattern::get_nomatch_chars(void) const;

1839 7 matches 0 4 2709 20 GlobPattern::matches 0 1 518 308
////////////////////////////////////////////////////////////////////
//     Function: GlobPattern::matches
//       Access: Public
//  Description: Returns true if the candidate string matches the
//               pattern, false otherwise.
////////////////////////////////////////////////////////////////////
64
inline bool GlobPattern::matches(string const &candidate) const;

1840 6 output 0 4 2709 19 GlobPattern::output 0 1 519 215
////////////////////////////////////////////////////////////////////
//     Function: GlobPattern::output
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
52
inline void GlobPattern::output(ostream &out) const;

1841 19 has_glob_characters 0 4 2709 32 GlobPattern::has_glob_characters 0 1 520 0
50
bool GlobPattern::has_glob_characters(void) const;

1842 16 get_const_prefix 0 4 2709 29 GlobPattern::get_const_prefix 0 1 521 0
49
string GlobPattern::get_const_prefix(void) const;

1843 11 match_files 0 4 2709 24 GlobPattern::match_files 0 2 522 523 0
169
int GlobPattern::match_files(vector_string &results, Filename const &cwd = Filename()) const;
PyObject *GlobPattern::match_files(Filename const &cwd = Filename()) const;

1844 12 ~GlobPattern 0 4 2709 25 GlobPattern::~GlobPattern 0 0 0
32
GlobPattern::~GlobPattern(void);

1845 14 IDecryptStream 0 4 2710 30 IDecryptStream::IDecryptStream 0 2 524 525 454
////////////////////////////////////////////////////////////////////
//     Function: IDecryptStream::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: IDecryptStream::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
142
inline IDecryptStream::IDecryptStream(void);
inline IDecryptStream::IDecryptStream(istream *source, bool owns_source, string const &password);

1846 4 open 0 4 2710 20 IDecryptStream::open 0 1 526 220
////////////////////////////////////////////////////////////////////
//     Function: IDecryptStream::open
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
103
inline IDecryptStream &IDecryptStream::open(istream *source, bool owns_source, string const &password);

1847 5 close 0 4 2710 21 IDecryptStream::close 0 1 527 348
////////////////////////////////////////////////////////////////////
//     Function: IDecryptStream::close
//       Access: Published
//  Description: Resets the EncryptStream to empty, but does not actually
//               close the source istream unless owns_source was true.
////////////////////////////////////////////////////////////////////
51
inline IDecryptStream &IDecryptStream::close(void);

1848 13 get_algorithm 0 4 2710 29 IDecryptStream::get_algorithm 0 1 528 309
////////////////////////////////////////////////////////////////////
//     Function: IDecryptStream::get_algorithm
//       Access: Published
//  Description: Returns the encryption algorithm that was read from
//               the stream.
////////////////////////////////////////////////////////////////////
63
inline string const &IDecryptStream::get_algorithm(void) const;

1849 14 get_key_length 0 4 2710 30 IDecryptStream::get_key_length 0 1 529 321
////////////////////////////////////////////////////////////////////
//     Function: IDecryptStream::get_key_length
//       Access: Published
//  Description: Returns the encryption key length, in bits, that was
//               read from the stream.
////////////////////////////////////////////////////////////////////
54
inline int IDecryptStream::get_key_length(void) const;

1850 19 get_iteration_count 0 4 2710 35 IDecryptStream::get_iteration_count 0 1 530 287
////////////////////////////////////////////////////////////////////
//     Function: IDecryptStream::get_iteration_count
//       Access: Published
//  Description: Returns the value that was was read from the stream.
////////////////////////////////////////////////////////////////////
59
inline int IDecryptStream::get_iteration_count(void) const;

1851 15 ~IDecryptStream 0 4 2710 31 IDecryptStream::~IDecryptStream 0 0 0
38
IDecryptStream::~IDecryptStream(void);

1852 11 IFileStream 0 4 2711 24 IFileStream::IFileStream 0 2 531 532 448
////////////////////////////////////////////////////////////////////
//     Function: IFileStream::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: IFileStream::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
135
inline IFileStream::IFileStream(void);
inline IFileStream::IFileStream(char const *filename, ios_base::openmode mode = ::ios_base::in);

1853 12 ~IFileStream 0 4 2711 25 IFileStream::~IFileStream 0 0 222
////////////////////////////////////////////////////////////////////
//     Function: IFileStream::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
39
inline IFileStream::~IFileStream(void);

1854 4 open 0 4 2711 17 IFileStream::open 0 1 533 217
////////////////////////////////////////////////////////////////////
//     Function: IFileStream::open
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
94
inline void IFileStream::open(char const *filename, ios_base::openmode mode = ::ios_base::in);

1855 5 close 0 4 2711 18 IFileStream::close 0 1 534 218
////////////////////////////////////////////////////////////////////
//     Function: IFileStream::close
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
37
inline void IFileStream::close(void);

1856 7 acquire 0 4 2713 26 StreamWrapperBase::acquire 0 1 538 952
////////////////////////////////////////////////////////////////////
//     Function: StreamWrapperBase::acquire
//       Access: Published
//  Description: Acquires the internal lock.  
//
//               User code should call this to take temporary
//               possession of the stream and perform direct I/O
//               operations on it, for instance to make several
//               sequential atomic reads.  You may not call any of the
//               StreamWrapper methods while the lock is held, other
//               than release().
//
//               Use with extreme caution!  This is a very low-level,
//               non-recursive lock.  You must call acquire() only
//               once, and you must later call release() exactly once.
//               Failing to do so may result in a hard deadlock with
//               no available debugging features.
////////////////////////////////////////////////////////////////////
45
inline void StreamWrapperBase::acquire(void);

1857 7 release 0 4 2713 26 StreamWrapperBase::release 0 1 539 381
////////////////////////////////////////////////////////////////////
//     Function: StreamWrapperBase::release
//       Access: Published
//  Description: Releases the internal lock.  Must be called exactly
//               once following a call to acquire().  See the cautions
//               with acquire().
////////////////////////////////////////////////////////////////////
45
inline void StreamWrapperBase::release(void);

1858 18 ~StreamWrapperBase 0 4 2713 37 StreamWrapperBase::~StreamWrapperBase 0 0 0
44
StreamWrapperBase::~StreamWrapperBase(void);

1859 27 upcast_to_StreamWrapperBase 0 12 2712 43 IStreamWrapper::upcast_to_StreamWrapperBase 0 1 537 47
upcast from IStreamWrapper to StreamWrapperBase
69
StreamWrapperBase *IStreamWrapper::upcast_to_StreamWrapperBase(void);

1860 14 IStreamWrapper 0 4 2712 30 IStreamWrapper::IStreamWrapper 0 1 535 453
////////////////////////////////////////////////////////////////////
//     Function: IStreamWrapper::Constructor
//       Access: Public
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: IStreamWrapper::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
55
inline IStreamWrapper::IStreamWrapper(istream &stream);

1861 15 ~IStreamWrapper 0 4 2712 31 IStreamWrapper::~IStreamWrapper 0 0 0
38
IStreamWrapper::~IStreamWrapper(void);

1862 11 get_istream 0 4 2712 27 IStreamWrapper::get_istream 0 1 536 271
////////////////////////////////////////////////////////////////////
//     Function: IStreamWrapper::get_istream
//       Access: Published
//  Description: Returns the istream this object is wrapping.
////////////////////////////////////////////////////////////////////
56
inline istream *IStreamWrapper::get_istream(void) const;

1863 10 LineStream 0 4 2714 22 LineStream::LineStream 0 1 540 219
////////////////////////////////////////////////////////////////////
//     Function: LineStream::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
36
inline LineStream::LineStream(void);

1864 17 is_text_available 0 4 2714 29 LineStream::is_text_available 0 1 541 458
////////////////////////////////////////////////////////////////////
//     Function: LineStream::is_text_available
//       Access: Public
//  Description: Returns true if there is at least one line of text
//               (or even a partial line) available in the LineStream
//               object.  If this returns true, the line may then be
//               retrieved via get_line().
////////////////////////////////////////////////////////////////////
54
inline bool LineStream::is_text_available(void) const;

1865 8 get_line 0 4 2714 20 LineStream::get_line 0 1 542 540
////////////////////////////////////////////////////////////////////
//     Function: LineStream::get_line
//       Access: Public
//  Description: Extracts and returns the next line (or partial line)
//               of text available in the LineStream object.  Once the
//               line has been extracted, you may call has_newline()
//               to determine whether or not there was an explicit
//               newline character written following this line.
////////////////////////////////////////////////////////////////////
41
inline string LineStream::get_line(void);

1866 11 has_newline 0 4 2714 23 LineStream::has_newline 0 1 543 460
////////////////////////////////////////////////////////////////////
//     Function: LineStream::has_newline
//       Access: Public
//  Description: Returns true if the line of text most recently
//               returned by get_line() was written out with a
//               terminating newline, or false if a newline character
//               has not yet been written to the LineStream.
////////////////////////////////////////////////////////////////////
48
inline bool LineStream::has_newline(void) const;

1867 11 ~LineStream 0 4 2714 23 LineStream::~LineStream 0 0 0
30
LineStream::~LineStream(void);

1868 15 get_total_alloc 0 4 2715 32 NeverFreeMemory::get_total_alloc 0 1 544 353
////////////////////////////////////////////////////////////////////
//     Function: NeverFreeMemory::get_total_alloc
//       Access: Published, Static
//  Description: Returns the total number of bytes consumed by all the
//               pages allocated internally by this object.
////////////////////////////////////////////////////////////////////
60
static inline size_t NeverFreeMemory::get_total_alloc(void);

1869 14 get_total_used 0 4 2715 31 NeverFreeMemory::get_total_used 0 1 545 356
////////////////////////////////////////////////////////////////////
//     Function: NeverFreeMemory::get_total_used
//       Access: Published, Static
//  Description: Returns the total number of bytes requested by the
//               application in calls to NeverFreeMemory::alloc().
////////////////////////////////////////////////////////////////////
59
static inline size_t NeverFreeMemory::get_total_used(void);

1870 16 get_total_unused 0 4 2715 33 NeverFreeMemory::get_total_unused 0 1 546 454
////////////////////////////////////////////////////////////////////
//     Function: NeverFreeMemory::get_total_unused
//       Access: Published, Static
//  Description: Returns the difference between get_total_alloc() and
//               get_total_used().  This represents bytes in allocated
//               pages that have not (yet) been used by the
//               application.
////////////////////////////////////////////////////////////////////
61
static inline size_t NeverFreeMemory::get_total_unused(void);

1871 16 ~NeverFreeMemory 0 4 2715 33 NeverFreeMemory::~NeverFreeMemory 0 0 0
40
NeverFreeMemory::~NeverFreeMemory(void);

1872 6 Notify 0 4 2716 14 Notify::Notify 0 1 547 0
21
Notify::Notify(void);

1873 7 ~Notify 0 4 2716 15 Notify::~Notify 0 0 0
22
Notify::~Notify(void);

1874 15 set_ostream_ptr 0 4 2716 23 Notify::set_ostream_ptr 0 1 548 0
70
void Notify::set_ostream_ptr(ostream *ostream_ptr, bool delete_later);

1875 15 get_ostream_ptr 0 4 2716 23 Notify::get_ostream_ptr 0 1 549 0
45
ostream *Notify::get_ostream_ptr(void) const;

1876 18 set_assert_handler 0 4 2716 26 Notify::set_assert_handler 0 0 0
71
void Notify::set_assert_handler(Notify::AssertHandler *assert_handler);

1877 20 clear_assert_handler 0 4 2716 28 Notify::clear_assert_handler 0 1 550 0
40
void Notify::clear_assert_handler(void);

1878 18 has_assert_handler 0 4 2716 26 Notify::has_assert_handler 0 1 551 0
44
bool Notify::has_assert_handler(void) const;

1879 18 get_assert_handler 0 4 2716 26 Notify::get_assert_handler 0 1 552 0
62
Notify::AssertHandler *Notify::get_assert_handler(void) const;

1880 17 has_assert_failed 0 4 2716 25 Notify::has_assert_failed 0 1 553 1042
////////////////////////////////////////////////////////////////////
//     Function: Notify::has_assert_failed
//       Access: Public
//  Description: Returns true if an assertion test has failed (and not
//               been ignored) since the last call to
//               clear_assert_failed().
//
//               When an assertion test fails, the assert handler
//               may decide either to abort, return, or ignore the
//               assertion.  Naturally, if it decides to abort, this
//               flag is irrelevant.  If it chooses to ignore the
//               assertion, the flag is not set.  However, if the
//               assert handler chooses to return out of the
//               function (the normal case), it will also set this
//               flag to indicate that an assertion failure has
//               occurred.
//
//               This will also be the behavior in the absence of a
//               user-defined assert handler.
////////////////////////////////////////////////////////////////////
50
inline bool Notify::has_assert_failed(void) const;

1881 24 get_assert_error_message 0 4 2716 32 Notify::get_assert_error_message 0 1 554 332
////////////////////////////////////////////////////////////////////
//     Function: Notify::get_assert_error_message
//       Access: Public
//  Description: Returns the error message that corresponds to the
//               assertion that most recently failed.
////////////////////////////////////////////////////////////////////
66
inline string const &Notify::get_assert_error_message(void) const;

1882 19 clear_assert_failed 0 4 2716 27 Notify::clear_assert_failed 0 1 555 342
////////////////////////////////////////////////////////////////////
//     Function: Notify::clear_assert_failed
//       Access: Public
//  Description: Resets the assert_failed flag that is set whenever an
//               assertion test fails.  See has_assert_failed().
////////////////////////////////////////////////////////////////////
46
inline void Notify::clear_assert_failed(void);

1883 16 get_top_category 0 4 2716 24 Notify::get_top_category 0 1 556 0
47
NotifyCategory *Notify::get_top_category(void);

1884 12 get_category 0 4 2716 20 Notify::get_category 0 3 557 558 559 0
249
NotifyCategory *Notify::get_category(string const &basename, NotifyCategory *parent_category);
NotifyCategory *Notify::get_category(string const &basename, string const &parent_fullname);
NotifyCategory *Notify::get_category(string const &fullname);

1885 3 out 0 4 2716 11 Notify::out 0 1 560 0
34
static ostream &Notify::out(void);

1886 4 null 0 4 2716 12 Notify::null 0 1 561 0
35
static ostream &Notify::null(void);

1887 12 write_string 0 4 2716 20 Notify::write_string 0 1 562 0
52
static void Notify::write_string(string const &str);

1888 3 ptr 0 4 2716 11 Notify::ptr 0 1 563 0
33
static Notify *Notify::ptr(void);

1889 20 upcast_to_MemoryBase 0 12 2717 36 NotifyCategory::upcast_to_MemoryBase 0 1 585 40
upcast from NotifyCategory to MemoryBase
55
MemoryBase *NotifyCategory::upcast_to_MemoryBase(void);

1890 26 downcast_to_NotifyCategory 0 12 2664 38 MemoryBase::downcast_to_NotifyCategory 0 1 586 42
downcast from MemoryBase to NotifyCategory
61
NotifyCategory *MemoryBase::downcast_to_NotifyCategory(void);

1891 21 upcast_to_ConfigFlags 0 12 2717 37 NotifyCategory::upcast_to_ConfigFlags 0 1 587 41
upcast from NotifyCategory to ConfigFlags
57
ConfigFlags *NotifyCategory::upcast_to_ConfigFlags(void);

1892 26 downcast_to_NotifyCategory 0 12 2678 39 ConfigFlags::downcast_to_NotifyCategory 0 1 588 43
downcast from ConfigFlags to NotifyCategory
62
NotifyCategory *ConfigFlags::downcast_to_NotifyCategory(void);

1893 12 get_fullname 0 4 2717 28 NotifyCategory::get_fullname 0 1 564 224
////////////////////////////////////////////////////////////////////
//     Function: NotifyCategory::get_fullname
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
55
inline string NotifyCategory::get_fullname(void) const;

1894 12 get_basename 0 4 2717 28 NotifyCategory::get_basename 0 1 565 224
////////////////////////////////////////////////////////////////////
//     Function: NotifyCategory::get_basename
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
55
inline string NotifyCategory::get_basename(void) const;

1895 12 get_severity 0 4 2717 28 NotifyCategory::get_severity 0 1 566 224
////////////////////////////////////////////////////////////////////
//     Function: NotifyCategory::get_severity
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
63
inline NotifySeverity NotifyCategory::get_severity(void) const;

1896 12 set_severity 0 4 2717 28 NotifyCategory::set_severity 0 1 567 395
////////////////////////////////////////////////////////////////////
//     Function: NotifyCategory::set_severity
//       Access: Public
//  Description: Sets the severity level of messages that will be
//               reported from this Category.  This allows any message
//               of this severity level or higher.
////////////////////////////////////////////////////////////////////
66
inline void NotifyCategory::set_severity(NotifySeverity severity);

1897 5 is_on 0 4 2717 21 NotifyCategory::is_on 0 1 568 331
////////////////////////////////////////////////////////////////////
//     Function: NotifyCategory::is_on
//       Access: Public
//  Description: Returns true if messages of the indicated severity
//               level ought to be reported for this Category.
////////////////////////////////////////////////////////////////////
65
inline bool NotifyCategory::is_on(NotifySeverity severity) const;

1898 7 is_spam 0 4 2717 23 NotifyCategory::is_spam 0 1 569 260
////////////////////////////////////////////////////////////////////
//     Function: NotifyCategory::is_spam
//       Access: Public
//  Description: A shorthand way to write is_on(NS_spam).
////////////////////////////////////////////////////////////////////
48
inline bool NotifyCategory::is_spam(void) const;

1899 8 is_debug 0 4 2717 24 NotifyCategory::is_debug 0 1 570 262
////////////////////////////////////////////////////////////////////
//     Function: NotifyCategory::is_debug
//       Access: Public
//  Description: A shorthand way to write is_on(NS_debug).
////////////////////////////////////////////////////////////////////
49
inline bool NotifyCategory::is_debug(void) const;

1900 7 is_info 0 4 2717 23 NotifyCategory::is_info 0 1 571 260
////////////////////////////////////////////////////////////////////
//     Function: NotifyCategory::is_info
//       Access: Public
//  Description: A shorthand way to write is_on(NS_info).
////////////////////////////////////////////////////////////////////
48
inline bool NotifyCategory::is_info(void) const;

1901 10 is_warning 0 4 2717 26 NotifyCategory::is_warning 0 1 572 266
////////////////////////////////////////////////////////////////////
//     Function: NotifyCategory::is_warning
//       Access: Public
//  Description: A shorthand way to write is_on(NS_warning).
////////////////////////////////////////////////////////////////////
51
inline bool NotifyCategory::is_warning(void) const;

1902 8 is_error 0 4 2717 24 NotifyCategory::is_error 0 1 573 262
////////////////////////////////////////////////////////////////////
//     Function: NotifyCategory::is_error
//       Access: Public
//  Description: A shorthand way to write is_on(NS_error).
////////////////////////////////////////////////////////////////////
49
inline bool NotifyCategory::is_error(void) const;

1903 8 is_fatal 0 4 2717 24 NotifyCategory::is_fatal 0 1 574 262
////////////////////////////////////////////////////////////////////
//     Function: NotifyCategory::is_fatal
//       Access: Public
//  Description: A shorthand way to write is_on(NS_fatal).
////////////////////////////////////////////////////////////////////
49
inline bool NotifyCategory::is_fatal(void) const;

1904 3 out 0 4 2717 19 NotifyCategory::out 0 1 575 0
77
ostream &NotifyCategory::out(NotifySeverity severity, bool prefix = 1) const;

1905 4 spam 0 4 2717 20 NotifyCategory::spam 0 1 576 255
////////////////////////////////////////////////////////////////////
//     Function: NotifyCategory::spam
//       Access: Public
//  Description: A shorthand way to write out(NS_spam).
////////////////////////////////////////////////////////////////////
60
inline ostream &NotifyCategory::spam(bool prefix = 1) const;

1906 5 debug 0 4 2717 21 NotifyCategory::debug 0 1 577 257
////////////////////////////////////////////////////////////////////
//     Function: NotifyCategory::debug
//       Access: Public
//  Description: A shorthand way to write out(NS_debug).
////////////////////////////////////////////////////////////////////
61
inline ostream &NotifyCategory::debug(bool prefix = 1) const;

1907 4 info 0 4 2717 20 NotifyCategory::info 0 1 578 255
////////////////////////////////////////////////////////////////////
//     Function: NotifyCategory::info
//       Access: Public
//  Description: A shorthand way to write out(NS_info).
////////////////////////////////////////////////////////////////////
60
inline ostream &NotifyCategory::info(bool prefix = 1) const;

1908 7 warning 0 4 2717 23 NotifyCategory::warning 0 1 579 261
////////////////////////////////////////////////////////////////////
//     Function: NotifyCategory::warning
//       Access: Public
//  Description: A shorthand way to write out(NS_warning).
////////////////////////////////////////////////////////////////////
63
inline ostream &NotifyCategory::warning(bool prefix = 1) const;

1909 5 error 0 4 2717 21 NotifyCategory::error 0 1 580 257
////////////////////////////////////////////////////////////////////
//     Function: NotifyCategory::error
//       Access: Public
//  Description: A shorthand way to write out(NS_error).
////////////////////////////////////////////////////////////////////
61
inline ostream &NotifyCategory::error(bool prefix = 1) const;

1910 5 fatal 0 4 2717 21 NotifyCategory::fatal 0 1 581 257
////////////////////////////////////////////////////////////////////
//     Function: NotifyCategory::fatal
//       Access: Public
//  Description: A shorthand way to write out(NS_fatal).
////////////////////////////////////////////////////////////////////
61
inline ostream &NotifyCategory::fatal(bool prefix = 1) const;

1911 16 get_num_children 0 4 2717 32 NotifyCategory::get_num_children 0 1 582 0
49
int NotifyCategory::get_num_children(void) const;

1912 9 get_child 0 4 2717 25 NotifyCategory::get_child 0 1 583 0
55
NotifyCategory *NotifyCategory::get_child(int i) const;

1913 16 set_server_delta 0 4 2717 32 NotifyCategory::set_server_delta 0 1 584 0
61
static void NotifyCategory::set_server_delta(long int delta);

1914 15 ~NotifyCategory 0 4 2717 31 NotifyCategory::~NotifyCategory 0 0 0
38
NotifyCategory::~NotifyCategory(void);

1915 14 OEncryptStream 0 4 2719 30 OEncryptStream::OEncryptStream 0 2 589 590 454
////////////////////////////////////////////////////////////////////
//     Function: OEncryptStream::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: OEncryptStream::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
138
inline OEncryptStream::OEncryptStream(void);
inline OEncryptStream::OEncryptStream(ostream *dest, bool owns_dest, string const &password);

1916 4 open 0 4 2719 20 OEncryptStream::open 0 1 591 220
////////////////////////////////////////////////////////////////////
//     Function: OEncryptStream::open
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
99
inline OEncryptStream &OEncryptStream::open(ostream *dest, bool owns_dest, string const &password);

1917 5 close 0 4 2719 21 OEncryptStream::close 0 1 592 344
////////////////////////////////////////////////////////////////////
//     Function: OEncryptStream::close
//       Access: Published
//  Description: Resets the EncryptStream to empty, but does not actually
//               close the dest ostream unless owns_dest was true.
////////////////////////////////////////////////////////////////////
51
inline OEncryptStream &OEncryptStream::close(void);

1918 13 set_algorithm 0 4 2719 29 OEncryptStream::set_algorithm 0 1 593 722
////////////////////////////////////////////////////////////////////
//     Function: OEncryptStream::set_algorithm
//       Access: Published
//  Description: Specifies the encryption algorithm that should be
//               used for future calls to open().  The default
//               is whatever is specified by the encryption-algorithm
//               config variable.  The complete set of available
//               algorithms is defined by the current version of
//               OpenSSL.
//
//               If an invalid algorithm is specified, there is no
//               immediate error return code, but open() will
//               fail.
////////////////////////////////////////////////////////////////////
67
inline void OEncryptStream::set_algorithm(string const &algorithm);

1919 14 set_key_length 0 4 2719 30 OEncryptStream::set_key_length 0 1 594 658
////////////////////////////////////////////////////////////////////
//     Function: OEncryptStream::set_key_length
//       Access: Published
//  Description: Specifies the length of the key, in bits, that should
//               be used to encrypt the stream in future calls to
//               open().  The default is whatever is specified
//               by the encryption-key-length config variable.  
//
//               If an invalid key_length for the chosen algorithm is
//               specified, there is no immediate error return code,
//               but open() will fail.
////////////////////////////////////////////////////////////////////
59
inline void OEncryptStream::set_key_length(int key_length);

1920 19 set_iteration_count 0 4 2719 35 OEncryptStream::set_iteration_count 0 1 595 851
////////////////////////////////////////////////////////////////////
//     Function: OEncryptStream::set_iteration_count
//       Access: Published
//  Description: Specifies the number of times to repeatedly hash the
//               key before writing it to the stream in future calls
//               to open().  Its purpose is to make it
//               computationally more expensive for an attacker to
//               search the key space exhaustively.  This should be a
//               multiple of 1,000 and should not exceed about 65
//               million; the value 0 indicates just one application
//               of the hashing algorithm.
//
//               The default is whatever is specified by the
//               encryption-iteration-count config variable.
////////////////////////////////////////////////////////////////////
69
inline void OEncryptStream::set_iteration_count(int iteration_count);

1921 15 ~OEncryptStream 0 4 2719 31 OEncryptStream::~OEncryptStream 0 0 0
38
OEncryptStream::~OEncryptStream(void);

1922 11 OFileStream 0 4 2720 24 OFileStream::OFileStream 0 2 596 597 448
////////////////////////////////////////////////////////////////////
//     Function: OFileStream::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: OFileStream::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
136
inline OFileStream::OFileStream(void);
inline OFileStream::OFileStream(char const *filename, ios_base::openmode mode = ::ios_base::out);

1923 12 ~OFileStream 0 4 2720 25 OFileStream::~OFileStream 0 0 222
////////////////////////////////////////////////////////////////////
//     Function: OFileStream::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
39
inline OFileStream::~OFileStream(void);

1924 4 open 0 4 2720 17 OFileStream::open 0 1 598 217
////////////////////////////////////////////////////////////////////
//     Function: OFileStream::open
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
95
inline void OFileStream::open(char const *filename, ios_base::openmode mode = ::ios_base::out);

1925 5 close 0 4 2720 18 OFileStream::close 0 1 599 218
////////////////////////////////////////////////////////////////////
//     Function: OFileStream::close
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
37
inline void OFileStream::close(void);

1926 27 upcast_to_StreamWrapperBase 0 12 2721 43 OStreamWrapper::upcast_to_StreamWrapperBase 0 1 602 47
upcast from OStreamWrapper to StreamWrapperBase
69
StreamWrapperBase *OStreamWrapper::upcast_to_StreamWrapperBase(void);

1927 14 OStreamWrapper 0 4 2721 30 OStreamWrapper::OStreamWrapper 0 1 600 453
////////////////////////////////////////////////////////////////////
//     Function: OStreamWrapper::Constructor
//       Access: Public
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: OStreamWrapper::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
55
inline OStreamWrapper::OStreamWrapper(ostream &stream);

1928 15 ~OStreamWrapper 0 4 2721 31 OStreamWrapper::~OStreamWrapper 0 0 0
38
OStreamWrapper::~OStreamWrapper(void);

1929 11 get_ostream 0 4 2721 27 OStreamWrapper::get_ostream 0 1 601 271
////////////////////////////////////////////////////////////////////
//     Function: OStreamWrapper::get_ostream
//       Access: Published
//  Description: Returns the ostream this object is wrapping.
////////////////////////////////////////////////////////////////////
56
inline ostream *OStreamWrapper::get_ostream(void) const;

1930 14 PointerToArray 0 4 2723 40 PointerToArray< double >::PointerToArray 0 3 603 604 605 0
277
inline PointerToArray< double >::PointerToArray(TypeHandle type_handle = (_get_type_handle((double const *)(0))));
inline PointerToArray< double >::PointerToArray(PointerToArray< double > const &copy);
PointerToArray< double >::PointerToArray(PyObject *self, PyObject *source);

1931 11 empty_array 0 4 2723 37 PointerToArray< double >::empty_array 0 1 606 0
153
static inline PointerToArray< double > PointerToArray< double >::empty_array(size_t n, TypeHandle type_handle = (_get_type_handle((double const *)(0))));

1932 4 size 0 4 2723 30 PointerToArray< double >::size 0 1 607 0
57
inline size_t PointerToArray< double >::size(void) const;

1933 9 push_back 0 4 2723 35 PointerToArray< double >::push_back 0 1 608 0
65
inline void PointerToArray< double >::push_back(double const &x);

1934 8 pop_back 0 4 2723 34 PointerToArray< double >::pop_back 0 1 609 0
53
inline void PointerToArray< double >::pop_back(void);

1935 11 get_element 0 4 2723 37 PointerToArray< double >::get_element 0 1 610 0
75
inline double const &PointerToArray< double >::get_element(size_t n) const;

1936 11 set_element 0 4 2723 37 PointerToArray< double >::set_element 0 1 611 0
81
inline void PointerToArray< double >::set_element(size_t n, double const &value);

1937 11 __getitem__ 0 4 2723 37 PointerToArray< double >::__getitem__ 0 1 612 0
68
double const &PointerToArray< double >::__getitem__(size_t n) const;

1938 11 __setitem__ 0 4 2723 37 PointerToArray< double >::__setitem__ 0 1 613 0
74
void PointerToArray< double >::__setitem__(size_t n, double const &value);

1939 8 get_data 0 4 2723 34 PointerToArray< double >::get_data 0 1 614 0
61
inline string PointerToArray< double >::get_data(void) const;

1940 8 set_data 0 4 2723 34 PointerToArray< double >::set_data 0 1 615 0
67
inline void PointerToArray< double >::set_data(string const &data);

1941 11 get_subdata 0 4 2723 37 PointerToArray< double >::get_subdata 0 1 616 0
82
inline string PointerToArray< double >::get_subdata(size_t n, size_t count) const;

1942 11 set_subdata 0 4 2723 37 PointerToArray< double >::set_subdata 0 1 617 0
94
inline void PointerToArray< double >::set_subdata(size_t n, size_t count, string const &data);

1943 13 get_ref_count 0 4 2723 39 PointerToArray< double >::get_ref_count 0 1 618 0
63
inline int PointerToArray< double >::get_ref_count(void) const;

1944 18 get_node_ref_count 0 4 2723 44 PointerToArray< double >::get_node_ref_count 0 1 619 0
68
inline int PointerToArray< double >::get_node_ref_count(void) const;

1945 13 __getbuffer__ 0 4 2723 39 PointerToArray< double >::__getbuffer__ 0 1 620 0
88
int PointerToArray< double >::__getbuffer__(PyObject *self, Py_buffer *view, int flags);

1946 17 __releasebuffer__ 0 4 2723 43 PointerToArray< double >::__releasebuffer__ 0 1 621 0
88
void PointerToArray< double >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

1947 15 ~PointerToArray 0 4 2723 41 PointerToArray< double >::~PointerToArray 0 0 0
48
PointerToArray< double >::~PointerToArray(void);

1948 14 PointerToArray 0 4 2725 39 PointerToArray< float >::PointerToArray 0 3 622 623 624 0
272
inline PointerToArray< float >::PointerToArray(TypeHandle type_handle = (_get_type_handle((float const *)(0))));
inline PointerToArray< float >::PointerToArray(PointerToArray< float > const &copy);
PointerToArray< float >::PointerToArray(PyObject *self, PyObject *source);

1949 11 empty_array 0 4 2725 36 PointerToArray< float >::empty_array 0 1 625 0
150
static inline PointerToArray< float > PointerToArray< float >::empty_array(size_t n, TypeHandle type_handle = (_get_type_handle((float const *)(0))));

1950 4 size 0 4 2725 29 PointerToArray< float >::size 0 1 626 0
56
inline size_t PointerToArray< float >::size(void) const;

1951 9 push_back 0 4 2725 34 PointerToArray< float >::push_back 0 1 627 0
63
inline void PointerToArray< float >::push_back(float const &x);

1952 8 pop_back 0 4 2725 33 PointerToArray< float >::pop_back 0 1 628 0
52
inline void PointerToArray< float >::pop_back(void);

1953 11 get_element 0 4 2725 36 PointerToArray< float >::get_element 0 1 629 0
73
inline float const &PointerToArray< float >::get_element(size_t n) const;

1954 11 set_element 0 4 2725 36 PointerToArray< float >::set_element 0 1 630 0
79
inline void PointerToArray< float >::set_element(size_t n, float const &value);

1955 11 __getitem__ 0 4 2725 36 PointerToArray< float >::__getitem__ 0 1 631 0
66
float const &PointerToArray< float >::__getitem__(size_t n) const;

1956 11 __setitem__ 0 4 2725 36 PointerToArray< float >::__setitem__ 0 1 632 0
72
void PointerToArray< float >::__setitem__(size_t n, float const &value);

1957 8 get_data 0 4 2725 33 PointerToArray< float >::get_data 0 1 633 0
60
inline string PointerToArray< float >::get_data(void) const;

1958 8 set_data 0 4 2725 33 PointerToArray< float >::set_data 0 1 634 0
66
inline void PointerToArray< float >::set_data(string const &data);

1959 11 get_subdata 0 4 2725 36 PointerToArray< float >::get_subdata 0 1 635 0
81
inline string PointerToArray< float >::get_subdata(size_t n, size_t count) const;

1960 11 set_subdata 0 4 2725 36 PointerToArray< float >::set_subdata 0 1 636 0
93
inline void PointerToArray< float >::set_subdata(size_t n, size_t count, string const &data);

1961 13 get_ref_count 0 4 2725 38 PointerToArray< float >::get_ref_count 0 1 637 0
62
inline int PointerToArray< float >::get_ref_count(void) const;

1962 18 get_node_ref_count 0 4 2725 43 PointerToArray< float >::get_node_ref_count 0 1 638 0
67
inline int PointerToArray< float >::get_node_ref_count(void) const;

1963 13 __getbuffer__ 0 4 2725 38 PointerToArray< float >::__getbuffer__ 0 1 639 0
87
int PointerToArray< float >::__getbuffer__(PyObject *self, Py_buffer *view, int flags);

1964 17 __releasebuffer__ 0 4 2725 42 PointerToArray< float >::__releasebuffer__ 0 1 640 0
87
void PointerToArray< float >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

1965 15 ~PointerToArray 0 4 2725 40 PointerToArray< float >::~PointerToArray 0 0 0
47
PointerToArray< float >::~PointerToArray(void);

1966 14 PointerToArray 0 4 2727 37 PointerToArray< int >::PointerToArray 0 3 641 642 643 0
262
inline PointerToArray< int >::PointerToArray(TypeHandle type_handle = (_get_type_handle((int const *)(0))));
inline PointerToArray< int >::PointerToArray(PointerToArray< int > const &copy);
PointerToArray< int >::PointerToArray(PyObject *self, PyObject *source);

1967 11 empty_array 0 4 2727 34 PointerToArray< int >::empty_array 0 1 644 0
144
static inline PointerToArray< int > PointerToArray< int >::empty_array(size_t n, TypeHandle type_handle = (_get_type_handle((int const *)(0))));

1968 4 size 0 4 2727 27 PointerToArray< int >::size 0 1 645 0
54
inline size_t PointerToArray< int >::size(void) const;

1969 9 push_back 0 4 2727 32 PointerToArray< int >::push_back 0 1 646 0
59
inline void PointerToArray< int >::push_back(int const &x);

1970 8 pop_back 0 4 2727 31 PointerToArray< int >::pop_back 0 1 647 0
50
inline void PointerToArray< int >::pop_back(void);

1971 11 get_element 0 4 2727 34 PointerToArray< int >::get_element 0 1 648 0
69
inline int const &PointerToArray< int >::get_element(size_t n) const;

1972 11 set_element 0 4 2727 34 PointerToArray< int >::set_element 0 1 649 0
75
inline void PointerToArray< int >::set_element(size_t n, int const &value);

1973 11 __getitem__ 0 4 2727 34 PointerToArray< int >::__getitem__ 0 1 650 0
62
int const &PointerToArray< int >::__getitem__(size_t n) const;

1974 11 __setitem__ 0 4 2727 34 PointerToArray< int >::__setitem__ 0 1 651 0
68
void PointerToArray< int >::__setitem__(size_t n, int const &value);

1975 8 get_data 0 4 2727 31 PointerToArray< int >::get_data 0 1 652 0
58
inline string PointerToArray< int >::get_data(void) const;

1976 8 set_data 0 4 2727 31 PointerToArray< int >::set_data 0 1 653 0
64
inline void PointerToArray< int >::set_data(string const &data);

1977 11 get_subdata 0 4 2727 34 PointerToArray< int >::get_subdata 0 1 654 0
79
inline string PointerToArray< int >::get_subdata(size_t n, size_t count) const;

1978 11 set_subdata 0 4 2727 34 PointerToArray< int >::set_subdata 0 1 655 0
91
inline void PointerToArray< int >::set_subdata(size_t n, size_t count, string const &data);

1979 13 get_ref_count 0 4 2727 36 PointerToArray< int >::get_ref_count 0 1 656 0
60
inline int PointerToArray< int >::get_ref_count(void) const;

1980 18 get_node_ref_count 0 4 2727 41 PointerToArray< int >::get_node_ref_count 0 1 657 0
65
inline int PointerToArray< int >::get_node_ref_count(void) const;

1981 13 __getbuffer__ 0 4 2727 36 PointerToArray< int >::__getbuffer__ 0 1 658 0
85
int PointerToArray< int >::__getbuffer__(PyObject *self, Py_buffer *view, int flags);

1982 17 __releasebuffer__ 0 4 2727 40 PointerToArray< int >::__releasebuffer__ 0 1 659 0
85
void PointerToArray< int >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

1983 15 ~PointerToArray 0 4 2727 38 PointerToArray< int >::~PointerToArray 0 0 0
45
PointerToArray< int >::~PointerToArray(void);

1984 14 PointerToArray 0 4 2729 47 PointerToArray< unsigned char >::PointerToArray 0 3 660 661 662 0
312
inline PointerToArray< unsigned char >::PointerToArray(TypeHandle type_handle = (_get_type_handle((unsigned char const *)(0))));
inline PointerToArray< unsigned char >::PointerToArray(PointerToArray< unsigned char > const &copy);
PointerToArray< unsigned char >::PointerToArray(PyObject *self, PyObject *source);

1985 11 empty_array 0 4 2729 44 PointerToArray< unsigned char >::empty_array 0 1 663 0
174
static inline PointerToArray< unsigned char > PointerToArray< unsigned char >::empty_array(size_t n, TypeHandle type_handle = (_get_type_handle((unsigned char const *)(0))));

1986 4 size 0 4 2729 37 PointerToArray< unsigned char >::size 0 1 664 0
64
inline size_t PointerToArray< unsigned char >::size(void) const;

1987 9 push_back 0 4 2729 42 PointerToArray< unsigned char >::push_back 0 1 665 0
79
inline void PointerToArray< unsigned char >::push_back(unsigned char const &x);

1988 8 pop_back 0 4 2729 41 PointerToArray< unsigned char >::pop_back 0 1 666 0
60
inline void PointerToArray< unsigned char >::pop_back(void);

1989 11 get_element 0 4 2729 44 PointerToArray< unsigned char >::get_element 0 1 667 0
89
inline unsigned char const &PointerToArray< unsigned char >::get_element(size_t n) const;

1990 11 set_element 0 4 2729 44 PointerToArray< unsigned char >::set_element 0 1 668 0
95
inline void PointerToArray< unsigned char >::set_element(size_t n, unsigned char const &value);

1991 11 __getitem__ 0 4 2729 44 PointerToArray< unsigned char >::__getitem__ 0 1 669 0
82
unsigned char const &PointerToArray< unsigned char >::__getitem__(size_t n) const;

1992 11 __setitem__ 0 4 2729 44 PointerToArray< unsigned char >::__setitem__ 0 1 670 0
88
void PointerToArray< unsigned char >::__setitem__(size_t n, unsigned char const &value);

1993 8 get_data 0 4 2729 41 PointerToArray< unsigned char >::get_data 0 1 671 0
68
inline string PointerToArray< unsigned char >::get_data(void) const;

1994 8 set_data 0 4 2729 41 PointerToArray< unsigned char >::set_data 0 1 672 0
74
inline void PointerToArray< unsigned char >::set_data(string const &data);

1995 11 get_subdata 0 4 2729 44 PointerToArray< unsigned char >::get_subdata 0 1 673 0
89
inline string PointerToArray< unsigned char >::get_subdata(size_t n, size_t count) const;

1996 11 set_subdata 0 4 2729 44 PointerToArray< unsigned char >::set_subdata 0 1 674 0
101
inline void PointerToArray< unsigned char >::set_subdata(size_t n, size_t count, string const &data);

1997 13 get_ref_count 0 4 2729 46 PointerToArray< unsigned char >::get_ref_count 0 1 675 0
70
inline int PointerToArray< unsigned char >::get_ref_count(void) const;

1998 18 get_node_ref_count 0 4 2729 51 PointerToArray< unsigned char >::get_node_ref_count 0 1 676 0
75
inline int PointerToArray< unsigned char >::get_node_ref_count(void) const;

1999 13 __getbuffer__ 0 4 2729 46 PointerToArray< unsigned char >::__getbuffer__ 0 1 677 0
95
int PointerToArray< unsigned char >::__getbuffer__(PyObject *self, Py_buffer *view, int flags);

2000 17 __releasebuffer__ 0 4 2729 50 PointerToArray< unsigned char >::__releasebuffer__ 0 1 678 0
95
void PointerToArray< unsigned char >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

2001 15 ~PointerToArray 0 4 2729 48 PointerToArray< unsigned char >::~PointerToArray 0 0 0
55
PointerToArray< unsigned char >::~PointerToArray(void);

2002 18 get_version_string 0 4 2730 31 PandaSystem::get_version_string 0 1 679 0
52
static string PandaSystem::get_version_string(void);

2003 26 get_package_version_string 0 4 2730 39 PandaSystem::get_package_version_string 0 1 680 0
60
static string PandaSystem::get_package_version_string(void);

2004 20 get_package_host_url 0 4 2730 33 PandaSystem::get_package_host_url 0 1 681 0
54
static string PandaSystem::get_package_host_url(void);

2005 30 get_p3d_coreapi_version_string 0 4 2730 43 PandaSystem::get_p3d_coreapi_version_string 0 1 682 0
64
static string PandaSystem::get_p3d_coreapi_version_string(void);

2006 17 get_major_version 0 4 2730 30 PandaSystem::get_major_version 0 1 683 0
48
static int PandaSystem::get_major_version(void);

2007 17 get_minor_version 0 4 2730 30 PandaSystem::get_minor_version 0 1 684 0
48
static int PandaSystem::get_minor_version(void);

2008 20 get_sequence_version 0 4 2730 33 PandaSystem::get_sequence_version 0 1 685 0
51
static int PandaSystem::get_sequence_version(void);

2009 19 is_official_version 0 4 2730 32 PandaSystem::is_official_version 0 1 686 0
51
static bool PandaSystem::is_official_version(void);

2010 15 get_distributor 0 4 2730 28 PandaSystem::get_distributor 0 1 687 0
49
static string PandaSystem::get_distributor(void);

2011 12 get_compiler 0 4 2730 25 PandaSystem::get_compiler 0 1 688 0
46
static string PandaSystem::get_compiler(void);

2012 14 get_build_date 0 4 2730 27 PandaSystem::get_build_date 0 1 689 0
48
static string PandaSystem::get_build_date(void);

2013 14 get_git_commit 0 4 2730 27 PandaSystem::get_git_commit 0 1 690 0
48
static string PandaSystem::get_git_commit(void);

2014 12 get_platform 0 4 2730 25 PandaSystem::get_platform 0 1 691 0
46
static string PandaSystem::get_platform(void);

2015 10 has_system 0 4 2730 23 PandaSystem::has_system 0 1 692 0
57
bool PandaSystem::has_system(string const &system) const;

2016 15 get_num_systems 0 4 2730 28 PandaSystem::get_num_systems 0 1 693 0
45
int PandaSystem::get_num_systems(void) const;

2017 10 get_system 0 4 2730 23 PandaSystem::get_system 0 1 694 0
44
string PandaSystem::get_system(int n) const;

2018 14 get_system_tag 0 4 2730 27 PandaSystem::get_system_tag 0 1 695 0
82
string PandaSystem::get_system_tag(string const &system, string const &tag) const;

2019 10 add_system 0 4 2730 23 PandaSystem::add_system 0 1 696 0
51
void PandaSystem::add_system(string const &system);

2020 14 set_system_tag 0 4 2730 27 PandaSystem::set_system_tag 0 1 697 0
95
void PandaSystem::set_system_tag(string const &system, string const &tag, string const &value);

2021 9 heap_trim 0 4 2730 22 PandaSystem::heap_trim 0 1 698 0
40
bool PandaSystem::heap_trim(size_t pad);

2022 6 output 0 4 2730 19 PandaSystem::output 0 1 699 0
45
void PandaSystem::output(ostream &out) const;

2023 5 write 0 4 2730 18 PandaSystem::write 0 1 700 0
44
void PandaSystem::write(ostream &out) const;

2024 14 get_global_ptr 0 4 2730 27 PandaSystem::get_global_ptr 0 1 701 0
54
static PandaSystem *PandaSystem::get_global_ptr(void);

2025 14 get_class_type 0 4 2730 27 PandaSystem::get_class_type 0 1 702 0
52
static TypeHandle PandaSystem::get_class_type(void);

2026 12 StreamReader 0 4 2731 26 StreamReader::StreamReader 0 2 703 704 864
////////////////////////////////////////////////////////////////////
//     Function: StreamReader::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: StreamReader::Constructor
//       Access: Published
//  Description: If owns_stream is true, the stream pointer will be
//               deleted when the StreamReader destructs.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: StreamReader::Copy Constructor
//       Access: Published
//  Description: The copy constructor does not copy ownership of the
//               stream.
////////////////////////////////////////////////////////////////////
126
inline StreamReader::StreamReader(istream *in, bool owns_stream);
inline StreamReader::StreamReader(StreamReader const &copy);

2027 10 operator = 0 4 2731 24 StreamReader::operator = 0 1 705 0
63
inline void StreamReader::operator =(StreamReader const &copy);

2028 13 ~StreamReader 0 4 2731 27 StreamReader::~StreamReader 0 0 223
////////////////////////////////////////////////////////////////////
//     Function: StreamReader::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
41
inline StreamReader::~StreamReader(void);

2029 11 get_istream 0 4 2731 25 StreamReader::get_istream 0 1 706 251
////////////////////////////////////////////////////////////////////
//     Function: StreamReader::get_istream
//       Access: Published
//  Description: Returns the stream in use.
////////////////////////////////////////////////////////////////////
54
inline istream *StreamReader::get_istream(void) const;

2030 8 get_bool 0 4 2731 22 StreamReader::get_bool 0 1 707 247
////////////////////////////////////////////////////////////////////
//     Function: StreamReader::get_bool
//       Access: Published
//  Description: Extracts a boolean value.
////////////////////////////////////////////////////////////////////
41
inline bool StreamReader::get_bool(void);

2031 8 get_int8 0 4 2731 22 StreamReader::get_int8 0 1 708 254
////////////////////////////////////////////////////////////////////
//     Function: StreamReader::get_int8
//       Access: Published
//  Description: Extracts a signed 8-bit integer.
////////////////////////////////////////////////////////////////////
44
inline PN_int8 StreamReader::get_int8(void);

2032 9 get_uint8 0 4 2731 23 StreamReader::get_uint8 0 1 709 258
////////////////////////////////////////////////////////////////////
//     Function: StreamReader::get_uint8
//       Access: Published
//  Description: Extracts an unsigned 8-bit integer.
////////////////////////////////////////////////////////////////////
46
inline PN_uint8 StreamReader::get_uint8(void);

2033 9 get_int16 0 4 2731 23 StreamReader::get_int16 0 1 710 256
////////////////////////////////////////////////////////////////////
//     Function: StreamReader::get_int16
//       Access: Published
//  Description: Extracts a signed 16-bit integer.
////////////////////////////////////////////////////////////////////
46
inline PN_int16 StreamReader::get_int16(void);

2034 9 get_int32 0 4 2731 23 StreamReader::get_int32 0 1 711 256
////////////////////////////////////////////////////////////////////
//     Function: StreamReader::get_int32
//       Access: Published
//  Description: Extracts a signed 32-bit integer.
////////////////////////////////////////////////////////////////////
46
inline PN_int32 StreamReader::get_int32(void);

2035 9 get_int64 0 4 2731 23 StreamReader::get_int64 0 1 712 256
////////////////////////////////////////////////////////////////////
//     Function: StreamReader::get_int64
//       Access: Published
//  Description: Extracts a signed 64-bit integer.
////////////////////////////////////////////////////////////////////
46
inline PN_int64 StreamReader::get_int64(void);

2036 10 get_uint16 0 4 2731 24 StreamReader::get_uint16 0 1 713 260
////////////////////////////////////////////////////////////////////
//     Function: StreamReader::get_uint16
//       Access: Published
//  Description: Extracts an unsigned 16-bit integer.
////////////////////////////////////////////////////////////////////
48
inline PN_uint16 StreamReader::get_uint16(void);

2037 10 get_uint32 0 4 2731 24 StreamReader::get_uint32 0 1 714 260
////////////////////////////////////////////////////////////////////
//     Function: StreamReader::get_uint32
//       Access: Published
//  Description: Extracts an unsigned 32-bit integer.
////////////////////////////////////////////////////////////////////
48
inline PN_uint32 StreamReader::get_uint32(void);

2038 10 get_uint64 0 4 2731 24 StreamReader::get_uint64 0 1 715 260
////////////////////////////////////////////////////////////////////
//     Function: StreamReader::get_uint64
//       Access: Published
//  Description: Extracts an unsigned 64-bit integer.
////////////////////////////////////////////////////////////////////
48
inline PN_uint64 StreamReader::get_uint64(void);

2039 11 get_float32 0 4 2731 25 StreamReader::get_float32 0 1 716 445
////////////////////////////////////////////////////////////////////
//     Function: StreamReader::get_float32
//       Access: Published
//  Description: Extracts a 32-bit single-precision floating-point
//               number.  Since this kind of float is not necessarily
//               portable across different architectures, special care
//               is required.
////////////////////////////////////////////////////////////////////
45
inline float StreamReader::get_float32(void);

2040 11 get_float64 0 4 2731 25 StreamReader::get_float64 0 1 717 265
////////////////////////////////////////////////////////////////////
//     Function: StreamReader::get_float64
//       Access: Published
//  Description: Extracts a 64-bit floating-point number.
////////////////////////////////////////////////////////////////////
50
inline PN_float64 StreamReader::get_float64(void);

2041 12 get_be_int16 0 4 2731 26 StreamReader::get_be_int16 0 1 718 270
////////////////////////////////////////////////////////////////////
//     Function: StreamReader::get_be_int16
//       Access: Published
//  Description: Extracts a signed big-endian 16-bit integer.
////////////////////////////////////////////////////////////////////
49
inline PN_int16 StreamReader::get_be_int16(void);

2042 12 get_be_int32 0 4 2731 26 StreamReader::get_be_int32 0 1 719 270
////////////////////////////////////////////////////////////////////
//     Function: StreamReader::get_be_int32
//       Access: Published
//  Description: Extracts a signed big-endian 32-bit integer.
////////////////////////////////////////////////////////////////////
49
inline PN_int32 StreamReader::get_be_int32(void);

2043 12 get_be_int64 0 4 2731 26 StreamReader::get_be_int64 0 1 720 270
////////////////////////////////////////////////////////////////////
//     Function: StreamReader::get_be_int64
//       Access: Published
//  Description: Extracts a signed big-endian 64-bit integer.
////////////////////////////////////////////////////////////////////
49
inline PN_int64 StreamReader::get_be_int64(void);

2044 13 get_be_uint16 0 4 2731 27 StreamReader::get_be_uint16 0 1 721 274
////////////////////////////////////////////////////////////////////
//     Function: StreamReader::get_be_uint16
//       Access: Published
//  Description: Extracts an unsigned big-endian 16-bit integer.
////////////////////////////////////////////////////////////////////
51
inline PN_uint16 StreamReader::get_be_uint16(void);

2045 13 get_be_uint32 0 4 2731 27 StreamReader::get_be_uint32 0 1 722 274
////////////////////////////////////////////////////////////////////
//     Function: StreamReader::get_be_uint32
//       Access: Published
//  Description: Extracts an unsigned big-endian 32-bit integer.
////////////////////////////////////////////////////////////////////
51
inline PN_uint32 StreamReader::get_be_uint32(void);

2046 13 get_be_uint64 0 4 2731 27 StreamReader::get_be_uint64 0 1 723 274
////////////////////////////////////////////////////////////////////
//     Function: StreamReader::get_be_uint64
//       Access: Published
//  Description: Extracts an unsigned big-endian 64-bit integer.
////////////////////////////////////////////////////////////////////
51
inline PN_uint64 StreamReader::get_be_uint64(void);

2047 14 get_be_float32 0 4 2731 28 StreamReader::get_be_float32 0 1 724 459
////////////////////////////////////////////////////////////////////
//     Function: StreamReader::get_be_float32
//       Access: Published
//  Description: Extracts a 32-bit single-precision big-endian
//               floating-point number.  Since this kind of float is
//               not necessarily portable across different
//               architectures, special care is required.
////////////////////////////////////////////////////////////////////
48
inline float StreamReader::get_be_float32(void);

2048 14 get_be_float64 0 4 2731 28 StreamReader::get_be_float64 0 1 725 279
////////////////////////////////////////////////////////////////////
//     Function: StreamReader::get_be_float64
//       Access: Published
//  Description: Extracts a 64-bit big-endian floating-point number.
////////////////////////////////////////////////////////////////////
53
inline PN_float64 StreamReader::get_be_float64(void);

2049 10 get_string 0 4 2731 24 StreamReader::get_string 0 1 726 0
38
string StreamReader::get_string(void);

2050 12 get_string32 0 4 2731 26 StreamReader::get_string32 0 1 727 0
40
string StreamReader::get_string32(void);

2051 12 get_z_string 0 4 2731 26 StreamReader::get_z_string 0 1 728 0
40
string StreamReader::get_z_string(void);

2052 16 get_fixed_string 0 4 2731 30 StreamReader::get_fixed_string 0 1 729 0
51
string StreamReader::get_fixed_string(size_t size);

2053 10 skip_bytes 0 4 2731 24 StreamReader::skip_bytes 0 1 730 0
43
void StreamReader::skip_bytes(size_t size);

2054 13 extract_bytes 0 4 2731 27 StreamReader::extract_bytes 0 1 731 0
118
string StreamReader::extract_bytes(size_t size);
size_t StreamReader::extract_bytes(unsigned char *into, size_t size);

2055 8 readline 0 4 2731 22 StreamReader::readline 0 1 732 0
36
string StreamReader::readline(void);

2056 9 readlines 0 4 2731 23 StreamReader::readlines 0 1 733 0
40
PyObject *StreamReader::readlines(void);

2057 24 upcast_to_IStreamWrapper 0 12 2732 39 StreamWrapper::upcast_to_IStreamWrapper 0 1 736 43
upcast from StreamWrapper to IStreamWrapper
62
IStreamWrapper *StreamWrapper::upcast_to_IStreamWrapper(void);

2058 25 downcast_to_StreamWrapper 0 12 2712 41 IStreamWrapper::downcast_to_StreamWrapper 0 1 737 45
downcast from IStreamWrapper to StreamWrapper
63
StreamWrapper *IStreamWrapper::downcast_to_StreamWrapper(void);

2059 24 upcast_to_OStreamWrapper 0 12 2732 39 StreamWrapper::upcast_to_OStreamWrapper 0 1 738 43
upcast from StreamWrapper to OStreamWrapper
62
OStreamWrapper *StreamWrapper::upcast_to_OStreamWrapper(void);

2060 25 downcast_to_StreamWrapper 0 12 2721 41 OStreamWrapper::downcast_to_StreamWrapper 0 1 739 45
downcast from OStreamWrapper to StreamWrapper
63
StreamWrapper *OStreamWrapper::downcast_to_StreamWrapper(void);

2061 13 StreamWrapper 0 4 2732 28 StreamWrapper::StreamWrapper 0 1 734 451
////////////////////////////////////////////////////////////////////
//     Function: StreamWrapper::Constructor
//       Access: Public
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: StreamWrapper::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
54
inline StreamWrapper::StreamWrapper(iostream &stream);

2062 14 ~StreamWrapper 0 4 2732 29 StreamWrapper::~StreamWrapper 0 0 0
36
StreamWrapper::~StreamWrapper(void);

2063 12 get_iostream 0 4 2732 27 StreamWrapper::get_iostream 0 1 735 272
////////////////////////////////////////////////////////////////////
//     Function: StreamWrapper::get_iostream
//       Access: Published
//  Description: Returns the iostream this object is wrapping.
////////////////////////////////////////////////////////////////////
57
inline iostream *StreamWrapper::get_iostream(void) const;

2064 12 StreamWriter 0 4 2733 26 StreamWriter::StreamWriter 0 2 740 741 757
////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::Constructor
//       Access: Public
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::Copy Constructor
//       Access: Published
//  Description: The copy constructor does not copy ownership of the
//               stream.
////////////////////////////////////////////////////////////////////
127
inline StreamWriter::StreamWriter(ostream *out, bool owns_stream);
inline StreamWriter::StreamWriter(StreamWriter const &copy);

2065 10 operator = 0 4 2733 24 StreamWriter::operator = 0 1 742 0
63
inline void StreamWriter::operator =(StreamWriter const &copy);

2066 13 ~StreamWriter 0 4 2733 27 StreamWriter::~StreamWriter 0 0 223
////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
41
inline StreamWriter::~StreamWriter(void);

2067 11 get_ostream 0 4 2733 25 StreamWriter::get_ostream 0 1 743 251
////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::get_ostream
//       Access: Published
//  Description: Returns the stream in use.
////////////////////////////////////////////////////////////////////
54
inline ostream *StreamWriter::get_ostream(void) const;

2068 8 add_bool 0 4 2733 22 StreamWriter::add_bool 0 1 744 257
////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::add_bool
//       Access: Published
//  Description: Adds a boolean value to the stream.
////////////////////////////////////////////////////////////////////
47
inline void StreamWriter::add_bool(bool value);

2069 8 add_int8 0 4 2733 22 StreamWriter::add_int8 0 1 745 264
////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::add_int8
//       Access: Published
//  Description: Adds a signed 8-bit integer to the stream.
////////////////////////////////////////////////////////////////////
50
inline void StreamWriter::add_int8(PN_int8 value);

2070 9 add_uint8 0 4 2733 23 StreamWriter::add_uint8 0 1 746 268
////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::add_uint8
//       Access: Published
//  Description: Adds an unsigned 8-bit integer to the stream.
////////////////////////////////////////////////////////////////////
52
inline void StreamWriter::add_uint8(PN_uint8 value);

2071 9 add_int16 0 4 2733 23 StreamWriter::add_int16 0 1 747 316
// The default numeric packing is little-endian.

////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::add_int16
//       Access: Published
//  Description: Adds a signed 16-bit integer to the stream.
////////////////////////////////////////////////////////////////////
52
inline void StreamWriter::add_int16(PN_int16 value);

2072 9 add_int32 0 4 2733 23 StreamWriter::add_int32 0 1 748 266
////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::add_int32
//       Access: Published
//  Description: Adds a signed 32-bit integer to the stream.
////////////////////////////////////////////////////////////////////
52
inline void StreamWriter::add_int32(PN_int32 value);

2073 9 add_int64 0 4 2733 23 StreamWriter::add_int64 0 1 749 266
////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::add_int64
//       Access: Published
//  Description: Adds a signed 64-bit integer to the stream.
////////////////////////////////////////////////////////////////////
52
inline void StreamWriter::add_int64(PN_int64 value);

2074 10 add_uint16 0 4 2733 24 StreamWriter::add_uint16 0 1 750 270
////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::add_uint16
//       Access: Published
//  Description: Adds an unsigned 16-bit integer to the stream.
////////////////////////////////////////////////////////////////////
54
inline void StreamWriter::add_uint16(PN_uint16 value);

2075 10 add_uint32 0 4 2733 24 StreamWriter::add_uint32 0 1 751 270
////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::add_uint32
//       Access: Published
//  Description: Adds an unsigned 32-bit integer to the stream.
////////////////////////////////////////////////////////////////////
54
inline void StreamWriter::add_uint32(PN_uint32 value);

2076 10 add_uint64 0 4 2733 24 StreamWriter::add_uint64 0 1 752 270
////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::add_uint64
//       Access: Published
//  Description: Adds an unsigned 64-bit integer to the stream.
////////////////////////////////////////////////////////////////////
54
inline void StreamWriter::add_uint64(PN_uint64 value);

2077 11 add_float32 0 4 2733 25 StreamWriter::add_float32 0 1 753 455
////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::add_float32
//       Access: Published
//  Description: Adds a 32-bit single-precision floating-point number
//               to the stream.  Since this kind of float is not
//               necessarily portable across different architectures,
//               special care is required.
////////////////////////////////////////////////////////////////////
51
inline void StreamWriter::add_float32(float value);

2078 11 add_float64 0 4 2733 25 StreamWriter::add_float64 0 1 754 275
////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::add_float64
//       Access: Published
//  Description: Adds a 64-bit floating-point number to the stream.
////////////////////////////////////////////////////////////////////
56
inline void StreamWriter::add_float64(PN_float64 value);

2079 12 add_be_int16 0 4 2733 26 StreamWriter::add_be_int16 0 1 755 372
// These functions pack numbers big-endian, in case that's desired.

////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::add_be_int16
//       Access: Published
//  Description: Adds a signed 16-bit big-endian integer to the
//               streamWriter.
////////////////////////////////////////////////////////////////////
55
inline void StreamWriter::add_be_int16(PN_int16 value);

2080 12 add_be_int32 0 4 2733 26 StreamWriter::add_be_int32 0 1 756 303
////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::add_be_int32
//       Access: Published
//  Description: Adds a signed 32-bit big-endian integer to the
//               streamWriter.
////////////////////////////////////////////////////////////////////
55
inline void StreamWriter::add_be_int32(PN_int32 value);

2081 12 add_be_int64 0 4 2733 26 StreamWriter::add_be_int64 0 1 757 303
////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::add_be_int64
//       Access: Published
//  Description: Adds a signed 64-bit big-endian integer to the
//               streamWriter.
////////////////////////////////////////////////////////////////////
55
inline void StreamWriter::add_be_int64(PN_int64 value);

2082 13 add_be_uint16 0 4 2733 27 StreamWriter::add_be_uint16 0 1 758 307
////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::add_be_uint16
//       Access: Published
//  Description: Adds an unsigned 16-bit big-endian integer to the
//               streamWriter.
////////////////////////////////////////////////////////////////////
57
inline void StreamWriter::add_be_uint16(PN_uint16 value);

2083 13 add_be_uint32 0 4 2733 27 StreamWriter::add_be_uint32 0 1 759 307
////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::add_be_uint32
//       Access: Published
//  Description: Adds an unsigned 32-bit big-endian integer to the
//               streamWriter.
////////////////////////////////////////////////////////////////////
57
inline void StreamWriter::add_be_uint32(PN_uint32 value);

2084 13 add_be_uint64 0 4 2733 27 StreamWriter::add_be_uint64 0 1 760 307
////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::add_be_uint64
//       Access: Published
//  Description: Adds an unsigned 64-bit big-endian integer to the
//               streamWriter.
////////////////////////////////////////////////////////////////////
57
inline void StreamWriter::add_be_uint64(PN_uint64 value);

2085 14 add_be_float32 0 4 2733 28 StreamWriter::add_be_float32 0 1 761 469
////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::add_be_float32
//       Access: Published
//  Description: Adds a 32-bit single-precision big-endian
//               floating-point number to the stream.  Since this
//               kind of float is not necessarily portable across
//               different architectures, special care is required.
////////////////////////////////////////////////////////////////////
54
inline void StreamWriter::add_be_float32(float value);

2086 14 add_be_float64 0 4 2733 28 StreamWriter::add_be_float64 0 1 762 312
////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::add_be_float64
//       Access: Published
//  Description: Adds a 64-bit big-endian floating-point number to the
//               streamWriter.
////////////////////////////////////////////////////////////////////
59
inline void StreamWriter::add_be_float64(PN_float64 value);

2087 10 add_string 0 4 2733 24 StreamWriter::add_string 0 1 763 334
////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::add_string
//       Access: Published
//  Description: Adds a variable-length string to the stream.  This
//               actually adds a count followed by n bytes.
////////////////////////////////////////////////////////////////////
56
inline void StreamWriter::add_string(string const &str);

2088 12 add_string32 0 4 2733 26 StreamWriter::add_string32 0 1 764 316
////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::add_string32
//       Access: Published
//  Description: Adds a variable-length string to the stream, using a
//               32-bit length field.
////////////////////////////////////////////////////////////////////
58
inline void StreamWriter::add_string32(string const &str);

2089 12 add_z_string 0 4 2733 26 StreamWriter::add_z_string 0 1 765 316
////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::add_z_string
//       Access: Published
//  Description: Adds a variable-length string to the stream, as a
//               NULL-terminated string.
////////////////////////////////////////////////////////////////////
51
inline void StreamWriter::add_z_string(string str);

2090 16 add_fixed_string 0 4 2733 30 StreamWriter::add_fixed_string 0 1 766 517
////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::add_fixed_string
//       Access: Published
//  Description: Adds a fixed-length string to the stream.  If the
//               string given is less than the requested size, this
//               will pad the string out with zeroes; if it is greater
//               than the requested size, this will silently truncate
//               the string.
////////////////////////////////////////////////////////////////////
75
inline void StreamWriter::add_fixed_string(string const &str, size_t size);

2091 9 pad_bytes 0 4 2733 23 StreamWriter::pad_bytes 0 1 767 0
42
void StreamWriter::pad_bytes(size_t size);

2092 11 append_data 0 4 2733 25 StreamWriter::append_data 0 1 768 602
////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::append_data
//       Access: Published
//  Description: Appends some more raw data to the end of the
//               streamWriter.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::append_data
//       Access: Published
//  Description: Appends some more raw data to the end of the
//               streamWriter.
////////////////////////////////////////////////////////////////////
128
inline void StreamWriter::append_data(void const *data, size_t size);
inline void StreamWriter::append_data(string const &data);

2093 5 flush 0 4 2733 19 StreamWriter::flush 0 1 769 258
////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::flush
//       Access: Published
//  Description: Calls flush() on the underlying stream.
////////////////////////////////////////////////////////////////////
38
inline void StreamWriter::flush(void);

2094 5 write 0 4 2733 19 StreamWriter::write 0 1 770 371
////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::write
//       Access: Published
//  Description: A synonym of append_data().  This is useful when
//               assigning the StreamWriter to sys.stderr and/or
//               sys.stdout in Python.
////////////////////////////////////////////////////////////////////
51
inline void StreamWriter::write(string const &str);

2095 11 TextEncoder 0 4 2734 24 TextEncoder::TextEncoder 0 2 771 772 453
////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
96
inline TextEncoder::TextEncoder(void);
inline TextEncoder::TextEncoder(TextEncoder const &copy);

2096 12 set_encoding 0 4 2734 25 TextEncoder::set_encoding 0 1 773 692
////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::set_encoding
//       Access: Published
//  Description: Specifies how the string set via set_text() is to be
//               interpreted.  The default, E_iso8859, means a
//               standard string with one-byte characters
//               (i.e. ASCII).  Other encodings are possible to take
//               advantage of character sets with more than 256
//               characters.
//
//               This affects only future calls to set_text(); it does
//               not change text that was set previously.
////////////////////////////////////////////////////////////////////
70
inline void TextEncoder::set_encoding(TextEncoder::Encoding encoding);

2097 12 get_encoding 0 4 2734 25 TextEncoder::get_encoding 0 1 774 344
////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::get_encoding
//       Access: Published
//  Description: Returns the encoding by which the string set via
//               set_text() is to be interpreted.  See set_encoding().
////////////////////////////////////////////////////////////////////
67
inline TextEncoder::Encoding TextEncoder::get_encoding(void) const;

2098 20 set_default_encoding 0 4 2734 33 TextEncoder::set_default_encoding 0 1 775 387
////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::set_default_encoding
//       Access: Published, Static
//  Description: Specifies the default encoding to be used for all
//               subsequently created TextEncoder objects.  See
//               set_encoding().
////////////////////////////////////////////////////////////////////
85
static inline void TextEncoder::set_default_encoding(TextEncoder::Encoding encoding);

2099 20 get_default_encoding 0 4 2734 33 TextEncoder::get_default_encoding 0 1 776 387
////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::get_default_encoding
//       Access: Published, Static
//  Description: Specifies the default encoding to be used for all
//               subsequently created TextEncoder objects.  See
//               set_encoding().
////////////////////////////////////////////////////////////////////
76
static inline TextEncoder::Encoding TextEncoder::get_default_encoding(void);

2100 8 set_text 0 4 2734 21 TextEncoder::set_text 0 2 777 778 1135
////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::set_text
//       Access: Published
//  Description: Changes the text that is stored in the encoder.  The
//               text should be encoded according to the method
//               indicated by set_encoding().  Subsequent calls to
//               get_text() will return this same string, while
//               get_wtext() will return the decoded version of the
//               string.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::set_text
//       Access: Published
//  Description: The two-parameter version of set_text() accepts an
//               explicit encoding; the text is immediately decoded
//               and stored as a wide-character string.  Subsequent
//               calls to get_text() will return the same text
//               re-encoded using whichever encoding is specified by
//               set_encoding().
////////////////////////////////////////////////////////////////////
141
inline void TextEncoder::set_text(string const &text);
inline void TextEncoder::set_text(string const &text, TextEncoder::Encoding encoding);

2101 10 clear_text 0 4 2734 23 TextEncoder::clear_text 0 1 779 261
////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::clear_text
//       Access: Published
//  Description: Removes the text from the TextEncoder.
////////////////////////////////////////////////////////////////////
42
inline void TextEncoder::clear_text(void);

2102 8 has_text 0 4 2734 21 TextEncoder::has_text 0 1 780 220
////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::has_text
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
46
inline bool TextEncoder::has_text(void) const;

2103 10 make_upper 0 4 2734 23 TextEncoder::make_upper 0 1 781 0
35
void TextEncoder::make_upper(void);

2104 10 make_lower 0 4 2734 23 TextEncoder::make_lower 0 1 782 0
35
void TextEncoder::make_lower(void);

2105 8 get_text 0 4 2734 21 TextEncoder::get_text 0 2 783 784 618
////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::get_text
//       Access: Published
//  Description: Returns the current text, as encoded via the current
//               encoding system.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::get_text
//       Access: Published
//  Description: Returns the current text, as encoded via the indicated
//               encoding system.
////////////////////////////////////////////////////////////////////
123
inline string TextEncoder::get_text(void) const;
inline string TextEncoder::get_text(TextEncoder::Encoding encoding) const;

2106 11 append_text 0 4 2734 24 TextEncoder::append_text 0 1 785 300
////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::append_text
//       Access: Published
//  Description: Appends the indicates string to the end of the stored
//               text.
////////////////////////////////////////////////////////////////////
57
inline void TextEncoder::append_text(string const &text);

2107 19 append_unicode_char 0 4 2734 32 TextEncoder::append_unicode_char 0 1 786 380
////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::append_unicode_char
//       Access: Published
//  Description: Appends a single character to the end of the stored
//               text.  This may be a wide character, up to 16 bits in
//               Unicode.
////////////////////////////////////////////////////////////////////
60
inline void TextEncoder::append_unicode_char(int character);

2108 13 get_num_chars 0 4 2734 26 TextEncoder::get_num_chars 0 1 787 411
////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::get_num_chars
//       Access: Published
//  Description: Returns the number of characters in the stored text.
//               This is a count of wide characters, after the string
//               has been decoded according to set_encoding().
////////////////////////////////////////////////////////////////////
50
inline int TextEncoder::get_num_chars(void) const;

2109 16 get_unicode_char 0 4 2734 29 TextEncoder::get_unicode_char 0 1 788 459
////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::get_unicode_char
//       Access: Published
//  Description: Returns the Unicode value of the nth character in the
//               stored text.  This may be a wide character (greater
//               than 255), after the string has been decoded
//               according to set_encoding().
////////////////////////////////////////////////////////////////////
58
inline int TextEncoder::get_unicode_char(int index) const;

2110 16 set_unicode_char 0 4 2734 29 TextEncoder::set_unicode_char 0 1 789 456
////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::set_unicode_char
//       Access: Published
//  Description: Sets the Unicode value of the nth character in the
//               stored text.  This may be a wide character (greater
//               than 255), after the string has been decoded
//               according to set_encoding().
////////////////////////////////////////////////////////////////////
68
inline void TextEncoder::set_unicode_char(int index, int character);

2111 16 get_encoded_char 0 4 2734 29 TextEncoder::get_encoded_char 0 2 790 791 668
////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::get_encoded_char
//       Access: Published
//  Description: Returns the nth char of the stored text, as a one-,
//               two-, or three-byte encoded string.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::get_encoded_char
//       Access: Published
//  Description: Returns the nth char of the stored text, as a one-,
//               two-, or three-byte encoded string.
////////////////////////////////////////////////////////////////////
155
inline string TextEncoder::get_encoded_char(int index) const;
inline string TextEncoder::get_encoded_char(int index, TextEncoder::Encoding encoding) const;

2112 17 get_text_as_ascii 0 4 2734 30 TextEncoder::get_text_as_ascii 0 1 792 1136
////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::get_text_as_ascii
//       Access: Published
//  Description: Returns the text associated with the node, converted
//               as nearly as possible to a fully-ASCII
//               representation.  This means replacing accented
//               letters with their unaccented ASCII equivalents.
//
//               It is possible that some characters in the string
//               cannot be converted to ASCII.  (The string may
//               involve symbols like the copyright symbol, for
//               instance, or it might involve letters in some other
//               alphabet such as Greek or Cyrillic, or even Latin
//               letters like thorn or eth that are not part of the
//               ASCII character set.)  In this case, as much of the
//               string as possible will be converted to ASCII, and
//               the nonconvertible characters will remain encoded in
//               the encoding specified by set_encoding().
////////////////////////////////////////////////////////////////////
57
inline string TextEncoder::get_text_as_ascii(void) const;

2113 13 reencode_text 0 4 2734 26 TextEncoder::reencode_text 0 1 793 559
////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::reencode_text
//       Access: Published, Static
//  Description: Given the indicated text string, which is assumed to
//               be encoded via the encoding "from", decodes it and
//               then reencodes it into the encoding "to", and returns
//               the newly encoded string.  This does not change or
//               affect any properties on the TextEncoder itself.
////////////////////////////////////////////////////////////////////
122
static inline string TextEncoder::reencode_text(string const &text, TextEncoder::Encoding from, TextEncoder::Encoding to);

2114 15 unicode_isalpha 0 4 2734 28 TextEncoder::unicode_isalpha 0 1 794 408
////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::unicode_isalpha
//       Access: Published, Static
//  Description: Returns true if the indicated character is an
//               alphabetic letter, false otherwise.  This is akin to
//               ctype's isalpha(), extended to Unicode.
////////////////////////////////////////////////////////////////////
63
static inline bool TextEncoder::unicode_isalpha(int character);

2115 15 unicode_isdigit 0 4 2734 28 TextEncoder::unicode_isdigit 0 1 795 403
////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::unicode_isdigit
//       Access: Published, Static
//  Description: Returns true if the indicated character is a
//               numeric digit, false otherwise.  This is akin to
//               ctype's isdigit(), extended to Unicode.
////////////////////////////////////////////////////////////////////
63
static inline bool TextEncoder::unicode_isdigit(int character);

2116 15 unicode_ispunct 0 4 2734 28 TextEncoder::unicode_ispunct 0 1 796 406
////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::unicode_ispunct
//       Access: Published, Static
//  Description: Returns true if the indicated character is a
//               punctuation mark, false otherwise.  This is akin to
//               ctype's ispunct(), extended to Unicode.
////////////////////////////////////////////////////////////////////
63
static inline bool TextEncoder::unicode_ispunct(int character);

2117 15 unicode_islower 0 4 2734 28 TextEncoder::unicode_islower 0 1 797 406
////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::unicode_islower
//       Access: Published, Static
//  Description: Returns true if the indicated character is a
//               lowercase letter, false otherwise.  This is akin to
//               ctype's islower(), extended to Unicode.
////////////////////////////////////////////////////////////////////
63
static inline bool TextEncoder::unicode_islower(int character);

2118 15 unicode_isupper 0 4 2734 28 TextEncoder::unicode_isupper 0 1 798 407
////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::unicode_isupper
//       Access: Published, Static
//  Description: Returns true if the indicated character is an
//               uppercase letter, false otherwise.  This is akin to
//               ctype's isupper(), extended to Unicode.
////////////////////////////////////////////////////////////////////
63
static inline bool TextEncoder::unicode_isupper(int character);

2119 15 unicode_isspace 0 4 2734 28 TextEncoder::unicode_isspace 0 1 799 407
////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::unicode_isspace
//       Access: Published, Static
//  Description: Returns true if the indicated character is a
//               whitespace letter, false otherwise.  This is akin to
//               ctype's isspace(), extended to Unicode.
////////////////////////////////////////////////////////////////////
63
static inline bool TextEncoder::unicode_isspace(int character);

2120 15 unicode_toupper 0 4 2734 28 TextEncoder::unicode_toupper 0 1 800 391
////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::unicode_toupper
//       Access: Published, Static
//  Description: Returns the uppercase equivalent of the given Unicode
//               character.  This is akin to ctype's toupper(),
//               extended to Unicode.
////////////////////////////////////////////////////////////////////
62
static inline int TextEncoder::unicode_toupper(int character);

2121 15 unicode_tolower 0 4 2734 28 TextEncoder::unicode_tolower 0 1 801 391
////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::unicode_tolower
//       Access: Published, Static
//  Description: Returns the uppercase equivalent of the given Unicode
//               character.  This is akin to ctype's tolower(),
//               extended to Unicode.
////////////////////////////////////////////////////////////////////
62
static inline int TextEncoder::unicode_tolower(int character);

2122 5 upper 0 4 2734 18 TextEncoder::upper 0 2 802 803 668
////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::upper
//       Access: Published, Static
//  Description: Converts the string to uppercase, assuming the string
//               is encoded in the default encoding.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::upper
//       Access: Published, Static
//  Description: Converts the string to uppercase, assuming the string
//               is encoded in the indicated encoding.
////////////////////////////////////////////////////////////////////
157
static inline string TextEncoder::upper(string const &source);
static inline string TextEncoder::upper(string const &source, TextEncoder::Encoding encoding);

2123 5 lower 0 4 2734 18 TextEncoder::lower 0 2 804 805 668
////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::lower
//       Access: Published, Static
//  Description: Converts the string to lowercase, assuming the string
//               is encoded in the default encoding.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::lower
//       Access: Published, Static
//  Description: Converts the string to lowercase, assuming the string
//               is encoded in the indicated encoding.
////////////////////////////////////////////////////////////////////
157
static inline string TextEncoder::lower(string const &source);
static inline string TextEncoder::lower(string const &source, TextEncoder::Encoding encoding);

2124 9 set_wtext 0 4 2734 22 TextEncoder::set_wtext 0 1 806 558
// Direct support for wide-character strings.  Now publishable with
// the new wstring support in interrogate.

////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::set_wtext
//       Access: Published
//  Description: Changes the text that is stored in the encoder.
//               Subsequent calls to get_wtext() will return this same
//               string, while get_text() will return the encoded
//               version of the string.
////////////////////////////////////////////////////////////////////
57
inline void TextEncoder::set_wtext(wstring const &wtext);

2125 9 get_wtext 0 4 2734 22 TextEncoder::get_wtext 0 1 807 316
////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::get_wtext
//       Access: Published
//  Description: Returns the text associated with the TextEncoder, as
//               a wide-character string.
////////////////////////////////////////////////////////////////////
57
inline wstring const &TextEncoder::get_wtext(void) const;

2126 12 append_wtext 0 4 2734 25 TextEncoder::append_wtext 0 1 808 316
////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::append_wtext
//       Access: Published
//  Description: Appends the indicates string to the end of the stored
//               wide-character text.
////////////////////////////////////////////////////////////////////
59
inline void TextEncoder::append_wtext(wstring const &text);

2127 18 get_wtext_as_ascii 0 4 2734 31 TextEncoder::get_wtext_as_ascii 0 1 809 0
52
wstring TextEncoder::get_wtext_as_ascii(void) const;

2128 8 is_wtext 0 4 2734 21 TextEncoder::is_wtext 0 1 810 0
39
bool TextEncoder::is_wtext(void) const;

2129 12 encode_wchar 0 4 2734 25 TextEncoder::encode_wchar 0 1 811 0
84
static string TextEncoder::encode_wchar(wchar_t ch, TextEncoder::Encoding encoding);

2130 12 encode_wtext 0 4 2734 25 TextEncoder::encode_wtext 0 2 812 813 330
////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::encode_wtext
//       Access: Published
//  Description: Encodes a wide-text string into a single-char string,
//               according to the current encoding.
////////////////////////////////////////////////////////////////////
163
inline string TextEncoder::encode_wtext(wstring const &wtext) const;
static string TextEncoder::encode_wtext(wstring const &wtext, TextEncoder::Encoding encoding);

2131 11 decode_text 0 4 2734 24 TextEncoder::decode_text 0 2 814 815 332
////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::decode_text
//       Access: Published
//  Description: Returns the given wstring decoded to a single-byte
//               string, via the current encoding system.
////////////////////////////////////////////////////////////////////
159
inline wstring TextEncoder::decode_text(string const &text) const;
static wstring TextEncoder::decode_text(string const &text, TextEncoder::Encoding encoding);

2132 12 ~TextEncoder 0 4 2734 25 TextEncoder::~TextEncoder 0 0 0
32
TextEncoder::~TextEncoder(void);

2133 4 make 0 4 2736 16 TypeHandle::make 0 1 816 0
59
static TypeHandle TypeHandle::make(PyTypeObject *classobj);

2134 11 operator == 0 4 2736 23 TypeHandle::operator == 0 1 817 0
67
inline bool TypeHandle::operator ==(TypeHandle const &other) const;

2135 11 operator != 0 4 2736 23 TypeHandle::operator != 0 1 818 0
67
inline bool TypeHandle::operator !=(TypeHandle const &other) const;

2136 10 operator < 0 4 2736 22 TypeHandle::operator < 0 1 819 0
66
inline bool TypeHandle::operator <(TypeHandle const &other) const;

2137 11 operator <= 0 4 2736 23 TypeHandle::operator <= 0 1 820 0
67
inline bool TypeHandle::operator <=(TypeHandle const &other) const;

2138 10 operator > 0 4 2736 22 TypeHandle::operator > 0 1 821 0
66
inline bool TypeHandle::operator >(TypeHandle const &other) const;

2139 11 operator >= 0 4 2736 23 TypeHandle::operator >= 0 1 822 0
67
inline bool TypeHandle::operator >=(TypeHandle const &other) const;

2140 10 compare_to 0 4 2736 22 TypeHandle::compare_to 0 1 823 463
////////////////////////////////////////////////////////////////////
//     Function: TypeHandle::compare_to
//       Access: Published
//  Description: Sorts TypeHandles arbitrarily (according to <, >,
//               etc.).  Returns a number less than 0 if this type
//               sorts before the other one, greater than zero if it
//               sorts after, 0 if they are equivalent.
////////////////////////////////////////////////////////////////////
65
inline int TypeHandle::compare_to(TypeHandle const &other) const;

2141 8 get_hash 0 4 2736 20 TypeHandle::get_hash 0 1 824 263
////////////////////////////////////////////////////////////////////
//     Function: TypeHandle::get_hash
//       Access: Published
//  Description: Returns a hash code suitable for phash_map.
////////////////////////////////////////////////////////////////////
47
inline size_t TypeHandle::get_hash(void) const;

2142 8 get_name 0 4 2736 20 TypeHandle::get_name 0 1 825 484
////////////////////////////////////////////////////////////////////
//     Function: TypeHandle::get_name
//       Access: Published
//  Description: Returns the name of the type.
//
//               The "object" pointer is an optional pointer to the
//               TypedObject class that owns this TypeHandle.  It is
//               only used in case the TypeHandle is inadvertantly
//               undefined.
////////////////////////////////////////////////////////////////////
83
inline string TypeHandle::get_name(TypedObject *object = (TypedObject *)(0)) const;

2143 15 is_derived_from 0 4 2736 27 TypeHandle::is_derived_from 0 1 826 557
////////////////////////////////////////////////////////////////////
//     Function: TypeHandle::is_derived_from
//       Access: Published
//  Description: Returns true if this type is derived from the
//               indicated type, false otherwise.
//
//               The "object" pointer is an optional pointer to the
//               TypedObject class that owns this TypeHandle.  It is
//               only used in case the TypeHandle is inadvertantly
//               undefined.
////////////////////////////////////////////////////////////////////
107
inline bool TypeHandle::is_derived_from(TypeHandle parent, TypedObject *object = (TypedObject *)(0)) const;

2144 22 get_num_parent_classes 0 4 2736 34 TypeHandle::get_num_parent_classes 0 1 827 878
////////////////////////////////////////////////////////////////////
//     Function: TypeHandle::get_num_parent_classes
//       Access: Published
//  Description: Returns the number of parent classes that this
//               type is known to have.  This may then be used to
//               index into get_parent_class().  The result will be 0
//               if this class does not inherit from any other
//               classes, 1 if normal, single inheritance is in
//               effect, or greater than one if multiple inheritance
//               is in effect.
//
//               The "object" pointer is an optional pointer to the
//               TypedObject class that owns this TypeHandle.  It is
//               only used in case the TypeHandle is inadvertantly
//               undefined.
////////////////////////////////////////////////////////////////////
94
inline int TypeHandle::get_num_parent_classes(TypedObject *object = (TypedObject *)(0)) const;

2145 16 get_parent_class 0 4 2736 28 TypeHandle::get_parent_class 0 1 828 383
////////////////////////////////////////////////////////////////////
//     Function: TypeHandle::get_num_parent_classes
//       Access: Published
//  Description: Returns the nth parent class of this type.  The index
//               should be in the range 0 <= index <
//               get_num_parent_classes().
////////////////////////////////////////////////////////////////////
64
inline TypeHandle TypeHandle::get_parent_class(int index) const;

2146 21 get_num_child_classes 0 4 2736 33 TypeHandle::get_num_child_classes 0 1 829 626
////////////////////////////////////////////////////////////////////
//     Function: TypeHandle::get_num_child_classes
//       Access: Published
//  Description: Returns the number of child classes that this
//               type is known to have.  This may then be used to
//               index into get_child_class().
//
//               The "object" pointer is an optional pointer to the
//               TypedObject class that owns this TypeHandle.  It is
//               only used in case the TypeHandle is inadvertantly
//               undefined.
////////////////////////////////////////////////////////////////////
93
inline int TypeHandle::get_num_child_classes(TypedObject *object = (TypedObject *)(0)) const;

2147 15 get_child_class 0 4 2736 27 TypeHandle::get_child_class 0 1 830 380
////////////////////////////////////////////////////////////////////
//     Function: TypeHandle::get_num_child_classes
//       Access: Published
//  Description: Returns the nth child class of this type.  The index
//               should be in the range 0 <= index <
//               get_num_child_classes().
////////////////////////////////////////////////////////////////////
63
inline TypeHandle TypeHandle::get_child_class(int index) const;

2148 18 get_parent_towards 0 4 2736 30 TypeHandle::get_parent_towards 0 1 831 959
////////////////////////////////////////////////////////////////////
//     Function: TypeHandle::get_parent_towards
//       Access: Published
//  Description: Returns the parent class that is in a direct line of
//               inheritance to the indicated ancestor class.  This is
//               useful in the presence of multiple inheritance to try
//               to determine what properties an unknown type may
//               have.
//
//               The return value is TypeHandle::none() if the type
//               does not inherit from the ancestor.  If ancestor is
//               the same as this type, the return value is this type.
//
//               The "object" pointer is an optional pointer to the
//               TypedObject class that owns this TypeHandle.  It is
//               only used in case the TypeHandle is inadvertantly
//               undefined.
////////////////////////////////////////////////////////////////////
118
inline TypeHandle TypeHandle::get_parent_towards(TypeHandle ancestor, TypedObject *object = (TypedObject *)(0)) const;

2149 24 get_best_parent_from_Set 0 4 2736 36 TypeHandle::get_best_parent_from_Set 0 1 832 274
////////////////////////////////////////////////////////////////////
//     Function: get_best_parent_from_Set
//       Access: Published
//  Description: Return the Index of the BEst fit Classs from a set
////////////////////////////////////////////////////////////////////
84
inline int TypeHandle::get_best_parent_from_Set(set< int > const &legal_vals) const;

2150 16 get_memory_usage 0 4 2736 28 TypeHandle::get_memory_usage 0 1 833 0
77
int TypeHandle::get_memory_usage(TypeHandle::MemoryClass memory_class) const;

2151 16 inc_memory_usage 0 4 2736 28 TypeHandle::inc_memory_usage 0 1 834 0
85
void TypeHandle::inc_memory_usage(TypeHandle::MemoryClass memory_class, size_t size);

2152 16 dec_memory_usage 0 4 2736 28 TypeHandle::dec_memory_usage 0 1 835 0
85
void TypeHandle::dec_memory_usage(TypeHandle::MemoryClass memory_class, size_t size);

2153 9 get_index 0 4 2736 21 TypeHandle::get_index 0 1 836 654
////////////////////////////////////////////////////////////////////
//     Function: TypeHandle::get_index
//       Access: Published
//  Description: Returns the integer index associated with this
//               TypeHandle. Each different TypeHandle will have a
//               different index.  However, you probably shouldn't be
//               using this method; you should just treat the
//               TypeHandles as opaque classes.  This is provided for
//               the convenience of non-C++ scripting languages to
//               build a hashtable of TypeHandles.
////////////////////////////////////////////////////////////////////
45
inline int TypeHandle::get_index(void) const;

2154 6 output 0 4 2736 18 TypeHandle::output 0 1 837 218
////////////////////////////////////////////////////////////////////
//     Function: TypeHandle::output
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
51
inline void TypeHandle::output(ostream &out) const;

2155 4 none 0 4 2736 16 TypeHandle::none 0 1 838 315
////////////////////////////////////////////////////////////////////
//     Function: TypeHandle::none
//       Access: Published, Static
//  Description: Returns a special zero-valued TypeHandle that is used
//               to indicate no type.
////////////////////////////////////////////////////////////////////
48
static inline TypeHandle TypeHandle::none(void);

2156 22 operator typecast bool 0 132 2736 34 TypeHandle::operator typecast bool 0 1 839 0
59
inline bool TypeHandle::operator typecast bool(void) const;

2157 11 ~TypeHandle 0 4 2736 23 TypeHandle::~TypeHandle 0 0 0
30
TypeHandle::~TypeHandle(void);

2158 9 find_type 0 4 2738 23 TypeRegistry::find_type 0 1 840 0
61
TypeHandle TypeRegistry::find_type(string const &name) const;

2159 15 find_type_by_id 0 4 2738 29 TypeRegistry::find_type_by_id 0 1 841 0
55
TypeHandle TypeRegistry::find_type_by_id(int id) const;

2160 8 get_name 0 4 2738 22 TypeRegistry::get_name 0 1 842 0
74
string TypeRegistry::get_name(TypeHandle type, TypedObject *object) const;

2161 15 is_derived_from 0 4 2738 29 TypeRegistry::is_derived_from 0 1 843 0
97
bool TypeRegistry::is_derived_from(TypeHandle child, TypeHandle base, TypedObject *child_object);

2162 19 get_num_typehandles 0 4 2738 33 TypeRegistry::get_num_typehandles 0 1 844 0
44
int TypeRegistry::get_num_typehandles(void);

2163 14 get_typehandle 0 4 2738 28 TypeRegistry::get_typehandle 0 1 845 0
47
TypeHandle TypeRegistry::get_typehandle(int n);

2164 20 get_num_root_classes 0 4 2738 34 TypeRegistry::get_num_root_classes 0 1 846 0
45
int TypeRegistry::get_num_root_classes(void);

2165 14 get_root_class 0 4 2738 28 TypeRegistry::get_root_class 0 1 847 0
47
TypeHandle TypeRegistry::get_root_class(int n);

2166 22 get_num_parent_classes 0 4 2738 36 TypeRegistry::get_num_parent_classes 0 1 848 0
92
int TypeRegistry::get_num_parent_classes(TypeHandle child, TypedObject *child_object) const;

2167 16 get_parent_class 0 4 2738 30 TypeRegistry::get_parent_class 0 1 849 0
77
TypeHandle TypeRegistry::get_parent_class(TypeHandle child, int index) const;

2168 21 get_num_child_classes 0 4 2738 35 TypeRegistry::get_num_child_classes 0 1 850 0
91
int TypeRegistry::get_num_child_classes(TypeHandle child, TypedObject *child_object) const;

2169 15 get_child_class 0 4 2738 29 TypeRegistry::get_child_class 0 1 851 0
76
TypeHandle TypeRegistry::get_child_class(TypeHandle child, int index) const;

2170 18 get_parent_towards 0 4 2738 32 TypeRegistry::get_parent_towards 0 1 852 0
106
TypeHandle TypeRegistry::get_parent_towards(TypeHandle child, TypeHandle base, TypedObject *child_object);

2171 16 reregister_types 0 4 2738 30 TypeRegistry::reregister_types 0 1 853 0
49
static void TypeRegistry::reregister_types(void);

2172 5 write 0 4 2738 19 TypeRegistry::write 0 1 854 0
45
void TypeRegistry::write(ostream &out) const;

2173 3 ptr 0 4 2738 17 TypeRegistry::ptr 0 1 855 63
// ptr() returns the pointer to the global TypeRegistry object.
45
static TypeRegistry *TypeRegistry::ptr(void);

2174 13 ~TypeRegistry 0 4 2738 27 TypeRegistry::~TypeRegistry 0 0 0
34
TypeRegistry::~TypeRegistry(void);

2175 20 upcast_to_MemoryBase 0 12 2739 33 TypedObject::upcast_to_MemoryBase 0 1 861 37
upcast from TypedObject to MemoryBase
52
MemoryBase *TypedObject::upcast_to_MemoryBase(void);

2176 23 downcast_to_TypedObject 0 12 2664 35 MemoryBase::downcast_to_TypedObject 0 1 862 39
downcast from MemoryBase to TypedObject
55
TypedObject *MemoryBase::downcast_to_TypedObject(void);

2177 12 ~TypedObject 0 6 2739 25 TypedObject::~TypedObject 0 0 44
// A virtual destructor is just a good idea.
40
virtual TypedObject::~TypedObject(void);

2178 8 get_type 0 6 2739 21 TypedObject::get_type 0 1 856 79
// Derived classes should override this function to return
// get_class_type().
57
virtual TypeHandle TypedObject::get_type(void) const = 0;

2179 14 get_type_index 0 4 2739 27 TypedObject::get_type_index 0 1 857 441
////////////////////////////////////////////////////////////////////
//     Function: TypedObject::get_type_index
//       Access: Published
//  Description: Returns the internal index number associated with
//               this object's TypeHandle, a unique number for each
//               different type.  This is equivalent to
//               get_type().get_index().
////////////////////////////////////////////////////////////////////
51
inline int TypedObject::get_type_index(void) const;

2180 10 is_of_type 0 4 2739 23 TypedObject::is_of_type 0 1 858 313
////////////////////////////////////////////////////////////////////
//     Function: TypedObject::is_of_type
//       Access: Published
//  Description: Returns true if the current object is or derives from
//               the indicated type.
////////////////////////////////////////////////////////////////////
61
inline bool TypedObject::is_of_type(TypeHandle handle) const;

2181 13 is_exact_type 0 4 2739 26 TypedObject::is_exact_type 0 1 859 308
////////////////////////////////////////////////////////////////////
//     Function: TypedObject::is_exact_type
//       Access: Published
//  Description: Returns true if the current object is the indicated
//               type exactly.
////////////////////////////////////////////////////////////////////
64
inline bool TypedObject::is_exact_type(TypeHandle handle) const;

2182 14 get_class_type 0 4 2739 27 TypedObject::get_class_type 0 1 860 0
52
static TypeHandle TypedObject::get_class_type(void);

2183 7 fstream 0 4 2740 16 fstream::fstream 0 1 863 0
23
fstream::fstream(void);

2184 5 close 0 4 2740 14 fstream::close 0 1 864 0
26
void fstream::close(void);

2185 8 ~fstream 0 4 2740 17 fstream::~fstream 0 0 0
24
fstream::~fstream(void);

2186 8 ifstream 0 4 2741 18 ifstream::ifstream 0 1 865 0
25
ifstream::ifstream(void);

2187 5 close 0 4 2741 15 ifstream::close 0 1 866 0
27
void ifstream::close(void);

2188 9 ~ifstream 0 4 2741 19 ifstream::~ifstream 0 0 0
26
ifstream::~ifstream(void);

2189 8 ofstream 0 4 2742 18 ofstream::ofstream 0 1 867 0
25
ofstream::ofstream(void);

2190 5 close 0 4 2742 15 ofstream::close 0 1 868 0
27
void ofstream::close(void);

2191 9 ~ofstream 0 4 2742 19 ofstream::~ofstream 0 0 0
26
ofstream::~ofstream(void);

2192 11 is_tracking 0 4 2743 24 MemoryUsage::is_tracking 0 1 869 374
////////////////////////////////////////////////////////////////////
//     Function: MemoryUsage::is_tracking
//       Access: Public, Static
//  Description: Returns true if the MemoryUsage object is currently
//               tracking memory (e.g. track-memory-usage is
//               configured #t).
////////////////////////////////////////////////////////////////////
50
static inline bool MemoryUsage::is_tracking(void);

2193 11 is_counting 0 4 2743 24 MemoryUsage::is_counting 0 1 870 413
////////////////////////////////////////////////////////////////////
//     Function: MemoryUsage::is_counting
//       Access: Public, Static
//  Description: Returns true if the MemoryUsage object is currently
//               at least counting memory (e.g. this is a Windows
//               debug build), even if it's not fully tracking it.
////////////////////////////////////////////////////////////////////
50
static inline bool MemoryUsage::is_counting(void);

2194 20 get_current_cpp_size 0 4 2743 33 MemoryUsage::get_current_cpp_size 0 1 871 394
////////////////////////////////////////////////////////////////////
//     Function: MemoryUsage::get_current_cpp_size
//       Access: Public, Static
//  Description: Returns the total number of bytes of allocated memory
//               consumed by C++ objects, not including the memory
//               previously frozen.
////////////////////////////////////////////////////////////////////
61
static inline size_t MemoryUsage::get_current_cpp_size(void);

2195 18 get_total_cpp_size 0 4 2743 31 MemoryUsage::get_total_cpp_size 0 1 872 388
////////////////////////////////////////////////////////////////////
//     Function: MemoryUsage::get_total_cpp_size
//       Access: Public, Static
//  Description: Returns the total number of bytes of allocated memory
//               consumed by C++ objects, including the memory
//               previously frozen.
////////////////////////////////////////////////////////////////////
59
static inline size_t MemoryUsage::get_total_cpp_size(void);

2196 26 get_panda_heap_single_size 0 4 2743 39 MemoryUsage::get_panda_heap_single_size 0 1 873 366
////////////////////////////////////////////////////////////////////
//     Function: MemoryUsage::get_panda_heap_single_size
//       Access: Public, Static
//  Description: Returns the total number of bytes allocated from the
//               heap from code within Panda, for individual objects.
////////////////////////////////////////////////////////////////////
67
static inline size_t MemoryUsage::get_panda_heap_single_size(void);

2197 25 get_panda_heap_array_size 0 4 2743 38 MemoryUsage::get_panda_heap_array_size 0 1 874 353
////////////////////////////////////////////////////////////////////
//     Function: MemoryUsage::get_panda_heap_array_size
//       Access: Public, Static
//  Description: Returns the total number of bytes allocated from the
//               heap from code within Panda, for arrays.
////////////////////////////////////////////////////////////////////
66
static inline size_t MemoryUsage::get_panda_heap_array_size(void);

2198 23 get_panda_heap_overhead 0 4 2743 36 MemoryUsage::get_panda_heap_overhead 0 1 875 465
////////////////////////////////////////////////////////////////////
//     Function: MemoryUsage::get_panda_heap_overhead
//       Access: Public, Static
//  Description: Returns the extra bytes allocated from the system
//               that are not immediately used for holding allocated
//               objects.  This can only be determined if
//               ALTERNATIVE_MALLOC is enabled.
////////////////////////////////////////////////////////////////////
64
static inline size_t MemoryUsage::get_panda_heap_overhead(void);

2199 19 get_panda_mmap_size 0 4 2743 32 MemoryUsage::get_panda_mmap_size 0 1 876 350
////////////////////////////////////////////////////////////////////
//     Function: MemoryUsage::get_panda_mmap_size
//       Access: Public, Static
//  Description: Returns the total number of bytes allocated from the
//               virtual memory pool from code within Panda.
////////////////////////////////////////////////////////////////////
60
static inline size_t MemoryUsage::get_panda_mmap_size(void);

2200 17 get_external_size 0 4 2743 30 MemoryUsage::get_external_size 0 1 877 852
////////////////////////////////////////////////////////////////////
//     Function: MemoryUsage::get_external_size
//       Access: Public, Static
//  Description: Returns the total number of bytes of allocated memory
//               in the heap that Panda didn't seem to be responsible
//               for.  This includes a few bytes for very low-level
//               objects (like ConfigVariables) that cannot use Panda
//               memory tracking because they are so very low-level.
//
//               This also includes all of the memory that might have
//               been allocated by a high-level interpreter, like
//               Python.
//
//               This number is only available if Panda is able to
//               hook into the actual heap callback.
////////////////////////////////////////////////////////////////////
58
static inline size_t MemoryUsage::get_external_size(void);

2201 14 get_total_size 0 4 2743 27 MemoryUsage::get_total_size 0 1 878 348
////////////////////////////////////////////////////////////////////
//     Function: MemoryUsage::get_total_size
//       Access: Public, Static
//  Description: Returns the total size of allocated memory consumed
//               by the process, as nearly as can be determined.
////////////////////////////////////////////////////////////////////
55
static inline size_t MemoryUsage::get_total_size(void);

2202 16 get_num_pointers 0 4 2743 29 MemoryUsage::get_num_pointers 0 1 879 282
////////////////////////////////////////////////////////////////////
//     Function: MemoryUsage::get_num_pointers
//       Access: Public, Static
//  Description: Returns the number of pointers currently active.
////////////////////////////////////////////////////////////////////
54
static inline int MemoryUsage::get_num_pointers(void);

2203 12 get_pointers 0 4 2743 25 MemoryUsage::get_pointers 0 1 880 333
////////////////////////////////////////////////////////////////////
//     Function: MemoryUsage::get_pointers
//       Access: Public, Static
//  Description: Fills the indicated MemoryUsagePointers with the set
//               of all pointers currently active.
////////////////////////////////////////////////////////////////////
74
static inline void MemoryUsage::get_pointers(MemoryUsagePointers &result);

2204 20 get_pointers_of_type 0 4 2743 33 MemoryUsage::get_pointers_of_type 0 1 881 380
////////////////////////////////////////////////////////////////////
//     Function: MemoryUsage::get_pointers_of_type
//       Access: Public, Static
//  Description: Fills the indicated MemoryUsagePointers with the set
//               of all pointers of the indicated type currently
//               active.
////////////////////////////////////////////////////////////////////
99
static inline void MemoryUsage::get_pointers_of_type(MemoryUsagePointers &result, TypeHandle type);

2205 19 get_pointers_of_age 0 4 2743 32 MemoryUsage::get_pointers_of_age 0 1 882 416
////////////////////////////////////////////////////////////////////
//     Function: MemoryUsage::get_pointers_of_age
//       Access: Public, Static
//  Description: Fills the indicated MemoryUsagePointers with the set
//               of all pointers that were allocated within the range
//               of the indicated number of seconds ago.
////////////////////////////////////////////////////////////////////
105
static inline void MemoryUsage::get_pointers_of_age(MemoryUsagePointers &result, double from, double to);

2206 28 get_pointers_with_zero_count 0 4 2743 41 MemoryUsage::get_pointers_with_zero_count 0 1 883 1326
////////////////////////////////////////////////////////////////////
//     Function: MemoryUsage::get_pointers_with_zero_count
//       Access: Public, Static
//  Description: Fills the indicated MemoryUsagePointers with the set
//               of all currently active pointers (that is, pointers
//               allocated since the last call to freeze(), and not
//               yet freed) that have a zero reference count.
//
//               Generally, an undeleted pointer with a zero reference
//               count means its reference count has never been
//               incremented beyond zero (since once it has been
//               incremented, the only way it can return to zero would
//               free the pointer).  This may include objects that are
//               allocated statically or on the stack, which are never
//               intended to be deleted.  Or, it might represent a
//               programmer or compiler error.
//
//               This function has the side-effect of incrementing
//               each of their reference counts by one, thus
//               preventing them from ever being freed--but since they
//               hadn't been freed anyway, probably no additional harm
//               is done.
////////////////////////////////////////////////////////////////////
90
static inline void MemoryUsage::get_pointers_with_zero_count(MemoryUsagePointers &result);

2207 6 freeze 0 4 2743 19 MemoryUsage::freeze 0 1 884 574
////////////////////////////////////////////////////////////////////
//     Function: MemoryUsage::freeze
//       Access: Public, Static
//  Description: 'Freezes' all pointers currently stored so that they
//               are no longer reported; only newly allocate pointers
//               from this point on will appear in future information
//               requests.  This makes it easier to differentiate
//               between continuous leaks and one-time memory
//               allocations.
////////////////////////////////////////////////////////////////////
45
static inline void MemoryUsage::freeze(void);

2208 18 show_current_types 0 4 2743 31 MemoryUsage::show_current_types 0 1 885 312
////////////////////////////////////////////////////////////////////
//     Function: MemoryUsage::show_current_types
//       Access: Public, Static
//  Description: Shows the breakdown of types of all of the
//               active pointers.
////////////////////////////////////////////////////////////////////
57
static inline void MemoryUsage::show_current_types(void);

2209 16 show_trend_types 0 4 2743 29 MemoryUsage::show_trend_types 0 1 886 372
////////////////////////////////////////////////////////////////////
//     Function: MemoryUsage::show_trend_types
//       Access: Public, Static
//  Description: Shows the breakdown of types of all of the
//               pointers allocated and freed since the last call to
//               freeze().
////////////////////////////////////////////////////////////////////
55
static inline void MemoryUsage::show_trend_types(void);

2210 17 show_current_ages 0 4 2743 30 MemoryUsage::show_current_ages 0 1 887 310
////////////////////////////////////////////////////////////////////
//     Function: MemoryUsage::show_current_ages
//       Access: Public, Static
//  Description: Shows the breakdown of ages of all of the
//               active pointers.
////////////////////////////////////////////////////////////////////
56
static inline void MemoryUsage::show_current_ages(void);

2211 15 show_trend_ages 0 4 2743 28 MemoryUsage::show_trend_ages 0 1 888 370
////////////////////////////////////////////////////////////////////
//     Function: MemoryUsage::show_trend_ages
//       Access: Public, Static
//  Description: Shows the breakdown of ages of all of the
//               pointers allocated and freed since the last call to
//               freeze().
////////////////////////////////////////////////////////////////////
54
static inline void MemoryUsage::show_trend_ages(void);

2212 12 ~MemoryUsage 0 4 2743 25 MemoryUsage::~MemoryUsage 0 0 0
32
MemoryUsage::~MemoryUsage(void);

2213 18 get_config_express 0 1 0 18 get_config_express 0 1 1323 92
// Returns the configure object for accessing config variables from a
// scripting language.
34
DConfig &get_config_express(void);

2214 20 upcast_to_MemoryBase 0 12 2745 36 ReferenceCount::upcast_to_MemoryBase 0 1 895 40
upcast from ReferenceCount to MemoryBase
55
MemoryBase *ReferenceCount::upcast_to_MemoryBase(void);

2215 26 downcast_to_ReferenceCount 0 12 2664 38 MemoryBase::downcast_to_ReferenceCount 0 1 896 42
downcast from MemoryBase to ReferenceCount
61
ReferenceCount *MemoryBase::downcast_to_ReferenceCount(void);

2216 15 ~ReferenceCount 0 6 2745 31 ReferenceCount::~ReferenceCount 0 0 231
////////////////////////////////////////////////////////////////////
//     Function: ReferenceCount::Destructor
//       Access: Public, Virtual
//  Description:
////////////////////////////////////////////////////////////////////
53
virtual inline ReferenceCount::~ReferenceCount(void);

2217 13 get_ref_count 0 4 2745 29 ReferenceCount::get_ref_count 0 1 889 265
////////////////////////////////////////////////////////////////////
//     Function: ReferenceCount::get_ref_count
//       Access: Published
//  Description: Returns the current reference count.
////////////////////////////////////////////////////////////////////
53
inline int ReferenceCount::get_ref_count(void) const;

2218 3 ref 0 4 2745 19 ReferenceCount::ref 0 1 890 896
////////////////////////////////////////////////////////////////////
//     Function: ReferenceCount::ref
//       Access: Published
//  Description: Explicitly increments the reference count.  User code
//               should avoid using ref() and unref() directly, which
//               can result in missed reference counts.  Instead, let
//               a PointerTo object manage the reference counting
//               automatically.
//
//               This function is const, even though it changes the
//               object, because generally fiddling with an object's
//               reference count isn't considered part of fiddling
//               with the object.  An object might be const in other
//               ways, but we still need to accurately count the
//               number of references to it.
////////////////////////////////////////////////////////////////////
44
inline void ReferenceCount::ref(void) const;

2219 5 unref 0 6 2745 21 ReferenceCount::unref 0 1 891 1336
////////////////////////////////////////////////////////////////////
//     Function: ReferenceCount::unref
//       Access: Published, Virtual
//  Description: Explicitly decrements the reference count.  Note that
//               the object will not be implicitly deleted by unref()
//               simply because the reference count drops to zero.
//               (Having a member function delete itself is
//               problematic.) However, see the helper function
//               unref_delete().
//
//               User code should avoid using ref() and unref()
//               directly, which can result in missed reference
//               counts.  Instead, let a PointerTo object manage the
//               reference counting automatically.
//
//               This function is const, even though it changes the
//               object, because generally fiddling with an object's
//               reference count isn't considered part of fiddling
//               with the object.  An object might be const in other
//               ways, but we still need to accurately count the
//               number of references to it.
//
//               The return value is true if the new reference count
//               is nonzero, false if it is zero.
////////////////////////////////////////////////////////////////////
54
virtual inline bool ReferenceCount::unref(void) const;

2220 24 test_ref_count_integrity 0 4 2745 40 ReferenceCount::test_ref_count_integrity 0 1 892 395
////////////////////////////////////////////////////////////////////
//     Function: ReferenceCount::test_ref_count_integrity
//       Access: Published
//  Description: Does some easy checks to make sure that the reference
//               count isn't completely bogus.  Returns true if ok,
//               false otherwise.
////////////////////////////////////////////////////////////////////
65
inline bool ReferenceCount::test_ref_count_integrity(void) const;

2221 22 test_ref_count_nonzero 0 4 2745 38 ReferenceCount::test_ref_count_nonzero 0 1 893 402
////////////////////////////////////////////////////////////////////
//     Function: ReferenceCount::test_ref_count_nonzero
//       Access: Published
//  Description: Does some easy checks to make sure that the reference
//               count isn't zero, or completely bogus.  Returns true
//               if ok, false otherwise.
////////////////////////////////////////////////////////////////////
63
inline bool ReferenceCount::test_ref_count_nonzero(void) const;

2222 14 get_class_type 0 4 2745 30 ReferenceCount::get_class_type 0 1 894 0
55
static TypeHandle ReferenceCount::get_class_type(void);

2223 10 get_length 0 4 2746 18 Buffer::get_length 0 1 897 214
////////////////////////////////////////////////////////////////////
//     Function: Buffer::get_length
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
42
inline int Buffer::get_length(void) const;

2224 15 compress_string 0 1 0 15 compress_string 0 1 1324 0
68
string compress_string(string const &source, int compression_level);

2225 17 decompress_string 0 1 0 17 decompress_string 0 1 1325 0
47
string decompress_string(string const &source);

2226 13 compress_file 0 1 0 13 compress_file 0 1 1326 0
88
bool compress_file(Filename const &source, Filename const &dest, int compression_level);

2227 15 decompress_file 0 1 0 15 decompress_file 0 1 1327 0
67
bool decompress_file(Filename const &source, Filename const &dest);

2228 15 compress_stream 0 1 0 15 compress_stream 0 1 1328 0
76
bool compress_stream(istream &source, ostream &dest, int compression_level);

2229 17 decompress_stream 0 1 0 17 decompress_stream 0 1 1329 0
55
bool decompress_stream(istream &source, ostream &dest);

2230 11 copy_stream 0 1 0 11 copy_stream 0 1 1330 0
49
bool copy_stream(istream &source, ostream &dest);

2231 9 add_level 0 6 2747 36 PStatCollectorForwardBase::add_level 0 1 898 0
68
virtual void PStatCollectorForwardBase::add_level(double level) = 0;

2232 18 get_node_ref_count 0 4 2748 38 NodeReferenceCount::get_node_ref_count 0 1 899 274
////////////////////////////////////////////////////////////////////
//     Function: NodeReferenceCount::get_node_ref_count
//       Access: Published
//  Description: Returns the current reference count.
////////////////////////////////////////////////////////////////////
62
inline int NodeReferenceCount::get_node_ref_count(void) const;

2233 8 node_ref 0 4 2748 28 NodeReferenceCount::node_ref 0 1 900 338
////////////////////////////////////////////////////////////////////
//     Function: NodeReferenceCount::node_ref
//       Access: Published
//  Description: Explicitly increments the node reference count and
//               the normal reference count simultaneously.
////////////////////////////////////////////////////////////////////
53
inline void NodeReferenceCount::node_ref(void) const;

2234 10 node_unref 0 4 2748 30 NodeReferenceCount::node_unref 0 1 901 462
////////////////////////////////////////////////////////////////////
//     Function: NodeReferenceCount::node_unref
//       Access: Published
//  Description: Explicitly decrements the node reference count and
//               the normal reference count simultaneously.
//
//               The return value is true if the new reference count
//               is nonzero, false if it is zero.
////////////////////////////////////////////////////////////////////
55
inline bool NodeReferenceCount::node_unref(void) const;

2235 24 test_ref_count_integrity 0 4 2748 44 NodeReferenceCount::test_ref_count_integrity 0 1 902 344
////////////////////////////////////////////////////////////////////
//     Function: NodeReferenceCount::test_ref_count_integrity
//       Access: Published
//  Description: Does some easy checks to make sure that the reference
//               count isn't completely bogus.
////////////////////////////////////////////////////////////////////
69
inline bool NodeReferenceCount::test_ref_count_integrity(void) const;

2236 14 get_class_type 0 4 2748 34 NodeReferenceCount::get_class_type 0 1 903 0
59
static TypeHandle NodeReferenceCount::get_class_type(void);

2237 8 Datagram 0 4 2749 18 Datagram::Datagram 0 3 904 905 906 1017
////////////////////////////////////////////////////////////////////
//     Function: Datagram::Constructor
//       Access: Public
//  Description: Constructs an empty datagram.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Datagram::Constructor
//       Access: Public
//  Description: Constructs a datagram from an existing block of data.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Datagram::Constructor
//       Access: Public
//  Description: Constructs a datagram from an existing block of data.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Datagram::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
186
inline Datagram::Datagram(void);
inline Datagram::Datagram(void const *data, size_t size);
inline Datagram::Datagram(string const &data);
inline Datagram::Datagram(Datagram const &copy);

2238 10 operator = 0 4 2749 20 Datagram::operator = 0 1 907 0
55
inline void Datagram::operator =(Datagram const &copy);

2239 5 clear 0 6 2749 15 Datagram::clear 0 1 908 314
////////////////////////////////////////////////////////////////////
//     Function: Datagram::clear
//       Access: Public, Virtual
//  Description: Resets the datagram to empty, in preparation for
//               building up a new datagram.
////////////////////////////////////////////////////////////////////
35
virtual void Datagram::clear(void);

2240 8 dump_hex 0 4 2749 18 Datagram::dump_hex 0 1 909 329
////////////////////////////////////////////////////////////////////
//     Function: Datagram::dump_hex
//       Access: Public
//  Description: Writes a representation of the entire datagram
//               contents, as a sequence of hex (and ASCII) values.
////////////////////////////////////////////////////////////////////
69
void Datagram::dump_hex(ostream &out, unsigned int indent = 0) const;

2241 8 add_bool 0 4 2749 18 Datagram::add_bool 0 1 910 252
////////////////////////////////////////////////////////////////////
//     Function: Datagram::add_bool
//       Access: Public
//  Description: Adds a boolean value to the datagram.
////////////////////////////////////////////////////////////////////
43
inline void Datagram::add_bool(bool value);

2242 8 add_int8 0 4 2749 18 Datagram::add_int8 0 1 911 259
////////////////////////////////////////////////////////////////////
//     Function: Datagram::add_int8
//       Access: Public
//  Description: Adds a signed 8-bit integer to the datagram.
////////////////////////////////////////////////////////////////////
46
inline void Datagram::add_int8(PN_int8 value);

2243 9 add_uint8 0 4 2749 19 Datagram::add_uint8 0 1 912 263
////////////////////////////////////////////////////////////////////
//     Function: Datagram::add_uint8
//       Access: Public
//  Description: Adds an unsigned 8-bit integer to the datagram.
////////////////////////////////////////////////////////////////////
48
inline void Datagram::add_uint8(PN_uint8 value);

2244 9 add_int16 0 4 2749 19 Datagram::add_int16 0 1 913 311
// The default numeric packing is little-endian.

////////////////////////////////////////////////////////////////////
//     Function: Datagram::add_int16
//       Access: Public
//  Description: Adds a signed 16-bit integer to the datagram.
////////////////////////////////////////////////////////////////////
48
inline void Datagram::add_int16(PN_int16 value);

2245 9 add_int32 0 4 2749 19 Datagram::add_int32 0 1 914 261
////////////////////////////////////////////////////////////////////
//     Function: Datagram::add_int32
//       Access: Public
//  Description: Adds a signed 32-bit integer to the datagram.
////////////////////////////////////////////////////////////////////
48
inline void Datagram::add_int32(PN_int32 value);

2246 9 add_int64 0 4 2749 19 Datagram::add_int64 0 1 915 261
////////////////////////////////////////////////////////////////////
//     Function: Datagram::add_int64
//       Access: Public
//  Description: Adds a signed 64-bit integer to the datagram.
////////////////////////////////////////////////////////////////////
48
inline void Datagram::add_int64(PN_int64 value);

2247 10 add_uint16 0 4 2749 20 Datagram::add_uint16 0 1 916 265
////////////////////////////////////////////////////////////////////
//     Function: Datagram::add_uint16
//       Access: Public
//  Description: Adds an unsigned 16-bit integer to the datagram.
////////////////////////////////////////////////////////////////////
50
inline void Datagram::add_uint16(PN_uint16 value);

2248 10 add_uint32 0 4 2749 20 Datagram::add_uint32 0 1 917 265
////////////////////////////////////////////////////////////////////
//     Function: Datagram::add_uint32
//       Access: Public
//  Description: Adds an unsigned 32-bit integer to the datagram.
////////////////////////////////////////////////////////////////////
50
inline void Datagram::add_uint32(PN_uint32 value);

2249 10 add_uint64 0 4 2749 20 Datagram::add_uint64 0 1 918 265
////////////////////////////////////////////////////////////////////
//     Function: Datagram::add_uint64
//       Access: Public
//  Description: Adds an unsigned 64-bit integer to the datagram.
////////////////////////////////////////////////////////////////////
50
inline void Datagram::add_uint64(PN_uint64 value);

2250 11 add_float32 0 4 2749 21 Datagram::add_float32 0 1 919 450
////////////////////////////////////////////////////////////////////
//     Function: Datagram::add_float32
//       Access: Public
//  Description: Adds a 32-bit single-precision floating-point number
//               to the datagram.  Since this kind of float is not
//               necessarily portable across different architectures,
//               special care is required.
////////////////////////////////////////////////////////////////////
52
inline void Datagram::add_float32(PN_float32 value);

2251 11 add_float64 0 4 2749 21 Datagram::add_float64 0 1 920 270
////////////////////////////////////////////////////////////////////
//     Function: Datagram::add_float64
//       Access: Public
//  Description: Adds a 64-bit floating-point number to the datagram.
////////////////////////////////////////////////////////////////////
52
inline void Datagram::add_float64(PN_float64 value);

2252 12 add_stdfloat 0 4 2749 22 Datagram::add_stdfloat 0 1 921 327
////////////////////////////////////////////////////////////////////
//     Function: Datagram::add_stdfloat
//       Access: Public
//  Description: Adds either a 32-bit or a 64-bit floating-point
//               number, according to set_stdfloat_double().
////////////////////////////////////////////////////////////////////
54
inline void Datagram::add_stdfloat(PN_stdfloat value);

2253 12 add_be_int16 0 4 2749 22 Datagram::add_be_int16 0 1 922 361
// These functions pack numbers big-endian, in case that's desired.

////////////////////////////////////////////////////////////////////
//     Function: Datagram::add_be_int16
//       Access: Public
//  Description: Adds a signed 16-bit big-endian integer to the
//               datagram.
////////////////////////////////////////////////////////////////////
51
inline void Datagram::add_be_int16(PN_int16 value);

2254 12 add_be_int32 0 4 2749 22 Datagram::add_be_int32 0 1 923 292
////////////////////////////////////////////////////////////////////
//     Function: Datagram::add_be_int32
//       Access: Public
//  Description: Adds a signed 32-bit big-endian integer to the
//               datagram.
////////////////////////////////////////////////////////////////////
51
inline void Datagram::add_be_int32(PN_int32 value);

2255 12 add_be_int64 0 4 2749 22 Datagram::add_be_int64 0 1 924 292
////////////////////////////////////////////////////////////////////
//     Function: Datagram::add_be_int64
//       Access: Public
//  Description: Adds a signed 64-bit big-endian integer to the
//               datagram.
////////////////////////////////////////////////////////////////////
51
inline void Datagram::add_be_int64(PN_int64 value);

2256 13 add_be_uint16 0 4 2749 23 Datagram::add_be_uint16 0 1 925 296
////////////////////////////////////////////////////////////////////
//     Function: Datagram::add_be_uint16
//       Access: Public
//  Description: Adds an unsigned 16-bit big-endian integer to the
//               datagram.
////////////////////////////////////////////////////////////////////
53
inline void Datagram::add_be_uint16(PN_uint16 value);

2257 13 add_be_uint32 0 4 2749 23 Datagram::add_be_uint32 0 1 926 296
////////////////////////////////////////////////////////////////////
//     Function: Datagram::add_be_uint32
//       Access: Public
//  Description: Adds an unsigned 32-bit big-endian integer to the
//               datagram.
////////////////////////////////////////////////////////////////////
53
inline void Datagram::add_be_uint32(PN_uint32 value);

2258 13 add_be_uint64 0 4 2749 23 Datagram::add_be_uint64 0 1 927 296
////////////////////////////////////////////////////////////////////
//     Function: Datagram::add_be_uint64
//       Access: Public
//  Description: Adds an unsigned 64-bit big-endian integer to the
//               datagram.
////////////////////////////////////////////////////////////////////
53
inline void Datagram::add_be_uint64(PN_uint64 value);

2259 14 add_be_float32 0 4 2749 24 Datagram::add_be_float32 0 1 928 318
////////////////////////////////////////////////////////////////////
//     Function: Datagram::add_be_float32
//       Access: Public
//  Description: Adds a 32-bit single-precision big-endian
//               floating-point number to the datagram.
////////////////////////////////////////////////////////////////////
55
inline void Datagram::add_be_float32(PN_float32 value);

2260 14 add_be_float64 0 4 2749 24 Datagram::add_be_float64 0 1 929 301
////////////////////////////////////////////////////////////////////
//     Function: Datagram::add_be_float64
//       Access: Public
//  Description: Adds a 64-bit big-endian floating-point number to the
//               datagram.
////////////////////////////////////////////////////////////////////
55
inline void Datagram::add_be_float64(PN_float64 value);

2261 10 add_string 0 4 2749 20 Datagram::add_string 0 1 930 329
////////////////////////////////////////////////////////////////////
//     Function: Datagram::add_string
//       Access: Public
//  Description: Adds a variable-length string to the datagram.  This
//               actually adds a count followed by n bytes.
////////////////////////////////////////////////////////////////////
52
inline void Datagram::add_string(string const &str);

2262 12 add_string32 0 4 2749 22 Datagram::add_string32 0 1 931 338
////////////////////////////////////////////////////////////////////
//     Function: Datagram::add_string32
//       Access: Public
//  Description: Adds a variable-length string to the datagram, using
//               a 32-bit length field to allow very long strings.
////////////////////////////////////////////////////////////////////
54
inline void Datagram::add_string32(string const &str);

2263 12 add_z_string 0 4 2749 22 Datagram::add_z_string 0 1 932 311
////////////////////////////////////////////////////////////////////
//     Function: Datagram::add_z_string
//       Access: Public
//  Description: Adds a variable-length string to the datagram, as a
//               NULL-terminated string.
////////////////////////////////////////////////////////////////////
47
inline void Datagram::add_z_string(string str);

2264 16 add_fixed_string 0 4 2749 26 Datagram::add_fixed_string 0 1 933 512
////////////////////////////////////////////////////////////////////
//     Function: Datagram::add_fixed_string
//       Access: Public
//  Description: Adds a fixed-length string to the datagram.  If the
//               string given is less than the requested size, this
//               will pad the string out with zeroes; if it is greater
//               than the requested size, this will silently truncate
//               the string.
////////////////////////////////////////////////////////////////////
71
inline void Datagram::add_fixed_string(string const &str, size_t size);

2265 11 add_wstring 0 4 2749 21 Datagram::add_wstring 0 1 934 265
////////////////////////////////////////////////////////////////////
//     Function: Datagram::add_wstring
//       Access: Public
//  Description: Adds a variable-length wstring to the datagram.
////////////////////////////////////////////////////////////////////
47
void Datagram::add_wstring(wstring const &str);

2266 9 pad_bytes 0 4 2749 19 Datagram::pad_bytes 0 1 935 289
////////////////////////////////////////////////////////////////////
//     Function: Datagram::pad_bytes
//       Access: Public
//  Description: Adds the indicated number of zero bytes to the
//               datagram.
////////////////////////////////////////////////////////////////////
38
void Datagram::pad_bytes(size_t size);

2267 11 append_data 0 4 2749 21 Datagram::append_data 0 1 936 580
////////////////////////////////////////////////////////////////////
//     Function: Datagram::append_data
//       Access: Public
//  Description: Appends some more raw data to the end of the
//               datagram.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Datagram::append_data
//       Access: Public
//  Description: Appends some more raw data to the end of the
//               datagram.
////////////////////////////////////////////////////////////////////
113
void Datagram::append_data(void const *data, size_t size);
inline void Datagram::append_data(string const &data);

2268 6 assign 0 4 2749 16 Datagram::assign 0 0 284
////////////////////////////////////////////////////////////////////
//     Function: Datagram::assign
//       Access: Public
//  Description: Replaces the datagram's data with the indicated
//               block.
////////////////////////////////////////////////////////////////////
53
void Datagram::assign(void const *data, size_t size);

2269 11 get_message 0 4 2749 21 Datagram::get_message 0 1 937 258
////////////////////////////////////////////////////////////////////
//     Function: Datagram::get_message
//       Access: Public
//  Description: Returns the datagram's data as a string.
////////////////////////////////////////////////////////////////////
48
inline string Datagram::get_message(void) const;

2270 8 get_data 0 4 2749 18 Datagram::get_data 0 1 938 290
////////////////////////////////////////////////////////////////////
//     Function: Datagram::get_data
//       Access: Public
//  Description: Returns a pointer to the beginning of the datagram's
//               data.
////////////////////////////////////////////////////////////////////
50
inline void const *Datagram::get_data(void) const;

2271 10 get_length 0 4 2749 20 Datagram::get_length 0 1 939 261
////////////////////////////////////////////////////////////////////
//     Function: Datagram::get_length
//       Access: Public
//  Description: Returns the number of bytes in the datagram.
////////////////////////////////////////////////////////////////////
47
inline size_t Datagram::get_length(void) const;

2272 9 set_array 0 4 2749 19 Datagram::set_array 0 1 940 450
////////////////////////////////////////////////////////////////////
//     Function: Datagram::set_array
//       Access: Public
//  Description: Replaces the data in the Datagram with the data in
//               the indicated PTA_uchar.  This is assignment by
//               reference: subsequent changes to the Datagram will
//               also change the source PTA_uchar.
////////////////////////////////////////////////////////////////////
48
inline void Datagram::set_array(PTA_uchar data);

2273 10 copy_array 0 4 2749 20 Datagram::copy_array 0 1 941 505
////////////////////////////////////////////////////////////////////
//     Function: Datagram::copy_array
//       Access: Public
//  Description: Replaces the data in the Datagram with a copy of the
//               data in the indicated CPTA_uchar.  Unlike
//               set_array(), a complete copy is made of the data;
//               subsequent changes to the Datagram will *not* change
//               the source CPTA_uchar.
////////////////////////////////////////////////////////////////////
50
inline void Datagram::copy_array(CPTA_uchar data);

2274 9 get_array 0 4 2749 19 Datagram::get_array 0 1 942 292
////////////////////////////////////////////////////////////////////
//     Function: Datagram::get_array
//       Access: Public
//  Description: Returns a const pointer to the actual data in
//               the Datagram.
////////////////////////////////////////////////////////////////////
50
inline CPTA_uchar Datagram::get_array(void) const;

2275 12 modify_array 0 4 2749 22 Datagram::modify_array 0 1 943 300
////////////////////////////////////////////////////////////////////
//     Function: Datagram::modify_array
//       Access: Public
//  Description: Returns a modifiable pointer to the actual data in
//               the Datagram.
////////////////////////////////////////////////////////////////////
46
inline PTA_uchar Datagram::modify_array(void);

2276 19 set_stdfloat_double 0 4 2749 29 Datagram::set_stdfloat_double 0 1 944 648
////////////////////////////////////////////////////////////////////
//     Function: Datagram::set_stdfloat_double
//       Access: Public
//  Description: Changes the stdfloat_double flag, which defines the
//               operation performed by add_stdfloat() and
//               DatagramIterator::get_stdfloat().  When this is true,
//               add_stdfloat() adds a 64-bit floating-point number;
//               when it is false, it adds a 32-bit floating-point
//               number.  The default is based on the STDFLOAT_DOUBLE
//               compilation flag.
////////////////////////////////////////////////////////////////////
64
inline void Datagram::set_stdfloat_double(bool stdfloat_double);

2277 19 get_stdfloat_double 0 4 2749 29 Datagram::get_stdfloat_double 0 1 945 304
////////////////////////////////////////////////////////////////////
//     Function: Datagram::get_stdfloat_double
//       Access: Public
//  Description: Returns the stdfloat_double flag.  See
//               set_stdfloat_double().
////////////////////////////////////////////////////////////////////
54
inline bool Datagram::get_stdfloat_double(void) const;

2278 11 operator == 0 4 2749 21 Datagram::operator == 0 1 946 0
63
inline bool Datagram::operator ==(Datagram const &other) const;

2279 11 operator != 0 4 2749 21 Datagram::operator != 0 1 947 0
63
inline bool Datagram::operator !=(Datagram const &other) const;

2280 10 operator < 0 4 2749 20 Datagram::operator < 0 1 948 0
62
inline bool Datagram::operator <(Datagram const &other) const;

2281 6 output 0 4 2749 16 Datagram::output 0 1 949 290
////////////////////////////////////////////////////////////////////
//     Function : Datagram::output
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
////////////////////////////////////////////////////////////////////
42
void Datagram::output(ostream &out) const;

2282 5 write 0 4 2749 15 Datagram::write 0 1 950 289
////////////////////////////////////////////////////////////////////
//     Function : Datagram::write
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
////////////////////////////////////////////////////////////////////
66
void Datagram::write(ostream &out, unsigned int indent = 0) const;

2283 14 get_class_type 0 4 2749 24 Datagram::get_class_type 0 1 951 0
49
static TypeHandle Datagram::get_class_type(void);

2284 18 ~DatagramGenerator 0 6 2750 37 DatagramGenerator::~DatagramGenerator 0 0 326
////////////////////////////////////////////////////////////////////
//     Function: DatagramGenerator::Destructor
//       Access: Published, Virtual
//  Description: Does nothing since this is class is just
//               the definition of an interface
////////////////////////////////////////////////////////////////////
52
virtual DatagramGenerator::~DatagramGenerator(void);

2285 12 get_datagram 0 6 2750 31 DatagramGenerator::get_datagram 0 1 952 0
65
virtual bool DatagramGenerator::get_datagram(Datagram &data) = 0;

2286 13 save_datagram 0 6 2750 32 DatagramGenerator::save_datagram 0 1 953 725
////////////////////////////////////////////////////////////////////
//     Function: DatagramGenerator::save_datagram
//       Access: Published, Virtual
//  Description: Skips over the next datagram without extracting it,
//               but saves the relevant file information in the
//               SubfileInfo object so that its data may be read
//               later.  For non-file-based datagram generators, this
//               may mean creating a temporary file and copying the
//               contents of the datagram to disk.
//
//               Returns true on success, false on failure or if this
//               method is unimplemented.
////////////////////////////////////////////////////////////////////
65
virtual bool DatagramGenerator::save_datagram(SubfileInfo &info);

2287 6 is_eof 0 6 2750 25 DatagramGenerator::is_eof 0 1 954 0
49
virtual bool DatagramGenerator::is_eof(void) = 0;

2288 8 is_error 0 6 2750 27 DatagramGenerator::is_error 0 1 955 0
51
virtual bool DatagramGenerator::is_error(void) = 0;

2289 12 get_filename 0 6 2750 31 DatagramGenerator::get_filename 0 1 956 419
////////////////////////////////////////////////////////////////////
//     Function: DatagramGenerator::get_filename
//       Access: Published, Virtual
//  Description: Returns the filename that provides the source for
//               these datagrams, if any, or empty string if the
//               datagrams do not originate from a file on disk.
////////////////////////////////////////////////////////////////////
62
virtual Filename const &DatagramGenerator::get_filename(void);

2290 13 get_timestamp 0 6 2750 32 DatagramGenerator::get_timestamp 0 1 957 399
////////////////////////////////////////////////////////////////////
//     Function: DatagramGenerator::get_timestamp
//       Access: Published, Virtual
//  Description: Returns the on-disk timestamp of the file that was
//               read, at the time it was opened, if that is
//               available, or 0 if it is not.
////////////////////////////////////////////////////////////////////
60
virtual time_t DatagramGenerator::get_timestamp(void) const;

2291 8 get_file 0 6 2750 27 DatagramGenerator::get_file 0 1 958 412
////////////////////////////////////////////////////////////////////
//     Function: DatagramGenerator::get_file
//       Access: Published, Virtual
//  Description: Returns the FileReference that provides the source for
//               these datagrams, if any, or NULL if the datagrams do
//               not originate from a file on disk.
////////////////////////////////////////////////////////////////////
63
virtual FileReference const *DatagramGenerator::get_file(void);

2292 9 get_vfile 0 6 2750 28 DatagramGenerator::get_vfile 0 1 959 410
////////////////////////////////////////////////////////////////////
//     Function: DatagramGenerator::get_vfile
//       Access: Published, Virtual
//  Description: Returns the VirtualFile that provides the source for
//               these datagrams, if any, or NULL if the datagrams do
//               not originate from a VirtualFile.
////////////////////////////////////////////////////////////////////
56
virtual VirtualFile *DatagramGenerator::get_vfile(void);

2293 12 get_file_pos 0 6 2750 31 DatagramGenerator::get_file_pos 0 1 960 646
////////////////////////////////////////////////////////////////////
//     Function: DatagramGenerator::get_file_pos
//       Access: Published, Virtual
//  Description: Returns the current file position within the data
//               stream, if any, or 0 if the file position is not
//               meaningful or cannot be determined.
//
//               For DatagramGenerators that return a meaningful file
//               position, this will be pointing to the first byte
//               following the datagram returned after a call to
//               get_datagram().
////////////////////////////////////////////////////////////////////
56
virtual streamoff DatagramGenerator::get_file_pos(void);

2294 16 DatagramIterator 0 4 2751 34 DatagramIterator::DatagramIterator 0 3 961 962 963 684
////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
209
inline DatagramIterator::DatagramIterator(void);
inline DatagramIterator::DatagramIterator(Datagram const &datagram, size_t offset = 0);
inline DatagramIterator::DatagramIterator(DatagramIterator const &copy);

2295 10 operator = 0 4 2751 28 DatagramIterator::operator = 0 1 964 0
71
inline void DatagramIterator::operator =(DatagramIterator const &copy);

2296 17 ~DatagramIterator 0 4 2751 35 DatagramIterator::~DatagramIterator 0 0 224
////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::Destructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
49
inline DatagramIterator::~DatagramIterator(void);

2297 8 get_bool 0 4 2751 26 DatagramIterator::get_bool 0 1 965 248
////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_bool
//       Access: Public
//  Description: Extracts a boolean value.
////////////////////////////////////////////////////////////////////
45
inline bool DatagramIterator::get_bool(void);

2298 8 get_int8 0 4 2751 26 DatagramIterator::get_int8 0 1 966 255
////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_int8
//       Access: Public
//  Description: Extracts a signed 8-bit integer.
////////////////////////////////////////////////////////////////////
48
inline PN_int8 DatagramIterator::get_int8(void);

2299 9 get_uint8 0 4 2751 27 DatagramIterator::get_uint8 0 1 967 259
////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_uint8
//       Access: Public
//  Description: Extracts an unsigned 8-bit integer.
////////////////////////////////////////////////////////////////////
50
inline PN_uint8 DatagramIterator::get_uint8(void);

2300 9 get_int16 0 4 2751 27 DatagramIterator::get_int16 0 1 968 257
////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_int16
//       Access: Public
//  Description: Extracts a signed 16-bit integer.
////////////////////////////////////////////////////////////////////
50
inline PN_int16 DatagramIterator::get_int16(void);

2301 9 get_int32 0 4 2751 27 DatagramIterator::get_int32 0 1 969 257
////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_int32
//       Access: Public
//  Description: Extracts a signed 32-bit integer.
////////////////////////////////////////////////////////////////////
50
inline PN_int32 DatagramIterator::get_int32(void);

2302 9 get_int64 0 4 2751 27 DatagramIterator::get_int64 0 1 970 257
////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_int64
//       Access: Public
//  Description: Extracts a signed 64-bit integer.
////////////////////////////////////////////////////////////////////
50
inline PN_int64 DatagramIterator::get_int64(void);

2303 10 get_uint16 0 4 2751 28 DatagramIterator::get_uint16 0 1 971 261
////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_uint16
//       Access: Public
//  Description: Extracts an unsigned 16-bit integer.
////////////////////////////////////////////////////////////////////
52
inline PN_uint16 DatagramIterator::get_uint16(void);

2304 10 get_uint32 0 4 2751 28 DatagramIterator::get_uint32 0 1 972 261
////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_uint32
//       Access: Public
//  Description: Extracts an unsigned 32-bit integer.
////////////////////////////////////////////////////////////////////
52
inline PN_uint32 DatagramIterator::get_uint32(void);

2305 10 get_uint64 0 4 2751 28 DatagramIterator::get_uint64 0 1 973 261
////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_uint64
//       Access: Public
//  Description: Extracts an unsigned 64-bit integer.
////////////////////////////////////////////////////////////////////
52
inline PN_uint64 DatagramIterator::get_uint64(void);

2306 11 get_float32 0 4 2751 29 DatagramIterator::get_float32 0 1 974 300
////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_float32
//       Access: Public
//  Description: Extracts a 32-bit single-precision floating-point
//               number.
////////////////////////////////////////////////////////////////////
54
inline PN_float32 DatagramIterator::get_float32(void);

2307 11 get_float64 0 4 2751 29 DatagramIterator::get_float64 0 1 975 266
////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_float64
//       Access: Public
//  Description: Extracts a 64-bit floating-point number.
////////////////////////////////////////////////////////////////////
54
inline PN_float64 DatagramIterator::get_float64(void);

2308 12 get_stdfloat 0 4 2751 30 DatagramIterator::get_stdfloat 0 1 976 349
////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_stdfloat
//       Access: Public
//  Description: Extracts either a 32-bit or a 64-bit floating-point
//               number, according to Datagram::set_stdfloat_double().
////////////////////////////////////////////////////////////////////
56
inline PN_stdfloat DatagramIterator::get_stdfloat(void);

2309 12 get_be_int16 0 4 2751 30 DatagramIterator::get_be_int16 0 1 977 271
////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_be_int16
//       Access: Public
//  Description: Extracts a signed 16-bit big-endian integer.
////////////////////////////////////////////////////////////////////
53
inline PN_int16 DatagramIterator::get_be_int16(void);

2310 12 get_be_int32 0 4 2751 30 DatagramIterator::get_be_int32 0 1 978 271
////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_be_int32
//       Access: Public
//  Description: Extracts a signed 32-bit big-endian integer.
////////////////////////////////////////////////////////////////////
53
inline PN_int32 DatagramIterator::get_be_int32(void);

2311 12 get_be_int64 0 4 2751 30 DatagramIterator::get_be_int64 0 1 979 271
////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_be_int64
//       Access: Public
//  Description: Extracts a signed 64-bit big-endian integer.
////////////////////////////////////////////////////////////////////
53
inline PN_int64 DatagramIterator::get_be_int64(void);

2312 13 get_be_uint16 0 4 2751 31 DatagramIterator::get_be_uint16 0 1 980 275
////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_be_uint16
//       Access: Public
//  Description: Extracts an unsigned 16-bit big-endian integer.
////////////////////////////////////////////////////////////////////
55
inline PN_uint16 DatagramIterator::get_be_uint16(void);

2313 13 get_be_uint32 0 4 2751 31 DatagramIterator::get_be_uint32 0 1 981 275
////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_be_uint32
//       Access: Public
//  Description: Extracts an unsigned 32-bit big-endian integer.
////////////////////////////////////////////////////////////////////
55
inline PN_uint32 DatagramIterator::get_be_uint32(void);

2314 13 get_be_uint64 0 4 2751 31 DatagramIterator::get_be_uint64 0 1 982 275
////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_be_uint64
//       Access: Public
//  Description: Extracts an unsigned 64-bit big-endian integer.
////////////////////////////////////////////////////////////////////
55
inline PN_uint64 DatagramIterator::get_be_uint64(void);

2315 14 get_be_float32 0 4 2751 32 DatagramIterator::get_be_float32 0 1 983 314
////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_be_float32
//       Access: Public
//  Description: Extracts a 32-bit big-endian single-precision
//               floating-point number.
////////////////////////////////////////////////////////////////////
57
inline PN_float32 DatagramIterator::get_be_float32(void);

2316 14 get_be_float64 0 4 2751 32 DatagramIterator::get_be_float64 0 1 984 280
////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_be_float64
//       Access: Public
//  Description: Extracts a 64-bit big-endian floating-point number.
////////////////////////////////////////////////////////////////////
57
inline PN_float64 DatagramIterator::get_be_float64(void);

2317 10 get_string 0 4 2751 28 DatagramIterator::get_string 0 1 985 259
////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_string
//       Access: Public
//  Description: Extracts a variable-length string.
////////////////////////////////////////////////////////////////////
42
string DatagramIterator::get_string(void);

2318 12 get_string32 0 4 2751 30 DatagramIterator::get_string32 0 1 986 305
////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_string32
//       Access: Public
//  Description: Extracts a variable-length string with a 32-bit
//               length field.
////////////////////////////////////////////////////////////////////
44
string DatagramIterator::get_string32(void);

2319 12 get_z_string 0 4 2751 30 DatagramIterator::get_z_string 0 1 987 307
////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_z_string
//       Access: Public
//  Description: Extracts a variable-length string, as a
//               NULL-terminated string.
////////////////////////////////////////////////////////////////////
44
string DatagramIterator::get_z_string(void);

2320 16 get_fixed_string 0 4 2751 34 DatagramIterator::get_fixed_string 0 1 988 379
////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_fixed_string
//       Access: Public
//  Description: Extracts a fixed-length string.  However, if a zero
//               byte occurs within the string, it marks the end of
//               the string.
////////////////////////////////////////////////////////////////////
55
string DatagramIterator::get_fixed_string(size_t size);

2321 11 get_wstring 0 4 2751 29 DatagramIterator::get_wstring 0 1 989 307
////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_wstring
//       Access: Public
//  Description: Extracts a variable-length wstring (with a 32-bit
//               length field).
////////////////////////////////////////////////////////////////////
44
wstring DatagramIterator::get_wstring(void);

2322 10 skip_bytes 0 4 2751 28 DatagramIterator::skip_bytes 0 1 990 299
////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::skip_bytes
//       Access: Public
//  Description: Skips over the indicated number of bytes in the
//               datagram.
////////////////////////////////////////////////////////////////////
54
inline void DatagramIterator::skip_bytes(size_t size);

2323 13 extract_bytes 0 4 2751 31 DatagramIterator::extract_bytes 0 1 991 856
////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::extract_bytes
//       Access: Public
//  Description: Extracts the indicated number of bytes in the
//               datagram and returns them as a string.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::extract_bytes
//       Access: Published
//  Description: Extracts the indicated number of bytes in the
//               datagram into the given character buffer.  Assumes
//               that the buffer is big enough to hold the requested
//               number of bytes.  Returns the number of bytes
//               that were successfully written.
////////////////////////////////////////////////////////////////////
126
string DatagramIterator::extract_bytes(size_t size);
size_t DatagramIterator::extract_bytes(unsigned char *into, size_t size);

2324 19 get_remaining_bytes 0 4 2751 37 DatagramIterator::get_remaining_bytes 0 1 992 352
////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_remaining_bytes
//       Access: Public
//  Description: Returns the remaining bytes in the datagram as a
//               string, but does not extract them from the iterator.
////////////////////////////////////////////////////////////////////
64
inline string DatagramIterator::get_remaining_bytes(void) const;

2325 18 get_remaining_size 0 4 2751 36 DatagramIterator::get_remaining_size 0 1 993 271
////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_remaining_size
//       Access: Public
//  Description: Return the bytes left in the datagram.
////////////////////////////////////////////////////////////////////
60
inline int DatagramIterator::get_remaining_size(void) const;

2326 12 get_datagram 0 4 2751 30 DatagramIterator::get_datagram 0 1 994 264
////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_datagram
//       Access: Public
//  Description: Return the datagram of this iterator.
////////////////////////////////////////////////////////////////////
66
inline Datagram const &DatagramIterator::get_datagram(void) const;

2327 17 get_current_index 0 4 2751 35 DatagramIterator::get_current_index 0 1 995 335
////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_current_index
//       Access: Public
//  Description: Returns the current position within the datagram of the
//               next piece of data to extract.
////////////////////////////////////////////////////////////////////
62
inline size_t DatagramIterator::get_current_index(void) const;

2328 6 output 0 4 2751 24 DatagramIterator::output 0 1 996 280
////////////////////////////////////////////////////////////////////
//     Function : output
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
////////////////////////////////////////////////////////////////////
50
void DatagramIterator::output(ostream &out) const;

2329 5 write 0 4 2751 23 DatagramIterator::write 0 1 997 279
////////////////////////////////////////////////////////////////////
//     Function : write
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
////////////////////////////////////////////////////////////////////
74
void DatagramIterator::write(ostream &out, unsigned int indent = 0) const;

2330 14 get_class_type 0 4 2751 32 DatagramIterator::get_class_type 0 1 998 0
57
static TypeHandle DatagramIterator::get_class_type(void);

2331 13 ~DatagramSink 0 6 2752 27 DatagramSink::~DatagramSink 0 0 318
////////////////////////////////////////////////////////////////////
//     Function: DatagramSink::Destructor
//       Access: Public, Virtual
//  Description: Does nothing since this is class is just
//               the definition of an interface
////////////////////////////////////////////////////////////////////
42
virtual DatagramSink::~DatagramSink(void);

2332 12 put_datagram 0 6 2752 26 DatagramSink::put_datagram 0 1 999 0
66
virtual bool DatagramSink::put_datagram(Datagram const &data) = 0;

2333 13 copy_datagram 0 6 2752 27 DatagramSink::copy_datagram 0 2 1000 1001 1354
////////////////////////////////////////////////////////////////////
//     Function: DatagramSink::copy_datagram
//       Access: Published, Virtual
//  Description: Copies the file data from the entire indicated
//               file (via the vfs) as the next datagram.  This is
//               intended to support potentially very large datagrams.
//
//               Returns true on success, false on failure or if this
//               method is unimplemented.  On true, fills "result"
//               with the information that references the copied file,
//               if possible.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: DatagramSink::copy_datagram
//       Access: Published, Virtual
//  Description: Copies the file data from the range of the indicated
//               file (outside of the vfs) as the next datagram.  This
//               is intended to support potentially very large
//               datagrams.
//
//               Returns true on success, false on failure or if this
//               method is unimplemented.  On true, fills "result"
//               with the information that references the copied file,
//               if possible.
////////////////////////////////////////////////////////////////////
178
virtual bool DatagramSink::copy_datagram(SubfileInfo &result, Filename const &filename);
virtual bool DatagramSink::copy_datagram(SubfileInfo &result, SubfileInfo const &source);

2334 8 is_error 0 6 2752 22 DatagramSink::is_error 0 1 1002 0
46
virtual bool DatagramSink::is_error(void) = 0;

2335 5 flush 0 6 2752 19 DatagramSink::flush 0 1 1003 0
43
virtual void DatagramSink::flush(void) = 0;

2336 12 get_filename 0 6 2752 26 DatagramSink::get_filename 0 1 1004 414
////////////////////////////////////////////////////////////////////
//     Function: DatagramSink::get_filename
//       Access: Published, Virtual
//  Description: Returns the filename that provides the target for
//               these datagrams, if any, or empty string if the
//               datagrams do not get written to a file on disk.
////////////////////////////////////////////////////////////////////
57
virtual Filename const &DatagramSink::get_filename(void);

2337 8 get_file 0 6 2752 22 DatagramSink::get_file 0 1 1005 403
////////////////////////////////////////////////////////////////////
//     Function: DatagramSink::get_file
//       Access: Published, Virtual
//  Description: Returns the FileReference that provides the target for
//               these datagrams, if any, or NULL if the datagrams do
//               not written to a file on disk.
////////////////////////////////////////////////////////////////////
58
virtual FileReference const *DatagramSink::get_file(void);

2338 12 get_file_pos 0 6 2752 26 DatagramSink::get_file_pos 0 1 1006 636
////////////////////////////////////////////////////////////////////
//     Function: DatagramSink::get_file_pos
//       Access: Published, Virtual
//  Description: Returns the current file position within the data
//               stream, if any, or 0 if the file position is not
//               meaningful or cannot be determined.
//
//               For DatagramSinks that return a meaningful file
//               position, this will be pointing to the first byte
//               following the datagram returned after a call to
//               put_datagram().
////////////////////////////////////////////////////////////////////
51
virtual streamoff DatagramSink::get_file_pos(void);

2339 14 encrypt_string 0 1 0 14 encrypt_string 0 1 1331 0
151
string encrypt_string(string const &source, string const &password, string const &algorithm = string(), int key_length = -1, int iteration_count = -1);

2340 14 decrypt_string 0 1 0 14 decrypt_string 0 1 1332 0
68
string decrypt_string(string const &source, string const &password);

2341 12 encrypt_file 0 1 0 12 encrypt_file 0 1 1333 0
171
bool encrypt_file(Filename const &source, Filename const &dest, string const &password, string const &algorithm = string(), int key_length = -1, int iteration_count = -1);

2342 12 decrypt_file 0 1 0 12 decrypt_file 0 1 1334 0
88
bool decrypt_file(Filename const &source, Filename const &dest, string const &password);

2343 14 encrypt_stream 0 1 0 14 encrypt_stream 0 1 1335 0
159
bool encrypt_stream(istream &source, ostream &dest, string const &password, string const &algorithm = string(), int key_length = -1, int iteration_count = -1);

2344 14 decrypt_stream 0 1 0 14 decrypt_stream 0 1 1336 0
76
bool decrypt_stream(istream &source, ostream &dest, string const &password);

2345 13 error_to_text 0 1 0 13 error_to_text 0 1 1337 185
////////////////////////////////////////////////////////////////////
//     Function: error_to_text
//  Description:
////////////////////////////////////////////////////////////////////
40
string error_to_text(ErrorUtilCode err);

2346 15 get_write_error 0 1 0 15 get_write_error 0 1 1338 0
26
int get_write_error(void);

2347 19 handle_socket_error 0 1 0 19 handle_socket_error 0 1 1339 191
////////////////////////////////////////////////////////////////////
//     Function: handle_socket_error
//  Description:
////////////////////////////////////////////////////////////////////
33
string handle_socket_error(void);

2348 17 get_network_error 0 1 0 17 get_network_error 0 1 1340 0
28
int get_network_error(void);

2349 21 upcast_to_TypedObject 0 12 2754 42 TypedReferenceCount::upcast_to_TypedObject 0 1 1008 46
upcast from TypedReferenceCount to TypedObject
62
TypedObject *TypedReferenceCount::upcast_to_TypedObject(void);

2350 31 downcast_to_TypedReferenceCount 0 12 2739 44 TypedObject::downcast_to_TypedReferenceCount 0 1 1009 48
downcast from TypedObject to TypedReferenceCount
72
TypedReferenceCount *TypedObject::downcast_to_TypedReferenceCount(void);

2351 24 upcast_to_ReferenceCount 0 12 2754 45 TypedReferenceCount::upcast_to_ReferenceCount 0 1 1010 49
upcast from TypedReferenceCount to ReferenceCount
68
ReferenceCount *TypedReferenceCount::upcast_to_ReferenceCount(void);

2352 31 downcast_to_TypedReferenceCount 0 12 2745 47 ReferenceCount::downcast_to_TypedReferenceCount 0 1 1011 51
downcast from ReferenceCount to TypedReferenceCount
75
TypedReferenceCount *ReferenceCount::downcast_to_TypedReferenceCount(void);

2353 14 get_class_type 0 4 2754 35 TypedReferenceCount::get_class_type 0 1 1007 0
60
static TypeHandle TypedReferenceCount::get_class_type(void);

2354 20 ~TypedReferenceCount 0 4 2754 41 TypedReferenceCount::~TypedReferenceCount 0 0 0
48
TypedReferenceCount::~TypedReferenceCount(void);

2355 13 FileReference 0 4 2755 28 FileReference::FileReference 0 1 1012 225
////////////////////////////////////////////////////////////////////
//     Function: FileReference::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
62
inline FileReference::FileReference(Filename const &filename);

2356 12 get_filename 0 4 2755 27 FileReference::get_filename 0 1 1013 265
////////////////////////////////////////////////////////////////////
//     Function: FileReference::get_filename
//       Access: Published
//  Description: Returns the filename of the reference.
////////////////////////////////////////////////////////////////////
63
inline Filename const &FileReference::get_filename(void) const;

2357 14 get_class_type 0 4 2755 29 FileReference::get_class_type 0 1 1014 0
54
static TypeHandle FileReference::get_class_type(void);

2358 14 ~FileReference 0 4 2755 29 FileReference::~FileReference 0 0 0
36
FileReference::~FileReference(void);

2359 7 Ramfile 0 4 2756 16 Ramfile::Ramfile 0 1 1015 219
////////////////////////////////////////////////////////////////////
//     Function: Ramfile::constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
30
inline Ramfile::Ramfile(void);

2360 4 seek 0 4 2756 13 Ramfile::seek 0 1 1016 363
////////////////////////////////////////////////////////////////////
//     Function: Ramfile::seek
//       Access: Published
//  Description: Moves the data pointer to the indicated byte
//               position.  It is not an error to move the pointer
//               past the end of data.
////////////////////////////////////////////////////////////////////
38
inline void Ramfile::seek(size_t pos);

2361 4 tell 0 4 2756 13 Ramfile::tell 0 1 1017 322
////////////////////////////////////////////////////////////////////
//     Function: Ramfile::tell
//       Access: Published
//  Description: Returns the current data pointer position as a byte
//               offset from the beginning of the stream.
////////////////////////////////////////////////////////////////////
40
inline size_t Ramfile::tell(void) const;

2362 4 read 0 4 2756 13 Ramfile::read 0 1 1018 594
////////////////////////////////////////////////////////////////////
//     Function: Ramfile::read
//       Access: Published
//  Description: Extracts and returns the indicated number of
//               characters from the current data pointer, and
//               advances the data pointer.  If the data pointer
//               exceeds the end of the buffer, returns empty string.
//
//               The interface here is intentionally designed to be
//               similar to that for Python's file.read() function.
////////////////////////////////////////////////////////////////////
36
string Ramfile::read(size_t length);

2363 8 readline 0 4 2756 17 Ramfile::readline 0 1 1019 599
////////////////////////////////////////////////////////////////////
//     Function: Ramfile::readline
//       Access: Published
//  Description: Assumes the stream represents a text file, and
//               extracts one line up to and including the trailing
//               newline character.  Returns empty string when the end
//               of file is reached.
//
//               The interface here is intentionally designed to be
//               similar to that for Python's file.readline()
//               function.
////////////////////////////////////////////////////////////////////
31
string Ramfile::readline(void);

2364 9 readlines 0 4 2756 18 Ramfile::readlines 0 1 1020 0
35
PyObject *Ramfile::readlines(void);

2365 8 get_data 0 4 2756 17 Ramfile::get_data 0 1 1021 321
////////////////////////////////////////////////////////////////////
//     Function: Ramfile::get_data
//       Access: Published
//  Description: Returns the entire buffer contents as a string,
//               regardless of the current data pointer.
////////////////////////////////////////////////////////////////////
51
inline string const &Ramfile::get_data(void) const;

2366 13 get_data_size 0 4 2756 22 Ramfile::get_data_size 0 1 1022 269
////////////////////////////////////////////////////////////////////
//     Function: Ramfile::get_data_size
//       Access: Published
//  Description: Returns the size of the entire buffer contents.
////////////////////////////////////////////////////////////////////
49
inline size_t Ramfile::get_data_size(void) const;

2367 5 clear 0 4 2756 14 Ramfile::clear 0 1 1023 250
////////////////////////////////////////////////////////////////////
//     Function: Ramfile::clear
//       Access: Published
//  Description: Empties the current buffer contents.
////////////////////////////////////////////////////////////////////
33
inline void Ramfile::clear(void);

2368 8 ~Ramfile 0 4 2756 17 Ramfile::~Ramfile 0 0 0
24
Ramfile::~Ramfile(void);

2369 7 HashVal 0 4 2757 16 HashVal::HashVal 0 2 1024 1025 445
////////////////////////////////////////////////////////////////////
//     Function: HashVal::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: HashVal::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
76
inline HashVal::HashVal(void);
inline HashVal::HashVal(HashVal const &copy);

2370 10 operator = 0 4 2757 19 HashVal::operator = 0 1 1026 0
53
inline void HashVal::operator =(HashVal const &copy);

2371 11 operator == 0 4 2757 20 HashVal::operator == 0 1 1027 0
61
inline bool HashVal::operator ==(HashVal const &other) const;

2372 11 operator != 0 4 2757 20 HashVal::operator != 0 1 1028 0
61
inline bool HashVal::operator !=(HashVal const &other) const;

2373 10 operator < 0 4 2757 19 HashVal::operator < 0 1 1029 0
60
inline bool HashVal::operator <(HashVal const &other) const;

2374 10 compare_to 0 4 2757 19 HashVal::compare_to 0 1 1030 218
////////////////////////////////////////////////////////////////////
//     Function: HashVal::compare_to
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
59
inline int HashVal::compare_to(HashVal const &other) const;

2375 10 merge_with 0 4 2757 19 HashVal::merge_with 0 1 1031 311
////////////////////////////////////////////////////////////////////
//     Function: HashVal::merge_with
//       Access: Published
//  Description: Generates a new HashVal representing the xor of this
//               one and the other one.
////////////////////////////////////////////////////////////////////
54
inline void HashVal::merge_with(HashVal const &other);

2376 10 output_dec 0 4 2757 19 HashVal::output_dec 0 1 1032 290
////////////////////////////////////////////////////////////////////
//     Function: HashVal::output_dec
//       Access: Published
//  Description: Outputs the HashVal as four unsigned decimal
//               integers.
////////////////////////////////////////////////////////////////////
52
inline void HashVal::output_dec(ostream &out) const;

2377 9 input_dec 0 4 2757 18 HashVal::input_dec 0 1 1033 267
////////////////////////////////////////////////////////////////////
//     Function: HashVal::input
//       Access: Published
//  Description: Inputs the HashVal as four unsigned decimal integers.
////////////////////////////////////////////////////////////////////
44
inline void HashVal::input_dec(istream &in);

2378 10 output_hex 0 4 2757 19 HashVal::output_hex 0 1 1034 272
////////////////////////////////////////////////////////////////////
//     Function: HashVal::output_hex
//       Access: Published
//  Description: Outputs the HashVal as a 32-digit hexadecimal number.
////////////////////////////////////////////////////////////////////
45
void HashVal::output_hex(ostream &out) const;

2379 9 input_hex 0 4 2757 18 HashVal::input_hex 0 1 1035 270
////////////////////////////////////////////////////////////////////
//     Function: HashVal::input_hex
//       Access: Published
//  Description: Inputs the HashVal as a 32-digit hexadecimal number.
////////////////////////////////////////////////////////////////////
37
void HashVal::input_hex(istream &in);

2380 13 output_binary 0 4 2757 22 HashVal::output_binary 0 1 1036 370
////////////////////////////////////////////////////////////////////
//     Function: HashVal::output_binary
//       Access: Published
//  Description: Outputs the HashVal as a binary stream of bytes in
//               order.  This is not the same order generated by
//               write_stream().
////////////////////////////////////////////////////////////////////
48
void HashVal::output_binary(ostream &out) const;

2381 12 input_binary 0 4 2757 21 HashVal::input_binary 0 1 1037 366
////////////////////////////////////////////////////////////////////
//     Function: HashVal::input_binary
//       Access: Published
//  Description: Inputs the HashVal as a binary stream of bytes in
//               order.  This is not the same order expected by
//               read_stream().
////////////////////////////////////////////////////////////////////
40
void HashVal::input_binary(istream &in);

2382 6 output 0 4 2757 15 HashVal::output 0 1 1038 215
////////////////////////////////////////////////////////////////////
//     Function: HashVal::output
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
48
inline void HashVal::output(ostream &out) const;

2383 6 as_dec 0 4 2757 15 HashVal::as_dec 0 1 1039 290
////////////////////////////////////////////////////////////////////
//     Function: HashVal::as_dec
//       Access: Published
//  Description: Returns the HashVal as a string with four decimal
//               numbers.
////////////////////////////////////////////////////////////////////
35
string HashVal::as_dec(void) const;

2384 12 set_from_dec 0 4 2757 21 HashVal::set_from_dec 0 1 1040 336
////////////////////////////////////////////////////////////////////
//     Function: HashVal::set_from_dec
//       Access: Published
//  Description: Sets the HashVal from a string with four decimal
//               numbers.  Returns true if valid, false otherwise.
////////////////////////////////////////////////////////////////////
47
bool HashVal::set_from_dec(string const &text);

2385 6 as_hex 0 4 2757 15 HashVal::as_hex 0 1 1041 267
////////////////////////////////////////////////////////////////////
//     Function: HashVal::as_hex
//       Access: Published
//  Description: Returns the HashVal as a 32-byte hexadecimal string.
////////////////////////////////////////////////////////////////////
35
string HashVal::as_hex(void) const;

2386 12 set_from_hex 0 4 2757 21 HashVal::set_from_hex 0 1 1042 334
////////////////////////////////////////////////////////////////////
//     Function: HashVal::set_from_hex
//       Access: Published
//  Description: Sets the HashVal from a 32-byte hexademical string.
//               Returns true if successful, false otherwise.
////////////////////////////////////////////////////////////////////
47
bool HashVal::set_from_hex(string const &text);

2387 6 as_bin 0 4 2757 15 HashVal::as_bin 0 1 1043 262
////////////////////////////////////////////////////////////////////
//     Function: HashVal::as_bin
//       Access: Published
//  Description: Returns the HashVal as a 16-byte binary string.
////////////////////////////////////////////////////////////////////
35
string HashVal::as_bin(void) const;

2388 12 set_from_bin 0 4 2757 21 HashVal::set_from_bin 0 1 1044 329
////////////////////////////////////////////////////////////////////
//     Function: HashVal::set_from_bin
//       Access: Published
//  Description: Sets the HashVal from a 16-byte binary string.
//               Returns true if successful, false otherwise.
////////////////////////////////////////////////////////////////////
47
bool HashVal::set_from_bin(string const &text);

2389 14 write_datagram 0 4 2757 23 HashVal::write_datagram 0 1 1045 223
////////////////////////////////////////////////////////////////////
//     Function: HashVal::write_datagram
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
65
inline void HashVal::write_datagram(Datagram &destination) const;

2390 13 read_datagram 0 4 2757 22 HashVal::read_datagram 0 1 1046 222
////////////////////////////////////////////////////////////////////
//     Function: HashVal::read_datagram
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
61
inline void HashVal::read_datagram(DatagramIterator &source);

2391 12 write_stream 0 4 2757 21 HashVal::write_stream 0 1 1047 221
////////////////////////////////////////////////////////////////////
//     Function: HashVal::write_stream
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
67
inline void HashVal::write_stream(StreamWriter &destination) const;

2392 11 read_stream 0 4 2757 20 HashVal::read_stream 0 1 1048 220
////////////////////////////////////////////////////////////////////
//     Function: HashVal::read_stream
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
55
inline void HashVal::read_stream(StreamReader &source);

2393 9 hash_file 0 4 2757 18 HashVal::hash_file 0 1 1049 500
////////////////////////////////////////////////////////////////////
//     Function: HashVal::hash_file
//       Access: Published
//  Description: Generates the hash value from the indicated file.
//               Returns true on success, false if the file cannot be
//               read.  This method is only defined if we have the
//               OpenSSL library (which provides md5 functionality)
//               available.
////////////////////////////////////////////////////////////////////
50
bool HashVal::hash_file(Filename const &filename);

2394 11 hash_stream 0 4 2757 20 HashVal::hash_stream 0 1 1050 502
////////////////////////////////////////////////////////////////////
//     Function: HashVal::hash_stream
//       Access: Published
//  Description: Generates the hash value from the indicated file.
//               Returns true on success, false if the file cannot be
//               read.  This method is only defined if we have the
//               OpenSSL library (which provides md5 functionality)
//               available.
////////////////////////////////////////////////////////////////////
43
bool HashVal::hash_stream(istream &stream);

2395 12 hash_ramfile 0 4 2757 21 HashVal::hash_ramfile 0 1 1051 433
////////////////////////////////////////////////////////////////////
//     Function: HashVal::hash_ramfile
//       Access: Published
//  Description: Generates the hash value by hashing the indicated
//               data.  This method is only defined if we have the
//               OpenSSL library (which provides md5 functionality)
//               available.
////////////////////////////////////////////////////////////////////
58
inline void HashVal::hash_ramfile(Ramfile const &ramfile);

2396 11 hash_string 0 4 2757 20 HashVal::hash_string 0 1 1052 432
////////////////////////////////////////////////////////////////////
//     Function: HashVal::hash_string
//       Access: Published
//  Description: Generates the hash value by hashing the indicated
//               data.  This method is only defined if we have the
//               OpenSSL library (which provides md5 functionality)
//               available.
////////////////////////////////////////////////////////////////////
53
inline void HashVal::hash_string(string const &data);

2397 11 hash_buffer 0 4 2757 20 HashVal::hash_buffer 0 1 1053 432
////////////////////////////////////////////////////////////////////
//     Function: HashVal::hash_buffer
//       Access: Published
//  Description: Generates the hash value by hashing the indicated
//               data.  This method is only defined if we have the
//               OpenSSL library (which provides md5 functionality)
//               available.
////////////////////////////////////////////////////////////////////
58
void HashVal::hash_buffer(char const *buffer, int length);

2398 8 ~HashVal 0 4 2757 17 HashVal::~HashVal 0 0 0
24
HashVal::~HashVal(void);

2399 19 MemoryUsagePointers 0 4 2758 40 MemoryUsagePointers::MemoryUsagePointers 0 1 1054 231
////////////////////////////////////////////////////////////////////
//     Function: MemoryUsagePointers::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
47
MemoryUsagePointers::MemoryUsagePointers(void);

2400 20 ~MemoryUsagePointers 0 4 2758 41 MemoryUsagePointers::~MemoryUsagePointers 0 0 230
////////////////////////////////////////////////////////////////////
//     Function: MemoryUsagePointers::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
48
MemoryUsagePointers::~MemoryUsagePointers(void);

2401 16 get_num_pointers 0 4 2758 37 MemoryUsagePointers::get_num_pointers 0 1 1055 279
////////////////////////////////////////////////////////////////////
//     Function: MemoryUsagePointers::get_num_pointers
//       Access: Published
//  Description: Returns the number of pointers in the set.
////////////////////////////////////////////////////////////////////
54
int MemoryUsagePointers::get_num_pointers(void) const;

2402 11 get_pointer 0 4 2758 32 MemoryUsagePointers::get_pointer 0 1 1056 267
////////////////////////////////////////////////////////////////////
//     Function: MemoryUsagePointers::get_pointer
//       Access: Published
//  Description: Returns the nth pointer of the set.
////////////////////////////////////////////////////////////////////
62
ReferenceCount *MemoryUsagePointers::get_pointer(int n) const;

2403 17 get_typed_pointer 0 4 2758 38 MemoryUsagePointers::get_typed_pointer 0 1 1057 445
////////////////////////////////////////////////////////////////////
//     Function: MemoryUsagePointers::get_typed_pointer
//       Access: Published
//  Description: Returns the nth pointer of the set, typecast to a
//               TypedObject if possible.  If the pointer is not a
//               TypedObject or if the cast cannot be made, returns
//               NULL.
////////////////////////////////////////////////////////////////////
65
TypedObject *MemoryUsagePointers::get_typed_pointer(int n) const;

2404 8 get_type 0 4 2758 29 MemoryUsagePointers::get_type 0 1 1058 305
////////////////////////////////////////////////////////////////////
//     Function: MemoryUsagePointers::get_type
//       Access: Published
//  Description: Returns the actual type of the nth pointer, if it is
//               known.
////////////////////////////////////////////////////////////////////
54
TypeHandle MemoryUsagePointers::get_type(int n) const;

2405 13 get_type_name 0 4 2758 34 MemoryUsagePointers::get_type_name 0 1 1059 308
////////////////////////////////////////////////////////////////////
//     Function: MemoryUsagePointers::get_type_name
//       Access: Published
//  Description: Returns the type name of the nth pointer, if it is
//               known.
////////////////////////////////////////////////////////////////////
55
string MemoryUsagePointers::get_type_name(int n) const;

2406 7 get_age 0 4 2758 28 MemoryUsagePointers::get_age 0 1 1060 459
////////////////////////////////////////////////////////////////////
//     Function: MemoryUsagePointers::get_age
//       Access: Published
//  Description: Returns the age of the nth pointer: the number of
//               seconds elapsed between the time it was allocated and
//               the time it was added to this set via a call to
//               MemoryUsage::get_pointers().
////////////////////////////////////////////////////////////////////
49
double MemoryUsagePointers::get_age(int n) const;

2407 18 get_python_pointer 0 4 2758 39 MemoryUsagePointers::get_python_pointer 0 1 1061 0
63
PyObject *MemoryUsagePointers::get_python_pointer(int n) const;

2408 5 clear 0 4 2758 26 MemoryUsagePointers::clear 0 1 1062 254
////////////////////////////////////////////////////////////////////
//     Function: MemoryUsagePointers::clear
//       Access: Published
//  Description: Empties the set of pointers.
////////////////////////////////////////////////////////////////////
38
void MemoryUsagePointers::clear(void);

2409 6 output 0 4 2758 27 MemoryUsagePointers::output 0 1 1063 227
////////////////////////////////////////////////////////////////////
//     Function: MemoryUsagePointers::output
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
53
void MemoryUsagePointers::output(ostream &out) const;

2410 10 ISubStream 0 4 2759 22 ISubStream::ISubStream 0 2 1064 1065 440
////////////////////////////////////////////////////////////////////
//     Function: ISubStream::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ISubStream::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
133
inline ISubStream::ISubStream(void);
inline ISubStream::ISubStream(IStreamWrapper *source, ios::streamoff start, ios::streamoff end);

2411 4 open 0 4 2759 16 ISubStream::open 0 1 1066 697
////////////////////////////////////////////////////////////////////
//     Function: ISubStream::open
//       Access: Public
//  Description: Starts the SubStream reading from the indicated
//               source, with the first character being the character
//               at position "start" within the source, for end -
//               start total characters.  The character at "end"
//               within the source will never be read; this will
//               appear to be EOF.
//
//               If end is zero, it indicates that the ISubStream will
//               continue until the end of the source stream.
////////////////////////////////////////////////////////////////////
102
inline ISubStream &ISubStream::open(IStreamWrapper *source, ios::streamoff start, ios::streamoff end);

2412 5 close 0 4 2759 17 ISubStream::close 0 1 1067 309
////////////////////////////////////////////////////////////////////
//     Function: ISubStream::close
//       Access: Public
//  Description: Resets the SubStream to empty, but does not actually
//               close the source istream.
////////////////////////////////////////////////////////////////////
43
inline ISubStream &ISubStream::close(void);

2413 11 ~ISubStream 0 4 2759 23 ISubStream::~ISubStream 0 0 0
30
ISubStream::~ISubStream(void);

2414 10 OSubStream 0 4 2760 22 OSubStream::OSubStream 0 2 1068 1069 440
////////////////////////////////////////////////////////////////////
//     Function: OSubStream::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: OSubStream::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
148
inline OSubStream::OSubStream(void);
inline OSubStream::OSubStream(OStreamWrapper *dest, ios::streamoff start, ios::streamoff end, bool append = 0);

2415 4 open 0 4 2760 16 OSubStream::open 0 1 1070 689
////////////////////////////////////////////////////////////////////
//     Function: OSubStream::open
//       Access: Public
//  Description: Starts the SubStream reading from the indicated
//               dest, with the first character being the character
//               at position "start" within the dest, for end -
//               start total characters.  The character at "end"
//               within the dest will never be read; this will
//               appear to be EOF.
//
//               If end is zero, it indicates that the OSubStream will
//               continue until the end of the dest stream.
////////////////////////////////////////////////////////////////////
117
inline OSubStream &OSubStream::open(OStreamWrapper *dest, ios::streamoff start, ios::streamoff end, bool append = 0);

2416 5 close 0 4 2760 17 OSubStream::close 0 1 1071 307
////////////////////////////////////////////////////////////////////
//     Function: OSubStream::close
//       Access: Public
//  Description: Resets the SubStream to empty, but does not actually
//               close the dest ostream.
////////////////////////////////////////////////////////////////////
43
inline OSubStream &OSubStream::close(void);

2417 11 ~OSubStream 0 4 2760 23 OSubStream::~OSubStream 0 0 0
30
OSubStream::~OSubStream(void);

2418 9 SubStream 0 4 2761 20 SubStream::SubStream 0 2 1072 1073 438
////////////////////////////////////////////////////////////////////
//     Function: SubStream::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: SubStream::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
145
inline SubStream::SubStream(void);
inline SubStream::SubStream(StreamWrapper *nested, ios::streamoff start, ios::streamoff end, bool append = 0);

2419 4 open 0 4 2761 15 SubStream::open 0 1 1074 534
////////////////////////////////////////////////////////////////////
//     Function: SubStream::open
//       Access: Public
//  Description: Starts the SubStream reading and writing from the
//               indicated nested stream, within the indicated range.
//               "end" is the first character outside of the range.
//
//               If end is zero, it indicates that the SubStream will
//               continue until the end of the nested stream.
////////////////////////////////////////////////////////////////////
116
inline SubStream &SubStream::open(StreamWrapper *nested, ios::streamoff start, ios::streamoff end, bool append = 0);

2420 5 close 0 4 2761 16 SubStream::close 0 1 1075 308
////////////////////////////////////////////////////////////////////
//     Function: SubStream::close
//       Access: Public
//  Description: Resets the SubStream to empty, but does not actually
//               close the nested ostream.
////////////////////////////////////////////////////////////////////
41
inline SubStream &SubStream::close(void);

2421 10 ~SubStream 0 4 2761 21 SubStream::~SubStream 0 0 0
28
SubStream::~SubStream(void);

2422 18 clear_certificates 0 4 2762 34 OpenSSLWrapper::clear_certificates 0 1 1076 464
////////////////////////////////////////////////////////////////////
//     Function: OpenSSLWrapper::clear_certificates
//       Access: Public
//  Description: Removes all the certificates from the global store,
//               including the compiled-in certificates loaded from
//               ca_bundle_data.c.  You can add new certificates by
//               calling load_certificates().
////////////////////////////////////////////////////////////////////
46
void OpenSSLWrapper::clear_certificates(void);

2423 17 load_certificates 0 4 2762 33 OpenSSLWrapper::load_certificates 0 1 1077 793
////////////////////////////////////////////////////////////////////
//     Function: OpenSSLWrapper::load_certificates
//       Access: Public
//  Description: Reads the PEM-formatted certificate(s) (delimited by
//               -----BEGIN CERTIFICATE----- and -----END
//               CERTIFICATE-----) from the indicated file and adds
//               them to the global store object, retrieved via
//               get_x509_store().
//
//               Returns the number of certificates read on success,
//               or 0 on failure.
//
//               You should call this only with trusted,
//               locally-stored certificates; not with certificates
//               received from an untrusted source.
////////////////////////////////////////////////////////////////////
64
int OpenSSLWrapper::load_certificates(Filename const &filename);

2424 30 load_certificates_from_pem_ram 0 4 2762 46 OpenSSLWrapper::load_certificates_from_pem_ram 0 2 1078 1079 1422
////////////////////////////////////////////////////////////////////
//     Function: OpenSSLWrapper::load_certificates_from_pem_ram
//       Access: Public
//  Description: Reads a chain of trusted certificates from the
//               indicated data buffer and adds them to the X509_STORE
//               object.  The data buffer should be PEM-formatted.
//               Returns the number of certificates read on success,
//               or 0 on failure.
//
//               You should call this only with trusted,
//               locally-stored certificates; not with certificates
//               received from an untrusted source.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: OpenSSLWrapper::load_certificates_from_pem_ram
//       Access: Public
//  Description: Reads a chain of trusted certificates from the
//               indicated data buffer and adds them to the X509_STORE
//               object.  The data buffer should be PEM-formatted.
//               Returns the number of certificates read on success,
//               or 0 on failure.
//
//               You should call this only with trusted,
//               locally-stored certificates; not with certificates
//               received from an untrusted source.
////////////////////////////////////////////////////////////////////
166
int OpenSSLWrapper::load_certificates_from_pem_ram(char const *data, size_t data_size);
inline int OpenSSLWrapper::load_certificates_from_pem_ram(string const &data);

2425 30 load_certificates_from_der_ram 0 4 2762 46 OpenSSLWrapper::load_certificates_from_der_ram 0 2 1080 1081 1422
////////////////////////////////////////////////////////////////////
//     Function: OpenSSLWrapper::load_certificates_from_der_ram
//       Access: Public
//  Description: Reads a chain of trusted certificates from the
//               indicated data buffer and adds them to the X509_STORE
//               object.  The data buffer should be DER-formatted.
//               Returns the number of certificates read on success,
//               or 0 on failure.
//
//               You should call this only with trusted,
//               locally-stored certificates; not with certificates
//               received from an untrusted source.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: OpenSSLWrapper::load_certificates_from_der_ram
//       Access: Public
//  Description: Reads a chain of trusted certificates from the
//               indicated data buffer and adds them to the X509_STORE
//               object.  The data buffer should be DER-formatted.
//               Returns the number of certificates read on success,
//               or 0 on failure.
//
//               You should call this only with trusted,
//               locally-stored certificates; not with certificates
//               received from an untrusted source.
////////////////////////////////////////////////////////////////////
166
int OpenSSLWrapper::load_certificates_from_der_ram(char const *data, size_t data_size);
inline int OpenSSLWrapper::load_certificates_from_der_ram(string const &data);

2426 14 get_x509_store 0 4 2762 30 OpenSSLWrapper::get_x509_store 0 1 1082 698
////////////////////////////////////////////////////////////////////
//     Function: OpenSSLWrapper::get_x509_store
//       Access: Public
//  Description: Returns the global X509_STORE object.
//
//               It has to be a global object, because OpenSSL seems
//               to store some global pointers associated with this
//               object whether you want it to or not, and keeping
//               independent copies of a local X509_STORE object
//               doesn't seem to work that well.  So, we have one
//               store that keeps all certificates the application
//               might need.
////////////////////////////////////////////////////////////////////
49
X509_STORE *OpenSSLWrapper::get_x509_store(void);

2427 17 notify_ssl_errors 0 4 2762 33 OpenSSLWrapper::notify_ssl_errors 0 1 1083 572
////////////////////////////////////////////////////////////////////
//     Function: OpenSSLWrapper::notify_ssl_errors
//       Access: Public
//  Description: A convenience function that is itself a wrapper
//               around the OpenSSL convenience function to output the
//               recent OpenSSL errors.  This function sends the error
//               string to express_cat.warning().  If
//               REPORT_OPENSSL_ERRORS is not defined, the function
//               does nothing.
////////////////////////////////////////////////////////////////////
45
void OpenSSLWrapper::notify_ssl_errors(void);

2428 23 notify_debug_ssl_errors 0 4 2762 39 OpenSSLWrapper::notify_debug_ssl_errors 0 1 1084 326
////////////////////////////////////////////////////////////////////
//     Function: OpenSSLWrapper::notify_debug_ssl_errors
//       Access: Public
//  Description: As notify_ssl_errors(), but sends the output to debug
//               instead of warning.
////////////////////////////////////////////////////////////////////
51
void OpenSSLWrapper::notify_debug_ssl_errors(void);

2429 14 get_global_ptr 0 4 2762 30 OpenSSLWrapper::get_global_ptr 0 1 1085 235
////////////////////////////////////////////////////////////////////
//     Function: OpenSSLWrapper::get_global_ptr
//       Access: Public, Static
//  Description: 
////////////////////////////////////////////////////////////////////
60
static OpenSSLWrapper *OpenSSLWrapper::get_global_ptr(void);

2430 9 Multifile 0 4 2763 20 Multifile::Multifile 0 1 1086 477
////////////////////////////////////////////////////////////////////
//     Function: Multifile::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Multifile::Copy Constructor
//       Access: Private
//  Description: Don't try to copy Multifiles.
////////////////////////////////////////////////////////////////////
27
Multifile::Multifile(void);

2431 9 open_read 0 4 2763 20 Multifile::open_read 0 2 1087 1088 1282
////////////////////////////////////////////////////////////////////
//     Function: Multifile::open_read
//       Access: Published
//  Description: Opens the named Multifile on disk for reading.  The
//               Multifile index is read in, and the list of subfiles
//               becomes available; individual subfiles may then be
//               extracted or read, but the list of subfiles may not
//               be modified.
//
//               Also see the version of open_read() which accepts an
//               istream.  Returns true on success, false on failure.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Multifile::open_read
//       Access: Public
//  Description: Opens an anonymous Multifile for reading using an
//               istream.  There must be seek functionality via
//               seekg() and tellg() on the istream.
//
//               If owns_pointer is true, then the Multifile assumes
//               ownership of the stream pointer and will delete it
//               when the multifile is closed, including if this
//               function returns false.
////////////////////////////////////////////////////////////////////
200
bool Multifile::open_read(Filename const &multifile_name, streamoff const &offset = 0);
bool Multifile::open_read(IStreamWrapper *multifile_stream, bool owns_pointer = 0, streamoff const &offset = 0);

2432 10 open_write 0 4 2763 21 Multifile::open_write 0 2 1089 1090 1366
////////////////////////////////////////////////////////////////////
//     Function: Multifile::open_write
//       Access: Published
//  Description: Opens the named Multifile on disk for writing.  If
//               there already exists a file by that name, it is
//               truncated.  The Multifile is then prepared for
//               accepting a brand new set of subfiles, which will be
//               written to the indicated filename.  Individual
//               subfiles may not be extracted or read.
//
//               Also see the version of open_write() which accepts an
//               ostream.  Returns true on success, false on failure.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Multifile::open_write
//       Access: Public
//  Description: Opens an anonymous Multifile for writing using an
//               ostream.  There must be seek functionality via
//               seekp() and tellp() on the pstream.
//
//               If owns_pointer is true, then the Multifile assumes
//               ownership of the stream pointer and will delete it
//               when the multifile is closed, including if this
//               function returns false.
////////////////////////////////////////////////////////////////////
137
bool Multifile::open_write(Filename const &multifile_name);
bool Multifile::open_write(ostream *multifile_stream, bool owns_pointer = 0);

2433 15 open_read_write 0 4 2763 26 Multifile::open_read_write 0 2 1091 1092 1364
////////////////////////////////////////////////////////////////////
//     Function: Multifile::open_read_write
//       Access: Published
//  Description: Opens the named Multifile on disk for reading and
//               writing.  If there already exists a file by that
//               name, its index is read.  Subfiles may be added or
//               removed, and the resulting changes will be written to
//               the named file.
//
//               Also see the version of open_read_write() which
//               accepts an iostream.  Returns true on success, false
//               on failure.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Multifile::open_read_write
//       Access: Public
//  Description: Opens an anonymous Multifile for reading and writing
//               using an iostream.  There must be seek functionality
//               via seekg()/seekp() and tellg()/tellp() on the
//               iostream.
//
//               If owns_pointer is true, then the Multifile assumes
//               ownership of the stream pointer and will delete it
//               when the multifile is closed, including if this
//               function returns false.
////////////////////////////////////////////////////////////////////
148
bool Multifile::open_read_write(Filename const &multifile_name);
bool Multifile::open_read_write(iostream *multifile_stream, bool owns_pointer = 0);

2434 5 close 0 4 2763 16 Multifile::close 0 1 1093 402
////////////////////////////////////////////////////////////////////
//     Function: Multifile::close
//       Access: Published
//  Description: Closes the Multifile if it is open.  All changes are
//               flushed to disk, and the file becomes invalid for
//               further operations until the next call to open().
////////////////////////////////////////////////////////////////////
28
void Multifile::close(void);

2435 18 get_multifile_name 0 4 2763 29 Multifile::get_multifile_name 0 1 1094 304
////////////////////////////////////////////////////////////////////
//     Function: Multifile::get_multifile_name
//       Access: Published
//  Description: Returns the filename of the Multifile, if it is
//               available.
////////////////////////////////////////////////////////////////////
65
inline Filename const &Multifile::get_multifile_name(void) const;

2436 18 set_multifile_name 0 4 2763 29 Multifile::set_multifile_name 0 1 1095 471
////////////////////////////////////////////////////////////////////
//     Function: Multifile::set_multifile_name
//       Access: Published
//  Description: Replaces the filename of the Multifile.  This is
//               primarily used for documentation purposes only;
//               changing this name does not open the indicated file.
//               See open_read() or open_write() for that.
////////////////////////////////////////////////////////////////////
74
inline void Multifile::set_multifile_name(Filename const &multifile_name);

2437 13 is_read_valid 0 4 2763 24 Multifile::is_read_valid 0 1 1096 398
////////////////////////////////////////////////////////////////////
//     Function: Multifile::is_read_valid
//       Access: Published
//  Description: Returns true if the Multifile has been opened for
//               read mode and there have been no errors, and
//               individual Subfile contents may be extracted.
////////////////////////////////////////////////////////////////////
49
inline bool Multifile::is_read_valid(void) const;

2438 14 is_write_valid 0 4 2763 25 Multifile::is_write_valid 0 1 1097 407
////////////////////////////////////////////////////////////////////
//     Function: Multifile::is_write_valid
//       Access: Published
//  Description: Returns true if the Multifile has been opened for
//               write mode and there have been no errors, and
//               Subfiles may be added or removed from the Multifile.
////////////////////////////////////////////////////////////////////
50
inline bool Multifile::is_write_valid(void) const;

2439 12 needs_repack 0 4 2763 23 Multifile::needs_repack 0 1 1098 345
////////////////////////////////////////////////////////////////////
//     Function: Multifile::needs_repack
//       Access: Published
//  Description: Returns true if the Multifile index is suboptimal and
//               should be repacked.  Call repack() to achieve this.
////////////////////////////////////////////////////////////////////
48
inline bool Multifile::needs_repack(void) const;

2440 13 get_timestamp 0 4 2763 24 Multifile::get_timestamp 0 1 1099 588
////////////////////////////////////////////////////////////////////
//     Function: Multifile::get_timestamp
//       Access: Published
//  Description: Returns the modification timestamp of the overall
//               Multifile.  This indicates the most recent date at
//               which subfiles were added or removed from the
//               Multifile.  Note that it is logically possible for an
//               individual subfile to have a more recent timestamp
//               than the overall timestamp.
////////////////////////////////////////////////////////////////////
51
inline time_t Multifile::get_timestamp(void) const;

2441 20 set_record_timestamp 0 4 2763 31 Multifile::set_record_timestamp 0 1 1100 900
////////////////////////////////////////////////////////////////////
//     Function: Multifile::set_record_timestamp
//       Access: Published
//  Description: Sets the flag indicating whether timestamps should be
//               recorded within the Multifile or not.  The default is
//               true, indicating the Multifile will record timestamps
//               for the overall file and also for each subfile.  
//
//               If this is false, the Multifile will not record
//               timestamps internally.  In this case, the return
//               value from get_timestamp() or get_subfile_timestamp()
//               will be estimations.
//
//               You may want to set this false to minimize the
//               bitwise difference between independently-generated
//               Multifiles.
////////////////////////////////////////////////////////////////////
67
inline void Multifile::set_record_timestamp(bool record_timestamp);

2442 20 get_record_timestamp 0 4 2763 31 Multifile::get_record_timestamp 0 1 1101 388
////////////////////////////////////////////////////////////////////
//     Function: Multifile::get_record_timestamp
//       Access: Published
//  Description: Returns the flag indicating whether timestamps
//               should be recorded within the Multifile or not.  See
//               set_record_timestamp().
////////////////////////////////////////////////////////////////////
56
inline bool Multifile::get_record_timestamp(void) const;

2443 16 set_scale_factor 0 4 2763 27 Multifile::set_scale_factor 0 1 1102 1220
////////////////////////////////////////////////////////////////////
//     Function: Multifile::set_scale_factor
//       Access: Published
//  Description: Changes the internal scale factor for this Multifile.
//
//               This is normally 1, but it may be set to any
//               arbitrary value (greater than zero) to support
//               Multifile archives that exceed 4GB, if necessary.
//               (Individual subfiles may still not exceed 4GB.)
//
//               All addresses within the file are rounded up to the
//               next multiple of _scale_factor, and zeros are written
//               to the file to fill the resulting gaps.  Then the
//               address is divided by _scale_factor and written out
//               as a 32-bit integer.  Thus, setting a scale factor of
//               2 supports up to 8GB files, 3 supports 12GB files,
//               etc.
//
//               Calling this function on an already-existing
//               Multifile will have no immediate effect until a
//               future call to repack() or close() (or until the
//               Multifile is destructed).
////////////////////////////////////////////////////////////////////
54
void Multifile::set_scale_factor(size_t scale_factor);

2444 16 get_scale_factor 0 4 2763 27 Multifile::get_scale_factor 0 1 1103 321
////////////////////////////////////////////////////////////////////
//     Function: Multifile::get_scale_factor
//       Access: Published
//  Description: Returns the internal scale factor for this Multifile.
//               See set_scale_factor().
////////////////////////////////////////////////////////////////////
54
inline size_t Multifile::get_scale_factor(void) const;

2445 19 set_encryption_flag 0 4 2763 30 Multifile::set_encryption_flag 0 1 1104 818
////////////////////////////////////////////////////////////////////
//     Function: Multifile::set_encryption_flag
//       Access: Published
//  Description: Sets the flag indicating whether subsequently-added
//               subfiles should be encrypted before writing them to
//               the multifile.  If true, subfiles will be encrypted;
//               if false (the default), they will be written without
//               encryption.
//
//               When true, subfiles will be encrypted with the
//               password specified by set_encryption_password().  It
//               is possible to apply a different password to
//               different files, but the resulting file can't be
//               mounted via VFS.
////////////////////////////////////////////////////////////////////
54
inline void Multifile::set_encryption_flag(bool flag);

2446 19 get_encryption_flag 0 4 2763 30 Multifile::get_encryption_flag 0 1 1105 430
////////////////////////////////////////////////////////////////////
//     Function: Multifile::get_encryption_flag
//       Access: Published
//  Description: Returns the flag indicating whether
//               subsequently-added subfiles should be encrypted
//               before writing them to the multifile.  See
//               set_encryption_flag().
////////////////////////////////////////////////////////////////////
55
inline bool Multifile::get_encryption_flag(void) const;

2447 23 set_encryption_password 0 4 2763 34 Multifile::set_encryption_password 0 1 1106 696
////////////////////////////////////////////////////////////////////
//     Function: Multifile::set_encryption_password
//       Access: Published
//  Description: Specifies the password that will be used to encrypt
//               subfiles subsequently added to the multifile, if the
//               encryption flag is also set true (see
//               set_encryption_flag()).
//
//               It is possible to apply a different password to
//               different files, but the resulting file can't be
//               mounted via VFS.  Changing this value may cause an
//               implicit call to flush().
////////////////////////////////////////////////////////////////////
82
inline void Multifile::set_encryption_password(string const &encryption_password);

2448 23 get_encryption_password 0 4 2763 34 Multifile::get_encryption_password 0 1 1107 395
////////////////////////////////////////////////////////////////////
//     Function: Multifile::get_encryption_password
//       Access: Published
//  Description: Returns the password that will be used to encrypt
//               subfiles subsequently added to the multifile.  See
//               set_encryption_password().
////////////////////////////////////////////////////////////////////
68
inline string const &Multifile::get_encryption_password(void) const;

2449 24 set_encryption_algorithm 0 4 2763 35 Multifile::set_encryption_algorithm 0 1 1108 1073
////////////////////////////////////////////////////////////////////
//     Function: Multifile::set_encryption_algorithm
//       Access: Public
//  Description: Specifies the encryption algorithm that should be
//               used for future calls to add_subfile().  The default
//               is whatever is specified by the encryption-algorithm
//               config variable.  The complete set of available
//               algorithms is defined by the current version of
//               OpenSSL.
//
//               If an invalid algorithm is specified, there is no
//               immediate error return code, but flush() will fail
//               and the file will be invalid.
//
//               It is possible to apply a different encryption
//               algorithm to different files, and unlike the
//               password, this does not interfere with mounting the
//               multifile via VFS.  Changing this value may cause an
//               implicit call to flush().
////////////////////////////////////////////////////////////////////
84
inline void Multifile::set_encryption_algorithm(string const &encryption_algorithm);

2450 24 get_encryption_algorithm 0 4 2763 35 Multifile::get_encryption_algorithm 0 1 1109 331
////////////////////////////////////////////////////////////////////
//     Function: Multifile::get_encryption_algorithm
//       Access: Public
//  Description: Returns the encryption algorithm that was specified
//               by set_encryption_algorithm().
////////////////////////////////////////////////////////////////////
69
inline string const &Multifile::get_encryption_algorithm(void) const;

2451 25 set_encryption_key_length 0 4 2763 36 Multifile::set_encryption_key_length 0 1 1110 998
////////////////////////////////////////////////////////////////////
//     Function: Multifile::set_encryption_key_length
//       Access: Public
//  Description: Specifies the length of the key, in bits, that should
//               be used to encrypt the stream in future calls to
//               add_subfile().  The default is whatever is specified
//               by the encryption-key-length config variable.  
//
//               If an invalid key_length for the chosen algorithm is
//               specified, there is no immediate error return code,
//               but flush() will fail and the file will be invalid.
//
//               It is possible to apply a different key length to
//               different files, and unlike the password, this does
//               not interfere with mounting the multifile via VFS.
//               Changing this value may cause an implicit call to
//               flush().
////////////////////////////////////////////////////////////////////
76
inline void Multifile::set_encryption_key_length(int encryption_key_length);

2452 25 get_encryption_key_length 0 4 2763 36 Multifile::get_encryption_key_length 0 1 1111 344
////////////////////////////////////////////////////////////////////
//     Function: Multifile::get_encryption_key_length
//       Access: Public
//  Description: Returns the encryption key length, in bits, that was
//               specified by set_encryption_key_length().
////////////////////////////////////////////////////////////////////
60
inline int Multifile::get_encryption_key_length(void) const;

2453 30 set_encryption_iteration_count 0 4 2763 41 Multifile::set_encryption_iteration_count 0 1 1112 1174
////////////////////////////////////////////////////////////////////
//     Function: Multifile::set_encryption_iteration_count
//       Access: Public
//  Description: Specifies the number of times to repeatedly hash the
//               key before writing it to the stream in future calls
//               to add_subfile().  Its purpose is to make it
//               computationally more expensive for an attacker to
//               search the key space exhaustively.  This should be a
//               multiple of 1,000 and should not exceed about 65
//               million; the value 0 indicates just one application
//               of the hashing algorithm.
//
//               The default is whatever is specified by the
//               multifile-encryption-iteration-count config variable.
//
//               It is possible to apply a different iteration count
//               to different files, and unlike the password, this
//               does not interfere with mounting the multifile via
//               VFS.  Changing this value causes an implicit call to
//               flush().
////////////////////////////////////////////////////////////////////
86
inline void Multifile::set_encryption_iteration_count(int encryption_iteration_count);

2454 30 get_encryption_iteration_count 0 4 2763 41 Multifile::get_encryption_iteration_count 0 1 1113 328
////////////////////////////////////////////////////////////////////
//     Function: Multifile::get_encryption_iteration_count
//       Access: Public
//  Description: Returns the value that was specified by
//               set_encryption_iteration_count().
////////////////////////////////////////////////////////////////////
65
inline int Multifile::get_encryption_iteration_count(void) const;

2455 11 add_subfile 0 4 2763 22 Multifile::add_subfile 0 2 1114 1115 2178
////////////////////////////////////////////////////////////////////
//     Function: Multifile::add_subfile
//       Access: Published
//  Description: Adds a file on disk as a subfile to the Multifile.
//               The file named by filename will be read and added to
//               the Multifile at the next call to flush().  If there
//               already exists a subfile with the indicated name, it
//               is replaced without examining its contents (but see
//               also update_subfile).
//
//               Filename::set_binary() or set_text() must have been
//               called previously to specify the nature of the source
//               file.  If set_text() was called, the text flag will
//               be set on the subfile.
//
//               Returns the subfile name on success (it might have
//               been modified slightly), or empty string on failure.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Multifile::add_subfile
//       Access: Public
//  Description: Adds a file from a stream as a subfile to the Multifile.
//               The indicated istream will be read and its contents
//               added to the Multifile at the next call to flush().
//               The file will be added as a binary subfile.
//
//               Note that the istream must remain untouched and
//               unused by any other code until flush() is called.  At
//               that time, the Multifile will read the entire
//               contents of the istream from the current file
//               position to the end of the file.  Subsequently, the
//               Multifile will *not* close or delete the istream.  It
//               is the caller's responsibility to ensure that the
//               istream pointer does not destruct during the lifetime
//               of the Multifile.
//
//               Returns the subfile name on success (it might have
//               been modified slightly), or empty string on failure.
////////////////////////////////////////////////////////////////////
212
string Multifile::add_subfile(string const &subfile_name, Filename const &filename, int compression_level);
string Multifile::add_subfile(string const &subfile_name, istream *subfile_data, int compression_level);

2456 14 update_subfile 0 4 2763 25 Multifile::update_subfile 0 1 1116 775
////////////////////////////////////////////////////////////////////
//     Function: Multifile::update_subfile
//       Access: Published
//  Description: Adds a file on disk to the subfile.  If a subfile
//               already exists with the same name, its contents are
//               compared byte-for-byte to the disk file, and it is
//               replaced only if it is different; otherwise, the
//               multifile is left unchanged.
//
//               Filename::set_binary() or set_text() must have been
//               called previously to specify the nature of the source
//               file.  If set_text() was called, the text flag will
//               be set on the subfile.
////////////////////////////////////////////////////////////////////
110
string Multifile::update_subfile(string const &subfile_name, Filename const &filename, int compression_level);

2457 13 add_signature 0 4 2763 24 Multifile::add_signature 0 2 1117 1118 5970
////////////////////////////////////////////////////////////////////
//     Function: Multifile::add_signature
//       Access: Published
//  Description: Adds a new signature to the Multifile.  This
//               signature associates the indicated certificate with
//               the current contents of the Multifile.  When the
//               Multifile is read later, the signature will still be
//               present only if the Multifile is unchanged; any
//               subsequent changes to the Multifile will
//               automatically invalidate and remove the signature.
//
//               The chain filename may be empty if the certificate
//               does not require an authenticating certificate chain
//               (e.g. because it is self-signed).
//
//               The specified private key must match the certificate,
//               and the Multifile must be open in read-write mode.
//               The private key is only used for generating the
//               signature; it is not written to the Multifile and
//               cannot be retrieved from the Multifile later.
//               (However, the certificate *can* be retrieved from the
//               Multifile later, to identify the entity that created
//               the signature.)
//
//               This implicitly causes a repack() operation if one is
//               needed.  Returns true on success, false on failure.
//
//               This flavor of add_signature() reads the certificate
//               and private key from a PEM-formatted file, for
//               instance as generated by the openssl command.  If the
//               private key file is password-encrypted, the third
//               parameter will be used as the password to decrypt it.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Multifile::add_signature
//       Access: Published
//  Description: Adds a new signature to the Multifile.  This
//               signature associates the indicated certificate with
//               the current contents of the Multifile.  When the
//               Multifile is read later, the signature will still be
//               present only if the Multifile is unchanged; any
//               subsequent changes to the Multifile will
//               automatically invalidate and remove the signature.
//
//               This flavor of add_signature() reads the certificate,
//               private key, and certificate chain from the same
//               PEM-formatted file.  It takes the first private key
//               found as the intended key, and then uses the first
//               certificate found that matches that key as the
//               signing certificate.  Any other certificates in the
//               file are taken to be part of the chain.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Multifile::add_signature
//       Access: Published
//  Description: Adds a new signature to the Multifile.  This
//               signature associates the indicated certificate with
//               the current contents of the Multifile.  When the
//               Multifile is read later, the signature will still be
//               present only if the Multifile is unchanged; any
//               subsequent changes to the Multifile will
//               automatically invalidate and remove the signature.
//
//               If chain is non-NULL, it represents the certificate
//               chain that validates the certificate.
//
//               The specified private key must match the certificate,
//               and the Multifile must be open in read-write mode.
//               The private key is only used for generating the
//               signature; it is not written to the Multifile and
//               cannot be retrieved from the Multifile later.
//               (However, the certificate *can* be retrieved from the
//               Multifile later, to identify the entity that created
//               the signature.)
//
//               This implicitly causes a repack() operation if one is
//               needed.  Returns true on success, false on failure.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Multifile::add_signature
//       Access: Published
//  Description: Adds a new signature to the Multifile.  This
//               signature associates the indicated certificate with
//               the current contents of the Multifile.  When the
//               Multifile is read later, the signature will still be
//               present only if the Multifile is unchanged; any
//               subsequent changes to the Multifile will
//               automatically invalidate and remove the signature.
//
//               The signature certificate is the first certificate on
//               the CertChain object.  Any remaining certificates are
//               support certificates to authenticate the first one.
//
//               The specified private key must match the certificate,
//               and the Multifile must be open in read-write mode.
//               The private key is only used for generating the
//               signature; it is not written to the Multifile and
//               cannot be retrieved from the Multifile later.
//               (However, the certificate *can* be retrieved from the
//               Multifile later, to identify the entity that created
//               the signature.)
//
//               This implicitly causes a repack() operation if one is
//               needed.  Returns true on success, false on failure.
////////////////////////////////////////////////////////////////////
220
bool Multifile::add_signature(Filename const &certificate, Filename const &chain, Filename const &pkey, string const &password = "");
bool Multifile::add_signature(Filename const &composite, string const &password = "");

2458 18 get_num_signatures 0 4 2763 29 Multifile::get_num_signatures 0 1 1119 921
////////////////////////////////////////////////////////////////////
//     Function: Multifile::get_num_signatures
//       Access: Published
//  Description: Returns the number of matching signatures found on
//               the Multifile.  These signatures may be iterated via
//               get_signature() and related methods.
//
//               A signature on this list is guaranteed to match the
//               Multifile contents, proving that the Multifile has
//               been unmodified since the signature was applied.
//               However, this does not guarantee that the certificate
//               itself is actually from who it says it is from; only
//               that it matches the Multifile contents.  See
//               validate_signature_certificate() to authenticate a
//               particular certificate.
////////////////////////////////////////////////////////////////////
46
int Multifile::get_num_signatures(void) const;

2459 26 get_signature_subject_name 0 4 2763 37 Multifile::get_signature_subject_name 0 1 1120 669
////////////////////////////////////////////////////////////////////
//     Function: Multifile::get_signature_subject_name
//       Access: Published
//  Description: Returns the "subject name" for the nth signature found
//               on the Multifile.  This is a string formatted
//               according to RFC2253 that should more-or-less
//               identify a particular certificate; when paired with
//               the public key (see get_signature_public_key()), it
//               can uniquely identify a certificate.  See the
//               comments in get_num_signatures().
////////////////////////////////////////////////////////////////////
58
string Multifile::get_signature_subject_name(int n) const;

2460 27 get_signature_friendly_name 0 4 2763 38 Multifile::get_signature_friendly_name 0 1 1121 127
//               See the comments in get_num_signatures().
////////////////////////////////////////////////////////////////////
59
string Multifile::get_signature_friendly_name(int n) const;

2461 24 get_signature_public_key 0 4 2763 35 Multifile::get_signature_public_key 0 1 1122 691
////////////////////////////////////////////////////////////////////
//     Function: Multifile::get_signature_public_key
//       Access: Published
//  Description: Returns the public key used for the nth signature
//               found on the Multifile.  This is encoded in DER form
//               and returned as a string of hex digits.
//
//               This can be used, in conjunction with the subject
//               name (see get_signature_subject_name()), to uniquely
//               identify a particular certificate and its subsequent
//               reissues.  See the comments in get_num_signatures().
////////////////////////////////////////////////////////////////////
56
string Multifile::get_signature_public_key(int n) const;

2462 27 print_signature_certificate 0 4 2763 38 Multifile::print_signature_certificate 0 1 1123 415
////////////////////////////////////////////////////////////////////
//     Function: Multifile::print_signature_certificate
//       Access: Published
//  Description: Writes the certificate for the nth signature, in
//               user-readable verbose form, to the indicated stream.
//               See the comments in get_num_signatures().
////////////////////////////////////////////////////////////////////
71
void Multifile::print_signature_certificate(int n, ostream &out) const;

2463 27 write_signature_certificate 0 4 2763 38 Multifile::write_signature_certificate 0 1 1124 398
////////////////////////////////////////////////////////////////////
//     Function: Multifile::write_signature_certificate
//       Access: Published
//  Description: Writes the certificate for the nth signature, in
//               PEM form, to the indicated stream.  See the comments
//               in get_num_signatures().
////////////////////////////////////////////////////////////////////
71
void Multifile::write_signature_certificate(int n, ostream &out) const;

2464 30 validate_signature_certificate 0 4 2763 41 Multifile::validate_signature_certificate 0 1 1125 595
////////////////////////////////////////////////////////////////////
//     Function: Multifile::validate_signature_certificate
//       Access: Published
//  Description: Checks that the certificate used for the nth
//               signature is a valid, authorized certificate with
//               some known certificate authority.  Returns 0 if it
//               is valid, -1 if there is some error, or the
//               corresponding OpenSSL error code if it is invalid,
//               out-of-date, or self-signed.
////////////////////////////////////////////////////////////////////
59
int Multifile::validate_signature_certificate(int n) const;

2465 5 flush 0 4 2763 16 Multifile::flush 0 1 1126 1090
////////////////////////////////////////////////////////////////////
//     Function: Multifile::flush
//       Access: Published
//  Description: Writes all contents of the Multifile to disk.  Until
//               flush() is called, add_subfile() and remove_subfile()
//               do not actually do anything to disk.  At this point,
//               all of the recently-added subfiles are read and their
//               contents are added to the end of the Multifile, and
//               the recently-removed subfiles are marked gone from
//               the Multifile.
//
//               This may result in a suboptimal index.  To guarantee
//               that the index is written at the beginning of the
//               file, call repack() instead of flush().
//
//               It is not necessary to call flush() explicitly unless
//               you are concerned about reading the recently-added
//               subfiles immediately.
//
//               Returns true on success, false on failure.
////////////////////////////////////////////////////////////////////
28
bool Multifile::flush(void);

2466 6 repack 0 4 2763 17 Multifile::repack 0 1 1127 959
////////////////////////////////////////////////////////////////////
//     Function: Multifile::repack
//       Access: Published
//  Description: Forces a complete rewrite of the Multifile and all of
//               its contents, so that its index will appear at the
//               beginning of the file with all of the subfiles listed
//               in alphabetical order.  This is considered optimal
//               for reading, and is the standard configuration; but
//               it is not essential to do this.
//
//               It is only valid to call this if the Multifile was
//               opened using open_read_write() and an explicit
//               filename, rather than an iostream.  Also, we must
//               have write permission to the directory containing the
//               Multifile.
//
//               Returns true on success, false on failure.
////////////////////////////////////////////////////////////////////
29
bool Multifile::repack(void);

2467 16 get_num_subfiles 0 4 2763 27 Multifile::get_num_subfiles 0 1 1128 412
////////////////////////////////////////////////////////////////////
//     Function: Multifile::get_num_subfiles
//       Access: Published
//  Description: Returns the number of subfiles within the Multifile.
//               The subfiles may be accessed in alphabetical order by
//               iterating through [0 .. get_num_subfiles()).
////////////////////////////////////////////////////////////////////
44
int Multifile::get_num_subfiles(void) const;

2468 12 find_subfile 0 4 2763 23 Multifile::find_subfile 0 1 1129 370
////////////////////////////////////////////////////////////////////
//     Function: Multifile::find_subfile
//       Access: Published
//  Description: Returns the index of the subfile with the indicated
//               name, or -1 if the named subfile is not within the
//               Multifile.
////////////////////////////////////////////////////////////////////
62
int Multifile::find_subfile(string const &subfile_name) const;

2469 13 has_directory 0 4 2763 24 Multifile::has_directory 0 1 1130 461
////////////////////////////////////////////////////////////////////
//     Function: Multifile::has_directory
//       Access: Published
//  Description: Returns true if the indicated subfile name is the
//               directory prefix to one or more files within the
//               Multifile.  That is, the Multifile contains at least
//               one file named "subfile_name/...".
////////////////////////////////////////////////////////////////////
64
bool Multifile::has_directory(string const &subfile_name) const;

2470 14 scan_directory 0 4 2763 25 Multifile::scan_directory 0 1 1131 755
////////////////////////////////////////////////////////////////////
//     Function: Multifile::scan_directory
//       Access: Published
//  Description: Considers subfile_name to be the name of a
//               subdirectory within the Multifile, but not a file
//               itself; fills the given vector up with the sorted list
//               of subdirectories or files within the named
//               directory.
//
//               Note that directories do not exist explicitly within
//               a Multifile; this just checks for the existence of
//               files with the given initial prefix.
//
//               Returns true if successful, false otherwise.
////////////////////////////////////////////////////////////////////
90
bool Multifile::scan_directory(vector_string &contents, string const &subfile_name) const;

2471 14 remove_subfile 0 4 2763 25 Multifile::remove_subfile 0 2 1132 1133 1596
////////////////////////////////////////////////////////////////////
//     Function: Multifile::remove_subfile
//       Access: Published
//  Description: Removes the named subfile from the Multifile, if it
//               exists; returns true if successfully removed, or
//               false if it did not exist in the first place.  The
//               file will not actually be removed from the disk until
//               the next call to flush().
//
//               Note that this does not actually remove the data from
//               the indicated subfile; it simply removes it from the
//               index.  The Multifile will not be reduced in size
//               after this operation, until the next call to
//               repack().
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Multifile::remove_subfile
//       Access: Published
//  Description: Removes the nth subfile from the Multifile.  This
//               will cause all subsequent index numbers to decrease
//               by one.  The file will not actually be removed from
//               the disk until the next call to flush().
//
//               Note that this does not actually remove the data from
//               the indicated subfile; it simply removes it from the
//               index.  The Multifile will not be reduced in size
//               after this operation, until the next call to
//               repack().
////////////////////////////////////////////////////////////////////
109
void Multifile::remove_subfile(int index);
inline bool Multifile::remove_subfile(string const &subfile_name);

2472 16 get_subfile_name 0 4 2763 27 Multifile::get_subfile_name 0 1 1134 263
////////////////////////////////////////////////////////////////////
//     Function: Multifile::get_subfile_name
//       Access: Published
//  Description: Returns the name of the nth subfile.
////////////////////////////////////////////////////////////////////
59
string const &Multifile::get_subfile_name(int index) const;

2473 18 get_subfile_length 0 4 2763 29 Multifile::get_subfile_length 0 1 1135 433
////////////////////////////////////////////////////////////////////
//     Function: Multifile::get_subfile_length
//       Access: Published
//  Description: Returns the uncompressed data length of the nth
//               subfile.  This might return 0 if the subfile has
//               recently been added and flush() has not yet been
//               called.
////////////////////////////////////////////////////////////////////
54
size_t Multifile::get_subfile_length(int index) const;

2474 21 get_subfile_timestamp 0 4 2763 32 Multifile::get_subfile_timestamp 0 1 1136 567
////////////////////////////////////////////////////////////////////
//     Function: Multifile::get_subfile_timestamp
//       Access: Published
//  Description: Returns the modification time of the nth
//               subfile.  If this is called on an older .mf file,
//               which did not store individual timestamps in the file
//               (or if get_record_timestamp() is false), this will
//               return the modification time of the overall
//               multifile.
////////////////////////////////////////////////////////////////////
57
time_t Multifile::get_subfile_timestamp(int index) const;

2475 21 is_subfile_compressed 0 4 2763 32 Multifile::is_subfile_compressed 0 1 1137 372
////////////////////////////////////////////////////////////////////
//     Function: Multifile::is_subfile_compressed
//       Access: Published
//  Description: Returns true if the indicated subfile has been
//               compressed when stored within the archive, false
//               otherwise.
////////////////////////////////////////////////////////////////////
55
bool Multifile::is_subfile_compressed(int index) const;

2476 20 is_subfile_encrypted 0 4 2763 31 Multifile::is_subfile_encrypted 0 1 1138 370
////////////////////////////////////////////////////////////////////
//     Function: Multifile::is_subfile_encrypted
//       Access: Published
//  Description: Returns true if the indicated subfile has been
//               encrypted when stored within the archive, false
//               otherwise.
////////////////////////////////////////////////////////////////////
54
bool Multifile::is_subfile_encrypted(int index) const;

2477 15 is_subfile_text 0 4 2763 26 Multifile::is_subfile_text 0 1 1139 647
////////////////////////////////////////////////////////////////////
//     Function: Multifile::is_subfile_text
//       Access: Published
//  Description: Returns true if the indicated subfile represents text
//               data, or false if it represents binary data.  If the
//               file is text data, it may have been processed by
//               end-of-line conversion when it was added.  (But the
//               actual bits in the multifile will represent the
//               standard Unix end-of-line convention, e.g. \n instead
//               of \r\n.)
////////////////////////////////////////////////////////////////////
49
bool Multifile::is_subfile_text(int index) const;

2478 13 get_index_end 0 4 2763 24 Multifile::get_index_end 0 1 1140 688
////////////////////////////////////////////////////////////////////
//     Function: Multifile::get_index_end
//       Access: Published
//  Description: Returns the first byte that is guaranteed to follow
//               any index byte already written to disk in the
//               Multifile.
//
//               This number is largely meaningless in many cases, but
//               if needs_repack() is false, and the file is flushed,
//               this will indicate the number of bytes in the header
//               + index.  Everything at this byte position and later
//               will be actual data.
////////////////////////////////////////////////////////////////////
47
streamoff Multifile::get_index_end(void) const;

2479 26 get_subfile_internal_start 0 4 2763 37 Multifile::get_subfile_internal_start 0 1 1141 653
////////////////////////////////////////////////////////////////////
//     Function: Multifile::get_subfile_internal_start
//       Access: Published
//  Description: Returns the starting byte position within the
//               Multifile at which the indicated subfile begins.
//               This may be used, with get_subfile_internal_length(),
//               for low-level access to the subfile, but usually it
//               is better to use open_read_subfile() instead (which
//               automatically decrypts and/or uncompresses the
//               subfile data).
////////////////////////////////////////////////////////////////////
65
streamoff Multifile::get_subfile_internal_start(int index) const;

2480 27 get_subfile_internal_length 0 4 2763 38 Multifile::get_subfile_internal_length 0 1 1142 639
////////////////////////////////////////////////////////////////////
//     Function: Multifile::get_subfile_internal_length
//       Access: Published
//  Description: Returns the number of bytes the indicated subfile
//               consumes within the archive.  For compressed
//               subfiles, this will generally be smaller than
//               get_subfile_length(); for encrypted (but
//               noncompressed) subfiles, it may be slightly
//               different, for noncompressed and nonencrypted
//               subfiles, it will be equal.
////////////////////////////////////////////////////////////////////
63
size_t Multifile::get_subfile_internal_length(int index) const;

2481 12 read_subfile 0 4 2763 23 Multifile::read_subfile 0 1 1143 925
////////////////////////////////////////////////////////////////////
//     Function: Multifile::read_subfile
//       Access: Published
//  Description: Returns a string that contains the entire contents of
//               the indicated subfile.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Multifile::read_subfile
//       Access: Public
//  Description: Fills a string with the entire contents of
//               the indicated subfile.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Multifile::read_subfile
//       Access: Public
//  Description: Fills a pvector with the entire contents of
//               the indicated subfile.
////////////////////////////////////////////////////////////////////
49
inline string Multifile::read_subfile(int index);

2482 17 open_read_subfile 0 4 2763 28 Multifile::open_read_subfile 0 1 1144 1636
////////////////////////////////////////////////////////////////////
//     Function: Multifile::open_read_subfile
//       Access: Published
//  Description: Returns an istream that may be used to read the
//               indicated subfile.  You may seek() within this
//               istream to your heart's content; even though it will
//               be a reference to the already-opened pfstream of the
//               Multifile itself, byte 0 appears to be the beginning
//               of the subfile and EOF appears to be the end of the
//               subfile.
//
//               The returned istream will have been allocated via
//               new; you should pass the pointer to
//               close_read_subfile() when you are finished with it to
//               delete it and release its resources.
//
//               Any future calls to repack() or close() (or the
//               Multifile destructor) will invalidate all currently
//               open subfile pointers.
//
//               The return value will be NULL if the stream cannot be
//               opened for some reason.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Multifile::open_read_subfile
//       Access: Private
//  Description: This variant of open_read_subfile() is used
//               internally only, and accepts a pointer to the
//               internal Subfile object, which is assumed to be valid
//               and written to the multifile.
////////////////////////////////////////////////////////////////////
49
istream *Multifile::open_read_subfile(int index);

2483 18 close_read_subfile 0 4 2763 29 Multifile::close_read_subfile 0 1 1145 531
////////////////////////////////////////////////////////////////////
//     Function: Multifile::close_read_subfile
//       Access: Published, Static
//  Description: Closes a file opened by a previous call to
//               open_read_subfile().  This really just deletes the
//               istream pointer, but it is recommended to use this
//               interface instead of deleting it explicitly, to help
//               work around compiler issues.
////////////////////////////////////////////////////////////////////
59
static void Multifile::close_read_subfile(istream *stream);

2484 15 extract_subfile 0 4 2763 26 Multifile::extract_subfile 0 1 1146 300
////////////////////////////////////////////////////////////////////
//     Function: Multifile::extract_subfile
//       Access: Published
//  Description: Extracts the nth subfile into a file with the given
//               name.
////////////////////////////////////////////////////////////////////
69
bool Multifile::extract_subfile(int index, Filename const &filename);

2485 18 extract_subfile_to 0 4 2763 29 Multifile::extract_subfile_to 0 1 1147 276
////////////////////////////////////////////////////////////////////
//     Function: Multifile::extract_subfile_to
//       Access: Public
//  Description: Extracts the nth subfile to the indicated ostream.
////////////////////////////////////////////////////////////////////
60
bool Multifile::extract_subfile_to(int index, ostream &out);

2486 15 compare_subfile 0 4 2763 26 Multifile::compare_subfile 0 1 1148 858
////////////////////////////////////////////////////////////////////
//     Function: Multifile::compare_subfile
//       Access: Published
//  Description: Performs a byte-for-byte comparison of the indicated
//               file on disk with the nth subfile.  Returns true if
//               the files are equivalent, or false if they are
//               different (or the file is missing).
//
//               If Filename::set_binary() or set_text() has already
//               been called, it specifies the nature of the source
//               file.  If this is different from the text flag of the
//               subfile, the comparison will always return false.
//               If this has not been specified, it will be set from
//               the text flag of the subfile.
////////////////////////////////////////////////////////////////////
69
bool Multifile::compare_subfile(int index, Filename const &filename);

2487 6 output 0 4 2763 17 Multifile::output 0 1 1149 217
////////////////////////////////////////////////////////////////////
//     Function: Multifile::output
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
43
void Multifile::output(ostream &out) const;

2488 2 ls 0 4 2763 13 Multifile::ls 0 1 1150 263
////////////////////////////////////////////////////////////////////
//     Function: Multifile::ls
//       Access: Published
//  Description: Shows a list of all subfiles within the Multifile.
////////////////////////////////////////////////////////////////////
48
void Multifile::ls(ostream &out = ::cout) const;

2489 16 get_magic_number 0 4 2763 27 Multifile::get_magic_number 0 1 1151 346
////////////////////////////////////////////////////////////////////
//     Function: Multifile::get_magic_number
//       Access: Published, Static
//  Description: Returns a string with the first n bytes written to a
//               Multifile, to identify it as a Multifile.
////////////////////////////////////////////////////////////////////
55
static inline string Multifile::get_magic_number(void);

2490 17 set_header_prefix 0 4 2763 28 Multifile::set_header_prefix 0 1 1152 1041
////////////////////////////////////////////////////////////////////
//     Function: Multifile::set_header_prefix
//       Access: Published
//  Description: Sets the string which is written to the Multifile
//               before the Multifile header.  This string must begin
//               with a hash mark and end with a newline character;
//               and if it includes embedded newline characters, each
//               one must be followed by a hash mark.  If these
//               conditions are not initially true, the string will be
//               modified as necessary to make it so.
//
//               This is primarily useful as a simple hack to allow
//               p3d applications to be run directly from the command
//               line on Unix-like systems.
//
//               The return value is true if successful, or false on
//               failure (for instance, because the header prefix
//               violates the above rules).
////////////////////////////////////////////////////////////////////
63
void Multifile::set_header_prefix(string const &header_prefix);

2491 17 get_header_prefix 0 4 2763 28 Multifile::get_header_prefix 0 1 1153 345
////////////////////////////////////////////////////////////////////
//     Function: Multifile::get_header_prefix
//       Access: Published
//  Description: Returns the string that preceded the Multifile header
//               on the file, if any.  See set_header_prefix().
////////////////////////////////////////////////////////////////////
62
inline string const &Multifile::get_header_prefix(void) const;

2492 7 Namable 0 4 2764 16 Namable::Namable 0 2 1154 1155 439
////////////////////////////////////////////////////////////////////
//     Function: Namable::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Namable::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
112
inline explicit Namable::Namable(string const &initial_name = "");
inline Namable::Namable(Namable const &copy);

2493 10 operator = 0 4 2764 19 Namable::operator = 0 1 1156 229
////////////////////////////////////////////////////////////////////
//     Function: Namable::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
58
inline Namable &Namable::operator =(Namable const &other);

2494 8 set_name 0 4 2764 17 Namable::set_name 0 1 1157 213
////////////////////////////////////////////////////////////////////
//     Function: Namable::set_name
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
50
inline void Namable::set_name(string const &name);

2495 10 clear_name 0 4 2764 19 Namable::clear_name 0 1 1158 251
////////////////////////////////////////////////////////////////////
//     Function: Namable::clear_name
//       Access: Public
//  Description: Resets the Namable's name to empty.
////////////////////////////////////////////////////////////////////
38
inline void Namable::clear_name(void);

2496 8 has_name 0 4 2764 17 Namable::has_name 0 1 1159 311
////////////////////////////////////////////////////////////////////
//     Function: Namable::has_name
//       Access: Public
//  Description: Returns true if the Namable has a nonempty name set,
//               false if the name is empty.
////////////////////////////////////////////////////////////////////
42
inline bool Namable::has_name(void) const;

2497 8 get_name 0 4 2764 17 Namable::get_name 0 1 1160 213
////////////////////////////////////////////////////////////////////
//     Function: Namable::get_name
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
51
inline string const &Namable::get_name(void) const;

2498 6 output 0 4 2764 15 Namable::output 0 1 1161 483
// In the absence of any definition to the contrary, outputting a
// Namable will write out its name.

////////////////////////////////////////////////////////////////////
//     Function: Namable::output
//       Access: Public
//  Description: Outputs the Namable.  This function simply writes the
//               name to the output stream; most Namable derivatives
//               will probably redefine this.
////////////////////////////////////////////////////////////////////
48
inline void Namable::output(ostream &out) const;

2499 14 get_class_type 0 4 2764 23 Namable::get_class_type 0 1 1162 0
48
static TypeHandle Namable::get_class_type(void);

2500 8 ~Namable 0 4 2764 17 Namable::~Namable 0 0 0
24
Namable::~Namable(void);

2501 11 SubfileInfo 0 4 2765 24 SubfileInfo::SubfileInfo 0 4 1163 1164 1165 1166 915
////////////////////////////////////////////////////////////////////
//     Function: SubfileInfo::Default Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: SubfileInfo::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: SubfileInfo::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: SubfileInfo::Copy Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
283
inline SubfileInfo::SubfileInfo(void);
inline SubfileInfo::SubfileInfo(FileReference const *file, streamoff start, streamsize size);
inline SubfileInfo::SubfileInfo(Filename const &filename, streamoff start, streamsize size);
inline SubfileInfo::SubfileInfo(SubfileInfo const &copy);

2502 10 operator = 0 4 2765 23 SubfileInfo::operator = 0 1 1167 0
61
inline void SubfileInfo::operator =(SubfileInfo const &copy);

2503 8 is_empty 0 4 2765 21 SubfileInfo::is_empty 0 1 1168 322
////////////////////////////////////////////////////////////////////
//     Function: SubfileInfo::is_empty
//       Access: Published
//  Description: Returns true if this SubfileInfo doesn't define any
//               file, false if it has real data.
////////////////////////////////////////////////////////////////////
46
inline bool SubfileInfo::is_empty(void) const;

2504 8 get_file 0 4 2765 21 SubfileInfo::get_file 0 1 1169 273
////////////////////////////////////////////////////////////////////
//     Function: SubfileInfo::get_file
//       Access: Published
//  Description: Returns the FileReference that represents this file.
////////////////////////////////////////////////////////////////////
62
inline FileReference const *SubfileInfo::get_file(void) const;

2505 12 get_filename 0 4 2765 25 SubfileInfo::get_filename 0 1 1170 252
////////////////////////////////////////////////////////////////////
//     Function: SubfileInfo::get_filename
//       Access: Published
//  Description: A shortcut to the filename.
////////////////////////////////////////////////////////////////////
61
inline Filename const &SubfileInfo::get_filename(void) const;

2506 9 get_start 0 4 2765 22 SubfileInfo::get_start 0 1 1171 305
////////////////////////////////////////////////////////////////////
//     Function: SubfileInfo::get_start
//       Access: Published
//  Description: Returns the offset within the file at which this file
//               data begins.
////////////////////////////////////////////////////////////////////
52
inline streamoff SubfileInfo::get_start(void) const;

2507 8 get_size 0 4 2765 21 SubfileInfo::get_size 0 1 1172 339
////////////////////////////////////////////////////////////////////
//     Function: SubfileInfo::get_size
//       Access: Published
//  Description: Returns the number of consecutive bytes, beginning at
//               get_start(), that correspond to this file data.
////////////////////////////////////////////////////////////////////
52
inline streamsize SubfileInfo::get_size(void) const;

2508 6 output 0 4 2765 19 SubfileInfo::output 0 1 1173 219
////////////////////////////////////////////////////////////////////
//     Function: SubfileInfo::output
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
45
void SubfileInfo::output(ostream &out) const;

2509 12 ~SubfileInfo 0 4 2765 25 SubfileInfo::~SubfileInfo 0 0 0
32
SubfileInfo::~SubfileInfo(void);

2510 15 get_file_system 0 6 2766 28 VirtualFile::get_file_system 0 1 1174 0
72
virtual VirtualFileSystem *VirtualFile::get_file_system(void) const = 0;

2511 12 get_filename 0 6 2766 25 VirtualFile::get_filename 0 1 1175 0
59
virtual Filename VirtualFile::get_filename(void) const = 0;

2512 21 get_original_filename 0 4 2766 34 VirtualFile::get_original_filename 0 1 1176 418
////////////////////////////////////////////////////////////////////
//     Function: VirtualFile::get_original_filename
//       Access: Published
//  Description: Returns the original filename as it was used to
//               locate this VirtualFile.  This is usually, but not
//               always, the same string returned by get_filename().
////////////////////////////////////////////////////////////////////
70
inline Filename const &VirtualFile::get_original_filename(void) const;

2513 8 has_file 0 6 2766 21 VirtualFile::has_file 0 1 1177 280
////////////////////////////////////////////////////////////////////
//     Function: VirtualFile::has_file
//       Access: Published, Virtual
//  Description: Returns true if this file exists, false otherwise.
////////////////////////////////////////////////////////////////////
47
virtual bool VirtualFile::has_file(void) const;

2514 12 is_directory 0 6 2766 25 VirtualFile::is_directory 0 1 1178 354
////////////////////////////////////////////////////////////////////
//     Function: VirtualFile::is_directory
//       Access: Published, Virtual
//  Description: Returns true if this file represents a directory (and
//               scan_directory() may be called), false otherwise.
////////////////////////////////////////////////////////////////////
51
virtual bool VirtualFile::is_directory(void) const;

2515 15 is_regular_file 0 6 2766 28 VirtualFile::is_regular_file 0 1 1179 355
////////////////////////////////////////////////////////////////////
//     Function: VirtualFile::is_regular_file
//       Access: Published, Virtual
//  Description: Returns true if this file represents a regular file
//               (and read_file() may be called), false otherwise.
////////////////////////////////////////////////////////////////////
54
virtual bool VirtualFile::is_regular_file(void) const;

2516 11 is_writable 0 6 2766 24 VirtualFile::is_writable 0 1 1180 406
////////////////////////////////////////////////////////////////////
//     Function: VirtualFile::is_writable
//       Access: Published, Virtual
//  Description: Returns true if this file may be written to, which
//               implies write_file() may be called (unless it is a
//               directory instead of a regular file).
////////////////////////////////////////////////////////////////////
50
virtual bool VirtualFile::is_writable(void) const;

2517 11 delete_file 0 6 2766 24 VirtualFile::delete_file 0 1 1181 454
////////////////////////////////////////////////////////////////////
//     Function: VirtualFile::delete_file
//       Access: Public
//  Description: Attempts to delete this file or directory.  This can
//               remove a single file or an empty directory.  It will
//               not remove a nonempty directory.  Returns true on
//               success, false on failure.
////////////////////////////////////////////////////////////////////
44
virtual bool VirtualFile::delete_file(void);

2518 11 rename_file 0 6 2766 24 VirtualFile::rename_file 0 1 1182 964
////////////////////////////////////////////////////////////////////
//     Function: VirtualFile::rename_file
//       Access: Public
//  Description: Attempts to move or rename this file or directory.
//               If the original file is an ordinary file, it will
//               quietly replace any already-existing file in the new
//               filename (but not a directory).  If the original file
//               is a directory, the new filename must not already
//               exist.
//
//               If the file is a directory, the new filename must be
//               within the same mount point.  If the file is an
//               ordinary file, the new filename may be anywhere; but
//               if it is not within the same mount point then the
//               rename operation is automatically performed as a
//               two-step copy-and-delete operation.
////////////////////////////////////////////////////////////////////
61
virtual bool VirtualFile::rename_file(VirtualFile *new_file);

2519 9 copy_file 0 6 2766 22 VirtualFile::copy_file 0 1 1183 362
////////////////////////////////////////////////////////////////////
//     Function: VirtualFile::copy_file
//       Access: Public
//  Description: Attempts to copy the contents of this file to the
//               indicated file.  Returns true on success, false on
//               failure.
////////////////////////////////////////////////////////////////////
59
virtual bool VirtualFile::copy_file(VirtualFile *new_file);

2520 14 scan_directory 0 4 2766 27 VirtualFile::scan_directory 0 1 1184 522
////////////////////////////////////////////////////////////////////
//     Function: VirtualFile::scan_directory
//       Access: Published
//  Description: If the file represents a directory (that is,
//               is_directory() returns true), this returns the list
//               of files within the directory at the current time.
//               Returns NULL if the file is not a directory or if the
//               directory cannot be read.
////////////////////////////////////////////////////////////////////
69
PointerTo< VirtualFileList > VirtualFile::scan_directory(void) const;

2521 6 output 0 4 2766 19 VirtualFile::output 0 1 1185 219
////////////////////////////////////////////////////////////////////
//     Function: VirtualFile::output
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
45
void VirtualFile::output(ostream &out) const;

2522 2 ls 0 4 2766 15 VirtualFile::ls 0 1 1186 287
////////////////////////////////////////////////////////////////////
//     Function: VirtualFile::ls
//       Access: Published
//  Description: If the file represents a directory, lists its
//               contents.
////////////////////////////////////////////////////////////////////
50
void VirtualFile::ls(ostream &out = ::cout) const;

2523 6 ls_all 0 4 2766 19 VirtualFile::ls_all 0 1 1187 335
////////////////////////////////////////////////////////////////////
//     Function: VirtualFile::ls_all
//       Access: Published
//  Description: If the file represents a directory, recursively lists
//               its contents and those of all subdirectories.
////////////////////////////////////////////////////////////////////
54
void VirtualFile::ls_all(ostream &out = ::cout) const;

2524 9 read_file 0 4 2766 22 VirtualFile::read_file 0 1 1188 1047
////////////////////////////////////////////////////////////////////
//     Function: VirtualFile::read_file
//       Access: Public
//  Description: Returns the entire contents of the file as a string.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: VirtualFile::read_file
//       Access: Public
//  Description: Fills up the indicated string with the contents of
//               the file, if it is a regular file.  Returns true on
//               success, false otherwise.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: VirtualFile::read_file
//       Access: Public, Virtual
//  Description: Fills up the indicated pvector with the contents of
//               the file, if it is a regular file.  Returns true on
//               success, false otherwise.
////////////////////////////////////////////////////////////////////
61
inline string VirtualFile::read_file(bool auto_unwrap) const;

2525 14 open_read_file 0 6 2766 27 VirtualFile::open_read_file 0 1 1189 449
////////////////////////////////////////////////////////////////////
//     Function: VirtualFile::open_read_file
//       Access: Published, Virtual
//  Description: Opens the file for reading.  Returns a newly
//               allocated istream on success (which you should
//               eventually delete when you are done reading).
//               Returns NULL on failure.
////////////////////////////////////////////////////////////////////
69
virtual istream *VirtualFile::open_read_file(bool auto_unwrap) const;

2526 15 close_read_file 0 6 2766 28 VirtualFile::close_read_file 0 1 1190 519
////////////////////////////////////////////////////////////////////
//     Function: VirtualFile::close_read_file
//       Access: Published
//  Description: Closes a file opened by a previous call to
//               open_read_file().  This really just deletes the
//               istream pointer, but it is recommended to use this
//               interface instead of deleting it explicitly, to help
//               work around compiler issues.
////////////////////////////////////////////////////////////////////
65
virtual void VirtualFile::close_read_file(istream *stream) const;

2527 19 was_read_successful 0 6 2766 32 VirtualFile::was_read_successful 0 1 1191 627
////////////////////////////////////////////////////////////////////
//     Function: VirtualFile::was_read_successful
//       Access: Published, Virtual
//  Description: Call this method after a reading the istream returned
//               by open_read_file() to completion.  If it returns
//               true, the file was read completely and without error;
//               if it returns false, there may have been some errors
//               or a truncated file read.  This is particularly
//               likely if the stream is a VirtualFileHTTP.
////////////////////////////////////////////////////////////////////
58
virtual bool VirtualFile::was_read_successful(void) const;

2528 10 write_file 0 4 2766 23 VirtualFile::write_file 0 1 1192 655
////////////////////////////////////////////////////////////////////
//     Function: VirtualFile::write_file
//       Access: Public
//  Description: Writes the entire contents of the file as a string,
//               if it is writable.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: VirtualFile::write_file
//       Access: Public, Virtual
//  Description: Writes the indicated data to the file, if it is
//               writable.  Returns true on success, false otherwise.
////////////////////////////////////////////////////////////////////
72
inline bool VirtualFile::write_file(string const &data, bool auto_wrap);

2529 15 open_write_file 0 6 2766 28 VirtualFile::open_write_file 0 1 1193 450
////////////////////////////////////////////////////////////////////
//     Function: VirtualFile::open_write_file
//       Access: Published, Virtual
//  Description: Opens the file for writing.  Returns a newly
//               allocated ostream on success (which you should
//               eventually delete when you are done writing).
//               Returns NULL on failure.
////////////////////////////////////////////////////////////////////
77
virtual ostream *VirtualFile::open_write_file(bool auto_wrap, bool truncate);

2530 16 open_append_file 0 6 2766 29 VirtualFile::open_append_file 0 1 1194 452
////////////////////////////////////////////////////////////////////
//     Function: VirtualFile::open_append_file
//       Access: Published, Virtual
//  Description: Works like open_write_file(), but the file is opened
//               in append mode.  Like open_write_file, the returned
//               pointer should eventually be passed to
//               close_write_file().
////////////////////////////////////////////////////////////////////
53
virtual ostream *VirtualFile::open_append_file(void);

2531 16 close_write_file 0 6 2766 29 VirtualFile::close_write_file 0 1 1195 521
////////////////////////////////////////////////////////////////////
//     Function: VirtualFile::close_write_file
//       Access: Published
//  Description: Closes a file opened by a previous call to
//               open_write_file().  This really just deletes the
//               ostream pointer, but it is recommended to use this
//               interface instead of deleting it explicitly, to help
//               work around compiler issues.
////////////////////////////////////////////////////////////////////
60
virtual void VirtualFile::close_write_file(ostream *stream);

2532 20 open_read_write_file 0 6 2766 33 VirtualFile::open_read_write_file 0 1 1196 456
////////////////////////////////////////////////////////////////////
//     Function: VirtualFile::open_read_write_file
//       Access: Published, Virtual
//  Description: Opens the file for writing.  Returns a newly
//               allocated iostream on success (which you should
//               eventually delete when you are done writing).
//               Returns NULL on failure.
////////////////////////////////////////////////////////////////////
67
virtual iostream *VirtualFile::open_read_write_file(bool truncate);

2533 21 open_read_append_file 0 6 2766 34 VirtualFile::open_read_append_file 0 1 1197 472
////////////////////////////////////////////////////////////////////
//     Function: VirtualFile::open_read_append_file
//       Access: Published, Virtual
//  Description: Works like open_read_write_file(), but the file is opened
//               in append mode.  Like open_read_write_file, the returned
//               pointer should eventually be passed to
//               close_read_write_file().
////////////////////////////////////////////////////////////////////
59
virtual iostream *VirtualFile::open_read_append_file(void);

2534 21 close_read_write_file 0 6 2766 34 VirtualFile::close_read_write_file 0 1 1198 532
////////////////////////////////////////////////////////////////////
//     Function: VirtualFile::close_read_write_file
//       Access: Published
//  Description: Closes a file opened by a previous call to
//               open_read_write_file().  This really just deletes the
//               iostream pointer, but it is recommended to use this
//               interface instead of deleting it explicitly, to help
//               work around compiler issues.
////////////////////////////////////////////////////////////////////
66
virtual void VirtualFile::close_read_write_file(iostream *stream);

2535 13 get_file_size 0 6 2766 26 VirtualFile::get_file_size 0 2 1199 1200 853
////////////////////////////////////////////////////////////////////
//     Function: VirtualFile::get_file_size
//       Access: Published, Virtual
//  Description: Returns the current size on disk (or wherever it is)
//               of the already-open file.  Pass in the stream that
//               was returned by open_read_file(); some
//               implementations may require this stream to determine
//               the size.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: VirtualFile::get_file_size
//       Access: Published, Virtual
//  Description: Returns the current size on disk (or wherever it is)
//               of the file before it has been opened.
////////////////////////////////////////////////////////////////////
128
virtual streamsize VirtualFile::get_file_size(istream *stream) const;
virtual streamsize VirtualFile::get_file_size(void) const;

2536 13 get_timestamp 0 6 2766 26 VirtualFile::get_timestamp 0 1 1201 776
////////////////////////////////////////////////////////////////////
//     Function: VirtualFile::get_timestamp
//       Access: Published, Virtual
//  Description: Returns a time_t value that represents the time the
//               file was last modified, to within whatever precision
//               the operating system records this information (on a
//               Windows95 system, for instance, this may only be
//               accurate to within 2 seconds).
//
//               If the timestamp cannot be determined, either because
//               it is not supported by the operating system or
//               because there is some error (such as file not found),
//               returns 0.
////////////////////////////////////////////////////////////////////
54
virtual time_t VirtualFile::get_timestamp(void) const;

2537 15 get_system_info 0 6 2766 28 VirtualFile::get_system_info 0 1 1202 629
////////////////////////////////////////////////////////////////////
//     Function: VirtualFile::get_system_info
//       Access: Published, Virtual
//  Description: Populates the SubfileInfo structure with the data
//               representing where the file actually resides on disk,
//               if this is knowable.  Returns true if the file might
//               reside on disk, and the info is populated, or false
//               if it does not (or it is not known where the file
//               resides), in which case the info is meaningless.
////////////////////////////////////////////////////////////////////
61
virtual bool VirtualFile::get_system_info(SubfileInfo &info);

2538 14 get_class_type 0 4 2766 27 VirtualFile::get_class_type 0 1 1203 0
52
static TypeHandle VirtualFile::get_class_type(void);

2539 12 ~VirtualFile 0 4 2766 25 VirtualFile::~VirtualFile 0 0 0
32
VirtualFile::~VirtualFile(void);

2540 14 get_class_type 0 4 2767 36 VirtualFileComposite::get_class_type 0 1 1204 0
61
static TypeHandle VirtualFileComposite::get_class_type(void);

2541 21 ~VirtualFileComposite 0 4 2767 43 VirtualFileComposite::~VirtualFileComposite 0 0 0
50
VirtualFileComposite::~VirtualFileComposite(void);

2542 15 get_file_system 0 4 2768 33 VirtualFileMount::get_file_system 0 1 1205 304
////////////////////////////////////////////////////////////////////
//     Function: VirtualFileMount::get_file_system
//       Access: Public
//  Description: Returns the file system this mount object is attached
//               to.
////////////////////////////////////////////////////////////////////
72
inline VirtualFileSystem *VirtualFileMount::get_file_system(void) const;

2543 15 get_mount_point 0 4 2768 33 VirtualFileMount::get_mount_point 0 1 1206 410
////////////////////////////////////////////////////////////////////
//     Function: VirtualFileMount::get_mount_point
//       Access: Public
//  Description: Returns the name of the directory within the virtual
//               file system that this mount object is attached to.
//               This directory name will end with a slash.
////////////////////////////////////////////////////////////////////
69
inline Filename const &VirtualFileMount::get_mount_point(void) const;

2544 15 get_mount_flags 0 4 2768 33 VirtualFileMount::get_mount_flags 0 1 1207 333
////////////////////////////////////////////////////////////////////
//     Function: VirtualFileMount::get_mount_flags
//       Access: Public
//  Description: Returns the set of flags passed by the user to the
//               VirtualFileSystem::mount() command.
////////////////////////////////////////////////////////////////////
57
inline int VirtualFileMount::get_mount_flags(void) const;

2545 6 output 0 6 2768 24 VirtualFileMount::output 0 1 1208 230
////////////////////////////////////////////////////////////////////
//     Function: VirtualFileMount::output
//       Access: Public, Virtual
//  Description: 
////////////////////////////////////////////////////////////////////
58
virtual void VirtualFileMount::output(ostream &out) const;

2546 5 write 0 6 2768 23 VirtualFileMount::write 0 1 1209 229
////////////////////////////////////////////////////////////////////
//     Function: VirtualFileMount::write
//       Access: Public, Virtual
//  Description: 
////////////////////////////////////////////////////////////////////
57
virtual void VirtualFileMount::write(ostream &out) const;

2547 14 get_class_type 0 4 2768 32 VirtualFileMount::get_class_type 0 1 1210 0
57
static TypeHandle VirtualFileMount::get_class_type(void);

2548 25 VirtualFileMountMultifile 0 4 2769 52 VirtualFileMountMultifile::VirtualFileMountMultifile 0 1 1211 235
////////////////////////////////////////////////////////////////////
//     Function: VirtualFileMountMultifile::Constructor
//       Access: Public
//  Description: 
////////////////////////////////////////////////////////////////////
82
inline VirtualFileMountMultifile::VirtualFileMountMultifile(Multifile *multifile);

2549 13 get_multifile 0 4 2769 40 VirtualFileMountMultifile::get_multifile 0 1 1212 319
////////////////////////////////////////////////////////////////////
//     Function: VirtualFileMountMultifile::get_multifile
//       Access: Public
//  Description: Returns the Multifile pointer that this mount object
//               is based on.
////////////////////////////////////////////////////////////////////
71
inline Multifile *VirtualFileMountMultifile::get_multifile(void) const;

2550 14 get_class_type 0 4 2769 41 VirtualFileMountMultifile::get_class_type 0 1 1213 0
66
static TypeHandle VirtualFileMountMultifile::get_class_type(void);

2551 23 VirtualFileMountRamdisk 0 4 2770 48 VirtualFileMountRamdisk::VirtualFileMountRamdisk 0 1 1214 233
////////////////////////////////////////////////////////////////////
//     Function: VirtualFileMountRamdisk::Constructor
//       Access: Public
//  Description: 
////////////////////////////////////////////////////////////////////
55
VirtualFileMountRamdisk::VirtualFileMountRamdisk(void);

2552 14 get_class_type 0 4 2770 39 VirtualFileMountRamdisk::get_class_type 0 1 1215 0
64
static TypeHandle VirtualFileMountRamdisk::get_class_type(void);

2553 24 ~VirtualFileMountRamdisk 0 4 2770 49 VirtualFileMountRamdisk::~VirtualFileMountRamdisk 0 0 0
56
VirtualFileMountRamdisk::~VirtualFileMountRamdisk(void);

2554 22 VirtualFileMountSystem 0 4 2771 46 VirtualFileMountSystem::VirtualFileMountSystem 0 1 1216 232
////////////////////////////////////////////////////////////////////
//     Function: VirtualFileMountSystem::Constructor
//       Access: Public
//  Description: 
////////////////////////////////////////////////////////////////////
89
inline VirtualFileMountSystem::VirtualFileMountSystem(Filename const &physical_filename);

2555 21 get_physical_filename 0 4 2771 45 VirtualFileMountSystem::get_physical_filename 0 1 1217 357
////////////////////////////////////////////////////////////////////
//     Function: VirtualFileMountSystem::get_physical_filename
//       Access: Public
//  Description: Returns the name of the source file on the OS
//               filesystem of the directory or file that is mounted.
////////////////////////////////////////////////////////////////////
81
inline Filename const &VirtualFileMountSystem::get_physical_filename(void) const;

2556 14 get_class_type 0 4 2771 38 VirtualFileMountSystem::get_class_type 0 1 1218 0
63
static TypeHandle VirtualFileMountSystem::get_class_type(void);

2557 23 ~VirtualFileMountSystem 0 4 2771 47 VirtualFileMountSystem::~VirtualFileMountSystem 0 0 0
54
VirtualFileMountSystem::~VirtualFileMountSystem(void);

2558 9 get_mount 0 4 2772 28 VirtualFileSimple::get_mount 0 1 1219 312
////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSimple::get_mount
//       Access: Published, Virtual
//  Description: Returns the VirtualFileMount this file is associated
//               with.
////////////////////////////////////////////////////////////////////
66
inline VirtualFileMount *VirtualFileSimple::get_mount(void) const;

2559 19 is_implicit_pz_file 0 4 2772 38 VirtualFileSimple::is_implicit_pz_file 0 1 1220 429
////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSimple::is_implicit_pz_file
//       Access: Published
//  Description: Returns true if this file is a .pz file that should
//               be implicitly decompressed on load, or false if it is
//               not a .pz file or if it should not be decompressed.
////////////////////////////////////////////////////////////////////
63
inline bool VirtualFileSimple::is_implicit_pz_file(void) const;

2560 14 get_class_type 0 4 2772 33 VirtualFileSimple::get_class_type 0 1 1221 0
58
static TypeHandle VirtualFileSimple::get_class_type(void);

2561 18 ~VirtualFileSimple 0 4 2772 37 VirtualFileSimple::~VirtualFileSimple 0 0 0
44
VirtualFileSimple::~VirtualFileSimple(void);

2562 13 TemporaryFile 0 4 2773 28 TemporaryFile::TemporaryFile 0 1 1222 225
////////////////////////////////////////////////////////////////////
//     Function: TemporaryFile::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
62
inline TemporaryFile::TemporaryFile(Filename const &filename);

2563 14 get_class_type 0 4 2773 29 TemporaryFile::get_class_type 0 1 1223 0
54
static TypeHandle TemporaryFile::get_class_type(void);

2564 17 IDecompressStream 0 4 2774 36 IDecompressStream::IDecompressStream 0 2 1224 1225 454
////////////////////////////////////////////////////////////////////
//     Function: IDecompressStream::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: IDecompressStream::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
130
inline IDecompressStream::IDecompressStream(void);
inline IDecompressStream::IDecompressStream(istream *source, bool owns_source);

2565 4 open 0 4 2774 23 IDecompressStream::open 0 1 1226 220
////////////////////////////////////////////////////////////////////
//     Function: IDecompressStream::open
//       Access: Public
//  Description: 
////////////////////////////////////////////////////////////////////
85
inline IDecompressStream &IDecompressStream::open(istream *source, bool owns_source);

2566 5 close 0 4 2774 24 IDecompressStream::close 0 1 1227 342
////////////////////////////////////////////////////////////////////
//     Function: IDecompressStream::close
//       Access: Public
//  Description: Resets the ZStream to empty, but does not actually
//               close the source istream unless owns_source was true.
////////////////////////////////////////////////////////////////////
57
inline IDecompressStream &IDecompressStream::close(void);

2567 18 ~IDecompressStream 0 4 2774 37 IDecompressStream::~IDecompressStream 0 0 0
44
IDecompressStream::~IDecompressStream(void);

2568 15 OCompressStream 0 4 2775 32 OCompressStream::OCompressStream 0 2 1228 1229 450
////////////////////////////////////////////////////////////////////
//     Function: OCompressStream::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: OCompressStream::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
145
inline OCompressStream::OCompressStream(void);
inline OCompressStream::OCompressStream(ostream *dest, bool owns_dest, int compression_level = 6);

2569 4 open 0 4 2775 21 OCompressStream::open 0 1 1230 218
////////////////////////////////////////////////////////////////////
//     Function: OCompressStream::open
//       Access: Public
//  Description: 
////////////////////////////////////////////////////////////////////
104
inline OCompressStream &OCompressStream::open(ostream *dest, bool owns_dest, int compression_level = 6);

2570 5 close 0 4 2775 22 OCompressStream::close 0 1 1231 336
////////////////////////////////////////////////////////////////////
//     Function: OCompressStream::close
//       Access: Public
//  Description: Resets the ZStream to empty, but does not actually
//               close the dest ostream unless owns_dest was true.
////////////////////////////////////////////////////////////////////
53
inline OCompressStream &OCompressStream::close(void);

2571 16 ~OCompressStream 0 4 2775 33 OCompressStream::~OCompressStream 0 0 0
40
OCompressStream::~OCompressStream(void);

2572 13 get_num_files 0 4 2776 30 VirtualFileList::get_num_files 0 1 1232 270
////////////////////////////////////////////////////////////////////
//     Function: VirtualFileList::get_num_files
//       Access: Published
//  Description: Returns the number of files in the list.
////////////////////////////////////////////////////////////////////
54
inline int VirtualFileList::get_num_files(void) const;

2573 8 get_file 0 4 2776 25 VirtualFileList::get_file 0 1 1233 258
////////////////////////////////////////////////////////////////////
//     Function: VirtualFileList::get_file
//       Access: Published
//  Description: Returns the nth file in the list.
////////////////////////////////////////////////////////////////////
59
inline VirtualFile *VirtualFileList::get_file(int n) const;

2574 11 operator [] 0 4 2776 28 VirtualFileList::operator [] 0 1 1234 261
////////////////////////////////////////////////////////////////////
//     Function: VirtualFileList::operator []
//       Access: Published
//  Description: Returns the nth file in the list.
////////////////////////////////////////////////////////////////////
62
inline VirtualFile *VirtualFileList::operator [](int n) const;

2575 4 size 0 4 2776 21 VirtualFileList::size 0 1 1235 261
////////////////////////////////////////////////////////////////////
//     Function: VirtualFileList::size
//       Access: Published
//  Description: Returns the number of files in the list.
////////////////////////////////////////////////////////////////////
45
inline int VirtualFileList::size(void) const;

2576 11 operator += 0 4 2776 28 VirtualFileList::operator += 0 1 1236 0
71
inline void VirtualFileList::operator +=(VirtualFileList const &other);

2577 10 operator + 0 4 2776 27 VirtualFileList::operator + 0 1 1237 0
87
inline VirtualFileList VirtualFileList::operator +(VirtualFileList const &other) const;

2578 17 VirtualFileSystem 0 4 2777 36 VirtualFileSystem::VirtualFileSystem 0 1 1238 230
////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
43
VirtualFileSystem::VirtualFileSystem(void);

2579 18 ~VirtualFileSystem 0 4 2777 37 VirtualFileSystem::~VirtualFileSystem 0 0 229
////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::Destructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
44
VirtualFileSystem::~VirtualFileSystem(void);

2580 5 mount 0 4 2777 24 VirtualFileSystem::mount 0 3 1239 1240 1241 2271
////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::mount
//       Access: Published
//  Description: Mounts the indicated Multifile at the given mount
//               point.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::mount
//       Access: Published
//  Description: Mounts the indicated system file or directory at the
//               given mount point.  If the named file is a directory,
//               mounts the directory.  If the named file is a
//               Multifile, mounts it as a Multifile.  Returns true on
//               success, false on failure.
//
//               A given system directory may be mounted to multiple
//               different mount point, and the same mount point may
//               share multiple system directories.  In the case of
//               ambiguities (that is, two different files with
//               exactly the same full pathname), the most-recently
//               mounted system wins.
//
//               The filename specified as the first parameter must
//               refer to a real, physical filename on disk; it cannot
//               be a virtual file already appearing within the vfs
//               filespace.  However, it is possible to mount such a
//               file; see mount_loop() for this.
////
//               Note that a mounted VirtualFileSystem directory is
//               fully case-sensitive, unlike the native Windows file
//               system, so you must refer to files within the virtual
//               file system with exactly the right case.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::mount
//       Access: Published
//  Description: Adds the given VirtualFileMount object to the mount
//               list.  This is a lower-level function that the other
//               flavors of mount(); it requires you to create a
//               VirtualFileMount object specifically.
////////////////////////////////////////////////////////////////////
323
bool VirtualFileSystem::mount(Multifile *multifile, Filename const &mount_point, int flags);
bool VirtualFileSystem::mount(Filename const &physical_filename, Filename const &mount_point, int flags, string const &password = "");
bool VirtualFileSystem::mount(VirtualFileMount *mount, Filename const &mount_point, int flags);

2581 10 mount_loop 0 4 2777 29 VirtualFileSystem::mount_loop 0 1 1242 971
////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::mount_loop
//       Access: Published
//  Description: This is similar to mount(), but it receives the name
//               of a Multifile that already appears within the
//               virtual file system.  It can be used to mount a
//               Multifile that is itself hosted within a
//               virtually-mounted Multifile.
//
//               This interface can also be used to mount physical
//               files (that appear within the virtual filespace), but
//               it cannot be used to mount directories.  Use mount()
//               if you need to mount a directory.
//
//               Note that there is additional overhead, in the form
//               of additional buffer copies of the data, for
//               recursively mounting a multifile like this.
////////////////////////////////////////////////////////////////////
138
bool VirtualFileSystem::mount_loop(Filename const &virtual_filename, Filename const &mount_point, int flags, string const &password = "");

2582 7 unmount 0 4 2777 26 VirtualFileSystem::unmount 0 3 1243 1244 1245 1159
////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::unmount
//       Access: Published
//  Description: Unmounts all appearances of the indicated Multifile
//               from the file system.  Returns the number of
//               appearances unmounted.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::unmount
//       Access: Published
//  Description: Unmounts all appearances of the indicated directory
//               name or multifile name from the file system.  Returns
//               the number of appearances unmounted.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::unmount
//       Access: Published
//  Description: Unmounts the indicated VirtualFileMount object
//               from the file system.  Returns the number of
//               appearances unmounted.
////////////////////////////////////////////////////////////////////
177
int VirtualFileSystem::unmount(Multifile *multifile);
int VirtualFileSystem::unmount(Filename const &physical_filename);
int VirtualFileSystem::unmount(VirtualFileMount *mount);

2583 13 unmount_point 0 4 2777 32 VirtualFileSystem::unmount_point 0 1 1246 388
////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::unmount_point
//       Access: Published
//  Description: Unmounts all systems attached to the given mount
//               point from the file system.  Returns the number of
//               appearances unmounted.
////////////////////////////////////////////////////////////////////
66
int VirtualFileSystem::unmount_point(Filename const &mount_point);

2584 11 unmount_all 0 4 2777 30 VirtualFileSystem::unmount_all 0 1 1247 329
////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::unmount_all
//       Access: Published
//  Description: Unmounts all files from the file system.  Returns the
//               number of systems unmounted.
////////////////////////////////////////////////////////////////////
41
int VirtualFileSystem::unmount_all(void);

2585 14 get_num_mounts 0 4 2777 33 VirtualFileSystem::get_num_mounts 0 1 1248 304
////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::get_num_mounts
//       Access: Published
//  Description: Returns the number of individual mounts in the
//               system.
////////////////////////////////////////////////////////////////////
50
int VirtualFileSystem::get_num_mounts(void) const;

2586 9 get_mount 0 4 2777 28 VirtualFileSystem::get_mount 0 1 1249 264
////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::get_mount
//       Access: Published
//  Description: Returns the nth mount in the system.
////////////////////////////////////////////////////////////////////
72
PointerTo< VirtualFileMount > VirtualFileSystem::get_mount(int n) const;

2587 5 chdir 0 4 2777 24 VirtualFileSystem::chdir 0 1 1250 429
////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::chdir
//       Access: Published
//  Description: Changes the current directory.  This is used to
//               resolve relative pathnames in get_file() and/or
//               find_file().  Returns true if successful, false
//               otherwise.
////////////////////////////////////////////////////////////////////
61
bool VirtualFileSystem::chdir(Filename const &new_directory);

2588 7 get_cwd 0 4 2777 26 VirtualFileSystem::get_cwd 0 1 1251 275
////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::get_cwd
//       Access: Published
//  Description: Returns the current directory name.  See chdir().
////////////////////////////////////////////////////////////////////
48
Filename VirtualFileSystem::get_cwd(void) const;

2589 14 make_directory 0 4 2777 33 VirtualFileSystem::make_directory 0 1 1252 544
////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::make_directory
//       Access: Published
//  Description: Attempts to create a directory within the file
//               system.  Returns true on success, false on failure
//               (for instance, because the parent directory does not
//               exist, or is read-only).  If the directory already
//               existed prior to this call, returns true.
////////////////////////////////////////////////////////////////////
65
bool VirtualFileSystem::make_directory(Filename const &filename);

2590 19 make_directory_full 0 4 2777 38 VirtualFileSystem::make_directory_full 0 1 1253 424
////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::make_directory_full
//       Access: Published
//  Description: Attempts to create a directory within the file
//               system.  Will also create any intervening directories
//               needed.  Returns true on success, false on failure.
////////////////////////////////////////////////////////////////////
70
bool VirtualFileSystem::make_directory_full(Filename const &filename);

2591 8 get_file 0 4 2777 27 VirtualFileSystem::get_file 0 1 1254 902
////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::get_file
//       Access: Published
//  Description: Looks up the file by the indicated name in the file
//               system.  Returns a VirtualFile pointer representing
//               the file if it is found, or NULL if it is not.
//
//               If status_only is true, the file will be checked for
//               existence and length and so on, but the returned
//               file's contents cannot be read.  This is an
//               optimization which is especially important for
//               certain mount types, for instance HTTP, for which
//               opening a file to determine its status is
//               substantially less expensive than opening it to read
//               its contents.
////////////////////////////////////////////////////////////////////
107
PointerTo< VirtualFile > VirtualFileSystem::get_file(Filename const &filename, bool status_only = 0) const;

2592 11 create_file 0 4 2777 30 VirtualFileSystem::create_file 0 1 1255 592
////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::create_file
//       Access: Published
//  Description: Attempts to create a file by the indicated name in
//               the filesystem, if possible, and returns it.  If a
//               file by this name already exists, returns the same
//               thing as get_file().  If the filename is located
//               within a read-only directory, or the directory
//               doesn't exist, returns NULL.
////////////////////////////////////////////////////////////////////
82
PointerTo< VirtualFile > VirtualFileSystem::create_file(Filename const &filename);

2593 9 find_file 0 4 2777 28 VirtualFileSystem::find_file 0 1 1256 436
////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::find_file
//       Access: Published
//  Description: Uses the indicated search path to find the file
//               within the file system.  Returns the first occurrence
//               of the file found, or NULL if the file cannot be
//               found.
////////////////////////////////////////////////////////////////////
139
PointerTo< VirtualFile > VirtualFileSystem::find_file(Filename const &filename, DSearchPath const &searchpath, bool status_only = 0) const;

2594 11 delete_file 0 4 2777 30 VirtualFileSystem::delete_file 0 1 1257 467
////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::delete_file
//       Access: Public
//  Description: Attempts to delete the indicated file or directory.
//               This can remove a single file or an empty directory.
//               It will not remove a nonempty directory.  Returns
//               true on success, false on failure.
////////////////////////////////////////////////////////////////////
62
bool VirtualFileSystem::delete_file(Filename const &filename);

2595 11 rename_file 0 4 2777 30 VirtualFileSystem::rename_file 0 1 1258 980
////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::rename_file
//       Access: Public
//  Description: Attempts to move or rename the indicated file or
//               directory.  If the original file is an ordinary file,
//               it will quietly replace any already-existing file in
//               the new filename (but not a directory).  If the
//               original file is a directory, the new filename must
//               not already exist.
//
//               If the file is a directory, the new filename must be
//               within the same mount point.  If the file is an
//               ordinary file, the new filename may be anywhere; but
//               if it is not within the same mount point then the
//               rename operation is automatically performed as a
//               two-step copy-and-delete operation.
////////////////////////////////////////////////////////////////////
97
bool VirtualFileSystem::rename_file(Filename const &orig_filename, Filename const &new_filename);

2596 9 copy_file 0 4 2777 28 VirtualFileSystem::copy_file 0 1 1259 377
////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::copy_file
//       Access: Public
//  Description: Attempts to copy the contents of the indicated file
//               to the indicated file.  Returns true on success,
//               false on failure.
////////////////////////////////////////////////////////////////////
95
bool VirtualFileSystem::copy_file(Filename const &orig_filename, Filename const &new_filename);

2597 16 resolve_filename 0 4 2777 35 VirtualFileSystem::resolve_filename 0 1 1260 440
////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::resolve_filename
//       Access: Public
//  Description: Searches the given search path for the filename.  If
//               it is found, updates the filename to the full
//               pathname found and returns true; otherwise, returns
//               false.
////////////////////////////////////////////////////////////////////
142
bool VirtualFileSystem::resolve_filename(Filename &filename, DSearchPath const &searchpath, string const &default_extension = string()) const;

2598 14 find_all_files 0 4 2777 33 VirtualFileSystem::find_all_files 0 1 1261 672
////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::find_all_files
//       Access: Public
//  Description: Searches all the directories in the search list for
//               the indicated file, in order.  Fills up the results
//               list with *all* of the matching filenames found, if
//               any.  Returns the number of matches found.
//
//               It is the responsibility of the the caller to clear
//               the results list first; otherwise, the newly-found
//               files will be appended to the list.
////////////////////////////////////////////////////////////////////
132
int VirtualFileSystem::find_all_files(Filename const &filename, DSearchPath const &searchpath, DSearchPath::Results &results) const;

2599 6 exists 0 4 2777 25 VirtualFileSystem::exists 0 1 1262 302
////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::exists
//       Access: Published
//  Description: Convenience function; returns true if the named file
//               exists.
////////////////////////////////////////////////////////////////////
70
inline bool VirtualFileSystem::exists(Filename const &filename) const;

2600 12 is_directory 0 4 2777 31 VirtualFileSystem::is_directory 0 1 1263 327
////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::is_directory
//       Access: Published
//  Description: Convenience function; returns true if the named file
//               exists and is a directory.
////////////////////////////////////////////////////////////////////
76
inline bool VirtualFileSystem::is_directory(Filename const &filename) const;

2601 15 is_regular_file 0 4 2777 34 VirtualFileSystem::is_regular_file 0 1 1264 333
////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::is_regular_file
//       Access: Published
//  Description: Convenience function; returns true if the named file
//               exists and is a regular file.
////////////////////////////////////////////////////////////////////
79
inline bool VirtualFileSystem::is_regular_file(Filename const &filename) const;

2602 14 scan_directory 0 4 2777 33 VirtualFileSystem::scan_directory 0 1 1265 528
////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::scan_directory
//       Access: Published
//  Description: If the file represents a directory (that is,
//               is_directory() returns true), this returns the list
//               of files within the directory at the current time.
//               Returns NULL if the file is not a directory or if the
//               directory cannot be read.
////////////////////////////////////////////////////////////////////
102
inline PointerTo< VirtualFileList > VirtualFileSystem::scan_directory(Filename const &filename) const;

2603 2 ls 0 4 2777 21 VirtualFileSystem::ls 0 1 1266 307
////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::ls
//       Access: Published
//  Description: Convenience function; lists the files within the
//               indicated directory.
////////////////////////////////////////////////////////////////////
66
inline void VirtualFileSystem::ls(Filename const &filename) const;

2604 6 ls_all 0 4 2777 25 VirtualFileSystem::ls_all 0 1 1267 362
////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::ls_all
//       Access: Published
//  Description: Convenience function; lists the files within the
//               indicated directory, and all files below,
//               recursively.
////////////////////////////////////////////////////////////////////
70
inline void VirtualFileSystem::ls_all(Filename const &filename) const;

2605 5 write 0 4 2777 24 VirtualFileSystem::write 0 1 1268 303
////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::write
//       Access: Published
//  Description: Print debugging information.
//               (e.g. from Python or gdb prompt).
////////////////////////////////////////////////////////////////////
50
void VirtualFileSystem::write(ostream &out) const;

2606 14 get_global_ptr 0 4 2777 33 VirtualFileSystem::get_global_ptr 0 1 1269 773
////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::get_global_ptr
//       Access: Published, Static
//  Description: Returns the default global VirtualFileSystem.  You
//               may create your own personal VirtualFileSystem
//               objects and use them for whatever you like, but Panda
//               will attempt to load models and stuff from this
//               default object.
//
//               Initially, the global VirtualFileSystem is set up to
//               mount the OS filesystem to root; i.e. it is
//               equivalent to the OS filesystem.  This may be
//               subsequently adjusted by the user.
////////////////////////////////////////////////////////////////////
66
static VirtualFileSystem *VirtualFileSystem::get_global_ptr(void);

2607 9 read_file 0 4 2777 28 VirtualFileSystem::read_file 0 1 1270 2166
////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::read_file
//       Access: Published
//  Description: Convenience function; returns the entire contents of
//               the indicated file as a string.
//
//               If auto_unwrap is true, an explicitly-named .pz file
//               is automatically decompressed and the decompressed
//               contents are returned.  This is different than
//               vfs-implicit-pz, which will automatically decompress
//               a file if the extension .pz is *not* given.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::read_file
//       Access: Public
//  Description: Convenience function; fills the string up with the
//               data from the indicated file, if it exists and can be
//               read.  Returns true on success, false otherwise.
//
//               If auto_unwrap is true, an explicitly-named .pz file
//               is automatically decompressed and the decompressed
//               contents are returned.  This is different than
//               vfs-implicit-pz, which will automatically decompress
//               a file if the extension .pz is *not* given.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::read_file
//       Access: Public
//  Description: Convenience function; fills the pvector up with the
//               data from the indicated file, if it exists and can be
//               read.  Returns true on success, false otherwise.
//
//               If auto_unwrap is true, an explicitly-named .pz file
//               is automatically decompressed and the decompressed
//               contents are returned.  This is different than
//               vfs-implicit-pz, which will automatically decompress
//               a file if the extension .pz is *not* given.
////////////////////////////////////////////////////////////////////
89
PyObject *VirtualFileSystem::read_file(Filename const &filename, bool auto_unwrap) const;

2608 14 open_read_file 0 4 2777 33 VirtualFileSystem::open_read_file 0 1 1271 750
////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::open_read_file
//       Access: Published
//  Description: Convenience function; returns a newly allocated
//               istream if the file exists and can be read, or NULL
//               otherwise.  Does not return an invalid istream.
//
//               If auto_unwrap is true, an explicitly-named .pz file
//               is automatically decompressed and the decompressed
//               contents are returned.  This is different than
//               vfs-implicit-pz, which will automatically decompress
//               a file if the extension .pz is *not* given.
////////////////////////////////////////////////////////////////////
93
istream *VirtualFileSystem::open_read_file(Filename const &filename, bool auto_unwrap) const;

2609 15 close_read_file 0 4 2777 34 VirtualFileSystem::close_read_file 0 1 1272 533
////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::close_read_file
//       Access: Published, Static
//  Description: Closes a file opened by a previous call to
//               open_read_file().  This really just deletes the
//               istream pointer, but it is recommended to use this
//               interface instead of deleting it explicitly, to help
//               work around compiler issues.
////////////////////////////////////////////////////////////////////
64
static void VirtualFileSystem::close_read_file(istream *stream);

2610 10 write_file 0 4 2777 29 VirtualFileSystem::write_file 0 1 1273 926
////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::write_file
//       Access: Published
//  Description: Convenience function; writes the entire contents of
//               the indicated file as a string.
//
//               If auto_wrap is true, an explicitly-named .pz file
//               is automatically compressed while writing.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::write_file
//       Access: Public
//  Description: Convenience function; writes the entire contents of
//               the indicated file as a block of data.
//
//               If auto_wrap is true, an explicitly-named .pz file
//               is automatically compressed while writing.
////////////////////////////////////////////////////////////////////
98
PyObject *VirtualFileSystem::write_file(Filename const &filename, PyObject *data, bool auto_wrap);

2611 15 open_write_file 0 4 2777 34 VirtualFileSystem::open_write_file 0 1 1274 658
////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::open_write_file
//       Access: Published
//  Description: Convenience function; returns a newly allocated
//               ostream if the file exists and can be written, or
//               NULL otherwise.  Does not return an invalid ostream.
//
//               If auto_wrap is true, an explicitly-named .pz file is
//               automatically compressed while writing.  If truncate
//               is true, the file is truncated to zero length before
//               writing.
////////////////////////////////////////////////////////////////////
101
ostream *VirtualFileSystem::open_write_file(Filename const &filename, bool auto_wrap, bool truncate);

2612 16 open_append_file 0 4 2777 35 VirtualFileSystem::open_append_file 0 1 1275 449
////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::open_append_file
//       Access: Published
//  Description: Works like open_write_file(), but the file is opened
//               in append mode.  Like open_write_file, the returned
//               pointer should eventually be passed to
//               close_write_file().
////////////////////////////////////////////////////////////////////
71
ostream *VirtualFileSystem::open_append_file(Filename const &filename);

2613 16 close_write_file 0 4 2777 35 VirtualFileSystem::close_write_file 0 1 1276 535
////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::close_write_file
//       Access: Published, Static
//  Description: Closes a file opened by a previous call to
//               open_write_file().  This really just deletes the
//               ostream pointer, but it is recommended to use this
//               interface instead of deleting it explicitly, to help
//               work around compiler issues.
////////////////////////////////////////////////////////////////////
65
static void VirtualFileSystem::close_write_file(ostream *stream);

2614 20 open_read_write_file 0 4 2777 39 VirtualFileSystem::open_read_write_file 0 1 1277 425
////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::open_read_write_file
//       Access: Published
//  Description: Convenience function; returns a newly allocated
//               iostream if the file exists and can be written, or
//               NULL otherwise.  Does not return an invalid iostream.
////////////////////////////////////////////////////////////////////
91
iostream *VirtualFileSystem::open_read_write_file(Filename const &filename, bool truncate);

2615 21 open_read_append_file 0 4 2777 40 VirtualFileSystem::open_read_append_file 0 1 1278 469
////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::open_read_append_file
//       Access: Published
//  Description: Works like open_read_write_file(), but the file is opened
//               in append mode.  Like open_read_write_file, the returned
//               pointer should eventually be passed to
//               close_read_write_file().
////////////////////////////////////////////////////////////////////
77
iostream *VirtualFileSystem::open_read_append_file(Filename const &filename);

2616 21 close_read_write_file 0 4 2777 40 VirtualFileSystem::close_read_write_file 0 1 1279 546
////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::close_read_write_file
//       Access: Published, Static
//  Description: Closes a file opened by a previous call to
//               open_read_write_file().  This really just deletes the
//               iostream pointer, but it is recommended to use this
//               interface instead of deleting it explicitly, to help
//               work around compiler issues.
////////////////////////////////////////////////////////////////////
71
static void VirtualFileSystem::close_read_write_file(iostream *stream);

2617 13 get_long_time 0 4 2779 24 TrueClock::get_long_time 0 1 1280 454
// get_long_time() returns the most accurate timer we have over a
// long interval.  It may not be very precise for measuring short
// intervals, but it should not drift substantially over the long
// haul.

////////////////////////////////////////////////////////////////////
//     Function: TrueClock::get_long_time, Win32 implementation
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
38
double TrueClock::get_long_time(void);

2618 14 get_short_time 0 4 2779 25 TrueClock::get_short_time 0 1 1281 458
// get_short_time() returns the most precise timer we have over a
// short interval.  It may tend to drift over the long haul, but it
// should have lots of digits to measure short intervals very
// precisely.

////////////////////////////////////////////////////////////////////
//     Function: TrueClock::get_short_time, Win32 implementation
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
46
inline double TrueClock::get_short_time(void);

2619 18 get_short_raw_time 0 4 2779 29 TrueClock::get_short_raw_time 0 1 1282 399
// get_short_raw_time() is like get_short_time(), but does not apply
// any corrections (e.g. paranoid-clock) to the result returned by
// the OS.

////////////////////////////////////////////////////////////////////
//     Function: TrueClock::get_short_raw_time, Win32 implementation
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
43
double TrueClock::get_short_raw_time(void);

2620 15 get_error_count 0 4 2779 26 TrueClock::get_error_count 0 1 1283 675
////////////////////////////////////////////////////////////////////
//     Function: TrueClock::get_error_count
//       Access: Published
//  Description: Returns the number of clock errors that have
//               been detected.  Each time a clock error is detected,
//               in which the value returned by either of the above
//               methods is suspect, the value returned by this method
//               will be incremented.  Applications can monitor this
//               value and react, for instance, by resynchronizing
//               their clocks each time this value changes.
////////////////////////////////////////////////////////////////////
50
inline int TrueClock::get_error_count(void) const;

2621 14 get_global_ptr 0 4 2779 25 TrueClock::get_global_ptr 0 1 1284 309
////////////////////////////////////////////////////////////////////
//     Function: TrueClock::get_global_ptr
//       Access: Published, Static
//  Description: Returns a pointer to the one TrueClock object in
//               the world.
////////////////////////////////////////////////////////////////////
57
static inline TrueClock *TrueClock::get_global_ptr(void);

2622 16 set_cpu_affinity 0 4 2779 27 TrueClock::set_cpu_affinity 0 1 1285 0
55
bool TrueClock::set_cpu_affinity(PN_uint32 mask) const;

2623 9 Patchfile 0 4 2780 20 Patchfile::Patchfile 0 2 1286 1287 527
////////////////////////////////////////////////////////////////////
//     Function: Patchfile::Constructor
//       Access: Public
//  Description: Create a patch file and initializes internal data
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Patchfile::Constructor
//       Access: Public
//  Description: Create patch file with buffer to patch
////////////////////////////////////////////////////////////////////
77
Patchfile::Patchfile(void);
Patchfile::Patchfile(PointerTo< Buffer > buffer);

2624 10 ~Patchfile 0 4 2780 21 Patchfile::~Patchfile 0 0 217
////////////////////////////////////////////////////////////////////
//     Function: Patchfile::Destructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
28
Patchfile::~Patchfile(void);

2625 5 build 0 4 2780 16 Patchfile::build 0 1 1288 680
////////////////////////////////////////////////////////////////////
//     Function: Patchfile::build
//       Access: Public
//  Description:
//               This implementation uses the "greedy differencing
//               algorithm" described in the masters thesis
//               "Differential Compression: A Generalized Solution
//               for Binary Files" by Randal C. Burns (p.13).
//               For an original file of size M and a new file of
//               size N, this algorithm is O(M) in space and
//               O(M*N) (worst-case) in time.
//               return false on error
////////////////////////////////////////////////////////////////////
82
bool Patchfile::build(Filename file_orig, Filename file_new, Filename patch_name);

2626 11 read_header 0 4 2780 22 Patchfile::read_header 0 1 1289 449
////////////////////////////////////////////////////////////////////
//     Function: Patchfile::read_header
//       Access: Published
//  Description: Opens the patch file for reading, and gets the header
//               information from the file but does not begin to do
//               any real work.  This can be used to query the data
//               stored in the patch.
////////////////////////////////////////////////////////////////////
55
int Patchfile::read_header(Filename const &patch_file);

2627 8 initiate 0 4 2780 19 Patchfile::initiate 0 2 1290 1291 697
////////////////////////////////////////////////////////////////////
//     Function: Patchfile::initiate
//       Access: Published
//  Description: Set up to apply the patch to the file (original
//               file and patch are destroyed in the process).
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Patchfile::initiate
//       Access: Published
//  Description: Set up to apply the patch to the file.  In this form,
//               neither the original file nor the patch file are
//               destroyed.
////////////////////////////////////////////////////////////////////
183
int Patchfile::initiate(Filename const &patch_file, Filename const &file);
int Patchfile::initiate(Filename const &patch_file, Filename const &orig_file, Filename const &target_file);

2628 3 run 0 4 2780 14 Patchfile::run 0 1 1292 660
////////////////////////////////////////////////////////////////////
//     Function: Patchfile::run
//       Access: Published
//  Description: Perform one buffer's worth of patching
//               Returns EU_ok while patching
//               Returns EU_success when done
//               If error happens will return one of:
//               EU_error_abort : Patching has not been initiated
//               EU_error_file_invalid : file is corrupted
//               EU_error_invalid_checksum : incompatible patch file
//               EU_error_write_file_rename : could not rename file
////////////////////////////////////////////////////////////////////
25
int Patchfile::run(void);

2629 5 apply 0 4 2780 16 Patchfile::apply 0 2 1293 1294 788
////////////////////////////////////////////////////////////////////
//     Function: Patchfile::apply
//       Access: Public
//  Description: Patches the entire file in one call
//               returns true on success and false on error
//
//               This version will delete the patch file and overwrite
//               the original file.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Patchfile::apply
//       Access: Public
//  Description: Patches the entire file in one call
//               returns true on success and false on error
//
//               This version will not delete any files.
////////////////////////////////////////////////////////////////////
155
bool Patchfile::apply(Filename &patch_file, Filename &file);
bool Patchfile::apply(Filename &patch_file, Filename &orig_file, Filename const &target_file);

2630 12 get_progress 0 4 2780 23 Patchfile::get_progress 0 1 1295 368
////////////////////////////////////////////////////////////////////
//     Function: Patchfile::get_progress
//       Access: Published
//  Description: Returns a value in the range 0..1, representing the
//               amount of progress through the patchfile, during a
//               session.
////////////////////////////////////////////////////////////////////
55
inline PN_stdfloat Patchfile::get_progress(void) const;

2631 19 set_allow_multifile 0 4 2780 30 Patchfile::set_allow_multifile 0 1 1296 685
////////////////////////////////////////////////////////////////////
//     Function: Patchfile::set_allow_multifile
//       Access: Published
//  Description: If this flag is set true, the Patchfile will make a
//               special case for patching Panda Multifiles, if
//               detected, and attempt to patch them on a
//               subfile-by-subfile basis.  If this flag is false, the
//               Patchfile will always patch the file on a full-file
//               basis.
//
//               This has effect only when building patches; it is not
//               used for applying patches.
////////////////////////////////////////////////////////////////////
65
inline void Patchfile::set_allow_multifile(bool allow_multifile);

2632 19 get_allow_multifile 0 4 2780 30 Patchfile::get_allow_multifile 0 1 1297 256
////////////////////////////////////////////////////////////////////
//     Function: Patchfile::get_allow_multifile
//       Access: Published
//  Description: See set_allow_multifile().
////////////////////////////////////////////////////////////////////
49
inline bool Patchfile::get_allow_multifile(void);

2633 20 set_footprint_length 0 4 2780 31 Patchfile::set_footprint_length 0 1 1298 230
////////////////////////////////////////////////////////////////////
//     Function: Patchfile::set_footprint_length
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
56
inline void Patchfile::set_footprint_length(int length);

2634 20 get_footprint_length 0 4 2780 31 Patchfile::get_footprint_length 0 1 1299 230
////////////////////////////////////////////////////////////////////
//     Function: Patchfile::get_footprint_length
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
49
inline int Patchfile::get_footprint_length(void);

2635 22 reset_footprint_length 0 4 2780 33 Patchfile::reset_footprint_length 0 1 1300 232
////////////////////////////////////////////////////////////////////
//     Function: Patchfile::reset_footprint_length
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
52
inline void Patchfile::reset_footprint_length(void);

2636 15 has_source_hash 0 4 2780 26 Patchfile::has_source_hash 0 1 1301 391
////////////////////////////////////////////////////////////////////
//     Function: Patchfile::has_source_hash
//       Access: Published
//  Description: Returns true if the MD5 hash for the source file is
//               known.  (Some early versions of the patch file did
//               not store this information.)
////////////////////////////////////////////////////////////////////
51
inline bool Patchfile::has_source_hash(void) const;

2637 15 get_source_hash 0 4 2780 26 Patchfile::get_source_hash 0 1 1302 267
////////////////////////////////////////////////////////////////////
//     Function: Patchfile::get_source_hash
//       Access: Published
//  Description: Returns the MD5 hash for the source file.
////////////////////////////////////////////////////////////////////
61
inline HashVal const &Patchfile::get_source_hash(void) const;

2638 15 get_result_hash 0 4 2780 26 Patchfile::get_result_hash 0 1 1303 310
////////////////////////////////////////////////////////////////////
//     Function: Patchfile::get_result_hash
//       Access: Published
//  Description: Returns the MD5 hash for the file after the patch has
//               been applied.
////////////////////////////////////////////////////////////////////
61
inline HashVal const &Patchfile::get_result_hash(void) const;

2639 13 password_hash 0 1 0 13 password_hash 0 1 1341 0
88
string password_hash(string const &password, string const &salt, int iters, int keylen);

2640 12 ProfileTimer 0 4 2781 26 ProfileTimer::ProfileTimer 0 2 1304 1305 0
127
ProfileTimer::ProfileTimer(char const *name = 0, int maxEntries = 4096);
ProfileTimer::ProfileTimer(ProfileTimer const &other);

2641 13 ~ProfileTimer 0 4 2781 27 ProfileTimer::~ProfileTimer 0 0 0
34
ProfileTimer::~ProfileTimer(void);

2642 4 init 0 4 2781 18 ProfileTimer::init 0 1 1306 0
65
void ProfileTimer::init(char const *name, int maxEntries = 4096);

2643 2 on 0 4 2781 16 ProfileTimer::on 0 1 1307 0
28
void ProfileTimer::on(void);

2644 4 mark 0 4 2781 18 ProfileTimer::mark 0 1 1308 0
41
void ProfileTimer::mark(char const *tag);

2645 3 off 0 4 2781 17 ProfileTimer::off 0 2 1309 1310 0
70
void ProfileTimer::off(void);
void ProfileTimer::off(char const *tag);

2646 12 getTotalTime 0 4 2781 26 ProfileTimer::getTotalTime 0 1 1311 110
// Don't call any of the following during timing:
// (Because they are slow, not because anything will break).
46
double ProfileTimer::getTotalTime(void) const;

2647 16 consolidateAllTo 0 4 2781 30 ProfileTimer::consolidateAllTo 0 1 1312 0
66
static void ProfileTimer::consolidateAllTo(ostream &out = ::cout);

2648 13 consolidateTo 0 4 2781 27 ProfileTimer::consolidateTo 0 1 1313 0
62
void ProfileTimer::consolidateTo(ostream &out = ::cout) const;

2649 10 printAllTo 0 4 2781 24 ProfileTimer::printAllTo 0 1 1314 0
60
static void ProfileTimer::printAllTo(ostream &out = ::cout);

2650 7 printTo 0 4 2781 21 ProfileTimer::printTo 0 1 1315 0
56
void ProfileTimer::printTo(ostream &out = ::cout) const;

2651 11 was_deleted 0 4 2782 30 WeakPointerToVoid::was_deleted 0 1 1316 327
////////////////////////////////////////////////////////////////////
//     Function: WeakPointerToVoid::was_deleted
//       Access: Published
//  Description: Returns true if the object we are pointing to has
//               been deleted, false otherwise.
////////////////////////////////////////////////////////////////////
55
inline bool WeakPointerToVoid::was_deleted(void) const;

2652 16 is_valid_pointer 0 4 2782 35 WeakPointerToVoid::is_valid_pointer 0 1 1317 328
////////////////////////////////////////////////////////////////////
//     Function: WeakPointerToVoid::is_valid_pointer
//       Access: Published
//  Description: Returns true if the pointer is not null and the
//               object has not been deleted.
////////////////////////////////////////////////////////////////////
60
inline bool WeakPointerToVoid::is_valid_pointer(void) const;

2653 16 set_string_value 0 4 2783 33 WindowsRegistry::set_string_value 0 1 1318 608
////////////////////////////////////////////////////////////////////
//     Function: WindowsRegistry::set_string_value
//       Access: Published, Static
//  Description: Sets the registry key to the indicated value as a
//               string.  The supplied string value is automatically
//               converted from whatever encoding is set by
//               TextEncoder::set_default_encoding() and written as a
//               Unicode string.  The registry key must already exist
//               prior to calling this function.
////////////////////////////////////////////////////////////////////
168
static bool WindowsRegistry::set_string_value(string const &key, string const &name, string const &value, WindowsRegistry::RegLevel rl = ::WindowsRegistry::rl_machine);

2654 13 set_int_value 0 4 2783 30 WindowsRegistry::set_int_value 0 1 1319 400
////////////////////////////////////////////////////////////////////
//     Function: WindowsRegistry::set_int_value
//       Access: Published, Static
//  Description: Sets the registry key to the indicated value as an
//               integer.  The registry key must already exist prior
//               to calling this function.
////////////////////////////////////////////////////////////////////
155
static bool WindowsRegistry::set_int_value(string const &key, string const &name, int value, WindowsRegistry::RegLevel rl = ::WindowsRegistry::rl_machine);

2655 12 get_key_type 0 4 2783 29 WindowsRegistry::get_key_type 0 1 1320 355
////////////////////////////////////////////////////////////////////
//     Function: WindowsRegistry::get_key_type
//       Access: Published, Static
//  Description: Returns the type of the indicated key, or T_none if
//               the key is not known or is some unsupported type.
////////////////////////////////////////////////////////////////////
160
static WindowsRegistry::Type WindowsRegistry::get_key_type(string const &key, string const &name, WindowsRegistry::RegLevel rl = ::WindowsRegistry::rl_machine);

2656 16 get_string_value 0 4 2783 33 WindowsRegistry::get_string_value 0 1 1321 597
////////////////////////////////////////////////////////////////////
//     Function: WindowsRegistry::get_string_value
//       Access: Published, Static
//  Description: Returns the value associated with the indicated
//               registry key, assuming it is a string value.  The
//               string value is automatically encoded using
//               TextEncoder::get_default_encoding().  If the key is
//               not defined or is not a string type value,
//               default_value is returned instead.
////////////////////////////////////////////////////////////////////
178
static string WindowsRegistry::get_string_value(string const &key, string const &name, string const &default_value, WindowsRegistry::RegLevel rl = ::WindowsRegistry::rl_machine);

2657 13 get_int_value 0 4 2783 30 WindowsRegistry::get_int_value 0 1 1322 478
////////////////////////////////////////////////////////////////////
//     Function: WindowsRegistry::get_int_value
//       Access: Published, Static
//  Description: Returns the value associated with the indicated
//               registry key, assuming it is an integer value.  If
//               the key is not defined or is not an integer type
//               value, default_value is returned instead.
////////////////////////////////////////////////////////////////////
162
static int WindowsRegistry::get_int_value(string const &key, string const &name, int default_value, WindowsRegistry::RegLevel rl = ::WindowsRegistry::rl_machine);

2658 16 ~WindowsRegistry 0 4 2783 33 WindowsRegistry::~WindowsRegistry 0 0 0
40
WindowsRegistry::~WindowsRegistry(void);

1341
1 0 0 7 12 2790 1357 0 0 1 4 copy 1 2788  
2 0 0 7 12 2790 1357 0 0 1 4 copy 1 2791  
3 0 0 7 12 2790 1357 0 0 1 6 source 1 2793  
4 0 0 6 13 2796 0 0 0 1 4 this 3 2788  
5 0 0 6 14 2798 0 0 0 2 4 this 3 2788  1 n 1 2796  
6 0 0 6 15 2798 0 0 0 2 4 this 3 2788  1 n 1 2796  
7 0 0 6 16 2799 0 0 0 1 4 this 3 2788  
8 0 0 6 17 2799 0 0 0 3 4 this 3 2788  1 n 1 2796  5 count 1 2796  
9 0 0 6 18 2800 0 0 0 1 4 this 3 2788  
10 0 0 6 19 2800 0 0 0 1 4 this 3 2788  
11 0 0 6 20 2800 0 0 0 3 4 this 3 2788  4 view 1 2801  5 flags 1 2800  
12 0 0 4 21 2803 0 0 0 2 4 this 3 2788  4 view 1 2801  
13 0 0 4 9 2803 0 0 0 1 4 this 3 2804  
14 0 0 4 10 2803 0 0 0 2 4 this 3 2805  3 out 1 2807  
15 0 0 6 7 2810 0 0 372 ////////////////////////////////////////////////////////////////////
//     Function: PointerToVoid::is_null
//       Access: Published
//  Description: Returns true if the PointerTo is a NULL pointer,
//               false otherwise.  (Direct comparison to a NULL
//               pointer also works.)
//////////////////////////////////////////////////////////////////// 1 4 this 3 2808  
16 0 0 6 8 2796 0 0 219 ////////////////////////////////////////////////////////////////////
//     Function: PointerToVoid::get_hash
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2808  
17 0 0 7 30 2813 1371 0 0 1 4 copy 1 2811  
18 0 0 7 30 2813 1371 0 0 1 4 copy 1 2814  
19 0 0 7 30 2813 1371 0 0 1 6 source 1 2793  
20 0 0 6 31 2796 0 0 0 1 4 this 3 2811  
21 0 0 6 32 2816 0 0 0 2 4 this 3 2811  1 n 1 2796  
22 0 0 6 33 2816 0 0 0 2 4 this 3 2811  1 n 1 2796  
23 0 0 6 34 2799 0 0 0 1 4 this 3 2811  
24 0 0 6 35 2799 0 0 0 3 4 this 3 2811  1 n 1 2796  5 count 1 2796  
25 0 0 6 36 2800 0 0 0 1 4 this 3 2811  
26 0 0 6 37 2800 0 0 0 1 4 this 3 2811  
27 0 0 6 38 2800 0 0 0 3 4 this 3 2811  4 view 1 2801  5 flags 1 2800  
28 0 0 4 39 2803 0 0 0 2 4 this 3 2811  4 view 1 2801  
29 0 0 4 27 2803 0 0 0 1 4 this 3 2817  
30 0 0 4 28 2803 0 0 0 2 4 this 3 2818  3 out 1 2807  
31 0 0 7 48 2822 1385 0 0 1 4 copy 1 2820  
32 0 0 7 48 2822 1385 0 0 1 4 copy 1 2823  
33 0 0 7 48 2822 1385 0 0 1 6 source 1 2793  
34 0 0 6 49 2796 0 0 0 1 4 this 3 2820  
35 0 0 6 50 2800 0 0 0 2 4 this 3 2820  1 n 1 2796  
36 0 0 6 51 2800 0 0 0 2 4 this 3 2820  1 n 1 2796  
37 0 0 6 52 2799 0 0 0 1 4 this 3 2820  
38 0 0 6 53 2799 0 0 0 3 4 this 3 2820  1 n 1 2796  5 count 1 2796  
39 0 0 6 54 2800 0 0 0 1 4 this 3 2820  
40 0 0 6 55 2800 0 0 0 1 4 this 3 2820  
41 0 0 6 56 2800 0 0 0 3 4 this 3 2820  4 view 1 2801  5 flags 1 2800  
42 0 0 4 57 2803 0 0 0 2 4 this 3 2820  4 view 1 2801  
43 0 0 4 45 2803 0 0 0 1 4 this 3 2825  
44 0 0 4 46 2803 0 0 0 2 4 this 3 2826  3 out 1 2807  
45 0 0 7 66 2830 1399 0 0 1 4 copy 1 2828  
46 0 0 7 66 2830 1399 0 0 1 4 copy 1 2831  
47 0 0 7 66 2830 1399 0 0 1 6 source 1 2793  
48 0 0 6 67 2796 0 0 0 1 4 this 3 2828  
49 0 0 6 68 2833 0 0 0 2 4 this 3 2828  1 n 1 2796  
50 0 0 6 69 2833 0 0 0 2 4 this 3 2828  1 n 1 2796  
51 0 0 6 70 2799 0 0 0 1 4 this 3 2828  
52 0 0 6 71 2799 0 0 0 3 4 this 3 2828  1 n 1 2796  5 count 1 2796  
53 0 0 6 72 2800 0 0 0 1 4 this 3 2828  
54 0 0 6 73 2800 0 0 0 1 4 this 3 2828  
55 0 0 6 74 2800 0 0 0 3 4 this 3 2828  4 view 1 2801  5 flags 1 2800  
56 0 0 4 75 2803 0 0 0 2 4 this 3 2828  4 view 1 2801  
57 0 0 4 63 2803 0 0 0 1 4 this 3 2834  
58 0 0 4 64 2803 0 0 0 2 4 this 3 2835  3 out 1 2807  
59 0 0 6 82 2839 0 0 297 ////////////////////////////////////////////////////////////////////
//     Function: ConfigDeclaration::get_page
//       Access: Public
//  Description: Returns the page on which this declaration can be
//               found.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2837  
60 0 0 6 83 2840 0 0 395 ////////////////////////////////////////////////////////////////////
//     Function: ConfigDeclaration::get_variable
//       Access: Public
//  Description: Returns the variable that this declaration names.
//               This variable may or may not have been defined by the
//               time the declaration is read.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2837  
61 0 0 6 84 2799 0 0 452 ////////////////////////////////////////////////////////////////////
//     Function: ConfigDeclaration::get_string_value
//       Access: Public
//  Description: Returns the value assigned to this variable.  This is
//               the original one-line text defined for the variable
//               in the .prc file (or passed to
//               ConfigPage::make_declaration()).
//////////////////////////////////////////////////////////////////// 1 4 this 3 2837  
62 0 0 4 85 2803 0 0 276 ////////////////////////////////////////////////////////////////////
//     Function: ConfigDeclaration::set_string_value
//       Access: Public
//  Description: Changes the value assigned to this variable.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2841  5 value 1 2799  
63 0 0 6 86 2800 0 0 405 ////////////////////////////////////////////////////////////////////
//     Function: ConfigDeclaration::get_num_words
//       Access: Public
//  Description: Returns the number of words in the declaration's
//               value.  A word is defined as a sequence of
//               non-whitespace characters delimited by whitespace.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2837  
64 0 0 6 87 2810 0 0 449 ////////////////////////////////////////////////////////////////////
//     Function: ConfigDeclaration::has_string_word
//       Access: Public
//  Description: Returns true if the declaration's value has a valid
//               string value for the nth word.  This is really the
//               same thing as asking if there are at least n words in
//               the value.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2837  1 n 1 2800  
65 0 0 6 88 2810 0 0 329 ////////////////////////////////////////////////////////////////////
//     Function: ConfigDeclaration::has_bool_word
//       Access: Public
//  Description: Returns true if the declaration's value has a valid
//               boolean value for the nth word.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2837  1 n 1 2800  
66 0 0 6 89 2810 0 0 328 ////////////////////////////////////////////////////////////////////
//     Function: ConfigDeclaration::has_int_word
//       Access: Public
//  Description: Returns true if the declaration's value has a valid
//               integer value for the nth word.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2837  1 n 1 2800  
67 0 0 6 90 2810 0 0 328 ////////////////////////////////////////////////////////////////////
//     Function: ConfigDeclaration::has_int64_word
//       Access: Public
//  Description: Returns true if the declaration's value has a valid
//               int64 value for the nth word.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2837  1 n 1 2800  
68 0 0 6 91 2810 0 0 331 ////////////////////////////////////////////////////////////////////
//     Function: ConfigDeclaration::has_double_word
//       Access: Public
//  Description: Returns true if the declaration's value has a valid
//               integer value for the nth word.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2837  1 n 1 2800  
69 0 0 6 92 2799 0 0 404 ////////////////////////////////////////////////////////////////////
//     Function: ConfigDeclaration::get_string_word
//       Access: Public
//  Description: Returns the string value of the nth word of the
//               declaration's value, or empty string if there is no
//               nth value.  See also has_string_word().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2837  1 n 1 2800  
70 0 0 6 93 2810 0 0 394 ////////////////////////////////////////////////////////////////////
//     Function: ConfigDeclaration::get_bool_word
//       Access: Public
//  Description: Returns the boolean value of the nth word of the
//               declaration's value, or false if there is no nth
//               value.  See also has_bool_word().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2837  1 n 1 2800  
71 0 0 6 94 2800 0 0 387 ////////////////////////////////////////////////////////////////////
//     Function: ConfigDeclaration::get_int_word
//       Access: Public
//  Description: Returns the integer value of the nth word of the
//               declaration's value, or 0 if there is no nth value.
//               See also has_int_word().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2837  1 n 1 2800  
72 0 0 6 95 2842 0 0 389 ////////////////////////////////////////////////////////////////////
//     Function: ConfigDeclaration::get_int64_word
//       Access: Public
//  Description: Returns the int64 value of the nth word of the
//               declaration's value, or 0 if there is no nth value.
//               See also has_int64_word().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2837  1 n 1 2800  
73 0 0 6 96 2798 0 0 393 ////////////////////////////////////////////////////////////////////
//     Function: ConfigDeclaration::get_double_word
//       Access: Public
//  Description: Returns the integer value of the nth word of the
//               declaration's value, or 0 if there is no nth value.
//               See also has_double_word().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2837  1 n 1 2800  
74 0 0 4 97 2803 0 0 0 3 4 this 3 2841  1 n 1 2800  5 value 1 2799  
75 0 0 4 98 2803 0 0 0 3 4 this 3 2841  1 n 1 2800  5 value 1 2810  
76 0 0 4 99 2803 0 0 0 3 4 this 3 2841  1 n 1 2800  5 value 1 2800  
77 0 0 4 100 2803 0 0 0 3 4 this 3 2841  1 n 1 2800  5 value 1 2842  
78 0 0 4 101 2803 0 0 0 3 4 this 3 2841  1 n 1 2800  5 value 1 2798  
79 0 0 6 102 2800 0 0 530 ////////////////////////////////////////////////////////////////////
//     Function: ConfigDeclaration::get_decl_seq
//       Access: Public
//  Description: Returns the sequence number of the declaration within
//               the page.  Sequence numbers are assigned as each
//               declaration is created; each declaration is given a
//               higher sequence number than all the declarations
//               created in the page before it.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2837  
80 0 0 4 103 2803 0 0 0 2 4 this 3 2837  3 out 1 2807  
81 0 0 4 104 2803 0 0 0 2 4 this 3 2837  3 out 1 2807  
82 0 0 6 106 2839 0 0 0 0 
83 0 0 6 107 2839 0 0 0 0 
84 0 0 6 108 2799 0 0 338 ////////////////////////////////////////////////////////////////////
//     Function: ConfigPage::get_name
//       Access: Published
//  Description: Returns the name of the page.  If the page was loaded
//               from a .prc file, this is usually the filename.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2844  
85 0 0 6 109 2810 0 0 517 ////////////////////////////////////////////////////////////////////
//     Function: ConfigPage::is_special
//       Access: Published
//  Description: Returns true if this is the special "default" or
//               "local" page, or false if it is an ordinary page,
//               e.g. an implicit page loaded from a prc file at
//               startup, or an explicit page created by
//               ConfigPageManager::make_explicit_page().
//////////////////////////////////////////////////////////////////// 1 4 this 3 2844  
86 0 0 6 110 2810 0 0 437 ////////////////////////////////////////////////////////////////////
//     Function: ConfigPage::is_implicit
//       Access: Published
//  Description: Returns true if the page was loaded by implicitly
//               searching the config path on startup, or false if it
//               was explicitly loaded by dynamic code after initial
//               startup.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2844  
87 0 0 4 111 2803 0 0 0 2 4 this 3 2839  4 sort 1 2800  
88 0 0 6 112 2800 0 0 316 ////////////////////////////////////////////////////////////////////
//     Function: ConfigPage::get_sort
//       Access: Published
//  Description: Returns the explicit sort order of this particular
//               ConfigPage.  See set_sort().
//////////////////////////////////////////////////////////////////// 1 4 this 3 2844  
89 0 0 6 113 2800 0 0 728 ////////////////////////////////////////////////////////////////////
//     Function: ConfigPage::get_page_seq
//       Access: Published
//  Description: Returns the sequence number of the page.  
//
//               Sequence numbers for a particular class (implicit
//               vs. explicit) of pages are assigned as each page is
//               loaded; each page is given a higher sequence number
//               than all the pages loaded before it.
//
//               The implicit_load pages, which are discovered in the
//               file system automatically, have a different set of
//               sequence numbers than the explicit pages.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2844  
90 0 0 6 114 2800 0 0 592 ////////////////////////////////////////////////////////////////////
//     Function: ConfigPage::get_trust_level
//       Access: Published
//  Description: Returns the trust level associated with this page.
//               An untrusted page is trust level 0; if the page was
//               loaded from a signed .prc file, its trust level is
//               the index number of the certificate that signed it.
//               Generally, a higher trust level value represents
//               a greater level of trust.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2844  
91 0 0 4 115 2803 0 0 456 ////////////////////////////////////////////////////////////////////
//     Function: ConfigPage::set_trust_level
//       Access: Published
//  Description: Explicitly sets the trust level on this particular
//               page.  Note that any subsequent changes to the page,
//               or to any variable declarations on it, will reset the
//               trust level to zero.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2839  11 trust_level 1 2800  
92 0 0 6 116 2799 0 0 399 ////////////////////////////////////////////////////////////////////
//     Function: ConfigPage::get_signature
//       Access: Published
//  Description: Returns the raw binary signature that was found in
//               the prc file, if any.  This method is probably not
//               terribly useful for most applications.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2844  
93 0 0 4 117 2803 0 0 0 1 4 this 3 2839  
94 0 0 6 118 2810 0 0 0 2 4 this 3 2839  2 in 1 2846  
95 0 0 6 119 2810 0 0 0 3 4 this 3 2839  2 in 1 2846  8 password 1 2799  
96 0 0 6 120 2841 0 0 0 3 4 this 3 2839  8 variable 1 2840  5 value 1 2799  
97 0 0 6 120 2841 0 0 0 3 4 this 3 2839  8 variable 1 2799  5 value 1 2799  
98 0 0 6 121 2810 0 0 0 2 4 this 3 2839  4 decl 1 2841  
99 0 0 6 122 2800 0 0 0 1 4 this 3 2844  
100 0 0 6 123 2837 0 0 0 2 4 this 3 2844  1 n 1 2800  
101 0 0 6 124 2841 0 0 0 2 4 this 3 2839  1 n 1 2800  
102 0 0 6 125 2799 0 0 0 2 4 this 3 2844  1 n 1 2800  
103 0 0 6 126 2799 0 0 0 2 4 this 3 2844  1 n 1 2800  
104 0 0 6 127 2810 0 0 0 2 4 this 3 2844  1 n 1 2800  
105 0 0 4 128 2803 0 0 0 2 4 this 3 2844  3 out 1 2807  
106 0 0 4 129 2803 0 0 0 2 4 this 3 2844  3 out 1 2807  
107 0 0 4 130 2803 0 0 0 2 4 this 3 2844  3 out 1 2807  
108 0 0 6 132 2810 0 0 415 ////////////////////////////////////////////////////////////////////
//     Function: ConfigPageManager::loaded_implicit_pages
//       Access: Published
//  Description: Returns true if the implicit *.prc files have already
//               been loaded, false otherwise.  Normally this will
//               only be false briefly before startup.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2847  
109 0 0 4 133 2803 0 0 536 ////////////////////////////////////////////////////////////////////
//     Function: ConfigPageManager::load_implicit_pages
//       Access: Published
//  Description: Searches the PRC_DIR and/or PRC_PATH directories for
//               *.prc files and loads them in as pages.  This is
//               normally called automatically at startup time, when
//               the first variable's value is referenced.  See also
//               reload_implicit_pages().
//////////////////////////////////////////////////////////////////// 1 4 this 3 2849  
110 0 0 4 134 2803 0 0 0 1 4 this 3 2849  
111 0 0 6 135 2850 0 0 556 ////////////////////////////////////////////////////////////////////
//     Function: ConfigPageManager::get_search_path
//       Access: Published
//  Description: Returns the search path used to locate implicit .prc
//               files.  This is determined by the PRC_DIR and
//               PRC_PATH environment variables.  The object returned
//               by this method may be modified to change the path at
//               runtime, and then reload_implicit_pages() called.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2849  
112 0 0 6 136 2800 0 0 574 ////////////////////////////////////////////////////////////////////
//     Function: ConfigPageManager::get_num_prc_patterns
//       Access: Published
//  Description: Returns the number of patterns, like "*.prc", that
//               are compiled in that will be searched for as default
//               config filenames.  Normally there is only one
//               pattern, and it is "*.prc", but others may be
//               specified with the PRC_FILENAME variable in
//               Config.pp.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2847  
113 0 0 6 137 2799 0 0 385 ////////////////////////////////////////////////////////////////////
//     Function: ConfigPageManager::get_prc_pattern
//       Access: Published
//  Description: Returns the nth filename pattern that will be
//               considered a match as a valid config file.  See
//               get_num_prc_patterns().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2847  1 n 1 2800  
114 0 0 6 138 2800 0 0 436 ////////////////////////////////////////////////////////////////////
//     Function: ConfigPageManager::get_num_prc_encrypted_patterns
//       Access: Published
//  Description: Returns the number of patterns, like "*.pre", that
//               are compiled in that will be searched for as special
//               config files that are understood to be encrypted.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2847  
115 0 0 6 139 2799 0 0 415 ////////////////////////////////////////////////////////////////////
//     Function: ConfigPageManager::get_prc_encrypted_pattern
//       Access: Published
//  Description: Returns the nth filename pattern that will be
//               considered a match as a valid encrypted config
//               file.  See get_num_prc_encrypted_patterns().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2847  1 n 1 2800  
116 0 0 6 140 2800 0 0 533 ////////////////////////////////////////////////////////////////////
//     Function: ConfigPageManager::get_num_prc_executable_patterns
//       Access: Published
//  Description: Returns the number of patterns, like "*.exe", that
//               are compiled in that will be searched for as special
//               config files that are to be executed as a program,
//               and their output taken to be input.  This is normally
//               empty.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2847  
117 0 0 6 141 2799 0 0 424 ////////////////////////////////////////////////////////////////////
//     Function: ConfigPageManager::get_prc_executable_pattern
//       Access: Published
//  Description: Returns the nth filename pattern that will be
//               considered a match as a valid executable-style config
//               file.  See get_num_prc_executable_patterns().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2847  1 n 1 2800  
118 0 0 6 142 2839 0 0 0 2 4 this 3 2849  4 name 1 2799  
119 0 0 6 143 2810 0 0 0 2 4 this 3 2849  4 page 1 2839  
120 0 0 6 144 2800 0 0 450 ////////////////////////////////////////////////////////////////////
//     Function: ConfigPageManager::get_num_implicit_pages
//       Access: Published
//  Description: Returns the current number of implicitly-loaded
//               ConfigPages in the world.  These represent files that
//               were automatically discovered on the disk as .prc
//               files.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2847  
121 0 0 6 145 2839 0 0 332 ////////////////////////////////////////////////////////////////////
//     Function: ConfigPageManager::get_implicit_page
//       Access: Published
//  Description: Returns the nth implicit ConfigPage in the world.
//               See get_num_implicit_pages().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2847  1 n 1 2800  
122 0 0 6 146 2800 0 0 490 ////////////////////////////////////////////////////////////////////
//     Function: ConfigPageManager::get_num_explicit_pages
//       Access: Published
//  Description: Returns the current number of explicitly-loaded
//               ConfigPages in the world.  These represent pages that
//               were loaded dynamically at runtime by explicit calls
//               to ConfigPageManager::make_explicit_page().
//////////////////////////////////////////////////////////////////// 1 4 this 3 2847  
123 0 0 6 147 2839 0 0 332 ////////////////////////////////////////////////////////////////////
//     Function: ConfigPageManager::get_explicit_page
//       Access: Published
//  Description: Returns the nth explicit ConfigPage in the world.
//               See get_num_explicit_pages().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2847  1 n 1 2800  
124 0 0 4 148 2803 0 0 0 2 4 this 3 2847  3 out 1 2807  
125 0 0 4 149 2803 0 0 0 2 4 this 3 2847  3 out 1 2807  
126 0 0 6 150 2849 0 0 0 0 
127 0 0 7 165 2851 1481 0 492 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariable::Constructor
//       Access: Published
//  Description: Use this constructor to make a ConfigVariable of an
//               unspecified type.  Usually you'd want to do this just
//               to reference a previously-defined ConfigVariable of a
//               specific type, without having to know what type it is.
//////////////////////////////////////////////////////////////////// 1 4 name 1 2799  
128 0 0 6 167 2837 0 0 390 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariable::get_default_value
//       Access: Published
//  Description: Returns the default variable specified for this
//               variable.  If the variable has not yet been defined,
//               this will return NULL.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2852  
129 0 0 6 168 2799 0 0 315 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariable::get_string_value
//       Access: Published
//  Description: Returns the toplevel value of the variable, formatted
//               as a string.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2852  
130 0 0 4 169 2803 0 0 443 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariable::set_string_value
//       Access: Published
//  Description: Changes the value assigned to this variable.  This
//               creates a local value that shadows any values defined
//               in the .prc files, until clear_local_value() is
//               called.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2851  5 value 1 2799  
131 0 0 4 170 2803 0 0 376 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariable::clear_value
//       Access: Published
//  Description: Removes the value assigned to this variable, and lets
//               its original value (as read from the prc files) show
//               through.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2851  
132 0 0 6 171 2800 0 0 402 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariable::get_num_words
//       Access: Published
//  Description: Returns the number of words in the variable's
//               value.  A word is defined as a sequence of
//               non-whitespace characters delimited by whitespace.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2852  
133 0 0 6 172 2810 0 0 446 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariable::has_string_word
//       Access: Published
//  Description: Returns true if the variable's value has a valid
//               string value for the nth word.  This is really the
//               same thing as asking if there are at least n words in
//               the value.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2852  1 n 1 2800  
134 0 0 6 173 2810 0 0 326 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariable::has_bool_word
//       Access: Published
//  Description: Returns true if the variable's value has a valid
//               boolean value for the nth word.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2852  1 n 1 2800  
135 0 0 6 174 2810 0 0 325 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariable::has_int_word
//       Access: Published
//  Description: Returns true if the variable's value has a valid
//               integer value for the nth word.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2852  1 n 1 2800  
136 0 0 6 175 2810 0 0 334 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariable::has_int64_word
//       Access: Published
//  Description: Returns true if the variable's value has a valid
//               64-bit integer value for the nth word.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2852  1 n 1 2800  
137 0 0 6 176 2810 0 0 328 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariable::has_double_word
//       Access: Published
//  Description: Returns true if the variable's value has a valid
//               integer value for the nth word.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2852  1 n 1 2800  
138 0 0 6 177 2799 0 0 401 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariable::get_string_word
//       Access: Published
//  Description: Returns the string value of the nth word of the
//               variable's value, or empty string if there is no
//               nth value.  See also has_string_word().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2852  1 n 1 2800  
139 0 0 6 178 2810 0 0 391 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariable::get_bool_word
//       Access: Published
//  Description: Returns the boolean value of the nth word of the
//               variable's value, or false if there is no nth
//               value.  See also has_bool_word().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2852  1 n 1 2800  
140 0 0 6 179 2800 0 0 384 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariable::get_int_word
//       Access: Published
//  Description: Returns the integer value of the nth word of the
//               variable's value, or 0 if there is no nth value.
//               See also has_int_word().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2852  1 n 1 2800  
141 0 0 6 180 2842 0 0 384 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariable::get_int64_word
//       Access: Published
//  Description: Returns the int64 value of the nth word of the
//               variable's value, or 0 if there is no nth value.
//               See also has_int_word().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2852  1 n 1 2800  
142 0 0 6 181 2798 0 0 390 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariable::get_double_word
//       Access: Published
//  Description: Returns the integer value of the nth word of the
//               variable's value, or 0 if there is no nth value.
//               See also has_double_word().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2852  1 n 1 2800  
143 0 0 4 182 2803 0 0 326 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariable::set_string_word
//       Access: Published
//  Description: Changes the nth word to the indicated value without
//               affecting the other words.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2851  1 n 1 2800  5 value 1 2799  
144 0 0 4 183 2803 0 0 324 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariable::set_bool_word
//       Access: Published
//  Description: Changes the nth word to the indicated value without
//               affecting the other words.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2851  1 n 1 2800  5 value 1 2810  
145 0 0 4 184 2803 0 0 323 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariable::set_int_word
//       Access: Published
//  Description: Changes the nth word to the indicated value without
//               affecting the other words.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2851  1 n 1 2800  5 value 1 2800  
146 0 0 4 185 2803 0 0 325 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariable::set_int64_word
//       Access: Published
//  Description: Changes the nth word to the indicated value without
//               affecting the other words.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2851  1 n 1 2800  5 value 1 2842  
147 0 0 4 186 2803 0 0 326 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariable::set_double_word
//       Access: Published
//  Description: Changes the nth word to the indicated value without
//               affecting the other words.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2851  1 n 1 2800  5 value 1 2798  
148 0 0 6 153 2799 0 0 261 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableBase::get_name
//       Access: Published
//  Description: Returns the name of the variable.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2854  
149 0 0 6 154 2679 0 0 386 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableBase::get_value_type
//       Access: Published
//  Description: Returns the stated type of this variable.  This
//               should be VT_list, unless a later variable
//               declaration has changed it.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2854  
150 0 0 6 155 2799 0 0 323 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableBase::get_description
//       Access: Published
//  Description: Returns the brief description of this variable, if
//               it has been defined.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2854  
151 0 0 6 156 2800 0 0 522 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableBase::get_flags
//       Access: Public
//  Description: Returns the flags value as set by set_flags().  This
//               includes the trust level and some other settings.
//               See the individual methods is_closed(),
//               get_trust_level(), etc. to pull out the semantic
//               meaning of these flags individually.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2854  
152 0 0 6 157 2810 0 0 749 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableBase::is_closed
//       Access: Public
//  Description: Returns true if the variable is not trusted by any
//               prc file (and hence cannot be modified from its
//               compiled-in default value), or false for the normal
//               case, in which the variable can be modified by any
//               prc file at or above its trust level (see
//               get_trust_level()).
//
//               This value only has effect in a release build
//               (specifically, when PRC_RESPECT_TRUST_LEVEL is
//               defined true in Config.pp).
//////////////////////////////////////////////////////////////////// 1 4 this 3 2854  
153 0 0 6 158 2800 0 0 835 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableBase::get_trust_level
//       Access: Public
//  Description: Returns the minimum trust_level a prc file must
//               demonstrate in order to redefine the value for this
//               variable.  Arguably, this should be called the
//               "mistrust level", since the larger the value, the
//               more suspicious we are of prc files.  This value is
//               not used if is_closed() returns true, which indicates
//               no file may be trusted.
//
//               This value only has effect in a release build
//               (specifically, when PRC_RESPECT_TRUST_LEVEL is
//               defined true in Config.pp).
//////////////////////////////////////////////////////////////////// 1 4 this 3 2854  
154 0 0 6 159 2810 0 0 510 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableBase::is_dynamic
//       Access: Public
//  Description: Returns true if the variable was indicated as
//               "dynamic" by its constructor, indicating that its
//               name was dynamically generated, possibly from a large
//               pool, and it should not be listed along with the
//               other variables.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2854  
155 0 0 6 160 2810 0 0 525 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableBase::clear_local_value
//       Access: Published
//  Description: Removes the local value defined for this variable,
//               and allows its value to be once again retrieved from
//               the .prc files.
//
//               Returns true if the value was successfully removed,
//               false if it did not exist in the first place.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2856  
156 0 0 6 161 2810 0 0 403 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableBase::has_local_value
//       Access: Published
//  Description: Returns true if this variable's value has been
//               shadowed by a local assignment (as created via
//               make_local_value()), or false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2854  
157 0 0 6 162 2810 0 0 395 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableBase::has_value
//       Access: Public
//  Description: Returns true if this variable has an explicit value,
//               either from a prc file or locally set, or false if
//               variable has its default value.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2854  
158 0 0 4 163 2803 0 0 226 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableBase::output
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 2854  3 out 1 2807  
159 0 0 4 164 2803 0 0 225 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableBase::write
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 2854  3 out 1 2807  
160 0 0 7 188 2857 1512 0 231 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableBool::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 name 1 2799  
161 0 0 7 188 2857 1512 0 231 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableBool::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 4 4 name 1 2799  13 default_value 1 2810  11 description 1 2799  5 flags 1 2800  
162 0 0 7 188 2857 1512 0 231 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableBool::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 4 4 name 1 2799  13 default_value 1 2799  11 description 1 2799  5 flags 1 2800  
163 0 0 6 189 2857 0 0 0 2 4 this 3 2857  5 value 1 2810  
164 0 0 6 191 2800 0 0 277 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableBool::size()
//       Access: Published
//  Description: Returns the number of unique words in the variable.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2858  
165 0 0 6 192 2810 0 0 0 2 4 this 3 2858  1 n 1 2800  
166 0 0 4 193 2803 0 0 266 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableBool::set_value
//       Access: Published
//  Description: Reassigns the variable's local value.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2857  5 value 1 2810  
167 0 0 6 194 2810 0 0 258 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableBool::get_value
//       Access: Published
//  Description: Returns the variable's value.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2858  
168 0 0 6 195 2810 0 0 274 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableBool::get_default_value
//       Access: Published
//  Description: Returns the variable's default value.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2858  
169 0 0 6 196 2810 0 0 261 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableBool::get_word
//       Access: Published
//  Description: Returns the variable's nth value.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2858  1 n 1 2800  
170 0 0 4 197 2803 0 0 338 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableBool::set_word
//       Access: Published
//  Description: Reassigns the variable's nth value.  This makes a
//               local copy of the variable's overall value.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2857  1 n 1 2800  5 value 1 2810  
171 0 0 6 190 2810 0 0 0 1 4 this 3 2858  
172 0 0 6 200 2799 0 0 258 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableCore::get_name
//       Access: Public
//  Description: Returns the name of the variable.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2860  
173 0 0 6 201 2810 0 0 345 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableCore::is_used
//       Access: Public
//  Description: Returns true if the variable has been referenced by a
//               ConfigVariable somewhere in code, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2860  
174 0 0 6 202 2679 0 0 376 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableCore::get_value_type
//       Access: Public
//  Description: Returns the stated type of this variable.  If the
//               variable has not yet been defined, this will be
//               VT_undefined.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2860  
175 0 0 6 203 2799 0 0 320 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableCore::get_description
//       Access: Public
//  Description: Returns the brief description of this variable, if
//               it has been defined.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2860  
176 0 0 6 204 2800 0 0 522 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableCore::get_flags
//       Access: Public
//  Description: Returns the flags value as set by set_flags().  This
//               includes the trust level and some other settings.
//               See the individual methods is_closed(),
//               get_trust_level(), etc. to pull out the semantic
//               meaning of these flags individually.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2860  
177 0 0 6 205 2810 0 0 749 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableCore::is_closed
//       Access: Public
//  Description: Returns true if the variable is not trusted by any
//               prc file (and hence cannot be modified from its
//               compiled-in default value), or false for the normal
//               case, in which the variable can be modified by any
//               prc file at or above its trust level (see
//               get_trust_level()).
//
//               This value only has effect in a release build
//               (specifically, when PRC_RESPECT_TRUST_LEVEL is
//               defined true in Config.pp).
//////////////////////////////////////////////////////////////////// 1 4 this 3 2860  
178 0 0 6 206 2800 0 0 835 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableCore::get_trust_level
//       Access: Public
//  Description: Returns the minimum trust_level a prc file must
//               demonstrate in order to redefine the value for this
//               variable.  Arguably, this should be called the
//               "mistrust level", since the larger the value, the
//               more suspicious we are of prc files.  This value is
//               not used if is_closed() returns true, which indicates
//               no file may be trusted.
//
//               This value only has effect in a release build
//               (specifically, when PRC_RESPECT_TRUST_LEVEL is
//               defined true in Config.pp).
//////////////////////////////////////////////////////////////////// 1 4 this 3 2860  
179 0 0 6 207 2810 0 0 510 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableCore::is_dynamic
//       Access: Public
//  Description: Returns true if the variable was indicated as
//               "dynamic" by its constructor, indicating that its
//               name was dynamically generated, possibly from a large
//               pool, and it should not be listed along with the
//               other variables.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2860  
180 0 0 6 208 2837 0 0 391 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableCore::get_default_value
//       Access: Public
//  Description: Returns the default variable specified for this
//               variable.  If the variable has not yet been defined,
//               this will return NULL.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2860  
181 0 0 4 209 2803 0 0 0 2 4 this 3 2840  10 value_type 1 2679  
182 0 0 4 210 2803 0 0 0 2 4 this 3 2840  5 flags 1 2800  
183 0 0 4 211 2803 0 0 0 2 4 this 3 2840  11 description 1 2799  
184 0 0 4 212 2803 0 0 0 2 4 this 3 2840  13 default_value 1 2799  
185 0 0 4 213 2803 0 0 306 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableCore::set_used
//       Access: Public
//  Description: Marks that the variable has been "declared" by a
//               ConfigVariable.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2840  
186 0 0 6 214 2841 0 0 0 1 4 this 3 2840  
187 0 0 6 215 2810 0 0 0 1 4 this 3 2840  
188 0 0 6 216 2810 0 0 400 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableCore::has_local_value
//       Access: Public
//  Description: Returns true if this variable's value has been
//               shadowed by a local assignment (as created via
//               make_local_value()), or false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2860  
189 0 0 6 217 2810 0 0 0 1 4 this 3 2860  
190 0 0 6 218 2800 0 0 0 1 4 this 3 2860  
191 0 0 6 219 2837 0 0 0 2 4 this 3 2860  1 n 1 2800  
192 0 0 6 220 2800 0 0 412 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableCore::get_num_references
//       Access: Public
//  Description: Returns the number of prc files that reference this
//               variable.  This is not exactly the same as the number
//               of declarations; see get_reference().
//////////////////////////////////////////////////////////////////// 1 4 this 3 2860  
193 0 0 6 221 2837 0 0 645 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableCore::get_reference
//       Access: Public
//  Description: Returns the nth declaration in a prc file that
//               references this variable.  This is similar, but not
//               identical to, get_declaration().  The difference is
//               that this will list *only* true references in a prc
//               file, and will not list default values or
//               locally-assigned values; it also will list even the
//               untrusted files.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2860  1 n 1 2800  
194 0 0 6 222 2800 0 0 378 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableCore::get_num_trusted_references
//       Access: Public
//  Description: Returns the number of trusted prc files that
//               reference this variable.  See also
//               get_num_references().
//////////////////////////////////////////////////////////////////// 1 4 this 3 2860  
195 0 0 6 223 2837 0 0 776 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableCore::get_trusted_reference
//       Access: Public
//  Description: Returns the nth declaration in a trusted prc file
//               that references this variable.  This is similar, but
//               not identical to, get_declaration().  The difference
//               is that this will list *only* true references in a
//               prc file, and will not list default values or
//               locally-assigned values.
//
//               This is also similar to get_reference(), except that
//               it only lists the trusted declarations, omitting the
//               untrusted ones.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2860  1 n 1 2800  
196 0 0 6 224 2800 0 0 352 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableCore::get_num_unique_references
//       Access: Public
//  Description: Returns the number of trusted, unique (by string
//               value) values there exist for this variable.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2860  
197 0 0 6 225 2837 0 0 431 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableCore::get_unique_reference
//       Access: Public
//  Description: Returns the nth trusted, unique value for this
//               variable.  This is similar to
//               get_trusted_reference(), except that duplicate values
//               are removed.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2860  1 n 1 2800  
198 0 0 4 226 2803 0 0 0 2 4 this 3 2860  3 out 1 2807  
199 0 0 4 227 2803 0 0 0 2 4 this 3 2860  3 out 1 2807  
200 0 0 7 229 2862 1551 0 233 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableDouble::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 name 1 2799  
201 0 0 7 229 2862 1551 0 233 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableDouble::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 4 4 name 1 2799  13 default_value 1 2798  11 description 1 2799  5 flags 1 2800  
202 0 0 7 229 2862 1551 0 233 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableDouble::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 4 4 name 1 2799  13 default_value 1 2799  11 description 1 2799  5 flags 1 2800  
203 0 0 6 230 2862 0 0 0 2 4 this 3 2862  5 value 1 2798  
204 0 0 6 232 2800 0 0 279 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableDouble::size()
//       Access: Published
//  Description: Returns the number of unique words in the variable.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2863  
205 0 0 6 233 2798 0 0 0 2 4 this 3 2863  1 n 1 2800  
206 0 0 4 234 2803 0 0 268 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableDouble::set_value
//       Access: Published
//  Description: Reassigns the variable's local value.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2862  5 value 1 2798  
207 0 0 6 235 2798 0 0 260 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableDouble::get_value
//       Access: Published
//  Description: Returns the variable's value.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2863  
208 0 0 6 236 2798 0 0 276 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableDouble::get_default_value
//       Access: Published
//  Description: Returns the variable's default value.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2863  
209 0 0 6 237 2798 0 0 263 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableDouble::get_word
//       Access: Published
//  Description: Returns the variable's nth value.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2863  1 n 1 2800  
210 0 0 4 238 2803 0 0 340 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableDouble::set_word
//       Access: Published
//  Description: Reassigns the variable's nth value.  This makes a
//               local copy of the variable's overall value.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2862  1 n 1 2800  5 value 1 2798  
211 0 0 6 231 2798 0 0 0 1 4 this 3 2863  
212 0 0 7 241 2865 1573 0 235 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableFilename::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 name 1 2799  
213 0 0 7 241 2865 1573 0 235 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableFilename::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 4 4 name 1 2799  13 default_value 1 2866  11 description 1 2799  5 flags 1 2800  
214 0 0 6 242 2865 0 0 0 2 4 this 3 2865  5 value 1 2866  
215 0 0 6 244 2799 0 0 225 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableFilename::c_str
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2868  
216 0 0 6 245 2810 0 0 225 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableFilename::empty
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2868  
217 0 0 6 246 2796 0 0 226 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableFilename::length
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2868  
218 0 0 6 247 2870 0 0 0 2 4 this 3 2868  1 n 1 2800  
219 0 0 6 248 2799 0 0 450 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableFilename::get_fullpath
//       Access: Public
//  Description: Returns the entire filename: directory, basename,
//               extension.  This is the same thing returned by the
//               string typecast operator, so this function is a
//               little redundant.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2868  
220 0 0 6 249 2799 0 0 391 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableFilename::get_dirname
//       Access: Public
//  Description: Returns the directory part of the filename.  This is
//               everything in the filename up to, but not including
//               the rightmost slash.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2868  
221 0 0 6 250 2799 0 0 398 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableFilename::get_basename
//       Access: Public
//  Description: Returns the basename part of the filename.  This is
//               everything in the filename after the rightmost slash,
//               including any extensions.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2868  
222 0 0 6 251 2799 0 0 345 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableFilename::get_fullpath_wo_extension
//       Access: Public
//  Description: Returns the full filename--directory and basename
//               parts--except for the extension.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2868  
223 0 0 6 252 2799 0 0 333 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableFilename::get_basename_wo_extension
//       Access: Public
//  Description: Returns the basename part of the filename, without
//               the file extension.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2868  
224 0 0 6 253 2799 0 0 394 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableFilename::get_extension
//       Access: Public
//  Description: Returns the file extension.  This is everything after
//               the rightmost dot, if there is one, or the empty
//               string if there is not.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2868  
225 0 0 6 254 2810 0 0 34 // Comparison operators are handy. 2 4 this 3 2868  5 other 1 2866  
226 0 0 6 255 2810 0 0 0 2 4 this 3 2868  5 other 1 2866  
227 0 0 6 256 2810 0 0 0 2 4 this 3 2868  5 other 1 2866  
228 0 0 4 257 2803 0 0 270 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableFilename::set_value
//       Access: Published
//  Description: Reassigns the variable's local value.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2865  5 value 1 2866  
229 0 0 7 258 2871 1728 0 262 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableFilename::get_value
//       Access: Published
//  Description: Returns the variable's value.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2868  
230 0 0 7 259 2871 1728 0 278 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableFilename::get_default_value
//       Access: Published
//  Description: Returns the variable's default value.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2868  
231 0 0 7 260 2871 1728 0 265 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableFilename::get_word
//       Access: Published
//  Description: Returns the variable's nth value.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2868  1 n 1 2800  
232 0 0 4 261 2803 0 0 342 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableFilename::set_word
//       Access: Published
//  Description: Reassigns the variable's nth value.  This makes a
//               local copy of the variable's overall value.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2865  1 n 1 2800  5 value 1 2866  
233 0 0 6 243 2866 0 0 0 1 4 this 3 2868  
234 0 0 7 264 2872 1584 0 230 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableInt::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 name 1 2799  
235 0 0 7 264 2872 1584 0 230 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableInt::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 4 4 name 1 2799  13 default_value 1 2800  11 description 1 2799  5 flags 1 2800  
236 0 0 7 264 2872 1584 0 230 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableInt::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 4 4 name 1 2799  13 default_value 1 2799  11 description 1 2799  5 flags 1 2800  
237 0 0 6 265 2872 0 0 0 2 4 this 3 2872  5 value 1 2800  
238 0 0 6 267 2800 0 0 276 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableInt::size()
//       Access: Published
//  Description: Returns the number of unique words in the variable.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2873  
239 0 0 6 268 2800 0 0 0 2 4 this 3 2873  1 n 1 2800  
240 0 0 4 269 2803 0 0 265 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableInt::set_value
//       Access: Published
//  Description: Reassigns the variable's local value.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2872  5 value 1 2800  
241 0 0 6 270 2800 0 0 257 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableInt::get_value
//       Access: Published
//  Description: Returns the variable's value.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2873  
242 0 0 6 271 2800 0 0 273 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableInt::get_default_value
//       Access: Published
//  Description: Returns the variable's default value.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2873  
243 0 0 6 272 2800 0 0 260 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableInt::get_word
//       Access: Published
//  Description: Returns the variable's nth value.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2873  1 n 1 2800  
244 0 0 4 273 2803 0 0 337 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableInt::set_word
//       Access: Published
//  Description: Reassigns the variable's nth value.  This makes a
//               local copy of the variable's overall value.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2872  1 n 1 2800  5 value 1 2800  
245 0 0 6 266 2800 0 0 0 1 4 this 3 2873  
246 0 0 7 276 2875 1595 0 232 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableInt64::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 name 1 2799  
247 0 0 7 276 2875 1595 0 232 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableInt64::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 4 4 name 1 2799  13 default_value 1 2842  11 description 1 2799  5 flags 1 2842  
248 0 0 7 276 2875 1595 0 232 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableInt64::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 4 4 name 1 2799  13 default_value 1 2799  11 description 1 2799  5 flags 1 2842  
249 0 0 6 277 2875 0 0 0 2 4 this 3 2875  5 value 1 2842  
250 0 0 6 279 2842 0 0 278 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableInt64::size()
//       Access: Published
//  Description: Returns the number of unique words in the variable.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2876  
251 0 0 6 280 2842 0 0 0 2 4 this 3 2876  1 n 1 2800  
252 0 0 4 281 2803 0 0 267 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableInt64::set_value
//       Access: Published
//  Description: Reassigns the variable's local value.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2875  5 value 1 2842  
253 0 0 6 282 2842 0 0 259 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableInt64::get_value
//       Access: Published
//  Description: Returns the variable's value.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2876  
254 0 0 6 283 2842 0 0 275 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableInt64::get_default_value
//       Access: Published
//  Description: Returns the variable's default value.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2876  
255 0 0 6 284 2842 0 0 262 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableInt64::get_word
//       Access: Published
//  Description: Returns the variable's nth value.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2876  1 n 1 2800  
256 0 0 4 285 2803 0 0 339 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableInt64::set_word
//       Access: Published
//  Description: Reassigns the variable's nth value.  This makes a
//               local copy of the variable's overall value.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2875  1 n 1 2800  5 value 1 2842  
257 0 0 6 278 2842 0 0 0 1 4 this 3 2876  
258 0 0 7 288 2878 1597 0 231 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableList::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 3 4 name 1 2799  11 description 1 2799  5 flags 1 2800  
259 0 0 6 290 2800 0 0 279 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableList::get_num_values
//       Access: Published
//  Description: Returns the number of values in the variable.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2879  
260 0 0 6 291 2799 0 0 274 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableList::get_string_value
//       Access: Published
//  Description: Returns the nth value of the variable.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2879  1 n 1 2800  
261 0 0 6 292 2800 0 0 293 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableList::get_num_unique_values
//       Access: Published
//  Description: Returns the number of unique values in the variable.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2879  
262 0 0 6 293 2799 0 0 281 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableList::get_unique_value
//       Access: Published
//  Description: Returns the nth unique value of the variable.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2879  1 n 1 2800  
263 0 0 6 294 2800 0 0 278 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableList::size()
//       Access: Published
//  Description: Returns the number of unique values of the variable.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2879  
264 0 0 6 295 2799 0 0 0 2 4 this 3 2879  1 n 1 2800  
265 0 0 4 296 2803 0 0 0 2 4 this 3 2879  3 out 1 2807  
266 0 0 4 297 2803 0 0 0 2 4 this 3 2879  3 out 1 2807  
267 0 0 6 299 2840 0 0 0 2 4 this 3 2881  4 name 1 2799  
268 0 0 6 300 2840 0 0 0 6 4 this 3 2881  7 pattern 1 2799  4 type 1 2679  13 default_value 1 2799  11 description 1 2799  5 flags 1 2800  
269 0 0 6 301 2800 0 0 327 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableManager::get_num_variables
//       Access: Published
//  Description: Returns the current number of active ConfigVariableCores in
//               the world.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2882  
270 0 0 6 302 2840 0 0 290 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableManager::get_variable
//       Access: Published
//  Description: Returns the nth active ConfigVariableCore in the world.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2882  1 n 1 2800  
271 0 0 6 303 2799 0 0 0 2 4 this 3 2882  1 n 1 2800  
272 0 0 6 304 2810 0 0 0 2 4 this 3 2882  1 n 1 2800  
273 0 0 4 305 2803 0 0 0 2 4 this 3 2882  3 out 1 2807  
274 0 0 4 306 2803 0 0 0 2 4 this 3 2882  3 out 1 2807  
275 0 0 4 307 2803 0 0 0 2 4 this 3 2882  3 out 1 2807  
276 0 0 4 308 2803 0 0 0 1 4 this 3 2882  
277 0 0 4 309 2803 0 0 0 1 4 this 3 2882  
278 0 0 4 310 2803 0 0 0 1 4 this 3 2882  
279 0 0 6 311 2881 0 0 0 0 
280 0 0 7 313 2886 1620 0 237 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableSearchPath::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 4 4 name 1 2799  13 default_value 1 2884  11 description 1 2799  5 flags 1 2800  
281 0 0 7 313 2886 1620 0 237 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableSearchPath::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 3 4 name 1 2799  11 description 1 2799  5 flags 1 2800  
282 0 0 7 313 2886 1620 0 237 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableSearchPath::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 4 4 name 1 2799  13 default_value 1 2799  11 description 1 2799  5 flags 1 2800  
283 0 0 6 316 2884 0 0 235 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableSearchPath::get_value
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 2887  
284 0 0 6 317 2884 0 0 243 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableSearchPath::get_default_value
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 2887  
285 0 0 6 318 2810 0 0 359 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableSearchPath::clear_local_value
//       Access: Published
//  Description: Removes all the directories locally added to the
//               search list, and restores it to its original form.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2886  
286 0 0 4 319 2803 0 0 347 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableSearchPath::clear
//       Access: Published
//  Description: Removes all the directories locally added to the
//               search list, and restores it to its original form.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2886  
287 0 0 4 320 2803 0 0 293 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableSearchPath::append_directory
//       Access: Published
//  Description: Adds a new directory to the end of the search list.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2886  9 directory 1 2866  
288 0 0 4 321 2803 0 0 296 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableSearchPath::prepend_directory
//       Access: Published
//  Description: Adds a new directory to the front of the search list.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2886  9 directory 1 2866  
289 0 0 4 322 2803 0 0 338 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableSearchPath::append_path
//       Access: Published
//  Description: Adds all of the directories listed in the search path
//               to the end of the search list.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2886  4 path 1 2884  
290 0 0 4 322 2803 0 0 338 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableSearchPath::append_path
//       Access: Published
//  Description: Adds all of the directories listed in the search path
//               to the end of the search list.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2886  4 path 1 2799  9 separator 1 2799  
291 0 0 4 323 2803 0 0 345 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableSearchPath::prepend_path
//       Access: Published
//  Description: Adds all of the directories listed in the search path
//               to the beginning of the search list.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2886  4 path 1 2884  
292 0 0 6 324 2810 0 0 309 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableSearchPath::is_empty
//       Access: Published
//  Description: Returns true if the search list is empty, false
//               otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2887  
293 0 0 6 325 2800 0 0 298 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableSearchPath::get_num_directories
//       Access: Published
//  Description: Returns the number of directories on the search list.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2887  
294 0 0 6 326 2866 0 0 284 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableSearchPath::get_directory
//       Access: Published
//  Description: Returns the nth directory on the search list.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2887  1 n 1 2800  
295 0 0 7 327 2871 1728 0 466 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableSearchPath::find_file
//       Access: Published
//  Description: Searches all the directories in the search list for
//               the indicated file, in order.  Returns the full
//               matching pathname of the first match if found, or the
//               empty string if not found.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2887  8 filename 1 2866  
296 0 0 7 328 2889 1661 0 458 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableSearchPath::find_all_files
//       Access: Published
//  Description: This variant of find_all_files() returns the new
//               Results object, instead of filling on in on the
//               parameter list.  This is a little more convenient to
//               call from Python.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2887  8 filename 1 2866  
297 0 0 6 328 2800 0 0 682 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableSearchPath::find_all_files
//       Access: Published
//  Description: Searches all the directories in the search list for
//               the indicated file, in order.  Fills up the results
//               list with *all* of the matching filenames found, if
//               any.  Returns the number of matches found.
//
//               It is the responsibility of the the caller to clear
//               the results list first; otherwise, the newly-found
//               files will be appended to the list.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2887  8 filename 1 2866  7 results 1 2889  
298 0 0 4 329 2803 0 0 232 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableSearchPath::output
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 2887  3 out 1 2807  
299 0 0 4 330 2803 0 0 231 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableSearchPath::write
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 2887  3 out 1 2807  
300 0 0 6 315 2884 0 0 0 1 4 this 3 2887  
301 0 0 7 332 2890 1652 0 233 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableString::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 name 1 2799  
302 0 0 7 332 2890 1652 0 233 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableString::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 4 4 name 1 2799  13 default_value 1 2799  11 description 1 2799  5 flags 1 2800  
303 0 0 6 333 2890 0 0 0 2 4 this 3 2890  5 value 1 2799  
304 0 0 6 335 2799 0 0 223 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableString::c_str
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2891  
305 0 0 6 336 2810 0 0 223 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableString::empty
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2891  
306 0 0 6 337 2796 0 0 224 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableString::length
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2891  
307 0 0 6 338 2870 0 0 0 2 4 this 3 2891  1 n 1 2800  
308 0 0 6 339 2810 0 0 34 // Comparison operators are handy. 2 4 this 3 2891  5 other 1 2799  
309 0 0 6 340 2810 0 0 0 2 4 this 3 2891  5 other 1 2799  
310 0 0 6 341 2810 0 0 0 2 4 this 3 2891  5 other 1 2799  
311 0 0 4 342 2803 0 0 268 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableString::set_value
//       Access: Published
//  Description: Reassigns the variable's local value.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2890  5 value 1 2799  
312 0 0 6 343 2799 0 0 260 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableString::get_value
//       Access: Published
//  Description: Returns the variable's value.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2891  
313 0 0 6 344 2799 0 0 276 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableString::get_default_value
//       Access: Published
//  Description: Returns the variable's default value.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2891  
314 0 0 6 345 2799 0 0 263 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableString::get_word
//       Access: Published
//  Description: Returns the variable's nth value.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2891  1 n 1 2800  
315 0 0 4 346 2803 0 0 340 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableString::set_word
//       Access: Published
//  Description: Reassigns the variable's nth value.  This makes a
//               local copy of the variable's overall value.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2890  1 n 1 2800  5 value 1 2799  
316 0 0 6 334 2799 0 0 0 1 4 this 3 2891  
317 0 0 6 349 2810 0 0 0 2 3 sym 1 2799  3 def 1 2810  
318 0 0 6 350 2800 0 0 0 2 3 sym 1 2799  3 def 1 2800  
319 0 0 6 351 2816 0 0 0 2 3 sym 1 2799  3 def 1 2816  
320 0 0 6 352 2798 0 0 0 2 3 sym 1 2799  3 def 1 2798  
321 0 0 6 353 2799 0 0 0 2 3 sym 1 2799  3 def 1 2799  
322 0 0 7 367 2850 1671 0 0 0 
323 0 0 7 367 2850 1671 0 0 1 4 copy 1 2884  
324 0 0 7 367 2850 1671 0 0 1 9 directory 1 2866  
325 0 0 7 367 2850 1671 0 0 2 4 path 1 2799  9 separator 1 2799  
326 0 0 6 368 2850 0 0 0 2 4 this 3 2850  4 copy 1 2884  
327 0 0 4 370 2803 0 0 0 1 4 this 3 2850  
328 0 0 4 371 2803 0 0 0 2 4 this 3 2850  9 directory 1 2866  
329 0 0 4 372 2803 0 0 0 2 4 this 3 2850  9 directory 1 2866  
330 0 0 4 373 2803 0 0 0 2 4 this 3 2850  4 path 1 2884  
331 0 0 4 373 2803 0 0 0 3 4 this 3 2850  4 path 1 2799  9 separator 1 2799  
332 0 0 4 374 2803 0 0 0 2 4 this 3 2850  4 path 1 2884  
333 0 0 6 375 2810 0 0 0 1 4 this 3 2884  
334 0 0 6 376 2800 0 0 0 1 4 this 3 2884  
335 0 0 6 377 2866 0 0 0 2 4 this 3 2884  1 n 1 2800  
336 0 0 7 378 2871 1728 0 0 2 4 this 3 2884  8 filename 1 2866  
337 0 0 7 379 2889 1661 0 445 ////////////////////////////////////////////////////////////////////
//     Function: DSearchPath::find_all_files
//       Access: Published
//  Description: This variant of find_all_files() returns the new
//               Results object, instead of filling on in on the
//               parameter list.  This is a little more convenient to
//               call from Python.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2884  8 filename 1 2866  
338 0 0 6 379 2800 0 0 0 3 4 this 3 2884  8 filename 1 2866  7 results 1 2889  
339 0 0 7 380 2871 1728 0 531 ////////////////////////////////////////////////////////////////////
//     Function: DSearchPath::search_path
//       Access: Published, Static
//  Description: A quick-and-easy way to search a searchpath for a
//               file when you don't feel like building or keeping
//               around a DSearchPath object.  This simply
//               constructs a temporary DSearchPath based on the
//               indicated path string, and searches that.
//////////////////////////////////////////////////////////////////// 3 8 filename 1 2866  4 path 1 2799  9 separator 1 2799  
340 0 0 4 381 2803 0 0 0 3 4 this 3 2884  3 out 1 2807  9 separator 1 2799  
341 0 0 4 382 2803 0 0 0 3 4 this 3 2884  3 out 1 2807  12 indent_level 1 2800  
342 0 0 7 357 2889 1661 0 0 0 
343 0 0 7 357 2889 1661 0 0 1 4 copy 1 2893  
344 0 0 6 358 2889 0 0 0 2 4 this 3 2889  4 copy 1 2893  
345 0 0 4 360 2803 0 0 0 1 4 this 3 2889  
346 0 0 6 361 2800 0 0 0 1 4 this 3 2893  
347 0 0 6 362 2866 0 0 0 2 4 this 3 2893  1 n 1 2800  
348 0 0 7 363 2871 1728 0 0 2 4 this 3 2893  1 n 1 2800  
349 0 0 6 364 2800 0 0 382 ////////////////////////////////////////////////////////////////////
//     Function: DSearchPath::Results::size
//       Access: Published
//  Description: Returns the num of filenames in the set.  This method
//               is defined to make the Results object appear to be a
//               list in Python.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2893  
350 0 0 4 365 2803 0 0 0 2 4 this 3 2893  3 out 1 2807  
351 0 0 4 366 2803 0 0 0 3 4 this 3 2893  3 out 1 2807  12 indent_level 1 2800  
352 0 0 6 384 2810 0 0 330 ////////////////////////////////////////////////////////////////////
//     Function: ExecutionEnvironment::has_environment_variable
//       Access: Public, Static
//  Description: Returns true if the indicated environment variable
//               is defined.
//////////////////////////////////////////////////////////////////// 1 3 var 1 2799  
353 0 0 6 385 2799 0 0 396 ////////////////////////////////////////////////////////////////////
//     Function: ExecutionEnvironment::get_environment_variable
//       Access: Public, Static
//  Description: Returns the definition of the indicated environment
//               variable, or the empty string if the variable is
//               undefined.
//////////////////////////////////////////////////////////////////// 1 3 var 1 2799  
354 0 0 4 386 2803 0 0 329 ////////////////////////////////////////////////////////////////////
//     Function: ExecutionEnvironment::set_environment_variable
//       Access: Public, Static
//  Description: Changes the definition of the indicated environment
//               variable.
//////////////////////////////////////////////////////////////////// 2 3 var 1 2799  5 value 1 2799  
355 0 0 4 387 2803 0 0 588 ////////////////////////////////////////////////////////////////////
//     Function: ExecutionEnvironment::shadow_environment_variable
//       Access: Public, Static
//  Description: Changes the apparent definition of the indicated
//               environment variable by masking it within this class
//               with a new value.  This does not change the actual
//               environment variable, but future calls to
//               get_environment_variable() will return this new
//               value.
//////////////////////////////////////////////////////////////////// 2 3 var 1 2799  5 value 1 2799  
356 0 0 4 388 2803 0 0 399 ////////////////////////////////////////////////////////////////////
//     Function: ExecutionEnvironment::clear_shadow
//       Access: Public, Static
//  Description: Removes a value set by a previous call to
//               shadow_environment_variable(), and lets the actual
//               value of the variable show again.
//////////////////////////////////////////////////////////////////// 1 3 var 1 2799  
357 0 0 6 389 2799 0 0 0 1 3 str 1 2799  
358 0 0 6 390 2800 0 0 348 ////////////////////////////////////////////////////////////////////
//     Function: ExecutionEnvironment::get_num_args
//       Access: Public, Static
//  Description: Returns the number of command-line arguments
//               available, not counting arg 0, the binary name.
//////////////////////////////////////////////////////////////////// 0 
359 0 0 6 391 2799 0 0 462 ////////////////////////////////////////////////////////////////////
//     Function: ExecutionEnvironment::get_arg
//       Access: Public, Static
//  Description: Returns the nth command-line argument.  The index n
//               must be in the range [0 .. get_num_args()).  The
//               first parameter, n == 0, is the first actual
//               parameter, not the binary name.
//////////////////////////////////////////////////////////////////// 1 1 n 1 2800  
360 0 0 6 392 2799 0 0 352 ////////////////////////////////////////////////////////////////////
//     Function: ExecutionEnvironment::get_binary_name
//       Access: Public, Static
//  Description: Returns the name of the binary executable that
//               started this program, if it can be determined.
//////////////////////////////////////////////////////////////////// 0 
361 0 0 6 393 2799 0 0 349 ////////////////////////////////////////////////////////////////////
//     Function: ExecutionEnvironment::get_dtool_name
//       Access: Public, Static
//  Description: Returns the name of the libdtool DLL that
//               is used in this program, if it can be determined.
//////////////////////////////////////////////////////////////////// 0 
362 0 0 4 394 2803 0 0 253 ////////////////////////////////////////////////////////////////////
//     Function: ExecutionEnvironment::set_binary_name
//       Access: Public, Static
//  Description: Do not use.
//////////////////////////////////////////////////////////////////// 1 4 name 1 2799  
363 0 0 4 395 2803 0 0 252 ////////////////////////////////////////////////////////////////////
//     Function: ExecutionEnvironment::set_dtool_name
//       Access: Public, Static
//  Description: Do not use.
//////////////////////////////////////////////////////////////////// 1 4 name 1 2799  
364 0 0 7 396 2871 1728 0 0 0 
365 0 0 7 430 2895 1724 0 222 ////////////////////////////////////////////////////////////////////
//     Function: FileStream::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
366 0 0 7 430 2895 1724 0 222 ////////////////////////////////////////////////////////////////////
//     Function: FileStream::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 8 filename 1 2799  4 mode 1 2705  
367 0 0 4 432 2803 0 0 216 ////////////////////////////////////////////////////////////////////
//     Function: FileStream::open
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 3 4 this 3 2895  8 filename 1 2799  4 mode 1 2705  
368 0 0 4 433 2803 0 0 217 ////////////////////////////////////////////////////////////////////
//     Function: FileStream::close
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 2895  
369 0 0 4 428 2803 0 0 0 1 4 this 3 2896  
370 0 0 6 417 2846 0 0 0 1 4 this 3 2896  
371 0 0 6 418 2896 0 0 0 1 4 this 3 2846  
372 0 0 6 413 2800 0 0 0 1 4 this 3 2846  
373 0 0 6 414 2897 0 0 0 1 4 this 3 2846  
374 0 0 4 415 2803 0 0 0 2 4 this 3 2846  3 pos 1 2897  
375 0 0 4 415 2803 0 0 0 3 4 this 3 2846  3 off 1 2897  3 dir 1 2704  
376 0 0 6 412 2899 0 0 0 1 4 this 3 2846  
377 0 0 6 426 2807 0 0 0 1 4 this 3 2896  
378 0 0 6 427 2896 0 0 0 1 4 this 3 2807  
379 0 0 4 421 2803 0 0 0 2 4 this 3 2807  1 c 1 2870  
380 0 0 4 422 2803 0 0 0 1 4 this 3 2807  
381 0 0 6 423 2897 0 0 0 1 4 this 3 2807  
382 0 0 4 424 2803 0 0 0 2 4 this 3 2807  3 pos 1 2897  
383 0 0 4 424 2803 0 0 0 3 4 this 3 2807  3 off 1 2897  3 dir 1 2704  
384 0 0 6 420 2899 0 0 0 1 4 this 3 2807  
385 0 0 6 406 2810 0 0 0 1 4 this 3 2900  
386 0 0 6 407 2810 0 0 0 1 4 this 3 2900  
387 0 0 6 408 2810 0 0 0 1 4 this 3 2900  
388 0 0 6 409 2810 0 0 0 1 4 this 3 2900  
389 0 0 4 410 2803 0 0 0 1 4 this 3 2899  
390 0 0 7 436 2871 1728 0 225 ////////////////////////////////////////////////////////////////////
//     Function: Filename::Copy Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2866  
391 0 0 7 436 2871 1728 0 0 2 7 dirname 1 2866  8 basename 1 2866  
392 0 0 7 436 2871 1728 0 220 ////////////////////////////////////////////////////////////////////
//     Function: Filename::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 8 filename 1 2799  
393 0 0 7 436 2871 1728 0 220 ////////////////////////////////////////////////////////////////////
//     Function: Filename::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 8 filename 1 2799  
394 0 0 7 436 2871 1728 0 220 ////////////////////////////////////////////////////////////////////
//     Function: Filename::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 8 filename 1 2799  
395 0 0 6 438 2793 0 0 0 1 4 this 3 2866  
396 0 0 7 439 2871 1728 0 240 ////////////////////////////////////////////////////////////////////
//     Function: Filename::text_filename named constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 8 filename 1 2866  
397 0 0 7 439 2871 1728 0 240 ////////////////////////////////////////////////////////////////////
//     Function: Filename::text_filename named constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 8 filename 1 2799  
398 0 0 7 440 2871 1728 0 242 ////////////////////////////////////////////////////////////////////
//     Function: Filename::binary_filename named constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 8 filename 1 2866  
399 0 0 7 440 2871 1728 0 242 ////////////////////////////////////////////////////////////////////
//     Function: Filename::binary_filename named constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 8 filename 1 2799  
400 0 0 7 441 2871 1728 0 239 ////////////////////////////////////////////////////////////////////
//     Function: Filename::dso_filename named constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 8 filename 1 2799  
401 0 0 7 442 2871 1728 0 246 ////////////////////////////////////////////////////////////////////
//     Function: Filename::executable_filename named constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 8 filename 1 2799  
402 0 0 7 443 2871 1728 0 348 ////////////////////////////////////////////////////////////////////
//     Function: Filename::pattern_filename named constructor
//       Access: Published
//  Description: Constructs a filename that represents a sequence of
//               numbered files.  See set_pattern().
//////////////////////////////////////////////////////////////////// 1 8 filename 1 2799  
403 0 0 7 444 2871 1728 0 0 2 11 os_specific 1 2799  4 type 1 2708  
404 0 0 7 445 2871 1728 0 0 2 11 os_specific 1 2799  4 type 1 2708  
405 0 0 7 446 2871 1728 0 0 2 11 user_string 1 2799  4 type 1 2708  
406 0 0 7 447 2871 1728 0 0 4 7 dirname 1 2799  6 prefix 1 2799  6 suffix 1 2799  4 type 1 2708  
407 0 0 6 448 2866 0 0 0 0 
408 0 0 6 449 2866 0 0 0 0 
409 0 0 6 450 2866 0 0 0 0 
410 0 0 6 451 2866 0 0 0 0 
411 0 0 6 452 2871 0 0 233 ////////////////////////////////////////////////////////////////////
//     Function: Filename::Copy assignment operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2871  4 copy 1 2866  
412 0 0 6 452 2871 0 0 228 ////////////////////////////////////////////////////////////////////
//     Function: Filename::Assignment operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2871  8 filename 1 2799  
413 0 0 6 452 2871 0 0 228 ////////////////////////////////////////////////////////////////////
//     Function: Filename::Assignment operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2871  8 filename 1 2799  
414 0 0 6 452 2871 0 0 228 ////////////////////////////////////////////////////////////////////
//     Function: Filename::Assignment operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2871  8 filename 1 2799  
415 0 0 6 454 2799 0 0 214 ////////////////////////////////////////////////////////////////////
//     Function: Filename::c_str
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2866  
416 0 0 6 455 2810 0 0 214 ////////////////////////////////////////////////////////////////////
//     Function: Filename::empty
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2866  
417 0 0 6 456 2796 0 0 215 ////////////////////////////////////////////////////////////////////
//     Function: Filename::length
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2866  
418 0 0 6 457 2870 0 0 0 2 4 this 3 2866  1 n 1 2800  
419 0 0 6 458 2793 0 0 0 1 4 this 3 2866  
420 0 0 6 459 2799 0 0 215 ////////////////////////////////////////////////////////////////////
//     Function: Filename::substr
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 2866  5 begin 1 2796  3 end 1 2796  
421 0 0 6 460 2871 0 0 0 2 4 this 3 2871  5 other 1 2799  
422 0 0 7 461 2871 1728 0 0 2 4 this 3 2866  5 other 1 2799  
423 0 0 7 462 2871 1728 0 0 2 4 this 3 2866  5 other 1 2866  
424 0 0 6 463 2799 0 0 382 ////////////////////////////////////////////////////////////////////
//     Function: Filename::get_fullpath
//       Access: Published
//  Description: Returns the entire filename: directory, basename,
//               extension.  This is the same thing returned by the
//               string typecast operator.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2866  
425 0 0 6 464 2799 0 0 296 ////////////////////////////////////////////////////////////////////
//     Function: Filename::get_fullpath_w
//       Access: Published
//  Description: Returns the entire filename as a wide-character
//               string.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2866  
426 0 0 6 465 2799 0 0 380 ////////////////////////////////////////////////////////////////////
//     Function: Filename::get_dirname
//       Access: Published
//  Description: Returns the directory part of the filename.  This is
//               everything in the filename up to, but not including
//               the rightmost slash.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2866  
427 0 0 6 466 2799 0 0 387 ////////////////////////////////////////////////////////////////////
//     Function: Filename::get_basename
//       Access: Published
//  Description: Returns the basename part of the filename.  This is
//               everything in the filename after the rightmost slash,
//               including any extensions.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2866  
428 0 0 6 467 2799 0 0 334 ////////////////////////////////////////////////////////////////////
//     Function: Filename::get_fullpath_wo_extension
//       Access: Published
//  Description: Returns the full filename--directory and basename
//               parts--except for the extension.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2866  
429 0 0 6 468 2799 0 0 322 ////////////////////////////////////////////////////////////////////
//     Function: Filename::get_basename_wo_extension
//       Access: Published
//  Description: Returns the basename part of the filename, without
//               the file extension.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2866  
430 0 0 6 469 2799 0 0 383 ////////////////////////////////////////////////////////////////////
//     Function: Filename::get_extension
//       Access: Published
//  Description: Returns the file extension.  This is everything after
//               the rightmost dot, if there is one, or the empty
//               string if there is not.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2866  
431 0 0 4 470 2803 0 0 68 // You can also use any of these to reassign pieces of the filename. 2 4 this 3 2871  1 s 1 2799  
432 0 0 4 471 2803 0 0 0 2 4 this 3 2871  1 s 1 2799  
433 0 0 4 472 2803 0 0 0 2 4 this 3 2871  1 s 1 2799  
434 0 0 4 473 2803 0 0 0 2 4 this 3 2871  1 s 1 2799  
435 0 0 4 474 2803 0 0 0 2 4 this 3 2871  1 s 1 2799  
436 0 0 4 475 2803 0 0 0 2 4 this 3 2871  1 s 1 2799  
437 0 0 4 476 2803 0 0 445 ////////////////////////////////////////////////////////////////////
//     Function: Filename::set_binary
//       Access: Published
//  Description: Indicates that the filename represents a binary file.
//               This is primarily relevant to the read_file() and
//               write_file() methods, so they can set the appropriate
//               flags to the OS.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2871  
438 0 0 4 477 2803 0 0 441 ////////////////////////////////////////////////////////////////////
//     Function: Filename::set_text
//       Access: Published
//  Description: Indicates that the filename represents a text file.
//               This is primarily relevant to the read_file() and
//               write_file() methods, so they can set the appropriate
//               flags to the OS.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2871  
439 0 0 6 478 2810 0 0 523 ////////////////////////////////////////////////////////////////////
//     Function: Filename::is_binary
//       Access: Published
//  Description: Returns true if the Filename has been indicated to
//               represent a binary file via a previous call to
//               set_binary().  It is possible that neither
//               is_binary() nor is_text() will be true, if neither
//               set_binary() nor set_text() was ever called.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2866  
440 0 0 6 479 2810 0 0 517 ////////////////////////////////////////////////////////////////////
//     Function: Filename::is_text
//       Access: Published
//  Description: Returns true if the Filename has been indicated to
//               represent a text file via a previous call to
//               set_text().  It is possible that neither is_binary()
//               nor is_text() will be true, if neither set_binary()
//               nor set_text() was ever called.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2866  
441 0 0 6 480 2810 0 0 459 ////////////////////////////////////////////////////////////////////
//     Function: Filename::is_binary_or_text
//       Access: Published
//  Description: Returns true either is_binary() or is_text() is true;
//               that is, that the filename has been specified as
//               either binary or text.  If this is false, the
//               filename has not been specified.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2866  
442 0 0 4 481 2803 0 0 646 ////////////////////////////////////////////////////////////////////
//     Function: Filename::set_type
//       Access: Published
//  Description: Sets the type of the file represented by the
//               filename.  This is useful for to_os_specific(),
//               resolve_filename(), test_existence(), and all such
//               real-world access functions.  It helps the Filename
//               know how to map the internal filename to the
//               OS-specific filename (for instance, maybe executables
//               should have an .exe extension).
//////////////////////////////////////////////////////////////////// 2 4 this 3 2871  4 type 1 2708  
443 0 0 6 482 2708 0 0 325 ////////////////////////////////////////////////////////////////////
//     Function: Filename::get_type
//       Access: Published
//  Description: Returns the type of the file represented by the
//               filename, as previously set by set_type().
//////////////////////////////////////////////////////////////////// 1 4 this 3 2866  
444 0 0 4 483 2803 0 0 1075 ////////////////////////////////////////////////////////////////////
//     Function: Filename::set_pattern
//       Access: Published
//  Description: Sets the flag indicating whether this is a filename
//               pattern.  When this is true, the filename is
//               understood to be a placeholder for a numbered
//               sequence of filename, such as an image sequence.  In
//               this case, a sequence of one or more hash characters
//               ("#") should appear in the filename string; these
//               characters will be filled in with the corresponding
//               number (or more) of digits representing the sequence
//               number.  Sequence numbers always begin counting at 0.
//
//               When this is true, methods like has_hash() and
//               get_hash_to_end() and get_filename_index() may be
//               called.  Methods like is_exists() will implicitly
//               test for existance of filename sequence 0.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2871  7 pattern 1 2810  
445 0 0 6 484 2810 0 0 321 ////////////////////////////////////////////////////////////////////
//     Function: Filename::get_pattern
//       Access: Published
//  Description: Returns the flag indicating whether this is a
//               filename pattern.  See set_pattern().
//////////////////////////////////////////////////////////////////// 1 4 this 3 2866  
446 0 0 6 485 2810 0 0 651 ////////////////////////////////////////////////////////////////////
//     Function: Filename::has_hash
//       Access: Published
//  Description: Returns true if the filename is indicated to be a
//               filename pattern (that is, set_pattern(true) was
//               called), and the filename pattern did include a
//               sequence of hash marks, or false if it was not a
//               filename pattern or did not include hash marks.  If
//               this is true, then get_filename_index() will return a
//               different filename each time.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2866  
447 0 0 7 486 2871 1728 0 0 2 4 this 3 2866  5 index 1 2800  
448 0 0 6 487 2799 0 0 375 ////////////////////////////////////////////////////////////////////
//     Function: Filename::get_hash_to_end
//       Access: Published
//  Description: Returns the part of the filename beginning at the
//               hash sequence (if any), and continuing to the end of
//               the filename.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2866  
449 0 0 4 488 2803 0 0 0 2 4 this 3 2871  1 s 1 2799  
450 0 0 4 489 2803 0 0 0 2 4 this 3 2866  10 components 1 2902  
451 0 0 4 490 2803 0 0 0 1 4 this 3 2871  
452 0 0 6 491 2810 0 0 383 ////////////////////////////////////////////////////////////////////
//     Function: Filename::is_local
//       Access: Published
//  Description: Returns true if the filename is local, e.g. does not
//               begin with a slash, or false if the filename is fully
//               specified from the root.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2866  
453 0 0 6 492 2810 0 0 782 ////////////////////////////////////////////////////////////////////
//     Function: Filename::is_fully_qualified
//       Access: Published
//  Description: Returns true if the filename is fully qualified,
//               e.g. begins with a slash.  This is almost, but not
//               quite, the same thing as !is_local().  It's not
//               exactly the same because a special case is made for
//               filenames that begin with a single dot followed by a
//               slash--these are considered to be fully qualified
//               (they are explicitly relative to the current
//               directory, and do not refer to a filename on a search
//               path somewhere).
//////////////////////////////////////////////////////////////////// 1 4 this 3 2866  
454 0 0 4 493 2803 0 0 0 1 4 this 3 2871  
455 0 0 4 493 2803 0 0 0 2 4 this 3 2871  15 start_directory 1 2866  
456 0 0 6 494 2810 0 0 0 1 4 this 3 2871  
457 0 0 6 495 2810 0 0 0 1 4 this 3 2871  
458 0 0 6 496 2799 0 0 0 1 4 this 3 2866  
459 0 0 6 497 2799 0 0 0 1 4 this 3 2866  
460 0 0 6 498 2799 0 0 0 1 4 this 3 2866  
461 0 0 6 499 2799 0 0 0 1 4 this 3 2866  
462 0 0 6 500 2799 0 0 0 1 4 this 3 2866  
463 0 0 6 501 2810 0 0 0 1 4 this 3 2866  
464 0 0 6 502 2810 0 0 0 1 4 this 3 2866  
465 0 0 6 503 2810 0 0 0 1 4 this 3 2866  
466 0 0 6 504 2810 0 0 0 1 4 this 3 2866  
467 0 0 6 505 2810 0 0 0 1 4 this 3 2866  
468 0 0 6 506 2800 0 0 0 4 4 this 3 2866  5 other 1 2866  19 this_missing_is_old 1 2810  20 other_missing_is_old 1 2810  
469 0 0 6 507 2905 0 0 0 1 4 this 3 2866  
470 0 0 6 508 2905 0 0 0 1 4 this 3 2866  
471 0 0 6 509 2907 0 0 0 1 4 this 3 2866  
472 0 0 6 510 2810 0 0 0 3 4 this 3 2871  10 searchpath 1 2884  17 default_extension 1 2799  
473 0 0 6 511 2810 0 0 0 3 4 this 3 2871  9 directory 1 2871  13 allow_backups 1 2810  
474 0 0 6 512 2800 0 0 0 2 4 this 3 2871  10 searchpath 1 2884  
475 0 0 6 513 2793 0 0 0 1 4 this 3 2866  
476 0 0 6 513 2810 0 0 0 2 4 this 3 2866  8 contents 1 2902  
477 0 0 6 514 2810 0 0 0 2 4 this 3 2866  6 stream 1 2908  
478 0 0 6 514 2810 0 0 0 2 4 this 3 2866  6 stream 1 2909  
479 0 0 6 515 2810 0 0 0 3 4 this 3 2866  6 stream 1 2911  8 truncate 1 2810  
480 0 0 6 515 2810 0 0 0 3 4 this 3 2866  6 stream 1 2912  8 truncate 1 2810  
481 0 0 6 516 2810 0 0 0 2 4 this 3 2866  6 stream 1 2911  
482 0 0 6 516 2810 0 0 0 2 4 this 3 2866  6 stream 1 2912  
483 0 0 6 517 2810 0 0 0 3 4 this 3 2866  6 stream 1 2914  8 truncate 1 2810  
484 0 0 6 517 2810 0 0 0 3 4 this 3 2866  6 stream 1 2915  8 truncate 1 2810  
485 0 0 6 518 2810 0 0 0 2 4 this 3 2866  6 stream 1 2914  
486 0 0 6 518 2810 0 0 0 2 4 this 3 2866  6 stream 1 2915  
487 0 0 6 519 2810 0 0 0 1 4 this 3 2866  
488 0 0 6 520 2810 0 0 0 1 4 this 3 2866  
489 0 0 6 521 2810 0 0 0 1 4 this 3 2866  
490 0 0 6 522 2810 0 0 0 2 4 this 3 2866  5 other 1 2866  
491 0 0 6 523 2810 0 0 0 2 4 this 3 2866  5 other 1 2866  
492 0 0 6 524 2810 0 0 0 1 4 this 3 2866  
493 0 0 6 525 2810 0 0 0 1 4 this 3 2866  
494 0 0 6 526 2810 0 0 0 1 4 this 3 2866  
495 0 0 6 527 2810 0 0 34 // Comparison operators are handy. 2 4 this 3 2866  5 other 1 2799  
496 0 0 6 528 2810 0 0 0 2 4 this 3 2866  5 other 1 2799  
497 0 0 6 529 2810 0 0 0 2 4 this 3 2866  5 other 1 2799  
498 0 0 6 530 2800 0 0 219 ////////////////////////////////////////////////////////////////////
//     Function: Filename::compare_to
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2866  5 other 1 2866  
499 0 0 6 531 2810 0 0 646 ////////////////////////////////////////////////////////////////////
//     Function: Filename::__nonzero__
//       Access: Published
//  Description: Returns true if the Filename is valid (not empty),
//               or false if it is an empty string.
//
//               This implements the Python equivalent to operator
//               bool.  Defining an actual operator bool method for
//               C++ use would work too, but it seems to cause too
//               many ambiguities for the C++ compiler, so we use this
//               Python-only approach instead.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2866  
500 0 0 6 532 2800 0 0 0 1 4 this 3 2866  
501 0 0 4 533 2803 0 0 215 ////////////////////////////////////////////////////////////////////
//     Function: Filename::output
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2866  3 out 1 2807  
502 0 0 4 534 2803 0 0 557 ////////////////////////////////////////////////////////////////////
//     Function: Filename::set_filesystem_encoding
//       Access: Published, Static
//  Description: Specifies the default encoding to be used for all
//               subsequent Filenames.  This is used to represent
//               wide-character (Unicode) filenames internally.  On
//               non-Windows-based systems, the encoded filename is
//               also passed to the underlying operating system.
//////////////////////////////////////////////////////////////////// 1 8 encoding 1 2735  
503 0 0 6 535 2735 0 0 386 ////////////////////////////////////////////////////////////////////
//     Function: Filename::get_filesystem_encoding
//       Access: Published, Static
//  Description: Specifies the default encoding to be used for all
//               subsequent Filenames objects.  See
//               set_filesystem_encoding().
//////////////////////////////////////////////////////////////////// 0 
504 0 0 7 536 2917 2157 0 0 0 
505 0 0 6 453 2799 0 0 60 // And retrieval is by any of the classic string operations. 1 4 this 3 2866  
506 0 0 7 538 2920 1844 0 225 ////////////////////////////////////////////////////////////////////
//     Function: GlobPattern::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2918  
507 0 0 7 538 2920 1844 0 220 ////////////////////////////////////////////////////////////////////
//     Function: GlobPattern::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 7 pattern 1 2799  
508 0 0 6 539 2920 0 0 0 2 4 this 3 2920  4 copy 1 2918  
509 0 0 6 540 2810 0 0 0 2 4 this 3 2918  5 other 1 2918  
510 0 0 6 541 2810 0 0 0 2 4 this 3 2918  5 other 1 2918  
511 0 0 6 542 2810 0 0 0 2 4 this 3 2918  5 other 1 2918  
512 0 0 4 543 2803 0 0 301 ////////////////////////////////////////////////////////////////////
//     Function: GlobPattern::set_pattern
//       Access: Public
//  Description: Changes the pattern string that the GlobPattern
//               object matches.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2920  7 pattern 1 2799  
513 0 0 6 544 2799 0 0 301 ////////////////////////////////////////////////////////////////////
//     Function: GlobPattern::get_pattern
//       Access: Public
//  Description: Returns the pattern string that the GlobPattern
//               object matches.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2918  
514 0 0 4 545 2803 0 0 370 ////////////////////////////////////////////////////////////////////
//     Function: GlobPattern::set_case_sensitive
//       Access: Public
//  Description: Sets whether the match is case sensitive (true) or
//               case insensitive (false).  The default is case
//               sensitive.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2920  14 case_sensitive 1 2810  
515 0 0 6 546 2810 0 0 373 ////////////////////////////////////////////////////////////////////
//     Function: GlobPattern::get_case_sensitive
//       Access: Public
//  Description: Returns whether the match is case sensitive (true) or
//               case insensitive (false).  The default is case
//               sensitive.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2918  
516 0 0 4 547 2803 0 0 305 ////////////////////////////////////////////////////////////////////
//     Function: GlobPattern::set_nomatch_chars
//       Access: Public
//  Description: Specifies a set of characters that are not matched by
//               * or ?.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2920  13 nomatch_chars 1 2799  
517 0 0 6 548 2799 0 0 305 ////////////////////////////////////////////////////////////////////
//     Function: GlobPattern::get_nomatch_chars
//       Access: Public
//  Description: Returns the set of characters that are not matched by
//               * or ?.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2918  
518 0 0 6 549 2810 0 0 308 ////////////////////////////////////////////////////////////////////
//     Function: GlobPattern::matches
//       Access: Public
//  Description: Returns true if the candidate string matches the
//               pattern, false otherwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2918  9 candidate 1 2799  
519 0 0 4 550 2803 0 0 215 ////////////////////////////////////////////////////////////////////
//     Function: GlobPattern::output
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2918  3 out 1 2807  
520 0 0 6 551 2810 0 0 0 1 4 this 3 2918  
521 0 0 6 552 2799 0 0 0 1 4 this 3 2918  
522 0 0 6 553 2793 0 0 0 2 4 this 3 2918  3 cwd 1 2866  
523 0 0 6 553 2800 0 0 0 3 4 this 3 2918  7 results 1 2902  3 cwd 1 2866  
524 0 0 7 556 2921 1851 0 226 ////////////////////////////////////////////////////////////////////
//     Function: IDecryptStream::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
525 0 0 7 556 2921 1851 0 226 ////////////////////////////////////////////////////////////////////
//     Function: IDecryptStream::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 6 source 1 2846  11 owns_source 1 2810  8 password 1 2799  
526 0 0 6 557 2921 0 0 220 ////////////////////////////////////////////////////////////////////
//     Function: IDecryptStream::open
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 4 4 this 3 2921  6 source 1 2846  11 owns_source 1 2810  8 password 1 2799  
527 0 0 6 558 2921 0 0 348 ////////////////////////////////////////////////////////////////////
//     Function: IDecryptStream::close
//       Access: Published
//  Description: Resets the EncryptStream to empty, but does not actually
//               close the source istream unless owns_source was true.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2921  
528 0 0 6 559 2799 0 0 309 ////////////////////////////////////////////////////////////////////
//     Function: IDecryptStream::get_algorithm
//       Access: Published
//  Description: Returns the encryption algorithm that was read from
//               the stream.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2922  
529 0 0 6 560 2800 0 0 321 ////////////////////////////////////////////////////////////////////
//     Function: IDecryptStream::get_key_length
//       Access: Published
//  Description: Returns the encryption key length, in bits, that was
//               read from the stream.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2922  
530 0 0 6 561 2800 0 0 287 ////////////////////////////////////////////////////////////////////
//     Function: IDecryptStream::get_iteration_count
//       Access: Published
//  Description: Returns the value that was was read from the stream.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2922  
531 0 0 7 564 2924 1853 0 223 ////////////////////////////////////////////////////////////////////
//     Function: IFileStream::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
532 0 0 7 564 2924 1853 0 223 ////////////////////////////////////////////////////////////////////
//     Function: IFileStream::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 8 filename 1 2799  4 mode 1 2705  
533 0 0 4 566 2803 0 0 217 ////////////////////////////////////////////////////////////////////
//     Function: IFileStream::open
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 3 4 this 3 2924  8 filename 1 2799  4 mode 1 2705  
534 0 0 4 567 2803 0 0 218 ////////////////////////////////////////////////////////////////////
//     Function: IFileStream::close
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 2924  
535 0 0 7 574 2925 1861 0 227 ////////////////////////////////////////////////////////////////////
//     Function: IStreamWrapper::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 6 stream 1 2846  
536 0 0 6 576 2846 0 0 271 ////////////////////////////////////////////////////////////////////
//     Function: IStreamWrapper::get_istream
//       Access: Published
//  Description: Returns the istream this object is wrapping.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2926  
537 0 0 6 573 2928 0 0 0 1 4 this 3 2925  
538 0 0 4 570 2803 0 0 952 ////////////////////////////////////////////////////////////////////
//     Function: StreamWrapperBase::acquire
//       Access: Published
//  Description: Acquires the internal lock.  
//
//               User code should call this to take temporary
//               possession of the stream and perform direct I/O
//               operations on it, for instance to make several
//               sequential atomic reads.  You may not call any of the
//               StreamWrapper methods while the lock is held, other
//               than release().
//
//               Use with extreme caution!  This is a very low-level,
//               non-recursive lock.  You must call acquire() only
//               once, and you must later call release() exactly once.
//               Failing to do so may result in a hard deadlock with
//               no available debugging features.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2928  
539 0 0 4 571 2803 0 0 381 ////////////////////////////////////////////////////////////////////
//     Function: StreamWrapperBase::release
//       Access: Published
//  Description: Releases the internal lock.  Must be called exactly
//               once following a call to acquire().  See the cautions
//               with acquire().
//////////////////////////////////////////////////////////////////// 1 4 this 3 2928  
540 0 0 7 578 2929 1867 0 219 ////////////////////////////////////////////////////////////////////
//     Function: LineStream::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
541 0 0 6 579 2810 0 0 458 ////////////////////////////////////////////////////////////////////
//     Function: LineStream::is_text_available
//       Access: Public
//  Description: Returns true if there is at least one line of text
//               (or even a partial line) available in the LineStream
//               object.  If this returns true, the line may then be
//               retrieved via get_line().
//////////////////////////////////////////////////////////////////// 1 4 this 3 2930  
542 0 0 6 580 2799 0 0 540 ////////////////////////////////////////////////////////////////////
//     Function: LineStream::get_line
//       Access: Public
//  Description: Extracts and returns the next line (or partial line)
//               of text available in the LineStream object.  Once the
//               line has been extracted, you may call has_newline()
//               to determine whether or not there was an explicit
//               newline character written following this line.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2929  
543 0 0 6 581 2810 0 0 460 ////////////////////////////////////////////////////////////////////
//     Function: LineStream::has_newline
//       Access: Public
//  Description: Returns true if the line of text most recently
//               returned by get_line() was written out with a
//               terminating newline, or false if a newline character
//               has not yet been written to the LineStream.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2930  
544 0 0 6 584 2796 0 0 353 ////////////////////////////////////////////////////////////////////
//     Function: NeverFreeMemory::get_total_alloc
//       Access: Published, Static
//  Description: Returns the total number of bytes consumed by all the
//               pages allocated internally by this object.
//////////////////////////////////////////////////////////////////// 0 
545 0 0 6 585 2796 0 0 356 ////////////////////////////////////////////////////////////////////
//     Function: NeverFreeMemory::get_total_used
//       Access: Published, Static
//  Description: Returns the total number of bytes requested by the
//               application in calls to NeverFreeMemory::alloc().
//////////////////////////////////////////////////////////////////// 0 
546 0 0 6 586 2796 0 0 454 ////////////////////////////////////////////////////////////////////
//     Function: NeverFreeMemory::get_total_unused
//       Access: Published, Static
//  Description: Returns the difference between get_total_alloc() and
//               get_total_used().  This represents bytes in allocated
//               pages that have not (yet) been used by the
//               application.
//////////////////////////////////////////////////////////////////// 0 
547 0 0 7 589 2932 1873 0 0 0 
548 0 0 4 591 2803 0 0 0 3 4 this 3 2932  11 ostream_ptr 1 2807  12 delete_later 1 2810  
549 0 0 6 592 2807 0 0 0 1 4 this 3 2933  
550 0 0 4 594 2803 0 0 0 1 4 this 3 2932  
551 0 0 6 595 2810 0 0 0 1 4 this 3 2933  
552 0 0 4 596 2803 0 0 0 1 4 this 3 2933  
553 0 0 6 597 2810 0 0 1042 ////////////////////////////////////////////////////////////////////
//     Function: Notify::has_assert_failed
//       Access: Public
//  Description: Returns true if an assertion test has failed (and not
//               been ignored) since the last call to
//               clear_assert_failed().
//
//               When an assertion test fails, the assert handler
//               may decide either to abort, return, or ignore the
//               assertion.  Naturally, if it decides to abort, this
//               flag is irrelevant.  If it chooses to ignore the
//               assertion, the flag is not set.  However, if the
//               assert handler chooses to return out of the
//               function (the normal case), it will also set this
//               flag to indicate that an assertion failure has
//               occurred.
//
//               This will also be the behavior in the absence of a
//               user-defined assert handler.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2933  
554 0 0 6 598 2799 0 0 332 ////////////////////////////////////////////////////////////////////
//     Function: Notify::get_assert_error_message
//       Access: Public
//  Description: Returns the error message that corresponds to the
//               assertion that most recently failed.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2933  
555 0 0 4 599 2803 0 0 342 ////////////////////////////////////////////////////////////////////
//     Function: Notify::clear_assert_failed
//       Access: Public
//  Description: Resets the assert_failed flag that is set whenever an
//               assertion test fails.  See has_assert_failed().
//////////////////////////////////////////////////////////////////// 1 4 this 3 2932  
556 0 0 6 600 2935 0 0 0 1 4 this 3 2932  
557 0 0 6 601 2935 0 0 0 2 4 this 3 2932  8 fullname 1 2799  
558 0 0 6 601 2935 0 0 0 3 4 this 3 2932  8 basename 1 2799  15 parent_category 1 2935  
559 0 0 6 601 2935 0 0 0 3 4 this 3 2932  8 basename 1 2799  15 parent_fullname 1 2799  
560 0 0 6 602 2807 0 0 0 0 
561 0 0 6 603 2807 0 0 0 0 
562 0 0 4 604 2803 0 0 0 1 3 str 1 2799  
563 0 0 6 605 2932 0 0 0 0 
564 0 0 6 611 2799 0 0 224 ////////////////////////////////////////////////////////////////////
//     Function: NotifyCategory::get_fullname
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2936  
565 0 0 6 612 2799 0 0 224 ////////////////////////////////////////////////////////////////////
//     Function: NotifyCategory::get_basename
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2936  
566 0 0 6 613 2718 0 0 224 ////////////////////////////////////////////////////////////////////
//     Function: NotifyCategory::get_severity
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2936  
567 0 0 4 614 2803 0 0 395 ////////////////////////////////////////////////////////////////////
//     Function: NotifyCategory::set_severity
//       Access: Public
//  Description: Sets the severity level of messages that will be
//               reported from this Category.  This allows any message
//               of this severity level or higher.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2935  8 severity 1 2718  
568 0 0 6 615 2810 0 0 331 ////////////////////////////////////////////////////////////////////
//     Function: NotifyCategory::is_on
//       Access: Public
//  Description: Returns true if messages of the indicated severity
//               level ought to be reported for this Category.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2936  8 severity 1 2718  
569 0 0 6 616 2810 0 0 260 ////////////////////////////////////////////////////////////////////
//     Function: NotifyCategory::is_spam
//       Access: Public
//  Description: A shorthand way to write is_on(NS_spam).
//////////////////////////////////////////////////////////////////// 1 4 this 3 2936  
570 0 0 6 617 2810 0 0 262 ////////////////////////////////////////////////////////////////////
//     Function: NotifyCategory::is_debug
//       Access: Public
//  Description: A shorthand way to write is_on(NS_debug).
//////////////////////////////////////////////////////////////////// 1 4 this 3 2936  
571 0 0 6 618 2810 0 0 260 ////////////////////////////////////////////////////////////////////
//     Function: NotifyCategory::is_info
//       Access: Public
//  Description: A shorthand way to write is_on(NS_info).
//////////////////////////////////////////////////////////////////// 1 4 this 3 2936  
572 0 0 6 619 2810 0 0 266 ////////////////////////////////////////////////////////////////////
//     Function: NotifyCategory::is_warning
//       Access: Public
//  Description: A shorthand way to write is_on(NS_warning).
//////////////////////////////////////////////////////////////////// 1 4 this 3 2936  
573 0 0 6 620 2810 0 0 262 ////////////////////////////////////////////////////////////////////
//     Function: NotifyCategory::is_error
//       Access: Public
//  Description: A shorthand way to write is_on(NS_error).
//////////////////////////////////////////////////////////////////// 1 4 this 3 2936  
574 0 0 6 621 2810 0 0 262 ////////////////////////////////////////////////////////////////////
//     Function: NotifyCategory::is_fatal
//       Access: Public
//  Description: A shorthand way to write is_on(NS_fatal).
//////////////////////////////////////////////////////////////////// 1 4 this 3 2936  
575 0 0 6 622 2807 0 0 0 3 4 this 3 2936  8 severity 1 2718  6 prefix 1 2810  
576 0 0 6 623 2807 0 0 255 ////////////////////////////////////////////////////////////////////
//     Function: NotifyCategory::spam
//       Access: Public
//  Description: A shorthand way to write out(NS_spam).
//////////////////////////////////////////////////////////////////// 2 4 this 3 2936  6 prefix 1 2810  
577 0 0 6 624 2807 0 0 257 ////////////////////////////////////////////////////////////////////
//     Function: NotifyCategory::debug
//       Access: Public
//  Description: A shorthand way to write out(NS_debug).
//////////////////////////////////////////////////////////////////// 2 4 this 3 2936  6 prefix 1 2810  
578 0 0 6 625 2807 0 0 255 ////////////////////////////////////////////////////////////////////
//     Function: NotifyCategory::info
//       Access: Public
//  Description: A shorthand way to write out(NS_info).
//////////////////////////////////////////////////////////////////// 2 4 this 3 2936  6 prefix 1 2810  
579 0 0 6 626 2807 0 0 261 ////////////////////////////////////////////////////////////////////
//     Function: NotifyCategory::warning
//       Access: Public
//  Description: A shorthand way to write out(NS_warning).
//////////////////////////////////////////////////////////////////// 2 4 this 3 2936  6 prefix 1 2810  
580 0 0 6 627 2807 0 0 257 ////////////////////////////////////////////////////////////////////
//     Function: NotifyCategory::error
//       Access: Public
//  Description: A shorthand way to write out(NS_error).
//////////////////////////////////////////////////////////////////// 2 4 this 3 2936  6 prefix 1 2810  
581 0 0 6 628 2807 0 0 257 ////////////////////////////////////////////////////////////////////
//     Function: NotifyCategory::fatal
//       Access: Public
//  Description: A shorthand way to write out(NS_fatal).
//////////////////////////////////////////////////////////////////// 2 4 this 3 2936  6 prefix 1 2810  
582 0 0 6 629 2800 0 0 0 1 4 this 3 2936  
583 0 0 6 630 2935 0 0 0 2 4 this 3 2936  1 i 1 2800  
584 0 0 4 631 2803 0 0 0 1 5 delta 1 2898  
585 0 0 6 607 2938 0 0 0 1 4 this 3 2935  
586 0 0 6 608 2935 0 0 0 1 4 this 3 2938  
587 0 0 6 609 2939 0 0 0 1 4 this 3 2935  
588 0 0 6 610 2935 0 0 0 1 4 this 3 2939  
589 0 0 7 635 2940 1921 0 226 ////////////////////////////////////////////////////////////////////
//     Function: OEncryptStream::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
590 0 0 7 635 2940 1921 0 226 ////////////////////////////////////////////////////////////////////
//     Function: OEncryptStream::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 dest 1 2807  9 owns_dest 1 2810  8 password 1 2799  
591 0 0 6 636 2940 0 0 220 ////////////////////////////////////////////////////////////////////
//     Function: OEncryptStream::open
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 4 4 this 3 2940  4 dest 1 2807  9 owns_dest 1 2810  8 password 1 2799  
592 0 0 6 637 2940 0 0 344 ////////////////////////////////////////////////////////////////////
//     Function: OEncryptStream::close
//       Access: Published
//  Description: Resets the EncryptStream to empty, but does not actually
//               close the dest ostream unless owns_dest was true.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2940  
593 0 0 4 638 2803 0 0 722 ////////////////////////////////////////////////////////////////////
//     Function: OEncryptStream::set_algorithm
//       Access: Published
//  Description: Specifies the encryption algorithm that should be
//               used for future calls to open().  The default
//               is whatever is specified by the encryption-algorithm
//               config variable.  The complete set of available
//               algorithms is defined by the current version of
//               OpenSSL.
//
//               If an invalid algorithm is specified, there is no
//               immediate error return code, but open() will
//               fail.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2940  9 algorithm 1 2799  
594 0 0 4 639 2803 0 0 658 ////////////////////////////////////////////////////////////////////
//     Function: OEncryptStream::set_key_length
//       Access: Published
//  Description: Specifies the length of the key, in bits, that should
//               be used to encrypt the stream in future calls to
//               open().  The default is whatever is specified
//               by the encryption-key-length config variable.  
//
//               If an invalid key_length for the chosen algorithm is
//               specified, there is no immediate error return code,
//               but open() will fail.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2940  10 key_length 1 2800  
595 0 0 4 640 2803 0 0 851 ////////////////////////////////////////////////////////////////////
//     Function: OEncryptStream::set_iteration_count
//       Access: Published
//  Description: Specifies the number of times to repeatedly hash the
//               key before writing it to the stream in future calls
//               to open().  Its purpose is to make it
//               computationally more expensive for an attacker to
//               search the key space exhaustively.  This should be a
//               multiple of 1,000 and should not exceed about 65
//               million; the value 0 indicates just one application
//               of the hashing algorithm.
//
//               The default is whatever is specified by the
//               encryption-iteration-count config variable.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2940  15 iteration_count 1 2800  
596 0 0 7 643 2941 1923 0 223 ////////////////////////////////////////////////////////////////////
//     Function: OFileStream::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
597 0 0 7 643 2941 1923 0 223 ////////////////////////////////////////////////////////////////////
//     Function: OFileStream::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 8 filename 1 2799  4 mode 1 2705  
598 0 0 4 645 2803 0 0 217 ////////////////////////////////////////////////////////////////////
//     Function: OFileStream::open
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 3 4 this 3 2941  8 filename 1 2799  4 mode 1 2705  
599 0 0 4 646 2803 0 0 218 ////////////////////////////////////////////////////////////////////
//     Function: OFileStream::close
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 2941  
600 0 0 7 649 2942 1928 0 227 ////////////////////////////////////////////////////////////////////
//     Function: OStreamWrapper::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 6 stream 1 2807  
601 0 0 6 651 2807 0 0 271 ////////////////////////////////////////////////////////////////////
//     Function: OStreamWrapper::get_ostream
//       Access: Published
//  Description: Returns the ostream this object is wrapping.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2943  
602 0 0 6 648 2928 0 0 0 1 4 this 3 2942  
603 0 0 7 654 2945 1947 0 0 1 4 copy 1 2791  
604 0 0 7 654 2945 1947 0 0 1 6 source 1 2793  
605 0 0 7 654 2945 1947 0 0 1 11 type_handle 1 2917  
606 0 0 7 655 2945 1947 0 0 2 1 n 1 2796  11 type_handle 1 2917  
607 0 0 6 656 2796 0 0 0 1 4 this 3 2791  
608 0 0 4 657 2803 0 0 0 2 4 this 3 2945  1 x 1 2798  
609 0 0 4 658 2803 0 0 0 1 4 this 3 2945  
610 0 0 6 659 2798 0 0 0 2 4 this 3 2791  1 n 1 2796  
611 0 0 4 660 2803 0 0 0 3 4 this 3 2945  1 n 1 2796  5 value 1 2798  
612 0 0 6 661 2798 0 0 0 2 4 this 3 2791  1 n 1 2796  
613 0 0 4 662 2803 0 0 0 3 4 this 3 2945  1 n 1 2796  5 value 1 2798  
614 0 0 6 663 2799 0 0 0 1 4 this 3 2791  
615 0 0 4 664 2803 0 0 0 2 4 this 3 2945  4 data 1 2799  
616 0 0 6 665 2799 0 0 0 3 4 this 3 2791  1 n 1 2796  5 count 1 2796  
617 0 0 4 666 2803 0 0 0 4 4 this 3 2945  1 n 1 2796  5 count 1 2796  4 data 1 2799  
618 0 0 6 667 2800 0 0 0 1 4 this 3 2791  
619 0 0 6 668 2800 0 0 0 1 4 this 3 2791  
620 0 0 6 669 2800 0 0 0 3 4 this 3 2945  4 view 1 2801  5 flags 1 2800  
621 0 0 4 670 2803 0 0 0 2 4 this 3 2791  4 view 1 2801  
622 0 0 7 674 2946 1965 0 0 1 4 copy 1 2814  
623 0 0 7 674 2946 1965 0 0 1 6 source 1 2793  
624 0 0 7 674 2946 1965 0 0 1 11 type_handle 1 2917  
625 0 0 7 675 2946 1965 0 0 2 1 n 1 2796  11 type_handle 1 2917  
626 0 0 6 676 2796 0 0 0 1 4 this 3 2814  
627 0 0 4 677 2803 0 0 0 2 4 this 3 2946  1 x 1 2816  
628 0 0 4 678 2803 0 0 0 1 4 this 3 2946  
629 0 0 6 679 2816 0 0 0 2 4 this 3 2814  1 n 1 2796  
630 0 0 4 680 2803 0 0 0 3 4 this 3 2946  1 n 1 2796  5 value 1 2816  
631 0 0 6 681 2816 0 0 0 2 4 this 3 2814  1 n 1 2796  
632 0 0 4 682 2803 0 0 0 3 4 this 3 2946  1 n 1 2796  5 value 1 2816  
633 0 0 6 683 2799 0 0 0 1 4 this 3 2814  
634 0 0 4 684 2803 0 0 0 2 4 this 3 2946  4 data 1 2799  
635 0 0 6 685 2799 0 0 0 3 4 this 3 2814  1 n 1 2796  5 count 1 2796  
636 0 0 4 686 2803 0 0 0 4 4 this 3 2946  1 n 1 2796  5 count 1 2796  4 data 1 2799  
637 0 0 6 687 2800 0 0 0 1 4 this 3 2814  
638 0 0 6 688 2800 0 0 0 1 4 this 3 2814  
639 0 0 6 689 2800 0 0 0 3 4 this 3 2946  4 view 1 2801  5 flags 1 2800  
640 0 0 4 690 2803 0 0 0 2 4 this 3 2814  4 view 1 2801  
641 0 0 7 694 2947 1983 0 0 1 4 copy 1 2823  
642 0 0 7 694 2947 1983 0 0 1 6 source 1 2793  
643 0 0 7 694 2947 1983 0 0 1 11 type_handle 1 2917  
644 0 0 7 695 2947 1983 0 0 2 1 n 1 2796  11 type_handle 1 2917  
645 0 0 6 696 2796 0 0 0 1 4 this 3 2823  
646 0 0 4 697 2803 0 0 0 2 4 this 3 2947  1 x 1 2800  
647 0 0 4 698 2803 0 0 0 1 4 this 3 2947  
648 0 0 6 699 2800 0 0 0 2 4 this 3 2823  1 n 1 2796  
649 0 0 4 700 2803 0 0 0 3 4 this 3 2947  1 n 1 2796  5 value 1 2800  
650 0 0 6 701 2800 0 0 0 2 4 this 3 2823  1 n 1 2796  
651 0 0 4 702 2803 0 0 0 3 4 this 3 2947  1 n 1 2796  5 value 1 2800  
652 0 0 6 703 2799 0 0 0 1 4 this 3 2823  
653 0 0 4 704 2803 0 0 0 2 4 this 3 2947  4 data 1 2799  
654 0 0 6 705 2799 0 0 0 3 4 this 3 2823  1 n 1 2796  5 count 1 2796  
655 0 0 4 706 2803 0 0 0 4 4 this 3 2947  1 n 1 2796  5 count 1 2796  4 data 1 2799  
656 0 0 6 707 2800 0 0 0 1 4 this 3 2823  
657 0 0 6 708 2800 0 0 0 1 4 this 3 2823  
658 0 0 6 709 2800 0 0 0 3 4 this 3 2947  4 view 1 2801  5 flags 1 2800  
659 0 0 4 710 2803 0 0 0 2 4 this 3 2823  4 view 1 2801  
660 0 0 7 714 2948 2001 0 0 1 4 copy 1 2831  
661 0 0 7 714 2948 2001 0 0 1 6 source 1 2793  
662 0 0 7 714 2948 2001 0 0 1 11 type_handle 1 2917  
663 0 0 7 715 2948 2001 0 0 2 1 n 1 2796  11 type_handle 1 2917  
664 0 0 6 716 2796 0 0 0 1 4 this 3 2831  
665 0 0 4 717 2803 0 0 0 2 4 this 3 2948  1 x 1 2833  
666 0 0 4 718 2803 0 0 0 1 4 this 3 2948  
667 0 0 6 719 2833 0 0 0 2 4 this 3 2831  1 n 1 2796  
668 0 0 4 720 2803 0 0 0 3 4 this 3 2948  1 n 1 2796  5 value 1 2833  
669 0 0 6 721 2833 0 0 0 2 4 this 3 2831  1 n 1 2796  
670 0 0 4 722 2803 0 0 0 3 4 this 3 2948  1 n 1 2796  5 value 1 2833  
671 0 0 6 723 2799 0 0 0 1 4 this 3 2831  
672 0 0 4 724 2803 0 0 0 2 4 this 3 2948  4 data 1 2799  
673 0 0 6 725 2799 0 0 0 3 4 this 3 2831  1 n 1 2796  5 count 1 2796  
674 0 0 4 726 2803 0 0 0 4 4 this 3 2948  1 n 1 2796  5 count 1 2796  4 data 1 2799  
675 0 0 6 727 2800 0 0 0 1 4 this 3 2831  
676 0 0 6 728 2800 0 0 0 1 4 this 3 2831  
677 0 0 6 729 2800 0 0 0 3 4 this 3 2948  4 view 1 2801  5 flags 1 2800  
678 0 0 4 730 2803 0 0 0 2 4 this 3 2831  4 view 1 2801  
679 0 0 6 733 2799 0 0 0 0 
680 0 0 6 734 2799 0 0 0 0 
681 0 0 6 735 2799 0 0 0 0 
682 0 0 6 736 2799 0 0 0 0 
683 0 0 6 737 2800 0 0 0 0 
684 0 0 6 738 2800 0 0 0 0 
685 0 0 6 739 2800 0 0 0 0 
686 0 0 6 740 2810 0 0 0 0 
687 0 0 6 741 2799 0 0 0 0 
688 0 0 6 742 2799 0 0 0 0 
689 0 0 6 743 2799 0 0 0 0 
690 0 0 6 744 2799 0 0 0 0 
691 0 0 6 745 2799 0 0 0 0 
692 0 0 6 746 2810 0 0 0 2 4 this 3 2949  6 system 1 2799  
693 0 0 6 747 2800 0 0 0 1 4 this 3 2949  
694 0 0 6 748 2799 0 0 0 2 4 this 3 2949  1 n 1 2800  
695 0 0 6 749 2799 0 0 0 3 4 this 3 2949  6 system 1 2799  3 tag 1 2799  
696 0 0 4 750 2803 0 0 0 2 4 this 3 2951  6 system 1 2799  
697 0 0 4 751 2803 0 0 0 4 4 this 3 2951  6 system 1 2799  3 tag 1 2799  5 value 1 2799  
698 0 0 6 752 2810 0 0 0 2 4 this 3 2951  3 pad 1 2796  
699 0 0 4 753 2803 0 0 0 2 4 this 3 2949  3 out 1 2807  
700 0 0 4 754 2803 0 0 0 2 4 this 3 2949  3 out 1 2807  
701 0 0 6 755 2951 0 0 0 0 
702 0 0 7 756 2917 2157 0 0 0 
703 0 0 7 758 2954 2028 0 306 ////////////////////////////////////////////////////////////////////
//     Function: StreamReader::Copy Constructor
//       Access: Published
//  Description: The copy constructor does not copy ownership of the
//               stream.
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2952  
704 0 0 7 758 2954 2028 0 333 ////////////////////////////////////////////////////////////////////
//     Function: StreamReader::Constructor
//       Access: Published
//  Description: If owns_stream is true, the stream pointer will be
//               deleted when the StreamReader destructs.
//////////////////////////////////////////////////////////////////// 2 2 in 1 2846  11 owns_stream 1 2810  
705 0 0 6 759 2954 0 0 0 2 4 this 3 2954  4 copy 1 2952  
706 0 0 6 761 2846 0 0 251 ////////////////////////////////////////////////////////////////////
//     Function: StreamReader::get_istream
//       Access: Published
//  Description: Returns the stream in use.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2952  
707 0 0 6 762 2810 0 0 247 ////////////////////////////////////////////////////////////////////
//     Function: StreamReader::get_bool
//       Access: Published
//  Description: Extracts a boolean value.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2954  
708 0 0 6 763 2955 0 0 254 ////////////////////////////////////////////////////////////////////
//     Function: StreamReader::get_int8
//       Access: Published
//  Description: Extracts a signed 8-bit integer.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2954  
709 0 0 6 764 2957 0 0 258 ////////////////////////////////////////////////////////////////////
//     Function: StreamReader::get_uint8
//       Access: Published
//  Description: Extracts an unsigned 8-bit integer.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2954  
710 0 0 6 765 2958 0 0 256 ////////////////////////////////////////////////////////////////////
//     Function: StreamReader::get_int16
//       Access: Published
//  Description: Extracts a signed 16-bit integer.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2954  
711 0 0 6 766 2960 0 0 256 ////////////////////////////////////////////////////////////////////
//     Function: StreamReader::get_int32
//       Access: Published
//  Description: Extracts a signed 32-bit integer.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2954  
712 0 0 6 767 2842 0 0 256 ////////////////////////////////////////////////////////////////////
//     Function: StreamReader::get_int64
//       Access: Published
//  Description: Extracts a signed 64-bit integer.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2954  
713 0 0 6 768 2961 0 0 260 ////////////////////////////////////////////////////////////////////
//     Function: StreamReader::get_uint16
//       Access: Published
//  Description: Extracts an unsigned 16-bit integer.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2954  
714 0 0 6 769 2963 0 0 260 ////////////////////////////////////////////////////////////////////
//     Function: StreamReader::get_uint32
//       Access: Published
//  Description: Extracts an unsigned 32-bit integer.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2954  
715 0 0 6 770 2964 0 0 260 ////////////////////////////////////////////////////////////////////
//     Function: StreamReader::get_uint64
//       Access: Published
//  Description: Extracts an unsigned 64-bit integer.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2954  
716 0 0 6 771 2816 0 0 445 ////////////////////////////////////////////////////////////////////
//     Function: StreamReader::get_float32
//       Access: Published
//  Description: Extracts a 32-bit single-precision floating-point
//               number.  Since this kind of float is not necessarily
//               portable across different architectures, special care
//               is required.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2954  
717 0 0 6 772 2966 0 0 265 ////////////////////////////////////////////////////////////////////
//     Function: StreamReader::get_float64
//       Access: Published
//  Description: Extracts a 64-bit floating-point number.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2954  
718 0 0 6 773 2958 0 0 270 ////////////////////////////////////////////////////////////////////
//     Function: StreamReader::get_be_int16
//       Access: Published
//  Description: Extracts a signed big-endian 16-bit integer.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2954  
719 0 0 6 774 2960 0 0 270 ////////////////////////////////////////////////////////////////////
//     Function: StreamReader::get_be_int32
//       Access: Published
//  Description: Extracts a signed big-endian 32-bit integer.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2954  
720 0 0 6 775 2842 0 0 270 ////////////////////////////////////////////////////////////////////
//     Function: StreamReader::get_be_int64
//       Access: Published
//  Description: Extracts a signed big-endian 64-bit integer.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2954  
721 0 0 6 776 2961 0 0 274 ////////////////////////////////////////////////////////////////////
//     Function: StreamReader::get_be_uint16
//       Access: Published
//  Description: Extracts an unsigned big-endian 16-bit integer.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2954  
722 0 0 6 777 2963 0 0 274 ////////////////////////////////////////////////////////////////////
//     Function: StreamReader::get_be_uint32
//       Access: Published
//  Description: Extracts an unsigned big-endian 32-bit integer.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2954  
723 0 0 6 778 2964 0 0 274 ////////////////////////////////////////////////////////////////////
//     Function: StreamReader::get_be_uint64
//       Access: Published
//  Description: Extracts an unsigned big-endian 64-bit integer.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2954  
724 0 0 6 779 2816 0 0 459 ////////////////////////////////////////////////////////////////////
//     Function: StreamReader::get_be_float32
//       Access: Published
//  Description: Extracts a 32-bit single-precision big-endian
//               floating-point number.  Since this kind of float is
//               not necessarily portable across different
//               architectures, special care is required.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2954  
725 0 0 6 780 2966 0 0 279 ////////////////////////////////////////////////////////////////////
//     Function: StreamReader::get_be_float64
//       Access: Published
//  Description: Extracts a 64-bit big-endian floating-point number.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2954  
726 0 0 6 781 2799 0 0 0 1 4 this 3 2954  
727 0 0 6 782 2799 0 0 0 1 4 this 3 2954  
728 0 0 6 783 2799 0 0 0 1 4 this 3 2954  
729 0 0 6 784 2799 0 0 0 2 4 this 3 2954  4 size 1 2796  
730 0 0 4 785 2803 0 0 0 2 4 this 3 2954  4 size 1 2796  
731 0 0 6 786 2799 0 0 0 2 4 this 3 2954  4 size 1 2796  
732 0 0 6 787 2799 0 0 0 1 4 this 3 2954  
733 0 0 6 788 2793 0 0 0 1 4 this 3 2954  
734 0 0 7 794 2967 2062 0 226 ////////////////////////////////////////////////////////////////////
//     Function: StreamWrapper::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 6 stream 1 2896  
735 0 0 6 796 2896 0 0 272 ////////////////////////////////////////////////////////////////////
//     Function: StreamWrapper::get_iostream
//       Access: Published
//  Description: Returns the iostream this object is wrapping.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2968  
736 0 0 6 790 2925 0 0 0 1 4 this 3 2967  
737 0 0 6 791 2967 0 0 0 1 4 this 3 2925  
738 0 0 6 792 2942 0 0 0 1 4 this 3 2967  
739 0 0 6 793 2967 0 0 0 1 4 this 3 2942  
740 0 0 7 798 2972 2066 0 306 ////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::Copy Constructor
//       Access: Published
//  Description: The copy constructor does not copy ownership of the
//               stream.
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2970  
741 0 0 7 798 2972 2066 0 225 ////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 3 out 1 2807  11 owns_stream 1 2810  
742 0 0 6 799 2972 0 0 0 2 4 this 3 2972  4 copy 1 2970  
743 0 0 6 801 2807 0 0 251 ////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::get_ostream
//       Access: Published
//  Description: Returns the stream in use.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2970  
744 0 0 4 802 2803 0 0 257 ////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::add_bool
//       Access: Published
//  Description: Adds a boolean value to the stream.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2972  5 value 1 2810  
745 0 0 4 803 2803 0 0 264 ////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::add_int8
//       Access: Published
//  Description: Adds a signed 8-bit integer to the stream.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2972  5 value 1 2955  
746 0 0 4 804 2803 0 0 268 ////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::add_uint8
//       Access: Published
//  Description: Adds an unsigned 8-bit integer to the stream.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2972  5 value 1 2957  
747 0 0 4 805 2803 0 0 266 ////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::add_int16
//       Access: Published
//  Description: Adds a signed 16-bit integer to the stream.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2972  5 value 1 2958  
748 0 0 4 806 2803 0 0 266 ////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::add_int32
//       Access: Published
//  Description: Adds a signed 32-bit integer to the stream.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2972  5 value 1 2960  
749 0 0 4 807 2803 0 0 266 ////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::add_int64
//       Access: Published
//  Description: Adds a signed 64-bit integer to the stream.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2972  5 value 1 2842  
750 0 0 4 808 2803 0 0 270 ////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::add_uint16
//       Access: Published
//  Description: Adds an unsigned 16-bit integer to the stream.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2972  5 value 1 2961  
751 0 0 4 809 2803 0 0 270 ////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::add_uint32
//       Access: Published
//  Description: Adds an unsigned 32-bit integer to the stream.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2972  5 value 1 2963  
752 0 0 4 810 2803 0 0 270 ////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::add_uint64
//       Access: Published
//  Description: Adds an unsigned 64-bit integer to the stream.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2972  5 value 1 2964  
753 0 0 4 811 2803 0 0 455 ////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::add_float32
//       Access: Published
//  Description: Adds a 32-bit single-precision floating-point number
//               to the stream.  Since this kind of float is not
//               necessarily portable across different architectures,
//               special care is required.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2972  5 value 1 2816  
754 0 0 4 812 2803 0 0 275 ////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::add_float64
//       Access: Published
//  Description: Adds a 64-bit floating-point number to the stream.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2972  5 value 1 2966  
755 0 0 4 813 2803 0 0 303 ////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::add_be_int16
//       Access: Published
//  Description: Adds a signed 16-bit big-endian integer to the
//               streamWriter.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2972  5 value 1 2958  
756 0 0 4 814 2803 0 0 303 ////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::add_be_int32
//       Access: Published
//  Description: Adds a signed 32-bit big-endian integer to the
//               streamWriter.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2972  5 value 1 2960  
757 0 0 4 815 2803 0 0 303 ////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::add_be_int64
//       Access: Published
//  Description: Adds a signed 64-bit big-endian integer to the
//               streamWriter.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2972  5 value 1 2842  
758 0 0 4 816 2803 0 0 307 ////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::add_be_uint16
//       Access: Published
//  Description: Adds an unsigned 16-bit big-endian integer to the
//               streamWriter.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2972  5 value 1 2961  
759 0 0 4 817 2803 0 0 307 ////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::add_be_uint32
//       Access: Published
//  Description: Adds an unsigned 32-bit big-endian integer to the
//               streamWriter.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2972  5 value 1 2963  
760 0 0 4 818 2803 0 0 307 ////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::add_be_uint64
//       Access: Published
//  Description: Adds an unsigned 64-bit big-endian integer to the
//               streamWriter.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2972  5 value 1 2964  
761 0 0 4 819 2803 0 0 469 ////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::add_be_float32
//       Access: Published
//  Description: Adds a 32-bit single-precision big-endian
//               floating-point number to the stream.  Since this
//               kind of float is not necessarily portable across
//               different architectures, special care is required.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2972  5 value 1 2816  
762 0 0 4 820 2803 0 0 312 ////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::add_be_float64
//       Access: Published
//  Description: Adds a 64-bit big-endian floating-point number to the
//               streamWriter.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2972  5 value 1 2966  
763 0 0 4 821 2803 0 0 334 ////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::add_string
//       Access: Published
//  Description: Adds a variable-length string to the stream.  This
//               actually adds a count followed by n bytes.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2972  3 str 1 2799  
764 0 0 4 822 2803 0 0 316 ////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::add_string32
//       Access: Published
//  Description: Adds a variable-length string to the stream, using a
//               32-bit length field.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2972  3 str 1 2799  
765 0 0 4 823 2803 0 0 316 ////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::add_z_string
//       Access: Published
//  Description: Adds a variable-length string to the stream, as a
//               NULL-terminated string.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2972  3 str 1 2799  
766 0 0 4 824 2803 0 0 517 ////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::add_fixed_string
//       Access: Published
//  Description: Adds a fixed-length string to the stream.  If the
//               string given is less than the requested size, this
//               will pad the string out with zeroes; if it is greater
//               than the requested size, this will silently truncate
//               the string.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2972  3 str 1 2799  4 size 1 2796  
767 0 0 4 825 2803 0 0 0 2 4 this 3 2972  4 size 1 2796  
768 0 0 4 826 2803 0 0 300 ////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::append_data
//       Access: Published
//  Description: Appends some more raw data to the end of the
//               streamWriter.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2972  4 data 1 2799  
769 0 0 4 827 2803 0 0 258 ////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::flush
//       Access: Published
//  Description: Calls flush() on the underlying stream.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2972  
770 0 0 4 828 2803 0 0 371 ////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::write
//       Access: Published
//  Description: A synonym of append_data().  This is useful when
//               assigning the StreamWriter to sys.stderr and/or
//               sys.stdout in Python.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2972  3 str 1 2799  
771 0 0 7 831 2973 2132 0 223 ////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
772 0 0 7 831 2973 2132 0 228 ////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::Copy Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2974  
773 0 0 4 832 2803 0 0 692 ////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::set_encoding
//       Access: Published
//  Description: Specifies how the string set via set_text() is to be
//               interpreted.  The default, E_iso8859, means a
//               standard string with one-byte characters
//               (i.e. ASCII).  Other encodings are possible to take
//               advantage of character sets with more than 256
//               characters.
//
//               This affects only future calls to set_text(); it does
//               not change text that was set previously.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2973  8 encoding 1 2735  
774 0 0 6 833 2735 0 0 344 ////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::get_encoding
//       Access: Published
//  Description: Returns the encoding by which the string set via
//               set_text() is to be interpreted.  See set_encoding().
//////////////////////////////////////////////////////////////////// 1 4 this 3 2974  
775 0 0 4 834 2803 0 0 387 ////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::set_default_encoding
//       Access: Published, Static
//  Description: Specifies the default encoding to be used for all
//               subsequently created TextEncoder objects.  See
//               set_encoding().
//////////////////////////////////////////////////////////////////// 1 8 encoding 1 2735  
776 0 0 6 835 2735 0 0 387 ////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::get_default_encoding
//       Access: Published, Static
//  Description: Specifies the default encoding to be used for all
//               subsequently created TextEncoder objects.  See
//               set_encoding().
//////////////////////////////////////////////////////////////////// 0 
777 0 0 4 836 2803 0 0 561 ////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::set_text
//       Access: Published
//  Description: Changes the text that is stored in the encoder.  The
//               text should be encoded according to the method
//               indicated by set_encoding().  Subsequent calls to
//               get_text() will return this same string, while
//               get_wtext() will return the decoded version of the
//               string.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2973  4 text 1 2799  
778 0 0 4 836 2803 0 0 572 ////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::set_text
//       Access: Published
//  Description: The two-parameter version of set_text() accepts an
//               explicit encoding; the text is immediately decoded
//               and stored as a wide-character string.  Subsequent
//               calls to get_text() will return the same text
//               re-encoded using whichever encoding is specified by
//               set_encoding().
//////////////////////////////////////////////////////////////////// 3 4 this 3 2973  4 text 1 2799  8 encoding 1 2735  
779 0 0 4 837 2803 0 0 261 ////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::clear_text
//       Access: Published
//  Description: Removes the text from the TextEncoder.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2973  
780 0 0 6 838 2810 0 0 220 ////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::has_text
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2974  
781 0 0 4 839 2803 0 0 0 1 4 this 3 2973  
782 0 0 4 840 2803 0 0 0 1 4 this 3 2973  
783 0 0 6 841 2799 0 0 307 ////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::get_text
//       Access: Published
//  Description: Returns the current text, as encoded via the current
//               encoding system.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2974  
784 0 0 6 841 2799 0 0 309 ////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::get_text
//       Access: Published
//  Description: Returns the current text, as encoded via the indicated
//               encoding system.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2974  8 encoding 1 2735  
785 0 0 4 842 2803 0 0 300 ////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::append_text
//       Access: Published
//  Description: Appends the indicates string to the end of the stored
//               text.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2973  4 text 1 2799  
786 0 0 4 843 2803 0 0 380 ////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::append_unicode_char
//       Access: Published
//  Description: Appends a single character to the end of the stored
//               text.  This may be a wide character, up to 16 bits in
//               Unicode.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2973  9 character 1 2800  
787 0 0 6 844 2800 0 0 411 ////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::get_num_chars
//       Access: Published
//  Description: Returns the number of characters in the stored text.
//               This is a count of wide characters, after the string
//               has been decoded according to set_encoding().
//////////////////////////////////////////////////////////////////// 1 4 this 3 2974  
788 0 0 6 845 2800 0 0 459 ////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::get_unicode_char
//       Access: Published
//  Description: Returns the Unicode value of the nth character in the
//               stored text.  This may be a wide character (greater
//               than 255), after the string has been decoded
//               according to set_encoding().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2974  5 index 1 2800  
789 0 0 4 846 2803 0 0 456 ////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::set_unicode_char
//       Access: Published
//  Description: Sets the Unicode value of the nth character in the
//               stored text.  This may be a wide character (greater
//               than 255), after the string has been decoded
//               according to set_encoding().
//////////////////////////////////////////////////////////////////// 3 4 this 3 2973  5 index 1 2800  9 character 1 2800  
790 0 0 6 847 2799 0 0 333 ////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::get_encoded_char
//       Access: Published
//  Description: Returns the nth char of the stored text, as a one-,
//               two-, or three-byte encoded string.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2974  5 index 1 2800  
791 0 0 6 847 2799 0 0 333 ////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::get_encoded_char
//       Access: Published
//  Description: Returns the nth char of the stored text, as a one-,
//               two-, or three-byte encoded string.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2974  5 index 1 2800  8 encoding 1 2735  
792 0 0 6 848 2799 0 0 1136 ////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::get_text_as_ascii
//       Access: Published
//  Description: Returns the text associated with the node, converted
//               as nearly as possible to a fully-ASCII
//               representation.  This means replacing accented
//               letters with their unaccented ASCII equivalents.
//
//               It is possible that some characters in the string
//               cannot be converted to ASCII.  (The string may
//               involve symbols like the copyright symbol, for
//               instance, or it might involve letters in some other
//               alphabet such as Greek or Cyrillic, or even Latin
//               letters like thorn or eth that are not part of the
//               ASCII character set.)  In this case, as much of the
//               string as possible will be converted to ASCII, and
//               the nonconvertible characters will remain encoded in
//               the encoding specified by set_encoding().
//////////////////////////////////////////////////////////////////// 1 4 this 3 2974  
793 0 0 6 849 2799 0 0 559 ////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::reencode_text
//       Access: Published, Static
//  Description: Given the indicated text string, which is assumed to
//               be encoded via the encoding "from", decodes it and
//               then reencodes it into the encoding "to", and returns
//               the newly encoded string.  This does not change or
//               affect any properties on the TextEncoder itself.
//////////////////////////////////////////////////////////////////// 3 4 text 1 2799  4 from 1 2735  2 to 1 2735  
794 0 0 6 850 2810 0 0 408 ////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::unicode_isalpha
//       Access: Published, Static
//  Description: Returns true if the indicated character is an
//               alphabetic letter, false otherwise.  This is akin to
//               ctype's isalpha(), extended to Unicode.
//////////////////////////////////////////////////////////////////// 1 9 character 1 2800  
795 0 0 6 851 2810 0 0 403 ////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::unicode_isdigit
//       Access: Published, Static
//  Description: Returns true if the indicated character is a
//               numeric digit, false otherwise.  This is akin to
//               ctype's isdigit(), extended to Unicode.
//////////////////////////////////////////////////////////////////// 1 9 character 1 2800  
796 0 0 6 852 2810 0 0 406 ////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::unicode_ispunct
//       Access: Published, Static
//  Description: Returns true if the indicated character is a
//               punctuation mark, false otherwise.  This is akin to
//               ctype's ispunct(), extended to Unicode.
//////////////////////////////////////////////////////////////////// 1 9 character 1 2800  
797 0 0 6 853 2810 0 0 406 ////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::unicode_islower
//       Access: Published, Static
//  Description: Returns true if the indicated character is a
//               lowercase letter, false otherwise.  This is akin to
//               ctype's islower(), extended to Unicode.
//////////////////////////////////////////////////////////////////// 1 9 character 1 2800  
798 0 0 6 854 2810 0 0 407 ////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::unicode_isupper
//       Access: Published, Static
//  Description: Returns true if the indicated character is an
//               uppercase letter, false otherwise.  This is akin to
//               ctype's isupper(), extended to Unicode.
//////////////////////////////////////////////////////////////////// 1 9 character 1 2800  
799 0 0 6 855 2810 0 0 407 ////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::unicode_isspace
//       Access: Published, Static
//  Description: Returns true if the indicated character is a
//               whitespace letter, false otherwise.  This is akin to
//               ctype's isspace(), extended to Unicode.
//////////////////////////////////////////////////////////////////// 1 9 character 1 2800  
800 0 0 6 856 2800 0 0 391 ////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::unicode_toupper
//       Access: Published, Static
//  Description: Returns the uppercase equivalent of the given Unicode
//               character.  This is akin to ctype's toupper(),
//               extended to Unicode.
//////////////////////////////////////////////////////////////////// 1 9 character 1 2800  
801 0 0 6 857 2800 0 0 391 ////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::unicode_tolower
//       Access: Published, Static
//  Description: Returns the uppercase equivalent of the given Unicode
//               character.  This is akin to ctype's tolower(),
//               extended to Unicode.
//////////////////////////////////////////////////////////////////// 1 9 character 1 2800  
802 0 0 6 858 2799 0 0 332 ////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::upper
//       Access: Published, Static
//  Description: Converts the string to uppercase, assuming the string
//               is encoded in the default encoding.
//////////////////////////////////////////////////////////////////// 1 6 source 1 2799  
803 0 0 6 858 2799 0 0 334 ////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::upper
//       Access: Published, Static
//  Description: Converts the string to uppercase, assuming the string
//               is encoded in the indicated encoding.
//////////////////////////////////////////////////////////////////// 2 6 source 1 2799  8 encoding 1 2735  
804 0 0 6 859 2799 0 0 332 ////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::lower
//       Access: Published, Static
//  Description: Converts the string to lowercase, assuming the string
//               is encoded in the default encoding.
//////////////////////////////////////////////////////////////////// 1 6 source 1 2799  
805 0 0 6 859 2799 0 0 334 ////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::lower
//       Access: Published, Static
//  Description: Converts the string to lowercase, assuming the string
//               is encoded in the indicated encoding.
//////////////////////////////////////////////////////////////////// 2 6 source 1 2799  8 encoding 1 2735  
806 0 0 4 860 2803 0 0 446 ////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::set_wtext
//       Access: Published
//  Description: Changes the text that is stored in the encoder.
//               Subsequent calls to get_wtext() will return this same
//               string, while get_text() will return the encoded
//               version of the string.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2973  5 wtext 1 2799  
807 0 0 6 861 2799 0 0 316 ////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::get_wtext
//       Access: Published
//  Description: Returns the text associated with the TextEncoder, as
//               a wide-character string.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2974  
808 0 0 4 862 2803 0 0 316 ////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::append_wtext
//       Access: Published
//  Description: Appends the indicates string to the end of the stored
//               wide-character text.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2973  4 text 1 2799  
809 0 0 6 863 2799 0 0 0 1 4 this 3 2974  
810 0 0 6 864 2810 0 0 0 1 4 this 3 2974  
811 0 0 6 865 2799 0 0 0 2 2 ch 1 2976  8 encoding 1 2735  
812 0 0 6 866 2799 0 0 330 ////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::encode_wtext
//       Access: Published
//  Description: Encodes a wide-text string into a single-char string,
//               according to the current encoding.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2974  5 wtext 1 2799  
813 0 0 6 866 2799 0 0 0 2 5 wtext 1 2799  8 encoding 1 2735  
814 0 0 6 867 2799 0 0 332 ////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::decode_text
//       Access: Published
//  Description: Returns the given wstring decoded to a single-byte
//               string, via the current encoding system.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2974  4 text 1 2799  
815 0 0 6 867 2799 0 0 0 2 4 text 1 2799  8 encoding 1 2735  
816 0 0 7 871 2917 2157 0 0 1 8 classobj 1 2977  
817 0 0 6 872 2810 0 0 0 2 4 this 3 2980  5 other 1 2980  
818 0 0 6 873 2810 0 0 0 2 4 this 3 2980  5 other 1 2980  
819 0 0 6 874 2810 0 0 0 2 4 this 3 2980  5 other 1 2980  
820 0 0 6 875 2810 0 0 0 2 4 this 3 2980  5 other 1 2980  
821 0 0 6 876 2810 0 0 0 2 4 this 3 2980  5 other 1 2980  
822 0 0 6 877 2810 0 0 0 2 4 this 3 2980  5 other 1 2980  
823 0 0 6 878 2800 0 0 463 ////////////////////////////////////////////////////////////////////
//     Function: TypeHandle::compare_to
//       Access: Published
//  Description: Sorts TypeHandles arbitrarily (according to <, >,
//               etc.).  Returns a number less than 0 if this type
//               sorts before the other one, greater than zero if it
//               sorts after, 0 if they are equivalent.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2980  5 other 1 2980  
824 0 0 6 879 2796 0 0 263 ////////////////////////////////////////////////////////////////////
//     Function: TypeHandle::get_hash
//       Access: Published
//  Description: Returns a hash code suitable for phash_map.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2980  
825 0 0 6 880 2799 0 0 484 ////////////////////////////////////////////////////////////////////
//     Function: TypeHandle::get_name
//       Access: Published
//  Description: Returns the name of the type.
//
//               The "object" pointer is an optional pointer to the
//               TypedObject class that owns this TypeHandle.  It is
//               only used in case the TypeHandle is inadvertantly
//               undefined.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2980  6 object 1 2982  
826 0 0 6 881 2810 0 0 557 ////////////////////////////////////////////////////////////////////
//     Function: TypeHandle::is_derived_from
//       Access: Published
//  Description: Returns true if this type is derived from the
//               indicated type, false otherwise.
//
//               The "object" pointer is an optional pointer to the
//               TypedObject class that owns this TypeHandle.  It is
//               only used in case the TypeHandle is inadvertantly
//               undefined.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2980  6 parent 1 2917  6 object 1 2982  
827 0 0 6 882 2800 0 0 878 ////////////////////////////////////////////////////////////////////
//     Function: TypeHandle::get_num_parent_classes
//       Access: Published
//  Description: Returns the number of parent classes that this
//               type is known to have.  This may then be used to
//               index into get_parent_class().  The result will be 0
//               if this class does not inherit from any other
//               classes, 1 if normal, single inheritance is in
//               effect, or greater than one if multiple inheritance
//               is in effect.
//
//               The "object" pointer is an optional pointer to the
//               TypedObject class that owns this TypeHandle.  It is
//               only used in case the TypeHandle is inadvertantly
//               undefined.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2980  6 object 1 2982  
828 0 0 7 883 2917 2157 0 383 ////////////////////////////////////////////////////////////////////
//     Function: TypeHandle::get_num_parent_classes
//       Access: Published
//  Description: Returns the nth parent class of this type.  The index
//               should be in the range 0 <= index <
//               get_num_parent_classes().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2980  5 index 1 2800  
829 0 0 6 884 2800 0 0 626 ////////////////////////////////////////////////////////////////////
//     Function: TypeHandle::get_num_child_classes
//       Access: Published
//  Description: Returns the number of child classes that this
//               type is known to have.  This may then be used to
//               index into get_child_class().
//
//               The "object" pointer is an optional pointer to the
//               TypedObject class that owns this TypeHandle.  It is
//               only used in case the TypeHandle is inadvertantly
//               undefined.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2980  6 object 1 2982  
830 0 0 7 885 2917 2157 0 380 ////////////////////////////////////////////////////////////////////
//     Function: TypeHandle::get_num_child_classes
//       Access: Published
//  Description: Returns the nth child class of this type.  The index
//               should be in the range 0 <= index <
//               get_num_child_classes().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2980  5 index 1 2800  
831 0 0 7 886 2917 2157 0 959 ////////////////////////////////////////////////////////////////////
//     Function: TypeHandle::get_parent_towards
//       Access: Published
//  Description: Returns the parent class that is in a direct line of
//               inheritance to the indicated ancestor class.  This is
//               useful in the presence of multiple inheritance to try
//               to determine what properties an unknown type may
//               have.
//
//               The return value is TypeHandle::none() if the type
//               does not inherit from the ancestor.  If ancestor is
//               the same as this type, the return value is this type.
//
//               The "object" pointer is an optional pointer to the
//               TypedObject class that owns this TypeHandle.  It is
//               only used in case the TypeHandle is inadvertantly
//               undefined.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2980  8 ancestor 1 2917  6 object 1 2982  
832 0 0 6 887 2800 0 0 274 ////////////////////////////////////////////////////////////////////
//     Function: get_best_parent_from_Set
//       Access: Published
//  Description: Return the Index of the BEst fit Classs from a set
//////////////////////////////////////////////////////////////////// 2 4 this 3 2980  10 legal_vals 1 2983  
833 0 0 6 888 2800 0 0 0 2 4 this 3 2980  12 memory_class 1 2737  
834 0 0 4 889 2803 0 0 0 3 4 this 3 2917  12 memory_class 1 2737  4 size 1 2796  
835 0 0 4 890 2803 0 0 0 3 4 this 3 2917  12 memory_class 1 2737  4 size 1 2796  
836 0 0 6 891 2800 0 0 654 ////////////////////////////////////////////////////////////////////
//     Function: TypeHandle::get_index
//       Access: Published
//  Description: Returns the integer index associated with this
//               TypeHandle. Each different TypeHandle will have a
//               different index.  However, you probably shouldn't be
//               using this method; you should just treat the
//               TypeHandles as opaque classes.  This is provided for
//               the convenience of non-C++ scripting languages to
//               build a hashtable of TypeHandles.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2980  
837 0 0 4 892 2803 0 0 218 ////////////////////////////////////////////////////////////////////
//     Function: TypeHandle::output
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 2980  3 out 1 2807  
838 0 0 7 893 2917 2157 0 315 ////////////////////////////////////////////////////////////////////
//     Function: TypeHandle::none
//       Access: Published, Static
//  Description: Returns a special zero-valued TypeHandle that is used
//               to indicate no type.
//////////////////////////////////////////////////////////////////// 0 
839 0 0 6 894 2810 0 0 0 1 4 this 3 2980  
840 0 0 7 897 2917 2157 0 0 2 4 this 3 2986  4 name 1 2799  
841 0 0 7 898 2917 2157 0 0 2 4 this 3 2986  2 id 1 2800  
842 0 0 6 899 2799 0 0 0 3 4 this 3 2986  4 type 1 2917  6 object 1 2982  
843 0 0 6 900 2810 0 0 0 4 4 this 3 2988  5 child 1 2917  4 base 1 2917  12 child_object 1 2982  
844 0 0 6 901 2800 0 0 0 1 4 this 3 2988  
845 0 0 7 902 2917 2157 0 0 2 4 this 3 2988  1 n 1 2800  
846 0 0 6 903 2800 0 0 0 1 4 this 3 2988  
847 0 0 7 904 2917 2157 0 0 2 4 this 3 2988  1 n 1 2800  
848 0 0 6 905 2800 0 0 0 3 4 this 3 2986  5 child 1 2917  12 child_object 1 2982  
849 0 0 7 906 2917 2157 0 0 3 4 this 3 2986  5 child 1 2917  5 index 1 2800  
850 0 0 6 907 2800 0 0 0 3 4 this 3 2986  5 child 1 2917  12 child_object 1 2982  
851 0 0 7 908 2917 2157 0 0 3 4 this 3 2986  5 child 1 2917  5 index 1 2800  
852 0 0 7 909 2917 2157 0 0 4 4 this 3 2988  5 child 1 2917  4 base 1 2917  12 child_object 1 2982  
853 0 0 4 910 2803 0 0 0 0 
854 0 0 4 911 2803 0 0 0 2 4 this 3 2986  3 out 1 2807  
855 0 0 6 912 2988 0 0 63 // ptr() returns the pointer to the global TypeRegistry object. 0 
856 0 0 7 918 2917 2157 0 79 // Derived classes should override this function to return
// get_class_type(). 1 4 this 3 2989  
857 0 0 6 919 2800 0 0 441 ////////////////////////////////////////////////////////////////////
//     Function: TypedObject::get_type_index
//       Access: Published
//  Description: Returns the internal index number associated with
//               this object's TypeHandle, a unique number for each
//               different type.  This is equivalent to
//               get_type().get_index().
//////////////////////////////////////////////////////////////////// 1 4 this 3 2989  
858 0 0 6 920 2810 0 0 313 ////////////////////////////////////////////////////////////////////
//     Function: TypedObject::is_of_type
//       Access: Published
//  Description: Returns true if the current object is or derives from
//               the indicated type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2989  6 handle 1 2917  
859 0 0 6 921 2810 0 0 308 ////////////////////////////////////////////////////////////////////
//     Function: TypedObject::is_exact_type
//       Access: Published
//  Description: Returns true if the current object is the indicated
//               type exactly.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2989  6 handle 1 2917  
860 0 0 7 922 2917 2157 0 0 0 
861 0 0 6 915 2938 0 0 0 1 4 this 3 2982  
862 0 0 6 916 2982 0 0 0 1 4 this 3 2938  
863 0 0 7 924 2914 2185 0 0 0 
864 0 0 4 925 2803 0 0 0 1 4 this 3 2914  
865 0 0 7 928 2908 2188 0 0 0 
866 0 0 4 929 2803 0 0 0 1 4 this 3 2908  
867 0 0 7 932 2911 2191 0 0 0 
868 0 0 4 933 2803 0 0 0 1 4 this 3 2911  
869 0 0 6 937 2810 0 0 374 ////////////////////////////////////////////////////////////////////
//     Function: MemoryUsage::is_tracking
//       Access: Public, Static
//  Description: Returns true if the MemoryUsage object is currently
//               tracking memory (e.g. track-memory-usage is
//               configured #t).
//////////////////////////////////////////////////////////////////// 0 
870 0 0 6 938 2810 0 0 413 ////////////////////////////////////////////////////////////////////
//     Function: MemoryUsage::is_counting
//       Access: Public, Static
//  Description: Returns true if the MemoryUsage object is currently
//               at least counting memory (e.g. this is a Windows
//               debug build), even if it's not fully tracking it.
//////////////////////////////////////////////////////////////////// 0 
871 0 0 6 939 2796 0 0 394 ////////////////////////////////////////////////////////////////////
//     Function: MemoryUsage::get_current_cpp_size
//       Access: Public, Static
//  Description: Returns the total number of bytes of allocated memory
//               consumed by C++ objects, not including the memory
//               previously frozen.
//////////////////////////////////////////////////////////////////// 0 
872 0 0 6 940 2796 0 0 388 ////////////////////////////////////////////////////////////////////
//     Function: MemoryUsage::get_total_cpp_size
//       Access: Public, Static
//  Description: Returns the total number of bytes of allocated memory
//               consumed by C++ objects, including the memory
//               previously frozen.
//////////////////////////////////////////////////////////////////// 0 
873 0 0 6 941 2796 0 0 366 ////////////////////////////////////////////////////////////////////
//     Function: MemoryUsage::get_panda_heap_single_size
//       Access: Public, Static
//  Description: Returns the total number of bytes allocated from the
//               heap from code within Panda, for individual objects.
//////////////////////////////////////////////////////////////////// 0 
874 0 0 6 942 2796 0 0 353 ////////////////////////////////////////////////////////////////////
//     Function: MemoryUsage::get_panda_heap_array_size
//       Access: Public, Static
//  Description: Returns the total number of bytes allocated from the
//               heap from code within Panda, for arrays.
//////////////////////////////////////////////////////////////////// 0 
875 0 0 6 943 2796 0 0 465 ////////////////////////////////////////////////////////////////////
//     Function: MemoryUsage::get_panda_heap_overhead
//       Access: Public, Static
//  Description: Returns the extra bytes allocated from the system
//               that are not immediately used for holding allocated
//               objects.  This can only be determined if
//               ALTERNATIVE_MALLOC is enabled.
//////////////////////////////////////////////////////////////////// 0 
876 0 0 6 944 2796 0 0 350 ////////////////////////////////////////////////////////////////////
//     Function: MemoryUsage::get_panda_mmap_size
//       Access: Public, Static
//  Description: Returns the total number of bytes allocated from the
//               virtual memory pool from code within Panda.
//////////////////////////////////////////////////////////////////// 0 
877 0 0 6 945 2796 0 0 852 ////////////////////////////////////////////////////////////////////
//     Function: MemoryUsage::get_external_size
//       Access: Public, Static
//  Description: Returns the total number of bytes of allocated memory
//               in the heap that Panda didn't seem to be responsible
//               for.  This includes a few bytes for very low-level
//               objects (like ConfigVariables) that cannot use Panda
//               memory tracking because they are so very low-level.
//
//               This also includes all of the memory that might have
//               been allocated by a high-level interpreter, like
//               Python.
//
//               This number is only available if Panda is able to
//               hook into the actual heap callback.
//////////////////////////////////////////////////////////////////// 0 
878 0 0 6 946 2796 0 0 348 ////////////////////////////////////////////////////////////////////
//     Function: MemoryUsage::get_total_size
//       Access: Public, Static
//  Description: Returns the total size of allocated memory consumed
//               by the process, as nearly as can be determined.
//////////////////////////////////////////////////////////////////// 0 
879 0 0 6 947 2800 0 0 282 ////////////////////////////////////////////////////////////////////
//     Function: MemoryUsage::get_num_pointers
//       Access: Public, Static
//  Description: Returns the number of pointers currently active.
//////////////////////////////////////////////////////////////////// 0 
880 0 0 4 948 2803 0 0 333 ////////////////////////////////////////////////////////////////////
//     Function: MemoryUsage::get_pointers
//       Access: Public, Static
//  Description: Fills the indicated MemoryUsagePointers with the set
//               of all pointers currently active.
//////////////////////////////////////////////////////////////////// 1 6 result 1 2991  
881 0 0 4 949 2803 0 0 380 ////////////////////////////////////////////////////////////////////
//     Function: MemoryUsage::get_pointers_of_type
//       Access: Public, Static
//  Description: Fills the indicated MemoryUsagePointers with the set
//               of all pointers of the indicated type currently
//               active.
//////////////////////////////////////////////////////////////////// 2 6 result 1 2991  4 type 1 2917  
882 0 0 4 950 2803 0 0 416 ////////////////////////////////////////////////////////////////////
//     Function: MemoryUsage::get_pointers_of_age
//       Access: Public, Static
//  Description: Fills the indicated MemoryUsagePointers with the set
//               of all pointers that were allocated within the range
//               of the indicated number of seconds ago.
//////////////////////////////////////////////////////////////////// 3 6 result 1 2991  4 from 1 2798  2 to 1 2798  
883 0 0 4 951 2803 0 0 1326 ////////////////////////////////////////////////////////////////////
//     Function: MemoryUsage::get_pointers_with_zero_count
//       Access: Public, Static
//  Description: Fills the indicated MemoryUsagePointers with the set
//               of all currently active pointers (that is, pointers
//               allocated since the last call to freeze(), and not
//               yet freed) that have a zero reference count.
//
//               Generally, an undeleted pointer with a zero reference
//               count means its reference count has never been
//               incremented beyond zero (since once it has been
//               incremented, the only way it can return to zero would
//               free the pointer).  This may include objects that are
//               allocated statically or on the stack, which are never
//               intended to be deleted.  Or, it might represent a
//               programmer or compiler error.
//
//               This function has the side-effect of incrementing
//               each of their reference counts by one, thus
//               preventing them from ever being freed--but since they
//               hadn't been freed anyway, probably no additional harm
//               is done.
//////////////////////////////////////////////////////////////////// 1 6 result 1 2991  
884 0 0 4 952 2803 0 0 574 ////////////////////////////////////////////////////////////////////
//     Function: MemoryUsage::freeze
//       Access: Public, Static
//  Description: 'Freezes' all pointers currently stored so that they
//               are no longer reported; only newly allocate pointers
//               from this point on will appear in future information
//               requests.  This makes it easier to differentiate
//               between continuous leaks and one-time memory
//               allocations.
//////////////////////////////////////////////////////////////////// 0 
885 0 0 4 953 2803 0 0 312 ////////////////////////////////////////////////////////////////////
//     Function: MemoryUsage::show_current_types
//       Access: Public, Static
//  Description: Shows the breakdown of types of all of the
//               active pointers.
//////////////////////////////////////////////////////////////////// 0 
886 0 0 4 954 2803 0 0 372 ////////////////////////////////////////////////////////////////////
//     Function: MemoryUsage::show_trend_types
//       Access: Public, Static
//  Description: Shows the breakdown of types of all of the
//               pointers allocated and freed since the last call to
//               freeze().
//////////////////////////////////////////////////////////////////// 0 
887 0 0 4 955 2803 0 0 310 ////////////////////////////////////////////////////////////////////
//     Function: MemoryUsage::show_current_ages
//       Access: Public, Static
//  Description: Shows the breakdown of ages of all of the
//               active pointers.
//////////////////////////////////////////////////////////////////// 0 
888 0 0 4 956 2803 0 0 370 ////////////////////////////////////////////////////////////////////
//     Function: MemoryUsage::show_trend_ages
//       Access: Public, Static
//  Description: Shows the breakdown of ages of all of the
//               pointers allocated and freed since the last call to
//               freeze().
//////////////////////////////////////////////////////////////////// 0 
889 0 0 6 963 2800 0 0 265 ////////////////////////////////////////////////////////////////////
//     Function: ReferenceCount::get_ref_count
//       Access: Published
//  Description: Returns the current reference count.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2992  
890 0 0 4 964 2803 0 0 896 ////////////////////////////////////////////////////////////////////
//     Function: ReferenceCount::ref
//       Access: Published
//  Description: Explicitly increments the reference count.  User code
//               should avoid using ref() and unref() directly, which
//               can result in missed reference counts.  Instead, let
//               a PointerTo object manage the reference counting
//               automatically.
//
//               This function is const, even though it changes the
//               object, because generally fiddling with an object's
//               reference count isn't considered part of fiddling
//               with the object.  An object might be const in other
//               ways, but we still need to accurately count the
//               number of references to it.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2992  
891 0 0 6 965 2810 0 0 1336 ////////////////////////////////////////////////////////////////////
//     Function: ReferenceCount::unref
//       Access: Published, Virtual
//  Description: Explicitly decrements the reference count.  Note that
//               the object will not be implicitly deleted by unref()
//               simply because the reference count drops to zero.
//               (Having a member function delete itself is
//               problematic.) However, see the helper function
//               unref_delete().
//
//               User code should avoid using ref() and unref()
//               directly, which can result in missed reference
//               counts.  Instead, let a PointerTo object manage the
//               reference counting automatically.
//
//               This function is const, even though it changes the
//               object, because generally fiddling with an object's
//               reference count isn't considered part of fiddling
//               with the object.  An object might be const in other
//               ways, but we still need to accurately count the
//               number of references to it.
//
//               The return value is true if the new reference count
//               is nonzero, false if it is zero.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2992  
892 0 0 6 966 2810 0 0 395 ////////////////////////////////////////////////////////////////////
//     Function: ReferenceCount::test_ref_count_integrity
//       Access: Published
//  Description: Does some easy checks to make sure that the reference
//               count isn't completely bogus.  Returns true if ok,
//               false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2992  
893 0 0 6 967 2810 0 0 402 ////////////////////////////////////////////////////////////////////
//     Function: ReferenceCount::test_ref_count_nonzero
//       Access: Published
//  Description: Does some easy checks to make sure that the reference
//               count isn't zero, or completely bogus.  Returns true
//               if ok, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2992  
894 0 0 7 968 2917 2157 0 0 0 
895 0 0 6 960 2938 0 0 0 1 4 this 3 2994  
896 0 0 7 961 2994 2216 0 0 1 4 this 3 2938  
897 0 0 6 970 2800 0 0 214 ////////////////////////////////////////////////////////////////////
//     Function: Buffer::get_length
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2995  
898 0 0 4 979 2803 0 0 0 2 4 this 3 2997  5 level 1 2798  
899 0 0 6 981 2800 0 0 274 ////////////////////////////////////////////////////////////////////
//     Function: NodeReferenceCount::get_node_ref_count
//       Access: Published
//  Description: Returns the current reference count.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2998  
900 0 0 4 982 2803 0 0 338 ////////////////////////////////////////////////////////////////////
//     Function: NodeReferenceCount::node_ref
//       Access: Published
//  Description: Explicitly increments the node reference count and
//               the normal reference count simultaneously.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2998  
901 0 0 6 983 2810 0 0 462 ////////////////////////////////////////////////////////////////////
//     Function: NodeReferenceCount::node_unref
//       Access: Published
//  Description: Explicitly decrements the node reference count and
//               the normal reference count simultaneously.
//
//               The return value is true if the new reference count
//               is nonzero, false if it is zero.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2998  
902 0 0 6 984 2810 0 0 344 ////////////////////////////////////////////////////////////////////
//     Function: NodeReferenceCount::test_ref_count_integrity
//       Access: Published
//  Description: Does some easy checks to make sure that the reference
//               count isn't completely bogus.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2998  
903 0 0 7 985 2917 2157 0 0 0 
904 0 0 7 987 3000 2177 0 247 ////////////////////////////////////////////////////////////////////
//     Function: Datagram::Constructor
//       Access: Public
//  Description: Constructs an empty datagram.
//////////////////////////////////////////////////////////////////// 0 
905 0 0 7 987 3000 2177 0 222 ////////////////////////////////////////////////////////////////////
//     Function: Datagram::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 3001  
906 0 0 7 987 3000 2177 0 271 ////////////////////////////////////////////////////////////////////
//     Function: Datagram::Constructor
//       Access: Public
//  Description: Constructs a datagram from an existing block of data.
//////////////////////////////////////////////////////////////////// 1 4 data 1 2799  
907 0 0 6 988 3000 0 0 0 2 4 this 3 3000  4 copy 1 3001  
908 0 0 4 989 2803 0 0 314 ////////////////////////////////////////////////////////////////////
//     Function: Datagram::clear
//       Access: Public, Virtual
//  Description: Resets the datagram to empty, in preparation for
//               building up a new datagram.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3000  
909 0 0 4 990 2803 0 0 329 ////////////////////////////////////////////////////////////////////
//     Function: Datagram::dump_hex
//       Access: Public
//  Description: Writes a representation of the entire datagram
//               contents, as a sequence of hex (and ASCII) values.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3001  3 out 1 2807  6 indent 1 2906  
910 0 0 4 991 2803 0 0 252 ////////////////////////////////////////////////////////////////////
//     Function: Datagram::add_bool
//       Access: Public
//  Description: Adds a boolean value to the datagram.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3000  5 value 1 2810  
911 0 0 4 992 2803 0 0 259 ////////////////////////////////////////////////////////////////////
//     Function: Datagram::add_int8
//       Access: Public
//  Description: Adds a signed 8-bit integer to the datagram.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3000  5 value 1 2955  
912 0 0 4 993 2803 0 0 263 ////////////////////////////////////////////////////////////////////
//     Function: Datagram::add_uint8
//       Access: Public
//  Description: Adds an unsigned 8-bit integer to the datagram.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3000  5 value 1 2957  
913 0 0 4 994 2803 0 0 261 ////////////////////////////////////////////////////////////////////
//     Function: Datagram::add_int16
//       Access: Public
//  Description: Adds a signed 16-bit integer to the datagram.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3000  5 value 1 2958  
914 0 0 4 995 2803 0 0 261 ////////////////////////////////////////////////////////////////////
//     Function: Datagram::add_int32
//       Access: Public
//  Description: Adds a signed 32-bit integer to the datagram.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3000  5 value 1 2960  
915 0 0 4 996 2803 0 0 261 ////////////////////////////////////////////////////////////////////
//     Function: Datagram::add_int64
//       Access: Public
//  Description: Adds a signed 64-bit integer to the datagram.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3000  5 value 1 2842  
916 0 0 4 997 2803 0 0 265 ////////////////////////////////////////////////////////////////////
//     Function: Datagram::add_uint16
//       Access: Public
//  Description: Adds an unsigned 16-bit integer to the datagram.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3000  5 value 1 2961  
917 0 0 4 998 2803 0 0 265 ////////////////////////////////////////////////////////////////////
//     Function: Datagram::add_uint32
//       Access: Public
//  Description: Adds an unsigned 32-bit integer to the datagram.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3000  5 value 1 2963  
918 0 0 4 999 2803 0 0 265 ////////////////////////////////////////////////////////////////////
//     Function: Datagram::add_uint64
//       Access: Public
//  Description: Adds an unsigned 64-bit integer to the datagram.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3000  5 value 1 2964  
919 0 0 4 1000 2803 0 0 450 ////////////////////////////////////////////////////////////////////
//     Function: Datagram::add_float32
//       Access: Public
//  Description: Adds a 32-bit single-precision floating-point number
//               to the datagram.  Since this kind of float is not
//               necessarily portable across different architectures,
//               special care is required.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3000  5 value 1 3003  
920 0 0 4 1001 2803 0 0 270 ////////////////////////////////////////////////////////////////////
//     Function: Datagram::add_float64
//       Access: Public
//  Description: Adds a 64-bit floating-point number to the datagram.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3000  5 value 1 2966  
921 0 0 4 1002 2803 0 0 327 ////////////////////////////////////////////////////////////////////
//     Function: Datagram::add_stdfloat
//       Access: Public
//  Description: Adds either a 32-bit or a 64-bit floating-point
//               number, according to set_stdfloat_double().
//////////////////////////////////////////////////////////////////// 2 4 this 3 3000  5 value 1 3004  
922 0 0 4 1003 2803 0 0 292 ////////////////////////////////////////////////////////////////////
//     Function: Datagram::add_be_int16
//       Access: Public
//  Description: Adds a signed 16-bit big-endian integer to the
//               datagram.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3000  5 value 1 2958  
923 0 0 4 1004 2803 0 0 292 ////////////////////////////////////////////////////////////////////
//     Function: Datagram::add_be_int32
//       Access: Public
//  Description: Adds a signed 32-bit big-endian integer to the
//               datagram.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3000  5 value 1 2960  
924 0 0 4 1005 2803 0 0 292 ////////////////////////////////////////////////////////////////////
//     Function: Datagram::add_be_int64
//       Access: Public
//  Description: Adds a signed 64-bit big-endian integer to the
//               datagram.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3000  5 value 1 2842  
925 0 0 4 1006 2803 0 0 296 ////////////////////////////////////////////////////////////////////
//     Function: Datagram::add_be_uint16
//       Access: Public
//  Description: Adds an unsigned 16-bit big-endian integer to the
//               datagram.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3000  5 value 1 2961  
926 0 0 4 1007 2803 0 0 296 ////////////////////////////////////////////////////////////////////
//     Function: Datagram::add_be_uint32
//       Access: Public
//  Description: Adds an unsigned 32-bit big-endian integer to the
//               datagram.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3000  5 value 1 2963  
927 0 0 4 1008 2803 0 0 296 ////////////////////////////////////////////////////////////////////
//     Function: Datagram::add_be_uint64
//       Access: Public
//  Description: Adds an unsigned 64-bit big-endian integer to the
//               datagram.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3000  5 value 1 2964  
928 0 0 4 1009 2803 0 0 318 ////////////////////////////////////////////////////////////////////
//     Function: Datagram::add_be_float32
//       Access: Public
//  Description: Adds a 32-bit single-precision big-endian
//               floating-point number to the datagram.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3000  5 value 1 3003  
929 0 0 4 1010 2803 0 0 301 ////////////////////////////////////////////////////////////////////
//     Function: Datagram::add_be_float64
//       Access: Public
//  Description: Adds a 64-bit big-endian floating-point number to the
//               datagram.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3000  5 value 1 2966  
930 0 0 4 1011 2803 0 0 329 ////////////////////////////////////////////////////////////////////
//     Function: Datagram::add_string
//       Access: Public
//  Description: Adds a variable-length string to the datagram.  This
//               actually adds a count followed by n bytes.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3000  3 str 1 2799  
931 0 0 4 1012 2803 0 0 338 ////////////////////////////////////////////////////////////////////
//     Function: Datagram::add_string32
//       Access: Public
//  Description: Adds a variable-length string to the datagram, using
//               a 32-bit length field to allow very long strings.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3000  3 str 1 2799  
932 0 0 4 1013 2803 0 0 311 ////////////////////////////////////////////////////////////////////
//     Function: Datagram::add_z_string
//       Access: Public
//  Description: Adds a variable-length string to the datagram, as a
//               NULL-terminated string.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3000  3 str 1 2799  
933 0 0 4 1014 2803 0 0 512 ////////////////////////////////////////////////////////////////////
//     Function: Datagram::add_fixed_string
//       Access: Public
//  Description: Adds a fixed-length string to the datagram.  If the
//               string given is less than the requested size, this
//               will pad the string out with zeroes; if it is greater
//               than the requested size, this will silently truncate
//               the string.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3000  3 str 1 2799  4 size 1 2796  
934 0 0 4 1015 2803 0 0 265 ////////////////////////////////////////////////////////////////////
//     Function: Datagram::add_wstring
//       Access: Public
//  Description: Adds a variable-length wstring to the datagram.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3000  3 str 1 2799  
935 0 0 4 1016 2803 0 0 289 ////////////////////////////////////////////////////////////////////
//     Function: Datagram::pad_bytes
//       Access: Public
//  Description: Adds the indicated number of zero bytes to the
//               datagram.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3000  4 size 1 2796  
936 0 0 4 1017 2803 0 0 289 ////////////////////////////////////////////////////////////////////
//     Function: Datagram::append_data
//       Access: Public
//  Description: Appends some more raw data to the end of the
//               datagram.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3000  4 data 1 2799  
937 0 0 6 1019 2799 0 0 258 ////////////////////////////////////////////////////////////////////
//     Function: Datagram::get_message
//       Access: Public
//  Description: Returns the datagram's data as a string.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3001  
938 0 0 4 1020 2803 0 0 290 ////////////////////////////////////////////////////////////////////
//     Function: Datagram::get_data
//       Access: Public
//  Description: Returns a pointer to the beginning of the datagram's
//               data.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3001  
939 0 0 6 1021 2796 0 0 261 ////////////////////////////////////////////////////////////////////
//     Function: Datagram::get_length
//       Access: Public
//  Description: Returns the number of bytes in the datagram.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3001  
940 0 0 4 1022 2803 0 0 450 ////////////////////////////////////////////////////////////////////
//     Function: Datagram::set_array
//       Access: Public
//  Description: Replaces the data in the Datagram with the data in
//               the indicated PTA_uchar.  This is assignment by
//               reference: subsequent changes to the Datagram will
//               also change the source PTA_uchar.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3000  4 data 1 3005  
941 0 0 4 1023 2803 0 0 505 ////////////////////////////////////////////////////////////////////
//     Function: Datagram::copy_array
//       Access: Public
//  Description: Replaces the data in the Datagram with a copy of the
//               data in the indicated CPTA_uchar.  Unlike
//               set_array(), a complete copy is made of the data;
//               subsequent changes to the Datagram will *not* change
//               the source CPTA_uchar.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3000  4 data 1 3006  
942 0 0 7 1024 3006 0 0 292 ////////////////////////////////////////////////////////////////////
//     Function: Datagram::get_array
//       Access: Public
//  Description: Returns a const pointer to the actual data in
//               the Datagram.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3001  
943 0 0 7 1025 3005 0 0 300 ////////////////////////////////////////////////////////////////////
//     Function: Datagram::modify_array
//       Access: Public
//  Description: Returns a modifiable pointer to the actual data in
//               the Datagram.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3000  
944 0 0 4 1026 2803 0 0 648 ////////////////////////////////////////////////////////////////////
//     Function: Datagram::set_stdfloat_double
//       Access: Public
//  Description: Changes the stdfloat_double flag, which defines the
//               operation performed by add_stdfloat() and
//               DatagramIterator::get_stdfloat().  When this is true,
//               add_stdfloat() adds a 64-bit floating-point number;
//               when it is false, it adds a 32-bit floating-point
//               number.  The default is based on the STDFLOAT_DOUBLE
//               compilation flag.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3000  15 stdfloat_double 1 2810  
945 0 0 6 1027 2810 0 0 304 ////////////////////////////////////////////////////////////////////
//     Function: Datagram::get_stdfloat_double
//       Access: Public
//  Description: Returns the stdfloat_double flag.  See
//               set_stdfloat_double().
//////////////////////////////////////////////////////////////////// 1 4 this 3 3001  
946 0 0 6 1028 2810 0 0 0 2 4 this 3 3001  5 other 1 3001  
947 0 0 6 1029 2810 0 0 0 2 4 this 3 3001  5 other 1 3001  
948 0 0 6 1030 2810 0 0 0 2 4 this 3 3001  5 other 1 3001  
949 0 0 4 1031 2803 0 0 290 ////////////////////////////////////////////////////////////////////
//     Function : Datagram::output
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3001  3 out 1 2807  
950 0 0 4 1032 2803 0 0 289 ////////////////////////////////////////////////////////////////////
//     Function : Datagram::write
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3001  3 out 1 2807  6 indent 1 2906  
951 0 0 7 1033 2917 2157 0 0 0 
952 0 0 6 1036 2810 0 0 0 2 4 this 3 3007  4 data 1 3000  
953 0 0 6 1037 2810 0 0 725 ////////////////////////////////////////////////////////////////////
//     Function: DatagramGenerator::save_datagram
//       Access: Published, Virtual
//  Description: Skips over the next datagram without extracting it,
//               but saves the relevant file information in the
//               SubfileInfo object so that its data may be read
//               later.  For non-file-based datagram generators, this
//               may mean creating a temporary file and copying the
//               contents of the datagram to disk.
//
//               Returns true on success, false on failure or if this
//               method is unimplemented.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3007  4 info 1 3008  
954 0 0 6 1038 2810 0 0 0 1 4 this 3 3007  
955 0 0 6 1039 2810 0 0 0 1 4 this 3 3007  
956 0 0 6 1040 2866 0 0 419 ////////////////////////////////////////////////////////////////////
//     Function: DatagramGenerator::get_filename
//       Access: Published, Virtual
//  Description: Returns the filename that provides the source for
//               these datagrams, if any, or empty string if the
//               datagrams do not originate from a file on disk.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3007  
957 0 0 6 1041 2905 0 0 399 ////////////////////////////////////////////////////////////////////
//     Function: DatagramGenerator::get_timestamp
//       Access: Published, Virtual
//  Description: Returns the on-disk timestamp of the file that was
//               read, at the time it was opened, if that is
//               available, or 0 if it is not.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3009  
958 0 0 7 1042 3012 0 0 412 ////////////////////////////////////////////////////////////////////
//     Function: DatagramGenerator::get_file
//       Access: Published, Virtual
//  Description: Returns the FileReference that provides the source for
//               these datagrams, if any, or NULL if the datagrams do
//               not originate from a file on disk.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3007  
959 0 0 7 1043 3013 2539 0 410 ////////////////////////////////////////////////////////////////////
//     Function: DatagramGenerator::get_vfile
//       Access: Published, Virtual
//  Description: Returns the VirtualFile that provides the source for
//               these datagrams, if any, or NULL if the datagrams do
//               not originate from a VirtualFile.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3007  
960 0 0 6 1044 3014 0 0 646 ////////////////////////////////////////////////////////////////////
//     Function: DatagramGenerator::get_file_pos
//       Access: Published, Virtual
//  Description: Returns the current file position within the data
//               stream, if any, or 0 if the file position is not
//               meaningful or cannot be determined.
//
//               For DatagramGenerators that return a meaningful file
//               position, this will be pointing to the first byte
//               following the datagram returned after a call to
//               get_datagram().
//////////////////////////////////////////////////////////////////// 1 4 this 3 3007  
961 0 0 7 1046 3015 2296 0 225 ////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
962 0 0 7 1046 3015 2296 0 225 ////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 8 datagram 1 3001  6 offset 1 2796  
963 0 0 7 1046 3015 2296 0 230 ////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 3016  
964 0 0 6 1047 3015 0 0 0 2 4 this 3 3015  4 copy 1 3016  
965 0 0 6 1049 2810 0 0 248 ////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_bool
//       Access: Public
//  Description: Extracts a boolean value.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3015  
966 0 0 6 1050 2955 0 0 255 ////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_int8
//       Access: Public
//  Description: Extracts a signed 8-bit integer.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3015  
967 0 0 6 1051 2957 0 0 259 ////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_uint8
//       Access: Public
//  Description: Extracts an unsigned 8-bit integer.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3015  
968 0 0 6 1052 2958 0 0 257 ////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_int16
//       Access: Public
//  Description: Extracts a signed 16-bit integer.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3015  
969 0 0 6 1053 2960 0 0 257 ////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_int32
//       Access: Public
//  Description: Extracts a signed 32-bit integer.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3015  
970 0 0 6 1054 2842 0 0 257 ////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_int64
//       Access: Public
//  Description: Extracts a signed 64-bit integer.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3015  
971 0 0 6 1055 2961 0 0 261 ////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_uint16
//       Access: Public
//  Description: Extracts an unsigned 16-bit integer.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3015  
972 0 0 6 1056 2963 0 0 261 ////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_uint32
//       Access: Public
//  Description: Extracts an unsigned 32-bit integer.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3015  
973 0 0 6 1057 2964 0 0 261 ////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_uint64
//       Access: Public
//  Description: Extracts an unsigned 64-bit integer.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3015  
974 0 0 6 1058 3003 0 0 300 ////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_float32
//       Access: Public
//  Description: Extracts a 32-bit single-precision floating-point
//               number.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3015  
975 0 0 6 1059 2966 0 0 266 ////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_float64
//       Access: Public
//  Description: Extracts a 64-bit floating-point number.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3015  
976 0 0 6 1060 3004 0 0 349 ////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_stdfloat
//       Access: Public
//  Description: Extracts either a 32-bit or a 64-bit floating-point
//               number, according to Datagram::set_stdfloat_double().
//////////////////////////////////////////////////////////////////// 1 4 this 3 3015  
977 0 0 6 1061 2958 0 0 271 ////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_be_int16
//       Access: Public
//  Description: Extracts a signed 16-bit big-endian integer.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3015  
978 0 0 6 1062 2960 0 0 271 ////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_be_int32
//       Access: Public
//  Description: Extracts a signed 32-bit big-endian integer.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3015  
979 0 0 6 1063 2842 0 0 271 ////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_be_int64
//       Access: Public
//  Description: Extracts a signed 64-bit big-endian integer.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3015  
980 0 0 6 1064 2961 0 0 275 ////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_be_uint16
//       Access: Public
//  Description: Extracts an unsigned 16-bit big-endian integer.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3015  
981 0 0 6 1065 2963 0 0 275 ////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_be_uint32
//       Access: Public
//  Description: Extracts an unsigned 32-bit big-endian integer.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3015  
982 0 0 6 1066 2964 0 0 275 ////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_be_uint64
//       Access: Public
//  Description: Extracts an unsigned 64-bit big-endian integer.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3015  
983 0 0 6 1067 3003 0 0 314 ////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_be_float32
//       Access: Public
//  Description: Extracts a 32-bit big-endian single-precision
//               floating-point number.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3015  
984 0 0 6 1068 2966 0 0 280 ////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_be_float64
//       Access: Public
//  Description: Extracts a 64-bit big-endian floating-point number.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3015  
985 0 0 6 1069 2799 0 0 259 ////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_string
//       Access: Public
//  Description: Extracts a variable-length string.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3015  
986 0 0 6 1070 2799 0 0 305 ////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_string32
//       Access: Public
//  Description: Extracts a variable-length string with a 32-bit
//               length field.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3015  
987 0 0 6 1071 2799 0 0 307 ////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_z_string
//       Access: Public
//  Description: Extracts a variable-length string, as a
//               NULL-terminated string.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3015  
988 0 0 6 1072 2799 0 0 379 ////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_fixed_string
//       Access: Public
//  Description: Extracts a fixed-length string.  However, if a zero
//               byte occurs within the string, it marks the end of
//               the string.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3015  4 size 1 2796  
989 0 0 6 1073 2799 0 0 307 ////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_wstring
//       Access: Public
//  Description: Extracts a variable-length wstring (with a 32-bit
//               length field).
//////////////////////////////////////////////////////////////////// 1 4 this 3 3015  
990 0 0 4 1074 2803 0 0 299 ////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::skip_bytes
//       Access: Public
//  Description: Skips over the indicated number of bytes in the
//               datagram.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3015  4 size 1 2796  
991 0 0 6 1075 2799 0 0 329 ////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::extract_bytes
//       Access: Public
//  Description: Extracts the indicated number of bytes in the
//               datagram and returns them as a string.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3015  4 size 1 2796  
992 0 0 6 1076 2799 0 0 352 ////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_remaining_bytes
//       Access: Public
//  Description: Returns the remaining bytes in the datagram as a
//               string, but does not extract them from the iterator.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3016  
993 0 0 6 1077 2800 0 0 271 ////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_remaining_size
//       Access: Public
//  Description: Return the bytes left in the datagram.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3016  
994 0 0 6 1078 3001 0 0 264 ////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_datagram
//       Access: Public
//  Description: Return the datagram of this iterator.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3016  
995 0 0 6 1079 2796 0 0 335 ////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_current_index
//       Access: Public
//  Description: Returns the current position within the datagram of the
//               next piece of data to extract.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3016  
996 0 0 4 1080 2803 0 0 280 ////////////////////////////////////////////////////////////////////
//     Function : output
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3016  3 out 1 2807  
997 0 0 4 1081 2803 0 0 279 ////////////////////////////////////////////////////////////////////
//     Function : write
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3016  3 out 1 2807  6 indent 1 2906  
998 0 0 7 1082 2917 2157 0 0 0 
999 0 0 6 1085 2810 0 0 0 2 4 this 3 3018  4 data 1 3001  
1000 0 0 6 1086 2810 0 0 661 ////////////////////////////////////////////////////////////////////
//     Function: DatagramSink::copy_datagram
//       Access: Published, Virtual
//  Description: Copies the file data from the entire indicated
//               file (via the vfs) as the next datagram.  This is
//               intended to support potentially very large datagrams.
//
//               Returns true on success, false on failure or if this
//               method is unimplemented.  On true, fills "result"
//               with the information that references the copied file,
//               if possible.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3018  6 result 1 3008  8 filename 1 2866  
1001 0 0 6 1086 2810 0 0 691 ////////////////////////////////////////////////////////////////////
//     Function: DatagramSink::copy_datagram
//       Access: Published, Virtual
//  Description: Copies the file data from the range of the indicated
//               file (outside of the vfs) as the next datagram.  This
//               is intended to support potentially very large
//               datagrams.
//
//               Returns true on success, false on failure or if this
//               method is unimplemented.  On true, fills "result"
//               with the information that references the copied file,
//               if possible.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3018  6 result 1 3008  6 source 1 3019  
1002 0 0 6 1087 2810 0 0 0 1 4 this 3 3018  
1003 0 0 4 1088 2803 0 0 0 1 4 this 3 3018  
1004 0 0 6 1089 2866 0 0 414 ////////////////////////////////////////////////////////////////////
//     Function: DatagramSink::get_filename
//       Access: Published, Virtual
//  Description: Returns the filename that provides the target for
//               these datagrams, if any, or empty string if the
//               datagrams do not get written to a file on disk.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3018  
1005 0 0 7 1090 3012 0 0 403 ////////////////////////////////////////////////////////////////////
//     Function: DatagramSink::get_file
//       Access: Published, Virtual
//  Description: Returns the FileReference that provides the target for
//               these datagrams, if any, or NULL if the datagrams do
//               not written to a file on disk.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3018  
1006 0 0 6 1091 3014 0 0 636 ////////////////////////////////////////////////////////////////////
//     Function: DatagramSink::get_file_pos
//       Access: Published, Virtual
//  Description: Returns the current file position within the data
//               stream, if any, or 0 if the file position is not
//               meaningful or cannot be determined.
//
//               For DatagramSinks that return a meaningful file
//               position, this will be pointing to the first byte
//               following the datagram returned after a call to
//               put_datagram().
//////////////////////////////////////////////////////////////////// 1 4 this 3 3018  
1007 0 0 7 1108 2917 2157 0 0 0 
1008 0 0 6 1104 2982 0 0 0 1 4 this 3 3021  
1009 0 0 7 1105 3021 2354 0 0 1 4 this 3 2982  
1010 0 0 7 1106 2994 2216 0 0 1 4 this 3 3021  
1011 0 0 7 1107 3021 2354 0 0 1 4 this 3 2994  
1012 0 0 7 1111 3022 2358 0 225 ////////////////////////////////////////////////////////////////////
//     Function: FileReference::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 8 filename 1 2866  
1013 0 0 6 1112 2866 0 0 265 ////////////////////////////////////////////////////////////////////
//     Function: FileReference::get_filename
//       Access: Published
//  Description: Returns the filename of the reference.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3012  
1014 0 0 7 1113 2917 2157 0 0 0 
1015 0 0 7 1116 3023 2368 0 219 ////////////////////////////////////////////////////////////////////
//     Function: Ramfile::constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
1016 0 0 4 1117 2803 0 0 363 ////////////////////////////////////////////////////////////////////
//     Function: Ramfile::seek
//       Access: Published
//  Description: Moves the data pointer to the indicated byte
//               position.  It is not an error to move the pointer
//               past the end of data.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3023  3 pos 1 2796  
1017 0 0 6 1118 2796 0 0 322 ////////////////////////////////////////////////////////////////////
//     Function: Ramfile::tell
//       Access: Published
//  Description: Returns the current data pointer position as a byte
//               offset from the beginning of the stream.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3024  
1018 0 0 6 1119 2799 0 0 594 ////////////////////////////////////////////////////////////////////
//     Function: Ramfile::read
//       Access: Published
//  Description: Extracts and returns the indicated number of
//               characters from the current data pointer, and
//               advances the data pointer.  If the data pointer
//               exceeds the end of the buffer, returns empty string.
//
//               The interface here is intentionally designed to be
//               similar to that for Python's file.read() function.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3023  6 length 1 2796  
1019 0 0 6 1120 2799 0 0 599 ////////////////////////////////////////////////////////////////////
//     Function: Ramfile::readline
//       Access: Published
//  Description: Assumes the stream represents a text file, and
//               extracts one line up to and including the trailing
//               newline character.  Returns empty string when the end
//               of file is reached.
//
//               The interface here is intentionally designed to be
//               similar to that for Python's file.readline()
//               function.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3023  
1020 0 0 6 1121 2793 0 0 0 1 4 this 3 3023  
1021 0 0 6 1122 2799 0 0 321 ////////////////////////////////////////////////////////////////////
//     Function: Ramfile::get_data
//       Access: Published
//  Description: Returns the entire buffer contents as a string,
//               regardless of the current data pointer.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3024  
1022 0 0 6 1123 2796 0 0 269 ////////////////////////////////////////////////////////////////////
//     Function: Ramfile::get_data_size
//       Access: Published
//  Description: Returns the size of the entire buffer contents.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3024  
1023 0 0 4 1124 2803 0 0 250 ////////////////////////////////////////////////////////////////////
//     Function: Ramfile::clear
//       Access: Published
//  Description: Empties the current buffer contents.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3023  
1024 0 0 7 1127 3026 2398 0 219 ////////////////////////////////////////////////////////////////////
//     Function: HashVal::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
1025 0 0 7 1127 3026 2398 0 224 ////////////////////////////////////////////////////////////////////
//     Function: HashVal::Copy Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 3027  
1026 0 0 6 1128 3026 0 0 0 2 4 this 3 3026  4 copy 1 3027  
1027 0 0 6 1129 2810 0 0 0 2 4 this 3 3027  5 other 1 3027  
1028 0 0 6 1130 2810 0 0 0 2 4 this 3 3027  5 other 1 3027  
1029 0 0 6 1131 2810 0 0 0 2 4 this 3 3027  5 other 1 3027  
1030 0 0 6 1132 2800 0 0 218 ////////////////////////////////////////////////////////////////////
//     Function: HashVal::compare_to
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3027  5 other 1 3027  
1031 0 0 4 1133 2803 0 0 311 ////////////////////////////////////////////////////////////////////
//     Function: HashVal::merge_with
//       Access: Published
//  Description: Generates a new HashVal representing the xor of this
//               one and the other one.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3026  5 other 1 3027  
1032 0 0 4 1134 2803 0 0 290 ////////////////////////////////////////////////////////////////////
//     Function: HashVal::output_dec
//       Access: Published
//  Description: Outputs the HashVal as four unsigned decimal
//               integers.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3027  3 out 1 2807  
1033 0 0 4 1135 2803 0 0 267 ////////////////////////////////////////////////////////////////////
//     Function: HashVal::input
//       Access: Published
//  Description: Inputs the HashVal as four unsigned decimal integers.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3026  2 in 1 2846  
1034 0 0 4 1136 2803 0 0 272 ////////////////////////////////////////////////////////////////////
//     Function: HashVal::output_hex
//       Access: Published
//  Description: Outputs the HashVal as a 32-digit hexadecimal number.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3027  3 out 1 2807  
1035 0 0 4 1137 2803 0 0 270 ////////////////////////////////////////////////////////////////////
//     Function: HashVal::input_hex
//       Access: Published
//  Description: Inputs the HashVal as a 32-digit hexadecimal number.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3026  2 in 1 2846  
1036 0 0 4 1138 2803 0 0 370 ////////////////////////////////////////////////////////////////////
//     Function: HashVal::output_binary
//       Access: Published
//  Description: Outputs the HashVal as a binary stream of bytes in
//               order.  This is not the same order generated by
//               write_stream().
//////////////////////////////////////////////////////////////////// 2 4 this 3 3027  3 out 1 2807  
1037 0 0 4 1139 2803 0 0 366 ////////////////////////////////////////////////////////////////////
//     Function: HashVal::input_binary
//       Access: Published
//  Description: Inputs the HashVal as a binary stream of bytes in
//               order.  This is not the same order expected by
//               read_stream().
//////////////////////////////////////////////////////////////////// 2 4 this 3 3026  2 in 1 2846  
1038 0 0 4 1140 2803 0 0 215 ////////////////////////////////////////////////////////////////////
//     Function: HashVal::output
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3027  3 out 1 2807  
1039 0 0 6 1141 2799 0 0 290 ////////////////////////////////////////////////////////////////////
//     Function: HashVal::as_dec
//       Access: Published
//  Description: Returns the HashVal as a string with four decimal
//               numbers.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3027  
1040 0 0 6 1142 2810 0 0 336 ////////////////////////////////////////////////////////////////////
//     Function: HashVal::set_from_dec
//       Access: Published
//  Description: Sets the HashVal from a string with four decimal
//               numbers.  Returns true if valid, false otherwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3026  4 text 1 2799  
1041 0 0 6 1143 2799 0 0 267 ////////////////////////////////////////////////////////////////////
//     Function: HashVal::as_hex
//       Access: Published
//  Description: Returns the HashVal as a 32-byte hexadecimal string.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3027  
1042 0 0 6 1144 2810 0 0 334 ////////////////////////////////////////////////////////////////////
//     Function: HashVal::set_from_hex
//       Access: Published
//  Description: Sets the HashVal from a 32-byte hexademical string.
//               Returns true if successful, false otherwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3026  4 text 1 2799  
1043 0 0 6 1145 2799 0 0 262 ////////////////////////////////////////////////////////////////////
//     Function: HashVal::as_bin
//       Access: Published
//  Description: Returns the HashVal as a 16-byte binary string.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3027  
1044 0 0 6 1146 2810 0 0 329 ////////////////////////////////////////////////////////////////////
//     Function: HashVal::set_from_bin
//       Access: Published
//  Description: Sets the HashVal from a 16-byte binary string.
//               Returns true if successful, false otherwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3026  4 text 1 2799  
1045 0 0 4 1147 2803 0 0 223 ////////////////////////////////////////////////////////////////////
//     Function: HashVal::write_datagram
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3027  11 destination 1 3000  
1046 0 0 4 1148 2803 0 0 222 ////////////////////////////////////////////////////////////////////
//     Function: HashVal::read_datagram
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3026  6 source 1 3015  
1047 0 0 4 1149 2803 0 0 221 ////////////////////////////////////////////////////////////////////
//     Function: HashVal::write_stream
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3027  11 destination 1 2972  
1048 0 0 4 1150 2803 0 0 220 ////////////////////////////////////////////////////////////////////
//     Function: HashVal::read_stream
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3026  6 source 1 2954  
1049 0 0 6 1151 2810 0 0 500 ////////////////////////////////////////////////////////////////////
//     Function: HashVal::hash_file
//       Access: Published
//  Description: Generates the hash value from the indicated file.
//               Returns true on success, false if the file cannot be
//               read.  This method is only defined if we have the
//               OpenSSL library (which provides md5 functionality)
//               available.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3026  8 filename 1 2866  
1050 0 0 6 1152 2810 0 0 502 ////////////////////////////////////////////////////////////////////
//     Function: HashVal::hash_stream
//       Access: Published
//  Description: Generates the hash value from the indicated file.
//               Returns true on success, false if the file cannot be
//               read.  This method is only defined if we have the
//               OpenSSL library (which provides md5 functionality)
//               available.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3026  6 stream 1 2846  
1051 0 0 4 1153 2803 0 0 433 ////////////////////////////////////////////////////////////////////
//     Function: HashVal::hash_ramfile
//       Access: Published
//  Description: Generates the hash value by hashing the indicated
//               data.  This method is only defined if we have the
//               OpenSSL library (which provides md5 functionality)
//               available.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3026  7 ramfile 1 3024  
1052 0 0 4 1154 2803 0 0 432 ////////////////////////////////////////////////////////////////////
//     Function: HashVal::hash_string
//       Access: Published
//  Description: Generates the hash value by hashing the indicated
//               data.  This method is only defined if we have the
//               OpenSSL library (which provides md5 functionality)
//               available.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3026  4 data 1 2799  
1053 0 0 4 1155 2803 0 0 432 ////////////////////////////////////////////////////////////////////
//     Function: HashVal::hash_buffer
//       Access: Published
//  Description: Generates the hash value by hashing the indicated
//               data.  This method is only defined if we have the
//               OpenSSL library (which provides md5 functionality)
//               available.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3026  6 buffer 1 2799  6 length 1 2800  
1054 0 0 7 1158 2991 2400 0 231 ////////////////////////////////////////////////////////////////////
//     Function: MemoryUsagePointers::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
1055 0 0 6 1160 2800 0 0 279 ////////////////////////////////////////////////////////////////////
//     Function: MemoryUsagePointers::get_num_pointers
//       Access: Published
//  Description: Returns the number of pointers in the set.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3029  
1056 0 0 7 1161 2994 2216 0 267 ////////////////////////////////////////////////////////////////////
//     Function: MemoryUsagePointers::get_pointer
//       Access: Published
//  Description: Returns the nth pointer of the set.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3029  1 n 1 2800  
1057 0 0 6 1162 2982 0 0 445 ////////////////////////////////////////////////////////////////////
//     Function: MemoryUsagePointers::get_typed_pointer
//       Access: Published
//  Description: Returns the nth pointer of the set, typecast to a
//               TypedObject if possible.  If the pointer is not a
//               TypedObject or if the cast cannot be made, returns
//               NULL.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3029  1 n 1 2800  
1058 0 0 7 1163 2917 2157 0 305 ////////////////////////////////////////////////////////////////////
//     Function: MemoryUsagePointers::get_type
//       Access: Published
//  Description: Returns the actual type of the nth pointer, if it is
//               known.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3029  1 n 1 2800  
1059 0 0 6 1164 2799 0 0 308 ////////////////////////////////////////////////////////////////////
//     Function: MemoryUsagePointers::get_type_name
//       Access: Published
//  Description: Returns the type name of the nth pointer, if it is
//               known.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3029  1 n 1 2800  
1060 0 0 6 1165 2798 0 0 459 ////////////////////////////////////////////////////////////////////
//     Function: MemoryUsagePointers::get_age
//       Access: Published
//  Description: Returns the age of the nth pointer: the number of
//               seconds elapsed between the time it was allocated and
//               the time it was added to this set via a call to
//               MemoryUsage::get_pointers().
//////////////////////////////////////////////////////////////////// 2 4 this 3 3029  1 n 1 2800  
1061 0 0 6 1166 2793 0 0 0 2 4 this 3 3029  1 n 1 2800  
1062 0 0 4 1167 2803 0 0 254 ////////////////////////////////////////////////////////////////////
//     Function: MemoryUsagePointers::clear
//       Access: Published
//  Description: Empties the set of pointers.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2991  
1063 0 0 4 1168 2803 0 0 227 ////////////////////////////////////////////////////////////////////
//     Function: MemoryUsagePointers::output
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3029  3 out 1 2807  
1064 0 0 7 1170 3031 2413 0 219 ////////////////////////////////////////////////////////////////////
//     Function: ISubStream::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
1065 0 0 7 1170 3031 2413 0 219 ////////////////////////////////////////////////////////////////////
//     Function: ISubStream::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 3 6 source 1 2925  5 start 1 2897  3 end 1 2897  
1066 0 0 6 1171 3031 0 0 697 ////////////////////////////////////////////////////////////////////
//     Function: ISubStream::open
//       Access: Public
//  Description: Starts the SubStream reading from the indicated
//               source, with the first character being the character
//               at position "start" within the source, for end -
//               start total characters.  The character at "end"
//               within the source will never be read; this will
//               appear to be EOF.
//
//               If end is zero, it indicates that the ISubStream will
//               continue until the end of the source stream.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3031  6 source 1 2925  5 start 1 2897  3 end 1 2897  
1067 0 0 6 1172 3031 0 0 309 ////////////////////////////////////////////////////////////////////
//     Function: ISubStream::close
//       Access: Public
//  Description: Resets the SubStream to empty, but does not actually
//               close the source istream.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3031  
1068 0 0 7 1175 3032 2417 0 219 ////////////////////////////////////////////////////////////////////
//     Function: OSubStream::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
1069 0 0 7 1175 3032 2417 0 219 ////////////////////////////////////////////////////////////////////
//     Function: OSubStream::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 4 4 dest 1 2942  5 start 1 2897  3 end 1 2897  6 append 1 2810  
1070 0 0 6 1176 3032 0 0 689 ////////////////////////////////////////////////////////////////////
//     Function: OSubStream::open
//       Access: Public
//  Description: Starts the SubStream reading from the indicated
//               dest, with the first character being the character
//               at position "start" within the dest, for end -
//               start total characters.  The character at "end"
//               within the dest will never be read; this will
//               appear to be EOF.
//
//               If end is zero, it indicates that the OSubStream will
//               continue until the end of the dest stream.
//////////////////////////////////////////////////////////////////// 5 4 this 3 3032  4 dest 1 2942  5 start 1 2897  3 end 1 2897  6 append 1 2810  
1071 0 0 6 1177 3032 0 0 307 ////////////////////////////////////////////////////////////////////
//     Function: OSubStream::close
//       Access: Public
//  Description: Resets the SubStream to empty, but does not actually
//               close the dest ostream.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3032  
1072 0 0 7 1180 3033 2421 0 218 ////////////////////////////////////////////////////////////////////
//     Function: SubStream::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
1073 0 0 7 1180 3033 2421 0 218 ////////////////////////////////////////////////////////////////////
//     Function: SubStream::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 4 6 nested 1 2967  5 start 1 2897  3 end 1 2897  6 append 1 2810  
1074 0 0 6 1181 3033 0 0 534 ////////////////////////////////////////////////////////////////////
//     Function: SubStream::open
//       Access: Public
//  Description: Starts the SubStream reading and writing from the
//               indicated nested stream, within the indicated range.
//               "end" is the first character outside of the range.
//
//               If end is zero, it indicates that the SubStream will
//               continue until the end of the nested stream.
//////////////////////////////////////////////////////////////////// 5 4 this 3 3033  6 nested 1 2967  5 start 1 2897  3 end 1 2897  6 append 1 2810  
1075 0 0 6 1182 3033 0 0 308 ////////////////////////////////////////////////////////////////////
//     Function: SubStream::close
//       Access: Public
//  Description: Resets the SubStream to empty, but does not actually
//               close the nested ostream.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3033  
1076 0 0 4 1185 2803 0 0 464 ////////////////////////////////////////////////////////////////////
//     Function: OpenSSLWrapper::clear_certificates
//       Access: Public
//  Description: Removes all the certificates from the global store,
//               including the compiled-in certificates loaded from
//               ca_bundle_data.c.  You can add new certificates by
//               calling load_certificates().
//////////////////////////////////////////////////////////////////// 1 4 this 3 3034  
1077 0 0 6 1186 2800 0 0 793 ////////////////////////////////////////////////////////////////////
//     Function: OpenSSLWrapper::load_certificates
//       Access: Public
//  Description: Reads the PEM-formatted certificate(s) (delimited by
//               -----BEGIN CERTIFICATE----- and -----END
//               CERTIFICATE-----) from the indicated file and adds
//               them to the global store object, retrieved via
//               get_x509_store().
//
//               Returns the number of certificates read on success,
//               or 0 on failure.
//
//               You should call this only with trusted,
//               locally-stored certificates; not with certificates
//               received from an untrusted source.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3034  8 filename 1 2866  
1078 0 0 6 1187 2800 0 0 710 ////////////////////////////////////////////////////////////////////
//     Function: OpenSSLWrapper::load_certificates_from_pem_ram
//       Access: Public
//  Description: Reads a chain of trusted certificates from the
//               indicated data buffer and adds them to the X509_STORE
//               object.  The data buffer should be PEM-formatted.
//               Returns the number of certificates read on success,
//               or 0 on failure.
//
//               You should call this only with trusted,
//               locally-stored certificates; not with certificates
//               received from an untrusted source.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3034  4 data 1 2799  9 data_size 1 2796  
1079 0 0 6 1187 2800 0 0 710 ////////////////////////////////////////////////////////////////////
//     Function: OpenSSLWrapper::load_certificates_from_pem_ram
//       Access: Public
//  Description: Reads a chain of trusted certificates from the
//               indicated data buffer and adds them to the X509_STORE
//               object.  The data buffer should be PEM-formatted.
//               Returns the number of certificates read on success,
//               or 0 on failure.
//
//               You should call this only with trusted,
//               locally-stored certificates; not with certificates
//               received from an untrusted source.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3034  4 data 1 2799  
1080 0 0 6 1188 2800 0 0 710 ////////////////////////////////////////////////////////////////////
//     Function: OpenSSLWrapper::load_certificates_from_der_ram
//       Access: Public
//  Description: Reads a chain of trusted certificates from the
//               indicated data buffer and adds them to the X509_STORE
//               object.  The data buffer should be DER-formatted.
//               Returns the number of certificates read on success,
//               or 0 on failure.
//
//               You should call this only with trusted,
//               locally-stored certificates; not with certificates
//               received from an untrusted source.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3034  4 data 1 2799  9 data_size 1 2796  
1081 0 0 6 1188 2800 0 0 710 ////////////////////////////////////////////////////////////////////
//     Function: OpenSSLWrapper::load_certificates_from_der_ram
//       Access: Public
//  Description: Reads a chain of trusted certificates from the
//               indicated data buffer and adds them to the X509_STORE
//               object.  The data buffer should be DER-formatted.
//               Returns the number of certificates read on success,
//               or 0 on failure.
//
//               You should call this only with trusted,
//               locally-stored certificates; not with certificates
//               received from an untrusted source.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3034  4 data 1 2799  
1082 0 0 6 1189 3035 0 0 698 ////////////////////////////////////////////////////////////////////
//     Function: OpenSSLWrapper::get_x509_store
//       Access: Public
//  Description: Returns the global X509_STORE object.
//
//               It has to be a global object, because OpenSSL seems
//               to store some global pointers associated with this
//               object whether you want it to or not, and keeping
//               independent copies of a local X509_STORE object
//               doesn't seem to work that well.  So, we have one
//               store that keeps all certificates the application
//               might need.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3034  
1083 0 0 4 1190 2803 0 0 572 ////////////////////////////////////////////////////////////////////
//     Function: OpenSSLWrapper::notify_ssl_errors
//       Access: Public
//  Description: A convenience function that is itself a wrapper
//               around the OpenSSL convenience function to output the
//               recent OpenSSL errors.  This function sends the error
//               string to express_cat.warning().  If
//               REPORT_OPENSSL_ERRORS is not defined, the function
//               does nothing.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3034  
1084 0 0 4 1191 2803 0 0 326 ////////////////////////////////////////////////////////////////////
//     Function: OpenSSLWrapper::notify_debug_ssl_errors
//       Access: Public
//  Description: As notify_ssl_errors(), but sends the output to debug
//               instead of warning.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3034  
1085 0 0 6 1192 3034 0 0 235 ////////////////////////////////////////////////////////////////////
//     Function: OpenSSLWrapper::get_global_ptr
//       Access: Public, Static
//  Description: 
//////////////////////////////////////////////////////////////////// 0 
1086 0 0 7 1194 3037 2216 0 221 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
1087 0 0 6 1195 2810 0 0 651 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::open_read
//       Access: Published
//  Description: Opens the named Multifile on disk for reading.  The
//               Multifile index is read in, and the list of subfiles
//               becomes available; individual subfiles may then be
//               extracted or read, but the list of subfiles may not
//               be modified.
//
//               Also see the version of open_read() which accepts an
//               istream.  Returns true on success, false on failure.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3037  14 multifile_name 1 2866  6 offset 1 3014  
1088 0 0 6 1195 2810 0 0 629 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::open_read
//       Access: Public
//  Description: Opens an anonymous Multifile for reading using an
//               istream.  There must be seek functionality via
//               seekg() and tellg() on the istream.
//
//               If owns_pointer is true, then the Multifile assumes
//               ownership of the stream pointer and will delete it
//               when the multifile is closed, including if this
//               function returns false.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3037  16 multifile_stream 1 2925  12 owns_pointer 1 2810  6 offset 1 3014  
1089 0 0 6 1196 2810 0 0 734 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::open_write
//       Access: Published
//  Description: Opens the named Multifile on disk for writing.  If
//               there already exists a file by that name, it is
//               truncated.  The Multifile is then prepared for
//               accepting a brand new set of subfiles, which will be
//               written to the indicated filename.  Individual
//               subfiles may not be extracted or read.
//
//               Also see the version of open_write() which accepts an
//               ostream.  Returns true on success, false on failure.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3037  14 multifile_name 1 2866  
1090 0 0 6 1196 2810 0 0 630 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::open_write
//       Access: Public
//  Description: Opens an anonymous Multifile for writing using an
//               ostream.  There must be seek functionality via
//               seekp() and tellp() on the pstream.
//
//               If owns_pointer is true, then the Multifile assumes
//               ownership of the stream pointer and will delete it
//               when the multifile is closed, including if this
//               function returns false.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3037  16 multifile_stream 1 2807  12 owns_pointer 1 2810  
1091 0 0 6 1197 2810 0 0 680 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::open_read_write
//       Access: Published
//  Description: Opens the named Multifile on disk for reading and
//               writing.  If there already exists a file by that
//               name, its index is read.  Subfiles may be added or
//               removed, and the resulting changes will be written to
//               the named file.
//
//               Also see the version of open_read_write() which
//               accepts an iostream.  Returns true on success, false
//               on failure.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3037  14 multifile_name 1 2866  
1092 0 0 6 1197 2810 0 0 682 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::open_read_write
//       Access: Public
//  Description: Opens an anonymous Multifile for reading and writing
//               using an iostream.  There must be seek functionality
//               via seekg()/seekp() and tellg()/tellp() on the
//               iostream.
//
//               If owns_pointer is true, then the Multifile assumes
//               ownership of the stream pointer and will delete it
//               when the multifile is closed, including if this
//               function returns false.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3037  16 multifile_stream 1 2896  12 owns_pointer 1 2810  
1093 0 0 4 1198 2803 0 0 402 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::close
//       Access: Published
//  Description: Closes the Multifile if it is open.  All changes are
//               flushed to disk, and the file becomes invalid for
//               further operations until the next call to open().
//////////////////////////////////////////////////////////////////// 1 4 this 3 3037  
1094 0 0 6 1199 2866 0 0 304 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::get_multifile_name
//       Access: Published
//  Description: Returns the filename of the Multifile, if it is
//               available.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3038  
1095 0 0 4 1200 2803 0 0 471 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::set_multifile_name
//       Access: Published
//  Description: Replaces the filename of the Multifile.  This is
//               primarily used for documentation purposes only;
//               changing this name does not open the indicated file.
//               See open_read() or open_write() for that.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3037  14 multifile_name 1 2866  
1096 0 0 6 1201 2810 0 0 398 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::is_read_valid
//       Access: Published
//  Description: Returns true if the Multifile has been opened for
//               read mode and there have been no errors, and
//               individual Subfile contents may be extracted.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3038  
1097 0 0 6 1202 2810 0 0 407 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::is_write_valid
//       Access: Published
//  Description: Returns true if the Multifile has been opened for
//               write mode and there have been no errors, and
//               Subfiles may be added or removed from the Multifile.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3038  
1098 0 0 6 1203 2810 0 0 345 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::needs_repack
//       Access: Published
//  Description: Returns true if the Multifile index is suboptimal and
//               should be repacked.  Call repack() to achieve this.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3038  
1099 0 0 6 1204 2905 0 0 588 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::get_timestamp
//       Access: Published
//  Description: Returns the modification timestamp of the overall
//               Multifile.  This indicates the most recent date at
//               which subfiles were added or removed from the
//               Multifile.  Note that it is logically possible for an
//               individual subfile to have a more recent timestamp
//               than the overall timestamp.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3038  
1100 0 0 4 1205 2803 0 0 900 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::set_record_timestamp
//       Access: Published
//  Description: Sets the flag indicating whether timestamps should be
//               recorded within the Multifile or not.  The default is
//               true, indicating the Multifile will record timestamps
//               for the overall file and also for each subfile.  
//
//               If this is false, the Multifile will not record
//               timestamps internally.  In this case, the return
//               value from get_timestamp() or get_subfile_timestamp()
//               will be estimations.
//
//               You may want to set this false to minimize the
//               bitwise difference between independently-generated
//               Multifiles.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3037  16 record_timestamp 1 2810  
1101 0 0 6 1206 2810 0 0 388 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::get_record_timestamp
//       Access: Published
//  Description: Returns the flag indicating whether timestamps
//               should be recorded within the Multifile or not.  See
//               set_record_timestamp().
//////////////////////////////////////////////////////////////////// 1 4 this 3 3038  
1102 0 0 4 1207 2803 0 0 1220 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::set_scale_factor
//       Access: Published
//  Description: Changes the internal scale factor for this Multifile.
//
//               This is normally 1, but it may be set to any
//               arbitrary value (greater than zero) to support
//               Multifile archives that exceed 4GB, if necessary.
//               (Individual subfiles may still not exceed 4GB.)
//
//               All addresses within the file are rounded up to the
//               next multiple of _scale_factor, and zeros are written
//               to the file to fill the resulting gaps.  Then the
//               address is divided by _scale_factor and written out
//               as a 32-bit integer.  Thus, setting a scale factor of
//               2 supports up to 8GB files, 3 supports 12GB files,
//               etc.
//
//               Calling this function on an already-existing
//               Multifile will have no immediate effect until a
//               future call to repack() or close() (or until the
//               Multifile is destructed).
//////////////////////////////////////////////////////////////////// 2 4 this 3 3037  12 scale_factor 1 2796  
1103 0 0 6 1208 2796 0 0 321 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::get_scale_factor
//       Access: Published
//  Description: Returns the internal scale factor for this Multifile.
//               See set_scale_factor().
//////////////////////////////////////////////////////////////////// 1 4 this 3 3038  
1104 0 0 4 1209 2803 0 0 818 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::set_encryption_flag
//       Access: Published
//  Description: Sets the flag indicating whether subsequently-added
//               subfiles should be encrypted before writing them to
//               the multifile.  If true, subfiles will be encrypted;
//               if false (the default), they will be written without
//               encryption.
//
//               When true, subfiles will be encrypted with the
//               password specified by set_encryption_password().  It
//               is possible to apply a different password to
//               different files, but the resulting file can't be
//               mounted via VFS.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3037  4 flag 1 2810  
1105 0 0 6 1210 2810 0 0 430 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::get_encryption_flag
//       Access: Published
//  Description: Returns the flag indicating whether
//               subsequently-added subfiles should be encrypted
//               before writing them to the multifile.  See
//               set_encryption_flag().
//////////////////////////////////////////////////////////////////// 1 4 this 3 3038  
1106 0 0 4 1211 2803 0 0 696 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::set_encryption_password
//       Access: Published
//  Description: Specifies the password that will be used to encrypt
//               subfiles subsequently added to the multifile, if the
//               encryption flag is also set true (see
//               set_encryption_flag()).
//
//               It is possible to apply a different password to
//               different files, but the resulting file can't be
//               mounted via VFS.  Changing this value may cause an
//               implicit call to flush().
//////////////////////////////////////////////////////////////////// 2 4 this 3 3037  19 encryption_password 1 2799  
1107 0 0 6 1212 2799 0 0 395 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::get_encryption_password
//       Access: Published
//  Description: Returns the password that will be used to encrypt
//               subfiles subsequently added to the multifile.  See
//               set_encryption_password().
//////////////////////////////////////////////////////////////////// 1 4 this 3 3038  
1108 0 0 4 1213 2803 0 0 1073 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::set_encryption_algorithm
//       Access: Public
//  Description: Specifies the encryption algorithm that should be
//               used for future calls to add_subfile().  The default
//               is whatever is specified by the encryption-algorithm
//               config variable.  The complete set of available
//               algorithms is defined by the current version of
//               OpenSSL.
//
//               If an invalid algorithm is specified, there is no
//               immediate error return code, but flush() will fail
//               and the file will be invalid.
//
//               It is possible to apply a different encryption
//               algorithm to different files, and unlike the
//               password, this does not interfere with mounting the
//               multifile via VFS.  Changing this value may cause an
//               implicit call to flush().
//////////////////////////////////////////////////////////////////// 2 4 this 3 3037  20 encryption_algorithm 1 2799  
1109 0 0 6 1214 2799 0 0 331 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::get_encryption_algorithm
//       Access: Public
//  Description: Returns the encryption algorithm that was specified
//               by set_encryption_algorithm().
//////////////////////////////////////////////////////////////////// 1 4 this 3 3038  
1110 0 0 4 1215 2803 0 0 998 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::set_encryption_key_length
//       Access: Public
//  Description: Specifies the length of the key, in bits, that should
//               be used to encrypt the stream in future calls to
//               add_subfile().  The default is whatever is specified
//               by the encryption-key-length config variable.  
//
//               If an invalid key_length for the chosen algorithm is
//               specified, there is no immediate error return code,
//               but flush() will fail and the file will be invalid.
//
//               It is possible to apply a different key length to
//               different files, and unlike the password, this does
//               not interfere with mounting the multifile via VFS.
//               Changing this value may cause an implicit call to
//               flush().
//////////////////////////////////////////////////////////////////// 2 4 this 3 3037  21 encryption_key_length 1 2800  
1111 0 0 6 1216 2800 0 0 344 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::get_encryption_key_length
//       Access: Public
//  Description: Returns the encryption key length, in bits, that was
//               specified by set_encryption_key_length().
//////////////////////////////////////////////////////////////////// 1 4 this 3 3038  
1112 0 0 4 1217 2803 0 0 1174 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::set_encryption_iteration_count
//       Access: Public
//  Description: Specifies the number of times to repeatedly hash the
//               key before writing it to the stream in future calls
//               to add_subfile().  Its purpose is to make it
//               computationally more expensive for an attacker to
//               search the key space exhaustively.  This should be a
//               multiple of 1,000 and should not exceed about 65
//               million; the value 0 indicates just one application
//               of the hashing algorithm.
//
//               The default is whatever is specified by the
//               multifile-encryption-iteration-count config variable.
//
//               It is possible to apply a different iteration count
//               to different files, and unlike the password, this
//               does not interfere with mounting the multifile via
//               VFS.  Changing this value causes an implicit call to
//               flush().
//////////////////////////////////////////////////////////////////// 2 4 this 3 3037  26 encryption_iteration_count 1 2800  
1113 0 0 6 1218 2800 0 0 328 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::get_encryption_iteration_count
//       Access: Public
//  Description: Returns the value that was specified by
//               set_encryption_iteration_count().
//////////////////////////////////////////////////////////////////// 1 4 this 3 3038  
1114 0 0 6 1219 2799 0 0 983 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::add_subfile
//       Access: Published
//  Description: Adds a file on disk as a subfile to the Multifile.
//               The file named by filename will be read and added to
//               the Multifile at the next call to flush().  If there
//               already exists a subfile with the indicated name, it
//               is replaced without examining its contents (but see
//               also update_subfile).
//
//               Filename::set_binary() or set_text() must have been
//               called previously to specify the nature of the source
//               file.  If set_text() was called, the text flag will
//               be set on the subfile.
//
//               Returns the subfile name on success (it might have
//               been modified slightly), or empty string on failure.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3037  12 subfile_name 1 2799  8 filename 1 2866  17 compression_level 1 2800  
1115 0 0 6 1219 2799 0 0 1193 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::add_subfile
//       Access: Public
//  Description: Adds a file from a stream as a subfile to the Multifile.
//               The indicated istream will be read and its contents
//               added to the Multifile at the next call to flush().
//               The file will be added as a binary subfile.
//
//               Note that the istream must remain untouched and
//               unused by any other code until flush() is called.  At
//               that time, the Multifile will read the entire
//               contents of the istream from the current file
//               position to the end of the file.  Subsequently, the
//               Multifile will *not* close or delete the istream.  It
//               is the caller's responsibility to ensure that the
//               istream pointer does not destruct during the lifetime
//               of the Multifile.
//
//               Returns the subfile name on success (it might have
//               been modified slightly), or empty string on failure.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3037  12 subfile_name 1 2799  12 subfile_data 1 2846  17 compression_level 1 2800  
1116 0 0 6 1220 2799 0 0 775 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::update_subfile
//       Access: Published
//  Description: Adds a file on disk to the subfile.  If a subfile
//               already exists with the same name, its contents are
//               compared byte-for-byte to the disk file, and it is
//               replaced only if it is different; otherwise, the
//               multifile is left unchanged.
//
//               Filename::set_binary() or set_text() must have been
//               called previously to specify the nature of the source
//               file.  If set_text() was called, the text flag will
//               be set on the subfile.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3037  12 subfile_name 1 2799  8 filename 1 2866  17 compression_level 1 2800  
1117 0 0 6 1221 2810 0 0 1856 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::add_signature
//       Access: Published
//  Description: Adds a new signature to the Multifile.  This
//               signature associates the indicated certificate with
//               the current contents of the Multifile.  When the
//               Multifile is read later, the signature will still be
//               present only if the Multifile is unchanged; any
//               subsequent changes to the Multifile will
//               automatically invalidate and remove the signature.
//
//               The chain filename may be empty if the certificate
//               does not require an authenticating certificate chain
//               (e.g. because it is self-signed).
//
//               The specified private key must match the certificate,
//               and the Multifile must be open in read-write mode.
//               The private key is only used for generating the
//               signature; it is not written to the Multifile and
//               cannot be retrieved from the Multifile later.
//               (However, the certificate *can* be retrieved from the
//               Multifile later, to identify the entity that created
//               the signature.)
//
//               This implicitly causes a repack() operation if one is
//               needed.  Returns true on success, false on failure.
//
//               This flavor of add_signature() reads the certificate
//               and private key from a PEM-formatted file, for
//               instance as generated by the openssl command.  If the
//               private key file is password-encrypted, the third
//               parameter will be used as the password to decrypt it.
//////////////////////////////////////////////////////////////////// 5 4 this 3 3037  11 certificate 1 2866  5 chain 1 2866  4 pkey 1 2866  8 password 1 2799  
1118 0 0 6 1221 2810 0 0 1131 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::add_signature
//       Access: Published
//  Description: Adds a new signature to the Multifile.  This
//               signature associates the indicated certificate with
//               the current contents of the Multifile.  When the
//               Multifile is read later, the signature will still be
//               present only if the Multifile is unchanged; any
//               subsequent changes to the Multifile will
//               automatically invalidate and remove the signature.
//
//               This flavor of add_signature() reads the certificate,
//               private key, and certificate chain from the same
//               PEM-formatted file.  It takes the first private key
//               found as the intended key, and then uses the first
//               certificate found that matches that key as the
//               signing certificate.  Any other certificates in the
//               file are taken to be part of the chain.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3037  9 composite 1 2866  8 password 1 2799  
1119 0 0 6 1222 2800 0 0 921 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::get_num_signatures
//       Access: Published
//  Description: Returns the number of matching signatures found on
//               the Multifile.  These signatures may be iterated via
//               get_signature() and related methods.
//
//               A signature on this list is guaranteed to match the
//               Multifile contents, proving that the Multifile has
//               been unmodified since the signature was applied.
//               However, this does not guarantee that the certificate
//               itself is actually from who it says it is from; only
//               that it matches the Multifile contents.  See
//               validate_signature_certificate() to authenticate a
//               particular certificate.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3038  
1120 0 0 6 1223 2799 0 0 669 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::get_signature_subject_name
//       Access: Published
//  Description: Returns the "subject name" for the nth signature found
//               on the Multifile.  This is a string formatted
//               according to RFC2253 that should more-or-less
//               identify a particular certificate; when paired with
//               the public key (see get_signature_public_key()), it
//               can uniquely identify a certificate.  See the
//               comments in get_num_signatures().
//////////////////////////////////////////////////////////////////// 2 4 this 3 3038  1 n 1 2800  
1121 0 0 6 1224 2799 0 0 127 //               See the comments in get_num_signatures().
//////////////////////////////////////////////////////////////////// 2 4 this 3 3038  1 n 1 2800  
1122 0 0 6 1225 2799 0 0 691 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::get_signature_public_key
//       Access: Published
//  Description: Returns the public key used for the nth signature
//               found on the Multifile.  This is encoded in DER form
//               and returned as a string of hex digits.
//
//               This can be used, in conjunction with the subject
//               name (see get_signature_subject_name()), to uniquely
//               identify a particular certificate and its subsequent
//               reissues.  See the comments in get_num_signatures().
//////////////////////////////////////////////////////////////////// 2 4 this 3 3038  1 n 1 2800  
1123 0 0 4 1226 2803 0 0 415 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::print_signature_certificate
//       Access: Published
//  Description: Writes the certificate for the nth signature, in
//               user-readable verbose form, to the indicated stream.
//               See the comments in get_num_signatures().
//////////////////////////////////////////////////////////////////// 3 4 this 3 3038  1 n 1 2800  3 out 1 2807  
1124 0 0 4 1227 2803 0 0 398 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::write_signature_certificate
//       Access: Published
//  Description: Writes the certificate for the nth signature, in
//               PEM form, to the indicated stream.  See the comments
//               in get_num_signatures().
//////////////////////////////////////////////////////////////////// 3 4 this 3 3038  1 n 1 2800  3 out 1 2807  
1125 0 0 6 1228 2800 0 0 595 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::validate_signature_certificate
//       Access: Published
//  Description: Checks that the certificate used for the nth
//               signature is a valid, authorized certificate with
//               some known certificate authority.  Returns 0 if it
//               is valid, -1 if there is some error, or the
//               corresponding OpenSSL error code if it is invalid,
//               out-of-date, or self-signed.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3038  1 n 1 2800  
1126 0 0 6 1229 2810 0 0 1090 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::flush
//       Access: Published
//  Description: Writes all contents of the Multifile to disk.  Until
//               flush() is called, add_subfile() and remove_subfile()
//               do not actually do anything to disk.  At this point,
//               all of the recently-added subfiles are read and their
//               contents are added to the end of the Multifile, and
//               the recently-removed subfiles are marked gone from
//               the Multifile.
//
//               This may result in a suboptimal index.  To guarantee
//               that the index is written at the beginning of the
//               file, call repack() instead of flush().
//
//               It is not necessary to call flush() explicitly unless
//               you are concerned about reading the recently-added
//               subfiles immediately.
//
//               Returns true on success, false on failure.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3037  
1127 0 0 6 1230 2810 0 0 959 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::repack
//       Access: Published
//  Description: Forces a complete rewrite of the Multifile and all of
//               its contents, so that its index will appear at the
//               beginning of the file with all of the subfiles listed
//               in alphabetical order.  This is considered optimal
//               for reading, and is the standard configuration; but
//               it is not essential to do this.
//
//               It is only valid to call this if the Multifile was
//               opened using open_read_write() and an explicit
//               filename, rather than an iostream.  Also, we must
//               have write permission to the directory containing the
//               Multifile.
//
//               Returns true on success, false on failure.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3037  
1128 0 0 6 1231 2800 0 0 412 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::get_num_subfiles
//       Access: Published
//  Description: Returns the number of subfiles within the Multifile.
//               The subfiles may be accessed in alphabetical order by
//               iterating through [0 .. get_num_subfiles()).
//////////////////////////////////////////////////////////////////// 1 4 this 3 3038  
1129 0 0 6 1232 2800 0 0 370 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::find_subfile
//       Access: Published
//  Description: Returns the index of the subfile with the indicated
//               name, or -1 if the named subfile is not within the
//               Multifile.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3038  12 subfile_name 1 2799  
1130 0 0 6 1233 2810 0 0 461 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::has_directory
//       Access: Published
//  Description: Returns true if the indicated subfile name is the
//               directory prefix to one or more files within the
//               Multifile.  That is, the Multifile contains at least
//               one file named "subfile_name/...".
//////////////////////////////////////////////////////////////////// 2 4 this 3 3038  12 subfile_name 1 2799  
1131 0 0 6 1234 2810 0 0 755 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::scan_directory
//       Access: Published
//  Description: Considers subfile_name to be the name of a
//               subdirectory within the Multifile, but not a file
//               itself; fills the given vector up with the sorted list
//               of subdirectories or files within the named
//               directory.
//
//               Note that directories do not exist explicitly within
//               a Multifile; this just checks for the existence of
//               files with the given initial prefix.
//
//               Returns true if successful, false otherwise.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3038  8 contents 1 2902  12 subfile_name 1 2799  
1132 0 0 4 1235 2803 0 0 770 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::remove_subfile
//       Access: Published
//  Description: Removes the nth subfile from the Multifile.  This
//               will cause all subsequent index numbers to decrease
//               by one.  The file will not actually be removed from
//               the disk until the next call to flush().
//
//               Note that this does not actually remove the data from
//               the indicated subfile; it simply removes it from the
//               index.  The Multifile will not be reduced in size
//               after this operation, until the next call to
//               repack().
//////////////////////////////////////////////////////////////////// 2 4 this 3 3037  5 index 1 2800  
1133 0 0 6 1235 2810 0 0 824 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::remove_subfile
//       Access: Published
//  Description: Removes the named subfile from the Multifile, if it
//               exists; returns true if successfully removed, or
//               false if it did not exist in the first place.  The
//               file will not actually be removed from the disk until
//               the next call to flush().
//
//               Note that this does not actually remove the data from
//               the indicated subfile; it simply removes it from the
//               index.  The Multifile will not be reduced in size
//               after this operation, until the next call to
//               repack().
//////////////////////////////////////////////////////////////////// 2 4 this 3 3037  12 subfile_name 1 2799  
1134 0 0 6 1236 2799 0 0 263 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::get_subfile_name
//       Access: Published
//  Description: Returns the name of the nth subfile.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3038  5 index 1 2800  
1135 0 0 6 1237 2796 0 0 433 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::get_subfile_length
//       Access: Published
//  Description: Returns the uncompressed data length of the nth
//               subfile.  This might return 0 if the subfile has
//               recently been added and flush() has not yet been
//               called.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3038  5 index 1 2800  
1136 0 0 6 1238 2905 0 0 567 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::get_subfile_timestamp
//       Access: Published
//  Description: Returns the modification time of the nth
//               subfile.  If this is called on an older .mf file,
//               which did not store individual timestamps in the file
//               (or if get_record_timestamp() is false), this will
//               return the modification time of the overall
//               multifile.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3038  5 index 1 2800  
1137 0 0 6 1239 2810 0 0 372 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::is_subfile_compressed
//       Access: Published
//  Description: Returns true if the indicated subfile has been
//               compressed when stored within the archive, false
//               otherwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3038  5 index 1 2800  
1138 0 0 6 1240 2810 0 0 370 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::is_subfile_encrypted
//       Access: Published
//  Description: Returns true if the indicated subfile has been
//               encrypted when stored within the archive, false
//               otherwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3038  5 index 1 2800  
1139 0 0 6 1241 2810 0 0 647 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::is_subfile_text
//       Access: Published
//  Description: Returns true if the indicated subfile represents text
//               data, or false if it represents binary data.  If the
//               file is text data, it may have been processed by
//               end-of-line conversion when it was added.  (But the
//               actual bits in the multifile will represent the
//               standard Unix end-of-line convention, e.g. \n instead
//               of \r\n.)
//////////////////////////////////////////////////////////////////// 2 4 this 3 3038  5 index 1 2800  
1140 0 0 6 1242 3014 0 0 688 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::get_index_end
//       Access: Published
//  Description: Returns the first byte that is guaranteed to follow
//               any index byte already written to disk in the
//               Multifile.
//
//               This number is largely meaningless in many cases, but
//               if needs_repack() is false, and the file is flushed,
//               this will indicate the number of bytes in the header
//               + index.  Everything at this byte position and later
//               will be actual data.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3038  
1141 0 0 6 1243 3014 0 0 653 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::get_subfile_internal_start
//       Access: Published
//  Description: Returns the starting byte position within the
//               Multifile at which the indicated subfile begins.
//               This may be used, with get_subfile_internal_length(),
//               for low-level access to the subfile, but usually it
//               is better to use open_read_subfile() instead (which
//               automatically decrypts and/or uncompresses the
//               subfile data).
//////////////////////////////////////////////////////////////////// 2 4 this 3 3038  5 index 1 2800  
1142 0 0 6 1244 2796 0 0 639 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::get_subfile_internal_length
//       Access: Published
//  Description: Returns the number of bytes the indicated subfile
//               consumes within the archive.  For compressed
//               subfiles, this will generally be smaller than
//               get_subfile_length(); for encrypted (but
//               noncompressed) subfiles, it may be slightly
//               different, for noncompressed and nonencrypted
//               subfiles, it will be equal.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3038  5 index 1 2800  
1143 0 0 6 1245 2799 0 0 316 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::read_subfile
//       Access: Published
//  Description: Returns a string that contains the entire contents of
//               the indicated subfile.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3037  5 index 1 2800  
1144 0 0 6 1246 2846 0 0 1184 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::open_read_subfile
//       Access: Published
//  Description: Returns an istream that may be used to read the
//               indicated subfile.  You may seek() within this
//               istream to your heart's content; even though it will
//               be a reference to the already-opened pfstream of the
//               Multifile itself, byte 0 appears to be the beginning
//               of the subfile and EOF appears to be the end of the
//               subfile.
//
//               The returned istream will have been allocated via
//               new; you should pass the pointer to
//               close_read_subfile() when you are finished with it to
//               delete it and release its resources.
//
//               Any future calls to repack() or close() (or the
//               Multifile destructor) will invalidate all currently
//               open subfile pointers.
//
//               The return value will be NULL if the stream cannot be
//               opened for some reason.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3037  5 index 1 2800  
1145 0 0 4 1247 2803 0 0 531 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::close_read_subfile
//       Access: Published, Static
//  Description: Closes a file opened by a previous call to
//               open_read_subfile().  This really just deletes the
//               istream pointer, but it is recommended to use this
//               interface instead of deleting it explicitly, to help
//               work around compiler issues.
//////////////////////////////////////////////////////////////////// 1 6 stream 1 2846  
1146 0 0 6 1248 2810 0 0 300 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::extract_subfile
//       Access: Published
//  Description: Extracts the nth subfile into a file with the given
//               name.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3037  5 index 1 2800  8 filename 1 2866  
1147 0 0 6 1249 2810 0 0 276 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::extract_subfile_to
//       Access: Public
//  Description: Extracts the nth subfile to the indicated ostream.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3037  5 index 1 2800  3 out 1 2807  
1148 0 0 6 1250 2810 0 0 858 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::compare_subfile
//       Access: Published
//  Description: Performs a byte-for-byte comparison of the indicated
//               file on disk with the nth subfile.  Returns true if
//               the files are equivalent, or false if they are
//               different (or the file is missing).
//
//               If Filename::set_binary() or set_text() has already
//               been called, it specifies the nature of the source
//               file.  If this is different from the text flag of the
//               subfile, the comparison will always return false.
//               If this has not been specified, it will be set from
//               the text flag of the subfile.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3037  5 index 1 2800  8 filename 1 2866  
1149 0 0 4 1251 2803 0 0 217 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::output
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3038  3 out 1 2807  
1150 0 0 4 1252 2803 0 0 263 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::ls
//       Access: Published
//  Description: Shows a list of all subfiles within the Multifile.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3038  3 out 1 2807  
1151 0 0 6 1253 2799 0 0 346 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::get_magic_number
//       Access: Published, Static
//  Description: Returns a string with the first n bytes written to a
//               Multifile, to identify it as a Multifile.
//////////////////////////////////////////////////////////////////// 0 
1152 0 0 4 1254 2803 0 0 1041 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::set_header_prefix
//       Access: Published
//  Description: Sets the string which is written to the Multifile
//               before the Multifile header.  This string must begin
//               with a hash mark and end with a newline character;
//               and if it includes embedded newline characters, each
//               one must be followed by a hash mark.  If these
//               conditions are not initially true, the string will be
//               modified as necessary to make it so.
//
//               This is primarily useful as a simple hack to allow
//               p3d applications to be run directly from the command
//               line on Unix-like systems.
//
//               The return value is true if successful, or false on
//               failure (for instance, because the header prefix
//               violates the above rules).
//////////////////////////////////////////////////////////////////// 2 4 this 3 3037  13 header_prefix 1 2799  
1153 0 0 6 1255 2799 0 0 345 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::get_header_prefix
//       Access: Published
//  Description: Returns the string that preceded the Multifile header
//               on the file, if any.  See set_header_prefix().
//////////////////////////////////////////////////////////////////// 1 4 this 3 3038  
1154 0 0 7 1257 3042 2500 0 221 ////////////////////////////////////////////////////////////////////
//     Function: Namable::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 3040  
1155 0 0 7 1257 3042 2500 0 216 ////////////////////////////////////////////////////////////////////
//     Function: Namable::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 12 initial_name 1 2799  
1156 0 0 6 1258 3042 0 0 229 ////////////////////////////////////////////////////////////////////
//     Function: Namable::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3042  5 other 1 3040  
1157 0 0 4 1259 2803 0 0 213 ////////////////////////////////////////////////////////////////////
//     Function: Namable::set_name
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3042  4 name 1 2799  
1158 0 0 4 1260 2803 0 0 251 ////////////////////////////////////////////////////////////////////
//     Function: Namable::clear_name
//       Access: Public
//  Description: Resets the Namable's name to empty.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3042  
1159 0 0 6 1261 2810 0 0 311 ////////////////////////////////////////////////////////////////////
//     Function: Namable::has_name
//       Access: Public
//  Description: Returns true if the Namable has a nonempty name set,
//               false if the name is empty.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3040  
1160 0 0 6 1262 2799 0 0 213 ////////////////////////////////////////////////////////////////////
//     Function: Namable::get_name
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 3040  
1161 0 0 4 1263 2803 0 0 380 ////////////////////////////////////////////////////////////////////
//     Function: Namable::output
//       Access: Public
//  Description: Outputs the Namable.  This function simply writes the
//               name to the output stream; most Namable derivatives
//               will probably redefine this.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3040  3 out 1 2807  
1162 0 0 7 1264 2917 2157 0 0 0 
1163 0 0 7 1267 3008 2509 0 232 ////////////////////////////////////////////////////////////////////
//     Function: SubfileInfo::Default Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 0 
1164 0 0 7 1267 3008 2509 0 224 ////////////////////////////////////////////////////////////////////
//     Function: SubfileInfo::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 3 4 file 1 3012  5 start 1 3014  4 size 1 2907  
1165 0 0 7 1267 3008 2509 0 224 ////////////////////////////////////////////////////////////////////
//     Function: SubfileInfo::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 3 8 filename 1 2866  5 start 1 3014  4 size 1 2907  
1166 0 0 7 1267 3008 2509 0 229 ////////////////////////////////////////////////////////////////////
//     Function: SubfileInfo::Copy Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 copy 1 3019  
1167 0 0 6 1268 3008 0 0 0 2 4 this 3 3008  4 copy 1 3019  
1168 0 0 6 1269 2810 0 0 322 ////////////////////////////////////////////////////////////////////
//     Function: SubfileInfo::is_empty
//       Access: Published
//  Description: Returns true if this SubfileInfo doesn't define any
//               file, false if it has real data.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3019  
1169 0 0 7 1270 3012 0 0 273 ////////////////////////////////////////////////////////////////////
//     Function: SubfileInfo::get_file
//       Access: Published
//  Description: Returns the FileReference that represents this file.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3019  
1170 0 0 6 1271 2866 0 0 252 ////////////////////////////////////////////////////////////////////
//     Function: SubfileInfo::get_filename
//       Access: Published
//  Description: A shortcut to the filename.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3019  
1171 0 0 6 1272 3014 0 0 305 ////////////////////////////////////////////////////////////////////
//     Function: SubfileInfo::get_start
//       Access: Published
//  Description: Returns the offset within the file at which this file
//               data begins.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3019  
1172 0 0 6 1273 2907 0 0 339 ////////////////////////////////////////////////////////////////////
//     Function: SubfileInfo::get_size
//       Access: Published
//  Description: Returns the number of consecutive bytes, beginning at
//               get_start(), that correspond to this file data.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3019  
1173 0 0 4 1274 2803 0 0 219 ////////////////////////////////////////////////////////////////////
//     Function: SubfileInfo::output
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3019  3 out 1 2807  
1174 0 0 6 1277 3045 0 0 0 1 4 this 3 3043  
1175 0 0 7 1278 2871 1728 0 0 1 4 this 3 3043  
1176 0 0 6 1279 2866 0 0 418 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFile::get_original_filename
//       Access: Published
//  Description: Returns the original filename as it was used to
//               locate this VirtualFile.  This is usually, but not
//               always, the same string returned by get_filename().
//////////////////////////////////////////////////////////////////// 1 4 this 3 3043  
1177 0 0 6 1280 2810 0 0 280 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFile::has_file
//       Access: Published, Virtual
//  Description: Returns true if this file exists, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3043  
1178 0 0 6 1281 2810 0 0 354 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFile::is_directory
//       Access: Published, Virtual
//  Description: Returns true if this file represents a directory (and
//               scan_directory() may be called), false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3043  
1179 0 0 6 1282 2810 0 0 355 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFile::is_regular_file
//       Access: Published, Virtual
//  Description: Returns true if this file represents a regular file
//               (and read_file() may be called), false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3043  
1180 0 0 6 1283 2810 0 0 406 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFile::is_writable
//       Access: Published, Virtual
//  Description: Returns true if this file may be written to, which
//               implies write_file() may be called (unless it is a
//               directory instead of a regular file).
//////////////////////////////////////////////////////////////////// 1 4 this 3 3043  
1181 0 0 6 1284 2810 0 0 454 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFile::delete_file
//       Access: Public
//  Description: Attempts to delete this file or directory.  This can
//               remove a single file or an empty directory.  It will
//               not remove a nonempty directory.  Returns true on
//               success, false on failure.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3013  
1182 0 0 6 1285 2810 0 0 964 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFile::rename_file
//       Access: Public
//  Description: Attempts to move or rename this file or directory.
//               If the original file is an ordinary file, it will
//               quietly replace any already-existing file in the new
//               filename (but not a directory).  If the original file
//               is a directory, the new filename must not already
//               exist.
//
//               If the file is a directory, the new filename must be
//               within the same mount point.  If the file is an
//               ordinary file, the new filename may be anywhere; but
//               if it is not within the same mount point then the
//               rename operation is automatically performed as a
//               two-step copy-and-delete operation.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3013  8 new_file 1 3013  
1183 0 0 6 1286 2810 0 0 362 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFile::copy_file
//       Access: Public
//  Description: Attempts to copy the contents of this file to the
//               indicated file.  Returns true on success, false on
//               failure.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3013  8 new_file 1 3013  
1184 0 0 7 1287 3046 2216 0 522 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFile::scan_directory
//       Access: Published
//  Description: If the file represents a directory (that is,
//               is_directory() returns true), this returns the list
//               of files within the directory at the current time.
//               Returns NULL if the file is not a directory or if the
//               directory cannot be read.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3043  
1185 0 0 4 1288 2803 0 0 219 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFile::output
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3043  3 out 1 2807  
1186 0 0 4 1289 2803 0 0 287 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFile::ls
//       Access: Published
//  Description: If the file represents a directory, lists its
//               contents.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3043  3 out 1 2807  
1187 0 0 4 1290 2803 0 0 335 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFile::ls_all
//       Access: Published
//  Description: If the file represents a directory, recursively lists
//               its contents and those of all subdirectories.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3043  3 out 1 2807  
1188 0 0 6 1291 2799 0 0 271 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFile::read_file
//       Access: Public
//  Description: Returns the entire contents of the file as a string.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3043  11 auto_unwrap 1 2810  
1189 0 0 6 1292 2846 0 0 449 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFile::open_read_file
//       Access: Published, Virtual
//  Description: Opens the file for reading.  Returns a newly
//               allocated istream on success (which you should
//               eventually delete when you are done reading).
//               Returns NULL on failure.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3043  11 auto_unwrap 1 2810  
1190 0 0 4 1293 2803 0 0 519 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFile::close_read_file
//       Access: Published
//  Description: Closes a file opened by a previous call to
//               open_read_file().  This really just deletes the
//               istream pointer, but it is recommended to use this
//               interface instead of deleting it explicitly, to help
//               work around compiler issues.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3043  6 stream 1 2846  
1191 0 0 6 1294 2810 0 0 627 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFile::was_read_successful
//       Access: Published, Virtual
//  Description: Call this method after a reading the istream returned
//               by open_read_file() to completion.  If it returns
//               true, the file was read completely and without error;
//               if it returns false, there may have been some errors
//               or a truncated file read.  This is particularly
//               likely if the stream is a VirtualFileHTTP.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3043  
1192 0 0 6 1295 2810 0 0 307 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFile::write_file
//       Access: Public
//  Description: Writes the entire contents of the file as a string,
//               if it is writable.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3013  4 data 1 2799  9 auto_wrap 1 2810  
1193 0 0 6 1296 2807 0 0 450 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFile::open_write_file
//       Access: Published, Virtual
//  Description: Opens the file for writing.  Returns a newly
//               allocated ostream on success (which you should
//               eventually delete when you are done writing).
//               Returns NULL on failure.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3013  9 auto_wrap 1 2810  8 truncate 1 2810  
1194 0 0 6 1297 2807 0 0 452 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFile::open_append_file
//       Access: Published, Virtual
//  Description: Works like open_write_file(), but the file is opened
//               in append mode.  Like open_write_file, the returned
//               pointer should eventually be passed to
//               close_write_file().
//////////////////////////////////////////////////////////////////// 1 4 this 3 3013  
1195 0 0 4 1298 2803 0 0 521 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFile::close_write_file
//       Access: Published
//  Description: Closes a file opened by a previous call to
//               open_write_file().  This really just deletes the
//               ostream pointer, but it is recommended to use this
//               interface instead of deleting it explicitly, to help
//               work around compiler issues.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3013  6 stream 1 2807  
1196 0 0 6 1299 2896 0 0 456 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFile::open_read_write_file
//       Access: Published, Virtual
//  Description: Opens the file for writing.  Returns a newly
//               allocated iostream on success (which you should
//               eventually delete when you are done writing).
//               Returns NULL on failure.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3013  8 truncate 1 2810  
1197 0 0 6 1300 2896 0 0 472 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFile::open_read_append_file
//       Access: Published, Virtual
//  Description: Works like open_read_write_file(), but the file is opened
//               in append mode.  Like open_read_write_file, the returned
//               pointer should eventually be passed to
//               close_read_write_file().
//////////////////////////////////////////////////////////////////// 1 4 this 3 3013  
1198 0 0 4 1301 2803 0 0 532 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFile::close_read_write_file
//       Access: Published
//  Description: Closes a file opened by a previous call to
//               open_read_write_file().  This really just deletes the
//               iostream pointer, but it is recommended to use this
//               interface instead of deleting it explicitly, to help
//               work around compiler issues.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3013  6 stream 1 2896  
1199 0 0 6 1302 2907 0 0 343 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFile::get_file_size
//       Access: Published, Virtual
//  Description: Returns the current size on disk (or wherever it is)
//               of the file before it has been opened.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3043  
1200 0 0 6 1302 2907 0 0 508 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFile::get_file_size
//       Access: Published, Virtual
//  Description: Returns the current size on disk (or wherever it is)
//               of the already-open file.  Pass in the stream that
//               was returned by open_read_file(); some
//               implementations may require this stream to determine
//               the size.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3043  6 stream 1 2846  
1201 0 0 6 1303 2905 0 0 776 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFile::get_timestamp
//       Access: Published, Virtual
//  Description: Returns a time_t value that represents the time the
//               file was last modified, to within whatever precision
//               the operating system records this information (on a
//               Windows95 system, for instance, this may only be
//               accurate to within 2 seconds).
//
//               If the timestamp cannot be determined, either because
//               it is not supported by the operating system or
//               because there is some error (such as file not found),
//               returns 0.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3043  
1202 0 0 6 1304 2810 0 0 629 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFile::get_system_info
//       Access: Published, Virtual
//  Description: Populates the SubfileInfo structure with the data
//               representing where the file actually resides on disk,
//               if this is knowable.  Returns true if the file might
//               reside on disk, and the info is populated, or false
//               if it does not (or it is not known where the file
//               resides), in which case the info is meaningless.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3013  4 info 1 3008  
1203 0 0 7 1305 2917 2157 0 0 0 
1204 0 0 7 1308 2917 2157 0 0 0 
1205 0 0 6 1311 3045 0 0 304 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFileMount::get_file_system
//       Access: Public
//  Description: Returns the file system this mount object is attached
//               to.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3047  
1206 0 0 6 1312 2866 0 0 410 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFileMount::get_mount_point
//       Access: Public
//  Description: Returns the name of the directory within the virtual
//               file system that this mount object is attached to.
//               This directory name will end with a slash.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3047  
1207 0 0 6 1313 2800 0 0 333 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFileMount::get_mount_flags
//       Access: Public
//  Description: Returns the set of flags passed by the user to the
//               VirtualFileSystem::mount() command.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3047  
1208 0 0 4 1314 2803 0 0 230 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFileMount::output
//       Access: Public, Virtual
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3047  3 out 1 2807  
1209 0 0 4 1315 2803 0 0 229 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFileMount::write
//       Access: Public, Virtual
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3047  3 out 1 2807  
1210 0 0 7 1316 2917 2157 0 0 0 
1211 0 0 7 1318 3049 2354 0 235 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFileMountMultifile::Constructor
//       Access: Public
//  Description: 
//////////////////////////////////////////////////////////////////// 1 9 multifile 1 3037  
1212 0 0 7 1319 3037 2216 0 319 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFileMountMultifile::get_multifile
//       Access: Public
//  Description: Returns the Multifile pointer that this mount object
//               is based on.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3050  
1213 0 0 7 1320 2917 2157 0 0 0 
1214 0 0 7 1322 3052 2553 0 233 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFileMountRamdisk::Constructor
//       Access: Public
//  Description: 
//////////////////////////////////////////////////////////////////// 0 
1215 0 0 7 1323 2917 2157 0 0 0 
1216 0 0 7 1326 3053 2557 0 232 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFileMountSystem::Constructor
//       Access: Public
//  Description: 
//////////////////////////////////////////////////////////////////// 1 17 physical_filename 1 2866  
1217 0 0 6 1327 2866 0 0 357 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFileMountSystem::get_physical_filename
//       Access: Public
//  Description: Returns the name of the source file on the OS
//               filesystem of the directory or file that is mounted.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3054  
1218 0 0 7 1328 2917 2157 0 0 0 
1219 0 0 7 1331 3058 2354 0 312 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSimple::get_mount
//       Access: Published, Virtual
//  Description: Returns the VirtualFileMount this file is associated
//               with.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3056  
1220 0 0 6 1332 2810 0 0 429 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSimple::is_implicit_pz_file
//       Access: Published
//  Description: Returns true if this file is a .pz file that should
//               be implicitly decompressed on load, or false if it is
//               not a .pz file or if it should not be decompressed.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3056  
1221 0 0 7 1333 2917 2157 0 0 0 
1222 0 0 7 1336 3059 2358 0 225 ////////////////////////////////////////////////////////////////////
//     Function: TemporaryFile::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 8 filename 1 2866  
1223 0 0 7 1337 2917 2157 0 0 0 
1224 0 0 7 1339 3060 2567 0 226 ////////////////////////////////////////////////////////////////////
//     Function: IDecompressStream::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
1225 0 0 7 1339 3060 2567 0 226 ////////////////////////////////////////////////////////////////////
//     Function: IDecompressStream::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 6 source 1 2846  11 owns_source 1 2810  
1226 0 0 6 1340 3060 0 0 220 ////////////////////////////////////////////////////////////////////
//     Function: IDecompressStream::open
//       Access: Public
//  Description: 
//////////////////////////////////////////////////////////////////// 3 4 this 3 3060  6 source 1 2846  11 owns_source 1 2810  
1227 0 0 6 1341 3060 0 0 342 ////////////////////////////////////////////////////////////////////
//     Function: IDecompressStream::close
//       Access: Public
//  Description: Resets the ZStream to empty, but does not actually
//               close the source istream unless owns_source was true.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3060  
1228 0 0 7 1344 3061 2571 0 224 ////////////////////////////////////////////////////////////////////
//     Function: OCompressStream::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
1229 0 0 7 1344 3061 2571 0 224 ////////////////////////////////////////////////////////////////////
//     Function: OCompressStream::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 dest 1 2807  9 owns_dest 1 2810  17 compression_level 1 2800  
1230 0 0 6 1345 3061 0 0 218 ////////////////////////////////////////////////////////////////////
//     Function: OCompressStream::open
//       Access: Public
//  Description: 
//////////////////////////////////////////////////////////////////// 4 4 this 3 3061  4 dest 1 2807  9 owns_dest 1 2810  17 compression_level 1 2800  
1231 0 0 6 1346 3061 0 0 336 ////////////////////////////////////////////////////////////////////
//     Function: OCompressStream::close
//       Access: Public
//  Description: Resets the ZStream to empty, but does not actually
//               close the dest ostream unless owns_dest was true.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3061  
1232 0 0 6 1349 2800 0 0 270 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFileList::get_num_files
//       Access: Published
//  Description: Returns the number of files in the list.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3062  
1233 0 0 7 1350 3013 2539 0 258 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFileList::get_file
//       Access: Published
//  Description: Returns the nth file in the list.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3062  1 n 1 2800  
1234 0 0 7 1351 3013 2539 0 261 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFileList::operator []
//       Access: Published
//  Description: Returns the nth file in the list.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3062  1 n 1 2800  
1235 0 0 6 1352 2800 0 0 261 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFileList::size
//       Access: Published
//  Description: Returns the number of files in the list.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3062  
1236 0 0 7 1353 3046 2216 0 0 2 4 this 3 3046  5 other 1 3062  
1237 0 0 7 1354 3046 2216 0 0 2 4 this 3 3062  5 other 1 3062  
1238 0 0 7 1356 3045 2579 0 230 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 0 
1239 0 0 6 1359 2810 0 0 1505 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::mount
//       Access: Published
//  Description: Mounts the indicated system file or directory at the
//               given mount point.  If the named file is a directory,
//               mounts the directory.  If the named file is a
//               Multifile, mounts it as a Multifile.  Returns true on
//               success, false on failure.
//
//               A given system directory may be mounted to multiple
//               different mount point, and the same mount point may
//               share multiple system directories.  In the case of
//               ambiguities (that is, two different files with
//               exactly the same full pathname), the most-recently
//               mounted system wins.
//
//               The filename specified as the first parameter must
//               refer to a real, physical filename on disk; it cannot
//               be a virtual file already appearing within the vfs
//               filespace.  However, it is possible to mount such a
//               file; see mount_loop() for this.
////
//               Note that a mounted VirtualFileSystem directory is
//               fully case-sensitive, unlike the native Windows file
//               system, so you must refer to files within the virtual
//               file system with exactly the right case.
//////////////////////////////////////////////////////////////////// 5 4 this 3 3045  17 physical_filename 1 2866  11 mount_point 1 2866  5 flags 1 2800  8 password 1 2799  
1240 0 0 6 1359 2810 0 0 297 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::mount
//       Access: Published
//  Description: Mounts the indicated Multifile at the given mount
//               point.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3045  9 multifile 1 3037  11 mount_point 1 2866  5 flags 1 2800  
1241 0 0 6 1359 2810 0 0 465 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::mount
//       Access: Published
//  Description: Adds the given VirtualFileMount object to the mount
//               list.  This is a lower-level function that the other
//               flavors of mount(); it requires you to create a
//               VirtualFileMount object specifically.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3045  5 mount 1 3058  11 mount_point 1 2866  5 flags 1 2800  
1242 0 0 6 1360 2810 0 0 971 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::mount_loop
//       Access: Published
//  Description: This is similar to mount(), but it receives the name
//               of a Multifile that already appears within the
//               virtual file system.  It can be used to mount a
//               Multifile that is itself hosted within a
//               virtually-mounted Multifile.
//
//               This interface can also be used to mount physical
//               files (that appear within the virtual filespace), but
//               it cannot be used to mount directories.  Use mount()
//               if you need to mount a directory.
//
//               Note that there is additional overhead, in the form
//               of additional buffer copies of the data, for
//               recursively mounting a multifile like this.
//////////////////////////////////////////////////////////////////// 5 4 this 3 3045  16 virtual_filename 1 2866  11 mount_point 1 2866  5 flags 1 2800  8 password 1 2799  
1243 0 0 6 1361 2800 0 0 402 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::unmount
//       Access: Published
//  Description: Unmounts all appearances of the indicated directory
//               name or multifile name from the file system.  Returns
//               the number of appearances unmounted.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3045  17 physical_filename 1 2866  
1244 0 0 6 1361 2800 0 0 379 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::unmount
//       Access: Published
//  Description: Unmounts all appearances of the indicated Multifile
//               from the file system.  Returns the number of
//               appearances unmounted.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3045  9 multifile 1 3037  
1245 0 0 6 1361 2800 0 0 374 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::unmount
//       Access: Published
//  Description: Unmounts the indicated VirtualFileMount object
//               from the file system.  Returns the number of
//               appearances unmounted.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3045  5 mount 1 3058  
1246 0 0 6 1362 2800 0 0 388 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::unmount_point
//       Access: Published
//  Description: Unmounts all systems attached to the given mount
//               point from the file system.  Returns the number of
//               appearances unmounted.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3045  11 mount_point 1 2866  
1247 0 0 6 1363 2800 0 0 329 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::unmount_all
//       Access: Published
//  Description: Unmounts all files from the file system.  Returns the
//               number of systems unmounted.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3045  
1248 0 0 6 1364 2800 0 0 304 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::get_num_mounts
//       Access: Published
//  Description: Returns the number of individual mounts in the
//               system.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3064  
1249 0 0 7 1365 3058 2354 0 264 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::get_mount
//       Access: Published
//  Description: Returns the nth mount in the system.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3064  1 n 1 2800  
1250 0 0 6 1366 2810 0 0 429 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::chdir
//       Access: Published
//  Description: Changes the current directory.  This is used to
//               resolve relative pathnames in get_file() and/or
//               find_file().  Returns true if successful, false
//               otherwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3045  13 new_directory 1 2866  
1251 0 0 7 1367 2871 1728 0 275 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::get_cwd
//       Access: Published
//  Description: Returns the current directory name.  See chdir().
//////////////////////////////////////////////////////////////////// 1 4 this 3 3064  
1252 0 0 6 1368 2810 0 0 544 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::make_directory
//       Access: Published
//  Description: Attempts to create a directory within the file
//               system.  Returns true on success, false on failure
//               (for instance, because the parent directory does not
//               exist, or is read-only).  If the directory already
//               existed prior to this call, returns true.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3045  8 filename 1 2866  
1253 0 0 6 1369 2810 0 0 424 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::make_directory_full
//       Access: Published
//  Description: Attempts to create a directory within the file
//               system.  Will also create any intervening directories
//               needed.  Returns true on success, false on failure.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3045  8 filename 1 2866  
1254 0 0 7 1370 3013 2539 0 902 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::get_file
//       Access: Published
//  Description: Looks up the file by the indicated name in the file
//               system.  Returns a VirtualFile pointer representing
//               the file if it is found, or NULL if it is not.
//
//               If status_only is true, the file will be checked for
//               existence and length and so on, but the returned
//               file's contents cannot be read.  This is an
//               optimization which is especially important for
//               certain mount types, for instance HTTP, for which
//               opening a file to determine its status is
//               substantially less expensive than opening it to read
//               its contents.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3064  8 filename 1 2866  11 status_only 1 2810  
1255 0 0 7 1371 3013 2539 0 592 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::create_file
//       Access: Published
//  Description: Attempts to create a file by the indicated name in
//               the filesystem, if possible, and returns it.  If a
//               file by this name already exists, returns the same
//               thing as get_file().  If the filename is located
//               within a read-only directory, or the directory
//               doesn't exist, returns NULL.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3045  8 filename 1 2866  
1256 0 0 7 1372 3013 2539 0 436 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::find_file
//       Access: Published
//  Description: Uses the indicated search path to find the file
//               within the file system.  Returns the first occurrence
//               of the file found, or NULL if the file cannot be
//               found.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3064  8 filename 1 2866  10 searchpath 1 2884  11 status_only 1 2810  
1257 0 0 6 1373 2810 0 0 467 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::delete_file
//       Access: Public
//  Description: Attempts to delete the indicated file or directory.
//               This can remove a single file or an empty directory.
//               It will not remove a nonempty directory.  Returns
//               true on success, false on failure.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3045  8 filename 1 2866  
1258 0 0 6 1374 2810 0 0 980 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::rename_file
//       Access: Public
//  Description: Attempts to move or rename the indicated file or
//               directory.  If the original file is an ordinary file,
//               it will quietly replace any already-existing file in
//               the new filename (but not a directory).  If the
//               original file is a directory, the new filename must
//               not already exist.
//
//               If the file is a directory, the new filename must be
//               within the same mount point.  If the file is an
//               ordinary file, the new filename may be anywhere; but
//               if it is not within the same mount point then the
//               rename operation is automatically performed as a
//               two-step copy-and-delete operation.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3045  13 orig_filename 1 2866  12 new_filename 1 2866  
1259 0 0 6 1375 2810 0 0 377 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::copy_file
//       Access: Public
//  Description: Attempts to copy the contents of the indicated file
//               to the indicated file.  Returns true on success,
//               false on failure.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3045  13 orig_filename 1 2866  12 new_filename 1 2866  
1260 0 0 6 1376 2810 0 0 440 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::resolve_filename
//       Access: Public
//  Description: Searches the given search path for the filename.  If
//               it is found, updates the filename to the full
//               pathname found and returns true; otherwise, returns
//               false.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3064  8 filename 1 2871  10 searchpath 1 2884  17 default_extension 1 2799  
1261 0 0 6 1377 2800 0 0 672 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::find_all_files
//       Access: Public
//  Description: Searches all the directories in the search list for
//               the indicated file, in order.  Fills up the results
//               list with *all* of the matching filenames found, if
//               any.  Returns the number of matches found.
//
//               It is the responsibility of the the caller to clear
//               the results list first; otherwise, the newly-found
//               files will be appended to the list.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3064  8 filename 1 2866  10 searchpath 1 2884  7 results 1 2889  
1262 0 0 6 1378 2810 0 0 302 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::exists
//       Access: Published
//  Description: Convenience function; returns true if the named file
//               exists.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3064  8 filename 1 2866  
1263 0 0 6 1379 2810 0 0 327 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::is_directory
//       Access: Published
//  Description: Convenience function; returns true if the named file
//               exists and is a directory.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3064  8 filename 1 2866  
1264 0 0 6 1380 2810 0 0 333 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::is_regular_file
//       Access: Published
//  Description: Convenience function; returns true if the named file
//               exists and is a regular file.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3064  8 filename 1 2866  
1265 0 0 7 1381 3046 2216 0 528 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::scan_directory
//       Access: Published
//  Description: If the file represents a directory (that is,
//               is_directory() returns true), this returns the list
//               of files within the directory at the current time.
//               Returns NULL if the file is not a directory or if the
//               directory cannot be read.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3064  8 filename 1 2866  
1266 0 0 4 1382 2803 0 0 307 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::ls
//       Access: Published
//  Description: Convenience function; lists the files within the
//               indicated directory.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3064  8 filename 1 2866  
1267 0 0 4 1383 2803 0 0 362 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::ls_all
//       Access: Published
//  Description: Convenience function; lists the files within the
//               indicated directory, and all files below,
//               recursively.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3064  8 filename 1 2866  
1268 0 0 4 1384 2803 0 0 303 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::write
//       Access: Published
//  Description: Print debugging information.
//               (e.g. from Python or gdb prompt).
//////////////////////////////////////////////////////////////////// 2 4 this 3 3064  3 out 1 2807  
1269 0 0 6 1385 3045 0 0 773 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::get_global_ptr
//       Access: Published, Static
//  Description: Returns the default global VirtualFileSystem.  You
//               may create your own personal VirtualFileSystem
//               objects and use them for whatever you like, but Panda
//               will attempt to load models and stuff from this
//               default object.
//
//               Initially, the global VirtualFileSystem is set up to
//               mount the OS filesystem to root; i.e. it is
//               equivalent to the OS filesystem.  This may be
//               subsequently adjusted by the user.
//////////////////////////////////////////////////////////////////// 0 
1270 0 0 6 1386 2793 0 0 665 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::read_file
//       Access: Published
//  Description: Convenience function; returns the entire contents of
//               the indicated file as a string.
//
//               If auto_unwrap is true, an explicitly-named .pz file
//               is automatically decompressed and the decompressed
//               contents are returned.  This is different than
//               vfs-implicit-pz, which will automatically decompress
//               a file if the extension .pz is *not* given.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3064  8 filename 1 2866  11 auto_unwrap 1 2810  
1271 0 0 6 1387 2846 0 0 750 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::open_read_file
//       Access: Published
//  Description: Convenience function; returns a newly allocated
//               istream if the file exists and can be read, or NULL
//               otherwise.  Does not return an invalid istream.
//
//               If auto_unwrap is true, an explicitly-named .pz file
//               is automatically decompressed and the decompressed
//               contents are returned.  This is different than
//               vfs-implicit-pz, which will automatically decompress
//               a file if the extension .pz is *not* given.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3064  8 filename 1 2866  11 auto_unwrap 1 2810  
1272 0 0 4 1388 2803 0 0 533 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::close_read_file
//       Access: Published, Static
//  Description: Closes a file opened by a previous call to
//               open_read_file().  This really just deletes the
//               istream pointer, but it is recommended to use this
//               interface instead of deleting it explicitly, to help
//               work around compiler issues.
//////////////////////////////////////////////////////////////////// 1 6 stream 1 2846  
1273 0 0 6 1389 2793 0 0 0 4 4 this 3 3045  8 filename 1 2866  4 data 1 2793  9 auto_wrap 1 2810  
1274 0 0 6 1390 2807 0 0 658 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::open_write_file
//       Access: Published
//  Description: Convenience function; returns a newly allocated
//               ostream if the file exists and can be written, or
//               NULL otherwise.  Does not return an invalid ostream.
//
//               If auto_wrap is true, an explicitly-named .pz file is
//               automatically compressed while writing.  If truncate
//               is true, the file is truncated to zero length before
//               writing.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3045  8 filename 1 2866  9 auto_wrap 1 2810  8 truncate 1 2810  
1275 0 0 6 1391 2807 0 0 449 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::open_append_file
//       Access: Published
//  Description: Works like open_write_file(), but the file is opened
//               in append mode.  Like open_write_file, the returned
//               pointer should eventually be passed to
//               close_write_file().
//////////////////////////////////////////////////////////////////// 2 4 this 3 3045  8 filename 1 2866  
1276 0 0 4 1392 2803 0 0 535 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::close_write_file
//       Access: Published, Static
//  Description: Closes a file opened by a previous call to
//               open_write_file().  This really just deletes the
//               ostream pointer, but it is recommended to use this
//               interface instead of deleting it explicitly, to help
//               work around compiler issues.
//////////////////////////////////////////////////////////////////// 1 6 stream 1 2807  
1277 0 0 6 1393 2896 0 0 425 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::open_read_write_file
//       Access: Published
//  Description: Convenience function; returns a newly allocated
//               iostream if the file exists and can be written, or
//               NULL otherwise.  Does not return an invalid iostream.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3045  8 filename 1 2866  8 truncate 1 2810  
1278 0 0 6 1394 2896 0 0 469 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::open_read_append_file
//       Access: Published
//  Description: Works like open_read_write_file(), but the file is opened
//               in append mode.  Like open_read_write_file, the returned
//               pointer should eventually be passed to
//               close_read_write_file().
//////////////////////////////////////////////////////////////////// 2 4 this 3 3045  8 filename 1 2866  
1279 0 0 4 1395 2803 0 0 546 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::close_read_write_file
//       Access: Published, Static
//  Description: Closes a file opened by a previous call to
//               open_read_write_file().  This really just deletes the
//               iostream pointer, but it is recommended to use this
//               interface instead of deleting it explicitly, to help
//               work around compiler issues.
//////////////////////////////////////////////////////////////////// 1 6 stream 1 2896  
1280 0 0 6 1397 2798 0 0 246 ////////////////////////////////////////////////////////////////////
//     Function: TrueClock::get_long_time, Win32 implementation
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3066  
1281 0 0 6 1398 2798 0 0 247 ////////////////////////////////////////////////////////////////////
//     Function: TrueClock::get_short_time, Win32 implementation
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3066  
1282 0 0 6 1399 2798 0 0 251 ////////////////////////////////////////////////////////////////////
//     Function: TrueClock::get_short_raw_time, Win32 implementation
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3066  
1283 0 0 6 1400 2800 0 0 675 ////////////////////////////////////////////////////////////////////
//     Function: TrueClock::get_error_count
//       Access: Published
//  Description: Returns the number of clock errors that have
//               been detected.  Each time a clock error is detected,
//               in which the value returned by either of the above
//               methods is suspect, the value returned by this method
//               will be incremented.  Applications can monitor this
//               value and react, for instance, by resynchronizing
//               their clocks each time this value changes.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3067  
1284 0 0 6 1401 3066 0 0 309 ////////////////////////////////////////////////////////////////////
//     Function: TrueClock::get_global_ptr
//       Access: Published, Static
//  Description: Returns a pointer to the one TrueClock object in
//               the world.
//////////////////////////////////////////////////////////////////// 0 
1285 0 0 6 1402 2810 0 0 0 2 4 this 3 3067  4 mask 1 2963  
1286 0 0 7 1404 3069 2624 0 268 ////////////////////////////////////////////////////////////////////
//     Function: Patchfile::Constructor
//       Access: Public
//  Description: Create a patch file and initializes internal data
//////////////////////////////////////////////////////////////////// 0 
1287 0 0 7 1404 3069 2624 0 257 ////////////////////////////////////////////////////////////////////
//     Function: Patchfile::Constructor
//       Access: Public
//  Description: Create patch file with buffer to patch
//////////////////////////////////////////////////////////////////// 1 6 buffer 1 3070  
1288 0 0 6 1406 2810 0 0 680 ////////////////////////////////////////////////////////////////////
//     Function: Patchfile::build
//       Access: Public
//  Description:
//               This implementation uses the "greedy differencing
//               algorithm" described in the masters thesis
//               "Differential Compression: A Generalized Solution
//               for Binary Files" by Randal C. Burns (p.13).
//               For an original file of size M and a new file of
//               size N, this algorithm is O(M) in space and
//               O(M*N) (worst-case) in time.
//               return false on error
//////////////////////////////////////////////////////////////////// 4 4 this 3 3069  9 file_orig 1 2871  8 file_new 1 2871  10 patch_name 1 2871  
1289 0 0 6 1407 2800 0 0 449 ////////////////////////////////////////////////////////////////////
//     Function: Patchfile::read_header
//       Access: Published
//  Description: Opens the patch file for reading, and gets the header
//               information from the file but does not begin to do
//               any real work.  This can be used to query the data
//               stored in the patch.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3069  10 patch_file 1 2866  
1290 0 0 6 1408 2800 0 0 329 ////////////////////////////////////////////////////////////////////
//     Function: Patchfile::initiate
//       Access: Published
//  Description: Set up to apply the patch to the file (original
//               file and patch are destroyed in the process).
//////////////////////////////////////////////////////////////////// 3 4 this 3 3069  10 patch_file 1 2866  4 file 1 2866  
1291 0 0 6 1408 2800 0 0 366 ////////////////////////////////////////////////////////////////////
//     Function: Patchfile::initiate
//       Access: Published
//  Description: Set up to apply the patch to the file.  In this form,
//               neither the original file nor the patch file are
//               destroyed.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3069  10 patch_file 1 2866  9 orig_file 1 2866  11 target_file 1 2866  
1292 0 0 6 1409 2800 0 0 660 ////////////////////////////////////////////////////////////////////
//     Function: Patchfile::run
//       Access: Published
//  Description: Perform one buffer's worth of patching
//               Returns EU_ok while patching
//               Returns EU_success when done
//               If error happens will return one of:
//               EU_error_abort : Patching has not been initiated
//               EU_error_file_invalid : file is corrupted
//               EU_error_invalid_checksum : incompatible patch file
//               EU_error_write_file_rename : could not rename file
//////////////////////////////////////////////////////////////////// 1 4 this 3 3069  
1293 0 0 6 1410 2810 0 0 418 ////////////////////////////////////////////////////////////////////
//     Function: Patchfile::apply
//       Access: Public
//  Description: Patches the entire file in one call
//               returns true on success and false on error
//
//               This version will delete the patch file and overwrite
//               the original file.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3069  10 patch_file 1 2871  4 file 1 2871  
1294 0 0 6 1410 2810 0 0 368 ////////////////////////////////////////////////////////////////////
//     Function: Patchfile::apply
//       Access: Public
//  Description: Patches the entire file in one call
//               returns true on success and false on error
//
//               This version will not delete any files.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3069  10 patch_file 1 2871  9 orig_file 1 2871  11 target_file 1 2866  
1295 0 0 6 1411 3004 0 0 368 ////////////////////////////////////////////////////////////////////
//     Function: Patchfile::get_progress
//       Access: Published
//  Description: Returns a value in the range 0..1, representing the
//               amount of progress through the patchfile, during a
//               session.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3071  
1296 0 0 4 1412 2803 0 0 685 ////////////////////////////////////////////////////////////////////
//     Function: Patchfile::set_allow_multifile
//       Access: Published
//  Description: If this flag is set true, the Patchfile will make a
//               special case for patching Panda Multifiles, if
//               detected, and attempt to patch them on a
//               subfile-by-subfile basis.  If this flag is false, the
//               Patchfile will always patch the file on a full-file
//               basis.
//
//               This has effect only when building patches; it is not
//               used for applying patches.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3069  15 allow_multifile 1 2810  
1297 0 0 6 1413 2810 0 0 256 ////////////////////////////////////////////////////////////////////
//     Function: Patchfile::get_allow_multifile
//       Access: Published
//  Description: See set_allow_multifile().
//////////////////////////////////////////////////////////////////// 1 4 this 3 3069  
1298 0 0 4 1414 2803 0 0 230 ////////////////////////////////////////////////////////////////////
//     Function: Patchfile::set_footprint_length
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3069  6 length 1 2800  
1299 0 0 6 1415 2800 0 0 230 ////////////////////////////////////////////////////////////////////
//     Function: Patchfile::get_footprint_length
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 3069  
1300 0 0 4 1416 2803 0 0 232 ////////////////////////////////////////////////////////////////////
//     Function: Patchfile::reset_footprint_length
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 3069  
1301 0 0 6 1417 2810 0 0 391 ////////////////////////////////////////////////////////////////////
//     Function: Patchfile::has_source_hash
//       Access: Published
//  Description: Returns true if the MD5 hash for the source file is
//               known.  (Some early versions of the patch file did
//               not store this information.)
//////////////////////////////////////////////////////////////////// 1 4 this 3 3071  
1302 0 0 6 1418 3027 0 0 267 ////////////////////////////////////////////////////////////////////
//     Function: Patchfile::get_source_hash
//       Access: Published
//  Description: Returns the MD5 hash for the source file.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3071  
1303 0 0 6 1419 3027 0 0 310 ////////////////////////////////////////////////////////////////////
//     Function: Patchfile::get_result_hash
//       Access: Published
//  Description: Returns the MD5 hash for the file after the patch has
//               been applied.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3071  
1304 0 0 7 1422 3075 2641 0 0 1 5 other 1 3073  
1305 0 0 7 1422 3075 2641 0 0 2 4 name 1 2799  10 maxEntries 1 2800  
1306 0 0 4 1424 2803 0 0 0 3 4 this 3 3075  4 name 1 2799  10 maxEntries 1 2800  
1307 0 0 4 1425 2803 0 0 0 1 4 this 3 3075  
1308 0 0 4 1426 2803 0 0 0 2 4 this 3 3075  3 tag 1 2799  
1309 0 0 4 1427 2803 0 0 0 1 4 this 3 3075  
1310 0 0 4 1427 2803 0 0 0 2 4 this 3 3075  3 tag 1 2799  
1311 0 0 6 1428 2798 0 0 110 // Don't call any of the following during timing:
// (Because they are slow, not because anything will break). 1 4 this 3 3073  
1312 0 0 4 1429 2803 0 0 0 1 3 out 1 2807  
1313 0 0 4 1430 2803 0 0 0 2 4 this 3 3073  3 out 1 2807  
1314 0 0 4 1431 2803 0 0 0 1 3 out 1 2807  
1315 0 0 4 1432 2803 0 0 0 2 4 this 3 3073  3 out 1 2807  
1316 0 0 6 1434 2810 0 0 327 ////////////////////////////////////////////////////////////////////
//     Function: WeakPointerToVoid::was_deleted
//       Access: Published
//  Description: Returns true if the object we are pointing to has
//               been deleted, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3076  
1317 0 0 6 1435 2810 0 0 328 ////////////////////////////////////////////////////////////////////
//     Function: WeakPointerToVoid::is_valid_pointer
//       Access: Published
//  Description: Returns true if the pointer is not null and the
//               object has not been deleted.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3076  
1318 0 0 6 1438 2810 0 0 608 ////////////////////////////////////////////////////////////////////
//     Function: WindowsRegistry::set_string_value
//       Access: Published, Static
//  Description: Sets the registry key to the indicated value as a
//               string.  The supplied string value is automatically
//               converted from whatever encoding is set by
//               TextEncoder::set_default_encoding() and written as a
//               Unicode string.  The registry key must already exist
//               prior to calling this function.
//////////////////////////////////////////////////////////////////// 4 3 key 1 2799  4 name 1 2799  5 value 1 2799  2 rl 1 2784  
1319 0 0 6 1439 2810 0 0 400 ////////////////////////////////////////////////////////////////////
//     Function: WindowsRegistry::set_int_value
//       Access: Published, Static
//  Description: Sets the registry key to the indicated value as an
//               integer.  The registry key must already exist prior
//               to calling this function.
//////////////////////////////////////////////////////////////////// 4 3 key 1 2799  4 name 1 2799  5 value 1 2800  2 rl 1 2784  
1320 0 0 6 1441 2785 0 0 355 ////////////////////////////////////////////////////////////////////
//     Function: WindowsRegistry::get_key_type
//       Access: Published, Static
//  Description: Returns the type of the indicated key, or T_none if
//               the key is not known or is some unsupported type.
//////////////////////////////////////////////////////////////////// 3 3 key 1 2799  4 name 1 2799  2 rl 1 2784  
1321 0 0 6 1442 2799 0 0 597 ////////////////////////////////////////////////////////////////////
//     Function: WindowsRegistry::get_string_value
//       Access: Published, Static
//  Description: Returns the value associated with the indicated
//               registry key, assuming it is a string value.  The
//               string value is automatically encoded using
//               TextEncoder::get_default_encoding().  If the key is
//               not defined or is not a string type value,
//               default_value is returned instead.
//////////////////////////////////////////////////////////////////// 4 3 key 1 2799  4 name 1 2799  13 default_value 1 2799  2 rl 1 2784  
1322 0 0 6 1443 2800 0 0 478 ////////////////////////////////////////////////////////////////////
//     Function: WindowsRegistry::get_int_value
//       Access: Published, Static
//  Description: Returns the value associated with the indicated
//               registry key, assuming it is an integer value.  If
//               the key is not defined or is not an integer type
//               value, default_value is returned instead.
//////////////////////////////////////////////////////////////////// 4 3 key 1 2799  4 name 1 2799  13 default_value 1 2800  2 rl 1 2784  
1323 0 0 6 958 3078 0 0 92 // Returns the configure object for accessing config variables from a
// scripting language. 0 
1324 0 0 6 971 2799 0 0 0 2 6 source 1 2799  17 compression_level 1 2800  
1325 0 0 6 972 2799 0 0 0 1 6 source 1 2799  
1326 0 0 6 973 2810 0 0 0 3 6 source 1 2866  4 dest 1 2866  17 compression_level 1 2800  
1327 0 0 6 974 2810 0 0 0 2 6 source 1 2866  4 dest 1 2866  
1328 0 0 6 975 2810 0 0 0 3 6 source 1 2846  4 dest 1 2807  17 compression_level 1 2800  
1329 0 0 6 976 2810 0 0 0 2 6 source 1 2846  4 dest 1 2807  
1330 0 0 6 977 2810 0 0 0 2 6 source 1 2846  4 dest 1 2807  
1331 0 0 6 1092 2799 0 0 0 5 6 source 1 2799  8 password 1 2799  9 algorithm 1 2799  10 key_length 1 2800  15 iteration_count 1 2800  
1332 0 0 6 1093 2799 0 0 0 2 6 source 1 2799  8 password 1 2799  
1333 0 0 6 1094 2810 0 0 0 6 6 source 1 2866  4 dest 1 2866  8 password 1 2799  9 algorithm 1 2799  10 key_length 1 2800  15 iteration_count 1 2800  
1334 0 0 6 1095 2810 0 0 0 3 6 source 1 2866  4 dest 1 2866  8 password 1 2799  
1335 0 0 6 1096 2810 0 0 0 6 6 source 1 2846  4 dest 1 2807  8 password 1 2799  9 algorithm 1 2799  10 key_length 1 2800  15 iteration_count 1 2800  
1336 0 0 6 1097 2810 0 0 0 3 6 source 1 2846  4 dest 1 2807  8 password 1 2799  
1337 0 0 6 1099 2799 0 0 185 ////////////////////////////////////////////////////////////////////
//     Function: error_to_text
//  Description:
//////////////////////////////////////////////////////////////////// 1 3 err 1 2753  
1338 0 0 6 1100 2800 0 0 0 0 
1339 0 0 6 1101 2799 0 0 191 ////////////////////////////////////////////////////////////////////
//     Function: handle_socket_error
//  Description:
//////////////////////////////////////////////////////////////////// 0 
1340 0 0 6 1102 2800 0 0 0 0 
1341 0 0 6 1420 2799 0 0 0 4 8 password 1 2799  4 salt 1 2799  5 iters 1 2800  6 keylen 1 2800  
420
2659 11 CPTA_double 0 2105345 11 CPTA_double 11 CPTA_double 0 0 2660 0 0 0 0 0 0 0 0 0 0

2660 29 ConstPointerToArray< double > 0 141313 29 ConstPointerToArray< double > 29 ConstPointerToArray< double > 0 0 0 1 1347 1357 0 9 1348 1349 1350 1351 1352 1353 1354 1355 1356 0 0 1 0 2661 0 0 0 0 0

2661 28 PointerToArrayBase< double > 0 26625 28 PointerToArrayBase< double > 28 PointerToArrayBase< double > 0 0 0 0 1346 0 0 0 0 1 0 2662 0 0 0 0 0

2662 49 PointerToBase< ReferenceCountedVector< double > > 0 43009 49 PointerToBase< ReferenceCountedVector< double > > 49 PointerToBase< ReferenceCountedVector< double > > 0 0 0 0 0 0 2 1344 1345 0 0 1 0 2663 0 0 0 0 0

2663 13 PointerToVoid 0 43009 13 PointerToVoid 13 PointerToVoid 0 0 0 0 0 0 2 1342 1343 0 0 1 0 2664 0 0 0 0 635
////////////////////////////////////////////////////////////////////
//       Class : PointerToVoid
// Description : This is the non-template part of the base class for
//               PointerTo and ConstPointerTo.  It is necessary so we
//               can keep a pointer to a non-template class within the
//               ReferenceCount object, to implement weak reference
//               pointers--we need to have something to clean up when
//               the ReferenceCount object destructs.
//
//               This is the base class for PointerToBase<T>.
////////////////////////////////////////////////////////////////////

2664 10 MemoryBase 0 2049 10 MemoryBase 10 MemoryBase 0 0 0 0 0 0 0 0 0 0 0 0 704
////////////////////////////////////////////////////////////////////
//       Class : MemoryBase
// Description : This class is intended to be the base class of all
//               objects in Panda that might be allocated and deleted
//               via the new and delete operators.  It redefines these
//               operators to provide some memory tracking support.
//
//               We used to try to override the global operator new
//               and delete methods, but that seems to cause problems
//               when including header files for C++-based system
//               libraries (such as are found on OSX).
////////////////////////////////////////////////////////////////////

2665 10 CPTA_float 0 2105345 10 CPTA_float 10 CPTA_float 0 0 2666 0 0 0 0 0 0 0 0 0 0

2666 28 ConstPointerToArray< float > 0 141313 28 ConstPointerToArray< float > 28 ConstPointerToArray< float > 0 0 0 1 1361 1371 0 9 1362 1363 1364 1365 1366 1367 1368 1369 1370 0 0 1 0 2667 0 0 0 0 0

2667 27 PointerToArrayBase< float > 0 26625 27 PointerToArrayBase< float > 27 PointerToArrayBase< float > 0 0 0 0 1360 0 0 0 0 1 0 2668 0 0 0 0 0

2668 48 PointerToBase< ReferenceCountedVector< float > > 0 43009 48 PointerToBase< ReferenceCountedVector< float > > 48 PointerToBase< ReferenceCountedVector< float > > 0 0 0 0 0 0 2 1358 1359 0 0 1 0 2663 0 0 0 0 0

2669 8 CPTA_int 0 2105345 8 CPTA_int 8 CPTA_int 0 0 2670 0 0 0 0 0 0 0 0 0 0

2670 26 ConstPointerToArray< int > 0 141313 26 ConstPointerToArray< int > 26 ConstPointerToArray< int > 0 0 0 1 1375 1385 0 9 1376 1377 1378 1379 1380 1381 1382 1383 1384 0 0 1 0 2671 0 0 0 0 0

2671 25 PointerToArrayBase< int > 0 26625 25 PointerToArrayBase< int > 25 PointerToArrayBase< int > 0 0 0 0 1374 0 0 0 0 1 0 2672 0 0 0 0 0

2672 46 PointerToBase< ReferenceCountedVector< int > > 0 43009 46 PointerToBase< ReferenceCountedVector< int > > 46 PointerToBase< ReferenceCountedVector< int > > 0 0 0 0 0 0 2 1372 1373 0 0 1 0 2663 0 0 0 0 0

2673 10 CPTA_uchar 0 2105345 10 CPTA_uchar 10 CPTA_uchar 0 0 2674 0 0 0 0 0 0 0 0 0 0

2674 36 ConstPointerToArray< unsigned char > 0 141313 36 ConstPointerToArray< unsigned char > 36 ConstPointerToArray< unsigned char > 0 0 0 1 1389 1399 0 9 1390 1391 1392 1393 1394 1395 1396 1397 1398 0 0 1 0 2675 0 0 0 0 0

2675 35 PointerToArrayBase< unsigned char > 0 26625 35 PointerToArrayBase< unsigned char > 35 PointerToArrayBase< unsigned char > 0 0 0 0 1388 0 0 0 0 1 0 2676 0 0 0 0 0

2676 56 PointerToBase< ReferenceCountedVector< unsigned char > > 0 43009 56 PointerToBase< ReferenceCountedVector< unsigned char > > 56 PointerToBase< ReferenceCountedVector< unsigned char > > 0 0 0 0 0 0 2 1386 1387 0 0 1 0 2663 0 0 0 0 0

2677 17 ConfigDeclaration 0 43009 17 ConfigDeclaration 17 ConfigDeclaration 0 0 0 0 0 0 23 1401 1402 1403 1404 1405 1406 1407 1408 1409 1410 1411 1412 1413 1414 1415 1416 1417 1418 1419 1420 1421 1422 1423 0 0 1 0 2678 0 0 0 0 486
////////////////////////////////////////////////////////////////////
//       Class : ConfigDeclaration
// Description : A single declaration of a config variable, typically
//               defined as one line in a .prc file,
//               e.g. "show-frame-rate-meter 1".  This is really just
//               a pairing of a string name (actually, a
//               ConfigVariableCore pointer) to a string value.
////////////////////////////////////////////////////////////////////

2678 11 ConfigFlags 0 141313 11 ConfigFlags 11 ConfigFlags 0 0 0 0 1400 0 0 0 0 0 0 2 2679 2680 414
////////////////////////////////////////////////////////////////////
//       Class : ConfigFlags
// Description : This class is the base class of both ConfigVariable
//               and ConfigVariableCore.  It exists only to provide a
//               convenient name scoping for some enumerated values
//               common to both classes.
////////////////////////////////////////////////////////////////////

2679 9 ValueType 0 794624 22 ConfigFlags::ValueType 22 ConfigFlags::ValueType 2678 0 0 0 0 0 0 0 0 0 11 12 VT_undefined 25 ConfigFlags::VT_undefined 0
0 7 VT_list 20 ConfigFlags::VT_list 0
1 9 VT_string 22 ConfigFlags::VT_string 0
2 11 VT_filename 24 ConfigFlags::VT_filename 0
3 7 VT_bool 20 ConfigFlags::VT_bool 0
4 6 VT_int 19 ConfigFlags::VT_int 0
5 9 VT_double 22 ConfigFlags::VT_double 0
6 7 VT_enum 20 ConfigFlags::VT_enum 0
7 14 VT_search_path 27 ConfigFlags::VT_search_path 0
8 8 VT_int64 21 ConfigFlags::VT_int64 0
9 8 VT_color 21 ConfigFlags::VT_color 0
10 0 0

2680 13 VariableFlags 0 794624 26 ConfigFlags::VariableFlags 26 ConfigFlags::VariableFlags 2678 0 0 0 0 0 0 0 0 0 5 18 F_trust_level_mask 31 ConfigFlags::F_trust_level_mask 141
// Trust level.  We have the bottom twelve bits reserved for a
// trust level indicator; then the open and closed bits are a
// special case.
4095 6 F_open 19 ConfigFlags::F_open 0
4096 8 F_closed 21 ConfigFlags::F_closed 0
8192 9 F_dynamic 22 ConfigFlags::F_dynamic 171
// F_dynamic means that the variable name is generated dynamically
// (possibly from a very large pool) and should not be included in
// the normal list of variable names.
16384 9 F_dconfig 22 ConfigFlags::F_dconfig 162
// F_dconfig means that the variable was constructed from the
// legacy DConfig system, rather than directly by the user.  You
// shouldn't pass this in directly.
32768 0 0

2681 10 ConfigPage 0 43009 10 ConfigPage 10 ConfigPage 0 0 0 0 0 0 25 1424 1425 1426 1427 1428 1429 1430 1431 1432 1433 1434 1435 1436 1437 1438 1439 1440 1441 1442 1443 1444 1445 1446 1447 1448 0 0 0 0 0 493
////////////////////////////////////////////////////////////////////
//       Class : ConfigPage
// Description : A page of ConfigDeclarations that may be loaded or
//               unloaded.  Typically this represents a single .prc
//               file that is read from disk at runtime, but it may
//               also represent a list of declarations built up
//               by application code and explicitly loaded.
////////////////////////////////////////////////////////////////////

2682 17 ConfigPageManager 0 43009 17 ConfigPageManager 17 ConfigPageManager 0 0 0 0 0 0 19 1449 1450 1451 1452 1453 1454 1455 1456 1457 1458 1459 1460 1461 1462 1463 1464 1465 1466 1467 0 0 1 0 2678 0 0 0 0 334
////////////////////////////////////////////////////////////////////
//       Class : ConfigPageManager
// Description : A global object that maintains the set of ConfigPages
//               everywhere in the world, and keeps them in sorted
//               order.
////////////////////////////////////////////////////////////////////

2683 14 ConfigVariable 0 26625 14 ConfigVariable 14 ConfigVariable 0 0 0 1 1480 1481 0 20 1482 1483 1484 1485 1486 1487 1488 1489 1490 1491 1492 1493 1494 1495 1496 1497 1498 1499 1500 1501 0 0 1 0 2684 0 0 0 0 709
////////////////////////////////////////////////////////////////////
//       Class : ConfigVariable
// Description : This is a generic, untyped ConfigVariable.  It is
//               also the base class for the typed ConfigVariables,
//               and contains all of the code common to
//               ConfigVariables of all types (except
//               ConfigVariableList, which is a bit of a special
//               case).
//
//               Mostly, this class serves as a thin wrapper around
//               ConfigVariableCore and/or ConfigDeclaration, more or
//               less duplicating the interface presented there.
////////////////////////////////////////////////////////////////////

2684 18 ConfigVariableBase 0 43009 18 ConfigVariableBase 18 ConfigVariableBase 0 0 0 0 0 0 12 1468 1469 1470 1471 1472 1473 1474 1475 1476 1477 1478 1479 0 0 1 0 2678 0 0 0 0 698
////////////////////////////////////////////////////////////////////
//       Class : ConfigVariableBase
// Description : This class is the base class for both
//               ConfigVariableList and ConfigVariable (and hence for
//               all of the ConfigVariableBool, ConfigVaribleString,
//               etc. classes).  It collects together the common
//               interface for all generic ConfigVariables.
//
//               Mostly, this class serves as a thin wrapper around
//               ConfigVariableCore and/or ConfigDeclaration, more or
//               less duplicating the interface presented there.
////////////////////////////////////////////////////////////////////

2685 18 ConfigVariableBool 0 141313 18 ConfigVariableBool 18 ConfigVariableBool 0 0 0 1 1502 1512 0 8 1503 1505 1506 1507 1508 1509 1510 1511 0 1 1504 1 0 2683 0 0 0 0 283
////////////////////////////////////////////////////////////////////
//       Class : ConfigVariableBool
// Description : This is a convenience class to specialize
//               ConfigVariable as a boolean type.
////////////////////////////////////////////////////////////////////

2686 18 ConfigVariableCore 0 43009 18 ConfigVariableCore 18 ConfigVariableCore 0 0 0 0 0 0 28 1513 1514 1515 1516 1517 1518 1519 1520 1521 1522 1523 1524 1525 1526 1527 1528 1529 1530 1531 1532 1533 1534 1535 1536 1537 1538 1539 1540 4 3079 3080 3081 3082 0 1 0 2678 0 0 0 0 615
////////////////////////////////////////////////////////////////////
//       Class : ConfigVariableCore
// Description : The internal definition of a ConfigVariable.  This
//               object is shared between all instances of a
//               ConfigVariable that use the same variable name.
//
//               You cannot create a ConfigVariableCore instance
//               directly; instead, use the make() method, which may
//               return a shared instance.  Once created, these
//               objects are never destructed.
////////////////////////////////////////////////////////////////////

2687 20 ConfigVariableDouble 0 141313 20 ConfigVariableDouble 20 ConfigVariableDouble 0 0 0 1 1541 1551 0 8 1542 1544 1545 1546 1547 1548 1549 1550 0 1 1543 1 0 2683 0 0 0 0 292
////////////////////////////////////////////////////////////////////
//       Class : ConfigVariableDouble
// Description : This is a convenience class to specialize
//               ConfigVariable as a floating-point type.
////////////////////////////////////////////////////////////////////

2688 22 ConfigVariableFilename 0 141313 22 ConfigVariableFilename 22 ConfigVariableFilename 0 0 0 1 1552 1573 0 19 1553 1555 1556 1557 1558 1559 1560 1561 1562 1563 1564 1565 1566 1567 1568 1569 1570 1571 1572 0 1 1554 1 0 2683 0 0 0 0 584
////////////////////////////////////////////////////////////////////
//       Class : ConfigVariableFilename
// Description : This is a convenience class to specialize
//               ConfigVariable as a Filename type.  It is almost the
//               same thing as ConfigVariableString, except it handles
//               an implicit Filename::expand_from() operation so that
//               the user may put OS-specific filenames, or filenames
//               based on environment variables, in the prc file.
////////////////////////////////////////////////////////////////////

2689 17 ConfigVariableInt 0 141313 17 ConfigVariableInt 17 ConfigVariableInt 0 0 0 1 1574 1584 0 8 1575 1577 1578 1579 1580 1581 1582 1583 0 1 1576 1 0 2683 0 0 0 0 283
////////////////////////////////////////////////////////////////////
//       Class : ConfigVariableInt
// Description : This is a convenience class to specialize
//               ConfigVariable as an integer type.
////////////////////////////////////////////////////////////////////

2690 19 ConfigVariableInt64 0 141313 19 ConfigVariableInt64 19 ConfigVariableInt64 0 0 0 1 1585 1595 0 8 1586 1588 1589 1590 1591 1592 1593 1594 0 1 1587 1 0 2683 0 0 0 0 291
////////////////////////////////////////////////////////////////////
//       Class : ConfigVariableInt64
// Description : This is a convenience class to specialize
//               ConfigVariable as a 64-bit integer type.
////////////////////////////////////////////////////////////////////

2691 18 ConfigVariableList 0 26625 18 ConfigVariableList 18 ConfigVariableList 0 0 0 1 1596 1597 0 8 1598 1599 1600 1601 1602 1603 1604 1605 0 0 1 0 2684 0 0 0 0 779
////////////////////////////////////////////////////////////////////
//       Class : ConfigVariableList
// Description : This class is similar to ConfigVariable, but it
//               reports its value as a list of strings.  In this
//               special case, all of the declarations of the variable
//               are returned as the elements of this list, in order.
//
//               Note that this is different from a normal
//               ConfigVariableString, which just returns its topmost
//               value, which can optionally be treated as a number of
//               discrete words by dividing it at the spaces.
//
//               A ConfigVariableList cannot be modified locally.
////////////////////////////////////////////////////////////////////

2692 21 ConfigVariableManager 0 43009 21 ConfigVariableManager 21 ConfigVariableManager 0 0 0 0 0 0 13 1606 1607 1608 1609 1610 1611 1612 1613 1614 1615 1616 1617 1618 1 3083 0 0 0 0 391
////////////////////////////////////////////////////////////////////
//       Class : ConfigVariableManager
// Description : A global object that maintains the set of
//               ConfigVariables (actually, ConfigVariableCores)
//               everywhere in the world, and keeps them in sorted
//               order.
////////////////////////////////////////////////////////////////////

2693 24 ConfigVariableSearchPath 0 26625 24 ConfigVariableSearchPath 24 ConfigVariableSearchPath 0 0 0 1 1619 1620 0 15 1622 1623 1624 1625 1626 1627 1628 1629 1630 1631 1632 1633 1634 1635 1636 1 3084 1 1621 1 0 2684 0 0 0 0 1125
////////////////////////////////////////////////////////////////////
//       Class : ConfigVariableSearchPath
// Description : This is similar to a ConfigVariableList, but it
//               returns its list as a DSearchPath, as a list of
//               directories.
//
//               You may locally append directories to the end of the
//               search path with the methods here, or prepend them to
//               the beginning.  Use these methods to make adjustments
//               to the path; do not attempt to directly modify the
//               const DSearchPath object returned by get_value().
//
//               Unlike other ConfigVariable types, local changes
//               (made by calling append_directory() and
//               prepend_directory()) are specific to this particular
//               instance of the ConfigVariableSearchPath.  A separate
//               instance of the same variable, created by using the
//               same name to the constructor, will not reflect the
//               local changes.
////////////////////////////////////////////////////////////////////

2694 20 ConfigVariableString 0 141313 20 ConfigVariableString 20 ConfigVariableString 0 0 0 1 1637 1652 0 13 1638 1640 1641 1642 1643 1644 1645 1646 1647 1648 1649 1650 1651 0 1 1639 1 0 2683 0 0 0 0 284
////////////////////////////////////////////////////////////////////
//       Class : ConfigVariableString
// Description : This is a convenience class to specialize
//               ConfigVariable as a string type.
////////////////////////////////////////////////////////////////////

2695 7 DConfig 0 141313 7 DConfig 7 DConfig 0 0 0 0 1658 0 5 1653 1654 1655 1656 1657 0 0 0 0 0 535
////////////////////////////////////////////////////////////////////
//       Class : DConfig
// Description : This class emulates the old dconfig-style interface
//               to our Panda config system.  It exists only to
//               provide backward-compatible support, and it is used
//               primarily by Python code.  For modern code, use the
//               new ConfigVariable* interface instead of this
//               deprecated interface.
////////////////////////////////////////////////////////////////////

2696 11 DSearchPath 0 26625 11 DSearchPath 11 DSearchPath 0 0 0 1 1669 1671 0 14 1670 1672 1673 1674 1675 1676 1677 1678 1679 1680 1681 1682 1683 1684 1 3085 0 0 0 1 2697 551
///////////////////////////////////////////////////////////////////
//       Class : DSearchPath
// Description : This class stores a list of directories that can be
//               searched, in order, to locate a particular file.  It
//               is normally constructed by passing it a traditional
//               searchpath-style string, e.g. a list of directory
//               names delimited by spaces or colons, but it can also
//               be built up explicitly.
////////////////////////////////////////////////////////////////////

2697 7 Results 0 288769 20 DSearchPath::Results 20 DSearchPath::Results 2696 0 0 1 1659 1661 0 8 1660 1662 1663 1664 1665 1666 1667 1668 0 0 0 0 0 0

2698 20 ExecutionEnvironment 0 141313 20 ExecutionEnvironment 20 ExecutionEnvironment 0 0 0 0 1698 0 13 1685 1686 1687 1688 1689 1690 1691 1692 1693 1694 1695 1696 1697 0 0 0 0 0 475
////////////////////////////////////////////////////////////////////
//       Class : ExecutionEnvironment
// Description : Encapsulates access to the environment variables and
//               command-line arguments at the time of execution.
//               This is encapsulated to support accessing these
//               things during static init time, which seems to be
//               risky at best.
////////////////////////////////////////////////////////////////////

2699 10 FileStream 0 26625 10 FileStream 10 FileStream 0 0 0 1 1723 1724 0 2 1725 1726 0 0 1 0 2700 0 0 0 0 569
////////////////////////////////////////////////////////////////////
//       Class : FileStream
// Description : Implements a C++ stream object suitable for reading
//               from and/or writing to files on disk.  This is
//               similar to fstream, but it provides low-level support
//               for Panda's simple-threading implementation (using
//               this interface will block only the current thread,
//               rather than the entire process, on I/O waits).
////////////////////////////////////////////////////////////////////

2700 8 iostream 0 141313 8 iostream 8 iostream 0 0 0 0 1722 0 1 1721 0 0 2 3 2701 1711 1712 3 2706 1719 1720 0 0 0

2701 7 istream 0 141313 7 istream 7 istream 0 0 0 0 1710 0 3 1707 1708 1709 0 0 1 5 2702 1706 0 0 0 0

2702 3 ios 0 141313 3 ios 3 ios 0 0 0 0 1705 0 5 1700 1701 1702 1703 1704 0 0 1 0 2703 0 0 0 0 0

2703 8 ios_base 0 141313 8 ios_base 8 ios_base 0 0 0 0 1699 0 0 0 0 0 0 2 2704 2705 144
// We need to expose one method in each class to force it to publish.
// But we'd like to expose some of these methods anyway, so no
// problem.

2704 7 seekdir 0 794624 17 ios_base::seekdir 17 ios_base::seekdir 2703 0 0 0 0 0 0 0 0 0 3 3 beg 13 ios_base::beg 0
0 3 cur 13 ios_base::cur 0
1 3 end 13 ios_base::end 0
2 0 0

2705 8 openmode 0 794624 18 ios_base::openmode 18 ios_base::openmode 2703 0 0 0 0 0 0 0 0 0 0 0 0

2706 7 ostream 0 141313 7 ostream 7 ostream 0 0 0 0 1718 0 4 1714 1715 1716 1717 0 0 1 5 2702 1713 0 0 0 0

2707 8 Filename 0 26625 8 Filename 8 Filename 0 0 0 1 1727 1728 0 98 1729 1730 1731 1732 1733 1734 1735 1736 1737 1738 1739 1740 1741 1742 1743 1745 1746 1747 1748 1749 1750 1751 1752 1753 1754 1755 1756 1757 1758 1759 1760 1761 1762 1763 1764 1765 1766 1767 1768 1769 1770 1771 1772 1773 1774 1775 1776 1777 1778 1779 1780 1781 1782 1783 1784 1785 1786 1787 1788 1789 1790 1791 1792 1793 1794 1795 1796 1797 1798 1799 1800 1801 1802 1803 1804 1805 1806 1807 1808 1809 1810 1811 1812 1813 1814 1815 1816 1817 1818 1819 1820 1821 1822 1823 1824 1825 1826 1827 0 1 1744 0 0 1 2708 869
////////////////////////////////////////////////////////////////////
//       Class : Filename
// Description : The name of a file, such as a texture file or an Egg
//               file.  Stores the full pathname, and includes
//               functions for extracting out the directory prefix
//               part and the file extension and stuff.
//
//               A Filename is also aware of the mapping between the
//               Unix-like filename convention we use internally, and
//               the local OS's specific filename convention, and it
//               knows how to perform basic OS-specific I/O, like
//               testing for file existence and searching a
//               searchpath, as well as the best way to open an
//               fstream for reading or writing.
////////////////////////////////////////////////////////////////////

2708 4 Type 0 794624 14 Filename::Type 14 Filename::Type 2707 0 0 0 0 0 0 0 0 0 3 9 T_general 19 Filename::T_general 77
// These type values must fit within the bits allocated for
// F_type, below.
0 5 T_dso 15 Filename::T_dso 0
1 12 T_executable 22 Filename::T_executable 0
2 0 0

2709 11 GlobPattern 0 141313 11 GlobPattern 11 GlobPattern 0 0 0 1 1828 1844 0 15 1829 1830 1831 1832 1833 1834 1835 1836 1837 1838 1839 1840 1841 1842 1843 0 0 0 0 0 859
////////////////////////////////////////////////////////////////////
//       Class : GlobPattern
// Description : This class can be used to test for string matches
//               against standard Unix-shell filename globbing
//               conventions.  It serves as a portable standin for the
//               Posix fnmatch() call.
//
//               A GlobPattern is given a pattern string, which can
//               contain operators like *, ?, and [].  Then it can be
//               tested against any number of candidate strings; for
//               each candidate, it will indicate whether the string
//               matches the pattern or not.  It can be used, for
//               example, to scan a directory for all files matching a
//               particular pattern.
////////////////////////////////////////////////////////////////////

2710 14 IDecryptStream 0 141313 14 IDecryptStream 14 IDecryptStream 0 0 0 1 1845 1851 0 5 1846 1847 1848 1849 1850 0 0 1 0 2701 0 0 0 0 603
////////////////////////////////////////////////////////////////////
//       Class : IDecryptStream
// Description : An input stream object that uses OpenSSL to decrypt
//               the input from another source stream on-the-fly.
//
//               Attach an IDecryptStream to an existing istream that
//               provides encrypted data, as generated by an
//               OEncryptStream, and read the corresponding
//               unencrypted data from the IDecryptStream.
//
//               Seeking is not supported.
////////////////////////////////////////////////////////////////////

2711 11 IFileStream 0 26625 11 IFileStream 11 IFileStream 0 0 0 1 1852 1853 0 2 1854 1855 0 0 1 0 2701 0 0 0 0 553
////////////////////////////////////////////////////////////////////
//       Class : IFileStream
// Description : Implements a C++ stream object suitable for reading
//               from files on disk.  This is similar to ifstream, but
//               it provides low-level support for Panda's
//               simple-threading implementation (using this interface
//               will block only the current thread, rather than the
//               entire process, on I/O waits).
////////////////////////////////////////////////////////////////////

2712 14 IStreamWrapper 0 26625 14 IStreamWrapper 14 IStreamWrapper 0 0 0 1 1860 1861 0 1 1862 0 0 1 5 2713 1859 0 0 0 390
////////////////////////////////////////////////////////////////////
//       Class : IStreamWrapper
// Description : This class provides a locking wrapper around an
//               arbitrary istream pointer.  A thread may use this
//               class to perform an atomic seek/read/gcount
//               operation.
////////////////////////////////////////////////////////////////////

2713 17 StreamWrapperBase 0 141313 17 StreamWrapperBase 17 StreamWrapperBase 0 0 0 0 1858 0 2 1856 1857 0 0 0 0 0 326
////////////////////////////////////////////////////////////////////
//       Class : StreamWrapperBase
// Description : The base class for both IStreamWrapper and
//               OStreamWrapper, this provides the common locking
//               interface.
////////////////////////////////////////////////////////////////////

2714 10 LineStream 0 141313 10 LineStream 10 LineStream 0 0 0 1 1863 1867 0 3 1864 1865 1866 0 0 1 0 2706 0 0 0 0 761
////////////////////////////////////////////////////////////////////
//       Class : LineStream
// Description : This is a special ostream that writes to a memory
//               buffer, like ostrstream.  However, its contents can
//               be continuously extracted as a sequence of lines of
//               text.
//
//               Unlike ostrstream, which can only be extracted from
//               once (and then the buffer freezes and it can no
//               longer be written to), the LineStream is not
//               otherwise affected when a line of text is extracted.
//               More text can still be written to it and continuously
//               extracted.
////////////////////////////////////////////////////////////////////

2715 15 NeverFreeMemory 0 141313 15 NeverFreeMemory 15 NeverFreeMemory 0 0 0 0 1871 0 3 1868 1869 1870 0 0 0 0 0 818
////////////////////////////////////////////////////////////////////
//       Class : NeverFreeMemory
// Description : This class is used to allocate bytes of memory from a
//               pool that is never intended to be freed.  It is
//               particularly useful to support DeletedChain, which
//               allocates memory in just such a fashion.
//
//               When it is known that memory will not be freed, it is
//               preferable to use this instead of the standard
//               malloc() (or global_operator_new()) call, since this
//               will help reduce fragmentation problems in the
//               dynamic heap.  Also, memory allocated from here will
//               exhibit less wasted space.
////////////////////////////////////////////////////////////////////

2716 6 Notify 0 26625 6 Notify 6 Notify 0 0 0 1 1872 1873 0 15 1874 1875 1876 1877 1878 1879 1880 1881 1882 1883 1884 1885 1886 1887 1888 0 0 0 0 0 833
////////////////////////////////////////////////////////////////////
//       Class : Notify
// Description : An object that handles general error reporting to the
//               user.  It contains a pointer to an ostream, initially
//               cerr, which can be reset at will to point to
//               different output devices, according to the needs of
//               the application.  All output generated within Panda
//               should vector through the Notify ostream.
//
//               This also includes a collection of Categories and
//               Severities, which may be independently enabled or
//               disabled, so that error messages may be squelched or
//               respected according to the wishes of the user.
////////////////////////////////////////////////////////////////////

2717 14 NotifyCategory 0 141313 14 NotifyCategory 14 NotifyCategory 0 0 0 0 1914 0 21 1893 1894 1895 1896 1897 1898 1899 1900 1901 1902 1903 1904 1905 1906 1907 1908 1909 1910 1911 1912 1913 0 0 2 3 2664 1889 1890 3 2678 1891 1892 0 0 536
////////////////////////////////////////////////////////////////////
//       Class : NotifyCategory
// Description : A particular category of error messages.  Typically
//               there will be one of these per package, so that we
//               can turn on or off error messages at least at a
//               package level; further nested categories can be
//               created within a package if a finer grain of control
//               is required.
////////////////////////////////////////////////////////////////////

2718 14 NotifySeverity 0 532481 14 NotifySeverity 14 NotifySeverity 0 0 0 0 0 0 0 0 0 0 7 14 NS_unspecified 14 NS_unspecified 41
// Never used, a special case internally.
0 7 NS_spam 7 NS_spam 0
1 8 NS_debug 8 NS_debug 0
2 7 NS_info 7 NS_info 0
3 10 NS_warning 10 NS_warning 0
4 8 NS_error 8 NS_error 37
// Specifically, a recoverable error.
5 8 NS_fatal 8 NS_fatal 55
// A nonrecoverable error--expect abort() or core dump.
6 0 0

2719 14 OEncryptStream 0 141313 14 OEncryptStream 14 OEncryptStream 0 0 0 1 1915 1921 0 5 1916 1917 1918 1919 1920 0 0 1 0 2706 0 0 0 0 545
////////////////////////////////////////////////////////////////////
//       Class : OEncryptStream
// Description : An input stream object that uses OpenSSL to encrypt
//               data to another destination stream on-the-fly.
//
//               Attach an OEncryptStream to an existing ostream that
//               will accept encrypted data, and write your
//               unencrypted source data to the OEncryptStream.
//
//               Seeking is not supported.
////////////////////////////////////////////////////////////////////

2720 11 OFileStream 0 26625 11 OFileStream 11 OFileStream 0 0 0 1 1922 1923 0 2 1924 1925 0 0 1 0 2706 0 0 0 0 551
////////////////////////////////////////////////////////////////////
//       Class : OFileStream
// Description : Implements a C++ stream object suitable for writing
//               to files on disk.  This is similar to ofstream, but
//               it provides low-level support for Panda's
//               simple-threading implementation (using this interface
//               will block only the current thread, rather than the
//               entire process, on I/O waits).
////////////////////////////////////////////////////////////////////

2721 14 OStreamWrapper 0 26625 14 OStreamWrapper 14 OStreamWrapper 0 0 0 1 1927 1928 0 1 1929 0 0 1 5 2713 1926 0 0 0 367
////////////////////////////////////////////////////////////////////
//       Class : OStreamWrapper
// Description : This class provides a locking wrapper around an
//               arbitrary ostream pointer.  A thread may use this
//               class to perform an atomic seek/write operation.
////////////////////////////////////////////////////////////////////

2722 10 PTA_double 0 2105345 10 PTA_double 10 PTA_double 0 0 2723 0 0 0 0 0 0 0 0 0 0

2723 24 PointerToArray< double > 0 141313 24 PointerToArray< double > 24 PointerToArray< double > 0 0 0 1 1930 1947 0 16 1931 1932 1933 1934 1935 1936 1937 1938 1939 1940 1941 1942 1943 1944 1945 1946 0 0 1 0 2661 0 0 0 0 0

2724 9 PTA_float 0 2105345 9 PTA_float 9 PTA_float 0 0 2725 0 0 0 0 0 0 0 0 0 0

2725 23 PointerToArray< float > 0 141313 23 PointerToArray< float > 23 PointerToArray< float > 0 0 0 1 1948 1965 0 16 1949 1950 1951 1952 1953 1954 1955 1956 1957 1958 1959 1960 1961 1962 1963 1964 0 0 1 0 2667 0 0 0 0 0

2726 7 PTA_int 0 2105345 7 PTA_int 7 PTA_int 0 0 2727 0 0 0 0 0 0 0 0 0 0

2727 21 PointerToArray< int > 0 141313 21 PointerToArray< int > 21 PointerToArray< int > 0 0 0 1 1966 1983 0 16 1967 1968 1969 1970 1971 1972 1973 1974 1975 1976 1977 1978 1979 1980 1981 1982 0 0 1 0 2671 0 0 0 0 0

2728 9 PTA_uchar 0 2105345 9 PTA_uchar 9 PTA_uchar 0 0 2729 0 0 0 0 0 0 0 0 0 0

2729 31 PointerToArray< unsigned char > 0 141313 31 PointerToArray< unsigned char > 31 PointerToArray< unsigned char > 0 0 0 1 1984 2001 0 16 1985 1986 1987 1988 1989 1990 1991 1992 1993 1994 1995 1996 1997 1998 1999 2000 0 0 1 0 2675 0 0 0 0 0

2730 11 PandaSystem 0 43009 11 PandaSystem 11 PandaSystem 0 0 0 0 0 0 24 2002 2003 2004 2005 2006 2007 2008 2009 2010 2011 2012 2013 2014 2015 2016 2017 2018 2019 2020 2021 2022 2023 2024 2025 1 3086 0 0 0 0 435
////////////////////////////////////////////////////////////////////
//       Class : PandaSystem
// Description : This class is used as a namespace to group several
//               global properties of Panda.  Application developers
//               can use this class to query the runtime version or
//               capabilities of the current Panda environment.
////////////////////////////////////////////////////////////////////

2731 12 StreamReader 0 26625 12 StreamReader 12 StreamReader 0 0 0 1 2026 2028 0 29 2027 2029 2030 2031 2032 2033 2034 2035 2036 2037 2038 2039 2040 2041 2042 2043 2044 2045 2046 2047 2048 2049 2050 2051 2052 2053 2054 2055 2056 0 0 0 0 0 363
////////////////////////////////////////////////////////////////////
//       Class : StreamReader
// Description : A class to read sequential binary data directly from
//               an istream.  Its interface is similar to
//               DatagramIterator by design; see also StreamWriter.
////////////////////////////////////////////////////////////////////

2732 13 StreamWrapper 0 26625 13 StreamWrapper 13 StreamWrapper 0 0 0 1 2061 2062 0 1 2063 0 0 2 3 2712 2057 2058 3 2721 2059 2060 0 0 286
////////////////////////////////////////////////////////////////////
//       Class : StreamWrapper
// Description : This class provides a locking wrapper around a
//               combination ostream/istream pointer.
////////////////////////////////////////////////////////////////////

2733 12 StreamWriter 0 26625 12 StreamWriter 12 StreamWriter 0 0 0 1 2064 2066 0 29 2065 2067 2068 2069 2070 2071 2072 2073 2074 2075 2076 2077 2078 2079 2080 2081 2082 2083 2084 2085 2086 2087 2088 2089 2090 2091 2092 2093 2094 0 0 0 0 0 550
////////////////////////////////////////////////////////////////////
//       Class : StreamWriter
// Description : A StreamWriter object is used to write sequential
//               binary data directly to an ostream.  Its interface is
//               very similar to Datagram by design; it's primarily
//               intended as a convenience to eliminate the overhead
//               of writing bytes to a Datagram and then writing the
//               Datagram to a stream.
////////////////////////////////////////////////////////////////////

2734 11 TextEncoder 0 141313 11 TextEncoder 11 TextEncoder 0 0 0 1 2095 2132 0 36 2096 2097 2098 2099 2100 2101 2102 2103 2104 2105 2106 2107 2108 2109 2110 2111 2112 2113 2114 2115 2116 2117 2118 2119 2120 2121 2122 2123 2124 2125 2126 2127 2128 2129 2130 2131 0 0 0 0 1 2735 676
////////////////////////////////////////////////////////////////////
//       Class : TextEncoder
// Description : This class can be used to convert text between
//               multiple representations, e.g. utf-8 to Unicode.  You
//               may use it as a static class object, passing the
//               encoding each time, or you may create an instance and
//               use that object, which will record the current
//               encoding and retain the current string.
//
//               This class is also a base class of TextNode, which
//               inherits this functionality.
////////////////////////////////////////////////////////////////////

2735 8 Encoding 0 794624 21 TextEncoder::Encoding 21 TextEncoder::Encoding 2734 0 0 0 0 0 0 0 0 0 3 9 E_iso8859 22 TextEncoder::E_iso8859 0
0 6 E_utf8 19 TextEncoder::E_utf8 0
1 9 E_unicode 22 TextEncoder::E_unicode 0
2 0 0

2736 10 TypeHandle 0 141313 10 TypeHandle 10 TypeHandle 0 0 0 0 2157 0 23 2133 2134 2135 2136 2137 2138 2139 2140 2141 2142 2143 2144 2145 2146 2147 2148 2149 2150 2151 2152 2153 2154 2155 0 1 2156 0 0 1 2737 1098
////////////////////////////////////////////////////////////////////
//       Class : TypeHandle
// Description : TypeHandle is the identifier used to differentiate
//               C++ class types.  Any C++ classes that inherit from
//               some base class, and must be differentiated at run
//               time, should store a static TypeHandle object that
//               can be queried through a static member function
//               named get_class_type().  Most of the time, it is also
//               desirable to inherit from TypedObject, which provides
//               some virtual functions to return the TypeHandle for a
//               particular instance.
//
//               At its essence, a TypeHandle is simply a unique
//               identifier that is assigned by the TypeRegistry.  The
//               TypeRegistry stores a tree of TypeHandles, so that
//               ancestry of a particular type may be queried, and the
//               type name may be retrieved for run-time display.
////////////////////////////////////////////////////////////////////

2737 11 MemoryClass 0 794624 23 TypeHandle::MemoryClass 23 TypeHandle::MemoryClass 2736 0 0 0 0 0 0 0 0 0 5 12 MC_singleton 24 TypeHandle::MC_singleton 0
0 8 MC_array 20 TypeHandle::MC_array 0
1 23 MC_deleted_chain_active 35 TypeHandle::MC_deleted_chain_active 0
2 25 MC_deleted_chain_inactive 37 TypeHandle::MC_deleted_chain_inactive 0
3 8 MC_limit 20 TypeHandle::MC_limit 70
// Not a real value, just a placeholder for the maximum
// enum value.
4 0 0

2738 12 TypeRegistry 0 141313 12 TypeRegistry 12 TypeRegistry 0 0 0 0 2174 0 16 2158 2159 2160 2161 2162 2163 2164 2165 2166 2167 2168 2169 2170 2171 2172 2173 2 3087 3088 0 1 0 2664 0 0 0 0 571
////////////////////////////////////////////////////////////////////
//       Class : TypeRegistry
// Description : The TypeRegistry class maintains all the assigned
//               TypeHandles in a given system.  There should be only
//               one TypeRegistry class during the lifetime of the
//               application.  It will be created on the local heap
//               initially, and it should be migrated to shared memory
//               as soon as shared memory becomes available.
////////////////////////////////////////////////////////////////////

2739 11 TypedObject 0 26625 11 TypedObject 11 TypedObject 0 0 0 0 2177 0 5 2178 2179 2180 2181 2182 0 0 1 3 2664 2175 2176 0 0 3561
////////////////////////////////////////////////////////////////////
//       Class : TypedObject
// Description : This is an abstract class that all classes which
//               use TypeHandle, and also provide virtual functions to
//               support polymorphism, should inherit from.  Each
//               derived class should define get_type(), which should
//               return the specific type of the derived class.
//               Inheriting from this automatically provides support
//               for is_of_type() and is_exact_type().
//
//               All classes that inherit directly or indirectly from
//               TypedObject should redefine get_type() and
//               force_init_type(), as shown below.  Some classes that
//               do not inherit from TypedObject may still declare
//               TypeHandles for themselves by defining methods called
//               get_class_type() and init_type().  Classes such as
//               these may serve as base classes, but the dynamic type
//               identification system will be limited.  Classes that
//               do not inherit from TypedObject need not define the
//               virtual functions get_type() and force_init_type()
//               (or any other virtual functions).
//
//               There is a specific layout for defining the
//               overrides from this class.  Keeping the definitions
//               formatted just like these examples will allow
//               someone in the future to use a sed (or similar)
//               script to make global changes, if necessary.  Avoid
//               rearranging the braces or the order of the functions
//               unless you're ready to change them in every file all
//               at once.
//
//               What follows are some examples that can be used in
//               new classes that you create.
//
//               @par In the class definition (.h file):
//               @code
//               public:
//                 static TypeHandle get_class_type() {
//                   return _type_handle;
//                 }
//                 static void init_type() {
//                   <<<BaseClassOne>>>::init_type();
//                   <<<BaseClassTwo>>>::init_type();
//                   <<<BaseClassN>>>::init_type();
//                   register_type(_type_handle, "<<<ThisClassStringName>>>",
//                                 <<<BaseClassOne>>>::get_class_type(),
//                                 <<<BaseClassTwo>>>::get_class_type(),
//                                 <<<BaseClassN>>>::get_class_type());
//                 }
//                 virtual TypeHandle get_type() const {
//                   return get_class_type();
//                 }
//                 virtual TypeHandle force_init_type() {init_type(); return get_class_type();}
//
//               private:
//                 static TypeHandle _type_handle;
//               @endcode
//
//               @par In the class .cxx file:
//               @code
//               TypeHandle <<<ThisClassStringName>>>::_type_handle;
//               @endcode
//
//               @par In the class config_<<<PackageName>>>.cxx file:
//               @code
//               ConfigureFn(config_<<<PackageName>>>) {
//                 <<<ClassOne>>>::init_type();
//                 <<<ClassTwo>>>::init_type();
//                 <<<ClassN>>>::init_type();
//               }
//               @endcode
////////////////////////////////////////////////////////////////////

2740 7 fstream 0 141313 7 fstream 7 fstream 0 0 0 1 2183 2185 0 1 2184 0 0 1 0 2700 0 0 0 0 0

2741 8 ifstream 0 141313 8 ifstream 8 ifstream 0 0 0 1 2186 2188 0 1 2187 0 0 1 0 2701 0 0 0 0 0

2742 8 ofstream 0 141313 8 ofstream 8 ofstream 0 0 0 1 2189 2191 0 1 2190 0 0 1 0 2706 0 0 0 0 0

2743 11 MemoryUsage 0 141313 11 MemoryUsage 11 MemoryUsage 0 0 0 0 2212 0 20 2192 2193 2194 2195 2196 2197 2198 2199 2200 2201 2202 2203 2204 2205 2206 2207 2208 2209 2210 2211 0 0 1 0 2744 0 0 0 0 539
////////////////////////////////////////////////////////////////////
//       Class : MemoryUsage
// Description : This class is used strictly for debugging purposes,
//               specifically for tracking memory leaks of
//               reference-counted objects: it keeps a record of every
//               such object currently allocated.
//
//               When compiled with NDEBUG set, this entire class does
//               nothing and compiles to nothing.
////////////////////////////////////////////////////////////////////

2744 10 MemoryHook 0 2049 10 MemoryHook 10 MemoryHook 0 0 0 0 0 0 0 0 0 0 0 0 993
////////////////////////////////////////////////////////////////////
//       Class : MemoryHook
// Description : This class provides a wrapper around the various
//               possible malloc schemes Panda might employ.  It also
//               exists to allow the MemoryUsage class in Panda to
//               insert callback hooks to track the size of allocated
//               pointers.
//
//               The PANDA_MALLOC_* and PANDA_FREE_* macros are
//               defined to vector through through this class (except
//               in production builds) to facilitate that.  Every
//               memory allocation call in Panda should therefore use
//               these macros instead of direct calls to malloc or
//               free.  (C++ new and delete operators may be employed
//               for classes which inherit from MemoryBase; otherwise,
//               use the PANDA_MALLOC macros.)
////////////////////////////////////////////////////////////////////

2745 14 ReferenceCount 0 26625 14 ReferenceCount 14 ReferenceCount 0 0 0 0 2216 0 6 2217 2218 2219 2220 2221 2222 0 0 1 3 2664 2214 2215 0 0 425
////////////////////////////////////////////////////////////////////
//       Class : ReferenceCount
// Description : A base class for all things that want to be
//               reference-counted.  ReferenceCount works in
//               conjunction with PointerTo to automatically delete
//               objects when the last pointer to them goes away.
////////////////////////////////////////////////////////////////////

2746 6 Buffer 0 75777 6 Buffer 6 Buffer 0 0 0 0 2216 0 1 2223 0 0 1 0 2745 0 0 0 0 178
////////////////////////////////////////////////////////////////////
//       Class : Buffer
// Description :
////////////////////////////////////////////////////////////////////

2747 25 PStatCollectorForwardBase 0 75777 25 PStatCollectorForwardBase 25 PStatCollectorForwardBase 0 0 0 0 2216 0 1 2231 0 0 1 0 2745 0 0 0 0 542
////////////////////////////////////////////////////////////////////
//       Class : PStatCollectorForwardBase
// Description : This class serves as a cheap forward reference to a
//               PStatCollector, which is defined in the pstatclient
//               module (and is not directly accessible here in the
//               express module).
//
//               This is subclassed as PStatCollectorForward, which
//               defines the actual functionality.
////////////////////////////////////////////////////////////////////

2748 18 NodeReferenceCount 0 43009 18 NodeReferenceCount 18 NodeReferenceCount 0 0 0 0 0 0 5 2232 2233 2234 2235 2236 0 0 1 0 2745 0 0 0 0 983
////////////////////////////////////////////////////////////////////
//       Class : NodeReferenceCount
// Description : This class specializes ReferenceCount to add an
//               additional counter, called node_ref_count, for the
//               purposes of counting the number of times the object
//               is referenced by a "node", whatever that may mean in
//               context.
//
//               The new methods node_ref() and node_unref()
//               automatically increment and decrement the primary
//               reference count as well.  There also exists a
//               NodePointerTo<> class to maintain the node_ref
//               counters automatically.
//
//               See also CachedTypedWritableReferenceCount, which is
//               similar in principle, as well as
//               NodeCachedReferenceCount, which combines both of
//               these.
////////////////////////////////////////////////////////////////////

2749 8 Datagram 0 75777 8 Datagram 8 Datagram 0 0 0 1 2237 2177 0 46 2238 2239 2240 2241 2242 2243 2244 2245 2246 2247 2248 2249 2250 2251 2252 2253 2254 2255 2256 2257 2258 2259 2260 2261 2262 2263 2264 2265 2266 2267 2268 2269 2270 2271 2272 2273 2274 2275 2276 2277 2278 2279 2280 2281 2282 2283 0 0 1 0 2739 0 0 0 0 900
////////////////////////////////////////////////////////////////////
//       Class : Datagram
// Description : An ordered list of data elements, formatted in memory
//               for transmission over a socket or writing to a data
//               file.
//
//               Data elements should be added one at a time, in
//               order, to the Datagram.  The nature and contents of
//               the data elements are totally up to the user.  When a
//               Datagram has been transmitted and received, its data
//               elements may be extracted using a DatagramIterator;
//               it is up to the caller to know the correct type of
//               each data element in order.
//
//               A Datagram is itself headerless; it is simply a
//               collection of data elements.
////////////////////////////////////////////////////////////////////

2750 17 DatagramGenerator 0 26625 17 DatagramGenerator 17 DatagramGenerator 0 0 0 0 2284 0 9 2285 2286 2287 2288 2289 2290 2291 2292 2293 0 0 0 0 0 335
////////////////////////////////////////////////////////////////////
//       Class : DatagramGenerator
// Description : This class defines the abstract interace to any
//               source of datagrams, whether it be from a file or
//               from the net.
////////////////////////////////////////////////////////////////////

2751 16 DatagramIterator 0 26625 16 DatagramIterator 16 DatagramIterator 0 0 0 1 2294 2296 0 35 2295 2297 2298 2299 2300 2301 2302 2303 2304 2305 2306 2307 2308 2309 2310 2311 2312 2313 2314 2315 2316 2317 2318 2319 2320 2321 2322 2323 2324 2325 2326 2327 2328 2329 2330 0 0 0 0 0 438
////////////////////////////////////////////////////////////////////
//       Class : DatagramIterator
// Description : A class to retrieve the individual data elements
//               previously stored in a Datagram.  Elements may be
//               retrieved one at a time; it is up to the caller to
//               know the correct type and order of each element.
////////////////////////////////////////////////////////////////////

2752 12 DatagramSink 0 26625 12 DatagramSink 12 DatagramSink 0 0 0 0 2331 0 7 2332 2333 2334 2335 2336 2337 2338 0 0 0 0 0 340
////////////////////////////////////////////////////////////////////
//       Class : DatagramSink
// Description : This class defines the abstract interface to sending
//               datagrams to any target, whether it be into a file
//               or across the net
////////////////////////////////////////////////////////////////////

2753 13 ErrorUtilCode 0 532481 13 ErrorUtilCode 13 ErrorUtilCode 0 0 0 0 0 0 0 0 0 0 37 16 EU_http_redirect 16 EU_http_redirect 0
7 6 EU_eof 6 EU_eof 0
6 18 EU_network_no_data 18 EU_network_no_data 0
5 12 EU_write_ram 12 EU_write_ram 0
4 8 EU_write 8 EU_write 0
3 5 EU_ok 5 EU_ok 0
2 10 EU_success 10 EU_success 0
1 14 EU_error_abort 14 EU_error_abort 17
// General errors
-1 19 EU_error_file_empty 19 EU_error_file_empty 0
-2 21 EU_error_file_invalid 21 EU_error_file_invalid 0
-3 25 EU_error_invalid_checksum 25 EU_error_invalid_checksum 0
-4 21 EU_error_network_dead 21 EU_error_network_dead 25
// General network errors
-30 28 EU_error_network_unreachable 28 EU_error_network_unreachable 0
-31 29 EU_error_network_disconnected 29 EU_error_network_disconnected 0
-32 24 EU_error_network_timeout 24 EU_error_network_timeout 0
-33 24 EU_error_network_no_data 24 EU_error_network_no_data 0
-34 37 EU_error_network_disconnected_locally 37 EU_error_network_disconnected_locally 23
// Local network errors
-40 32 EU_error_network_buffer_overflow 32 EU_error_network_buffer_overflow 0
-41 36 EU_error_network_disk_quota_exceeded 36 EU_error_network_disk_quota_exceeded 0
-42 41 EU_error_network_remote_host_disconnected 41 EU_error_network_remote_host_disconnected 29
// Remote host network errors
-50 33 EU_error_network_remote_host_down 33 EU_error_network_remote_host_down 0
-51 40 EU_error_network_remote_host_unreachable 40 EU_error_network_remote_host_unreachable 0
-52 38 EU_error_network_remote_host_not_found 38 EU_error_network_remote_host_not_found 0
-53 40 EU_error_network_remote_host_no_response 40 EU_error_network_remote_host_no_response 0
-54 27 EU_error_write_out_of_files 27 EU_error_write_out_of_files 23
// General local errors
-60 28 EU_error_write_out_of_memory 28 EU_error_write_out_of_memory 0
-61 32 EU_error_write_sharing_violation 32 EU_error_write_sharing_violation 0
-62 24 EU_error_write_disk_full 24 EU_error_write_disk_full 0
-63 29 EU_error_write_disk_not_found 29 EU_error_write_disk_not_found 0
-64 36 EU_error_write_disk_sector_not_found 36 EU_error_write_disk_sector_not_found 0
-65 25 EU_error_write_disk_fault 25 EU_error_write_disk_fault 0
-66 26 EU_error_write_file_rename 26 EU_error_write_file_rename 0
-67 28 EU_error_http_server_timeout 28 EU_error_http_server_timeout 14
// HTTP errors
-70 29 EU_error_http_gateway_timeout 29 EU_error_http_gateway_timeout 0
-71 33 EU_error_http_service_unavailable 33 EU_error_http_service_unavailable 0
-72 34 EU_error_http_proxy_authentication 34 EU_error_http_proxy_authentication 0
-73 13 EU_error_zlib 13 EU_error_zlib 14
// Zlib errors
-80 0 0

2754 19 TypedReferenceCount 0 141313 19 TypedReferenceCount 19 TypedReferenceCount 0 0 0 0 2354 0 1 2353 0 0 2 3 2739 2349 2350 3 2745 2351 2352 0 0 710
////////////////////////////////////////////////////////////////////
//       Class : TypedReferenceCount
// Description : A base class for things which need to inherit from
//               both TypedObject and from ReferenceCount.  It's
//               convenient to define this intermediate base class
//               instead of multiply inheriting from the two classes
//               each time they are needed, so that we can sensibly
//               pass around pointers to things which are both
//               TypedObjects and ReferenceCounters.
//               
//               See also TypedObject for detailed instructions.
////////////////////////////////////////////////////////////////////

2755 13 FileReference 0 141313 13 FileReference 13 FileReference 0 0 0 1 2355 2358 0 2 2356 2357 0 0 1 0 2754 0 0 0 0 354
////////////////////////////////////////////////////////////////////
//       Class : FileReference
// Description : Keeps a reference-counted pointer to a file on disk.
//               As long as the FileReference is held, someone
//               presumably has a use for this file.
////////////////////////////////////////////////////////////////////

2756 7 Ramfile 0 141313 7 Ramfile 7 Ramfile 0 0 0 1 2359 2368 0 8 2360 2361 2362 2363 2364 2365 2366 2367 0 0 0 0 0 271
////////////////////////////////////////////////////////////////////
//       Class : Ramfile
// Description : An in-memory buffer specifically designed for
//               downloading files to memory.
////////////////////////////////////////////////////////////////////

2757 7 HashVal 0 141313 7 HashVal 7 HashVal 0 0 0 1 2369 2398 0 28 2370 2371 2372 2373 2374 2375 2376 2377 2378 2379 2380 2381 2382 2383 2384 2385 2386 2387 2388 2389 2390 2391 2392 2393 2394 2395 2396 2397 0 0 0 0 0 292
////////////////////////////////////////////////////////////////////
//       Class : HashVal
// Description : Stores a 128-bit value that represents the hashed
//               contents (typically MD5) of a file or buffer.
////////////////////////////////////////////////////////////////////

2758 19 MemoryUsagePointers 0 26625 19 MemoryUsagePointers 19 MemoryUsagePointers 0 0 0 1 2399 2400 0 9 2401 2402 2403 2404 2405 2406 2407 2408 2409 2 3089 3090 0 0 0 0 1190
////////////////////////////////////////////////////////////////////
//       Class : MemoryUsagePointers
// Description : This is a list of pointers returned by a MemoryUsage
//               object in response to some query.
//
//               Warning: once pointers are stored in a
//               MemoryUsagePointers object, they are
//               reference-counted, and will not be freed until the
//               MemoryUsagePointers object is freed (or clear() is
//               called on the object).  However, they may not even be
//               freed then; pointers may leak once they have been
//               added to this structure.  This is because we don't
//               store enough information in this structure to
//               correctly free the pointers that have been added.
//               Since this is intended primarily as a debugging tool,
//               this is not a major issue.
//
//               This class is just a user interface to talk about
//               pointers stored in a MemoryUsage object.  It doesn't
//               even exist when compiled with NDEBUG.
////////////////////////////////////////////////////////////////////

2759 10 ISubStream 0 141313 10 ISubStream 10 ISubStream 0 0 0 1 2410 2413 0 2 2411 2412 0 0 1 0 2701 0 0 0 0 668
////////////////////////////////////////////////////////////////////
//       Class : ISubStream
// Description : An istream object that presents a subwindow into
//               another istream.  The first character read from this
//               stream will be the "start" character from the source
//               istream; just before the file pointer reaches the
//               "end" character, eof is returned.
//
//               The source stream must be one that we can randomly
//               seek within.  The resulting ISubStream will also
//               support arbitrary seeks.
////////////////////////////////////////////////////////////////////

2760 10 OSubStream 0 141313 10 OSubStream 10 OSubStream 0 0 0 1 2414 2417 0 2 2415 2416 0 0 1 0 2706 0 0 0 0 667
////////////////////////////////////////////////////////////////////
//       Class : OSubStream
// Description : An ostream object that presents a subwindow into
//               another ostream.  The first character written to this
//               stream will be the "start" character in the dest
//               istream; no characters may be written to character
//               "end" or later (unless end is zero).
//
//               The dest stream must be one that we can randomly
//               seek within.  The resulting OSubStream will also
//               support arbitrary seeks.
////////////////////////////////////////////////////////////////////

2761 9 SubStream 0 141313 9 SubStream 9 SubStream 0 0 0 1 2418 2421 0 2 2419 2420 0 0 1 0 2700 0 0 0 0 256
////////////////////////////////////////////////////////////////////
//       Class : SubStream
// Description : Combined ISubStream and OSubStream for bidirectional
//               I/O.
////////////////////////////////////////////////////////////////////

2762 14 OpenSSLWrapper 0 43009 14 OpenSSLWrapper 14 OpenSSLWrapper 0 0 0 0 0 0 8 2422 2423 2424 2425 2426 2427 2428 2429 0 0 0 0 0 426
////////////////////////////////////////////////////////////////////
//       Class : OpenSSLWrapper
// Description : Provides an interface wrapper around the OpenSSL
//               library, to ensure that the library is properly
//               initialized in the application, and to provide some
//               hooks into global OpenSSL context data.
////////////////////////////////////////////////////////////////////

2763 9 Multifile 0 75777 9 Multifile 9 Multifile 0 0 0 1 2430 2216 0 61 2431 2432 2433 2434 2435 2436 2437 2438 2439 2440 2441 2442 2443 2444 2445 2446 2447 2448 2449 2450 2451 2452 2453 2454 2455 2456 2457 2458 2459 2460 2461 2462 2463 2464 2465 2466 2467 2468 2469 2470 2471 2472 2473 2474 2475 2476 2477 2478 2479 2480 2481 2482 2483 2484 2485 2486 2487 2488 2489 2490 2491 1 3091 0 1 0 2745 0 0 0 0 218
////////////////////////////////////////////////////////////////////
//       Class : Multifile
// Description : A file that contains a set of files.
////////////////////////////////////////////////////////////////////

2764 7 Namable 0 141313 7 Namable 7 Namable 0 0 0 1 2492 2500 0 7 2493 2494 2495 2496 2497 2498 2499 0 0 1 0 2664 0 0 0 0 324
////////////////////////////////////////////////////////////////////
//       Class : Namable
// Description : A base class for all things which can have a name.
//               The name is either empty or nonempty, but it is never
//               NULL.
////////////////////////////////////////////////////////////////////

2765 11 SubfileInfo 0 141313 11 SubfileInfo 11 SubfileInfo 0 0 0 1 2501 2509 0 7 2502 2503 2504 2505 2506 2507 2508 0 0 0 0 0 418
////////////////////////////////////////////////////////////////////
//       Class : SubfileInfo
// Description : This class records a particular byte sub-range within
//               an existing file on disk.  Generally, the filename is
//               understood as a physical file on disk, and not to be
//               looked up via the vfs.
////////////////////////////////////////////////////////////////////

2766 11 VirtualFile 0 141313 11 VirtualFile 11 VirtualFile 0 0 0 0 2539 0 29 2510 2511 2512 2513 2514 2515 2516 2517 2518 2519 2520 2521 2522 2523 2524 2525 2526 2527 2528 2529 2530 2531 2532 2533 2534 2535 2536 2537 2538 0 0 1 0 2754 0 0 0 0 278
////////////////////////////////////////////////////////////////////
//       Class : VirtualFile
// Description : The abstract base class for a file or directory
//               within the VirtualFileSystem.
////////////////////////////////////////////////////////////////////

2767 20 VirtualFileComposite 0 141313 20 VirtualFileComposite 20 VirtualFileComposite 0 0 0 0 2541 0 1 2540 0 0 1 0 2766 0 0 0 0 450
////////////////////////////////////////////////////////////////////
//       Class : VirtualFileComposite
// Description : A composite directory within the VirtualFileSystem:
//               this maps to more than one directory on different
//               mount points.  The resulting directory appears to be
//               the union of all the individual simple directories.
////////////////////////////////////////////////////////////////////

2768 16 VirtualFileMount 0 75777 16 VirtualFileMount 16 VirtualFileMount 0 0 0 0 2354 0 6 2542 2543 2544 2545 2546 2547 0 0 1 0 2754 0 0 0 0 365
////////////////////////////////////////////////////////////////////
//       Class : VirtualFileMount
// Description : The abstract base class for a mount definition used
//               within a VirtualFileSystem.  Normally users don't
//               need to monkey with this class directly.
////////////////////////////////////////////////////////////////////

2769 25 VirtualFileMountMultifile 0 75777 25 VirtualFileMountMultifile 25 VirtualFileMountMultifile 0 0 0 1 2548 2354 0 2 2549 2550 0 0 1 0 2768 0 0 0 0 270
////////////////////////////////////////////////////////////////////
//       Class : VirtualFileMountMultifile
// Description : Maps a Multifile's contents into the
//               VirtualFileSystem.
////////////////////////////////////////////////////////////////////

2770 23 VirtualFileMountRamdisk 0 141313 23 VirtualFileMountRamdisk 23 VirtualFileMountRamdisk 0 0 0 1 2551 2553 0 1 2552 0 0 1 0 2768 0 0 0 0 659
////////////////////////////////////////////////////////////////////
//       Class : VirtualFileMountRamdisk
// Description : Simulates an actual directory on disk with in-memory
//               storage.  This is useful mainly for performing high
//               level functions that expect disk I/O without actually
//               writing files to disk.  Naturally, there are
//               significant limits to the size of the files that may
//               be written with this system; and "files" written here
//               are not automatically persistent between sessions.
////////////////////////////////////////////////////////////////////

2771 22 VirtualFileMountSystem 0 141313 22 VirtualFileMountSystem 22 VirtualFileMountSystem 0 0 0 1 2554 2557 0 2 2555 2556 0 0 1 0 2768 0 0 0 0 267
////////////////////////////////////////////////////////////////////
//       Class : VirtualFileMountSystem
// Description : Maps an actual OS directory into the
//               VirtualFileSystem.
////////////////////////////////////////////////////////////////////

2772 17 VirtualFileSimple 0 141313 17 VirtualFileSimple 17 VirtualFileSimple 0 0 0 0 2561 0 3 2558 2559 2560 0 0 1 0 2766 0 0 0 0 407
////////////////////////////////////////////////////////////////////
//       Class : VirtualFileSimple
// Description : A simple file or directory within the
//               VirtualFileSystem: this maps to exactly one file on
//               one mount point.  Most directories, and all regular
//               files, are of this kind.
////////////////////////////////////////////////////////////////////

2773 13 TemporaryFile 0 75777 13 TemporaryFile 13 TemporaryFile 0 0 0 1 2562 2358 0 1 2563 0 0 1 0 2755 0 0 0 0 426
////////////////////////////////////////////////////////////////////
//       Class : TemporaryFile
// Description : This is a special kind of FileReference class that
//               automatically deletes the file in question when it is
//               deleted.  It is not responsible for creating,
//               opening, or closing the file, however.
////////////////////////////////////////////////////////////////////

2774 17 IDecompressStream 0 141313 17 IDecompressStream 17 IDecompressStream 0 0 0 1 2564 2567 0 2 2565 2566 0 0 1 0 2701 0 0 0 0 589
////////////////////////////////////////////////////////////////////
//       Class : IDecompressStream
// Description : An input stream object that uses zlib to decompress
//               (inflate) the input from another source stream
//               on-the-fly.
//
//               Attach an IDecompressStream to an existing istream that
//               provides compressed data, and read the corresponding
//               uncompressed data from the IDecompressStream.
//
//               Seeking is not supported.
////////////////////////////////////////////////////////////////////

2775 15 OCompressStream 0 141313 15 OCompressStream 15 OCompressStream 0 0 0 1 2568 2571 0 2 2569 2570 0 0 1 0 2706 0 0 0 0 575
////////////////////////////////////////////////////////////////////
//       Class : OCompressStream
// Description : An input stream object that uses zlib to compress
//               (deflate) data to another destination stream
//               on-the-fly.
//
//               Attach an OCompressStream to an existing ostream that will
//               accept compressed data, and write your uncompressed
//               source data to the OCompressStream.
//
//               Seeking is not supported.
////////////////////////////////////////////////////////////////////

2776 15 VirtualFileList 0 75777 15 VirtualFileList 15 VirtualFileList 0 0 0 0 2216 0 6 2572 2573 2574 2575 2576 2577 1 3092 0 1 0 2745 0 0 0 0 275
////////////////////////////////////////////////////////////////////
//       Class : VirtualFileList
// Description : A list of VirtualFiles, as returned by 
//               VirtualFile::scan_directory().
////////////////////////////////////////////////////////////////////

2777 17 VirtualFileSystem 0 26625 17 VirtualFileSystem 17 VirtualFileSystem 0 0 0 1 2578 2579 0 37 2580 2581 2582 2583 2584 2585 2586 2587 2588 2589 2590 2591 2592 2593 2594 2595 2596 2597 2598 2599 2600 2601 2602 2603 2604 2605 2606 2607 2608 2609 2610 2611 2612 2613 2614 2615 2616 1 3093 0 0 0 1 2778 621
////////////////////////////////////////////////////////////////////
//       Class : VirtualFileSystem
// Description : A hierarchy of directories and files that appears to
//               be one continuous file system, even though the files
//               may originate from several different sources that may
//               not be related to the actual OS's file system.
//
//               For instance, a VirtualFileSystem can transparently
//               mount one or more Multifiles as their own
//               subdirectory hierarchies.
////////////////////////////////////////////////////////////////////

2778 10 MountFlags 0 794624 29 VirtualFileSystem::MountFlags 29 VirtualFileSystem::MountFlags 2777 0 0 0 0 0 0 0 0 0 1 12 MF_read_only 31 VirtualFileSystem::MF_read_only 0
2 0 0

2779 9 TrueClock 0 43009 9 TrueClock 9 TrueClock 0 0 0 0 0 0 6 2617 2618 2619 2620 2621 2622 0 0 0 0 0 773
////////////////////////////////////////////////////////////////////
//       Class : TrueClock
// Description : An interface to whatever real-time clock we might
//               have available in the current environment.  There is
//               only one TrueClock in existence, and it constructs
//               itself.
//
//               The TrueClock returns elapsed real time in seconds
//               since some undefined epoch.  Since it is not defined
//               at what time precisely the clock indicates zero, this
//               value can only be meaningfully used to measure
//               elapsed time, by sampling it at two different times
//               and subtracting.
////////////////////////////////////////////////////////////////////

2780 9 Patchfile 0 26625 9 Patchfile 9 Patchfile 0 0 0 1 2623 2624 0 14 2625 2626 2627 2628 2629 2630 2631 2632 2633 2634 2635 2636 2637 2638 0 0 0 0 0 181
////////////////////////////////////////////////////////////////////
//       Class : Patchfile
// Description :
////////////////////////////////////////////////////////////////////

2781 12 ProfileTimer 0 26625 12 ProfileTimer 12 ProfileTimer 0 0 0 1 2640 2641 0 9 2642 2643 2644 2645 2646 2647 2648 2649 2650 0 0 0 0 0 713
/*
    ProfileTimer

    HowTo:
      Create a ProfileTimer and hold onto it.
      Call init() whenever you like (the timer doesn't
        start yet).
      Call on() to start the timer.
      While the timer is on, call mark() at each point of interest,
        in the code you are timing.
      You can turn the timer off() and on() to skip things you
        don't want to time.
      When your timing is finished, call printTo() to see the
        results (e.g. myTimer.printTo(cerr)).

    Notes:
      You should be able to time things down to the millisecond
      well enough, but if you call on() and off() within micro-
      seconds of each other, I don't think you'll get very good
      results.
*/

2782 17 WeakPointerToVoid 0 43009 17 WeakPointerToVoid 17 WeakPointerToVoid 0 0 0 0 0 0 2 2651 2652 0 0 1 0 2663 0 0 0 0 362
////////////////////////////////////////////////////////////////////
//       Class : WeakPointerToVoid
// Description : This is the specialization of PointerToVoid for weak
//               pointers.  It needs an additional flag to indicate
//               that the pointer has been deleted.
////////////////////////////////////////////////////////////////////

2783 15 WindowsRegistry 0 141313 15 WindowsRegistry 15 WindowsRegistry 0 0 0 0 2658 0 5 2653 2654 2655 2656 2657 0 0 0 0 2 2784 2785 484
////////////////////////////////////////////////////////////////////
//       Class : WindowsRegistry
// Description : This class provides a hook to Python to read and
//               write strings and integers to the windows registry.
//               It automatically converts strings from utf-8 encoding
//               and stores them in Unicode (and conversely reconverts
//               them on retrieval).
////////////////////////////////////////////////////////////////////

2784 8 RegLevel 0 794624 25 WindowsRegistry::RegLevel 25 WindowsRegistry::RegLevel 2783 0 0 0 0 0 0 0 0 0 2 10 rl_machine 27 WindowsRegistry::rl_machine 0
0 7 rl_user 24 WindowsRegistry::rl_user 0
1 0 0

2785 4 Type 0 794624 21 WindowsRegistry::Type 21 WindowsRegistry::Type 2783 0 0 0 0 0 0 0 0 0 3 6 T_none 23 WindowsRegistry::T_none 0
0 5 T_int 22 WindowsRegistry::T_int 0
1 8 T_string 25 WindowsRegistry::T_string 0
2 0 0

2786 12 PTA_stdfloat 0 2105345 12 PTA_stdfloat 12 PTA_stdfloat 0 0 2724 0 0 0 0 0 0 0 0 0 0

2787 13 CPTA_stdfloat 0 2105345 13 CPTA_stdfloat 13 CPTA_stdfloat 0 0 2665 0 0 0 0 0 0 0 0 0 0

2788 37 ConstPointerToArray< double > const * 0 8576 37 ConstPointerToArray< double > const * 37 ConstPointerToArray< double > const * 0 0 2789 0 0 0 0 0 0 0 0 0 0

2789 35 ConstPointerToArray< double > const 0 8832 35 ConstPointerToArray< double > const 35 ConstPointerToArray< double > const 0 0 2660 0 0 0 0 0 0 0 0 0 0

2790 31 ConstPointerToArray< double > * 0 8576 31 ConstPointerToArray< double > * 31 ConstPointerToArray< double > * 0 0 2660 0 0 0 0 0 0 0 0 0 0

2791 32 PointerToArray< double > const * 0 8576 32 PointerToArray< double > const * 32 PointerToArray< double > const * 0 0 2792 0 0 0 0 0 0 0 0 0 0

2792 30 PointerToArray< double > const 0 8832 30 PointerToArray< double > const 30 PointerToArray< double > const 0 0 2723 0 0 0 0 0 0 0 0 0 0

2793 10 PyObject * 0 8576 10 PyObject * 10 PyObject * 0 0 2794 0 0 0 0 0 0 0 0 0 0

2794 8 PyObject 0 2105344 8 PyObject 8 PyObject 0 0 2795 0 0 0 0 0 0 0 0 0 0

2795 7 _object 0 1024 7 _object 7 _object 0 0 0 0 0 0 0 0 0 0 0 0 0

2796 6 size_t 0 2105344 6 size_t 6 size_t 0 0 2797 0 0 0 0 0 0 0 0 0 0

2797 17 unsigned long int 0 8214 17 unsigned long int 17 unsigned long int 0 1 0 0 0 0 0 0 0 0 0 0 0

2798 6 double 0 8194 6 double 6 double 0 3 0 0 0 0 0 0 0 0 0 0 0

2799 13 atomic string 0 2 13 atomic string 13 atomic string 0 7 0 0 0 0 0 0 0 0 0 0 0

2800 3 int 0 8194 3 int 3 int 0 1 0 0 0 0 0 0 0 0 0 0 0

2801 11 Py_buffer * 0 8576 11 Py_buffer * 11 Py_buffer * 0 0 2802 0 0 0 0 0 0 0 0 0 0

2802 9 Py_buffer 0 1024 9 Py_buffer 9 Py_buffer 0 0 0 0 0 0 0 0 0 0 0 0 0

2803 4 void 0 8194 4 void 4 void 0 6 0 0 0 0 0 0 0 0 0 0 0

2804 51 PointerToBase< ReferenceCountedVector< double > > * 0 8576 51 PointerToBase< ReferenceCountedVector< double > > * 51 PointerToBase< ReferenceCountedVector< double > > * 0 0 2662 0 0 0 0 0 0 0 0 0 0

2805 57 PointerToBase< ReferenceCountedVector< double > > const * 0 8576 57 PointerToBase< ReferenceCountedVector< double > > const * 57 PointerToBase< ReferenceCountedVector< double > > const * 0 0 2806 0 0 0 0 0 0 0 0 0 0

2806 55 PointerToBase< ReferenceCountedVector< double > > const 0 8832 55 PointerToBase< ReferenceCountedVector< double > > const 55 PointerToBase< ReferenceCountedVector< double > > const 0 0 2662 0 0 0 0 0 0 0 0 0 0

2807 9 ostream * 0 8576 9 ostream * 9 ostream * 0 0 2706 0 0 0 0 0 0 0 0 0 0

2808 21 PointerToVoid const * 0 8576 21 PointerToVoid const * 21 PointerToVoid const * 0 0 2809 0 0 0 0 0 0 0 0 0 0

2809 19 PointerToVoid const 0 8832 19 PointerToVoid const 19 PointerToVoid const 0 0 2663 0 0 0 0 0 0 0 0 0 0

2810 4 bool 0 8194 4 bool 4 bool 0 4 0 0 0 0 0 0 0 0 0 0 0

2811 36 ConstPointerToArray< float > const * 0 8576 36 ConstPointerToArray< float > const * 36 ConstPointerToArray< float > const * 0 0 2812 0 0 0 0 0 0 0 0 0 0

2812 34 ConstPointerToArray< float > const 0 8832 34 ConstPointerToArray< float > const 34 ConstPointerToArray< float > const 0 0 2666 0 0 0 0 0 0 0 0 0 0

2813 30 ConstPointerToArray< float > * 0 8576 30 ConstPointerToArray< float > * 30 ConstPointerToArray< float > * 0 0 2666 0 0 0 0 0 0 0 0 0 0

2814 31 PointerToArray< float > const * 0 8576 31 PointerToArray< float > const * 31 PointerToArray< float > const * 0 0 2815 0 0 0 0 0 0 0 0 0 0

2815 29 PointerToArray< float > const 0 8832 29 PointerToArray< float > const 29 PointerToArray< float > const 0 0 2725 0 0 0 0 0 0 0 0 0 0

2816 5 float 0 8194 5 float 5 float 0 2 0 0 0 0 0 0 0 0 0 0 0

2817 50 PointerToBase< ReferenceCountedVector< float > > * 0 8576 50 PointerToBase< ReferenceCountedVector< float > > * 50 PointerToBase< ReferenceCountedVector< float > > * 0 0 2668 0 0 0 0 0 0 0 0 0 0

2818 56 PointerToBase< ReferenceCountedVector< float > > const * 0 8576 56 PointerToBase< ReferenceCountedVector< float > > const * 56 PointerToBase< ReferenceCountedVector< float > > const * 0 0 2819 0 0 0 0 0 0 0 0 0 0

2819 54 PointerToBase< ReferenceCountedVector< float > > const 0 8832 54 PointerToBase< ReferenceCountedVector< float > > const 54 PointerToBase< ReferenceCountedVector< float > > const 0 0 2668 0 0 0 0 0 0 0 0 0 0

2820 34 ConstPointerToArray< int > const * 0 8576 34 ConstPointerToArray< int > const * 34 ConstPointerToArray< int > const * 0 0 2821 0 0 0 0 0 0 0 0 0 0

2821 32 ConstPointerToArray< int > const 0 8832 32 ConstPointerToArray< int > const 32 ConstPointerToArray< int > const 0 0 2670 0 0 0 0 0 0 0 0 0 0

2822 28 ConstPointerToArray< int > * 0 8576 28 ConstPointerToArray< int > * 28 ConstPointerToArray< int > * 0 0 2670 0 0 0 0 0 0 0 0 0 0

2823 29 PointerToArray< int > const * 0 8576 29 PointerToArray< int > const * 29 PointerToArray< int > const * 0 0 2824 0 0 0 0 0 0 0 0 0 0

2824 27 PointerToArray< int > const 0 8832 27 PointerToArray< int > const 27 PointerToArray< int > const 0 0 2727 0 0 0 0 0 0 0 0 0 0

2825 48 PointerToBase< ReferenceCountedVector< int > > * 0 8576 48 PointerToBase< ReferenceCountedVector< int > > * 48 PointerToBase< ReferenceCountedVector< int > > * 0 0 2672 0 0 0 0 0 0 0 0 0 0

2826 54 PointerToBase< ReferenceCountedVector< int > > const * 0 8576 54 PointerToBase< ReferenceCountedVector< int > > const * 54 PointerToBase< ReferenceCountedVector< int > > const * 0 0 2827 0 0 0 0 0 0 0 0 0 0

2827 52 PointerToBase< ReferenceCountedVector< int > > const 0 8832 52 PointerToBase< ReferenceCountedVector< int > > const 52 PointerToBase< ReferenceCountedVector< int > > const 0 0 2672 0 0 0 0 0 0 0 0 0 0

2828 44 ConstPointerToArray< unsigned char > const * 0 8576 44 ConstPointerToArray< unsigned char > const * 44 ConstPointerToArray< unsigned char > const * 0 0 2829 0 0 0 0 0 0 0 0 0 0

2829 42 ConstPointerToArray< unsigned char > const 0 8832 42 ConstPointerToArray< unsigned char > const 42 ConstPointerToArray< unsigned char > const 0 0 2674 0 0 0 0 0 0 0 0 0 0

2830 38 ConstPointerToArray< unsigned char > * 0 8576 38 ConstPointerToArray< unsigned char > * 38 ConstPointerToArray< unsigned char > * 0 0 2674 0 0 0 0 0 0 0 0 0 0

2831 39 PointerToArray< unsigned char > const * 0 8576 39 PointerToArray< unsigned char > const * 39 PointerToArray< unsigned char > const * 0 0 2832 0 0 0 0 0 0 0 0 0 0

2832 37 PointerToArray< unsigned char > const 0 8832 37 PointerToArray< unsigned char > const 37 PointerToArray< unsigned char > const 0 0 2729 0 0 0 0 0 0 0 0 0 0

2833 13 unsigned char 0 8198 13 unsigned char 13 unsigned char 0 5 0 0 0 0 0 0 0 0 0 0 0

2834 58 PointerToBase< ReferenceCountedVector< unsigned char > > * 0 8576 58 PointerToBase< ReferenceCountedVector< unsigned char > > * 58 PointerToBase< ReferenceCountedVector< unsigned char > > * 0 0 2676 0 0 0 0 0 0 0 0 0 0

2835 64 PointerToBase< ReferenceCountedVector< unsigned char > > const * 0 8576 64 PointerToBase< ReferenceCountedVector< unsigned char > > const * 64 PointerToBase< ReferenceCountedVector< unsigned char > > const * 0 0 2836 0 0 0 0 0 0 0 0 0 0

2836 62 PointerToBase< ReferenceCountedVector< unsigned char > > const 0 8832 62 PointerToBase< ReferenceCountedVector< unsigned char > > const 62 PointerToBase< ReferenceCountedVector< unsigned char > > const 0 0 2676 0 0 0 0 0 0 0 0 0 0

2837 25 ConfigDeclaration const * 0 8576 25 ConfigDeclaration const * 25 ConfigDeclaration const * 0 0 2838 0 0 0 0 0 0 0 0 0 0

2838 23 ConfigDeclaration const 0 8832 23 ConfigDeclaration const 23 ConfigDeclaration const 0 0 2677 0 0 0 0 0 0 0 0 0 0

2839 12 ConfigPage * 0 8576 12 ConfigPage * 12 ConfigPage * 0 0 2681 0 0 0 0 0 0 0 0 0 0

2840 20 ConfigVariableCore * 0 8576 20 ConfigVariableCore * 20 ConfigVariableCore * 0 0 2686 0 0 0 0 0 0 0 0 0 0

2841 19 ConfigDeclaration * 0 8576 19 ConfigDeclaration * 19 ConfigDeclaration * 0 0 2677 0 0 0 0 0 0 0 0 0 0

2842 8 PN_int64 0 2105344 8 PN_int64 8 PN_int64 0 0 2843 0 0 0 0 0 0 0 0 0 0

2843 13 long long int 0 8226 13 long long int 13 long long int 0 8 0 0 0 0 0 0 0 0 0 0 0

2844 18 ConfigPage const * 0 8576 18 ConfigPage const * 18 ConfigPage const * 0 0 2845 0 0 0 0 0 0 0 0 0 0

2845 16 ConfigPage const 0 8832 16 ConfigPage const 16 ConfigPage const 0 0 2681 0 0 0 0 0 0 0 0 0 0

2846 9 istream * 0 8576 9 istream * 9 istream * 0 0 2701 0 0 0 0 0 0 0 0 0 0

2847 25 ConfigPageManager const * 0 8576 25 ConfigPageManager const * 25 ConfigPageManager const * 0 0 2848 0 0 0 0 0 0 0 0 0 0

2848 23 ConfigPageManager const 0 8832 23 ConfigPageManager const 23 ConfigPageManager const 0 0 2682 0 0 0 0 0 0 0 0 0 0

2849 19 ConfigPageManager * 0 8576 19 ConfigPageManager * 19 ConfigPageManager * 0 0 2682 0 0 0 0 0 0 0 0 0 0

2850 13 DSearchPath * 0 8576 13 DSearchPath * 13 DSearchPath * 0 0 2696 0 0 0 0 0 0 0 0 0 0

2851 16 ConfigVariable * 0 8576 16 ConfigVariable * 16 ConfigVariable * 0 0 2683 0 0 0 0 0 0 0 0 0 0

2852 22 ConfigVariable const * 0 8576 22 ConfigVariable const * 22 ConfigVariable const * 0 0 2853 0 0 0 0 0 0 0 0 0 0

2853 20 ConfigVariable const 0 8832 20 ConfigVariable const 20 ConfigVariable const 0 0 2683 0 0 0 0 0 0 0 0 0 0

2854 26 ConfigVariableBase const * 0 8576 26 ConfigVariableBase const * 26 ConfigVariableBase const * 0 0 2855 0 0 0 0 0 0 0 0 0 0

2855 24 ConfigVariableBase const 0 8832 24 ConfigVariableBase const 24 ConfigVariableBase const 0 0 2684 0 0 0 0 0 0 0 0 0 0

2856 20 ConfigVariableBase * 0 8576 20 ConfigVariableBase * 20 ConfigVariableBase * 0 0 2684 0 0 0 0 0 0 0 0 0 0

2857 20 ConfigVariableBool * 0 8576 20 ConfigVariableBool * 20 ConfigVariableBool * 0 0 2685 0 0 0 0 0 0 0 0 0 0

2858 26 ConfigVariableBool const * 0 8576 26 ConfigVariableBool const * 26 ConfigVariableBool const * 0 0 2859 0 0 0 0 0 0 0 0 0 0

2859 24 ConfigVariableBool const 0 8832 24 ConfigVariableBool const 24 ConfigVariableBool const 0 0 2685 0 0 0 0 0 0 0 0 0 0

2860 26 ConfigVariableCore const * 0 8576 26 ConfigVariableCore const * 26 ConfigVariableCore const * 0 0 2861 0 0 0 0 0 0 0 0 0 0

2861 24 ConfigVariableCore const 0 8832 24 ConfigVariableCore const 24 ConfigVariableCore const 0 0 2686 0 0 0 0 0 0 0 0 0 0

2862 22 ConfigVariableDouble * 0 8576 22 ConfigVariableDouble * 22 ConfigVariableDouble * 0 0 2687 0 0 0 0 0 0 0 0 0 0

2863 28 ConfigVariableDouble const * 0 8576 28 ConfigVariableDouble const * 28 ConfigVariableDouble const * 0 0 2864 0 0 0 0 0 0 0 0 0 0

2864 26 ConfigVariableDouble const 0 8832 26 ConfigVariableDouble const 26 ConfigVariableDouble const 0 0 2687 0 0 0 0 0 0 0 0 0 0

2865 24 ConfigVariableFilename * 0 8576 24 ConfigVariableFilename * 24 ConfigVariableFilename * 0 0 2688 0 0 0 0 0 0 0 0 0 0

2866 16 Filename const * 0 8576 16 Filename const * 16 Filename const * 0 0 2867 0 0 0 0 0 0 0 0 0 0

2867 14 Filename const 0 8832 14 Filename const 14 Filename const 0 0 2707 0 0 0 0 0 0 0 0 0 0

2868 30 ConfigVariableFilename const * 0 8576 30 ConfigVariableFilename const * 30 ConfigVariableFilename const * 0 0 2869 0 0 0 0 0 0 0 0 0 0

2869 28 ConfigVariableFilename const 0 8832 28 ConfigVariableFilename const 28 ConfigVariableFilename const 0 0 2688 0 0 0 0 0 0 0 0 0 0

2870 4 char 0 8194 4 char 4 char 0 5 0 0 0 0 0 0 0 0 0 0 0

2871 10 Filename * 0 8576 10 Filename * 10 Filename * 0 0 2707 0 0 0 0 0 0 0 0 0 0

2872 19 ConfigVariableInt * 0 8576 19 ConfigVariableInt * 19 ConfigVariableInt * 0 0 2689 0 0 0 0 0 0 0 0 0 0

2873 25 ConfigVariableInt const * 0 8576 25 ConfigVariableInt const * 25 ConfigVariableInt const * 0 0 2874 0 0 0 0 0 0 0 0 0 0

2874 23 ConfigVariableInt const 0 8832 23 ConfigVariableInt const 23 ConfigVariableInt const 0 0 2689 0 0 0 0 0 0 0 0 0 0

2875 21 ConfigVariableInt64 * 0 8576 21 ConfigVariableInt64 * 21 ConfigVariableInt64 * 0 0 2690 0 0 0 0 0 0 0 0 0 0

2876 27 ConfigVariableInt64 const * 0 8576 27 ConfigVariableInt64 const * 27 ConfigVariableInt64 const * 0 0 2877 0 0 0 0 0 0 0 0 0 0

2877 25 ConfigVariableInt64 const 0 8832 25 ConfigVariableInt64 const 25 ConfigVariableInt64 const 0 0 2690 0 0 0 0 0 0 0 0 0 0

2878 20 ConfigVariableList * 0 8576 20 ConfigVariableList * 20 ConfigVariableList * 0 0 2691 0 0 0 0 0 0 0 0 0 0

2879 26 ConfigVariableList const * 0 8576 26 ConfigVariableList const * 26 ConfigVariableList const * 0 0 2880 0 0 0 0 0 0 0 0 0 0

2880 24 ConfigVariableList const 0 8832 24 ConfigVariableList const 24 ConfigVariableList const 0 0 2691 0 0 0 0 0 0 0 0 0 0

2881 23 ConfigVariableManager * 0 8576 23 ConfigVariableManager * 23 ConfigVariableManager * 0 0 2692 0 0 0 0 0 0 0 0 0 0

2882 29 ConfigVariableManager const * 0 8576 29 ConfigVariableManager const * 29 ConfigVariableManager const * 0 0 2883 0 0 0 0 0 0 0 0 0 0

2883 27 ConfigVariableManager const 0 8832 27 ConfigVariableManager const 27 ConfigVariableManager const 0 0 2692 0 0 0 0 0 0 0 0 0 0

2884 19 DSearchPath const * 0 8576 19 DSearchPath const * 19 DSearchPath const * 0 0 2885 0 0 0 0 0 0 0 0 0 0

2885 17 DSearchPath const 0 8832 17 DSearchPath const 17 DSearchPath const 0 0 2696 0 0 0 0 0 0 0 0 0 0

2886 26 ConfigVariableSearchPath * 0 8576 26 ConfigVariableSearchPath * 26 ConfigVariableSearchPath * 0 0 2693 0 0 0 0 0 0 0 0 0 0

2887 32 ConfigVariableSearchPath const * 0 8576 32 ConfigVariableSearchPath const * 32 ConfigVariableSearchPath const * 0 0 2888 0 0 0 0 0 0 0 0 0 0

2888 30 ConfigVariableSearchPath const 0 8832 30 ConfigVariableSearchPath const 30 ConfigVariableSearchPath const 0 0 2693 0 0 0 0 0 0 0 0 0 0

2889 9 Results * 0 8576 22 DSearchPath::Results * 22 DSearchPath::Results * 0 0 2697 0 0 0 0 0 0 0 0 0 0

2890 22 ConfigVariableString * 0 8576 22 ConfigVariableString * 22 ConfigVariableString * 0 0 2694 0 0 0 0 0 0 0 0 0 0

2891 28 ConfigVariableString const * 0 8576 28 ConfigVariableString const * 28 ConfigVariableString const * 0 0 2892 0 0 0 0 0 0 0 0 0 0

2892 26 ConfigVariableString const 0 8832 26 ConfigVariableString const 26 ConfigVariableString const 0 0 2694 0 0 0 0 0 0 0 0 0 0

2893 15 Results const * 0 8576 28 DSearchPath::Results const * 28 DSearchPath::Results const * 0 0 2894 0 0 0 0 0 0 0 0 0 0

2894 13 Results const 0 8832 26 DSearchPath::Results const 26 DSearchPath::Results const 0 0 2697 0 0 0 0 0 0 0 0 0 0

2895 12 FileStream * 0 8576 12 FileStream * 12 FileStream * 0 0 2699 0 0 0 0 0 0 0 0 0 0

2896 10 iostream * 0 8576 10 iostream * 10 iostream * 0 0 2700 0 0 0 0 0 0 0 0 0 0

2897 9 streamoff 0 2367488 14 ios::streamoff 14 ios::streamoff 2702 0 2898 0 0 0 0 0 0 0 0 0 0

2898 8 long int 0 8210 8 long int 8 long int 0 1 0 0 0 0 0 0 0 0 0 0 0

2899 5 ios * 0 8576 5 ios * 5 ios * 0 0 2702 0 0 0 0 0 0 0 0 0 0

2900 11 ios const * 0 8576 11 ios const * 11 ios const * 0 0 2901 0 0 0 0 0 0 0 0 0 0

2901 9 ios const 0 8832 9 ios const 9 ios const 0 0 2702 0 0 0 0 0 0 0 0 0 0

2902 15 vector_string * 0 8576 15 vector_string * 15 vector_string * 0 0 2903 0 0 0 0 0 0 0 0 0 0

2903 13 vector_string 0 2105344 13 vector_string 13 vector_string 0 0 2904 0 0 0 0 0 0 0 0 0 0

2904 16 vector< string > 0 2048 16 vector< string > 16 vector< string > 0 0 0 0 0 0 0 0 0 0 0 0 0

2905 6 time_t 0 2105344 6 time_t 6 time_t 0 0 2906 0 0 0 0 0 0 0 0 0 0

2906 12 unsigned int 0 8198 12 unsigned int 12 unsigned int 0 1 0 0 0 0 0 0 0 0 0 0 0

2907 10 streamsize 0 2105344 10 streamsize 10 streamsize 0 0 2800 0 0 0 0 0 0 0 0 0 0

2908 10 ifstream * 0 8576 10 ifstream * 10 ifstream * 0 0 2741 0 0 0 0 0 0 0 0 0 0

2909 11 pifstream * 0 8576 11 pifstream * 11 pifstream * 0 0 2910 0 0 0 0 0 0 0 0 0 0

2910 9 pifstream 0 2105344 9 pifstream 9 pifstream 0 0 2711 0 0 0 0 0 0 0 0 0 0

2911 10 ofstream * 0 8576 10 ofstream * 10 ofstream * 0 0 2742 0 0 0 0 0 0 0 0 0 0

2912 11 pofstream * 0 8576 11 pofstream * 11 pofstream * 0 0 2913 0 0 0 0 0 0 0 0 0 0

2913 9 pofstream 0 2105344 9 pofstream 9 pofstream 0 0 2720 0 0 0 0 0 0 0 0 0 0

2914 9 fstream * 0 8576 9 fstream * 9 fstream * 0 0 2740 0 0 0 0 0 0 0 0 0 0

2915 10 pfstream * 0 8576 10 pfstream * 10 pfstream * 0 0 2916 0 0 0 0 0 0 0 0 0 0

2916 8 pfstream 0 2105344 8 pfstream 8 pfstream 0 0 2699 0 0 0 0 0 0 0 0 0 0

2917 12 TypeHandle * 0 8576 12 TypeHandle * 12 TypeHandle * 0 0 2736 0 0 0 0 0 0 0 0 0 0

2918 19 GlobPattern const * 0 8576 19 GlobPattern const * 19 GlobPattern const * 0 0 2919 0 0 0 0 0 0 0 0 0 0

2919 17 GlobPattern const 0 8832 17 GlobPattern const 17 GlobPattern const 0 0 2709 0 0 0 0 0 0 0 0 0 0

2920 13 GlobPattern * 0 8576 13 GlobPattern * 13 GlobPattern * 0 0 2709 0 0 0 0 0 0 0 0 0 0

2921 16 IDecryptStream * 0 8576 16 IDecryptStream * 16 IDecryptStream * 0 0 2710 0 0 0 0 0 0 0 0 0 0

2922 22 IDecryptStream const * 0 8576 22 IDecryptStream const * 22 IDecryptStream const * 0 0 2923 0 0 0 0 0 0 0 0 0 0

2923 20 IDecryptStream const 0 8832 20 IDecryptStream const 20 IDecryptStream const 0 0 2710 0 0 0 0 0 0 0 0 0 0

2924 13 IFileStream * 0 8576 13 IFileStream * 13 IFileStream * 0 0 2711 0 0 0 0 0 0 0 0 0 0

2925 16 IStreamWrapper * 0 8576 16 IStreamWrapper * 16 IStreamWrapper * 0 0 2712 0 0 0 0 0 0 0 0 0 0

2926 22 IStreamWrapper const * 0 8576 22 IStreamWrapper const * 22 IStreamWrapper const * 0 0 2927 0 0 0 0 0 0 0 0 0 0

2927 20 IStreamWrapper const 0 8832 20 IStreamWrapper const 20 IStreamWrapper const 0 0 2712 0 0 0 0 0 0 0 0 0 0

2928 19 StreamWrapperBase * 0 8576 19 StreamWrapperBase * 19 StreamWrapperBase * 0 0 2713 0 0 0 0 0 0 0 0 0 0

2929 12 LineStream * 0 8576 12 LineStream * 12 LineStream * 0 0 2714 0 0 0 0 0 0 0 0 0 0

2930 18 LineStream const * 0 8576 18 LineStream const * 18 LineStream const * 0 0 2931 0 0 0 0 0 0 0 0 0 0

2931 16 LineStream const 0 8832 16 LineStream const 16 LineStream const 0 0 2714 0 0 0 0 0 0 0 0 0 0

2932 8 Notify * 0 8576 8 Notify * 8 Notify * 0 0 2716 0 0 0 0 0 0 0 0 0 0

2933 14 Notify const * 0 8576 14 Notify const * 14 Notify const * 0 0 2934 0 0 0 0 0 0 0 0 0 0

2934 12 Notify const 0 8832 12 Notify const 12 Notify const 0 0 2716 0 0 0 0 0 0 0 0 0 0

2935 16 NotifyCategory * 0 8576 16 NotifyCategory * 16 NotifyCategory * 0 0 2717 0 0 0 0 0 0 0 0 0 0

2936 22 NotifyCategory const * 0 8576 22 NotifyCategory const * 22 NotifyCategory const * 0 0 2937 0 0 0 0 0 0 0 0 0 0

2937 20 NotifyCategory const 0 8832 20 NotifyCategory const 20 NotifyCategory const 0 0 2717 0 0 0 0 0 0 0 0 0 0

2938 12 MemoryBase * 0 8576 12 MemoryBase * 12 MemoryBase * 0 0 2664 0 0 0 0 0 0 0 0 0 0

2939 13 ConfigFlags * 0 8576 13 ConfigFlags * 13 ConfigFlags * 0 0 2678 0 0 0 0 0 0 0 0 0 0

2940 16 OEncryptStream * 0 8576 16 OEncryptStream * 16 OEncryptStream * 0 0 2719 0 0 0 0 0 0 0 0 0 0

2941 13 OFileStream * 0 8576 13 OFileStream * 13 OFileStream * 0 0 2720 0 0 0 0 0 0 0 0 0 0

2942 16 OStreamWrapper * 0 8576 16 OStreamWrapper * 16 OStreamWrapper * 0 0 2721 0 0 0 0 0 0 0 0 0 0

2943 22 OStreamWrapper const * 0 8576 22 OStreamWrapper const * 22 OStreamWrapper const * 0 0 2944 0 0 0 0 0 0 0 0 0 0

2944 20 OStreamWrapper const 0 8832 20 OStreamWrapper const 20 OStreamWrapper const 0 0 2721 0 0 0 0 0 0 0 0 0 0

2945 26 PointerToArray< double > * 0 8576 26 PointerToArray< double > * 26 PointerToArray< double > * 0 0 2723 0 0 0 0 0 0 0 0 0 0

2946 25 PointerToArray< float > * 0 8576 25 PointerToArray< float > * 25 PointerToArray< float > * 0 0 2725 0 0 0 0 0 0 0 0 0 0

2947 23 PointerToArray< int > * 0 8576 23 PointerToArray< int > * 23 PointerToArray< int > * 0 0 2727 0 0 0 0 0 0 0 0 0 0

2948 33 PointerToArray< unsigned char > * 0 8576 33 PointerToArray< unsigned char > * 33 PointerToArray< unsigned char > * 0 0 2729 0 0 0 0 0 0 0 0 0 0

2949 19 PandaSystem const * 0 8576 19 PandaSystem const * 19 PandaSystem const * 0 0 2950 0 0 0 0 0 0 0 0 0 0

2950 17 PandaSystem const 0 8832 17 PandaSystem const 17 PandaSystem const 0 0 2730 0 0 0 0 0 0 0 0 0 0

2951 13 PandaSystem * 0 8576 13 PandaSystem * 13 PandaSystem * 0 0 2730 0 0 0 0 0 0 0 0 0 0

2952 20 StreamReader const * 0 8576 20 StreamReader const * 20 StreamReader const * 0 0 2953 0 0 0 0 0 0 0 0 0 0

2953 18 StreamReader const 0 8832 18 StreamReader const 18 StreamReader const 0 0 2731 0 0 0 0 0 0 0 0 0 0

2954 14 StreamReader * 0 8576 14 StreamReader * 14 StreamReader * 0 0 2731 0 0 0 0 0 0 0 0 0 0

2955 7 PN_int8 0 2105344 7 PN_int8 7 PN_int8 0 0 2956 0 0 0 0 0 0 0 0 0 0

2956 11 signed char 0 8202 11 signed char 11 signed char 0 5 0 0 0 0 0 0 0 0 0 0 0

2957 8 PN_uint8 0 2105344 8 PN_uint8 8 PN_uint8 0 0 2833 0 0 0 0 0 0 0 0 0 0

2958 8 PN_int16 0 2105344 8 PN_int16 8 PN_int16 0 0 2959 0 0 0 0 0 0 0 0 0 0

2959 9 short int 0 8258 9 short int 9 short int 0 1 0 0 0 0 0 0 0 0 0 0 0

2960 8 PN_int32 0 2105344 8 PN_int32 8 PN_int32 0 0 2800 0 0 0 0 0 0 0 0 0 0

2961 9 PN_uint16 0 2105344 9 PN_uint16 9 PN_uint16 0 0 2962 0 0 0 0 0 0 0 0 0 0

2962 18 unsigned short int 0 8262 18 unsigned short int 18 unsigned short int 0 1 0 0 0 0 0 0 0 0 0 0 0

2963 9 PN_uint32 0 2105344 9 PN_uint32 9 PN_uint32 0 0 2906 0 0 0 0 0 0 0 0 0 0

2964 9 PN_uint64 0 2105344 9 PN_uint64 9 PN_uint64 0 0 2965 0 0 0 0 0 0 0 0 0 0

2965 22 unsigned long long int 0 8230 22 unsigned long long int 22 unsigned long long int 0 8 0 0 0 0 0 0 0 0 0 0 0

2966 10 PN_float64 0 2105344 10 PN_float64 10 PN_float64 0 0 2798 0 0 0 0 0 0 0 0 0 0

2967 15 StreamWrapper * 0 8576 15 StreamWrapper * 15 StreamWrapper * 0 0 2732 0 0 0 0 0 0 0 0 0 0

2968 21 StreamWrapper const * 0 8576 21 StreamWrapper const * 21 StreamWrapper const * 0 0 2969 0 0 0 0 0 0 0 0 0 0

2969 19 StreamWrapper const 0 8832 19 StreamWrapper const 19 StreamWrapper const 0 0 2732 0 0 0 0 0 0 0 0 0 0

2970 20 StreamWriter const * 0 8576 20 StreamWriter const * 20 StreamWriter const * 0 0 2971 0 0 0 0 0 0 0 0 0 0

2971 18 StreamWriter const 0 8832 18 StreamWriter const 18 StreamWriter const 0 0 2733 0 0 0 0 0 0 0 0 0 0

2972 14 StreamWriter * 0 8576 14 StreamWriter * 14 StreamWriter * 0 0 2733 0 0 0 0 0 0 0 0 0 0

2973 13 TextEncoder * 0 8576 13 TextEncoder * 13 TextEncoder * 0 0 2734 0 0 0 0 0 0 0 0 0 0

2974 19 TextEncoder const * 0 8576 19 TextEncoder const * 19 TextEncoder const * 0 0 2975 0 0 0 0 0 0 0 0 0 0

2975 17 TextEncoder const 0 8832 17 TextEncoder const 17 TextEncoder const 0 0 2734 0 0 0 0 0 0 0 0 0 0

2976 7 wchar_t 0 8194 7 wchar_t 7 wchar_t 0 1 0 0 0 0 0 0 0 0 0 0 0

2977 14 PyTypeObject * 0 8576 14 PyTypeObject * 14 PyTypeObject * 0 0 2978 0 0 0 0 0 0 0 0 0 0

2978 12 PyTypeObject 0 2105344 12 PyTypeObject 12 PyTypeObject 0 0 2979 0 0 0 0 0 0 0 0 0 0

2979 11 _typeobject 0 1024 11 _typeobject 11 _typeobject 0 0 0 0 0 0 0 0 0 0 0 0 0

2980 18 TypeHandle const * 0 8576 18 TypeHandle const * 18 TypeHandle const * 0 0 2981 0 0 0 0 0 0 0 0 0 0

2981 16 TypeHandle const 0 8832 16 TypeHandle const 16 TypeHandle const 0 0 2736 0 0 0 0 0 0 0 0 0 0

2982 13 TypedObject * 0 8576 13 TypedObject * 13 TypedObject * 0 0 2739 0 0 0 0 0 0 0 0 0 0

2983 18 set< int > const * 0 8576 18 set< int > const * 18 set< int > const * 0 0 2984 0 0 0 0 0 0 0 0 0 0

2984 16 set< int > const 0 8832 16 set< int > const 16 set< int > const 0 0 2985 0 0 0 0 0 0 0 0 0 0

2985 10 set< int > 0 2048 10 set< int > 10 set< int > 0 0 0 0 0 0 0 0 0 0 0 0 0

2986 20 TypeRegistry const * 0 8576 20 TypeRegistry const * 20 TypeRegistry const * 0 0 2987 0 0 0 0 0 0 0 0 0 0

2987 18 TypeRegistry const 0 8832 18 TypeRegistry const 18 TypeRegistry const 0 0 2738 0 0 0 0 0 0 0 0 0 0

2988 14 TypeRegistry * 0 8576 14 TypeRegistry * 14 TypeRegistry * 0 0 2738 0 0 0 0 0 0 0 0 0 0

2989 19 TypedObject const * 0 8576 19 TypedObject const * 19 TypedObject const * 0 0 2990 0 0 0 0 0 0 0 0 0 0

2990 17 TypedObject const 0 8832 17 TypedObject const 17 TypedObject const 0 0 2739 0 0 0 0 0 0 0 0 0 0

2991 21 MemoryUsagePointers * 0 8576 21 MemoryUsagePointers * 21 MemoryUsagePointers * 0 0 2758 0 0 0 0 0 0 0 0 0 0

2992 22 ReferenceCount const * 0 8576 22 ReferenceCount const * 22 ReferenceCount const * 0 0 2993 0 0 0 0 0 0 0 0 0 0

2993 20 ReferenceCount const 0 8832 20 ReferenceCount const 20 ReferenceCount const 0 0 2745 0 0 0 0 0 0 0 0 0 0

2994 16 ReferenceCount * 0 8576 16 ReferenceCount * 16 ReferenceCount * 0 0 2745 0 0 0 0 0 0 0 0 0 0

2995 14 Buffer const * 0 8576 14 Buffer const * 14 Buffer const * 0 0 2996 0 0 0 0 0 0 0 0 0 0

2996 12 Buffer const 0 8832 12 Buffer const 12 Buffer const 0 0 2746 0 0 0 0 0 0 0 0 0 0

2997 27 PStatCollectorForwardBase * 0 8576 27 PStatCollectorForwardBase * 27 PStatCollectorForwardBase * 0 0 2747 0 0 0 0 0 0 0 0 0 0

2998 26 NodeReferenceCount const * 0 8576 26 NodeReferenceCount const * 26 NodeReferenceCount const * 0 0 2999 0 0 0 0 0 0 0 0 0 0

2999 24 NodeReferenceCount const 0 8832 24 NodeReferenceCount const 24 NodeReferenceCount const 0 0 2748 0 0 0 0 0 0 0 0 0 0

3000 10 Datagram * 0 8576 10 Datagram * 10 Datagram * 0 0 2749 0 0 0 0 0 0 0 0 0 0

3001 16 Datagram const * 0 8576 16 Datagram const * 16 Datagram const * 0 0 3002 0 0 0 0 0 0 0 0 0 0

3002 14 Datagram const 0 8832 14 Datagram const 14 Datagram const 0 0 2749 0 0 0 0 0 0 0 0 0 0

3003 10 PN_float32 0 2105344 10 PN_float32 10 PN_float32 0 0 2816 0 0 0 0 0 0 0 0 0 0

3004 11 PN_stdfloat 0 2105344 11 PN_stdfloat 11 PN_stdfloat 0 0 2816 0 0 0 0 0 0 0 0 0 0

3005 11 PTA_uchar * 0 8576 11 PTA_uchar * 11 PTA_uchar * 0 0 2728 0 0 0 0 0 0 0 0 0 0

3006 12 CPTA_uchar * 0 8576 12 CPTA_uchar * 12 CPTA_uchar * 0 0 2673 0 0 0 0 0 0 0 0 0 0

3007 19 DatagramGenerator * 0 8576 19 DatagramGenerator * 19 DatagramGenerator * 0 0 2750 0 0 0 0 0 0 0 0 0 0

3008 13 SubfileInfo * 0 8576 13 SubfileInfo * 13 SubfileInfo * 0 0 2765 0 0 0 0 0 0 0 0 0 0

3009 25 DatagramGenerator const * 0 8576 25 DatagramGenerator const * 25 DatagramGenerator const * 0 0 3010 0 0 0 0 0 0 0 0 0 0

3010 23 DatagramGenerator const 0 8832 23 DatagramGenerator const 23 DatagramGenerator const 0 0 2750 0 0 0 0 0 0 0 0 0 0

3011 19 FileReference const 0 8832 19 FileReference const 19 FileReference const 0 0 2755 0 0 0 0 0 0 0 0 0 0

3012 21 FileReference const * 0 8576 21 FileReference const * 21 FileReference const * 0 0 3011 0 0 0 0 0 0 0 0 0 0

3013 13 VirtualFile * 0 8576 13 VirtualFile * 13 VirtualFile * 0 0 2766 0 0 0 0 0 0 0 0 0 0

3014 9 streamoff 0 2105344 9 streamoff 9 streamoff 0 0 2898 0 0 0 0 0 0 0 0 0 0

3015 18 DatagramIterator * 0 8576 18 DatagramIterator * 18 DatagramIterator * 0 0 2751 0 0 0 0 0 0 0 0 0 0

3016 24 DatagramIterator const * 0 8576 24 DatagramIterator const * 24 DatagramIterator const * 0 0 3017 0 0 0 0 0 0 0 0 0 0

3017 22 DatagramIterator const 0 8832 22 DatagramIterator const 22 DatagramIterator const 0 0 2751 0 0 0 0 0 0 0 0 0 0

3018 14 DatagramSink * 0 8576 14 DatagramSink * 14 DatagramSink * 0 0 2752 0 0 0 0 0 0 0 0 0 0

3019 19 SubfileInfo const * 0 8576 19 SubfileInfo const * 19 SubfileInfo const * 0 0 3020 0 0 0 0 0 0 0 0 0 0

3020 17 SubfileInfo const 0 8832 17 SubfileInfo const 17 SubfileInfo const 0 0 2765 0 0 0 0 0 0 0 0 0 0

3021 21 TypedReferenceCount * 0 8576 21 TypedReferenceCount * 21 TypedReferenceCount * 0 0 2754 0 0 0 0 0 0 0 0 0 0

3022 15 FileReference * 0 8576 15 FileReference * 15 FileReference * 0 0 2755 0 0 0 0 0 0 0 0 0 0

3023 9 Ramfile * 0 8576 9 Ramfile * 9 Ramfile * 0 0 2756 0 0 0 0 0 0 0 0 0 0

3024 15 Ramfile const * 0 8576 15 Ramfile const * 15 Ramfile const * 0 0 3025 0 0 0 0 0 0 0 0 0 0

3025 13 Ramfile const 0 8832 13 Ramfile const 13 Ramfile const 0 0 2756 0 0 0 0 0 0 0 0 0 0

3026 9 HashVal * 0 8576 9 HashVal * 9 HashVal * 0 0 2757 0 0 0 0 0 0 0 0 0 0

3027 15 HashVal const * 0 8576 15 HashVal const * 15 HashVal const * 0 0 3028 0 0 0 0 0 0 0 0 0 0

3028 13 HashVal const 0 8832 13 HashVal const 13 HashVal const 0 0 2757 0 0 0 0 0 0 0 0 0 0

3029 27 MemoryUsagePointers const * 0 8576 27 MemoryUsagePointers const * 27 MemoryUsagePointers const * 0 0 3030 0 0 0 0 0 0 0 0 0 0

3030 25 MemoryUsagePointers const 0 8832 25 MemoryUsagePointers const 25 MemoryUsagePointers const 0 0 2758 0 0 0 0 0 0 0 0 0 0

3031 12 ISubStream * 0 8576 12 ISubStream * 12 ISubStream * 0 0 2759 0 0 0 0 0 0 0 0 0 0

3032 12 OSubStream * 0 8576 12 OSubStream * 12 OSubStream * 0 0 2760 0 0 0 0 0 0 0 0 0 0

3033 11 SubStream * 0 8576 11 SubStream * 11 SubStream * 0 0 2761 0 0 0 0 0 0 0 0 0 0

3034 16 OpenSSLWrapper * 0 8576 16 OpenSSLWrapper * 16 OpenSSLWrapper * 0 0 2762 0 0 0 0 0 0 0 0 0 0

3035 12 X509_STORE * 0 8576 12 X509_STORE * 12 X509_STORE * 0 0 3036 0 0 0 0 0 0 0 0 0 0

3036 10 X509_STORE 0 1024 10 X509_STORE 10 X509_STORE 0 0 0 0 0 0 0 0 0 0 0 0 0

3037 11 Multifile * 0 8576 11 Multifile * 11 Multifile * 0 0 2763 0 0 0 0 0 0 0 0 0 0

3038 17 Multifile const * 0 8576 17 Multifile const * 17 Multifile const * 0 0 3039 0 0 0 0 0 0 0 0 0 0

3039 15 Multifile const 0 8832 15 Multifile const 15 Multifile const 0 0 2763 0 0 0 0 0 0 0 0 0 0

3040 15 Namable const * 0 8576 15 Namable const * 15 Namable const * 0 0 3041 0 0 0 0 0 0 0 0 0 0

3041 13 Namable const 0 8832 13 Namable const 13 Namable const 0 0 2764 0 0 0 0 0 0 0 0 0 0

3042 9 Namable * 0 8576 9 Namable * 9 Namable * 0 0 2764 0 0 0 0 0 0 0 0 0 0

3043 19 VirtualFile const * 0 8576 19 VirtualFile const * 19 VirtualFile const * 0 0 3044 0 0 0 0 0 0 0 0 0 0

3044 17 VirtualFile const 0 8832 17 VirtualFile const 17 VirtualFile const 0 0 2766 0 0 0 0 0 0 0 0 0 0

3045 19 VirtualFileSystem * 0 8576 19 VirtualFileSystem * 19 VirtualFileSystem * 0 0 2777 0 0 0 0 0 0 0 0 0 0

3046 17 VirtualFileList * 0 8576 17 VirtualFileList * 17 VirtualFileList * 0 0 2776 0 0 0 0 0 0 0 0 0 0

3047 24 VirtualFileMount const * 0 8576 24 VirtualFileMount const * 24 VirtualFileMount const * 0 0 3048 0 0 0 0 0 0 0 0 0 0

3048 22 VirtualFileMount const 0 8832 22 VirtualFileMount const 22 VirtualFileMount const 0 0 2768 0 0 0 0 0 0 0 0 0 0

3049 27 VirtualFileMountMultifile * 0 8576 27 VirtualFileMountMultifile * 27 VirtualFileMountMultifile * 0 0 2769 0 0 0 0 0 0 0 0 0 0

3050 33 VirtualFileMountMultifile const * 0 8576 33 VirtualFileMountMultifile const * 33 VirtualFileMountMultifile const * 0 0 3051 0 0 0 0 0 0 0 0 0 0

3051 31 VirtualFileMountMultifile const 0 8832 31 VirtualFileMountMultifile const 31 VirtualFileMountMultifile const 0 0 2769 0 0 0 0 0 0 0 0 0 0

3052 25 VirtualFileMountRamdisk * 0 8576 25 VirtualFileMountRamdisk * 25 VirtualFileMountRamdisk * 0 0 2770 0 0 0 0 0 0 0 0 0 0

3053 24 VirtualFileMountSystem * 0 8576 24 VirtualFileMountSystem * 24 VirtualFileMountSystem * 0 0 2771 0 0 0 0 0 0 0 0 0 0

3054 30 VirtualFileMountSystem const * 0 8576 30 VirtualFileMountSystem const * 30 VirtualFileMountSystem const * 0 0 3055 0 0 0 0 0 0 0 0 0 0

3055 28 VirtualFileMountSystem const 0 8832 28 VirtualFileMountSystem const 28 VirtualFileMountSystem const 0 0 2771 0 0 0 0 0 0 0 0 0 0

3056 25 VirtualFileSimple const * 0 8576 25 VirtualFileSimple const * 25 VirtualFileSimple const * 0 0 3057 0 0 0 0 0 0 0 0 0 0

3057 23 VirtualFileSimple const 0 8832 23 VirtualFileSimple const 23 VirtualFileSimple const 0 0 2772 0 0 0 0 0 0 0 0 0 0

3058 18 VirtualFileMount * 0 8576 18 VirtualFileMount * 18 VirtualFileMount * 0 0 2768 0 0 0 0 0 0 0 0 0 0

3059 15 TemporaryFile * 0 8576 15 TemporaryFile * 15 TemporaryFile * 0 0 2773 0 0 0 0 0 0 0 0 0 0

3060 19 IDecompressStream * 0 8576 19 IDecompressStream * 19 IDecompressStream * 0 0 2774 0 0 0 0 0 0 0 0 0 0

3061 17 OCompressStream * 0 8576 17 OCompressStream * 17 OCompressStream * 0 0 2775 0 0 0 0 0 0 0 0 0 0

3062 23 VirtualFileList const * 0 8576 23 VirtualFileList const * 23 VirtualFileList const * 0 0 3063 0 0 0 0 0 0 0 0 0 0

3063 21 VirtualFileList const 0 8832 21 VirtualFileList const 21 VirtualFileList const 0 0 2776 0 0 0 0 0 0 0 0 0 0

3064 25 VirtualFileSystem const * 0 8576 25 VirtualFileSystem const * 25 VirtualFileSystem const * 0 0 3065 0 0 0 0 0 0 0 0 0 0

3065 23 VirtualFileSystem const 0 8832 23 VirtualFileSystem const 23 VirtualFileSystem const 0 0 2777 0 0 0 0 0 0 0 0 0 0

3066 11 TrueClock * 0 8576 11 TrueClock * 11 TrueClock * 0 0 2779 0 0 0 0 0 0 0 0 0 0

3067 17 TrueClock const * 0 8576 17 TrueClock const * 17 TrueClock const * 0 0 3068 0 0 0 0 0 0 0 0 0 0

3068 15 TrueClock const 0 8832 15 TrueClock const 15 TrueClock const 0 0 2779 0 0 0 0 0 0 0 0 0 0

3069 11 Patchfile * 0 8576 11 Patchfile * 11 Patchfile * 0 0 2780 0 0 0 0 0 0 0 0 0 0

3070 8 Buffer * 0 8576 8 Buffer * 8 Buffer * 0 0 2746 0 0 0 0 0 0 0 0 0 0

3071 17 Patchfile const * 0 8576 17 Patchfile const * 17 Patchfile const * 0 0 3072 0 0 0 0 0 0 0 0 0 0

3072 15 Patchfile const 0 8832 15 Patchfile const 15 Patchfile const 0 0 2780 0 0 0 0 0 0 0 0 0 0

3073 20 ProfileTimer const * 0 8576 20 ProfileTimer const * 20 ProfileTimer const * 0 0 3074 0 0 0 0 0 0 0 0 0 0

3074 18 ProfileTimer const 0 8832 18 ProfileTimer const 18 ProfileTimer const 0 0 2781 0 0 0 0 0 0 0 0 0 0

3075 14 ProfileTimer * 0 8576 14 ProfileTimer * 14 ProfileTimer * 0 0 2781 0 0 0 0 0 0 0 0 0 0

3076 25 WeakPointerToVoid const * 0 8576 25 WeakPointerToVoid const * 25 WeakPointerToVoid const * 0 0 3077 0 0 0 0 0 0 0 0 0 0

3077 23 WeakPointerToVoid const 0 8832 23 WeakPointerToVoid const 23 WeakPointerToVoid const 0 0 2782 0 0 0 0 0 0 0 0 0 0

3078 9 DConfig * 0 8576 9 DConfig * 9 DConfig * 0 0 2695 0 0 0 0 0 0 0 0 0 0

0
0
15
3079 0 0 199 16 get_declarations 20 get_num_declarations 15 get_declaration 
3080 0 0 199 14 get_references 18 get_num_references 13 get_reference 
3081 0 0 199 22 get_trusted_references 26 get_num_trusted_references 21 get_trusted_reference 
3082 0 0 199 21 get_unique_references 25 get_num_unique_references 20 get_unique_reference 
3083 0 0 298 13 get_variables 17 get_num_variables 12 get_variable 
3084 0 0 312 15 get_directories 19 get_num_directories 13 get_directory 
3085 0 0 355 15 get_directories 19 get_num_directories 13 get_directory 
3086 0 0 732 11 get_systems 15 get_num_systems 10 get_system 
3087 0 0 896 15 get_typehandles 19 get_num_typehandles 14 get_typehandle 
3088 0 0 896 16 get_root_classes 20 get_num_root_classes 14 get_root_class 
3089 0 0 1157 12 get_pointers 16 get_num_pointers 11 get_pointer 
3090 0 0 1157 18 get_typed_pointers 16 get_num_pointers 17 get_typed_pointer 
3091 0 0 1193 17 get_subfile_names 16 get_num_subfiles 16 get_subfile_name 
3092 0 0 1348 9 get_files 13 get_num_files 8 get_file 
3093 0 0 1355 10 get_mounts 14 get_num_mounts 9 get_mount 
