;; -*- scheme -*-
; object definitions ...
(define-object Color
  (in-module "Gegl")
  (parent "GObject")
  (c-name "GeglColor")
  (gtype-id "GEGL_TYPE_COLOR")
)

(define-object Node
  (in-module "Gegl")
  (parent "GObject")
  (c-name "GeglNode")
  (gtype-id "GEGL_TYPE_NODE")
)

(define-object Processor
  (in-module "Gegl")
  (parent "GObject")
  (c-name "GeglProcessor")
  (gtype-id "GEGL_TYPE_PROCESSOR")
)

;(define-object Curve
;  (in-module "Gegl")
;  (parent "GObject")
;  (c-name "GeglCurve")
;  (gtype-id "GEGL_TYPE_CURVE")
;)

(define-boxed Rectangle
  (in-module "Gegl")
  (c-name "GeglRectangle")
  (gtype-id "GEGL_TYPE_RECTANGLE")
  (fields
    '("gint" "x")
    '("gint" "y")
    '("gint" "width")
    '("gint" "height")
  )
)
 
;; Enumerations and flags ...

;(define-flags BlitFlags
;  (in-module "Gegl")
;  (c-name "GeglBlitFlags")
;  (gtype-id "GEGL_TYPE_BLIT_FLAGS")
;  (values
;    '("default" "GEGL_BLIT_DEFAULT")
;    '("cache" "GEGL_BLIT_CACHE")
;    '("dirty" "GEGL_BLIT_DIRTY")
;  )
;)


;; From gegl.h

(define-function init
  (c-name "gegl_init")
  (return-type "none")
  (parameters
    '("gint*" "argc")
    '("gchar***" "argv")
  )
)

(define-function gegl_get_option_group
  (c-name "gegl_get_option_group")
  (return-type "GOptionGroup*")
)

(define-function exit
  (c-name "gegl_exit")
  (return-type "none")
)

(define-function list_operations
  (c-name "gegl_list_operations")
  (return-type "gchar**")
  (parameters
    '("guint*" "n_operations_p")
  )
)

(define-function list_properties
  (c-name "gegl_list_properties")
  (return-type "GParamSpec**")
  (parameters
    '("const-gchar*" "operation_type")
    '("guint*" "n_properties_p")
  )
)

(define-function gegl_node_get_type
  (c-name "gegl_node_get_type")
  (return-type "GType")
)

(define-function gegl_rectangle_get_type
  (c-name "gegl_rectangle_get_type")
  (return-type "GType")
)

(define-function gegl_node_new
  (c-name "gegl_node_new")
  (is-constructor-of "GeglNode")
  (return-type "GeglNode*")
)

(define-method new_child
  (of-object "GeglNode")
  (c-name "gegl_node_new_child")
  (return-type "GeglNode*")
  (parameters
    '("const-gchar*" "first_property_name")
  )
  (varargs #t)
)

(define-method connect_from
  (of-object "GeglNode")
  (c-name "gegl_node_connect_from")
  (return-type "gboolean")
  (parameters
    '("const-gchar*" "input_pad_name")
    '("GeglNode*" "source")
    '("const-gchar*" "output_pad_name")
  )
)

(define-method connect_to
  (of-object "GeglNode")
  (c-name "gegl_node_connect_to")
  (return-type "gboolean")
  (parameters
    '("const-gchar*" "output_pad_name")
    '("GeglNode*" "sink")
    '("const-gchar*" "input_pad_name")
  )
)

(define-method link
  (of-object "GeglNode")
  (c-name "gegl_node_link")
  (return-type "none")
  (parameters
    '("GeglNode*" "sink")
  )
)

(define-method link_many
  (of-object "GeglNode")
  (c-name "gegl_node_link_many")
  (return-type "none")
  (parameters
    '("GeglNode*" "first_sink")
  )
  (varargs #t)
)

(define-method disconnect
  (of-object "GeglNode")
  (c-name "gegl_node_disconnect")
  (return-type "gboolean")
  (parameters
    '("const-gchar*" "input_pad")
  )
)

(define-method set
  (of-object "GeglNode")
  (c-name "gegl_node_set")
  (return-type "none")
  (parameters
    '("const-gchar*" "first_property_name")
  )
  (varargs #t)
)

(define-method get
  (of-object "GeglNode")
  (c-name "gegl_node_get")
  (return-type "none")
  (parameters
    '("const-gchar*" "first_property_name")
  )
  (varargs #t)
)

(define-method blit
  (of-object "GeglNode")
  (c-name "gegl_node_blit")
  (return-type "none")
  (parameters
    '("gdouble" "scale")
    '("GeglRectangle*" "roi")
    '("Babl*" "format")
    '("gpointer" "destination_buf")
    '("gint" "rowstride")
    '("GeglBlitFlags" "flags")
  )
)

(define-method process
  (of-object "GeglNode")
  (c-name "gegl_node_process")
  (return-type "none")
)

(define-method detect
  (of-object "GeglNode")
  (c-name "gegl_node_detect")
  (return-type "GeglNode*")
  (parameters
    '("gint" "x")
    '("gint" "y")
  )
)

(define-method find_property
  (of-object "GeglNode")
  (c-name "gegl_node_find_property")
  (return-type "GParamSpec*")
  (parameters
    '("const-gchar*" "property_name")
  )
)

(define-method get_bounding_box
  (of-object "GeglNode")
  (c-name "gegl_node_get_bounding_box")
  (return-type "GeglRectangle")
)

(define-method get_children
  (of-object "GeglNode")
  (c-name "gegl_node_get_children")
  (return-type "GSList*")
)

(define-method get_consumers
  (of-object "GeglNode")
  (c-name "gegl_node_get_consumers")
  (return-type "gint")
  (parameters
    '("const-gchar*" "output_pad")
    '("GeglNode***" "nodes")
    '("const-gchar***" "pads")
  )
)

(define-method get_input_proxy
  (of-object "GeglNode")
  (c-name "gegl_node_get_input_proxy")
  (return-type "GeglNode*")
  (parameters
    '("const-gchar*" "pad_name")
  )
)

(define-method get_operation
  (of-object "GeglNode")
  (c-name "gegl_node_get_operation")
  (return-type "const-gchar*")
)

(define-method get_output_proxy
  (of-object "GeglNode")
  (c-name "gegl_node_get_output_proxy")
  (return-type "GeglNode*")
  (parameters
    '("const-gchar*" "pad_name")
  )
)

(define-method get_producer
  (of-object "GeglNode")
  (c-name "gegl_node_get_producer")
  (return-type "GeglNode*")
  (parameters
    '("gchar*" "input_pad_name")
    '("gchar**" "output_pad_name")
  )
)

(define-method create_child
  (of-object "GeglNode")
  (c-name "gegl_node_create_child")
  (return-type "GeglNode*")
  (parameters
    '("const-gchar*" "operation")
  )
)

(define-method get_property
  (of-object "GeglNode")
  (c-name "gegl_node_get_property")
  (return-type "none")
  (parameters
    '("const-gchar*" "property_name")
    '("GValue*" "value")
  )
)

(define-method set_property
  (of-object "GeglNode")
  (c-name "gegl_node_set_property")
  (return-type "none")
  (parameters
    '("const-gchar*" "property_name")
    '("const-GValue*" "value")
  )
)

(define-function node_new_from_xml
  (c-name "gegl_node_new_from_xml")
  (return-type "GeglNode*")
  (parameters
    '("const-gchar*" "xmldata")
    '("const-gchar*" "path_root")
  )
)

(define-function node_new_from_file
  (c-name "gegl_node_new_from_file")
  (return-type "GeglNode*")
  (parameters
    '("const-gchar*" "path")
  )
)

(define-method to_xml
  (of-object "GeglNode")
  (c-name "gegl_node_to_xml")
  (return-type "gchar*")
  (parameters
    '("const-gchar*" "path_root")
  )
)

(define-function gegl_processor_get_type
  (c-name "gegl_processor_get_type")
  (return-type "GType")
)

(define-method new_processor
  (of-object "GeglNode")
  (c-name "gegl_node_new_processor")
  (caller-owns-return #t)
  (return-type "GeglProcessor*")
  (parameters
    '("GeglRectangle*" "rectangle")
  )
)

(define-method set_rectangle
  (of-object "GeglProcessor")
  (c-name "gegl_processor_set_rectangle")
  (return-type "none")
  (parameters
    '("GeglRectangle*" "rectangle")
  )
)

(define-method work
  (of-object "GeglProcessor")
  (c-name "gegl_processor_work")
  (return-type "gboolean")
  (parameters
    '("gdouble*" "progress")
  )
)

(define-method destroy
  (of-object "GeglProcessor")
  (c-name "gegl_processor_destroy")
  (return-type "none")
)

(define-function gegl_color_get_type
  (c-name "gegl_color_get_type")
  (return-type "GType")
)

(define-function gegl_color_new
  (c-name "gegl_color_new")
  (is-constructor-of "GeglColor")
  (return-type "GeglColor*")
  (properties
    '("string" (argname "string") (optional))
  )
)

(define-method get_rgba
  (of-object "GeglColor")
  (c-name "gegl_color_get_rgba")
  (return-type "none")
  (parameters
    '("gdouble*" "r")
    '("gdouble*" "g")
    '("gdouble*" "b")
    '("gdouble*" "a")
  )
)

(define-method get_rgba4f
  (of-object "GeglColor")
  (c-name "gegl_color_get_rgba4f")
  (return-type "none")
  (parameters
    '("gfloat*" "buf")
  )
)

(define-method set_rgba
  (of-object "GeglColor")
  (c-name "gegl_color_set_rgba")
  (return-type "none")
  (parameters
    '("gdouble" "r")
    '("gdouble" "g")
    '("gdouble" "b")
    '("gdouble" "a")
  )
)

;(define-function gegl_curve_get_type
;  (c-name "gegl_curve_get_type")
;  (return-type "GType")
;)
;
;(define-function gegl_curve_new
;  (c-name "gegl_curve_new")
;  (is-constructor-of "GeglCurve")
;  (return-type "GeglCurve*")
;  (parameters
;    '("gfloat" "y_min")
;    '("gfloat" "y_max")
;  )
;)
;
;(define-function gegl_curve_default_curve
;  (c-name "gegl_curve_default_curve")
;  (return-type "GeglCurve*")
;)
;
;(define-method get_y_bounds
;  (of-object "GeglCurve")
;  (c-name "gegl_curve_get_y_bounds")
;  (return-type "none")
;  (parameters
;    '("gfloat*" "min_y")
;    '("gfloat*" "max_y")
;  )
;)
;
;(define-method add_point
;  (of-object "GeglCurve")
;  (c-name "gegl_curve_add_point")
;  (return-type "guint")
;  (parameters
;    '("gfloat" "x")
;    '("gfloat" "y")
;  )
;)
;
;(define-method remove_point_index
;  (of-object "GeglCurve")
;  (c-name "gegl_curve_remove_point_index")
;  (return-type "none")
;  (parameters
;    '("guint" "index")
;  )
;)
;
;(define-method get_point
;  (of-object "GeglCurve")
;  (c-name "gegl_curve_get_point")
;  (return-type "none")
;  (parameters
;    '("guint" "index")
;    '("gfloat*" "x")
;    '("gfloat*" "y")
;  )
;)
;
;(define-method set_point
;  (of-object "GeglCurve")
;  (c-name "gegl_curve_set_point")
;  (return-type "none")
;  (parameters
;    '("guint" "index")
;    '("gfloat" "x")
;    '("gfloat" "y")
;  )
;)
;
;(define-method num_points
;  (of-object "GeglCurve")
;  (c-name "gegl_curve_num_points")
;  (return-type "guint")
;)
;
;(define-method calc_value
;  (of-object "GeglCurve")
;  (c-name "gegl_curve_calc_value")
;  (return-type "gfloat")
;  (parameters
;    '("gfloat" "x")
;  )
;)
;
;(define-method calc_values
;  (of-object "GeglCurve")
;  (c-name "gegl_curve_calc_values")
;  (return-type "none")
;  (parameters
;    '("gfloat" "x_min")
;    '("gfloat" "x_max")
;    '("guint" "num_samples")
;    '("gfloat*" "xs")
;    '("gfloat*" "ys")
;  )
;)



;; From gegl-utils.h

(define-function rectangle_new
  (c-name "gegl_rectangle_new")
  (is-constructor-of "GeglRectangle")
  (return-type "GeglRectangle")
)

(define-method set
  (of-object "GeglRectangle")
  (c-name "gegl_rectangle_set")
  (return-type "none")
  (parameters
    '("gint" "x")
    '("gint" "y")
    '("guint" "width")
    '("guint" "height")
  )
)

(define-method equal
  (of-object "GeglRectangle")
  (c-name "gegl_rectangle_equal")
  (return-type "gboolean")
  (parameters
    '("const-GeglRectangle*" "s")
  )
)

(define-method equal_coords
  (of-object "GeglRectangle")
  (c-name "gegl_rectangle_equal_coords")
  (return-type "gboolean")
  (parameters
    '("gint" "x")
    '("gint" "y")
    '("gint" "width")
    '("gint" "height")
  )
)

(define-method copy
  (of-object "GeglRectangle")
  (c-name "gegl_rectangle_copy")
  (return-type "none")
  (parameters
    '("const-GeglRectangle*" "from")
  )
)

(define-method bounding_box
  (of-object "GeglRectangle")
  (c-name "gegl_rectangle_bounding_box")
  (return-type "none")
  (parameters
    '("const-GeglRectangle*" "src1")
    '("const-GeglRectangle*" "src2")
  )
)

(define-method intersect
  (of-object "GeglRectangle")
  (c-name "gegl_rectangle_intersect")
  (return-type "gboolean")
  (parameters
    '("const-GeglRectangle*" "src1")
    '("const-GeglRectangle*" "src2")
  )
)

(define-method contains
  (of-object "GeglRectangle")
  (c-name "gegl_rectangle_contains")
  (return-type "gboolean")
  (parameters
    '("const-GeglRectangle*" "s")
  )
)

(define-function gegl_log_debug
  (c-name "gegl_log_debug")
  (return-type "none")
  (parameters
    '("gchar*" "file")
    '("gint" "line")
    '("gchar*" "function")
    '("gchar*" "format")
  )
  (varargs #t)
)

(define-function gegl_log_info
  (c-name "gegl_log_info")
  (return-type "none")
  (parameters
    '("gchar*" "file")
    '("gint" "line")
    '("gchar*" "function")
    '("gchar*" "format")
  )
  (varargs #t)
)

(define-function gegl_log_message
  (c-name "gegl_log_message")
  (return-type "none")
  (parameters
    '("gchar*" "file")
    '("gint" "line")
    '("gchar*" "function")
    '("gchar*" "format")
  )
  (varargs #t)
)

(define-function gegl_log_direct
  (c-name "gegl_log_direct")
  (return-type "none")
  (parameters
    '("gchar*" "format")
  )
  (varargs #t)
)

(define-function gegl_rectangle_get_type
  (c-name "gegl_rectangle_get_type")
  (return-type "GType")
)


