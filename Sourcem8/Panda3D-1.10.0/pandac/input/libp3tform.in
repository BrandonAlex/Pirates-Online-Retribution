1436948349
2 3
10 libp3tform 4 v_mB 12 panda3d.core 
251
260 13 ButtonThrower 0 4 511 28 ButtonThrower::ButtonThrower 0 1 1 222
////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
49
ButtonThrower::ButtonThrower(string const &name);

261 21 set_button_down_event 0 4 511 36 ButtonThrower::set_button_down_event 0 1 2 867
////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::set_button_down_event
//       Access: Published
//  Description: Specifies the generic event that is generated (if
//               any) each time a key or button is depressed.  Unlike
//               the specific events that are unique to each key, this
//               same event name is used for *all* button events, and
//               the name of the button pressed (possibly with
//               modifier prefixes) will be sent as a parameter.
//
//               If this string is empty, no event is generated.  It
//               is possible to generate both generic events and
//               specific events for the same button.
//
//               See also set_keystroke_event().
////////////////////////////////////////////////////////////////////
82
inline void ButtonThrower::set_button_down_event(string const &button_down_event);

262 21 get_button_down_event 0 4 511 36 ButtonThrower::get_button_down_event 0 1 3 353
////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::get_button_down_event
//       Access: Published
//  Description: Returns the button_down_event that has been set on
//               this ButtonThrower.  See set_button_down_event().
////////////////////////////////////////////////////////////////////
70
inline string const &ButtonThrower::get_button_down_event(void) const;

263 19 set_button_up_event 0 4 511 34 ButtonThrower::set_button_up_event 0 1 4 391
////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::set_button_up_event
//       Access: Published
//  Description: Specifies the generic event that is generated (if
//               any) each time a key or button is released.  See
//               set_button_down_event().
////////////////////////////////////////////////////////////////////
78
inline void ButtonThrower::set_button_up_event(string const &button_up_event);

264 19 get_button_up_event 0 4 511 34 ButtonThrower::get_button_up_event 0 1 5 347
////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::get_button_up_event
//       Access: Published
//  Description: Returns the button_up_event that has been set on
//               this ButtonThrower.  See set_button_up_event().
////////////////////////////////////////////////////////////////////
68
inline string const &ButtonThrower::get_button_up_event(void) const;

265 23 set_button_repeat_event 0 4 511 38 ButtonThrower::set_button_repeat_event 0 1 6 875
////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::set_button_repeat_event
//       Access: Published
//  Description: Specifies the generic event that is generated (if
//               any) repeatedly while a key or button is held down.
//               Unlike the specific events that are unique to each
//               key, this same event name is used for *all* button
//               events, and the name of the button pressed (possibly
//               with modifier prefixes) will be sent as a parameter.
//
//               If this string is empty, no event is generated.  It
//               is possible to generate both generic events and
//               specific events for the same button.
//
//               See also set_keystroke_event().
////////////////////////////////////////////////////////////////////
86
inline void ButtonThrower::set_button_repeat_event(string const &button_repeat_event);

266 23 get_button_repeat_event 0 4 511 38 ButtonThrower::get_button_repeat_event 0 1 7 359
////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::get_button_repeat_event
//       Access: Published
//  Description: Returns the button_repeat_event that has been set on
//               this ButtonThrower.  See set_button_repeat_event().
////////////////////////////////////////////////////////////////////
72
inline string const &ButtonThrower::get_button_repeat_event(void) const;

267 19 set_keystroke_event 0 4 511 34 ButtonThrower::set_keystroke_event 0 1 8 1304
////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::set_keystroke_event
//       Access: Published
//  Description: Specifies the event that is generated (if any) for
//               each keystroke that is received.  A keystroke is
//               different than a button event: it represents the
//               semantic meaning of the sequence of keys that have
//               been pressed.  For instance, pressing shift and 4
//               together will generate the button event "shift-4",
//               but it will generate the keystroke "$".
//
//               If a key is held down, keyrepeat will cause the same
//               keystroke event to be generated repeatedly.  This is
//               different from the corresponding down event, which
//               will only be generated once, followed by a number of
//               button repeat events.
//
//               This event is generated with a single wstring
//               parameter, which is a one-character string that
//               contains the keystroke generated.  If this event
//               string is empty, no event is generated.
//
//               See also set_button_down_event().
////////////////////////////////////////////////////////////////////
78
inline void ButtonThrower::set_keystroke_event(string const &keystroke_event);

268 19 get_keystroke_event 0 4 511 34 ButtonThrower::get_keystroke_event 0 1 9 347
////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::get_keystroke_event
//       Access: Published
//  Description: Returns the keystroke_event that has been set on this
//               ButtonThrower.  See set_keystroke_event().
////////////////////////////////////////////////////////////////////
68
inline string const &ButtonThrower::get_keystroke_event(void) const;

269 19 set_candidate_event 0 4 511 34 ButtonThrower::set_candidate_event 0 1 10 1252
////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::set_candidate_event
//       Access: Published
//  Description: Specifies the event that is generated (if any) for
//               each IME candidate string event received.  Events of
//               this nature are received only when the user is
//               entering data using a Microsoft Input Method Editor,
//               typically used for Asian languages such as Japanese
//               or Korean.
//
//               If you are designing a typing user interface, you
//               should track this event to support the use of the
//               IME.  In response to this event, you should display
//               the candidate string in the entry box, with the
//               appropriate sections highlighted, so the user can
//               scroll through the available choices.
//
//               This event is generated with four parameters, in
//               order: the candidate string, the character at which
//               to start the highlight, the character at which to end
//               the highlight, and the current cursor position.
////////////////////////////////////////////////////////////////////
78
inline void ButtonThrower::set_candidate_event(string const &candidate_event);

270 19 get_candidate_event 0 4 511 34 ButtonThrower::get_candidate_event 0 1 11 347
////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::get_candidate_event
//       Access: Published
//  Description: Returns the candidate_event that has been set on this
//               ButtonThrower.  See set_candidate_event().
////////////////////////////////////////////////////////////////////
68
inline string const &ButtonThrower::get_candidate_event(void) const;

271 14 set_move_event 0 4 511 29 ButtonThrower::set_move_event 0 1 12 340
////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::set_move_event
//       Access: Published
//  Description: Specifies the event that is generated (if any) each
//               time the mouse is moved within the window.
////////////////////////////////////////////////////////////////////
68
inline void ButtonThrower::set_move_event(string const &move_event);

272 14 get_move_event 0 4 511 29 ButtonThrower::get_move_event 0 1 13 332
////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::get_move_event
//       Access: Published
//  Description: Returns the move_event that has been set on this
//               ButtonThrower.  See set_move_event().
////////////////////////////////////////////////////////////////////
63
inline string const &ButtonThrower::get_move_event(void) const;

273 25 set_raw_button_down_event 0 4 511 40 ButtonThrower::set_raw_button_down_event 0 1 14 465
////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::set_raw_button_down_event
//       Access: Published
//  Description: Like set_button_down_event, but uses the raw,
//               untransformed scan key from the operating system.
//               This uses buttons that are independent of the
//               user's selected keyboard layout.
////////////////////////////////////////////////////////////////////
90
inline void ButtonThrower::set_raw_button_down_event(string const &raw_button_down_event);

274 25 get_raw_button_down_event 0 4 511 40 ButtonThrower::get_raw_button_down_event 0 1 15 365
////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::get_raw_button_down_event
//       Access: Published
//  Description: Returns the raw_button_down_event that has been set on
//               this ButtonThrower.  See set_raw_button_down_event().
////////////////////////////////////////////////////////////////////
74
inline string const &ButtonThrower::get_raw_button_down_event(void) const;

275 23 set_raw_button_up_event 0 4 511 38 ButtonThrower::set_raw_button_up_event 0 1 16 399
////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::set_raw_button_up_event
//       Access: Published
//  Description: Specifies the generic event that is generated (if
//               any) each time a key or button is released.  See
//               set_raw_button_down_event().
////////////////////////////////////////////////////////////////////
86
inline void ButtonThrower::set_raw_button_up_event(string const &raw_button_up_event);

276 23 get_raw_button_up_event 0 4 511 38 ButtonThrower::get_raw_button_up_event 0 1 17 359
////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::get_raw_button_up_event
//       Access: Published
//  Description: Returns the raw_button_up_event that has been set on
//               this ButtonThrower.  See set_raw_button_up_event().
////////////////////////////////////////////////////////////////////
72
inline string const &ButtonThrower::get_raw_button_up_event(void) const;

277 10 set_prefix 0 4 511 25 ButtonThrower::set_prefix 0 1 18 505
////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::set_prefix
//       Access: Published
//  Description: Sets the prefix which is prepended to all specific
//               event names (that is, event names generated from the
//               button name itself, as opposed to the generic event
//               names like set_button_down_event) thrown by this
//               object.
////////////////////////////////////////////////////////////////////
60
inline void ButtonThrower::set_prefix(string const &prefix);

278 10 get_prefix 0 4 511 25 ButtonThrower::get_prefix 0 1 19 320
////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::get_prefix
//       Access: Published
//  Description: Returns the prefix that has been set on this
//               ButtonThrower.  See set_prefix().
////////////////////////////////////////////////////////////////////
59
inline string const &ButtonThrower::get_prefix(void) const;

279 17 set_specific_flag 0 4 511 32 ButtonThrower::set_specific_flag 0 1 20 604
////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::set_specific_flag
//       Access: Published
//  Description: Sets the flag that indicates whether specific events
//               (events prefixed by set_prefix, and based on the
//               event name) should be generated at all.  This is true
//               by default, but may be disabled if you are only
//               interested in the generic events (for instance,
//               events like set_button_down_event).
////////////////////////////////////////////////////////////////////
65
inline void ButtonThrower::set_specific_flag(bool specific_flag);

280 17 get_specific_flag 0 4 511 32 ButtonThrower::get_specific_flag 0 1 21 351
////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::get_specific_flag
//       Access: Published
//  Description: Returns the flag that indicates whether specific
//               events should be generated.  See set_specific_flag().
////////////////////////////////////////////////////////////////////
57
inline bool ButtonThrower::get_specific_flag(void) const;

281 13 set_time_flag 0 4 511 28 ButtonThrower::set_time_flag 0 1 22 720
////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::set_time_flag
//       Access: Published
//  Description: Sets the flag that indicates whether the time of the
//               button event should be passed as a parameter or not.
//               When this is true, an additional parameter is
//               generated on each event (before all the parameters
//               named by add_parameter) that consists of a single
//               double value, and reflects the time the button was
//               pressed or released, as a value from
//               ClockObject::get_global_clock().
////////////////////////////////////////////////////////////////////
57
inline void ButtonThrower::set_time_flag(bool time_flag);

282 13 get_time_flag 0 4 511 28 ButtonThrower::get_time_flag 0 1 23 346
////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::get_time_flag
//       Access: Published
//  Description: Returns the flag that indicates whether the time of
//               the button event should be passed as a parameter.
////////////////////////////////////////////////////////////////////
53
inline bool ButtonThrower::get_time_flag(void) const;

283 13 add_parameter 0 4 511 28 ButtonThrower::add_parameter 0 1 24 382
////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::add_parameter
//       Access: Public
//  Description: Adds the indicated parameter to the list of
//               parameters that will be passed with each event
//               generated by this ButtonThrower.
////////////////////////////////////////////////////////////////////
61
void ButtonThrower::add_parameter(EventParameter const &obj);

284 18 get_num_parameters 0 4 511 33 ButtonThrower::get_num_parameters 0 1 25 405
////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::get_num_parameters
//       Access: Public
//  Description: Returns the number of parameters that have been added
//               to the list of parameters to be passed with each
//               event generated by this ButtonThrower.
////////////////////////////////////////////////////////////////////
50
int ButtonThrower::get_num_parameters(void) const;

285 13 get_parameter 0 4 511 28 ButtonThrower::get_parameter 0 1 26 386
////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::get_parameter
//       Access: Public
//  Description: Returns the nth parameter that has been added to the
//               list of parameters passed with each event generated
//               by this ButtonThrower.
////////////////////////////////////////////////////////////////////
57
EventParameter ButtonThrower::get_parameter(int n) const;

286 20 get_modifier_buttons 0 4 511 35 ButtonThrower::get_modifier_buttons 0 1 27 808
////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::get_modifier_buttons
//       Access: Published
//  Description: Returns the set of ModifierButtons that the
//               ButtonThrower will consider important enough to
//               prepend the event name with.  Normally, this set will
//               be empty, and the ButtonThrower will therefore ignore
//               all ModifierButtons attached to the key events, but
//               if one or more buttons have been added to this set,
//               and those modifier buttons are set on the button
//               event, then the event name will be prepended with the
//               names of the modifier buttons.
////////////////////////////////////////////////////////////////////
78
inline ModifierButtons const &ButtonThrower::get_modifier_buttons(void) const;

287 20 set_modifier_buttons 0 4 511 35 ButtonThrower::set_modifier_buttons 0 1 28 1054
////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::set_modifier_buttons
//       Access: Published
//  Description: Changes the set of ModifierButtons that the
//               ButtonThrower will consider important enough to
//               prepend the event name with.  Normally, this set will
//               be empty, and the ButtonThrower will therefore ignore
//               all ModifierButtons attached to the key events, but
//               if one or more buttons have been added to this set,
//               then the event name will be prepended with the names
//               of the modifier buttons.
//
//               It is recommended that you change this setting by
//               first calling get_modifier_buttons(), making
//               adjustments, and passing the new value to
//               set_modifier_buttons().  This way the current state
//               of the modifier buttons will not be lost.
////////////////////////////////////////////////////////////////////
77
inline void ButtonThrower::set_modifier_buttons(ModifierButtons const &mods);

288 24 set_throw_buttons_active 0 4 511 39 ButtonThrower::set_throw_buttons_active 0 1 29 597
////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::set_throw_buttons_active
//       Access: Published
//  Description: Sets the flag that indicates whether the
//               ButtonThrower will only process events for the
//               explicitly named buttons or not.  Normally this is
//               false, meaning all buttons are processed; set it true
//               to indicate that only some buttons should be
//               processed.  See add_throw_button().
////////////////////////////////////////////////////////////////////
63
inline void ButtonThrower::set_throw_buttons_active(bool flag);

289 24 get_throw_buttons_active 0 4 511 39 ButtonThrower::get_throw_buttons_active 0 1 30 446
////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::get_throw_buttons_active
//       Access: Published
//  Description: Returns the flag that indicates whether the
//               ButtonThrower will only process events for the
//               explicitly named buttons or not.  See
//               set_throw_buttons_active().
////////////////////////////////////////////////////////////////////
64
inline bool ButtonThrower::get_throw_buttons_active(void) const;

290 16 add_throw_button 0 4 511 31 ButtonThrower::add_throw_button 0 1 31 1056
////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::add_throw_button
//       Access: Published
//  Description: Adds a new button to the set of buttons that the
//               ButtonThrower explicitly processes.
//
//               If set_throw_buttons_active is false (which is the
//               default), the ButtonThrower will process all buttons.
//               Otherwise, the ButtonThrower will only process events
//               for the button(s) explicitly named by this function;
//               buttons not on the list will be ignored by this
//               object and passed on downstream to the child node(s)
//               in the data graph.  A button that *is* on the list
//               will be processed by the ButtonThrower and not passed
//               on to the child node(s).
//
//               The return value is true if the button is added, or
//               false if it was already in the set.
////////////////////////////////////////////////////////////////////
94
bool ButtonThrower::add_throw_button(ModifierButtons const &mods, ButtonHandle const &button);

291 19 remove_throw_button 0 4 511 34 ButtonThrower::remove_throw_button 0 1 32 513
////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::remove_throw_button
//       Access: Published
//  Description: Removes the indicated button from the set of buttons
//               that the ButtonThrower explicitly processes.  See
//               add_throw_button().
//
//               The return value is true if the button is removed, or
//               false if it was not on the set.
////////////////////////////////////////////////////////////////////
97
bool ButtonThrower::remove_throw_button(ModifierButtons const &mods, ButtonHandle const &button);

292 16 has_throw_button 0 4 511 31 ButtonThrower::has_throw_button 0 2 33 34 1059
////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::has_throw_button
//       Access: Published
//  Description: Returns true if the indicated button is on the set of
//               buttons that will be processed by the ButtonThrower,
//               false otherwise.  See add_throw_button().
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::has_throw_button
//       Access: Published
//  Description: Returns true if the indicated button, in conjunction
//               with any nonspecified modifier buttons, is on the set
//               of buttons that will be processed by the
//               ButtonThrower.  That is to say, returns true if this
//               button was ever passed as the second parameter
//               add_throw_button(), regardless of what the first
//               parameter was.
////////////////////////////////////////////////////////////////////
172
bool ButtonThrower::has_throw_button(ModifierButtons const &mods, ButtonHandle const &button) const;
bool ButtonThrower::has_throw_button(ButtonHandle const &button) const;

293 19 clear_throw_buttons 0 4 511 34 ButtonThrower::clear_throw_buttons 0 1 35 342
////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::clear_throw_buttons
//       Access: Published
//  Description: Empties the set of buttons that were added via
//               add_throw_button().  See add_throw_button().
////////////////////////////////////////////////////////////////////
46
void ButtonThrower::clear_throw_buttons(void);

294 14 get_class_type 0 4 511 29 ButtonThrower::get_class_type 0 1 36 0
54
static TypeHandle ButtonThrower::get_class_type(void);

295 14 require_button 0 4 513 34 MouseInterfaceNode::require_button 0 1 37 589
////////////////////////////////////////////////////////////////////
//     Function: MouseInterfaceNode::require_button
//       Access: Published
//  Description: Indicates that the indicated button must be in the
//               required state (either up or down) in order for this
//               particular MouseInterfaceNode to do anything.  For
//               instance, this may be called to make a Trackball
//               object respect mouse input only when the control key
//               is held down.
////////////////////////////////////////////////////////////////////
82
void MouseInterfaceNode::require_button(ButtonHandle const &button, bool is_down);

296 12 clear_button 0 4 513 32 MouseInterfaceNode::clear_button 0 1 38 340
////////////////////////////////////////////////////////////////////
//     Function: MouseInterfaceNode::clear_button
//       Access: Published
//  Description: Removes any requirement on the indicated button set
//               by an earlier call to require_button().
////////////////////////////////////////////////////////////////////
66
void MouseInterfaceNode::clear_button(ButtonHandle const &button);

297 17 clear_all_buttons 0 4 513 37 MouseInterfaceNode::clear_all_buttons 0 1 39 332
////////////////////////////////////////////////////////////////////
//     Function: MouseInterfaceNode::clear_all_button
//       Access: Published
//  Description: Removes all requirements on buttons set by an earlier
//               call to require_button().
////////////////////////////////////////////////////////////////////
49
void MouseInterfaceNode::clear_all_buttons(void);

298 14 get_class_type 0 4 513 34 MouseInterfaceNode::get_class_type 0 1 40 0
59
static TypeHandle MouseInterfaceNode::get_class_type(void);

299 14 DriveInterface 0 4 514 30 DriveInterface::DriveInterface 0 1 41 226
////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
56
DriveInterface::DriveInterface(string const &name = "");

300 17 set_forward_speed 0 4 514 33 DriveInterface::set_forward_speed 0 1 42 396
////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::set_forward_speed
//       Access: Published
//  Description: Sets the speed of full forward motion, when the mouse
//               is at the very top of the window.  This is in units
//               (e.g. feet) per second.
////////////////////////////////////////////////////////////////////
65
inline void DriveInterface::set_forward_speed(PN_stdfloat speed);

301 17 get_forward_speed 0 4 514 33 DriveInterface::get_forward_speed 0 1 43 399
////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::get_forward_speed
//       Access: Published
//  Description: Returns the speed of full forward motion, when the
//               mouse is at the very top of the window.  This is in
//               units (e.g. feet) per second.
////////////////////////////////////////////////////////////////////
65
inline PN_stdfloat DriveInterface::get_forward_speed(void) const;

302 17 set_reverse_speed 0 4 514 33 DriveInterface::set_reverse_speed 0 1 44 399
////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::set_reverse_speed
//       Access: Published
//  Description: Sets the speed of full reverse motion, when the mouse
//               is at the very bottom of the window.  This is in
//               units (e.g. feet) per second.
////////////////////////////////////////////////////////////////////
65
inline void DriveInterface::set_reverse_speed(PN_stdfloat speed);

303 17 get_reverse_speed 0 4 514 33 DriveInterface::get_reverse_speed 0 1 45 402
////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::get_reverse_speed
//       Access: Published
//  Description: Returns the speed of full reverse motion, when the
//               mouse is at the very bottom of the window.  This is
//               in units (e.g. feet) per second.
////////////////////////////////////////////////////////////////////
65
inline PN_stdfloat DriveInterface::get_reverse_speed(void) const;

304 16 set_rotate_speed 0 4 514 32 DriveInterface::set_rotate_speed 0 1 46 413
////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::set_rotate_speed
//       Access: Published
//  Description: Sets the maximum rate at which the user can rotate
//               left or right, when the mouse is at the very edge of
//               the window.  This is in degrees per second.
////////////////////////////////////////////////////////////////////
64
inline void DriveInterface::set_rotate_speed(PN_stdfloat speed);

305 16 get_rotate_speed 0 4 514 32 DriveInterface::get_rotate_speed 0 1 47 416
////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::get_rotate_speed
//       Access: Published
//  Description: Returns the maximum rate at which the user can rotate
//               left or right, when the mouse is at the very edge of
//               the window.  This is in degrees per second.
////////////////////////////////////////////////////////////////////
64
inline PN_stdfloat DriveInterface::get_rotate_speed(void) const;

306 22 set_vertical_dead_zone 0 4 514 38 DriveInterface::set_vertical_dead_zone 0 1 48 603
////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::set_vertical_dead_zone
//       Access: Published
//  Description: Sets the size of the horizontal bar in the center of
//               the screen that represents the "dead zone" of
//               vertical motion: the region in which the mouse does
//               not report vertical motion.  This is in a fraction of
//               the window height, so 0.5 will set a dead zone as
//               large as half the screen.
////////////////////////////////////////////////////////////////////
69
inline void DriveInterface::set_vertical_dead_zone(PN_stdfloat zone);

307 22 get_vertical_dead_zone 0 4 514 38 DriveInterface::get_vertical_dead_zone 0 1 49 606
////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::get_vertical_dead_zone
//       Access: Published
//  Description: Returns the size of the horizontal bar in the center
//               of the screen that represents the "dead zone" of
//               vertical motion: the region in which the mouse does
//               not report vertical motion.  This is in a fraction of
//               the window height, so 0.5 will set a dead zone as
//               large as half the screen.
////////////////////////////////////////////////////////////////////
70
inline PN_stdfloat DriveInterface::get_vertical_dead_zone(void) const;

308 24 set_horizontal_dead_zone 0 4 514 40 DriveInterface::set_horizontal_dead_zone 0 1 50 606
////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::set_horizontal_dead_zone
//       Access: Published
//  Description: Sets the size of the vertical bar in the center of
//               the screen that represents the "dead zone" of
//               horizontal motion: the region in which the mouse does
//               not report horizontal motion.  This is in a fraction of
//               the window width, so 0.5 will set a dead zone as
//               large as half the screen.
////////////////////////////////////////////////////////////////////
71
inline void DriveInterface::set_horizontal_dead_zone(PN_stdfloat zone);

309 24 get_horizontal_dead_zone 0 4 514 40 DriveInterface::get_horizontal_dead_zone 0 1 51 609
////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::get_horizontal_dead_zone
//       Access: Published
//  Description: Returns the size of the vertical bar in the center
//               of the screen that represents the "dead zone" of
//               horizontal motion: the region in which the mouse does
//               not report horizontal motion.  This is in a fraction of
//               the window width, so 0.5 will set a dead zone as
//               large as half the screen.
////////////////////////////////////////////////////////////////////
72
inline PN_stdfloat DriveInterface::get_horizontal_dead_zone(void) const;

310 25 set_vertical_ramp_up_time 0 4 514 41 DriveInterface::set_vertical_ramp_up_time 0 1 52 431
////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::set_vertical_ramp_up_time
//       Access: Published
//  Description: Sets the amount of time, in seconds, it takes between
//               the time an up or down arrow key is pressed and the
//               time it registers full forward or backward motion.
////////////////////////////////////////////////////////////////////
80
inline void DriveInterface::set_vertical_ramp_up_time(PN_stdfloat ramp_up_time);

311 25 get_vertical_ramp_up_time 0 4 514 41 DriveInterface::get_vertical_ramp_up_time 0 1 53 451
////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::get_vertical_ramp_up_time
//       Access: Published
//  Description: Returns the amount of time, in seconds, it takes
//               between the time an up or down arrow key is pressed
//               and the time it registers full forward or backward
//               motion.
////////////////////////////////////////////////////////////////////
73
inline PN_stdfloat DriveInterface::get_vertical_ramp_up_time(void) const;

312 27 set_vertical_ramp_down_time 0 4 514 43 DriveInterface::set_vertical_ramp_down_time 0 1 54 412
////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::set_vertical_ramp_down_time
//       Access: Published
//  Description: Sets the amount of time, in seconds, it takes between
//               the time an up or down arrow key is released and the
//               time it registers no motion.
////////////////////////////////////////////////////////////////////
84
inline void DriveInterface::set_vertical_ramp_down_time(PN_stdfloat ramp_down_time);

313 27 get_vertical_ramp_down_time 0 4 514 43 DriveInterface::get_vertical_ramp_down_time 0 1 55 415
////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::get_vertical_ramp_down_time
//       Access: Published
//  Description: Returns the amount of time, in seconds, it takes
//               between the time an up or down arrow key is released
//               and the time it registers no motion.
////////////////////////////////////////////////////////////////////
75
inline PN_stdfloat DriveInterface::get_vertical_ramp_down_time(void) const;

314 27 set_horizontal_ramp_up_time 0 4 514 43 DriveInterface::set_horizontal_ramp_up_time 0 1 56 417
////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::set_horizontal_ramp_up_time
//       Access: Published
//  Description: Sets the amount of time, in seconds, it takes between
//               the time a left or right arrow key is pressed and the
//               time it registers full rotation.
////////////////////////////////////////////////////////////////////
82
inline void DriveInterface::set_horizontal_ramp_up_time(PN_stdfloat ramp_up_time);

315 27 get_horizontal_ramp_up_time 0 4 514 43 DriveInterface::get_horizontal_ramp_up_time 0 1 57 420
////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::get_horizontal_ramp_up_time
//       Access: Published
//  Description: Returns the amount of time, in seconds, it takes
//               between the time a left or right arrow key is pressed
//               and the time it registers full rotation.
////////////////////////////////////////////////////////////////////
75
inline PN_stdfloat DriveInterface::get_horizontal_ramp_up_time(void) const;

316 29 set_horizontal_ramp_down_time 0 4 514 45 DriveInterface::set_horizontal_ramp_down_time 0 1 58 416
////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::set_horizontal_ramp_down_time
//       Access: Published
//  Description: Sets the amount of time, in seconds, it takes between
//               the time a left or right arrow key is released and the
//               time it registers no motion.
////////////////////////////////////////////////////////////////////
86
inline void DriveInterface::set_horizontal_ramp_down_time(PN_stdfloat ramp_down_time);

317 29 get_horizontal_ramp_down_time 0 4 514 45 DriveInterface::get_horizontal_ramp_down_time 0 1 59 419
////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::get_horizontal_ramp_down_time
//       Access: Published
//  Description: Returns the amount of time, in seconds, it takes
//               between the time a left or right arrow key is released
//               and the time it registers no motion.
////////////////////////////////////////////////////////////////////
77
inline PN_stdfloat DriveInterface::get_horizontal_ramp_down_time(void) const;

318 9 get_speed 0 4 514 25 DriveInterface::get_speed 0 1 60 278
////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::get_speed
//       Access: Published
//  Description: Returns the speed of the previous update in units/sec
////////////////////////////////////////////////////////////////////
57
inline PN_stdfloat DriveInterface::get_speed(void) const;

319 13 get_rot_speed 0 4 514 29 DriveInterface::get_rot_speed 0 1 61 286
////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::get_rot_speed
//       Access: Published
//  Description: Returns the rot_speed of the previous update in units/sec
////////////////////////////////////////////////////////////////////
61
inline PN_stdfloat DriveInterface::get_rot_speed(void) const;

320 5 reset 0 4 514 21 DriveInterface::reset 0 1 62 332
////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::reset
//       Access: Published
//  Description: Reinitializes the driver to the origin and resets any
//               knowledge about buttons being held down.
////////////////////////////////////////////////////////////////////
33
void DriveInterface::reset(void);

321 7 get_pos 0 4 514 23 DriveInterface::get_pos 0 1 63 253
////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::get_pos
//       Access: Published
//  Description: Returns the driver's position.
////////////////////////////////////////////////////////////////////
58
inline LPoint3 const &DriveInterface::get_pos(void) const;

322 5 get_x 0 4 514 21 DriveInterface::get_x 0 1 64 0
53
inline PN_stdfloat DriveInterface::get_x(void) const;

323 5 get_y 0 4 514 21 DriveInterface::get_y 0 1 65 0
53
inline PN_stdfloat DriveInterface::get_y(void) const;

324 5 get_z 0 4 514 21 DriveInterface::get_z 0 1 66 0
53
inline PN_stdfloat DriveInterface::get_z(void) const;

325 7 set_pos 0 4 514 23 DriveInterface::set_pos 0 2 67 68 259
////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::set_pos
//       Access: Published
//  Description: Directly sets the driver's position.
////////////////////////////////////////////////////////////////////
140
inline void DriveInterface::set_pos(LVecBase3 const &vec);
inline void DriveInterface::set_pos(PN_stdfloat x, PN_stdfloat y, PN_stdfloat z);

326 5 set_x 0 4 514 21 DriveInterface::set_x 0 1 69 0
49
inline void DriveInterface::set_x(PN_stdfloat x);

327 5 set_y 0 4 514 21 DriveInterface::set_y 0 1 70 0
49
inline void DriveInterface::set_y(PN_stdfloat y);

328 5 set_z 0 4 514 21 DriveInterface::set_z 0 1 71 0
49
inline void DriveInterface::set_z(PN_stdfloat z);

329 7 get_hpr 0 4 514 23 DriveInterface::get_hpr 0 1 72 256
////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::get_hpr
//       Access: Published
//  Description: Returns the driver's orientation.
////////////////////////////////////////////////////////////////////
60
inline LVecBase3 const &DriveInterface::get_hpr(void) const;

330 5 get_h 0 4 514 21 DriveInterface::get_h 0 1 73 0
53
inline PN_stdfloat DriveInterface::get_h(void) const;

331 5 get_p 0 4 514 21 DriveInterface::get_p 0 1 74 0
53
inline PN_stdfloat DriveInterface::get_p(void) const;

332 5 get_r 0 4 514 21 DriveInterface::get_r 0 1 75 0
53
inline PN_stdfloat DriveInterface::get_r(void) const;

333 7 set_hpr 0 4 514 23 DriveInterface::set_hpr 0 2 76 77 262
////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::set_hpr
//       Access: Published
//  Description: Directly sets the driver's orientation.
////////////////////////////////////////////////////////////////////
140
inline void DriveInterface::set_hpr(LVecBase3 const &hpr);
inline void DriveInterface::set_hpr(PN_stdfloat h, PN_stdfloat p, PN_stdfloat r);

334 5 set_h 0 4 514 21 DriveInterface::set_h 0 1 78 0
49
inline void DriveInterface::set_h(PN_stdfloat h);

335 5 set_p 0 4 514 21 DriveInterface::set_p 0 1 79 0
49
inline void DriveInterface::set_p(PN_stdfloat p);

336 5 set_r 0 4 514 21 DriveInterface::set_r 0 1 80 0
49
inline void DriveInterface::set_r(PN_stdfloat r);

337 14 set_force_roll 0 4 514 30 DriveInterface::set_force_roll 0 1 81 322
////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::set_force_roll
//       Access: Published
//  Description: This function is no longer used and does nothing.  It
//               will be removed soon.
////////////////////////////////////////////////////////////////////
60
void DriveInterface::set_force_roll(PN_stdfloat force_roll);

338 16 set_ignore_mouse 0 4 514 32 DriveInterface::set_ignore_mouse 0 1 82 736
////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::set_ignore_mouse
//       Access: Published
//  Description: Changes the state of the ignore_mouse flag.  If this
//               flag is true, the DriveInterface will ignore mouse
//               down button events (but still recognize mouse up
//               button events); the user will not be able to start
//               the DriveInterface going again if it is stopped, but
//               if the user is currently holding down a mouse button
//               it will not stop immediately until the user
//               eventually releases the button.
////////////////////////////////////////////////////////////////////
64
inline void DriveInterface::set_ignore_mouse(bool ignore_mouse);

339 16 get_ignore_mouse 0 4 514 32 DriveInterface::get_ignore_mouse 0 1 83 326
////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::get_ignore_mouse
//       Access: Published
//  Description: Returns the current setting of the ignore_mouse flag.
//               See set_ignore_mouse().
////////////////////////////////////////////////////////////////////
57
inline bool DriveInterface::get_ignore_mouse(void) const;

340 15 set_force_mouse 0 4 514 31 DriveInterface::set_force_mouse 0 1 84 406
////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::set_force_mouse
//       Access: Published
//  Description: Changes the state of the force_mouse flag.  If this
//               flag is true, the mouse button need not be held down
//               in order to drive the avatar around.
////////////////////////////////////////////////////////////////////
62
inline void DriveInterface::set_force_mouse(bool force_mouse);

341 15 get_force_mouse 0 4 514 31 DriveInterface::get_force_mouse 0 1 85 323
////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::get_force_mouse
//       Access: Published
//  Description: Returns the current setting of the force_mouse flag.
//               See set_force_mouse().
////////////////////////////////////////////////////////////////////
56
inline bool DriveInterface::get_force_mouse(void) const;

342 19 set_stop_this_frame 0 4 514 35 DriveInterface::set_stop_this_frame 0 1 86 649
////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::set_stop_this_frame
//       Access: Published
//  Description: If stop_this_frame is true, the next time the frame
//               is computed no motion will be allowed, and then the
//               flag is reset to false.  This can be used to prevent
//               too much movement when we know a long time has
//               artificially elapsed, for instance when we take a
//               screenshot, without munging the clock for everything
//               else.
////////////////////////////////////////////////////////////////////
70
inline void DriveInterface::set_stop_this_frame(bool stop_this_frame);

343 19 get_stop_this_frame 0 4 514 35 DriveInterface::get_stop_this_frame 0 1 87 336
////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::get_stop_this_frame
//       Access: Published
//  Description: Returns the current setting of the stop_this_frame
//               flag.  See set_stop_this_frame().
////////////////////////////////////////////////////////////////////
60
inline bool DriveInterface::get_stop_this_frame(void) const;

344 7 set_mat 0 4 514 23 DriveInterface::set_mat 0 1 88 276
////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::set_mat
//       Access: Published
//  Description: Stores the indicated transform in the DriveInterface.
////////////////////////////////////////////////////////////////////
50
void DriveInterface::set_mat(LMatrix4 const &mat);

345 7 get_mat 0 4 514 23 DriveInterface::get_mat 0 1 89 253
////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::get_mat
//       Access: Published
//  Description: Returns the current transform.
////////////////////////////////////////////////////////////////////
46
LMatrix4 const &DriveInterface::get_mat(void);

346 12 force_dgraph 0 4 514 28 DriveInterface::force_dgraph 0 1 90 558
////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::force_dgraph
//       Access: Public
//  Description: This is a special kludge for DriveInterface to allow
//               us to avoid the one-frame latency after a collision.
//               It forces an immediate partial data flow for all data
//               graph nodes below this node, causing all data nodes
//               that depend on this matrix to be updated immediately.
////////////////////////////////////////////////////////////////////
40
void DriveInterface::force_dgraph(void);

347 14 get_class_type 0 4 514 30 DriveInterface::get_class_type 0 1 91 0
55
static TypeHandle DriveInterface::get_class_type(void);

348 14 MouseSubregion 0 4 515 30 MouseSubregion::MouseSubregion 0 1 92 223
////////////////////////////////////////////////////////////////////
//     Function: MouseSubregion::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
51
MouseSubregion::MouseSubregion(string const &name);

349 8 get_left 0 4 515 24 MouseSubregion::get_left 0 1 93 379
////////////////////////////////////////////////////////////////////
//     Function: MouseSubregion::get_left
//       Access: Published
//  Description: Retrieves the x coordinate of the left edge of the
//               rectangle within the window.  This number will be in
//               the range [0..1].
////////////////////////////////////////////////////////////////////
56
inline PN_stdfloat MouseSubregion::get_left(void) const;

350 9 get_right 0 4 515 25 MouseSubregion::get_right 0 1 94 381
////////////////////////////////////////////////////////////////////
//     Function: MouseSubregion::get_right
//       Access: Published
//  Description: Retrieves the x coordinate of the right edge of the
//               rectangle within the window.  This number will be in
//               the range [0..1].
////////////////////////////////////////////////////////////////////
57
inline PN_stdfloat MouseSubregion::get_right(void) const;

351 10 get_bottom 0 4 515 26 MouseSubregion::get_bottom 0 1 95 384
////////////////////////////////////////////////////////////////////
//     Function: MouseSubregion::get_bottom
//       Access: Published
//  Description: Retrieves the y coordinate of the bottom edge of 
//               the rectangle within the window.  This number will be
//               in the range [0..1].
////////////////////////////////////////////////////////////////////
58
inline PN_stdfloat MouseSubregion::get_bottom(void) const;

352 7 get_top 0 4 515 23 MouseSubregion::get_top 0 1 96 377
////////////////////////////////////////////////////////////////////
//     Function: MouseSubregion::get_top
//       Access: Published
//  Description: Retrieves the y coordinate of the top edge of the
//               rectangle within the window.  This number will be in
//               the range [0..1].
////////////////////////////////////////////////////////////////////
55
inline PN_stdfloat MouseSubregion::get_top(void) const;

353 14 set_dimensions 0 4 515 30 MouseSubregion::set_dimensions 0 1 97 583
////////////////////////////////////////////////////////////////////
//     Function: MouseSubregion::set_dimensions
//       Access: Published
//  Description: Changes the region of the window in which the mouse
//               is considered to be active.  The parameters are
//               identical to those for a DisplayRegion: they range
//               from 0 to 1, where 0,0 is the lower left corner and
//               1,1 is the upper right; (0, 1, 0, 1) represents the
//               whole window.
////////////////////////////////////////////////////////////////////
103
inline void MouseSubregion::set_dimensions(PN_stdfloat l, PN_stdfloat r, PN_stdfloat b, PN_stdfloat t);

354 14 get_class_type 0 4 515 30 MouseSubregion::get_class_type 0 1 98 0
55
static TypeHandle MouseSubregion::get_class_type(void);

355 37 upcast_to_TypedWritableReferenceCount 0 12 516 57 MouseWatcherRegion::upcast_to_TypedWritableReferenceCount 0 1 116 61
upcast from MouseWatcherRegion to TypedWritableReferenceCount
93
TypedWritableReferenceCount *MouseWatcherRegion::upcast_to_TypedWritableReferenceCount(void);

356 30 downcast_to_MouseWatcherRegion 0 12 517 59 TypedWritableReferenceCount::downcast_to_MouseWatcherRegion 0 1 117 63
downcast from TypedWritableReferenceCount to MouseWatcherRegion
86
MouseWatcherRegion *TypedWritableReferenceCount::downcast_to_MouseWatcherRegion(void);

357 17 upcast_to_Namable 0 12 516 37 MouseWatcherRegion::upcast_to_Namable 0 1 118 41
upcast from MouseWatcherRegion to Namable
53
Namable *MouseWatcherRegion::upcast_to_Namable(void);

358 30 downcast_to_MouseWatcherRegion 0 12 518 39 Namable::downcast_to_MouseWatcherRegion 0 1 119 43
downcast from Namable to MouseWatcherRegion
66
MouseWatcherRegion *Namable::downcast_to_MouseWatcherRegion(void);

359 18 MouseWatcherRegion 0 4 516 38 MouseWatcherRegion::MouseWatcherRegion 0 2 99 100 462
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherRegion::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherRegion::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
231
inline MouseWatcherRegion::MouseWatcherRegion(string const &name, PN_stdfloat left, PN_stdfloat right, PN_stdfloat bottom, PN_stdfloat top);
inline MouseWatcherRegion::MouseWatcherRegion(string const &name, LVecBase4 const &frame);

360 9 set_frame 0 4 516 29 MouseWatcherRegion::set_frame 0 2 101 102 458
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherRegion::set_frame
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherRegion::set_frame
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
183
inline void MouseWatcherRegion::set_frame(PN_stdfloat left, PN_stdfloat right, PN_stdfloat bottom, PN_stdfloat top);
inline void MouseWatcherRegion::set_frame(LVecBase4 const &frame);

361 9 get_frame 0 4 516 29 MouseWatcherRegion::get_frame 0 1 103 228
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherRegion::get_frame
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
66
inline LVecBase4 const &MouseWatcherRegion::get_frame(void) const;

362 8 get_area 0 4 516 28 MouseWatcherRegion::get_area 0 1 104 271
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherRegion::get_area
//       Access: Published
//  Description: Returns the area of the rectangular region.
////////////////////////////////////////////////////////////////////
60
inline PN_stdfloat MouseWatcherRegion::get_area(void) const;

363 8 set_sort 0 4 516 28 MouseWatcherRegion::set_sort 0 1 105 672
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherRegion::set_sort
//       Access: Published
//  Description: Changes the sorting order of this particular region.
//               The sorting order is used to resolve conflicts in the
//               case of overlapping region; the region with the
//               highest sort value will be preferred, and between
//               regions of the same sort value, the smallest region
//               will be preferred.  The default sorting order, if
//               none is explicitly specified, is 0.
////////////////////////////////////////////////////////////////////
51
inline void MouseWatcherRegion::set_sort(int sort);

364 8 get_sort 0 4 516 28 MouseWatcherRegion::get_sort 0 1 106 310
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherRegion::get_sort
//       Access: Published
//  Description: Returns the current sorting order of this region.
//               See set_sort().
////////////////////////////////////////////////////////////////////
52
inline int MouseWatcherRegion::get_sort(void) const;

365 10 set_active 0 4 516 30 MouseWatcherRegion::set_active 0 1 107 515
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherRegion::set_active
//       Access: Published
//  Description: Sets whether the region is active or not.  If it is
//               not active, the MouseWatcher will never consider the
//               mouse to be over the region.  The region might still
//               receive keypress events if its set_keyboard() flag is
//               true.
////////////////////////////////////////////////////////////////////
56
inline void MouseWatcherRegion::set_active(bool active);

366 10 get_active 0 4 516 30 MouseWatcherRegion::get_active 0 1 108 310
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherRegion::get_active
//       Access: Published
//  Description: Returns whether the region is active or not.  See
//               set_active().
////////////////////////////////////////////////////////////////////
55
inline bool MouseWatcherRegion::get_active(void) const;

367 12 set_keyboard 0 4 516 32 MouseWatcherRegion::set_keyboard 0 1 109 598
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherRegion::set_keyboard
//       Access: Published
//  Description: Sets whether the region is interested in global
//               keyboard events.  If this is true, then any keyboard
//               button events will be passed to press() and release()
//               regardless of the position of the mouse onscreen;
//               otherwise, these events will only be passed if the
//               mouse is over the region.
////////////////////////////////////////////////////////////////////
60
inline void MouseWatcherRegion::set_keyboard(bool keyboard);

368 12 get_keyboard 0 4 516 32 MouseWatcherRegion::get_keyboard 0 1 110 336
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherRegion::get_keyboard
//       Access: Published
//  Description: Returns whether the region is interested in global
//               keyboard events; see set_keyboard().
////////////////////////////////////////////////////////////////////
57
inline bool MouseWatcherRegion::get_keyboard(void) const;

369 18 set_suppress_flags 0 4 516 38 MouseWatcherRegion::set_suppress_flags 0 1 111 725
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherRegion::set_suppress_flags
//       Access: Published
//  Description: Sets which events are suppressed when the mouse is
//               over the region.  This is the union of zero or more
//               various SF_* values.  Normally, this is 0, indicating
//               that no events are suppressed.
//
//               If you set this to a non-zero value, for instance
//               SF_mouse_position, then the mouse position will not
//               be sent along the data graph when the mouse is over
//               this particular region.
////////////////////////////////////////////////////////////////////
71
inline void MouseWatcherRegion::set_suppress_flags(int suppress_flags);

370 18 get_suppress_flags 0 4 516 38 MouseWatcherRegion::get_suppress_flags 0 1 112 317
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherRegion::get_suppress_flags
//       Access: Published
//  Description: Returns the current suppress_flags.  See
//               set_suppress_flags().
////////////////////////////////////////////////////////////////////
62
inline int MouseWatcherRegion::get_suppress_flags(void) const;

371 6 output 0 4 516 26 MouseWatcherRegion::output 0 1 113 225
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherRegion::output
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
52
void MouseWatcherRegion::output(ostream &out) const;

372 5 write 0 4 516 25 MouseWatcherRegion::write 0 1 114 224
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherRegion::write
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
73
void MouseWatcherRegion::write(ostream &out, int indent_level = 0) const;

373 14 get_class_type 0 4 516 34 MouseWatcherRegion::get_class_type 0 1 115 0
59
static TypeHandle MouseWatcherRegion::get_class_type(void);

374 19 ~MouseWatcherRegion 0 4 516 39 MouseWatcherRegion::~MouseWatcherRegion 0 0 0
46
MouseWatcherRegion::~MouseWatcherRegion(void);

375 17 ~MouseWatcherBase 0 6 520 35 MouseWatcherBase::~MouseWatcherBase 0 0 233
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherBase::Destructor
//       Access: Public, Virtual
//  Description:
////////////////////////////////////////////////////////////////////
50
virtual MouseWatcherBase::~MouseWatcherBase(void);

376 10 add_region 0 4 520 28 MouseWatcherBase::add_region 0 1 120 389
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherBase::add_region
//       Access: Published
//  Description: Adds the indicated region to the set of regions in
//               the group.  It is an error to add the same region to
//               the set more than once.
////////////////////////////////////////////////////////////////////
62
void MouseWatcherBase::add_region(MouseWatcherRegion *region);

377 10 has_region 0 4 520 28 MouseWatcherBase::has_region 0 1 121 346
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherBase::has_region
//       Access: Published
//  Description: Returns true if the indicated region has already been
//               added to the MouseWatcherBase, false otherwise.
////////////////////////////////////////////////////////////////////
68
bool MouseWatcherBase::has_region(MouseWatcherRegion *region) const;

378 13 remove_region 0 4 520 31 MouseWatcherBase::remove_region 0 1 122 402
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherBase::remove_region
//       Access: Published
//  Description: Removes the indicated region from the group.
//               Returns true if it was successfully removed, or false
//               if it wasn't there in the first place.
////////////////////////////////////////////////////////////////////
65
bool MouseWatcherBase::remove_region(MouseWatcherRegion *region);

379 11 find_region 0 4 520 29 MouseWatcherBase::find_region 0 1 123 416
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherBase::find_region
//       Access: Published
//  Description: Returns a pointer to the first region found with the
//               indicated name.  If multiple regions share the same
//               name, the one that is returned is indeterminate.
////////////////////////////////////////////////////////////////////
76
MouseWatcherRegion *MouseWatcherBase::find_region(string const &name) const;

380 13 clear_regions 0 4 520 31 MouseWatcherBase::clear_regions 0 1 124 270
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherBase::clear_regions
//       Access: Published
//  Description: Removes all the regions from the group.
////////////////////////////////////////////////////////////////////
43
void MouseWatcherBase::clear_regions(void);

381 12 sort_regions 0 4 520 30 MouseWatcherBase::sort_regions 0 1 125 302
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherBase::sort_regions
//       Access: Published
//  Description: Sorts all the regions in this group into pointer
//               order.
////////////////////////////////////////////////////////////////////
42
void MouseWatcherBase::sort_regions(void);

382 9 is_sorted 0 4 520 27 MouseWatcherBase::is_sorted 0 1 126 311
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherBase::is_sorted
//       Access: Published
//  Description: Returns true if the group has already been sorted,
//               false otherwise.
////////////////////////////////////////////////////////////////////
45
bool MouseWatcherBase::is_sorted(void) const;

383 15 get_num_regions 0 4 520 33 MouseWatcherBase::get_num_regions 0 1 127 276
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherBase::get_num_regions
//       Access: Published
//  Description: Returns the number of regions in the group.
////////////////////////////////////////////////////////////////////
50
int MouseWatcherBase::get_num_regions(void) const;

384 10 get_region 0 4 520 28 MouseWatcherBase::get_region 0 1 128 471
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherBase::get_region
//       Access: Published
//  Description: Returns the nth region of the group; returns NULL if
//               there is no nth region.  Note that this is not
//               thread-safe; another thread might have removed the
//               nth region before you called this method.
////////////////////////////////////////////////////////////////////
62
MouseWatcherRegion *MouseWatcherBase::get_region(int n) const;

385 6 output 0 4 520 24 MouseWatcherBase::output 0 1 129 223
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherBase::output
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
50
void MouseWatcherBase::output(ostream &out) const;

386 5 write 0 4 520 23 MouseWatcherBase::write 0 1 130 222
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherBase::write
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
71
void MouseWatcherBase::write(ostream &out, int indent_level = 0) const;

387 12 show_regions 0 4 520 30 MouseWatcherBase::show_regions 0 1 131 443
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherBase::show_regions
//       Access: Published
//  Description: Enables the visualization of all of the regions
//               handled by this MouseWatcherBase.  The supplied
//               NodePath should be the root of the 2-d scene graph
//               for the window.
////////////////////////////////////////////////////////////////////
102
void MouseWatcherBase::show_regions(NodePath const &render2d, string const &bin_name, int draw_order);

388 9 set_color 0 4 520 27 MouseWatcherBase::set_color 0 1 132 361
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherBase::set_color
//       Access: Published
//  Description: Specifies the color used to draw the region
//               rectangles for the regions visualized by
//               show_regions().
////////////////////////////////////////////////////////////////////
54
void MouseWatcherBase::set_color(LColor const &color);

389 12 hide_regions 0 4 520 30 MouseWatcherBase::hide_regions 0 1 133 316
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherBase::hide_regions
//       Access: Published
//  Description: Stops the visualization created by a previous call to
//               show_regions().
////////////////////////////////////////////////////////////////////
42
void MouseWatcherBase::hide_regions(void);

390 14 update_regions 0 4 520 32 MouseWatcherBase::update_regions 0 1 134 303
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherBase::update_regions
//       Access: Published
//  Description: Refreshes the visualization created by
//               show_regions().
////////////////////////////////////////////////////////////////////
44
void MouseWatcherBase::update_regions(void);

391 14 get_class_type 0 4 520 32 MouseWatcherBase::get_class_type 0 1 135 0
57
static TypeHandle MouseWatcherBase::get_class_type(void);

392 18 upcast_to_DataNode 0 12 521 32 MouseWatcher::upcast_to_DataNode 0 1 198 36
upcast from MouseWatcher to DataNode
49
DataNode *MouseWatcher::upcast_to_DataNode(void);

393 24 downcast_to_MouseWatcher 0 12 512 34 DataNode::downcast_to_MouseWatcher 0 1 199 38
downcast from DataNode to MouseWatcher
55
MouseWatcher *DataNode::downcast_to_MouseWatcher(void);

394 26 upcast_to_MouseWatcherBase 0 12 521 40 MouseWatcher::upcast_to_MouseWatcherBase 0 1 200 44
upcast from MouseWatcher to MouseWatcherBase
65
MouseWatcherBase *MouseWatcher::upcast_to_MouseWatcherBase(void);

395 24 downcast_to_MouseWatcher 0 12 520 42 MouseWatcherBase::downcast_to_MouseWatcher 0 1 201 46
downcast from MouseWatcherBase to MouseWatcher
63
MouseWatcher *MouseWatcherBase::downcast_to_MouseWatcher(void);

396 12 MouseWatcher 0 4 521 26 MouseWatcher::MouseWatcher 0 1 136 224
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
52
MouseWatcher::MouseWatcher(string const &name = "");

397 13 ~MouseWatcher 0 6 521 27 MouseWatcher::~MouseWatcher 0 0 223
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
42
virtual MouseWatcher::~MouseWatcher(void);

398 13 remove_region 0 4 521 27 MouseWatcher::remove_region 0 1 137 398
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::remove_region
//       Access: Published
//  Description: Removes the indicated region from the group.
//               Returns true if it was successfully removed, or false
//               if it wasn't there in the first place.
////////////////////////////////////////////////////////////////////
61
bool MouseWatcher::remove_region(MouseWatcherRegion *region);

399 9 has_mouse 0 4 521 23 MouseWatcher::has_mouse 0 1 138 340
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::has_mouse
//       Access: Published
//  Description: Returns true if the mouse is anywhere within the
//               window, false otherwise.  Also see is_mouse_open().
////////////////////////////////////////////////////////////////////
48
inline bool MouseWatcher::has_mouse(void) const;

400 13 is_mouse_open 0 4 521 27 MouseWatcher::is_mouse_open 0 1 139 473
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::is_mouse_open
//       Access: Published
//  Description: Returns true if the mouse is within the window and
//               not over some particular MouseWatcherRegion that is
//               marked to suppress mouse events; that is, that the
//               mouse is in open space within the window.
////////////////////////////////////////////////////////////////////
52
inline bool MouseWatcher::is_mouse_open(void) const;

401 9 get_mouse 0 4 521 23 MouseWatcher::get_mouse 0 1 140 389
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_mouse
//       Access: Published
//  Description: It is only valid to call this if has_mouse() returns
//               true.  If so, this returns the current position of
//               the mouse within the window.
////////////////////////////////////////////////////////////////////
58
inline LPoint2 const &MouseWatcher::get_mouse(void) const;

402 11 get_mouse_x 0 4 521 25 MouseWatcher::get_mouse_x 0 1 141 393
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_mouse_x
//       Access: Published
//  Description: It is only valid to call this if has_mouse() returns
//               true.  If so, this returns the current X position of
//               the mouse within the window.
////////////////////////////////////////////////////////////////////
57
inline PN_stdfloat MouseWatcher::get_mouse_x(void) const;

403 11 get_mouse_y 0 4 521 25 MouseWatcher::get_mouse_y 0 1 142 393
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_mouse_y
//       Access: Published
//  Description: It is only valid to call this if has_mouse() returns
//               true.  If so, this returns the current Y position of
//               the mouse within the window.
////////////////////////////////////////////////////////////////////
57
inline PN_stdfloat MouseWatcher::get_mouse_y(void) const;

404 9 set_frame 0 4 521 23 MouseWatcher::set_frame 0 2 143 144 1273
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::set_frame
//       Access: Published
//  Description: Sets the frame of the MouseWatcher.  See the next
//               flavor of this method for a more verbose explanation.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::set_frame
//       Access: Published
//  Description: Sets the frame of the MouseWatcher.  This determines
//               the coordinate space in which the MouseWatcherRegions
//               should be expected to live.  Normally, this is left
//               at -1, 1, -1, 1, which is the default setting, and
//               matches the mouse coordinate range.
//
//               Whatever values you specify here indicate the shape
//               of the full screen, and the MouseWatcherRegions will
//               be given in coordinate space matching it.  For
//               instance, if you specify (0, 1, 0, 1), then a
//               MouseWatcherRegion with the frame (0, 1, 0, .5) will
//               cover the lower half of the screen.
////////////////////////////////////////////////////////////////////
171
inline void MouseWatcher::set_frame(PN_stdfloat left, PN_stdfloat right, PN_stdfloat bottom, PN_stdfloat top);
inline void MouseWatcher::set_frame(LVecBase4 const &frame);

405 9 get_frame 0 4 521 23 MouseWatcher::get_frame 0 1 145 296
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_frame
//       Access: Published
//  Description: Returns the frame of the MouseWatcher.  See
//               set_frame().
////////////////////////////////////////////////////////////////////
60
inline LVecBase4 const &MouseWatcher::get_frame(void) const;

406 14 is_over_region 0 4 521 28 MouseWatcher::is_over_region 0 3 146 147 148 961
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::is_over_region
//       Access: Published
//  Description: Returns true if the mouse is over any rectangular
//               region, false otherwise.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::is_over_region
//       Access: Published
//  Description: Returns true if the mouse is over any rectangular
//               region, false otherwise.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::is_over_region
//       Access: Published
//  Description: Returns true if the mouse is over any rectangular
//               region, false otherwise.
////////////////////////////////////////////////////////////////////
199
inline bool MouseWatcher::is_over_region(void) const;
inline bool MouseWatcher::is_over_region(PN_stdfloat x, PN_stdfloat y) const;
inline bool MouseWatcher::is_over_region(LPoint2 const &pos) const;

407 15 get_over_region 0 4 521 29 MouseWatcher::get_over_region 0 3 149 150 151 1187
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_over_region
//       Access: Published
//  Description: Returns the smallest region the mouse is currently
//               over, or NULL if it is over no region.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_over_region
//       Access: Published
//  Description: Returns the smallest region the indicated point is
//               over, or NULL if it is over no region.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_over_region
//       Access: Published
//  Description: Returns the preferred region the mouse is over.  In
//               the case of overlapping regions, the region with the
//               largest sort order is preferred; if two regions have
//               the same sort order, then the smaller region is
//               preferred.
////////////////////////////////////////////////////////////////////
240
inline MouseWatcherRegion *MouseWatcher::get_over_region(void) const;
inline MouseWatcherRegion *MouseWatcher::get_over_region(PN_stdfloat x, PN_stdfloat y) const;
MouseWatcherRegion *MouseWatcher::get_over_region(LPoint2 const &pos) const;

408 14 is_button_down 0 4 521 28 MouseWatcher::is_button_down 0 1 152 328
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::is_button_down
//       Access: Published
//  Description: Returns true if the indicated button is currently
//               being held down, false otherwise.
////////////////////////////////////////////////////////////////////
68
inline bool MouseWatcher::is_button_down(ButtonHandle button) const;

409 23 set_button_down_pattern 0 4 521 37 MouseWatcher::set_button_down_pattern 0 1 153 762
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::set_button_down_pattern
//       Access: Published
//  Description: Sets the pattern string that indicates how the event
//               names are generated when a button is depressed.  This
//               is a string that may contain any of the following:
//
//                  %r  - the name of the region the mouse is over
//                  %b  - the name of the button pressed.
//
//               The event name will be based on the in_pattern
//               string specified here, with all occurrences of the
//               above strings replaced with the corresponding values.
////////////////////////////////////////////////////////////////////
73
inline void MouseWatcher::set_button_down_pattern(string const &pattern);

410 23 get_button_down_pattern 0 4 521 37 MouseWatcher::get_button_down_pattern 0 1 154 394
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_button_down_pattern
//       Access: Published
//  Description: Returns the string that indicates how event names are
//               generated when a button is depressed.  See
//               set_button_down_pattern().
////////////////////////////////////////////////////////////////////
71
inline string const &MouseWatcher::get_button_down_pattern(void) const;

411 21 set_button_up_pattern 0 4 521 35 MouseWatcher::set_button_up_pattern 0 1 155 400
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::set_button_up_pattern
//       Access: Published
//  Description: Sets the pattern string that indicates how the event
//               names are generated when a button is released.  See
//               set_button_down_pattern().
////////////////////////////////////////////////////////////////////
71
inline void MouseWatcher::set_button_up_pattern(string const &pattern);

412 21 get_button_up_pattern 0 4 521 35 MouseWatcher::get_button_up_pattern 0 1 156 391
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_button_up_pattern
//       Access: Published
//  Description: Returns the string that indicates how event names are
//               generated when a button is released.  See
//               set_button_down_pattern().
////////////////////////////////////////////////////////////////////
69
inline string const &MouseWatcher::get_button_up_pattern(void) const;

413 25 set_button_repeat_pattern 0 4 521 39 MouseWatcher::set_button_repeat_pattern 0 1 157 827
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::set_button_repeat_pattern
//       Access: Published
//  Description: Sets the pattern string that indicates how the event
//               names are generated when a button is continuously
//               held and generates keyrepeat "down" events.  This is
//               a string that may contain any of the following:
//
//                  %r  - the name of the region the mouse is over
//                  %b  - the name of the button pressed.
//
//               The event name will be based on the in_pattern
//               string specified here, with all occurrences of the
//               above strings replaced with the corresponding values.
////////////////////////////////////////////////////////////////////
75
inline void MouseWatcher::set_button_repeat_pattern(string const &pattern);

414 25 get_button_repeat_pattern 0 4 521 39 MouseWatcher::get_button_repeat_pattern 0 1 158 471
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_button_repeat_pattern
//       Access: Published
//  Description: Returns the string that indicates how event names are
//               names are generated when a button is continuously
//               held and generates keyrepeat "down" events.  See
//               set_button_repeat_pattern().
////////////////////////////////////////////////////////////////////
73
inline string const &MouseWatcher::get_button_repeat_pattern(void) const;

415 17 set_enter_pattern 0 4 521 31 MouseWatcher::set_enter_pattern 0 1 159 584
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::set_enter_pattern
//       Access: Published
//  Description: Sets the pattern string that indicates how the event
//               names are generated when the mouse enters a region.
//               This is different from within_pattern, in that a
//               mouse is only "entered" in the topmost region at a
//               given time, while it might be "within" multiple
//               nested regions.
////////////////////////////////////////////////////////////////////
67
inline void MouseWatcher::set_enter_pattern(string const &pattern);

416 17 get_enter_pattern 0 4 521 31 MouseWatcher::get_enter_pattern 0 1 160 559
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_enter_pattern
//       Access: Published
//  Description: Returns the string that indicates how event names are
//               generated when the mouse enters a region.  This is
//               different from within_pattern, in that a mouse is
//               only "entered" in the topmost region at a given time,
//               while it might be "within" multiple nested regions.
////////////////////////////////////////////////////////////////////
65
inline string const &MouseWatcher::get_enter_pattern(void) const;

417 17 set_leave_pattern 0 4 521 31 MouseWatcher::set_leave_pattern 0 1 161 585
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::set_leave_pattern
//       Access: Published
//  Description: Sets the pattern string that indicates how the event
//               names are generated when the mouse leaves a region.
//               This is different from without_pattern, in that a
//               mouse is only "entered" in the topmost region at a
//               given time, while it might be "within" multiple
//               nested regions.
////////////////////////////////////////////////////////////////////
67
inline void MouseWatcher::set_leave_pattern(string const &pattern);

418 17 get_leave_pattern 0 4 521 31 MouseWatcher::get_leave_pattern 0 1 162 560
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_leave_pattern
//       Access: Published
//  Description: Returns the string that indicates how event names are
//               generated when the mouse leaves a region.  This is
//               different from without_pattern, in that a mouse is
//               only "entered" in the topmost region at a given time,
//               while it might be "within" multiple nested regions.
////////////////////////////////////////////////////////////////////
65
inline string const &MouseWatcher::get_leave_pattern(void) const;

419 18 set_within_pattern 0 4 521 32 MouseWatcher::set_within_pattern 0 1 163 591
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::set_within_pattern
//       Access: Published
//  Description: Sets the pattern string that indicates how the event
//               names are generated when the mouse wanders over a
//               region.  This is different from enter_pattern, in
//               that a mouse is only "entered" in the topmost region
//               at a given time, while it might be "within" multiple
//               nested regions.
////////////////////////////////////////////////////////////////////
68
inline void MouseWatcher::set_within_pattern(string const &pattern);

420 18 get_within_pattern 0 4 521 32 MouseWatcher::get_within_pattern 0 1 164 565
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_within_pattern
//       Access: Published
//  Description: Returns the string that indicates how event names are
//               generated when the mouse wanders over a region.  This
//               is different from enter_pattern, in that a mouse is
//               only "entered" in the topmost region at a given time,
//               while it might be "within" multiple nested regions.
////////////////////////////////////////////////////////////////////
66
inline string const &MouseWatcher::get_within_pattern(void) const;

421 19 set_without_pattern 0 4 521 33 MouseWatcher::set_without_pattern 0 1 165 594
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::set_without_pattern
//       Access: Published
//  Description: Sets the pattern string that indicates how the event
//               names are generated when the mouse wanders out of a
//               region.  This is different from leave_pattern, in
//               that a mouse is only "entered" in the topmost region
//               at a given time, while it might be "within" multiple
//               nested regions.
////////////////////////////////////////////////////////////////////
69
inline void MouseWatcher::set_without_pattern(string const &pattern);

422 19 get_without_pattern 0 4 521 33 MouseWatcher::get_without_pattern 0 1 166 584
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_without_pattern
//       Access: Published
//  Description: Returns the string that indicates how event names are
//               generated when the mouse wanders out of a region.
//               This is different from leave_pattern, in that a mouse
//               is only "entered" in the topmost region at a given
//               time, while it might be "within" multiple nested
//               regions.
////////////////////////////////////////////////////////////////////
67
inline string const &MouseWatcher::get_without_pattern(void) const;

423 12 set_geometry 0 4 521 26 MouseWatcher::set_geometry 0 1 167 553
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::set_geometry
//       Access: Published
//  Description: Sets the node that will be transformed each frame by
//               the mouse's coordinates.  It will also be hidden when
//               the mouse goes outside the window.  This can be used
//               to implement a software mouse pointer for when a
//               hardware (or system) mouse pointer is unavailable.
////////////////////////////////////////////////////////////////////
56
inline void MouseWatcher::set_geometry(PandaNode *node);

424 12 has_geometry 0 4 521 26 MouseWatcher::has_geometry 0 1 168 376
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::has_geometry
//       Access: Published
//  Description: Returns true if a software mouse pointer has been
//               setup via set_geometry(), or false otherwise.  See
//               set_geometry().
////////////////////////////////////////////////////////////////////
51
inline bool MouseWatcher::has_geometry(void) const;

425 12 get_geometry 0 4 521 26 MouseWatcher::get_geometry 0 1 169 398
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_geometry
//       Access: Published
//  Description: Returns the node that has been set as the software
//               mouse pointer, or NULL if no node has been set.  See
//               has_geometry() and set_geometry().
////////////////////////////////////////////////////////////////////
57
inline PandaNode *MouseWatcher::get_geometry(void) const;

426 14 clear_geometry 0 4 521 28 MouseWatcher::clear_geometry 0 1 170 308
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::clear_geometry
//       Access: Published
//  Description: Stops the use of the software cursor set up via
//               set_geometry().
////////////////////////////////////////////////////////////////////
47
inline void MouseWatcher::clear_geometry(void);

427 17 set_extra_handler 0 4 521 31 MouseWatcher::set_extra_handler 0 1 171 401
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::set_extra_handler
//       Access: Published
//  Description: As an optimization for the C++ Gui, an extra handler
//               can be registered with a mouseWatcher so that events
//               can be dealt with much sooner.
////////////////////////////////////////////////////////////////////
62
inline void MouseWatcher::set_extra_handler(EventHandler *eh);

428 17 get_extra_handler 0 4 521 31 MouseWatcher::get_extra_handler 0 1 172 401
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_extra_handler
//       Access: Published
//  Description: As an optimization for the C++ Gui, an extra handler
//               can be registered with a mouseWatcher so that events
//               can be dealt with much sooner.
////////////////////////////////////////////////////////////////////
65
inline EventHandler *MouseWatcher::get_extra_handler(void) const;

429 20 set_modifier_buttons 0 4 521 34 MouseWatcher::set_modifier_buttons 0 1 173 376
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::set_modifier_buttons
//       Access: Public
//  Description: Sets the buttons that should be monitored as modifier
//               buttons for generating events to the
//               MouseWatcherRegions.
////////////////////////////////////////////////////////////////////
76
inline void MouseWatcher::set_modifier_buttons(ModifierButtons const &mods);

430 20 get_modifier_buttons 0 4 521 34 MouseWatcher::get_modifier_buttons 0 1 174 355
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_modifier_buttons
//       Access: Published
//  Description: Returns the set of buttons that are being monitored
//               as modifier buttons, as well as their current state.
////////////////////////////////////////////////////////////////////
70
inline ModifierButtons MouseWatcher::get_modifier_buttons(void) const;

431 18 set_display_region 0 4 521 32 MouseWatcher::set_display_region 0 1 175 743
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::set_display_region
//       Access: Published
//  Description: Constrains the MouseWatcher to watching the mouse
//               within a particular indicated region of the screen.
//               DataNodes parented under the MouseWatcher will
//               observe the mouse and keyboard events only when the
//               mouse is within the indicated region, and the
//               observed range will be from -1 .. 1 across the
//               region.
//
//               Do not delete the DisplayRegion while it is owned by
//               the MouseWatcher.
////////////////////////////////////////////////////////////////////
64
inline void MouseWatcher::set_display_region(DisplayRegion *dr);

432 20 clear_display_region 0 4 521 34 MouseWatcher::clear_display_region 0 1 176 398
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::clear_display_region
//       Access: Published
//  Description: Removes the display region constraint from the
//               MouseWatcher, and restores it to the default behavior
//               of watching the whole window.
////////////////////////////////////////////////////////////////////
53
inline void MouseWatcher::clear_display_region(void);

433 18 get_display_region 0 4 521 32 MouseWatcher::get_display_region 0 1 177 386
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_display_region
//       Access: Published
//  Description: Returns the display region the MouseWatcher is
//               constrained to by set_display_region(), or NULL if it
//               is not constrained.
////////////////////////////////////////////////////////////////////
67
inline DisplayRegion *MouseWatcher::get_display_region(void) const;

434 18 has_display_region 0 4 521 32 MouseWatcher::has_display_region 0 1 178 525
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::has_display_region
//       Access: Published
//  Description: Returns true if the MouseWatcher has been constrained
//               to a particular region of the screen via
//               set_display_region(), or false otherwise.  If this
//               returns true, get_display_region() may be used to
//               return the particular region.
////////////////////////////////////////////////////////////////////
57
inline bool MouseWatcher::has_display_region(void) const;

435 9 add_group 0 4 521 23 MouseWatcher::add_group 0 1 179 840
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::add_group
//       Access: Published
//  Description: Adds the indicated group of regions to the set of
//               regions the MouseWatcher will monitor each frame.
//
//               Since the MouseWatcher itself inherits from
//               MouseWatcherBase, this operation is normally not
//               necessary--you can simply add the Regions you care
//               about one at a time.  Adding a complete group is
//               useful when you may want to explicitly remove the
//               regions as a group later.
//
//               Returns true if the group was successfully added, or
//               false if it was already on the list.
////////////////////////////////////////////////////////////////////
55
bool MouseWatcher::add_group(MouseWatcherGroup *group);

436 12 remove_group 0 4 521 26 MouseWatcher::remove_group 0 1 180 474
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::remove_group
//       Access: Published
//  Description: Removes the indicated group from the set of extra
//               groups associated with the MouseWatcher.  Returns
//               true if successful, or false if the group was already
//               removed or was never added via add_group().
////////////////////////////////////////////////////////////////////
58
bool MouseWatcher::remove_group(MouseWatcherGroup *group);

437 13 replace_group 0 4 521 27 MouseWatcher::replace_group 0 1 181 665
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::replace_group
//       Access: Published
//  Description: Atomically removes old_group from the MouseWatcher,
//               and replaces it with new_group.  Presumably old_group
//               and new_group might have some regions in common;
//               these are handled properly.
//
//               If old_group is not already present, simply adds
//               new_group and returns false.  Otherwise, removes
//               old_group and adds new_group, and then returns true.
////////////////////////////////////////////////////////////////////
93
bool MouseWatcher::replace_group(MouseWatcherGroup *old_group, MouseWatcherGroup *new_group);

438 14 get_num_groups 0 4 521 28 MouseWatcher::get_num_groups 0 1 182 325
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_num_groups
//       Access: Published
//  Description: Returns the number of separate groups added to the
//               MouseWatcher via add_group().
////////////////////////////////////////////////////////////////////
45
int MouseWatcher::get_num_groups(void) const;

439 9 get_group 0 4 521 23 MouseWatcher::get_group 0 1 183 304
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_group
//       Access: Published
//  Description: Returns the nth group added to the MouseWatcher via
//               add_group().
////////////////////////////////////////////////////////////////////
56
MouseWatcherGroup *MouseWatcher::get_group(int n) const;

440 22 set_inactivity_timeout 0 4 521 36 MouseWatcher::set_inactivity_timeout 0 1 184 822
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::set_inactivity_timeout
//       Access: Published
//  Description: Sets an inactivity timeout on the mouse activity.
//               When this timeout (in seconds) is exceeded with no
//               keyboard or mouse activity, all currently-held
//               buttons are automatically released.  This is intended
//               to help protect against people who inadvertently (or
//               intentionally) leave a keyboard key stuck down and
//               then wander away from the keyboard.
//
//               Also, when this timeout expires, the event specified
//               by set_inactivity_timeout_event() will be generated.
////////////////////////////////////////////////////////////////////
65
inline void MouseWatcher::set_inactivity_timeout(double timeout);

441 22 has_inactivity_timeout 0 4 521 36 MouseWatcher::has_inactivity_timeout 0 1 185 321
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::has_inactivity_timeout
//       Access: Published
//  Description: Returns true if an inactivity timeout has been set,
//               false otherwise.
////////////////////////////////////////////////////////////////////
61
inline bool MouseWatcher::has_inactivity_timeout(void) const;

442 22 get_inactivity_timeout 0 4 521 36 MouseWatcher::get_inactivity_timeout 0 1 186 390
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_inactivity_timeout
//       Access: Published
//  Description: Returns the inactivity timeout that has been set.
//               It is an error to call this if
//               has_inactivity_timeout() returns false.
////////////////////////////////////////////////////////////////////
63
inline double MouseWatcher::get_inactivity_timeout(void) const;

443 24 clear_inactivity_timeout 0 4 521 38 MouseWatcher::clear_inactivity_timeout 0 1 187 399
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::clear_inactivity_timeout
//       Access: Published
//  Description: Removes the inactivity timeout and restores the
//               MouseWatcher to its default behavior of allowing a
//               key to be held indefinitely.
////////////////////////////////////////////////////////////////////
57
inline void MouseWatcher::clear_inactivity_timeout(void);

444 28 set_inactivity_timeout_event 0 4 521 42 MouseWatcher::set_inactivity_timeout_event 0 1 188 401
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::set_inactivity_timeout_event
//       Access: Published
//  Description: Specifies the event string that will be generated
//               when the inactivity timeout counter expires.  See
//               set_inactivity_timeout().
////////////////////////////////////////////////////////////////////
76
inline void MouseWatcher::set_inactivity_timeout_event(string const &event);

445 28 get_inactivity_timeout_event 0 4 521 42 MouseWatcher::get_inactivity_timeout_event 0 1 189 399
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_inactivity_timeout_event
//       Access: Published
//  Description: Returns the event string that will be generated
//               when the inactivity timeout counter expires.  See
//               set_inactivity_timeout().
////////////////////////////////////////////////////////////////////
76
inline string const &MouseWatcher::get_inactivity_timeout_event(void) const;

446 13 get_trail_log 0 4 521 27 MouseWatcher::get_trail_log 0 1 190 713
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_trail_log
//       Access: Published
//  Description: Obtain the mouse trail log.  This is a PointerEventList.
//               Does not make a copy, therefore, this PointerEventList
//               will be updated each time process_events gets called.
//
//               To use trail logging, you need to enable the
//               generation of pointer events in the
//               GraphicsWindowInputDevice and set the trail log
//               duration in the MouseWatcher. Otherwise, the
//               trail log will be empty.
////////////////////////////////////////////////////////////////////
82
inline ConstPointerTo< PointerEventList > MouseWatcher::get_trail_log(void) const;

447 16 num_trail_recent 0 4 521 30 MouseWatcher::num_trail_recent 0 1 191 440
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::num_trail_recent
//       Access: Published
//  Description: This counter indicates how many events were added
//               to the trail log this frame.  The trail log is
//               updated once per frame, during the process_events
//               operation.  
////////////////////////////////////////////////////////////////////
54
inline int MouseWatcher::num_trail_recent(void) const;

448 22 set_trail_log_duration 0 4 521 36 MouseWatcher::set_trail_log_duration 0 1 192 468
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::set_trail_log_duration
//       Access: Published
//  Description: If the duration is nonzero, causes the MouseWatcher
//               to log the mouse's trail.  Events older than the
//               specified duration are discarded.  If the duration is
//               zero, logging is disabled.
////////////////////////////////////////////////////////////////////
59
void MouseWatcher::set_trail_log_duration(double duration);

449 14 get_trail_node 0 4 521 28 MouseWatcher::get_trail_node 0 1 193 999
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_trail_node
//       Access: Published
//  Description: Returns a GeomNode that represents the mouse trail.
//               The intent is that you should reparent this GeomNode
//               to Render2D, and then forget about it.  The
//               MouseWatcher will continually update the trail node.
//               There is only one trail node, it does not create a
//               new one each time you call get_trail_node.
//
//               This is not a particularly beautiful way to render
//               a mouse trail.  It is intended more for debugging
//               purposes than for finished applications.  Even so,
//               It is suggested that you might want to apply a line
//               thickness and antialias mode to the line --- doing
//               so makes it look a lot better.
////////////////////////////////////////////////////////////////////
57
PointerTo< GeomNode > MouseWatcher::get_trail_node(void);

450 16 clear_trail_node 0 4 521 30 MouseWatcher::clear_trail_node 0 1 194 533
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::clear_trail_node
//       Access: Published
//  Description: If you have previously fetched the trail node
//               using get_trail_node, then the MouseWatcher is
//               continually updating the trail node every frame.
//               Using clear_trail_node causes the MouseWatcher to
//               forget the trail node and stop updating it.
////////////////////////////////////////////////////////////////////
42
void MouseWatcher::clear_trail_node(void);

451 15 clear_trail_log 0 4 521 29 MouseWatcher::clear_trail_log 0 1 195 349
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::clear_trail_log
//       Access: Published
//  Description: Clears the mouse trail log.  This does not prevent
//               further accumulation of the log given future events.
////////////////////////////////////////////////////////////////////
48
inline void MouseWatcher::clear_trail_log(void);

452 13 note_activity 0 4 521 27 MouseWatcher::note_activity 0 1 196 951
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::note_activity
//       Access: Published
//  Description: Can be used in conjunction with the inactivity
//               timeout to inform the MouseWatcher that the user has
//               just performed some action which proves he/she is
//               present.  It may be necessary to call this for
//               external events, such as joystick action, that the
//               MouseWatcher might otherwise not know about.  This
//               will reset the current inactivity timer.  When the
//               inactivity timer reaches the length of time specified
//               by set_inactivity_timeout(), with no keyboard or
//               mouse activity and no calls to note_activity(), then
//               any buttons held will be automatically released.
////////////////////////////////////////////////////////////////////
39
void MouseWatcher::note_activity(void);

453 14 get_class_type 0 4 521 28 MouseWatcher::get_class_type 0 1 197 0
53
static TypeHandle MouseWatcher::get_class_type(void);

454 22 ~MouseWatcherParameter 0 4 522 45 MouseWatcherParameter::~MouseWatcherParameter 0 0 230
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherParameter::Destructor
//       Access: Public
//  Description: 
////////////////////////////////////////////////////////////////////
59
inline MouseWatcherParameter::~MouseWatcherParameter(void);

455 10 has_button 0 4 522 33 MouseWatcherParameter::has_button 0 1 202 341
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherParameter::has_button
//       Access: Published
//  Description: Returns true if this parameter has an associated
//               mouse or keyboard button, false otherwise.
////////////////////////////////////////////////////////////////////
58
inline bool MouseWatcherParameter::has_button(void) const;

456 10 get_button 0 4 522 33 MouseWatcherParameter::get_button 0 1 203 406
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherParameter::get_button
//       Access: Published
//  Description: Returns the mouse or keyboard button associated with
//               this event.  If has_button(), above, returns false,
//               this returns ButtonHandle::none().
////////////////////////////////////////////////////////////////////
66
inline ButtonHandle MouseWatcherParameter::get_button(void) const;

457 12 is_keyrepeat 0 4 522 35 MouseWatcherParameter::is_keyrepeat 0 1 204 381
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherParameter::is_keyrepeat
//       Access: Published
//  Description: Returns true if the button-down even was generated
//               due to keyrepeat, or false if it was an original
//               button down.
////////////////////////////////////////////////////////////////////
60
inline bool MouseWatcherParameter::is_keyrepeat(void) const;

458 11 has_keycode 0 4 522 34 MouseWatcherParameter::has_keycode 0 1 205 325
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherParameter::has_keycode
//       Access: Published
//  Description: Returns true if this parameter has an associated
//               keycode, false otherwise.
////////////////////////////////////////////////////////////////////
59
inline bool MouseWatcherParameter::has_keycode(void) const;

459 11 get_keycode 0 4 522 34 MouseWatcherParameter::get_keycode 0 1 206 355
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherParameter::get_keycode
//       Access: Published
//  Description: Returns the keycode associated with this event.  If
//               has_keycode(), above, returns false, this returns 0.
////////////////////////////////////////////////////////////////////
58
inline int MouseWatcherParameter::get_keycode(void) const;

460 13 has_candidate 0 4 522 36 MouseWatcherParameter::has_candidate 0 1 207 336
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherParameter::has_candidate
//       Access: Published
//  Description: Returns true if this parameter has an associated
//               candidate string, false otherwise.
////////////////////////////////////////////////////////////////////
61
inline bool MouseWatcherParameter::has_candidate(void) const;

461 28 get_candidate_string_encoded 0 4 522 51 MouseWatcherParameter::get_candidate_string_encoded 0 2 208 209 832
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherParameter::get_candidate_string_encoded
//       Access: Published
//  Description: Returns the candidate string associated with this
//               event.  If has_candidate(), above, returns false,
//               this returns the empty string.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherParameter::get_candidate_string_encoded
//       Access: Published
//  Description: Returns the candidate string associated with this
//               event.  If has_candidate(), above, returns false,
//               this returns the empty string.
////////////////////////////////////////////////////////////////////
183
inline string MouseWatcherParameter::get_candidate_string_encoded(void) const;
inline string MouseWatcherParameter::get_candidate_string_encoded(TextEncoder::Encoding encoding) const;

462 19 get_highlight_start 0 4 522 42 MouseWatcherParameter::get_highlight_start 0 1 210 323
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherParameter::get_highlight_start
//       Access: Published
//  Description: Returns the first highlighted character in the
//               candidate string.
////////////////////////////////////////////////////////////////////
69
inline size_t MouseWatcherParameter::get_highlight_start(void) const;

463 17 get_highlight_end 0 4 522 40 MouseWatcherParameter::get_highlight_end 0 1 211 334
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherParameter::get_highlight_end
//       Access: Published
//  Description: Returns one more than the last highlighted character
//               in the candidate string.
////////////////////////////////////////////////////////////////////
67
inline size_t MouseWatcherParameter::get_highlight_end(void) const;

464 14 get_cursor_pos 0 4 522 37 MouseWatcherParameter::get_cursor_pos 0 1 212 329
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherParameter::get_cursor_pos
//       Access: Published
//  Description: Returns the position of the user's edit cursor within
//               the candidate string.
////////////////////////////////////////////////////////////////////
64
inline size_t MouseWatcherParameter::get_cursor_pos(void) const;

465 20 get_modifier_buttons 0 4 522 43 MouseWatcherParameter::get_modifier_buttons 0 1 213 352
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherParameter::get_modifier_buttons
//       Access: Published
//  Description: Returns the set of modifier buttons that were being
//               held down while the event was generated.
////////////////////////////////////////////////////////////////////
86
inline ModifierButtons const &MouseWatcherParameter::get_modifier_buttons(void) const;

466 9 has_mouse 0 4 522 32 MouseWatcherParameter::has_mouse 0 1 214 330
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherParameter::has_mouse
//       Access: Published
//  Description: Returns true if this parameter has an associated
//               mouse position, false otherwise.
////////////////////////////////////////////////////////////////////
57
inline bool MouseWatcherParameter::has_mouse(void) const;

467 9 get_mouse 0 4 522 32 MouseWatcherParameter::get_mouse 0 1 215 425
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherParameter::get_mouse
//       Access: Published
//  Description: Returns the mouse position at the time the event was
//               generated, in the normalized range (-1 .. 1).  It is
//               valid to call this only if has_mouse() returned true.
////////////////////////////////////////////////////////////////////
67
inline LPoint2 const &MouseWatcherParameter::get_mouse(void) const;

468 10 is_outside 0 4 522 33 MouseWatcherParameter::is_outside 0 1 216 415
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherParameter::is_outside
//       Access: Published
//  Description: Returns true if the mouse was outside the region at
//               the time the event was generated, false otherwise.
//               This is only valid for "release" type events.
////////////////////////////////////////////////////////////////////
58
inline bool MouseWatcherParameter::is_outside(void) const;

469 6 output 0 4 522 29 MouseWatcherParameter::output 0 1 217 229
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherParameter::output
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
55
void MouseWatcherParameter::output(ostream &out) const;

470 9 Trackball 0 4 523 20 Trackball::Trackball 0 1 218 218
////////////////////////////////////////////////////////////////////
//     Function: Trackball::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
41
Trackball::Trackball(string const &name);

471 5 reset 0 4 523 16 Trackball::reset 0 1 219 257
////////////////////////////////////////////////////////////////////
//     Function: Trackball::reset
//       Access: Published
//  Description: Reinitializes all transforms to identity.
////////////////////////////////////////////////////////////////////
28
void Trackball::reset(void);

472 17 get_forward_scale 0 4 523 28 Trackball::get_forward_scale 0 1 220 335
////////////////////////////////////////////////////////////////////
//     Function: Trackball::get_forward_scale
//       Access: Published
//  Description: Returns the scale factor applied to forward and
//               backward motion.  See set_forward_scale().
////////////////////////////////////////////////////////////////////
53
PN_stdfloat Trackball::get_forward_scale(void) const;

473 17 set_forward_scale 0 4 523 28 Trackball::set_forward_scale 0 1 221 435
////////////////////////////////////////////////////////////////////
//     Function: Trackball::set_forward_scale
//       Access: Published
//  Description: Changes the scale factor applied to forward and
//               backward motion.  The larger this number, the faster
//               the model will move in response to dollying in and
//               out.
////////////////////////////////////////////////////////////////////
56
void Trackball::set_forward_scale(PN_stdfloat fwdscale);

474 7 get_pos 0 4 523 18 Trackball::get_pos 0 1 222 264
////////////////////////////////////////////////////////////////////
//     Function: Trackball::get_pos
//       Access: Published
//  Description: Return the offset from the center of rotation.
////////////////////////////////////////////////////////////////////
46
LPoint3 const &Trackball::get_pos(void) const;

475 5 get_x 0 4 523 16 Trackball::get_x 0 1 223 0
41
PN_stdfloat Trackball::get_x(void) const;

476 5 get_y 0 4 523 16 Trackball::get_y 0 1 224 0
41
PN_stdfloat Trackball::get_y(void) const;

477 5 get_z 0 4 523 16 Trackball::get_z 0 1 225 0
41
PN_stdfloat Trackball::get_z(void) const;

478 7 set_pos 0 4 523 18 Trackball::set_pos 0 2 226 227 269
////////////////////////////////////////////////////////////////////
//     Function: Trackball::set_pos
//       Access: Published
//  Description: Directly set the offset from the rotational origin.
////////////////////////////////////////////////////////////////////
116
void Trackball::set_pos(LVecBase3 const &vec);
void Trackball::set_pos(PN_stdfloat x, PN_stdfloat y, PN_stdfloat z);

479 5 set_x 0 4 523 16 Trackball::set_x 0 1 228 0
37
void Trackball::set_x(PN_stdfloat x);

480 5 set_y 0 4 523 16 Trackball::set_y 0 1 229 0
37
void Trackball::set_y(PN_stdfloat y);

481 5 set_z 0 4 523 16 Trackball::set_z 0 1 230 0
37
void Trackball::set_z(PN_stdfloat z);

482 7 get_hpr 0 4 523 18 Trackball::get_hpr 0 1 231 253
////////////////////////////////////////////////////////////////////
//     Function: Trackball::get_hpr
//       Access: Published
//  Description: Return the trackball's orientation.
////////////////////////////////////////////////////////////////////
41
LVecBase3 Trackball::get_hpr(void) const;

483 5 get_h 0 4 523 16 Trackball::get_h 0 1 232 0
41
PN_stdfloat Trackball::get_h(void) const;

484 5 get_p 0 4 523 16 Trackball::get_p 0 1 233 0
41
PN_stdfloat Trackball::get_p(void) const;

485 5 get_r 0 4 523 16 Trackball::get_r 0 1 234 0
41
PN_stdfloat Trackball::get_r(void) const;

486 7 set_hpr 0 4 523 18 Trackball::set_hpr 0 2 235 236 255
////////////////////////////////////////////////////////////////////
//     Function: Trackball::set_hpr
//       Access: Published
//  Description: Directly set the mover's orientation.
////////////////////////////////////////////////////////////////////
116
void Trackball::set_hpr(LVecBase3 const &hpr);
void Trackball::set_hpr(PN_stdfloat h, PN_stdfloat p, PN_stdfloat r);

487 5 set_h 0 4 523 16 Trackball::set_h 0 1 237 0
37
void Trackball::set_h(PN_stdfloat h);

488 5 set_p 0 4 523 16 Trackball::set_p 0 1 238 0
37
void Trackball::set_p(PN_stdfloat p);

489 5 set_r 0 4 523 16 Trackball::set_r 0 1 239 0
37
void Trackball::set_r(PN_stdfloat r);

490 17 reset_origin_here 0 4 523 28 Trackball::reset_origin_here 0 1 240 396
////////////////////////////////////////////////////////////////////
//     Function: Trackball::reset_origin_here
//       Access: Published
//  Description: Reposition the center of rotation to coincide with
//               the current translation offset.  Future rotations
//               will be about the current origin.
////////////////////////////////////////////////////////////////////
40
void Trackball::reset_origin_here(void);

491 11 move_origin 0 4 523 22 Trackball::move_origin 0 1 241 271
////////////////////////////////////////////////////////////////////
//     Function: Trackball::move_origin
//       Access: Published
//  Description: Moves the center of rotation by the given amount.
////////////////////////////////////////////////////////////////////
73
void Trackball::move_origin(PN_stdfloat x, PN_stdfloat y, PN_stdfloat z);

492 10 get_origin 0 4 523 21 Trackball::get_origin 0 1 242 260
////////////////////////////////////////////////////////////////////
//     Function: Trackball::get_origin
//       Access: Published
//  Description: Returns the current center of rotation.
////////////////////////////////////////////////////////////////////
42
LPoint3 Trackball::get_origin(void) const;

493 10 set_origin 0 4 523 21 Trackball::set_origin 0 1 243 258
////////////////////////////////////////////////////////////////////
//     Function: Trackball::set_origin
//       Access: Published
//  Description: Directly sets the center of rotation.
////////////////////////////////////////////////////////////////////
52
void Trackball::set_origin(LVecBase3 const &origin);

494 16 set_control_mode 0 4 523 27 Trackball::set_control_mode 0 1 244 654
////////////////////////////////////////////////////////////////////
//     Function: Trackball::set_control_mode
//       Access: Published
//  Description: Sets the control mode.  Normally this is CM_default,
//               which means each mouse button serves its normal
//               function.  When it is CM_truck, CM_pan, CM_dolly, or
//               CM_roll, all of the mouse buttons serve the indicated
//               function instead of their normal function.  This can
//               be used in conjunction with some external way of
//               changing modes.
////////////////////////////////////////////////////////////////////
70
void Trackball::set_control_mode(Trackball::ControlMode control_mode);

495 16 get_control_mode 0 4 523 27 Trackball::get_control_mode 0 1 245 277
////////////////////////////////////////////////////////////////////
//     Function: Trackball::get_control_mode
//       Access: Published
//  Description: Returns the control mode.  See set_control_mode().
////////////////////////////////////////////////////////////////////
63
Trackball::ControlMode Trackball::get_control_mode(void) const;

496 10 set_invert 0 4 523 21 Trackball::set_invert 0 1 246 403
////////////////////////////////////////////////////////////////////
//     Function: Trackball::set_invert
//       Access: Published
//  Description: Sets the invert flag.  When this is set, the inverse
//               matrix is generated, suitable for joining to a
//               camera, instead of parenting the scene under it.
////////////////////////////////////////////////////////////////////
38
void Trackball::set_invert(bool flag);

497 10 get_invert 0 4 523 21 Trackball::get_invert 0 1 247 406
////////////////////////////////////////////////////////////////////
//     Function: Trackball::get_invert
//       Access: Published
//  Description: Returns the invert flag.  When this is set, the
//               inverse matrix is generated, suitable for joining to
//               a camera, instead of parenting the scene under it.
////////////////////////////////////////////////////////////////////
39
bool Trackball::get_invert(void) const;

498 10 set_rel_to 0 4 523 21 Trackball::set_rel_to 0 1 248 561
////////////////////////////////////////////////////////////////////
//     Function: Trackball::set_rel_to
//       Access: Published
//  Description: Sets the NodePath that all trackball manipulations
//               are to be assumed to be relative to.  For instance,
//               set your camera node here to make the trackball
//               motion camera relative.  The default is the empty
//               path, which means trackball motion is in global
//               space.
////////////////////////////////////////////////////////////////////
51
void Trackball::set_rel_to(NodePath const &rel_to);

499 10 get_rel_to 0 4 523 21 Trackball::get_rel_to 0 1 249 327
////////////////////////////////////////////////////////////////////
//     Function: Trackball::get_rel_to
//       Access: Published
//  Description: Returns the NodePath that all trackball manipulations
//               are relative to, or the empty path.
////////////////////////////////////////////////////////////////////
50
NodePath const &Trackball::get_rel_to(void) const;

500 21 set_coordinate_system 0 4 523 32 Trackball::set_coordinate_system 0 1 250 524
////////////////////////////////////////////////////////////////////
//     Function: Trackball::set_coordinate_system
//       Access: Published
//  Description: Sets the coordinate system of the Trackball.
//               Normally, this is the default coordinate system.
//               This changes the axes the Trackball manipulates so
//               that the user interface remains consistent across
//               different coordinate systems.
////////////////////////////////////////////////////////////////////
59
void Trackball::set_coordinate_system(CoordinateSystem cs);

501 21 get_coordinate_system 0 4 523 32 Trackball::get_coordinate_system 0 1 251 325
////////////////////////////////////////////////////////////////////
//     Function: Trackball::get_coordinate_system
//       Access: Published
//  Description: Returns the coordinate system of the Trackball.
//               See set_coordinate_system().
////////////////////////////////////////////////////////////////////
62
CoordinateSystem Trackball::get_coordinate_system(void) const;

502 7 set_mat 0 4 523 18 Trackball::set_mat 0 1 252 368
////////////////////////////////////////////////////////////////////
//     Function: Trackball::set_mat
//       Access: Published
//  Description: Stores the indicated transform in the trackball.
//               This is a transform in global space, regardless of
//               the rel_to node.
////////////////////////////////////////////////////////////////////
45
void Trackball::set_mat(LMatrix4 const &mat);

503 7 get_mat 0 4 523 18 Trackball::get_mat 0 1 253 292
////////////////////////////////////////////////////////////////////
//     Function: Trackball::get_mat
//       Access: Published
//  Description: Returns the matrix represented by the trackball
//               rotation.
////////////////////////////////////////////////////////////////////
47
LMatrix4 const &Trackball::get_mat(void) const;

504 13 get_trans_mat 0 4 523 24 Trackball::get_trans_mat 0 1 254 387
////////////////////////////////////////////////////////////////////
//     Function: Trackball::get_trans_mat
//       Access: Published
//  Description: Returns the actual transform that will be applied to
//               the scene graph.  This is the same as get_mat(),
//               unless invert is in effect.
////////////////////////////////////////////////////////////////////
53
LMatrix4 const &Trackball::get_trans_mat(void) const;

505 14 get_class_type 0 4 523 25 Trackball::get_class_type 0 1 255 0
50
static TypeHandle Trackball::get_class_type(void);

506 12 Transform2SG 0 4 525 26 Transform2SG::Transform2SG 0 1 256 221
////////////////////////////////////////////////////////////////////
//     Function: Transform2SG::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
47
Transform2SG::Transform2SG(string const &name);

507 8 set_node 0 4 525 22 Transform2SG::set_node 0 1 257 262
////////////////////////////////////////////////////////////////////
//     Function: Transform2SG::set_node
//       Access: Public
//  Description: Sets the node that this object will adjust.
////////////////////////////////////////////////////////////////////
45
void Transform2SG::set_node(PandaNode *node);

508 8 get_node 0 4 525 22 Transform2SG::get_node 0 1 258 324
////////////////////////////////////////////////////////////////////
//     Function: Transform2SG::get_node
//       Access: Public
//  Description: Returns the node that this object will adjust, or NULL
//               if the node has not yet been set.
////////////////////////////////////////////////////////////////////
46
PandaNode *Transform2SG::get_node(void) const;

509 14 get_class_type 0 4 525 28 Transform2SG::get_class_type 0 1 259 0
53
static TypeHandle Transform2SG::get_class_type(void);

510 13 ~Transform2SG 0 4 525 27 Transform2SG::~Transform2SG 0 0 0
34
Transform2SG::~Transform2SG(void);

259
1 0 0 7 3 527 0 0 222 ////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 name 1 526  
2 0 0 4 4 528 0 0 867 ////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::set_button_down_event
//       Access: Published
//  Description: Specifies the generic event that is generated (if
//               any) each time a key or button is depressed.  Unlike
//               the specific events that are unique to each key, this
//               same event name is used for *all* button events, and
//               the name of the button pressed (possibly with
//               modifier prefixes) will be sent as a parameter.
//
//               If this string is empty, no event is generated.  It
//               is possible to generate both generic events and
//               specific events for the same button.
//
//               See also set_keystroke_event().
//////////////////////////////////////////////////////////////////// 2 4 this 3 527  17 button_down_event 1 526  
3 0 0 6 5 526 0 0 353 ////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::get_button_down_event
//       Access: Published
//  Description: Returns the button_down_event that has been set on
//               this ButtonThrower.  See set_button_down_event().
//////////////////////////////////////////////////////////////////// 1 4 this 3 529  
4 0 0 4 6 528 0 0 391 ////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::set_button_up_event
//       Access: Published
//  Description: Specifies the generic event that is generated (if
//               any) each time a key or button is released.  See
//               set_button_down_event().
//////////////////////////////////////////////////////////////////// 2 4 this 3 527  15 button_up_event 1 526  
5 0 0 6 7 526 0 0 347 ////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::get_button_up_event
//       Access: Published
//  Description: Returns the button_up_event that has been set on
//               this ButtonThrower.  See set_button_up_event().
//////////////////////////////////////////////////////////////////// 1 4 this 3 529  
6 0 0 4 8 528 0 0 875 ////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::set_button_repeat_event
//       Access: Published
//  Description: Specifies the generic event that is generated (if
//               any) repeatedly while a key or button is held down.
//               Unlike the specific events that are unique to each
//               key, this same event name is used for *all* button
//               events, and the name of the button pressed (possibly
//               with modifier prefixes) will be sent as a parameter.
//
//               If this string is empty, no event is generated.  It
//               is possible to generate both generic events and
//               specific events for the same button.
//
//               See also set_keystroke_event().
//////////////////////////////////////////////////////////////////// 2 4 this 3 527  19 button_repeat_event 1 526  
7 0 0 6 9 526 0 0 359 ////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::get_button_repeat_event
//       Access: Published
//  Description: Returns the button_repeat_event that has been set on
//               this ButtonThrower.  See set_button_repeat_event().
//////////////////////////////////////////////////////////////////// 1 4 this 3 529  
8 0 0 4 10 528 0 0 1304 ////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::set_keystroke_event
//       Access: Published
//  Description: Specifies the event that is generated (if any) for
//               each keystroke that is received.  A keystroke is
//               different than a button event: it represents the
//               semantic meaning of the sequence of keys that have
//               been pressed.  For instance, pressing shift and 4
//               together will generate the button event "shift-4",
//               but it will generate the keystroke "$".
//
//               If a key is held down, keyrepeat will cause the same
//               keystroke event to be generated repeatedly.  This is
//               different from the corresponding down event, which
//               will only be generated once, followed by a number of
//               button repeat events.
//
//               This event is generated with a single wstring
//               parameter, which is a one-character string that
//               contains the keystroke generated.  If this event
//               string is empty, no event is generated.
//
//               See also set_button_down_event().
//////////////////////////////////////////////////////////////////// 2 4 this 3 527  15 keystroke_event 1 526  
9 0 0 6 11 526 0 0 347 ////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::get_keystroke_event
//       Access: Published
//  Description: Returns the keystroke_event that has been set on this
//               ButtonThrower.  See set_keystroke_event().
//////////////////////////////////////////////////////////////////// 1 4 this 3 529  
10 0 0 4 12 528 0 0 1252 ////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::set_candidate_event
//       Access: Published
//  Description: Specifies the event that is generated (if any) for
//               each IME candidate string event received.  Events of
//               this nature are received only when the user is
//               entering data using a Microsoft Input Method Editor,
//               typically used for Asian languages such as Japanese
//               or Korean.
//
//               If you are designing a typing user interface, you
//               should track this event to support the use of the
//               IME.  In response to this event, you should display
//               the candidate string in the entry box, with the
//               appropriate sections highlighted, so the user can
//               scroll through the available choices.
//
//               This event is generated with four parameters, in
//               order: the candidate string, the character at which
//               to start the highlight, the character at which to end
//               the highlight, and the current cursor position.
//////////////////////////////////////////////////////////////////// 2 4 this 3 527  15 candidate_event 1 526  
11 0 0 6 13 526 0 0 347 ////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::get_candidate_event
//       Access: Published
//  Description: Returns the candidate_event that has been set on this
//               ButtonThrower.  See set_candidate_event().
//////////////////////////////////////////////////////////////////// 1 4 this 3 529  
12 0 0 4 14 528 0 0 340 ////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::set_move_event
//       Access: Published
//  Description: Specifies the event that is generated (if any) each
//               time the mouse is moved within the window.
//////////////////////////////////////////////////////////////////// 2 4 this 3 527  10 move_event 1 526  
13 0 0 6 15 526 0 0 332 ////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::get_move_event
//       Access: Published
//  Description: Returns the move_event that has been set on this
//               ButtonThrower.  See set_move_event().
//////////////////////////////////////////////////////////////////// 1 4 this 3 529  
14 0 0 4 16 528 0 0 465 ////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::set_raw_button_down_event
//       Access: Published
//  Description: Like set_button_down_event, but uses the raw,
//               untransformed scan key from the operating system.
//               This uses buttons that are independent of the
//               user's selected keyboard layout.
//////////////////////////////////////////////////////////////////// 2 4 this 3 527  21 raw_button_down_event 1 526  
15 0 0 6 17 526 0 0 365 ////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::get_raw_button_down_event
//       Access: Published
//  Description: Returns the raw_button_down_event that has been set on
//               this ButtonThrower.  See set_raw_button_down_event().
//////////////////////////////////////////////////////////////////// 1 4 this 3 529  
16 0 0 4 18 528 0 0 399 ////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::set_raw_button_up_event
//       Access: Published
//  Description: Specifies the generic event that is generated (if
//               any) each time a key or button is released.  See
//               set_raw_button_down_event().
//////////////////////////////////////////////////////////////////// 2 4 this 3 527  19 raw_button_up_event 1 526  
17 0 0 6 19 526 0 0 359 ////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::get_raw_button_up_event
//       Access: Published
//  Description: Returns the raw_button_up_event that has been set on
//               this ButtonThrower.  See set_raw_button_up_event().
//////////////////////////////////////////////////////////////////// 1 4 this 3 529  
18 0 0 4 20 528 0 0 505 ////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::set_prefix
//       Access: Published
//  Description: Sets the prefix which is prepended to all specific
//               event names (that is, event names generated from the
//               button name itself, as opposed to the generic event
//               names like set_button_down_event) thrown by this
//               object.
//////////////////////////////////////////////////////////////////// 2 4 this 3 527  6 prefix 1 526  
19 0 0 6 21 526 0 0 320 ////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::get_prefix
//       Access: Published
//  Description: Returns the prefix that has been set on this
//               ButtonThrower.  See set_prefix().
//////////////////////////////////////////////////////////////////// 1 4 this 3 529  
20 0 0 4 22 528 0 0 604 ////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::set_specific_flag
//       Access: Published
//  Description: Sets the flag that indicates whether specific events
//               (events prefixed by set_prefix, and based on the
//               event name) should be generated at all.  This is true
//               by default, but may be disabled if you are only
//               interested in the generic events (for instance,
//               events like set_button_down_event).
//////////////////////////////////////////////////////////////////// 2 4 this 3 527  13 specific_flag 1 531  
21 0 0 6 23 531 0 0 351 ////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::get_specific_flag
//       Access: Published
//  Description: Returns the flag that indicates whether specific
//               events should be generated.  See set_specific_flag().
//////////////////////////////////////////////////////////////////// 1 4 this 3 529  
22 0 0 4 24 528 0 0 720 ////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::set_time_flag
//       Access: Published
//  Description: Sets the flag that indicates whether the time of the
//               button event should be passed as a parameter or not.
//               When this is true, an additional parameter is
//               generated on each event (before all the parameters
//               named by add_parameter) that consists of a single
//               double value, and reflects the time the button was
//               pressed or released, as a value from
//               ClockObject::get_global_clock().
//////////////////////////////////////////////////////////////////// 2 4 this 3 527  9 time_flag 1 531  
23 0 0 6 25 531 0 0 346 ////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::get_time_flag
//       Access: Published
//  Description: Returns the flag that indicates whether the time of
//               the button event should be passed as a parameter.
//////////////////////////////////////////////////////////////////// 1 4 this 3 529  
24 0 0 4 26 528 0 0 382 ////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::add_parameter
//       Access: Public
//  Description: Adds the indicated parameter to the list of
//               parameters that will be passed with each event
//               generated by this ButtonThrower.
//////////////////////////////////////////////////////////////////// 2 4 this 3 527  3 obj 1 532  
25 0 0 6 27 535 0 0 405 ////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::get_num_parameters
//       Access: Public
//  Description: Returns the number of parameters that have been added
//               to the list of parameters to be passed with each
//               event generated by this ButtonThrower.
//////////////////////////////////////////////////////////////////// 1 4 this 3 529  
26 0 0 7 28 536 0 0 386 ////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::get_parameter
//       Access: Public
//  Description: Returns the nth parameter that has been added to the
//               list of parameters passed with each event generated
//               by this ButtonThrower.
//////////////////////////////////////////////////////////////////// 2 4 this 3 529  1 n 1 535  
27 0 0 6 29 537 0 0 808 ////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::get_modifier_buttons
//       Access: Published
//  Description: Returns the set of ModifierButtons that the
//               ButtonThrower will consider important enough to
//               prepend the event name with.  Normally, this set will
//               be empty, and the ButtonThrower will therefore ignore
//               all ModifierButtons attached to the key events, but
//               if one or more buttons have been added to this set,
//               and those modifier buttons are set on the button
//               event, then the event name will be prepended with the
//               names of the modifier buttons.
//////////////////////////////////////////////////////////////////// 1 4 this 3 529  
28 0 0 4 30 528 0 0 1054 ////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::set_modifier_buttons
//       Access: Published
//  Description: Changes the set of ModifierButtons that the
//               ButtonThrower will consider important enough to
//               prepend the event name with.  Normally, this set will
//               be empty, and the ButtonThrower will therefore ignore
//               all ModifierButtons attached to the key events, but
//               if one or more buttons have been added to this set,
//               then the event name will be prepended with the names
//               of the modifier buttons.
//
//               It is recommended that you change this setting by
//               first calling get_modifier_buttons(), making
//               adjustments, and passing the new value to
//               set_modifier_buttons().  This way the current state
//               of the modifier buttons will not be lost.
//////////////////////////////////////////////////////////////////// 2 4 this 3 527  4 mods 1 537  
29 0 0 4 31 528 0 0 597 ////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::set_throw_buttons_active
//       Access: Published
//  Description: Sets the flag that indicates whether the
//               ButtonThrower will only process events for the
//               explicitly named buttons or not.  Normally this is
//               false, meaning all buttons are processed; set it true
//               to indicate that only some buttons should be
//               processed.  See add_throw_button().
//////////////////////////////////////////////////////////////////// 2 4 this 3 527  4 flag 1 531  
30 0 0 6 32 531 0 0 446 ////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::get_throw_buttons_active
//       Access: Published
//  Description: Returns the flag that indicates whether the
//               ButtonThrower will only process events for the
//               explicitly named buttons or not.  See
//               set_throw_buttons_active().
//////////////////////////////////////////////////////////////////// 1 4 this 3 529  
31 0 0 6 33 531 0 0 1056 ////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::add_throw_button
//       Access: Published
//  Description: Adds a new button to the set of buttons that the
//               ButtonThrower explicitly processes.
//
//               If set_throw_buttons_active is false (which is the
//               default), the ButtonThrower will process all buttons.
//               Otherwise, the ButtonThrower will only process events
//               for the button(s) explicitly named by this function;
//               buttons not on the list will be ignored by this
//               object and passed on downstream to the child node(s)
//               in the data graph.  A button that *is* on the list
//               will be processed by the ButtonThrower and not passed
//               on to the child node(s).
//
//               The return value is true if the button is added, or
//               false if it was already in the set.
//////////////////////////////////////////////////////////////////// 3 4 this 3 527  4 mods 1 537  6 button 1 540  
32 0 0 6 34 531 0 0 513 ////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::remove_throw_button
//       Access: Published
//  Description: Removes the indicated button from the set of buttons
//               that the ButtonThrower explicitly processes.  See
//               add_throw_button().
//
//               The return value is true if the button is removed, or
//               false if it was not on the set.
//////////////////////////////////////////////////////////////////// 3 4 this 3 527  4 mods 1 537  6 button 1 540  
33 0 0 6 35 531 0 0 644 ////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::has_throw_button
//       Access: Published
//  Description: Returns true if the indicated button, in conjunction
//               with any nonspecified modifier buttons, is on the set
//               of buttons that will be processed by the
//               ButtonThrower.  That is to say, returns true if this
//               button was ever passed as the second parameter
//               add_throw_button(), regardless of what the first
//               parameter was.
//////////////////////////////////////////////////////////////////// 2 4 this 3 529  6 button 1 540  
34 0 0 6 35 531 0 0 413 ////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::has_throw_button
//       Access: Published
//  Description: Returns true if the indicated button is on the set of
//               buttons that will be processed by the ButtonThrower,
//               false otherwise.  See add_throw_button().
//////////////////////////////////////////////////////////////////// 3 4 this 3 529  4 mods 1 537  6 button 1 540  
35 0 0 4 36 528 0 0 342 ////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::clear_throw_buttons
//       Access: Published
//  Description: Empties the set of buttons that were added via
//               add_throw_button().  See add_throw_button().
//////////////////////////////////////////////////////////////////// 1 4 this 3 527  
36 0 0 7 37 544 0 0 0 0 
37 0 0 4 39 528 0 0 589 ////////////////////////////////////////////////////////////////////
//     Function: MouseInterfaceNode::require_button
//       Access: Published
//  Description: Indicates that the indicated button must be in the
//               required state (either up or down) in order for this
//               particular MouseInterfaceNode to do anything.  For
//               instance, this may be called to make a Trackball
//               object respect mouse input only when the control key
//               is held down.
//////////////////////////////////////////////////////////////////// 3 4 this 3 545  6 button 1 540  7 is_down 1 531  
38 0 0 4 40 528 0 0 340 ////////////////////////////////////////////////////////////////////
//     Function: MouseInterfaceNode::clear_button
//       Access: Published
//  Description: Removes any requirement on the indicated button set
//               by an earlier call to require_button().
//////////////////////////////////////////////////////////////////// 2 4 this 3 545  6 button 1 540  
39 0 0 4 41 528 0 0 332 ////////////////////////////////////////////////////////////////////
//     Function: MouseInterfaceNode::clear_all_button
//       Access: Published
//  Description: Removes all requirements on buttons set by an earlier
//               call to require_button().
//////////////////////////////////////////////////////////////////// 1 4 this 3 545  
40 0 0 7 42 544 0 0 0 0 
41 0 0 7 44 546 0 0 226 ////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 name 1 526  
42 0 0 4 45 528 0 0 396 ////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::set_forward_speed
//       Access: Published
//  Description: Sets the speed of full forward motion, when the mouse
//               is at the very top of the window.  This is in units
//               (e.g. feet) per second.
//////////////////////////////////////////////////////////////////// 2 4 this 3 546  5 speed 1 547  
43 0 0 6 46 547 0 0 399 ////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::get_forward_speed
//       Access: Published
//  Description: Returns the speed of full forward motion, when the
//               mouse is at the very top of the window.  This is in
//               units (e.g. feet) per second.
//////////////////////////////////////////////////////////////////// 1 4 this 3 549  
44 0 0 4 47 528 0 0 399 ////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::set_reverse_speed
//       Access: Published
//  Description: Sets the speed of full reverse motion, when the mouse
//               is at the very bottom of the window.  This is in
//               units (e.g. feet) per second.
//////////////////////////////////////////////////////////////////// 2 4 this 3 546  5 speed 1 547  
45 0 0 6 48 547 0 0 402 ////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::get_reverse_speed
//       Access: Published
//  Description: Returns the speed of full reverse motion, when the
//               mouse is at the very bottom of the window.  This is
//               in units (e.g. feet) per second.
//////////////////////////////////////////////////////////////////// 1 4 this 3 549  
46 0 0 4 49 528 0 0 413 ////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::set_rotate_speed
//       Access: Published
//  Description: Sets the maximum rate at which the user can rotate
//               left or right, when the mouse is at the very edge of
//               the window.  This is in degrees per second.
//////////////////////////////////////////////////////////////////// 2 4 this 3 546  5 speed 1 547  
47 0 0 6 50 547 0 0 416 ////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::get_rotate_speed
//       Access: Published
//  Description: Returns the maximum rate at which the user can rotate
//               left or right, when the mouse is at the very edge of
//               the window.  This is in degrees per second.
//////////////////////////////////////////////////////////////////// 1 4 this 3 549  
48 0 0 4 51 528 0 0 603 ////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::set_vertical_dead_zone
//       Access: Published
//  Description: Sets the size of the horizontal bar in the center of
//               the screen that represents the "dead zone" of
//               vertical motion: the region in which the mouse does
//               not report vertical motion.  This is in a fraction of
//               the window height, so 0.5 will set a dead zone as
//               large as half the screen.
//////////////////////////////////////////////////////////////////// 2 4 this 3 546  4 zone 1 547  
49 0 0 6 52 547 0 0 606 ////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::get_vertical_dead_zone
//       Access: Published
//  Description: Returns the size of the horizontal bar in the center
//               of the screen that represents the "dead zone" of
//               vertical motion: the region in which the mouse does
//               not report vertical motion.  This is in a fraction of
//               the window height, so 0.5 will set a dead zone as
//               large as half the screen.
//////////////////////////////////////////////////////////////////// 1 4 this 3 549  
50 0 0 4 53 528 0 0 606 ////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::set_horizontal_dead_zone
//       Access: Published
//  Description: Sets the size of the vertical bar in the center of
//               the screen that represents the "dead zone" of
//               horizontal motion: the region in which the mouse does
//               not report horizontal motion.  This is in a fraction of
//               the window width, so 0.5 will set a dead zone as
//               large as half the screen.
//////////////////////////////////////////////////////////////////// 2 4 this 3 546  4 zone 1 547  
51 0 0 6 54 547 0 0 609 ////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::get_horizontal_dead_zone
//       Access: Published
//  Description: Returns the size of the vertical bar in the center
//               of the screen that represents the "dead zone" of
//               horizontal motion: the region in which the mouse does
//               not report horizontal motion.  This is in a fraction of
//               the window width, so 0.5 will set a dead zone as
//               large as half the screen.
//////////////////////////////////////////////////////////////////// 1 4 this 3 549  
52 0 0 4 55 528 0 0 431 ////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::set_vertical_ramp_up_time
//       Access: Published
//  Description: Sets the amount of time, in seconds, it takes between
//               the time an up or down arrow key is pressed and the
//               time it registers full forward or backward motion.
//////////////////////////////////////////////////////////////////// 2 4 this 3 546  12 ramp_up_time 1 547  
53 0 0 6 56 547 0 0 451 ////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::get_vertical_ramp_up_time
//       Access: Published
//  Description: Returns the amount of time, in seconds, it takes
//               between the time an up or down arrow key is pressed
//               and the time it registers full forward or backward
//               motion.
//////////////////////////////////////////////////////////////////// 1 4 this 3 549  
54 0 0 4 57 528 0 0 412 ////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::set_vertical_ramp_down_time
//       Access: Published
//  Description: Sets the amount of time, in seconds, it takes between
//               the time an up or down arrow key is released and the
//               time it registers no motion.
//////////////////////////////////////////////////////////////////// 2 4 this 3 546  14 ramp_down_time 1 547  
55 0 0 6 58 547 0 0 415 ////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::get_vertical_ramp_down_time
//       Access: Published
//  Description: Returns the amount of time, in seconds, it takes
//               between the time an up or down arrow key is released
//               and the time it registers no motion.
//////////////////////////////////////////////////////////////////// 1 4 this 3 549  
56 0 0 4 59 528 0 0 417 ////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::set_horizontal_ramp_up_time
//       Access: Published
//  Description: Sets the amount of time, in seconds, it takes between
//               the time a left or right arrow key is pressed and the
//               time it registers full rotation.
//////////////////////////////////////////////////////////////////// 2 4 this 3 546  12 ramp_up_time 1 547  
57 0 0 6 60 547 0 0 420 ////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::get_horizontal_ramp_up_time
//       Access: Published
//  Description: Returns the amount of time, in seconds, it takes
//               between the time a left or right arrow key is pressed
//               and the time it registers full rotation.
//////////////////////////////////////////////////////////////////// 1 4 this 3 549  
58 0 0 4 61 528 0 0 416 ////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::set_horizontal_ramp_down_time
//       Access: Published
//  Description: Sets the amount of time, in seconds, it takes between
//               the time a left or right arrow key is released and the
//               time it registers no motion.
//////////////////////////////////////////////////////////////////// 2 4 this 3 546  14 ramp_down_time 1 547  
59 0 0 6 62 547 0 0 419 ////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::get_horizontal_ramp_down_time
//       Access: Published
//  Description: Returns the amount of time, in seconds, it takes
//               between the time a left or right arrow key is released
//               and the time it registers no motion.
//////////////////////////////////////////////////////////////////// 1 4 this 3 549  
60 0 0 6 63 547 0 0 278 ////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::get_speed
//       Access: Published
//  Description: Returns the speed of the previous update in units/sec
//////////////////////////////////////////////////////////////////// 1 4 this 3 549  
61 0 0 6 64 547 0 0 286 ////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::get_rot_speed
//       Access: Published
//  Description: Returns the rot_speed of the previous update in units/sec
//////////////////////////////////////////////////////////////////// 1 4 this 3 549  
62 0 0 4 65 528 0 0 332 ////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::reset
//       Access: Published
//  Description: Reinitializes the driver to the origin and resets any
//               knowledge about buttons being held down.
//////////////////////////////////////////////////////////////////// 1 4 this 3 546  
63 0 0 6 66 551 0 0 253 ////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::get_pos
//       Access: Published
//  Description: Returns the driver's position.
//////////////////////////////////////////////////////////////////// 1 4 this 3 549  
64 0 0 6 67 547 0 0 0 1 4 this 3 549  
65 0 0 6 68 547 0 0 0 1 4 this 3 549  
66 0 0 6 69 547 0 0 0 1 4 this 3 549  
67 0 0 4 70 528 0 0 259 ////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::set_pos
//       Access: Published
//  Description: Directly sets the driver's position.
//////////////////////////////////////////////////////////////////// 2 4 this 3 546  3 vec 1 555  
68 0 0 4 70 528 0 0 0 4 4 this 3 546  1 x 1 547  1 y 1 547  1 z 1 547  
69 0 0 4 71 528 0 0 0 2 4 this 3 546  1 x 1 547  
70 0 0 4 72 528 0 0 0 2 4 this 3 546  1 y 1 547  
71 0 0 4 73 528 0 0 0 2 4 this 3 546  1 z 1 547  
72 0 0 6 74 555 0 0 256 ////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::get_hpr
//       Access: Published
//  Description: Returns the driver's orientation.
//////////////////////////////////////////////////////////////////// 1 4 this 3 549  
73 0 0 6 75 547 0 0 0 1 4 this 3 549  
74 0 0 6 76 547 0 0 0 1 4 this 3 549  
75 0 0 6 77 547 0 0 0 1 4 this 3 549  
76 0 0 4 78 528 0 0 262 ////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::set_hpr
//       Access: Published
//  Description: Directly sets the driver's orientation.
//////////////////////////////////////////////////////////////////// 2 4 this 3 546  3 hpr 1 555  
77 0 0 4 78 528 0 0 0 4 4 this 3 546  1 h 1 547  1 p 1 547  1 r 1 547  
78 0 0 4 79 528 0 0 0 2 4 this 3 546  1 h 1 547  
79 0 0 4 80 528 0 0 0 2 4 this 3 546  1 p 1 547  
80 0 0 4 81 528 0 0 0 2 4 this 3 546  1 r 1 547  
81 0 0 4 82 528 0 0 322 ////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::set_force_roll
//       Access: Published
//  Description: This function is no longer used and does nothing.  It
//               will be removed soon.
//////////////////////////////////////////////////////////////////// 2 4 this 3 546  10 force_roll 1 547  
82 0 0 4 83 528 0 0 736 ////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::set_ignore_mouse
//       Access: Published
//  Description: Changes the state of the ignore_mouse flag.  If this
//               flag is true, the DriveInterface will ignore mouse
//               down button events (but still recognize mouse up
//               button events); the user will not be able to start
//               the DriveInterface going again if it is stopped, but
//               if the user is currently holding down a mouse button
//               it will not stop immediately until the user
//               eventually releases the button.
//////////////////////////////////////////////////////////////////// 2 4 this 3 546  12 ignore_mouse 1 531  
83 0 0 6 84 531 0 0 326 ////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::get_ignore_mouse
//       Access: Published
//  Description: Returns the current setting of the ignore_mouse flag.
//               See set_ignore_mouse().
//////////////////////////////////////////////////////////////////// 1 4 this 3 549  
84 0 0 4 85 528 0 0 406 ////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::set_force_mouse
//       Access: Published
//  Description: Changes the state of the force_mouse flag.  If this
//               flag is true, the mouse button need not be held down
//               in order to drive the avatar around.
//////////////////////////////////////////////////////////////////// 2 4 this 3 546  11 force_mouse 1 531  
85 0 0 6 86 531 0 0 323 ////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::get_force_mouse
//       Access: Published
//  Description: Returns the current setting of the force_mouse flag.
//               See set_force_mouse().
//////////////////////////////////////////////////////////////////// 1 4 this 3 549  
86 0 0 4 87 528 0 0 649 ////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::set_stop_this_frame
//       Access: Published
//  Description: If stop_this_frame is true, the next time the frame
//               is computed no motion will be allowed, and then the
//               flag is reset to false.  This can be used to prevent
//               too much movement when we know a long time has
//               artificially elapsed, for instance when we take a
//               screenshot, without munging the clock for everything
//               else.
//////////////////////////////////////////////////////////////////// 2 4 this 3 546  15 stop_this_frame 1 531  
87 0 0 6 88 531 0 0 336 ////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::get_stop_this_frame
//       Access: Published
//  Description: Returns the current setting of the stop_this_frame
//               flag.  See set_stop_this_frame().
//////////////////////////////////////////////////////////////////// 1 4 this 3 549  
88 0 0 4 89 528 0 0 276 ////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::set_mat
//       Access: Published
//  Description: Stores the indicated transform in the DriveInterface.
//////////////////////////////////////////////////////////////////// 2 4 this 3 546  3 mat 1 559  
89 0 0 6 90 559 0 0 253 ////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::get_mat
//       Access: Published
//  Description: Returns the current transform.
//////////////////////////////////////////////////////////////////// 1 4 this 3 546  
90 0 0 4 91 528 0 0 558 ////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::force_dgraph
//       Access: Public
//  Description: This is a special kludge for DriveInterface to allow
//               us to avoid the one-frame latency after a collision.
//               It forces an immediate partial data flow for all data
//               graph nodes below this node, causing all data nodes
//               that depend on this matrix to be updated immediately.
//////////////////////////////////////////////////////////////////// 1 4 this 3 546  
91 0 0 7 92 544 0 0 0 0 
92 0 0 7 94 563 0 0 223 ////////////////////////////////////////////////////////////////////
//     Function: MouseSubregion::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 name 1 526  
93 0 0 6 95 547 0 0 379 ////////////////////////////////////////////////////////////////////
//     Function: MouseSubregion::get_left
//       Access: Published
//  Description: Retrieves the x coordinate of the left edge of the
//               rectangle within the window.  This number will be in
//               the range [0..1].
//////////////////////////////////////////////////////////////////// 1 4 this 3 564  
94 0 0 6 96 547 0 0 381 ////////////////////////////////////////////////////////////////////
//     Function: MouseSubregion::get_right
//       Access: Published
//  Description: Retrieves the x coordinate of the right edge of the
//               rectangle within the window.  This number will be in
//               the range [0..1].
//////////////////////////////////////////////////////////////////// 1 4 this 3 564  
95 0 0 6 97 547 0 0 384 ////////////////////////////////////////////////////////////////////
//     Function: MouseSubregion::get_bottom
//       Access: Published
//  Description: Retrieves the y coordinate of the bottom edge of 
//               the rectangle within the window.  This number will be
//               in the range [0..1].
//////////////////////////////////////////////////////////////////// 1 4 this 3 564  
96 0 0 6 98 547 0 0 377 ////////////////////////////////////////////////////////////////////
//     Function: MouseSubregion::get_top
//       Access: Published
//  Description: Retrieves the y coordinate of the top edge of the
//               rectangle within the window.  This number will be in
//               the range [0..1].
//////////////////////////////////////////////////////////////////// 1 4 this 3 564  
97 0 0 4 99 528 0 0 583 ////////////////////////////////////////////////////////////////////
//     Function: MouseSubregion::set_dimensions
//       Access: Published
//  Description: Changes the region of the window in which the mouse
//               is considered to be active.  The parameters are
//               identical to those for a DisplayRegion: they range
//               from 0 to 1, where 0,0 is the lower left corner and
//               1,1 is the upper right; (0, 1, 0, 1) represents the
//               whole window.
//////////////////////////////////////////////////////////////////// 5 4 this 3 563  1 l 1 547  1 r 1 547  1 b 1 547  1 t 1 547  
98 0 0 7 100 544 0 0 0 0 
99 0 0 7 108 570 374 0 230 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherRegion::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 name 1 526  5 frame 1 566  
100 0 0 7 108 570 374 0 230 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherRegion::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 5 4 name 1 526  4 left 1 547  5 right 1 547  6 bottom 1 547  3 top 1 547  
101 0 0 4 109 528 0 0 228 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherRegion::set_frame
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 570  5 frame 1 566  
102 0 0 4 109 528 0 0 228 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherRegion::set_frame
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 5 4 this 3 570  4 left 1 547  5 right 1 547  6 bottom 1 547  3 top 1 547  
103 0 0 6 110 566 0 0 228 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherRegion::get_frame
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 571  
104 0 0 6 111 547 0 0 271 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherRegion::get_area
//       Access: Published
//  Description: Returns the area of the rectangular region.
//////////////////////////////////////////////////////////////////// 1 4 this 3 571  
105 0 0 4 112 528 0 0 672 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherRegion::set_sort
//       Access: Published
//  Description: Changes the sorting order of this particular region.
//               The sorting order is used to resolve conflicts in the
//               case of overlapping region; the region with the
//               highest sort value will be preferred, and between
//               regions of the same sort value, the smallest region
//               will be preferred.  The default sorting order, if
//               none is explicitly specified, is 0.
//////////////////////////////////////////////////////////////////// 2 4 this 3 570  4 sort 1 535  
106 0 0 6 113 535 0 0 310 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherRegion::get_sort
//       Access: Published
//  Description: Returns the current sorting order of this region.
//               See set_sort().
//////////////////////////////////////////////////////////////////// 1 4 this 3 571  
107 0 0 4 114 528 0 0 515 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherRegion::set_active
//       Access: Published
//  Description: Sets whether the region is active or not.  If it is
//               not active, the MouseWatcher will never consider the
//               mouse to be over the region.  The region might still
//               receive keypress events if its set_keyboard() flag is
//               true.
//////////////////////////////////////////////////////////////////// 2 4 this 3 570  6 active 1 531  
108 0 0 6 115 531 0 0 310 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherRegion::get_active
//       Access: Published
//  Description: Returns whether the region is active or not.  See
//               set_active().
//////////////////////////////////////////////////////////////////// 1 4 this 3 571  
109 0 0 4 116 528 0 0 598 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherRegion::set_keyboard
//       Access: Published
//  Description: Sets whether the region is interested in global
//               keyboard events.  If this is true, then any keyboard
//               button events will be passed to press() and release()
//               regardless of the position of the mouse onscreen;
//               otherwise, these events will only be passed if the
//               mouse is over the region.
//////////////////////////////////////////////////////////////////// 2 4 this 3 570  8 keyboard 1 531  
110 0 0 6 117 531 0 0 336 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherRegion::get_keyboard
//       Access: Published
//  Description: Returns whether the region is interested in global
//               keyboard events; see set_keyboard().
//////////////////////////////////////////////////////////////////// 1 4 this 3 571  
111 0 0 4 119 528 0 0 725 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherRegion::set_suppress_flags
//       Access: Published
//  Description: Sets which events are suppressed when the mouse is
//               over the region.  This is the union of zero or more
//               various SF_* values.  Normally, this is 0, indicating
//               that no events are suppressed.
//
//               If you set this to a non-zero value, for instance
//               SF_mouse_position, then the mouse position will not
//               be sent along the data graph when the mouse is over
//               this particular region.
//////////////////////////////////////////////////////////////////// 2 4 this 3 570  14 suppress_flags 1 535  
112 0 0 6 120 535 0 0 317 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherRegion::get_suppress_flags
//       Access: Published
//  Description: Returns the current suppress_flags.  See
//               set_suppress_flags().
//////////////////////////////////////////////////////////////////// 1 4 this 3 571  
113 0 0 4 121 528 0 0 225 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherRegion::output
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 571  3 out 1 573  
114 0 0 4 122 528 0 0 224 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherRegion::write
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 571  3 out 1 573  12 indent_level 1 535  
115 0 0 7 123 544 0 0 0 0 
116 0 0 7 103 575 0 0 0 1 4 this 3 570  
117 0 0 7 104 570 374 0 0 1 4 this 3 575  
118 0 0 6 106 576 0 0 0 1 4 this 3 570  
119 0 0 7 107 570 374 0 0 1 4 this 3 576  
120 0 0 4 127 528 0 0 389 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherBase::add_region
//       Access: Published
//  Description: Adds the indicated region to the set of regions in
//               the group.  It is an error to add the same region to
//               the set more than once.
//////////////////////////////////////////////////////////////////// 2 4 this 3 577  6 region 1 570  
121 0 0 6 128 531 0 0 346 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherBase::has_region
//       Access: Published
//  Description: Returns true if the indicated region has already been
//               added to the MouseWatcherBase, false otherwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 578  6 region 1 570  
122 0 0 6 129 531 0 0 402 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherBase::remove_region
//       Access: Published
//  Description: Removes the indicated region from the group.
//               Returns true if it was successfully removed, or false
//               if it wasn't there in the first place.
//////////////////////////////////////////////////////////////////// 2 4 this 3 577  6 region 1 570  
123 0 0 7 130 570 374 0 416 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherBase::find_region
//       Access: Published
//  Description: Returns a pointer to the first region found with the
//               indicated name.  If multiple regions share the same
//               name, the one that is returned is indeterminate.
//////////////////////////////////////////////////////////////////// 2 4 this 3 578  4 name 1 526  
124 0 0 4 131 528 0 0 270 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherBase::clear_regions
//       Access: Published
//  Description: Removes all the regions from the group.
//////////////////////////////////////////////////////////////////// 1 4 this 3 577  
125 0 0 4 132 528 0 0 302 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherBase::sort_regions
//       Access: Published
//  Description: Sorts all the regions in this group into pointer
//               order.
//////////////////////////////////////////////////////////////////// 1 4 this 3 577  
126 0 0 6 133 531 0 0 311 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherBase::is_sorted
//       Access: Published
//  Description: Returns true if the group has already been sorted,
//               false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 578  
127 0 0 6 134 535 0 0 276 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherBase::get_num_regions
//       Access: Published
//  Description: Returns the number of regions in the group.
//////////////////////////////////////////////////////////////////// 1 4 this 3 578  
128 0 0 7 135 570 374 0 471 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherBase::get_region
//       Access: Published
//  Description: Returns the nth region of the group; returns NULL if
//               there is no nth region.  Note that this is not
//               thread-safe; another thread might have removed the
//               nth region before you called this method.
//////////////////////////////////////////////////////////////////// 2 4 this 3 578  1 n 1 535  
129 0 0 4 136 528 0 0 223 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherBase::output
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 578  3 out 1 573  
130 0 0 4 137 528 0 0 222 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherBase::write
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 578  3 out 1 573  12 indent_level 1 535  
131 0 0 4 138 528 0 0 443 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherBase::show_regions
//       Access: Published
//  Description: Enables the visualization of all of the regions
//               handled by this MouseWatcherBase.  The supplied
//               NodePath should be the root of the 2-d scene graph
//               for the window.
//////////////////////////////////////////////////////////////////// 4 4 this 3 577  8 render2d 1 580  8 bin_name 1 526  10 draw_order 1 535  
132 0 0 4 139 528 0 0 361 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherBase::set_color
//       Access: Published
//  Description: Specifies the color used to draw the region
//               rectangles for the regions visualized by
//               show_regions().
//////////////////////////////////////////////////////////////////// 2 4 this 3 577  5 color 1 583  
133 0 0 4 140 528 0 0 316 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherBase::hide_regions
//       Access: Published
//  Description: Stops the visualization created by a previous call to
//               show_regions().
//////////////////////////////////////////////////////////////////// 1 4 this 3 577  
134 0 0 4 141 528 0 0 303 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherBase::update_regions
//       Access: Published
//  Description: Refreshes the visualization created by
//               show_regions().
//////////////////////////////////////////////////////////////////// 1 4 this 3 577  
135 0 0 7 142 544 0 0 0 0 
136 0 0 7 148 587 397 0 224 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 name 1 526  
137 0 0 6 150 531 0 0 398 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::remove_region
//       Access: Published
//  Description: Removes the indicated region from the group.
//               Returns true if it was successfully removed, or false
//               if it wasn't there in the first place.
//////////////////////////////////////////////////////////////////// 2 4 this 3 587  6 region 1 570  
138 0 0 6 151 531 0 0 340 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::has_mouse
//       Access: Published
//  Description: Returns true if the mouse is anywhere within the
//               window, false otherwise.  Also see is_mouse_open().
//////////////////////////////////////////////////////////////////// 1 4 this 3 588  
139 0 0 6 152 531 0 0 473 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::is_mouse_open
//       Access: Published
//  Description: Returns true if the mouse is within the window and
//               not over some particular MouseWatcherRegion that is
//               marked to suppress mouse events; that is, that the
//               mouse is in open space within the window.
//////////////////////////////////////////////////////////////////// 1 4 this 3 588  
140 0 0 6 153 590 0 0 389 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_mouse
//       Access: Published
//  Description: It is only valid to call this if has_mouse() returns
//               true.  If so, this returns the current position of
//               the mouse within the window.
//////////////////////////////////////////////////////////////////// 1 4 this 3 588  
141 0 0 6 154 547 0 0 393 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_mouse_x
//       Access: Published
//  Description: It is only valid to call this if has_mouse() returns
//               true.  If so, this returns the current X position of
//               the mouse within the window.
//////////////////////////////////////////////////////////////////// 1 4 this 3 588  
142 0 0 6 155 547 0 0 393 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_mouse_y
//       Access: Published
//  Description: It is only valid to call this if has_mouse() returns
//               true.  If so, this returns the current Y position of
//               the mouse within the window.
//////////////////////////////////////////////////////////////////// 1 4 this 3 588  
143 0 0 4 156 528 0 0 928 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::set_frame
//       Access: Published
//  Description: Sets the frame of the MouseWatcher.  This determines
//               the coordinate space in which the MouseWatcherRegions
//               should be expected to live.  Normally, this is left
//               at -1, 1, -1, 1, which is the default setting, and
//               matches the mouse coordinate range.
//
//               Whatever values you specify here indicate the shape
//               of the full screen, and the MouseWatcherRegions will
//               be given in coordinate space matching it.  For
//               instance, if you specify (0, 1, 0, 1), then a
//               MouseWatcherRegion with the frame (0, 1, 0, .5) will
//               cover the lower half of the screen.
//////////////////////////////////////////////////////////////////// 2 4 this 3 587  5 frame 1 566  
144 0 0 4 156 528 0 0 343 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::set_frame
//       Access: Published
//  Description: Sets the frame of the MouseWatcher.  See the next
//               flavor of this method for a more verbose explanation.
//////////////////////////////////////////////////////////////////// 5 4 this 3 587  4 left 1 547  5 right 1 547  6 bottom 1 547  3 top 1 547  
145 0 0 6 157 566 0 0 296 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_frame
//       Access: Published
//  Description: Returns the frame of the MouseWatcher.  See
//               set_frame().
//////////////////////////////////////////////////////////////////// 1 4 this 3 588  
146 0 0 6 158 531 0 0 319 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::is_over_region
//       Access: Published
//  Description: Returns true if the mouse is over any rectangular
//               region, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 588  
147 0 0 6 158 531 0 0 319 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::is_over_region
//       Access: Published
//  Description: Returns true if the mouse is over any rectangular
//               region, false otherwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 588  3 pos 1 590  
148 0 0 6 158 531 0 0 319 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::is_over_region
//       Access: Published
//  Description: Returns true if the mouse is over any rectangular
//               region, false otherwise.
//////////////////////////////////////////////////////////////////// 3 4 this 3 588  1 x 1 547  1 y 1 547  
149 0 0 7 159 570 374 0 335 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_over_region
//       Access: Published
//  Description: Returns the smallest region the mouse is currently
//               over, or NULL if it is over no region.
//////////////////////////////////////////////////////////////////// 1 4 this 3 588  
150 0 0 7 159 570 374 0 513 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_over_region
//       Access: Published
//  Description: Returns the preferred region the mouse is over.  In
//               the case of overlapping regions, the region with the
//               largest sort order is preferred; if two regions have
//               the same sort order, then the smaller region is
//               preferred.
//////////////////////////////////////////////////////////////////// 2 4 this 3 588  3 pos 1 590  
151 0 0 7 159 570 374 0 335 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_over_region
//       Access: Published
//  Description: Returns the smallest region the indicated point is
//               over, or NULL if it is over no region.
//////////////////////////////////////////////////////////////////// 3 4 this 3 588  1 x 1 547  1 y 1 547  
152 0 0 6 160 531 0 0 328 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::is_button_down
//       Access: Published
//  Description: Returns true if the indicated button is currently
//               being held down, false otherwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 588  6 button 1 594  
153 0 0 4 161 528 0 0 762 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::set_button_down_pattern
//       Access: Published
//  Description: Sets the pattern string that indicates how the event
//               names are generated when a button is depressed.  This
//               is a string that may contain any of the following:
//
//                  %r  - the name of the region the mouse is over
//                  %b  - the name of the button pressed.
//
//               The event name will be based on the in_pattern
//               string specified here, with all occurrences of the
//               above strings replaced with the corresponding values.
//////////////////////////////////////////////////////////////////// 2 4 this 3 587  7 pattern 1 526  
154 0 0 6 162 526 0 0 394 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_button_down_pattern
//       Access: Published
//  Description: Returns the string that indicates how event names are
//               generated when a button is depressed.  See
//               set_button_down_pattern().
//////////////////////////////////////////////////////////////////// 1 4 this 3 588  
155 0 0 4 163 528 0 0 400 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::set_button_up_pattern
//       Access: Published
//  Description: Sets the pattern string that indicates how the event
//               names are generated when a button is released.  See
//               set_button_down_pattern().
//////////////////////////////////////////////////////////////////// 2 4 this 3 587  7 pattern 1 526  
156 0 0 6 164 526 0 0 391 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_button_up_pattern
//       Access: Published
//  Description: Returns the string that indicates how event names are
//               generated when a button is released.  See
//               set_button_down_pattern().
//////////////////////////////////////////////////////////////////// 1 4 this 3 588  
157 0 0 4 165 528 0 0 827 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::set_button_repeat_pattern
//       Access: Published
//  Description: Sets the pattern string that indicates how the event
//               names are generated when a button is continuously
//               held and generates keyrepeat "down" events.  This is
//               a string that may contain any of the following:
//
//                  %r  - the name of the region the mouse is over
//                  %b  - the name of the button pressed.
//
//               The event name will be based on the in_pattern
//               string specified here, with all occurrences of the
//               above strings replaced with the corresponding values.
//////////////////////////////////////////////////////////////////// 2 4 this 3 587  7 pattern 1 526  
158 0 0 6 166 526 0 0 471 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_button_repeat_pattern
//       Access: Published
//  Description: Returns the string that indicates how event names are
//               names are generated when a button is continuously
//               held and generates keyrepeat "down" events.  See
//               set_button_repeat_pattern().
//////////////////////////////////////////////////////////////////// 1 4 this 3 588  
159 0 0 4 167 528 0 0 584 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::set_enter_pattern
//       Access: Published
//  Description: Sets the pattern string that indicates how the event
//               names are generated when the mouse enters a region.
//               This is different from within_pattern, in that a
//               mouse is only "entered" in the topmost region at a
//               given time, while it might be "within" multiple
//               nested regions.
//////////////////////////////////////////////////////////////////// 2 4 this 3 587  7 pattern 1 526  
160 0 0 6 168 526 0 0 559 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_enter_pattern
//       Access: Published
//  Description: Returns the string that indicates how event names are
//               generated when the mouse enters a region.  This is
//               different from within_pattern, in that a mouse is
//               only "entered" in the topmost region at a given time,
//               while it might be "within" multiple nested regions.
//////////////////////////////////////////////////////////////////// 1 4 this 3 588  
161 0 0 4 169 528 0 0 585 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::set_leave_pattern
//       Access: Published
//  Description: Sets the pattern string that indicates how the event
//               names are generated when the mouse leaves a region.
//               This is different from without_pattern, in that a
//               mouse is only "entered" in the topmost region at a
//               given time, while it might be "within" multiple
//               nested regions.
//////////////////////////////////////////////////////////////////// 2 4 this 3 587  7 pattern 1 526  
162 0 0 6 170 526 0 0 560 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_leave_pattern
//       Access: Published
//  Description: Returns the string that indicates how event names are
//               generated when the mouse leaves a region.  This is
//               different from without_pattern, in that a mouse is
//               only "entered" in the topmost region at a given time,
//               while it might be "within" multiple nested regions.
//////////////////////////////////////////////////////////////////// 1 4 this 3 588  
163 0 0 4 171 528 0 0 591 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::set_within_pattern
//       Access: Published
//  Description: Sets the pattern string that indicates how the event
//               names are generated when the mouse wanders over a
//               region.  This is different from enter_pattern, in
//               that a mouse is only "entered" in the topmost region
//               at a given time, while it might be "within" multiple
//               nested regions.
//////////////////////////////////////////////////////////////////// 2 4 this 3 587  7 pattern 1 526  
164 0 0 6 172 526 0 0 565 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_within_pattern
//       Access: Published
//  Description: Returns the string that indicates how event names are
//               generated when the mouse wanders over a region.  This
//               is different from enter_pattern, in that a mouse is
//               only "entered" in the topmost region at a given time,
//               while it might be "within" multiple nested regions.
//////////////////////////////////////////////////////////////////// 1 4 this 3 588  
165 0 0 4 173 528 0 0 594 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::set_without_pattern
//       Access: Published
//  Description: Sets the pattern string that indicates how the event
//               names are generated when the mouse wanders out of a
//               region.  This is different from leave_pattern, in
//               that a mouse is only "entered" in the topmost region
//               at a given time, while it might be "within" multiple
//               nested regions.
//////////////////////////////////////////////////////////////////// 2 4 this 3 587  7 pattern 1 526  
166 0 0 6 174 526 0 0 584 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_without_pattern
//       Access: Published
//  Description: Returns the string that indicates how event names are
//               generated when the mouse wanders out of a region.
//               This is different from leave_pattern, in that a mouse
//               is only "entered" in the topmost region at a given
//               time, while it might be "within" multiple nested
//               regions.
//////////////////////////////////////////////////////////////////// 1 4 this 3 588  
167 0 0 4 175 528 0 0 553 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::set_geometry
//       Access: Published
//  Description: Sets the node that will be transformed each frame by
//               the mouse's coordinates.  It will also be hidden when
//               the mouse goes outside the window.  This can be used
//               to implement a software mouse pointer for when a
//               hardware (or system) mouse pointer is unavailable.
//////////////////////////////////////////////////////////////////// 2 4 this 3 587  4 node 1 595  
168 0 0 6 176 531 0 0 376 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::has_geometry
//       Access: Published
//  Description: Returns true if a software mouse pointer has been
//               setup via set_geometry(), or false otherwise.  See
//               set_geometry().
//////////////////////////////////////////////////////////////////// 1 4 this 3 588  
169 0 0 7 177 595 0 0 398 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_geometry
//       Access: Published
//  Description: Returns the node that has been set as the software
//               mouse pointer, or NULL if no node has been set.  See
//               has_geometry() and set_geometry().
//////////////////////////////////////////////////////////////////// 1 4 this 3 588  
170 0 0 4 178 528 0 0 308 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::clear_geometry
//       Access: Published
//  Description: Stops the use of the software cursor set up via
//               set_geometry().
//////////////////////////////////////////////////////////////////// 1 4 this 3 587  
171 0 0 4 179 528 0 0 401 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::set_extra_handler
//       Access: Published
//  Description: As an optimization for the C++ Gui, an extra handler
//               can be registered with a mouseWatcher so that events
//               can be dealt with much sooner.
//////////////////////////////////////////////////////////////////// 2 4 this 3 587  2 eh 1 597  
172 0 0 6 180 597 0 0 401 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_extra_handler
//       Access: Published
//  Description: As an optimization for the C++ Gui, an extra handler
//               can be registered with a mouseWatcher so that events
//               can be dealt with much sooner.
//////////////////////////////////////////////////////////////////// 1 4 this 3 588  
173 0 0 4 181 528 0 0 376 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::set_modifier_buttons
//       Access: Public
//  Description: Sets the buttons that should be monitored as modifier
//               buttons for generating events to the
//               MouseWatcherRegions.
//////////////////////////////////////////////////////////////////// 2 4 this 3 587  4 mods 1 537  
174 0 0 7 182 599 0 0 355 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_modifier_buttons
//       Access: Published
//  Description: Returns the set of buttons that are being monitored
//               as modifier buttons, as well as their current state.
//////////////////////////////////////////////////////////////////// 1 4 this 3 588  
175 0 0 4 183 528 0 0 743 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::set_display_region
//       Access: Published
//  Description: Constrains the MouseWatcher to watching the mouse
//               within a particular indicated region of the screen.
//               DataNodes parented under the MouseWatcher will
//               observe the mouse and keyboard events only when the
//               mouse is within the indicated region, and the
//               observed range will be from -1 .. 1 across the
//               region.
//
//               Do not delete the DisplayRegion while it is owned by
//               the MouseWatcher.
//////////////////////////////////////////////////////////////////// 2 4 this 3 587  2 dr 1 600  
176 0 0 4 184 528 0 0 398 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::clear_display_region
//       Access: Published
//  Description: Removes the display region constraint from the
//               MouseWatcher, and restores it to the default behavior
//               of watching the whole window.
//////////////////////////////////////////////////////////////////// 1 4 this 3 587  
177 0 0 7 185 600 0 0 386 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_display_region
//       Access: Published
//  Description: Returns the display region the MouseWatcher is
//               constrained to by set_display_region(), or NULL if it
//               is not constrained.
//////////////////////////////////////////////////////////////////// 1 4 this 3 588  
178 0 0 6 186 531 0 0 525 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::has_display_region
//       Access: Published
//  Description: Returns true if the MouseWatcher has been constrained
//               to a particular region of the screen via
//               set_display_region(), or false otherwise.  If this
//               returns true, get_display_region() may be used to
//               return the particular region.
//////////////////////////////////////////////////////////////////// 1 4 this 3 588  
179 0 0 6 187 531 0 0 840 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::add_group
//       Access: Published
//  Description: Adds the indicated group of regions to the set of
//               regions the MouseWatcher will monitor each frame.
//
//               Since the MouseWatcher itself inherits from
//               MouseWatcherBase, this operation is normally not
//               necessary--you can simply add the Regions you care
//               about one at a time.  Adding a complete group is
//               useful when you may want to explicitly remove the
//               regions as a group later.
//
//               Returns true if the group was successfully added, or
//               false if it was already on the list.
//////////////////////////////////////////////////////////////////// 2 4 this 3 587  5 group 1 602  
180 0 0 6 188 531 0 0 474 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::remove_group
//       Access: Published
//  Description: Removes the indicated group from the set of extra
//               groups associated with the MouseWatcher.  Returns
//               true if successful, or false if the group was already
//               removed or was never added via add_group().
//////////////////////////////////////////////////////////////////// 2 4 this 3 587  5 group 1 602  
181 0 0 6 189 531 0 0 665 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::replace_group
//       Access: Published
//  Description: Atomically removes old_group from the MouseWatcher,
//               and replaces it with new_group.  Presumably old_group
//               and new_group might have some regions in common;
//               these are handled properly.
//
//               If old_group is not already present, simply adds
//               new_group and returns false.  Otherwise, removes
//               old_group and adds new_group, and then returns true.
//////////////////////////////////////////////////////////////////// 3 4 this 3 587  9 old_group 1 602  9 new_group 1 602  
182 0 0 6 190 535 0 0 325 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_num_groups
//       Access: Published
//  Description: Returns the number of separate groups added to the
//               MouseWatcher via add_group().
//////////////////////////////////////////////////////////////////// 1 4 this 3 588  
183 0 0 7 191 602 0 0 304 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_group
//       Access: Published
//  Description: Returns the nth group added to the MouseWatcher via
//               add_group().
//////////////////////////////////////////////////////////////////// 2 4 this 3 588  1 n 1 535  
184 0 0 4 192 528 0 0 822 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::set_inactivity_timeout
//       Access: Published
//  Description: Sets an inactivity timeout on the mouse activity.
//               When this timeout (in seconds) is exceeded with no
//               keyboard or mouse activity, all currently-held
//               buttons are automatically released.  This is intended
//               to help protect against people who inadvertently (or
//               intentionally) leave a keyboard key stuck down and
//               then wander away from the keyboard.
//
//               Also, when this timeout expires, the event specified
//               by set_inactivity_timeout_event() will be generated.
//////////////////////////////////////////////////////////////////// 2 4 this 3 587  7 timeout 1 604  
185 0 0 6 193 531 0 0 321 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::has_inactivity_timeout
//       Access: Published
//  Description: Returns true if an inactivity timeout has been set,
//               false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 588  
186 0 0 6 194 604 0 0 390 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_inactivity_timeout
//       Access: Published
//  Description: Returns the inactivity timeout that has been set.
//               It is an error to call this if
//               has_inactivity_timeout() returns false.
//////////////////////////////////////////////////////////////////// 1 4 this 3 588  
187 0 0 4 195 528 0 0 399 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::clear_inactivity_timeout
//       Access: Published
//  Description: Removes the inactivity timeout and restores the
//               MouseWatcher to its default behavior of allowing a
//               key to be held indefinitely.
//////////////////////////////////////////////////////////////////// 1 4 this 3 587  
188 0 0 4 196 528 0 0 401 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::set_inactivity_timeout_event
//       Access: Published
//  Description: Specifies the event string that will be generated
//               when the inactivity timeout counter expires.  See
//               set_inactivity_timeout().
//////////////////////////////////////////////////////////////////// 2 4 this 3 587  5 event 1 526  
189 0 0 6 197 526 0 0 399 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_inactivity_timeout_event
//       Access: Published
//  Description: Returns the event string that will be generated
//               when the inactivity timeout counter expires.  See
//               set_inactivity_timeout().
//////////////////////////////////////////////////////////////////// 1 4 this 3 588  
190 0 0 7 198 607 0 0 713 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_trail_log
//       Access: Published
//  Description: Obtain the mouse trail log.  This is a PointerEventList.
//               Does not make a copy, therefore, this PointerEventList
//               will be updated each time process_events gets called.
//
//               To use trail logging, you need to enable the
//               generation of pointer events in the
//               GraphicsWindowInputDevice and set the trail log
//               duration in the MouseWatcher. Otherwise, the
//               trail log will be empty.
//////////////////////////////////////////////////////////////////// 1 4 this 3 588  
191 0 0 6 199 535 0 0 440 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::num_trail_recent
//       Access: Published
//  Description: This counter indicates how many events were added
//               to the trail log this frame.  The trail log is
//               updated once per frame, during the process_events
//               operation.  
//////////////////////////////////////////////////////////////////// 1 4 this 3 588  
192 0 0 4 200 528 0 0 468 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::set_trail_log_duration
//       Access: Published
//  Description: If the duration is nonzero, causes the MouseWatcher
//               to log the mouse's trail.  Events older than the
//               specified duration are discarded.  If the duration is
//               zero, logging is disabled.
//////////////////////////////////////////////////////////////////// 2 4 this 3 587  8 duration 1 604  
193 0 0 7 201 609 0 0 999 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_trail_node
//       Access: Published
//  Description: Returns a GeomNode that represents the mouse trail.
//               The intent is that you should reparent this GeomNode
//               to Render2D, and then forget about it.  The
//               MouseWatcher will continually update the trail node.
//               There is only one trail node, it does not create a
//               new one each time you call get_trail_node.
//
//               This is not a particularly beautiful way to render
//               a mouse trail.  It is intended more for debugging
//               purposes than for finished applications.  Even so,
//               It is suggested that you might want to apply a line
//               thickness and antialias mode to the line --- doing
//               so makes it look a lot better.
//////////////////////////////////////////////////////////////////// 1 4 this 3 587  
194 0 0 4 202 528 0 0 533 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::clear_trail_node
//       Access: Published
//  Description: If you have previously fetched the trail node
//               using get_trail_node, then the MouseWatcher is
//               continually updating the trail node every frame.
//               Using clear_trail_node causes the MouseWatcher to
//               forget the trail node and stop updating it.
//////////////////////////////////////////////////////////////////// 1 4 this 3 587  
195 0 0 4 203 528 0 0 349 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::clear_trail_log
//       Access: Published
//  Description: Clears the mouse trail log.  This does not prevent
//               further accumulation of the log given future events.
//////////////////////////////////////////////////////////////////// 1 4 this 3 587  
196 0 0 4 204 528 0 0 951 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::note_activity
//       Access: Published
//  Description: Can be used in conjunction with the inactivity
//               timeout to inform the MouseWatcher that the user has
//               just performed some action which proves he/she is
//               present.  It may be necessary to call this for
//               external events, such as joystick action, that the
//               MouseWatcher might otherwise not know about.  This
//               will reset the current inactivity timer.  When the
//               inactivity timer reaches the length of time specified
//               by set_inactivity_timeout(), with no keyboard or
//               mouse activity and no calls to note_activity(), then
//               any buttons held will be automatically released.
//////////////////////////////////////////////////////////////////// 1 4 this 3 587  
197 0 0 7 205 544 0 0 0 0 
198 0 0 7 144 610 0 0 0 1 4 this 3 587  
199 0 0 7 145 587 397 0 0 1 4 this 3 610  
200 0 0 6 146 577 0 0 0 1 4 this 3 587  
201 0 0 7 147 587 397 0 0 1 4 this 3 577  
202 0 0 6 208 531 0 0 341 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherParameter::has_button
//       Access: Published
//  Description: Returns true if this parameter has an associated
//               mouse or keyboard button, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 611  
203 0 0 7 209 594 0 0 406 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherParameter::get_button
//       Access: Published
//  Description: Returns the mouse or keyboard button associated with
//               this event.  If has_button(), above, returns false,
//               this returns ButtonHandle::none().
//////////////////////////////////////////////////////////////////// 1 4 this 3 611  
204 0 0 6 210 531 0 0 381 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherParameter::is_keyrepeat
//       Access: Published
//  Description: Returns true if the button-down even was generated
//               due to keyrepeat, or false if it was an original
//               button down.
//////////////////////////////////////////////////////////////////// 1 4 this 3 611  
205 0 0 6 211 531 0 0 325 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherParameter::has_keycode
//       Access: Published
//  Description: Returns true if this parameter has an associated
//               keycode, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 611  
206 0 0 6 212 535 0 0 355 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherParameter::get_keycode
//       Access: Published
//  Description: Returns the keycode associated with this event.  If
//               has_keycode(), above, returns false, this returns 0.
//////////////////////////////////////////////////////////////////// 1 4 this 3 611  
207 0 0 6 213 531 0 0 336 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherParameter::has_candidate
//       Access: Published
//  Description: Returns true if this parameter has an associated
//               candidate string, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 611  
208 0 0 6 214 526 0 0 415 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherParameter::get_candidate_string_encoded
//       Access: Published
//  Description: Returns the candidate string associated with this
//               event.  If has_candidate(), above, returns false,
//               this returns the empty string.
//////////////////////////////////////////////////////////////////// 1 4 this 3 611  
209 0 0 6 214 526 0 0 415 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherParameter::get_candidate_string_encoded
//       Access: Published
//  Description: Returns the candidate string associated with this
//               event.  If has_candidate(), above, returns false,
//               this returns the empty string.
//////////////////////////////////////////////////////////////////// 2 4 this 3 611  8 encoding 1 613  
210 0 0 6 215 615 0 0 323 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherParameter::get_highlight_start
//       Access: Published
//  Description: Returns the first highlighted character in the
//               candidate string.
//////////////////////////////////////////////////////////////////// 1 4 this 3 611  
211 0 0 6 216 615 0 0 334 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherParameter::get_highlight_end
//       Access: Published
//  Description: Returns one more than the last highlighted character
//               in the candidate string.
//////////////////////////////////////////////////////////////////// 1 4 this 3 611  
212 0 0 6 217 615 0 0 329 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherParameter::get_cursor_pos
//       Access: Published
//  Description: Returns the position of the user's edit cursor within
//               the candidate string.
//////////////////////////////////////////////////////////////////// 1 4 this 3 611  
213 0 0 6 218 537 0 0 352 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherParameter::get_modifier_buttons
//       Access: Published
//  Description: Returns the set of modifier buttons that were being
//               held down while the event was generated.
//////////////////////////////////////////////////////////////////// 1 4 this 3 611  
214 0 0 6 219 531 0 0 330 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherParameter::has_mouse
//       Access: Published
//  Description: Returns true if this parameter has an associated
//               mouse position, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 611  
215 0 0 6 220 590 0 0 425 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherParameter::get_mouse
//       Access: Published
//  Description: Returns the mouse position at the time the event was
//               generated, in the normalized range (-1 .. 1).  It is
//               valid to call this only if has_mouse() returned true.
//////////////////////////////////////////////////////////////////// 1 4 this 3 611  
216 0 0 6 221 531 0 0 415 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherParameter::is_outside
//       Access: Published
//  Description: Returns true if the mouse was outside the region at
//               the time the event was generated, false otherwise.
//               This is only valid for "release" type events.
//////////////////////////////////////////////////////////////////// 1 4 this 3 611  
217 0 0 4 222 528 0 0 229 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherParameter::output
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 611  3 out 1 573  
218 0 0 7 224 617 0 0 218 ////////////////////////////////////////////////////////////////////
//     Function: Trackball::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 name 1 526  
219 0 0 4 225 528 0 0 257 ////////////////////////////////////////////////////////////////////
//     Function: Trackball::reset
//       Access: Published
//  Description: Reinitializes all transforms to identity.
//////////////////////////////////////////////////////////////////// 1 4 this 3 617  
220 0 0 6 226 547 0 0 335 ////////////////////////////////////////////////////////////////////
//     Function: Trackball::get_forward_scale
//       Access: Published
//  Description: Returns the scale factor applied to forward and
//               backward motion.  See set_forward_scale().
//////////////////////////////////////////////////////////////////// 1 4 this 3 618  
221 0 0 4 227 528 0 0 435 ////////////////////////////////////////////////////////////////////
//     Function: Trackball::set_forward_scale
//       Access: Published
//  Description: Changes the scale factor applied to forward and
//               backward motion.  The larger this number, the faster
//               the model will move in response to dollying in and
//               out.
//////////////////////////////////////////////////////////////////// 2 4 this 3 617  8 fwdscale 1 547  
222 0 0 6 228 551 0 0 264 ////////////////////////////////////////////////////////////////////
//     Function: Trackball::get_pos
//       Access: Published
//  Description: Return the offset from the center of rotation.
//////////////////////////////////////////////////////////////////// 1 4 this 3 618  
223 0 0 6 229 547 0 0 0 1 4 this 3 618  
224 0 0 6 230 547 0 0 0 1 4 this 3 618  
225 0 0 6 231 547 0 0 0 1 4 this 3 618  
226 0 0 4 232 528 0 0 269 ////////////////////////////////////////////////////////////////////
//     Function: Trackball::set_pos
//       Access: Published
//  Description: Directly set the offset from the rotational origin.
//////////////////////////////////////////////////////////////////// 2 4 this 3 617  3 vec 1 555  
227 0 0 4 232 528 0 0 0 4 4 this 3 617  1 x 1 547  1 y 1 547  1 z 1 547  
228 0 0 4 233 528 0 0 0 2 4 this 3 617  1 x 1 547  
229 0 0 4 234 528 0 0 0 2 4 this 3 617  1 y 1 547  
230 0 0 4 235 528 0 0 0 2 4 this 3 617  1 z 1 547  
231 0 0 7 236 620 0 0 253 ////////////////////////////////////////////////////////////////////
//     Function: Trackball::get_hpr
//       Access: Published
//  Description: Return the trackball's orientation.
//////////////////////////////////////////////////////////////////// 1 4 this 3 618  
232 0 0 6 237 547 0 0 0 1 4 this 3 618  
233 0 0 6 238 547 0 0 0 1 4 this 3 618  
234 0 0 6 239 547 0 0 0 1 4 this 3 618  
235 0 0 4 240 528 0 0 255 ////////////////////////////////////////////////////////////////////
//     Function: Trackball::set_hpr
//       Access: Published
//  Description: Directly set the mover's orientation.
//////////////////////////////////////////////////////////////////// 2 4 this 3 617  3 hpr 1 555  
236 0 0 4 240 528 0 0 0 4 4 this 3 617  1 h 1 547  1 p 1 547  1 r 1 547  
237 0 0 4 241 528 0 0 0 2 4 this 3 617  1 h 1 547  
238 0 0 4 242 528 0 0 0 2 4 this 3 617  1 p 1 547  
239 0 0 4 243 528 0 0 0 2 4 this 3 617  1 r 1 547  
240 0 0 4 244 528 0 0 396 ////////////////////////////////////////////////////////////////////
//     Function: Trackball::reset_origin_here
//       Access: Published
//  Description: Reposition the center of rotation to coincide with
//               the current translation offset.  Future rotations
//               will be about the current origin.
//////////////////////////////////////////////////////////////////// 1 4 this 3 617  
241 0 0 4 245 528 0 0 271 ////////////////////////////////////////////////////////////////////
//     Function: Trackball::move_origin
//       Access: Published
//  Description: Moves the center of rotation by the given amount.
//////////////////////////////////////////////////////////////////// 4 4 this 3 617  1 x 1 547  1 y 1 547  1 z 1 547  
242 0 0 7 246 621 0 0 260 ////////////////////////////////////////////////////////////////////
//     Function: Trackball::get_origin
//       Access: Published
//  Description: Returns the current center of rotation.
//////////////////////////////////////////////////////////////////// 1 4 this 3 618  
243 0 0 4 247 528 0 0 258 ////////////////////////////////////////////////////////////////////
//     Function: Trackball::set_origin
//       Access: Published
//  Description: Directly sets the center of rotation.
//////////////////////////////////////////////////////////////////// 2 4 this 3 617  6 origin 1 555  
244 0 0 4 249 528 0 0 654 ////////////////////////////////////////////////////////////////////
//     Function: Trackball::set_control_mode
//       Access: Published
//  Description: Sets the control mode.  Normally this is CM_default,
//               which means each mouse button serves its normal
//               function.  When it is CM_truck, CM_pan, CM_dolly, or
//               CM_roll, all of the mouse buttons serve the indicated
//               function instead of their normal function.  This can
//               be used in conjunction with some external way of
//               changing modes.
//////////////////////////////////////////////////////////////////// 2 4 this 3 617  12 control_mode 1 524  
245 0 0 6 250 524 0 0 277 ////////////////////////////////////////////////////////////////////
//     Function: Trackball::get_control_mode
//       Access: Published
//  Description: Returns the control mode.  See set_control_mode().
//////////////////////////////////////////////////////////////////// 1 4 this 3 618  
246 0 0 4 251 528 0 0 403 ////////////////////////////////////////////////////////////////////
//     Function: Trackball::set_invert
//       Access: Published
//  Description: Sets the invert flag.  When this is set, the inverse
//               matrix is generated, suitable for joining to a
//               camera, instead of parenting the scene under it.
//////////////////////////////////////////////////////////////////// 2 4 this 3 617  4 flag 1 531  
247 0 0 6 252 531 0 0 406 ////////////////////////////////////////////////////////////////////
//     Function: Trackball::get_invert
//       Access: Published
//  Description: Returns the invert flag.  When this is set, the
//               inverse matrix is generated, suitable for joining to
//               a camera, instead of parenting the scene under it.
//////////////////////////////////////////////////////////////////// 1 4 this 3 618  
248 0 0 4 253 528 0 0 561 ////////////////////////////////////////////////////////////////////
//     Function: Trackball::set_rel_to
//       Access: Published
//  Description: Sets the NodePath that all trackball manipulations
//               are to be assumed to be relative to.  For instance,
//               set your camera node here to make the trackball
//               motion camera relative.  The default is the empty
//               path, which means trackball motion is in global
//               space.
//////////////////////////////////////////////////////////////////// 2 4 this 3 617  6 rel_to 1 580  
249 0 0 6 254 580 0 0 327 ////////////////////////////////////////////////////////////////////
//     Function: Trackball::get_rel_to
//       Access: Published
//  Description: Returns the NodePath that all trackball manipulations
//               are relative to, or the empty path.
//////////////////////////////////////////////////////////////////// 1 4 this 3 618  
250 0 0 4 255 528 0 0 524 ////////////////////////////////////////////////////////////////////
//     Function: Trackball::set_coordinate_system
//       Access: Published
//  Description: Sets the coordinate system of the Trackball.
//               Normally, this is the default coordinate system.
//               This changes the axes the Trackball manipulates so
//               that the user interface remains consistent across
//               different coordinate systems.
//////////////////////////////////////////////////////////////////// 2 4 this 3 617  2 cs 1 622  
251 0 0 6 256 622 0 0 325 ////////////////////////////////////////////////////////////////////
//     Function: Trackball::get_coordinate_system
//       Access: Published
//  Description: Returns the coordinate system of the Trackball.
//               See set_coordinate_system().
//////////////////////////////////////////////////////////////////// 1 4 this 3 618  
252 0 0 4 257 528 0 0 368 ////////////////////////////////////////////////////////////////////
//     Function: Trackball::set_mat
//       Access: Published
//  Description: Stores the indicated transform in the trackball.
//               This is a transform in global space, regardless of
//               the rel_to node.
//////////////////////////////////////////////////////////////////// 2 4 this 3 617  3 mat 1 559  
253 0 0 6 258 559 0 0 292 ////////////////////////////////////////////////////////////////////
//     Function: Trackball::get_mat
//       Access: Published
//  Description: Returns the matrix represented by the trackball
//               rotation.
//////////////////////////////////////////////////////////////////// 1 4 this 3 618  
254 0 0 6 259 559 0 0 387 ////////////////////////////////////////////////////////////////////
//     Function: Trackball::get_trans_mat
//       Access: Published
//  Description: Returns the actual transform that will be applied to
//               the scene graph.  This is the same as get_mat(),
//               unless invert is in effect.
//////////////////////////////////////////////////////////////////// 1 4 this 3 618  
255 0 0 7 260 544 0 0 0 0 
256 0 0 7 262 623 510 0 221 ////////////////////////////////////////////////////////////////////
//     Function: Transform2SG::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 name 1 526  
257 0 0 4 263 528 0 0 262 ////////////////////////////////////////////////////////////////////
//     Function: Transform2SG::set_node
//       Access: Public
//  Description: Sets the node that this object will adjust.
//////////////////////////////////////////////////////////////////// 2 4 this 3 623  4 node 1 595  
258 0 0 7 264 595 0 0 324 ////////////////////////////////////////////////////////////////////
//     Function: Transform2SG::get_node
//       Access: Public
//  Description: Returns the node that this object will adjust, or NULL
//               if the node has not yet been set.
//////////////////////////////////////////////////////////////////// 1 4 this 3 624  
259 0 0 7 265 544 0 0 0 0 
115
511 13 ButtonThrower 0 75777 13 ButtonThrower 13 ButtonThrower 0 0 0 1 260 0 0 34 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 1 626 0 1 0 512 0 0 0 0 676
////////////////////////////////////////////////////////////////////
//       Class : ButtonThrower
// Description : Throws Panda Events for button down/up events
//               generated within the data graph.
//
//               This is a DataNode which is intended to be parented
//               to the data graph below a device which is generating
//               a sequence of button events, like a MouseAndKeyboard
//               device.  It simply takes each button it finds and
//               throws a corresponding event based on the button name
//               via the throw_event() call.
////////////////////////////////////////////////////////////////////

512 8 DataNode 0 2049 8 DataNode 8 DataNode 0 0 0 0 0 0 0 0 0 0 0 0 695
////////////////////////////////////////////////////////////////////
//       Class : DataNode
// Description : The fundamental type of node for the data graph.  The
//               DataNode class is itself primarily intended as an
//               abstract class; it defines no inputs and no outputs.
//               Most kinds of data nodes will derive from this to
//               specify the inputs and outputs in the constructor.
//
//               DataNode does not attempt to cycle its data with a
//               PipelineCycler.  The data graph is intended to be
//               used only within a single thread.
////////////////////////////////////////////////////////////////////

513 18 MouseInterfaceNode 0 75777 18 MouseInterfaceNode 18 MouseInterfaceNode 0 0 0 0 0 0 4 295 296 297 298 0 0 1 0 512 0 0 0 0 488
////////////////////////////////////////////////////////////////////
//       Class : MouseInterfaceNode
// Description : This is the base class for some classes that monitor
//               the mouse and keyboard input and perform some action
//               due to their state.
//
//               It collects together some common interface; in
//               particular, the require_button() and related methods.
////////////////////////////////////////////////////////////////////

514 14 DriveInterface 0 75777 14 DriveInterface 14 DriveInterface 0 0 0 1 299 0 0 48 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 0 0 1 0 513 0 0 0 0 411
////////////////////////////////////////////////////////////////////
//       Class : DriveInterface
// Description : This is a TFormer, similar to Trackball, that moves
//               around a transform matrix in response to mouse input.
//               The basic motion is on a horizontal plane, as if
//               driving a vehicle.
////////////////////////////////////////////////////////////////////

515 14 MouseSubregion 0 75777 14 MouseSubregion 14 MouseSubregion 0 0 0 1 348 0 0 6 349 350 351 352 353 354 0 0 1 0 513 0 0 0 0 587
////////////////////////////////////////////////////////////////////
//       Class : MouseSubregion
// Description : The MouseSubregion object scales the mouse inputs
//               from within a rectangular region of the screen, as if
//               they were the full-screen inputs.
//
//               If you choose your MouseSubregion coordinates to
//               exactly match a DisplayRegion within your window, you
//               end up with a virtual mouse within your
//               DisplayRegion.
////////////////////////////////////////////////////////////////////

516 18 MouseWatcherRegion 0 141313 18 MouseWatcherRegion 18 MouseWatcherRegion 0 0 0 1 359 374 0 14 360 361 362 363 364 365 366 367 368 369 370 371 372 373 0 0 2 3 517 355 356 3 518 357 358 0 1 519 295
////////////////////////////////////////////////////////////////////
//       Class : MouseWatcherRegion
// Description : This is the class that defines a rectangular region
//               on the screen for the MouseWatcher.
////////////////////////////////////////////////////////////////////

517 27 TypedWritableReferenceCount 0 2049 27 TypedWritableReferenceCount 27 TypedWritableReferenceCount 0 0 0 0 0 0 0 0 0 0 0 0 722
////////////////////////////////////////////////////////////////////
//       Class : TypedWritableReferenceCount
// Description : A base class for things which need to inherit from
//               both TypedWritable and from ReferenceCount.  It's
//               convenient to define this intermediate base class
//               instead of multiply inheriting from the two classes
//               each time they are needed, so that we can sensibly
//               pass around pointers to things which are both
//               TypedWritables and ReferenceCounters.
//               
//               See also TypedObject for detailed instructions.
////////////////////////////////////////////////////////////////////

518 7 Namable 0 2049 7 Namable 7 Namable 0 0 0 0 0 0 0 0 0 0 0 0 324
////////////////////////////////////////////////////////////////////
//       Class : Namable
// Description : A base class for all things which can have a name.
//               The name is either empty or nonempty, but it is never
//               NULL.
////////////////////////////////////////////////////////////////////

519 13 SuppressFlags 0 794624 33 MouseWatcherRegion::SuppressFlags 33 MouseWatcherRegion::SuppressFlags 516 0 0 0 0 0 0 0 0 0 4 15 SF_mouse_button 35 MouseWatcherRegion::SF_mouse_button 0
1 15 SF_other_button 35 MouseWatcherRegion::SF_other_button 0
2 13 SF_any_button 33 MouseWatcherRegion::SF_any_button 0
3 17 SF_mouse_position 37 MouseWatcherRegion::SF_mouse_position 0
4 0 0

520 16 MouseWatcherBase 0 26625 16 MouseWatcherBase 16 MouseWatcherBase 0 0 0 0 375 0 16 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 1 627 0 0 0 0 507
////////////////////////////////////////////////////////////////////
//       Class : MouseWatcherBase
// Description : This represents a collection of MouseWatcherRegions
//               that may be managed as a group.  This is the base
//               class for both MouseWatcherGroup and MouseWatcher,
//               and exists so that we don't have to make MouseWatcher
//               inherit from ReferenceCount more than once.
////////////////////////////////////////////////////////////////////

521 12 MouseWatcher 0 26625 12 MouseWatcher 12 MouseWatcher 0 0 0 1 396 397 0 56 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 1 628 0 2 3 512 392 393 3 520 394 395 0 0 1625
////////////////////////////////////////////////////////////////////
//       Class : MouseWatcher
// Description : This TFormer maintains a list of rectangular regions
//               on the screen that are considered special mouse
//               regions; typically these will be click buttons.  When
//               the mouse passes in or out of one of these regions,
//               or when a button is clicked while the mouse is in one
//               of these regions, an event is thrown.
//
//               Mouse events may also be suppressed from the rest of
//               the datagraph in these special regions.
//
//               This class can also implement a software mouse
//               pointer by automatically generating a transform to
//               apply to a piece of geometry placed under the 2-d
//               scene graph.  It will move the geometry around
//               according to the mouse's known position.
//
//               Finally, this class can keep a record of the mouse
//               trail.  This is useful if you want to know, not just
//               where the mouse is, but the exact sequence of movements
//               it took to get there.  This information is mainly useful
//               for gesture-recognition code.  To use trail logging,
//               you need to enable the generation of pointer events
//               in the GraphicsWindowInputDevice and set the trail
//               log duration in the MouseWatcher. Otherwise, the
//               trail log will be empty.
////////////////////////////////////////////////////////////////////

522 21 MouseWatcherParameter 0 26625 21 MouseWatcherParameter 21 MouseWatcherParameter 0 0 0 0 454 0 15 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 0 0 0 0 0 353
////////////////////////////////////////////////////////////////////
//       Class : MouseWatcherParameter
// Description : This is sent along as a parameter to most events
//               generated for a region to indicate the mouse and
//               button state for the event.
////////////////////////////////////////////////////////////////////

523 9 Trackball 0 75777 9 Trackball 9 Trackball 0 0 0 1 470 0 0 35 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 0 0 1 0 513 0 0 0 1 524 702
////////////////////////////////////////////////////////////////////
//       Class : Trackball
// Description : Trackball acts like Performer in trackball mode.  It
//               can either spin around a piece of geometry directly,
//               or it can spin around a camera with the inverse
//               transform to make it appear that the whole world is
//               spinning.
//
//               The Trackball object actually just places a transform
//               in the data graph; parent a Transform2SG node under
//               it to actually transform objects (or cameras) in the
//               world.
////////////////////////////////////////////////////////////////////

524 11 ControlMode 0 794624 22 Trackball::ControlMode 22 Trackball::ControlMode 523 0 0 0 0 0 0 0 0 0 5 10 CM_default 21 Trackball::CM_default 0
0 8 CM_truck 19 Trackball::CM_truck 19
// Normally mouse 1
1 6 CM_pan 17 Trackball::CM_pan 19
// Normally mouse 2
2 8 CM_dolly 19 Trackball::CM_dolly 19
// Normally mouse 3
3 7 CM_roll 18 Trackball::CM_roll 23
// Normally mouse 2 + 3
4 0 0

525 12 Transform2SG 0 141313 12 Transform2SG 12 Transform2SG 0 0 0 1 506 510 0 3 507 508 509 0 0 1 0 512 0 0 0 0 348
////////////////////////////////////////////////////////////////////
//       Class : Transform2SG
// Description : input: Transform (matrix)
//
//               output: none, but applies the matrix as the transform
//               transition for a given arc of the scene graph.
////////////////////////////////////////////////////////////////////

526 13 atomic string 0 2 13 atomic string 13 atomic string 0 7 0 0 0 0 0 0 0 0 0 0 0

527 15 ButtonThrower * 0 8576 15 ButtonThrower * 15 ButtonThrower * 0 0 511 0 0 0 0 0 0 0 0 0 0

528 4 void 0 8194 4 void 4 void 0 6 0 0 0 0 0 0 0 0 0 0 0

529 21 ButtonThrower const * 0 8576 21 ButtonThrower const * 21 ButtonThrower const * 0 0 530 0 0 0 0 0 0 0 0 0 0

530 19 ButtonThrower const 0 8832 19 ButtonThrower const 19 ButtonThrower const 0 0 511 0 0 0 0 0 0 0 0 0 0

531 4 bool 0 8194 4 bool 4 bool 0 4 0 0 0 0 0 0 0 0 0 0 0

532 22 EventParameter const * 0 8576 22 EventParameter const * 22 EventParameter const * 0 0 533 0 0 0 0 0 0 0 0 0 0

533 20 EventParameter const 0 8832 20 EventParameter const 20 EventParameter const 0 0 534 0 0 0 0 0 0 0 0 0 0

534 14 EventParameter 0 2048 14 EventParameter 14 EventParameter 0 0 0 0 0 0 0 0 0 0 0 0 652
////////////////////////////////////////////////////////////////////
//       Class : EventParameter
// Description : An optional parameter associated with an event.  Each
//               event may have zero or more of these.  Each parameter
//               stores a pointer to a TypedWritableReferenceCount
//               object, which of course could be pretty much
//               anything.  To store a simple value like a double or a
//               string, the EventParameter constructors transparently
//               use the ParamValue template class from paramValue.h.
////////////////////////////////////////////////////////////////////

535 3 int 0 8194 3 int 3 int 0 1 0 0 0 0 0 0 0 0 0 0 0

536 16 EventParameter * 0 8576 16 EventParameter * 16 EventParameter * 0 0 534 0 0 0 0 0 0 0 0 0 0

537 23 ModifierButtons const * 0 8576 23 ModifierButtons const * 23 ModifierButtons const * 0 0 538 0 0 0 0 0 0 0 0 0 0

538 21 ModifierButtons const 0 8832 21 ModifierButtons const 21 ModifierButtons const 0 0 539 0 0 0 0 0 0 0 0 0 0

539 15 ModifierButtons 0 2048 15 ModifierButtons 15 ModifierButtons 0 0 0 0 0 0 0 1 629 0 0 0 0 343
////////////////////////////////////////////////////////////////////
//       Class : ModifierButtons
// Description : This class monitors the state of a number of
//               individual buttons and tracks whether each button is
//               known to be down or up.
////////////////////////////////////////////////////////////////////

540 20 ButtonHandle const * 0 8576 20 ButtonHandle const * 20 ButtonHandle const * 0 0 541 0 0 0 0 0 0 0 0 0 0

541 18 ButtonHandle const 0 8832 18 ButtonHandle const 18 ButtonHandle const 0 0 542 0 0 0 0 0 0 0 0 0 0

542 12 ButtonHandle 0 2048 12 ButtonHandle 12 ButtonHandle 0 0 0 0 0 0 0 0 0 0 0 0 364
////////////////////////////////////////////////////////////////////
//       Class : ButtonHandle
// Description : A ButtonHandle represents a single button from any
//               device, including keyboard buttons and mouse buttons
//               (but see KeyboardButton and MouseButton).
////////////////////////////////////////////////////////////////////

543 10 TypeHandle 0 2048 10 TypeHandle 10 TypeHandle 0 0 0 0 0 0 0 0 0 0 0 0 1098
////////////////////////////////////////////////////////////////////
//       Class : TypeHandle
// Description : TypeHandle is the identifier used to differentiate
//               C++ class types.  Any C++ classes that inherit from
//               some base class, and must be differentiated at run
//               time, should store a static TypeHandle object that
//               can be queried through a static member function
//               named get_class_type().  Most of the time, it is also
//               desirable to inherit from TypedObject, which provides
//               some virtual functions to return the TypeHandle for a
//               particular instance.
//
//               At its essence, a TypeHandle is simply a unique
//               identifier that is assigned by the TypeRegistry.  The
//               TypeRegistry stores a tree of TypeHandles, so that
//               ancestry of a particular type may be queried, and the
//               type name may be retrieved for run-time display.
////////////////////////////////////////////////////////////////////

544 12 TypeHandle * 0 8576 12 TypeHandle * 12 TypeHandle * 0 0 543 0 0 0 0 0 0 0 0 0 0

545 20 MouseInterfaceNode * 0 8576 20 MouseInterfaceNode * 20 MouseInterfaceNode * 0 0 513 0 0 0 0 0 0 0 0 0 0

546 16 DriveInterface * 0 8576 16 DriveInterface * 16 DriveInterface * 0 0 514 0 0 0 0 0 0 0 0 0 0

547 11 PN_stdfloat 0 2105344 11 PN_stdfloat 11 PN_stdfloat 0 0 548 0 0 0 0 0 0 0 0 0 0

548 5 float 0 8194 5 float 5 float 0 2 0 0 0 0 0 0 0 0 0 0 0

549 22 DriveInterface const * 0 8576 22 DriveInterface const * 22 DriveInterface const * 0 0 550 0 0 0 0 0 0 0 0 0 0

550 20 DriveInterface const 0 8832 20 DriveInterface const 20 DriveInterface const 0 0 514 0 0 0 0 0 0 0 0 0 0

551 15 LPoint3 const * 0 8576 15 LPoint3 const * 15 LPoint3 const * 0 0 552 0 0 0 0 0 0 0 0 0 0

552 13 LPoint3 const 0 8832 13 LPoint3 const 13 LPoint3 const 0 0 553 0 0 0 0 0 0 0 0 0 0

553 7 LPoint3 0 2105344 7 LPoint3 7 LPoint3 0 0 554 0 0 0 0 0 0 0 0 0 0

554 8 LPoint3f 0 2048 8 LPoint3f 8 LPoint3f 0 0 0 0 0 0 0 0 0 0 0 0 596
////////////////////////////////////////////////////////////////////
//       Class : LPoint3
// Description : This is a three-component point in space (as opposed
//               to a three-component vector, which represents a
//               direction and a distance).  Some of the methods are
//               slightly different between LPoint3 and LVector3; in
//               particular, subtraction of two points yields a
//               vector, while addition of a vector and a point yields
//               a point.
////////////////////////////////////////////////////////////////////

555 17 LVecBase3 const * 0 8576 17 LVecBase3 const * 17 LVecBase3 const * 0 0 556 0 0 0 0 0 0 0 0 0 0

556 15 LVecBase3 const 0 8832 15 LVecBase3 const 15 LVecBase3 const 0 0 557 0 0 0 0 0 0 0 0 0 0

557 9 LVecBase3 0 2105344 9 LVecBase3 9 LVecBase3 0 0 558 0 0 0 0 0 0 0 0 0 0

558 10 LVecBase3f 0 2048 10 LVecBase3f 10 LVecBase3f 0 0 0 0 0 0 0 0 0 0 0 0 265
////////////////////////////////////////////////////////////////////
//       Class : LVecBase3
// Description : This is the base class for all three-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

559 16 LMatrix4 const * 0 8576 16 LMatrix4 const * 16 LMatrix4 const * 0 0 560 0 0 0 0 0 0 0 0 0 0

560 14 LMatrix4 const 0 8832 14 LMatrix4 const 14 LMatrix4 const 0 0 561 0 0 0 0 0 0 0 0 0 0

561 8 LMatrix4 0 2105344 8 LMatrix4 8 LMatrix4 0 0 562 0 0 0 0 0 0 0 0 0 0

562 9 LMatrix4f 0 2048 9 LMatrix4f 9 LMatrix4f 0 0 0 0 0 0 0 3 630 631 632 0 0 0 0 215
////////////////////////////////////////////////////////////////////
//       Class : LMatrix4
// Description : This is a 4-by-4 transform matrix.
////////////////////////////////////////////////////////////////////

563 16 MouseSubregion * 0 8576 16 MouseSubregion * 16 MouseSubregion * 0 0 515 0 0 0 0 0 0 0 0 0 0

564 22 MouseSubregion const * 0 8576 22 MouseSubregion const * 22 MouseSubregion const * 0 0 565 0 0 0 0 0 0 0 0 0 0

565 20 MouseSubregion const 0 8832 20 MouseSubregion const 20 MouseSubregion const 0 0 515 0 0 0 0 0 0 0 0 0 0

566 17 LVecBase4 const * 0 8576 17 LVecBase4 const * 17 LVecBase4 const * 0 0 567 0 0 0 0 0 0 0 0 0 0

567 15 LVecBase4 const 0 8832 15 LVecBase4 const 15 LVecBase4 const 0 0 568 0 0 0 0 0 0 0 0 0 0

568 9 LVecBase4 0 2105344 9 LVecBase4 9 LVecBase4 0 0 569 0 0 0 0 0 0 0 0 0 0

569 10 LVecBase4f 0 2048 10 LVecBase4f 10 LVecBase4f 0 0 0 0 0 0 0 0 0 0 0 0 265
////////////////////////////////////////////////////////////////////
//       Class : LVecBase4
// Description : This is the base class for all three-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

570 20 MouseWatcherRegion * 0 8576 20 MouseWatcherRegion * 20 MouseWatcherRegion * 0 0 516 0 0 0 0 0 0 0 0 0 0

571 26 MouseWatcherRegion const * 0 8576 26 MouseWatcherRegion const * 26 MouseWatcherRegion const * 0 0 572 0 0 0 0 0 0 0 0 0 0

572 24 MouseWatcherRegion const 0 8832 24 MouseWatcherRegion const 24 MouseWatcherRegion const 0 0 516 0 0 0 0 0 0 0 0 0 0

573 9 ostream * 0 8576 9 ostream * 9 ostream * 0 0 574 0 0 0 0 0 0 0 0 0 0

574 7 ostream 0 2048 7 ostream 7 ostream 0 0 0 0 0 0 0 0 0 0 0 0 0

575 29 TypedWritableReferenceCount * 0 8576 29 TypedWritableReferenceCount * 29 TypedWritableReferenceCount * 0 0 517 0 0 0 0 0 0 0 0 0 0

576 9 Namable * 0 8576 9 Namable * 9 Namable * 0 0 518 0 0 0 0 0 0 0 0 0 0

577 18 MouseWatcherBase * 0 8576 18 MouseWatcherBase * 18 MouseWatcherBase * 0 0 520 0 0 0 0 0 0 0 0 0 0

578 24 MouseWatcherBase const * 0 8576 24 MouseWatcherBase const * 24 MouseWatcherBase const * 0 0 579 0 0 0 0 0 0 0 0 0 0

579 22 MouseWatcherBase const 0 8832 22 MouseWatcherBase const 22 MouseWatcherBase const 0 0 520 0 0 0 0 0 0 0 0 0 0

580 16 NodePath const * 0 8576 16 NodePath const * 16 NodePath const * 0 0 581 0 0 0 0 0 0 0 0 0 0

581 14 NodePath const 0 8832 14 NodePath const 14 NodePath const 0 0 582 0 0 0 0 0 0 0 0 0 0

582 8 NodePath 0 2048 8 NodePath 8 NodePath 0 0 0 0 0 0 0 2 633 634 0 0 0 0 1139
////////////////////////////////////////////////////////////////////
//       Class : NodePath
// Description : NodePath is the fundamental system for disambiguating
//               instances, and also provides a higher-level interface
//               for manipulating the scene graph.
//
//               A NodePath is a list of connected nodes from the root
//               of the graph to any sub-node.  Each NodePath
//               therefore uniquely describes one instance of a node.
//
//               NodePaths themselves are lightweight objects that may
//               easily be copied and passed by value.  Their data is
//               stored as a series of NodePathComponents that are
//               stored on the nodes.  Holding a NodePath will keep a
//               reference count to all the nodes in the path.
//               However, if any node in the path is removed or
//               reparented (perhaps through a different NodePath),
//               the NodePath will automatically be updated to reflect
//               the changes.
////////////////////////////////////////////////////////////////////

583 14 LColor const * 0 8576 14 LColor const * 14 LColor const * 0 0 584 0 0 0 0 0 0 0 0 0 0

584 12 LColor const 0 8832 12 LColor const 12 LColor const 0 0 585 0 0 0 0 0 0 0 0 0 0

585 6 LColor 0 2105344 6 LColor 6 LColor 0 0 586 0 0 0 0 0 0 0 0 0 0

586 7 LColorf 0 2105344 7 LColorf 7 LColorf 0 0 569 0 0 0 0 0 0 0 0 0 0

587 14 MouseWatcher * 0 8576 14 MouseWatcher * 14 MouseWatcher * 0 0 521 0 0 0 0 0 0 0 0 0 0

588 20 MouseWatcher const * 0 8576 20 MouseWatcher const * 20 MouseWatcher const * 0 0 589 0 0 0 0 0 0 0 0 0 0

589 18 MouseWatcher const 0 8832 18 MouseWatcher const 18 MouseWatcher const 0 0 521 0 0 0 0 0 0 0 0 0 0

590 15 LPoint2 const * 0 8576 15 LPoint2 const * 15 LPoint2 const * 0 0 591 0 0 0 0 0 0 0 0 0 0

591 13 LPoint2 const 0 8832 13 LPoint2 const 13 LPoint2 const 0 0 592 0 0 0 0 0 0 0 0 0 0

592 7 LPoint2 0 2105344 7 LPoint2 7 LPoint2 0 0 593 0 0 0 0 0 0 0 0 0 0

593 8 LPoint2f 0 2048 8 LPoint2f 8 LPoint2f 0 0 0 0 0 0 0 0 0 0 0 0 219
////////////////////////////////////////////////////////////////////
//       Class : LPoint2
// Description : This is a two-component point in space.
////////////////////////////////////////////////////////////////////

594 14 ButtonHandle * 0 8576 14 ButtonHandle * 14 ButtonHandle * 0 0 542 0 0 0 0 0 0 0 0 0 0

595 11 PandaNode * 0 8576 11 PandaNode * 11 PandaNode * 0 0 596 0 0 0 0 0 0 0 0 0 0

596 9 PandaNode 0 2048 9 PandaNode 9 PandaNode 0 0 0 0 0 0 0 3 635 636 637 0 0 0 0 374
////////////////////////////////////////////////////////////////////
//       Class : PandaNode
// Description : A basic node of the scene graph or data graph.  This
//               is the base class of all specialized nodes, and also
//               serves as a generic node with no special properties.
////////////////////////////////////////////////////////////////////

597 14 EventHandler * 0 8576 14 EventHandler * 14 EventHandler * 0 0 598 0 0 0 0 0 0 0 0 0 0

598 12 EventHandler 0 2048 12 EventHandler 12 EventHandler 0 0 0 0 0 0 0 0 0 0 0 0 678
////////////////////////////////////////////////////////////////////
//       Class : EventHandler
// Description : A class to monitor events from the C++ side of
//               things.  It maintains a set of "hooks", function
//               pointers assigned to event names, and calls the
//               appropriate hooks when the matching event is
//               detected.
//
//               This class is not necessary when the hooks are
//               detected and processed entirely by the scripting
//               language, e.g. via Scheme hooks or the messenger
//               in Python.
////////////////////////////////////////////////////////////////////

599 17 ModifierButtons * 0 8576 17 ModifierButtons * 17 ModifierButtons * 0 0 539 0 0 0 0 0 0 0 0 0 0

600 15 DisplayRegion * 0 8576 15 DisplayRegion * 15 DisplayRegion * 0 0 601 0 0 0 0 0 0 0 0 0 0

601 13 DisplayRegion 0 2048 13 DisplayRegion 13 DisplayRegion 0 0 0 0 0 0 0 0 0 0 0 0 677
////////////////////////////////////////////////////////////////////
//       Class : DisplayRegion
// Description : A rectangular subregion within a window for rendering
//               into.  Typically, there is one DisplayRegion that
//               covers the whole window, but you may also create
//               smaller DisplayRegions for having different regions
//               within the window that represent different scenes.
//               You may also stack up DisplayRegions like panes of
//               glass, usually for layering 2-d interfaces on top of
//               a 3-d scene.
////////////////////////////////////////////////////////////////////

602 19 MouseWatcherGroup * 0 8576 19 MouseWatcherGroup * 19 MouseWatcherGroup * 0 0 603 0 0 0 0 0 0 0 0 0 0

603 17 MouseWatcherGroup 0 1050624 17 MouseWatcherGroup 17 MouseWatcherGroup 0 0 0 0 0 0 0 0 0 0 0 0 439
////////////////////////////////////////////////////////////////////
//       Class : MouseWatcherGroup
// Description : This represents a collection of MouseWatcherRegions
//               that may be managed as a group.  The implementation
//               for this is in MouseWatcherBase; this class exists
//               so that we can inherit from ReferenceCount.
////////////////////////////////////////////////////////////////////

604 6 double 0 8194 6 double 6 double 0 3 0 0 0 0 0 0 0 0 0 0 0

605 22 PointerEventList const 0 8832 22 PointerEventList const 22 PointerEventList const 0 0 606 0 0 0 0 0 0 0 0 0 0

606 16 PointerEventList 0 2048 16 PointerEventList 16 PointerEventList 0 0 0 0 0 0 0 0 0 0 0 0 468
////////////////////////////////////////////////////////////////////
//       Class : PointerEventList
// Description : Records a set of pointer events that happened
//               recently.  This class is usually used only in the
//               data graph, to transmit the recent pointer presses,
//               but it may be used anywhere a list of PointerEvents
//               is desired.
////////////////////////////////////////////////////////////////////

607 24 PointerEventList const * 0 8576 24 PointerEventList const * 24 PointerEventList const * 0 0 605 0 0 0 0 0 0 0 0 0 0

608 8 GeomNode 0 2048 8 GeomNode 8 GeomNode 0 0 0 0 0 0 0 3 638 639 640 0 0 0 0 423
////////////////////////////////////////////////////////////////////
//       Class : GeomNode
// Description : A node that holds Geom objects, renderable pieces of
//               geometry.  This is the primary kind of leaf node in
//               the scene graph; almost all visible objects will be
//               contained in a GeomNode somewhere.
////////////////////////////////////////////////////////////////////

609 10 GeomNode * 0 8576 10 GeomNode * 10 GeomNode * 0 0 608 0 0 0 0 0 0 0 0 0 0

610 10 DataNode * 0 8576 10 DataNode * 10 DataNode * 0 0 512 0 0 0 0 0 0 0 0 0 0

611 29 MouseWatcherParameter const * 0 8576 29 MouseWatcherParameter const * 29 MouseWatcherParameter const * 0 0 612 0 0 0 0 0 0 0 0 0 0

612 27 MouseWatcherParameter const 0 8832 27 MouseWatcherParameter const 27 MouseWatcherParameter const 0 0 522 0 0 0 0 0 0 0 0 0 0

613 8 Encoding 0 794624 21 TextEncoder::Encoding 21 TextEncoder::Encoding 614 0 0 0 0 0 0 0 0 0 3 9 E_iso8859 22 TextEncoder::E_iso8859 0
0 6 E_utf8 19 TextEncoder::E_utf8 0
1 9 E_unicode 22 TextEncoder::E_unicode 0
2 0 0

614 11 TextEncoder 0 2048 11 TextEncoder 11 TextEncoder 0 0 0 0 0 0 0 0 0 0 0 0 676
////////////////////////////////////////////////////////////////////
//       Class : TextEncoder
// Description : This class can be used to convert text between
//               multiple representations, e.g. utf-8 to Unicode.  You
//               may use it as a static class object, passing the
//               encoding each time, or you may create an instance and
//               use that object, which will record the current
//               encoding and retain the current string.
//
//               This class is also a base class of TextNode, which
//               inherits this functionality.
////////////////////////////////////////////////////////////////////

615 6 size_t 0 2105344 6 size_t 6 size_t 0 0 616 0 0 0 0 0 0 0 0 0 0

616 17 unsigned long int 0 8214 17 unsigned long int 17 unsigned long int 0 1 0 0 0 0 0 0 0 0 0 0 0

617 11 Trackball * 0 8576 11 Trackball * 11 Trackball * 0 0 523 0 0 0 0 0 0 0 0 0 0

618 17 Trackball const * 0 8576 17 Trackball const * 17 Trackball const * 0 0 619 0 0 0 0 0 0 0 0 0 0

619 15 Trackball const 0 8832 15 Trackball const 15 Trackball const 0 0 523 0 0 0 0 0 0 0 0 0 0

620 11 LVecBase3 * 0 8576 11 LVecBase3 * 11 LVecBase3 * 0 0 557 0 0 0 0 0 0 0 0 0 0

621 9 LPoint3 * 0 8576 9 LPoint3 * 9 LPoint3 * 0 0 553 0 0 0 0 0 0 0 0 0 0

622 16 CoordinateSystem 0 532480 16 CoordinateSystem 16 CoordinateSystem 0 0 0 0 0 0 0 0 0 0 6 10 CS_default 10 CS_default 213
// The CS_default entry does not refer to a particular coordinate
// system, but rather to the value stored in
// default_coordinate_system, which in turn is loaded from the
// config variable "coordinate-system".
0 12 CS_zup_right 12 CS_zup_right 0
1 12 CS_yup_right 12 CS_yup_right 0
2 11 CS_zup_left 11 CS_zup_left 0
3 11 CS_yup_left 11 CS_yup_left 0
4 10 CS_invalid 10 CS_invalid 155
// CS_invalid is not a coordinate system at all.  It can be used in
// user-input processing code to indicate a contradictory coordinate
// system request.
5 0 0

623 14 Transform2SG * 0 8576 14 Transform2SG * 14 Transform2SG * 0 0 525 0 0 0 0 0 0 0 0 0 0

624 20 Transform2SG const * 0 8576 20 Transform2SG const * 20 Transform2SG const * 0 0 625 0 0 0 0 0 0 0 0 0 0

625 18 Transform2SG const 0 8832 18 Transform2SG const 18 Transform2SG const 0 0 525 0 0 0 0 0 0 0 0 0 0

0
0
15
626 0 0 1 14 get_parameters 18 get_num_parameters 13 get_parameter 
627 0 0 125 11 get_regions 15 get_num_regions 10 get_region 
628 0 0 143 10 get_groups 14 get_num_groups 9 get_group 
629 0 0 307 11 get_buttons 15 get_num_buttons 10 get_button 
630 0 0 392 8 get_rows 4 size 7 get_row 
631 0 0 392 8 get_cols 4 size 7 get_col 
632 0 0 392 9 get_row3s 4 size 8 get_row3 
633 0 0 455 9 get_nodes 13 get_num_nodes 8 get_node 
634 0 0 455 13 get_ancestors 13 get_num_nodes 12 get_ancestor 
635 0 0 506 11 get_parents 15 get_num_parents 10 get_parent 
636 0 0 506 12 get_children 16 get_num_children 9 get_child 
637 0 0 506 11 get_stashed 15 get_num_stashed 11 get_stashed 
638 0 0 543 9 get_geoms 13 get_num_geoms 8 get_geom 
639 0 0 543 12 modify_geoms 13 get_num_geoms 11 modify_geom 
640 0 0 543 15 get_geom_states 13 get_num_geoms 14 get_geom_state 
