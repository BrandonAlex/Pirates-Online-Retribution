1412101785
2 2
10 libp3putil 4 xqRv 12 panda3d.core 
802
856 5 clear 0 4 1660 68 PointerToBase< ReferenceCountedVector< unsigned short int > >::clear 0 1 13 0
89
inline void ::PointerToBase< ReferenceCountedVector< unsigned short int > >::clear(void);

857 6 output 0 4 1660 69 PointerToBase< ReferenceCountedVector< unsigned short int > >::output 0 1 14 0
97
void ::PointerToBase< ReferenceCountedVector< unsigned short int > >::output(ostream &out) const;

858 19 ~PointerToArrayBase 0 4 1659 61 PointerToArrayBase< unsigned short int >::~PointerToArrayBase 0 0 0
77
inline ::PointerToArrayBase< unsigned short int >::~PointerToArrayBase(void);

859 19 ConstPointerToArray 0 4 1658 62 ConstPointerToArray< unsigned short int >::ConstPointerToArray 0 3 1 2 3 0
357
inline ::ConstPointerToArray< unsigned short int >::ConstPointerToArray(PointerToArray< unsigned short int > const &copy);
inline ::ConstPointerToArray< unsigned short int >::ConstPointerToArray(ConstPointerToArray< unsigned short int > const &copy);
inline ::ConstPointerToArray< unsigned short int >::ConstPointerToArray(PyObject *self, PyObject *source);

860 4 size 0 4 1658 47 ConstPointerToArray< unsigned short int >::size 0 1 4 0
82
inline unsigned int ::ConstPointerToArray< unsigned short int >::size(void) const;

861 11 get_element 0 4 1658 54 ConstPointerToArray< unsigned short int >::get_element 0 1 5 0
112
inline unsigned short int const &::ConstPointerToArray< unsigned short int >::get_element(unsigned int n) const;

862 11 __getitem__ 0 4 1658 54 ConstPointerToArray< unsigned short int >::__getitem__ 0 1 6 0
112
inline unsigned short int const &::ConstPointerToArray< unsigned short int >::__getitem__(unsigned int n) const;

863 8 get_data 0 4 1658 51 ConstPointerToArray< unsigned short int >::get_data 0 1 7 0
94
inline basic_string< char > ::ConstPointerToArray< unsigned short int >::get_data(void) const;

864 11 get_subdata 0 4 1658 54 ConstPointerToArray< unsigned short int >::get_subdata 0 1 8 0
127
inline basic_string< char > ::ConstPointerToArray< unsigned short int >::get_subdata(unsigned int n, unsigned int count) const;

865 13 get_ref_count 0 4 1658 56 ConstPointerToArray< unsigned short int >::get_ref_count 0 1 9 0
82
inline int ::ConstPointerToArray< unsigned short int >::get_ref_count(void) const;

866 18 get_node_ref_count 0 4 1658 61 ConstPointerToArray< unsigned short int >::get_node_ref_count 0 1 10 0
87
inline int ::ConstPointerToArray< unsigned short int >::get_node_ref_count(void) const;

867 13 __getbuffer__ 0 4 1658 56 ConstPointerToArray< unsigned short int >::__getbuffer__ 0 1 11 0
113
int ::ConstPointerToArray< unsigned short int >::__getbuffer__(PyObject *self, Py_buffer *view, int flags) const;

868 17 __releasebuffer__ 0 4 1658 60 ConstPointerToArray< unsigned short int >::__releasebuffer__ 0 1 12 0
107
void ::ConstPointerToArray< unsigned short int >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

869 20 ~ConstPointerToArray 0 4 1658 63 ConstPointerToArray< unsigned short int >::~ConstPointerToArray 0 0 0
72
::ConstPointerToArray< unsigned short int >::~ConstPointerToArray(void);

870 13 DoubleBitMask 0 4 1662 59 DoubleBitMask< BitMask< unsigned int, 32 > >::DoubleBitMask 0 2 15 16 0
203
inline ::DoubleBitMask< BitMask< unsigned int, 32 > >::DoubleBitMask(void);
inline ::DoubleBitMask< BitMask< unsigned int, 32 > >::DoubleBitMask(DoubleBitMask< BitMask< unsigned int, 32 > > const &copy);

871 10 operator = 0 4 1662 56 DoubleBitMask< BitMask< unsigned int, 32 > >::operator = 0 1 17 0
170
inline DoubleBitMask< BitMask< unsigned int, 32 > > &::DoubleBitMask< BitMask< unsigned int, 32 > >::operator =(DoubleBitMask< BitMask< unsigned int, 32 > > const &copy);

872 6 all_on 0 4 1662 52 DoubleBitMask< BitMask< unsigned int, 32 > >::all_on 0 1 18 0
120
static inline DoubleBitMask< BitMask< unsigned int, 32 > > ::DoubleBitMask< BitMask< unsigned int, 32 > >::all_on(void);

873 7 all_off 0 4 1662 53 DoubleBitMask< BitMask< unsigned int, 32 > >::all_off 0 1 19 0
121
static inline DoubleBitMask< BitMask< unsigned int, 32 > > ::DoubleBitMask< BitMask< unsigned int, 32 > >::all_off(void);

874 8 lower_on 0 4 1662 54 DoubleBitMask< BitMask< unsigned int, 32 > >::lower_on 0 1 20 0
129
static inline DoubleBitMask< BitMask< unsigned int, 32 > > ::DoubleBitMask< BitMask< unsigned int, 32 > >::lower_on(int on_bits);

875 3 bit 0 4 1662 49 DoubleBitMask< BitMask< unsigned int, 32 > >::bit 0 1 21 0
122
static inline DoubleBitMask< BitMask< unsigned int, 32 > > ::DoubleBitMask< BitMask< unsigned int, 32 > >::bit(int index);

876 5 range 0 4 1662 51 DoubleBitMask< BitMask< unsigned int, 32 > >::range 0 1 22 0
136
static inline DoubleBitMask< BitMask< unsigned int, 32 > > ::DoubleBitMask< BitMask< unsigned int, 32 > >::range(int low_bit, int size);

877 14 ~DoubleBitMask 0 4 1662 60 DoubleBitMask< BitMask< unsigned int, 32 > >::~DoubleBitMask 0 0 0
76
inline ::DoubleBitMask< BitMask< unsigned int, 32 > >::~DoubleBitMask(void);

878 16 has_max_num_bits 0 4 1662 62 DoubleBitMask< BitMask< unsigned int, 32 > >::has_max_num_bits 0 1 23 0
90
static inline bool ::DoubleBitMask< BitMask< unsigned int, 32 > >::has_max_num_bits(void);

879 16 get_max_num_bits 0 4 1662 62 DoubleBitMask< BitMask< unsigned int, 32 > >::get_max_num_bits 0 1 24 0
89
static inline int ::DoubleBitMask< BitMask< unsigned int, 32 > >::get_max_num_bits(void);

880 12 get_num_bits 0 4 1662 58 DoubleBitMask< BitMask< unsigned int, 32 > >::get_num_bits 0 1 25 0
85
static inline int ::DoubleBitMask< BitMask< unsigned int, 32 > >::get_num_bits(void);

881 7 get_bit 0 4 1662 53 DoubleBitMask< BitMask< unsigned int, 32 > >::get_bit 0 1 26 0
85
inline bool ::DoubleBitMask< BitMask< unsigned int, 32 > >::get_bit(int index) const;

882 7 set_bit 0 4 1662 53 DoubleBitMask< BitMask< unsigned int, 32 > >::set_bit 0 1 27 0
79
inline void ::DoubleBitMask< BitMask< unsigned int, 32 > >::set_bit(int index);

883 9 clear_bit 0 4 1662 55 DoubleBitMask< BitMask< unsigned int, 32 > >::clear_bit 0 1 28 0
81
inline void ::DoubleBitMask< BitMask< unsigned int, 32 > >::clear_bit(int index);

884 10 set_bit_to 0 4 1662 56 DoubleBitMask< BitMask< unsigned int, 32 > >::set_bit_to 0 1 29 0
94
inline void ::DoubleBitMask< BitMask< unsigned int, 32 > >::set_bit_to(int index, bool value);

885 7 is_zero 0 4 1662 53 DoubleBitMask< BitMask< unsigned int, 32 > >::is_zero 0 1 30 0
80
inline bool ::DoubleBitMask< BitMask< unsigned int, 32 > >::is_zero(void) const;

886 9 is_all_on 0 4 1662 55 DoubleBitMask< BitMask< unsigned int, 32 > >::is_all_on 0 1 31 0
82
inline bool ::DoubleBitMask< BitMask< unsigned int, 32 > >::is_all_on(void) const;

887 7 extract 0 4 1662 53 DoubleBitMask< BitMask< unsigned int, 32 > >::extract 0 1 32 0
105
inline unsigned int ::DoubleBitMask< BitMask< unsigned int, 32 > >::extract(int low_bit, int size) const;

888 5 store 0 4 1662 51 DoubleBitMask< BitMask< unsigned int, 32 > >::store 0 1 33 0
109
inline void ::DoubleBitMask< BitMask< unsigned int, 32 > >::store(unsigned int value, int low_bit, int size);

889 10 has_any_of 0 4 1662 56 DoubleBitMask< BitMask< unsigned int, 32 > >::has_any_of 0 1 34 0
100
inline bool ::DoubleBitMask< BitMask< unsigned int, 32 > >::has_any_of(int low_bit, int size) const;

890 10 has_all_of 0 4 1662 56 DoubleBitMask< BitMask< unsigned int, 32 > >::has_all_of 0 1 35 0
100
inline bool ::DoubleBitMask< BitMask< unsigned int, 32 > >::has_all_of(int low_bit, int size) const;

891 9 set_range 0 4 1662 55 DoubleBitMask< BitMask< unsigned int, 32 > >::set_range 0 1 36 0
93
inline void ::DoubleBitMask< BitMask< unsigned int, 32 > >::set_range(int low_bit, int size);

892 11 clear_range 0 4 1662 57 DoubleBitMask< BitMask< unsigned int, 32 > >::clear_range 0 1 37 0
95
inline void ::DoubleBitMask< BitMask< unsigned int, 32 > >::clear_range(int low_bit, int size);

893 12 set_range_to 0 4 1662 58 DoubleBitMask< BitMask< unsigned int, 32 > >::set_range_to 0 1 38 0
108
inline void ::DoubleBitMask< BitMask< unsigned int, 32 > >::set_range_to(bool value, int low_bit, int size);

894 15 get_num_on_bits 0 4 1662 61 DoubleBitMask< BitMask< unsigned int, 32 > >::get_num_on_bits 0 1 39 0
87
inline int ::DoubleBitMask< BitMask< unsigned int, 32 > >::get_num_on_bits(void) const;

895 16 get_num_off_bits 0 4 1662 62 DoubleBitMask< BitMask< unsigned int, 32 > >::get_num_off_bits 0 1 40 0
88
inline int ::DoubleBitMask< BitMask< unsigned int, 32 > >::get_num_off_bits(void) const;

896 17 get_lowest_on_bit 0 4 1662 63 DoubleBitMask< BitMask< unsigned int, 32 > >::get_lowest_on_bit 0 1 41 0
89
inline int ::DoubleBitMask< BitMask< unsigned int, 32 > >::get_lowest_on_bit(void) const;

897 18 get_lowest_off_bit 0 4 1662 64 DoubleBitMask< BitMask< unsigned int, 32 > >::get_lowest_off_bit 0 1 42 0
90
inline int ::DoubleBitMask< BitMask< unsigned int, 32 > >::get_lowest_off_bit(void) const;

898 18 get_highest_on_bit 0 4 1662 64 DoubleBitMask< BitMask< unsigned int, 32 > >::get_highest_on_bit 0 1 43 0
90
inline int ::DoubleBitMask< BitMask< unsigned int, 32 > >::get_highest_on_bit(void) const;

899 19 get_highest_off_bit 0 4 1662 65 DoubleBitMask< BitMask< unsigned int, 32 > >::get_highest_off_bit 0 1 44 0
91
inline int ::DoubleBitMask< BitMask< unsigned int, 32 > >::get_highest_off_bit(void) const;

900 29 get_next_higher_different_bit 0 4 1662 75 DoubleBitMask< BitMask< unsigned int, 32 > >::get_next_higher_different_bit 0 1 45 0
108
inline int ::DoubleBitMask< BitMask< unsigned int, 32 > >::get_next_higher_different_bit(int low_bit) const;

901 15 invert_in_place 0 4 1662 61 DoubleBitMask< BitMask< unsigned int, 32 > >::invert_in_place 0 1 46 0
82
inline void ::DoubleBitMask< BitMask< unsigned int, 32 > >::invert_in_place(void);

902 18 has_bits_in_common 0 4 1662 64 DoubleBitMask< BitMask< unsigned int, 32 > >::has_bits_in_common 0 1 47 0
144
inline bool ::DoubleBitMask< BitMask< unsigned int, 32 > >::has_bits_in_common(DoubleBitMask< BitMask< unsigned int, 32 > > const &other) const;

903 5 clear 0 4 1662 51 DoubleBitMask< BitMask< unsigned int, 32 > >::clear 0 1 48 0
72
inline void ::DoubleBitMask< BitMask< unsigned int, 32 > >::clear(void);

904 6 output 0 4 1662 52 DoubleBitMask< BitMask< unsigned int, 32 > >::output 0 1 49 0
80
void ::DoubleBitMask< BitMask< unsigned int, 32 > >::output(ostream &out) const;

905 13 output_binary 0 4 1662 59 DoubleBitMask< BitMask< unsigned int, 32 > >::output_binary 0 2 50 51 0
111
void ::DoubleBitMask< BitMask< unsigned int, 32 > >::output_binary(ostream &out, int spaces_every = (4)) const;

906 10 output_hex 0 4 1662 56 DoubleBitMask< BitMask< unsigned int, 32 > >::output_hex 0 2 52 53 0
108
void ::DoubleBitMask< BitMask< unsigned int, 32 > >::output_hex(ostream &out, int spaces_every = (4)) const;

907 5 write 0 4 1662 51 DoubleBitMask< BitMask< unsigned int, 32 > >::write 0 2 54 55 0
103
void ::DoubleBitMask< BitMask< unsigned int, 32 > >::write(ostream &out, int indent_level = (0)) const;

908 11 operator == 0 4 1662 57 DoubleBitMask< BitMask< unsigned int, 32 > >::operator == 0 1 56 0
137
inline bool ::DoubleBitMask< BitMask< unsigned int, 32 > >::operator ==(DoubleBitMask< BitMask< unsigned int, 32 > > const &other) const;

909 11 operator != 0 4 1662 57 DoubleBitMask< BitMask< unsigned int, 32 > >::operator != 0 1 57 0
137
inline bool ::DoubleBitMask< BitMask< unsigned int, 32 > >::operator !=(DoubleBitMask< BitMask< unsigned int, 32 > > const &other) const;

910 10 operator < 0 4 1662 56 DoubleBitMask< BitMask< unsigned int, 32 > >::operator < 0 1 58 0
136
inline bool ::DoubleBitMask< BitMask< unsigned int, 32 > >::operator <(DoubleBitMask< BitMask< unsigned int, 32 > > const &other) const;

911 10 compare_to 0 4 1662 56 DoubleBitMask< BitMask< unsigned int, 32 > >::compare_to 0 1 59 0
135
inline int ::DoubleBitMask< BitMask< unsigned int, 32 > >::compare_to(DoubleBitMask< BitMask< unsigned int, 32 > > const &other) const;

912 10 operator & 0 4 1662 56 DoubleBitMask< BitMask< unsigned int, 32 > >::operator & 0 1 60 0
176
inline DoubleBitMask< BitMask< unsigned int, 32 > > ::DoubleBitMask< BitMask< unsigned int, 32 > >::operator &(DoubleBitMask< BitMask< unsigned int, 32 > > const &other) const;

913 10 operator | 0 4 1662 56 DoubleBitMask< BitMask< unsigned int, 32 > >::operator | 0 1 61 0
176
inline DoubleBitMask< BitMask< unsigned int, 32 > > ::DoubleBitMask< BitMask< unsigned int, 32 > >::operator |(DoubleBitMask< BitMask< unsigned int, 32 > > const &other) const;

914 10 operator ^ 0 4 1662 56 DoubleBitMask< BitMask< unsigned int, 32 > >::operator ^ 0 1 62 0
176
inline DoubleBitMask< BitMask< unsigned int, 32 > > ::DoubleBitMask< BitMask< unsigned int, 32 > >::operator ^(DoubleBitMask< BitMask< unsigned int, 32 > > const &other) const;

915 10 operator ~ 0 68 1662 56 DoubleBitMask< BitMask< unsigned int, 32 > >::operator ~ 0 1 63 0
123
inline DoubleBitMask< BitMask< unsigned int, 32 > > ::DoubleBitMask< BitMask< unsigned int, 32 > >::operator ~(void) const;

916 11 operator << 0 4 1662 57 DoubleBitMask< BitMask< unsigned int, 32 > >::operator << 0 1 64 0
129
inline DoubleBitMask< BitMask< unsigned int, 32 > > ::DoubleBitMask< BitMask< unsigned int, 32 > >::operator <<(int shift) const;

917 11 operator >> 0 4 1662 57 DoubleBitMask< BitMask< unsigned int, 32 > >::operator >> 0 1 65 0
129
inline DoubleBitMask< BitMask< unsigned int, 32 > > ::DoubleBitMask< BitMask< unsigned int, 32 > >::operator >>(int shift) const;

918 11 operator &= 0 4 1662 57 DoubleBitMask< BitMask< unsigned int, 32 > >::operator &= 0 1 66 0
131
inline void ::DoubleBitMask< BitMask< unsigned int, 32 > >::operator &=(DoubleBitMask< BitMask< unsigned int, 32 > > const &other);

919 11 operator |= 0 4 1662 57 DoubleBitMask< BitMask< unsigned int, 32 > >::operator |= 0 1 67 0
131
inline void ::DoubleBitMask< BitMask< unsigned int, 32 > >::operator |=(DoubleBitMask< BitMask< unsigned int, 32 > > const &other);

920 11 operator ^= 0 4 1662 57 DoubleBitMask< BitMask< unsigned int, 32 > >::operator ^= 0 1 68 0
131
inline void ::DoubleBitMask< BitMask< unsigned int, 32 > >::operator ^=(DoubleBitMask< BitMask< unsigned int, 32 > > const &other);

921 12 operator <<= 0 4 1662 58 DoubleBitMask< BitMask< unsigned int, 32 > >::operator <<= 0 1 69 0
84
inline void ::DoubleBitMask< BitMask< unsigned int, 32 > >::operator <<=(int shift);

922 12 operator >>= 0 4 1662 58 DoubleBitMask< BitMask< unsigned int, 32 > >::operator >>= 0 1 70 0
84
inline void ::DoubleBitMask< BitMask< unsigned int, 32 > >::operator >>=(int shift);

923 14 get_class_type 0 4 1662 60 DoubleBitMask< BitMask< unsigned int, 32 > >::get_class_type 0 1 71 0
87
static TypeHandle ::DoubleBitMask< BitMask< unsigned int, 32 > >::get_class_type(void);

924 13 DoubleBitMask 0 4 1663 76 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::DoubleBitMask 0 2 72 73 0
254
inline ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::DoubleBitMask(void);
inline ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::DoubleBitMask(DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > > const &copy);

925 10 operator = 0 4 1663 73 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::operator = 0 1 74 0
221
inline DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > > &::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::operator =(DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > > const &copy);

926 6 all_on 0 4 1663 69 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::all_on 0 1 75 0
154
static inline DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > > ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::all_on(void);

927 7 all_off 0 4 1663 70 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::all_off 0 1 76 0
155
static inline DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > > ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::all_off(void);

928 8 lower_on 0 4 1663 71 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::lower_on 0 1 77 0
163
static inline DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > > ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::lower_on(int on_bits);

929 3 bit 0 4 1663 66 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::bit 0 1 78 0
156
static inline DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > > ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::bit(int index);

930 5 range 0 4 1663 68 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::range 0 1 79 0
170
static inline DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > > ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::range(int low_bit, int size);

931 14 ~DoubleBitMask 0 4 1663 77 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::~DoubleBitMask 0 0 0
93
inline ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::~DoubleBitMask(void);

932 16 has_max_num_bits 0 4 1663 79 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::has_max_num_bits 0 1 80 0
107
static inline bool ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::has_max_num_bits(void);

933 16 get_max_num_bits 0 4 1663 79 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::get_max_num_bits 0 1 81 0
106
static inline int ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::get_max_num_bits(void);

934 12 get_num_bits 0 4 1663 75 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::get_num_bits 0 1 82 0
102
static inline int ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::get_num_bits(void);

935 7 get_bit 0 4 1663 70 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::get_bit 0 1 83 0
102
inline bool ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::get_bit(int index) const;

936 7 set_bit 0 4 1663 70 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::set_bit 0 1 84 0
96
inline void ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::set_bit(int index);

937 9 clear_bit 0 4 1663 72 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::clear_bit 0 1 85 0
98
inline void ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::clear_bit(int index);

938 10 set_bit_to 0 4 1663 73 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::set_bit_to 0 1 86 0
111
inline void ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::set_bit_to(int index, bool value);

939 7 is_zero 0 4 1663 70 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::is_zero 0 1 87 0
97
inline bool ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::is_zero(void) const;

940 9 is_all_on 0 4 1663 72 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::is_all_on 0 1 88 0
99
inline bool ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::is_all_on(void) const;

941 7 extract 0 4 1663 70 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::extract 0 1 89 0
122
inline unsigned int ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::extract(int low_bit, int size) const;

942 5 store 0 4 1663 68 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::store 0 1 90 0
126
inline void ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::store(unsigned int value, int low_bit, int size);

943 10 has_any_of 0 4 1663 73 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::has_any_of 0 1 91 0
117
inline bool ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::has_any_of(int low_bit, int size) const;

944 10 has_all_of 0 4 1663 73 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::has_all_of 0 1 92 0
117
inline bool ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::has_all_of(int low_bit, int size) const;

945 9 set_range 0 4 1663 72 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::set_range 0 1 93 0
110
inline void ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::set_range(int low_bit, int size);

946 11 clear_range 0 4 1663 74 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::clear_range 0 1 94 0
112
inline void ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::clear_range(int low_bit, int size);

947 12 set_range_to 0 4 1663 75 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::set_range_to 0 1 95 0
125
inline void ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::set_range_to(bool value, int low_bit, int size);

948 15 get_num_on_bits 0 4 1663 78 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::get_num_on_bits 0 1 96 0
104
inline int ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::get_num_on_bits(void) const;

949 16 get_num_off_bits 0 4 1663 79 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::get_num_off_bits 0 1 97 0
105
inline int ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::get_num_off_bits(void) const;

950 17 get_lowest_on_bit 0 4 1663 80 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::get_lowest_on_bit 0 1 98 0
106
inline int ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::get_lowest_on_bit(void) const;

951 18 get_lowest_off_bit 0 4 1663 81 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::get_lowest_off_bit 0 1 99 0
107
inline int ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::get_lowest_off_bit(void) const;

952 18 get_highest_on_bit 0 4 1663 81 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::get_highest_on_bit 0 1 100 0
107
inline int ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::get_highest_on_bit(void) const;

953 19 get_highest_off_bit 0 4 1663 82 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::get_highest_off_bit 0 1 101 0
108
inline int ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::get_highest_off_bit(void) const;

954 29 get_next_higher_different_bit 0 4 1663 92 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::get_next_higher_different_bit 0 1 102 0
125
inline int ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::get_next_higher_different_bit(int low_bit) const;

955 15 invert_in_place 0 4 1663 78 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::invert_in_place 0 1 103 0
99
inline void ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::invert_in_place(void);

956 18 has_bits_in_common 0 4 1663 81 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::has_bits_in_common 0 1 104 0
178
inline bool ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::has_bits_in_common(DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > > const &other) const;

957 5 clear 0 4 1663 68 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::clear 0 1 105 0
89
inline void ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::clear(void);

958 6 output 0 4 1663 69 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::output 0 1 106 0
97
void ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::output(ostream &out) const;

959 13 output_binary 0 4 1663 76 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::output_binary 0 2 107 108 0
128
void ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::output_binary(ostream &out, int spaces_every = (4)) const;

960 10 output_hex 0 4 1663 73 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::output_hex 0 2 109 110 0
125
void ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::output_hex(ostream &out, int spaces_every = (4)) const;

961 5 write 0 4 1663 68 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::write 0 2 111 112 0
120
void ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::write(ostream &out, int indent_level = (0)) const;

962 11 operator == 0 4 1663 74 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::operator == 0 1 113 0
171
inline bool ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::operator ==(DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > > const &other) const;

963 11 operator != 0 4 1663 74 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::operator != 0 1 114 0
171
inline bool ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::operator !=(DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > > const &other) const;

964 10 operator < 0 4 1663 73 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::operator < 0 1 115 0
170
inline bool ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::operator <(DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > > const &other) const;

965 10 compare_to 0 4 1663 73 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::compare_to 0 1 116 0
169
inline int ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::compare_to(DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > > const &other) const;

966 10 operator & 0 4 1663 73 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::operator & 0 1 117 0
227
inline DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > > ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::operator &(DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > > const &other) const;

967 10 operator | 0 4 1663 73 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::operator | 0 1 118 0
227
inline DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > > ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::operator |(DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > > const &other) const;

968 10 operator ^ 0 4 1663 73 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::operator ^ 0 1 119 0
227
inline DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > > ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::operator ^(DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > > const &other) const;

969 10 operator ~ 0 68 1663 73 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::operator ~ 0 1 120 0
157
inline DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > > ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::operator ~(void) const;

970 11 operator << 0 4 1663 74 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::operator << 0 1 121 0
163
inline DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > > ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::operator <<(int shift) const;

971 11 operator >> 0 4 1663 74 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::operator >> 0 1 122 0
163
inline DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > > ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::operator >>(int shift) const;

972 11 operator &= 0 4 1663 74 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::operator &= 0 1 123 0
165
inline void ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::operator &=(DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > > const &other);

973 11 operator |= 0 4 1663 74 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::operator |= 0 1 124 0
165
inline void ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::operator |=(DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > > const &other);

974 11 operator ^= 0 4 1663 74 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::operator ^= 0 1 125 0
165
inline void ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::operator ^=(DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > > const &other);

975 12 operator <<= 0 4 1663 75 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::operator <<= 0 1 126 0
101
inline void ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::operator <<=(int shift);

976 12 operator >>= 0 4 1663 75 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::operator >>= 0 1 127 0
101
inline void ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::operator >>=(int shift);

977 14 get_class_type 0 4 1663 77 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::get_class_type 0 1 128 0
104
static TypeHandle ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::get_class_type(void);

978 14 PointerToArray 0 4 1664 52 PointerToArray< unsigned short int >::PointerToArray 0 4 129 130 131 132 0
345
inline ::PointerToArray< unsigned short int >::PointerToArray(TypeHandle type_handle = ((_get_type_handle((unsigned short int const *)(0)))));
inline ::PointerToArray< unsigned short int >::PointerToArray(PointerToArray< unsigned short int > const &copy);
::PointerToArray< unsigned short int >::PointerToArray(PyObject *self, PyObject *source);

979 11 empty_array 0 4 1664 49 PointerToArray< unsigned short int >::empty_array 0 2 133 134 0
199
static inline PointerToArray< unsigned short int > ::PointerToArray< unsigned short int >::empty_array(unsigned int n, TypeHandle type_handle = ((_get_type_handle((unsigned short int const *)(0)))));

980 4 size 0 4 1664 42 PointerToArray< unsigned short int >::size 0 1 135 0
77
inline unsigned int ::PointerToArray< unsigned short int >::size(void) const;

981 9 push_back 0 4 1664 47 PointerToArray< unsigned short int >::push_back 0 1 136 0
91
inline void ::PointerToArray< unsigned short int >::push_back(unsigned short int const &x);

982 8 pop_back 0 4 1664 46 PointerToArray< unsigned short int >::pop_back 0 1 137 0
67
inline void ::PointerToArray< unsigned short int >::pop_back(void);

983 11 get_element 0 4 1664 49 PointerToArray< unsigned short int >::get_element 0 1 138 0
107
inline unsigned short int const &::PointerToArray< unsigned short int >::get_element(unsigned int n) const;

984 11 set_element 0 4 1664 49 PointerToArray< unsigned short int >::set_element 0 1 139 0
113
inline void ::PointerToArray< unsigned short int >::set_element(unsigned int n, unsigned short int const &value);

985 11 __getitem__ 0 4 1664 49 PointerToArray< unsigned short int >::__getitem__ 0 1 140 0
107
inline unsigned short int const &::PointerToArray< unsigned short int >::__getitem__(unsigned int n) const;

986 11 __setitem__ 0 4 1664 49 PointerToArray< unsigned short int >::__setitem__ 0 1 141 0
113
inline void ::PointerToArray< unsigned short int >::__setitem__(unsigned int n, unsigned short int const &value);

987 8 get_data 0 4 1664 46 PointerToArray< unsigned short int >::get_data 0 1 142 0
89
inline basic_string< char > ::PointerToArray< unsigned short int >::get_data(void) const;

988 8 set_data 0 4 1664 46 PointerToArray< unsigned short int >::set_data 0 1 143 0
95
inline void ::PointerToArray< unsigned short int >::set_data(basic_string< char > const &data);

989 11 get_subdata 0 4 1664 49 PointerToArray< unsigned short int >::get_subdata 0 1 144 0
122
inline basic_string< char > ::PointerToArray< unsigned short int >::get_subdata(unsigned int n, unsigned int count) const;

990 11 set_subdata 0 4 1664 49 PointerToArray< unsigned short int >::set_subdata 0 1 145 0
134
inline void ::PointerToArray< unsigned short int >::set_subdata(unsigned int n, unsigned int count, basic_string< char > const &data);

991 13 get_ref_count 0 4 1664 51 PointerToArray< unsigned short int >::get_ref_count 0 1 146 0
77
inline int ::PointerToArray< unsigned short int >::get_ref_count(void) const;

992 18 get_node_ref_count 0 4 1664 56 PointerToArray< unsigned short int >::get_node_ref_count 0 1 147 0
82
inline int ::PointerToArray< unsigned short int >::get_node_ref_count(void) const;

993 13 __getbuffer__ 0 4 1664 51 PointerToArray< unsigned short int >::__getbuffer__ 0 1 148 0
102
int ::PointerToArray< unsigned short int >::__getbuffer__(PyObject *self, Py_buffer *view, int flags);

994 17 __releasebuffer__ 0 4 1664 55 PointerToArray< unsigned short int >::__releasebuffer__ 0 1 149 0
102
void ::PointerToArray< unsigned short int >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

995 15 ~PointerToArray 0 4 1664 53 PointerToArray< unsigned short int >::~PointerToArray 0 0 0
62
::PointerToArray< unsigned short int >::~PointerToArray(void);

996 14 ~AnimInterface 0 6 1666 29 AnimInterface::~AnimInterface 0 0 233
////////////////////////////////////////////////////////////////////
//     Function: AnimInterface::Destructor
//       Access: Published, Virtual
//  Description:
////////////////////////////////////////////////////////////////////
44
virtual AnimInterface::~AnimInterface(void);

997 4 play 0 4 1666 19 AnimInterface::play 0 2 150 151 1521
// Filename: animInterface.I
// Created by:  drose (20Sep05)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: AnimInterface::play
//       Access: Published
//  Description: Runs the entire animation from beginning to end and
//               stops.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: AnimInterface::play
//       Access: Published
//  Description: Runs the animation from the frame "from" to and
//               including the frame "to", at which point the
//               animation is stopped.  Both "from" and "to" frame
//               numbers may be outside the range (0,
//               get_num_frames()) and the animation will follow the
//               range correctly, reporting numbers modulo
//               get_num_frames().  For instance, play(0,
//               get_num_frames() * 2) will play the animation twice
//               and then stop.
////////////////////////////////////////////////////////////////////
95
inline void AnimInterface::play(void);
inline void AnimInterface::play(double from, double to);

998 4 loop 0 4 1666 19 AnimInterface::loop 0 2 152 153 898
////////////////////////////////////////////////////////////////////
//     Function: AnimInterface::loop
//       Access: Published
//  Description: Starts the entire animation looping.  If restart is
//               true, the animation is restarted from the beginning;
//               otherwise, it continues from the current frame.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: AnimInterface::loop
//       Access: Published
//  Description: Loops the animation from the frame "from" to and
//               including the frame "to", indefinitely.  If restart
//               is true, the animation is restarted from the
//               beginning; otherwise, it continues from the current
//               frame.
////////////////////////////////////////////////////////////////////
117
inline void AnimInterface::loop(bool restart);
inline void AnimInterface::loop(bool restart, double from, double to);

999 8 pingpong 0 4 1666 23 AnimInterface::pingpong 0 2 154 155 886
////////////////////////////////////////////////////////////////////
//     Function: AnimInterface::pingpong
//       Access: Published
//  Description: Starts the entire animation bouncing back and forth
//               between its first frame and last frame.  If restart
//               is true, the animation is restarted from the
//               beginning; otherwise, it continues from the current
//               frame.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: AnimInterface::pingpong
//       Access: Published
//  Description: Loops the animation from the frame "from" to and
//               including the frame "to", and then back in the
//               opposite direction, indefinitely.
////////////////////////////////////////////////////////////////////
125
inline void AnimInterface::pingpong(bool restart);
inline void AnimInterface::pingpong(bool restart, double from, double to);

1000 4 stop 0 4 1666 19 AnimInterface::stop 0 1 156 369
////////////////////////////////////////////////////////////////////
//     Function: AnimInterface::stop
//       Access: Published
//  Description: Stops a currently playing or looping animation right
//               where it is.  The animation remains posed at the
//               current frame.
////////////////////////////////////////////////////////////////////
38
inline void AnimInterface::stop(void);

1001 4 pose 0 4 1666 19 AnimInterface::pose 0 1 157 297
////////////////////////////////////////////////////////////////////
//     Function: AnimInterface::pose
//       Access: Published
//  Description: Sets the animation to the indicated frame and holds
//               it there.
////////////////////////////////////////////////////////////////////
46
inline void AnimInterface::pose(double frame);

1002 13 set_play_rate 0 4 1666 28 AnimInterface::set_play_rate 0 1 158 519
////////////////////////////////////////////////////////////////////
//     Function: AnimInterface::set_play_rate
//       Access: Published
//  Description: Changes the rate at which the animation plays.  1.0
//               is the normal speed, 2.0 is twice normal speed, and
//               0.5 is half normal speed.  0.0 is legal to pause the
//               animation, and a negative value will play the
//               animation backwards.
////////////////////////////////////////////////////////////////////
59
inline void AnimInterface::set_play_rate(double play_rate);

1003 13 get_play_rate 0 4 1666 28 AnimInterface::get_play_rate 0 1 159 313
////////////////////////////////////////////////////////////////////
//     Function: AnimInterface::get_play_rate
//       Access: Published
//  Description: Returns the rate at which the animation plays.  See
//               set_play_rate().
////////////////////////////////////////////////////////////////////
55
inline double AnimInterface::get_play_rate(void) const;

1004 14 get_frame_rate 0 4 1666 29 AnimInterface::get_frame_rate 0 1 160 514
////////////////////////////////////////////////////////////////////
//     Function: AnimInterface::get_frame_rate
//       Access: Published
//  Description: Returns the native frame rate of the animation.  This
//               is the number of frames per second that will elapse
//               when the play_rate is set to 1.0.  It is a fixed
//               property of the animation and may not be adjusted by
//               the user.
////////////////////////////////////////////////////////////////////
56
inline double AnimInterface::get_frame_rate(void) const;

1005 14 get_num_frames 0 6 1666 29 AnimInterface::get_num_frames 0 1 161 581
////////////////////////////////////////////////////////////////////
//     Function: AnimInterface::get_num_frames
//       Access: Published, Virtual
//  Description: Returns the number of frames in the animation.  This
//               is a property of the animation and may not be
//               directly adjusted by the user (although it may change
//               without warning with certain kinds of animations,
//               since this is a virtual method that may be
//               overridden).
////////////////////////////////////////////////////////////////////
54
virtual int AnimInterface::get_num_frames(void) const;

1006 9 get_frame 0 4 1666 24 AnimInterface::get_frame 0 1 162 359
////////////////////////////////////////////////////////////////////
//     Function: AnimInterface::get_frame
//       Access: Published
//  Description: Returns the current integer frame number.
//               This number will be in the range 0 <= f <
//               get_num_frames().
////////////////////////////////////////////////////////////////////
48
inline int AnimInterface::get_frame(void) const;

1007 14 get_next_frame 0 4 1666 29 AnimInterface::get_next_frame 0 1 163 638
////////////////////////////////////////////////////////////////////
//     Function: AnimInterface::get_next_frame
//       Access: Published
//  Description: Returns the current integer frame number + 1,
//               constrained to the range 0 <= f < get_num_frames().
//
//               If the play mode is PM_play, this will clamp to the
//               same value as get_frame() at the end of the
//               animation.  If the play mode is any other value, this
//               will wrap around to frame 0 at the end of the
//               animation.
////////////////////////////////////////////////////////////////////
53
inline int AnimInterface::get_next_frame(void) const;

1008 8 get_frac 0 4 1666 23 AnimInterface::get_frac 0 1 164 598
////////////////////////////////////////////////////////////////////
//     Function: AnimInterface::get_frac
//       Access: Published
//  Description: Returns the fractional part of the current frame.
//               Normally, this is in the range 0.0 <= f < 1.0, but in
//               the one special case of an animation playing to its
//               end frame and stopping, it might exactly equal 1.0.
//
//               It will always be true that get_full_frame() +
//               get_frac() == get_full_fframe().
////////////////////////////////////////////////////////////////////
50
inline double AnimInterface::get_frac(void) const;

1009 14 get_full_frame 0 4 1666 29 AnimInterface::get_full_frame 0 1 165 693
////////////////////////////////////////////////////////////////////
//     Function: AnimInterface::get_full_frame
//       Access: Published
//  Description: Returns the current integer frame number.
//
//               Unlike the value returned by get_frame(), this frame
//               number may extend beyond the range of
//               get_num_frames() if the frame range passed to play(),
//               loop(), etc. did.
//
//               Unlike the value returned by get_full_fframe(), this
//               return value will never exceed the value passed to
//               to_frame in the play() method.
////////////////////////////////////////////////////////////////////
53
inline int AnimInterface::get_full_frame(void) const;

1010 15 get_full_fframe 0 4 1666 30 AnimInterface::get_full_fframe 0 1 166 841
////////////////////////////////////////////////////////////////////
//     Function: AnimInterface::get_full_fframe
//       Access: Published
//  Description: Returns the current floating-point frame number.
//
//               Unlike the value returned by get_frame(), this frame
//               number may extend beyond the range of
//               get_num_frames() if the frame range passed to play(),
//               loop(), etc. did.
//
//               Unlike the value returned by get_full_frame(), this
//               return value may equal (to_frame + 1.0), when the
//               animation has played to its natural end.  However, in
//               this case the return value of get_full_frame() will
//               be to_frame, not (to_frame + 1).
////////////////////////////////////////////////////////////////////
57
inline double AnimInterface::get_full_fframe(void) const;

1011 10 is_playing 0 4 1666 25 AnimInterface::is_playing 0 1 167 466
////////////////////////////////////////////////////////////////////
//     Function: AnimInterface::is_playing
//       Access: Published
//  Description: Returns true if the animation is currently playing,
//               false if it is stopped (e.g. because stop() or pose()
//               was called, or because it reached the end of the
//               animation after play() was called).
////////////////////////////////////////////////////////////////////
50
inline bool AnimInterface::is_playing(void) const;

1012 6 output 0 6 1666 21 AnimInterface::output 0 1 168 230
////////////////////////////////////////////////////////////////////
//     Function: AnimInterface::output
//       Access: Published, Virtual
//  Description: 
////////////////////////////////////////////////////////////////////
55
virtual void AnimInterface::output(ostream &out) const;

1013 14 get_class_type 0 4 1666 29 AnimInterface::get_class_type 0 1 169 0
54
static TypeHandle AnimInterface::get_class_type(void);

1014 9 UpdateSeq 0 4 1668 20 UpdateSeq::UpdateSeq 0 2 170 171 987
// Filename: updateSeq.I
// Created by:  drose (30Sep99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: UpdateSeq::Default Constructor
//       Access: Published
//  Description: Creates an UpdateSeq in the 'initial' state.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: UpdateSeq::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
86
inline UpdateSeq::UpdateSeq(void);
inline UpdateSeq::UpdateSeq(UpdateSeq const &copy);

1015 7 initial 0 4 1668 18 UpdateSeq::initial 0 1 172 290
////////////////////////////////////////////////////////////////////
//     Function: UpdateSeq::initial (named constructor)
//       Access: Published, Static
//  Description: Returns an UpdateSeq in the 'initial' state.
////////////////////////////////////////////////////////////////////
49
static inline UpdateSeq UpdateSeq::initial(void);

1016 3 old 0 4 1668 14 UpdateSeq::old 0 1 173 282
////////////////////////////////////////////////////////////////////
//     Function: UpdateSeq::old (named constructor)
//       Access: Published, Static
//  Description: Returns an UpdateSeq in the 'old' state.
////////////////////////////////////////////////////////////////////
45
static inline UpdateSeq UpdateSeq::old(void);

1017 5 fresh 0 4 1668 16 UpdateSeq::fresh 0 1 174 286
////////////////////////////////////////////////////////////////////
//     Function: UpdateSeq::fresh (named constructor)
//       Access: Published, Static
//  Description: Returns an UpdateSeq in the 'fresh' state.
////////////////////////////////////////////////////////////////////
47
static inline UpdateSeq UpdateSeq::fresh(void);

1018 10 operator = 0 4 1668 21 UpdateSeq::operator = 0 1 175 234
////////////////////////////////////////////////////////////////////
//     Function: UpdateSeq::Copy Assignment operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
63
inline UpdateSeq &UpdateSeq::operator =(UpdateSeq const &copy);

1019 5 clear 0 4 1668 16 UpdateSeq::clear 0 1 176 260
////////////////////////////////////////////////////////////////////
//     Function: UpdateSeq::clear
//       Access: Published
//  Description: Resets the UpdateSeq to the 'initial' state.
////////////////////////////////////////////////////////////////////
35
inline void UpdateSeq::clear(void);

1020 10 is_initial 0 4 1668 21 UpdateSeq::is_initial 0 1 177 294
////////////////////////////////////////////////////////////////////
//     Function: UpdateSeq::is_initial
//       Access: Published
//  Description: Returns true if the UpdateSeq is in the 'initial'
//               state.
////////////////////////////////////////////////////////////////////
46
inline bool UpdateSeq::is_initial(void) const;

1021 6 is_old 0 4 1668 17 UpdateSeq::is_old 0 1 178 269
////////////////////////////////////////////////////////////////////
//     Function: UpdateSeq::is_old
//       Access: Published
//  Description: Returns true if the UpdateSeq is in the 'old' state.
////////////////////////////////////////////////////////////////////
42
inline bool UpdateSeq::is_old(void) const;

1022 8 is_fresh 0 4 1668 19 UpdateSeq::is_fresh 0 1 179 290
////////////////////////////////////////////////////////////////////
//     Function: UpdateSeq::is_fresh
//       Access: Published
//  Description: Returns true if the UpdateSeq is in the 'fresh'
//               state.
////////////////////////////////////////////////////////////////////
44
inline bool UpdateSeq::is_fresh(void) const;

1023 10 is_special 0 4 1668 21 UpdateSeq::is_special 0 1 180 328
////////////////////////////////////////////////////////////////////
//     Function: UpdateSeq::is_special
//       Access: Published
//  Description: Returns true if the UpdateSeq is in any special
//               states, i.e. 'initial', 'old', or 'fresh'.
////////////////////////////////////////////////////////////////////
46
inline bool UpdateSeq::is_special(void) const;

1024 11 operator == 0 4 1668 22 UpdateSeq::operator == 0 1 181 227
////////////////////////////////////////////////////////////////////
//     Function: UpdateSeq::Equality operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
65
inline bool UpdateSeq::operator ==(UpdateSeq const &other) const;

1025 11 operator != 0 4 1668 22 UpdateSeq::operator != 0 1 182 229
////////////////////////////////////////////////////////////////////
//     Function: UpdateSeq::Inequality operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
65
inline bool UpdateSeq::operator !=(UpdateSeq const &other) const;

1026 10 operator < 0 4 1668 21 UpdateSeq::operator < 0 1 183 229
////////////////////////////////////////////////////////////////////
//     Function: UpdateSeq::Comparison operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
64
inline bool UpdateSeq::operator <(UpdateSeq const &other) const;

1027 11 operator <= 0 4 1668 22 UpdateSeq::operator <= 0 1 184 229
////////////////////////////////////////////////////////////////////
//     Function: UpdateSeq::Comparison operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
65
inline bool UpdateSeq::operator <=(UpdateSeq const &other) const;

1028 10 operator > 0 4 1668 21 UpdateSeq::operator > 0 1 185 229
////////////////////////////////////////////////////////////////////
//     Function: UpdateSeq::Comparison operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
64
inline bool UpdateSeq::operator >(UpdateSeq const &other) const;

1029 11 operator >= 0 4 1668 22 UpdateSeq::operator >= 0 1 186 229
////////////////////////////////////////////////////////////////////
//     Function: UpdateSeq::Comparison operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
65
inline bool UpdateSeq::operator >=(UpdateSeq const &other) const;

1030 11 operator ++ 0 68 1668 22 UpdateSeq::operator ++ 0 1 187 231
////////////////////////////////////////////////////////////////////
//     Function: UpdateSeq::Preincrement operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
46
inline UpdateSeq UpdateSeq::operator ++(void);

1031 11 operator ++ 0 4 1668 22 UpdateSeq::operator ++ 0 1 188 232
////////////////////////////////////////////////////////////////////
//     Function: UpdateSeq::Postincrement operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
46
inline UpdateSeq UpdateSeq::operator ++(int );

1032 7 get_seq 0 4 1668 18 UpdateSeq::get_seq 0 1 189 328
////////////////////////////////////////////////////////////////////
//     Function: UpdateSeq::get_seq
//       Access: Published
//  Description: Returns the internal integer value associated with
//               the UpdateSeq.  Useful for debugging only.
////////////////////////////////////////////////////////////////////
47
inline long int UpdateSeq::get_seq(void) const;

1033 6 output 0 4 1668 17 UpdateSeq::output 0 1 190 216
////////////////////////////////////////////////////////////////////
//     Function: UpdateSeq::output
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
50
inline void UpdateSeq::output(ostream &out) const;

1034 10 ~UpdateSeq 0 4 1668 21 UpdateSeq::~UpdateSeq 0 0 0
28
UpdateSeq::~UpdateSeq(void);

1035 17 mark_bam_modified 0 4 1669 32 TypedWritable::mark_bam_modified 0 1 191 653
////////////////////////////////////////////////////////////////////
//     Function: TypedWritable::mark_bam_modified
//       Access: Public
//  Description: Increments the bam_modified counter, so that this
//               object will be invalidated and retransmitted on any
//               open bam streams.  This should normally not need to
//               be called by user code; it should be called
//               internally when the object has been changed in a way
//               that legitimately requires its retransmission to any
//               connected clients.
////////////////////////////////////////////////////////////////////
51
inline void TypedWritable::mark_bam_modified(void);

1036 16 get_bam_modified 0 4 1669 31 TypedWritable::get_bam_modified 0 1 192 388
////////////////////////////////////////////////////////////////////
//     Function: TypedWritable::get_bam_modified
//       Access: Public
//  Description: Returns the current bam_modified counter.  This
//               counter is normally incremented automatically
//               whenever the object is modified.
////////////////////////////////////////////////////////////////////
61
inline UpdateSeq TypedWritable::get_bam_modified(void) const;

1037 10 __reduce__ 0 4 1669 25 TypedWritable::__reduce__ 0 1 193 0
58
PyObject *TypedWritable::__reduce__(PyObject *self) const;

1038 18 __reduce_persist__ 0 4 1669 33 TypedWritable::__reduce_persist__ 0 1 194 0
85
PyObject *TypedWritable::__reduce_persist__(PyObject *self, PyObject *pickler) const;

1039 20 encode_to_bam_stream 0 4 1669 35 TypedWritable::encode_to_bam_stream 0 3 195 196 197 1528
////////////////////////////////////////////////////////////////////
//     Function: TypedWritable::encode_to_bam_stream
//       Access: Published
//  Description: Converts the TypedWritable object into a single
//               stream of data using a BamWriter, and returns that
//               data as a string string.  Returns empty string on
//               failure.
//
//               This is a convenience method particularly useful for
//               cases when you are only serializing a single object.
//               If you have many objects to process, it is more
//               efficient to use the same BamWriter to serialize all
//               of them together.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: TypedWritable::encode_to_bam_stream
//       Access: Published
//  Description: Converts the TypedWritable object into a single
//               stream of data using a BamWriter, and stores that
//               data in the indicated string.  Returns true on
//               success, false on failure.
//
//               This is a convenience method particularly useful for
//               cases when you are only serializing a single object.
//               If you have many objects to process, it is more
//               efficient to use the same BamWriter to serialize all
//               of them together.
////////////////////////////////////////////////////////////////////
187
inline basic_string< char > TypedWritable::encode_to_bam_stream(void) const;
bool TypedWritable::encode_to_bam_stream(basic_string< char > &data, BamWriter *writer = ((void *)(0))) const;

1040 26 decode_raw_from_bam_stream 0 4 1669 41 TypedWritable::decode_raw_from_bam_stream 0 0 1476
////////////////////////////////////////////////////////////////////
//     Function: TypedWritable::decode_raw_from_bam_stream
//       Access: Published, Static
//  Description: Reads the string created by a previous call to
//               encode_to_bam_stream(), and extracts the single
//               object on that string.  Returns true on success,
//               false on on error.
//
//               This variant sets the TypedWritable and
//               ReferenceCount pointers separately; both are pointers
//               to the same object.  The reference count is not
//               incremented; it is the caller's responsibility to
//               manage the reference count.
//
//               Note that this method cannot be used to retrieve
//               objects that do not inherit from ReferenceCount,
//               because these objects cannot persist beyond the
//               lifetime of the BamReader that reads them.  To
//               retrieve these objects from a bam stream, you must
//               construct a BamReader directly.
//
//               If you happen to know that the particular object in
//               question inherits from TypedWritableReferenceCount or
//               PandaNode, consider calling the variant of
//               decode_from_bam_stream() defined for those methods,
//               which presents a simpler interface.
////////////////////////////////////////////////////////////////////
170
static bool TypedWritable::decode_raw_from_bam_stream(TypedWritable *&ptr, ReferenceCount *&ref_ptr, basic_string< char > const &data, BamReader *reader = ((void *)(0)));

1041 14 get_class_type 0 4 1669 29 TypedWritable::get_class_type 0 1 198 0
54
static TypeHandle TypedWritable::get_class_type(void);

1042 23 upcast_to_TypedWritable 0 12 1671 52 TypedWritableReferenceCount::upcast_to_TypedWritable 0 1 202 56
upcast from TypedWritableReferenceCount to TypedWritable
74
TypedWritable *TypedWritableReferenceCount::upcast_to_TypedWritable(void);

1043 39 downcast_to_TypedWritableReferenceCount 0 12 1669 54 TypedWritable::downcast_to_TypedWritableReferenceCount 0 1 203 58
downcast from TypedWritable to TypedWritableReferenceCount
90
TypedWritableReferenceCount *TypedWritable::downcast_to_TypedWritableReferenceCount(void);

1044 24 upcast_to_ReferenceCount 0 12 1671 53 TypedWritableReferenceCount::upcast_to_ReferenceCount 0 1 204 57
upcast from TypedWritableReferenceCount to ReferenceCount
76
ReferenceCount *TypedWritableReferenceCount::upcast_to_ReferenceCount(void);

1045 39 downcast_to_TypedWritableReferenceCount 0 12 1672 55 ReferenceCount::downcast_to_TypedWritableReferenceCount 0 1 205 59
downcast from ReferenceCount to TypedWritableReferenceCount
91
TypedWritableReferenceCount *ReferenceCount::downcast_to_TypedWritableReferenceCount(void);

1046 22 decode_from_bam_stream 0 4 1671 51 TypedWritableReferenceCount::decode_from_bam_stream 0 2 199 200 872
////////////////////////////////////////////////////////////////////
//     Function: TypedWritableReferenceCount::decode_from_bam_stream
//       Access: Published, Static
//  Description: Reads the string created by a previous call to
//               encode_to_bam_stream(), and extracts and returns the
//               single object on that string.  Returns NULL on error.
//
//               This method is intended to replace
//               decode_raw_from_bam_stream() when you know the stream
//               in question returns an object of type
//               TypedWritableReferenceCount, allowing for easier
//               reference count management.  Note that the caller is
//               still responsible for maintaining the reference count
//               on the return value.
////////////////////////////////////////////////////////////////////
169
static PointerTo< TypedWritableReferenceCount > TypedWritableReferenceCount::decode_from_bam_stream(basic_string< char > const &data, BamReader *reader = ((void *)(0)));

1047 14 get_class_type 0 4 1671 43 TypedWritableReferenceCount::get_class_type 0 1 201 0
68
static TypeHandle TypedWritableReferenceCount::get_class_type(void);

1048 28 ~TypedWritableReferenceCount 0 4 1671 57 TypedWritableReferenceCount::~TypedWritableReferenceCount 0 0 0
64
TypedWritableReferenceCount::~TypedWritableReferenceCount(void);

1049 37 upcast_to_TypedWritableReferenceCount 0 12 1673 53 BamCacheRecord::upcast_to_TypedWritableReferenceCount 0 1 226 57
upcast from BamCacheRecord to TypedWritableReferenceCount
89
TypedWritableReferenceCount *BamCacheRecord::upcast_to_TypedWritableReferenceCount(void);

1050 26 downcast_to_BamCacheRecord 0 12 1671 55 TypedWritableReferenceCount::downcast_to_BamCacheRecord 0 1 227 59
downcast from TypedWritableReferenceCount to BamCacheRecord
78
BamCacheRecord *TypedWritableReferenceCount::downcast_to_BamCacheRecord(void);

1051 24 upcast_to_LinkedListNode 0 12 1673 40 BamCacheRecord::upcast_to_LinkedListNode 0 0 44
upcast from BamCacheRecord to LinkedListNode
63
LinkedListNode *BamCacheRecord::upcast_to_LinkedListNode(void);

1052 26 downcast_to_BamCacheRecord 0 12 1674 42 LinkedListNode::downcast_to_BamCacheRecord 0 0 46
downcast from LinkedListNode to BamCacheRecord
65
BamCacheRecord *LinkedListNode::downcast_to_BamCacheRecord(void);

1053 15 ~BamCacheRecord 0 6 1673 31 BamCacheRecord::~BamCacheRecord 0 0 235
////////////////////////////////////////////////////////////////////
//     Function: BamCacheRecord::Destructor
//       Access: Published, Virtual
//  Description: 
////////////////////////////////////////////////////////////////////
46
virtual BamCacheRecord::~BamCacheRecord(void);

1054 9 make_copy 0 4 1673 25 BamCacheRecord::make_copy 0 1 206 928
// Filename: bamCacheRecord.I
// Created by:  drose (09Jun06)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: BamCacheRecord::make_copy
//       Access: Published
//  Description: Returns a duplicate of the BamCacheRecord.  The
//               duplicate will not have a data pointer set, even
//               though one may have been assigned to the original via
//               set_data().
////////////////////////////////////////////////////////////////////
73
inline PointerTo< BamCacheRecord > BamCacheRecord::make_copy(void) const;

1055 11 operator == 0 4 1673 27 BamCacheRecord::operator == 0 1 207 396
////////////////////////////////////////////////////////////////////
//     Function: BamCacheRecord::operator == 
//       Access: Published
//  Description: Returns true if the record matches the other record
//               in those attributes which get written to disk.  Does
//               not compare the data pointer.
////////////////////////////////////////////////////////////////////
75
inline bool BamCacheRecord::operator ==(BamCacheRecord const &other) const;

1056 19 get_source_pathname 0 4 1673 35 BamCacheRecord::get_source_pathname 0 1 208 523
////////////////////////////////////////////////////////////////////
//     Function: BamCacheRecord::get_source_pathname
//       Access: Published
//  Description: Returns the full pathname to the source file that
//               originally generated this cache request.  In some
//               cases, for instance in the case of a of a multipage
//               texture like "cube_#.png", this may not not a true
//               filename on disk.
////////////////////////////////////////////////////////////////////
71
inline Filename const &BamCacheRecord::get_source_pathname(void) const;

1057 18 get_cache_filename 0 4 1673 34 BamCacheRecord::get_cache_filename 0 1 209 516
////////////////////////////////////////////////////////////////////
//     Function: BamCacheRecord::get_cache_filename
//       Access: Published
//  Description: Returns the name of the cache file as hashed from the
//               source_pathname.  This will be relative to the root
//               of the cache directory, and it will not include any
//               suffixes that may be appended to resolve hash
//               conflicts.
////////////////////////////////////////////////////////////////////
70
inline Filename const &BamCacheRecord::get_cache_filename(void) const;

1058 20 get_source_timestamp 0 4 1673 36 BamCacheRecord::get_source_timestamp 0 1 210 473
////////////////////////////////////////////////////////////////////
//     Function: BamCacheRecord::get_source_timestamp
//       Access: Published
//  Description: Returns the file timestamp of the original source
//               file that generated this cache record, if available.
//               In some cases the original file timestamp is not
//               available, and this will return 0.
////////////////////////////////////////////////////////////////////
69
inline unsigned int BamCacheRecord::get_source_timestamp(void) const;

1059 17 get_recorded_time 0 4 1673 33 BamCacheRecord::get_recorded_time 0 1 211 323
////////////////////////////////////////////////////////////////////
//     Function: BamCacheRecord::get_recorded_time
//       Access: Published
//  Description: Returns the time at which this particular record was
//               recorded or updated.
////////////////////////////////////////////////////////////////////
66
inline unsigned int BamCacheRecord::get_recorded_time(void) const;

1060 23 get_num_dependent_files 0 4 1673 39 BamCacheRecord::get_num_dependent_files 0 1 212 320
////////////////////////////////////////////////////////////////////
//     Function: BamCacheRecord::get_num_dependent_files
//       Access: Published
//  Description: Returns the number of source files that contribute to
//               the cache.
////////////////////////////////////////////////////////////////////
63
inline int BamCacheRecord::get_num_dependent_files(void) const;

1061 22 get_dependent_pathname 0 4 1673 38 BamCacheRecord::get_dependent_pathname 0 1 213 335
////////////////////////////////////////////////////////////////////
//     Function: BamCacheRecord::get_dependent_pathname
//       Access: Published
//  Description: Returns the full pathname of the nth source files
//               that contributes to the cache.
////////////////////////////////////////////////////////////////////
75
inline Filename const &BamCacheRecord::get_dependent_pathname(int n) const;

1062 20 dependents_unchanged 0 4 1673 36 BamCacheRecord::dependents_unchanged 0 1 214 380
////////////////////////////////////////////////////////////////////
//     Function: BamCacheRecord::dependents_unchanged
//       Access: Published
//  Description: Returns true if all of the dependent files are still
//               the same as when the cache was recorded, false
//               otherwise.
////////////////////////////////////////////////////////////////////
54
bool BamCacheRecord::dependents_unchanged(void) const;

1063 21 clear_dependent_files 0 4 1673 37 BamCacheRecord::clear_dependent_files 0 1 215 323
////////////////////////////////////////////////////////////////////
//     Function: BamCacheRecord::clear_dependent_files
//       Access: Published
//  Description: Empties the list of files that contribute to the data
//               in this record.
////////////////////////////////////////////////////////////////////
49
void BamCacheRecord::clear_dependent_files(void);

1064 18 add_dependent_file 0 4 1673 34 BamCacheRecord::add_dependent_file 0 1 216 509
////////////////////////////////////////////////////////////////////
//     Function: BamCacheRecord::add_dependent_file
//       Access: Published
//  Description: Adds the indicated file to the list of files that
//               will be loaded to generate the data in this record.
//               This should be called once for the primary source
//               file, and again for each secondary source file, if
//               any.
////////////////////////////////////////////////////////////////////
66
void BamCacheRecord::add_dependent_file(Filename const &pathname);

1065 8 has_data 0 4 1673 24 BamCacheRecord::has_data 0 1 217 373
////////////////////////////////////////////////////////////////////
//     Function: BamCacheRecord::has_data
//       Access: Published
//  Description: Returns true if this cache record has an in-memory
//               data object associated--that is, the object stored in
//               the cache.
////////////////////////////////////////////////////////////////////
49
inline bool BamCacheRecord::has_data(void) const;

1066 10 clear_data 0 4 1673 26 BamCacheRecord::clear_data 0 1 218 394
////////////////////////////////////////////////////////////////////
//     Function: BamCacheRecord::clear_data
//       Access: Published
//  Description: Removes the in-memory data object associated with
//               this record, if any.  This does not affect the
//               on-disk representation of the record.
////////////////////////////////////////////////////////////////////
45
inline void BamCacheRecord::clear_data(void);

1067 8 get_data 0 4 1673 24 BamCacheRecord::get_data 0 1 219 383
////////////////////////////////////////////////////////////////////
//     Function: BamCacheRecord::get_data
//       Access: Published
//  Description: Returns a pointer to the data stored in the
//               record, or NULL if there is no data.  The pointer is
//               not removed from the record.
////////////////////////////////////////////////////////////////////
59
inline TypedWritable *BamCacheRecord::get_data(void) const;

1068 12 extract_data 0 4 1673 28 BamCacheRecord::extract_data 0 0 737
////////////////////////////////////////////////////////////////////
//     Function: BamCacheRecord::extract_data
//       Access: Published
//  Description: Fills ptr and ref_ptr with the two different-typed
//               pointers to the same object, the data stored within
//               this record.  This transfers ownership of the data
//               pointer; the caller will be responsible for managing
//               the reference counts on this object subsequently.
//
//               Returns true if the record contained any data (and
//               the pointers have been filled), false if it didn't
//               (and the pointers are NULL).
////////////////////////////////////////////////////////////////////
88
inline bool BamCacheRecord::extract_data(TypedWritable *&ptr, ReferenceCount *&ref_ptr);

1069 8 set_data 0 4 1673 24 BamCacheRecord::set_data 0 2 220 221 1279
////////////////////////////////////////////////////////////////////
//     Function: BamCacheRecord::set_data
//       Access: Published
//  Description: Stores a new data object on the record.  You should
//               pass the same pointer twice, to both parameters; this
//               allows the C++ typecasting to automatically convert
//               the pointer into both a TypedWritable and a
//               ReferenceCount pointer, so that the BamCacheRecord
//               object can reliably manage the reference counts.
//
//               You may pass 0 or NULL as the second parameter.  If
//               you do this, the BamCacheRecord will not manage the
//               object's reference count; it will be up to you to
//               ensure the object is not deleted during the lifetime
//               of the BamCacheRecord object.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: BamCacheRecord::set_data
//       Access: Published
//  Description: This variant on set_data() is provided just to allow
//               Python code to pass a 0 as the second parameter.
////////////////////////////////////////////////////////////////////
151
inline void BamCacheRecord::set_data(TypedWritable *ptr, ReferenceCount *ref_ptr);
inline void BamCacheRecord::set_data(TypedWritable *ptr, int dummy);

1070 6 output 0 4 1673 22 BamCacheRecord::output 0 1 222 222
////////////////////////////////////////////////////////////////////
//     Function: BamCacheRecord::output
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
48
void BamCacheRecord::output(ostream &out) const;

1071 5 write 0 4 1673 21 BamCacheRecord::write 0 2 223 224 221
////////////////////////////////////////////////////////////////////
//     Function: BamCacheRecord::write
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
71
void BamCacheRecord::write(ostream &out, int indent_level = (0)) const;

1072 14 get_class_type 0 4 1673 30 BamCacheRecord::get_class_type 0 1 225 0
55
static TypeHandle BamCacheRecord::get_class_type(void);

1073 8 BamCache 0 4 1675 18 BamCache::BamCache 0 1 228 220
////////////////////////////////////////////////////////////////////
//     Function: BamCache::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
25
BamCache::BamCache(void);

1074 9 ~BamCache 0 4 1675 19 BamCache::~BamCache 0 0 219
////////////////////////////////////////////////////////////////////
//     Function: BamCache::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
26
BamCache::~BamCache(void);

1075 10 set_active 0 4 1675 20 BamCache::set_active 0 1 229 1130
// Filename: bamCache.I
// Created by:  drose (09Jun06)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: BamCache::set_active
//       Access: Published
//  Description: Changes the state of the active flag.  "active" means
//               that the cache should be consulted automatically on
//               loads, "not active" means that objects should be
//               loaded directly without consulting the cache.
//
//               This represents the global flag.  Also see the
//               individual cache_models, cache_textures,
//               cache_compressed_textures flags.
////////////////////////////////////////////////////////////////////
44
inline void BamCache::set_active(bool flag);

1076 10 get_active 0 4 1675 20 BamCache::get_active 0 1 230 695
////////////////////////////////////////////////////////////////////
//     Function: BamCache::get_active
//       Access: Published
//  Description: Returns true if the BamCache is currently active,
//               false if it is not.  "active" means that the cache
//               should be consulted automatically on loads, "not
//               active" means that objects should be loaded directly
//               without consulting the cache.
//
//               This represents the global flag.  Also see the
//               individual cache_models, cache_textures,
//               cache_compressed_textures flags.
////////////////////////////////////////////////////////////////////
45
inline bool BamCache::get_active(void) const;

1077 16 set_cache_models 0 4 1675 26 BamCache::set_cache_models 0 1 231 346
////////////////////////////////////////////////////////////////////
//     Function: BamCache::set_cache_models
//       Access: Published
//  Description: Indicates whether model files (e.g. egg files and bam
//               files) will be stored in the cache, as bam files.
////////////////////////////////////////////////////////////////////
50
inline void BamCache::set_cache_models(bool flag);

1078 16 get_cache_models 0 4 1675 26 BamCache::get_cache_models 0 1 232 414
////////////////////////////////////////////////////////////////////
//     Function: BamCache::get_cache_models
//       Access: Published
//  Description: Returns whether model files (e.g. egg files and bam
//               files) will be stored in the cache, as bam files.
//
//               This also returns false if get_active() is false.
////////////////////////////////////////////////////////////////////
51
inline bool BamCache::get_cache_models(void) const;

1079 18 set_cache_textures 0 4 1675 28 BamCache::set_cache_textures 0 1 233 332
////////////////////////////////////////////////////////////////////
//     Function: BamCache::set_cache_textures
//       Access: Published
//  Description: Indicates whether texture files will be stored in the
//               cache, as uncompressed txo files.
////////////////////////////////////////////////////////////////////
52
inline void BamCache::set_cache_textures(bool flag);

1080 18 get_cache_textures 0 4 1675 28 BamCache::get_cache_textures 0 1 234 418
////////////////////////////////////////////////////////////////////
//     Function: BamCache::get_cache_textures
//       Access: Published
//  Description: Returns whether texture files (e.g. egg files and bam
//               files) will be stored in the cache, as txo files.
//
//               This also returns false if get_active() is false.
////////////////////////////////////////////////////////////////////
53
inline bool BamCache::get_cache_textures(void) const;

1081 29 set_cache_compressed_textures 0 4 1675 39 BamCache::set_cache_compressed_textures 0 1 235 1143
////////////////////////////////////////////////////////////////////
//     Function: BamCache::set_cache_compressed_textures
//       Access: Published
//  Description: Indicates whether compressed texture files will be
//               stored in the cache, as compressed txo files.  The
//               compressed data may either be generated in-CPU, via
//               the squish library, or it may be extracted from the
//               GSG after the texture has been loaded.
//
//               This may be set in conjunction with
//               set_cache_textures(), or independently of it.  If
//               set_cache_textures() is true and this is false, all
//               textures will be cached in their uncompressed form.
//               If set_cache_textures() is false and this is true,
//               only compressed textures will be cached, and they
//               will be cached in their compressed form.  If both are
//               true, all textures will be cached, in their
//               uncompressed or compressed form appropriately.
////////////////////////////////////////////////////////////////////
63
inline void BamCache::set_cache_compressed_textures(bool flag);

1082 29 get_cache_compressed_textures 0 4 1675 39 BamCache::get_cache_compressed_textures 0 1 236 475
////////////////////////////////////////////////////////////////////
//     Function: BamCache::get_cache_compressed_textures
//       Access: Published
//  Description: Returns whether compressed texture files will be
//               stored in the cache, as compressed txo files.  See
//               set_cache_compressed_textures().
//
//               This also returns false if get_active() is false.
////////////////////////////////////////////////////////////////////
64
inline bool BamCache::get_cache_compressed_textures(void) const;

1083 8 set_root 0 4 1675 18 BamCache::set_root 0 1 237 665
////////////////////////////////////////////////////////////////////
//     Function: BamCache::set_root
//       Access: Published
//  Description: Changes the current root pathname of the cache.  This
//               specifies where the cache files are stored on disk.
//               This should name a directory that is on a disk local
//               to the machine (not on a network-mounted disk), for
//               instance, /tmp/panda-cache or /c/panda-cache.
//
//               If the directory does not already exist, it will be
//               created as a result of this call.
////////////////////////////////////////////////////////////////////
46
void BamCache::set_root(Filename const &root);

1084 8 get_root 0 4 1675 18 BamCache::get_root 0 1 238 299
////////////////////////////////////////////////////////////////////
//     Function: BamCache::get_root
//       Access: Published
//  Description: Returns the current root pathname of the cache.  See
//               set_root().
////////////////////////////////////////////////////////////////////
47
inline Filename BamCache::get_root(void) const;

1085 14 set_flush_time 0 4 1675 24 BamCache::set_flush_time 0 1 239 316
////////////////////////////////////////////////////////////////////
//     Function: BamCache::set_flush_time
//       Access: Published
//  Description: Specifies the time in seconds between automatic
//               flushes of the cache index.
////////////////////////////////////////////////////////////////////
53
inline void BamCache::set_flush_time(int flush_time);

1086 14 get_flush_time 0 4 1675 24 BamCache::get_flush_time 0 1 240 314
////////////////////////////////////////////////////////////////////
//     Function: BamCache::get_flush_time
//       Access: Published
//  Description: Returns the time in seconds between automatic
//               flushes of the cache index.
////////////////////////////////////////////////////////////////////
48
inline int BamCache::get_flush_time(void) const;

1087 20 set_cache_max_kbytes 0 4 1675 30 BamCache::set_cache_max_kbytes 0 1 241 767
////////////////////////////////////////////////////////////////////
//     Function: BamCache::set_cache_max_kbytes
//       Access: Published
//  Description: Specifies the maximum size, in kilobytes, which the
//               cache is allowed to grow to.  If a newly cached file
//               would exceed this size, an older file is removed from
//               the cache.
//
//               Note that in the case of multiple different processes
//               simultaneously operating on the same cache directory,
//               the actual cache size may slightly exceed this value
//               from time to time due to latency in checking between
//               the processes.
////////////////////////////////////////////////////////////////////
59
inline void BamCache::set_cache_max_kbytes(int max_kbytes);

1088 20 get_cache_max_kbytes 0 4 1675 30 BamCache::get_cache_max_kbytes 0 1 242 371
////////////////////////////////////////////////////////////////////
//     Function: BamCache::get_cache_max_kbytes
//       Access: Published
//  Description: Returns the maximum size, in kilobytes, which the
//               cache is allowed to grow to.  See
//               set_cache_max_kbytes().
////////////////////////////////////////////////////////////////////
54
inline int BamCache::get_cache_max_kbytes(void) const;

1089 13 set_read_only 0 4 1675 23 BamCache::set_read_only 0 1 243 523
////////////////////////////////////////////////////////////////////
//     Function: BamCache::set_read_only
//       Access: Published
//  Description: Can be used to put the cache in read-only mode,
//               or take it out of read-only mode.  Note that if you
//               put it into read-write mode, and it discovers that
//               it does not have write access, it will put itself
//               right back into read-only mode.
////////////////////////////////////////////////////////////////////
45
inline void BamCache::set_read_only(bool ro);

1090 13 get_read_only 0 4 1675 23 BamCache::get_read_only 0 1 244 503
////////////////////////////////////////////////////////////////////
//     Function: BamCache::get_read_only
//       Access: Published
//  Description: Returns true if the cache is in read-only mode.
//               Normally, the cache starts in read-write mode.  It
//               can put itself into read-only mode automatically if
//               it discovers that it does not have write access to
//               the cache.
////////////////////////////////////////////////////////////////////
48
inline bool BamCache::get_read_only(void) const;

1091 6 lookup 0 4 1675 16 BamCache::lookup 0 1 245 1211
////////////////////////////////////////////////////////////////////
//     Function: BamCache::lookup
//       Access: Published
//  Description: Looks up a file in the cache.  
//
//               If the file is cacheable, then regardless of whether
//               the file is found in the cache or not, this returns a
//               BamCacheRecord.  On the other hand, if the file
//               cannot be cached, returns NULL.
//
//               If record->has_data() returns true, then the file was
//               found in the cache, and you may call
//               record->extract_data() to get the object.  If
//               record->has_data() returns false, then the file was
//               not found in the cache or the cache was stale; and
//               you should reload the source file (calling
//               record->add_dependent_file() for each file loaded,
//               including the original source file), and then call
//               record->set_data() to record the resulting loaded
//               object; and finally, you should call store() to write
//               the cached record to disk.
////////////////////////////////////////////////////////////////////
123
PointerTo< BamCacheRecord > BamCache::lookup(Filename const &source_filename, basic_string< char > const &cache_extension);

1092 5 store 0 4 1675 15 BamCache::store 0 1 246 478
////////////////////////////////////////////////////////////////////
//     Function: BamCache::store
//       Access: Published
//  Description: Flushes a cache entry to disk.  You must have
//               retrieved the cache record via a prior call to
//               lookup(), and then stored the data via
//               record->set_data().  Returns true on success, false
//               on failure.
////////////////////////////////////////////////////////////////////
45
bool BamCache::store(BamCacheRecord *record);

1093 20 consider_flush_index 0 4 1675 30 BamCache::consider_flush_index 0 1 247 325
////////////////////////////////////////////////////////////////////
//     Function: BamCache::consider_flush_index
//       Access: Published
//  Description: Flushes the index if enough time has elapsed since
//               the index was last flushed.
////////////////////////////////////////////////////////////////////
42
void BamCache::consider_flush_index(void);

1094 11 flush_index 0 4 1675 21 BamCache::flush_index 0 1 248 258
////////////////////////////////////////////////////////////////////
//     Function: BamCache::flush_index
//       Access: Published
//  Description: Ensures the index is written to disk.
////////////////////////////////////////////////////////////////////
33
void BamCache::flush_index(void);

1095 14 get_global_ptr 0 4 1675 24 BamCache::get_global_ptr 0 1 249 376
////////////////////////////////////////////////////////////////////
//     Function: BamCache::get_global_ptr
//       Access: Published, Static
//  Description: Returns a pointer to the global BamCache object,
//               which is used automatically by the ModelPool and
//               TexturePool.
////////////////////////////////////////////////////////////////////
55
static inline BamCache *BamCache::get_global_ptr(void);

1096 9 ~BamEnums 0 4 1676 19 BamEnums::~BamEnums 0 0 0
26
BamEnums::~BamEnums(void);

1097 13 LoaderOptions 0 4 1680 28 LoaderOptions::LoaderOptions 0 4 250 251 252 253 1173
// Filename: loaderOptions.I
// Created by:  drose (05Oct05)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LoaderOptions::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LoaderOptions::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LoaderOptions::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
206
LoaderOptions::LoaderOptions(int flags = ((LF_search | LF_report_errors)));
inline LoaderOptions::LoaderOptions(int flags, int texture_flags);
inline LoaderOptions::LoaderOptions(LoaderOptions const &copy);

1098 10 operator = 0 4 1680 25 LoaderOptions::operator = 0 1 254 238
////////////////////////////////////////////////////////////////////
//     Function: LoaderOptions::Copy Assignment Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
65
inline void LoaderOptions::operator =(LoaderOptions const &copy);

1099 9 set_flags 0 4 1680 24 LoaderOptions::set_flags 0 1 255 223
////////////////////////////////////////////////////////////////////
//     Function: LoaderOptions::set_flags
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
48
inline void LoaderOptions::set_flags(int flags);

1100 9 get_flags 0 4 1680 24 LoaderOptions::get_flags 0 1 256 223
////////////////////////////////////////////////////////////////////
//     Function: LoaderOptions::get_flags
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
48
inline int LoaderOptions::get_flags(void) const;

1101 17 set_texture_flags 0 4 1680 32 LoaderOptions::set_texture_flags 0 1 257 231
////////////////////////////////////////////////////////////////////
//     Function: LoaderOptions::set_texture_flags
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
56
inline void LoaderOptions::set_texture_flags(int flags);

1102 17 get_texture_flags 0 4 1680 32 LoaderOptions::get_texture_flags 0 1 258 231
////////////////////////////////////////////////////////////////////
//     Function: LoaderOptions::get_texture_flags
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
56
inline int LoaderOptions::get_texture_flags(void) const;

1103 21 set_texture_num_views 0 4 1680 36 LoaderOptions::set_texture_num_views 0 1 259 767
////////////////////////////////////////////////////////////////////
//     Function: LoaderOptions::set_texture_num_views
//       Access: Published
//  Description: Specifies the expected number of views to load for
//               the texture.  This is ignored unless TF_multiview is
//               included in texture_flags.  This must be specified
//               when loading a 3-d multiview texture, in which case
//               it is used to differentiate z levels from separate
//               views; it may be zero in the case of 2-d textures or
//               cube maps, in which case the number of views can be
//               inferred from the number of images found on disk.
////////////////////////////////////////////////////////////////////
64
inline void LoaderOptions::set_texture_num_views(int num_views);

1104 21 get_texture_num_views 0 4 1680 36 LoaderOptions::get_texture_num_views 0 1 260 264
////////////////////////////////////////////////////////////////////
//     Function: LoaderOptions::get_texture_num_views
//       Access: Published
//  Description: See set_texture_num_views().
////////////////////////////////////////////////////////////////////
60
inline int LoaderOptions::get_texture_num_views(void) const;

1105 22 set_auto_texture_scale 0 4 1680 37 LoaderOptions::set_auto_texture_scale 0 1 261 480
////////////////////////////////////////////////////////////////////
//     Function: LoaderOptions::set_auto_texture_scale
//       Access: Published
//  Description: Set this flag to ATS_none, ATS_up, ATS_down, or
//               ATS_pad to control how a texture is scaled from
//               disk when it is subsequently loaded.  Set it to
//               ATS_unspecified to restore the default behavior.
////////////////////////////////////////////////////////////////////
74
inline void LoaderOptions::set_auto_texture_scale(AutoTextureScale scale);

1106 22 get_auto_texture_scale 0 4 1680 37 LoaderOptions::get_auto_texture_scale 0 1 262 266
////////////////////////////////////////////////////////////////////
//     Function: LoaderOptions::get_auto_texture_scale
//       Access: Published
//  Description: See set_auto_texture_scale().
////////////////////////////////////////////////////////////////////
74
inline AutoTextureScale LoaderOptions::get_auto_texture_scale(void) const;

1107 6 output 0 4 1680 21 LoaderOptions::output 0 1 263 221
////////////////////////////////////////////////////////////////////
//     Function: LoaderOptions::output
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
47
void LoaderOptions::output(ostream &out) const;

1108 14 ~LoaderOptions 0 4 1680 29 LoaderOptions::~LoaderOptions 0 0 0
36
LoaderOptions::~LoaderOptions(void);

1109 9 BamReader 0 4 1683 20 BamReader::BamReader 0 2 264 265 261
// The primary interface for a caller.

////////////////////////////////////////////////////////////////////
//     Function: BamReader::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
64
BamReader::BamReader(DatagramGenerator *source = ((void *)(0)));

1110 10 ~BamReader 0 4 1683 21 BamReader::~BamReader 0 0 260
// The primary interface for a caller.

////////////////////////////////////////////////////////////////////
//     Function: BamReader::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
28
BamReader::~BamReader(void);

1111 10 set_source 0 4 1683 21 BamReader::set_source 0 1 266 383
////////////////////////////////////////////////////////////////////
//     Function: BamReader::set_source
//       Access: Published
//  Description: Changes the source of future datagrams for this
//               BamReader.  This also implicitly calls init() if it
//               has not already been called.
////////////////////////////////////////////////////////////////////
54
void BamReader::set_source(DatagramGenerator *source);

1112 10 get_source 0 4 1683 21 BamReader::get_source 0 1 267 324
////////////////////////////////////////////////////////////////////
//     Function: BamReader::get_source
//       Access: Published
//  Description: Returns the current source of the BamReader as set by
//               set_source() or the constructor.
////////////////////////////////////////////////////////////////////
54
inline DatagramGenerator *BamReader::get_source(void);

1113 4 init 0 4 1683 15 BamReader::init 0 1 268 474
////////////////////////////////////////////////////////////////////
//     Function: BamReader::init
//       Access: Published
//  Description: Initializes the BamReader prior to reading any
//               objects from its source.  This includes reading the
//               Bam header.
//
//               This returns true if the BamReader successfully
//               initialized, false otherwise.
////////////////////////////////////////////////////////////////////
27
bool BamReader::init(void);

1114 12 set_aux_data 0 4 1683 23 BamReader::set_aux_data 0 1 269 1496
////////////////////////////////////////////////////////////////////
//     Function: BamReader::set_aux_data
//       Access: Published
//  Description: Associates an arbitrary block of data with the
//               indicated object (or NULL), and the indicated name.
//
//               This is intended to provide a place for temporary
//               storage for objects reading themselves from the bam
//               file.  To use it, inherit from BamReader::AuxData and
//               store whatever data you like there.  Then associate
//               your AuxData with the object as it is being read with
//               set_aux_data().  You may later set the aux data to
//               NULL to remove it; or it will automatically be
//               removed (and deleted) after finalize() is called for
//               the object in question.
//
//               If the TypedWritable pointer is NULL, the the aux
//               data is stored globally for the BamReader in general.
//               This pointer is available to any bam objects, and
//               will not be automatically removed until the BamReader
//               itself destructs.
//
//               In either case, the name is just an arbitrary
//               user-defined key.  If there is already a data pointer
//               stored for the obj/name pair, that data pointer will
//               be replaced (and deleted).
////////////////////////////////////////////////////////////////////
109
void BamReader::set_aux_data(TypedWritable *obj, basic_string< char > const &name, BamReader::AuxData *data);

1115 12 get_aux_data 0 4 1683 23 BamReader::get_aux_data 0 1 270 413
////////////////////////////////////////////////////////////////////
//     Function: BamReader::get_aux_data
//       Access: Published
//  Description: Returns the pointer previously associated with the
//               bam reader by a previous call to set_aux_data(), or
//               NULL if data with the indicated key has not been set.
////////////////////////////////////////////////////////////////////
104
BamReader::AuxData *BamReader::get_aux_data(TypedWritable *obj, basic_string< char > const &name) const;

1116 12 get_filename 0 4 1683 23 BamReader::get_filename 0 1 271 457
////////////////////////////////////////////////////////////////////
//     Function: BamReader::get_filename
//       Access: Published
//  Description: If a BAM is a file, then the BamReader should
//               contain the name of the file.  This enables the
//               reader to interpret pathnames in the BAM as relative
//               to the directory containing the BAM.
////////////////////////////////////////////////////////////////////
59
inline Filename const &BamReader::get_filename(void) const;

1117 18 get_loader_options 0 4 1683 29 BamReader::get_loader_options 0 1 272 330
////////////////////////////////////////////////////////////////////
//     Function: BamReader::get_loader_options
//       Access: Published
//  Description: Returns the LoaderOptions passed to the loader when
//               the model was requested, if any.
////////////////////////////////////////////////////////////////////
70
inline LoaderOptions const &BamReader::get_loader_options(void) const;

1118 18 set_loader_options 0 4 1683 29 BamReader::set_loader_options 0 1 273 276
////////////////////////////////////////////////////////////////////
//     Function: BamReader::set_loader_options
//       Access: Published
//  Description: Specifies the LoaderOptions for this BamReader.
////////////////////////////////////////////////////////////////////
72
inline void BamReader::set_loader_options(LoaderOptions const &options);

1119 11 read_object 0 4 1683 22 BamReader::read_object 0 1 274 2207
////////////////////////////////////////////////////////////////////
//     Function: BamReader::read_object
//       Access: Published
//  Description: Reads a single object from the Bam file.  If the
//               object type is known, a new object of the appropriate
//               type is created and returned; otherwise, NULL is
//               returned.  NULL is also returned when the end of the
//               file is reached.  is_eof() may be called to
//               differentiate between these two cases.
//
//               This may be called repeatedly to extract out all the
//               objects in the Bam file, but typically (especially
//               for scene graph files, indicated with the .bam
//               extension), only one object is retrieved directly
//               from the Bam file: the root of the scene graph.  The
//               remaining objects will all be retrieved recursively
//               by the first object.
//
//               Note that the object returned may not yet be
//               complete.  In particular, some of its pointers may
//               not be filled in; you must call resolve() to fill in
//               all the available pointers before you can safely use
//               any objects returned by read_object().
//
//               This flavor of read_object() requires the caller to
//               know what type of object it has received in order to
//               properly manage the reference counts.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: BamReader::read_object
//       Access: Published
//  Description: Reads a single object from the Bam file.  
//
//               This flavor of read_object() returns both a
//               TypedWritable and a ReferenceCount pointer to the
//               same object, so the reference count may be tracked
//               reliably, without having to know precisely what type
//               of object we have.  It returns true on success, or
//               false on failure.
////////////////////////////////////////////////////////////////////
120
TypedWritable *BamReader::read_object(void);
bool BamReader::read_object(TypedWritable *&ptr, ReferenceCount *&ref_ptr);

1120 6 is_eof 0 4 1683 17 BamReader::is_eof 0 1 275 375
////////////////////////////////////////////////////////////////////
//     Function: BamReader::is_eof
//       Access: Published
//  Description: Returns true if the reader has reached end-of-file,
//               false otherwise.  This call is only valid after a
//               call to read_object().
////////////////////////////////////////////////////////////////////
42
inline bool BamReader::is_eof(void) const;

1121 7 resolve 0 4 1683 18 BamReader::resolve 0 1 276 935
////////////////////////////////////////////////////////////////////
//     Function: BamReader::resolve
//       Access: Published
//  Description: This may be called at any time during processing of
//               the Bam file to resolve all the known pointers so
//               far.  It is usually called at the end of the
//               processing, after all objects have been read, which
//               is generally the best time to call it.
//
//               This must be called at least once after reading a
//               particular object via get_object() in order to
//               validate that object.
//
//               The return value is true if all objects have been
//               resolved, or false if some objects are still
//               outstanding (in which case you will need to call
//               resolve() again later).
////////////////////////////////////////////////////////////////////
30
bool BamReader::resolve(void);

1122 14 change_pointer 0 4 1683 25 BamReader::change_pointer 0 1 277 724
////////////////////////////////////////////////////////////////////
//     Function: BamReader::change_pointer
//       Access: Published
//  Description: Indicates that an object recently read from the bam
//               stream should be replaced with a new object.  Any
//               future occurrences of the original object in the
//               stream will henceforth return the new object instead.
//
//               The return value is true if the replacement was
//               successfully made, or false if the object was not
//               read from the stream (or if change_pointer had
//               already been called on it).
////////////////////////////////////////////////////////////////////
100
bool BamReader::change_pointer(TypedWritable const *orig_pointer, TypedWritable const *new_pointer);

1123 18 get_file_major_ver 0 4 1683 29 BamReader::get_file_major_ver 0 1 278 316
////////////////////////////////////////////////////////////////////
//     Function: BamReader::get_file_major_ver
//       Access: Published
//  Description: Returns the major version number of the Bam file
//               currently being read.
////////////////////////////////////////////////////////////////////
53
inline int BamReader::get_file_major_ver(void) const;

1124 18 get_file_minor_ver 0 4 1683 29 BamReader::get_file_minor_ver 0 1 279 316
////////////////////////////////////////////////////////////////////
//     Function: BamReader::get_file_minor_ver
//       Access: Published
//  Description: Returns the minor version number of the Bam file
//               currently being read.
////////////////////////////////////////////////////////////////////
53
inline int BamReader::get_file_minor_ver(void) const;

1125 15 get_file_endian 0 4 1683 26 BamReader::get_file_endian 0 1 280 528
////////////////////////////////////////////////////////////////////
//     Function: BamReader::get_file_endian
//       Access: Published
//  Description: Returns the endian preference indicated by the Bam
//               file currently being read.  This does not imply that
//               every number is stored using the indicated
//               convention, but individual objects may choose to
//               respect this flag when recording data.
////////////////////////////////////////////////////////////////////
66
inline BamEnums::BamEndian BamReader::get_file_endian(void) const;

1126 24 get_file_stdfloat_double 0 4 1683 35 BamReader::get_file_stdfloat_double 0 1 281 489
////////////////////////////////////////////////////////////////////
//     Function: BamReader::get_file_stdfloat_double
//       Access: Published
//  Description: Returns true if the file stores all "standard"
//               floats as 64-bit doubles, or false if they are 32-bit
//               floats.  This is determined by the compilation flags
//               of the version of Panda that generated this file.
////////////////////////////////////////////////////////////////////
60
inline bool BamReader::get_file_stdfloat_double(void) const;

1127 21 get_current_major_ver 0 4 1683 32 BamReader::get_current_major_ver 0 1 282 440
////////////////////////////////////////////////////////////////////
//     Function: BamReader::get_current_major_ver
//       Access: Published
//  Description: Returns the major version number of Bam files
//               supported by the current code base.  This must match
//               get_file_major_ver() in order to successfully read a
//               file.
////////////////////////////////////////////////////////////////////
56
inline int BamReader::get_current_major_ver(void) const;

1128 21 get_current_minor_ver 0 4 1683 32 BamReader::get_current_minor_ver 0 1 283 450
////////////////////////////////////////////////////////////////////
//     Function: BamReader::get_current_minor_ver
//       Access: Published
//  Description: Returns the minor version number of Bam files
//               supported by the current code base.  This must match
//               or exceed get_file_minor_ver() in order to
//               successfully read a file.
////////////////////////////////////////////////////////////////////
56
inline int BamReader::get_current_minor_ver(void) const;

1129 9 BamWriter 0 4 1684 20 BamWriter::BamWriter 0 2 284 285 221
////////////////////////////////////////////////////////////////////
//     Function: BamWriter::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
59
BamWriter::BamWriter(DatagramSink *target = ((void *)(0)));

1130 10 ~BamWriter 0 4 1684 21 BamWriter::~BamWriter 0 0 220
////////////////////////////////////////////////////////////////////
//     Function: BamWriter::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
28
BamWriter::~BamWriter(void);

1131 10 set_target 0 4 1684 21 BamWriter::set_target 0 1 286 394
////////////////////////////////////////////////////////////////////
//     Function: BamWriter::set_target
//       Access: Published
//  Description: Changes the destination of future datagrams written
//               by the BamWriter.  This also implicitly calls init()
//               if it has not already been called.
////////////////////////////////////////////////////////////////////
49
void BamWriter::set_target(DatagramSink *target);

1132 10 get_target 0 4 1684 21 BamWriter::get_target 0 1 287 809
// Filename: bamWriter.I
// Created by:  jason (08Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: BamWriter::get_target
//       Access: Published
//  Description: Returns the current target of the BamWriter as set by
//               set_target() or the constructor.
////////////////////////////////////////////////////////////////////
49
inline DatagramSink *BamWriter::get_target(void);

1133 4 init 0 4 1684 15 BamWriter::init 0 1 288 483
////////////////////////////////////////////////////////////////////
//     Function: BamWriter::init
//       Access: Published
//  Description: Initializes the BamWriter prior to writing any
//               objects to its output stream.  This includes writing
//               out the Bam header.
//
//               This returns true if the BamWriter successfully
//               initialized, false otherwise.
////////////////////////////////////////////////////////////////////
27
bool BamWriter::init(void);

1134 12 get_filename 0 4 1684 23 BamWriter::get_filename 0 1 289 455
////////////////////////////////////////////////////////////////////
//     Function: BamWriter::get_filename
//       Access: Published
//  Description: If a BAM is a file, then the BamWriter should
//               contain the name of the file.  This enables the
//               writer to convert pathnames in the BAM to relative
//               to the directory containing the BAM.
////////////////////////////////////////////////////////////////////
59
inline Filename const &BamWriter::get_filename(void) const;

1135 12 write_object 0 4 1684 23 BamWriter::write_object 0 1 290 1153
////////////////////////////////////////////////////////////////////
//     Function: BamWriter::write_object
//       Access: Published
//  Description: Writes a single object to the Bam file, so that the
//               BamReader::read_object() can later correctly restore
//               the object and all its pointers.
//
//               This implicitly also writes any additional objects
//               this object references (if they haven't already been
//               written), so that pointers may be fully resolved.
//
//               This may be called repeatedly to write a sequence of
//               objects to the Bam file, but typically (especially
//               for scene graph files, indicated with the .bam
//               extension), only one object is written directly from
//               the Bam file: the root of the scene graph.  The
//               remaining objects will all be written recursively by
//               the first object.
//
//               Returns true if the object is successfully written,
//               false otherwise.
////////////////////////////////////////////////////////////////////
55
bool BamWriter::write_object(TypedWritable const *obj);

1136 10 has_object 0 4 1684 21 BamWriter::has_object 0 1 291 408
////////////////////////////////////////////////////////////////////
//     Function: BamWriter::has_object
//       Access: Published
//  Description: Returns true if the object has previously been
//               written (or at least requested to be written) to the
//               bam file, or false if we've never heard of it before.
////////////////////////////////////////////////////////////////////
59
bool BamWriter::has_object(TypedWritable const *obj) const;

1137 5 flush 0 4 1684 16 BamWriter::flush 0 1 292 307
////////////////////////////////////////////////////////////////////
//     Function: BamWriter::flush
//       Access: Published
//  Description: Ensures that all data written thus far is manifested
//               on the output stream.
////////////////////////////////////////////////////////////////////
28
void BamWriter::flush(void);

1138 15 get_file_endian 0 4 1684 26 BamWriter::get_file_endian 0 1 293 531
////////////////////////////////////////////////////////////////////
//     Function: BamWriter::get_file_endian
//       Access: Published
//  Description: Returns the endian preference indicated by the Bam
//               file currently being written.  This does not imply
//               that every number is stored using the indicated
//               convention, but individual objects may choose to
//               respect this flag when recording data.
////////////////////////////////////////////////////////////////////
66
inline BamEnums::BamEndian BamWriter::get_file_endian(void) const;

1139 24 get_file_stdfloat_double 0 4 1684 35 BamWriter::get_file_stdfloat_double 0 1 294 531
////////////////////////////////////////////////////////////////////
//     Function: BamWriter::get_file_stdfloat_double
//       Access: Published
//  Description: Returns true if the file will store all "standard"
//               floats as 64-bit doubles, or false if they are 32-bit
//               floats.  This isn't runtime settable; it's based on
//               the compilation flags of the version of Panda that
//               generated this file.
////////////////////////////////////////////////////////////////////
60
inline bool BamWriter::get_file_stdfloat_double(void) const;

1140 21 get_file_texture_mode 0 4 1684 32 BamWriter::get_file_texture_mode 0 1 295 462
////////////////////////////////////////////////////////////////////
//     Function: BamWriter::get_file_texture_mode
//       Access: Published
//  Description: Returns the BamTextureMode preference indicated by
//               the Bam file currently being written.  Texture
//               objects written to this Bam file will be encoded
//               according to the specified mode.
////////////////////////////////////////////////////////////////////
77
inline BamEnums::BamTextureMode BamWriter::get_file_texture_mode(void) const;

1141 21 set_file_texture_mode 0 4 1684 32 BamWriter::set_file_texture_mode 0 1 296 453
////////////////////////////////////////////////////////////////////
//     Function: BamWriter::set_file_texture_mode
//       Access: Published
//  Description: Changes the BamTextureMode preference for
//               the Bam file currently being written.  Texture
//               objects written to this Bam file will be encoded
//               according to the specified mode.
////////////////////////////////////////////////////////////////////
89
inline void BamWriter::set_file_texture_mode(BamEnums::BamTextureMode file_texture_mode);

1142 7 BitMask 0 4 1685 42 BitMask< unsigned short int, 16 >::BitMask 0 3 297 298 299 0
242
inline ::BitMask< unsigned short int, 16 >::BitMask(void);
inline ::BitMask< unsigned short int, 16 >::BitMask(unsigned short int init_value);
inline ::BitMask< unsigned short int, 16 >::BitMask(BitMask< unsigned short int, 16 > const &copy);

1143 10 operator = 0 4 1685 45 BitMask< unsigned short int, 16 >::operator = 0 1 300 0
137
inline BitMask< unsigned short int, 16 > &::BitMask< unsigned short int, 16 >::operator =(BitMask< unsigned short int, 16 > const &copy);

1144 6 all_on 0 4 1685 41 BitMask< unsigned short int, 16 >::all_on 0 1 301 0
98
static inline BitMask< unsigned short int, 16 > ::BitMask< unsigned short int, 16 >::all_on(void);

1145 7 all_off 0 4 1685 42 BitMask< unsigned short int, 16 >::all_off 0 1 302 0
99
static inline BitMask< unsigned short int, 16 > ::BitMask< unsigned short int, 16 >::all_off(void);

1146 8 lower_on 0 4 1685 43 BitMask< unsigned short int, 16 >::lower_on 0 1 303 0
107
static inline BitMask< unsigned short int, 16 > ::BitMask< unsigned short int, 16 >::lower_on(int on_bits);

1147 3 bit 0 4 1685 38 BitMask< unsigned short int, 16 >::bit 0 1 304 0
100
static inline BitMask< unsigned short int, 16 > ::BitMask< unsigned short int, 16 >::bit(int index);

1148 5 range 0 4 1685 40 BitMask< unsigned short int, 16 >::range 0 1 305 0
114
static inline BitMask< unsigned short int, 16 > ::BitMask< unsigned short int, 16 >::range(int low_bit, int size);

1149 8 ~BitMask 0 4 1685 43 BitMask< unsigned short int, 16 >::~BitMask 0 0 0
59
inline ::BitMask< unsigned short int, 16 >::~BitMask(void);

1150 16 has_max_num_bits 0 4 1685 51 BitMask< unsigned short int, 16 >::has_max_num_bits 0 1 306 0
79
static inline bool ::BitMask< unsigned short int, 16 >::has_max_num_bits(void);

1151 16 get_max_num_bits 0 4 1685 51 BitMask< unsigned short int, 16 >::get_max_num_bits 0 1 307 0
78
static inline int ::BitMask< unsigned short int, 16 >::get_max_num_bits(void);

1152 12 get_num_bits 0 4 1685 47 BitMask< unsigned short int, 16 >::get_num_bits 0 1 308 0
74
static inline int ::BitMask< unsigned short int, 16 >::get_num_bits(void);

1153 7 get_bit 0 4 1685 42 BitMask< unsigned short int, 16 >::get_bit 0 1 309 0
74
inline bool ::BitMask< unsigned short int, 16 >::get_bit(int index) const;

1154 7 set_bit 0 4 1685 42 BitMask< unsigned short int, 16 >::set_bit 0 1 310 0
68
inline void ::BitMask< unsigned short int, 16 >::set_bit(int index);

1155 9 clear_bit 0 4 1685 44 BitMask< unsigned short int, 16 >::clear_bit 0 1 311 0
70
inline void ::BitMask< unsigned short int, 16 >::clear_bit(int index);

1156 10 set_bit_to 0 4 1685 45 BitMask< unsigned short int, 16 >::set_bit_to 0 1 312 0
83
inline void ::BitMask< unsigned short int, 16 >::set_bit_to(int index, bool value);

1157 7 is_zero 0 4 1685 42 BitMask< unsigned short int, 16 >::is_zero 0 1 313 0
69
inline bool ::BitMask< unsigned short int, 16 >::is_zero(void) const;

1158 9 is_all_on 0 4 1685 44 BitMask< unsigned short int, 16 >::is_all_on 0 1 314 0
71
inline bool ::BitMask< unsigned short int, 16 >::is_all_on(void) const;

1159 7 extract 0 4 1685 42 BitMask< unsigned short int, 16 >::extract 0 1 315 0
100
inline unsigned short int ::BitMask< unsigned short int, 16 >::extract(int low_bit, int size) const;

1160 5 store 0 4 1685 40 BitMask< unsigned short int, 16 >::store 0 1 316 0
104
inline void ::BitMask< unsigned short int, 16 >::store(unsigned short int value, int low_bit, int size);

1161 10 has_any_of 0 4 1685 45 BitMask< unsigned short int, 16 >::has_any_of 0 1 317 0
89
inline bool ::BitMask< unsigned short int, 16 >::has_any_of(int low_bit, int size) const;

1162 10 has_all_of 0 4 1685 45 BitMask< unsigned short int, 16 >::has_all_of 0 1 318 0
89
inline bool ::BitMask< unsigned short int, 16 >::has_all_of(int low_bit, int size) const;

1163 9 set_range 0 4 1685 44 BitMask< unsigned short int, 16 >::set_range 0 1 319 0
82
inline void ::BitMask< unsigned short int, 16 >::set_range(int low_bit, int size);

1164 11 clear_range 0 4 1685 46 BitMask< unsigned short int, 16 >::clear_range 0 1 320 0
84
inline void ::BitMask< unsigned short int, 16 >::clear_range(int low_bit, int size);

1165 12 set_range_to 0 4 1685 47 BitMask< unsigned short int, 16 >::set_range_to 0 1 321 0
97
inline void ::BitMask< unsigned short int, 16 >::set_range_to(bool value, int low_bit, int size);

1166 8 get_word 0 4 1685 43 BitMask< unsigned short int, 16 >::get_word 0 1 322 0
84
inline unsigned short int ::BitMask< unsigned short int, 16 >::get_word(void) const;

1167 8 set_word 0 4 1685 43 BitMask< unsigned short int, 16 >::set_word 0 1 323 0
84
inline void ::BitMask< unsigned short int, 16 >::set_word(unsigned short int value);

1168 15 get_num_on_bits 0 4 1685 50 BitMask< unsigned short int, 16 >::get_num_on_bits 0 1 324 0
76
inline int ::BitMask< unsigned short int, 16 >::get_num_on_bits(void) const;

1169 16 get_num_off_bits 0 4 1685 51 BitMask< unsigned short int, 16 >::get_num_off_bits 0 1 325 0
77
inline int ::BitMask< unsigned short int, 16 >::get_num_off_bits(void) const;

1170 17 get_lowest_on_bit 0 4 1685 52 BitMask< unsigned short int, 16 >::get_lowest_on_bit 0 1 326 0
78
inline int ::BitMask< unsigned short int, 16 >::get_lowest_on_bit(void) const;

1171 18 get_lowest_off_bit 0 4 1685 53 BitMask< unsigned short int, 16 >::get_lowest_off_bit 0 1 327 0
79
inline int ::BitMask< unsigned short int, 16 >::get_lowest_off_bit(void) const;

1172 18 get_highest_on_bit 0 4 1685 53 BitMask< unsigned short int, 16 >::get_highest_on_bit 0 1 328 0
79
inline int ::BitMask< unsigned short int, 16 >::get_highest_on_bit(void) const;

1173 19 get_highest_off_bit 0 4 1685 54 BitMask< unsigned short int, 16 >::get_highest_off_bit 0 1 329 0
80
inline int ::BitMask< unsigned short int, 16 >::get_highest_off_bit(void) const;

1174 29 get_next_higher_different_bit 0 4 1685 64 BitMask< unsigned short int, 16 >::get_next_higher_different_bit 0 1 330 0
97
inline int ::BitMask< unsigned short int, 16 >::get_next_higher_different_bit(int low_bit) const;

1175 15 invert_in_place 0 4 1685 50 BitMask< unsigned short int, 16 >::invert_in_place 0 1 331 0
71
inline void ::BitMask< unsigned short int, 16 >::invert_in_place(void);

1176 18 has_bits_in_common 0 4 1685 53 BitMask< unsigned short int, 16 >::has_bits_in_common 0 1 332 0
122
inline bool ::BitMask< unsigned short int, 16 >::has_bits_in_common(BitMask< unsigned short int, 16 > const &other) const;

1177 5 clear 0 4 1685 40 BitMask< unsigned short int, 16 >::clear 0 1 333 0
61
inline void ::BitMask< unsigned short int, 16 >::clear(void);

1178 6 output 0 4 1685 41 BitMask< unsigned short int, 16 >::output 0 1 334 0
69
void ::BitMask< unsigned short int, 16 >::output(ostream &out) const;

1179 13 output_binary 0 4 1685 48 BitMask< unsigned short int, 16 >::output_binary 0 2 335 336 0
100
void ::BitMask< unsigned short int, 16 >::output_binary(ostream &out, int spaces_every = (4)) const;

1180 10 output_hex 0 4 1685 45 BitMask< unsigned short int, 16 >::output_hex 0 2 337 338 0
97
void ::BitMask< unsigned short int, 16 >::output_hex(ostream &out, int spaces_every = (4)) const;

1181 5 write 0 4 1685 40 BitMask< unsigned short int, 16 >::write 0 2 339 340 0
92
void ::BitMask< unsigned short int, 16 >::write(ostream &out, int indent_level = (0)) const;

1182 11 operator == 0 4 1685 46 BitMask< unsigned short int, 16 >::operator == 0 1 341 0
115
inline bool ::BitMask< unsigned short int, 16 >::operator ==(BitMask< unsigned short int, 16 > const &other) const;

1183 11 operator != 0 4 1685 46 BitMask< unsigned short int, 16 >::operator != 0 1 342 0
115
inline bool ::BitMask< unsigned short int, 16 >::operator !=(BitMask< unsigned short int, 16 > const &other) const;

1184 10 operator < 0 4 1685 45 BitMask< unsigned short int, 16 >::operator < 0 1 343 0
114
inline bool ::BitMask< unsigned short int, 16 >::operator <(BitMask< unsigned short int, 16 > const &other) const;

1185 10 compare_to 0 4 1685 45 BitMask< unsigned short int, 16 >::compare_to 0 1 344 0
113
inline int ::BitMask< unsigned short int, 16 >::compare_to(BitMask< unsigned short int, 16 > const &other) const;

1186 10 operator & 0 4 1685 45 BitMask< unsigned short int, 16 >::operator & 0 1 345 0
143
inline BitMask< unsigned short int, 16 > ::BitMask< unsigned short int, 16 >::operator &(BitMask< unsigned short int, 16 > const &other) const;

1187 10 operator | 0 4 1685 45 BitMask< unsigned short int, 16 >::operator | 0 1 346 0
143
inline BitMask< unsigned short int, 16 > ::BitMask< unsigned short int, 16 >::operator |(BitMask< unsigned short int, 16 > const &other) const;

1188 10 operator ^ 0 4 1685 45 BitMask< unsigned short int, 16 >::operator ^ 0 1 347 0
143
inline BitMask< unsigned short int, 16 > ::BitMask< unsigned short int, 16 >::operator ^(BitMask< unsigned short int, 16 > const &other) const;

1189 10 operator ~ 0 68 1685 45 BitMask< unsigned short int, 16 >::operator ~ 0 1 348 0
101
inline BitMask< unsigned short int, 16 > ::BitMask< unsigned short int, 16 >::operator ~(void) const;

1190 11 operator << 0 4 1685 46 BitMask< unsigned short int, 16 >::operator << 0 1 349 0
107
inline BitMask< unsigned short int, 16 > ::BitMask< unsigned short int, 16 >::operator <<(int shift) const;

1191 11 operator >> 0 4 1685 46 BitMask< unsigned short int, 16 >::operator >> 0 1 350 0
107
inline BitMask< unsigned short int, 16 > ::BitMask< unsigned short int, 16 >::operator >>(int shift) const;

1192 11 operator &= 0 4 1685 46 BitMask< unsigned short int, 16 >::operator &= 0 1 351 0
109
inline void ::BitMask< unsigned short int, 16 >::operator &=(BitMask< unsigned short int, 16 > const &other);

1193 11 operator |= 0 4 1685 46 BitMask< unsigned short int, 16 >::operator |= 0 1 352 0
109
inline void ::BitMask< unsigned short int, 16 >::operator |=(BitMask< unsigned short int, 16 > const &other);

1194 11 operator ^= 0 4 1685 46 BitMask< unsigned short int, 16 >::operator ^= 0 1 353 0
109
inline void ::BitMask< unsigned short int, 16 >::operator ^=(BitMask< unsigned short int, 16 > const &other);

1195 12 operator <<= 0 4 1685 47 BitMask< unsigned short int, 16 >::operator <<= 0 1 354 0
73
inline void ::BitMask< unsigned short int, 16 >::operator <<=(int shift);

1196 12 operator >>= 0 4 1685 47 BitMask< unsigned short int, 16 >::operator >>= 0 1 355 0
73
inline void ::BitMask< unsigned short int, 16 >::operator >>=(int shift);

1197 19 flood_down_in_place 0 4 1685 54 BitMask< unsigned short int, 16 >::flood_down_in_place 0 1 356 0
75
inline void ::BitMask< unsigned short int, 16 >::flood_down_in_place(void);

1198 17 flood_up_in_place 0 4 1685 52 BitMask< unsigned short int, 16 >::flood_up_in_place 0 1 357 0
73
inline void ::BitMask< unsigned short int, 16 >::flood_up_in_place(void);

1199 15 flood_bits_down 0 4 1685 50 BitMask< unsigned short int, 16 >::flood_bits_down 0 1 358 0
106
inline BitMask< unsigned short int, 16 > ::BitMask< unsigned short int, 16 >::flood_bits_down(void) const;

1200 13 flood_bits_up 0 4 1685 48 BitMask< unsigned short int, 16 >::flood_bits_up 0 1 359 0
104
inline BitMask< unsigned short int, 16 > ::BitMask< unsigned short int, 16 >::flood_bits_up(void) const;

1201 21 keep_next_highest_bit 0 4 1685 56 BitMask< unsigned short int, 16 >::keep_next_highest_bit 0 3 360 361 362 0
385
inline BitMask< unsigned short int, 16 > ::BitMask< unsigned short int, 16 >::keep_next_highest_bit(void) const;
inline BitMask< unsigned short int, 16 > ::BitMask< unsigned short int, 16 >::keep_next_highest_bit(int index) const;
inline BitMask< unsigned short int, 16 > ::BitMask< unsigned short int, 16 >::keep_next_highest_bit(BitMask< unsigned short int, 16 > const &other) const;

1202 20 keep_next_lowest_bit 0 4 1685 55 BitMask< unsigned short int, 16 >::keep_next_lowest_bit 0 3 363 364 365 0
382
inline BitMask< unsigned short int, 16 > ::BitMask< unsigned short int, 16 >::keep_next_lowest_bit(void) const;
inline BitMask< unsigned short int, 16 > ::BitMask< unsigned short int, 16 >::keep_next_lowest_bit(int index) const;
inline BitMask< unsigned short int, 16 > ::BitMask< unsigned short int, 16 >::keep_next_lowest_bit(BitMask< unsigned short int, 16 > const &other) const;

1203 7 get_key 0 4 1685 42 BitMask< unsigned short int, 16 >::get_key 0 1 366 0
68
inline int ::BitMask< unsigned short int, 16 >::get_key(void) const;

1204 11 __nonzero__ 0 4 1685 46 BitMask< unsigned short int, 16 >::__nonzero__ 0 1 367 0
73
inline bool ::BitMask< unsigned short int, 16 >::__nonzero__(void) const;

1205 14 get_class_type 0 4 1685 49 BitMask< unsigned short int, 16 >::get_class_type 0 1 368 0
76
static TypeHandle ::BitMask< unsigned short int, 16 >::get_class_type(void);

1206 7 BitMask 0 4 1686 36 BitMask< unsigned int, 32 >::BitMask 0 3 369 370 371 0
212
inline ::BitMask< unsigned int, 32 >::BitMask(void);
inline ::BitMask< unsigned int, 32 >::BitMask(unsigned int init_value);
inline ::BitMask< unsigned int, 32 >::BitMask(BitMask< unsigned int, 32 > const &copy);

1207 10 operator = 0 4 1686 39 BitMask< unsigned int, 32 >::operator = 0 1 372 0
119
inline BitMask< unsigned int, 32 > &::BitMask< unsigned int, 32 >::operator =(BitMask< unsigned int, 32 > const &copy);

1208 6 all_on 0 4 1686 35 BitMask< unsigned int, 32 >::all_on 0 1 373 0
86
static inline BitMask< unsigned int, 32 > ::BitMask< unsigned int, 32 >::all_on(void);

1209 7 all_off 0 4 1686 36 BitMask< unsigned int, 32 >::all_off 0 1 374 0
87
static inline BitMask< unsigned int, 32 > ::BitMask< unsigned int, 32 >::all_off(void);

1210 8 lower_on 0 4 1686 37 BitMask< unsigned int, 32 >::lower_on 0 1 375 0
95
static inline BitMask< unsigned int, 32 > ::BitMask< unsigned int, 32 >::lower_on(int on_bits);

1211 3 bit 0 4 1686 32 BitMask< unsigned int, 32 >::bit 0 1 376 0
88
static inline BitMask< unsigned int, 32 > ::BitMask< unsigned int, 32 >::bit(int index);

1212 5 range 0 4 1686 34 BitMask< unsigned int, 32 >::range 0 1 377 0
102
static inline BitMask< unsigned int, 32 > ::BitMask< unsigned int, 32 >::range(int low_bit, int size);

1213 8 ~BitMask 0 4 1686 37 BitMask< unsigned int, 32 >::~BitMask 0 0 0
53
inline ::BitMask< unsigned int, 32 >::~BitMask(void);

1214 16 has_max_num_bits 0 4 1686 45 BitMask< unsigned int, 32 >::has_max_num_bits 0 1 378 0
73
static inline bool ::BitMask< unsigned int, 32 >::has_max_num_bits(void);

1215 16 get_max_num_bits 0 4 1686 45 BitMask< unsigned int, 32 >::get_max_num_bits 0 1 379 0
72
static inline int ::BitMask< unsigned int, 32 >::get_max_num_bits(void);

1216 12 get_num_bits 0 4 1686 41 BitMask< unsigned int, 32 >::get_num_bits 0 1 380 0
68
static inline int ::BitMask< unsigned int, 32 >::get_num_bits(void);

1217 7 get_bit 0 4 1686 36 BitMask< unsigned int, 32 >::get_bit 0 1 381 0
68
inline bool ::BitMask< unsigned int, 32 >::get_bit(int index) const;

1218 7 set_bit 0 4 1686 36 BitMask< unsigned int, 32 >::set_bit 0 1 382 0
62
inline void ::BitMask< unsigned int, 32 >::set_bit(int index);

1219 9 clear_bit 0 4 1686 38 BitMask< unsigned int, 32 >::clear_bit 0 1 383 0
64
inline void ::BitMask< unsigned int, 32 >::clear_bit(int index);

1220 10 set_bit_to 0 4 1686 39 BitMask< unsigned int, 32 >::set_bit_to 0 1 384 0
77
inline void ::BitMask< unsigned int, 32 >::set_bit_to(int index, bool value);

1221 7 is_zero 0 4 1686 36 BitMask< unsigned int, 32 >::is_zero 0 1 385 0
63
inline bool ::BitMask< unsigned int, 32 >::is_zero(void) const;

1222 9 is_all_on 0 4 1686 38 BitMask< unsigned int, 32 >::is_all_on 0 1 386 0
65
inline bool ::BitMask< unsigned int, 32 >::is_all_on(void) const;

1223 7 extract 0 4 1686 36 BitMask< unsigned int, 32 >::extract 0 1 387 0
88
inline unsigned int ::BitMask< unsigned int, 32 >::extract(int low_bit, int size) const;

1224 5 store 0 4 1686 34 BitMask< unsigned int, 32 >::store 0 1 388 0
92
inline void ::BitMask< unsigned int, 32 >::store(unsigned int value, int low_bit, int size);

1225 10 has_any_of 0 4 1686 39 BitMask< unsigned int, 32 >::has_any_of 0 1 389 0
83
inline bool ::BitMask< unsigned int, 32 >::has_any_of(int low_bit, int size) const;

1226 10 has_all_of 0 4 1686 39 BitMask< unsigned int, 32 >::has_all_of 0 1 390 0
83
inline bool ::BitMask< unsigned int, 32 >::has_all_of(int low_bit, int size) const;

1227 9 set_range 0 4 1686 38 BitMask< unsigned int, 32 >::set_range 0 1 391 0
76
inline void ::BitMask< unsigned int, 32 >::set_range(int low_bit, int size);

1228 11 clear_range 0 4 1686 40 BitMask< unsigned int, 32 >::clear_range 0 1 392 0
78
inline void ::BitMask< unsigned int, 32 >::clear_range(int low_bit, int size);

1229 12 set_range_to 0 4 1686 41 BitMask< unsigned int, 32 >::set_range_to 0 1 393 0
91
inline void ::BitMask< unsigned int, 32 >::set_range_to(bool value, int low_bit, int size);

1230 8 get_word 0 4 1686 37 BitMask< unsigned int, 32 >::get_word 0 1 394 0
72
inline unsigned int ::BitMask< unsigned int, 32 >::get_word(void) const;

1231 8 set_word 0 4 1686 37 BitMask< unsigned int, 32 >::set_word 0 1 395 0
72
inline void ::BitMask< unsigned int, 32 >::set_word(unsigned int value);

1232 15 get_num_on_bits 0 4 1686 44 BitMask< unsigned int, 32 >::get_num_on_bits 0 1 396 0
70
inline int ::BitMask< unsigned int, 32 >::get_num_on_bits(void) const;

1233 16 get_num_off_bits 0 4 1686 45 BitMask< unsigned int, 32 >::get_num_off_bits 0 1 397 0
71
inline int ::BitMask< unsigned int, 32 >::get_num_off_bits(void) const;

1234 17 get_lowest_on_bit 0 4 1686 46 BitMask< unsigned int, 32 >::get_lowest_on_bit 0 1 398 0
72
inline int ::BitMask< unsigned int, 32 >::get_lowest_on_bit(void) const;

1235 18 get_lowest_off_bit 0 4 1686 47 BitMask< unsigned int, 32 >::get_lowest_off_bit 0 1 399 0
73
inline int ::BitMask< unsigned int, 32 >::get_lowest_off_bit(void) const;

1236 18 get_highest_on_bit 0 4 1686 47 BitMask< unsigned int, 32 >::get_highest_on_bit 0 1 400 0
73
inline int ::BitMask< unsigned int, 32 >::get_highest_on_bit(void) const;

1237 19 get_highest_off_bit 0 4 1686 48 BitMask< unsigned int, 32 >::get_highest_off_bit 0 1 401 0
74
inline int ::BitMask< unsigned int, 32 >::get_highest_off_bit(void) const;

1238 29 get_next_higher_different_bit 0 4 1686 58 BitMask< unsigned int, 32 >::get_next_higher_different_bit 0 1 402 0
91
inline int ::BitMask< unsigned int, 32 >::get_next_higher_different_bit(int low_bit) const;

1239 15 invert_in_place 0 4 1686 44 BitMask< unsigned int, 32 >::invert_in_place 0 1 403 0
65
inline void ::BitMask< unsigned int, 32 >::invert_in_place(void);

1240 18 has_bits_in_common 0 4 1686 47 BitMask< unsigned int, 32 >::has_bits_in_common 0 1 404 0
110
inline bool ::BitMask< unsigned int, 32 >::has_bits_in_common(BitMask< unsigned int, 32 > const &other) const;

1241 5 clear 0 4 1686 34 BitMask< unsigned int, 32 >::clear 0 1 405 0
55
inline void ::BitMask< unsigned int, 32 >::clear(void);

1242 6 output 0 4 1686 35 BitMask< unsigned int, 32 >::output 0 1 406 0
63
void ::BitMask< unsigned int, 32 >::output(ostream &out) const;

1243 13 output_binary 0 4 1686 42 BitMask< unsigned int, 32 >::output_binary 0 2 407 408 0
94
void ::BitMask< unsigned int, 32 >::output_binary(ostream &out, int spaces_every = (4)) const;

1244 10 output_hex 0 4 1686 39 BitMask< unsigned int, 32 >::output_hex 0 2 409 410 0
91
void ::BitMask< unsigned int, 32 >::output_hex(ostream &out, int spaces_every = (4)) const;

1245 5 write 0 4 1686 34 BitMask< unsigned int, 32 >::write 0 2 411 412 0
86
void ::BitMask< unsigned int, 32 >::write(ostream &out, int indent_level = (0)) const;

1246 11 operator == 0 4 1686 40 BitMask< unsigned int, 32 >::operator == 0 1 413 0
103
inline bool ::BitMask< unsigned int, 32 >::operator ==(BitMask< unsigned int, 32 > const &other) const;

1247 11 operator != 0 4 1686 40 BitMask< unsigned int, 32 >::operator != 0 1 414 0
103
inline bool ::BitMask< unsigned int, 32 >::operator !=(BitMask< unsigned int, 32 > const &other) const;

1248 10 operator < 0 4 1686 39 BitMask< unsigned int, 32 >::operator < 0 1 415 0
102
inline bool ::BitMask< unsigned int, 32 >::operator <(BitMask< unsigned int, 32 > const &other) const;

1249 10 compare_to 0 4 1686 39 BitMask< unsigned int, 32 >::compare_to 0 1 416 0
101
inline int ::BitMask< unsigned int, 32 >::compare_to(BitMask< unsigned int, 32 > const &other) const;

1250 10 operator & 0 4 1686 39 BitMask< unsigned int, 32 >::operator & 0 1 417 0
125
inline BitMask< unsigned int, 32 > ::BitMask< unsigned int, 32 >::operator &(BitMask< unsigned int, 32 > const &other) const;

1251 10 operator | 0 4 1686 39 BitMask< unsigned int, 32 >::operator | 0 1 418 0
125
inline BitMask< unsigned int, 32 > ::BitMask< unsigned int, 32 >::operator |(BitMask< unsigned int, 32 > const &other) const;

1252 10 operator ^ 0 4 1686 39 BitMask< unsigned int, 32 >::operator ^ 0 1 419 0
125
inline BitMask< unsigned int, 32 > ::BitMask< unsigned int, 32 >::operator ^(BitMask< unsigned int, 32 > const &other) const;

1253 10 operator ~ 0 68 1686 39 BitMask< unsigned int, 32 >::operator ~ 0 1 420 0
89
inline BitMask< unsigned int, 32 > ::BitMask< unsigned int, 32 >::operator ~(void) const;

1254 11 operator << 0 4 1686 40 BitMask< unsigned int, 32 >::operator << 0 1 421 0
95
inline BitMask< unsigned int, 32 > ::BitMask< unsigned int, 32 >::operator <<(int shift) const;

1255 11 operator >> 0 4 1686 40 BitMask< unsigned int, 32 >::operator >> 0 1 422 0
95
inline BitMask< unsigned int, 32 > ::BitMask< unsigned int, 32 >::operator >>(int shift) const;

1256 11 operator &= 0 4 1686 40 BitMask< unsigned int, 32 >::operator &= 0 1 423 0
97
inline void ::BitMask< unsigned int, 32 >::operator &=(BitMask< unsigned int, 32 > const &other);

1257 11 operator |= 0 4 1686 40 BitMask< unsigned int, 32 >::operator |= 0 1 424 0
97
inline void ::BitMask< unsigned int, 32 >::operator |=(BitMask< unsigned int, 32 > const &other);

1258 11 operator ^= 0 4 1686 40 BitMask< unsigned int, 32 >::operator ^= 0 1 425 0
97
inline void ::BitMask< unsigned int, 32 >::operator ^=(BitMask< unsigned int, 32 > const &other);

1259 12 operator <<= 0 4 1686 41 BitMask< unsigned int, 32 >::operator <<= 0 1 426 0
67
inline void ::BitMask< unsigned int, 32 >::operator <<=(int shift);

1260 12 operator >>= 0 4 1686 41 BitMask< unsigned int, 32 >::operator >>= 0 1 427 0
67
inline void ::BitMask< unsigned int, 32 >::operator >>=(int shift);

1261 19 flood_down_in_place 0 4 1686 48 BitMask< unsigned int, 32 >::flood_down_in_place 0 1 428 0
69
inline void ::BitMask< unsigned int, 32 >::flood_down_in_place(void);

1262 17 flood_up_in_place 0 4 1686 46 BitMask< unsigned int, 32 >::flood_up_in_place 0 1 429 0
67
inline void ::BitMask< unsigned int, 32 >::flood_up_in_place(void);

1263 15 flood_bits_down 0 4 1686 44 BitMask< unsigned int, 32 >::flood_bits_down 0 1 430 0
94
inline BitMask< unsigned int, 32 > ::BitMask< unsigned int, 32 >::flood_bits_down(void) const;

1264 13 flood_bits_up 0 4 1686 42 BitMask< unsigned int, 32 >::flood_bits_up 0 1 431 0
92
inline BitMask< unsigned int, 32 > ::BitMask< unsigned int, 32 >::flood_bits_up(void) const;

1265 21 keep_next_highest_bit 0 4 1686 50 BitMask< unsigned int, 32 >::keep_next_highest_bit 0 3 432 433 434 0
343
inline BitMask< unsigned int, 32 > ::BitMask< unsigned int, 32 >::keep_next_highest_bit(void) const;
inline BitMask< unsigned int, 32 > ::BitMask< unsigned int, 32 >::keep_next_highest_bit(int index) const;
inline BitMask< unsigned int, 32 > ::BitMask< unsigned int, 32 >::keep_next_highest_bit(BitMask< unsigned int, 32 > const &other) const;

1266 20 keep_next_lowest_bit 0 4 1686 49 BitMask< unsigned int, 32 >::keep_next_lowest_bit 0 3 435 436 437 0
340
inline BitMask< unsigned int, 32 > ::BitMask< unsigned int, 32 >::keep_next_lowest_bit(void) const;
inline BitMask< unsigned int, 32 > ::BitMask< unsigned int, 32 >::keep_next_lowest_bit(int index) const;
inline BitMask< unsigned int, 32 > ::BitMask< unsigned int, 32 >::keep_next_lowest_bit(BitMask< unsigned int, 32 > const &other) const;

1267 7 get_key 0 4 1686 36 BitMask< unsigned int, 32 >::get_key 0 1 438 0
62
inline int ::BitMask< unsigned int, 32 >::get_key(void) const;

1268 11 __nonzero__ 0 4 1686 40 BitMask< unsigned int, 32 >::__nonzero__ 0 1 439 0
67
inline bool ::BitMask< unsigned int, 32 >::__nonzero__(void) const;

1269 14 get_class_type 0 4 1686 43 BitMask< unsigned int, 32 >::get_class_type 0 1 440 0
70
static TypeHandle ::BitMask< unsigned int, 32 >::get_class_type(void);

1270 7 BitMask 0 4 1687 40 BitMask< unsigned __int64, 64 >::BitMask 0 3 441 442 443 0
232
inline ::BitMask< unsigned __int64, 64 >::BitMask(void);
inline ::BitMask< unsigned __int64, 64 >::BitMask(unsigned __int64 init_value);
inline ::BitMask< unsigned __int64, 64 >::BitMask(BitMask< unsigned __int64, 64 > const &copy);

1271 10 operator = 0 4 1687 43 BitMask< unsigned __int64, 64 >::operator = 0 1 444 0
131
inline BitMask< unsigned __int64, 64 > &::BitMask< unsigned __int64, 64 >::operator =(BitMask< unsigned __int64, 64 > const &copy);

1272 6 all_on 0 4 1687 39 BitMask< unsigned __int64, 64 >::all_on 0 1 445 0
94
static inline BitMask< unsigned __int64, 64 > ::BitMask< unsigned __int64, 64 >::all_on(void);

1273 7 all_off 0 4 1687 40 BitMask< unsigned __int64, 64 >::all_off 0 1 446 0
95
static inline BitMask< unsigned __int64, 64 > ::BitMask< unsigned __int64, 64 >::all_off(void);

1274 8 lower_on 0 4 1687 41 BitMask< unsigned __int64, 64 >::lower_on 0 1 447 0
103
static inline BitMask< unsigned __int64, 64 > ::BitMask< unsigned __int64, 64 >::lower_on(int on_bits);

1275 3 bit 0 4 1687 36 BitMask< unsigned __int64, 64 >::bit 0 1 448 0
96
static inline BitMask< unsigned __int64, 64 > ::BitMask< unsigned __int64, 64 >::bit(int index);

1276 5 range 0 4 1687 38 BitMask< unsigned __int64, 64 >::range 0 1 449 0
110
static inline BitMask< unsigned __int64, 64 > ::BitMask< unsigned __int64, 64 >::range(int low_bit, int size);

1277 8 ~BitMask 0 4 1687 41 BitMask< unsigned __int64, 64 >::~BitMask 0 0 0
57
inline ::BitMask< unsigned __int64, 64 >::~BitMask(void);

1278 16 has_max_num_bits 0 4 1687 49 BitMask< unsigned __int64, 64 >::has_max_num_bits 0 1 450 0
77
static inline bool ::BitMask< unsigned __int64, 64 >::has_max_num_bits(void);

1279 16 get_max_num_bits 0 4 1687 49 BitMask< unsigned __int64, 64 >::get_max_num_bits 0 1 451 0
76
static inline int ::BitMask< unsigned __int64, 64 >::get_max_num_bits(void);

1280 12 get_num_bits 0 4 1687 45 BitMask< unsigned __int64, 64 >::get_num_bits 0 1 452 0
72
static inline int ::BitMask< unsigned __int64, 64 >::get_num_bits(void);

1281 7 get_bit 0 4 1687 40 BitMask< unsigned __int64, 64 >::get_bit 0 1 453 0
72
inline bool ::BitMask< unsigned __int64, 64 >::get_bit(int index) const;

1282 7 set_bit 0 4 1687 40 BitMask< unsigned __int64, 64 >::set_bit 0 1 454 0
66
inline void ::BitMask< unsigned __int64, 64 >::set_bit(int index);

1283 9 clear_bit 0 4 1687 42 BitMask< unsigned __int64, 64 >::clear_bit 0 1 455 0
68
inline void ::BitMask< unsigned __int64, 64 >::clear_bit(int index);

1284 10 set_bit_to 0 4 1687 43 BitMask< unsigned __int64, 64 >::set_bit_to 0 1 456 0
81
inline void ::BitMask< unsigned __int64, 64 >::set_bit_to(int index, bool value);

1285 7 is_zero 0 4 1687 40 BitMask< unsigned __int64, 64 >::is_zero 0 1 457 0
67
inline bool ::BitMask< unsigned __int64, 64 >::is_zero(void) const;

1286 9 is_all_on 0 4 1687 42 BitMask< unsigned __int64, 64 >::is_all_on 0 1 458 0
69
inline bool ::BitMask< unsigned __int64, 64 >::is_all_on(void) const;

1287 7 extract 0 4 1687 40 BitMask< unsigned __int64, 64 >::extract 0 1 459 0
96
inline unsigned __int64 ::BitMask< unsigned __int64, 64 >::extract(int low_bit, int size) const;

1288 5 store 0 4 1687 38 BitMask< unsigned __int64, 64 >::store 0 1 460 0
100
inline void ::BitMask< unsigned __int64, 64 >::store(unsigned __int64 value, int low_bit, int size);

1289 10 has_any_of 0 4 1687 43 BitMask< unsigned __int64, 64 >::has_any_of 0 1 461 0
87
inline bool ::BitMask< unsigned __int64, 64 >::has_any_of(int low_bit, int size) const;

1290 10 has_all_of 0 4 1687 43 BitMask< unsigned __int64, 64 >::has_all_of 0 1 462 0
87
inline bool ::BitMask< unsigned __int64, 64 >::has_all_of(int low_bit, int size) const;

1291 9 set_range 0 4 1687 42 BitMask< unsigned __int64, 64 >::set_range 0 1 463 0
80
inline void ::BitMask< unsigned __int64, 64 >::set_range(int low_bit, int size);

1292 11 clear_range 0 4 1687 44 BitMask< unsigned __int64, 64 >::clear_range 0 1 464 0
82
inline void ::BitMask< unsigned __int64, 64 >::clear_range(int low_bit, int size);

1293 12 set_range_to 0 4 1687 45 BitMask< unsigned __int64, 64 >::set_range_to 0 1 465 0
95
inline void ::BitMask< unsigned __int64, 64 >::set_range_to(bool value, int low_bit, int size);

1294 8 get_word 0 4 1687 41 BitMask< unsigned __int64, 64 >::get_word 0 1 466 0
80
inline unsigned __int64 ::BitMask< unsigned __int64, 64 >::get_word(void) const;

1295 8 set_word 0 4 1687 41 BitMask< unsigned __int64, 64 >::set_word 0 1 467 0
80
inline void ::BitMask< unsigned __int64, 64 >::set_word(unsigned __int64 value);

1296 15 get_num_on_bits 0 4 1687 48 BitMask< unsigned __int64, 64 >::get_num_on_bits 0 1 468 0
74
inline int ::BitMask< unsigned __int64, 64 >::get_num_on_bits(void) const;

1297 16 get_num_off_bits 0 4 1687 49 BitMask< unsigned __int64, 64 >::get_num_off_bits 0 1 469 0
75
inline int ::BitMask< unsigned __int64, 64 >::get_num_off_bits(void) const;

1298 17 get_lowest_on_bit 0 4 1687 50 BitMask< unsigned __int64, 64 >::get_lowest_on_bit 0 1 470 0
76
inline int ::BitMask< unsigned __int64, 64 >::get_lowest_on_bit(void) const;

1299 18 get_lowest_off_bit 0 4 1687 51 BitMask< unsigned __int64, 64 >::get_lowest_off_bit 0 1 471 0
77
inline int ::BitMask< unsigned __int64, 64 >::get_lowest_off_bit(void) const;

1300 18 get_highest_on_bit 0 4 1687 51 BitMask< unsigned __int64, 64 >::get_highest_on_bit 0 1 472 0
77
inline int ::BitMask< unsigned __int64, 64 >::get_highest_on_bit(void) const;

1301 19 get_highest_off_bit 0 4 1687 52 BitMask< unsigned __int64, 64 >::get_highest_off_bit 0 1 473 0
78
inline int ::BitMask< unsigned __int64, 64 >::get_highest_off_bit(void) const;

1302 29 get_next_higher_different_bit 0 4 1687 62 BitMask< unsigned __int64, 64 >::get_next_higher_different_bit 0 1 474 0
95
inline int ::BitMask< unsigned __int64, 64 >::get_next_higher_different_bit(int low_bit) const;

1303 15 invert_in_place 0 4 1687 48 BitMask< unsigned __int64, 64 >::invert_in_place 0 1 475 0
69
inline void ::BitMask< unsigned __int64, 64 >::invert_in_place(void);

1304 18 has_bits_in_common 0 4 1687 51 BitMask< unsigned __int64, 64 >::has_bits_in_common 0 1 476 0
118
inline bool ::BitMask< unsigned __int64, 64 >::has_bits_in_common(BitMask< unsigned __int64, 64 > const &other) const;

1305 5 clear 0 4 1687 38 BitMask< unsigned __int64, 64 >::clear 0 1 477 0
59
inline void ::BitMask< unsigned __int64, 64 >::clear(void);

1306 6 output 0 4 1687 39 BitMask< unsigned __int64, 64 >::output 0 1 478 0
67
void ::BitMask< unsigned __int64, 64 >::output(ostream &out) const;

1307 13 output_binary 0 4 1687 46 BitMask< unsigned __int64, 64 >::output_binary 0 2 479 480 0
98
void ::BitMask< unsigned __int64, 64 >::output_binary(ostream &out, int spaces_every = (4)) const;

1308 10 output_hex 0 4 1687 43 BitMask< unsigned __int64, 64 >::output_hex 0 2 481 482 0
95
void ::BitMask< unsigned __int64, 64 >::output_hex(ostream &out, int spaces_every = (4)) const;

1309 5 write 0 4 1687 38 BitMask< unsigned __int64, 64 >::write 0 2 483 484 0
90
void ::BitMask< unsigned __int64, 64 >::write(ostream &out, int indent_level = (0)) const;

1310 11 operator == 0 4 1687 44 BitMask< unsigned __int64, 64 >::operator == 0 1 485 0
111
inline bool ::BitMask< unsigned __int64, 64 >::operator ==(BitMask< unsigned __int64, 64 > const &other) const;

1311 11 operator != 0 4 1687 44 BitMask< unsigned __int64, 64 >::operator != 0 1 486 0
111
inline bool ::BitMask< unsigned __int64, 64 >::operator !=(BitMask< unsigned __int64, 64 > const &other) const;

1312 10 operator < 0 4 1687 43 BitMask< unsigned __int64, 64 >::operator < 0 1 487 0
110
inline bool ::BitMask< unsigned __int64, 64 >::operator <(BitMask< unsigned __int64, 64 > const &other) const;

1313 10 compare_to 0 4 1687 43 BitMask< unsigned __int64, 64 >::compare_to 0 1 488 0
109
inline int ::BitMask< unsigned __int64, 64 >::compare_to(BitMask< unsigned __int64, 64 > const &other) const;

1314 10 operator & 0 4 1687 43 BitMask< unsigned __int64, 64 >::operator & 0 1 489 0
137
inline BitMask< unsigned __int64, 64 > ::BitMask< unsigned __int64, 64 >::operator &(BitMask< unsigned __int64, 64 > const &other) const;

1315 10 operator | 0 4 1687 43 BitMask< unsigned __int64, 64 >::operator | 0 1 490 0
137
inline BitMask< unsigned __int64, 64 > ::BitMask< unsigned __int64, 64 >::operator |(BitMask< unsigned __int64, 64 > const &other) const;

1316 10 operator ^ 0 4 1687 43 BitMask< unsigned __int64, 64 >::operator ^ 0 1 491 0
137
inline BitMask< unsigned __int64, 64 > ::BitMask< unsigned __int64, 64 >::operator ^(BitMask< unsigned __int64, 64 > const &other) const;

1317 10 operator ~ 0 68 1687 43 BitMask< unsigned __int64, 64 >::operator ~ 0 1 492 0
97
inline BitMask< unsigned __int64, 64 > ::BitMask< unsigned __int64, 64 >::operator ~(void) const;

1318 11 operator << 0 4 1687 44 BitMask< unsigned __int64, 64 >::operator << 0 1 493 0
103
inline BitMask< unsigned __int64, 64 > ::BitMask< unsigned __int64, 64 >::operator <<(int shift) const;

1319 11 operator >> 0 4 1687 44 BitMask< unsigned __int64, 64 >::operator >> 0 1 494 0
103
inline BitMask< unsigned __int64, 64 > ::BitMask< unsigned __int64, 64 >::operator >>(int shift) const;

1320 11 operator &= 0 4 1687 44 BitMask< unsigned __int64, 64 >::operator &= 0 1 495 0
105
inline void ::BitMask< unsigned __int64, 64 >::operator &=(BitMask< unsigned __int64, 64 > const &other);

1321 11 operator |= 0 4 1687 44 BitMask< unsigned __int64, 64 >::operator |= 0 1 496 0
105
inline void ::BitMask< unsigned __int64, 64 >::operator |=(BitMask< unsigned __int64, 64 > const &other);

1322 11 operator ^= 0 4 1687 44 BitMask< unsigned __int64, 64 >::operator ^= 0 1 497 0
105
inline void ::BitMask< unsigned __int64, 64 >::operator ^=(BitMask< unsigned __int64, 64 > const &other);

1323 12 operator <<= 0 4 1687 45 BitMask< unsigned __int64, 64 >::operator <<= 0 1 498 0
71
inline void ::BitMask< unsigned __int64, 64 >::operator <<=(int shift);

1324 12 operator >>= 0 4 1687 45 BitMask< unsigned __int64, 64 >::operator >>= 0 1 499 0
71
inline void ::BitMask< unsigned __int64, 64 >::operator >>=(int shift);

1325 19 flood_down_in_place 0 4 1687 52 BitMask< unsigned __int64, 64 >::flood_down_in_place 0 1 500 0
73
inline void ::BitMask< unsigned __int64, 64 >::flood_down_in_place(void);

1326 17 flood_up_in_place 0 4 1687 50 BitMask< unsigned __int64, 64 >::flood_up_in_place 0 1 501 0
71
inline void ::BitMask< unsigned __int64, 64 >::flood_up_in_place(void);

1327 15 flood_bits_down 0 4 1687 48 BitMask< unsigned __int64, 64 >::flood_bits_down 0 1 502 0
102
inline BitMask< unsigned __int64, 64 > ::BitMask< unsigned __int64, 64 >::flood_bits_down(void) const;

1328 13 flood_bits_up 0 4 1687 46 BitMask< unsigned __int64, 64 >::flood_bits_up 0 1 503 0
100
inline BitMask< unsigned __int64, 64 > ::BitMask< unsigned __int64, 64 >::flood_bits_up(void) const;

1329 21 keep_next_highest_bit 0 4 1687 54 BitMask< unsigned __int64, 64 >::keep_next_highest_bit 0 3 504 505 506 0
371
inline BitMask< unsigned __int64, 64 > ::BitMask< unsigned __int64, 64 >::keep_next_highest_bit(void) const;
inline BitMask< unsigned __int64, 64 > ::BitMask< unsigned __int64, 64 >::keep_next_highest_bit(int index) const;
inline BitMask< unsigned __int64, 64 > ::BitMask< unsigned __int64, 64 >::keep_next_highest_bit(BitMask< unsigned __int64, 64 > const &other) const;

1330 20 keep_next_lowest_bit 0 4 1687 53 BitMask< unsigned __int64, 64 >::keep_next_lowest_bit 0 3 507 508 509 0
368
inline BitMask< unsigned __int64, 64 > ::BitMask< unsigned __int64, 64 >::keep_next_lowest_bit(void) const;
inline BitMask< unsigned __int64, 64 > ::BitMask< unsigned __int64, 64 >::keep_next_lowest_bit(int index) const;
inline BitMask< unsigned __int64, 64 > ::BitMask< unsigned __int64, 64 >::keep_next_lowest_bit(BitMask< unsigned __int64, 64 > const &other) const;

1331 7 get_key 0 4 1687 40 BitMask< unsigned __int64, 64 >::get_key 0 1 510 0
66
inline int ::BitMask< unsigned __int64, 64 >::get_key(void) const;

1332 11 __nonzero__ 0 4 1687 44 BitMask< unsigned __int64, 64 >::__nonzero__ 0 1 511 0
71
inline bool ::BitMask< unsigned __int64, 64 >::__nonzero__(void) const;

1333 14 get_class_type 0 4 1687 47 BitMask< unsigned __int64, 64 >::get_class_type 0 1 512 0
74
static TypeHandle ::BitMask< unsigned __int64, 64 >::get_class_type(void);

1334 8 BitArray 0 4 1688 18 BitArray::BitArray 0 4 513 514 515 516 1394
// Filename: bitArray.I
// Created by:  drose (20Jan06)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: BitArray::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: BitArray::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: BitArray::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: BitArray::Constructor (from SparseArray)
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
178
inline BitArray::BitArray(void);
inline BitArray::BitArray(unsigned int init_value);
inline BitArray::BitArray(BitArray const &copy);
BitArray::BitArray(SparseArray const &from);

1335 10 operator = 0 4 1688 20 BitArray::operator = 0 1 517 233
////////////////////////////////////////////////////////////////////
//     Function: BitArray::Copy Assignment Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
60
inline BitArray &BitArray::operator =(BitArray const &copy);

1336 6 all_on 0 4 1688 16 BitArray::all_on 0 1 518 317
////////////////////////////////////////////////////////////////////
//     Function: BitArray::Named all_on constructor
//       Access: Published, Static
//  Description: Returns a BitArray with an infinite array of bits,
//               all on.
////////////////////////////////////////////////////////////////////
46
static inline BitArray BitArray::all_on(void);

1337 7 all_off 0 4 1688 17 BitArray::all_off 0 1 519 284
////////////////////////////////////////////////////////////////////
//     Function: BitArray::Named all_on constructor
//       Access: Published, Static
//  Description: Returns a BitArray whose bits are all off.
////////////////////////////////////////////////////////////////////
47
static inline BitArray BitArray::all_off(void);

1338 8 lower_on 0 4 1688 18 BitArray::lower_on 0 1 520 295
////////////////////////////////////////////////////////////////////
//     Function: BitArray::Named lower_on constructor
//       Access: Published, Static
//  Description: Returns a BitArray whose lower on_bits bits are on.
////////////////////////////////////////////////////////////////////
55
static inline BitArray BitArray::lower_on(int on_bits);

1339 3 bit 0 4 1688 13 BitArray::bit 0 1 521 289
////////////////////////////////////////////////////////////////////
//     Function: BitArray::Named bit constructor
//       Access: Published, Static
//  Description: Returns a BitArray with only the indicated bit on.
////////////////////////////////////////////////////////////////////
48
static inline BitArray BitArray::bit(int index);

1340 5 range 0 4 1688 15 BitArray::range 0 1 522 323
////////////////////////////////////////////////////////////////////
//     Function: BitArray::Named range constructor
//       Access: Published, Static
//  Description: Returns a BitArray whose size bits, beginning at
//               low_bit, are on.
////////////////////////////////////////////////////////////////////
62
static inline BitArray BitArray::range(int low_bit, int size);

1341 9 ~BitArray 0 4 1688 19 BitArray::~BitArray 0 0 219
////////////////////////////////////////////////////////////////////
//     Function: BitArray::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
33
inline BitArray::~BitArray(void);

1342 16 has_max_num_bits 0 4 1688 26 BitArray::has_max_num_bits 0 1 523 714
////////////////////////////////////////////////////////////////////
//     Function: BitArray::has_max_num_bits
//       Access: Published, Static
//  Description: Returns true if there is a maximum number of bits
//               that may be stored in this structure, false
//               otherwise.  If this returns true, the number may be
//               queried in get_max_num_bits().
//
//               This method always returns false.  The BitArray has
//               no maximum number of bits.  This method is defined so
//               generic programming algorithms can use BitMask or
//               BitArray interchangeably.
////////////////////////////////////////////////////////////////////
52
static inline bool BitArray::has_max_num_bits(void);

1343 16 get_max_num_bits 0 4 1688 26 BitArray::get_max_num_bits 0 1 524 749
////////////////////////////////////////////////////////////////////
//     Function: BitArray::get_max_num_bits
//       Access: Published, Static
//  Description: If get_max_num_bits() returned true, this method may
//               be called to return the maximum number of bits that
//               may be stored in this structure.  It is an error to
//               call this if get_max_num_bits() return false.
//
//               It is always an error to call this method.  The
//               BitArray has no maximum number of bits.  This method
//               is defined so generic programming algorithms can use
//               BitMask or BitArray interchangeably.
////////////////////////////////////////////////////////////////////
51
static inline int BitArray::get_max_num_bits(void);

1344 21 get_num_bits_per_word 0 4 1688 31 BitArray::get_num_bits_per_word 0 1 525 476
////////////////////////////////////////////////////////////////////
//     Function: BitArray::get_num_bits_per_word
//       Access: Published, Static
//  Description: Returns the number of bits stored per word
//               internally.  This is of interest only in that it
//               limits the maximum number of bits that may be queried
//               or set at once by extract() and store().
////////////////////////////////////////////////////////////////////
56
static inline int BitArray::get_num_bits_per_word(void);

1345 12 get_num_bits 0 4 1688 22 BitArray::get_num_bits 0 1 526 604
////////////////////////////////////////////////////////////////////
//     Function: BitArray::get_num_bits
//       Access: Published
//  Description: Returns the current number of possibly different bits
//               in this array.  There are actually an infinite number
//               of bits, but every bit higher than this bit will have
//               the same value, either 0 or 1 (see
//               get_highest_bits()).
//
//               This number may grow and/or shrink automatically as
//               needed.
////////////////////////////////////////////////////////////////////
46
inline int BitArray::get_num_bits(void) const;

1346 7 get_bit 0 4 1688 17 BitArray::get_bit 0 1 527 442
////////////////////////////////////////////////////////////////////
//     Function: BitArray::get_bit
//       Access: Published
//  Description: Returns true if the nth bit is set, false if it is
//               cleared.  It is valid for n to increase beyond
//               get_num_bits(), but the return value get_num_bits()
//               will always be the same.
////////////////////////////////////////////////////////////////////
47
inline bool BitArray::get_bit(int index) const;

1347 7 set_bit 0 4 1688 17 BitArray::set_bit 0 1 528 317
////////////////////////////////////////////////////////////////////
//     Function: BitArray::set_bit
//       Access: Published
//  Description: Sets the nth bit on.  If n >= get_num_bits(), this
//               automatically extends the array.
////////////////////////////////////////////////////////////////////
41
inline void BitArray::set_bit(int index);

1348 9 clear_bit 0 4 1688 19 BitArray::clear_bit 0 1 529 320
////////////////////////////////////////////////////////////////////
//     Function: BitArray::clear_bit
//       Access: Published
//  Description: Sets the nth bit off.  If n >= get_num_bits(), this
//               automatically extends the array.
////////////////////////////////////////////////////////////////////
43
inline void BitArray::clear_bit(int index);

1349 10 set_bit_to 0 4 1688 20 BitArray::set_bit_to 0 1 530 310
////////////////////////////////////////////////////////////////////
//     Function: BitArray::set_bit_to
//       Access: Published
//  Description: Sets the nth bit either on or off, according to the
//               indicated bool value.
////////////////////////////////////////////////////////////////////
56
inline void BitArray::set_bit_to(int index, bool value);

1350 16 get_highest_bits 0 4 1688 26 BitArray::get_highest_bits 0 1 531 364
////////////////////////////////////////////////////////////////////
//     Function: BitArray::get_highest_bits
//       Access: Published
//  Description: Returns true if the infinite set of bits beyond
//               get_num_bits() are all on, or false of they are all
//               off.
////////////////////////////////////////////////////////////////////
51
inline bool BitArray::get_highest_bits(void) const;

1351 7 is_zero 0 4 1688 17 BitArray::is_zero 0 1 532 294
////////////////////////////////////////////////////////////////////
//     Function: BitArray::is_zero
//       Access: Published
//  Description: Returns true if the entire bitmask is zero, false
//               otherwise.
////////////////////////////////////////////////////////////////////
35
bool BitArray::is_zero(void) const;

1352 9 is_all_on 0 4 1688 19 BitArray::is_all_on 0 1 533 295
////////////////////////////////////////////////////////////////////
//     Function: BitArray::is_all_on
//       Access: Published
//  Description: Returns true if the entire bitmask is one, false
//               otherwise.
////////////////////////////////////////////////////////////////////
37
bool BitArray::is_all_on(void) const;

1353 7 extract 0 4 1688 17 BitArray::extract 0 1 534 438
////////////////////////////////////////////////////////////////////
//     Function: BitArray::extract
//       Access: Published
//  Description: Returns a word that represents only the indicated
//               range of bits within this BitArray, shifted to the
//               least-significant position.  size must be <=
//               get_num_bits_per_word().
////////////////////////////////////////////////////////////////////
67
inline unsigned int BitArray::extract(int low_bit, int size) const;

1354 5 store 0 4 1688 15 BitArray::store 0 1 535 310
////////////////////////////////////////////////////////////////////
//     Function: BitArray::store
//       Access: Published
//  Description: Stores the indicated word into the indicated range of
//               bits with this BitArray.
////////////////////////////////////////////////////////////////////
71
inline void BitArray::store(unsigned int value, int low_bit, int size);

1355 10 has_any_of 0 4 1688 20 BitArray::has_any_of 0 1 536 308
////////////////////////////////////////////////////////////////////
//     Function: BitArray::has_any_of
//       Access: Published
//  Description: Returns true if any bit in the indicated range is
//               set, false otherwise.
////////////////////////////////////////////////////////////////////
55
bool BitArray::has_any_of(int low_bit, int size) const;

1356 10 has_all_of 0 4 1688 20 BitArray::has_all_of 0 1 537 310
////////////////////////////////////////////////////////////////////
//     Function: BitArray::has_all_of
//       Access: Published
//  Description: Returns true if all bits in the indicated range are
//               set, false otherwise.
////////////////////////////////////////////////////////////////////
55
bool BitArray::has_all_of(int low_bit, int size) const;

1357 9 set_range 0 4 1688 19 BitArray::set_range 0 1 538 255
////////////////////////////////////////////////////////////////////
//     Function: BitArray::set_range
//       Access: Published
//  Description: Sets the indicated range of bits on.
////////////////////////////////////////////////////////////////////
48
void BitArray::set_range(int low_bit, int size);

1358 11 clear_range 0 4 1688 21 BitArray::clear_range 0 1 539 258
////////////////////////////////////////////////////////////////////
//     Function: BitArray::clear_range
//       Access: Published
//  Description: Sets the indicated range of bits off.
////////////////////////////////////////////////////////////////////
50
void BitArray::clear_range(int low_bit, int size);

1359 12 set_range_to 0 4 1688 22 BitArray::set_range_to 0 1 540 275
////////////////////////////////////////////////////////////////////
//     Function: BitArray::set_range_to
//       Access: Published
//  Description: Sets the indicated range of bits to either on or off.
////////////////////////////////////////////////////////////////////
70
inline void BitArray::set_range_to(bool value, int low_bit, int size);

1360 15 get_num_on_bits 0 4 1688 25 BitArray::get_num_on_bits 0 1 541 372
////////////////////////////////////////////////////////////////////
//     Function: BitArray::get_num_on_bits
//       Access: Published
//  Description: Returns the number of bits that are set to 1 in the
//               array.  Returns -1 if there are an infinite number of
//               1 bits.
////////////////////////////////////////////////////////////////////
42
int BitArray::get_num_on_bits(void) const;

1361 16 get_num_off_bits 0 4 1688 26 BitArray::get_num_off_bits 0 1 542 373
////////////////////////////////////////////////////////////////////
//     Function: BitArray::get_num_off_bits
//       Access: Published
//  Description: Returns the number of bits that are set to 0 in the
//               array.  Returns -1 if there are an infinite number of
//               0 bits.
////////////////////////////////////////////////////////////////////
43
int BitArray::get_num_off_bits(void) const;

1362 17 get_lowest_on_bit 0 4 1688 27 BitArray::get_lowest_on_bit 0 1 543 330
////////////////////////////////////////////////////////////////////
//     Function: BitArray::get_lowest_on_bit
//       Access: Published
//  Description: Returns the index of the lowest 1 bit in the array.
//               Returns -1 if there are no 1 bits.
////////////////////////////////////////////////////////////////////
44
int BitArray::get_lowest_on_bit(void) const;

1363 18 get_lowest_off_bit 0 4 1688 28 BitArray::get_lowest_off_bit 0 1 544 331
////////////////////////////////////////////////////////////////////
//     Function: BitArray::get_lowest_off_bit
//       Access: Published
//  Description: Returns the index of the lowest 0 bit in the array.
//               Returns -1 if there are no 0 bits.
////////////////////////////////////////////////////////////////////
45
int BitArray::get_lowest_off_bit(void) const;

1364 18 get_highest_on_bit 0 4 1688 28 BitArray::get_highest_on_bit 0 1 545 390
////////////////////////////////////////////////////////////////////
//     Function: BitArray::get_highest_on_bit
//       Access: Published
//  Description: Returns the index of the highest 1 bit in the array.
//               Returns -1 if there are no 1 bits or if there an
//               infinite number of 1 bits.
////////////////////////////////////////////////////////////////////
45
int BitArray::get_highest_on_bit(void) const;

1365 19 get_highest_off_bit 0 4 1688 29 BitArray::get_highest_off_bit 0 1 546 391
////////////////////////////////////////////////////////////////////
//     Function: BitArray::get_highest_off_bit
//       Access: Published
//  Description: Returns the index of the highest 0 bit in the array.
//               Returns -1 if there are no 0 bits or if there an
//               infinite number of 1 bits.
////////////////////////////////////////////////////////////////////
46
int BitArray::get_highest_off_bit(void) const;

1366 29 get_next_higher_different_bit 0 4 1688 39 BitArray::get_next_higher_different_bit 0 1 547 591
////////////////////////////////////////////////////////////////////
//     Function: BitArray::get_next_higher_different_bit
//       Access: Published
//  Description: Returns the index of the next bit in the array, above
//               low_bit, whose value is different that the value of
//               low_bit.  Returns low_bit again if all bits higher
//               than low_bit have the same value.
//
//               This can be used to quickly iterate through all of
//               the bits in the array.
////////////////////////////////////////////////////////////////////
63
int BitArray::get_next_higher_different_bit(int low_bit) const;

1367 13 get_num_words 0 4 1688 23 BitArray::get_num_words 0 1 548 304
////////////////////////////////////////////////////////////////////
//     Function: BitArray::get_num_words
//       Access: Published
//  Description: Returns the number of possibly-unique words stored in
//               the array.
////////////////////////////////////////////////////////////////////
47
inline int BitArray::get_num_words(void) const;

1368 8 get_word 0 4 1688 18 BitArray::get_word 0 1 549 410
////////////////////////////////////////////////////////////////////
//     Function: BitArray::get_word
//       Access: Published
//  Description: Returns the nth word in the array.  It is valid for n
//               to be greater than get_num_words(), but the return
//               value beyond get_num_words() will always be the same.
////////////////////////////////////////////////////////////////////
67
inline BitMask< unsigned int, 32 > BitArray::get_word(int n) const;

1369 8 set_word 0 4 1688 18 BitArray::set_word 0 1 550 351
////////////////////////////////////////////////////////////////////
//     Function: BitArray::set_word
//       Access: Published
//  Description: Replaces the nth word in the array.  If n >=
//               get_num_words(), this automatically extends the
//               array.
////////////////////////////////////////////////////////////////////
73
inline void BitArray::set_word(int n, BitMask< unsigned int, 32 > value);

1370 15 invert_in_place 0 4 1688 25 BitArray::invert_in_place 0 1 551 318
////////////////////////////////////////////////////////////////////
//     Function: BitArray::invert_in_place
//       Access: Published
//  Description: Inverts all the bits in the BitArray.  This is
//               equivalent to array = ~array.
////////////////////////////////////////////////////////////////////
37
void BitArray::invert_in_place(void);

1371 18 has_bits_in_common 0 4 1688 28 BitArray::has_bits_in_common 0 1 552 440
////////////////////////////////////////////////////////////////////
//     Function: BitArray::has_bits_in_common
//       Access: Published
//  Description: Returns true if this BitArray has any "one" bits in
//               common with the other one, false otherwise.
//
//               This is equivalent to (array & other) != 0, but may
//               be faster.
////////////////////////////////////////////////////////////////////
63
bool BitArray::has_bits_in_common(BitArray const &other) const;

1372 5 clear 0 4 1688 15 BitArray::clear 0 1 553 253
////////////////////////////////////////////////////////////////////
//     Function: BitArray::clear
//       Access: Published
//  Description: Sets all the bits in the BitArray off.
////////////////////////////////////////////////////////////////////
34
inline void BitArray::clear(void);

1373 6 output 0 4 1688 16 BitArray::output 0 1 554 443
////////////////////////////////////////////////////////////////////
//     Function: BitArray::output
//       Access: Published
//  Description: Writes the BitArray out as a hex number.  For a
//               BitArray, this is always the same as output_hex();
//               it's too confusing for the output format to change
//               back and forth at runtime.
////////////////////////////////////////////////////////////////////
42
void BitArray::output(ostream &out) const;

1374 13 output_binary 0 4 1688 23 BitArray::output_binary 0 2 555 556 312
////////////////////////////////////////////////////////////////////
//     Function: BitArray::output_binary
//       Access: Published
//  Description: Writes the BitArray out as a binary number, with
//               spaces every four bits.
////////////////////////////////////////////////////////////////////
73
void BitArray::output_binary(ostream &out, int spaces_every = (4)) const;

1375 10 output_hex 0 4 1688 20 BitArray::output_hex 0 2 557 558 316
////////////////////////////////////////////////////////////////////
//     Function: BitArray::output_hex
//       Access: Published
//  Description: Writes the BitArray out as a hexadecimal number, with
//               spaces every four digits.
////////////////////////////////////////////////////////////////////
70
void BitArray::output_hex(ostream &out, int spaces_every = (4)) const;

1376 5 write 0 4 1688 15 BitArray::write 0 2 559 560 317
////////////////////////////////////////////////////////////////////
//     Function: BitArray::write
//       Access: Published
//  Description: Writes the BitArray out as a binary or a hex number,
//               according to the number of bits.
////////////////////////////////////////////////////////////////////
65
void BitArray::write(ostream &out, int indent_level = (0)) const;

1377 11 operator == 0 4 1688 21 BitArray::operator == 0 1 561 220
////////////////////////////////////////////////////////////////////
//     Function: BitArray::operator ==
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
63
inline bool BitArray::operator ==(BitArray const &other) const;

1378 11 operator != 0 4 1688 21 BitArray::operator != 0 1 562 220
////////////////////////////////////////////////////////////////////
//     Function: BitArray::operator !=
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
63
inline bool BitArray::operator !=(BitArray const &other) const;

1379 10 operator < 0 4 1688 20 BitArray::operator < 0 1 563 381
////////////////////////////////////////////////////////////////////
//     Function: BitArray::operator <
//       Access: Published
//  Description: Returns true if the unsigned integer which is
//               represented by this BitArray is less than that of the
//               other one, false otherwise.
////////////////////////////////////////////////////////////////////
62
inline bool BitArray::operator <(BitArray const &other) const;

1380 10 compare_to 0 4 1688 20 BitArray::compare_to 0 1 564 487
////////////////////////////////////////////////////////////////////
//     Function: BitArray::compare_to
//       Access: Published
//  Description: Returns a number less than zero if this BitArray sorts
//               before the indicated other BitArray, greater than zero
//               if it sorts after, or 0 if they are equivalent.  This
//               is based on the same ordering defined by operator <.
////////////////////////////////////////////////////////////////////
54
int BitArray::compare_to(BitArray const &other) const;

1381 10 operator & 0 4 1688 20 BitArray::operator & 0 1 565 219
////////////////////////////////////////////////////////////////////
//     Function: BitArray::operator &
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
66
inline BitArray BitArray::operator &(BitArray const &other) const;

1382 10 operator | 0 4 1688 20 BitArray::operator | 0 1 566 219
////////////////////////////////////////////////////////////////////
//     Function: BitArray::operator |
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
66
inline BitArray BitArray::operator |(BitArray const &other) const;

1383 10 operator ^ 0 4 1688 20 BitArray::operator ^ 0 1 567 219
////////////////////////////////////////////////////////////////////
//     Function: BitArray::operator ^
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
66
inline BitArray BitArray::operator ^(BitArray const &other) const;

1384 10 operator ~ 0 68 1688 20 BitArray::operator ~ 0 1 568 219
////////////////////////////////////////////////////////////////////
//     Function: BitArray::operator ~
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
49
inline BitArray BitArray::operator ~(void) const;

1385 11 operator << 0 4 1688 21 BitArray::operator << 0 1 569 220
////////////////////////////////////////////////////////////////////
//     Function: BitArray::operator <<
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
55
inline BitArray BitArray::operator <<(int shift) const;

1386 11 operator >> 0 4 1688 21 BitArray::operator >> 0 1 570 220
////////////////////////////////////////////////////////////////////
//     Function: BitArray::operator >>
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
55
inline BitArray BitArray::operator >>(int shift) const;

1387 11 operator &= 0 4 1688 21 BitArray::operator &= 0 1 571 220
////////////////////////////////////////////////////////////////////
//     Function: BitArray::operator &=
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
50
void BitArray::operator &=(BitArray const &other);

1388 11 operator |= 0 4 1688 21 BitArray::operator |= 0 1 572 220
////////////////////////////////////////////////////////////////////
//     Function: BitArray::operator |=
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
50
void BitArray::operator |=(BitArray const &other);

1389 11 operator ^= 0 4 1688 21 BitArray::operator ^= 0 1 573 220
////////////////////////////////////////////////////////////////////
//     Function: BitArray::operator ^=
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
50
void BitArray::operator ^=(BitArray const &other);

1390 12 operator <<= 0 4 1688 22 BitArray::operator <<= 0 1 574 399
////////////////////////////////////////////////////////////////////
//     Function: BitArray::operator <<=
//       Access: Published
//  Description: Logical left shift.  The rightmost bits are filled in
//               with zeroes.  Since this is an infinite bit array,
//               none of the bits on the left are lost.
////////////////////////////////////////////////////////////////////
39
void BitArray::operator <<=(int shift);

1391 12 operator >>= 0 4 1688 22 BitArray::operator >>= 0 1 575 449
////////////////////////////////////////////////////////////////////
//     Function: BitArray::operator >>=
//       Access: Published
//  Description: Logical right shift.  The rightmost bits are lost.
//               Since this is an infinite bit array, there is no
//               question of sign extension; there is no need to
//               synthesize bits on the left.
////////////////////////////////////////////////////////////////////
39
void BitArray::operator >>=(int shift);

1392 14 get_class_type 0 4 1688 24 BitArray::get_class_type 0 1 576 0
49
static TypeHandle BitArray::get_class_type(void);

1393 12 ButtonHandle 0 4 1689 26 ButtonHandle::ButtonHandle 0 3 577 578 579 2305
// Filename: buttonHandle.I
// Created by:  drose (01Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: ButtonHandle::Constructor
//       Access: Published
//  Description: The default constructor must do nothing, because we
//               can't guarantee ordering of static initializers.  If
//               the constructor tried to initialize its value, it
//               might happen after the value had already been set
//               previously by another static initializer!
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ButtonHandle::Constructor
//       Access: Published
//  Description: Constructs a ButtonHandle with the corresponding
//               index number, which may have been returned by an
//               earlier call to ButtonHandle::get_index().
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ButtonHandle::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ButtonHandle::Constructor
//       Access: Published
//  Description: Constructs a ButtonHandle with the corresponding
//               name, which is looked up in the ButtonRegistry.
//               This exists for the purpose of being able to
//               automatically coerce a string into a ButtonHandle;
//               for most purposes, you should use either the static
//               KeyboardButton/MouseButton getters or
//               ButtonRegistry::register_button().
////////////////////////////////////////////////////////////////////
148
inline ButtonHandle::ButtonHandle(void);
inline ButtonHandle::ButtonHandle(int index);
ButtonHandle::ButtonHandle(basic_string< char > const &name);

1394 8 get_name 0 4 1689 22 ButtonHandle::get_name 0 1 580 250
////////////////////////////////////////////////////////////////////
//     Function: ButtonHandle::get_name
//       Access: Public
//  Description: Returns the name of the button.
////////////////////////////////////////////////////////////////////
56
basic_string< char > ButtonHandle::get_name(void) const;

1395 20 has_ascii_equivalent 0 4 1689 34 ButtonHandle::has_ascii_equivalent 0 1 581 375
////////////////////////////////////////////////////////////////////
//     Function: ButtonHandle::has_ascii_equivalent
//       Access: Published
//  Description: Returns true if the button was created with an ASCII
//               equivalent code (e.g. for a standard keyboard
//               button).
////////////////////////////////////////////////////////////////////
59
inline bool ButtonHandle::has_ascii_equivalent(void) const;

1396 20 get_ascii_equivalent 0 4 1689 34 ButtonHandle::get_ascii_equivalent 0 1 582 346
////////////////////////////////////////////////////////////////////
//     Function: ButtonHandle::get_ascii_equivalent
//       Access: Published
//  Description: Returns the character code associated with the
//               button, or '\0' if no ASCII code was associated.
////////////////////////////////////////////////////////////////////
59
inline char ButtonHandle::get_ascii_equivalent(void) const;

1397 9 get_alias 0 4 1689 23 ButtonHandle::get_alias 0 1 583 692
////////////////////////////////////////////////////////////////////
//     Function: ButtonHandle::get_alias
//       Access: Published
//  Description: Returns the alias (alternate name) associated with
//               the button, if any, or ButtonHandle::none() if the
//               button has no alias.
//
//               Each button is allowed to have one alias, and
//               multiple different buttons can refer to the same
//               alias.  The alias should be the more general name for
//               the button, for instance, shift is an alias for
//               lshift, but not vice-versa.
////////////////////////////////////////////////////////////////////
49
ButtonHandle ButtonHandle::get_alias(void) const;

1398 7 matches 0 4 1689 21 ButtonHandle::matches 0 1 584 532
////////////////////////////////////////////////////////////////////
//     Function: ButtonHandle::matches
//       Access: Published
//  Description: Returns true if this ButtonHandle is the same as the
//               other one, or if the other one is an alias for this
//               one.  (Does not return true if this button is an
//               alias for the other one, however.)
//
//               This is a more general comparison than operator ==.
////////////////////////////////////////////////////////////////////
67
inline bool ButtonHandle::matches(ButtonHandle const &other) const;

1399 9 get_index 0 4 1689 23 ButtonHandle::get_index 0 1 585 664
////////////////////////////////////////////////////////////////////
//     Function: ButtonHandle::get_index
//       Access: Published
//  Description: Returns the integer index associated with this
//               ButtonHandle. Each different ButtonHandle will have a
//               different index.  However, you probably shouldn't be
//               using this method; you should just treat the
//               ButtonHandles as opaque classes.  This is provided
//               for the convenience of non-C++ scripting languages to
//               build a hashtable of ButtonHandles.
////////////////////////////////////////////////////////////////////
47
inline int ButtonHandle::get_index(void) const;

1400 6 output 0 4 1689 20 ButtonHandle::output 0 1 586 220
////////////////////////////////////////////////////////////////////
//     Function: ButtonHandle::output
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
53
inline void ButtonHandle::output(ostream &out) const;

1401 4 none 0 4 1689 18 ButtonHandle::none 0 1 587 321
////////////////////////////////////////////////////////////////////
//     Function: ButtonHandle::none
//       Access: Published, Static
//  Description: Returns a special zero-valued ButtonHandle that is
//               used to indicate no button.
////////////////////////////////////////////////////////////////////
52
static inline ButtonHandle ButtonHandle::none(void);

1402 14 get_class_type 0 4 1689 28 ButtonHandle::get_class_type 0 1 588 0
53
static TypeHandle ButtonHandle::get_class_type(void);

1403 13 ~ButtonHandle 0 4 1689 27 ButtonHandle::~ButtonHandle 0 0 0
34
ButtonHandle::~ButtonHandle(void);

1404 10 get_button 0 4 1690 26 ButtonRegistry::get_button 0 1 589 396
////////////////////////////////////////////////////////////////////
//     Function: ButtonRegistry::get_button
//       Access: Published
//  Description: Finds a ButtonHandle in the registry matching the
//               indicated name.  If there is no such ButtonHandle,
//               registers a new one and returns it.
////////////////////////////////////////////////////////////////////
74
ButtonHandle ButtonRegistry::get_button(basic_string< char > const &name);

1405 11 find_button 0 4 1690 27 ButtonRegistry::find_button 0 1 590 391
////////////////////////////////////////////////////////////////////
//     Function: ButtonRegistry::find_button
//       Access: Published
//  Description: Finds a ButtonHandle in the registry matching the
//               indicated name.  If there is no such ButtonHandle,
//               returns ButtonHandle::none().
////////////////////////////////////////////////////////////////////
75
ButtonHandle ButtonRegistry::find_button(basic_string< char > const &name);

1406 17 find_ascii_button 0 4 1690 33 ButtonRegistry::find_ascii_button 0 1 591 419
////////////////////////////////////////////////////////////////////
//     Function: ButtonRegistry::find_ascii_button
//       Access: Published
//  Description: Finds a ButtonHandle in the registry matching the
//               indicated ASCII equivalent character.  If there is no
//               such ButtonHandle, returns ButtonHandle::none().
////////////////////////////////////////////////////////////////////
76
ButtonHandle ButtonRegistry::find_ascii_button(char ascii_equivalent) const;

1407 5 write 0 4 1690 21 ButtonRegistry::write 0 1 592 220
////////////////////////////////////////////////////////////////////
//     Function: ButtonRegistry::write
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
47
void ButtonRegistry::write(ostream &out) const;

1408 3 ptr 0 4 1690 19 ButtonRegistry::ptr 0 1 593 367
// ptr() returns the pointer to the global ButtonRegistry object.

////////////////////////////////////////////////////////////////////
//     Function: ButtonRegistry::ptr
//       Access: Published, Static
//  Description: Returns the pointer to the global ButtonRegistry
//               object.
////////////////////////////////////////////////////////////////////
56
static inline ButtonRegistry *ButtonRegistry::ptr(void);

1409 15 ~ButtonRegistry 0 4 1690 31 ButtonRegistry::~ButtonRegistry 0 0 0
38
ButtonRegistry::~ButtonRegistry(void);

1410 15 get_num_buttons 0 4 1691 26 ButtonMap::get_num_buttons 0 1 594 791
// Filename: buttonMap.I
// Created by:  rdb (09Mar14)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: ButtonMap::get_num_buttons
//       Access: Published
//  Description: Returns the number of buttons that this button
//               mapping specifies.
////////////////////////////////////////////////////////////////////
50
inline int ButtonMap::get_num_buttons(void) const;

1411 14 get_raw_button 0 4 1691 25 ButtonMap::get_raw_button 0 1 595 307
////////////////////////////////////////////////////////////////////
//     Function: ButtonMap::get_raw_button
//       Access: Published
//  Description: Returns the underlying raw button associated with
//               the nth button.
////////////////////////////////////////////////////////////////////
59
inline ButtonHandle ButtonMap::get_raw_button(int i) const;

1412 17 get_mapped_button 0 4 1691 28 ButtonMap::get_mapped_button 0 3 596 597 598 1158
////////////////////////////////////////////////////////////////////
//     Function: ButtonMap::get_mapped_button
//       Access: Published
//  Description: Returns the nth mapped button, meaning the button
//               that the nth raw button is mapped to.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ButtonMap::get_mapped_button
//       Access: Published
//  Description: Returns the button that the given button is mapped
//               to, or ButtonHandle::none() if this map does not
//               specify a mapped button for the given raw button.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ButtonMap::get_mapped_button
//       Access: Published
//  Description: Returns the button that the given button is mapped
//               to, or ButtonHandle::none() if this map does not
//               specify a mapped button for the given raw button.
////////////////////////////////////////////////////////////////////
230
inline ButtonHandle ButtonMap::get_mapped_button(int i) const;
inline ButtonHandle ButtonMap::get_mapped_button(ButtonHandle raw) const;
inline ButtonHandle ButtonMap::get_mapped_button(basic_string< char > const &raw_name) const;

1413 23 get_mapped_button_label 0 4 1691 34 ButtonMap::get_mapped_button_label 0 3 599 600 601 1713
////////////////////////////////////////////////////////////////////
//     Function: ButtonMap::get_mapped_button_label
//       Access: Published
//  Description: Returns the label associated with the nth mapped
//               button, meaning the button that the nth raw
//               button is mapped to.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ButtoMap::get_mapped_button_label
//       Access: Published
//  Description: If the button map specifies a special name for the
//               button (eg. if the operating system or keyboard
//               device has a localized name describing the key),
//               returns it, or the empty string otherwise.
//
//               Note that this is not the same as
//               get_mapped_button().get_name(), which returns the
//               name of the Panda event associated with the button.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ButtoMap::get_mapped_button_label
//       Access: Published
//  Description: If the button map specifies a special name for the
//               button (eg. if the operating system or keyboard
//               device has a localized name describing the key),
//               returns it, or the empty string otherwise.
//
//               Note that this is not the same as
//               get_mapped_button().get_name(), which returns the
//               name of the Panda event associated with the button.
////////////////////////////////////////////////////////////////////
293
inline basic_string< char > const &ButtonMap::get_mapped_button_label(int i) const;
inline basic_string< char > const &ButtonMap::get_mapped_button_label(ButtonHandle raw) const;
inline basic_string< char > const &ButtonMap::get_mapped_button_label(basic_string< char > const &raw_name) const;

1414 6 output 0 4 1691 17 ButtonMap::output 0 1 602 217
////////////////////////////////////////////////////////////////////
//     Function: ButtonMap::output
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
43
void ButtonMap::output(ostream &out) const;

1415 5 write 0 4 1691 16 ButtonMap::write 0 2 603 604 216
////////////////////////////////////////////////////////////////////
//     Function: ButtonMap::write
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
66
void ButtonMap::write(ostream &out, int indent_level = (0)) const;

1416 14 get_class_type 0 4 1691 25 ButtonMap::get_class_type 0 1 605 0
50
static TypeHandle ButtonMap::get_class_type(void);

1417 10 ~ButtonMap 0 4 1691 21 ButtonMap::~ButtonMap 0 0 0
28
ButtonMap::~ButtonMap(void);

1418 6 output 0 6 1693 22 CallbackObject::output 0 1 606 230
////////////////////////////////////////////////////////////////////
//     Function: CallbackObject::output
//       Access: Published, Virtual
//  Description:
////////////////////////////////////////////////////////////////////
56
virtual void CallbackObject::output(ostream &out) const;

1419 14 get_class_type 0 4 1693 30 CallbackObject::get_class_type 0 1 607 0
55
static TypeHandle CallbackObject::get_class_type(void);

1420 15 ~CallbackObject 0 4 1693 31 CallbackObject::~CallbackObject 0 0 0
38
CallbackObject::~CallbackObject(void);

1421 19 get_cache_ref_count 0 4 1694 54 CachedTypedWritableReferenceCount::get_cache_ref_count 0 1 608 290
////////////////////////////////////////////////////////////////////
//     Function: CachedTypedWritableReferenceCount::get_cache_ref_count
//       Access: Published
//  Description: Returns the current reference count.
////////////////////////////////////////////////////////////////////
78
inline int CachedTypedWritableReferenceCount::get_cache_ref_count(void) const;

1422 9 cache_ref 0 4 1694 44 CachedTypedWritableReferenceCount::cache_ref 0 1 609 355
////////////////////////////////////////////////////////////////////
//     Function: CachedTypedWritableReferenceCount::cache_ref
//       Access: Published
//  Description: Explicitly increments the cache reference count and
//               the normal reference count simultaneously.
////////////////////////////////////////////////////////////////////
69
inline void CachedTypedWritableReferenceCount::cache_ref(void) const;

1423 11 cache_unref 0 4 1694 46 CachedTypedWritableReferenceCount::cache_unref 0 1 610 479
////////////////////////////////////////////////////////////////////
//     Function: CachedTypedWritableReferenceCount::cache_unref
//       Access: Published
//  Description: Explicitly decrements the cache reference count and
//               the normal reference count simultaneously.
//
//               The return value is true if the new reference count
//               is nonzero, false if it is zero.
////////////////////////////////////////////////////////////////////
71
inline bool CachedTypedWritableReferenceCount::cache_unref(void) const;

1424 24 test_ref_count_integrity 0 4 1694 59 CachedTypedWritableReferenceCount::test_ref_count_integrity 0 1 611 359
////////////////////////////////////////////////////////////////////
//     Function: CachedTypedWritableReferenceCount::test_ref_count_integrity
//       Access: Published
//  Description: Does some easy checks to make sure that the reference
//               count isn't completely bogus.
////////////////////////////////////////////////////////////////////
84
inline bool CachedTypedWritableReferenceCount::test_ref_count_integrity(void) const;

1425 14 get_class_type 0 4 1694 49 CachedTypedWritableReferenceCount::get_class_type 0 1 612 0
74
static TypeHandle CachedTypedWritableReferenceCount::get_class_type(void);

1426 6 output 0 6 1695 20 CallbackData::output 0 1 613 228
////////////////////////////////////////////////////////////////////
//     Function: CallbackData::output
//       Access: Published, Virtual
//  Description:
////////////////////////////////////////////////////////////////////
54
virtual void CallbackData::output(ostream &out) const;

1427 6 upcall 0 6 1695 20 CallbackData::upcall 0 1 614 408
////////////////////////////////////////////////////////////////////
//     Function: CallbackData::upcall
//       Access: Published, Virtual
//  Description: You should make this call during the callback if you
//               want to continue the normal function that would have
//               been done in the absence of a callback.
////////////////////////////////////////////////////////////////////
40
virtual void CallbackData::upcall(void);

1428 14 get_class_type 0 4 1695 28 CallbackData::get_class_type 0 1 615 0
53
static TypeHandle CallbackData::get_class_type(void);

1429 13 ~CallbackData 0 4 1695 27 CallbackData::~CallbackData 0 0 0
34
CallbackData::~CallbackData(void);

1430 7 TimeVal 0 4 1696 16 TimeVal::TimeVal 0 1 616 218
////////////////////////////////////////////////////////////////////
//     Function: TimeVal::contructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
30
inline TimeVal::TimeVal(void);

1431 7 get_sec 0 4 1696 16 TimeVal::get_sec 0 1 617 215
////////////////////////////////////////////////////////////////////
//     Function: TimeVal::get_sec
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
54
inline unsigned long int TimeVal::get_sec(void) const;

1432 8 get_usec 0 4 1696 17 TimeVal::get_usec 0 1 618 216
////////////////////////////////////////////////////////////////////
//     Function: TimeVal::get_usec
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
55
inline unsigned long int TimeVal::get_usec(void) const;

1433 8 ~TimeVal 0 4 1696 17 TimeVal::~TimeVal 0 0 0
24
TimeVal::~TimeVal(void);

1434 11 ClockObject 0 4 1697 24 ClockObject::ClockObject 0 2 619 620 454
////////////////////////////////////////////////////////////////////
//     Function: ClockObject::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ClockObject::Copy Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
82
ClockObject::ClockObject(void);
ClockObject::ClockObject(ClockObject const &copy);

1435 8 set_mode 0 4 1697 21 ClockObject::set_mode 0 1 621 2596
////////////////////////////////////////////////////////////////////
//     Function: ClockObject::set_mode
//       Access: Published
//  Description: Changes the mode of the clock.  Normally, the clock
//               is in mode M_normal. In this mode, each call to
//               tick() will set the value returned by
//               get_frame_time() to the current real time; thus, the
//               clock simply reports time advancing.
//
//               Other possible modes:
//
//               M_non_real_time - the clock ignores real time
//               completely; at each call to tick(), it pretends that
//               exactly dt seconds have elapsed since the last call
//               to tick().  You may set the value of dt with
//               set_dt() or set_frame_rate().
//
//               M_limited - the clock will run as fast as it can, as
//               in M_normal, but will not run faster than the rate
//               specified by set_frame_rate().  If the application
//               would run faster than this rate, the clock will slow
//               down the application.
//
//               M_integer - the clock will run as fast as it can, but
//               the rate will be constrained to be an integer
//               multiple or divisor of the rate specified by
//               set_frame_rate().  The clock will slow down the
//               application a bit to guarantee this.
//
//               M_integer_limited - a combination of M_limited and
//               M_integer; the clock will not run faster than
//               set_frame_rate(), and if it runs slower, it will run
//               at a integer divisor of that rate.
//
//               M_forced - the clock forces the application to run at
//               the rate specified by set_frame_rate().  If the
//               application would run faster than this rate, the
//               clock will slow down the application; if the
//               application would run slower than this rate, the
//               clock slows down time so that the application
//               believes it is running at the given rate.
//
//               M_degrade - the clock runs at real time, but the
//               application is slowed down by a set factor of its
//               frame rate, specified by set_degrade_factor().
//
//               M_slave - the clock does not advance, but relies on
//               the user to call set_frame_time() and/or
//               set_frame_count() each frame.
////////////////////////////////////////////////////////////////////
51
void ClockObject::set_mode(ClockObject::Mode mode);

1436 8 get_mode 0 4 1697 21 ClockObject::get_mode 0 1 622 293
////////////////////////////////////////////////////////////////////
//     Function: ClockObject::get_mode
//       Access: Published
//  Description: Returns the current mode of the clock.  See
//               set_mode().
////////////////////////////////////////////////////////////////////
59
inline ClockObject::Mode ClockObject::get_mode(void) const;

1437 14 get_frame_time 0 4 1697 27 ClockObject::get_frame_time 0 2 623 624 656
////////////////////////////////////////////////////////////////////
//     Function: ClockObject::get_frame_time
//       Access: Published
//  Description: Returns the time in seconds as of the last time
//               tick() was called (typically, this will be as of the
//               start of the current frame).
//
//               This is generally the kind of time you want to ask
//               for in most rendering and animation contexts, since
//               it's important that all of the animation for a given
//               frame remains in sync with each other.
////////////////////////////////////////////////////////////////////
99
inline double ClockObject::get_frame_time(Thread *current_thread = ((get_current_thread()))) const;

1438 13 get_real_time 0 4 1697 26 ClockObject::get_real_time 0 1 625 769
////////////////////////////////////////////////////////////////////
//     Function: ClockObject::get_real_time
//       Access: Published
//  Description: Returns the actual number of seconds elapsed since
//               the ClockObject was created, or since it was last
//               reset.  This is useful for doing real timing
//               measurements, e.g. for performance statistics.
//
//               This returns the most precise timer we have for short
//               time intervals, but it may tend to drift over the
//               long haul.  If more accurate timekeeping is needed
//               over a long period of time, use get_long_time()
//               instead.
////////////////////////////////////////////////////////////////////
53
inline double ClockObject::get_real_time(void) const;

1439 13 get_long_time 0 4 1697 26 ClockObject::get_long_time 0 1 626 773
////////////////////////////////////////////////////////////////////
//     Function: ClockObject::get_long_time
//       Access: Published
//  Description: Returns the actual number of seconds elapsed since
//               the ClockObject was created, or since it was last
//               reset.
//
//               This is similar to get_real_time(), except that it
//               uses the most accurate counter we have over a long
//               period of time, and so it is less likely to drift.
//               However, it may not be very precise for measuring
//               short intervals.  On Windows, for instace, this is
//               only accurate to within about 55 milliseconds.
////////////////////////////////////////////////////////////////////
53
inline double ClockObject::get_long_time(void) const;

1440 5 reset 0 4 1697 18 ClockObject::reset 0 1 627 299
////////////////////////////////////////////////////////////////////
//     Function: ClockObject::reset
//       Access: Published
//  Description: Simultaneously resets both the time and the frame
//               count to zero.
////////////////////////////////////////////////////////////////////
37
inline void ClockObject::reset(void);

1441 13 set_real_time 0 4 1697 26 ClockObject::set_real_time 0 1 628 607
////////////////////////////////////////////////////////////////////
//     Function: ClockObject::set_real_time
//       Access: Published
//  Description: Resets the clock to the indicated time.  This
//               changes only the real time of the clock as reported
//               by get_real_time(), but does not immediately change
//               the time reported by get_frame_time()--that will
//               change after the next call to tick().  Also see
//               reset(), set_frame_time(), and set_frame_count().
////////////////////////////////////////////////////////////////////
45
void ClockObject::set_real_time(double time);

1442 14 set_frame_time 0 4 1697 27 ClockObject::set_frame_time 0 2 629 630 477
////////////////////////////////////////////////////////////////////
//     Function: ClockObject::set_frame_time
//       Access: Published
//  Description: Changes the time as reported for the current frame to
//               the indicated time.  Normally, the way to adjust the
//               frame time is via tick(); this function is provided
//               only for occasional special adjustments.
////////////////////////////////////////////////////////////////////
97
void ClockObject::set_frame_time(double time, Thread *current_thread = ((get_current_thread())));

1443 15 set_frame_count 0 4 1697 28 ClockObject::set_frame_count 0 2 631 632 380
////////////////////////////////////////////////////////////////////
//     Function: ClockObject::set_frame_count
//       Access: Published
//  Description: Resets the number of frames counted to the indicated
//               number.  Also see reset(), set_real_time(), and
//               set_frame_time().
////////////////////////////////////////////////////////////////////
102
void ClockObject::set_frame_count(int frame_count, Thread *current_thread = ((get_current_thread())));

1444 15 get_frame_count 0 4 1697 28 ClockObject::get_frame_count 0 2 633 634 457
////////////////////////////////////////////////////////////////////
//     Function: ClockObject::get_frame_count
//       Access: Published
//  Description: Returns the number of times tick() has been called
//               since the ClockObject was created, or since it was
//               last reset.  This is generally the number of frames
//               that have been rendered.
////////////////////////////////////////////////////////////////////
97
inline int ClockObject::get_frame_count(Thread *current_thread = ((get_current_thread()))) const;

1445 18 get_net_frame_rate 0 4 1697 31 ClockObject::get_net_frame_rate 0 2 635 636 523
////////////////////////////////////////////////////////////////////
//     Function: ClockObject::get_net_frame_rate
//       Access: Published
//  Description: Returns the average frame rate since the last reset.
//               This is simply the total number of frames divided by
//               the total elapsed time.  This reports the virtual
//               frame rate if the clock is in (or has been in)
//               M_non_real_time mode.
////////////////////////////////////////////////////////////////////
103
inline double ClockObject::get_net_frame_rate(Thread *current_thread = ((get_current_thread()))) const;

1446 6 get_dt 0 4 1697 19 ClockObject::get_dt 0 2 637 638 369
////////////////////////////////////////////////////////////////////
//     Function: ClockObject::get_dt
//       Access: Published
//  Description: Returns the elapsed time for the previous frame: the
//               number of seconds elapsed between the last two calls
//               to tick().
////////////////////////////////////////////////////////////////////
91
inline double ClockObject::get_dt(Thread *current_thread = ((get_current_thread()))) const;

1447 6 set_dt 0 4 1697 19 ClockObject::set_dt 0 1 639 575
////////////////////////////////////////////////////////////////////
//     Function: ClockObject::set_dt
//       Access: Published
//  Description: In non-real-time mode, sets the number of seconds
//               that should appear to elapse between frames.  In
//               forced mode or limited mode, sets our target dt.  In
//               normal mode, this has no effect.  
//
//               Also see set_frame_rate(), which is a different way
//               to specify the same quantity.
////////////////////////////////////////////////////////////////////
36
void ClockObject::set_dt(double dt);

1448 14 set_frame_rate 0 4 1697 27 ClockObject::set_frame_rate 0 1 640 583
////////////////////////////////////////////////////////////////////
//     Function: ClockObject::set_frame_rate
//       Access: Published
//  Description: In non-real-time mode, sets the number of frames per
//               second that we should appear to be running.  In forced
//               mode or limited mode, sets our target frame rate.  In
//               normal mode, this has no effect.
//
//               Also see set_dt(), which is a different way to
//               specify the same quantity.
////////////////////////////////////////////////////////////////////
52
void ClockObject::set_frame_rate(double frame_rate);

1449 10 get_max_dt 0 4 1697 23 ClockObject::get_max_dt 0 1 641 333
////////////////////////////////////////////////////////////////////
//     Function: ClockObject::get_max_dt
//       Access: Published
//  Description: Returns the current maximum allowable time elapsed
//               between any two frames.  See set_max_dt().
////////////////////////////////////////////////////////////////////
50
inline double ClockObject::get_max_dt(void) const;

1450 10 set_max_dt 0 4 1697 23 ClockObject::set_max_dt 0 1 642 872
////////////////////////////////////////////////////////////////////
//     Function: ClockObject::set_max_dt
//       Access: Published
//  Description: Sets a limit on the value returned by get_dt().  If
//               this value is less than zero, no limit is imposed;
//               otherwise, this is the maximum value that will ever
//               be returned by get_dt(), regardless of how much time
//               has actually elapsed between frames.
//
//               This limit is only imposed in real-time mode; in
//               non-real-time mode, the dt is fixed anyway and max_dt
//               is ignored.
//
//               This is generally used to guarantee reasonable
//               behavior even in the presence of a very slow or
//               chuggy frame rame.
////////////////////////////////////////////////////////////////////
51
inline void ClockObject::set_max_dt(double max_dt);

1451 18 get_degrade_factor 0 4 1697 31 ClockObject::get_degrade_factor 0 1 643 544
////////////////////////////////////////////////////////////////////
//     Function: ClockObject::get_degrade_factor
//       Access: Published
//  Description: In degrade mode, returns the ratio by which the
//               performance is degraded.  A value of 2.0 causes the
//               clock to be slowed down by a factor of two (reducing
//               performance to 1/2 what would be otherwise).
//
//               This has no effect if mode is not M_degrade.
////////////////////////////////////////////////////////////////////
58
inline double ClockObject::get_degrade_factor(void) const;

1452 18 set_degrade_factor 0 4 1697 31 ClockObject::set_degrade_factor 0 1 644 541
////////////////////////////////////////////////////////////////////
//     Function: ClockObject::set_degrade_factor
//       Access: Published
//  Description: In degrade mode, sets the ratio by which the
//               performance is degraded.  A value of 2.0 causes the
//               clock to be slowed down by a factor of two (reducing
//               performance to 1/2 what would be otherwise).
//
//               This has no effect if mode is not M_degrade.
////////////////////////////////////////////////////////////////////
67
inline void ClockObject::set_degrade_factor(double degrade_factor);

1453 31 set_average_frame_rate_interval 0 4 1697 44 ClockObject::set_average_frame_rate_interval 0 1 645 729
////////////////////////////////////////////////////////////////////
//     Function: ClockObject::set_average_frame_rate_interval
//       Access: Published
//  Description: Specifies the interval of time (in seconds) over
//               which get_average_frame_rate() averages the number of
//               frames per second to compute the frame rate.
//               Changing this does not necessarily immediately change
//               the result of get_average_frame_rate(), until this
//               interval of time has elapsed again.
//
//               Setting this to zero disables the computation of
//               get_average_frame_rate().
////////////////////////////////////////////////////////////////////
70
inline void ClockObject::set_average_frame_rate_interval(double time);

1454 31 get_average_frame_rate_interval 0 4 1697 44 ClockObject::get_average_frame_rate_interval 0 1 646 423
////////////////////////////////////////////////////////////////////
//     Function: ClockObject::get_average_frame_rate_interval
//       Access: Published
//  Description: Returns the interval of time (in seconds) over
//               which get_average_frame_rate() averages the number of frames
//               per second to compute the frame rate.
////////////////////////////////////////////////////////////////////
71
inline double ClockObject::get_average_frame_rate_interval(void) const;

1455 22 get_average_frame_rate 0 4 1697 35 ClockObject::get_average_frame_rate 0 2 647 648 500
////////////////////////////////////////////////////////////////////
//     Function: ClockObject::get_average_frame_rate
//       Access: Published
//  Description: Returns the average frame rate in number of frames
//               per second over the last
//               get_average_frame_rate_interval() seconds.  This
//               measures the virtual frame rate if the clock is in
//               M_non_real_time mode.
////////////////////////////////////////////////////////////////////
100
double ClockObject::get_average_frame_rate(Thread *current_thread = ((get_current_thread()))) const;

1456 22 get_max_frame_duration 0 4 1697 35 ClockObject::get_max_frame_duration 0 2 649 650 343
////////////////////////////////////////////////////////////////////
//     Function: ClockObject::get_max_frame_duration
//       Access: Published
//  Description: Returns the maximum frame duration over the last
//               get_average_frame_rate_interval() seconds.
////////////////////////////////////////////////////////////////////
100
double ClockObject::get_max_frame_duration(Thread *current_thread = ((get_current_thread()))) const;

1457 25 calc_frame_rate_deviation 0 4 1697 38 ClockObject::calc_frame_rate_deviation 0 2 651 652 915
////////////////////////////////////////////////////////////////////
//     Function: ClockObject::calc_frame_time_deviation
//       Access: Published
//  Description: Returns the standard deviation of the frame times of
//               the frames rendered over the past
//               get_average_frame_rate_interval() seconds.  This
//               number gives an estimate of the chugginess of the
//               frame rate; if it is large, there is a large
//               variation in the frame rate; if is small, all of the
//               frames are consistent in length.
//
//               A large value might also represent just a recent
//               change in frame rate, for instance, because the
//               camera has just rotated from looking at a simple
//               scene to looking at a more complex scene.
////////////////////////////////////////////////////////////////////
103
double ClockObject::calc_frame_rate_deviation(Thread *current_thread = ((get_current_thread()))) const;

1458 4 tick 0 4 1697 17 ClockObject::tick 0 2 653 654 566
////////////////////////////////////////////////////////////////////
//     Function: ClockObject::tick
//       Access: Published
//  Description: Instructs the clock that a new frame has just begun.
//               In normal, real-time mode, get_frame_time() will
//               henceforth report the time as of this instant as the
//               current start-of-frame time.  In non-real-time mode,
//               get_frame_time() will be incremented by the value of
//               dt.
////////////////////////////////////////////////////////////////////
74
void ClockObject::tick(Thread *current_thread = ((get_current_thread())));

1459 15 sync_frame_time 0 4 1697 28 ClockObject::sync_frame_time 0 2 655 656 756
////////////////////////////////////////////////////////////////////
//     Function: ClockObject::sync_frame_time
//       Access: Published
//  Description: Resets the frame time to the current real time.  This
//               is similar to tick(), except that it does not advance
//               the frame counter and does not affect dt.  This is
//               intended to be used in the middle of a particularly
//               long frame to compensate for the time that has
//               already elapsed.
//
//               In non-real-time mode, this function has no effect
//               (because in this mode all frames take the same length
//               of time).
////////////////////////////////////////////////////////////////////
85
void ClockObject::sync_frame_time(Thread *current_thread = ((get_current_thread())));

1460 12 check_errors 0 4 1697 25 ClockObject::check_errors 0 1 657 609
////////////////////////////////////////////////////////////////////
//     Function: ClockObject::check_errors
//       Access: Published
//  Description: Returns true if a clock error was detected since the
//               last time check_errors() was called.  A clock error
//               means that something happened, an OS or BIOS bug, for
//               instance, that makes the current value of the clock
//               somewhat suspect, and an application may wish to
//               resynchronize with any external clocks.
////////////////////////////////////////////////////////////////////
62
inline bool ClockObject::check_errors(Thread *current_thread);

1461 16 get_global_clock 0 4 1697 29 ClockObject::get_global_clock 0 1 658 408
////////////////////////////////////////////////////////////////////
//     Function: ClockObject::get_global_clock
//       Access: Published
//  Description: Returns a pointer to the global ClockObject.  This is
//               the ClockObject that most code should use for
//               handling scene graph rendering and animation.
////////////////////////////////////////////////////////////////////
63
static inline ClockObject *ClockObject::get_global_clock(void);

1462 14 get_class_type 0 4 1697 27 ClockObject::get_class_type 0 1 659 0
52
static TypeHandle ClockObject::get_class_type(void);

1463 14 get_model_path 0 1 0 14 get_model_path 0 1 848 387
// Set this true to enable tracking of ReferenceCount pointer
// allocation/deallcation via the MemoryUsage object.  This is
// primarily useful for detecting memory leaks.  It has no effect when
// compiling in NDEBUG mode.
//
// This variable is no longer defined here; instead, it's a member of
// MemoryUsage.
//
// ConfigVariableBool track_memory_usage("track-memory-usage", false);
47
ConfigVariableSearchPath &get_model_path(void);

1464 15 get_plugin_path 0 1 0 15 get_plugin_path 0 1 849 0
48
ConfigVariableSearchPath &get_plugin_path(void);

1465 9 cache_ref 0 4 1699 28 CopyOnWriteObject::cache_ref 0 1 660 279
////////////////////////////////////////////////////////////////////
//     Function: CopyOnWriteObject::cache_ref
//       Access: Published
//  Description: See CachedTypedWritableReferenceCount::cache_ref().
////////////////////////////////////////////////////////////////////
53
inline void CopyOnWriteObject::cache_ref(void) const;

1466 14 get_class_type 0 4 1699 33 CopyOnWriteObject::get_class_type 0 1 661 0
58
static TypeHandle CopyOnWriteObject::get_class_type(void);

1467 18 ~CopyOnWriteObject 0 4 1699 37 CopyOnWriteObject::~CopyOnWriteObject 0 0 0
44
CopyOnWriteObject::~CopyOnWriteObject(void);

1468 17 DatagramInputFile 0 4 1700 36 DatagramInputFile::DatagramInputFile 0 1 662 722
// Filename: datagramInputFile.I
// Created by:  drose (30Oct00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: DatagramInputFile::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
50
inline DatagramInputFile::DatagramInputFile(void);

1469 4 open 0 4 1700 23 DatagramInputFile::open 0 4 663 664 665 666 1158
////////////////////////////////////////////////////////////////////
//     Function: DatagramInputFile::open
//       Access: Published
//  Description: Opens the indicated filename for reading.  Returns
//               true on success, false on failure.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: DatagramInputFile::open
//       Access: Published
//  Description: Opens the indicated filename for reading.  Returns
//               true on success, false on failure.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: DatagramInputFile::open
//       Access: Published
//  Description: Starts reading from the indicated stream.  Returns
//               true on success, false on failure.  The
//               DatagramInputFile does not take ownership of the
//               stream; you are responsible for closing or deleting
//               it when you are done.
////////////////////////////////////////////////////////////////////
197
bool DatagramInputFile::open(FileReference const *file);
inline bool DatagramInputFile::open(Filename const &filename);
bool DatagramInputFile::open(istream &in, Filename const &filename = ((())));

1470 10 get_stream 0 4 1700 29 DatagramInputFile::get_stream 0 1 667 279
////////////////////////////////////////////////////////////////////
//     Function: DatagramInputFile::get_stream
//       Access: Published
//  Description: Returns the istream represented by the input file.
////////////////////////////////////////////////////////////////////
52
inline istream &DatagramInputFile::get_stream(void);

1471 5 close 0 4 1700 24 DatagramInputFile::close 0 1 668 325
////////////////////////////////////////////////////////////////////
//     Function: DatagramInputFile::close
//       Access: Published
//  Description: Closes the file.  This is also implicitly done when
//               the DatagramInputFile destructs.
////////////////////////////////////////////////////////////////////
36
void DatagramInputFile::close(void);

1472 11 read_header 0 4 1700 30 DatagramInputFile::read_header 0 1 669 535
////////////////////////////////////////////////////////////////////
//     Function: DatagramInputFile::read_header
//       Access: Published
//  Description: Reads a sequence of bytes from the beginning of the
//               datagram file.  This may be called any number of
//               times after the file has been opened and before the
//               first datagram is read.  It may not be called once
//               the first datagram has been read.
////////////////////////////////////////////////////////////////////
90
bool DatagramInputFile::read_header(basic_string< char > &header, unsigned int num_bytes);

1473 9 ascii_key 0 4 1702 25 KeyboardButton::ascii_key 0 2 670 671 864
////////////////////////////////////////////////////////////////////
//     Function: KeyboardButton::ascii_key
//       Access: Public, Static
//  Description: Returns the ButtonHandle associated with the
//               particular ASCII character, if there is one, or
//               ButtonHandle::none() if there is not.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: KeyboardButton::ascii_key
//       Access: Public, Static
//  Description: Returns the ButtonHandle associated with the
//               particular ASCII character (taken from the first
//               character of the indicated string), if there is one,
//               or ButtonHandle::none() if there is not.
////////////////////////////////////////////////////////////////////
162
static ButtonHandle KeyboardButton::ascii_key(char ascii_equivalent);
static ButtonHandle KeyboardButton::ascii_key(basic_string< char > const &ascii_equivalent);

1474 5 space 0 4 1702 21 KeyboardButton::space 0 1 672 0
48
static ButtonHandle KeyboardButton::space(void);

1475 9 backspace 0 4 1702 25 KeyboardButton::backspace 0 1 673 0
52
static ButtonHandle KeyboardButton::backspace(void);

1476 3 tab 0 4 1702 19 KeyboardButton::tab 0 1 674 0
46
static ButtonHandle KeyboardButton::tab(void);

1477 5 enter 0 4 1702 21 KeyboardButton::enter 0 1 675 0
48
static ButtonHandle KeyboardButton::enter(void);

1478 6 escape 0 4 1702 22 KeyboardButton::escape 0 1 676 0
49
static ButtonHandle KeyboardButton::escape(void);

1479 2 f1 0 4 1702 18 KeyboardButton::f1 0 1 677 0
45
static ButtonHandle KeyboardButton::f1(void);

1480 2 f2 0 4 1702 18 KeyboardButton::f2 0 1 678 0
45
static ButtonHandle KeyboardButton::f2(void);

1481 2 f3 0 4 1702 18 KeyboardButton::f3 0 1 679 0
45
static ButtonHandle KeyboardButton::f3(void);

1482 2 f4 0 4 1702 18 KeyboardButton::f4 0 1 680 0
45
static ButtonHandle KeyboardButton::f4(void);

1483 2 f5 0 4 1702 18 KeyboardButton::f5 0 1 681 0
45
static ButtonHandle KeyboardButton::f5(void);

1484 2 f6 0 4 1702 18 KeyboardButton::f6 0 1 682 0
45
static ButtonHandle KeyboardButton::f6(void);

1485 2 f7 0 4 1702 18 KeyboardButton::f7 0 1 683 0
45
static ButtonHandle KeyboardButton::f7(void);

1486 2 f8 0 4 1702 18 KeyboardButton::f8 0 1 684 0
45
static ButtonHandle KeyboardButton::f8(void);

1487 2 f9 0 4 1702 18 KeyboardButton::f9 0 1 685 0
45
static ButtonHandle KeyboardButton::f9(void);

1488 3 f10 0 4 1702 19 KeyboardButton::f10 0 1 686 0
46
static ButtonHandle KeyboardButton::f10(void);

1489 3 f11 0 4 1702 19 KeyboardButton::f11 0 1 687 0
46
static ButtonHandle KeyboardButton::f11(void);

1490 3 f12 0 4 1702 19 KeyboardButton::f12 0 1 688 0
46
static ButtonHandle KeyboardButton::f12(void);

1491 3 f13 0 4 1702 19 KeyboardButton::f13 0 1 689 59
// PC keyboards don't have these four buttons, but Macs do.
46
static ButtonHandle KeyboardButton::f13(void);

1492 3 f14 0 4 1702 19 KeyboardButton::f14 0 1 690 59
// PC keyboards don't have these four buttons, but Macs do.
46
static ButtonHandle KeyboardButton::f14(void);

1493 3 f15 0 4 1702 19 KeyboardButton::f15 0 1 691 0
46
static ButtonHandle KeyboardButton::f15(void);

1494 3 f16 0 4 1702 19 KeyboardButton::f16 0 1 692 0
46
static ButtonHandle KeyboardButton::f16(void);

1495 4 left 0 4 1702 20 KeyboardButton::left 0 1 693 0
47
static ButtonHandle KeyboardButton::left(void);

1496 5 right 0 4 1702 21 KeyboardButton::right 0 1 694 0
48
static ButtonHandle KeyboardButton::right(void);

1497 2 up 0 4 1702 18 KeyboardButton::up 0 1 695 0
45
static ButtonHandle KeyboardButton::up(void);

1498 4 down 0 4 1702 20 KeyboardButton::down 0 1 696 0
47
static ButtonHandle KeyboardButton::down(void);

1499 7 page_up 0 4 1702 23 KeyboardButton::page_up 0 1 697 0
50
static ButtonHandle KeyboardButton::page_up(void);

1500 9 page_down 0 4 1702 25 KeyboardButton::page_down 0 1 698 0
52
static ButtonHandle KeyboardButton::page_down(void);

1501 4 home 0 4 1702 20 KeyboardButton::home 0 1 699 0
47
static ButtonHandle KeyboardButton::home(void);

1502 3 end 0 4 1702 19 KeyboardButton::end 0 1 700 0
46
static ButtonHandle KeyboardButton::end(void);

1503 6 insert 0 4 1702 22 KeyboardButton::insert 0 1 701 0
49
static ButtonHandle KeyboardButton::insert(void);

1504 3 del 0 4 1702 19 KeyboardButton::del 0 1 702 0
46
static ButtonHandle KeyboardButton::del(void);

1505 4 help 0 4 1702 20 KeyboardButton::help 0 1 703 27
// delete is a C++ keyword.
47
static ButtonHandle KeyboardButton::help(void);

1506 4 menu 0 4 1702 20 KeyboardButton::menu 0 1 704 27
// delete is a C++ keyword.
47
static ButtonHandle KeyboardButton::menu(void);

1507 5 shift 0 4 1702 21 KeyboardButton::shift 0 1 705 0
48
static ButtonHandle KeyboardButton::shift(void);

1508 7 control 0 4 1702 23 KeyboardButton::control 0 1 706 0
50
static ButtonHandle KeyboardButton::control(void);

1509 3 alt 0 4 1702 19 KeyboardButton::alt 0 1 707 0
46
static ButtonHandle KeyboardButton::alt(void);

1510 4 meta 0 4 1702 20 KeyboardButton::meta 0 1 708 0
47
static ButtonHandle KeyboardButton::meta(void);

1511 9 caps_lock 0 4 1702 25 KeyboardButton::caps_lock 0 1 709 0
52
static ButtonHandle KeyboardButton::caps_lock(void);

1512 10 shift_lock 0 4 1702 26 KeyboardButton::shift_lock 0 1 710 0
53
static ButtonHandle KeyboardButton::shift_lock(void);

1513 8 num_lock 0 4 1702 24 KeyboardButton::num_lock 0 1 711 0
51
static ButtonHandle KeyboardButton::num_lock(void);

1514 11 scroll_lock 0 4 1702 27 KeyboardButton::scroll_lock 0 1 712 0
54
static ButtonHandle KeyboardButton::scroll_lock(void);

1515 12 print_screen 0 4 1702 28 KeyboardButton::print_screen 0 1 713 0
55
static ButtonHandle KeyboardButton::print_screen(void);

1516 5 pause 0 4 1702 21 KeyboardButton::pause 0 1 714 0
48
static ButtonHandle KeyboardButton::pause(void);

1517 6 lshift 0 4 1702 22 KeyboardButton::lshift 0 1 715 0
49
static ButtonHandle KeyboardButton::lshift(void);

1518 6 rshift 0 4 1702 22 KeyboardButton::rshift 0 1 716 0
49
static ButtonHandle KeyboardButton::rshift(void);

1519 8 lcontrol 0 4 1702 24 KeyboardButton::lcontrol 0 1 717 0
51
static ButtonHandle KeyboardButton::lcontrol(void);

1520 8 rcontrol 0 4 1702 24 KeyboardButton::rcontrol 0 1 718 0
51
static ButtonHandle KeyboardButton::rcontrol(void);

1521 4 lalt 0 4 1702 20 KeyboardButton::lalt 0 1 719 0
47
static ButtonHandle KeyboardButton::lalt(void);

1522 4 ralt 0 4 1702 20 KeyboardButton::ralt 0 1 720 0
47
static ButtonHandle KeyboardButton::ralt(void);

1523 5 lmeta 0 4 1702 21 KeyboardButton::lmeta 0 1 721 0
48
static ButtonHandle KeyboardButton::lmeta(void);

1524 5 rmeta 0 4 1702 21 KeyboardButton::rmeta 0 1 722 0
48
static ButtonHandle KeyboardButton::rmeta(void);

1525 15 ~KeyboardButton 0 4 1702 31 KeyboardButton::~KeyboardButton 0 0 0
38
KeyboardButton::~KeyboardButton(void);

1526 10 LineStream 0 4 1703 22 LineStream::LineStream 0 1 723 705
// Filename: lineStream.I
// Created by:  drose (26Feb00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LineStream::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
36
inline LineStream::LineStream(void);

1527 17 is_text_available 0 4 1703 29 LineStream::is_text_available 0 1 724 458
////////////////////////////////////////////////////////////////////
//     Function: LineStream::is_text_available
//       Access: Public
//  Description: Returns true if there is at least one line of text
//               (or even a partial line) available in the LineStream
//               object.  If this returns true, the line may then be
//               retrieved via get_line().
////////////////////////////////////////////////////////////////////
54
inline bool LineStream::is_text_available(void) const;

1528 8 get_line 0 4 1703 20 LineStream::get_line 0 1 725 540
////////////////////////////////////////////////////////////////////
//     Function: LineStream::get_line
//       Access: Public
//  Description: Extracts and returns the next line (or partial line)
//               of text available in the LineStream object.  Once the
//               line has been extracted, you may call has_newline()
//               to determine whether or not there was an explicit
//               newline character written following this line.
////////////////////////////////////////////////////////////////////
55
inline basic_string< char > LineStream::get_line(void);

1529 11 has_newline 0 4 1703 23 LineStream::has_newline 0 1 726 460
////////////////////////////////////////////////////////////////////
//     Function: LineStream::has_newline
//       Access: Public
//  Description: Returns true if the line of text most recently
//               returned by get_line() was written out with a
//               terminating newline, or false if a newline character
//               has not yet been written to the LineStream.
////////////////////////////////////////////////////////////////////
48
inline bool LineStream::has_newline(void) const;

1530 11 ~LineStream 0 4 1703 23 LineStream::~LineStream 0 0 0
30
LineStream::~LineStream(void);

1531 13 load_prc_file 0 1 0 13 load_prc_file 0 1 850 1916
////////////////////////////////////////////////////////////////////
//     Function: load_prc_file
//  Description: A convenience function for loading explicit prc files
//               from a disk file or from within a multifile (via the
//               virtual file system).  Save the return value and pass
//               it to unload_prc_file() if you ever want to unload
//               this file later.
//
//               The filename is first searched along the default prc
//               search path, and then also along the model path, for
//               convenience.
//
//               This function is defined in putil instead of in dtool
//               with the read of the prc stuff, so that it can take
//               advantage of the virtual file system (which is
//               defined in express), and the model path (which is in
//               putil).
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: load_prc_file
//  Description: A convenience function for loading explicit prc files
//               from a disk file or from within a multifile (via the
//               virtual file system).  Save the return value and pass
//               it to unload_prc_file() if you ever want to unload
//               this file later.
//
//               The filename is first searched along the default prc
//               search path, and then also along the model path, for
//               convenience.
//
//               This function is defined in putil instead of in dtool
//               with the read of the prc stuff, so that it can take
//               advantage of the virtual file system (which is
//               defined in express), and the model path (which is in
//               putil).
////////////////////////////////////////////////////////////////////
52
ConfigPage *load_prc_file(Filename const &filename);

1532 18 load_prc_file_data 0 1 0 18 load_prc_file_data 0 1 851 1362
////////////////////////////////////////////////////////////////////
//     Function: load_prc_file_data
//  Description: Another convenience function to load a prc file from
//               an explicit string, which represents the contents of
//               the prc file.
//
//               The first parameter is an arbitrary name to assign to
//               this in-memory prc file.  Supply a filename if the
//               data was read from a file, or use any other name that
//               is meaningful to you.  The name is only used when the
//               set of loaded prc files is listed.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: load_prc_file_data
//  Description: Another convenience function to load a prc file from
//               an explicit string, which represents the contents of
//               the prc file.
//
//               The first parameter is an arbitrary name to assign to
//               this in-memory prc file.  Supply a filename if the
//               data was read from a file, or use any other name that
//               is meaningful to you.  The name is only used when the
//               set of loaded prc files is listed.
////////////////////////////////////////////////////////////////////
99
ConfigPage *load_prc_file_data(basic_string< char > const &name, basic_string< char > const &data);

1533 15 unload_prc_file 0 1 0 15 unload_prc_file 0 1 852 1142
////////////////////////////////////////////////////////////////////
//     Function: unload_prc_file
//  Description: Unloads (and deletes) a ConfigPage that represents a
//               prc file that was previously loaded by
//               load_prc_file().  Returns true if successful, false
//               if the file was unknown.
//
//               After this function has been called, the ConfigPage
//               pointer is no longer valid and should not be used
//               again.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: unload_prc_file
//  Description: Unloads (and deletes) a ConfigPage that represents a
//               prc file that was previously loaded by
//               load_prc_file().  Returns true if successful, false
//               if the file was unknown.
//
//               After this function has been called, the ConfigPage
//               pointer is no longer valid and should not be used
//               again.
////////////////////////////////////////////////////////////////////
39
bool unload_prc_file(ConfigPage *page);

1534 18 hash_prc_variables 0 1 0 18 hash_prc_variables 0 1 853 692
////////////////////////////////////////////////////////////////////
//     Function: hash_prc_variables
//  Description: Fills HashVal with the hash from the current prc file
//               state as reported by
//               ConfigVariableManager::write_prc_variables().
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: hash_prc_variables
//  Description: Fills HashVal with the hash from the current prc file
//               state as reported by
//               ConfigVariableManager::write_prc_variables().
////////////////////////////////////////////////////////////////////
39
void hash_prc_variables(HashVal &hash);

1535 15 ModifierButtons 0 4 1705 32 ModifierButtons::ModifierButtons 0 2 727 728 461
////////////////////////////////////////////////////////////////////
//     Function: ModifierButtons::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ModifierButtons::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
102
ModifierButtons::ModifierButtons(void);
ModifierButtons::ModifierButtons(ModifierButtons const &copy);

1536 16 ~ModifierButtons 0 4 1705 33 ModifierButtons::~ModifierButtons 0 0 226
////////////////////////////////////////////////////////////////////
//     Function: ModifierButtons::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
40
ModifierButtons::~ModifierButtons(void);

1537 10 operator = 0 4 1705 27 ModifierButtons::operator = 0 1 729 731
// Filename: modifierButtons.I
// Created by:  drose (01Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: ModifierButtons::Copy Assignment Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
69
inline void ModifierButtons::operator =(ModifierButtons const &copy);

1538 11 operator == 0 4 1705 28 ModifierButtons::operator == 0 1 730 546
////////////////////////////////////////////////////////////////////
//     Function: ModifierButtons::Equality Operator
//       Access: Published
//  Description: The equality operator is an exact comparision: the
//               two ModifierButtons are equal if they share the same
//               button list--indeed, the same pointer--and they all
//               the buttons have the same state.  Use matches() if a
//               less exact equality test is needed.
////////////////////////////////////////////////////////////////////
77
inline bool ModifierButtons::operator ==(ModifierButtons const &other) const;

1539 11 operator != 0 4 1705 28 ModifierButtons::operator != 0 1 731 235
////////////////////////////////////////////////////////////////////
//     Function: ModifierButtons::Inequality Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
77
inline bool ModifierButtons::operator !=(ModifierButtons const &other) const;

1540 10 operator < 0 4 1705 27 ModifierButtons::operator < 0 1 732 233
////////////////////////////////////////////////////////////////////
//     Function: ModifierButtons::Ordering Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
76
inline bool ModifierButtons::operator <(ModifierButtons const &other) const;

1541 10 operator & 0 4 1705 27 ModifierButtons::operator & 0 1 733 523
////////////////////////////////////////////////////////////////////
//     Function: ModifierButtons::operator &
//       Access: Published
//  Description: Returns a new ModifierButtons object for which
//               is_down() will be true only if it is true on both
//               source objects.  The set of buttons reported by
//               has_button() is not completely defined if both source
//               objects have a different set.
////////////////////////////////////////////////////////////////////
87
inline ModifierButtons ModifierButtons::operator &(ModifierButtons const &other) const;

1542 10 operator | 0 4 1705 27 ModifierButtons::operator | 0 1 734 527
////////////////////////////////////////////////////////////////////
//     Function: ModifierButtons::operator |
//       Access: Published
//  Description: Returns a new ModifierButtons object for which
//               is_down() will be true if it is true on either of the
//               source objects.  The set of buttons reported by
//               has_button() is not completely defined if both source
//               objects have a different set.
////////////////////////////////////////////////////////////////////
87
inline ModifierButtons ModifierButtons::operator |(ModifierButtons const &other) const;

1543 11 operator &= 0 4 1705 28 ModifierButtons::operator &= 0 1 735 338
////////////////////////////////////////////////////////////////////
//     Function: ModifierButtons::operator &=
//       Access: Published
//  Description: Sets is_down() true for any button that is already
//               true for this object and the other object.
////////////////////////////////////////////////////////////////////
64
void ModifierButtons::operator &=(ModifierButtons const &other);

1544 11 operator |= 0 4 1705 28 ModifierButtons::operator |= 0 1 736 437
////////////////////////////////////////////////////////////////////
//     Function: ModifierButtons::operator |=
//       Access: Published
//  Description: Sets is_down() true for any button that is already
//               true for this object and the other object.  Adds
//               whatever buttons are necessary to the list to make
//               this so
////////////////////////////////////////////////////////////////////
64
void ModifierButtons::operator |=(ModifierButtons const &other);

1545 15 set_button_list 0 4 1705 32 ModifierButtons::set_button_list 0 1 737 698
////////////////////////////////////////////////////////////////////
//     Function: ModifierButtons::set_button_list
//       Access: Published
//  Description: Sets the list of buttons to watch to be the same as
//               that of the other ModifierButtons object.  This makes
//               the lists pointer equivalent (until one or the other
//               is later modified).
//
//               This will preserve the state of any button that was
//               on the original list and is also on the new lists.
//               Any other buttons will get reset to the default state
//               of "up".
////////////////////////////////////////////////////////////////////
68
void ModifierButtons::set_button_list(ModifierButtons const &other);

1546 7 matches 0 4 1705 24 ModifierButtons::matches 0 1 738 504
////////////////////////////////////////////////////////////////////
//     Function: ModifierButtons::matches
//       Access: Published
//  Description: Returns true if the set of buttons indicated as down
//               by this ModifierButtons object is the same set of
//               buttons indicated as down by the other
//               ModifierButtons object.  The buttons indicated as up
//               are not relevant.
////////////////////////////////////////////////////////////////////
66
bool ModifierButtons::matches(ModifierButtons const &other) const;

1547 10 add_button 0 4 1705 27 ModifierButtons::add_button 0 1 739 523
////////////////////////////////////////////////////////////////////
//     Function: ModifierButtons::add_button
//       Access: Published
//  Description: Adds the indicated button to the set of buttons that
//               will be monitored for upness and downness.  Returns
//               true if the button was added, false if it was already
//               being monitored or if too many buttons are currently
//               being monitored.
////////////////////////////////////////////////////////////////////
54
bool ModifierButtons::add_button(ButtonHandle button);

1548 10 has_button 0 4 1705 27 ModifierButtons::has_button 0 1 740 339
////////////////////////////////////////////////////////////////////
//     Function: ModifierButtons::has_button
//       Access: Published
//  Description: Returns true if the indicated button is in the set of
//               buttons being monitored, false otherwise.
////////////////////////////////////////////////////////////////////
60
bool ModifierButtons::has_button(ButtonHandle button) const;

1549 13 remove_button 0 4 1705 30 ModifierButtons::remove_button 0 1 741 623
////////////////////////////////////////////////////////////////////
//     Function: ModifierButtons::remove_button
//       Access: Published
//  Description: Removes the indicated button from the set of buttons
//               being monitored.  Returns true if the button was
//               removed, false if it was not being monitored in the
//               first place.
//
//               Unlike the other methods, you cannot remove a button
//               by removing its alias; you have to remove exactly the
//               button itself.
////////////////////////////////////////////////////////////////////
57
bool ModifierButtons::remove_button(ButtonHandle button);

1550 15 get_num_buttons 0 4 1705 32 ModifierButtons::get_num_buttons 0 1 742 394
////////////////////////////////////////////////////////////////////
//     Function: ModifierButtons::get_num_buttons
//       Access: Published
//  Description: Returns the number of buttons that the
//               ModifierButtons object is monitoring (e.g. the number
//               of buttons passed to add_button()).
////////////////////////////////////////////////////////////////////
56
inline int ModifierButtons::get_num_buttons(void) const;

1551 10 get_button 0 4 1705 27 ModifierButtons::get_button 0 1 743 446
////////////////////////////////////////////////////////////////////
//     Function: ModifierButtons::get_button
//       Access: Published
//  Description: Returns the nth button that the ModifierButtons
//               object is monitoring (the nth button passed to
//               add_button()).  This must be in the range 0 <= index
//               < get_num_buttons().
////////////////////////////////////////////////////////////////////
65
inline ButtonHandle ModifierButtons::get_button(int index) const;

1552 11 button_down 0 4 1705 28 ModifierButtons::button_down 0 1 744 597
////////////////////////////////////////////////////////////////////
//     Function: ModifierButtons::button_down
//       Access: Published
//  Description: Records that a particular button has been pressed.
//               If the given button is one of the buttons that is
//               currently being monitored, this will update the
//               internal state appropriately; otherwise, it will do
//               nothing.  Returns true if the button is one that was
//               monitored, or false otherwise.
////////////////////////////////////////////////////////////////////
55
bool ModifierButtons::button_down(ButtonHandle button);

1553 9 button_up 0 4 1705 26 ModifierButtons::button_up 0 1 745 596
////////////////////////////////////////////////////////////////////
//     Function: ModifierButtons::button_up
//       Access: Published
//  Description: Records that a particular button has been released.
//               If the given button is one of the buttons that is
//               currently being monitored, this will update the
//               internal state appropriately; otherwise, it will do
//               nothing.  Returns true if the button is one that was
//               monitored, or false otherwise.
////////////////////////////////////////////////////////////////////
53
bool ModifierButtons::button_up(ButtonHandle button);

1554 14 all_buttons_up 0 4 1705 31 ModifierButtons::all_buttons_up 0 1 746 303
////////////////////////////////////////////////////////////////////
//     Function: ModifierButtons::all_buttons_up
//       Access: Published
//  Description: Marks all monitored buttons as being in the "up"
//               state.
////////////////////////////////////////////////////////////////////
50
inline void ModifierButtons::all_buttons_up(void);

1555 7 is_down 0 4 1705 24 ModifierButtons::is_down 0 2 747 748 735
////////////////////////////////////////////////////////////////////
//     Function: ModifierButtons::is_down
//       Access: Published
//  Description: Returns true if the indicated button is known to be
//               down, or false if it is known to be up.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ModifierButtons::is_down
//       Access: Published
//  Description: Returns true if the indicated button is known to be
//               down, or false if it is known to be up or if it is
//               not in the set of buttons being tracked.
////////////////////////////////////////////////////////////////////
112
bool ModifierButtons::is_down(ButtonHandle button) const;
inline bool ModifierButtons::is_down(int index) const;

1556 11 is_any_down 0 4 1705 28 ModifierButtons::is_any_down 0 1 749 340
////////////////////////////////////////////////////////////////////
//     Function: ModifierButtons::is_any_down
//       Access: Published
//  Description: Returns true if any of the tracked button are known
//               to be down, or false if all of them are up.
////////////////////////////////////////////////////////////////////
53
inline bool ModifierButtons::is_any_down(void) const;

1557 10 get_prefix 0 4 1705 27 ModifierButtons::get_prefix 0 1 750 397
////////////////////////////////////////////////////////////////////
//     Function: ModifierButtons::get_prefix
//       Access: Published
//  Description: Returns a string which can be used to prefix any
//               button name or event name with the unique set of
//               modifier buttons currently being held.
////////////////////////////////////////////////////////////////////
61
basic_string< char > ModifierButtons::get_prefix(void) const;

1558 6 output 0 4 1705 23 ModifierButtons::output 0 1 751 298
////////////////////////////////////////////////////////////////////
//     Function: ModifierButtons::output
//       Access: Published
//  Description: Writes a one-line summary of the buttons known to be
//               down.
////////////////////////////////////////////////////////////////////
49
void ModifierButtons::output(ostream &out) const;

1559 5 write 0 4 1705 22 ModifierButtons::write 0 1 752 365
////////////////////////////////////////////////////////////////////
//     Function: ModifierButtons::write
//       Access: Published
//  Description: Writes a multi-line summary including all of the
//               buttons being monitored and which ones are known to
//               be down.
////////////////////////////////////////////////////////////////////
48
void ModifierButtons::write(ostream &out) const;

1560 6 button 0 4 1706 19 MouseButton::button 0 1 753 424
////////////////////////////////////////////////////////////////////
//     Function: MouseButton::button
//       Access: Public, Static
//  Description: Returns the ButtonHandle associated with the
//               particular numbered mouse button (zero-based), if
//               there is one, or ButtonHandle::none() if there is
//               not.
////////////////////////////////////////////////////////////////////
59
static ButtonHandle MouseButton::button(int button_number);

1561 3 one 0 4 1706 16 MouseButton::one 0 1 754 302
////////////////////////////////////////////////////////////////////
//     Function: MouseButton::one
//       Access: Public, Static
//  Description: Returns the ButtonHandle associated with the
//               first mouse button.
////////////////////////////////////////////////////////////////////
43
static ButtonHandle MouseButton::one(void);

1562 3 two 0 4 1706 16 MouseButton::two 0 1 755 303
////////////////////////////////////////////////////////////////////
//     Function: MouseButton::two
//       Access: Public, Static
//  Description: Returns the ButtonHandle associated with the
//               second mouse button.
////////////////////////////////////////////////////////////////////
43
static ButtonHandle MouseButton::two(void);

1563 5 three 0 4 1706 18 MouseButton::three 0 1 756 304
////////////////////////////////////////////////////////////////////
//     Function: MouseButton::three
//       Access: Public, Static
//  Description: Returns the ButtonHandle associated with the
//               third mouse button.
////////////////////////////////////////////////////////////////////
45
static ButtonHandle MouseButton::three(void);

1564 4 four 0 4 1706 17 MouseButton::four 0 1 757 304
////////////////////////////////////////////////////////////////////
//     Function: MouseButton::four
//       Access: Public, Static
//  Description: Returns the ButtonHandle associated with the
//               fourth mouse button.
////////////////////////////////////////////////////////////////////
44
static ButtonHandle MouseButton::four(void);

1565 4 five 0 4 1706 17 MouseButton::five 0 1 758 303
////////////////////////////////////////////////////////////////////
//     Function: MouseButton::five
//       Access: Public, Static
//  Description: Returns the ButtonHandle associated with the
//               fifth mouse button.
////////////////////////////////////////////////////////////////////
44
static ButtonHandle MouseButton::five(void);

1566 8 wheel_up 0 4 1706 21 MouseButton::wheel_up 0 1 759 327
////////////////////////////////////////////////////////////////////
//     Function: MouseButton::wheel_up
//       Access: Public, Static
//  Description: Returns the ButtonHandle generated when the mouse
//               wheel is rolled one notch upwards.
////////////////////////////////////////////////////////////////////
48
static ButtonHandle MouseButton::wheel_up(void);

1567 10 wheel_down 0 4 1706 23 MouseButton::wheel_down 0 1 760 331
////////////////////////////////////////////////////////////////////
//     Function: MouseButton::wheel_down
//       Access: Public, Static
//  Description: Returns the ButtonHandle generated when the mouse
//               wheel is rolled one notch downwards.
////////////////////////////////////////////////////////////////////
50
static ButtonHandle MouseButton::wheel_down(void);

1568 10 wheel_left 0 4 1706 23 MouseButton::wheel_left 0 1 761 396
////////////////////////////////////////////////////////////////////
//     Function: MouseButton::wheel_left
//       Access: Public, Static
//  Description: Returns the ButtonHandle generated when the mouse
//               is scrolled to the left. Usually, you'll only
//               find the horizontal scroll on laptops.
////////////////////////////////////////////////////////////////////
50
static ButtonHandle MouseButton::wheel_left(void);

1569 11 wheel_right 0 4 1706 24 MouseButton::wheel_right 0 1 762 398
////////////////////////////////////////////////////////////////////
//     Function: MouseButton::wheel_right
//       Access: Public, Static
//  Description: Returns the ButtonHandle generated when the mouse
//               is scrolled to the right. Usually, you'll only
//               find the horizontal scroll on laptops.
////////////////////////////////////////////////////////////////////
51
static ButtonHandle MouseButton::wheel_right(void);

1570 15 is_mouse_button 0 4 1706 28 MouseButton::is_mouse_button 0 1 763 353
////////////////////////////////////////////////////////////////////
//     Function: MouseButton::is_mouse_button
//       Access: Public, Static
//  Description: Returns true if the indicated ButtonHandle is a mouse
//               button, false if it is some other kind of button.
////////////////////////////////////////////////////////////////////
62
static bool MouseButton::is_mouse_button(ButtonHandle button);

1571 12 ~MouseButton 0 4 1706 25 MouseButton::~MouseButton 0 0 0
32
MouseButton::~MouseButton(void);

1572 9 MouseData 0 4 1707 20 MouseData::MouseData 0 2 764 765 934
// Filename: mouseData.I
// Created by:  drose (15Jul02)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: MouseData::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: MouseData::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
86
inline MouseData::MouseData(void);
inline MouseData::MouseData(MouseData const &copy);

1573 10 operator = 0 4 1707 21 MouseData::operator = 0 1 766 234
////////////////////////////////////////////////////////////////////
//     Function: MouseData::Copy Assignment Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
57
inline void MouseData::operator =(MouseData const &copy);

1574 5 get_x 0 4 1707 16 MouseData::get_x 0 1 767 215
////////////////////////////////////////////////////////////////////
//     Function: MouseData::get_x
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
43
inline double MouseData::get_x(void) const;

1575 5 get_y 0 4 1707 16 MouseData::get_y 0 1 768 215
////////////////////////////////////////////////////////////////////
//     Function: MouseData::get_y
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
43
inline double MouseData::get_y(void) const;

1576 13 get_in_window 0 4 1707 24 MouseData::get_in_window 0 1 769 223
////////////////////////////////////////////////////////////////////
//     Function: MouseData::get_in_window
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
49
inline bool MouseData::get_in_window(void) const;

1577 6 output 0 4 1707 17 MouseData::output 0 1 770 216
////////////////////////////////////////////////////////////////////
//     Function: MouseData::output
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
43
void MouseData::output(ostream &out) const;

1578 10 ~MouseData 0 4 1707 21 MouseData::~MouseData 0 0 0
28
MouseData::~MouseData(void);

1579 18 get_node_ref_count 0 4 1708 44 NodeCachedReferenceCount::get_node_ref_count 0 1 771 280
////////////////////////////////////////////////////////////////////
//     Function: NodeCachedReferenceCount::get_node_ref_count
//       Access: Published
//  Description: Returns the current reference count.
////////////////////////////////////////////////////////////////////
68
inline int NodeCachedReferenceCount::get_node_ref_count(void) const;

1580 8 node_ref 0 4 1708 34 NodeCachedReferenceCount::node_ref 0 1 772 662
////////////////////////////////////////////////////////////////////
//     Function: NodeCachedReferenceCount::node_ref
//       Access: Published
//  Description: Explicitly increments the reference count.
//
//               This function is const, even though it changes the
//               object, because generally fiddling with an object's
//               reference count isn't considered part of fiddling
//               with the object.  An object might be const in other
//               ways, but we still need to accurately count the
//               number of references to it.
////////////////////////////////////////////////////////////////////
59
inline void NodeCachedReferenceCount::node_ref(void) const;

1581 10 node_unref 0 4 1708 36 NodeCachedReferenceCount::node_unref 0 1 773 468
////////////////////////////////////////////////////////////////////
//     Function: NodeCachedReferenceCount::node_unref
//       Access: Published
//  Description: Explicitly decrements the node reference count and
//               the normal reference count simultaneously.
//
//               The return value is true if the new reference count
//               is nonzero, false if it is zero.
////////////////////////////////////////////////////////////////////
61
inline bool NodeCachedReferenceCount::node_unref(void) const;

1582 24 test_ref_count_integrity 0 4 1708 50 NodeCachedReferenceCount::test_ref_count_integrity 0 1 774 350
////////////////////////////////////////////////////////////////////
//     Function: NodeCachedReferenceCount::test_ref_count_integrity
//       Access: Published
//  Description: Does some easy checks to make sure that the reference
//               count isn't completely bogus.
////////////////////////////////////////////////////////////////////
75
inline bool NodeCachedReferenceCount::test_ref_count_integrity(void) const;

1583 19 get_referenced_bits 0 4 1708 45 NodeCachedReferenceCount::get_referenced_bits 0 1 775 600
////////////////////////////////////////////////////////////////////
//     Function: NodeCachedReferenceCount::get_referenced_bits
//       Access: Published
//  Description: Returns the union of the values defined in the
//               Referenced enum that represents the various things
//               that appear to be holding a pointer to this object.
//
//               If R_node is included, at least one node is holding a
//               pointer; if R_cache is included, at least one cache
//               element is.
////////////////////////////////////////////////////////////////////
69
inline int NodeCachedReferenceCount::get_referenced_bits(void) const;

1584 14 get_class_type 0 4 1708 40 NodeCachedReferenceCount::get_class_type 0 1 776 0
65
static TypeHandle NodeCachedReferenceCount::get_class_type(void);

1585 11 SparseArray 0 4 1710 24 SparseArray::SparseArray 0 3 777 778 779 1181
// Filename: sparseArray.I
// Created by:  drose (14Feb07)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: SparseArray::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: SparseArray::Constructor (from BitArray)
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
144
inline SparseArray::SparseArray(void);
inline SparseArray::SparseArray(SparseArray const &copy);
SparseArray::SparseArray(BitArray const &from);

1586 10 operator = 0 4 1710 23 SparseArray::operator = 0 1 780 236
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::Copy Assignment Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
69
inline SparseArray &SparseArray::operator =(SparseArray const &copy);

1587 6 all_on 0 4 1710 19 SparseArray::all_on 0 1 781 323
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::Named all_on constructor
//       Access: Published, Static
//  Description: Returns a SparseArray with an infinite array of bits,
//               all on.
////////////////////////////////////////////////////////////////////
52
static inline SparseArray SparseArray::all_on(void);

1588 7 all_off 0 4 1710 20 SparseArray::all_off 0 1 782 290
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::Named all_on constructor
//       Access: Published, Static
//  Description: Returns a SparseArray whose bits are all off.
////////////////////////////////////////////////////////////////////
53
static inline SparseArray SparseArray::all_off(void);

1589 8 lower_on 0 4 1710 21 SparseArray::lower_on 0 1 783 301
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::Named lower_on constructor
//       Access: Published, Static
//  Description: Returns a SparseArray whose lower on_bits bits are on.
////////////////////////////////////////////////////////////////////
61
static inline SparseArray SparseArray::lower_on(int on_bits);

1590 3 bit 0 4 1710 16 SparseArray::bit 0 1 784 295
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::Named bit constructor
//       Access: Published, Static
//  Description: Returns a SparseArray with only the indicated bit on.
////////////////////////////////////////////////////////////////////
54
static inline SparseArray SparseArray::bit(int index);

1591 5 range 0 4 1710 18 SparseArray::range 0 1 785 329
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::Named range constructor
//       Access: Published, Static
//  Description: Returns a SparseArray whose size bits, beginning at
//               low_bit, are on.
////////////////////////////////////////////////////////////////////
68
static inline SparseArray SparseArray::range(int low_bit, int size);

1592 12 ~SparseArray 0 4 1710 25 SparseArray::~SparseArray 0 0 222
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
39
inline SparseArray::~SparseArray(void);

1593 16 has_max_num_bits 0 4 1710 29 SparseArray::has_max_num_bits 0 1 786 723
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::has_max_num_bits
//       Access: Published, Static
//  Description: Returns true if there is a maximum number of bits
//               that may be stored in this structure, false
//               otherwise.  If this returns true, the number may be
//               queried in get_max_num_bits().
//
//               This method always returns false.  The SparseArray has
//               no maximum number of bits.  This method is defined so
//               generic programming algorithms can use BitMask or
//               SparseArray interchangeably.
////////////////////////////////////////////////////////////////////
55
static inline bool SparseArray::has_max_num_bits(void);

1594 16 get_max_num_bits 0 4 1710 29 SparseArray::get_max_num_bits 0 1 787 758
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::get_max_num_bits
//       Access: Published, Static
//  Description: If get_max_num_bits() returned true, this method may
//               be called to return the maximum number of bits that
//               may be stored in this structure.  It is an error to
//               call this if get_max_num_bits() return false.
//
//               It is always an error to call this method.  The
//               SparseArray has no maximum number of bits.  This method
//               is defined so generic programming algorithms can use
//               BitMask or SparseArray interchangeably.
////////////////////////////////////////////////////////////////////
54
static inline int SparseArray::get_max_num_bits(void);

1595 12 get_num_bits 0 4 1710 25 SparseArray::get_num_bits 0 1 788 607
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::get_num_bits
//       Access: Published
//  Description: Returns the current number of possibly different bits
//               in this array.  There are actually an infinite number
//               of bits, but every bit higher than this bit will have
//               the same value, either 0 or 1 (see
//               get_highest_bits()).
//
//               This number may grow and/or shrink automatically as
//               needed.
////////////////////////////////////////////////////////////////////
49
inline int SparseArray::get_num_bits(void) const;

1596 7 get_bit 0 4 1710 20 SparseArray::get_bit 0 1 789 445
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::get_bit
//       Access: Published
//  Description: Returns true if the nth bit is set, false if it is
//               cleared.  It is valid for n to increase beyond
//               get_num_bits(), but the return value get_num_bits()
//               will always be the same.
////////////////////////////////////////////////////////////////////
50
inline bool SparseArray::get_bit(int index) const;

1597 7 set_bit 0 4 1710 20 SparseArray::set_bit 0 1 790 320
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::set_bit
//       Access: Published
//  Description: Sets the nth bit on.  If n >= get_num_bits(), this
//               automatically extends the array.
////////////////////////////////////////////////////////////////////
44
inline void SparseArray::set_bit(int index);

1598 9 clear_bit 0 4 1710 22 SparseArray::clear_bit 0 1 791 323
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::clear_bit
//       Access: Published
//  Description: Sets the nth bit off.  If n >= get_num_bits(), this
//               automatically extends the array.
////////////////////////////////////////////////////////////////////
46
inline void SparseArray::clear_bit(int index);

1599 10 set_bit_to 0 4 1710 23 SparseArray::set_bit_to 0 1 792 313
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::set_bit_to
//       Access: Published
//  Description: Sets the nth bit either on or off, according to the
//               indicated bool value.
////////////////////////////////////////////////////////////////////
59
inline void SparseArray::set_bit_to(int index, bool value);

1600 16 get_highest_bits 0 4 1710 29 SparseArray::get_highest_bits 0 1 793 367
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::get_highest_bits
//       Access: Published
//  Description: Returns true if the infinite set of bits beyond
//               get_num_bits() are all on, or false of they are all
//               off.
////////////////////////////////////////////////////////////////////
54
inline bool SparseArray::get_highest_bits(void) const;

1601 7 is_zero 0 4 1710 20 SparseArray::is_zero 0 1 794 297
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::is_zero
//       Access: Published
//  Description: Returns true if the entire bitmask is zero, false
//               otherwise.
////////////////////////////////////////////////////////////////////
45
inline bool SparseArray::is_zero(void) const;

1602 9 is_all_on 0 4 1710 22 SparseArray::is_all_on 0 1 795 298
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::is_all_on
//       Access: Published
//  Description: Returns true if the entire bitmask is one, false
//               otherwise.
////////////////////////////////////////////////////////////////////
47
inline bool SparseArray::is_all_on(void) const;

1603 10 has_any_of 0 4 1710 23 SparseArray::has_any_of 0 1 796 311
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::has_any_of
//       Access: Published
//  Description: Returns true if any bit in the indicated range is
//               set, false otherwise.
////////////////////////////////////////////////////////////////////
65
inline bool SparseArray::has_any_of(int low_bit, int size) const;

1604 10 has_all_of 0 4 1710 23 SparseArray::has_all_of 0 1 797 313
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::has_all_of
//       Access: Published
//  Description: Returns true if all bits in the indicated range are
//               set, false otherwise.
////////////////////////////////////////////////////////////////////
65
inline bool SparseArray::has_all_of(int low_bit, int size) const;

1605 9 set_range 0 4 1710 22 SparseArray::set_range 0 1 798 258
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::set_range
//       Access: Published
//  Description: Sets the indicated range of bits on.
////////////////////////////////////////////////////////////////////
58
inline void SparseArray::set_range(int low_bit, int size);

1606 11 clear_range 0 4 1710 24 SparseArray::clear_range 0 1 799 261
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::clear_range
//       Access: Published
//  Description: Sets the indicated range of bits off.
////////////////////////////////////////////////////////////////////
60
inline void SparseArray::clear_range(int low_bit, int size);

1607 12 set_range_to 0 4 1710 25 SparseArray::set_range_to 0 1 800 278
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::set_range_to
//       Access: Published
//  Description: Sets the indicated range of bits to either on or off.
////////////////////////////////////////////////////////////////////
73
inline void SparseArray::set_range_to(bool value, int low_bit, int size);

1608 15 get_num_on_bits 0 4 1710 28 SparseArray::get_num_on_bits 0 1 801 375
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::get_num_on_bits
//       Access: Published
//  Description: Returns the number of bits that are set to 1 in the
//               array.  Returns -1 if there are an infinite number of
//               1 bits.
////////////////////////////////////////////////////////////////////
45
int SparseArray::get_num_on_bits(void) const;

1609 16 get_num_off_bits 0 4 1710 29 SparseArray::get_num_off_bits 0 1 802 376
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::get_num_off_bits
//       Access: Published
//  Description: Returns the number of bits that are set to 0 in the
//               array.  Returns -1 if there are an infinite number of
//               0 bits.
////////////////////////////////////////////////////////////////////
46
int SparseArray::get_num_off_bits(void) const;

1610 17 get_lowest_on_bit 0 4 1710 30 SparseArray::get_lowest_on_bit 0 1 803 395
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::get_lowest_on_bit
//       Access: Published
//  Description: Returns the index of the lowest 1 bit in the array.
//               Returns -1 if there are no 1 bits or if there are an
//               infinite number of 1 bits.
////////////////////////////////////////////////////////////////////
47
int SparseArray::get_lowest_on_bit(void) const;

1611 18 get_lowest_off_bit 0 4 1710 31 SparseArray::get_lowest_off_bit 0 1 804 396
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::get_lowest_off_bit
//       Access: Published
//  Description: Returns the index of the lowest 0 bit in the array.
//               Returns -1 if there are no 0 bits or if there are an
//               infinite number of 1 bits.
////////////////////////////////////////////////////////////////////
48
int SparseArray::get_lowest_off_bit(void) const;

1612 18 get_highest_on_bit 0 4 1710 31 SparseArray::get_highest_on_bit 0 1 805 393
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::get_highest_on_bit
//       Access: Published
//  Description: Returns the index of the highest 1 bit in the array.
//               Returns -1 if there are no 1 bits or if there an
//               infinite number of 1 bits.
////////////////////////////////////////////////////////////////////
48
int SparseArray::get_highest_on_bit(void) const;

1613 19 get_highest_off_bit 0 4 1710 32 SparseArray::get_highest_off_bit 0 1 806 394
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::get_highest_off_bit
//       Access: Published
//  Description: Returns the index of the highest 0 bit in the array.
//               Returns -1 if there are no 0 bits or if there an
//               infinite number of 1 bits.
////////////////////////////////////////////////////////////////////
49
int SparseArray::get_highest_off_bit(void) const;

1614 29 get_next_higher_different_bit 0 4 1710 42 SparseArray::get_next_higher_different_bit 0 1 807 594
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::get_next_higher_different_bit
//       Access: Published
//  Description: Returns the index of the next bit in the array, above
//               low_bit, whose value is different that the value of
//               low_bit.  Returns low_bit again if all bits higher
//               than low_bit have the same value.
//
//               This can be used to quickly iterate through all of
//               the bits in the array.
////////////////////////////////////////////////////////////////////
66
int SparseArray::get_next_higher_different_bit(int low_bit) const;

1615 15 invert_in_place 0 4 1710 28 SparseArray::invert_in_place 0 1 808 324
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::invert_in_place
//       Access: Published
//  Description: Inverts all the bits in the SparseArray.  This is
//               equivalent to array = ~array.
////////////////////////////////////////////////////////////////////
47
inline void SparseArray::invert_in_place(void);

1616 18 has_bits_in_common 0 4 1710 31 SparseArray::has_bits_in_common 0 1 809 446
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::has_bits_in_common
//       Access: Published
//  Description: Returns true if this SparseArray has any "one" bits in
//               common with the other one, false otherwise.
//
//               This is equivalent to (array & other) != 0, but may
//               be faster.
////////////////////////////////////////////////////////////////////
69
bool SparseArray::has_bits_in_common(SparseArray const &other) const;

1617 5 clear 0 4 1710 18 SparseArray::clear 0 1 810 259
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::clear
//       Access: Published
//  Description: Sets all the bits in the SparseArray off.
////////////////////////////////////////////////////////////////////
37
inline void SparseArray::clear(void);

1618 6 output 0 4 1710 19 SparseArray::output 0 1 811 219
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::output
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
45
void SparseArray::output(ostream &out) const;

1619 11 operator == 0 4 1710 24 SparseArray::operator == 0 1 812 223
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::operator ==
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
69
inline bool SparseArray::operator ==(SparseArray const &other) const;

1620 11 operator != 0 4 1710 24 SparseArray::operator != 0 1 813 223
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::operator !=
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
69
inline bool SparseArray::operator !=(SparseArray const &other) const;

1621 10 operator < 0 4 1710 23 SparseArray::operator < 0 1 814 387
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::operator <
//       Access: Published
//  Description: Returns true if the unsigned integer which is
//               represented by this SparseArray is less than that of the
//               other one, false otherwise.
////////////////////////////////////////////////////////////////////
68
inline bool SparseArray::operator <(SparseArray const &other) const;

1622 10 compare_to 0 4 1710 23 SparseArray::compare_to 0 1 815 513
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::compare_to
//       Access: Published
//  Description: Returns a number less than zero if this SparseArray
//               sorts before the indicated other SparseArray, greater
//               than zero if it sorts after, or 0 if they are
//               equivalent.  This is based on the same ordering
//               defined by operator <.
////////////////////////////////////////////////////////////////////
60
int SparseArray::compare_to(SparseArray const &other) const;

1623 10 operator & 0 4 1710 23 SparseArray::operator & 0 1 816 222
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::operator &
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
75
inline SparseArray SparseArray::operator &(SparseArray const &other) const;

1624 10 operator | 0 4 1710 23 SparseArray::operator | 0 1 817 222
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::operator |
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
75
inline SparseArray SparseArray::operator |(SparseArray const &other) const;

1625 10 operator ^ 0 4 1710 23 SparseArray::operator ^ 0 1 818 222
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::operator ^
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
75
inline SparseArray SparseArray::operator ^(SparseArray const &other) const;

1626 10 operator ~ 0 68 1710 23 SparseArray::operator ~ 0 1 819 222
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::operator ~
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
55
inline SparseArray SparseArray::operator ~(void) const;

1627 11 operator << 0 4 1710 24 SparseArray::operator << 0 1 820 223
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::operator <<
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
61
inline SparseArray SparseArray::operator <<(int shift) const;

1628 11 operator >> 0 4 1710 24 SparseArray::operator >> 0 1 821 223
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::operator >>
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
61
inline SparseArray SparseArray::operator >>(int shift) const;

1629 11 operator &= 0 4 1710 24 SparseArray::operator &= 0 1 822 223
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::operator &=
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
56
void SparseArray::operator &=(SparseArray const &other);

1630 11 operator |= 0 4 1710 24 SparseArray::operator |= 0 1 823 223
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::operator |=
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
56
void SparseArray::operator |=(SparseArray const &other);

1631 11 operator ^= 0 4 1710 24 SparseArray::operator ^= 0 1 824 223
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::operator ^=
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
56
void SparseArray::operator ^=(SparseArray const &other);

1632 12 operator <<= 0 4 1710 25 SparseArray::operator <<= 0 1 825 406
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::operator <<=
//       Access: Published
//  Description: Logical left shift.  Since negative bit positions
//               have meaning in a SparseArray, real bit values are
//               rotated in on the left (not necessarily zero).
////////////////////////////////////////////////////////////////////
49
inline void SparseArray::operator <<=(int shift);

1633 12 operator >>= 0 4 1710 25 SparseArray::operator >>= 0 1 826 412
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::operator >>=
//       Access: Published
//  Description: Logical right shift.  The rightmost bits become
//               negative, but are not lost; they will reappear into
//               the zero position if the array is later left-shifted.
////////////////////////////////////////////////////////////////////
49
inline void SparseArray::operator >>=(int shift);

1634 10 is_inverse 0 4 1710 23 SparseArray::is_inverse 0 1 827 614
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::is_inverse
//       Access: Published
//  Description: If this is true, the SparseArray is actually defined
//               as a list of subranges of integers that are *not* in
//               the set.  If this is false (the default), then the
//               subranges define the integers that *are* in the set.
//               This affects the interpretation of the values
//               returned by iterating through get_num_subranges().
////////////////////////////////////////////////////////////////////
48
inline bool SparseArray::is_inverse(void) const;

1635 17 get_num_subranges 0 4 1710 30 SparseArray::get_num_subranges 0 1 828 515
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::get_num_subranges
//       Access: Published
//  Description: Returns the number of separate subranges stored in
//               the SparseArray.  You can use this limit to iterate
//               through the subranges, calling get_subrange_begin()
//               and get_subrange_end() for each one.
//
//               Also see is_inverse().
////////////////////////////////////////////////////////////////////
54
inline int SparseArray::get_num_subranges(void) const;

1636 18 get_subrange_begin 0 4 1710 31 SparseArray::get_subrange_begin 0 1 829 345
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::get_subrange_begin
//       Access: Published
//  Description: Returns the first numeric element in the nth
//               subrange.
//
//               Also see is_inverse().
////////////////////////////////////////////////////////////////////
56
inline int SparseArray::get_subrange_begin(int n) const;

1637 16 get_subrange_end 0 4 1710 29 SparseArray::get_subrange_end 0 1 830 353
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::get_subrange_end
//       Access: Published
//  Description: Returns the last numeric element, plus one, in the
//               nth subrange.
//
//               Also see is_inverse().
////////////////////////////////////////////////////////////////////
54
inline int SparseArray::get_subrange_end(int n) const;

1638 14 get_class_type 0 4 1710 27 SparseArray::get_class_type 0 1 831 0
52
static TypeHandle SparseArray::get_class_type(void);

1639 20 PythonCallbackObject 0 4 1711 42 PythonCallbackObject::PythonCallbackObject 0 2 832 833 232
////////////////////////////////////////////////////////////////////
//     Function: PythonCallbackObject::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
75
PythonCallbackObject::PythonCallbackObject(PyObject *function = (Py_None));

1640 12 operator new 0 4 1711 34 PythonCallbackObject::operator new 0 1 834 0
146
inline void *PythonCallbackObject::operator new(unsigned int size);
inline void *PythonCallbackObject::operator new(unsigned int size, void *ptr);

1641 15 operator delete 0 4 1711 37 PythonCallbackObject::operator delete 0 0 0
128
inline void PythonCallbackObject::operator delete(void *ptr);
inline void PythonCallbackObject::operator delete(void *, void *);

1642 12 validate_ptr 0 4 1711 34 PythonCallbackObject::validate_ptr 0 0 0
71
static inline bool PythonCallbackObject::validate_ptr(void const *ptr);

1643 12 set_function 0 4 1711 34 PythonCallbackObject::set_function 0 1 835 379
////////////////////////////////////////////////////////////////////
//     Function: PythonCallbackObject::set_function
//       Access: Published
//  Description: Replaces the function that is called for the callback.
//               runs.  The parameter should be a Python callable
//               object.
////////////////////////////////////////////////////////////////////
60
void PythonCallbackObject::set_function(PyObject *function);

1644 12 get_function 0 4 1711 34 PythonCallbackObject::get_function 0 1 836 287
////////////////////////////////////////////////////////////////////
//     Function: PythonCallbackObject::get_function
//       Access: Published
//  Description: Returns the function that is called for the callback.
////////////////////////////////////////////////////////////////////
51
PyObject *PythonCallbackObject::get_function(void);

1645 14 get_class_type 0 4 1711 36 PythonCallbackObject::get_class_type 0 1 837 0
61
static TypeHandle PythonCallbackObject::get_class_type(void);

1646 14 get_class_type 0 4 1712 36 WritableConfigurable::get_class_type 0 1 838 0
61
static TypeHandle WritableConfigurable::get_class_type(void);

1647 21 ~WritableConfigurable 0 4 1712 43 WritableConfigurable::~WritableConfigurable 0 0 0
50
WritableConfigurable::~WritableConfigurable(void);

1648 17 UniqueIdAllocator 0 4 1713 36 UniqueIdAllocator::UniqueIdAllocator 0 3 839 840 841 275
////////////////////////////////////////////////////////////////////
//     Function: UniqueIdAllocator::Constructor
//       Access: Published
//  Description: Create a free id pool in the range [min:max].
////////////////////////////////////////////////////////////////////
86
UniqueIdAllocator::UniqueIdAllocator(unsigned int min = (0), unsigned int max = (20));

1649 18 ~UniqueIdAllocator 0 4 1713 37 UniqueIdAllocator::~UniqueIdAllocator 0 0 229
////////////////////////////////////////////////////////////////////
//     Function: UniqueIdAllocator::Destructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
44
UniqueIdAllocator::~UniqueIdAllocator(void);

1650 8 allocate 0 4 1713 27 UniqueIdAllocator::allocate 0 1 842 381
////////////////////////////////////////////////////////////////////
//     Function: UniqueIdAllocator::allocate
//       Access: Published
//  Description: Returns an id between _min and _max (that were passed
//               to the constructor).
//               IndexEnd is returned if no ids are available.
////////////////////////////////////////////////////////////////////
47
unsigned int UniqueIdAllocator::allocate(void);

1651 18 initial_reserve_id 0 4 1713 37 UniqueIdAllocator::initial_reserve_id 0 1 843 893
////////////////////////////////////////////////////////////////////
//     Function: UniqueIdAllocator::initial_reserve_id
//       Access: Published
//  Description: This may be called to mark a particular id as having
//               already been allocated (for instance, by a prior
//               pass).  The specified id is removed from the
//               available pool.
//
//               Because of the limitations of this algorithm, this is
//               most efficient when it is called before the first
//               call to allocate(), and when all the calls to
//               initial_reserve_id() are made in descending order by
//               id.  However, this is a performance warning only; if
//               performance is not an issue, any id may be reserved
//               at any time.
////////////////////////////////////////////////////////////////////
60
void UniqueIdAllocator::initial_reserve_id(unsigned int id);

1652 4 free 0 4 1713 23 UniqueIdAllocator::free 0 1 844 338
////////////////////////////////////////////////////////////////////
//     Function: UniqueIdAllocator::free
//       Access: Published
//  Description: Free an allocated index (index must be between _min
//               and _max that were passed to the constructor).
////////////////////////////////////////////////////////////////////
49
void UniqueIdAllocator::free(unsigned int index);

1653 13 fraction_used 0 4 1713 32 UniqueIdAllocator::fraction_used 0 1 845 350
////////////////////////////////////////////////////////////////////
//     Function: UniqueIdAllocator::fraction_used
//       Access: Published
//  Description: return the decimal fraction of the pool that is used.
//               The range is 0 to 1.0 (e.g. 75% would be 0.75).
////////////////////////////////////////////////////////////////////
51
float UniqueIdAllocator::fraction_used(void) const;

1654 6 output 0 4 1713 25 UniqueIdAllocator::output 0 1 846 256
////////////////////////////////////////////////////////////////////
//     Function: UniqueIdAllocator::output
//       Access: Published
//  Description: ...intended for debugging only.
////////////////////////////////////////////////////////////////////
51
void UniqueIdAllocator::output(ostream &out) const;

1655 5 write 0 4 1713 24 UniqueIdAllocator::write 0 1 847 255
////////////////////////////////////////////////////////////////////
//     Function: UniqueIdAllocator::write
//       Access: Published
//  Description: ...intended for debugging only.
////////////////////////////////////////////////////////////////////
50
void UniqueIdAllocator::write(ostream &out) const;

1656 39 py_decode_TypedWritable_from_bam_stream 0 1 0 39 py_decode_TypedWritable_from_bam_stream 0 1 854 0
106
PyObject *py_decode_TypedWritable_from_bam_stream(PyObject *this_class, basic_string< char > const &data);

1657 47 py_decode_TypedWritable_from_bam_stream_persist 0 1 0 47 py_decode_TypedWritable_from_bam_stream_persist 0 1 855 0
135
PyObject *py_decode_TypedWritable_from_bam_stream_persist(PyObject *unpickler, PyObject *this_class, basic_string< char > const &data);

855
1 14 Dtool_xqRvX63M 0 7 8 1716 869 14 Dtool_xqRvX63M 0 1 4 copy 1 1714  
2 14 Dtool_xqRv1HLX 0 7 8 1716 869 14 Dtool_xqRv1HLX 0 1 4 copy 1 1717  
3 14 Dtool_xqRvlmGb 0 7 8 1716 869 14 Dtool_xqRvlmGb 0 2 4 self 1 1719  6 source 1 1719  
4 14 Dtool_xqRvsFvc 0 6 9 1721 0 14 Dtool_xqRvsFvc 0 1 4 this 3 1714  
5 14 Dtool_xqRv_r_f 0 6 10 1722 0 14 Dtool_xqRv_r_f 0 2 4 this 3 1714  1 n 1 1721  
6 14 Dtool_xqRvyg6O 0 6 11 1722 0 14 Dtool_xqRvyg6O 0 2 4 this 3 1714  1 n 1 1721  
7 14 Dtool_xqRvFXK9 0 6 12 1723 0 14 Dtool_xqRvFXK9 0 1 4 this 3 1714  
8 14 Dtool_xqRvgZO_ 0 6 13 1723 0 14 Dtool_xqRvgZO_ 0 3 4 this 3 1714  1 n 1 1721  5 count 1 1721  
9 14 Dtool_xqRvyoll 0 6 14 1724 0 14 Dtool_xqRvyoll 0 1 4 this 3 1714  
10 14 Dtool_xqRvAXXF 0 6 15 1724 0 14 Dtool_xqRvAXXF 0 1 4 this 3 1714  
11 14 Dtool_xqRvClem 0 6 16 1724 0 14 Dtool_xqRvClem 0 4 4 this 3 1714  4 self 1 1719  4 view 1 1725  5 flags 1 1724  
12 14 Dtool_xqRvT3Bm 0 4 17 1727 0 14 Dtool_xqRvT3Bm 0 3 4 this 3 1714  4 self 1 1719  4 view 1 1725  
13 14 Dtool_xqRvwEyO 0 4 5 1727 0 14 Dtool_xqRvwEyO 0 1 4 this 3 1728  
14 14 Dtool_xqRvh3jh 0 4 6 1727 0 14 Dtool_xqRvh3jh 0 2 4 this 3 1729  3 out 1 1731  
15 14 Dtool_xqRv8B9l 0 7 20 1732 877 14 Dtool_xqRv8B9l 0 0 
16 14 Dtool_xqRvsm_Z 0 7 20 1732 877 14 Dtool_xqRvsm_Z 0 1 4 copy 1 1733  
17 14 Dtool_xqRvkq1x 0 6 21 1732 0 14 Dtool_xqRvkq1x 0 2 4 this 3 1732  4 copy 1 1733  
18 14 Dtool_xqRvVHPu 0 7 22 1732 877 14 Dtool_xqRvVHPu 0 0 
19 14 Dtool_xqRvkrT6 0 7 23 1732 877 14 Dtool_xqRvkrT6 0 0 
20 14 Dtool_xqRvPteB 0 7 24 1732 877 14 Dtool_xqRvPteB 0 1 7 on_bits 1 1724  
21 14 Dtool_xqRvEES9 0 7 25 1732 877 14 Dtool_xqRvEES9 0 1 5 index 1 1724  
22 14 Dtool_xqRv2jZV 0 7 26 1732 877 14 Dtool_xqRv2jZV 0 2 7 low_bit 1 1724  4 size 1 1724  
23 14 Dtool_xqRvrw_P 0 6 28 1735 0 14 Dtool_xqRvrw_P 0 0 
24 14 Dtool_xqRvkA7l 0 6 29 1724 0 14 Dtool_xqRvkA7l 0 0 
25 14 Dtool_xqRvn_6E 0 6 30 1724 0 14 Dtool_xqRvn_6E 0 0 
26 14 Dtool_xqRvNI0e 0 6 31 1735 0 14 Dtool_xqRvNI0e 0 2 4 this 3 1733  5 index 1 1724  
27 14 Dtool_xqRvbA_k 0 4 32 1727 0 14 Dtool_xqRvbA_k 0 2 4 this 3 1732  5 index 1 1724  
28 14 Dtool_xqRvTA34 0 4 33 1727 0 14 Dtool_xqRvTA34 0 2 4 this 3 1732  5 index 1 1724  
29 14 Dtool_xqRvN6Cn 0 4 34 1727 0 14 Dtool_xqRvN6Cn 0 3 4 this 3 1732  5 index 1 1724  5 value 1 1735  
30 14 Dtool_xqRvADmV 0 6 35 1735 0 14 Dtool_xqRvADmV 0 1 4 this 3 1733  
31 14 Dtool_xqRv3P9m 0 6 36 1735 0 14 Dtool_xqRv3P9m 0 1 4 this 3 1733  
32 14 Dtool_xqRvxFld 0 6 37 1721 0 14 Dtool_xqRvxFld 0 3 4 this 3 1733  7 low_bit 1 1724  4 size 1 1724  
33 14 Dtool_xqRvZDj3 0 4 38 1727 0 14 Dtool_xqRvZDj3 0 4 4 this 3 1732  5 value 1 1721  7 low_bit 1 1724  4 size 1 1724  
34 14 Dtool_xqRvyIIs 0 6 39 1735 0 14 Dtool_xqRvyIIs 0 3 4 this 3 1733  7 low_bit 1 1724  4 size 1 1724  
35 14 Dtool_xqRvOfMc 0 6 40 1735 0 14 Dtool_xqRvOfMc 0 3 4 this 3 1733  7 low_bit 1 1724  4 size 1 1724  
36 14 Dtool_xqRvPdea 0 4 41 1727 0 14 Dtool_xqRvPdea 0 3 4 this 3 1732  7 low_bit 1 1724  4 size 1 1724  
37 14 Dtool_xqRveZzC 0 4 42 1727 0 14 Dtool_xqRveZzC 0 3 4 this 3 1732  7 low_bit 1 1724  4 size 1 1724  
38 14 Dtool_xqRvwG5f 0 4 43 1727 0 14 Dtool_xqRvwG5f 0 4 4 this 3 1732  5 value 1 1735  7 low_bit 1 1724  4 size 1 1724  
39 14 Dtool_xqRvImLX 0 6 44 1724 0 14 Dtool_xqRvImLX 0 1 4 this 3 1733  
40 14 Dtool_xqRvL6nV 0 6 45 1724 0 14 Dtool_xqRvL6nV 0 1 4 this 3 1733  
41 14 Dtool_xqRvEGfL 0 6 46 1724 0 14 Dtool_xqRvEGfL 0 1 4 this 3 1733  
42 14 Dtool_xqRvVvnV 0 6 47 1724 0 14 Dtool_xqRvVvnV 0 1 4 this 3 1733  
43 14 Dtool_xqRvNZDs 0 6 48 1724 0 14 Dtool_xqRvNZDs 0 1 4 this 3 1733  
44 14 Dtool_xqRv1q3w 0 6 49 1724 0 14 Dtool_xqRv1q3w 0 1 4 this 3 1733  
45 14 Dtool_xqRvvM6M 0 6 50 1724 0 14 Dtool_xqRvvM6M 0 2 4 this 3 1733  7 low_bit 1 1724  
46 14 Dtool_xqRvW1u9 0 4 51 1727 0 14 Dtool_xqRvW1u9 0 1 4 this 3 1732  
47 14 Dtool_xqRvfWTS 0 6 52 1735 0 14 Dtool_xqRvfWTS 0 2 4 this 3 1733  5 other 1 1733  
48 14 Dtool_xqRvsPqY 0 4 53 1727 0 14 Dtool_xqRvsPqY 0 1 4 this 3 1732  
49 14 Dtool_xqRvtsUG 0 4 54 1727 0 14 Dtool_xqRvtsUG 0 2 4 this 3 1733  3 out 1 1731  
50 14 Dtool_xqRvi8A6 0 4 55 1727 0 14 Dtool_xqRvi8A6 0 3 4 this 3 1733  3 out 1 1731  12 spaces_every 1 1724  
51 14 Dtool_xqRvida8 0 4 55 1727 0 14 Dtool_xqRvida8 0 2 4 this 3 1733  3 out 1 1731  
52 14 Dtool_xqRvGkzd 0 4 56 1727 0 14 Dtool_xqRvGkzd 0 3 4 this 3 1733  3 out 1 1731  12 spaces_every 1 1724  
53 14 Dtool_xqRvRW_f 0 4 56 1727 0 14 Dtool_xqRvRW_f 0 2 4 this 3 1733  3 out 1 1731  
54 14 Dtool_xqRvatxG 0 4 57 1727 0 14 Dtool_xqRvatxG 0 3 4 this 3 1733  3 out 1 1731  12 indent_level 1 1724  
55 14 Dtool_xqRvL_2n 0 4 57 1727 0 14 Dtool_xqRvL_2n 0 2 4 this 3 1733  3 out 1 1731  
56 14 Dtool_xqRvRqjr 0 6 58 1735 0 14 Dtool_xqRvRqjr 0 2 4 this 3 1733  5 other 1 1733  
57 14 Dtool_xqRvFbfL 0 6 59 1735 0 14 Dtool_xqRvFbfL 0 2 4 this 3 1733  5 other 1 1733  
58 14 Dtool_xqRvdImb 0 6 60 1735 0 14 Dtool_xqRvdImb 0 2 4 this 3 1733  5 other 1 1733  
59 14 Dtool_xqRvw6Ce 0 6 61 1724 0 14 Dtool_xqRvw6Ce 0 2 4 this 3 1733  5 other 1 1733  
60 14 Dtool_xqRvjYjL 0 7 62 1732 877 14 Dtool_xqRvjYjL 0 2 4 this 3 1733  5 other 1 1733  
61 14 Dtool_xqRvF7xb 0 7 63 1732 877 14 Dtool_xqRvF7xb 0 2 4 this 3 1733  5 other 1 1733  
62 14 Dtool_xqRvS1rL 0 7 64 1732 877 14 Dtool_xqRvS1rL 0 2 4 this 3 1733  5 other 1 1733  
63 14 Dtool_xqRvlqQk 0 7 65 1732 877 14 Dtool_xqRvlqQk 0 1 4 this 3 1733  
64 14 Dtool_xqRvfKAq 0 7 66 1732 877 14 Dtool_xqRvfKAq 0 2 4 this 3 1733  5 shift 1 1724  
65 14 Dtool_xqRvAlKa 0 7 67 1732 877 14 Dtool_xqRvAlKa 0 2 4 this 3 1733  5 shift 1 1724  
66 14 Dtool_xqRvva1p 0 6 68 1732 0 14 Dtool_xqRvva1p 0 2 4 this 3 1732  5 other 1 1733  
67 14 Dtool_xqRvUoD6 0 6 69 1732 0 14 Dtool_xqRvUoD6 0 2 4 this 3 1732  5 other 1 1733  
68 14 Dtool_xqRve0_p 0 6 70 1732 0 14 Dtool_xqRve0_p 0 2 4 this 3 1732  5 other 1 1733  
69 14 Dtool_xqRv1MmK 0 6 71 1732 0 14 Dtool_xqRv1MmK 0 2 4 this 3 1732  5 shift 1 1724  
70 14 Dtool_xqRvsqx6 0 6 72 1732 0 14 Dtool_xqRvsqx6 0 2 4 this 3 1732  5 shift 1 1724  
71 14 Dtool_xqRvIpt7 0 7 73 1737 0 14 Dtool_xqRvIpt7 0 0 
72 14 Dtool_xqRvQ4t2 0 7 75 1738 931 14 Dtool_xqRvQ4t2 0 0 
73 14 Dtool_xqRvBKTk 0 7 75 1738 931 14 Dtool_xqRvBKTk 0 1 4 copy 1 1739  
74 14 Dtool_xqRvZK2I 0 6 76 1738 0 14 Dtool_xqRvZK2I 0 2 4 this 3 1738  4 copy 1 1739  
75 14 Dtool_xqRvtdgp 0 7 77 1738 931 14 Dtool_xqRvtdgp 0 0 
76 14 Dtool_xqRvRxDj 0 7 78 1738 931 14 Dtool_xqRvRxDj 0 0 
77 14 Dtool_xqRvnApV 0 7 79 1738 931 14 Dtool_xqRvnApV 0 1 7 on_bits 1 1724  
78 14 Dtool_xqRvl_fN 0 7 80 1738 931 14 Dtool_xqRvl_fN 0 1 5 index 1 1724  
79 14 Dtool_xqRvhu4K 0 7 81 1738 931 14 Dtool_xqRvhu4K 0 2 7 low_bit 1 1724  4 size 1 1724  
80 14 Dtool_xqRvV293 0 6 83 1735 0 14 Dtool_xqRvV293 0 0 
81 14 Dtool_xqRvfhwX 0 6 84 1724 0 14 Dtool_xqRvfhwX 0 0 
82 14 Dtool_xqRvc9oV 0 6 85 1724 0 14 Dtool_xqRvc9oV 0 0 
83 14 Dtool_xqRvQkKR 0 6 86 1735 0 14 Dtool_xqRvQkKR 0 2 4 this 3 1739  5 index 1 1724  
84 14 Dtool_xqRvWhDJ 0 4 87 1727 0 14 Dtool_xqRvWhDJ 0 2 4 this 3 1738  5 index 1 1724  
85 14 Dtool_xqRvapyc 0 4 88 1727 0 14 Dtool_xqRvapyc 0 2 4 this 3 1738  5 index 1 1724  
86 14 Dtool_xqRvtnCt 0 4 89 1727 0 14 Dtool_xqRvtnCt 0 3 4 this 3 1738  5 index 1 1724  5 value 1 1735  
87 14 Dtool_xqRvNDBe 0 6 90 1735 0 14 Dtool_xqRvNDBe 0 1 4 this 3 1739  
88 14 Dtool_xqRvSm0S 0 6 91 1735 0 14 Dtool_xqRvSm0S 0 1 4 this 3 1739  
89 14 Dtool_xqRvk2VC 0 6 92 1721 0 14 Dtool_xqRvk2VC 0 3 4 this 3 1739  7 low_bit 1 1724  4 size 1 1724  
90 14 Dtool_xqRvQI03 0 4 93 1727 0 14 Dtool_xqRvQI03 0 4 4 this 3 1738  5 value 1 1721  7 low_bit 1 1724  4 size 1 1724  
91 14 Dtool_xqRvvZI1 0 6 94 1735 0 14 Dtool_xqRvvZI1 0 3 4 this 3 1739  7 low_bit 1 1724  4 size 1 1724  
92 14 Dtool_xqRv4rQO 0 6 95 1735 0 14 Dtool_xqRv4rQO 0 3 4 this 3 1739  7 low_bit 1 1724  4 size 1 1724  
93 14 Dtool_xqRvce2Y 0 4 96 1727 0 14 Dtool_xqRvce2Y 0 3 4 this 3 1738  7 low_bit 1 1724  4 size 1 1724  
94 14 Dtool_xqRvouj3 0 4 97 1727 0 14 Dtool_xqRvouj3 0 3 4 this 3 1738  7 low_bit 1 1724  4 size 1 1724  
95 14 Dtool_xqRvtybc 0 4 98 1727 0 14 Dtool_xqRvtybc 0 4 4 this 3 1738  5 value 1 1735  7 low_bit 1 1724  4 size 1 1724  
96 14 Dtool_xqRvjXq9 0 6 99 1724 0 14 Dtool_xqRvjXq9 0 1 4 this 3 1739  
97 14 Dtool_xqRv14ol 0 6 100 1724 0 14 Dtool_xqRv14ol 0 1 4 this 3 1739  
98 14 Dtool_xqRvYTi7 0 6 101 1724 0 14 Dtool_xqRvYTi7 0 1 4 this 3 1739  
99 14 Dtool_xqRvu2rJ 0 6 102 1724 0 14 Dtool_xqRvu2rJ 0 1 4 this 3 1739  
100 14 Dtool_xqRvMqdg 0 6 103 1724 0 14 Dtool_xqRvMqdg 0 1 4 this 3 1739  
101 14 Dtool_xqRvTBnk 0 6 104 1724 0 14 Dtool_xqRvTBnk 0 1 4 this 3 1739  
102 14 Dtool_xqRvpm5E 0 6 105 1724 0 14 Dtool_xqRvpm5E 0 2 4 this 3 1739  7 low_bit 1 1724  
103 14 Dtool_xqRvBa0l 0 4 106 1727 0 14 Dtool_xqRvBa0l 0 1 4 this 3 1738  
104 14 Dtool_xqRvXKrM 0 6 107 1735 0 14 Dtool_xqRvXKrM 0 2 4 this 3 1739  5 other 1 1739  
105 14 Dtool_xqRv4mX_ 0 4 108 1727 0 14 Dtool_xqRv4mX_ 0 1 4 this 3 1738  
106 14 Dtool_xqRvoXIR 0 4 109 1727 0 14 Dtool_xqRvoXIR 0 2 4 this 3 1739  3 out 1 1731  
107 14 Dtool_xqRvb9kN 0 4 110 1727 0 14 Dtool_xqRvb9kN 0 3 4 this 3 1739  3 out 1 1731  12 spaces_every 1 1724  
108 14 Dtool_xqRvjx6v 0 4 110 1727 0 14 Dtool_xqRvjx6v 0 2 4 this 3 1739  3 out 1 1731  
109 14 Dtool_xqRv52R1 0 4 111 1727 0 14 Dtool_xqRv52R1 0 3 4 this 3 1739  3 out 1 1731  12 spaces_every 1 1724  
110 14 Dtool_xqRvmM4l 0 4 111 1727 0 14 Dtool_xqRvmM4l 0 2 4 this 3 1739  3 out 1 1731  
111 14 Dtool_xqRvKmrX 0 4 112 1727 0 14 Dtool_xqRvKmrX 0 3 4 this 3 1739  3 out 1 1731  12 indent_level 1 1724  
112 14 Dtool_xqRvJx_v 0 4 112 1727 0 14 Dtool_xqRvJx_v 0 2 4 this 3 1739  3 out 1 1731  
113 14 Dtool_xqRvDBQ_ 0 6 113 1735 0 14 Dtool_xqRvDBQ_ 0 2 4 this 3 1739  5 other 1 1739  
114 14 Dtool_xqRv7Bfc 0 6 114 1735 0 14 Dtool_xqRv7Bfc 0 2 4 this 3 1739  5 other 1 1739  
115 14 Dtool_xqRvPse8 0 6 115 1735 0 14 Dtool_xqRvPse8 0 2 4 this 3 1739  5 other 1 1739  
116 14 Dtool_xqRvHtQ8 0 6 116 1724 0 14 Dtool_xqRvHtQ8 0 2 4 this 3 1739  5 other 1 1739  
117 14 Dtool_xqRv1z5O 0 7 117 1738 931 14 Dtool_xqRv1z5O 0 2 4 this 3 1739  5 other 1 1739  
118 14 Dtool_xqRvbsOe 0 7 118 1738 931 14 Dtool_xqRvbsOe 0 2 4 this 3 1739  5 other 1 1739  
119 14 Dtool_xqRvEMaU 0 7 119 1738 931 14 Dtool_xqRvEMaU 0 2 4 this 3 1739  5 other 1 1739  
120 14 Dtool_xqRv1NZN 0 7 120 1738 931 14 Dtool_xqRv1NZN 0 1 4 this 3 1739  
121 14 Dtool_xqRvavX9 0 7 121 1738 931 14 Dtool_xqRvavX9 0 2 4 this 3 1739  5 shift 1 1724  
122 14 Dtool_xqRv3PLG 0 7 122 1738 931 14 Dtool_xqRv3PLG 0 2 4 this 3 1739  5 shift 1 1724  
123 14 Dtool_xqRv_0dX 0 6 123 1738 0 14 Dtool_xqRv_0dX 0 2 4 this 3 1738  5 other 1 1739  
124 14 Dtool_xqRvYUzm 0 6 124 1738 0 14 Dtool_xqRvYUzm 0 2 4 this 3 1738  5 other 1 1739  
125 14 Dtool_xqRvR0_c 0 6 125 1738 0 14 Dtool_xqRvR0_c 0 2 4 this 3 1738  5 other 1 1739  
126 14 Dtool_xqRvq_L4 0 6 126 1738 0 14 Dtool_xqRvq_L4 0 2 4 this 3 1738  5 shift 1 1724  
127 14 Dtool_xqRvFe_A 0 6 127 1738 0 14 Dtool_xqRvFe_A 0 2 4 this 3 1738  5 shift 1 1724  
128 14 Dtool_xqRv2usD 0 7 128 1737 0 14 Dtool_xqRv2usD 0 0 
129 14 Dtool_xqRvDVLW 0 7 130 1741 995 14 Dtool_xqRvDVLW 0 1 4 copy 1 1717  
130 14 Dtool_xqRvF0NH 0 7 130 1741 995 14 Dtool_xqRvF0NH 0 2 4 self 1 1719  6 source 1 1719  
131 14 Dtool_xqRv1rpQ 0 7 130 1741 995 14 Dtool_xqRv1rpQ 0 1 11 type_handle 1 1737  
132 14 Dtool_xqRv8OP5 0 7 130 1741 995 14 Dtool_xqRv8OP5 0 0 
133 14 Dtool_xqRv7V4I 0 7 131 1741 995 14 Dtool_xqRv7V4I 0 2 1 n 1 1721  11 type_handle 1 1737  
134 14 Dtool_xqRvJ8ub 0 7 131 1741 995 14 Dtool_xqRvJ8ub 0 1 1 n 1 1721  
135 14 Dtool_xqRvI3xs 0 6 132 1721 0 14 Dtool_xqRvI3xs 0 1 4 this 3 1717  
136 14 Dtool_xqRv_7ej 0 4 133 1727 0 14 Dtool_xqRv_7ej 0 2 4 this 3 1741  1 x 1 1722  
137 14 Dtool_xqRvxujU 0 4 134 1727 0 14 Dtool_xqRvxujU 0 1 4 this 3 1741  
138 14 Dtool_xqRvC1Wu 0 6 135 1722 0 14 Dtool_xqRvC1Wu 0 2 4 this 3 1717  1 n 1 1721  
139 14 Dtool_xqRv04Y4 0 4 136 1727 0 14 Dtool_xqRv04Y4 0 3 4 this 3 1741  1 n 1 1721  5 value 1 1722  
140 14 Dtool_xqRvuw0l 0 6 137 1722 0 14 Dtool_xqRvuw0l 0 2 4 this 3 1717  1 n 1 1721  
141 14 Dtool_xqRvy_QJ 0 4 138 1727 0 14 Dtool_xqRvy_QJ 0 3 4 this 3 1741  1 n 1 1721  5 value 1 1722  
142 14 Dtool_xqRvnE_c 0 6 139 1723 0 14 Dtool_xqRvnE_c 0 1 4 this 3 1717  
143 14 Dtool_xqRvbfhi 0 4 140 1727 0 14 Dtool_xqRvbfhi 0 2 4 this 3 1741  4 data 1 1723  
144 14 Dtool_xqRvlO9d 0 6 141 1723 0 14 Dtool_xqRvlO9d 0 3 4 this 3 1717  1 n 1 1721  5 count 1 1721  
145 14 Dtool_xqRv6EdM 0 4 142 1727 0 14 Dtool_xqRv6EdM 0 4 4 this 3 1741  1 n 1 1721  5 count 1 1721  4 data 1 1723  
146 14 Dtool_xqRvyVLR 0 6 143 1724 0 14 Dtool_xqRvyVLR 0 1 4 this 3 1717  
147 14 Dtool_xqRv8hDB 0 6 144 1724 0 14 Dtool_xqRv8hDB 0 1 4 this 3 1717  
148 14 Dtool_xqRv_jyB 0 6 145 1724 0 14 Dtool_xqRv_jyB 0 4 4 this 3 1741  4 self 1 1719  4 view 1 1725  5 flags 1 1724  
149 14 Dtool_xqRvxKWR 0 4 146 1727 0 14 Dtool_xqRvxKWR 0 3 4 this 3 1717  4 self 1 1719  4 view 1 1725  
150 14 Dtool_xqRvBhAH 0 4 151 1727 0 14 Dtool_xqRvBhAH 783 // Filename: animInterface.I
// Created by:  drose (20Sep05)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: AnimInterface::play
//       Access: Published
//  Description: Runs the entire animation from beginning to end and
//               stops.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1742  
151 14 Dtool_xqRvNKyB 0 4 151 1727 0 14 Dtool_xqRvNKyB 736 ////////////////////////////////////////////////////////////////////
//     Function: AnimInterface::play
//       Access: Published
//  Description: Runs the animation from the frame "from" to and
//               including the frame "to", at which point the
//               animation is stopped.  Both "from" and "to" frame
//               numbers may be outside the range (0,
//               get_num_frames()) and the animation will follow the
//               range correctly, reporting numbers modulo
//               get_num_frames().  For instance, play(0,
//               get_num_frames() * 2) will play the animation twice
//               and then stop.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1742  4 from 1 1743  2 to 1 1743  
152 14 Dtool_xqRvblrP 0 4 152 1727 0 14 Dtool_xqRvblrP 405 ////////////////////////////////////////////////////////////////////
//     Function: AnimInterface::loop
//       Access: Published
//  Description: Starts the entire animation looping.  If restart is
//               true, the animation is restarted from the beginning;
//               otherwise, it continues from the current frame.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1742  7 restart 1 1735  
153 14 Dtool_xqRvub22 0 4 152 1727 0 14 Dtool_xqRvub22 491 ////////////////////////////////////////////////////////////////////
//     Function: AnimInterface::loop
//       Access: Published
//  Description: Loops the animation from the frame "from" to and
//               including the frame "to", indefinitely.  If restart
//               is true, the animation is restarted from the
//               beginning; otherwise, it continues from the current
//               frame.
//////////////////////////////////////////////////////////////////// 4 4 this 3 1742  7 restart 1 1735  4 from 1 1743  2 to 1 1743  
154 14 Dtool_xqRvFEBu 0 4 153 1727 0 14 Dtool_xqRvFEBu 498 ////////////////////////////////////////////////////////////////////
//     Function: AnimInterface::pingpong
//       Access: Published
//  Description: Starts the entire animation bouncing back and forth
//               between its first frame and last frame.  If restart
//               is true, the animation is restarted from the
//               beginning; otherwise, it continues from the current
//               frame.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1742  7 restart 1 1735  
155 14 Dtool_xqRvA7bg 0 4 153 1727 0 14 Dtool_xqRvA7bg 386 ////////////////////////////////////////////////////////////////////
//     Function: AnimInterface::pingpong
//       Access: Published
//  Description: Loops the animation from the frame "from" to and
//               including the frame "to", and then back in the
//               opposite direction, indefinitely.
//////////////////////////////////////////////////////////////////// 4 4 this 3 1742  7 restart 1 1735  4 from 1 1743  2 to 1 1743  
156 14 Dtool_xqRvEmm6 0 4 154 1727 0 14 Dtool_xqRvEmm6 369 ////////////////////////////////////////////////////////////////////
//     Function: AnimInterface::stop
//       Access: Published
//  Description: Stops a currently playing or looping animation right
//               where it is.  The animation remains posed at the
//               current frame.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1742  
157 14 Dtool_xqRvUH7a 0 4 155 1727 0 14 Dtool_xqRvUH7a 297 ////////////////////////////////////////////////////////////////////
//     Function: AnimInterface::pose
//       Access: Published
//  Description: Sets the animation to the indicated frame and holds
//               it there.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1742  5 frame 1 1743  
158 14 Dtool_xqRvTzzJ 0 4 156 1727 0 14 Dtool_xqRvTzzJ 519 ////////////////////////////////////////////////////////////////////
//     Function: AnimInterface::set_play_rate
//       Access: Published
//  Description: Changes the rate at which the animation plays.  1.0
//               is the normal speed, 2.0 is twice normal speed, and
//               0.5 is half normal speed.  0.0 is legal to pause the
//               animation, and a negative value will play the
//               animation backwards.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1742  9 play_rate 1 1743  
159 14 Dtool_xqRvHfNF 0 6 157 1743 0 14 Dtool_xqRvHfNF 313 ////////////////////////////////////////////////////////////////////
//     Function: AnimInterface::get_play_rate
//       Access: Published
//  Description: Returns the rate at which the animation plays.  See
//               set_play_rate().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1744  
160 14 Dtool_xqRv1MDt 0 6 158 1743 0 14 Dtool_xqRv1MDt 514 ////////////////////////////////////////////////////////////////////
//     Function: AnimInterface::get_frame_rate
//       Access: Published
//  Description: Returns the native frame rate of the animation.  This
//               is the number of frames per second that will elapse
//               when the play_rate is set to 1.0.  It is a fixed
//               property of the animation and may not be adjusted by
//               the user.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1744  
161 14 Dtool_xqRv38Tm 0 6 159 1724 0 14 Dtool_xqRv38Tm 581 ////////////////////////////////////////////////////////////////////
//     Function: AnimInterface::get_num_frames
//       Access: Published, Virtual
//  Description: Returns the number of frames in the animation.  This
//               is a property of the animation and may not be
//               directly adjusted by the user (although it may change
//               without warning with certain kinds of animations,
//               since this is a virtual method that may be
//               overridden).
//////////////////////////////////////////////////////////////////// 1 4 this 3 1744  
162 14 Dtool_xqRvFJm1 0 6 160 1724 0 14 Dtool_xqRvFJm1 359 ////////////////////////////////////////////////////////////////////
//     Function: AnimInterface::get_frame
//       Access: Published
//  Description: Returns the current integer frame number.
//               This number will be in the range 0 <= f <
//               get_num_frames().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1744  
163 14 Dtool_xqRvL6yq 0 6 161 1724 0 14 Dtool_xqRvL6yq 638 ////////////////////////////////////////////////////////////////////
//     Function: AnimInterface::get_next_frame
//       Access: Published
//  Description: Returns the current integer frame number + 1,
//               constrained to the range 0 <= f < get_num_frames().
//
//               If the play mode is PM_play, this will clamp to the
//               same value as get_frame() at the end of the
//               animation.  If the play mode is any other value, this
//               will wrap around to frame 0 at the end of the
//               animation.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1744  
164 14 Dtool_xqRvc9m_ 0 6 162 1743 0 14 Dtool_xqRvc9m_ 598 ////////////////////////////////////////////////////////////////////
//     Function: AnimInterface::get_frac
//       Access: Published
//  Description: Returns the fractional part of the current frame.
//               Normally, this is in the range 0.0 <= f < 1.0, but in
//               the one special case of an animation playing to its
//               end frame and stopping, it might exactly equal 1.0.
//
//               It will always be true that get_full_frame() +
//               get_frac() == get_full_fframe().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1744  
165 14 Dtool_xqRvu_72 0 6 163 1724 0 14 Dtool_xqRvu_72 693 ////////////////////////////////////////////////////////////////////
//     Function: AnimInterface::get_full_frame
//       Access: Published
//  Description: Returns the current integer frame number.
//
//               Unlike the value returned by get_frame(), this frame
//               number may extend beyond the range of
//               get_num_frames() if the frame range passed to play(),
//               loop(), etc. did.
//
//               Unlike the value returned by get_full_fframe(), this
//               return value will never exceed the value passed to
//               to_frame in the play() method.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1744  
166 14 Dtool_xqRviZK4 0 6 164 1743 0 14 Dtool_xqRviZK4 841 ////////////////////////////////////////////////////////////////////
//     Function: AnimInterface::get_full_fframe
//       Access: Published
//  Description: Returns the current floating-point frame number.
//
//               Unlike the value returned by get_frame(), this frame
//               number may extend beyond the range of
//               get_num_frames() if the frame range passed to play(),
//               loop(), etc. did.
//
//               Unlike the value returned by get_full_frame(), this
//               return value may equal (to_frame + 1.0), when the
//               animation has played to its natural end.  However, in
//               this case the return value of get_full_frame() will
//               be to_frame, not (to_frame + 1).
//////////////////////////////////////////////////////////////////// 1 4 this 3 1744  
167 14 Dtool_xqRveUtV 0 6 165 1735 0 14 Dtool_xqRveUtV 466 ////////////////////////////////////////////////////////////////////
//     Function: AnimInterface::is_playing
//       Access: Published
//  Description: Returns true if the animation is currently playing,
//               false if it is stopped (e.g. because stop() or pose()
//               was called, or because it reached the end of the
//               animation after play() was called).
//////////////////////////////////////////////////////////////////// 1 4 this 3 1744  
168 14 Dtool_xqRvjJYM 0 4 166 1727 0 14 Dtool_xqRvjJYM 230 ////////////////////////////////////////////////////////////////////
//     Function: AnimInterface::output
//       Access: Published, Virtual
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 1744  3 out 1 1731  
169 14 Dtool_xqRv3PK3 0 7 167 1737 0 14 Dtool_xqRv3PK3 0 0 
170 14 Dtool_xqRveAZ3 0 7 170 1746 1034 14 Dtool_xqRveAZ3 759 // Filename: updateSeq.I
// Created by:  drose (30Sep99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: UpdateSeq::Default Constructor
//       Access: Published
//  Description: Creates an UpdateSeq in the 'initial' state.
//////////////////////////////////////////////////////////////////// 0 
171 14 Dtool_xqRvTpCm 0 7 170 1746 1034 14 Dtool_xqRvTpCm 226 ////////////////////////////////////////////////////////////////////
//     Function: UpdateSeq::Copy Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 1747  
172 14 Dtool_xqRvXroR 0 7 171 1746 1034 14 Dtool_xqRvXroR 290 ////////////////////////////////////////////////////////////////////
//     Function: UpdateSeq::initial (named constructor)
//       Access: Published, Static
//  Description: Returns an UpdateSeq in the 'initial' state.
//////////////////////////////////////////////////////////////////// 0 
173 14 Dtool_xqRvnK4u 0 7 172 1746 1034 14 Dtool_xqRvnK4u 282 ////////////////////////////////////////////////////////////////////
//     Function: UpdateSeq::old (named constructor)
//       Access: Published, Static
//  Description: Returns an UpdateSeq in the 'old' state.
//////////////////////////////////////////////////////////////////// 0 
174 14 Dtool_xqRv9eRT 0 7 173 1746 1034 14 Dtool_xqRv9eRT 286 ////////////////////////////////////////////////////////////////////
//     Function: UpdateSeq::fresh (named constructor)
//       Access: Published, Static
//  Description: Returns an UpdateSeq in the 'fresh' state.
//////////////////////////////////////////////////////////////////// 0 
175 14 Dtool_xqRvGswc 0 6 174 1746 0 14 Dtool_xqRvGswc 234 ////////////////////////////////////////////////////////////////////
//     Function: UpdateSeq::Copy Assignment operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1746  4 copy 1 1747  
176 14 Dtool_xqRv0_vY 0 4 175 1727 0 14 Dtool_xqRv0_vY 260 ////////////////////////////////////////////////////////////////////
//     Function: UpdateSeq::clear
//       Access: Published
//  Description: Resets the UpdateSeq to the 'initial' state.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1746  
177 14 Dtool_xqRvT1E2 0 6 176 1735 0 14 Dtool_xqRvT1E2 294 ////////////////////////////////////////////////////////////////////
//     Function: UpdateSeq::is_initial
//       Access: Published
//  Description: Returns true if the UpdateSeq is in the 'initial'
//               state.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1747  
178 14 Dtool_xqRvLeqi 0 6 177 1735 0 14 Dtool_xqRvLeqi 269 ////////////////////////////////////////////////////////////////////
//     Function: UpdateSeq::is_old
//       Access: Published
//  Description: Returns true if the UpdateSeq is in the 'old' state.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1747  
179 14 Dtool_xqRvWsUb 0 6 178 1735 0 14 Dtool_xqRvWsUb 290 ////////////////////////////////////////////////////////////////////
//     Function: UpdateSeq::is_fresh
//       Access: Published
//  Description: Returns true if the UpdateSeq is in the 'fresh'
//               state.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1747  
180 14 Dtool_xqRv6gLj 0 6 179 1735 0 14 Dtool_xqRv6gLj 328 ////////////////////////////////////////////////////////////////////
//     Function: UpdateSeq::is_special
//       Access: Published
//  Description: Returns true if the UpdateSeq is in any special
//               states, i.e. 'initial', 'old', or 'fresh'.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1747  
181 14 Dtool_xqRvgvS2 0 6 180 1735 0 14 Dtool_xqRvgvS2 227 ////////////////////////////////////////////////////////////////////
//     Function: UpdateSeq::Equality operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1747  5 other 1 1747  
182 14 Dtool_xqRvgevt 0 6 181 1735 0 14 Dtool_xqRvgevt 229 ////////////////////////////////////////////////////////////////////
//     Function: UpdateSeq::Inequality operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1747  5 other 1 1747  
183 14 Dtool_xqRvNGO_ 0 6 182 1735 0 14 Dtool_xqRvNGO_ 229 ////////////////////////////////////////////////////////////////////
//     Function: UpdateSeq::Comparison operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1747  5 other 1 1747  
184 14 Dtool_xqRvwJ_1 0 6 183 1735 0 14 Dtool_xqRvwJ_1 229 ////////////////////////////////////////////////////////////////////
//     Function: UpdateSeq::Comparison operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1747  5 other 1 1747  
185 14 Dtool_xqRvt52_ 0 6 184 1735 0 14 Dtool_xqRvt52_ 229 ////////////////////////////////////////////////////////////////////
//     Function: UpdateSeq::Comparison operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1747  5 other 1 1747  
186 14 Dtool_xqRvQMl2 0 6 185 1735 0 14 Dtool_xqRvQMl2 229 ////////////////////////////////////////////////////////////////////
//     Function: UpdateSeq::Comparison operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1747  5 other 1 1747  
187 14 Dtool_xqRvkAFl 0 7 186 1746 1034 14 Dtool_xqRvkAFl 231 ////////////////////////////////////////////////////////////////////
//     Function: UpdateSeq::Preincrement operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 1746  
188 14 Dtool_xqRvqToO 0 7 187 1746 1034 14 Dtool_xqRvqToO 232 ////////////////////////////////////////////////////////////////////
//     Function: UpdateSeq::Postincrement operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1746  6 param0 0 1724  
189 14 Dtool_xqRvZuR8 0 6 188 1749 0 14 Dtool_xqRvZuR8 328 ////////////////////////////////////////////////////////////////////
//     Function: UpdateSeq::get_seq
//       Access: Published
//  Description: Returns the internal integer value associated with
//               the UpdateSeq.  Useful for debugging only.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1747  
190 14 Dtool_xqRvHG_1 0 4 189 1727 0 14 Dtool_xqRvHG_1 216 ////////////////////////////////////////////////////////////////////
//     Function: UpdateSeq::output
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1747  3 out 1 1731  
191 14 Dtool_xqRvh86d 0 4 193 1727 0 14 Dtool_xqRvh86d 653 ////////////////////////////////////////////////////////////////////
//     Function: TypedWritable::mark_bam_modified
//       Access: Public
//  Description: Increments the bam_modified counter, so that this
//               object will be invalidated and retransmitted on any
//               open bam streams.  This should normally not need to
//               be called by user code; it should be called
//               internally when the object has been changed in a way
//               that legitimately requires its retransmission to any
//               connected clients.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1750  
192 14 Dtool_xqRvA1uu 0 7 194 1746 1034 14 Dtool_xqRvA1uu 388 ////////////////////////////////////////////////////////////////////
//     Function: TypedWritable::get_bam_modified
//       Access: Public
//  Description: Returns the current bam_modified counter.  This
//               counter is normally incremented automatically
//               whenever the object is modified.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1751  
193 14 Dtool_xqRvuMCB 0 6 195 1719 0 14 Dtool_xqRvuMCB 0 2 4 this 3 1751  4 self 1 1719  
194 14 Dtool_xqRvPnhF 0 6 196 1719 0 14 Dtool_xqRvPnhF 0 3 4 this 3 1751  4 self 1 1719  7 pickler 1 1719  
195 14 Dtool_xqRvSud2 0 6 197 1723 0 14 Dtool_xqRvSud2 756 ////////////////////////////////////////////////////////////////////
//     Function: TypedWritable::encode_to_bam_stream
//       Access: Published
//  Description: Converts the TypedWritable object into a single
//               stream of data using a BamWriter, and returns that
//               data as a string string.  Returns empty string on
//               failure.
//
//               This is a convenience method particularly useful for
//               cases when you are only serializing a single object.
//               If you have many objects to process, it is more
//               efficient to use the same BamWriter to serialize all
//               of them together.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1751  
196 14 Dtool_xqRv91zQ 0 6 197 1735 0 14 Dtool_xqRv91zQ 770 ////////////////////////////////////////////////////////////////////
//     Function: TypedWritable::encode_to_bam_stream
//       Access: Published
//  Description: Converts the TypedWritable object into a single
//               stream of data using a BamWriter, and stores that
//               data in the indicated string.  Returns true on
//               success, false on failure.
//
//               This is a convenience method particularly useful for
//               cases when you are only serializing a single object.
//               If you have many objects to process, it is more
//               efficient to use the same BamWriter to serialize all
//               of them together.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1751  4 data 1 1753  6 writer 1 1754  
197 14 Dtool_xqRv_CTI 0 6 197 1735 0 14 Dtool_xqRv_CTI 770 ////////////////////////////////////////////////////////////////////
//     Function: TypedWritable::encode_to_bam_stream
//       Access: Published
//  Description: Converts the TypedWritable object into a single
//               stream of data using a BamWriter, and stores that
//               data in the indicated string.  Returns true on
//               success, false on failure.
//
//               This is a convenience method particularly useful for
//               cases when you are only serializing a single object.
//               If you have many objects to process, it is more
//               efficient to use the same BamWriter to serialize all
//               of them together.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1751  4 data 1 1753  
198 14 Dtool_xqRvTBaO 0 7 199 1737 0 14 Dtool_xqRvTBaO 0 0 
199 14 Dtool_xqRvEJGP 0 7 206 1756 1048 14 Dtool_xqRvEJGP 872 ////////////////////////////////////////////////////////////////////
//     Function: TypedWritableReferenceCount::decode_from_bam_stream
//       Access: Published, Static
//  Description: Reads the string created by a previous call to
//               encode_to_bam_stream(), and extracts and returns the
//               single object on that string.  Returns NULL on error.
//
//               This method is intended to replace
//               decode_raw_from_bam_stream() when you know the stream
//               in question returns an object of type
//               TypedWritableReferenceCount, allowing for easier
//               reference count management.  Note that the caller is
//               still responsible for maintaining the reference count
//               on the return value.
//////////////////////////////////////////////////////////////////// 2 4 data 1 1723  6 reader 1 1755  
200 14 Dtool_xqRvtU54 0 7 206 1756 1048 14 Dtool_xqRvtU54 872 ////////////////////////////////////////////////////////////////////
//     Function: TypedWritableReferenceCount::decode_from_bam_stream
//       Access: Published, Static
//  Description: Reads the string created by a previous call to
//               encode_to_bam_stream(), and extracts and returns the
//               single object on that string.  Returns NULL on error.
//
//               This method is intended to replace
//               decode_raw_from_bam_stream() when you know the stream
//               in question returns an object of type
//               TypedWritableReferenceCount, allowing for easier
//               reference count management.  Note that the caller is
//               still responsible for maintaining the reference count
//               on the return value.
//////////////////////////////////////////////////////////////////// 1 4 data 1 1723  
201 14 Dtool_xqRv5oCX 0 7 207 1737 0 14 Dtool_xqRv5oCX 0 0 
202 14 Dtool_xqRvb50R 0 6 201 1750 0 14 Dtool_xqRvb50R 0 1 4 this 3 1756  
203 14 Dtool_xqRvIu02 0 7 202 1756 1048 14 Dtool_xqRvIu02 0 1 4 this 3 1750  
204 14 Dtool_xqRvkcf_ 0 7 204 1757 0 14 Dtool_xqRvkcf_ 0 1 4 this 3 1756  
205 14 Dtool_xqRvGHue 0 7 205 1756 1048 14 Dtool_xqRvGHue 0 1 4 this 3 1757  
206 14 Dtool_xqRv5zcI 0 7 216 1760 1053 14 Dtool_xqRv5zcI 928 // Filename: bamCacheRecord.I
// Created by:  drose (09Jun06)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: BamCacheRecord::make_copy
//       Access: Published
//  Description: Returns a duplicate of the BamCacheRecord.  The
//               duplicate will not have a data pointer set, even
//               though one may have been assigned to the original via
//               set_data().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1758  
207 14 Dtool_xqRvRs2_ 0 6 217 1735 0 14 Dtool_xqRvRs2_ 396 ////////////////////////////////////////////////////////////////////
//     Function: BamCacheRecord::operator == 
//       Access: Published
//  Description: Returns true if the record matches the other record
//               in those attributes which get written to disk.  Does
//               not compare the data pointer.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1758  5 other 1 1758  
208 14 Dtool_xqRv5cIS 0 6 218 1761 0 14 Dtool_xqRv5cIS 523 ////////////////////////////////////////////////////////////////////
//     Function: BamCacheRecord::get_source_pathname
//       Access: Published
//  Description: Returns the full pathname to the source file that
//               originally generated this cache request.  In some
//               cases, for instance in the case of a of a multipage
//               texture like "cube_#.png", this may not not a true
//               filename on disk.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1758  
209 14 Dtool_xqRvPDd1 0 6 219 1761 0 14 Dtool_xqRvPDd1 516 ////////////////////////////////////////////////////////////////////
//     Function: BamCacheRecord::get_cache_filename
//       Access: Published
//  Description: Returns the name of the cache file as hashed from the
//               source_pathname.  This will be relative to the root
//               of the cache directory, and it will not include any
//               suffixes that may be appended to resolve hash
//               conflicts.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1758  
210 14 Dtool_xqRv_xt3 0 6 220 1721 0 14 Dtool_xqRv_xt3 473 ////////////////////////////////////////////////////////////////////
//     Function: BamCacheRecord::get_source_timestamp
//       Access: Published
//  Description: Returns the file timestamp of the original source
//               file that generated this cache record, if available.
//               In some cases the original file timestamp is not
//               available, and this will return 0.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1758  
211 14 Dtool_xqRv3ULN 0 6 221 1721 0 14 Dtool_xqRv3ULN 323 ////////////////////////////////////////////////////////////////////
//     Function: BamCacheRecord::get_recorded_time
//       Access: Published
//  Description: Returns the time at which this particular record was
//               recorded or updated.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1758  
212 14 Dtool_xqRvfk9J 0 6 222 1724 0 14 Dtool_xqRvfk9J 320 ////////////////////////////////////////////////////////////////////
//     Function: BamCacheRecord::get_num_dependent_files
//       Access: Published
//  Description: Returns the number of source files that contribute to
//               the cache.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1758  
213 14 Dtool_xqRvtgta 0 6 223 1761 0 14 Dtool_xqRvtgta 335 ////////////////////////////////////////////////////////////////////
//     Function: BamCacheRecord::get_dependent_pathname
//       Access: Published
//  Description: Returns the full pathname of the nth source files
//               that contributes to the cache.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1758  1 n 1 1724  
214 14 Dtool_xqRv_q0S 0 6 224 1735 0 14 Dtool_xqRv_q0S 380 ////////////////////////////////////////////////////////////////////
//     Function: BamCacheRecord::dependents_unchanged
//       Access: Published
//  Description: Returns true if all of the dependent files are still
//               the same as when the cache was recorded, false
//               otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1758  
215 14 Dtool_xqRvorWD 0 4 225 1727 0 14 Dtool_xqRvorWD 323 ////////////////////////////////////////////////////////////////////
//     Function: BamCacheRecord::clear_dependent_files
//       Access: Published
//  Description: Empties the list of files that contribute to the data
//               in this record.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1760  
216 14 Dtool_xqRvt_BK 0 4 226 1727 0 14 Dtool_xqRvt_BK 509 ////////////////////////////////////////////////////////////////////
//     Function: BamCacheRecord::add_dependent_file
//       Access: Published
//  Description: Adds the indicated file to the list of files that
//               will be loaded to generate the data in this record.
//               This should be called once for the primary source
//               file, and again for each secondary source file, if
//               any.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1760  8 pathname 1 1761  
217 14 Dtool_xqRvmwOq 0 6 227 1735 0 14 Dtool_xqRvmwOq 373 ////////////////////////////////////////////////////////////////////
//     Function: BamCacheRecord::has_data
//       Access: Published
//  Description: Returns true if this cache record has an in-memory
//               data object associated--that is, the object stored in
//               the cache.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1758  
218 14 Dtool_xqRv_CEW 0 4 228 1727 0 14 Dtool_xqRv_CEW 394 ////////////////////////////////////////////////////////////////////
//     Function: BamCacheRecord::clear_data
//       Access: Published
//  Description: Removes the in-memory data object associated with
//               this record, if any.  This does not affect the
//               on-disk representation of the record.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1760  
219 14 Dtool_xqRv_VOd 0 6 229 1750 0 14 Dtool_xqRv_VOd 383 ////////////////////////////////////////////////////////////////////
//     Function: BamCacheRecord::get_data
//       Access: Published
//  Description: Returns a pointer to the data stored in the
//               record, or NULL if there is no data.  The pointer is
//               not removed from the record.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1758  
220 14 Dtool_xqRvY08g 0 4 231 1727 0 14 Dtool_xqRvY08g 935 ////////////////////////////////////////////////////////////////////
//     Function: BamCacheRecord::set_data
//       Access: Published
//  Description: Stores a new data object on the record.  You should
//               pass the same pointer twice, to both parameters; this
//               allows the C++ typecasting to automatically convert
//               the pointer into both a TypedWritable and a
//               ReferenceCount pointer, so that the BamCacheRecord
//               object can reliably manage the reference counts.
//
//               You may pass 0 or NULL as the second parameter.  If
//               you do this, the BamCacheRecord will not manage the
//               object's reference count; it will be up to you to
//               ensure the object is not deleted during the lifetime
//               of the BamCacheRecord object.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1760  3 ptr 1 1750  7 ref_ptr 1 1757  
221 14 Dtool_xqRvhwxq 0 4 231 1727 0 14 Dtool_xqRvhwxq 342 ////////////////////////////////////////////////////////////////////
//     Function: BamCacheRecord::set_data
//       Access: Published
//  Description: This variant on set_data() is provided just to allow
//               Python code to pass a 0 as the second parameter.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1760  3 ptr 1 1750  5 dummy 1 1724  
222 14 Dtool_xqRvFvYJ 0 4 232 1727 0 14 Dtool_xqRvFvYJ 222 ////////////////////////////////////////////////////////////////////
//     Function: BamCacheRecord::output
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 1758  3 out 1 1731  
223 14 Dtool_xqRvE3j3 0 4 233 1727 0 14 Dtool_xqRvE3j3 221 ////////////////////////////////////////////////////////////////////
//     Function: BamCacheRecord::write
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 3 4 this 3 1758  3 out 1 1731  12 indent_level 1 1724  
224 14 Dtool_xqRvUKVK 0 4 233 1727 0 14 Dtool_xqRvUKVK 221 ////////////////////////////////////////////////////////////////////
//     Function: BamCacheRecord::write
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 1758  3 out 1 1731  
225 14 Dtool_xqRv5Y_g 0 7 234 1737 0 14 Dtool_xqRv5Y_g 0 0 
226 14 Dtool_xqRvhSD0 0 7 210 1756 1048 14 Dtool_xqRvhSD0 0 1 4 this 3 1760  
227 14 Dtool_xqRvCxca 0 7 211 1760 1053 14 Dtool_xqRvCxca 0 1 4 this 3 1756  
228 14 Dtool_xqRvF6go 0 7 236 1764 1074 14 Dtool_xqRvF6go 220 ////////////////////////////////////////////////////////////////////
//     Function: BamCache::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
229 14 Dtool_xqRvLJj3 0 4 238 1727 0 14 Dtool_xqRvLJj3 1130 // Filename: bamCache.I
// Created by:  drose (09Jun06)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: BamCache::set_active
//       Access: Published
//  Description: Changes the state of the active flag.  "active" means
//               that the cache should be consulted automatically on
//               loads, "not active" means that objects should be
//               loaded directly without consulting the cache.
//
//               This represents the global flag.  Also see the
//               individual cache_models, cache_textures,
//               cache_compressed_textures flags.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1764  4 flag 1 1735  
230 14 Dtool_xqRvov3M 0 6 239 1735 0 14 Dtool_xqRvov3M 695 ////////////////////////////////////////////////////////////////////
//     Function: BamCache::get_active
//       Access: Published
//  Description: Returns true if the BamCache is currently active,
//               false if it is not.  "active" means that the cache
//               should be consulted automatically on loads, "not
//               active" means that objects should be loaded directly
//               without consulting the cache.
//
//               This represents the global flag.  Also see the
//               individual cache_models, cache_textures,
//               cache_compressed_textures flags.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1765  
231 14 Dtool_xqRvRUjp 0 4 240 1727 0 14 Dtool_xqRvRUjp 346 ////////////////////////////////////////////////////////////////////
//     Function: BamCache::set_cache_models
//       Access: Published
//  Description: Indicates whether model files (e.g. egg files and bam
//               files) will be stored in the cache, as bam files.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1764  4 flag 1 1735  
232 14 Dtool_xqRvPFL2 0 6 241 1735 0 14 Dtool_xqRvPFL2 414 ////////////////////////////////////////////////////////////////////
//     Function: BamCache::get_cache_models
//       Access: Published
//  Description: Returns whether model files (e.g. egg files and bam
//               files) will be stored in the cache, as bam files.
//
//               This also returns false if get_active() is false.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1765  
233 14 Dtool_xqRvoUbM 0 4 242 1727 0 14 Dtool_xqRvoUbM 332 ////////////////////////////////////////////////////////////////////
//     Function: BamCache::set_cache_textures
//       Access: Published
//  Description: Indicates whether texture files will be stored in the
//               cache, as uncompressed txo files.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1764  4 flag 1 1735  
234 14 Dtool_xqRvtUl1 0 6 243 1735 0 14 Dtool_xqRvtUl1 418 ////////////////////////////////////////////////////////////////////
//     Function: BamCache::get_cache_textures
//       Access: Published
//  Description: Returns whether texture files (e.g. egg files and bam
//               files) will be stored in the cache, as txo files.
//
//               This also returns false if get_active() is false.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1765  
235 14 Dtool_xqRvqUmd 0 4 244 1727 0 14 Dtool_xqRvqUmd 1143 ////////////////////////////////////////////////////////////////////
//     Function: BamCache::set_cache_compressed_textures
//       Access: Published
//  Description: Indicates whether compressed texture files will be
//               stored in the cache, as compressed txo files.  The
//               compressed data may either be generated in-CPU, via
//               the squish library, or it may be extracted from the
//               GSG after the texture has been loaded.
//
//               This may be set in conjunction with
//               set_cache_textures(), or independently of it.  If
//               set_cache_textures() is true and this is false, all
//               textures will be cached in their uncompressed form.
//               If set_cache_textures() is false and this is true,
//               only compressed textures will be cached, and they
//               will be cached in their compressed form.  If both are
//               true, all textures will be cached, in their
//               uncompressed or compressed form appropriately.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1764  4 flag 1 1735  
236 14 Dtool_xqRvMfxn 0 6 245 1735 0 14 Dtool_xqRvMfxn 475 ////////////////////////////////////////////////////////////////////
//     Function: BamCache::get_cache_compressed_textures
//       Access: Published
//  Description: Returns whether compressed texture files will be
//               stored in the cache, as compressed txo files.  See
//               set_cache_compressed_textures().
//
//               This also returns false if get_active() is false.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1765  
237 14 Dtool_xqRvSDrp 0 4 246 1727 0 14 Dtool_xqRvSDrp 665 ////////////////////////////////////////////////////////////////////
//     Function: BamCache::set_root
//       Access: Published
//  Description: Changes the current root pathname of the cache.  This
//               specifies where the cache files are stored on disk.
//               This should name a directory that is on a disk local
//               to the machine (not on a network-mounted disk), for
//               instance, /tmp/panda-cache or /c/panda-cache.
//
//               If the directory does not already exist, it will be
//               created as a result of this call.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1764  4 root 1 1761  
238 14 Dtool_xqRvDaLL 0 7 247 1767 0 14 Dtool_xqRvDaLL 299 ////////////////////////////////////////////////////////////////////
//     Function: BamCache::get_root
//       Access: Published
//  Description: Returns the current root pathname of the cache.  See
//               set_root().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1765  
239 14 Dtool_xqRvFO7v 0 4 248 1727 0 14 Dtool_xqRvFO7v 316 ////////////////////////////////////////////////////////////////////
//     Function: BamCache::set_flush_time
//       Access: Published
//  Description: Specifies the time in seconds between automatic
//               flushes of the cache index.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1764  10 flush_time 1 1724  
240 14 Dtool_xqRvzd6A 0 6 249 1724 0 14 Dtool_xqRvzd6A 314 ////////////////////////////////////////////////////////////////////
//     Function: BamCache::get_flush_time
//       Access: Published
//  Description: Returns the time in seconds between automatic
//               flushes of the cache index.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1765  
241 14 Dtool_xqRvBePF 0 4 250 1727 0 14 Dtool_xqRvBePF 767 ////////////////////////////////////////////////////////////////////
//     Function: BamCache::set_cache_max_kbytes
//       Access: Published
//  Description: Specifies the maximum size, in kilobytes, which the
//               cache is allowed to grow to.  If a newly cached file
//               would exceed this size, an older file is removed from
//               the cache.
//
//               Note that in the case of multiple different processes
//               simultaneously operating on the same cache directory,
//               the actual cache size may slightly exceed this value
//               from time to time due to latency in checking between
//               the processes.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1764  10 max_kbytes 1 1724  
242 14 Dtool_xqRvbqs_ 0 6 251 1724 0 14 Dtool_xqRvbqs_ 371 ////////////////////////////////////////////////////////////////////
//     Function: BamCache::get_cache_max_kbytes
//       Access: Published
//  Description: Returns the maximum size, in kilobytes, which the
//               cache is allowed to grow to.  See
//               set_cache_max_kbytes().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1765  
243 14 Dtool_xqRvPgHj 0 4 252 1727 0 14 Dtool_xqRvPgHj 523 ////////////////////////////////////////////////////////////////////
//     Function: BamCache::set_read_only
//       Access: Published
//  Description: Can be used to put the cache in read-only mode,
//               or take it out of read-only mode.  Note that if you
//               put it into read-write mode, and it discovers that
//               it does not have write access, it will put itself
//               right back into read-only mode.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1764  2 ro 1 1735  
244 14 Dtool_xqRvD7P3 0 6 253 1735 0 14 Dtool_xqRvD7P3 503 ////////////////////////////////////////////////////////////////////
//     Function: BamCache::get_read_only
//       Access: Published
//  Description: Returns true if the cache is in read-only mode.
//               Normally, the cache starts in read-write mode.  It
//               can put itself into read-only mode automatically if
//               it discovers that it does not have write access to
//               the cache.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1765  
245 14 Dtool_xqRvamUZ 0 7 254 1760 1053 14 Dtool_xqRvamUZ 1211 ////////////////////////////////////////////////////////////////////
//     Function: BamCache::lookup
//       Access: Published
//  Description: Looks up a file in the cache.  
//
//               If the file is cacheable, then regardless of whether
//               the file is found in the cache or not, this returns a
//               BamCacheRecord.  On the other hand, if the file
//               cannot be cached, returns NULL.
//
//               If record->has_data() returns true, then the file was
//               found in the cache, and you may call
//               record->extract_data() to get the object.  If
//               record->has_data() returns false, then the file was
//               not found in the cache or the cache was stale; and
//               you should reload the source file (calling
//               record->add_dependent_file() for each file loaded,
//               including the original source file), and then call
//               record->set_data() to record the resulting loaded
//               object; and finally, you should call store() to write
//               the cached record to disk.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1764  15 source_filename 1 1761  15 cache_extension 1 1723  
246 14 Dtool_xqRvztlT 0 6 255 1735 0 14 Dtool_xqRvztlT 478 ////////////////////////////////////////////////////////////////////
//     Function: BamCache::store
//       Access: Published
//  Description: Flushes a cache entry to disk.  You must have
//               retrieved the cache record via a prior call to
//               lookup(), and then stored the data via
//               record->set_data().  Returns true on success, false
//               on failure.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1764  6 record 1 1760  
247 14 Dtool_xqRvoxHn 0 4 256 1727 0 14 Dtool_xqRvoxHn 325 ////////////////////////////////////////////////////////////////////
//     Function: BamCache::consider_flush_index
//       Access: Published
//  Description: Flushes the index if enough time has elapsed since
//               the index was last flushed.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1764  
248 14 Dtool_xqRvUv8K 0 4 257 1727 0 14 Dtool_xqRvUv8K 258 ////////////////////////////////////////////////////////////////////
//     Function: BamCache::flush_index
//       Access: Published
//  Description: Ensures the index is written to disk.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1764  
249 14 Dtool_xqRvA5ij 0 6 258 1764 0 14 Dtool_xqRvA5ij 376 ////////////////////////////////////////////////////////////////////
//     Function: BamCache::get_global_ptr
//       Access: Published, Static
//  Description: Returns a pointer to the global BamCache object,
//               which is used automatically by the ModelPool and
//               TexturePool.
//////////////////////////////////////////////////////////////////// 0 
250 14 Dtool_xqRv5YaZ 0 7 267 1770 1108 14 Dtool_xqRv5YaZ 230 ////////////////////////////////////////////////////////////////////
//     Function: LoaderOptions::Copy Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 1768  
251 14 Dtool_xqRv19et 0 7 267 1770 1108 14 Dtool_xqRv19et 225 ////////////////////////////////////////////////////////////////////
//     Function: LoaderOptions::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 5 flags 1 1724  
252 14 Dtool_xqRvMYtK 0 7 267 1770 1108 14 Dtool_xqRvMYtK 225 ////////////////////////////////////////////////////////////////////
//     Function: LoaderOptions::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
253 14 Dtool_xqRvkRhb 0 7 267 1770 1108 14 Dtool_xqRvkRhb 714 // Filename: loaderOptions.I
// Created by:  drose (05Oct05)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LoaderOptions::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 5 flags 1 1724  13 texture_flags 1 1724  
254 14 Dtool_xqRvERe5 0 6 268 1770 0 14 Dtool_xqRvERe5 238 ////////////////////////////////////////////////////////////////////
//     Function: LoaderOptions::Copy Assignment Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1770  4 copy 1 1768  
255 14 Dtool_xqRvGDaf 0 4 269 1727 0 14 Dtool_xqRvGDaf 223 ////////////////////////////////////////////////////////////////////
//     Function: LoaderOptions::set_flags
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1770  5 flags 1 1724  
256 14 Dtool_xqRvjYev 0 6 270 1724 0 14 Dtool_xqRvjYev 223 ////////////////////////////////////////////////////////////////////
//     Function: LoaderOptions::get_flags
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 1768  
257 14 Dtool_xqRvedgq 0 4 271 1727 0 14 Dtool_xqRvedgq 231 ////////////////////////////////////////////////////////////////////
//     Function: LoaderOptions::set_texture_flags
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1770  5 flags 1 1724  
258 14 Dtool_xqRvWo93 0 6 272 1724 0 14 Dtool_xqRvWo93 231 ////////////////////////////////////////////////////////////////////
//     Function: LoaderOptions::get_texture_flags
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 1768  
259 14 Dtool_xqRvloHl 0 4 273 1727 0 14 Dtool_xqRvloHl 767 ////////////////////////////////////////////////////////////////////
//     Function: LoaderOptions::set_texture_num_views
//       Access: Published
//  Description: Specifies the expected number of views to load for
//               the texture.  This is ignored unless TF_multiview is
//               included in texture_flags.  This must be specified
//               when loading a 3-d multiview texture, in which case
//               it is used to differentiate z levels from separate
//               views; it may be zero in the case of 2-d textures or
//               cube maps, in which case the number of views can be
//               inferred from the number of images found on disk.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1770  9 num_views 1 1724  
260 14 Dtool_xqRvLOQ8 0 6 274 1724 0 14 Dtool_xqRvLOQ8 264 ////////////////////////////////////////////////////////////////////
//     Function: LoaderOptions::get_texture_num_views
//       Access: Published
//  Description: See set_texture_num_views().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1768  
261 14 Dtool_xqRvOzo7 0 4 275 1727 0 14 Dtool_xqRvOzo7 480 ////////////////////////////////////////////////////////////////////
//     Function: LoaderOptions::set_auto_texture_scale
//       Access: Published
//  Description: Set this flag to ATS_none, ATS_up, ATS_down, or
//               ATS_pad to control how a texture is scaled from
//               disk when it is subsequently loaded.  Set it to
//               ATS_unspecified to restore the default behavior.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1770  5 scale 1 1667  
262 14 Dtool_xqRvxpJO 0 6 276 1667 0 14 Dtool_xqRvxpJO 266 ////////////////////////////////////////////////////////////////////
//     Function: LoaderOptions::get_auto_texture_scale
//       Access: Published
//  Description: See set_auto_texture_scale().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1768  
263 14 Dtool_xqRv0FtW 0 4 277 1727 0 14 Dtool_xqRv0FtW 221 ////////////////////////////////////////////////////////////////////
//     Function: LoaderOptions::output
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 1768  3 out 1 1731  
264 14 Dtool_xqRvyofV 0 7 280 1755 1110 14 Dtool_xqRvyofV 221 ////////////////////////////////////////////////////////////////////
//     Function: BamReader::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 6 source 1 1771  
265 14 Dtool_xqRvswJK 0 7 280 1755 1110 14 Dtool_xqRvswJK 221 ////////////////////////////////////////////////////////////////////
//     Function: BamReader::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
266 14 Dtool_xqRvykLj 0 4 282 1727 0 14 Dtool_xqRvykLj 383 ////////////////////////////////////////////////////////////////////
//     Function: BamReader::set_source
//       Access: Published
//  Description: Changes the source of future datagrams for this
//               BamReader.  This also implicitly calls init() if it
//               has not already been called.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1755  6 source 1 1771  
267 14 Dtool_xqRvjVTZ 0 6 283 1771 0 14 Dtool_xqRvjVTZ 324 ////////////////////////////////////////////////////////////////////
//     Function: BamReader::get_source
//       Access: Published
//  Description: Returns the current source of the BamReader as set by
//               set_source() or the constructor.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1755  
268 14 Dtool_xqRvOowx 0 6 284 1735 0 14 Dtool_xqRvOowx 474 ////////////////////////////////////////////////////////////////////
//     Function: BamReader::init
//       Access: Published
//  Description: Initializes the BamReader prior to reading any
//               objects from its source.  This includes reading the
//               Bam header.
//
//               This returns true if the BamReader successfully
//               initialized, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1755  
269 14 Dtool_xqRv7KNc 0 4 285 1727 0 14 Dtool_xqRv7KNc 1496 ////////////////////////////////////////////////////////////////////
//     Function: BamReader::set_aux_data
//       Access: Published
//  Description: Associates an arbitrary block of data with the
//               indicated object (or NULL), and the indicated name.
//
//               This is intended to provide a place for temporary
//               storage for objects reading themselves from the bam
//               file.  To use it, inherit from BamReader::AuxData and
//               store whatever data you like there.  Then associate
//               your AuxData with the object as it is being read with
//               set_aux_data().  You may later set the aux data to
//               NULL to remove it; or it will automatically be
//               removed (and deleted) after finalize() is called for
//               the object in question.
//
//               If the TypedWritable pointer is NULL, the the aux
//               data is stored globally for the BamReader in general.
//               This pointer is available to any bam objects, and
//               will not be automatically removed until the BamReader
//               itself destructs.
//
//               In either case, the name is just an arbitrary
//               user-defined key.  If there is already a data pointer
//               stored for the obj/name pair, that data pointer will
//               be replaced (and deleted).
//////////////////////////////////////////////////////////////////// 4 4 this 3 1755  3 obj 1 1750  4 name 1 1723  4 data 1 1772  
270 14 Dtool_xqRvGGPG 0 7 286 1772 0 14 Dtool_xqRvGGPG 413 ////////////////////////////////////////////////////////////////////
//     Function: BamReader::get_aux_data
//       Access: Published
//  Description: Returns the pointer previously associated with the
//               bam reader by a previous call to set_aux_data(), or
//               NULL if data with the indicated key has not been set.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1774  3 obj 1 1750  4 name 1 1723  
271 14 Dtool_xqRvlMp4 0 6 287 1761 0 14 Dtool_xqRvlMp4 457 ////////////////////////////////////////////////////////////////////
//     Function: BamReader::get_filename
//       Access: Published
//  Description: If a BAM is a file, then the BamReader should
//               contain the name of the file.  This enables the
//               reader to interpret pathnames in the BAM as relative
//               to the directory containing the BAM.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1774  
272 14 Dtool_xqRvQgUs 0 6 288 1768 0 14 Dtool_xqRvQgUs 330 ////////////////////////////////////////////////////////////////////
//     Function: BamReader::get_loader_options
//       Access: Published
//  Description: Returns the LoaderOptions passed to the loader when
//               the model was requested, if any.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1774  
273 14 Dtool_xqRvoG4k 0 4 289 1727 0 14 Dtool_xqRvoG4k 276 ////////////////////////////////////////////////////////////////////
//     Function: BamReader::set_loader_options
//       Access: Published
//  Description: Specifies the LoaderOptions for this BamReader.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1755  7 options 1 1768  
274 14 Dtool_xqRvkEg5 0 6 290 1750 0 14 Dtool_xqRvkEg5 1569 ////////////////////////////////////////////////////////////////////
//     Function: BamReader::read_object
//       Access: Published
//  Description: Reads a single object from the Bam file.  If the
//               object type is known, a new object of the appropriate
//               type is created and returned; otherwise, NULL is
//               returned.  NULL is also returned when the end of the
//               file is reached.  is_eof() may be called to
//               differentiate between these two cases.
//
//               This may be called repeatedly to extract out all the
//               objects in the Bam file, but typically (especially
//               for scene graph files, indicated with the .bam
//               extension), only one object is retrieved directly
//               from the Bam file: the root of the scene graph.  The
//               remaining objects will all be retrieved recursively
//               by the first object.
//
//               Note that the object returned may not yet be
//               complete.  In particular, some of its pointers may
//               not be filled in; you must call resolve() to fill in
//               all the available pointers before you can safely use
//               any objects returned by read_object().
//
//               This flavor of read_object() requires the caller to
//               know what type of object it has received in order to
//               properly manage the reference counts.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1755  
275 14 Dtool_xqRvdeRo 0 6 291 1735 0 14 Dtool_xqRvdeRo 375 ////////////////////////////////////////////////////////////////////
//     Function: BamReader::is_eof
//       Access: Published
//  Description: Returns true if the reader has reached end-of-file,
//               false otherwise.  This call is only valid after a
//               call to read_object().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1774  
276 14 Dtool_xqRvkMdY 0 6 292 1735 0 14 Dtool_xqRvkMdY 935 ////////////////////////////////////////////////////////////////////
//     Function: BamReader::resolve
//       Access: Published
//  Description: This may be called at any time during processing of
//               the Bam file to resolve all the known pointers so
//               far.  It is usually called at the end of the
//               processing, after all objects have been read, which
//               is generally the best time to call it.
//
//               This must be called at least once after reading a
//               particular object via get_object() in order to
//               validate that object.
//
//               The return value is true if all objects have been
//               resolved, or false if some objects are still
//               outstanding (in which case you will need to call
//               resolve() again later).
//////////////////////////////////////////////////////////////////// 1 4 this 3 1755  
277 14 Dtool_xqRv7ine 0 6 293 1735 0 14 Dtool_xqRv7ine 724 ////////////////////////////////////////////////////////////////////
//     Function: BamReader::change_pointer
//       Access: Published
//  Description: Indicates that an object recently read from the bam
//               stream should be replaced with a new object.  Any
//               future occurrences of the original object in the
//               stream will henceforth return the new object instead.
//
//               The return value is true if the replacement was
//               successfully made, or false if the object was not
//               read from the stream (or if change_pointer had
//               already been called on it).
//////////////////////////////////////////////////////////////////// 3 4 this 3 1755  12 orig_pointer 1 1751  11 new_pointer 1 1751  
278 14 Dtool_xqRvHY9j 0 6 294 1724 0 14 Dtool_xqRvHY9j 316 ////////////////////////////////////////////////////////////////////
//     Function: BamReader::get_file_major_ver
//       Access: Published
//  Description: Returns the major version number of the Bam file
//               currently being read.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1774  
279 14 Dtool_xqRvyH0T 0 6 295 1724 0 14 Dtool_xqRvyH0T 316 ////////////////////////////////////////////////////////////////////
//     Function: BamReader::get_file_minor_ver
//       Access: Published
//  Description: Returns the minor version number of the Bam file
//               currently being read.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1774  
280 14 Dtool_xqRvTPGP 0 6 296 1677 0 14 Dtool_xqRvTPGP 528 ////////////////////////////////////////////////////////////////////
//     Function: BamReader::get_file_endian
//       Access: Published
//  Description: Returns the endian preference indicated by the Bam
//               file currently being read.  This does not imply that
//               every number is stored using the indicated
//               convention, but individual objects may choose to
//               respect this flag when recording data.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1774  
281 14 Dtool_xqRvIek2 0 6 297 1735 0 14 Dtool_xqRvIek2 489 ////////////////////////////////////////////////////////////////////
//     Function: BamReader::get_file_stdfloat_double
//       Access: Published
//  Description: Returns true if the file stores all "standard"
//               floats as 64-bit doubles, or false if they are 32-bit
//               floats.  This is determined by the compilation flags
//               of the version of Panda that generated this file.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1774  
282 14 Dtool_xqRvDBcf 0 6 298 1724 0 14 Dtool_xqRvDBcf 440 ////////////////////////////////////////////////////////////////////
//     Function: BamReader::get_current_major_ver
//       Access: Published
//  Description: Returns the major version number of Bam files
//               supported by the current code base.  This must match
//               get_file_major_ver() in order to successfully read a
//               file.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1774  
283 14 Dtool_xqRvbCCi 0 6 299 1724 0 14 Dtool_xqRvbCCi 450 ////////////////////////////////////////////////////////////////////
//     Function: BamReader::get_current_minor_ver
//       Access: Published
//  Description: Returns the minor version number of Bam files
//               supported by the current code base.  This must match
//               or exceed get_file_minor_ver() in order to
//               successfully read a file.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1774  
284 14 Dtool_xqRv8uzO 0 7 301 1754 1130 14 Dtool_xqRv8uzO 221 ////////////////////////////////////////////////////////////////////
//     Function: BamWriter::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 6 target 1 1776  
285 14 Dtool_xqRvpd8a 0 7 301 1754 1130 14 Dtool_xqRvpd8a 221 ////////////////////////////////////////////////////////////////////
//     Function: BamWriter::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
286 14 Dtool_xqRvpGaG 0 4 303 1727 0 14 Dtool_xqRvpGaG 394 ////////////////////////////////////////////////////////////////////
//     Function: BamWriter::set_target
//       Access: Published
//  Description: Changes the destination of future datagrams written
//               by the BamWriter.  This also implicitly calls init()
//               if it has not already been called.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1754  6 target 1 1776  
287 14 Dtool_xqRvcRQs 0 6 304 1776 0 14 Dtool_xqRvcRQs 809 // Filename: bamWriter.I
// Created by:  jason (08Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: BamWriter::get_target
//       Access: Published
//  Description: Returns the current target of the BamWriter as set by
//               set_target() or the constructor.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1754  
288 14 Dtool_xqRvyJ_l 0 6 305 1735 0 14 Dtool_xqRvyJ_l 483 ////////////////////////////////////////////////////////////////////
//     Function: BamWriter::init
//       Access: Published
//  Description: Initializes the BamWriter prior to writing any
//               objects to its output stream.  This includes writing
//               out the Bam header.
//
//               This returns true if the BamWriter successfully
//               initialized, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1754  
289 14 Dtool_xqRv2a2s 0 6 306 1761 0 14 Dtool_xqRv2a2s 455 ////////////////////////////////////////////////////////////////////
//     Function: BamWriter::get_filename
//       Access: Published
//  Description: If a BAM is a file, then the BamWriter should
//               contain the name of the file.  This enables the
//               writer to convert pathnames in the BAM to relative
//               to the directory containing the BAM.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1778  
290 14 Dtool_xqRvaCkL 0 6 307 1735 0 14 Dtool_xqRvaCkL 1153 ////////////////////////////////////////////////////////////////////
//     Function: BamWriter::write_object
//       Access: Published
//  Description: Writes a single object to the Bam file, so that the
//               BamReader::read_object() can later correctly restore
//               the object and all its pointers.
//
//               This implicitly also writes any additional objects
//               this object references (if they haven't already been
//               written), so that pointers may be fully resolved.
//
//               This may be called repeatedly to write a sequence of
//               objects to the Bam file, but typically (especially
//               for scene graph files, indicated with the .bam
//               extension), only one object is written directly from
//               the Bam file: the root of the scene graph.  The
//               remaining objects will all be written recursively by
//               the first object.
//
//               Returns true if the object is successfully written,
//               false otherwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1754  3 obj 1 1751  
291 14 Dtool_xqRvgrPZ 0 6 308 1735 0 14 Dtool_xqRvgrPZ 408 ////////////////////////////////////////////////////////////////////
//     Function: BamWriter::has_object
//       Access: Published
//  Description: Returns true if the object has previously been
//               written (or at least requested to be written) to the
//               bam file, or false if we've never heard of it before.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1778  3 obj 1 1751  
292 14 Dtool_xqRvyWRG 0 4 309 1727 0 14 Dtool_xqRvyWRG 307 ////////////////////////////////////////////////////////////////////
//     Function: BamWriter::flush
//       Access: Published
//  Description: Ensures that all data written thus far is manifested
//               on the output stream.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1754  
293 14 Dtool_xqRvAdVD 0 6 310 1677 0 14 Dtool_xqRvAdVD 531 ////////////////////////////////////////////////////////////////////
//     Function: BamWriter::get_file_endian
//       Access: Published
//  Description: Returns the endian preference indicated by the Bam
//               file currently being written.  This does not imply
//               that every number is stored using the indicated
//               convention, but individual objects may choose to
//               respect this flag when recording data.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1778  
294 14 Dtool_xqRvroyq 0 6 311 1735 0 14 Dtool_xqRvroyq 531 ////////////////////////////////////////////////////////////////////
//     Function: BamWriter::get_file_stdfloat_double
//       Access: Published
//  Description: Returns true if the file will store all "standard"
//               floats as 64-bit doubles, or false if they are 32-bit
//               floats.  This isn't runtime settable; it's based on
//               the compilation flags of the version of Panda that
//               generated this file.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1778  
295 14 Dtool_xqRvvXrV 0 6 312 1679 0 14 Dtool_xqRvvXrV 462 ////////////////////////////////////////////////////////////////////
//     Function: BamWriter::get_file_texture_mode
//       Access: Published
//  Description: Returns the BamTextureMode preference indicated by
//               the Bam file currently being written.  Texture
//               objects written to this Bam file will be encoded
//               according to the specified mode.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1778  
296 14 Dtool_xqRveMfu 0 4 313 1727 0 14 Dtool_xqRveMfu 453 ////////////////////////////////////////////////////////////////////
//     Function: BamWriter::set_file_texture_mode
//       Access: Published
//  Description: Changes the BamTextureMode preference for
//               the Bam file currently being written.  Texture
//               objects written to this Bam file will be encoded
//               according to the specified mode.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1754  17 file_texture_mode 1 1679  
297 14 Dtool_xqRvY8n1 0 7 315 1780 1149 14 Dtool_xqRvY8n1 0 0 
298 14 Dtool_xqRvd8dF 0 7 315 1780 1149 14 Dtool_xqRvd8dF 0 1 4 copy 1 1781  
299 14 Dtool_xqRvQKNp 0 7 315 1780 1149 14 Dtool_xqRvQKNp 0 1 10 init_value 1 1722  
300 14 Dtool_xqRvJZTb 0 6 316 1780 0 14 Dtool_xqRvJZTb 0 2 4 this 3 1780  4 copy 1 1781  
301 14 Dtool_xqRvXYNA 0 7 317 1780 1149 14 Dtool_xqRvXYNA 0 0 
302 14 Dtool_xqRvYhyY 0 7 318 1780 1149 14 Dtool_xqRvYhyY 0 0 
303 14 Dtool_xqRvj81C 0 7 319 1780 1149 14 Dtool_xqRvj81C 0 1 7 on_bits 1 1724  
304 14 Dtool_xqRvv20_ 0 7 320 1780 1149 14 Dtool_xqRvv20_ 0 1 5 index 1 1724  
305 14 Dtool_xqRv29fW 0 7 321 1780 1149 14 Dtool_xqRv29fW 0 2 7 low_bit 1 1724  4 size 1 1724  
306 14 Dtool_xqRvjM9n 0 6 323 1735 0 14 Dtool_xqRvjM9n 0 0 
307 14 Dtool_xqRvLPok 0 6 324 1724 0 14 Dtool_xqRvLPok 0 0 
308 14 Dtool_xqRvLMWC 0 6 325 1724 0 14 Dtool_xqRvLMWC 0 0 
309 14 Dtool_xqRvoZD7 0 6 326 1735 0 14 Dtool_xqRvoZD7 0 2 4 this 3 1781  5 index 1 1724  
310 14 Dtool_xqRvHvH5 0 4 327 1727 0 14 Dtool_xqRvHvH5 0 2 4 this 3 1780  5 index 1 1724  
311 14 Dtool_xqRvDlS1 0 4 328 1727 0 14 Dtool_xqRvDlS1 0 2 4 this 3 1780  5 index 1 1724  
312 14 Dtool_xqRvwyI5 0 4 329 1727 0 14 Dtool_xqRvwyI5 0 3 4 this 3 1780  5 index 1 1724  5 value 1 1735  
313 14 Dtool_xqRvpD_I 0 6 330 1735 0 14 Dtool_xqRvpD_I 0 1 4 this 3 1781  
314 14 Dtool_xqRvrRHW 0 6 331 1735 0 14 Dtool_xqRvrRHW 0 1 4 this 3 1781  
315 14 Dtool_xqRvvAiO 0 6 332 1722 0 14 Dtool_xqRvvAiO 0 3 4 this 3 1781  7 low_bit 1 1724  4 size 1 1724  
316 14 Dtool_xqRvhlDh 0 4 333 1727 0 14 Dtool_xqRvhlDh 0 4 4 this 3 1780  5 value 1 1722  7 low_bit 1 1724  4 size 1 1724  
317 14 Dtool_xqRvrEJ7 0 6 334 1735 0 14 Dtool_xqRvrEJ7 0 3 4 this 3 1781  7 low_bit 1 1724  4 size 1 1724  
318 14 Dtool_xqRvVXDN 0 6 335 1735 0 14 Dtool_xqRvVXDN 0 3 4 this 3 1781  7 low_bit 1 1724  4 size 1 1724  
319 14 Dtool_xqRvDfi2 0 4 336 1727 0 14 Dtool_xqRvDfi2 0 3 4 this 3 1780  7 low_bit 1 1724  4 size 1 1724  
320 14 Dtool_xqRvTDVh 0 4 337 1727 0 14 Dtool_xqRvTDVh 0 3 4 this 3 1780  7 low_bit 1 1724  4 size 1 1724  
321 14 Dtool_xqRv3CAw 0 4 338 1727 0 14 Dtool_xqRv3CAw 0 4 4 this 3 1780  5 value 1 1735  7 low_bit 1 1724  4 size 1 1724  
322 14 Dtool_xqRvKtug 0 6 339 1722 0 14 Dtool_xqRvKtug 0 1 4 this 3 1781  
323 14 Dtool_xqRvqWNx 0 4 340 1727 0 14 Dtool_xqRvqWNx 0 2 4 this 3 1780  5 value 1 1722  
324 14 Dtool_xqRvwNdD 0 6 341 1724 0 14 Dtool_xqRvwNdD 0 1 4 this 3 1781  
325 14 Dtool_xqRvNq9C 0 6 342 1724 0 14 Dtool_xqRvNq9C 0 1 4 this 3 1781  
326 14 Dtool_xqRvPG3h 0 6 343 1724 0 14 Dtool_xqRvPG3h 0 1 4 this 3 1781  
327 14 Dtool_xqRvyV9D 0 6 344 1724 0 14 Dtool_xqRvyV9D 0 1 4 this 3 1781  
328 14 Dtool_xqRv0xJw 0 6 345 1724 0 14 Dtool_xqRv0xJw 0 1 4 this 3 1781  
329 14 Dtool_xqRvpjpy 0 6 346 1724 0 14 Dtool_xqRvpjpy 0 1 4 this 3 1781  
330 14 Dtool_xqRvTJ13 0 6 347 1724 0 14 Dtool_xqRvTJ13 0 2 4 this 3 1781  7 low_bit 1 1724  
331 14 Dtool_xqRvGlyF 0 4 348 1727 0 14 Dtool_xqRvGlyF 0 1 4 this 3 1780  
332 14 Dtool_xqRvdBzV 0 6 349 1735 0 14 Dtool_xqRvdBzV 0 2 4 this 3 1781  5 other 1 1781  
333 14 Dtool_xqRvYjCO 0 4 350 1727 0 14 Dtool_xqRvYjCO 0 1 4 this 3 1780  
334 14 Dtool_xqRvCJ36 0 4 351 1727 0 14 Dtool_xqRvCJ36 0 2 4 this 3 1781  3 out 1 1731  
335 14 Dtool_xqRvKhMC 0 4 352 1727 0 14 Dtool_xqRvKhMC 0 3 4 this 3 1781  3 out 1 1731  12 spaces_every 1 1724  
336 14 Dtool_xqRvYovn 0 4 352 1727 0 14 Dtool_xqRvYovn 0 2 4 this 3 1781  3 out 1 1731  
337 14 Dtool_xqRvwLf9 0 4 353 1727 0 14 Dtool_xqRvwLf9 0 3 4 this 3 1781  3 out 1 1731  12 spaces_every 1 1724  
338 14 Dtool_xqRvN0AH 0 4 353 1727 0 14 Dtool_xqRvN0AH 0 2 4 this 3 1781  3 out 1 1731  
339 14 Dtool_xqRv4_Uj 0 4 354 1727 0 14 Dtool_xqRv4_Uj 0 3 4 this 3 1781  3 out 1 1731  12 indent_level 1 1724  
340 14 Dtool_xqRvK9Ho 0 4 354 1727 0 14 Dtool_xqRvK9Ho 0 2 4 this 3 1781  3 out 1 1731  
341 14 Dtool_xqRv_rYC 0 6 355 1735 0 14 Dtool_xqRv_rYC 0 2 4 this 3 1781  5 other 1 1781  
342 14 Dtool_xqRvnpIW 0 6 356 1735 0 14 Dtool_xqRvnpIW 0 2 4 this 3 1781  5 other 1 1781  
343 14 Dtool_xqRvbyVY 0 6 357 1735 0 14 Dtool_xqRvbyVY 0 2 4 this 3 1781  5 other 1 1781  
344 14 Dtool_xqRvKgVU 0 6 358 1724 0 14 Dtool_xqRvKgVU 0 2 4 this 3 1781  5 other 1 1781  
345 14 Dtool_xqRvvwt_ 0 7 359 1780 1149 14 Dtool_xqRvvwt_ 0 2 4 this 3 1781  5 other 1 1781  
346 14 Dtool_xqRvD3V0 0 7 360 1780 1149 14 Dtool_xqRvD3V0 0 2 4 this 3 1781  5 other 1 1781  
347 14 Dtool_xqRvx0NX 0 7 361 1780 1149 14 Dtool_xqRvx0NX 0 2 4 this 3 1781  5 other 1 1781  
348 14 Dtool_xqRvdjF_ 0 7 362 1780 1149 14 Dtool_xqRvdjF_ 0 1 4 this 3 1781  
349 14 Dtool_xqRvGBn_ 0 7 363 1780 1149 14 Dtool_xqRvGBn_ 0 2 4 this 3 1781  5 shift 1 1724  
350 14 Dtool_xqRvBEfL 0 7 364 1780 1149 14 Dtool_xqRvBEfL 0 2 4 this 3 1781  5 shift 1 1724  
351 14 Dtool_xqRv8phA 0 6 365 1780 0 14 Dtool_xqRv8phA 0 2 4 this 3 1780  5 other 1 1781  
352 14 Dtool_xqRvfgJ2 0 6 366 1780 0 14 Dtool_xqRvfgJ2 0 2 4 this 3 1780  5 other 1 1781  
353 14 Dtool_xqRvNmBZ 0 6 367 1780 0 14 Dtool_xqRvNmBZ 0 2 4 this 3 1780  5 other 1 1781  
354 14 Dtool_xqRvQIZr 0 6 368 1780 0 14 Dtool_xqRvQIZr 0 2 4 this 3 1780  5 shift 1 1724  
355 14 Dtool_xqRveTR4 0 6 369 1780 0 14 Dtool_xqRveTR4 0 2 4 this 3 1780  5 shift 1 1724  
356 14 Dtool_xqRvZhUs 0 4 370 1727 0 14 Dtool_xqRvZhUs 0 1 4 this 3 1780  
357 14 Dtool_xqRv6S0S 0 4 371 1727 0 14 Dtool_xqRv6S0S 0 1 4 this 3 1780  
358 14 Dtool_xqRvccAh 0 7 372 1780 1149 14 Dtool_xqRvccAh 0 1 4 this 3 1781  
359 14 Dtool_xqRv3HQS 0 7 373 1780 1149 14 Dtool_xqRv3HQS 0 1 4 this 3 1781  
360 14 Dtool_xqRvuOp5 0 7 374 1780 1149 14 Dtool_xqRvuOp5 0 1 4 this 3 1781  
361 14 Dtool_xqRvdxsS 0 7 374 1780 1149 14 Dtool_xqRvdxsS 0 2 4 this 3 1781  5 other 1 1781  
362 14 Dtool_xqRvOp9c 0 7 374 1780 1149 14 Dtool_xqRvOp9c 0 2 4 this 3 1781  5 index 1 1724  
363 14 Dtool_xqRvjXNC 0 7 375 1780 1149 14 Dtool_xqRvjXNC 0 1 4 this 3 1781  
364 14 Dtool_xqRvl87a 0 7 375 1780 1149 14 Dtool_xqRvl87a 0 2 4 this 3 1781  5 other 1 1781  
365 14 Dtool_xqRv5AUL 0 7 375 1780 1149 14 Dtool_xqRv5AUL 0 2 4 this 3 1781  5 index 1 1724  
366 14 Dtool_xqRvEmuv 0 6 376 1724 0 14 Dtool_xqRvEmuv 0 1 4 this 3 1781  
367 14 Dtool_xqRv8p19 0 6 377 1735 0 14 Dtool_xqRv8p19 0 1 4 this 3 1781  
368 14 Dtool_xqRvf5Rj 0 7 378 1737 0 14 Dtool_xqRvf5Rj 0 0 
369 14 Dtool_xqRvnVQd 0 7 380 1783 1213 14 Dtool_xqRvnVQd 0 0 
370 14 Dtool_xqRv7gMO 0 7 380 1783 1213 14 Dtool_xqRv7gMO 0 1 4 copy 1 1784  
371 14 Dtool_xqRv0eoo 0 7 380 1783 1213 14 Dtool_xqRv0eoo 0 1 10 init_value 1 1721  
372 14 Dtool_xqRvCaYM 0 6 381 1783 0 14 Dtool_xqRvCaYM 0 2 4 this 3 1783  4 copy 1 1784  
373 14 Dtool_xqRvRObZ 0 7 382 1783 1213 14 Dtool_xqRvRObZ 0 0 
374 14 Dtool_xqRvjEzX 0 7 383 1783 1213 14 Dtool_xqRvjEzX 0 0 
375 14 Dtool_xqRvIQak 0 7 384 1783 1213 14 Dtool_xqRvIQak 0 1 7 on_bits 1 1724  
376 14 Dtool_xqRvsGZS 0 7 385 1783 1213 14 Dtool_xqRvsGZS 0 1 5 index 1 1724  
377 14 Dtool_xqRvOgvR 0 7 386 1783 1213 14 Dtool_xqRvOgvR 0 2 7 low_bit 1 1724  4 size 1 1724  
378 14 Dtool_xqRv6pB9 0 6 388 1735 0 14 Dtool_xqRv6pB9 0 0 
379 14 Dtool_xqRvyO9U 0 6 389 1724 0 14 Dtool_xqRvyO9U 0 0 
380 14 Dtool_xqRvR9aU 0 6 390 1724 0 14 Dtool_xqRvR9aU 0 0 
381 14 Dtool_xqRve0SD 0 6 391 1735 0 14 Dtool_xqRve0SD 0 2 4 this 3 1784  5 index 1 1724  
382 14 Dtool_xqRvd8Sx 0 4 392 1727 0 14 Dtool_xqRvd8Sx 0 2 4 this 3 1783  5 index 1 1724  
383 14 Dtool_xqRveFOW 0 4 393 1727 0 14 Dtool_xqRveFOW 0 2 4 this 3 1783  5 index 1 1724  
384 14 Dtool_xqRvdoR6 0 4 394 1727 0 14 Dtool_xqRvdoR6 0 3 4 this 3 1783  5 index 1 1724  5 value 1 1735  
385 14 Dtool_xqRvJyi2 0 6 395 1735 0 14 Dtool_xqRvJyi2 0 1 4 this 3 1784  
386 14 Dtool_xqRvKdtD 0 6 396 1735 0 14 Dtool_xqRvKdtD 0 1 4 this 3 1784  
387 14 Dtool_xqRvvCn_ 0 6 397 1721 0 14 Dtool_xqRvvCn_ 0 3 4 this 3 1784  7 low_bit 1 1724  4 size 1 1724  
388 14 Dtool_xqRvVp78 0 4 398 1727 0 14 Dtool_xqRvVp78 0 4 4 this 3 1783  5 value 1 1721  7 low_bit 1 1724  4 size 1 1724  
389 14 Dtool_xqRv5NS8 0 6 399 1735 0 14 Dtool_xqRv5NS8 0 3 4 this 3 1784  7 low_bit 1 1724  4 size 1 1724  
390 14 Dtool_xqRv7Fky 0 6 400 1735 0 14 Dtool_xqRv7Fky 0 3 4 this 3 1784  7 low_bit 1 1724  4 size 1 1724  
391 14 Dtool_xqRvDAOF 0 4 401 1727 0 14 Dtool_xqRvDAOF 0 3 4 this 3 1783  7 low_bit 1 1724  4 size 1 1724  
392 14 Dtool_xqRvU65s 0 4 402 1727 0 14 Dtool_xqRvU65s 0 3 4 this 3 1783  7 low_bit 1 1724  4 size 1 1724  
393 14 Dtool_xqRvDZHW 0 4 403 1727 0 14 Dtool_xqRvDZHW 0 4 4 this 3 1783  5 value 1 1735  7 low_bit 1 1724  4 size 1 1724  
394 14 Dtool_xqRviD5O 0 6 404 1721 0 14 Dtool_xqRviD5O 0 1 4 this 3 1784  
395 14 Dtool_xqRvERWc 0 4 405 1727 0 14 Dtool_xqRvERWc 0 2 4 this 3 1783  5 value 1 1721  
396 14 Dtool_xqRvb3be 0 6 406 1724 0 14 Dtool_xqRvb3be 0 1 4 this 3 1784  
397 14 Dtool_xqRvKHao 0 6 407 1724 0 14 Dtool_xqRvKHao 0 1 4 this 3 1784  
398 14 Dtool_xqRvRr4t 0 6 408 1724 0 14 Dtool_xqRvRr4t 0 1 4 this 3 1784  
399 14 Dtool_xqRvxYbh 0 6 409 1724 0 14 Dtool_xqRvxYbh 0 1 4 this 3 1784  
400 14 Dtool_xqRv_tIX 0 6 410 1724 0 14 Dtool_xqRv_tIX 0 1 4 this 3 1784  
401 14 Dtool_xqRvRLKI 0 6 411 1724 0 14 Dtool_xqRvRLKI 0 1 4 this 3 1784  
402 14 Dtool_xqRvgFMA 0 6 412 1724 0 14 Dtool_xqRvgFMA 0 2 4 this 3 1784  7 low_bit 1 1724  
403 14 Dtool_xqRvLld4 0 4 413 1727 0 14 Dtool_xqRvLld4 0 1 4 this 3 1783  
404 14 Dtool_xqRvjIgk 0 6 414 1735 0 14 Dtool_xqRvjIgk 0 2 4 this 3 1784  5 other 1 1784  
405 14 Dtool_xqRvYEpe 0 4 415 1727 0 14 Dtool_xqRvYEpe 0 1 4 this 3 1783  
406 14 Dtool_xqRv3eSz 0 4 416 1727 0 14 Dtool_xqRv3eSz 0 2 4 this 3 1784  3 out 1 1731  
407 14 Dtool_xqRvBOXy 0 4 417 1727 0 14 Dtool_xqRvBOXy 0 3 4 this 3 1784  3 out 1 1731  12 spaces_every 1 1724  
408 14 Dtool_xqRv8596 0 4 417 1727 0 14 Dtool_xqRv8596 0 2 4 this 3 1784  3 out 1 1731  
409 14 Dtool_xqRvHJUc 0 4 418 1727 0 14 Dtool_xqRvHJUc 0 3 4 this 3 1784  3 out 1 1731  12 spaces_every 1 1724  
410 14 Dtool_xqRv6TeI 0 4 418 1727 0 14 Dtool_xqRv6TeI 0 2 4 this 3 1784  3 out 1 1731  
411 14 Dtool_xqRvB_7k 0 4 419 1727 0 14 Dtool_xqRvB_7k 0 3 4 this 3 1784  3 out 1 1731  12 indent_level 1 1724  
412 14 Dtool_xqRvHvA7 0 4 419 1727 0 14 Dtool_xqRvHvA7 0 2 4 this 3 1784  3 out 1 1731  
413 14 Dtool_xqRvmOwJ 0 6 420 1735 0 14 Dtool_xqRvmOwJ 0 2 4 this 3 1784  5 other 1 1784  
414 14 Dtool_xqRvk_DB 0 6 421 1735 0 14 Dtool_xqRvk_DB 0 2 4 this 3 1784  5 other 1 1784  
415 14 Dtool_xqRvj58v 0 6 422 1735 0 14 Dtool_xqRvj58v 0 2 4 this 3 1784  5 other 1 1784  
416 14 Dtool_xqRvp_4v 0 6 423 1724 0 14 Dtool_xqRvp_4v 0 2 4 this 3 1784  5 other 1 1784  
417 14 Dtool_xqRvgBiE 0 7 424 1783 1213 14 Dtool_xqRvgBiE 0 2 4 this 3 1784  5 other 1 1784  
418 14 Dtool_xqRvm5Yo 0 7 425 1783 1213 14 Dtool_xqRvm5Yo 0 2 4 this 3 1784  5 other 1 1784  
419 14 Dtool_xqRvkh7V 0 7 426 1783 1213 14 Dtool_xqRvkh7V 0 2 4 this 3 1784  5 other 1 1784  
420 14 Dtool_xqRv0pXy 0 7 427 1783 1213 14 Dtool_xqRv0pXy 0 1 4 this 3 1784  
421 14 Dtool_xqRv8uW_ 0 7 428 1783 1213 14 Dtool_xqRv8uW_ 0 2 4 this 3 1784  5 shift 1 1724  
422 14 Dtool_xqRv62jA 0 7 429 1783 1213 14 Dtool_xqRv62jA 0 2 4 this 3 1784  5 shift 1 1724  
423 14 Dtool_xqRvRRDL 0 6 430 1783 0 14 Dtool_xqRvRRDL 0 2 4 this 3 1783  5 other 1 1784  
424 14 Dtool_xqRvfJ5u 0 6 431 1783 0 14 Dtool_xqRvfJ5u 0 2 4 this 3 1783  5 other 1 1784  
425 14 Dtool_xqRvdxcc 0 6 432 1783 0 14 Dtool_xqRvdxcc 0 2 4 this 3 1783  5 other 1 1784  
426 14 Dtool_xqRvP4Dt 0 6 433 1783 0 14 Dtool_xqRvP4Dt 0 2 4 this 3 1783  5 shift 1 1724  
427 14 Dtool_xqRvIwQv 0 6 434 1783 0 14 Dtool_xqRvIwQv 0 2 4 this 3 1783  5 shift 1 1724  
428 14 Dtool_xqRv_AEu 0 4 435 1727 0 14 Dtool_xqRv_AEu 0 1 4 this 3 1783  
429 14 Dtool_xqRvXFrF 0 4 436 1727 0 14 Dtool_xqRvXFrF 0 1 4 this 3 1783  
430 14 Dtool_xqRvYU4u 0 7 437 1783 1213 14 Dtool_xqRvYU4u 0 1 4 this 3 1784  
431 14 Dtool_xqRv5nqX 0 7 438 1783 1213 14 Dtool_xqRv5nqX 0 1 4 this 3 1784  
432 14 Dtool_xqRvWEPP 0 7 439 1783 1213 14 Dtool_xqRvWEPP 0 1 4 this 3 1784  
433 14 Dtool_xqRvHbN9 0 7 439 1783 1213 14 Dtool_xqRvHbN9 0 2 4 this 3 1784  5 other 1 1784  
434 14 Dtool_xqRvDpyT 0 7 439 1783 1213 14 Dtool_xqRvDpyT 0 2 4 this 3 1784  5 index 1 1724  
435 14 Dtool_xqRveUY6 0 7 440 1783 1213 14 Dtool_xqRveUY6 0 1 4 this 3 1784  
436 14 Dtool_xqRvyau5 0 7 440 1783 1213 14 Dtool_xqRvyau5 0 2 4 this 3 1784  5 other 1 1784  
437 14 Dtool_xqRviRhU 0 7 440 1783 1213 14 Dtool_xqRviRhU 0 2 4 this 3 1784  5 index 1 1724  
438 14 Dtool_xqRvGYJg 0 6 441 1724 0 14 Dtool_xqRvGYJg 0 1 4 this 3 1784  
439 14 Dtool_xqRvJcVa 0 6 442 1735 0 14 Dtool_xqRvJcVa 0 1 4 this 3 1784  
440 14 Dtool_xqRvq17v 0 7 443 1737 0 14 Dtool_xqRvq17v 0 0 
441 14 Dtool_xqRvU9bE 0 7 445 1786 1277 14 Dtool_xqRvU9bE 0 0 
442 14 Dtool_xqRv5ezH 0 7 445 1786 1277 14 Dtool_xqRv5ezH 0 1 4 copy 1 1787  
443 14 Dtool_xqRvTcCB 0 7 445 1786 1277 14 Dtool_xqRvTcCB 0 1 10 init_value 1 1789  
444 14 Dtool_xqRv62Cv 0 6 446 1786 0 14 Dtool_xqRv62Cv 0 2 4 this 3 1786  4 copy 1 1787  
445 14 Dtool_xqRv6XLs 0 7 447 1786 1277 14 Dtool_xqRv6XLs 0 0 
446 14 Dtool_xqRvj7E0 0 7 448 1786 1277 14 Dtool_xqRvj7E0 0 0 
447 14 Dtool_xqRvRJ3I 0 7 449 1786 1277 14 Dtool_xqRvRJ3I 0 1 7 on_bits 1 1724  
448 14 Dtool_xqRvfjxv 0 7 450 1786 1277 14 Dtool_xqRvfjxv 0 1 5 index 1 1724  
449 14 Dtool_xqRv6MsD 0 7 451 1786 1277 14 Dtool_xqRv6MsD 0 2 7 low_bit 1 1724  4 size 1 1724  
450 14 Dtool_xqRv3EZO 0 6 453 1735 0 14 Dtool_xqRv3EZO 0 0 
451 14 Dtool_xqRvDK5H 0 6 454 1724 0 14 Dtool_xqRvDK5H 0 0 
452 14 Dtool_xqRvgs2D 0 6 455 1724 0 14 Dtool_xqRvgs2D 0 0 
453 14 Dtool_xqRvC4y6 0 6 456 1735 0 14 Dtool_xqRvC4y6 0 2 4 this 3 1787  5 index 1 1724  
454 14 Dtool_xqRvZ9qJ 0 4 457 1727 0 14 Dtool_xqRvZ9qJ 0 2 4 this 3 1786  5 index 1 1724  
455 14 Dtool_xqRvPD_7 0 4 458 1727 0 14 Dtool_xqRvPD_7 0 2 4 this 3 1786  5 index 1 1724  
456 14 Dtool_xqRveONW 0 4 459 1727 0 14 Dtool_xqRveONW 0 3 4 this 3 1786  5 index 1 1724  5 value 1 1735  
457 14 Dtool_xqRv88_Z 0 6 460 1735 0 14 Dtool_xqRv88_Z 0 1 4 this 3 1787  
458 14 Dtool_xqRvS_1K 0 6 461 1735 0 14 Dtool_xqRvS_1K 0 1 4 this 3 1787  
459 14 Dtool_xqRvDBje 0 6 462 1789 0 14 Dtool_xqRvDBje 0 3 4 this 3 1787  7 low_bit 1 1724  4 size 1 1724  
460 14 Dtool_xqRvu4q5 0 4 463 1727 0 14 Dtool_xqRvu4q5 0 4 4 this 3 1786  5 value 1 1789  7 low_bit 1 1724  4 size 1 1724  
461 14 Dtool_xqRvdWSm 0 6 464 1735 0 14 Dtool_xqRvdWSm 0 3 4 this 3 1787  7 low_bit 1 1724  4 size 1 1724  
462 14 Dtool_xqRv9utt 0 6 465 1735 0 14 Dtool_xqRv9utt 0 3 4 this 3 1787  7 low_bit 1 1724  4 size 1 1724  
463 14 Dtool_xqRv1U5K 0 4 466 1727 0 14 Dtool_xqRv1U5K 0 3 4 this 3 1786  7 low_bit 1 1724  4 size 1 1724  
464 14 Dtool_xqRvbjY5 0 4 467 1727 0 14 Dtool_xqRvbjY5 0 3 4 this 3 1786  7 low_bit 1 1724  4 size 1 1724  
465 14 Dtool_xqRvgM5H 0 4 468 1727 0 14 Dtool_xqRvgM5H 0 4 4 this 3 1786  5 value 1 1735  7 low_bit 1 1724  4 size 1 1724  
466 14 Dtool_xqRv8DhL 0 6 469 1789 0 14 Dtool_xqRv8DhL 0 1 4 this 3 1787  
467 14 Dtool_xqRvqVn_ 0 4 470 1727 0 14 Dtool_xqRvqVn_ 0 2 4 this 3 1786  5 value 1 1789  
468 14 Dtool_xqRv4Wds 0 6 471 1724 0 14 Dtool_xqRv4Wds 0 1 4 this 3 1787  
469 14 Dtool_xqRvjQFl 0 6 472 1724 0 14 Dtool_xqRvjQFl 0 1 4 this 3 1787  
470 14 Dtool_xqRve7aR 0 6 473 1724 0 14 Dtool_xqRve7aR 0 1 4 this 3 1787  
471 14 Dtool_xqRvCwok 0 6 474 1724 0 14 Dtool_xqRvCwok 0 1 4 this 3 1787  
472 14 Dtool_xqRvBx_b 0 6 475 1724 0 14 Dtool_xqRvBx_b 0 1 4 this 3 1787  
473 14 Dtool_xqRvT2DD 0 6 476 1724 0 14 Dtool_xqRvT2DD 0 1 4 this 3 1787  
474 14 Dtool_xqRvF8hO 0 6 477 1724 0 14 Dtool_xqRvF8hO 0 2 4 this 3 1787  7 low_bit 1 1724  
475 14 Dtool_xqRvZ9Iu 0 4 478 1727 0 14 Dtool_xqRvZ9Iu 0 1 4 this 3 1786  
476 14 Dtool_xqRvSAaD 0 6 479 1735 0 14 Dtool_xqRvSAaD 0 2 4 this 3 1787  5 other 1 1787  
477 14 Dtool_xqRvoQig 0 4 480 1727 0 14 Dtool_xqRvoQig 0 1 4 this 3 1786  
478 14 Dtool_xqRvT6y9 0 4 481 1727 0 14 Dtool_xqRvT6y9 0 2 4 this 3 1787  3 out 1 1731  
479 14 Dtool_xqRvEmrZ 0 4 482 1727 0 14 Dtool_xqRvEmrZ 0 3 4 this 3 1787  3 out 1 1731  12 spaces_every 1 1724  
480 14 Dtool_xqRv8bPK 0 4 482 1727 0 14 Dtool_xqRv8bPK 0 2 4 this 3 1787  3 out 1 1731  
481 14 Dtool_xqRv9ET8 0 4 483 1727 0 14 Dtool_xqRv9ET8 0 3 4 this 3 1787  3 out 1 1731  12 spaces_every 1 1724  
482 14 Dtool_xqRvFAEP 0 4 483 1727 0 14 Dtool_xqRvFAEP 0 2 4 this 3 1787  3 out 1 1731  
483 14 Dtool_xqRvZH30 0 4 484 1727 0 14 Dtool_xqRvZH30 0 3 4 this 3 1787  3 out 1 1731  12 indent_level 1 1724  
484 14 Dtool_xqRvG1R_ 0 4 484 1727 0 14 Dtool_xqRvG1R_ 0 2 4 this 3 1787  3 out 1 1731  
485 14 Dtool_xqRvHeST 0 6 485 1735 0 14 Dtool_xqRvHeST 0 2 4 this 3 1787  5 other 1 1787  
486 14 Dtool_xqRvHPvK 0 6 486 1735 0 14 Dtool_xqRvHPvK 0 2 4 this 3 1787  5 other 1 1787  
487 14 Dtool_xqRvVunG 0 6 487 1735 0 14 Dtool_xqRvVunG 0 2 4 this 3 1787  5 other 1 1787  
488 14 Dtool_xqRvSDp_ 0 6 488 1724 0 14 Dtool_xqRvSDp_ 0 2 4 this 3 1787  5 other 1 1787  
489 14 Dtool_xqRv2H5_ 0 7 489 1786 1277 14 Dtool_xqRv2H5_ 0 2 4 this 3 1787  5 other 1 1787  
490 14 Dtool_xqRvV_Ja 0 7 490 1786 1277 14 Dtool_xqRvV_Ja 0 2 4 this 3 1787  5 other 1 1787  
491 14 Dtool_xqRv1p_Q 0 7 491 1786 1277 14 Dtool_xqRv1p_Q 0 2 4 this 3 1787  5 other 1 1787  
492 14 Dtool_xqRvYbux 0 7 492 1786 1277 14 Dtool_xqRvYbux 0 1 4 this 3 1787  
493 14 Dtool_xqRvjLeS 0 7 493 1786 1277 14 Dtool_xqRvjLeS 0 2 4 this 3 1787  5 shift 1 1724  
494 14 Dtool_xqRvD4nm 0 7 494 1786 1277 14 Dtool_xqRvD4nm 0 2 4 this 3 1787  5 shift 1 1724  
495 14 Dtool_xqRvywOP 0 6 495 1786 0 14 Dtool_xqRvywOP 0 2 4 this 3 1786  5 other 1 1787  
496 14 Dtool_xqRvSGep 0 6 496 1786 0 14 Dtool_xqRvSGep 0 2 4 this 3 1786  5 other 1 1787  
497 14 Dtool_xqRvySUg 0 6 497 1786 0 14 Dtool_xqRvySUg 0 2 4 this 3 1786  5 other 1 1787  
498 14 Dtool_xqRvDSbd 0 6 498 1786 0 14 Dtool_xqRvDSbd 0 2 4 this 3 1786  5 shift 1 1724  
499 14 Dtool_xqRvjHix 0 6 499 1786 0 14 Dtool_xqRvjHix 0 2 4 this 3 1786  5 shift 1 1724  
500 14 Dtool_xqRvojcd 0 4 500 1727 0 14 Dtool_xqRvojcd 0 1 4 this 3 1786  
501 14 Dtool_xqRvtB6e 0 4 501 1727 0 14 Dtool_xqRvtB6e 0 1 4 this 3 1786  
502 14 Dtool_xqRvoufB 0 7 502 1786 1277 14 Dtool_xqRvoufB 0 1 4 this 3 1787  
503 14 Dtool_xqRv4rCk 0 7 503 1786 1277 14 Dtool_xqRv4rCk 0 1 4 this 3 1787  
504 14 Dtool_xqRvXbfv 0 7 504 1786 1277 14 Dtool_xqRvXbfv 0 1 4 this 3 1787  
505 14 Dtool_xqRvol__ 0 7 504 1786 1277 14 Dtool_xqRvol__ 0 2 4 this 3 1787  5 other 1 1787  
506 14 Dtool_xqRv_Axj 0 7 504 1786 1277 14 Dtool_xqRv_Axj 0 2 4 this 3 1787  5 index 1 1724  
507 14 Dtool_xqRv_rNa 0 7 505 1786 1277 14 Dtool_xqRv_rNa 0 1 4 this 3 1787  
508 14 Dtool_xqRvumm_ 0 7 505 1786 1277 14 Dtool_xqRvumm_ 0 2 4 this 3 1787  5 other 1 1787  
509 14 Dtool_xqRvTV1H 0 7 505 1786 1277 14 Dtool_xqRvTV1H 0 2 4 this 3 1787  5 index 1 1724  
510 14 Dtool_xqRvhnlk 0 6 506 1724 0 14 Dtool_xqRvhnlk 0 1 4 this 3 1787  
511 14 Dtool_xqRvdBOk 0 6 507 1735 0 14 Dtool_xqRvdBOk 0 1 4 this 3 1787  
512 14 Dtool_xqRvOQlp 0 7 508 1737 0 14 Dtool_xqRvOQlp 0 0 
513 14 Dtool_xqRvGMUp 0 7 510 1790 1341 14 Dtool_xqRvGMUp 704 // Filename: bitArray.I
// Created by:  drose (20Jan06)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: BitArray::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
514 14 Dtool_xqRvbrvy 0 7 510 1790 1341 14 Dtool_xqRvbrvy 225 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::Copy Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 1791  
515 14 Dtool_xqRvShJd 0 7 510 1790 1341 14 Dtool_xqRvShJd 239 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::Constructor (from SparseArray)
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 from 1 1793  
516 14 Dtool_xqRvQUAC 0 7 510 1790 1341 14 Dtool_xqRvQUAC 0 1 10 init_value 1 1721  
517 14 Dtool_xqRve8C3 0 6 511 1790 0 14 Dtool_xqRve8C3 233 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::Copy Assignment Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1790  4 copy 1 1791  
518 14 Dtool_xqRvbBX6 0 7 512 1790 1341 14 Dtool_xqRvbBX6 317 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::Named all_on constructor
//       Access: Published, Static
//  Description: Returns a BitArray with an infinite array of bits,
//               all on.
//////////////////////////////////////////////////////////////////// 0 
519 14 Dtool_xqRvGQnq 0 7 513 1790 1341 14 Dtool_xqRvGQnq 284 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::Named all_on constructor
//       Access: Published, Static
//  Description: Returns a BitArray whose bits are all off.
//////////////////////////////////////////////////////////////////// 0 
520 14 Dtool_xqRvK3PH 0 7 514 1790 1341 14 Dtool_xqRvK3PH 295 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::Named lower_on constructor
//       Access: Published, Static
//  Description: Returns a BitArray whose lower on_bits bits are on.
//////////////////////////////////////////////////////////////////// 1 7 on_bits 1 1724  
521 14 Dtool_xqRvX0f2 0 7 515 1790 1341 14 Dtool_xqRvX0f2 289 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::Named bit constructor
//       Access: Published, Static
//  Description: Returns a BitArray with only the indicated bit on.
//////////////////////////////////////////////////////////////////// 1 5 index 1 1724  
522 14 Dtool_xqRvPjFX 0 7 516 1790 1341 14 Dtool_xqRvPjFX 323 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::Named range constructor
//       Access: Published, Static
//  Description: Returns a BitArray whose size bits, beginning at
//               low_bit, are on.
//////////////////////////////////////////////////////////////////// 2 7 low_bit 1 1724  4 size 1 1724  
523 14 Dtool_xqRvDxaB 0 6 518 1735 0 14 Dtool_xqRvDxaB 714 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::has_max_num_bits
//       Access: Published, Static
//  Description: Returns true if there is a maximum number of bits
//               that may be stored in this structure, false
//               otherwise.  If this returns true, the number may be
//               queried in get_max_num_bits().
//
//               This method always returns false.  The BitArray has
//               no maximum number of bits.  This method is defined so
//               generic programming algorithms can use BitMask or
//               BitArray interchangeably.
//////////////////////////////////////////////////////////////////// 0 
524 14 Dtool_xqRv_yNZ 0 6 519 1724 0 14 Dtool_xqRv_yNZ 749 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::get_max_num_bits
//       Access: Published, Static
//  Description: If get_max_num_bits() returned true, this method may
//               be called to return the maximum number of bits that
//               may be stored in this structure.  It is an error to
//               call this if get_max_num_bits() return false.
//
//               It is always an error to call this method.  The
//               BitArray has no maximum number of bits.  This method
//               is defined so generic programming algorithms can use
//               BitMask or BitArray interchangeably.
//////////////////////////////////////////////////////////////////// 0 
525 14 Dtool_xqRvSGW6 0 6 520 1724 0 14 Dtool_xqRvSGW6 476 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::get_num_bits_per_word
//       Access: Published, Static
//  Description: Returns the number of bits stored per word
//               internally.  This is of interest only in that it
//               limits the maximum number of bits that may be queried
//               or set at once by extract() and store().
//////////////////////////////////////////////////////////////////// 0 
526 14 Dtool_xqRvlwdi 0 6 521 1724 0 14 Dtool_xqRvlwdi 604 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::get_num_bits
//       Access: Published
//  Description: Returns the current number of possibly different bits
//               in this array.  There are actually an infinite number
//               of bits, but every bit higher than this bit will have
//               the same value, either 0 or 1 (see
//               get_highest_bits()).
//
//               This number may grow and/or shrink automatically as
//               needed.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1791  
527 14 Dtool_xqRvLvz8 0 6 522 1735 0 14 Dtool_xqRvLvz8 442 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::get_bit
//       Access: Published
//  Description: Returns true if the nth bit is set, false if it is
//               cleared.  It is valid for n to increase beyond
//               get_num_bits(), but the return value get_num_bits()
//               will always be the same.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1791  5 index 1 1724  
528 14 Dtool_xqRvrNRV 0 4 523 1727 0 14 Dtool_xqRvrNRV 317 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::set_bit
//       Access: Published
//  Description: Sets the nth bit on.  If n >= get_num_bits(), this
//               automatically extends the array.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1790  5 index 1 1724  
529 14 Dtool_xqRv541k 0 4 524 1727 0 14 Dtool_xqRv541k 320 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::clear_bit
//       Access: Published
//  Description: Sets the nth bit off.  If n >= get_num_bits(), this
//               automatically extends the array.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1790  5 index 1 1724  
530 14 Dtool_xqRvQgnd 0 4 525 1727 0 14 Dtool_xqRvQgnd 310 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::set_bit_to
//       Access: Published
//  Description: Sets the nth bit either on or off, according to the
//               indicated bool value.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1790  5 index 1 1724  5 value 1 1735  
531 14 Dtool_xqRvHjU1 0 6 526 1735 0 14 Dtool_xqRvHjU1 364 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::get_highest_bits
//       Access: Published
//  Description: Returns true if the infinite set of bits beyond
//               get_num_bits() are all on, or false of they are all
//               off.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1791  
532 14 Dtool_xqRvT0xX 0 6 527 1735 0 14 Dtool_xqRvT0xX 294 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::is_zero
//       Access: Published
//  Description: Returns true if the entire bitmask is zero, false
//               otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1791  
533 14 Dtool_xqRvr4Sd 0 6 528 1735 0 14 Dtool_xqRvr4Sd 295 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::is_all_on
//       Access: Published
//  Description: Returns true if the entire bitmask is one, false
//               otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1791  
534 14 Dtool_xqRvPS63 0 6 529 1721 0 14 Dtool_xqRvPS63 438 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::extract
//       Access: Published
//  Description: Returns a word that represents only the indicated
//               range of bits within this BitArray, shifted to the
//               least-significant position.  size must be <=
//               get_num_bits_per_word().
//////////////////////////////////////////////////////////////////// 3 4 this 3 1791  7 low_bit 1 1724  4 size 1 1724  
535 14 Dtool_xqRvAQuf 0 4 530 1727 0 14 Dtool_xqRvAQuf 310 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::store
//       Access: Published
//  Description: Stores the indicated word into the indicated range of
//               bits with this BitArray.
//////////////////////////////////////////////////////////////////// 4 4 this 3 1790  5 value 1 1721  7 low_bit 1 1724  4 size 1 1724  
536 14 Dtool_xqRvBUJy 0 6 531 1735 0 14 Dtool_xqRvBUJy 308 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::has_any_of
//       Access: Published
//  Description: Returns true if any bit in the indicated range is
//               set, false otherwise.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1791  7 low_bit 1 1724  4 size 1 1724  
537 14 Dtool_xqRvybWy 0 6 532 1735 0 14 Dtool_xqRvybWy 310 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::has_all_of
//       Access: Published
//  Description: Returns true if all bits in the indicated range are
//               set, false otherwise.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1791  7 low_bit 1 1724  4 size 1 1724  
538 14 Dtool_xqRvv8Tr 0 4 533 1727 0 14 Dtool_xqRvv8Tr 255 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::set_range
//       Access: Published
//  Description: Sets the indicated range of bits on.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1790  7 low_bit 1 1724  4 size 1 1724  
539 14 Dtool_xqRvfuvM 0 4 534 1727 0 14 Dtool_xqRvfuvM 258 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::clear_range
//       Access: Published
//  Description: Sets the indicated range of bits off.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1790  7 low_bit 1 1724  4 size 1 1724  
540 14 Dtool_xqRvAEMB 0 4 535 1727 0 14 Dtool_xqRvAEMB 275 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::set_range_to
//       Access: Published
//  Description: Sets the indicated range of bits to either on or off.
//////////////////////////////////////////////////////////////////// 4 4 this 3 1790  5 value 1 1735  7 low_bit 1 1724  4 size 1 1724  
541 14 Dtool_xqRvO1Ve 0 6 536 1724 0 14 Dtool_xqRvO1Ve 372 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::get_num_on_bits
//       Access: Published
//  Description: Returns the number of bits that are set to 1 in the
//               array.  Returns -1 if there are an infinite number of
//               1 bits.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1791  
542 14 Dtool_xqRvsqGY 0 6 537 1724 0 14 Dtool_xqRvsqGY 373 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::get_num_off_bits
//       Access: Published
//  Description: Returns the number of bits that are set to 0 in the
//               array.  Returns -1 if there are an infinite number of
//               0 bits.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1791  
543 14 Dtool_xqRvbpfv 0 6 538 1724 0 14 Dtool_xqRvbpfv 330 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::get_lowest_on_bit
//       Access: Published
//  Description: Returns the index of the lowest 1 bit in the array.
//               Returns -1 if there are no 1 bits.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1791  
544 14 Dtool_xqRviKFY 0 6 539 1724 0 14 Dtool_xqRviKFY 331 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::get_lowest_off_bit
//       Access: Published
//  Description: Returns the index of the lowest 0 bit in the array.
//               Returns -1 if there are no 0 bits.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1791  
545 14 Dtool_xqRvstzx 0 6 540 1724 0 14 Dtool_xqRvstzx 390 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::get_highest_on_bit
//       Access: Published
//  Description: Returns the index of the highest 1 bit in the array.
//               Returns -1 if there are no 1 bits or if there an
//               infinite number of 1 bits.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1791  
546 14 Dtool_xqRvEmCF 0 6 541 1724 0 14 Dtool_xqRvEmCF 391 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::get_highest_off_bit
//       Access: Published
//  Description: Returns the index of the highest 0 bit in the array.
//               Returns -1 if there are no 0 bits or if there an
//               infinite number of 1 bits.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1791  
547 14 Dtool_xqRv_eW1 0 6 542 1724 0 14 Dtool_xqRv_eW1 591 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::get_next_higher_different_bit
//       Access: Published
//  Description: Returns the index of the next bit in the array, above
//               low_bit, whose value is different that the value of
//               low_bit.  Returns low_bit again if all bits higher
//               than low_bit have the same value.
//
//               This can be used to quickly iterate through all of
//               the bits in the array.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1791  7 low_bit 1 1724  
548 14 Dtool_xqRvVjn8 0 6 543 1724 0 14 Dtool_xqRvVjn8 304 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::get_num_words
//       Access: Published
//  Description: Returns the number of possibly-unique words stored in
//               the array.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1791  
549 14 Dtool_xqRv85dk 0 7 544 1783 1213 14 Dtool_xqRv85dk 410 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::get_word
//       Access: Published
//  Description: Returns the nth word in the array.  It is valid for n
//               to be greater than get_num_words(), but the return
//               value beyond get_num_words() will always be the same.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1791  1 n 1 1724  
550 14 Dtool_xqRvPLIH 0 4 545 1727 0 14 Dtool_xqRvPLIH 351 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::set_word
//       Access: Published
//  Description: Replaces the nth word in the array.  If n >=
//               get_num_words(), this automatically extends the
//               array.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1790  1 n 1 1724  5 value 1 1783  
551 14 Dtool_xqRvhGZ4 0 4 546 1727 0 14 Dtool_xqRvhGZ4 318 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::invert_in_place
//       Access: Published
//  Description: Inverts all the bits in the BitArray.  This is
//               equivalent to array = ~array.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1790  
552 14 Dtool_xqRvseqE 0 6 547 1735 0 14 Dtool_xqRvseqE 440 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::has_bits_in_common
//       Access: Published
//  Description: Returns true if this BitArray has any "one" bits in
//               common with the other one, false otherwise.
//
//               This is equivalent to (array & other) != 0, but may
//               be faster.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1791  5 other 1 1791  
553 14 Dtool_xqRvKXAk 0 4 548 1727 0 14 Dtool_xqRvKXAk 253 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::clear
//       Access: Published
//  Description: Sets all the bits in the BitArray off.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1790  
554 14 Dtool_xqRvgv5a 0 4 549 1727 0 14 Dtool_xqRvgv5a 443 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::output
//       Access: Published
//  Description: Writes the BitArray out as a hex number.  For a
//               BitArray, this is always the same as output_hex();
//               it's too confusing for the output format to change
//               back and forth at runtime.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1791  3 out 1 1731  
555 14 Dtool_xqRvk9tp 0 4 550 1727 0 14 Dtool_xqRvk9tp 312 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::output_binary
//       Access: Published
//  Description: Writes the BitArray out as a binary number, with
//               spaces every four bits.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1791  3 out 1 1731  12 spaces_every 1 1724  
556 14 Dtool_xqRvLRPz 0 4 550 1727 0 14 Dtool_xqRvLRPz 312 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::output_binary
//       Access: Published
//  Description: Writes the BitArray out as a binary number, with
//               spaces every four bits.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1791  3 out 1 1731  
557 14 Dtool_xqRvMpy4 0 4 551 1727 0 14 Dtool_xqRvMpy4 316 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::output_hex
//       Access: Published
//  Description: Writes the BitArray out as a hexadecimal number, with
//               spaces every four digits.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1791  3 out 1 1731  12 spaces_every 1 1724  
558 14 Dtool_xqRvxwaB 0 4 551 1727 0 14 Dtool_xqRvxwaB 316 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::output_hex
//       Access: Published
//  Description: Writes the BitArray out as a hexadecimal number, with
//               spaces every four digits.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1791  3 out 1 1731  
559 14 Dtool_xqRvWflc 0 4 552 1727 0 14 Dtool_xqRvWflc 317 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::write
//       Access: Published
//  Description: Writes the BitArray out as a binary or a hex number,
//               according to the number of bits.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1791  3 out 1 1731  12 indent_level 1 1724  
560 14 Dtool_xqRvVe5g 0 4 552 1727 0 14 Dtool_xqRvVe5g 317 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::write
//       Access: Published
//  Description: Writes the BitArray out as a binary or a hex number,
//               according to the number of bits.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1791  3 out 1 1731  
561 14 Dtool_xqRv5zlA 0 6 553 1735 0 14 Dtool_xqRv5zlA 220 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::operator ==
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1791  5 other 1 1791  
562 14 Dtool_xqRvbpSA 0 6 554 1735 0 14 Dtool_xqRvbpSA 220 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::operator !=
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1791  5 other 1 1791  
563 14 Dtool_xqRvbO7u 0 6 555 1735 0 14 Dtool_xqRvbO7u 381 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::operator <
//       Access: Published
//  Description: Returns true if the unsigned integer which is
//               represented by this BitArray is less than that of the
//               other one, false otherwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1791  5 other 1 1791  
564 14 Dtool_xqRvzJr4 0 6 556 1724 0 14 Dtool_xqRvzJr4 487 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::compare_to
//       Access: Published
//  Description: Returns a number less than zero if this BitArray sorts
//               before the indicated other BitArray, greater than zero
//               if it sorts after, or 0 if they are equivalent.  This
//               is based on the same ordering defined by operator <.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1791  5 other 1 1791  
565 14 Dtool_xqRvoqtu 0 7 557 1790 1341 14 Dtool_xqRvoqtu 219 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::operator &
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1791  5 other 1 1791  
566 14 Dtool_xqRv7Jiv 0 7 558 1790 1341 14 Dtool_xqRv7Jiv 219 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::operator |
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1791  5 other 1 1791  
567 14 Dtool_xqRvk9Pv 0 7 559 1790 1341 14 Dtool_xqRvk9Pv 219 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::operator ^
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1791  5 other 1 1791  
568 14 Dtool_xqRvD0gS 0 7 560 1790 1341 14 Dtool_xqRvD0gS 219 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::operator ~
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 1791  
569 14 Dtool_xqRvphhp 0 7 561 1790 1341 14 Dtool_xqRvphhp 220 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::operator <<
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1791  5 shift 1 1724  
570 14 Dtool_xqRvwzJq 0 7 562 1790 1341 14 Dtool_xqRvwzJq 220 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::operator >>
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1791  5 shift 1 1724  
571 14 Dtool_xqRvvQVj 0 6 563 1790 0 14 Dtool_xqRvvQVj 220 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::operator &=
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1790  5 other 1 1791  
572 14 Dtool_xqRv6_Jk 0 6 564 1790 0 14 Dtool_xqRv6_Jk 220 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::operator |=
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1790  5 other 1 1791  
573 14 Dtool_xqRvjr3j 0 6 565 1790 0 14 Dtool_xqRvjr3j 220 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::operator ^=
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1790  5 other 1 1791  
574 14 Dtool_xqRv9z5r 0 6 566 1790 0 14 Dtool_xqRv9z5r 399 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::operator <<=
//       Access: Published
//  Description: Logical left shift.  The rightmost bits are filled in
//               with zeroes.  Since this is an infinite bit array,
//               none of the bits on the left are lost.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1790  5 shift 1 1724  
575 14 Dtool_xqRvUhhs 0 6 567 1790 0 14 Dtool_xqRvUhhs 449 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::operator >>=
//       Access: Published
//  Description: Logical right shift.  The rightmost bits are lost.
//               Since this is an infinite bit array, there is no
//               question of sign extension; there is no need to
//               synthesize bits on the left.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1790  5 shift 1 1724  
576 14 Dtool_xqRv1IRw 0 7 568 1737 0 14 Dtool_xqRv1IRw 0 0 
577 14 Dtool_xqRv40bO 0 7 570 1795 1403 14 Dtool_xqRv40bO 1027 // Filename: buttonHandle.I
// Created by:  drose (01Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: ButtonHandle::Constructor
//       Access: Published
//  Description: The default constructor must do nothing, because we
//               can't guarantee ordering of static initializers.  If
//               the constructor tried to initialize its value, it
//               might happen after the value had already been set
//               previously by another static initializer!
//////////////////////////////////////////////////////////////////// 0 
578 14 Dtool_xqRvm6Sg 0 7 570 1795 1403 14 Dtool_xqRvm6Sg 644 ////////////////////////////////////////////////////////////////////
//     Function: ButtonHandle::Constructor
//       Access: Published
//  Description: Constructs a ButtonHandle with the corresponding
//               name, which is looked up in the ButtonRegistry.
//               This exists for the purpose of being able to
//               automatically coerce a string into a ButtonHandle;
//               for most purposes, you should use either the static
//               KeyboardButton/MouseButton getters or
//               ButtonRegistry::register_button().
//////////////////////////////////////////////////////////////////// 1 4 name 1 1723  
579 14 Dtool_xqRv53AF 0 7 570 1795 1403 14 Dtool_xqRv53AF 399 ////////////////////////////////////////////////////////////////////
//     Function: ButtonHandle::Constructor
//       Access: Published
//  Description: Constructs a ButtonHandle with the corresponding
//               index number, which may have been returned by an
//               earlier call to ButtonHandle::get_index().
//////////////////////////////////////////////////////////////////// 1 5 index 1 1724  
580 14 Dtool_xqRvoq06 0 6 571 1723 0 14 Dtool_xqRvoq06 250 ////////////////////////////////////////////////////////////////////
//     Function: ButtonHandle::get_name
//       Access: Public
//  Description: Returns the name of the button.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1796  
581 14 Dtool_xqRv2_MD 0 6 572 1735 0 14 Dtool_xqRv2_MD 375 ////////////////////////////////////////////////////////////////////
//     Function: ButtonHandle::has_ascii_equivalent
//       Access: Published
//  Description: Returns true if the button was created with an ASCII
//               equivalent code (e.g. for a standard keyboard
//               button).
//////////////////////////////////////////////////////////////////// 1 4 this 3 1796  
582 14 Dtool_xqRvvhsY 0 6 573 1798 0 14 Dtool_xqRvvhsY 346 ////////////////////////////////////////////////////////////////////
//     Function: ButtonHandle::get_ascii_equivalent
//       Access: Published
//  Description: Returns the character code associated with the
//               button, or '\0' if no ASCII code was associated.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1796  
583 14 Dtool_xqRvTr0x 0 7 574 1795 1403 14 Dtool_xqRvTr0x 692 ////////////////////////////////////////////////////////////////////
//     Function: ButtonHandle::get_alias
//       Access: Published
//  Description: Returns the alias (alternate name) associated with
//               the button, if any, or ButtonHandle::none() if the
//               button has no alias.
//
//               Each button is allowed to have one alias, and
//               multiple different buttons can refer to the same
//               alias.  The alias should be the more general name for
//               the button, for instance, shift is an alias for
//               lshift, but not vice-versa.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1796  
584 14 Dtool_xqRvpu5Z 0 6 575 1735 0 14 Dtool_xqRvpu5Z 532 ////////////////////////////////////////////////////////////////////
//     Function: ButtonHandle::matches
//       Access: Published
//  Description: Returns true if this ButtonHandle is the same as the
//               other one, or if the other one is an alias for this
//               one.  (Does not return true if this button is an
//               alias for the other one, however.)
//
//               This is a more general comparison than operator ==.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1796  5 other 1 1796  
585 14 Dtool_xqRviajp 0 6 576 1724 0 14 Dtool_xqRviajp 664 ////////////////////////////////////////////////////////////////////
//     Function: ButtonHandle::get_index
//       Access: Published
//  Description: Returns the integer index associated with this
//               ButtonHandle. Each different ButtonHandle will have a
//               different index.  However, you probably shouldn't be
//               using this method; you should just treat the
//               ButtonHandles as opaque classes.  This is provided
//               for the convenience of non-C++ scripting languages to
//               build a hashtable of ButtonHandles.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1796  
586 14 Dtool_xqRv6vL2 0 4 577 1727 0 14 Dtool_xqRv6vL2 220 ////////////////////////////////////////////////////////////////////
//     Function: ButtonHandle::output
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 1796  3 out 1 1731  
587 14 Dtool_xqRvXMlV 0 7 578 1795 1403 14 Dtool_xqRvXMlV 321 ////////////////////////////////////////////////////////////////////
//     Function: ButtonHandle::none
//       Access: Published, Static
//  Description: Returns a special zero-valued ButtonHandle that is
//               used to indicate no button.
//////////////////////////////////////////////////////////////////// 0 
588 14 Dtool_xqRvmThD 0 7 579 1737 0 14 Dtool_xqRvmThD 0 0 
589 14 Dtool_xqRvKZsi 0 7 582 1795 1403 14 Dtool_xqRvKZsi 396 ////////////////////////////////////////////////////////////////////
//     Function: ButtonRegistry::get_button
//       Access: Published
//  Description: Finds a ButtonHandle in the registry matching the
//               indicated name.  If there is no such ButtonHandle,
//               registers a new one and returns it.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1799  4 name 1 1723  
590 14 Dtool_xqRvA9gR 0 7 583 1795 1403 14 Dtool_xqRvA9gR 391 ////////////////////////////////////////////////////////////////////
//     Function: ButtonRegistry::find_button
//       Access: Published
//  Description: Finds a ButtonHandle in the registry matching the
//               indicated name.  If there is no such ButtonHandle,
//               returns ButtonHandle::none().
//////////////////////////////////////////////////////////////////// 2 4 this 3 1799  4 name 1 1723  
591 14 Dtool_xqRvuc8u 0 7 584 1795 1403 14 Dtool_xqRvuc8u 419 ////////////////////////////////////////////////////////////////////
//     Function: ButtonRegistry::find_ascii_button
//       Access: Published
//  Description: Finds a ButtonHandle in the registry matching the
//               indicated ASCII equivalent character.  If there is no
//               such ButtonHandle, returns ButtonHandle::none().
//////////////////////////////////////////////////////////////////// 2 4 this 3 1800  16 ascii_equivalent 1 1798  
592 14 Dtool_xqRv_iXj 0 4 585 1727 0 14 Dtool_xqRv_iXj 220 ////////////////////////////////////////////////////////////////////
//     Function: ButtonRegistry::write
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1800  3 out 1 1731  
593 14 Dtool_xqRvdgyc 0 6 586 1799 0 14 Dtool_xqRvdgyc 300 ////////////////////////////////////////////////////////////////////
//     Function: ButtonRegistry::ptr
//       Access: Published, Static
//  Description: Returns the pointer to the global ButtonRegistry
//               object.
//////////////////////////////////////////////////////////////////// 0 
594 14 Dtool_xqRvUCRq 0 6 590 1724 0 14 Dtool_xqRvUCRq 791 // Filename: buttonMap.I
// Created by:  rdb (09Mar14)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: ButtonMap::get_num_buttons
//       Access: Published
//  Description: Returns the number of buttons that this button
//               mapping specifies.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1802  
595 14 Dtool_xqRvhvFE 0 7 591 1795 1403 14 Dtool_xqRvhvFE 307 ////////////////////////////////////////////////////////////////////
//     Function: ButtonMap::get_raw_button
//       Access: Published
//  Description: Returns the underlying raw button associated with
//               the nth button.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1802  1 i 1 1724  
596 14 Dtool_xqRvKnoL 0 7 592 1795 1403 14 Dtool_xqRvKnoL 411 ////////////////////////////////////////////////////////////////////
//     Function: ButtonMap::get_mapped_button
//       Access: Published
//  Description: Returns the button that the given button is mapped
//               to, or ButtonHandle::none() if this map does not
//               specify a mapped button for the given raw button.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1802  3 raw 1 1795  
597 14 Dtool_xqRvncbV 0 7 592 1795 1403 14 Dtool_xqRvncbV 411 ////////////////////////////////////////////////////////////////////
//     Function: ButtonMap::get_mapped_button
//       Access: Published
//  Description: Returns the button that the given button is mapped
//               to, or ButtonHandle::none() if this map does not
//               specify a mapped button for the given raw button.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1802  8 raw_name 1 1723  
598 14 Dtool_xqRvNs12 0 7 592 1795 1403 14 Dtool_xqRvNs12 332 ////////////////////////////////////////////////////////////////////
//     Function: ButtonMap::get_mapped_button
//       Access: Published
//  Description: Returns the nth mapped button, meaning the button
//               that the nth raw button is mapped to.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1802  1 i 1 1724  
599 14 Dtool_xqRv00i3 0 6 593 1723 0 14 Dtool_xqRv00i3 664 ////////////////////////////////////////////////////////////////////
//     Function: ButtoMap::get_mapped_button_label
//       Access: Published
//  Description: If the button map specifies a special name for the
//               button (eg. if the operating system or keyboard
//               device has a localized name describing the key),
//               returns it, or the empty string otherwise.
//
//               Note that this is not the same as
//               get_mapped_button().get_name(), which returns the
//               name of the Panda event associated with the button.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1802  3 raw 1 1795  
600 14 Dtool_xqRvTlqq 0 6 593 1723 0 14 Dtool_xqRvTlqq 664 ////////////////////////////////////////////////////////////////////
//     Function: ButtoMap::get_mapped_button_label
//       Access: Published
//  Description: If the button map specifies a special name for the
//               button (eg. if the operating system or keyboard
//               device has a localized name describing the key),
//               returns it, or the empty string otherwise.
//
//               Note that this is not the same as
//               get_mapped_button().get_name(), which returns the
//               name of the Panda event associated with the button.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1802  8 raw_name 1 1723  
601 14 Dtool_xqRvT2RA 0 6 593 1723 0 14 Dtool_xqRvT2RA 381 ////////////////////////////////////////////////////////////////////
//     Function: ButtonMap::get_mapped_button_label
//       Access: Published
//  Description: Returns the label associated with the nth mapped
//               button, meaning the button that the nth raw
//               button is mapped to.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1802  1 i 1 1724  
602 14 Dtool_xqRv2oxA 0 4 594 1727 0 14 Dtool_xqRv2oxA 217 ////////////////////////////////////////////////////////////////////
//     Function: ButtonMap::output
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 1802  3 out 1 1731  
603 14 Dtool_xqRvxe33 0 4 595 1727 0 14 Dtool_xqRvxe33 216 ////////////////////////////////////////////////////////////////////
//     Function: ButtonMap::write
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 3 4 this 3 1802  3 out 1 1731  12 indent_level 1 1724  
604 14 Dtool_xqRv6vRB 0 4 595 1727 0 14 Dtool_xqRv6vRB 216 ////////////////////////////////////////////////////////////////////
//     Function: ButtonMap::write
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 1802  3 out 1 1731  
605 14 Dtool_xqRvatks 0 7 596 1737 0 14 Dtool_xqRvatks 0 0 
606 14 Dtool_xqRvNGJJ 0 4 599 1727 0 14 Dtool_xqRvNGJJ 230 ////////////////////////////////////////////////////////////////////
//     Function: CallbackObject::output
//       Access: Published, Virtual
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1804  3 out 1 1731  
607 14 Dtool_xqRvtUug 0 7 600 1737 0 14 Dtool_xqRvtUug 0 0 
608 14 Dtool_xqRv3cWf 0 6 603 1724 0 14 Dtool_xqRv3cWf 290 ////////////////////////////////////////////////////////////////////
//     Function: CachedTypedWritableReferenceCount::get_cache_ref_count
//       Access: Published
//  Description: Returns the current reference count.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1806  
609 14 Dtool_xqRvEGtE 0 4 604 1727 0 14 Dtool_xqRvEGtE 355 ////////////////////////////////////////////////////////////////////
//     Function: CachedTypedWritableReferenceCount::cache_ref
//       Access: Published
//  Description: Explicitly increments the cache reference count and
//               the normal reference count simultaneously.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1806  
610 14 Dtool_xqRvC2Hz 0 6 605 1735 0 14 Dtool_xqRvC2Hz 479 ////////////////////////////////////////////////////////////////////
//     Function: CachedTypedWritableReferenceCount::cache_unref
//       Access: Published
//  Description: Explicitly decrements the cache reference count and
//               the normal reference count simultaneously.
//
//               The return value is true if the new reference count
//               is nonzero, false if it is zero.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1806  
611 14 Dtool_xqRvbkjU 0 6 606 1735 0 14 Dtool_xqRvbkjU 359 ////////////////////////////////////////////////////////////////////
//     Function: CachedTypedWritableReferenceCount::test_ref_count_integrity
//       Access: Published
//  Description: Does some easy checks to make sure that the reference
//               count isn't completely bogus.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1806  
612 14 Dtool_xqRvXAeA 0 7 607 1737 0 14 Dtool_xqRvXAeA 0 0 
613 14 Dtool_xqRvykHH 0 4 609 1727 0 14 Dtool_xqRvykHH 228 ////////////////////////////////////////////////////////////////////
//     Function: CallbackData::output
//       Access: Published, Virtual
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1808  3 out 1 1731  
614 14 Dtool_xqRvJxUp 0 4 610 1727 0 14 Dtool_xqRvJxUp 408 ////////////////////////////////////////////////////////////////////
//     Function: CallbackData::upcall
//       Access: Published, Virtual
//  Description: You should make this call during the callback if you
//               want to continue the normal function that would have
//               been done in the absence of a callback.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1810  
615 14 Dtool_xqRvfdeU 0 7 611 1737 0 14 Dtool_xqRvfdeU 0 0 
616 14 Dtool_xqRvZzSC 0 7 614 1811 1433 14 Dtool_xqRvZzSC 218 ////////////////////////////////////////////////////////////////////
//     Function: TimeVal::contructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
617 14 Dtool_xqRv2ZxR 0 6 615 1814 0 14 Dtool_xqRv2ZxR 215 ////////////////////////////////////////////////////////////////////
//     Function: TimeVal::get_sec
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 1812  
618 14 Dtool_xqRvalc7 0 6 616 1814 0 14 Dtool_xqRvalc7 216 ////////////////////////////////////////////////////////////////////
//     Function: TimeVal::get_usec
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 1812  
619 14 Dtool_xqRvwP2R 0 7 621 1815 0 14 Dtool_xqRvwP2R 223 ////////////////////////////////////////////////////////////////////
//     Function: ClockObject::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
620 14 Dtool_xqRvDhry 0 7 621 1815 0 14 Dtool_xqRvDhry 229 ////////////////////////////////////////////////////////////////////
//     Function: ClockObject::Copy Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 copy 1 1816  
621 14 Dtool_xqRvsf6_ 0 4 622 1727 0 14 Dtool_xqRvsf6_ 2596 ////////////////////////////////////////////////////////////////////
//     Function: ClockObject::set_mode
//       Access: Published
//  Description: Changes the mode of the clock.  Normally, the clock
//               is in mode M_normal. In this mode, each call to
//               tick() will set the value returned by
//               get_frame_time() to the current real time; thus, the
//               clock simply reports time advancing.
//
//               Other possible modes:
//
//               M_non_real_time - the clock ignores real time
//               completely; at each call to tick(), it pretends that
//               exactly dt seconds have elapsed since the last call
//               to tick().  You may set the value of dt with
//               set_dt() or set_frame_rate().
//
//               M_limited - the clock will run as fast as it can, as
//               in M_normal, but will not run faster than the rate
//               specified by set_frame_rate().  If the application
//               would run faster than this rate, the clock will slow
//               down the application.
//
//               M_integer - the clock will run as fast as it can, but
//               the rate will be constrained to be an integer
//               multiple or divisor of the rate specified by
//               set_frame_rate().  The clock will slow down the
//               application a bit to guarantee this.
//
//               M_integer_limited - a combination of M_limited and
//               M_integer; the clock will not run faster than
//               set_frame_rate(), and if it runs slower, it will run
//               at a integer divisor of that rate.
//
//               M_forced - the clock forces the application to run at
//               the rate specified by set_frame_rate().  If the
//               application would run faster than this rate, the
//               clock will slow down the application; if the
//               application would run slower than this rate, the
//               clock slows down time so that the application
//               believes it is running at the given rate.
//
//               M_degrade - the clock runs at real time, but the
//               application is slowed down by a set factor of its
//               frame rate, specified by set_degrade_factor().
//
//               M_slave - the clock does not advance, but relies on
//               the user to call set_frame_time() and/or
//               set_frame_count() each frame.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1815  4 mode 1 1698  
622 14 Dtool_xqRvC0lD 0 6 623 1698 0 14 Dtool_xqRvC0lD 293 ////////////////////////////////////////////////////////////////////
//     Function: ClockObject::get_mode
//       Access: Published
//  Description: Returns the current mode of the clock.  See
//               set_mode().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1816  
623 14 Dtool_xqRvIvyW 0 6 624 1743 0 14 Dtool_xqRvIvyW 656 ////////////////////////////////////////////////////////////////////
//     Function: ClockObject::get_frame_time
//       Access: Published
//  Description: Returns the time in seconds as of the last time
//               tick() was called (typically, this will be as of the
//               start of the current frame).
//
//               This is generally the kind of time you want to ask
//               for in most rendering and animation contexts, since
//               it's important that all of the animation for a given
//               frame remains in sync with each other.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1816  14 current_thread 1 1818  
624 14 Dtool_xqRvQ13s 0 6 624 1743 0 14 Dtool_xqRvQ13s 656 ////////////////////////////////////////////////////////////////////
//     Function: ClockObject::get_frame_time
//       Access: Published
//  Description: Returns the time in seconds as of the last time
//               tick() was called (typically, this will be as of the
//               start of the current frame).
//
//               This is generally the kind of time you want to ask
//               for in most rendering and animation contexts, since
//               it's important that all of the animation for a given
//               frame remains in sync with each other.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1816  
625 14 Dtool_xqRv94v7 0 6 625 1743 0 14 Dtool_xqRv94v7 769 ////////////////////////////////////////////////////////////////////
//     Function: ClockObject::get_real_time
//       Access: Published
//  Description: Returns the actual number of seconds elapsed since
//               the ClockObject was created, or since it was last
//               reset.  This is useful for doing real timing
//               measurements, e.g. for performance statistics.
//
//               This returns the most precise timer we have for short
//               time intervals, but it may tend to drift over the
//               long haul.  If more accurate timekeeping is needed
//               over a long period of time, use get_long_time()
//               instead.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1816  
626 14 Dtool_xqRv8RD3 0 6 626 1743 0 14 Dtool_xqRv8RD3 773 ////////////////////////////////////////////////////////////////////
//     Function: ClockObject::get_long_time
//       Access: Published
//  Description: Returns the actual number of seconds elapsed since
//               the ClockObject was created, or since it was last
//               reset.
//
//               This is similar to get_real_time(), except that it
//               uses the most accurate counter we have over a long
//               period of time, and so it is less likely to drift.
//               However, it may not be very precise for measuring
//               short intervals.  On Windows, for instace, this is
//               only accurate to within about 55 milliseconds.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1816  
627 14 Dtool_xqRvVWd9 0 4 627 1727 0 14 Dtool_xqRvVWd9 299 ////////////////////////////////////////////////////////////////////
//     Function: ClockObject::reset
//       Access: Published
//  Description: Simultaneously resets both the time and the frame
//               count to zero.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1815  
628 14 Dtool_xqRvx4ev 0 4 628 1727 0 14 Dtool_xqRvx4ev 607 ////////////////////////////////////////////////////////////////////
//     Function: ClockObject::set_real_time
//       Access: Published
//  Description: Resets the clock to the indicated time.  This
//               changes only the real time of the clock as reported
//               by get_real_time(), but does not immediately change
//               the time reported by get_frame_time()--that will
//               change after the next call to tick().  Also see
//               reset(), set_frame_time(), and set_frame_count().
//////////////////////////////////////////////////////////////////// 2 4 this 3 1815  4 time 1 1743  
629 14 Dtool_xqRvJ8vm 0 4 629 1727 0 14 Dtool_xqRvJ8vm 477 ////////////////////////////////////////////////////////////////////
//     Function: ClockObject::set_frame_time
//       Access: Published
//  Description: Changes the time as reported for the current frame to
//               the indicated time.  Normally, the way to adjust the
//               frame time is via tick(); this function is provided
//               only for occasional special adjustments.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1815  4 time 1 1743  14 current_thread 1 1818  
630 14 Dtool_xqRv2d9O 0 4 629 1727 0 14 Dtool_xqRv2d9O 477 ////////////////////////////////////////////////////////////////////
//     Function: ClockObject::set_frame_time
//       Access: Published
//  Description: Changes the time as reported for the current frame to
//               the indicated time.  Normally, the way to adjust the
//               frame time is via tick(); this function is provided
//               only for occasional special adjustments.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1815  4 time 1 1743  
631 14 Dtool_xqRvT6Z9 0 4 630 1727 0 14 Dtool_xqRvT6Z9 380 ////////////////////////////////////////////////////////////////////
//     Function: ClockObject::set_frame_count
//       Access: Published
//  Description: Resets the number of frames counted to the indicated
//               number.  Also see reset(), set_real_time(), and
//               set_frame_time().
//////////////////////////////////////////////////////////////////// 3 4 this 3 1815  11 frame_count 1 1724  14 current_thread 1 1818  
632 14 Dtool_xqRvc2uN 0 4 630 1727 0 14 Dtool_xqRvc2uN 380 ////////////////////////////////////////////////////////////////////
//     Function: ClockObject::set_frame_count
//       Access: Published
//  Description: Resets the number of frames counted to the indicated
//               number.  Also see reset(), set_real_time(), and
//               set_frame_time().
//////////////////////////////////////////////////////////////////// 2 4 this 3 1815  11 frame_count 1 1724  
633 14 Dtool_xqRv7u4X 0 6 631 1724 0 14 Dtool_xqRv7u4X 457 ////////////////////////////////////////////////////////////////////
//     Function: ClockObject::get_frame_count
//       Access: Published
//  Description: Returns the number of times tick() has been called
//               since the ClockObject was created, or since it was
//               last reset.  This is generally the number of frames
//               that have been rendered.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1816  14 current_thread 1 1818  
634 14 Dtool_xqRvmz0Y 0 6 631 1724 0 14 Dtool_xqRvmz0Y 457 ////////////////////////////////////////////////////////////////////
//     Function: ClockObject::get_frame_count
//       Access: Published
//  Description: Returns the number of times tick() has been called
//               since the ClockObject was created, or since it was
//               last reset.  This is generally the number of frames
//               that have been rendered.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1816  
635 14 Dtool_xqRvhgnR 0 6 632 1743 0 14 Dtool_xqRvhgnR 523 ////////////////////////////////////////////////////////////////////
//     Function: ClockObject::get_net_frame_rate
//       Access: Published
//  Description: Returns the average frame rate since the last reset.
//               This is simply the total number of frames divided by
//               the total elapsed time.  This reports the virtual
//               frame rate if the clock is in (or has been in)
//               M_non_real_time mode.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1816  14 current_thread 1 1818  
636 14 Dtool_xqRviXAn 0 6 632 1743 0 14 Dtool_xqRviXAn 523 ////////////////////////////////////////////////////////////////////
//     Function: ClockObject::get_net_frame_rate
//       Access: Published
//  Description: Returns the average frame rate since the last reset.
//               This is simply the total number of frames divided by
//               the total elapsed time.  This reports the virtual
//               frame rate if the clock is in (or has been in)
//               M_non_real_time mode.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1816  
637 14 Dtool_xqRvNolu 0 6 633 1743 0 14 Dtool_xqRvNolu 369 ////////////////////////////////////////////////////////////////////
//     Function: ClockObject::get_dt
//       Access: Published
//  Description: Returns the elapsed time for the previous frame: the
//               number of seconds elapsed between the last two calls
//               to tick().
//////////////////////////////////////////////////////////////////// 2 4 this 3 1816  14 current_thread 1 1818  
638 14 Dtool_xqRvsvG2 0 6 633 1743 0 14 Dtool_xqRvsvG2 369 ////////////////////////////////////////////////////////////////////
//     Function: ClockObject::get_dt
//       Access: Published
//  Description: Returns the elapsed time for the previous frame: the
//               number of seconds elapsed between the last two calls
//               to tick().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1816  
639 14 Dtool_xqRvMQK2 0 4 634 1727 0 14 Dtool_xqRvMQK2 575 ////////////////////////////////////////////////////////////////////
//     Function: ClockObject::set_dt
//       Access: Published
//  Description: In non-real-time mode, sets the number of seconds
//               that should appear to elapse between frames.  In
//               forced mode or limited mode, sets our target dt.  In
//               normal mode, this has no effect.  
//
//               Also see set_frame_rate(), which is a different way
//               to specify the same quantity.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1815  2 dt 1 1743  
640 14 Dtool_xqRv3_E3 0 4 635 1727 0 14 Dtool_xqRv3_E3 583 ////////////////////////////////////////////////////////////////////
//     Function: ClockObject::set_frame_rate
//       Access: Published
//  Description: In non-real-time mode, sets the number of frames per
//               second that we should appear to be running.  In forced
//               mode or limited mode, sets our target frame rate.  In
//               normal mode, this has no effect.
//
//               Also see set_dt(), which is a different way to
//               specify the same quantity.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1815  10 frame_rate 1 1743  
641 14 Dtool_xqRva66A 0 6 636 1743 0 14 Dtool_xqRva66A 333 ////////////////////////////////////////////////////////////////////
//     Function: ClockObject::get_max_dt
//       Access: Published
//  Description: Returns the current maximum allowable time elapsed
//               between any two frames.  See set_max_dt().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1816  
642 14 Dtool_xqRv_bSs 0 4 637 1727 0 14 Dtool_xqRv_bSs 872 ////////////////////////////////////////////////////////////////////
//     Function: ClockObject::set_max_dt
//       Access: Published
//  Description: Sets a limit on the value returned by get_dt().  If
//               this value is less than zero, no limit is imposed;
//               otherwise, this is the maximum value that will ever
//               be returned by get_dt(), regardless of how much time
//               has actually elapsed between frames.
//
//               This limit is only imposed in real-time mode; in
//               non-real-time mode, the dt is fixed anyway and max_dt
//               is ignored.
//
//               This is generally used to guarantee reasonable
//               behavior even in the presence of a very slow or
//               chuggy frame rame.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1815  6 max_dt 1 1743  
643 14 Dtool_xqRvYmhR 0 6 638 1743 0 14 Dtool_xqRvYmhR 544 ////////////////////////////////////////////////////////////////////
//     Function: ClockObject::get_degrade_factor
//       Access: Published
//  Description: In degrade mode, returns the ratio by which the
//               performance is degraded.  A value of 2.0 causes the
//               clock to be slowed down by a factor of two (reducing
//               performance to 1/2 what would be otherwise).
//
//               This has no effect if mode is not M_degrade.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1816  
644 14 Dtool_xqRvTHAP 0 4 639 1727 0 14 Dtool_xqRvTHAP 541 ////////////////////////////////////////////////////////////////////
//     Function: ClockObject::set_degrade_factor
//       Access: Published
//  Description: In degrade mode, sets the ratio by which the
//               performance is degraded.  A value of 2.0 causes the
//               clock to be slowed down by a factor of two (reducing
//               performance to 1/2 what would be otherwise).
//
//               This has no effect if mode is not M_degrade.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1815  14 degrade_factor 1 1743  
645 14 Dtool_xqRvh4_P 0 4 640 1727 0 14 Dtool_xqRvh4_P 729 ////////////////////////////////////////////////////////////////////
//     Function: ClockObject::set_average_frame_rate_interval
//       Access: Published
//  Description: Specifies the interval of time (in seconds) over
//               which get_average_frame_rate() averages the number of
//               frames per second to compute the frame rate.
//               Changing this does not necessarily immediately change
//               the result of get_average_frame_rate(), until this
//               interval of time has elapsed again.
//
//               Setting this to zero disables the computation of
//               get_average_frame_rate().
//////////////////////////////////////////////////////////////////// 2 4 this 3 1815  4 time 1 1743  
646 14 Dtool_xqRv1N1j 0 6 641 1743 0 14 Dtool_xqRv1N1j 423 ////////////////////////////////////////////////////////////////////
//     Function: ClockObject::get_average_frame_rate_interval
//       Access: Published
//  Description: Returns the interval of time (in seconds) over
//               which get_average_frame_rate() averages the number of frames
//               per second to compute the frame rate.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1816  
647 14 Dtool_xqRv7sfw 0 6 642 1743 0 14 Dtool_xqRv7sfw 500 ////////////////////////////////////////////////////////////////////
//     Function: ClockObject::get_average_frame_rate
//       Access: Published
//  Description: Returns the average frame rate in number of frames
//               per second over the last
//               get_average_frame_rate_interval() seconds.  This
//               measures the virtual frame rate if the clock is in
//               M_non_real_time mode.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1816  14 current_thread 1 1818  
648 14 Dtool_xqRvBu1t 0 6 642 1743 0 14 Dtool_xqRvBu1t 500 ////////////////////////////////////////////////////////////////////
//     Function: ClockObject::get_average_frame_rate
//       Access: Published
//  Description: Returns the average frame rate in number of frames
//               per second over the last
//               get_average_frame_rate_interval() seconds.  This
//               measures the virtual frame rate if the clock is in
//               M_non_real_time mode.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1816  
649 14 Dtool_xqRvHcI3 0 6 643 1743 0 14 Dtool_xqRvHcI3 343 ////////////////////////////////////////////////////////////////////
//     Function: ClockObject::get_max_frame_duration
//       Access: Published
//  Description: Returns the maximum frame duration over the last
//               get_average_frame_rate_interval() seconds.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1816  14 current_thread 1 1818  
650 14 Dtool_xqRv55e0 0 6 643 1743 0 14 Dtool_xqRv55e0 343 ////////////////////////////////////////////////////////////////////
//     Function: ClockObject::get_max_frame_duration
//       Access: Published
//  Description: Returns the maximum frame duration over the last
//               get_average_frame_rate_interval() seconds.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1816  
651 14 Dtool_xqRvt0YZ 0 6 644 1743 0 14 Dtool_xqRvt0YZ 915 ////////////////////////////////////////////////////////////////////
//     Function: ClockObject::calc_frame_time_deviation
//       Access: Published
//  Description: Returns the standard deviation of the frame times of
//               the frames rendered over the past
//               get_average_frame_rate_interval() seconds.  This
//               number gives an estimate of the chugginess of the
//               frame rate; if it is large, there is a large
//               variation in the frame rate; if is small, all of the
//               frames are consistent in length.
//
//               A large value might also represent just a recent
//               change in frame rate, for instance, because the
//               camera has just rotated from looking at a simple
//               scene to looking at a more complex scene.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1816  14 current_thread 1 1818  
652 14 Dtool_xqRvELKd 0 6 644 1743 0 14 Dtool_xqRvELKd 915 ////////////////////////////////////////////////////////////////////
//     Function: ClockObject::calc_frame_time_deviation
//       Access: Published
//  Description: Returns the standard deviation of the frame times of
//               the frames rendered over the past
//               get_average_frame_rate_interval() seconds.  This
//               number gives an estimate of the chugginess of the
//               frame rate; if it is large, there is a large
//               variation in the frame rate; if is small, all of the
//               frames are consistent in length.
//
//               A large value might also represent just a recent
//               change in frame rate, for instance, because the
//               camera has just rotated from looking at a simple
//               scene to looking at a more complex scene.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1816  
653 14 Dtool_xqRvo_ml 0 4 645 1727 0 14 Dtool_xqRvo_ml 566 ////////////////////////////////////////////////////////////////////
//     Function: ClockObject::tick
//       Access: Published
//  Description: Instructs the clock that a new frame has just begun.
//               In normal, real-time mode, get_frame_time() will
//               henceforth report the time as of this instant as the
//               current start-of-frame time.  In non-real-time mode,
//               get_frame_time() will be incremented by the value of
//               dt.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1815  14 current_thread 1 1818  
654 14 Dtool_xqRvnDUl 0 4 645 1727 0 14 Dtool_xqRvnDUl 566 ////////////////////////////////////////////////////////////////////
//     Function: ClockObject::tick
//       Access: Published
//  Description: Instructs the clock that a new frame has just begun.
//               In normal, real-time mode, get_frame_time() will
//               henceforth report the time as of this instant as the
//               current start-of-frame time.  In non-real-time mode,
//               get_frame_time() will be incremented by the value of
//               dt.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1815  
655 14 Dtool_xqRv__EV 0 4 646 1727 0 14 Dtool_xqRv__EV 756 ////////////////////////////////////////////////////////////////////
//     Function: ClockObject::sync_frame_time
//       Access: Published
//  Description: Resets the frame time to the current real time.  This
//               is similar to tick(), except that it does not advance
//               the frame counter and does not affect dt.  This is
//               intended to be used in the middle of a particularly
//               long frame to compensate for the time that has
//               already elapsed.
//
//               In non-real-time mode, this function has no effect
//               (because in this mode all frames take the same length
//               of time).
//////////////////////////////////////////////////////////////////// 2 4 this 3 1815  14 current_thread 1 1818  
656 14 Dtool_xqRvA_dx 0 4 646 1727 0 14 Dtool_xqRvA_dx 756 ////////////////////////////////////////////////////////////////////
//     Function: ClockObject::sync_frame_time
//       Access: Published
//  Description: Resets the frame time to the current real time.  This
//               is similar to tick(), except that it does not advance
//               the frame counter and does not affect dt.  This is
//               intended to be used in the middle of a particularly
//               long frame to compensate for the time that has
//               already elapsed.
//
//               In non-real-time mode, this function has no effect
//               (because in this mode all frames take the same length
//               of time).
//////////////////////////////////////////////////////////////////// 1 4 this 3 1815  
657 14 Dtool_xqRvUzG_ 0 6 647 1735 0 14 Dtool_xqRvUzG_ 609 ////////////////////////////////////////////////////////////////////
//     Function: ClockObject::check_errors
//       Access: Published
//  Description: Returns true if a clock error was detected since the
//               last time check_errors() was called.  A clock error
//               means that something happened, an OS or BIOS bug, for
//               instance, that makes the current value of the clock
//               somewhat suspect, and an application may wish to
//               resynchronize with any external clocks.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1815  14 current_thread 1 1818  
658 14 Dtool_xqRvb_iD 0 7 648 1815 0 14 Dtool_xqRvb_iD 408 ////////////////////////////////////////////////////////////////////
//     Function: ClockObject::get_global_clock
//       Access: Published
//  Description: Returns a pointer to the global ClockObject.  This is
//               the ClockObject that most code should use for
//               handling scene graph rendering and animation.
//////////////////////////////////////////////////////////////////// 0 
659 14 Dtool_xqRv9oIg 0 7 649 1737 0 14 Dtool_xqRv9oIg 0 0 
660 14 Dtool_xqRvPniS 0 4 653 1727 0 14 Dtool_xqRvPniS 279 ////////////////////////////////////////////////////////////////////
//     Function: CopyOnWriteObject::cache_ref
//       Access: Published
//  Description: See CachedTypedWritableReferenceCount::cache_ref().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1820  
661 14 Dtool_xqRv8TRR 0 7 654 1737 0 14 Dtool_xqRv8TRR 0 0 
662 14 Dtool_xqRvk62i 0 7 658 1822 0 14 Dtool_xqRvk62i 722 // Filename: datagramInputFile.I
// Created by:  drose (30Oct00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: DatagramInputFile::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
663 14 Dtool_xqRvy35T 0 6 659 1735 0 14 Dtool_xqRvy35T 325 ////////////////////////////////////////////////////////////////////
//     Function: DatagramInputFile::open
//       Access: Published
//  Description: Opens the indicated filename for reading.  Returns
//               true on success, false on failure.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1822  4 file 1 1823  
664 14 Dtool_xqRv4uPI 0 6 659 1735 0 14 Dtool_xqRv4uPI 325 ////////////////////////////////////////////////////////////////////
//     Function: DatagramInputFile::open
//       Access: Published
//  Description: Opens the indicated filename for reading.  Returns
//               true on success, false on failure.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1822  8 filename 1 1761  
665 14 Dtool_xqRv__gR 0 6 659 1735 0 14 Dtool_xqRv__gR 504 ////////////////////////////////////////////////////////////////////
//     Function: DatagramInputFile::open
//       Access: Published
//  Description: Starts reading from the indicated stream.  Returns
//               true on success, false on failure.  The
//               DatagramInputFile does not take ownership of the
//               stream; you are responsible for closing or deleting
//               it when you are done.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1822  2 in 1 1826  8 filename 1 1761  
666 14 Dtool_xqRvD1q2 0 6 659 1735 0 14 Dtool_xqRvD1q2 504 ////////////////////////////////////////////////////////////////////
//     Function: DatagramInputFile::open
//       Access: Published
//  Description: Starts reading from the indicated stream.  Returns
//               true on success, false on failure.  The
//               DatagramInputFile does not take ownership of the
//               stream; you are responsible for closing or deleting
//               it when you are done.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1822  2 in 1 1826  
667 14 Dtool_xqRvQgeb 0 6 660 1826 0 14 Dtool_xqRvQgeb 279 ////////////////////////////////////////////////////////////////////
//     Function: DatagramInputFile::get_stream
//       Access: Published
//  Description: Returns the istream represented by the input file.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1822  
668 14 Dtool_xqRvIdsK 0 4 661 1727 0 14 Dtool_xqRvIdsK 325 ////////////////////////////////////////////////////////////////////
//     Function: DatagramInputFile::close
//       Access: Published
//  Description: Closes the file.  This is also implicitly done when
//               the DatagramInputFile destructs.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1822  
669 14 Dtool_xqRv0u9G 0 6 662 1735 0 14 Dtool_xqRv0u9G 535 ////////////////////////////////////////////////////////////////////
//     Function: DatagramInputFile::read_header
//       Access: Published
//  Description: Reads a sequence of bytes from the beginning of the
//               datagram file.  This may be called any number of
//               times after the file has been opened and before the
//               first datagram is read.  It may not be called once
//               the first datagram has been read.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1822  6 header 1 1753  9 num_bytes 1 1721  
670 14 Dtool_xqRvubDB 0 7 664 1795 1403 14 Dtool_xqRvubDB 468 ////////////////////////////////////////////////////////////////////
//     Function: KeyboardButton::ascii_key
//       Access: Public, Static
//  Description: Returns the ButtonHandle associated with the
//               particular ASCII character (taken from the first
//               character of the indicated string), if there is one,
//               or ButtonHandle::none() if there is not.
//////////////////////////////////////////////////////////////////// 1 16 ascii_equivalent 1 1723  
671 14 Dtool_xqRvf5oq 0 7 664 1795 1403 14 Dtool_xqRvf5oq 394 ////////////////////////////////////////////////////////////////////
//     Function: KeyboardButton::ascii_key
//       Access: Public, Static
//  Description: Returns the ButtonHandle associated with the
//               particular ASCII character, if there is one, or
//               ButtonHandle::none() if there is not.
//////////////////////////////////////////////////////////////////// 1 16 ascii_equivalent 1 1798  
672 14 Dtool_xqRvwvOd 0 7 665 1795 1403 14 Dtool_xqRvwvOd 0 0 
673 14 Dtool_xqRvwFyx 0 7 666 1795 1403 14 Dtool_xqRvwFyx 0 0 
674 14 Dtool_xqRvJuf_ 0 7 667 1795 1403 14 Dtool_xqRvJuf_ 0 0 
675 14 Dtool_xqRvjDap 0 7 668 1795 1403 14 Dtool_xqRvjDap 0 0 
676 14 Dtool_xqRvrLDY 0 7 669 1795 1403 14 Dtool_xqRvrLDY 0 0 
677 14 Dtool_xqRv1OGt 0 7 670 1795 1403 14 Dtool_xqRv1OGt 0 0 
678 14 Dtool_xqRv2OUJ 0 7 671 1795 1403 14 Dtool_xqRv2OUJ 0 0 
679 14 Dtool_xqRvwOil 0 7 672 1795 1403 14 Dtool_xqRvwOil 0 0 
680 14 Dtool_xqRv9OwB 0 7 673 1795 1403 14 Dtool_xqRv9OwB 0 0 
681 14 Dtool_xqRv_O_d 0 7 674 1795 1403 14 Dtool_xqRv_O_d 0 0 
682 14 Dtool_xqRv5OM6 0 7 675 1795 1403 14 Dtool_xqRv5OM6 0 0 
683 14 Dtool_xqRv6OaW 0 7 676 1795 1403 14 Dtool_xqRv6OaW 0 0 
684 14 Dtool_xqRvkOoy 0 7 677 1795 1403 14 Dtool_xqRvkOoy 0 0 
685 14 Dtool_xqRvhO2O 0 7 678 1795 1403 14 Dtool_xqRvhO2O 0 0 
686 14 Dtool_xqRvLFnR 0 7 679 1795 1403 14 Dtool_xqRvLFnR 0 0 
687 14 Dtool_xqRvZanY 0 7 680 1795 1403 14 Dtool_xqRvZanY 0 0 
688 14 Dtool_xqRvvbnf 0 7 681 1795 1403 14 Dtool_xqRvvbnf 0 0 
689 14 Dtool_xqRv9Ynm 0 7 682 1795 1403 14 Dtool_xqRv9Ynm 59 // PC keyboards don't have these four buttons, but Macs do. 0 
690 14 Dtool_xqRvDent 0 7 683 1795 1403 14 Dtool_xqRvDent 59 // PC keyboards don't have these four buttons, but Macs do. 0 
691 14 Dtool_xqRvRfn0 0 7 684 1795 1403 14 Dtool_xqRvRfn0 0 0 
692 14 Dtool_xqRvncn7 0 7 685 1795 1403 14 Dtool_xqRvncn7 0 0 
693 14 Dtool_xqRvgrB1 0 7 686 1795 1403 14 Dtool_xqRvgrB1 0 0 
694 14 Dtool_xqRvbHch 0 7 687 1795 1403 14 Dtool_xqRvbHch 0 0 
695 14 Dtool_xqRvuoHo 0 7 688 1795 1403 14 Dtool_xqRvuoHo 0 0 
696 14 Dtool_xqRvf_Gf 0 7 689 1795 1403 14 Dtool_xqRvf_Gf 0 0 
697 14 Dtool_xqRv7XIX 0 7 690 1795 1403 14 Dtool_xqRv7XIX 0 0 
698 14 Dtool_xqRvQsHF 0 7 691 1795 1403 14 Dtool_xqRvQsHF 0 0 
699 14 Dtool_xqRvr4iM 0 7 692 1795 1403 14 Dtool_xqRvr4iM 0 0 
700 14 Dtool_xqRv1_Fy 0 7 693 1795 1403 14 Dtool_xqRv1_Fy 0 0 
701 14 Dtool_xqRvImkh 0 7 694 1795 1403 14 Dtool_xqRvImkh 0 0 
702 14 Dtool_xqRvYsPn 0 7 695 1795 1403 14 Dtool_xqRvYsPn 0 0 
703 14 Dtool_xqRvDudL 0 7 696 1795 1403 14 Dtool_xqRvDudL 27 // delete is a C++ keyword. 0 
704 14 Dtool_xqRvd_6R 0 7 697 1795 1403 14 Dtool_xqRvd_6R 27 // delete is a C++ keyword. 0 
705 14 Dtool_xqRv0QFY 0 7 698 1795 1403 14 Dtool_xqRv0QFY 0 0 
706 14 Dtool_xqRvn_Xd 0 7 699 1795 1403 14 Dtool_xqRvn_Xd 0 0 
707 14 Dtool_xqRvaaIW 0 7 700 1795 1403 14 Dtool_xqRvaaIW 0 0 
708 14 Dtool_xqRvvAt7 0 7 701 1795 1403 14 Dtool_xqRvvAt7 0 0 
709 14 Dtool_xqRvnQ06 0 7 702 1795 1403 14 Dtool_xqRvnQ06 0 0 
710 14 Dtool_xqRvKGms 0 7 703 1795 1403 14 Dtool_xqRvKGms 0 0 
711 14 Dtool_xqRvUJca 0 7 704 1795 1403 14 Dtool_xqRvUJca 0 0 
712 14 Dtool_xqRvk1PW 0 7 705 1795 1403 14 Dtool_xqRvk1PW 0 0 
713 14 Dtool_xqRvetDN 0 7 706 1795 1403 14 Dtool_xqRvetDN 0 0 
714 14 Dtool_xqRvTidz 0 7 707 1795 1403 14 Dtool_xqRvTidz 0 0 
715 14 Dtool_xqRv20qs 0 7 708 1795 1403 14 Dtool_xqRv20qs 0 0 
716 14 Dtool_xqRv1s_J 0 7 709 1795 1403 14 Dtool_xqRv1s_J 0 0 
717 14 Dtool_xqRvja3V 0 7 710 1795 1403 14 Dtool_xqRvja3V 0 0 
718 14 Dtool_xqRvjiKz 0 7 711 1795 1403 14 Dtool_xqRvjiKz 0 0 
719 14 Dtool_xqRv3iJu 0 7 712 1795 1403 14 Dtool_xqRv3iJu 0 0 
720 14 Dtool_xqRv0acL 0 7 713 1795 1403 14 Dtool_xqRv0acL 0 0 
721 14 Dtool_xqRvC9Vh 0 7 714 1795 1403 14 Dtool_xqRvC9Vh 0 0 
722 14 Dtool_xqRvClo_ 0 7 715 1795 1403 14 Dtool_xqRvClo_ 0 0 
723 14 Dtool_xqRvXztw 0 7 719 1828 1530 14 Dtool_xqRvXztw 705 // Filename: lineStream.I
// Created by:  drose (26Feb00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LineStream::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
724 14 Dtool_xqRvrsxw 0 6 720 1735 0 14 Dtool_xqRvrsxw 458 ////////////////////////////////////////////////////////////////////
//     Function: LineStream::is_text_available
//       Access: Public
//  Description: Returns true if there is at least one line of text
//               (or even a partial line) available in the LineStream
//               object.  If this returns true, the line may then be
//               retrieved via get_line().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1829  
725 14 Dtool_xqRv1ylt 0 6 721 1723 0 14 Dtool_xqRv1ylt 540 ////////////////////////////////////////////////////////////////////
//     Function: LineStream::get_line
//       Access: Public
//  Description: Extracts and returns the next line (or partial line)
//               of text available in the LineStream object.  Once the
//               line has been extracted, you may call has_newline()
//               to determine whether or not there was an explicit
//               newline character written following this line.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1828  
726 14 Dtool_xqRvTJFM 0 6 722 1735 0 14 Dtool_xqRvTJFM 460 ////////////////////////////////////////////////////////////////////
//     Function: LineStream::has_newline
//       Access: Public
//  Description: Returns true if the line of text most recently
//               returned by get_line() was written out with a
//               terminating newline, or false if a newline character
//               has not yet been written to the LineStream.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1829  
727 14 Dtool_xqRvUVR4 0 7 729 1831 1536 14 Dtool_xqRvUVR4 227 ////////////////////////////////////////////////////////////////////
//     Function: ModifierButtons::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
728 14 Dtool_xqRvPxfU 0 7 729 1831 1536 14 Dtool_xqRvPxfU 232 ////////////////////////////////////////////////////////////////////
//     Function: ModifierButtons::Copy Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 1832  
729 14 Dtool_xqRvfwyS 0 6 731 1831 0 14 Dtool_xqRvfwyS 731 // Filename: modifierButtons.I
// Created by:  drose (01Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: ModifierButtons::Copy Assignment Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1831  4 copy 1 1832  
730 14 Dtool_xqRvahow 0 6 732 1735 0 14 Dtool_xqRvahow 546 ////////////////////////////////////////////////////////////////////
//     Function: ModifierButtons::Equality Operator
//       Access: Published
//  Description: The equality operator is an exact comparision: the
//               two ModifierButtons are equal if they share the same
//               button list--indeed, the same pointer--and they all
//               the buttons have the same state.  Use matches() if a
//               less exact equality test is needed.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1832  5 other 1 1832  
731 14 Dtool_xqRvig3N 0 6 733 1735 0 14 Dtool_xqRvig3N 235 ////////////////////////////////////////////////////////////////////
//     Function: ModifierButtons::Inequality Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1832  5 other 1 1832  
732 14 Dtool_xqRvzaOV 0 6 734 1735 0 14 Dtool_xqRvzaOV 233 ////////////////////////////////////////////////////////////////////
//     Function: ModifierButtons::Ordering Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1832  5 other 1 1832  
733 14 Dtool_xqRv46nn 0 7 735 1831 1536 14 Dtool_xqRv46nn 523 ////////////////////////////////////////////////////////////////////
//     Function: ModifierButtons::operator &
//       Access: Published
//  Description: Returns a new ModifierButtons object for which
//               is_down() will be true only if it is true on both
//               source objects.  The set of buttons reported by
//               has_button() is not completely defined if both source
//               objects have a different set.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1832  5 other 1 1832  
734 14 Dtool_xqRvea_2 0 7 736 1831 1536 14 Dtool_xqRvea_2 527 ////////////////////////////////////////////////////////////////////
//     Function: ModifierButtons::operator |
//       Access: Published
//  Description: Returns a new ModifierButtons object for which
//               is_down() will be true if it is true on either of the
//               source objects.  The set of buttons reported by
//               has_button() is not completely defined if both source
//               objects have a different set.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1832  5 other 1 1832  
735 14 Dtool_xqRv1hOw 0 6 737 1831 0 14 Dtool_xqRv1hOw 338 ////////////////////////////////////////////////////////////////////
//     Function: ModifierButtons::operator &=
//       Access: Published
//  Description: Sets is_down() true for any button that is already
//               true for this object and the other object.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1831  5 other 1 1832  
736 14 Dtool_xqRvLBn_ 0 6 738 1831 0 14 Dtool_xqRvLBn_ 437 ////////////////////////////////////////////////////////////////////
//     Function: ModifierButtons::operator |=
//       Access: Published
//  Description: Sets is_down() true for any button that is already
//               true for this object and the other object.  Adds
//               whatever buttons are necessary to the list to make
//               this so
//////////////////////////////////////////////////////////////////// 2 4 this 3 1831  5 other 1 1832  
737 14 Dtool_xqRv_tdp 0 4 739 1727 0 14 Dtool_xqRv_tdp 698 ////////////////////////////////////////////////////////////////////
//     Function: ModifierButtons::set_button_list
//       Access: Published
//  Description: Sets the list of buttons to watch to be the same as
//               that of the other ModifierButtons object.  This makes
//               the lists pointer equivalent (until one or the other
//               is later modified).
//
//               This will preserve the state of any button that was
//               on the original list and is also on the new lists.
//               Any other buttons will get reset to the default state
//               of "up".
//////////////////////////////////////////////////////////////////// 2 4 this 3 1831  5 other 1 1832  
738 14 Dtool_xqRvzNfr 0 6 740 1735 0 14 Dtool_xqRvzNfr 504 ////////////////////////////////////////////////////////////////////
//     Function: ModifierButtons::matches
//       Access: Published
//  Description: Returns true if the set of buttons indicated as down
//               by this ModifierButtons object is the same set of
//               buttons indicated as down by the other
//               ModifierButtons object.  The buttons indicated as up
//               are not relevant.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1832  5 other 1 1832  
739 14 Dtool_xqRvTLZg 0 6 741 1735 0 14 Dtool_xqRvTLZg 523 ////////////////////////////////////////////////////////////////////
//     Function: ModifierButtons::add_button
//       Access: Published
//  Description: Adds the indicated button to the set of buttons that
//               will be monitored for upness and downness.  Returns
//               true if the button was added, false if it was already
//               being monitored or if too many buttons are currently
//               being monitored.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1831  6 button 1 1795  
740 14 Dtool_xqRvMHRl 0 6 742 1735 0 14 Dtool_xqRvMHRl 339 ////////////////////////////////////////////////////////////////////
//     Function: ModifierButtons::has_button
//       Access: Published
//  Description: Returns true if the indicated button is in the set of
//               buttons being monitored, false otherwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1832  6 button 1 1795  
741 14 Dtool_xqRviuBm 0 6 743 1735 0 14 Dtool_xqRviuBm 623 ////////////////////////////////////////////////////////////////////
//     Function: ModifierButtons::remove_button
//       Access: Published
//  Description: Removes the indicated button from the set of buttons
//               being monitored.  Returns true if the button was
//               removed, false if it was not being monitored in the
//               first place.
//
//               Unlike the other methods, you cannot remove a button
//               by removing its alias; you have to remove exactly the
//               button itself.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1831  6 button 1 1795  
742 14 Dtool_xqRvw9C5 0 6 744 1724 0 14 Dtool_xqRvw9C5 394 ////////////////////////////////////////////////////////////////////
//     Function: ModifierButtons::get_num_buttons
//       Access: Published
//  Description: Returns the number of buttons that the
//               ModifierButtons object is monitoring (e.g. the number
//               of buttons passed to add_button()).
//////////////////////////////////////////////////////////////////// 1 4 this 3 1832  
743 14 Dtool_xqRvKJca 0 7 745 1795 1403 14 Dtool_xqRvKJca 446 ////////////////////////////////////////////////////////////////////
//     Function: ModifierButtons::get_button
//       Access: Published
//  Description: Returns the nth button that the ModifierButtons
//               object is monitoring (the nth button passed to
//               add_button()).  This must be in the range 0 <= index
//               < get_num_buttons().
//////////////////////////////////////////////////////////////////// 2 4 this 3 1832  5 index 1 1724  
744 14 Dtool_xqRvigE5 0 6 746 1735 0 14 Dtool_xqRvigE5 597 ////////////////////////////////////////////////////////////////////
//     Function: ModifierButtons::button_down
//       Access: Published
//  Description: Records that a particular button has been pressed.
//               If the given button is one of the buttons that is
//               currently being monitored, this will update the
//               internal state appropriately; otherwise, it will do
//               nothing.  Returns true if the button is one that was
//               monitored, or false otherwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1831  6 button 1 1795  
745 14 Dtool_xqRv3WnW 0 6 747 1735 0 14 Dtool_xqRv3WnW 596 ////////////////////////////////////////////////////////////////////
//     Function: ModifierButtons::button_up
//       Access: Published
//  Description: Records that a particular button has been released.
//               If the given button is one of the buttons that is
//               currently being monitored, this will update the
//               internal state appropriately; otherwise, it will do
//               nothing.  Returns true if the button is one that was
//               monitored, or false otherwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1831  6 button 1 1795  
746 14 Dtool_xqRveJ_1 0 4 748 1727 0 14 Dtool_xqRveJ_1 303 ////////////////////////////////////////////////////////////////////
//     Function: ModifierButtons::all_buttons_up
//       Access: Published
//  Description: Marks all monitored buttons as being in the "up"
//               state.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1831  
747 14 Dtool_xqRv6vCj 0 6 749 1735 0 14 Dtool_xqRv6vCj 401 ////////////////////////////////////////////////////////////////////
//     Function: ModifierButtons::is_down
//       Access: Published
//  Description: Returns true if the indicated button is known to be
//               down, or false if it is known to be up or if it is
//               not in the set of buttons being tracked.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1832  6 button 1 1795  
748 14 Dtool_xqRvucQV 0 6 749 1735 0 14 Dtool_xqRvucQV 332 ////////////////////////////////////////////////////////////////////
//     Function: ModifierButtons::is_down
//       Access: Published
//  Description: Returns true if the indicated button is known to be
//               down, or false if it is known to be up.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1832  5 index 1 1724  
749 14 Dtool_xqRvS0db 0 6 750 1735 0 14 Dtool_xqRvS0db 340 ////////////////////////////////////////////////////////////////////
//     Function: ModifierButtons::is_any_down
//       Access: Published
//  Description: Returns true if any of the tracked button are known
//               to be down, or false if all of them are up.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1832  
750 14 Dtool_xqRv9FCN 0 6 751 1723 0 14 Dtool_xqRv9FCN 397 ////////////////////////////////////////////////////////////////////
//     Function: ModifierButtons::get_prefix
//       Access: Published
//  Description: Returns a string which can be used to prefix any
//               button name or event name with the unique set of
//               modifier buttons currently being held.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1832  
751 14 Dtool_xqRvbeaY 0 4 752 1727 0 14 Dtool_xqRvbeaY 298 ////////////////////////////////////////////////////////////////////
//     Function: ModifierButtons::output
//       Access: Published
//  Description: Writes a one-line summary of the buttons known to be
//               down.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1832  3 out 1 1731  
752 14 Dtool_xqRvDRR3 0 4 753 1727 0 14 Dtool_xqRvDRR3 365 ////////////////////////////////////////////////////////////////////
//     Function: ModifierButtons::write
//       Access: Published
//  Description: Writes a multi-line summary including all of the
//               buttons being monitored and which ones are known to
//               be down.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1832  3 out 1 1731  
753 14 Dtool_xqRva24C 0 7 755 1795 1403 14 Dtool_xqRva24C 424 ////////////////////////////////////////////////////////////////////
//     Function: MouseButton::button
//       Access: Public, Static
//  Description: Returns the ButtonHandle associated with the
//               particular numbered mouse button (zero-based), if
//               there is one, or ButtonHandle::none() if there is
//               not.
//////////////////////////////////////////////////////////////////// 1 13 button_number 1 1724  
754 14 Dtool_xqRvRfhO 0 7 756 1795 1403 14 Dtool_xqRvRfhO 302 ////////////////////////////////////////////////////////////////////
//     Function: MouseButton::one
//       Access: Public, Static
//  Description: Returns the ButtonHandle associated with the
//               first mouse button.
//////////////////////////////////////////////////////////////////// 0 
755 14 Dtool_xqRv6jlR 0 7 757 1795 1403 14 Dtool_xqRv6jlR 303 ////////////////////////////////////////////////////////////////////
//     Function: MouseButton::two
//       Access: Public, Static
//  Description: Returns the ButtonHandle associated with the
//               second mouse button.
//////////////////////////////////////////////////////////////////// 0 
756 14 Dtool_xqRvhxQB 0 7 758 1795 1403 14 Dtool_xqRvhxQB 304 ////////////////////////////////////////////////////////////////////
//     Function: MouseButton::three
//       Access: Public, Static
//  Description: Returns the ButtonHandle associated with the
//               third mouse button.
//////////////////////////////////////////////////////////////////// 0 
757 14 Dtool_xqRvQnfN 0 7 759 1795 1403 14 Dtool_xqRvQnfN 304 ////////////////////////////////////////////////////////////////////
//     Function: MouseButton::four
//       Access: Public, Static
//  Description: Returns the ButtonHandle associated with the
//               fourth mouse button.
//////////////////////////////////////////////////////////////////// 0 
758 14 Dtool_xqRvBJKu 0 7 760 1795 1403 14 Dtool_xqRvBJKu 303 ////////////////////////////////////////////////////////////////////
//     Function: MouseButton::five
//       Access: Public, Static
//  Description: Returns the ButtonHandle associated with the
//               fifth mouse button.
//////////////////////////////////////////////////////////////////// 0 
759 14 Dtool_xqRvCrvD 0 7 761 1795 1403 14 Dtool_xqRvCrvD 327 ////////////////////////////////////////////////////////////////////
//     Function: MouseButton::wheel_up
//       Access: Public, Static
//  Description: Returns the ButtonHandle generated when the mouse
//               wheel is rolled one notch upwards.
//////////////////////////////////////////////////////////////////// 0 
760 14 Dtool_xqRvFLlN 0 7 762 1795 1403 14 Dtool_xqRvFLlN 331 ////////////////////////////////////////////////////////////////////
//     Function: MouseButton::wheel_down
//       Access: Public, Static
//  Description: Returns the ButtonHandle generated when the mouse
//               wheel is rolled one notch downwards.
//////////////////////////////////////////////////////////////////// 0 
761 14 Dtool_xqRvrYQ3 0 7 763 1795 1403 14 Dtool_xqRvrYQ3 396 ////////////////////////////////////////////////////////////////////
//     Function: MouseButton::wheel_left
//       Access: Public, Static
//  Description: Returns the ButtonHandle generated when the mouse
//               is scrolled to the left. Usually, you'll only
//               find the horizontal scroll on laptops.
//////////////////////////////////////////////////////////////////// 0 
762 14 Dtool_xqRvxvFe 0 7 764 1795 1403 14 Dtool_xqRvxvFe 398 ////////////////////////////////////////////////////////////////////
//     Function: MouseButton::wheel_right
//       Access: Public, Static
//  Description: Returns the ButtonHandle generated when the mouse
//               is scrolled to the right. Usually, you'll only
//               find the horizontal scroll on laptops.
//////////////////////////////////////////////////////////////////// 0 
763 14 Dtool_xqRvLqpQ 0 6 765 1735 0 14 Dtool_xqRvLqpQ 353 ////////////////////////////////////////////////////////////////////
//     Function: MouseButton::is_mouse_button
//       Access: Public, Static
//  Description: Returns true if the indicated ButtonHandle is a mouse
//               button, false if it is some other kind of button.
//////////////////////////////////////////////////////////////////// 1 6 button 1 1795  
764 14 Dtool_xqRvgWcW 0 7 768 1834 1578 14 Dtool_xqRvgWcW 706 // Filename: mouseData.I
// Created by:  drose (15Jul02)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: MouseData::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
765 14 Dtool_xqRvja_u 0 7 768 1834 1578 14 Dtool_xqRvja_u 226 ////////////////////////////////////////////////////////////////////
//     Function: MouseData::Copy Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 1835  
766 14 Dtool_xqRvqtbu 0 6 769 1834 0 14 Dtool_xqRvqtbu 234 ////////////////////////////////////////////////////////////////////
//     Function: MouseData::Copy Assignment Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1834  4 copy 1 1835  
767 14 Dtool_xqRvRo5w 0 6 770 1743 0 14 Dtool_xqRvRo5w 215 ////////////////////////////////////////////////////////////////////
//     Function: MouseData::get_x
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 1835  
768 14 Dtool_xqRvp4Dx 0 6 771 1743 0 14 Dtool_xqRvp4Dx 215 ////////////////////////////////////////////////////////////////////
//     Function: MouseData::get_y
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 1835  
769 14 Dtool_xqRv370X 0 6 772 1735 0 14 Dtool_xqRv370X 223 ////////////////////////////////////////////////////////////////////
//     Function: MouseData::get_in_window
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 1835  
770 14 Dtool_xqRvlQkK 0 4 773 1727 0 14 Dtool_xqRvlQkK 216 ////////////////////////////////////////////////////////////////////
//     Function: MouseData::output
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1835  3 out 1 1731  
771 14 Dtool_xqRvHv2I 0 6 776 1724 0 14 Dtool_xqRvHv2I 280 ////////////////////////////////////////////////////////////////////
//     Function: NodeCachedReferenceCount::get_node_ref_count
//       Access: Published
//  Description: Returns the current reference count.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1837  
772 14 Dtool_xqRvC_qZ 0 4 777 1727 0 14 Dtool_xqRvC_qZ 662 ////////////////////////////////////////////////////////////////////
//     Function: NodeCachedReferenceCount::node_ref
//       Access: Published
//  Description: Explicitly increments the reference count.
//
//               This function is const, even though it changes the
//               object, because generally fiddling with an object's
//               reference count isn't considered part of fiddling
//               with the object.  An object might be const in other
//               ways, but we still need to accurately count the
//               number of references to it.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1837  
773 14 Dtool_xqRv35Q1 0 6 778 1735 0 14 Dtool_xqRv35Q1 468 ////////////////////////////////////////////////////////////////////
//     Function: NodeCachedReferenceCount::node_unref
//       Access: Published
//  Description: Explicitly decrements the node reference count and
//               the normal reference count simultaneously.
//
//               The return value is true if the new reference count
//               is nonzero, false if it is zero.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1837  
774 14 Dtool_xqRv6xUo 0 6 779 1735 0 14 Dtool_xqRv6xUo 350 ////////////////////////////////////////////////////////////////////
//     Function: NodeCachedReferenceCount::test_ref_count_integrity
//       Access: Published
//  Description: Does some easy checks to make sure that the reference
//               count isn't completely bogus.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1837  
775 14 Dtool_xqRvwI10 0 6 781 1724 0 14 Dtool_xqRvwI10 600 ////////////////////////////////////////////////////////////////////
//     Function: NodeCachedReferenceCount::get_referenced_bits
//       Access: Published
//  Description: Returns the union of the values defined in the
//               Referenced enum that represents the various things
//               that appear to be holding a pointer to this object.
//
//               If R_node is included, at least one node is holding a
//               pointer; if R_cache is included, at least one cache
//               element is.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1837  
776 14 Dtool_xqRv_DaH 0 7 782 1737 0 14 Dtool_xqRv_DaH 0 0 
777 14 Dtool_xqRvZthJ 0 7 784 1839 1592 14 Dtool_xqRvZthJ 710 // Filename: sparseArray.I
// Created by:  drose (14Feb07)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
778 14 Dtool_xqRvbAWk 0 7 784 1839 1592 14 Dtool_xqRvbAWk 239 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::Constructor (from BitArray)
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 from 1 1791  
779 14 Dtool_xqRvtTb_ 0 7 784 1839 1592 14 Dtool_xqRvtTb_ 228 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::Copy Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 1793  
780 14 Dtool_xqRv4Q2p 0 6 785 1839 0 14 Dtool_xqRv4Q2p 236 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::Copy Assignment Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1839  4 copy 1 1793  
781 14 Dtool_xqRveCtD 0 7 786 1839 1592 14 Dtool_xqRveCtD 323 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::Named all_on constructor
//       Access: Published, Static
//  Description: Returns a SparseArray with an infinite array of bits,
//               all on.
//////////////////////////////////////////////////////////////////// 0 
782 14 Dtool_xqRvSVTc 0 7 787 1839 1592 14 Dtool_xqRvSVTc 290 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::Named all_on constructor
//       Access: Published, Static
//  Description: Returns a SparseArray whose bits are all off.
//////////////////////////////////////////////////////////////////// 0 
783 14 Dtool_xqRvbAVG 0 7 788 1839 1592 14 Dtool_xqRvbAVG 301 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::Named lower_on constructor
//       Access: Published, Static
//  Description: Returns a SparseArray whose lower on_bits bits are on.
//////////////////////////////////////////////////////////////////// 1 7 on_bits 1 1724  
784 14 Dtool_xqRvHLUD 0 7 789 1839 1592 14 Dtool_xqRvHLUD 295 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::Named bit constructor
//       Access: Published, Static
//  Description: Returns a SparseArray with only the indicated bit on.
//////////////////////////////////////////////////////////////////// 1 5 index 1 1724  
785 14 Dtool_xqRvviAa 0 7 790 1839 1592 14 Dtool_xqRvviAa 329 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::Named range constructor
//       Access: Published, Static
//  Description: Returns a SparseArray whose size bits, beginning at
//               low_bit, are on.
//////////////////////////////////////////////////////////////////// 2 7 low_bit 1 1724  4 size 1 1724  
786 14 Dtool_xqRvyhdr 0 6 792 1735 0 14 Dtool_xqRvyhdr 723 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::has_max_num_bits
//       Access: Published, Static
//  Description: Returns true if there is a maximum number of bits
//               that may be stored in this structure, false
//               otherwise.  If this returns true, the number may be
//               queried in get_max_num_bits().
//
//               This method always returns false.  The SparseArray has
//               no maximum number of bits.  This method is defined so
//               generic programming algorithms can use BitMask or
//               SparseArray interchangeably.
//////////////////////////////////////////////////////////////////// 0 
787 14 Dtool_xqRvIjIo 0 6 793 1724 0 14 Dtool_xqRvIjIo 758 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::get_max_num_bits
//       Access: Published, Static
//  Description: If get_max_num_bits() returned true, this method may
//               be called to return the maximum number of bits that
//               may be stored in this structure.  It is an error to
//               call this if get_max_num_bits() return false.
//
//               It is always an error to call this method.  The
//               SparseArray has no maximum number of bits.  This method
//               is defined so generic programming algorithms can use
//               BitMask or SparseArray interchangeably.
//////////////////////////////////////////////////////////////////// 0 
788 14 Dtool_xqRvK3uW 0 6 794 1724 0 14 Dtool_xqRvK3uW 607 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::get_num_bits
//       Access: Published
//  Description: Returns the current number of possibly different bits
//               in this array.  There are actually an infinite number
//               of bits, but every bit higher than this bit will have
//               the same value, either 0 or 1 (see
//               get_highest_bits()).
//
//               This number may grow and/or shrink automatically as
//               needed.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1793  
789 14 Dtool_xqRv5yj_ 0 6 795 1735 0 14 Dtool_xqRv5yj_ 445 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::get_bit
//       Access: Published
//  Description: Returns true if the nth bit is set, false if it is
//               cleared.  It is valid for n to increase beyond
//               get_num_bits(), but the return value get_num_bits()
//               will always be the same.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1793  5 index 1 1724  
790 14 Dtool_xqRvuAn8 0 4 796 1727 0 14 Dtool_xqRvuAn8 320 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::set_bit
//       Access: Published
//  Description: Sets the nth bit on.  If n >= get_num_bits(), this
//               automatically extends the array.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1839  5 index 1 1724  
791 14 Dtool_xqRvSHy4 0 4 797 1727 0 14 Dtool_xqRvSHy4 323 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::clear_bit
//       Access: Published
//  Description: Sets the nth bit off.  If n >= get_num_bits(), this
//               automatically extends the array.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1839  5 index 1 1724  
792 14 Dtool_xqRvHYp8 0 4 798 1727 0 14 Dtool_xqRvHYp8 313 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::set_bit_to
//       Access: Published
//  Description: Sets the nth bit either on or off, according to the
//               indicated bool value.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1839  5 index 1 1724  5 value 1 1735  
793 14 Dtool_xqRvyw5L 0 6 799 1735 0 14 Dtool_xqRvyw5L 367 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::get_highest_bits
//       Access: Published
//  Description: Returns true if the infinite set of bits beyond
//               get_num_bits() are all on, or false of they are all
//               off.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1793  
794 14 Dtool_xqRvRZfM 0 6 800 1735 0 14 Dtool_xqRvRZfM 297 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::is_zero
//       Access: Published
//  Description: Returns true if the entire bitmask is zero, false
//               otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1793  
795 14 Dtool_xqRv6InZ 0 6 801 1735 0 14 Dtool_xqRv6InZ 298 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::is_all_on
//       Access: Published
//  Description: Returns true if the entire bitmask is one, false
//               otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1793  
796 14 Dtool_xqRvq1o_ 0 6 802 1735 0 14 Dtool_xqRvq1o_ 311 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::has_any_of
//       Access: Published
//  Description: Returns true if any bit in the indicated range is
//               set, false otherwise.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1793  7 low_bit 1 1724  4 size 1 1724  
797 14 Dtool_xqRvVHiQ 0 6 803 1735 0 14 Dtool_xqRvVHiQ 313 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::has_all_of
//       Access: Published
//  Description: Returns true if all bits in the indicated range are
//               set, false otherwise.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1793  7 low_bit 1 1724  4 size 1 1724  
798 14 Dtool_xqRvygC6 0 4 804 1727 0 14 Dtool_xqRvygC6 258 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::set_range
//       Access: Published
//  Description: Sets the indicated range of bits on.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1839  7 low_bit 1 1724  4 size 1 1724  
799 14 Dtool_xqRvbx1k 0 4 805 1727 0 14 Dtool_xqRvbx1k 261 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::clear_range
//       Access: Published
//  Description: Sets the indicated range of bits off.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1839  7 low_bit 1 1724  4 size 1 1724  
800 14 Dtool_xqRvnzgz 0 4 806 1727 0 14 Dtool_xqRvnzgz 278 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::set_range_to
//       Access: Published
//  Description: Sets the indicated range of bits to either on or off.
//////////////////////////////////////////////////////////////////// 4 4 this 3 1839  5 value 1 1735  7 low_bit 1 1724  4 size 1 1724  
801 14 Dtool_xqRvHz9G 0 6 807 1724 0 14 Dtool_xqRvHz9G 375 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::get_num_on_bits
//       Access: Published
//  Description: Returns the number of bits that are set to 1 in the
//               array.  Returns -1 if there are an infinite number of
//               1 bits.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1793  
802 14 Dtool_xqRvkQdG 0 6 808 1724 0 14 Dtool_xqRvkQdG 376 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::get_num_off_bits
//       Access: Published
//  Description: Returns the number of bits that are set to 0 in the
//               array.  Returns -1 if there are an infinite number of
//               0 bits.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1793  
803 14 Dtool_xqRvWgXl 0 6 809 1724 0 14 Dtool_xqRvWgXl 395 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::get_lowest_on_bit
//       Access: Published
//  Description: Returns the index of the lowest 1 bit in the array.
//               Returns -1 if there are no 1 bits or if there are an
//               infinite number of 1 bits.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1793  
804 14 Dtool_xqRvBWcH 0 6 810 1724 0 14 Dtool_xqRvBWcH 396 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::get_lowest_off_bit
//       Access: Published
//  Description: Returns the index of the lowest 0 bit in the array.
//               Returns -1 if there are no 0 bits or if there are an
//               infinite number of 1 bits.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1793  
805 14 Dtool_xqRv2kpz 0 6 811 1724 0 14 Dtool_xqRv2kpz 393 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::get_highest_on_bit
//       Access: Published
//  Description: Returns the index of the highest 1 bit in the array.
//               Returns -1 if there are no 1 bits or if there an
//               infinite number of 1 bits.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1793  
806 14 Dtool_xqRvVaJ2 0 6 812 1724 0 14 Dtool_xqRvVaJ2 394 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::get_highest_off_bit
//       Access: Published
//  Description: Returns the index of the highest 0 bit in the array.
//               Returns -1 if there are no 0 bits or if there an
//               infinite number of 1 bits.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1793  
807 14 Dtool_xqRvgUV7 0 6 813 1724 0 14 Dtool_xqRvgUV7 594 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::get_next_higher_different_bit
//       Access: Published
//  Description: Returns the index of the next bit in the array, above
//               low_bit, whose value is different that the value of
//               low_bit.  Returns low_bit again if all bits higher
//               than low_bit have the same value.
//
//               This can be used to quickly iterate through all of
//               the bits in the array.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1793  7 low_bit 1 1724  
808 14 Dtool_xqRvUZSJ 0 4 814 1727 0 14 Dtool_xqRvUZSJ 324 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::invert_in_place
//       Access: Published
//  Description: Inverts all the bits in the SparseArray.  This is
//               equivalent to array = ~array.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1839  
809 14 Dtool_xqRv_DNe 0 6 815 1735 0 14 Dtool_xqRv_DNe 446 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::has_bits_in_common
//       Access: Published
//  Description: Returns true if this SparseArray has any "one" bits in
//               common with the other one, false otherwise.
//
//               This is equivalent to (array & other) != 0, but may
//               be faster.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1793  5 other 1 1793  
810 14 Dtool_xqRvbfjR 0 4 816 1727 0 14 Dtool_xqRvbfjR 259 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::clear
//       Access: Published
//  Description: Sets all the bits in the SparseArray off.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1839  
811 14 Dtool_xqRvYNW_ 0 4 817 1727 0 14 Dtool_xqRvYNW_ 219 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::output
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 1793  3 out 1 1731  
812 14 Dtool_xqRv0ws5 0 6 818 1735 0 14 Dtool_xqRv0ws5 223 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::operator ==
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1793  5 other 1 1793  
813 14 Dtool_xqRv8_cN 0 6 819 1735 0 14 Dtool_xqRv8_cN 223 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::operator !=
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1793  5 other 1 1793  
814 14 Dtool_xqRvjHgr 0 6 820 1735 0 14 Dtool_xqRvjHgr 387 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::operator <
//       Access: Published
//  Description: Returns true if the unsigned integer which is
//               represented by this SparseArray is less than that of the
//               other one, false otherwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1793  5 other 1 1793  
815 14 Dtool_xqRv7lhn 0 6 821 1724 0 14 Dtool_xqRv7lhn 513 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::compare_to
//       Access: Published
//  Description: Returns a number less than zero if this SparseArray
//               sorts before the indicated other SparseArray, greater
//               than zero if it sorts after, or 0 if they are
//               equivalent.  This is based on the same ordering
//               defined by operator <.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1793  5 other 1 1793  
816 14 Dtool_xqRvYF4R 0 7 822 1839 1592 14 Dtool_xqRvYF4R 222 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::operator &
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1793  5 other 1 1793  
817 14 Dtool_xqRv8cgH 0 7 823 1839 1592 14 Dtool_xqRv8cgH 222 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::operator |
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1793  5 other 1 1793  
818 14 Dtool_xqRvJBYq 0 7 824 1839 1592 14 Dtool_xqRvJBYq 222 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::operator ^
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1793  5 other 1 1793  
819 14 Dtool_xqRvV3mC 0 7 825 1839 1592 14 Dtool_xqRvV3mC 222 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::operator ~
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 1793  
820 14 Dtool_xqRvQZHC 0 7 826 1839 1592 14 Dtool_xqRvQZHC 223 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::operator <<
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1793  5 shift 1 1724  
821 14 Dtool_xqRvun_O 0 7 827 1839 1592 14 Dtool_xqRvun_O 223 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::operator >>
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1793  5 shift 1 1724  
822 14 Dtool_xqRvrxEk 0 6 828 1839 0 14 Dtool_xqRvrxEk 223 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::operator &=
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1839  5 other 1 1793  
823 14 Dtool_xqRvP4sZ 0 6 829 1839 0 14 Dtool_xqRvP4sZ 223 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::operator |=
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1839  5 other 1 1793  
824 14 Dtool_xqRv81k8 0 6 830 1839 0 14 Dtool_xqRv81k8 223 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::operator ^=
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1839  5 other 1 1793  
825 14 Dtool_xqRvDi5u 0 6 831 1839 0 14 Dtool_xqRvDi5u 406 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::operator <<=
//       Access: Published
//  Description: Logical left shift.  Since negative bit positions
//               have meaning in a SparseArray, real bit values are
//               rotated in on the left (not necessarily zero).
//////////////////////////////////////////////////////////////////// 2 4 this 3 1839  5 shift 1 1724  
826 14 Dtool_xqRvFnx7 0 6 832 1839 0 14 Dtool_xqRvFnx7 412 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::operator >>=
//       Access: Published
//  Description: Logical right shift.  The rightmost bits become
//               negative, but are not lost; they will reappear into
//               the zero position if the array is later left-shifted.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1839  5 shift 1 1724  
827 14 Dtool_xqRv3i80 0 6 833 1735 0 14 Dtool_xqRv3i80 614 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::is_inverse
//       Access: Published
//  Description: If this is true, the SparseArray is actually defined
//               as a list of subranges of integers that are *not* in
//               the set.  If this is false (the default), then the
//               subranges define the integers that *are* in the set.
//               This affects the interpretation of the values
//               returned by iterating through get_num_subranges().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1793  
828 14 Dtool_xqRv2RsJ 0 6 834 1724 0 14 Dtool_xqRv2RsJ 515 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::get_num_subranges
//       Access: Published
//  Description: Returns the number of separate subranges stored in
//               the SparseArray.  You can use this limit to iterate
//               through the subranges, calling get_subrange_begin()
//               and get_subrange_end() for each one.
//
//               Also see is_inverse().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1793  
829 14 Dtool_xqRveaXN 0 6 835 1724 0 14 Dtool_xqRveaXN 345 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::get_subrange_begin
//       Access: Published
//  Description: Returns the first numeric element in the nth
//               subrange.
//
//               Also see is_inverse().
//////////////////////////////////////////////////////////////////// 2 4 this 3 1793  1 n 1 1724  
830 14 Dtool_xqRvMLp6 0 6 836 1724 0 14 Dtool_xqRvMLp6 353 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::get_subrange_end
//       Access: Published
//  Description: Returns the last numeric element, plus one, in the
//               nth subrange.
//
//               Also see is_inverse().
//////////////////////////////////////////////////////////////////// 2 4 this 3 1793  1 n 1 1724  
831 14 Dtool_xqRvGFxm 0 7 837 1737 0 14 Dtool_xqRvGFxm 0 0 
832 14 Dtool_xqRvh3eL 0 7 839 1840 1420 14 Dtool_xqRvh3eL 232 ////////////////////////////////////////////////////////////////////
//     Function: PythonCallbackObject::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 8 function 1 1719  
833 14 Dtool_xqRv1FzO 0 7 839 1840 1420 14 Dtool_xqRv1FzO 232 ////////////////////////////////////////////////////////////////////
//     Function: PythonCallbackObject::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
834 14 Dtool_xqRv6nqB 0 4 840 1727 0 14 Dtool_xqRv6nqB 0 2 4 this 3 1840  4 size 1 1721  
835 14 Dtool_xqRvLBAq 0 4 843 1727 0 14 Dtool_xqRvLBAq 379 ////////////////////////////////////////////////////////////////////
//     Function: PythonCallbackObject::set_function
//       Access: Published
//  Description: Replaces the function that is called for the callback.
//               runs.  The parameter should be a Python callable
//               object.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1840  8 function 1 1719  
836 14 Dtool_xqRvKUDV 0 6 844 1719 0 14 Dtool_xqRvKUDV 287 ////////////////////////////////////////////////////////////////////
//     Function: PythonCallbackObject::get_function
//       Access: Published
//  Description: Returns the function that is called for the callback.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1840  
837 14 Dtool_xqRvk9Cc 0 7 845 1737 0 14 Dtool_xqRvk9Cc 0 0 
838 14 Dtool_xqRvQ2Tm 0 7 847 1737 0 14 Dtool_xqRvQ2Tm 0 0 
839 14 Dtool_xqRvEGE_ 0 7 850 1841 1649 14 Dtool_xqRvEGE_ 275 ////////////////////////////////////////////////////////////////////
//     Function: UniqueIdAllocator::Constructor
//       Access: Published
//  Description: Create a free id pool in the range [min:max].
//////////////////////////////////////////////////////////////////// 2 3 min 1 1721  3 max 1 1721  
840 14 Dtool_xqRv168y 0 7 850 1841 1649 14 Dtool_xqRv168y 275 ////////////////////////////////////////////////////////////////////
//     Function: UniqueIdAllocator::Constructor
//       Access: Published
//  Description: Create a free id pool in the range [min:max].
//////////////////////////////////////////////////////////////////// 1 3 min 1 1721  
841 14 Dtool_xqRvK9nc 0 7 850 1841 1649 14 Dtool_xqRvK9nc 275 ////////////////////////////////////////////////////////////////////
//     Function: UniqueIdAllocator::Constructor
//       Access: Published
//  Description: Create a free id pool in the range [min:max].
//////////////////////////////////////////////////////////////////// 0 
842 14 Dtool_xqRvD7pt 0 6 852 1721 0 14 Dtool_xqRvD7pt 381 ////////////////////////////////////////////////////////////////////
//     Function: UniqueIdAllocator::allocate
//       Access: Published
//  Description: Returns an id between _min and _max (that were passed
//               to the constructor).
//               IndexEnd is returned if no ids are available.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1841  
843 14 Dtool_xqRv8_oT 0 4 853 1727 0 14 Dtool_xqRv8_oT 893 ////////////////////////////////////////////////////////////////////
//     Function: UniqueIdAllocator::initial_reserve_id
//       Access: Published
//  Description: This may be called to mark a particular id as having
//               already been allocated (for instance, by a prior
//               pass).  The specified id is removed from the
//               available pool.
//
//               Because of the limitations of this algorithm, this is
//               most efficient when it is called before the first
//               call to allocate(), and when all the calls to
//               initial_reserve_id() are made in descending order by
//               id.  However, this is a performance warning only; if
//               performance is not an issue, any id may be reserved
//               at any time.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1841  2 id 1 1721  
844 14 Dtool_xqRvGQCz 0 4 854 1727 0 14 Dtool_xqRvGQCz 338 ////////////////////////////////////////////////////////////////////
//     Function: UniqueIdAllocator::free
//       Access: Published
//  Description: Free an allocated index (index must be between _min
//               and _max that were passed to the constructor).
//////////////////////////////////////////////////////////////////// 2 4 this 3 1841  5 index 1 1721  
845 14 Dtool_xqRvAmoe 0 6 855 1844 0 14 Dtool_xqRvAmoe 350 ////////////////////////////////////////////////////////////////////
//     Function: UniqueIdAllocator::fraction_used
//       Access: Published
//  Description: return the decimal fraction of the pool that is used.
//               The range is 0 to 1.0 (e.g. 75% would be 0.75).
//////////////////////////////////////////////////////////////////// 1 4 this 3 1842  
846 14 Dtool_xqRvMD2Z 0 4 856 1727 0 14 Dtool_xqRvMD2Z 256 ////////////////////////////////////////////////////////////////////
//     Function: UniqueIdAllocator::output
//       Access: Published
//  Description: ...intended for debugging only.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1842  3 out 1 1731  
847 14 Dtool_xqRvVAnq 0 4 857 1727 0 14 Dtool_xqRvVAnq 255 ////////////////////////////////////////////////////////////////////
//     Function: UniqueIdAllocator::write
//       Access: Published
//  Description: ...intended for debugging only.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1842  3 out 1 1731  
848 14 Dtool_xqRv26dg 0 6 650 1845 0 14 Dtool_xqRv26dg 387 // Set this true to enable tracking of ReferenceCount pointer
// allocation/deallcation via the MemoryUsage object.  This is
// primarily useful for detecting memory leaks.  It has no effect when
// compiling in NDEBUG mode.
//
// This variable is no longer defined here; instead, it's a member of
// MemoryUsage.
//
// ConfigVariableBool track_memory_usage("track-memory-usage", false); 0 
849 14 Dtool_xqRvwVkD 0 6 651 1845 0 14 Dtool_xqRvwVkD 0 0 
850 14 Dtool_xqRvYTce 0 6 724 1847 0 14 Dtool_xqRvYTce 957 ////////////////////////////////////////////////////////////////////
//     Function: load_prc_file
//  Description: A convenience function for loading explicit prc files
//               from a disk file or from within a multifile (via the
//               virtual file system).  Save the return value and pass
//               it to unload_prc_file() if you ever want to unload
//               this file later.
//
//               The filename is first searched along the default prc
//               search path, and then also along the model path, for
//               convenience.
//
//               This function is defined in putil instead of in dtool
//               with the read of the prc stuff, so that it can take
//               advantage of the virtual file system (which is
//               defined in express), and the model path (which is in
//               putil).
//////////////////////////////////////////////////////////////////// 1 8 filename 1 1761  
851 14 Dtool_xqRvDEXZ 0 6 725 1847 0 14 Dtool_xqRvDEXZ 680 ////////////////////////////////////////////////////////////////////
//     Function: load_prc_file_data
//  Description: Another convenience function to load a prc file from
//               an explicit string, which represents the contents of
//               the prc file.
//
//               The first parameter is an arbitrary name to assign to
//               this in-memory prc file.  Supply a filename if the
//               data was read from a file, or use any other name that
//               is meaningful to you.  The name is only used when the
//               set of loaded prc files is listed.
//////////////////////////////////////////////////////////////////// 2 4 name 1 1723  4 data 1 1723  
852 14 Dtool_xqRvw809 0 6 726 1735 0 14 Dtool_xqRvw809 570 ////////////////////////////////////////////////////////////////////
//     Function: unload_prc_file
//  Description: Unloads (and deletes) a ConfigPage that represents a
//               prc file that was previously loaded by
//               load_prc_file().  Returns true if successful, false
//               if the file was unknown.
//
//               After this function has been called, the ConfigPage
//               pointer is no longer valid and should not be used
//               again.
//////////////////////////////////////////////////////////////////// 1 4 page 1 1847  
853 14 Dtool_xqRv3gn0 0 4 727 1727 0 14 Dtool_xqRv3gn0 345 ////////////////////////////////////////////////////////////////////
//     Function: hash_prc_variables
//  Description: Fills HashVal with the hash from the current prc file
//               state as reported by
//               ConfigVariableManager::write_prc_variables().
//////////////////////////////////////////////////////////////////// 1 4 hash 1 1849  
854 14 Dtool_xqRvWDKL 0 6 858 1719 0 14 Dtool_xqRvWDKL 0 2 10 this_class 1 1719  4 data 1 1723  
855 14 Dtool_xqRvoZ4w 0 6 859 1719 0 14 Dtool_xqRvoZ4w 0 3 9 unpickler 1 1719  10 this_class 1 1719  4 data 1 1723  
193
1658 11 CPTA_ushort 0 141313 41 ConstPointerToArray< unsigned short int > 41 ConstPointerToArray< unsigned short int > 0 0 0 1 859 869 0 9 860 861 862 863 864 865 866 867 868 0 0 1 0 1659 0 0 0 0 0

1659 40 PointerToArrayBase< unsigned short int > 0 26625 40 PointerToArrayBase< unsigned short int > 40 PointerToArrayBase< unsigned short int > 0 0 0 0 858 0 0 0 0 1 0 1660 0 0 0 0 0

1660 61 PointerToBase< ReferenceCountedVector< unsigned short int > > 0 43009 61 PointerToBase< ReferenceCountedVector< unsigned short int > > 61 PointerToBase< ReferenceCountedVector< unsigned short int > > 0 0 0 0 0 0 2 856 857 0 0 1 0 1661 0 0 0 0 0

1661 13 PointerToVoid 0 2049 13 PointerToVoid 13 PointerToVoid 0 0 0 0 0 0 0 0 0 0 0 0 635
////////////////////////////////////////////////////////////////////
//       Class : PointerToVoid
// Description : This is the non-template part of the base class for
//               PointerTo and ConstPointerTo.  It is necessary so we
//               can keep a pointer to a non-template class within the
//               ReferenceCount object, to implement weak reference
//               pointers--we need to have something to clean up when
//               the ReferenceCount object destructs.
//
//               This is the base class for PointerToBase<T>.
////////////////////////////////////////////////////////////////////

1662 19 DoubleBitMaskNative 0 26625 44 DoubleBitMask< BitMask< unsigned int, 32 > > 44 DoubleBitMask< BitMask< unsigned int, 32 > > 0 0 0 1 870 877 0 52 871 872 873 874 875 876 878 879 880 881 882 883 884 885 886 887 888 889 890 891 892 893 894 895 896 897 898 899 900 901 902 903 904 905 906 907 908 909 910 911 912 913 914 915 916 917 918 919 920 921 922 923 0 0 0 0 0 0

1663 17 QuadBitMaskNative 0 26625 61 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > > 61 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > > 0 0 0 1 924 931 0 52 925 926 927 928 929 930 932 933 934 935 936 937 938 939 940 941 942 943 944 945 946 947 948 949 950 951 952 953 954 955 956 957 958 959 960 961 962 963 964 965 966 967 968 969 970 971 972 973 974 975 976 977 0 0 0 0 0 0

1664 10 PTA_ushort 0 141313 36 PointerToArray< unsigned short int > 36 PointerToArray< unsigned short int > 0 0 0 1 978 995 0 16 979 980 981 982 983 984 985 986 987 988 989 990 991 992 993 994 0 0 1 0 1659 0 0 0 0 0

1665 7 CString 0 1050625 20 basic_string< char > 20 basic_string< char > 0 0 0 0 0 0 0 0 0 0 0 0 0

1666 13 AnimInterface 0 26625 13 AnimInterface 13 AnimInterface 0 0 0 0 996 0 17 997 998 999 1000 1001 1002 1003 1004 1005 1006 1007 1008 1009 1010 1011 1012 1013 0 0 0 0 0 464
////////////////////////////////////////////////////////////////////
//       Class : AnimInterface
// Description : This is the fundamental interface for things that
//               have a play/loop/stop type interface for frame-based
//               animation, such as animated characters.  This is the
//               base class for AnimControl and other, similar
//               classes.
////////////////////////////////////////////////////////////////////

1667 16 AutoTextureScale 0 532481 16 AutoTextureScale 16 AutoTextureScale 0 0 0 0 0 0 0 0 0 0 5 8 ATS_none 8 ATS_none 0 8 ATS_down 8 ATS_down 1 6 ATS_up 6 ATS_up 2 7 ATS_pad 7 ATS_pad 3 15 ATS_unspecified 15 ATS_unspecified 4 0 0

1668 9 UpdateSeq 0 141313 9 UpdateSeq 9 UpdateSeq 0 0 0 1 1014 1034 0 19 1015 1016 1017 1018 1019 1020 1021 1022 1023 1024 1025 1026 1027 1028 1029 1030 1031 1032 1033 0 0 0 0 0 1140
////////////////////////////////////////////////////////////////////
//       Class : UpdateSeq
// Description : This is a sequence number that increments
//               monotonically.  It can be used to track cache
//               updates, or serve as a kind of timestamp for any
//               changing properties.
//
//               A special class is used instead of simply an int, so
//               we can elegantly handle such things as wraparound and
//               special cases.  There are two special cases.
//               Firstly, a sequence number is 'initial' when it is
//               first created.  This sequence is older than any other
//               sequence number.  Secondly, a sequence number may be
//               explicitly set to 'old'.  This is older than any
//               other sequence number except 'initial'.  Finally, we
//               have the explicit number 'fresh', which is newer
//               than any other sequence number.  All other sequences
//               are numeric and are monotonically increasing.
////////////////////////////////////////////////////////////////////

1669 13 TypedWritable 0 75777 13 TypedWritable 13 TypedWritable 0 0 0 0 0 0 7 1035 1036 1037 1038 1039 1040 1041 0 0 1 0 1670 0 0 0 0 341
////////////////////////////////////////////////////////////////////
//       Class : TypedWritable
// Description : Base class for objects that can be written to and
//               read from Bam files.
//
//               See also TypedObject for detailed instructions.
////////////////////////////////////////////////////////////////////

1670 11 TypedObject 0 2049 11 TypedObject 11 TypedObject 0 0 0 0 0 0 0 0 0 0 0 0 3666
////////////////////////////////////////////////////////////////////
//       Class : TypedObject
// Description : This is an abstract class that all classes which
//               use TypeHandle, and also provide virtual functions to
//               support polymorphism, should inherit from.  Each
//               derived class should define get_type(), which should
//               return the specific type of the derived class.
//               Inheriting from this automatically provides support
//               for is_of_type() and is_exact_type().
//               
//               All classes that inherit directly or indirectly from
//               TypedObject should redefine get_type() and
//               force_init_type(), as shown below.  Some classes that
//               do not inherit from TypedObject may still declare
//               TypeHandles for themselves by defining methods called
//               get_class_type() and init_type().  Classes such as
//               these may serve as base classes, but the dynamic type
//               identification system will be limited.  Classes that
//               do not inherit from TypedObject need not define the
//               virtual functions get_type() and force_init_type()
//               (or any other virtual functions).
//               
//               There is a specific layout for defining the
//               overrides from this class.  Keeping the definitions
//               formatted just like these examples will allow
//               someone in the future to use a sed (or similar)
//               script to make global changes, if necessary.  Avoid
//               rearranging the braces or the order of the functions
//               unless you're ready to change them in every file all
//               at once.
//               
//               What follows are some examples that can be used in
//               new classes that you create.
//               
//               @par In the class definition (.h file):
//               @code
//               public:
//                 static TypeHandle get_class_type() {
//                   return _type_handle;
//                 }
//                 static void init_type() {
//                   <<<BaseClassOne>>>::init_type();
//                   <<<BaseClassTwo>>>::init_type();
//                   <<<BaseClassN>>>::init_type();
//                   register_type(_type_handle, "<<<ThisClassStringName>>>",
//                                 <<<BaseClassOne>>>::get_class_type(),
//                                 <<<BaseClassTwo>>>::get_class_type(),
//                                 <<<BaseClassN>>>::get_class_type());
//                 }
//                 virtual TypeHandle get_type() const {
//                   return get_class_type();
//                 }
//                 virtual TypeHandle force_init_type() {init_type(); return get_class_type();}
//               
//               private:
//                 static TypeHandle _type_handle;
//               @endcode
//               
//               @par In the class .cxx file:
//               @code
//               TypeHandle <<<ThisClassStringName>>>::_type_handle;
//               @endcode
//               
//               @par In the class config_<<<PackageName>>>.cxx file:
//               @code
//               ConfigureFn(config_<<<PackageName>>>) {
//                 <<<ClassOne>>>::init_type();
//                 <<<ClassTwo>>>::init_type();
//                 <<<ClassN>>>::init_type();
//               }
//               @endcode
////////////////////////////////////////////////////////////////////

1671 27 TypedWritableReferenceCount 0 141313 27 TypedWritableReferenceCount 27 TypedWritableReferenceCount 0 0 0 0 1048 0 2 1046 1047 0 0 2 3 1669 1042 1043 3 1672 1044 1045 0 0 722
////////////////////////////////////////////////////////////////////
//       Class : TypedWritableReferenceCount
// Description : A base class for things which need to inherit from
//               both TypedWritable and from ReferenceCount.  It's
//               convenient to define this intermediate base class
//               instead of multiply inheriting from the two classes
//               each time they are needed, so that we can sensibly
//               pass around pointers to things which are both
//               TypedWritables and ReferenceCounters.
//               
//               See also TypedObject for detailed instructions.
////////////////////////////////////////////////////////////////////

1672 14 ReferenceCount 0 2049 14 ReferenceCount 14 ReferenceCount 0 0 0 0 0 0 0 0 0 0 0 0 425
////////////////////////////////////////////////////////////////////
//       Class : ReferenceCount
// Description : A base class for all things that want to be
//               reference-counted.  ReferenceCount works in
//               conjunction with PointerTo to automatically delete
//               objects when the last pointer to them goes away.
////////////////////////////////////////////////////////////////////

1673 14 BamCacheRecord 0 26625 14 BamCacheRecord 14 BamCacheRecord 0 0 0 0 1053 0 19 1054 1055 1056 1057 1058 1059 1060 1061 1062 1063 1064 1065 1066 1067 1068 1069 1070 1071 1072 0 0 2 3 1671 1049 1050 3 1674 1051 1052 0 0 469
////////////////////////////////////////////////////////////////////
//       Class : BamCacheRecord
// Description : An instance of this class is written to the front of
//               a Bam or Txo file to make the file a cached instance
//               of some other loadable resource.  This record
//               contains information needed to test the validity of
//               the cache.
////////////////////////////////////////////////////////////////////

1674 14 LinkedListNode 0 1050625 14 LinkedListNode 14 LinkedListNode 0 0 0 0 0 0 0 0 0 0 0 0 762
////////////////////////////////////////////////////////////////////
//       Class : LinkedListNode
// Description : This just stores the pointers to implement a
//               doubly-linked list of some kind of object.  There are
//               occasions when a hand-rolled linked list is more
//               appropriate than an STL container.
//
//               Typically, each node of the linked list, as well as
//               the root of the list, will inherit from this class.
//
//               Note that this class is not inherently thread-safe;
//               derived classes are responsible for protecting any
//               calls into it within mutexes, if necessary.
////////////////////////////////////////////////////////////////////

1675 8 BamCache 0 26625 8 BamCache 8 BamCache 0 0 0 1 1073 1074 0 21 1075 1076 1077 1078 1079 1080 1081 1082 1083 1084 1085 1086 1087 1088 1089 1090 1091 1092 1093 1094 1095 0 0 0 0 0 948
////////////////////////////////////////////////////////////////////
//       Class : BamCache
// Description : This class maintains a cache of Bam and/or Txo
//               objects generated from model files and texture images
//               (as well as possibly other kinds of loadable objects
//               that can be stored in bam file format).
//
//               This class also maintains a persistent index that
//               lists all of the cached objects (see BamCacheIndex).
//               We go through some considerable effort to make sure
//               this index gets saved correctly to disk, even in the
//               presence of multiple different processes writing to
//               the same index, and without relying too heavily on
//               low-level os-provided file locks (which work poorly
//               with C++ iostreams).
////////////////////////////////////////////////////////////////////

1676 8 BamEnums 0 141313 8 BamEnums 8 BamEnums 0 0 0 0 1096 0 0 0 0 0 0 3 1677 1678 1679 288
////////////////////////////////////////////////////////////////////
//       Class : BamEnums
// Description : This class exists just to provide scoping for the
//               enums shared by BamReader and BamWriter.
////////////////////////////////////////////////////////////////////

1677 9 BamEndian 0 794624 19 BamEnums::BamEndian 19 BamEnums::BamEndian 1676 0 0 0 0 0 0 0 0 0 3 12 BE_bigendian 22 BamEnums::BE_bigendian 0 15 BE_littleendian 25 BamEnums::BE_littleendian 1 9 BE_native 19 BamEnums::BE_native 1 0 345
// This defines an enumerated type used to represent the endianness of
// certain numeric values stored in a Bam file.  It really has only
// two possible values, either BE_bigendian or BE_littleendian; but
// through a preprocessor trick we also add BE_native, which is the
// same numerically as whichever value the hardware supports natively.

1678 13 BamObjectCode 0 794624 23 BamEnums::BamObjectCode 23 BamEnums::BamObjectCode 1676 0 0 0 0 0 0 0 0 0 5 8 BOC_push 18 BamEnums::BOC_push 0 7 BOC_pop 17 BamEnums::BOC_pop 1 11 BOC_adjunct 21 BamEnums::BOC_adjunct 2 10 BOC_remove 20 BamEnums::BOC_remove 3 13 BOC_file_data 23 BamEnums::BOC_file_data 4 0 565
// This is the code written along with each object.  It is used to
// control object scoping.  A BOC_push includes an object
// definition, and will always be eventually paired with a BOC_pop
// (which does not).  A BOC_adjunct includes an object definition
// but does not push the level; it is associated with the current
// level.  BOC_remove lists object ID's that have been deallocated
// on the sender end.  BOC_file_data may appear at any level and
// indicates the following datagram contains auxiliary file data
// that may be referenced by a later object.

1679 14 BamTextureMode 0 794624 24 BamEnums::BamTextureMode 24 BamEnums::BamTextureMode 1676 0 0 0 0 0 0 0 0 0 5 13 BTM_unchanged 23 BamEnums::BTM_unchanged 0 12 BTM_fullpath 22 BamEnums::BTM_fullpath 1 12 BTM_relative 22 BamEnums::BTM_relative 2 12 BTM_basename 22 BamEnums::BTM_basename 3 11 BTM_rawdata 21 BamEnums::BTM_rawdata 4 0 76
// This enum is used to control how textures are written to a bam
// stream.

1680 13 LoaderOptions 0 141313 13 LoaderOptions 13 LoaderOptions 0 0 0 1 1097 1108 0 10 1098 1099 1100 1101 1102 1103 1104 1105 1106 1107 0 0 0 0 2 1681 1682 257
////////////////////////////////////////////////////////////////////
//       Class : LoaderOptions
// Description : Specifies parameters that may be passed to the
//               loader.
////////////////////////////////////////////////////////////////////

1681 11 LoaderFlags 0 794624 26 LoaderOptions::LoaderFlags 26 LoaderOptions::LoaderFlags 1680 0 0 0 0 0 0 0 0 0 10 9 LF_search 24 LoaderOptions::LF_search 1 16 LF_report_errors 31 LoaderOptions::LF_report_errors 2 19 LF_convert_skeleton 34 LoaderOptions::LF_convert_skeleton 4 19 LF_convert_channels 34 LoaderOptions::LF_convert_channels 8 15 LF_convert_anim 30 LoaderOptions::LF_convert_anim 12 16 LF_no_disk_cache 31 LoaderOptions::LF_no_disk_cache 16 15 LF_no_ram_cache 30 LoaderOptions::LF_no_ram_cache 32 11 LF_no_cache 26 LoaderOptions::LF_no_cache 48 13 LF_cache_only 28 LoaderOptions::LF_cache_only 64 17 LF_allow_instance 32 LoaderOptions::LF_allow_instance 128 0 33
// Flags for loading model files.

1682 12 TextureFlags 0 794624 27 LoaderOptions::TextureFlags 27 LoaderOptions::TextureFlags 1680 0 0 0 0 0 0 0 0 0 7 10 TF_preload 25 LoaderOptions::TF_preload 4 17 TF_preload_simple 32 LoaderOptions::TF_preload_simple 8 11 TF_allow_1d 26 LoaderOptions::TF_allow_1d 16 19 TF_generate_mipmaps 34 LoaderOptions::TF_generate_mipmaps 32 12 TF_multiview 27 LoaderOptions::TF_multiview 64 10 TF_integer 25 LoaderOptions::TF_integer 128 8 TF_float 23 LoaderOptions::TF_float 256 0 35
// Flags for loading texture files.

1683 9 BamReader 0 26625 9 BamReader 9 BamReader 0 0 0 1 1109 1110 0 18 1111 1112 1113 1114 1115 1116 1117 1118 1119 1120 1121 1122 1123 1124 1125 1126 1127 1128 0 0 1 0 1676 0 0 0 0 1870
////////////////////////////////////////////////////////////////////
//       Class : BamReader
// Description : This is the fundamental interface for extracting
//               binary objects from a Bam file, as generated by a
//               BamWriter.
//
//               A Bam file can be thought of as a linear collection
//               of objects.  Each object is an instance of a class
//               that inherits, directly or indirectly, from
//               TypedWritable.  The objects may include pointers to
//               other objects within the Bam file; the BamReader
//               automatically manages these (with help from code
//               within each class) and restores the pointers
//               correctly.
//
//               This is the abstract interface and does not
//               specifically deal with disk files, but rather with a
//               DatagramGenerator of some kind, which is simply a
//               linear source of Datagrams.  It is probably from a
//               disk file, but it might conceivably be streamed
//               directly from a network or some such nonsense.
//
//               Bam files are most often used to store scene graphs
//               or subgraphs, and by convention they are given
//               filenames ending in the extension ".bam" when they
//               are used for this purpose.  However, a Bam file may
//               store any arbitrary list of TypedWritable objects;
//               in this more general usage, they are given filenames
//               ending in ".boo" to differentiate them from the more
//               common scene graph files.
//
//               See also BamFile, which defines a higher-level
//               interface to read and write Bam files on disk.
////////////////////////////////////////////////////////////////////

1684 9 BamWriter 0 26625 9 BamWriter 9 BamWriter 0 0 0 1 1129 1130 0 11 1131 1132 1133 1134 1135 1136 1137 1138 1139 1140 1141 0 0 1 0 1676 0 0 0 0 1949
////////////////////////////////////////////////////////////////////
//       Class : BamWriter
// Description : This is the fundamental interface for writing binary
//               objects to a Bam file, to be extracted later by a
//               BamReader.
//
//               A Bam file can be thought of as a linear collection
//               of objects.  Each object is an instance of a class
//               that inherits, directly or indirectly, from
//               TypedWritable.  The objects may include pointers to
//               other objects; the BamWriter automatically manages
//               these (with help from code within each class) and
//               writes all referenced objects to the file in such a
//               way that the pointers may be correctly restored
//               later.
//
//               This is the abstract interface and does not
//               specifically deal with disk files, but rather with a
//               DatagramSink of some kind, which simply accepts a
//               linear stream of Datagrams.  It is probably written
//               to a disk file, but it might conceivably be streamed
//               directly to a network or some such nonsense.
//
//               Bam files are most often used to store scene graphs
//               or subgraphs, and by convention they are given
//               filenames ending in the extension ".bam" when they
//               are used for this purpose.  However, a Bam file may
//               store any arbitrary list of TypedWritable objects;
//               in this more general usage, they are given filenames
//               ending in ".boo" to differentiate them from the more
//               common scene graph files.
//
//               See also BamFile, which defines a higher-level
//               interface to read and write Bam files on disk.
////////////////////////////////////////////////////////////////////

1685 9 BitMask16 0 26625 33 BitMask< unsigned short int, 16 > 33 BitMask< unsigned short int, 16 > 0 0 0 1 1142 1149 0 62 1143 1144 1145 1146 1147 1148 1150 1151 1152 1153 1154 1155 1156 1157 1158 1159 1160 1161 1162 1163 1164 1165 1166 1167 1168 1169 1170 1171 1172 1173 1174 1175 1176 1177 1178 1179 1180 1181 1182 1183 1184 1185 1186 1187 1188 1189 1190 1191 1192 1193 1194 1195 1196 1197 1198 1199 1200 1201 1202 1203 1204 1205 0 0 0 0 0 0

1686 9 BitMask32 0 26625 27 BitMask< unsigned int, 32 > 27 BitMask< unsigned int, 32 > 0 0 0 1 1206 1213 0 62 1207 1208 1209 1210 1211 1212 1214 1215 1216 1217 1218 1219 1220 1221 1222 1223 1224 1225 1226 1227 1228 1229 1230 1231 1232 1233 1234 1235 1236 1237 1238 1239 1240 1241 1242 1243 1244 1245 1246 1247 1248 1249 1250 1251 1252 1253 1254 1255 1256 1257 1258 1259 1260 1261 1262 1263 1264 1265 1266 1267 1268 1269 0 0 0 0 0 0

1687 9 BitMask64 0 26625 31 BitMask< unsigned __int64, 64 > 31 BitMask< unsigned __int64, 64 > 0 0 0 1 1270 1277 0 62 1271 1272 1273 1274 1275 1276 1278 1279 1280 1281 1282 1283 1284 1285 1286 1287 1288 1289 1290 1291 1292 1293 1294 1295 1296 1297 1298 1299 1300 1301 1302 1303 1304 1305 1306 1307 1308 1309 1310 1311 1312 1313 1314 1315 1316 1317 1318 1319 1320 1321 1322 1323 1324 1325 1326 1327 1328 1329 1330 1331 1332 1333 0 0 0 0 0 0

1688 8 BitArray 0 26625 8 BitArray 8 BitArray 0 0 0 1 1334 1341 0 57 1335 1336 1337 1338 1339 1340 1342 1343 1344 1345 1346 1347 1348 1349 1350 1351 1352 1353 1354 1355 1356 1357 1358 1359 1360 1361 1362 1363 1364 1365 1366 1367 1368 1369 1370 1371 1372 1373 1374 1375 1376 1377 1378 1379 1380 1381 1382 1383 1384 1385 1386 1387 1388 1389 1390 1391 1392 0 0 0 0 0 425
////////////////////////////////////////////////////////////////////
//       Class : BitArray
// Description : A dynamic array with an unlimited number of bits.
//
//               This is similar to a BitMask, except it appears to
//               contain an infinite number of bits.  You can use it
//               very much as you would use a BitMask.
////////////////////////////////////////////////////////////////////

1689 12 ButtonHandle 0 141313 12 ButtonHandle 12 ButtonHandle 0 0 0 1 1393 1403 0 9 1394 1395 1396 1397 1398 1399 1400 1401 1402 0 0 0 0 0 364
////////////////////////////////////////////////////////////////////
//       Class : ButtonHandle
// Description : A ButtonHandle represents a single button from any
//               device, including keyboard buttons and mouse buttons
//               (but see KeyboardButton and MouseButton).
////////////////////////////////////////////////////////////////////

1690 14 ButtonRegistry 0 141313 14 ButtonRegistry 14 ButtonRegistry 0 0 0 0 1409 0 5 1404 1405 1406 1407 1408 0 0 0 0 0 409
////////////////////////////////////////////////////////////////////
//       Class : ButtonRegistry
// Description : The ButtonRegistry class maintains all the assigned
//               ButtonHandles in a given system.  There should be only
//               one ButtonRegistry class during the lifetime of the
//               application.
////////////////////////////////////////////////////////////////////

1691 9 ButtonMap 0 141313 9 ButtonMap 9 ButtonMap 0 0 0 0 1417 0 7 1410 1411 1412 1413 1414 1415 1416 0 0 1 0 1692 0 0 0 0 571
////////////////////////////////////////////////////////////////////
//       Class : ButtonMap
// Description : This class represents a map containing all of the
//               buttons of a (keyboard) device, though it can also
//               be used as a generic mapping between ButtonHandles.
//               It maps an underlying 'raw' button to a 'virtual'
//               button, which may optionally be associated with an
//               appropriate platform-specific name for the button.
////////////////////////////////////////////////////////////////////

1692 19 TypedReferenceCount 0 2049 19 TypedReferenceCount 19 TypedReferenceCount 0 0 0 0 0 0 0 0 0 0 0 0 710
////////////////////////////////////////////////////////////////////
//       Class : TypedReferenceCount
// Description : A base class for things which need to inherit from
//               both TypedObject and from ReferenceCount.  It's
//               convenient to define this intermediate base class
//               instead of multiply inheriting from the two classes
//               each time they are needed, so that we can sensibly
//               pass around pointers to things which are both
//               TypedObjects and ReferenceCounters.
//               
//               See also TypedObject for detailed instructions.
////////////////////////////////////////////////////////////////////

1693 14 CallbackObject 0 141313 14 CallbackObject 14 CallbackObject 0 0 0 0 1420 0 2 1418 1419 0 0 1 0 1692 0 0 0 0 527
////////////////////////////////////////////////////////////////////
//       Class : CallbackObject
// Description : This is a generic object that can be assigned to a
//               callback at various points in the rendering process.
//               This is actually a base class for a handful of
//               specialized callback object types.  You can also
//               subclass it yourself to make your own callback
//               handler.
////////////////////////////////////////////////////////////////////

1694 33 CachedTypedWritableReferenceCount 0 43009 33 CachedTypedWritableReferenceCount 33 CachedTypedWritableReferenceCount 0 0 0 0 0 0 5 1421 1422 1423 1424 1425 0 0 1 0 1671 0 0 0 0 1112
////////////////////////////////////////////////////////////////////
//       Class : CachedTypedWritableReferenceCount
// Description : This is a special extension to ReferenceCount that
//               includes dual reference counts: the standard
//               reference count number, which includes all references
//               to the object, and a separate number (the cache
//               reference count) that counts the number of references
//               to the object just within its cache alone.  When
//               get_ref_count() == get_cache_ref_count(), the object
//               is not referenced outside the cache.
//
//               The cache refs must be explicitly maintained; there
//               is no PointerTo<> class to maintain the cache
//               reference counts automatically.  The cache reference
//               count is automatically included in the overall
//               reference count: calling cache_ref() and
//               cache_unref() automatically calls ref() and unref().
////////////////////////////////////////////////////////////////////

1695 12 CallbackData 0 141313 12 CallbackData 12 CallbackData 0 0 0 0 1429 0 3 1426 1427 1428 0 0 1 0 1670 0 0 0 0 610
////////////////////////////////////////////////////////////////////
//       Class : CallbackData
// Description : This is a generic data block that is passed along to
//               a CallbackObject when a callback is made.  It
//               contains data specific to the particular callback
//               type in question.
//
//               This is actually an abstract base class and contains
//               no data.  Specializations of this class will contain
//               the actual data relevant to each callback type.
////////////////////////////////////////////////////////////////////

1696 7 TimeVal 0 141313 7 TimeVal 7 TimeVal 0 0 0 1 1430 1433 0 2 1431 1432 0 0 0 0 0 0

1697 11 ClockObject 0 75777 11 ClockObject 11 ClockObject 0 0 0 1 1434 0 0 28 1435 1436 1437 1438 1439 1440 1441 1442 1443 1444 1445 1446 1447 1448 1449 1450 1451 1452 1453 1454 1455 1456 1457 1458 1459 1460 1461 1462 0 0 1 0 1672 0 0 0 1 1698 1457
////////////////////////////////////////////////////////////////////
//       Class : ClockObject
// Description : A ClockObject keeps track of elapsed real time and
//               discrete time.  In normal mode, get_frame_time()
//               returns the time as of the last time tick() was
//               called.  This is the "discrete" time, and is usually
//               used to get the time as of, for instance, the
//               beginning of the current frame.
//
//               In other modes, as set by set_mode() or the
//               clock-mode config variable, get_frame_time() may
//               return other values to simulate different timing
//               effects, for instance to perform non-real-time
//               animation.  See set_mode().
//
//               In all modes, get_real_time() always returns the
//               elapsed real time in seconds since the ClockObject
//               was constructed, or since it was last reset.
//
//               You can create your own ClockObject whenever you want
//               to have your own local timer.  There is also a
//               default, global ClockObject intended to represent
//               global time for the application; this is normally set
//               up to tick every frame so that its get_frame_time()
//               will return the time for the current frame.
////////////////////////////////////////////////////////////////////

1698 4 Mode 0 794624 17 ClockObject::Mode 17 ClockObject::Mode 1697 0 0 0 0 0 0 0 0 0 8 8 M_normal 21 ClockObject::M_normal 0 15 M_non_real_time 28 ClockObject::M_non_real_time 1 8 M_forced 21 ClockObject::M_forced 2 9 M_degrade 22 ClockObject::M_degrade 3 7 M_slave 20 ClockObject::M_slave 4 9 M_limited 22 ClockObject::M_limited 5 9 M_integer 22 ClockObject::M_integer 6 17 M_integer_limited 30 ClockObject::M_integer_limited 7 0 0

1699 17 CopyOnWriteObject 0 141313 17 CopyOnWriteObject 17 CopyOnWriteObject 0 0 0 0 1467 0 2 1465 1466 0 0 1 0 1694 0 0 0 0 376
////////////////////////////////////////////////////////////////////
//       Class : CopyOnWriteObject
// Description : This base class provides basic reference counting,
//               but also can be used with a CopyOnWritePointer to
//               provide get_read_pointer() and get_write_pointer().
////////////////////////////////////////////////////////////////////

1700 17 DatagramInputFile 0 75777 17 DatagramInputFile 17 DatagramInputFile 0 0 0 1 1468 0 0 4 1469 1470 1471 1472 0 0 1 0 1701 0 0 0 0 340
////////////////////////////////////////////////////////////////////
//       Class : DatagramInputFile
// Description : This class can be used to read a binary file that
//               consists of an arbitrary header followed by a number
//               of datagrams.
////////////////////////////////////////////////////////////////////

1701 17 DatagramGenerator 0 2049 17 DatagramGenerator 17 DatagramGenerator 0 0 0 0 0 0 0 0 0 0 0 0 335
////////////////////////////////////////////////////////////////////
//       Class : DatagramGenerator
// Description : This class defines the abstract interace to any
//               source of datagrams, whether it be from a file or
//               from the net.
////////////////////////////////////////////////////////////////////

1702 14 KeyboardButton 0 141313 14 KeyboardButton 14 KeyboardButton 0 0 0 0 1525 0 52 1473 1474 1475 1476 1477 1478 1479 1480 1481 1482 1483 1484 1485 1486 1487 1488 1489 1490 1491 1492 1493 1494 1495 1496 1497 1498 1499 1500 1501 1502 1503 1504 1505 1506 1507 1508 1509 1510 1511 1512 1513 1514 1515 1516 1517 1518 1519 1520 1521 1522 1523 1524 0 0 0 0 0 369
////////////////////////////////////////////////////////////////////
//       Class : KeyboardButton
// Description : This class is just used as a convenient namespace for
//               grouping all of these handy functions that return
//               buttons which map to standard keyboard keys.
////////////////////////////////////////////////////////////////////

1703 10 LineStream 0 141313 10 LineStream 10 LineStream 0 0 0 1 1526 1530 0 3 1527 1528 1529 0 0 1 0 1704 0 0 0 0 761
////////////////////////////////////////////////////////////////////
//       Class : LineStream
// Description : This is a special ostream that writes to a memory
//               buffer, like ostrstream.  However, its contents can
//               be continuously extracted as a sequence of lines of
//               text.
//
//               Unlike ostrstream, which can only be extracted from
//               once (and then the buffer freezes and it can no
//               longer be written to), the LineStream is not
//               otherwise affected when a line of text is extracted.
//               More text can still be written to it and continuously
//               extracted.
////////////////////////////////////////////////////////////////////

1704 7 ostream 0 2049 7 ostream 7 ostream 0 0 0 0 0 0 0 0 0 0 0 0 0

1705 15 ModifierButtons 0 26625 15 ModifierButtons 15 ModifierButtons 0 0 0 1 1535 1536 0 23 1537 1538 1539 1540 1541 1542 1543 1544 1545 1546 1547 1548 1549 1550 1551 1552 1553 1554 1555 1556 1557 1558 1559 1 1851 0 0 0 0 343
////////////////////////////////////////////////////////////////////
//       Class : ModifierButtons
// Description : This class monitors the state of a number of
//               individual buttons and tracks whether each button is
//               known to be down or up.
////////////////////////////////////////////////////////////////////

1706 11 MouseButton 0 141313 11 MouseButton 11 MouseButton 0 0 0 0 1571 0 11 1560 1561 1562 1563 1564 1565 1566 1567 1568 1569 1570 0 0 0 0 0 366
////////////////////////////////////////////////////////////////////
//       Class : MouseButton
// Description : This class is just used as a convenient namespace for
//               grouping all of these handy functions that return
//               buttons which map to standard mouse buttons.
////////////////////////////////////////////////////////////////////

1707 9 MouseData 0 141313 9 MouseData 9 MouseData 0 0 0 1 1572 1578 0 5 1573 1574 1575 1576 1577 0 0 0 0 0 326
////////////////////////////////////////////////////////////////////
//       Class : MouseData
// Description : Holds the data that might be generated by a 2-d
//               pointer input device, such as the mouse in the
//               GraphicsWindow.
////////////////////////////////////////////////////////////////////

1708 24 NodeCachedReferenceCount 0 43009 24 NodeCachedReferenceCount 24 NodeCachedReferenceCount 0 0 0 0 0 0 6 1579 1580 1581 1582 1583 1584 0 0 1 0 1694 0 0 0 1 1709 2143
////////////////////////////////////////////////////////////////////
//       Class : NodeCachedReferenceCount
// Description : This class further specializes
//               CachedTypedWritableReferenceCount to also add a
//               node_ref_count, for the purposes of counting the
//               number of times the object is referenced by a "node",
//               presumably a PandaNode.
//
//               This essentially combines the functionality of
//               NodeReferenceCount and
//               CachedTypedWritableReferenceCount, so that a
//               derivative of this object actually has three
//               counters: the standard reference count, the "cache"
//               reference count, and the "node" reference count.
//               Rather than multiply inheriting from the two
//               reference count classes, we inherit only from
//               CachedTypedWritableReferenceCount and simply
//               duplicate the functionality of NodeReferenceCount, to
//               avoid all of the problems associated with multiple
//               inheritance.
//
//               The intended design is to use this as a base class
//               for RenderState and TransformState, both of which are
//               held by PandaNodes, and also have caches which are
//               independently maintained.  By keeping track of how
//               many nodes hold a pointer to a particular object, we
//               can classify each object into node-referenced,
//               cache-referenced, or other, which is primarily useful
//               for PStats reporting.
//
//               As with CachedTypedWritableReferenceCount's
//               cache_ref() and cache_unref(), the new methods
//               node_ref() and node_unref() automatically increment
//               and decrement the primary reference count as well.
//               In this case, however, there does exist a
//               NodePointerTo<> class to maintain the node_ref
//               counters automatically.
////////////////////////////////////////////////////////////////////

1709 10 Referenced 0 794624 36 NodeCachedReferenceCount::Referenced 36 NodeCachedReferenceCount::Referenced 1708 0 0 0 0 0 0 0 0 0 2 6 R_node 32 NodeCachedReferenceCount::R_node 1 7 R_cache 33 NodeCachedReferenceCount::R_cache 2 0 0

1710 11 SparseArray 0 26625 11 SparseArray 11 SparseArray 0 0 0 1 1585 1592 0 52 1586 1587 1588 1589 1590 1591 1593 1594 1595 1596 1597 1598 1599 1600 1601 1602 1603 1604 1605 1606 1607 1608 1609 1610 1611 1612 1613 1614 1615 1616 1617 1618 1619 1620 1621 1622 1623 1624 1625 1626 1627 1628 1629 1630 1631 1632 1633 1634 1635 1636 1637 1638 0 0 0 0 0 1136
////////////////////////////////////////////////////////////////////
//       Class : SparseArray
// Description : This class records a set of integers, where each
//               integer is either present or not present in the set.
//
//               It is similar in principle and in interface to a
//               BitArray (which can be thought of as a set of
//               integers, one integer corresponding to each different
//               bit position), but the SparseArray is implemented as
//               a list of min/max subrange lists, rather than as a
//               bitmask.  
//
//               This makes it particularly efficient for storing sets
//               which consist of large sections of consecutively
//               included or consecutively excluded elements, with
//               arbitrarily large integers, but particularly
//               inefficient for doing boolean operations such as & or
//               |.
//
//               Also, unlike BitArray, the SparseArray can store
//               negative integers.
////////////////////////////////////////////////////////////////////

1711 20 PythonCallbackObject 0 75777 20 PythonCallbackObject 20 PythonCallbackObject 0 0 0 1 1639 1420 0 6 1640 1641 1642 1643 1644 1645 0 0 1 0 1693 0 0 0 0 371
////////////////////////////////////////////////////////////////////
//       Class : PythonCallbackObject
// Description : This is a specialization on CallbackObject to allow
//               a callback to directly call an arbitarary Python
//               function.  Powerful!  But use with caution.
////////////////////////////////////////////////////////////////////

1712 20 WritableConfigurable 0 141313 20 WritableConfigurable 20 WritableConfigurable 0 0 0 0 1647 0 1 1646 0 0 1 0 1669 0 0 0 0 815
////////////////////////////////////////////////////////////////////
// Defines
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : WritableConfigurable
// Description : Defined as a fix to allow creating Configurable and
//               Writable objects.  Otherwise the compiler gets
//               confused since both TypedWritable and Configurable
//               inherit from TypedObject.
//
//               An object that has data or parameters that are set
//               less frequently (at least occasionally) than every
//               frame.  We can cache the configuration info by
//               by using the "dirty" flag.
////////////////////////////////////////////////////////////////////

1713 17 UniqueIdAllocator 0 26625 17 UniqueIdAllocator 17 UniqueIdAllocator 0 0 0 1 1648 1649 0 6 1650 1651 1652 1653 1654 1655 0 0 0 0 0 1207
////////////////////////////////////////////////////////////////////
//       Class : UniqueIdAllocator
// Description : Manage a set of ID values from min to max inclusive.
//               The ID numbers that are freed will be allocated
//               (reused) in the same order.  I.e. the oldest ID numbers
//               will be allocated.
//
//               This implementation will use 4 bytes per id number,
//               plus a few bytes of management data.  e.g. 10,000
//               ID numbers will use 40KB.
//
//               Also be advised that ID -1 and -2 are used internally by
//               the allocator.  If allocate returns IndexEnd (-1) then
//               the allocator is out of free ID numbers.
//
//               There are other implementations that can better leverage
//               runs of used or unused IDs or use bit arrays for the
//               IDs.  But, it takes extra work to track the age of
//               freed IDs, which is required for what we wanted.  If
//               you would like to kick around other implementation
//               ideas, please contact Schuyler.
////////////////////////////////////////////////////////////////////

1714 49 ConstPointerToArray< unsigned short int > const * 0 8576 49 ConstPointerToArray< unsigned short int > const * 49 ConstPointerToArray< unsigned short int > const * 0 0 1715 0 0 0 0 0 0 0 0 0 0

1715 47 ConstPointerToArray< unsigned short int > const 0 8832 47 ConstPointerToArray< unsigned short int > const 47 ConstPointerToArray< unsigned short int > const 0 0 1658 0 0 0 0 0 0 0 0 0 0

1716 43 ConstPointerToArray< unsigned short int > * 0 8576 43 ConstPointerToArray< unsigned short int > * 43 ConstPointerToArray< unsigned short int > * 0 0 1658 0 0 0 0 0 0 0 0 0 0

1717 44 PointerToArray< unsigned short int > const * 0 8576 44 PointerToArray< unsigned short int > const * 44 PointerToArray< unsigned short int > const * 0 0 1718 0 0 0 0 0 0 0 0 0 0

1718 42 PointerToArray< unsigned short int > const 0 8832 42 PointerToArray< unsigned short int > const 42 PointerToArray< unsigned short int > const 0 0 1664 0 0 0 0 0 0 0 0 0 0

1719 10 PyObject * 0 8576 10 PyObject * 10 PyObject * 0 0 1720 0 0 0 0 0 0 0 0 0 0

1720 8 PyObject 0 2048 8 PyObject 8 PyObject 0 0 0 0 0 0 0 0 0 0 0 0 0

1721 12 unsigned int 0 8198 12 unsigned int 12 unsigned int 0 1 0 0 0 0 0 0 0 0 0 0 0

1722 18 unsigned short int 0 8262 18 unsigned short int 18 unsigned short int 0 1 0 0 0 0 0 0 0 0 0 0 0

1723 13 atomic string 0 2 13 atomic string 13 atomic string 0 7 0 0 0 0 0 0 0 0 0 0 0

1724 3 int 0 8194 3 int 3 int 0 1 0 0 0 0 0 0 0 0 0 0 0

1725 11 Py_buffer * 0 8576 11 Py_buffer * 11 Py_buffer * 0 0 1726 0 0 0 0 0 0 0 0 0 0

1726 9 Py_buffer 0 1024 9 Py_buffer 9 Py_buffer 0 0 0 0 0 0 0 0 0 0 0 0 0

1727 4 void 0 8194 4 void 4 void 0 6 0 0 0 0 0 0 0 0 0 0 0

1728 63 PointerToBase< ReferenceCountedVector< unsigned short int > > * 0 8576 63 PointerToBase< ReferenceCountedVector< unsigned short int > > * 63 PointerToBase< ReferenceCountedVector< unsigned short int > > * 0 0 1660 0 0 0 0 0 0 0 0 0 0

1729 69 PointerToBase< ReferenceCountedVector< unsigned short int > > const * 0 8576 69 PointerToBase< ReferenceCountedVector< unsigned short int > > const * 69 PointerToBase< ReferenceCountedVector< unsigned short int > > const * 0 0 1730 0 0 0 0 0 0 0 0 0 0

1730 67 PointerToBase< ReferenceCountedVector< unsigned short int > > const 0 8832 67 PointerToBase< ReferenceCountedVector< unsigned short int > > const 67 PointerToBase< ReferenceCountedVector< unsigned short int > > const 0 0 1660 0 0 0 0 0 0 0 0 0 0

1731 9 ostream * 0 8576 9 ostream * 9 ostream * 0 0 1704 0 0 0 0 0 0 0 0 0 0

1732 46 DoubleBitMask< BitMask< unsigned int, 32 > > * 0 8576 46 DoubleBitMask< BitMask< unsigned int, 32 > > * 46 DoubleBitMask< BitMask< unsigned int, 32 > > * 0 0 1662 0 0 0 0 0 0 0 0 0 0

1733 52 DoubleBitMask< BitMask< unsigned int, 32 > > const * 0 8576 52 DoubleBitMask< BitMask< unsigned int, 32 > > const * 52 DoubleBitMask< BitMask< unsigned int, 32 > > const * 0 0 1734 0 0 0 0 0 0 0 0 0 0

1734 50 DoubleBitMask< BitMask< unsigned int, 32 > > const 0 8832 50 DoubleBitMask< BitMask< unsigned int, 32 > > const 50 DoubleBitMask< BitMask< unsigned int, 32 > > const 0 0 1662 0 0 0 0 0 0 0 0 0 0

1735 4 bool 0 8194 4 bool 4 bool 0 4 0 0 0 0 0 0 0 0 0 0 0

1736 10 TypeHandle 0 2048 10 TypeHandle 10 TypeHandle 0 0 0 0 0 0 0 0 0 0 0 0 1098
////////////////////////////////////////////////////////////////////
//       Class : TypeHandle
// Description : TypeHandle is the identifier used to differentiate
//               C++ class types.  Any C++ classes that inherit from
//               some base class, and must be differentiated at run
//               time, should store a static TypeHandle object that
//               can be queried through a static member function
//               named get_class_type().  Most of the time, it is also
//               desirable to inherit from TypedObject, which provides
//               some virtual functions to return the TypeHandle for a
//               particular instance.
//
//               At its essence, a TypeHandle is simply a unique
//               identifier that is assigned by the TypeRegistry.  The
//               TypeRegistry stores a tree of TypeHandles, so that
//               ancestry of a particular type may be queried, and the
//               type name may be retrieved for run-time display.
////////////////////////////////////////////////////////////////////

1737 12 TypeHandle * 0 8576 12 TypeHandle * 12 TypeHandle * 0 0 1736 0 0 0 0 0 0 0 0 0 0

1738 63 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > > * 0 8576 63 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > > * 63 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > > * 0 0 1663 0 0 0 0 0 0 0 0 0 0

1739 69 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > > const * 0 8576 69 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > > const * 69 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > > const * 0 0 1740 0 0 0 0 0 0 0 0 0 0

1740 67 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > > const 0 8832 67 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > > const 67 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > > const 0 0 1663 0 0 0 0 0 0 0 0 0 0

1741 38 PointerToArray< unsigned short int > * 0 8576 38 PointerToArray< unsigned short int > * 38 PointerToArray< unsigned short int > * 0 0 1664 0 0 0 0 0 0 0 0 0 0

1742 15 AnimInterface * 0 8576 15 AnimInterface * 15 AnimInterface * 0 0 1666 0 0 0 0 0 0 0 0 0 0

1743 6 double 0 8194 6 double 6 double 0 3 0 0 0 0 0 0 0 0 0 0 0

1744 21 AnimInterface const * 0 8576 21 AnimInterface const * 21 AnimInterface const * 0 0 1745 0 0 0 0 0 0 0 0 0 0

1745 19 AnimInterface const 0 8832 19 AnimInterface const 19 AnimInterface const 0 0 1666 0 0 0 0 0 0 0 0 0 0

1746 11 UpdateSeq * 0 8576 11 UpdateSeq * 11 UpdateSeq * 0 0 1668 0 0 0 0 0 0 0 0 0 0

1747 17 UpdateSeq const * 0 8576 17 UpdateSeq const * 17 UpdateSeq const * 0 0 1748 0 0 0 0 0 0 0 0 0 0

1748 15 UpdateSeq const 0 8832 15 UpdateSeq const 15 UpdateSeq const 0 0 1668 0 0 0 0 0 0 0 0 0 0

1749 8 long int 0 8210 8 long int 8 long int 0 1 0 0 0 0 0 0 0 0 0 0 0

1750 15 TypedWritable * 0 8576 15 TypedWritable * 15 TypedWritable * 0 0 1669 0 0 0 0 0 0 0 0 0 0

1751 21 TypedWritable const * 0 8576 21 TypedWritable const * 21 TypedWritable const * 0 0 1752 0 0 0 0 0 0 0 0 0 0

1752 19 TypedWritable const 0 8832 19 TypedWritable const 19 TypedWritable const 0 0 1669 0 0 0 0 0 0 0 0 0 0

1753 22 basic_string< char > * 0 8576 22 basic_string< char > * 22 basic_string< char > * 0 0 1665 0 0 0 0 0 0 0 0 0 0

1754 11 BamWriter * 0 8576 11 BamWriter * 11 BamWriter * 0 0 1684 0 0 0 0 0 0 0 0 0 0

1755 11 BamReader * 0 8576 11 BamReader * 11 BamReader * 0 0 1683 0 0 0 0 0 0 0 0 0 0

1756 29 TypedWritableReferenceCount * 0 8576 29 TypedWritableReferenceCount * 29 TypedWritableReferenceCount * 0 0 1671 0 0 0 0 0 0 0 0 0 0

1757 16 ReferenceCount * 0 8576 16 ReferenceCount * 16 ReferenceCount * 0 0 1672 0 0 0 0 0 0 0 0 0 0

1758 22 BamCacheRecord const * 0 8576 22 BamCacheRecord const * 22 BamCacheRecord const * 0 0 1759 0 0 0 0 0 0 0 0 0 0

1759 20 BamCacheRecord const 0 8832 20 BamCacheRecord const 20 BamCacheRecord const 0 0 1673 0 0 0 0 0 0 0 0 0 0

1760 16 BamCacheRecord * 0 8576 16 BamCacheRecord * 16 BamCacheRecord * 0 0 1673 0 0 0 0 0 0 0 0 0 0

1761 16 Filename const * 0 8576 16 Filename const * 16 Filename const * 0 0 1762 0 0 0 0 0 0 0 0 0 0

1762 14 Filename const 0 8832 14 Filename const 14 Filename const 0 0 1763 0 0 0 0 0 0 0 0 0 0

1763 8 Filename 0 2048 8 Filename 8 Filename 0 0 0 0 0 0 0 0 0 0 0 0 869
////////////////////////////////////////////////////////////////////
//       Class : Filename
// Description : The name of a file, such as a texture file or an Egg
//               file.  Stores the full pathname, and includes
//               functions for extracting out the directory prefix
//               part and the file extension and stuff.
//
//               A Filename is also aware of the mapping between the
//               Unix-like filename convention we use internally, and
//               the local OS's specific filename convention, and it
//               knows how to perform basic OS-specific I/O, like
//               testing for file existence and searching a
//               searchpath, as well as the best way to open an
//               fstream for reading or writing.
////////////////////////////////////////////////////////////////////

1764 10 BamCache * 0 8576 10 BamCache * 10 BamCache * 0 0 1675 0 0 0 0 0 0 0 0 0 0

1765 16 BamCache const * 0 8576 16 BamCache const * 16 BamCache const * 0 0 1766 0 0 0 0 0 0 0 0 0 0

1766 14 BamCache const 0 8832 14 BamCache const 14 BamCache const 0 0 1675 0 0 0 0 0 0 0 0 0 0

1767 10 Filename * 0 8576 10 Filename * 10 Filename * 0 0 1763 0 0 0 0 0 0 0 0 0 0

1768 21 LoaderOptions const * 0 8576 21 LoaderOptions const * 21 LoaderOptions const * 0 0 1769 0 0 0 0 0 0 0 0 0 0

1769 19 LoaderOptions const 0 8832 19 LoaderOptions const 19 LoaderOptions const 0 0 1680 0 0 0 0 0 0 0 0 0 0

1770 15 LoaderOptions * 0 8576 15 LoaderOptions * 15 LoaderOptions * 0 0 1680 0 0 0 0 0 0 0 0 0 0

1771 19 DatagramGenerator * 0 8576 19 DatagramGenerator * 19 DatagramGenerator * 0 0 1701 0 0 0 0 0 0 0 0 0 0

1772 9 AuxData * 0 8576 20 BamReader::AuxData * 20 BamReader::AuxData * 0 0 1773 0 0 0 0 0 0 0 0 0 0

1773 7 AuxData 0 1312768 18 BamReader::AuxData 18 BamReader::AuxData 1683 0 0 0 0 0 0 0 0 0 0 0 187
// Inherit from this class to piggyback additional temporary data on
// the bamReader (via set_aux_data() and get_aux_data()) for any
// particular objects during the bam reading process.

1774 17 BamReader const * 0 8576 17 BamReader const * 17 BamReader const * 0 0 1775 0 0 0 0 0 0 0 0 0 0

1775 15 BamReader const 0 8832 15 BamReader const 15 BamReader const 0 0 1683 0 0 0 0 0 0 0 0 0 0

1776 14 DatagramSink * 0 8576 14 DatagramSink * 14 DatagramSink * 0 0 1777 0 0 0 0 0 0 0 0 0 0

1777 12 DatagramSink 0 2048 12 DatagramSink 12 DatagramSink 0 0 0 0 0 0 0 0 0 0 0 0 340
////////////////////////////////////////////////////////////////////
//       Class : DatagramSink
// Description : This class defines the abstract interface to sending
//               datagrams to any target, whether it be into a file
//               or across the net
////////////////////////////////////////////////////////////////////

1778 17 BamWriter const * 0 8576 17 BamWriter const * 17 BamWriter const * 0 0 1779 0 0 0 0 0 0 0 0 0 0

1779 15 BamWriter const 0 8832 15 BamWriter const 15 BamWriter const 0 0 1684 0 0 0 0 0 0 0 0 0 0

1780 35 BitMask< unsigned short int, 16 > * 0 8576 35 BitMask< unsigned short int, 16 > * 35 BitMask< unsigned short int, 16 > * 0 0 1685 0 0 0 0 0 0 0 0 0 0

1781 41 BitMask< unsigned short int, 16 > const * 0 8576 41 BitMask< unsigned short int, 16 > const * 41 BitMask< unsigned short int, 16 > const * 0 0 1782 0 0 0 0 0 0 0 0 0 0

1782 39 BitMask< unsigned short int, 16 > const 0 8832 39 BitMask< unsigned short int, 16 > const 39 BitMask< unsigned short int, 16 > const 0 0 1685 0 0 0 0 0 0 0 0 0 0

1783 29 BitMask< unsigned int, 32 > * 0 8576 29 BitMask< unsigned int, 32 > * 29 BitMask< unsigned int, 32 > * 0 0 1686 0 0 0 0 0 0 0 0 0 0

1784 35 BitMask< unsigned int, 32 > const * 0 8576 35 BitMask< unsigned int, 32 > const * 35 BitMask< unsigned int, 32 > const * 0 0 1785 0 0 0 0 0 0 0 0 0 0

1785 33 BitMask< unsigned int, 32 > const 0 8832 33 BitMask< unsigned int, 32 > const 33 BitMask< unsigned int, 32 > const 0 0 1686 0 0 0 0 0 0 0 0 0 0

1786 33 BitMask< unsigned __int64, 64 > * 0 8576 33 BitMask< unsigned __int64, 64 > * 33 BitMask< unsigned __int64, 64 > * 0 0 1687 0 0 0 0 0 0 0 0 0 0

1787 39 BitMask< unsigned __int64, 64 > const * 0 8576 39 BitMask< unsigned __int64, 64 > const * 39 BitMask< unsigned __int64, 64 > const * 0 0 1788 0 0 0 0 0 0 0 0 0 0

1788 37 BitMask< unsigned __int64, 64 > const 0 8832 37 BitMask< unsigned __int64, 64 > const 37 BitMask< unsigned __int64, 64 > const 0 0 1687 0 0 0 0 0 0 0 0 0 0

1789 16 unsigned __int64 0 8230 16 unsigned __int64 16 unsigned __int64 0 8 0 0 0 0 0 0 0 0 0 0 0

1790 10 BitArray * 0 8576 10 BitArray * 10 BitArray * 0 0 1688 0 0 0 0 0 0 0 0 0 0

1791 16 BitArray const * 0 8576 16 BitArray const * 16 BitArray const * 0 0 1792 0 0 0 0 0 0 0 0 0 0

1792 14 BitArray const 0 8832 14 BitArray const 14 BitArray const 0 0 1688 0 0 0 0 0 0 0 0 0 0

1793 19 SparseArray const * 0 8576 19 SparseArray const * 19 SparseArray const * 0 0 1794 0 0 0 0 0 0 0 0 0 0

1794 17 SparseArray const 0 8832 17 SparseArray const 17 SparseArray const 0 0 1710 0 0 0 0 0 0 0 0 0 0

1795 14 ButtonHandle * 0 8576 14 ButtonHandle * 14 ButtonHandle * 0 0 1689 0 0 0 0 0 0 0 0 0 0

1796 20 ButtonHandle const * 0 8576 20 ButtonHandle const * 20 ButtonHandle const * 0 0 1797 0 0 0 0 0 0 0 0 0 0

1797 18 ButtonHandle const 0 8832 18 ButtonHandle const 18 ButtonHandle const 0 0 1689 0 0 0 0 0 0 0 0 0 0

1798 4 char 0 8194 4 char 4 char 0 5 0 0 0 0 0 0 0 0 0 0 0

1799 16 ButtonRegistry * 0 8576 16 ButtonRegistry * 16 ButtonRegistry * 0 0 1690 0 0 0 0 0 0 0 0 0 0

1800 22 ButtonRegistry const * 0 8576 22 ButtonRegistry const * 22 ButtonRegistry const * 0 0 1801 0 0 0 0 0 0 0 0 0 0

1801 20 ButtonRegistry const 0 8832 20 ButtonRegistry const 20 ButtonRegistry const 0 0 1690 0 0 0 0 0 0 0 0 0 0

1802 17 ButtonMap const * 0 8576 17 ButtonMap const * 17 ButtonMap const * 0 0 1803 0 0 0 0 0 0 0 0 0 0

1803 15 ButtonMap const 0 8832 15 ButtonMap const 15 ButtonMap const 0 0 1691 0 0 0 0 0 0 0 0 0 0

1804 22 CallbackObject const * 0 8576 22 CallbackObject const * 22 CallbackObject const * 0 0 1805 0 0 0 0 0 0 0 0 0 0

1805 20 CallbackObject const 0 8832 20 CallbackObject const 20 CallbackObject const 0 0 1693 0 0 0 0 0 0 0 0 0 0

1806 41 CachedTypedWritableReferenceCount const * 0 8576 41 CachedTypedWritableReferenceCount const * 41 CachedTypedWritableReferenceCount const * 0 0 1807 0 0 0 0 0 0 0 0 0 0

1807 39 CachedTypedWritableReferenceCount const 0 8832 39 CachedTypedWritableReferenceCount const 39 CachedTypedWritableReferenceCount const 0 0 1694 0 0 0 0 0 0 0 0 0 0

1808 20 CallbackData const * 0 8576 20 CallbackData const * 20 CallbackData const * 0 0 1809 0 0 0 0 0 0 0 0 0 0

1809 18 CallbackData const 0 8832 18 CallbackData const 18 CallbackData const 0 0 1695 0 0 0 0 0 0 0 0 0 0

1810 14 CallbackData * 0 8576 14 CallbackData * 14 CallbackData * 0 0 1695 0 0 0 0 0 0 0 0 0 0

1811 9 TimeVal * 0 8576 9 TimeVal * 9 TimeVal * 0 0 1696 0 0 0 0 0 0 0 0 0 0

1812 15 TimeVal const * 0 8576 15 TimeVal const * 15 TimeVal const * 0 0 1813 0 0 0 0 0 0 0 0 0 0

1813 13 TimeVal const 0 8832 13 TimeVal const 13 TimeVal const 0 0 1696 0 0 0 0 0 0 0 0 0 0

1814 17 unsigned long int 0 8214 17 unsigned long int 17 unsigned long int 0 1 0 0 0 0 0 0 0 0 0 0 0

1815 13 ClockObject * 0 8576 13 ClockObject * 13 ClockObject * 0 0 1697 0 0 0 0 0 0 0 0 0 0

1816 19 ClockObject const * 0 8576 19 ClockObject const * 19 ClockObject const * 0 0 1817 0 0 0 0 0 0 0 0 0 0

1817 17 ClockObject const 0 8832 17 ClockObject const 17 ClockObject const 0 0 1697 0 0 0 0 0 0 0 0 0 0

1818 8 Thread * 0 8576 8 Thread * 8 Thread * 0 0 1819 0 0 0 0 0 0 0 0 0 0

1819 6 Thread 0 2048 6 Thread 6 Thread 0 0 0 0 0 0 0 0 0 0 0 0 668
////////////////////////////////////////////////////////////////////
//       Class : Thread
// Description : A thread; that is, a lightweight process.  This is an
//               abstract base class; to use it, you must subclass
//               from it and redefine thread_main().
//
//               The thread itself will keep a reference count on the
//               Thread object while it is running; when the thread
//               returns from its root function, the Thread object
//               will automatically be destructed if no other pointers
//               are referencing it.
////////////////////////////////////////////////////////////////////

1820 25 CopyOnWriteObject const * 0 8576 25 CopyOnWriteObject const * 25 CopyOnWriteObject const * 0 0 1821 0 0 0 0 0 0 0 0 0 0

1821 23 CopyOnWriteObject const 0 8832 23 CopyOnWriteObject const 23 CopyOnWriteObject const 0 0 1699 0 0 0 0 0 0 0 0 0 0

1822 19 DatagramInputFile * 0 8576 19 DatagramInputFile * 19 DatagramInputFile * 0 0 1700 0 0 0 0 0 0 0 0 0 0

1823 21 FileReference const * 0 8576 21 FileReference const * 21 FileReference const * 0 0 1824 0 0 0 0 0 0 0 0 0 0

1824 19 FileReference const 0 8832 19 FileReference const 19 FileReference const 0 0 1825 0 0 0 0 0 0 0 0 0 0

1825 13 FileReference 0 2048 13 FileReference 13 FileReference 0 0 0 0 0 0 0 0 0 0 0 0 354
////////////////////////////////////////////////////////////////////
//       Class : FileReference
// Description : Keeps a reference-counted pointer to a file on disk.
//               As long as the FileReference is held, someone
//               presumably has a use for this file.
////////////////////////////////////////////////////////////////////

1826 9 istream * 0 8576 9 istream * 9 istream * 0 0 1827 0 0 0 0 0 0 0 0 0 0

1827 7 istream 0 2048 7 istream 7 istream 0 0 0 0 0 0 0 0 0 0 0 0 0

1828 12 LineStream * 0 8576 12 LineStream * 12 LineStream * 0 0 1703 0 0 0 0 0 0 0 0 0 0

1829 18 LineStream const * 0 8576 18 LineStream const * 18 LineStream const * 0 0 1830 0 0 0 0 0 0 0 0 0 0

1830 16 LineStream const 0 8832 16 LineStream const 16 LineStream const 0 0 1703 0 0 0 0 0 0 0 0 0 0

1831 17 ModifierButtons * 0 8576 17 ModifierButtons * 17 ModifierButtons * 0 0 1705 0 0 0 0 0 0 0 0 0 0

1832 23 ModifierButtons const * 0 8576 23 ModifierButtons const * 23 ModifierButtons const * 0 0 1833 0 0 0 0 0 0 0 0 0 0

1833 21 ModifierButtons const 0 8832 21 ModifierButtons const 21 ModifierButtons const 0 0 1705 0 0 0 0 0 0 0 0 0 0

1834 11 MouseData * 0 8576 11 MouseData * 11 MouseData * 0 0 1707 0 0 0 0 0 0 0 0 0 0

1835 17 MouseData const * 0 8576 17 MouseData const * 17 MouseData const * 0 0 1836 0 0 0 0 0 0 0 0 0 0

1836 15 MouseData const 0 8832 15 MouseData const 15 MouseData const 0 0 1707 0 0 0 0 0 0 0 0 0 0

1837 32 NodeCachedReferenceCount const * 0 8576 32 NodeCachedReferenceCount const * 32 NodeCachedReferenceCount const * 0 0 1838 0 0 0 0 0 0 0 0 0 0

1838 30 NodeCachedReferenceCount const 0 8832 30 NodeCachedReferenceCount const 30 NodeCachedReferenceCount const 0 0 1708 0 0 0 0 0 0 0 0 0 0

1839 13 SparseArray * 0 8576 13 SparseArray * 13 SparseArray * 0 0 1710 0 0 0 0 0 0 0 0 0 0

1840 22 PythonCallbackObject * 0 8576 22 PythonCallbackObject * 22 PythonCallbackObject * 0 0 1711 0 0 0 0 0 0 0 0 0 0

1841 19 UniqueIdAllocator * 0 8576 19 UniqueIdAllocator * 19 UniqueIdAllocator * 0 0 1713 0 0 0 0 0 0 0 0 0 0

1842 25 UniqueIdAllocator const * 0 8576 25 UniqueIdAllocator const * 25 UniqueIdAllocator const * 0 0 1843 0 0 0 0 0 0 0 0 0 0

1843 23 UniqueIdAllocator const 0 8832 23 UniqueIdAllocator const 23 UniqueIdAllocator const 0 0 1713 0 0 0 0 0 0 0 0 0 0

1844 5 float 0 8194 5 float 5 float 0 2 0 0 0 0 0 0 0 0 0 0 0

1845 26 ConfigVariableSearchPath * 0 8576 26 ConfigVariableSearchPath * 26 ConfigVariableSearchPath * 0 0 1846 0 0 0 0 0 0 0 0 0 0

1846 24 ConfigVariableSearchPath 0 2048 24 ConfigVariableSearchPath 24 ConfigVariableSearchPath 0 0 0 0 0 0 0 0 0 0 0 0 1125
////////////////////////////////////////////////////////////////////
//       Class : ConfigVariableSearchPath
// Description : This is similar to a ConfigVariableList, but it
//               returns its list as a DSearchPath, as a list of
//               directories.
//
//               You may locally append directories to the end of the
//               search path with the methods here, or prepend them to
//               the beginning.  Use these methods to make adjustments
//               to the path; do not attempt to directly modify the
//               const DSearchPath object returned by get_value().
//
//               Unlike other ConfigVariable types, local changes
//               (made by calling append_directory() and
//               prepend_directory()) are specific to this particular
//               instance of the ConfigVariableSearchPath.  A separate
//               instance of the same variable, created by using the
//               same name to the constructor, will not reflect the
//               local changes.
////////////////////////////////////////////////////////////////////

1847 12 ConfigPage * 0 8576 12 ConfigPage * 12 ConfigPage * 0 0 1848 0 0 0 0 0 0 0 0 0 0

1848 10 ConfigPage 0 2048 10 ConfigPage 10 ConfigPage 0 0 0 0 0 0 0 0 0 0 0 0 493
////////////////////////////////////////////////////////////////////
//       Class : ConfigPage
// Description : A page of ConfigDeclarations that may be loaded or
//               unloaded.  Typically this represents a single .prc
//               file that is read from disk at runtime, but it may
//               also represent a list of declarations built up
//               by application code and explicitly loaded.
////////////////////////////////////////////////////////////////////

1849 9 HashVal * 0 8576 9 HashVal * 9 HashVal * 0 0 1850 0 0 0 0 0 0 0 0 0 0

1850 7 HashVal 0 2048 7 HashVal 7 HashVal 0 0 0 0 0 0 0 0 0 0 0 0 292
////////////////////////////////////////////////////////////////////
//       Class : HashVal
// Description : Stores a 128-bit value that represents the hashed
//               contents (typically MD5) of a file or buffer.
////////////////////////////////////////////////////////////////////

0
0
1
1851 0 0 728 11 get_buttons 15 get_num_buttons 10 get_button 
