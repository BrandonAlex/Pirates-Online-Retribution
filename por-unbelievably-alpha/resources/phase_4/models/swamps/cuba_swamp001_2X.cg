//Cg
//
//Cg profile arbvp1 arbfp1


#define enable_reflection 1
#define enable_specular 0
#define enable_perturbation 1
#define enable_color_map 1
#define enable_alpha_map 1
#define enable_opacity_map 1
#define enable_color 1

#define debug_display_desintation_alpha 0


void vshader(float3 vtx_position      : POSITION,
             float3 vtx_normal        : NORMAL,
             float4 vtx_color         : COLOR,
             float2 vtx_texcoord0     : TEXCOORD0,
             out float4 l_position    : POSITION,
             out float2 l_texcoord0   : TEXCOORD0,
             out float4 l_texcoord1   : TEXCOORD1,  // reflection projective texture coordinates
             out float3 l_normal      : TEXCOORD2,
             out float3 l_surface_pos : TEXCOORD3,
             out float3 l_interpolate : TEXCOORD4,  // xy = color map uv, z = fog factor
             out float3 l_alpha_uv    : TEXCOORD5,  // xy = alpha color map uv
             out float4 l_color       : COLOR,
 
             uniform float4 k_fogexpdensity,
             uniform float4 k_map,                  // xy = map origin, zw = map scaling factor
             uniform float4 k_alphamap,             // xy = alpha map origin, zw = alpha map scaling factor
             uniform float4x4 trans_view_to_world,
             uniform float4x4 trans_model_to_view,
             uniform float4x4 trans_model_to_apiclip)
{
  float4 vertex;
  float4 position;
  
  vertex.xyz = vtx_position.xyz;
  vertex.w = 1.0;

  position = mul (trans_model_to_apiclip, vertex);
  
  l_normal = vtx_normal;
  l_surface_pos = vertex.xyz;
  
  l_texcoord0 = vtx_texcoord0;

  float4 view_space_position = mul (trans_model_to_view, vertex);

  // world coordinates to map UV 
  float2 world_space_position;
  
//  world_space_position.xy = mul (trans_view_to_world, vertex);
  world_space_position.xy = mul (trans_view_to_world, view_space_position).xy;
  l_interpolate.xy = (world_space_position.xy - k_map.xy) * k_map.zw;

  l_alpha_uv.xy = (world_space_position.xy - k_alphamap.xy) * k_alphamap.zw;

  // FOG
  l_interpolate.z = 1.0 - exp (-1.0 * (k_fogexpdensity.x * view_space_position.y));

  float4x4 projection_adjustment_matrix =
  {
      0.5, 0.0, 0.0, 0.5,
      0.0, 0.5, 0.0, 0.5,
      0.0, 0.0, 0.5, 0.5,
      0.0, 0.0, 0.0, 1.0,
  };

  l_texcoord1 = mul (projection_adjustment_matrix, position);

  l_position = position;

// debug  
//  l_texcoord1 = mul (mat_modelproj, vertex);  

  l_color = vtx_color;
}


void fshader(float2 l_texcoord0   : TEXCOORD0,
             float4 l_texcoord1   : TEXCOORD1,
             float3 l_normal      : TEXCOORD2,
             float3 l_surface_pos : TEXCOORD3,
             float3 l_interpolate : TEXCOORD4,
             float3 l_alpha_uv    : TEXCOORD5,
             float4 l_color       : COLOR,
             uniform float4 k_fogcolor,
             uniform float4 k_uvanim,
             uniform float4 k_lightposition,
             uniform float4 k_cameraposition,
             uniform float4 k_ambientcolor,
             uniform float4 k_diffusecolor,
             uniform float4 k_specularcolor,
             uniform float4 k_lightparameters,
             uniform float4 k_watercolor,
             uniform float4 k_reflectionparameters,
             uniform sampler2D tex_0,
             uniform sampler2D k_d,
             uniform sampler2D k_n,
             uniform sampler2D k_bb,
             uniform sampler2D k_low2,
             uniform sampler2D k_watercolortexture,
             uniform sampler2D k_reflectiontexture,
             uniform sampler2D k_wateralphatexture,
//             uniform sampler2D k_opacitytexture,
             out float4 o_color : COLOR)
{
  float diffuse;
  float specular;
  float3 world_normal;
  float3 light_direction;
  float3 opposite_light_direction;
  float3 reflection_vector;

  float3 light_position;    
  float4 world_position;
  
  float specular_factor;
  
  float diffuse_factor2 = k_lightparameters.x;
  float specular_factor2 = k_lightparameters.y;
  float specular_exponent2 = k_lightparameters.z;
  
  float4 colormap_d = tex2D (k_d, (l_texcoord0 + k_uvanim.xy) * 2.0);

  float4 colormap = tex2D (tex_0, l_texcoord0);

 
  // get the normal map texels and convert them from rgb [0,1] format into normal format [-1, 1]
  float4 normalmap = (tex2D (k_n, (l_texcoord0) + (k_uvanim.zw)) * 2.0) - 1.0;
  float4 normalmap2 = (tex2D (k_bb, (l_texcoord0) + k_uvanim.xy) * 2.0) - 1.0;
  float4 normalmap3 = (tex2D (k_low2, (l_texcoord0) + k_uvanim.xy)) - 1.0;
  
  float4 water_color;
  
  if (enable_color_map)  
  {  
    water_color = tex2D (k_watercolortexture, l_interpolate.xy * 32.0);
    
//    water_color.xyz = 0.5;
  }
  else
  {
    water_color = k_watercolor;
  }
  
  // REFLECTION
  float reflection_factor;
  float4 reflection_texel;

  if (enable_reflection)
  {
    reflection_factor = k_reflectionparameters.z;

    if (enable_perturbation)
    {    
      float2 projection_uv;
      float2 perturbation_factor;
     
      projection_uv = l_texcoord1.xy / l_texcoord1.w;
      perturbation_factor.xy = k_reflectionparameters.xy;
      projection_uv = 
          projection_uv + 
          k_reflectionparameters.w * ((normalmap3.xy - normalmap3.yx) * perturbation_factor) + 
          (1.0 - k_reflectionparameters.w) * ((normalmap2.xy - normalmap2.yx) * perturbation_factor);

      // keep uv [0, 1], should use texture clamp render state instead
      projection_uv = saturate (projection_uv);
      
      reflection_texel = tex2D (k_reflectiontexture, projection_uv);
    }
    else
    {
      reflection_texel = tex2Dproj (k_reflectiontexture, l_texcoord1);
    }
  }

  // LIGHT: this is the primary light

  float3 surface_to_camera_vector;

  light_position = k_lightposition.xyz;  

  float3 camera_position;
  
  camera_position.x = k_cameraposition.x;
  camera_position.y = k_cameraposition.y;
  camera_position.z = k_cameraposition.z;
  surface_to_camera_vector = normalize (camera_position.xyz - l_surface_pos); 

  // point light    
  light_direction = normalize (l_surface_pos - light_position);
  
  opposite_light_direction = normalize (-light_direction);

  float3 surface_normal;
  
  // bias the normal pointing up and a little towards the camera
  {
    surface_normal.x = 0.0;
    surface_normal.y = -0.1;
    surface_normal.z = 1.0;
    surface_normal = normalize (surface_normal);  
  }
  
  // blend normals
  // this is not true normal mapping since we do not have binormal and tangent vectors
//  surface_normal = (surface_normal + (l_normal * 0.10) + (normalmap2.xyz * 0.05));

  float4 normalmap4;

  normalmap4 = (tex2D (k_n, (l_alpha_uv.xy * 16.0) + k_uvanim.zw) * 2.0) - 1.0;
//  normalmap4 = (tex2D (k_low2, l_alpha_uv.xy * 32.0) * 2.0) - 1.0;
//  normalmap4 = tex2D (k_n, l_alpha_uv.xy);
  surface_normal = normalmap4.xyz;

  surface_normal = normalize (surface_normal);


  opposite_light_direction.x = 0.0;
  opposite_light_direction.y = 0.0;
  opposite_light_direction.z = 1.0;
  
  diffuse = dot (surface_normal, opposite_light_direction);

  reflection_vector = normalize ((2.0 * diffuse * surface_normal) - opposite_light_direction);  
  specular = specular_factor2 * pow (saturate (dot (reflection_vector, surface_to_camera_vector)), specular_exponent2);

  diffuse = diffuse * diffuse_factor2;
  
  if (diffuse < 0.0)
  {
    diffuse = 0.0;
    specular = 0.0;
  }

  if (enable_specular == 0)
  {
    specular = 0.0;
  }

  if (enable_reflection)
  {
    if (reflection_texel.w > 0.0)
    {
      specular = 0.0;
    }
  }
  
  float4 output_color;
  
//  output_color = (k_ambientcolor * water_color) + (diffuse * k_diffusecolor * water_color) + (specular * k_specularcolor);
  output_color = (k_ambientcolor * k_watercolor) + (diffuse * k_diffusecolor * k_watercolor) + (specular * k_specularcolor);

  if (enable_reflection)
  {
    output_color.xyz = (output_color.xyz) + (reflection_factor * reflection_texel.xyz);
  }

  // input texture alpha = reflection opacity
  if (enable_opacity_map)
  {
    float opacity;
    float2 alpha_uv;

    alpha_uv = l_alpha_uv.xy;    

//    opacity = tex2D (k_opacitytexture, alpha_uv).x;

    opacity = tex2D (k_wateralphatexture, alpha_uv).x;

//    output_color.xyz = (colormap.xyz * opacity) + (output_color.xyz * (1.0 - opacity));
    output_color.xyz = (water_color.xyz * opacity) + (output_color.xyz * (1.0 - opacity));
  }

  if (enable_color)
  {
    output_color.xyz = output_color.xyz * l_color.xyz;
  }
  
  // FOG
  output_color.xyz = lerp (output_color.xyz, k_fogcolor.xyz, l_interpolate.z);

  if (enable_alpha_map)
  {  
    float2 alpha_uv;

    alpha_uv = l_alpha_uv.xy;    

//    output_color.w = 1.0 - tex2D (k_wateralphatexture, alpha_uv).x;
    output_color.w = tex2D (k_wateralphatexture, alpha_uv).y;
  }
  else
  {
    // ALPHA
    output_color.w = 1.0;
  }

  if (debug_display_desintation_alpha)
  {
    output_color.xyz = reflection_texel.w;
    output_color.w = 1.0;
  }
  
  o_color = output_color;

/*
  o_color = tex2D (tex_0, (l_texcoord0));
  o_color = tex2D (k_d, (l_texcoord0));
  o_color = tex2D (k_n, (l_texcoord0));
  o_color = tex2D (k_low2, (l_texcoord0));
  o_color = tex2D (k_reflectiontexture, (l_texcoord0));   
  o_color = reflection_texel;

  o_color = tex2D (k_bb, (l_texcoord0));  // ????

  o_color = tex2D (k_wateralphatexture, (l_texcoord0));  // black
  o_color = tex2D (k_bb, (l_texcoord0));  // ????

//  o_color.xyz = tex2D (k_opacitytexture, l_interpolate.xy).xyz; 
  o_color.xyz = tex2D (k_watercolortexture, l_interpolate.xy).xyz; 
  o_color.xyz = tex2D (k_wateralphatexture, l_interpolate.xy).xyz; 

  o_color.w = 1.0;
*/

/*
  o_color.x = l_texcoord0.x;
  o_color.y = l_texcoord0.y;
  o_color.z = 0.0;
  o_color.w = 1.0;
*/  
/*
//  o_color.xyz = tex2D (k_wateralphatexture, l_alpha_uv.xy).xyz; 
//  o_color.x = l_interpolate.x; 
  o_color.x = 0.0; 
  o_color.y = l_interpolate.y; 
//  o_color.y = 0.0; 
  o_color.z = 0.0;
  o_color.w = 1.0;
*/
/*
  o_color.xyz = l_color.xyz;
  o_color.w = 1.0;
*/
/*
  o_color.xyz = surface_normal;
  o_color.w = 1.0;
*/
/*
  o_color.xyz = diffuse;
  o_color.w = 1.0;
*/
}
