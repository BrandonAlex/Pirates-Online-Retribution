1436948640
2 3
13 libp3dcparser 4 zIbG 14 panda3d.direct 
231
241 18 ~DCPackerInterface 0 6 474 37 DCPackerInterface::~DCPackerInterface 0 0 235
////////////////////////////////////////////////////////////////////
//     Function: DCPackerInterface::Destructor
//       Access: Public, Virtual
//  Description: 
////////////////////////////////////////////////////////////////////
52
virtual DCPackerInterface::~DCPackerInterface(void);

242 8 get_name 0 4 474 27 DCPackerInterface::get_name 0 1 1 316
////////////////////////////////////////////////////////////////////
//     Function: DCPackerInterface::get_name
//       Access: Published
//  Description: Returns the name of this field, or empty string
//               if the field is unnamed.
////////////////////////////////////////////////////////////////////
61
inline string const &DCPackerInterface::get_name(void) const;

243 15 find_seek_index 0 4 474 34 DCPackerInterface::find_seek_index 0 1 2 849
////////////////////////////////////////////////////////////////////
//     Function: DCPackerInterface::find_seek_index
//       Access: Published
//  Description: Returns the index number to be passed to a future
//               call to DCPacker::seek() to seek directly to the
//               named field without having to look up the field name
//               in a table later, or -1 if the named field cannot be
//               found.
//
//               If the named field is nested within a switch or some
//               similar dynamic structure that reveals different
//               fields based on the contents of the data, this
//               mechanism cannot be used to pre-fetch the field index
//               number--you must seek for the field by name.
////////////////////////////////////////////////////////////////////
65
int DCPackerInterface::find_seek_index(string const &name) const;

244 8 as_field 0 6 474 27 DCPackerInterface::as_field 0 2 3 4 474
////////////////////////////////////////////////////////////////////
//     Function: DCPackerInterface::as_field
//       Access: Published, Virtual
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: DCPackerInterface::as_field
//       Access: Published, Virtual
//  Description: 
////////////////////////////////////////////////////////////////////
115
virtual DCField *DCPackerInterface::as_field(void);
virtual DCField const *DCPackerInterface::as_field(void) const;

245 19 as_switch_parameter 0 6 474 38 DCPackerInterface::as_switch_parameter 0 2 5 6 496
////////////////////////////////////////////////////////////////////
//     Function: DCPackerInterface::as_switch_parameter
//       Access: Published, Virtual
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: DCPackerInterface::as_switch_parameter
//       Access: Published, Virtual
//  Description: 
////////////////////////////////////////////////////////////////////
157
virtual DCSwitchParameter *DCPackerInterface::as_switch_parameter(void);
virtual DCSwitchParameter const *DCPackerInterface::as_switch_parameter(void) const;

246 18 as_class_parameter 0 6 474 37 DCPackerInterface::as_class_parameter 0 2 7 8 494
////////////////////////////////////////////////////////////////////
//     Function: DCPackerInterface::as_class_parameter
//       Access: Published, Virtual
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: DCPackerInterface::as_class_parameter
//       Access: Published, Virtual
//  Description: 
////////////////////////////////////////////////////////////////////
153
virtual DCClassParameter *DCPackerInterface::as_class_parameter(void);
virtual DCClassParameter const *DCPackerInterface::as_class_parameter(void) const;

247 11 check_match 0 4 474 30 DCPackerInterface::check_match 0 2 9 10 1138
////////////////////////////////////////////////////////////////////
//     Function: DCPackerInterface::check_match
//       Access: Published
//  Description: Returns true if the other interface is bitwise the
//               same as this one--that is, a uint32 only matches a
//               uint32, etc. Names of components, and range limits,
//               are not compared.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: DCPackerInterface::check_match
//       Access: Published
//  Description: Returns true if this interface is bitwise the same as
//               the interface described with the indicated formatted
//               string, e.g. "(uint8, uint8, int16)", or false
//               otherwise.
//
//               If DCFile is not NULL, it specifies the DCFile that
//               was previously loaded, from which some predefined
//               structs and typedefs may be referenced in the
//               description string.
////////////////////////////////////////////////////////////////////
171
inline bool DCPackerInterface::check_match(DCPackerInterface const *other) const;
bool DCPackerInterface::check_match(string const &description, DCFile *dcfile = 0) const;

248 14 ~DCKeywordList 0 4 475 29 DCKeywordList::~DCKeywordList 0 0 221
////////////////////////////////////////////////////////////////////
//     Function: DCKeywordList::Destructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
36
DCKeywordList::~DCKeywordList(void);

249 11 has_keyword 0 4 475 26 DCKeywordList::has_keyword 0 2 11 12 636
////////////////////////////////////////////////////////////////////
//     Function: DCKeywordList::has_keyword
//       Access: Published
//  Description: Returns true if this list includes the indicated
//               keyword, false otherwise.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: DCKeywordList::has_keyword
//       Access: Published
//  Description: Returns true if this list includes the indicated
//               keyword, false otherwise.
////////////////////////////////////////////////////////////////////
123
bool DCKeywordList::has_keyword(string const &name) const;
bool DCKeywordList::has_keyword(DCKeyword const *keyword) const;

250 16 get_num_keywords 0 4 475 31 DCKeywordList::get_num_keywords 0 1 13 274
////////////////////////////////////////////////////////////////////
//     Function: DCKeywordList::get_num_keywords
//       Access: Published
//  Description: Returns the number of keywords in the list.
////////////////////////////////////////////////////////////////////
48
int DCKeywordList::get_num_keywords(void) const;

251 11 get_keyword 0 4 475 26 DCKeywordList::get_keyword 0 1 14 262
////////////////////////////////////////////////////////////////////
//     Function: DCKeywordList::get_keyword
//       Access: Published
//  Description: Returns the nth keyword in the list.
////////////////////////////////////////////////////////////////////
57
DCKeyword const *DCKeywordList::get_keyword(int n) const;

252 19 get_keyword_by_name 0 4 475 34 DCKeywordList::get_keyword_by_name 0 1 15 383
////////////////////////////////////////////////////////////////////
//     Function: DCKeywordList::get_keyword_by_name
//       Access: Published
//  Description: Returns the keyword in the list with the indicated
//               name, or NULL if there is no keyword in the list with
//               that name.
////////////////////////////////////////////////////////////////////
78
DCKeyword const *DCKeywordList::get_keyword_by_name(string const &name) const;

253 16 compare_keywords 0 4 475 31 DCKeywordList::compare_keywords 0 1 16 397
////////////////////////////////////////////////////////////////////
//     Function: DCKeywordList::compare_keywords
//       Access: Published
//  Description: Returns true if this list has the same keywords
//               as the other list, false if some keywords differ.
//               Order is not considered important.
////////////////////////////////////////////////////////////////////
71
bool DCKeywordList::compare_keywords(DCKeywordList const &other) const;

254 27 upcast_to_DCPackerInterface 0 12 476 36 DCField::upcast_to_DCPackerInterface 0 1 50 40
upcast from DCField to DCPackerInterface
62
DCPackerInterface *DCField::upcast_to_DCPackerInterface(void);

255 19 downcast_to_DCField 0 12 474 38 DCPackerInterface::downcast_to_DCField 0 1 51 42
downcast from DCPackerInterface to DCField
54
DCField *DCPackerInterface::downcast_to_DCField(void);

256 23 upcast_to_DCKeywordList 0 12 476 32 DCField::upcast_to_DCKeywordList 0 1 52 36
upcast from DCField to DCKeywordList
54
DCKeywordList *DCField::upcast_to_DCKeywordList(void);

257 19 downcast_to_DCField 0 12 475 34 DCKeywordList::downcast_to_DCField 0 1 53 38
downcast from DCKeywordList to DCField
50
DCField *DCKeywordList::downcast_to_DCField(void);

258 8 ~DCField 0 6 476 17 DCField::~DCField 0 0 224
////////////////////////////////////////////////////////////////////
//     Function: DCField::Destructor
//       Access: Public, Virtual
//  Description:
////////////////////////////////////////////////////////////////////
32
virtual DCField::~DCField(void);

259 10 get_number 0 4 476 19 DCField::get_number 0 1 17 369
////////////////////////////////////////////////////////////////////
//     Function: DCField::get_number
//       Access: Published
//  Description: Returns a unique index number associated with this
//               field.  This is defined implicitly when the .dc
//               file(s) are read.
////////////////////////////////////////////////////////////////////
43
inline int DCField::get_number(void) const;

260 9 get_class 0 4 476 18 DCField::get_class 0 1 18 302
////////////////////////////////////////////////////////////////////
//     Function: DCField::get_class
//       Access: Published
//  Description: Returns the DCClass pointer for the class that
//               contains this field.
////////////////////////////////////////////////////////////////////
47
inline DCClass *DCField::get_class(void) const;

261 8 as_field 0 6 476 17 DCField::as_field 0 2 19 20 454
////////////////////////////////////////////////////////////////////
//     Function: DCField::as_field
//       Access: Published, Virtual
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: DCField::as_field
//       Access: Published, Virtual
//  Description: 
////////////////////////////////////////////////////////////////////
95
virtual DCField *DCField::as_field(void);
virtual DCField const *DCField::as_field(void) const;

262 15 as_atomic_field 0 6 476 24 DCField::as_atomic_field 0 2 21 22 794
////////////////////////////////////////////////////////////////////
//     Function: DCField::as_atomic_field
//       Access: Published, Virtual
//  Description: Returns the same field pointer converted to an atomic
//               field pointer, if this is in fact an atomic field;
//               otherwise, returns NULL.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: DCField::as_atomic_field
//       Access: Published, Virtual
//  Description: Returns the same field pointer converted to an atomic
//               field pointer, if this is in fact an atomic field;
//               otherwise, returns NULL.
////////////////////////////////////////////////////////////////////
121
virtual DCAtomicField *DCField::as_atomic_field(void);
virtual DCAtomicField const *DCField::as_atomic_field(void) const;

263 18 as_molecular_field 0 6 476 27 DCField::as_molecular_field 0 2 23 24 808
////////////////////////////////////////////////////////////////////
//     Function: DCField::as_molecular_field
//       Access: Published, Virtual
//  Description: Returns the same field pointer converted to a
//               molecular field pointer, if this is in fact a
//               molecular field; otherwise, returns NULL.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: DCField::as_molecular_field
//       Access: Published, Virtual
//  Description: Returns the same field pointer converted to a
//               molecular field pointer, if this is in fact a
//               molecular field; otherwise, returns NULL.
////////////////////////////////////////////////////////////////////
133
virtual DCMolecularField *DCField::as_molecular_field(void);
virtual DCMolecularField const *DCField::as_molecular_field(void) const;

264 12 as_parameter 0 6 476 21 DCField::as_parameter 0 2 25 26 462
////////////////////////////////////////////////////////////////////
//     Function: DCField::as_parameter
//       Access: Published, Virtual
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: DCField::as_parameter
//       Access: Published, Virtual
//  Description: 
////////////////////////////////////////////////////////////////////
111
virtual DCParameter *DCField::as_parameter(void);
virtual DCParameter const *DCField::as_parameter(void) const;

265 11 format_data 0 4 476 20 DCField::format_data 0 1 27 412
////////////////////////////////////////////////////////////////////
//     Function: DCField::format_data
//       Access: Published
//  Description: Given a blob that represents the packed data for this
//               field, returns a string formatting it for human
//               consumption.  Returns empty string if there is an error.
////////////////////////////////////////////////////////////////////
82
string DCField::format_data(string const &packed_data, bool show_field_names = 1);

266 12 parse_string 0 4 476 21 DCField::parse_string 0 1 28 515
////////////////////////////////////////////////////////////////////
//     Function: DCField::parse_string
//       Access: Published
//  Description: Given a human-formatted string (for instance, as
//               returned by format_data(), above) that represents the
//               value of this field, parse the string and return the
//               corresponding packed data.  Returns empty string if
//               there is an error.
////////////////////////////////////////////////////////////////////
61
string DCField::parse_string(string const &formatted_string);

267 15 validate_ranges 0 4 476 24 DCField::validate_ranges 0 1 29 479
////////////////////////////////////////////////////////////////////
//     Function: DCField::validate_ranges
//       Access: Published
//  Description: Verifies that all of the packed values in the field
//               data are within the specified ranges and that there
//               are no extra bytes on the end of the record.  Returns
//               true if all fields are valid, false otherwise.
////////////////////////////////////////////////////////////////////
63
bool DCField::validate_ranges(string const &packed_data) const;

268 17 has_default_value 0 4 476 26 DCField::has_default_value 0 1 30 339
////////////////////////////////////////////////////////////////////
//     Function: DCField::has_default_value
//       Access: Published
//  Description: Returns true if a default value has been explicitly
//               established for this field, false otherwise.
////////////////////////////////////////////////////////////////////
51
inline bool DCField::has_default_value(void) const;

269 17 get_default_value 0 4 476 26 DCField::get_default_value 0 1 31 494
////////////////////////////////////////////////////////////////////
//     Function: DCField::get_default_value
//       Access: Published
//  Description: Returns the default value for this field.  If a
//               default value has been explicitly set
//               (e.g. has_default_value() returns true), returns that
//               value; otherwise, returns an implicit default for the
//               field.
////////////////////////////////////////////////////////////////////
60
inline string const &DCField::get_default_value(void) const;

270 14 is_bogus_field 0 4 476 23 DCField::is_bogus_field 0 1 32 522
////////////////////////////////////////////////////////////////////
//     Function: DCField::is_bogus_field
//       Access: Published
//  Description: Returns true if the field has been flagged as a bogus
//               field.  This is set for fields that are generated by
//               the parser as placeholder for missing fields, as
//               when reading a partial file; it should not occur in a
//               normal valid dc file.
////////////////////////////////////////////////////////////////////
48
inline bool DCField::is_bogus_field(void) const;

271 11 is_required 0 4 476 20 DCField::is_required 0 1 33 312
////////////////////////////////////////////////////////////////////
//     Function: DCField::is_required
//       Access: Published
//  Description: Returns true if the "required" flag is set for this
//               field, false otherwise.
////////////////////////////////////////////////////////////////////
45
inline bool DCField::is_required(void) const;

272 12 is_broadcast 0 4 476 21 DCField::is_broadcast 0 1 34 314
////////////////////////////////////////////////////////////////////
//     Function: DCField::is_broadcast
//       Access: Published
//  Description: Returns true if the "broadcast" flag is set for this
//               field, false otherwise.
////////////////////////////////////////////////////////////////////
46
inline bool DCField::is_broadcast(void) const;

273 6 is_ram 0 4 476 15 DCField::is_ram 0 1 35 302
////////////////////////////////////////////////////////////////////
//     Function: DCField::is_ram
//       Access: Published
//  Description: Returns true if the "ram" flag is set for this
//               field, false otherwise.
////////////////////////////////////////////////////////////////////
40
inline bool DCField::is_ram(void) const;

274 5 is_db 0 4 476 14 DCField::is_db 0 1 36 300
////////////////////////////////////////////////////////////////////
//     Function: DCField::is_db
//       Access: Published
//  Description: Returns true if the "db" flag is set for this
//               field, false otherwise.
////////////////////////////////////////////////////////////////////
39
inline bool DCField::is_db(void) const;

275 9 is_clsend 0 4 476 18 DCField::is_clsend 0 1 37 308
////////////////////////////////////////////////////////////////////
//     Function: DCField::is_clsend
//       Access: Published
//  Description: Returns true if the "clsend" flag is set for this
//               field, false otherwise.
////////////////////////////////////////////////////////////////////
43
inline bool DCField::is_clsend(void) const;

276 9 is_clrecv 0 4 476 18 DCField::is_clrecv 0 1 38 308
////////////////////////////////////////////////////////////////////
//     Function: DCField::is_clrecv
//       Access: Published
//  Description: Returns true if the "clrecv" flag is set for this
//               field, false otherwise.
////////////////////////////////////////////////////////////////////
43
inline bool DCField::is_clrecv(void) const;

277 10 is_ownsend 0 4 476 19 DCField::is_ownsend 0 1 39 310
////////////////////////////////////////////////////////////////////
//     Function: DCField::is_ownsend
//       Access: Published
//  Description: Returns true if the "ownsend" flag is set for this
//               field, false otherwise.
////////////////////////////////////////////////////////////////////
44
inline bool DCField::is_ownsend(void) const;

278 10 is_ownrecv 0 4 476 19 DCField::is_ownrecv 0 1 40 310
////////////////////////////////////////////////////////////////////
//     Function: DCField::is_ownrecv
//       Access: Published
//  Description: Returns true if the "ownrecv" flag is set for this
//               field, false otherwise.
////////////////////////////////////////////////////////////////////
44
inline bool DCField::is_ownrecv(void) const;

279 9 is_airecv 0 4 476 18 DCField::is_airecv 0 1 41 308
////////////////////////////////////////////////////////////////////
//     Function: DCField::is_airecv
//       Access: Published
//  Description: Returns true if the "airecv" flag is set for this
//               field, false otherwise.
////////////////////////////////////////////////////////////////////
43
inline bool DCField::is_airecv(void) const;

280 6 output 0 4 476 15 DCField::output 0 1 42 292
////////////////////////////////////////////////////////////////////
//     Function : DCField::output
//       Access : Published
//  Description : Write a string representation of this instance to
//                <out>.
////////////////////////////////////////////////////////////////////
48
inline void DCField::output(ostream &out) const;

281 5 write 0 4 476 14 DCField::write 0 1 43 286
////////////////////////////////////////////////////////////////////
//     Function : DCField::
//       Access : Published
//  Description : Write a string representation of this instance to
//                <out>.
////////////////////////////////////////////////////////////////////
65
inline void DCField::write(ostream &out, int indent_level) const;

282 9 pack_args 0 4 476 18 DCField::pack_args 0 1 44 470
////////////////////////////////////////////////////////////////////
//     Function: DCField::pack_args
//       Access: Published
//  Description: Packs the Python arguments from the indicated tuple
//               into the packer.  Returns true on success, false on
//               failure.
//
//               It is assumed that the packer is currently positioned
//               on this field.
////////////////////////////////////////////////////////////////////
68
bool DCField::pack_args(DCPacker &packer, PyObject *sequence) const;

283 11 unpack_args 0 4 476 20 DCField::unpack_args 0 1 45 491
////////////////////////////////////////////////////////////////////
//     Function: DCField::unpack_args
//       Access: Published
//  Description: Unpacks the values from the packer, beginning at
//               the current point in the unpack_buffer, into a Python
//               tuple and returns the tuple.
//
//               It is assumed that the packer is currently positioned
//               on this field.
////////////////////////////////////////////////////////////////////
55
PyObject *DCField::unpack_args(DCPacker &packer) const;

284 14 receive_update 0 4 476 23 DCField::receive_update 0 1 46 378
////////////////////////////////////////////////////////////////////
//     Function: DCField::receive_update
//       Access: Published
//  Description: Extracts the update message out of the datagram and
//               applies it to the indicated object by calling the
//               appropriate method.
////////////////////////////////////////////////////////////////////
72
void DCField::receive_update(DCPacker &packer, PyObject *distobj) const;

285 20 client_format_update 0 4 476 29 DCField::client_format_update 0 1 47 388
////////////////////////////////////////////////////////////////////
//     Function: DCField::client_format_update
//       Access: Published
//  Description: Generates a datagram containing the message necessary
//               to send an update for the indicated distributed
//               object from the client.
////////////////////////////////////////////////////////////////////
78
Datagram DCField::client_format_update(DOID_TYPE do_id, PyObject *args) const;

286 16 ai_format_update 0 4 476 25 DCField::ai_format_update 0 1 48 380
////////////////////////////////////////////////////////////////////
//     Function: DCField::ai_format_update
//       Access: Published
//  Description: Generates a datagram containing the message necessary
//               to send an update for the indicated distributed
//               object from the AI.
////////////////////////////////////////////////////////////////////
116
Datagram DCField::ai_format_update(DOID_TYPE do_id, CHANNEL_TYPE to_id, CHANNEL_TYPE from_id, PyObject *args) const;

287 25 ai_format_update_msg_type 0 4 476 34 DCField::ai_format_update_msg_type 0 1 49 426
////////////////////////////////////////////////////////////////////
//     Function: DCField::ai_format_update_msg_type
//       Access: Published
//  Description: Generates a datagram containing the message necessary
//               to send an update, with the msg type,
//               for the indicated distributed
//               object from the AI.
////////////////////////////////////////////////////////////////////
139
Datagram DCField::ai_format_update_msg_type(DOID_TYPE do_id, CHANNEL_TYPE to_id, CHANNEL_TYPE from_id, int msg_type, PyObject *args) const;

288 10 DCPackData 0 4 477 22 DCPackData::DCPackData 0 1 54 223
////////////////////////////////////////////////////////////////////
//     Function: DCPackData::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
36
inline DCPackData::DCPackData(void);

289 11 ~DCPackData 0 4 477 23 DCPackData::~DCPackData 0 0 222
////////////////////////////////////////////////////////////////////
//     Function: DCPackData::Destructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
37
inline DCPackData::~DCPackData(void);

290 5 clear 0 4 477 17 DCPackData::clear 0 1 55 318
////////////////////////////////////////////////////////////////////
//     Function: DCPackData::clear
//       Access: Published
//  Description: Empties the contents of the data (without necessarily
//               freeing its allocated memory).
////////////////////////////////////////////////////////////////////
36
inline void DCPackData::clear(void);

291 10 get_string 0 4 477 22 DCPackData::get_string 0 1 56 297
////////////////////////////////////////////////////////////////////
//     Function: DCPackData::get_string
//       Access: Published
//  Description: Returns the data buffer as a string.  Also see
//               get_data().
////////////////////////////////////////////////////////////////////
49
inline string DCPackData::get_string(void) const;

292 10 get_length 0 4 477 22 DCPackData::get_length 0 1 57 393
////////////////////////////////////////////////////////////////////
//     Function: DCPackData::get_length
//       Access: Published
//  Description: Returns the current length of the buffer.  This is
//               the number of useful bytes stored in the buffer, not
//               the amount of memory it takes up.
////////////////////////////////////////////////////////////////////
49
inline size_t DCPackData::get_length(void) const;

293 8 DCPacker 0 4 478 18 DCPacker::DCPacker 0 1 58 221
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
25
DCPacker::DCPacker(void);

294 9 ~DCPacker 0 4 478 19 DCPacker::~DCPacker 0 0 220
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::Destructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
26
DCPacker::~DCPacker(void);

295 10 clear_data 0 4 478 20 DCPacker::clear_data 0 1 59 444
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::clear_data
//       Access: Published
//  Description: Empties the data in the pack buffer and unpack
//               buffer.  This should be called between calls to
//               begin_pack(), unless you want to concatenate all of
//               the pack results together.
////////////////////////////////////////////////////////////////////
39
inline void DCPacker::clear_data(void);

296 10 begin_pack 0 4 478 20 DCPacker::begin_pack 0 1 60 703
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::begin_pack
//       Access: Published
//  Description: Begins a packing session.  The parameter is the DC
//               object that describes the packing format; it may be a
//               DCParameter or DCField.
//
//               Unless you call clear_data() between sessions,
//               multiple packing sessions will be concatenated
//               together into the same buffer.  If you wish to add
//               bytes to the buffer between packing sessions, use
//               append_data() or get_write_pointer().
////////////////////////////////////////////////////////////////////
57
void DCPacker::begin_pack(DCPackerInterface const *root);

297 8 end_pack 0 4 478 18 DCPacker::end_pack 0 1 61 382
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::end_pack
//       Access: Published, Virtual
//  Description: Finishes a packing session.
//
//               The return value is true on success, or false if
//               there has been some error during packing.
////////////////////////////////////////////////////////////////////
30
bool DCPacker::end_pack(void);

298 15 set_unpack_data 0 4 478 25 DCPacker::set_unpack_data 0 1 62 768
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::set_unpack_data
//       Access: Public
//  Description: Sets up the unpack_data pointer.  You may call this
//               before calling the version of begin_unpack() that
//               takes only one parameter.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: DCPacker::set_unpack_data
//       Access: Public
//  Description: Sets up the unpack_data pointer.  You may call this
//               before calling the version of begin_unpack() that
//               takes only one parameter.
////////////////////////////////////////////////////////////////////
51
void DCPacker::set_unpack_data(string const &data);

299 12 begin_unpack 0 4 478 22 DCPacker::begin_unpack 0 1 63 688
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::begin_unpack
//       Access: Public
//  Description: Begins an unpacking session.  You must have
//               previously called set_unpack_data() to specify a
//               buffer to unpack.
//
//               If there was data left in the buffer after a previous
//               begin_unpack() .. end_unpack() session, the new
//               session will resume from the current point.  This
//               method may be used, therefore, to unpack a sequence
//               of objects from the same buffer.
////////////////////////////////////////////////////////////////////
59
void DCPacker::begin_unpack(DCPackerInterface const *root);

300 10 end_unpack 0 4 478 20 DCPacker::end_unpack 0 1 64 440
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::end_unpack
//       Access: Published
//  Description: Finishes the unpacking session.
//
//               The return value is true on success, or false if
//               there has been some error during unpacking (or if all
//               fields have not been unpacked).
////////////////////////////////////////////////////////////////////
32
bool DCPacker::end_unpack(void);

301 12 begin_repack 0 4 478 22 DCPacker::begin_repack 0 1 65 937
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::begin_repack
//       Access: Public
//  Description: Begins a repacking session.  You must have previously
//               called set_unpack_data() to specify a buffer to
//               unpack.
//
//               Unlike begin_pack() or begin_unpack() you may not
//               concatenate the results of multiple begin_repack()
//               sessions in one buffer.
//
//               Also, unlike in packing or unpacking modes, you may
//               not walk through the fields from beginning to end, or
//               even pack two consecutive fields at once.  Instead,
//               you must call seek() for each field you wish to
//               modify and pack only that one field; then call seek()
//               again to modify another field.
////////////////////////////////////////////////////////////////////
59
void DCPacker::begin_repack(DCPackerInterface const *root);

302 10 end_repack 0 4 478 20 DCPacker::end_repack 0 1 66 440
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::end_repack
//       Access: Published
//  Description: Finishes the repacking session.
//
//               The return value is true on success, or false if
//               there has been some error during repacking (or if all
//               fields have not been repacked).
////////////////////////////////////////////////////////////////////
32
bool DCPacker::end_repack(void);

303 4 seek 0 4 478 14 DCPacker::seek 0 2 67 68 1292
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::seek
//       Access: Published
//  Description: Sets the current unpack (or repack) position to the
//               named field.  In unpack mode, the next call to
//               unpack_*() or push() will begin to read the named
//               field.  In repack mode, the next call to pack_*() or
//               push() will modify the named field.
//
//               Returns true if successful, false if the field is not
//               known (or if the packer is in an invalid mode).
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: DCPacker::seek
//       Access: Published
//  Description: Seeks to the field indentified by seek_index, which
//               was returned by an earlier call to
//               DCField::find_seek_index() to get the index of some
//               nested field.  Also see the version of seek() that
//               accepts a field name.
//
//               Returns true if successful, false if the field is not
//               known (or if the packer is in an invalid mode).
////////////////////////////////////////////////////////////////////
83
bool DCPacker::seek(string const &field_name);
bool DCPacker::seek(int seek_index);

304 17 has_nested_fields 0 4 478 27 DCPacker::has_nested_fields 0 1 69 529
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::has_nested_fields
//       Access: Published
//  Description: Returns true if the current field has any nested
//               fields (and thus expects a push() .. pop()
//               interface), or false otherwise.  If this returns
//               true, get_num_nested_fields() may be called to
//               determine how many nested fields are expected.
////////////////////////////////////////////////////////////////////
52
inline bool DCPacker::has_nested_fields(void) const;

305 21 get_num_nested_fields 0 4 478 31 DCPacker::get_num_nested_fields 0 1 70 885
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::get_num_nested_fields
//       Access: Published
//  Description: Returns the number of nested fields associated with
//               the current field, if has_nested_fields() returned
//               true.
//
//               The return value may be -1 to indicate that a
//               variable number of nested fields are accepted by this
//               field type (e.g. a variable-length array).
//
//               Note that this method is unreliable to determine how
//               many fields you must traverse before you can call
//               pop(), since particularly in the presence of a
//               DCSwitch, it may change during traversal.  Use
//               more_nested_fields() instead.
////////////////////////////////////////////////////////////////////
55
inline int DCPacker::get_num_nested_fields(void) const;

306 18 more_nested_fields 0 4 478 28 DCPacker::more_nested_fields 0 1 71 389
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::more_nested_fields
//       Access: Published
//  Description: Returns true if there are more nested fields to pack
//               or unpack in the current push sequence, false if it
//               is time to call pop().
////////////////////////////////////////////////////////////////////
53
inline bool DCPacker::more_nested_fields(void) const;

307 18 get_current_parent 0 4 478 28 DCPacker::get_current_parent 0 1 72 436
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::get_current_parent
//       Access: Published
//  Description: Returns the field that we left in our last call to
//               push(): the owner of the current level of fields.
//               This may be NULL at the beginning of the pack
//               operation.
////////////////////////////////////////////////////////////////////
73
inline DCPackerInterface const *DCPacker::get_current_parent(void) const;

308 17 get_current_field 0 4 478 27 DCPacker::get_current_field 0 1 73 458
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::get_current_field
//       Access: Published
//  Description: Returns the field that will be referenced by the next
//               call to pack_*() or unpack_*().  This will be NULL if
//               we have unpacked (or packed) all fields, or if it is
//               time to call pop().
////////////////////////////////////////////////////////////////////
72
inline DCPackerInterface const *DCPacker::get_current_field(void) const;

309 15 get_last_switch 0 4 478 25 DCPacker::get_last_switch 0 1 74 746
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::get_last_switch
//       Access: Published
//  Description: Returns a pointer to the last DCSwitch instance that
//               we have passed by and selected one case of during the
//               pack/unpack process.  Each time we encounter a new
//               DCSwitch and select a case, this will change state.
//
//               This may be used to detect when a DCSwitch has been
//               selected.  At the moment this changes state,
//               get_current_parent() will contain the particular
//               SwitchCase that was selected by the switch.
////////////////////////////////////////////////////////////////////
70
inline DCSwitchParameter const *DCPacker::get_last_switch(void) const;

310 13 get_pack_type 0 4 478 23 DCPacker::get_pack_type 0 1 75 771
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::get_pack_type
//       Access: Published
//  Description: Returns the type of value expected by the current
//               field.  See the enumerated type definition at the top
//               of DCPackerInterface.h.  If this returns one of
//               PT_double, PT_int, PT_int64, or PT_string, then you
//               should call the corresponding pack_double(),
//               pack_int() function (or unpack_double(),
//               unpack_int(), etc.) to transfer data.  Otherwise, you
//               should call push() and begin packing or unpacking the
//               nested fields.
////////////////////////////////////////////////////////////////////
54
inline DCPackType DCPacker::get_pack_type(void) const;

311 22 get_current_field_name 0 4 478 32 DCPacker::get_current_field_name 0 1 76 406
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::get_current_field_name
//       Access: Published
//  Description: Returns the name of the current field, if it has a
//               name, or the empty string if the field does not have
//               a name or there is no current field.
////////////////////////////////////////////////////////////////////
59
inline string DCPacker::get_current_field_name(void) const;

312 4 push 0 4 478 14 DCPacker::push 0 1 77 587
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::push
//       Access: Published
//  Description: Marks the beginning of a nested series of fields.
//
//               This must be called before filling the elements of an
//               array or the individual fields in a structure field.
//               It must also be balanced by a matching pop().
//
//               It is necessary to use push() / pop() only if
//               has_nested_fields() returns true.
////////////////////////////////////////////////////////////////////
26
void DCPacker::push(void);

313 3 pop 0 4 478 13 DCPacker::pop 0 1 78 495
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::pop
//       Access: Published
//  Description: Marks the end of a nested series of fields.
//
//               This must be called to match a previous push() only
//               after all the expected number of nested fields have
//               been packed.  It is an error to call it too early, or
//               too late.
////////////////////////////////////////////////////////////////////
25
void DCPacker::pop(void);

314 11 pack_double 0 4 478 21 DCPacker::pack_double 0 1 79 298
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::pack_double
//       Access: Published
//  Description: Packs the indicated numeric or string value into the
//               stream.
////////////////////////////////////////////////////////////////////
48
inline void DCPacker::pack_double(double value);

315 8 pack_int 0 4 478 18 DCPacker::pack_int 0 1 80 295
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::pack_int
//       Access: Published
//  Description: Packs the indicated numeric or string value into the
//               stream.
////////////////////////////////////////////////////////////////////
42
inline void DCPacker::pack_int(int value);

316 9 pack_uint 0 4 478 19 DCPacker::pack_uint 0 1 81 296
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::pack_uint
//       Access: Published
//  Description: Packs the indicated numeric or string value into the
//               stream.
////////////////////////////////////////////////////////////////////
52
inline void DCPacker::pack_uint(unsigned int value);

317 10 pack_int64 0 4 478 20 DCPacker::pack_int64 0 1 82 297
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::pack_int64
//       Access: Published
//  Description: Packs the indicated numeric or string value into the
//               stream.
////////////////////////////////////////////////////////////////////
49
inline void DCPacker::pack_int64(PN_int64 value);

318 11 pack_uint64 0 4 478 21 DCPacker::pack_uint64 0 1 83 298
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::pack_uint64
//       Access: Published
//  Description: Packs the indicated numeric or string value into the
//               stream.
////////////////////////////////////////////////////////////////////
51
inline void DCPacker::pack_uint64(PN_uint64 value);

319 11 pack_string 0 4 478 21 DCPacker::pack_string 0 1 84 298
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::pack_string
//       Access: Published
//  Description: Packs the indicated numeric or string value into the
//               stream.
////////////////////////////////////////////////////////////////////
55
inline void DCPacker::pack_string(string const &value);

320 18 pack_literal_value 0 4 478 28 DCPacker::pack_literal_value 0 1 85 402
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::pack_literal_value
//       Access: Published
//  Description: Adds the indicated string value into the stream,
//               representing a single pre-packed field element, or a
//               whole group of field elements at once.
////////////////////////////////////////////////////////////////////
62
inline void DCPacker::pack_literal_value(string const &value);

321 18 pack_default_value 0 4 478 28 DCPacker::pack_default_value 0 1 86 406
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::pack_default_value
//       Access: Published
//  Description: Adds the default value for the current element into
//               the stream.  If no default has been set for the
//               current element, creates a sensible default.
////////////////////////////////////////////////////////////////////
40
void DCPacker::pack_default_value(void);

322 13 unpack_double 0 4 478 23 DCPacker::unpack_double 0 1 87 599
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::unpack_double
//       Access: Published
//  Description: Unpacks the current numeric or string value from the
//               stream.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: DCPacker::unpack_double
//       Access: Public
//  Description: Unpacks the current numeric or string value from the
//               stream.
////////////////////////////////////////////////////////////////////
44
inline double DCPacker::unpack_double(void);

323 10 unpack_int 0 4 478 20 DCPacker::unpack_int 0 1 88 593
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::unpack_int
//       Access: Published
//  Description: Unpacks the current numeric or string value from the
//               stream.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: DCPacker::unpack_int
//       Access: Public
//  Description: Unpacks the current numeric or string value from the
//               stream.
////////////////////////////////////////////////////////////////////
38
inline int DCPacker::unpack_int(void);

324 11 unpack_uint 0 4 478 21 DCPacker::unpack_uint 0 1 89 595
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::unpack_uint
//       Access: Published
//  Description: Unpacks the current numeric or string value from the
//               stream.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: DCPacker::unpack_uint
//       Access: Public
//  Description: Unpacks the current numeric or string value from the
//               stream.
////////////////////////////////////////////////////////////////////
48
inline unsigned int DCPacker::unpack_uint(void);

325 12 unpack_int64 0 4 478 22 DCPacker::unpack_int64 0 1 90 597
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::unpack_int64
//       Access: Published
//  Description: Unpacks the current numeric or string value from the
//               stream.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: DCPacker::unpack_int64
//       Access: Public
//  Description: Unpacks the current numeric or string value from the
//               stream.
////////////////////////////////////////////////////////////////////
45
inline PN_int64 DCPacker::unpack_int64(void);

326 13 unpack_uint64 0 4 478 23 DCPacker::unpack_uint64 0 1 91 599
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::unpack_uint64
//       Access: Published
//  Description: Unpacks the current numeric or string value from the
//               stream.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: DCPacker::unpack_uint64
//       Access: Public
//  Description: Unpacks the current numeric or string value from the
//               stream.
////////////////////////////////////////////////////////////////////
47
inline PN_uint64 DCPacker::unpack_uint64(void);

327 13 unpack_string 0 4 478 23 DCPacker::unpack_string 0 1 92 599
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::unpack_string
//       Access: Published
//  Description: Unpacks the current numeric or string value from the
//               stream.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: DCPacker::unpack_string
//       Access: Public
//  Description: Unpacks the current numeric or string value from the
//               stream.
////////////////////////////////////////////////////////////////////
44
inline string DCPacker::unpack_string(void);

328 20 unpack_literal_value 0 4 478 30 DCPacker::unpack_literal_value 0 1 93 753
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::unpack_literal_value
//       Access: Published
//  Description: Returns the literal string that represents the packed
//               value of the current field, and advances the field
//               pointer.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: DCPacker::unpack_literal_value
//       Access: Public
//  Description: Returns the literal string that represents the packed
//               value of the current field, and advances the field
//               pointer.
////////////////////////////////////////////////////////////////////
51
inline string DCPacker::unpack_literal_value(void);

329 15 unpack_validate 0 4 478 25 DCPacker::unpack_validate 0 1 94 478
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::unpack_validate
//       Access: Published
//  Description: Internally unpacks the current numeric or string
//               value and validates it against the type range limits,
//               but does not return the value.  If the current field
//               contains nested fields, validates all of them.
////////////////////////////////////////////////////////////////////
37
void DCPacker::unpack_validate(void);

330 11 unpack_skip 0 4 478 21 DCPacker::unpack_skip 0 1 95 396
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::unpack_skip
//       Access: Published
//  Description: Skips the current field without unpacking it and
//               advances to the next field.  If the current field
//               contains nested fields, skips all of them.
////////////////////////////////////////////////////////////////////
33
void DCPacker::unpack_skip(void);

331 11 pack_object 0 4 478 21 DCPacker::pack_object 0 1 96 528
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::pack_object
//       Access: Published
//  Description: Packs the Python object of whatever type into the
//               packer.  Each numeric object and string object maps
//               to the corresponding pack_value() call; a tuple or
//               sequence maps to a push() followed by all of the
//               tuple's contents followed by a pop().
////////////////////////////////////////////////////////////////////
45
void DCPacker::pack_object(PyObject *object);

332 13 unpack_object 0 4 478 23 DCPacker::unpack_object 0 1 97 509
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::unpack_object
//       Access: Published
//  Description: Unpacks a Python object of the appropriate type from
//               the stream for the current field.  This may be an
//               integer or a string for a simple field object; if the
//               current field represents a list of fields it will be
//               a tuple.
////////////////////////////////////////////////////////////////////
40
PyObject *DCPacker::unpack_object(void);

333 14 parse_and_pack 0 4 478 24 DCPacker::parse_and_pack 0 2 98 99 822
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::parse_and_pack
//       Access: Published
//  Description: Parses an object's value according to the DC file
//               syntax (e.g. as a default value string) and packs it.
//               Returns true on success, false on a parse error.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: DCPacker::parse_and_pack
//       Access: Published
//  Description: Parses an object's value according to the DC file
//               syntax (e.g. as a default value string) and packs it.
//               Returns true on success, false on a parse error.
////////////////////////////////////////////////////////////////////
106
bool DCPacker::parse_and_pack(string const &formatted_object);
bool DCPacker::parse_and_pack(istream &in);

334 17 unpack_and_format 0 4 478 27 DCPacker::unpack_and_format 0 2 100 101 820
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::unpack_and_format
//       Access: Published
//  Description: Unpacks an object and formats its value into a syntax
//               suitable for parsing in the dc file (e.g. as a
//               default value), or as an input to parse_object.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: DCPacker::unpack_and_format
//       Access: Published
//  Description: Unpacks an object and formats its value into a syntax
//               suitable for parsing in the dc file (e.g. as a
//               default value), or as an input to parse_object.
////////////////////////////////////////////////////////////////////
137
string DCPacker::unpack_and_format(bool show_field_names = 1);
void DCPacker::unpack_and_format(ostream &out, bool show_field_names = 1);

335 15 had_parse_error 0 4 478 25 DCPacker::had_parse_error 0 1 102 394
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::had_parse_error
//       Access: Published
//  Description: Returns true if there has been an parse error
//               since the most recent call to begin(); this can only
//               happen if you call parse_and_pack().
////////////////////////////////////////////////////////////////////
50
inline bool DCPacker::had_parse_error(void) const;

336 14 had_pack_error 0 4 478 24 DCPacker::had_pack_error 0 1 103 802
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::had_pack_error
//       Access: Published
//  Description: Returns true if there has been an packing error
//               since the most recent call to begin(); in particular,
//               this may be called after end() has returned false to
//               determine the nature of the failure.
//
//               A return value of true indicates there was a push/pop
//               mismatch, or the push/pop structure did not match the
//               data structure, or there were the wrong number of
//               elements in a nested push/pop structure, or on unpack
//               that the data stream was truncated.
////////////////////////////////////////////////////////////////////
49
inline bool DCPacker::had_pack_error(void) const;

337 15 had_range_error 0 4 478 25 DCPacker::had_range_error 0 1 104 735
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::had_range_error
//       Access: Published
//  Description: Returns true if there has been an range validation
//               error since the most recent call to begin(); in
//               particular, this may be called after end() has
//               returned false to determine the nature of the
//               failure.
//
//               A return value of true indicates a value that was
//               packed or unpacked did not fit within the specified
//               legal range for a parameter, or within the limits of
//               the field size.
////////////////////////////////////////////////////////////////////
50
inline bool DCPacker::had_range_error(void) const;

338 9 had_error 0 4 478 19 DCPacker::had_error 0 1 105 492
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::had_error
//       Access: Published
//  Description: Returns true if there has been any error (either a
//               pack error or a range error) since the most recent
//               call to begin().  If this returns true, then the
//               matching call to end() will indicate an error
//               (false).
////////////////////////////////////////////////////////////////////
44
inline bool DCPacker::had_error(void) const;

339 22 get_num_unpacked_bytes 0 4 478 32 DCPacker::get_num_unpacked_bytes 0 1 106 587
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::get_num_unpacked_bytes
//       Access: Published
//  Description: Returns the number of bytes that have been unpacked
//               so far, or after unpack_end(), the total number of
//               bytes that were unpacked at all.  This can be used to
//               validate that all of the bytes in the buffer were
//               actually unpacked (which is not otherwise considered
//               an error).
////////////////////////////////////////////////////////////////////
59
inline size_t DCPacker::get_num_unpacked_bytes(void) const;

340 10 get_length 0 4 478 20 DCPacker::get_length 0 1 107 391
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::get_length
//       Access: Published
//  Description: Returns the current length of the buffer.  This is
//               the number of useful bytes stored in the buffer, not
//               the amount of memory it takes up.
////////////////////////////////////////////////////////////////////
47
inline size_t DCPacker::get_length(void) const;

341 10 get_string 0 4 478 20 DCPacker::get_string 0 1 108 611
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::get_string
//       Access: Published
//  Description: Returns the packed data buffer as a string.  Also see
//               get_data().
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: DCPacker::get_string
//       Access: Published
//  Description: Copies the packed data into the indicated string.
//               Also see get_data().
////////////////////////////////////////////////////////////////////
47
inline string DCPacker::get_string(void) const;

342 17 get_unpack_length 0 4 478 27 DCPacker::get_unpack_length 0 1 109 471
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::get_unpack_length
//       Access: Published
//  Description: Returns the total number of bytes in the unpack data
//               buffer.  This is the buffer used when unpacking; it
//               is separate from the pack data returned by
//               get_length(), which is filled during packing.
////////////////////////////////////////////////////////////////////
54
inline size_t DCPacker::get_unpack_length(void) const;

343 17 get_unpack_string 0 4 478 27 DCPacker::get_unpack_string 0 1 110 500
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::get_unpack_string
//       Access: Published
//  Description: Returns the unpack data buffer, as a string.
//               This is the buffer used when unpacking; it is
//               separate from the pack data returned by get_string(),
//               which is filled during packing.  Also see
//               get_unpack_data().
////////////////////////////////////////////////////////////////////
54
inline string DCPacker::get_unpack_string(void) const;

344 37 get_num_stack_elements_ever_allocated 0 4 478 47 DCPacker::get_num_stack_elements_ever_allocated 0 1 111 524
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::StackElement::get_num_stack_elements_ever_allocated
//       Access: Published, Static
//  Description: Returns the number of DCPacker::StackElement pointers
//               ever simultaneously allocated; these are now either
//               in active use or have been recycled into the deleted
//               DCPacker::StackElement pool to be used again.
////////////////////////////////////////////////////////////////////
72
static inline int DCPacker::get_num_stack_elements_ever_allocated(void);

345 13 raw_pack_int8 0 4 478 23 DCPacker::raw_pack_int8 0 1 112 296
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::raw_pack_int8
//       Access: Published
//  Description: Packs the data into the buffer between packing
//               sessions.
////////////////////////////////////////////////////////////////////
47
inline void DCPacker::raw_pack_int8(int value);

346 14 raw_pack_int16 0 4 478 24 DCPacker::raw_pack_int16 0 1 113 297
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::raw_pack_int16
//       Access: Published
//  Description: Packs the data into the buffer between packing
//               sessions.
////////////////////////////////////////////////////////////////////
48
inline void DCPacker::raw_pack_int16(int value);

347 14 raw_pack_int32 0 4 478 24 DCPacker::raw_pack_int32 0 1 114 297
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::raw_pack_int32
//       Access: Published
//  Description: Packs the data into the buffer between packing
//               sessions.
////////////////////////////////////////////////////////////////////
48
inline void DCPacker::raw_pack_int32(int value);

348 14 raw_pack_int64 0 4 478 24 DCPacker::raw_pack_int64 0 1 115 297
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::raw_pack_int64
//       Access: Published
//  Description: Packs the data into the buffer between packing
//               sessions.
////////////////////////////////////////////////////////////////////
53
inline void DCPacker::raw_pack_int64(PN_int64 value);

349 14 raw_pack_uint8 0 4 478 24 DCPacker::raw_pack_uint8 0 1 116 297
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::raw_pack_uint8
//       Access: Published
//  Description: Packs the data into the buffer between packing
//               sessions.
////////////////////////////////////////////////////////////////////
57
inline void DCPacker::raw_pack_uint8(unsigned int value);

350 15 raw_pack_uint16 0 4 478 25 DCPacker::raw_pack_uint16 0 1 117 298
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::raw_pack_uint16
//       Access: Published
//  Description: Packs the data into the buffer between packing
//               sessions.
////////////////////////////////////////////////////////////////////
58
inline void DCPacker::raw_pack_uint16(unsigned int value);

351 15 raw_pack_uint32 0 4 478 25 DCPacker::raw_pack_uint32 0 1 118 298
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::raw_pack_uint32
//       Access: Published
//  Description: Packs the data into the buffer between packing
//               sessions.
////////////////////////////////////////////////////////////////////
58
inline void DCPacker::raw_pack_uint32(unsigned int value);

352 15 raw_pack_uint64 0 4 478 25 DCPacker::raw_pack_uint64 0 1 119 298
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::raw_pack_uint64
//       Access: Published
//  Description: Packs the data into the buffer between packing
//               sessions.
////////////////////////////////////////////////////////////////////
55
inline void DCPacker::raw_pack_uint64(PN_uint64 value);

353 16 raw_pack_float64 0 4 478 26 DCPacker::raw_pack_float64 0 1 120 299
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::raw_pack_float64
//       Access: Published
//  Description: Packs the data into the buffer between packing
//               sessions.
////////////////////////////////////////////////////////////////////
53
inline void DCPacker::raw_pack_float64(double value);

354 15 raw_pack_string 0 4 478 25 DCPacker::raw_pack_string 0 1 121 298
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::raw_pack_string
//       Access: Published
//  Description: Packs the data into the buffer between packing
//               sessions.
////////////////////////////////////////////////////////////////////
59
inline void DCPacker::raw_pack_string(string const &value);

355 15 raw_unpack_int8 0 4 478 25 DCPacker::raw_unpack_int8 0 1 122 603
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::raw_unpack_int8
//       Access: Published
//  Description: Unpacks the data from the buffer between unpacking
//               sessions.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: DCPacker::raw_unpack_int8
//       Access: Public
//  Description: Unpacks the data from the buffer between unpacking
//               sessions.
////////////////////////////////////////////////////////////////////
43
inline int DCPacker::raw_unpack_int8(void);

356 16 raw_unpack_int16 0 4 478 26 DCPacker::raw_unpack_int16 0 1 123 605
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::raw_unpack_int16
//       Access: Published
//  Description: Unpacks the data from the buffer between unpacking
//               sessions.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: DCPacker::raw_unpack_int16
//       Access: Public
//  Description: Unpacks the data from the buffer between unpacking
//               sessions.
////////////////////////////////////////////////////////////////////
44
inline int DCPacker::raw_unpack_int16(void);

357 16 raw_unpack_int32 0 4 478 26 DCPacker::raw_unpack_int32 0 1 124 605
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::raw_unpack_int32
//       Access: Published
//  Description: Unpacks the data from the buffer between unpacking
//               sessions.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: DCPacker::raw_unpack_int32
//       Access: Public
//  Description: Unpacks the data from the buffer between unpacking
//               sessions.
////////////////////////////////////////////////////////////////////
44
inline int DCPacker::raw_unpack_int32(void);

358 16 raw_unpack_int64 0 4 478 26 DCPacker::raw_unpack_int64 0 1 125 605
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::raw_unpack_int64
//       Access: Published
//  Description: Unpacks the data from the buffer between unpacking
//               sessions.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: DCPacker::raw_unpack_int64
//       Access: Public
//  Description: Unpacks the data from the buffer between unpacking
//               sessions.
////////////////////////////////////////////////////////////////////
49
inline PN_int64 DCPacker::raw_unpack_int64(void);

359 16 raw_unpack_uint8 0 4 478 26 DCPacker::raw_unpack_uint8 0 1 126 605
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::raw_unpack_uint8
//       Access: Published
//  Description: Unpacks the data from the buffer between unpacking
//               sessions.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: DCPacker::raw_unpack_uint8
//       Access: Public
//  Description: Unpacks the data from the buffer between unpacking
//               sessions.
////////////////////////////////////////////////////////////////////
53
inline unsigned int DCPacker::raw_unpack_uint8(void);

360 17 raw_unpack_uint16 0 4 478 27 DCPacker::raw_unpack_uint16 0 1 127 607
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::raw_unpack_uint16
//       Access: Published
//  Description: Unpacks the data from the buffer between unpacking
//               sessions.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: DCPacker::raw_unpack_uint16
//       Access: Public
//  Description: Unpacks the data from the buffer between unpacking
//               sessions.
////////////////////////////////////////////////////////////////////
54
inline unsigned int DCPacker::raw_unpack_uint16(void);

361 17 raw_unpack_uint32 0 4 478 27 DCPacker::raw_unpack_uint32 0 1 128 607
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::raw_unpack_uint32
//       Access: Published
//  Description: Unpacks the data from the buffer between unpacking
//               sessions.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: DCPacker::raw_unpack_uint32
//       Access: Public
//  Description: Unpacks the data from the buffer between unpacking
//               sessions.
////////////////////////////////////////////////////////////////////
54
inline unsigned int DCPacker::raw_unpack_uint32(void);

362 17 raw_unpack_uint64 0 4 478 27 DCPacker::raw_unpack_uint64 0 1 129 607
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::raw_unpack_uint64
//       Access: Published
//  Description: Unpacks the data from the buffer between unpacking
//               sessions.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: DCPacker::raw_unpack_uint64
//       Access: Public
//  Description: Unpacks the data from the buffer between unpacking
//               sessions.
////////////////////////////////////////////////////////////////////
51
inline PN_uint64 DCPacker::raw_unpack_uint64(void);

363 18 raw_unpack_float64 0 4 478 28 DCPacker::raw_unpack_float64 0 1 130 609
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::raw_unpack_float64
//       Access: Published
//  Description: Unpacks the data from the buffer between unpacking
//               sessions.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: DCPacker::raw_unpack_float64
//       Access: Public
//  Description: Unpacks the data from the buffer between unpacking
//               sessions.
////////////////////////////////////////////////////////////////////
49
inline double DCPacker::raw_unpack_float64(void);

364 17 raw_unpack_string 0 4 478 27 DCPacker::raw_unpack_string 0 1 131 607
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::raw_unpack_string
//       Access: Published
//  Description: Unpacks the data from the buffer between unpacking
//               sessions.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: DCPacker::raw_unpack_string
//       Access: Public
//  Description: Unpacks the data from the buffer between unpacking
//               sessions.
////////////////////////////////////////////////////////////////////
48
inline string DCPacker::raw_unpack_string(void);

365 19 as_simple_parameter 0 6 479 32 DCParameter::as_simple_parameter 0 2 132 133 484
////////////////////////////////////////////////////////////////////
//     Function: DCParameter::as_simple_parameter
//       Access: Published, Virtual
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: DCParameter::as_simple_parameter
//       Access: Published, Virtual
//  Description: 
////////////////////////////////////////////////////////////////////
145
virtual DCSimpleParameter *DCParameter::as_simple_parameter(void);
virtual DCSimpleParameter const *DCParameter::as_simple_parameter(void) const;

366 18 as_array_parameter 0 6 479 31 DCParameter::as_array_parameter 0 2 134 135 482
////////////////////////////////////////////////////////////////////
//     Function: DCParameter::as_array_parameter
//       Access: Published, Virtual
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: DCParameter::as_array_parameter
//       Access: Published, Virtual
//  Description: 
////////////////////////////////////////////////////////////////////
141
virtual DCArrayParameter *DCParameter::as_array_parameter(void);
virtual DCArrayParameter const *DCParameter::as_array_parameter(void) const;

367 9 make_copy 0 6 479 22 DCParameter::make_copy 0 1 136 0
60
virtual DCParameter *DCParameter::make_copy(void) const = 0;

368 8 is_valid 0 6 479 21 DCParameter::is_valid 0 1 137 0
51
virtual bool DCParameter::is_valid(void) const = 0;

369 11 get_typedef 0 4 479 24 DCParameter::get_typedef 0 1 138 383
////////////////////////////////////////////////////////////////////
//     Function: DCParameter::get_typedef
//       Access: Published
//  Description: If this type has been referenced from a typedef,
//               returns the DCTypedef instance, or NULL if the
//               type was declared on-the-fly.
////////////////////////////////////////////////////////////////////
54
DCTypedef const *DCParameter::get_typedef(void) const;

370 16 get_element_type 0 4 480 34 DCArrayParameter::get_element_type 0 1 139 309
////////////////////////////////////////////////////////////////////
//     Function: DCArrayParameter::get_element_type
//       Access: Published
//  Description: Returns the type of the individual elements of this
//               array.
////////////////////////////////////////////////////////////////////
60
DCParameter *DCArrayParameter::get_element_type(void) const;

371 14 get_array_size 0 4 480 32 DCArrayParameter::get_array_size 0 1 140 379
////////////////////////////////////////////////////////////////////
//     Function: DCArrayParameter::get_array_size
//       Access: Published
//  Description: Returns the fixed number of elements in this array,
//               or -1 if the array may contain a variable number of
//               elements.
////////////////////////////////////////////////////////////////////
49
int DCArrayParameter::get_array_size(void) const;

372 16 get_num_elements 0 4 481 31 DCAtomicField::get_num_elements 0 1 141 312
////////////////////////////////////////////////////////////////////
//     Function: DCAtomicField::get_num_elements
//       Access: Published
//  Description: Returns the number of elements (parameters) of the
//               atomic field.
////////////////////////////////////////////////////////////////////
48
int DCAtomicField::get_num_elements(void) const;

373 11 get_element 0 4 481 26 DCAtomicField::get_element 0 1 142 299
////////////////////////////////////////////////////////////////////
//     Function: DCAtomicField::get_element
//       Access: Published
//  Description: Returns the parameter object describing the
//               nth element.
////////////////////////////////////////////////////////////////////
53
DCParameter *DCAtomicField::get_element(int n) const;

374 19 get_element_default 0 4 481 34 DCAtomicField::get_element_default 0 1 143 854
// These five methods are deprecated and will be removed soon.

////////////////////////////////////////////////////////////////////
//     Function: DCAtomicField::get_element_default
//       Access: Published
//  Description: Returns the pre-formatted default value associated
//               with the nth element of the field.  This is only
//               valid if has_element_default() returns true, in which
//               case this string represents the bytes that should be
//               assigned to the field as a default value.
//
//               If the element is an array-type element, the returned
//               value will include the two-byte length preceding the
//               array data.
//
//               This is deprecated; use get_element() instead.
////////////////////////////////////////////////////////////////////
55
string DCAtomicField::get_element_default(int n) const;

375 19 has_element_default 0 4 481 34 DCAtomicField::has_element_default 0 1 144 410
////////////////////////////////////////////////////////////////////
//     Function: DCAtomicField::has_element_default
//       Access: Published
//  Description: Returns true if the nth element of the field has a
//               default value specified, false otherwise.
//
//               This is deprecated; use get_element() instead.
////////////////////////////////////////////////////////////////////
53
bool DCAtomicField::has_element_default(int n) const;

376 16 get_element_name 0 4 481 31 DCAtomicField::get_element_name 0 1 145 582
////////////////////////////////////////////////////////////////////
//     Function: DCAtomicField::get_element_name
//       Access: Published
//  Description: Returns the name of the nth element of the field.
//               This name is strictly for documentary purposes; it
//               does not generally affect operation.  If a name is
//               not specified, this will be the empty string.
//
//               This method is deprecated; use
//               get_element()->get_name() instead.
////////////////////////////////////////////////////////////////////
52
string DCAtomicField::get_element_name(int n) const;

377 16 get_element_type 0 4 481 31 DCAtomicField::get_element_type 0 1 146 377
////////////////////////////////////////////////////////////////////
//     Function: DCAtomicField::get_element_type
//       Access: Published
//  Description: Returns the numeric type of the nth element of the
//               field.  This method is deprecated; use
//               get_element() instead.
////////////////////////////////////////////////////////////////////
61
DCSubatomicType DCAtomicField::get_element_type(int n) const;

378 19 get_element_divisor 0 4 481 34 DCAtomicField::get_element_divisor 0 1 147 653
////////////////////////////////////////////////////////////////////
//     Function: DCAtomicField::get_element_divisor
//       Access: Published
//  Description: Returns the divisor associated with the nth element
//               of the field.  This implements an implicit
//               fixed-point system; floating-point values are to be
//               multiplied by this value before encoding into a
//               packet, and divided by this number after decoding.
//
//               This method is deprecated; use
//               get_element()->get_divisor() instead.
////////////////////////////////////////////////////////////////////
52
int DCAtomicField::get_element_divisor(int n) const;

379 14 ~DCDeclaration 0 6 482 29 DCDeclaration::~DCDeclaration 0 0 230
////////////////////////////////////////////////////////////////////
//     Function: DCDeclaration::Destructor
//       Access: Public, Virtual
//  Description:
////////////////////////////////////////////////////////////////////
44
virtual DCDeclaration::~DCDeclaration(void);

380 8 as_class 0 6 482 23 DCDeclaration::as_class 0 2 148 149 466
////////////////////////////////////////////////////////////////////
//     Function: DCDeclaration::as_class
//       Access: Published, Virtual
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: DCDeclaration::as_class
//       Access: Published, Virtual
//  Description: 
////////////////////////////////////////////////////////////////////
107
virtual DCClass *DCDeclaration::as_class(void);
virtual DCClass const *DCDeclaration::as_class(void) const;

381 9 as_switch 0 6 482 24 DCDeclaration::as_switch 0 2 150 151 468
////////////////////////////////////////////////////////////////////
//     Function: DCDeclaration::as_switch
//       Access: Published, Virtual
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: DCDeclaration::as_switch
//       Access: Published, Virtual
//  Description: 
////////////////////////////////////////////////////////////////////
111
virtual DCSwitch *DCDeclaration::as_switch(void);
virtual DCSwitch const *DCDeclaration::as_switch(void) const;

382 6 output 0 6 482 21 DCDeclaration::output 0 1 152 307
////////////////////////////////////////////////////////////////////
//     Function : DCDeclaration::output
//       Access : Published, Virtual
//  Description : Write a string representation of this instance to
//                <out>.
////////////////////////////////////////////////////////////////////
55
virtual void DCDeclaration::output(ostream &out) const;

383 5 write 0 4 482 20 DCDeclaration::write 0 1 153 292
////////////////////////////////////////////////////////////////////
//     Function : DCDeclaration::
//       Access : Published
//  Description : Write a string representation of this instance to
//                <out>.
////////////////////////////////////////////////////////////////////
64
void DCDeclaration::write(ostream &out, int indent_level) const;

384 11 get_dc_file 0 4 483 20 DCClass::get_dc_file 0 1 154 270
////////////////////////////////////////////////////////////////////
//     Function: DCClass::get_dc_file
//       Access: Published
//  Description: Returns the DCFile object that contains the class.
////////////////////////////////////////////////////////////////////
48
inline DCFile *DCClass::get_dc_file(void) const;

385 8 get_name 0 4 483 17 DCClass::get_name 0 1 155 248
////////////////////////////////////////////////////////////////////
//     Function: DCClass::get_name
//       Access: Published
//  Description: Returns the name of this class.
////////////////////////////////////////////////////////////////////
51
inline string const &DCClass::get_name(void) const;

386 10 get_number 0 4 483 19 DCClass::get_number 0 1 156 369
////////////////////////////////////////////////////////////////////
//     Function: DCClass::get_number
//       Access: Published
//  Description: Returns a unique index number associated with this
//               class.  This is defined implicitly when the .dc
//               file(s) are read.
////////////////////////////////////////////////////////////////////
43
inline int DCClass::get_number(void) const;

387 15 get_num_parents 0 4 483 24 DCClass::get_num_parents 0 1 157 301
////////////////////////////////////////////////////////////////////
//     Function: DCClass::get_num_parents
//       Access: Published
//  Description: Returns the number of base classes this class
//               inherits from.
////////////////////////////////////////////////////////////////////
41
int DCClass::get_num_parents(void) const;

388 10 get_parent 0 4 483 19 DCClass::get_parent 0 1 158 290
////////////////////////////////////////////////////////////////////
//     Function: DCClass::get_parent
//       Access: Published
//  Description: Returns the nth parent class this class inherits
//               from.
////////////////////////////////////////////////////////////////////
42
DCClass *DCClass::get_parent(int n) const;

389 15 has_constructor 0 4 483 24 DCClass::has_constructor 0 1 159 340
////////////////////////////////////////////////////////////////////
//     Function: DCClass::has_constructor
//       Access: Published
//  Description: Returns true if this class has a constructor method,
//               false if it just uses the default constructor.
////////////////////////////////////////////////////////////////////
42
bool DCClass::has_constructor(void) const;

390 15 get_constructor 0 4 483 24 DCClass::get_constructor 0 1 160 372
////////////////////////////////////////////////////////////////////
//     Function: DCClass::get_constructor
//       Access: Published
//  Description: Returns the constructor method for this class if it
//               is defined, or NULL if the class uses the default
//               constructor.
////////////////////////////////////////////////////////////////////
46
DCField *DCClass::get_constructor(void) const;

391 14 get_num_fields 0 4 483 23 DCClass::get_num_fields 0 1 161 322
////////////////////////////////////////////////////////////////////
//     Function: DCClass::get_num_fields
//       Access: Published
//  Description: Returns the number of fields defined directly in this
//               class, ignoring inheritance.
////////////////////////////////////////////////////////////////////
40
int DCClass::get_num_fields(void) const;

392 9 get_field 0 4 483 18 DCClass::get_field 0 1 162 428
////////////////////////////////////////////////////////////////////
//     Function: DCClass::get_field
//       Access: Published
//  Description: Returns the nth field in the class.  This is not
//               necessarily the field with index n; this is the nth
//               field defined in the class directly, ignoring
//               inheritance.
////////////////////////////////////////////////////////////////////
41
DCField *DCClass::get_field(int n) const;

393 17 get_field_by_name 0 4 483 26 DCClass::get_field_by_name 0 1 163 585
////////////////////////////////////////////////////////////////////
//     Function: DCClass::get_field_by_name
//       Access: Published
//  Description: Returns a pointer to the DCField that shares the
//               indicated name.  If the named field is not found in
//               the current class, the parent classes will be
//               searched, so the value returned may not actually be a
//               field within this class.  Returns NULL if there is no
//               such field defined.
////////////////////////////////////////////////////////////////////
62
DCField *DCClass::get_field_by_name(string const &name) const;

394 18 get_field_by_index 0 4 483 27 DCClass::get_field_by_index 0 1 164 594
////////////////////////////////////////////////////////////////////
//     Function: DCClass::get_field_by_index
//       Access: Published
//  Description: Returns a pointer to the DCField that has the
//               indicated index number.  If the numbered field is not
//               found in the current class, the parent classes will
//               be searched, so the value returned may not actually
//               be a field within this class.  Returns NULL if there
//               is no such field defined.
////////////////////////////////////////////////////////////////////
61
DCField *DCClass::get_field_by_index(int index_number) const;

395 24 get_num_inherited_fields 0 4 483 33 DCClass::get_num_inherited_fields 0 1 165 338
////////////////////////////////////////////////////////////////////
//     Function: DCClass::get_num_inherited_fields
//       Access: Published
//  Description: Returns the total number of field fields defined in
//               this class and all ancestor classes.
////////////////////////////////////////////////////////////////////
50
int DCClass::get_num_inherited_fields(void) const;

396 19 get_inherited_field 0 4 483 28 DCClass::get_inherited_field 0 1 166 625
////////////////////////////////////////////////////////////////////
//     Function: DCClass::get_inherited_field
//       Access: Published
//  Description: Returns the nth field field in the class and all of
//               its ancestors.  
//
//               This *used* to be the same thing as
//               get_field_by_index(), back when the fields were
//               numbered sequentially within a class's inheritance
//               hierarchy.  Now that fields have a globally unique
//               index number, this is no longer true.
////////////////////////////////////////////////////////////////////
51
DCField *DCClass::get_inherited_field(int n) const;

397 9 is_struct 0 4 483 18 DCClass::is_struct 0 1 167 379
////////////////////////////////////////////////////////////////////
//     Function: DCClass::is_struct
//       Access: Published
//  Description: Returns true if the class has been identified with
//               the "struct" keyword in the dc file, false if it was
//               declared with "dclass".
////////////////////////////////////////////////////////////////////
43
inline bool DCClass::is_struct(void) const;

398 14 is_bogus_class 0 4 483 23 DCClass::is_bogus_class 0 1 168 524
////////////////////////////////////////////////////////////////////
//     Function: DCClass::is_bogus_class
//       Access: Published
//  Description: Returns true if the class has been flagged as a bogus
//               class.  This is set for classes that are generated by
//               the parser as placeholder for missing classes, as
//               when reading a partial file; it should not occur in a
//               normal valid dc file.
////////////////////////////////////////////////////////////////////
48
inline bool DCClass::is_bogus_class(void) const;

399 25 inherits_from_bogus_class 0 4 483 34 DCClass::inherits_from_bogus_class 0 1 169 446
////////////////////////////////////////////////////////////////////
//     Function : DCClass::inherits_from_bogus_class
//       Access : Published
//  Description : Returns true if this class, or any class in the
//                inheritance heirarchy for this class, is a "bogus"
//                class--a forward reference to an as-yet-undefined
//                class.
////////////////////////////////////////////////////////////////////
52
bool DCClass::inherits_from_bogus_class(void) const;

400 14 start_generate 0 4 483 23 DCClass::start_generate 0 1 170 543
////////////////////////////////////////////////////////////////////
//     Function: DCClass::start_generate
//       Access: Published
//  Description: Starts the PStats timer going on the "generate" task,
//               that is, marks the beginning of the process of
//               generating a new object, for the purposes of timing
//               this process.
//
//               This should balance with a corresponding call to
//               stop_generate().
////////////////////////////////////////////////////////////////////
42
inline void DCClass::start_generate(void);

401 13 stop_generate 0 4 483 22 DCClass::stop_generate 0 1 171 365
////////////////////////////////////////////////////////////////////
//     Function: DCClass::stop_generate
//       Access: Published
//  Description: Stops the PStats timer on the "generate" task.
//               This should balance with a preceding call to
//               start_generate().
////////////////////////////////////////////////////////////////////
41
inline void DCClass::stop_generate(void);

402 6 output 0 6 483 15 DCClass::output 0 1 172 601
////////////////////////////////////////////////////////////////////
//     Function : DCClass::output
//       Access : Published, Virtual
//  Description : Write a string representation of this instance to
//                <out>.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function : DCClass::output
//       Access : Public, Virtual
//  Description : Write a string representation of this instance to
//                <out>.
////////////////////////////////////////////////////////////////////
49
virtual void DCClass::output(ostream &out) const;

403 13 has_class_def 0 4 483 22 DCClass::has_class_def 0 1 173 333
////////////////////////////////////////////////////////////////////
//     Function: DCClass::has_class_def
//       Access: Published
//  Description: Returns true if the DCClass object has an associated
//               Python class definition, false otherwise.
////////////////////////////////////////////////////////////////////
40
bool DCClass::has_class_def(void) const;

404 13 set_class_def 0 4 483 22 DCClass::set_class_def 0 1 174 383
////////////////////////////////////////////////////////////////////
//     Function: DCClass::set_class_def
//       Access: Published
//  Description: Sets the class object associated with this
//               DistributedClass.  This object will be used to
//               construct new instances of the class.
////////////////////////////////////////////////////////////////////
49
void DCClass::set_class_def(PyObject *class_def);

405 13 get_class_def 0 4 483 22 DCClass::get_class_def 0 1 175 388
////////////////////////////////////////////////////////////////////
//     Function: DCClass::get_class_def
//       Access: Published
//  Description: Returns the class object that was previously
//               associated with this DistributedClass.  This will
//               return a new reference to the object.
////////////////////////////////////////////////////////////////////
45
PyObject *DCClass::get_class_def(void) const;

406 19 has_owner_class_def 0 4 483 28 DCClass::has_owner_class_def 0 1 176 345
////////////////////////////////////////////////////////////////////
//     Function: DCClass::has_owner_class_def
//       Access: Published
//  Description: Returns true if the DCClass object has an associated
//               Python owner class definition, false otherwise.
////////////////////////////////////////////////////////////////////
46
bool DCClass::has_owner_class_def(void) const;

407 19 set_owner_class_def 0 4 483 28 DCClass::set_owner_class_def 0 1 177 401
////////////////////////////////////////////////////////////////////
//     Function: DCClass::set_owner_class_def
//       Access: Published
//  Description: Sets the owner class object associated with this
//               DistributedClass.  This object will be used to
//               construct new owner instances of the class.
////////////////////////////////////////////////////////////////////
61
void DCClass::set_owner_class_def(PyObject *owner_class_def);

408 19 get_owner_class_def 0 4 483 28 DCClass::get_owner_class_def 0 1 178 400
////////////////////////////////////////////////////////////////////
//     Function: DCClass::get_owner_class_def
//       Access: Published
//  Description: Returns the owner class object that was previously
//               associated with this DistributedClass.  This will
//               return a new reference to the object.
////////////////////////////////////////////////////////////////////
51
PyObject *DCClass::get_owner_class_def(void) const;

409 14 receive_update 0 4 483 23 DCClass::receive_update 0 1 179 376
////////////////////////////////////////////////////////////////////
//     Function: DCClass::receive_update
//       Access: Published
//  Description: Extracts the update message out of the packer and
//               applies it to the indicated object by calling the
//               appropriate method.
////////////////////////////////////////////////////////////////////
76
void DCClass::receive_update(PyObject *distobj, DatagramIterator &di) const;

410 33 receive_update_broadcast_required 0 4 483 42 DCClass::receive_update_broadcast_required 0 1 180 500
////////////////////////////////////////////////////////////////////
//     Function: DCClass::receive_update_broadcast_required
//       Access: Published
//  Description: Processes a big datagram that includes all of the
//               "required" fields that are sent along with a normal
//               "generate with required" message.  This is all of the
//               atomic fields that are marked "broadcast required".
////////////////////////////////////////////////////////////////////
95
void DCClass::receive_update_broadcast_required(PyObject *distobj, DatagramIterator &di) const;

411 39 receive_update_broadcast_required_owner 0 4 483 48 DCClass::receive_update_broadcast_required_owner 0 1 181 563
////////////////////////////////////////////////////////////////////
//     Function: DCClass::receive_update_broadcast_required_owner
//       Access: Published
//  Description: Processes a big datagram that includes all of the
//               "required" fields that are sent along with a normal
//               "generate with required" message.  This is all of the
//               atomic fields that are marked "broadcast ownrecv". Should
//               be used for 'owner-view' objects.
////////////////////////////////////////////////////////////////////
101
void DCClass::receive_update_broadcast_required_owner(PyObject *distobj, DatagramIterator &di) const;

412 27 receive_update_all_required 0 4 483 36 DCClass::receive_update_all_required 0 1 182 492
////////////////////////////////////////////////////////////////////
//     Function: DCClass::receive_update_all_required
//       Access: Published
//  Description: Processes a big datagram that includes all of the
//               "required" fields that are sent when an avatar is
//               created.  This is all of the atomic fields that are
//               marked "required", whether they are broadcast or not.
////////////////////////////////////////////////////////////////////
89
void DCClass::receive_update_all_required(PyObject *distobj, DatagramIterator &di) const;

413 20 receive_update_other 0 4 483 29 DCClass::receive_update_other 0 1 183 333
////////////////////////////////////////////////////////////////////
//     Function: DCClass::receive_update_other
//       Access: Published
//  Description: Processes a datagram that lists some additional
//               fields that are broadcast in one chunk.
////////////////////////////////////////////////////////////////////
82
void DCClass::receive_update_other(PyObject *distobj, DatagramIterator &di) const;

414 13 direct_update 0 4 483 22 DCClass::direct_update 0 2 184 185 604
////////////////////////////////////////////////////////////////////
//     Function: DCClass::direct_update
//       Access: Published
//  Description: Processes an update for a named field from a packed
//               value blob.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: DCClass::direct_update
//       Access: Published
//  Description: Processes an update for a named field from a packed
//               datagram.
////////////////////////////////////////////////////////////////////
199
void DCClass::direct_update(PyObject *distobj, string const &field_name, string const &value_blob);
void DCClass::direct_update(PyObject *distobj, string const &field_name, Datagram const &datagram);

415 19 pack_required_field 0 4 483 28 DCClass::pack_required_field 0 2 186 187 1330
////////////////////////////////////////////////////////////////////
//     Function: DCClass::pack_required_field
//       Access: Published
//  Description: Looks up the current value of the indicated field by
//               calling the appropriate get*() function, then packs
//               that value into the datagram.  This field is
//               presumably either a required field or a specified
//               optional field, and we are building up a datagram for
//               the generate-with-required message.
//
//               Returns true on success, false on failure.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: DCClass::pack_required_field
//       Access: Published
//  Description: Looks up the current value of the indicated field by
//               calling the appropriate get*() function, then packs
//               that value into the packer.  This field is
//               presumably either a required field or a specified
//               optional field, and we are building up a datagram for
//               the generate-with-required message.
//
//               Returns true on success, false on failure.
////////////////////////////////////////////////////////////////////
201
bool DCClass::pack_required_field(Datagram &datagram, PyObject *distobj, DCField const *field) const;
bool DCClass::pack_required_field(DCPacker &packer, PyObject *distobj, DCField const *field) const;

416 20 client_format_update 0 4 483 29 DCClass::client_format_update 0 1 188 388
////////////////////////////////////////////////////////////////////
//     Function: DCClass::client_format_update
//       Access: Published
//  Description: Generates a datagram containing the message necessary
//               to send an update for the indicated distributed
//               object from the client.
////////////////////////////////////////////////////////////////////
104
Datagram DCClass::client_format_update(string const &field_name, DOID_TYPE do_id, PyObject *args) const;

417 16 ai_format_update 0 4 483 25 DCClass::ai_format_update 0 1 189 380
////////////////////////////////////////////////////////////////////
//     Function: DCClass::ai_format_update
//       Access: Published
//  Description: Generates a datagram containing the message necessary
//               to send an update for the indicated distributed
//               object from the AI.
////////////////////////////////////////////////////////////////////
142
Datagram DCClass::ai_format_update(string const &field_name, DOID_TYPE do_id, CHANNEL_TYPE to_id, CHANNEL_TYPE from_id, PyObject *args) const;

418 25 ai_format_update_msg_type 0 4 483 34 DCClass::ai_format_update_msg_type 0 1 190 436
////////////////////////////////////////////////////////////////////
//     Function: DCClass::ai_format_update_msg_type
//       Access: Published
//  Description: Generates a datagram containing the message necessary
//               to send an update, using the indicated msg type
//               for the indicated distributed
//               object from the AI.
////////////////////////////////////////////////////////////////////
165
Datagram DCClass::ai_format_update_msg_type(string const &field_name, DOID_TYPE do_id, CHANNEL_TYPE to_id, CHANNEL_TYPE from_id, int msg_type, PyObject *args) const;

419 18 ai_format_generate 0 4 483 27 DCClass::ai_format_generate 0 1 191 593
////////////////////////////////////////////////////////////////////
//     Function: DCClass::ai_format_generate
//       Access: Published
//  Description: Generates a datagram containing the message necessary
//               to generate a new distributed object from the AI.
//               This requires querying the object for the initial
//               value of its required fields.
//
//               optional_fields is a list of fieldNames to generate
//               in addition to the normal required fields.
////////////////////////////////////////////////////////////////////
214
Datagram DCClass::ai_format_generate(PyObject *distobj, DOID_TYPE do_id, ZONEID_TYPE parent_id, ZONEID_TYPE zone_id, CHANNEL_TYPE district_channel_id, CHANNEL_TYPE from_channel_id, PyObject *optional_fields) const;

420 26 client_format_generate_CMU 0 4 483 35 DCClass::client_format_generate_CMU 0 1 192 679
////////////////////////////////////////////////////////////////////
//     Function: DCClass::client_format_generate_CMU
//       Access: Published
//  Description: Generates a datagram containing the message necessary
//               to generate a new distributed object from the client.
//               This requires querying the object for the initial
//               value of its required fields.
//
//               optional_fields is a list of fieldNames to generate
//               in addition to the normal required fields.
//
//               This method is only called by the CMU implementation.
////////////////////////////////////////////////////////////////////
135
Datagram DCClass::client_format_generate_CMU(PyObject *distobj, DOID_TYPE do_id, ZONEID_TYPE zone_id, PyObject *optional_fields) const;

421 9 get_class 0 4 484 27 DCClassParameter::get_class 0 1 193 278
////////////////////////////////////////////////////////////////////
//     Function: DCClassParameter::get_class
//       Access: Published
//  Description: Returns the class object this parameter represents.
////////////////////////////////////////////////////////////////////
55
DCClass const *DCClassParameter::get_class(void) const;

422 17 ~DCClassParameter 0 4 484 35 DCClassParameter::~DCClassParameter 0 0 0
42
DCClassParameter::~DCClassParameter(void);

423 6 DCFile 0 4 485 14 DCFile::DCFile 0 1 194 218
////////////////////////////////////////////////////////////////////
//     Function: DCFile::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
21
DCFile::DCFile(void);

424 7 ~DCFile 0 4 485 15 DCFile::~DCFile 0 0 217
////////////////////////////////////////////////////////////////////
//     Function: DCFile::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
22
DCFile::~DCFile(void);

425 5 clear 0 4 485 13 DCFile::clear 0 1 195 322
////////////////////////////////////////////////////////////////////
//     Function: DCFile::clear
//       Access: Published
//  Description: Removes all of the classes defined within the DCFile
//               and prepares it for reading a new file.
////////////////////////////////////////////////////////////////////
25
void DCFile::clear(void);

426 8 read_all 0 4 485 16 DCFile::read_all 0 1 196 382
////////////////////////////////////////////////////////////////////
//     Function: DCFile::read_all
//       Access: Published
//  Description: This special method reads all of the .dc files named
//               by the "dc-file" config.prc variable, and loads them
//               into the DCFile namespace.
////////////////////////////////////////////////////////////////////
28
bool DCFile::read_all(void);

427 4 read 0 4 485 12 DCFile::read 0 2 197 198 1394
////////////////////////////////////////////////////////////////////
//     Function: DCFile::read
//       Access: Published
//  Description: Opens and reads the indicated .dc file by name.  The
//               distributed classes defined in the file will be
//               appended to the set of distributed classes already
//               recorded, if any.
//
//               Returns true if the file is successfully read, false
//               if there was an error (in which case the file might
//               have been partially read).
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: DCFile::read
//       Access: Published
//  Description: Parses the already-opened input stream for
//               distributed class descriptions.  The filename
//               parameter is optional and is only used when reporting
//               errors.
//
//               The distributed classes defined in the file will be
//               appended to the set of distributed classes already
//               recorded, if any.
//
//               Returns true if the file is successfully read, false
//               if there was an error (in which case the file might
//               have been partially read).
////////////////////////////////////////////////////////////////////
104
bool DCFile::read(Filename filename);
bool DCFile::read(istream &in, string const &filename = string());

428 5 write 0 4 485 13 DCFile::write 0 2 199 200 907
////////////////////////////////////////////////////////////////////
//     Function: DCFile::write
//       Access: Published
//  Description: Opens the indicated filename for output and writes a
//               parseable description of all the known distributed
//               classes to the file.
//
//               Returns true if the description is successfully
//               written, false otherwise.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: DCFile::write
//       Access: Published
//  Description: Writes a parseable description of all the known
//               distributed classes to the stream.
//
//               Returns true if the description is successfully
//               written, false otherwise.
////////////////////////////////////////////////////////////////////
108
bool DCFile::write(Filename filename, bool brief) const;
bool DCFile::write(ostream &out, bool brief) const;

429 15 get_num_classes 0 4 485 23 DCFile::get_num_classes 0 1 201 296
////////////////////////////////////////////////////////////////////
//     Function: DCFile::get_num_classes
//       Access: Published
//  Description: Returns the number of classes read from the .dc
//               file(s).
////////////////////////////////////////////////////////////////////
40
int DCFile::get_num_classes(void) const;

430 9 get_class 0 4 485 17 DCFile::get_class 0 1 202 265
////////////////////////////////////////////////////////////////////
//     Function: DCFile::get_class
//       Access: Published
//  Description: Returns the nth class read from the .dc file(s).
////////////////////////////////////////////////////////////////////
40
DCClass *DCFile::get_class(int n) const;

431 17 get_class_by_name 0 4 485 25 DCFile::get_class_by_name 0 1 203 323
////////////////////////////////////////////////////////////////////
//     Function: DCFile::get_class_by_name
//       Access: Published
//  Description: Returns the class that has the indicated name, or
//               NULL if there is no such class.
////////////////////////////////////////////////////////////////////
61
DCClass *DCFile::get_class_by_name(string const &name) const;

432 18 get_switch_by_name 0 4 485 26 DCFile::get_switch_by_name 0 1 204 326
////////////////////////////////////////////////////////////////////
//     Function: DCFile::get_switch_by_name
//       Access: Published
//  Description: Returns the switch that has the indicated name, or
//               NULL if there is no such switch.
////////////////////////////////////////////////////////////////////
63
DCSwitch *DCFile::get_switch_by_name(string const &name) const;

433 18 get_field_by_index 0 4 485 26 DCFile::get_field_by_index 0 1 205 667
////////////////////////////////////////////////////////////////////
//     Function: DCFile::get_field_by_index
//       Access: Published, Static
//  Description: Returns a pointer to the one DCField that has the
//               indicated index number, of all the DCFields across
//               all classes in the file.
//
//               This method is only valid if dc-multiple-inheritance
//               is set true in the Config.prc file.  Without this
//               setting, different DCFields may share the same index
//               number, so this global lookup is not possible.
////////////////////////////////////////////////////////////////////
60
DCField *DCFile::get_field_by_index(int index_number) const;

434 17 all_objects_valid 0 4 485 25 DCFile::all_objects_valid 0 1 206 467
////////////////////////////////////////////////////////////////////
//     Function: DCFile::all_objects_valid
//       Access: Published
//  Description: Returns true if all of the classes read from the DC
//               file were defined and valid, or false if any of them
//               were undefined ("bogus classes").  If this is true,
//               we might have read a partial file.
////////////////////////////////////////////////////////////////////
50
inline bool DCFile::all_objects_valid(void) const;

435 22 get_num_import_modules 0 4 485 30 DCFile::get_num_import_modules 0 1 207 308
////////////////////////////////////////////////////////////////////
//     Function: DCFile::get_num_import_modules
//       Access: Published
//  Description: Returns the number of import lines read from the .dc
//               file(s).
////////////////////////////////////////////////////////////////////
47
int DCFile::get_num_import_modules(void) const;

436 17 get_import_module 0 4 485 25 DCFile::get_import_module 0 1 208 316
////////////////////////////////////////////////////////////////////
//     Function: DCFile::get_import_module
//       Access: Published
//  Description: Returns the module named by the nth import line read
//               from the .dc file(s).
////////////////////////////////////////////////////////////////////
46
string DCFile::get_import_module(int n) const;

437 22 get_num_import_symbols 0 4 485 30 DCFile::get_num_import_symbols 0 1 209 482
////////////////////////////////////////////////////////////////////
//     Function: DCFile::get_num_import_symbols
//       Access: Published
//  Description: Returns the number of symbols explicitly imported by
//               the nth import line.  If this is 0, the line is
//               "import modulename"; if it is more than 0, the line
//               is "from modulename import symbol, symbol ... ".
////////////////////////////////////////////////////////////////////
48
int DCFile::get_num_import_symbols(int n) const;

438 17 get_import_symbol 0 4 485 25 DCFile::get_import_symbol 0 1 210 320
////////////////////////////////////////////////////////////////////
//     Function: DCFile::get_import_symbol
//       Access: Published
//  Description: Returns the ith symbol named by the nth import line
//               read from the .dc file(s).
////////////////////////////////////////////////////////////////////
53
string DCFile::get_import_symbol(int n, int i) const;

439 16 get_num_typedefs 0 4 485 24 DCFile::get_num_typedefs 0 1 211 298
////////////////////////////////////////////////////////////////////
//     Function: DCFile::get_num_typedefs
//       Access: Published
//  Description: Returns the number of typedefs read from the .dc
//               file(s).
////////////////////////////////////////////////////////////////////
41
int DCFile::get_num_typedefs(void) const;

440 11 get_typedef 0 4 485 19 DCFile::get_typedef 0 1 212 269
////////////////////////////////////////////////////////////////////
//     Function: DCFile::get_typedef
//       Access: Published
//  Description: Returns the nth typedef read from the .dc file(s).
////////////////////////////////////////////////////////////////////
44
DCTypedef *DCFile::get_typedef(int n) const;

441 19 get_typedef_by_name 0 4 485 27 DCFile::get_typedef_by_name 0 1 213 334
////////////////////////////////////////////////////////////////////
//     Function: DCFile::get_typedef_by_name
//       Access: Published
//  Description: Returns the typedef that has the indicated name, or
//               NULL if there is no such typedef name.
////////////////////////////////////////////////////////////////////
65
DCTypedef *DCFile::get_typedef_by_name(string const &name) const;

442 16 get_num_keywords 0 4 485 24 DCFile::get_num_keywords 0 1 214 298
////////////////////////////////////////////////////////////////////
//     Function: DCFile::get_num_keywords
//       Access: Published
//  Description: Returns the number of keywords read from the .dc
//               file(s).
////////////////////////////////////////////////////////////////////
41
int DCFile::get_num_keywords(void) const;

443 11 get_keyword 0 4 485 19 DCFile::get_keyword 0 1 215 269
////////////////////////////////////////////////////////////////////
//     Function: DCFile::get_keyword
//       Access: Published
//  Description: Returns the nth keyword read from the .dc file(s).
////////////////////////////////////////////////////////////////////
50
DCKeyword const *DCFile::get_keyword(int n) const;

444 19 get_keyword_by_name 0 4 485 27 DCFile::get_keyword_by_name 0 1 216 334
////////////////////////////////////////////////////////////////////
//     Function: DCFile::get_keyword_by_name
//       Access: Published
//  Description: Returns the keyword that has the indicated name, or
//               NULL if there is no such keyword name.
////////////////////////////////////////////////////////////////////
71
DCKeyword const *DCFile::get_keyword_by_name(string const &name) const;

445 8 get_hash 0 4 485 16 DCFile::get_hash 0 1 217 505
////////////////////////////////////////////////////////////////////
//     Function: DCFile::get_hash
//       Access: Published
//  Description: Returns a 32-bit hash index associated with this
//               file.  This number is guaranteed to be consistent if
//               the contents of the file have not changed, and it is
//               very likely to be different if the contents of the
//               file do change.
////////////////////////////////////////////////////////////////////
47
unsigned long int DCFile::get_hash(void) const;

446 8 get_name 0 4 486 19 DCKeyword::get_name 0 1 218 252
////////////////////////////////////////////////////////////////////
//     Function: DCKeyword::get_name
//       Access: Published
//  Description: Returns the name of this keyword.
////////////////////////////////////////////////////////////////////
46
string const &DCKeyword::get_name(void) const;

447 15 get_num_atomics 0 4 487 33 DCMolecularField::get_num_atomics 0 1 219 320
////////////////////////////////////////////////////////////////////
//     Function: DCMolecularField::get_num_atomics
//       Access: Published
//  Description: Returns the number of atomic fields that make up this
//               molecular field.
////////////////////////////////////////////////////////////////////
50
int DCMolecularField::get_num_atomics(void) const;

448 10 get_atomic 0 4 487 28 DCMolecularField::get_atomic 0 1 220 440
////////////////////////////////////////////////////////////////////
//     Function: DCMolecularField::get_atomic
//       Access: Published
//  Description: Returns the nth atomic field that makes up this
//               molecular field.  This may or may not be a field of
//               this particular class; it might be defined in a
//               parent class.
////////////////////////////////////////////////////////////////////
57
DCAtomicField *DCMolecularField::get_atomic(int n) const;

449 17 ~DCMolecularField 0 4 487 35 DCMolecularField::~DCMolecularField 0 0 0
42
DCMolecularField::~DCMolecularField(void);

450 8 get_type 0 4 488 27 DCSimpleParameter::get_type 0 1 221 311
////////////////////////////////////////////////////////////////////
//     Function: DCSimpleParameter::get_type
//       Access: Published
//  Description: Returns the particular subatomic type represented by
//               this instance.
////////////////////////////////////////////////////////////////////
56
DCSubatomicType DCSimpleParameter::get_type(void) const;

451 11 has_modulus 0 4 488 30 DCSimpleParameter::has_modulus 0 1 222 311
////////////////////////////////////////////////////////////////////
//     Function: DCSimpleParameter::has_modulus
//       Access: Published
//  Description: Returns true if there is a modulus associated, false
//               otherwise.,
////////////////////////////////////////////////////////////////////
48
bool DCSimpleParameter::has_modulus(void) const;

452 11 get_modulus 0 4 488 30 DCSimpleParameter::get_modulus 0 1 223 564
////////////////////////////////////////////////////////////////////
//     Function: DCSimpleParameter::get_modulus
//       Access: Published
//  Description: Returns the modulus associated with this type, if
//               any.  It is an error to call this if has_modulus()
//               returned false.
//
//               If present, this is the modulus that is used to
//               constrain the numeric value of the field before it is
//               packed (and range-checked).
////////////////////////////////////////////////////////////////////
50
double DCSimpleParameter::get_modulus(void) const;

453 11 get_divisor 0 4 488 30 DCSimpleParameter::get_divisor 0 1 224 588
////////////////////////////////////////////////////////////////////
//     Function: DCSimpleParameter::get_divisor
//       Access: Published
//  Description: Returns the divisor associated with this type.  This
//               is 1 by default, but if this is other than one it
//               represents the scale to apply when packing and
//               unpacking numeric values (to store fixed-point values
//               in an integer field).  It is only meaningful for
//               numeric-type fields.
////////////////////////////////////////////////////////////////////
47
int DCSimpleParameter::get_divisor(void) const;

454 18 ~DCSimpleParameter 0 4 488 37 DCSimpleParameter::~DCSimpleParameter 0 0 0
44
DCSimpleParameter::~DCSimpleParameter(void);

455 8 get_name 0 4 489 18 DCSwitch::get_name 0 1 225 250
////////////////////////////////////////////////////////////////////
//     Function: DCSwitch::get_name
//       Access: Published
//  Description: Returns the name of this switch.
////////////////////////////////////////////////////////////////////
45
string const &DCSwitch::get_name(void) const;

456 17 get_key_parameter 0 4 489 27 DCSwitch::get_key_parameter 0 1 226 450
////////////////////////////////////////////////////////////////////
//     Function: DCSwitch::get_key_parameter
//       Access: Published
//  Description: Returns the key parameter on which the switch is
//               based.  The value of this parameter in the record
//               determines which one of the several cases within the
//               switch will be used.
////////////////////////////////////////////////////////////////////
49
DCField *DCSwitch::get_key_parameter(void) const;

457 13 get_num_cases 0 4 489 23 DCSwitch::get_num_cases 0 1 227 383
////////////////////////////////////////////////////////////////////
//     Function: DCSwitch::get_num_cases
//       Access: Published
//  Description: Returns the number of different cases within the
//               switch.  The legal values for case_index range from 0
//               to get_num_cases() - 1.
////////////////////////////////////////////////////////////////////
40
int DCSwitch::get_num_cases(void) const;

458 17 get_case_by_value 0 4 489 27 DCSwitch::get_case_by_value 0 1 228 363
////////////////////////////////////////////////////////////////////
//     Function: DCSwitch::get_case_by_value
//       Access: Published
//  Description: Returns the index number of the case with the
//               indicated packed value, or -1 if no case has this
//               value.
////////////////////////////////////////////////////////////////////
64
int DCSwitch::get_case_by_value(string const &case_value) const;

459 8 get_case 0 4 489 18 DCSwitch::get_case 0 1 229 272
////////////////////////////////////////////////////////////////////
//     Function: DCSwitch::get_case
//       Access: Published
//  Description: Returns the DCPackerInterface that packs the nth case.
////////////////////////////////////////////////////////////////////
51
DCPackerInterface *DCSwitch::get_case(int n) const;

460 16 get_default_case 0 4 489 26 DCSwitch::get_default_case 0 1 230 338
////////////////////////////////////////////////////////////////////
//     Function: DCSwitch::get_default_case
//       Access: Published
//  Description: Returns the DCPackerInterface that packs the default
//               case, or NULL if there is no default case.
////////////////////////////////////////////////////////////////////
58
DCPackerInterface *DCSwitch::get_default_case(void) const;

461 9 get_value 0 4 489 19 DCSwitch::get_value 0 1 231 296
////////////////////////////////////////////////////////////////////
//     Function: DCSwitch::get_value
//       Access: Published
//  Description: Returns the packed value associated with the
//               indicated case.
////////////////////////////////////////////////////////////////////
49
string DCSwitch::get_value(int case_index) const;

462 14 get_num_fields 0 4 489 24 DCSwitch::get_num_fields 0 1 232 275
////////////////////////////////////////////////////////////////////
//     Function: DCSwitch::get_num_fields
//       Access: Published
//  Description: Returns the number of fields in the indicated case.
////////////////////////////////////////////////////////////////////
51
int DCSwitch::get_num_fields(int case_index) const;

463 9 get_field 0 4 489 19 DCSwitch::get_field 0 1 233 268
////////////////////////////////////////////////////////////////////
//     Function: DCSwitch::get_num_fields
//       Access: Published
//  Description: Returns the nth field in the indicated case.
////////////////////////////////////////////////////////////////////
58
DCField *DCSwitch::get_field(int case_index, int n) const;

464 17 get_field_by_name 0 4 489 27 DCSwitch::get_field_by_name 0 1 234 341
////////////////////////////////////////////////////////////////////
//     Function: DCSwitch::get_field_by_name
//       Access: Published
//  Description: Returns the field with the given name from the
//               indicated case, or NULL if no field has this name.
////////////////////////////////////////////////////////////////////
79
DCField *DCSwitch::get_field_by_name(int case_index, string const &name) const;

465 10 get_switch 0 4 490 29 DCSwitchParameter::get_switch 0 1 235 281
////////////////////////////////////////////////////////////////////
//     Function: DCSwitchParameter::get_switch
//       Access: Published
//  Description: Returns the switch object this parameter represents.
////////////////////////////////////////////////////////////////////
58
DCSwitch const *DCSwitchParameter::get_switch(void) const;

466 18 ~DCSwitchParameter 0 4 490 37 DCSwitchParameter::~DCSwitchParameter 0 0 0
44
DCSwitchParameter::~DCSwitchParameter(void);

467 10 get_number 0 4 491 21 DCTypedef::get_number 0 1 236 384
////////////////////////////////////////////////////////////////////
//     Function: DCTypedef::get_number
//       Access: Published
//  Description: Returns a unique index number associated with this
//               typedef definition.  This is defined implicitly when
//               the .dc file(s) are read.
////////////////////////////////////////////////////////////////////
38
int DCTypedef::get_number(void) const;

468 8 get_name 0 4 491 19 DCTypedef::get_name 0 1 237 252
////////////////////////////////////////////////////////////////////
//     Function: DCTypedef::get_name
//       Access: Published
//  Description: Returns the name of this typedef.
////////////////////////////////////////////////////////////////////
46
string const &DCTypedef::get_name(void) const;

469 15 get_description 0 4 491 26 DCTypedef::get_description 0 1 238 315
////////////////////////////////////////////////////////////////////
//     Function: DCTypedef::get_description
//       Access: Published
//  Description: Returns a brief decription of the typedef, useful for
//               human consumption.
////////////////////////////////////////////////////////////////////
46
string DCTypedef::get_description(void) const;

470 16 is_bogus_typedef 0 4 491 27 DCTypedef::is_bogus_typedef 0 1 239 531
////////////////////////////////////////////////////////////////////
//     Function: DCTypedef::is_bogus_typedef
//       Access: Public
//  Description: Returns true if the typedef has been flagged as a bogus
//               typedef.  This is set for typedefs that are generated by
//               the parser as placeholder for missing typedefs, as
//               when reading a partial file; it should not occur in a
//               normal valid dc file.
////////////////////////////////////////////////////////////////////
45
bool DCTypedef::is_bogus_typedef(void) const;

471 19 is_implicit_typedef 0 4 491 30 DCTypedef::is_implicit_typedef 0 1 240 404
////////////////////////////////////////////////////////////////////
//     Function: DCTypedef::is_implicit_typedef
//       Access: Public
//  Description: Returns true if the typedef has been flagged as an
//               implicit typedef, meaning it was created for a
//               DCClass that was referenced inline as a type.
////////////////////////////////////////////////////////////////////
48
bool DCTypedef::is_implicit_typedef(void) const;

240
1 0 0 6 5 494 0 0 316 ////////////////////////////////////////////////////////////////////
//     Function: DCPackerInterface::get_name
//       Access: Published
//  Description: Returns the name of this field, or empty string
//               if the field is unnamed.
//////////////////////////////////////////////////////////////////// 1 4 this 3 492  
2 0 0 6 6 495 0 0 849 ////////////////////////////////////////////////////////////////////
//     Function: DCPackerInterface::find_seek_index
//       Access: Published
//  Description: Returns the index number to be passed to a future
//               call to DCPacker::seek() to seek directly to the
//               named field without having to look up the field name
//               in a table later, or -1 if the named field cannot be
//               found.
//
//               If the named field is nested within a switch or some
//               similar dynamic structure that reveals different
//               fields based on the contents of the data, this
//               mechanism cannot be used to pre-fetch the field index
//               number--you must seek for the field by name.
//////////////////////////////////////////////////////////////////// 2 4 this 3 492  4 name 1 494  
3 0 0 6 7 497 0 0 236 ////////////////////////////////////////////////////////////////////
//     Function: DCPackerInterface::as_field
//       Access: Published, Virtual
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 496  
4 0 0 6 7 498 0 0 236 ////////////////////////////////////////////////////////////////////
//     Function: DCPackerInterface::as_field
//       Access: Published, Virtual
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 492  
5 0 0 6 8 500 0 0 247 ////////////////////////////////////////////////////////////////////
//     Function: DCPackerInterface::as_switch_parameter
//       Access: Published, Virtual
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 496  
6 0 0 6 8 501 0 0 247 ////////////////////////////////////////////////////////////////////
//     Function: DCPackerInterface::as_switch_parameter
//       Access: Published, Virtual
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 492  
7 0 0 6 9 503 0 0 246 ////////////////////////////////////////////////////////////////////
//     Function: DCPackerInterface::as_class_parameter
//       Access: Published, Virtual
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 496  
8 0 0 6 9 504 0 0 246 ////////////////////////////////////////////////////////////////////
//     Function: DCPackerInterface::as_class_parameter
//       Access: Published, Virtual
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 492  
9 0 0 6 10 506 0 0 452 ////////////////////////////////////////////////////////////////////
//     Function: DCPackerInterface::check_match
//       Access: Published
//  Description: Returns true if the other interface is bitwise the
//               same as this one--that is, a uint32 only matches a
//               uint32, etc. Names of components, and range limits,
//               are not compared.
//////////////////////////////////////////////////////////////////// 2 4 this 3 492  5 other 1 492  
10 0 0 6 10 506 0 0 684 ////////////////////////////////////////////////////////////////////
//     Function: DCPackerInterface::check_match
//       Access: Published
//  Description: Returns true if this interface is bitwise the same as
//               the interface described with the indicated formatted
//               string, e.g. "(uint8, uint8, int16)", or false
//               otherwise.
//
//               If DCFile is not NULL, it specifies the DCFile that
//               was previously loaded, from which some predefined
//               structs and typedefs may be referenced in the
//               description string.
//////////////////////////////////////////////////////////////////// 3 4 this 3 492  11 description 1 494  6 dcfile 1 507  
11 0 0 6 13 506 0 0 317 ////////////////////////////////////////////////////////////////////
//     Function: DCKeywordList::has_keyword
//       Access: Published
//  Description: Returns true if this list includes the indicated
//               keyword, false otherwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 508  7 keyword 1 510  
12 0 0 6 13 506 0 0 317 ////////////////////////////////////////////////////////////////////
//     Function: DCKeywordList::has_keyword
//       Access: Published
//  Description: Returns true if this list includes the indicated
//               keyword, false otherwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 508  4 name 1 494  
13 0 0 6 14 495 0 0 274 ////////////////////////////////////////////////////////////////////
//     Function: DCKeywordList::get_num_keywords
//       Access: Published
//  Description: Returns the number of keywords in the list.
//////////////////////////////////////////////////////////////////// 1 4 this 3 508  
14 0 0 6 15 510 0 0 262 ////////////////////////////////////////////////////////////////////
//     Function: DCKeywordList::get_keyword
//       Access: Published
//  Description: Returns the nth keyword in the list.
//////////////////////////////////////////////////////////////////// 2 4 this 3 508  1 n 1 495  
15 0 0 6 16 510 0 0 383 ////////////////////////////////////////////////////////////////////
//     Function: DCKeywordList::get_keyword_by_name
//       Access: Published
//  Description: Returns the keyword in the list with the indicated
//               name, or NULL if there is no keyword in the list with
//               that name.
//////////////////////////////////////////////////////////////////// 2 4 this 3 508  4 name 1 494  
16 0 0 6 17 506 0 0 397 ////////////////////////////////////////////////////////////////////
//     Function: DCKeywordList::compare_keywords
//       Access: Published
//  Description: Returns true if this list has the same keywords
//               as the other list, false if some keywords differ.
//               Order is not considered important.
//////////////////////////////////////////////////////////////////// 2 4 this 3 508  5 other 1 508  
17 0 0 6 24 495 0 0 369 ////////////////////////////////////////////////////////////////////
//     Function: DCField::get_number
//       Access: Published
//  Description: Returns a unique index number associated with this
//               field.  This is defined implicitly when the .dc
//               file(s) are read.
//////////////////////////////////////////////////////////////////// 1 4 this 3 498  
18 0 0 6 25 512 0 0 302 ////////////////////////////////////////////////////////////////////
//     Function: DCField::get_class
//       Access: Published
//  Description: Returns the DCClass pointer for the class that
//               contains this field.
//////////////////////////////////////////////////////////////////// 1 4 this 3 498  
19 0 0 6 26 497 0 0 226 ////////////////////////////////////////////////////////////////////
//     Function: DCField::as_field
//       Access: Published, Virtual
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 497  
20 0 0 6 26 498 0 0 226 ////////////////////////////////////////////////////////////////////
//     Function: DCField::as_field
//       Access: Published, Virtual
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 498  
21 0 0 6 27 513 0 0 396 ////////////////////////////////////////////////////////////////////
//     Function: DCField::as_atomic_field
//       Access: Published, Virtual
//  Description: Returns the same field pointer converted to an atomic
//               field pointer, if this is in fact an atomic field;
//               otherwise, returns NULL.
//////////////////////////////////////////////////////////////////// 1 4 this 3 497  
22 0 0 6 27 514 0 0 396 ////////////////////////////////////////////////////////////////////
//     Function: DCField::as_atomic_field
//       Access: Published, Virtual
//  Description: Returns the same field pointer converted to an atomic
//               field pointer, if this is in fact an atomic field;
//               otherwise, returns NULL.
//////////////////////////////////////////////////////////////////// 1 4 this 3 498  
23 0 0 6 28 516 0 0 403 ////////////////////////////////////////////////////////////////////
//     Function: DCField::as_molecular_field
//       Access: Published, Virtual
//  Description: Returns the same field pointer converted to a
//               molecular field pointer, if this is in fact a
//               molecular field; otherwise, returns NULL.
//////////////////////////////////////////////////////////////////// 1 4 this 3 497  
24 0 0 6 28 517 0 0 403 ////////////////////////////////////////////////////////////////////
//     Function: DCField::as_molecular_field
//       Access: Published, Virtual
//  Description: Returns the same field pointer converted to a
//               molecular field pointer, if this is in fact a
//               molecular field; otherwise, returns NULL.
//////////////////////////////////////////////////////////////////// 1 4 this 3 498  
25 0 0 6 29 519 0 0 230 ////////////////////////////////////////////////////////////////////
//     Function: DCField::as_parameter
//       Access: Published, Virtual
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 497  
26 0 0 6 29 520 0 0 230 ////////////////////////////////////////////////////////////////////
//     Function: DCField::as_parameter
//       Access: Published, Virtual
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 498  
27 0 0 6 30 494 0 0 412 ////////////////////////////////////////////////////////////////////
//     Function: DCField::format_data
//       Access: Published
//  Description: Given a blob that represents the packed data for this
//               field, returns a string formatting it for human
//               consumption.  Returns empty string if there is an error.
//////////////////////////////////////////////////////////////////// 3 4 this 3 497  11 packed_data 1 494  16 show_field_names 1 506  
28 0 0 6 31 494 0 0 515 ////////////////////////////////////////////////////////////////////
//     Function: DCField::parse_string
//       Access: Published
//  Description: Given a human-formatted string (for instance, as
//               returned by format_data(), above) that represents the
//               value of this field, parse the string and return the
//               corresponding packed data.  Returns empty string if
//               there is an error.
//////////////////////////////////////////////////////////////////// 2 4 this 3 497  16 formatted_string 1 494  
29 0 0 6 32 506 0 0 479 ////////////////////////////////////////////////////////////////////
//     Function: DCField::validate_ranges
//       Access: Published
//  Description: Verifies that all of the packed values in the field
//               data are within the specified ranges and that there
//               are no extra bytes on the end of the record.  Returns
//               true if all fields are valid, false otherwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 498  11 packed_data 1 494  
30 0 0 6 33 506 0 0 339 ////////////////////////////////////////////////////////////////////
//     Function: DCField::has_default_value
//       Access: Published
//  Description: Returns true if a default value has been explicitly
//               established for this field, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 498  
31 0 0 6 34 494 0 0 494 ////////////////////////////////////////////////////////////////////
//     Function: DCField::get_default_value
//       Access: Published
//  Description: Returns the default value for this field.  If a
//               default value has been explicitly set
//               (e.g. has_default_value() returns true), returns that
//               value; otherwise, returns an implicit default for the
//               field.
//////////////////////////////////////////////////////////////////// 1 4 this 3 498  
32 0 0 6 35 506 0 0 522 ////////////////////////////////////////////////////////////////////
//     Function: DCField::is_bogus_field
//       Access: Published
//  Description: Returns true if the field has been flagged as a bogus
//               field.  This is set for fields that are generated by
//               the parser as placeholder for missing fields, as
//               when reading a partial file; it should not occur in a
//               normal valid dc file.
//////////////////////////////////////////////////////////////////// 1 4 this 3 498  
33 0 0 6 36 506 0 0 312 ////////////////////////////////////////////////////////////////////
//     Function: DCField::is_required
//       Access: Published
//  Description: Returns true if the "required" flag is set for this
//               field, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 498  
34 0 0 6 37 506 0 0 314 ////////////////////////////////////////////////////////////////////
//     Function: DCField::is_broadcast
//       Access: Published
//  Description: Returns true if the "broadcast" flag is set for this
//               field, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 498  
35 0 0 6 38 506 0 0 302 ////////////////////////////////////////////////////////////////////
//     Function: DCField::is_ram
//       Access: Published
//  Description: Returns true if the "ram" flag is set for this
//               field, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 498  
36 0 0 6 39 506 0 0 300 ////////////////////////////////////////////////////////////////////
//     Function: DCField::is_db
//       Access: Published
//  Description: Returns true if the "db" flag is set for this
//               field, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 498  
37 0 0 6 40 506 0 0 308 ////////////////////////////////////////////////////////////////////
//     Function: DCField::is_clsend
//       Access: Published
//  Description: Returns true if the "clsend" flag is set for this
//               field, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 498  
38 0 0 6 41 506 0 0 308 ////////////////////////////////////////////////////////////////////
//     Function: DCField::is_clrecv
//       Access: Published
//  Description: Returns true if the "clrecv" flag is set for this
//               field, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 498  
39 0 0 6 42 506 0 0 310 ////////////////////////////////////////////////////////////////////
//     Function: DCField::is_ownsend
//       Access: Published
//  Description: Returns true if the "ownsend" flag is set for this
//               field, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 498  
40 0 0 6 43 506 0 0 310 ////////////////////////////////////////////////////////////////////
//     Function: DCField::is_ownrecv
//       Access: Published
//  Description: Returns true if the "ownrecv" flag is set for this
//               field, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 498  
41 0 0 6 44 506 0 0 308 ////////////////////////////////////////////////////////////////////
//     Function: DCField::is_airecv
//       Access: Published
//  Description: Returns true if the "airecv" flag is set for this
//               field, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 498  
42 0 0 4 45 524 0 0 292 ////////////////////////////////////////////////////////////////////
//     Function : DCField::output
//       Access : Published
//  Description : Write a string representation of this instance to
//                <out>.
//////////////////////////////////////////////////////////////////// 2 4 this 3 498  3 out 1 522  
43 0 0 4 46 524 0 0 286 ////////////////////////////////////////////////////////////////////
//     Function : DCField::
//       Access : Published
//  Description : Write a string representation of this instance to
//                <out>.
//////////////////////////////////////////////////////////////////// 3 4 this 3 498  3 out 1 522  12 indent_level 1 495  
44 0 0 6 47 506 0 0 470 ////////////////////////////////////////////////////////////////////
//     Function: DCField::pack_args
//       Access: Published
//  Description: Packs the Python arguments from the indicated tuple
//               into the packer.  Returns true on success, false on
//               failure.
//
//               It is assumed that the packer is currently positioned
//               on this field.
//////////////////////////////////////////////////////////////////// 3 4 this 3 498  6 packer 1 525  8 sequence 1 526  
45 0 0 6 48 526 0 0 491 ////////////////////////////////////////////////////////////////////
//     Function: DCField::unpack_args
//       Access: Published
//  Description: Unpacks the values from the packer, beginning at
//               the current point in the unpack_buffer, into a Python
//               tuple and returns the tuple.
//
//               It is assumed that the packer is currently positioned
//               on this field.
//////////////////////////////////////////////////////////////////// 2 4 this 3 498  6 packer 1 525  
46 0 0 4 49 524 0 0 378 ////////////////////////////////////////////////////////////////////
//     Function: DCField::receive_update
//       Access: Published
//  Description: Extracts the update message out of the datagram and
//               applies it to the indicated object by calling the
//               appropriate method.
//////////////////////////////////////////////////////////////////// 3 4 this 3 498  6 packer 1 525  7 distobj 1 526  
47 0 0 7 50 533 0 0 388 ////////////////////////////////////////////////////////////////////
//     Function: DCField::client_format_update
//       Access: Published
//  Description: Generates a datagram containing the message necessary
//               to send an update for the indicated distributed
//               object from the client.
//////////////////////////////////////////////////////////////////// 3 4 this 3 498  5 do_id 1 530  4 args 1 526  
48 0 0 7 51 533 0 0 380 ////////////////////////////////////////////////////////////////////
//     Function: DCField::ai_format_update
//       Access: Published
//  Description: Generates a datagram containing the message necessary
//               to send an update for the indicated distributed
//               object from the AI.
//////////////////////////////////////////////////////////////////// 5 4 this 3 498  5 do_id 1 530  5 to_id 1 534  7 from_id 1 534  4 args 1 526  
49 0 0 7 52 533 0 0 426 ////////////////////////////////////////////////////////////////////
//     Function: DCField::ai_format_update_msg_type
//       Access: Published
//  Description: Generates a datagram containing the message necessary
//               to send an update, with the msg type,
//               for the indicated distributed
//               object from the AI.
//////////////////////////////////////////////////////////////////// 6 4 this 3 498  5 do_id 1 530  5 to_id 1 534  7 from_id 1 534  8 msg_type 1 495  4 args 1 526  
50 0 0 6 19 496 0 0 0 1 4 this 3 497  
51 0 0 6 20 497 0 0 0 1 4 this 3 496  
52 0 0 6 21 537 0 0 0 1 4 this 3 497  
53 0 0 6 22 497 0 0 0 1 4 this 3 537  
54 0 0 7 54 538 289 0 223 ////////////////////////////////////////////////////////////////////
//     Function: DCPackData::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 0 
55 0 0 4 56 524 0 0 318 ////////////////////////////////////////////////////////////////////
//     Function: DCPackData::clear
//       Access: Published
//  Description: Empties the contents of the data (without necessarily
//               freeing its allocated memory).
//////////////////////////////////////////////////////////////////// 1 4 this 3 538  
56 0 0 6 57 494 0 0 297 ////////////////////////////////////////////////////////////////////
//     Function: DCPackData::get_string
//       Access: Published
//  Description: Returns the data buffer as a string.  Also see
//               get_data().
//////////////////////////////////////////////////////////////////// 1 4 this 3 539  
57 0 0 6 58 541 0 0 393 ////////////////////////////////////////////////////////////////////
//     Function: DCPackData::get_length
//       Access: Published
//  Description: Returns the current length of the buffer.  This is
//               the number of useful bytes stored in the buffer, not
//               the amount of memory it takes up.
//////////////////////////////////////////////////////////////////// 1 4 this 3 539  
58 0 0 7 60 525 294 0 221 ////////////////////////////////////////////////////////////////////
//     Function: DCPacker::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 0 
59 0 0 4 62 524 0 0 444 ////////////////////////////////////////////////////////////////////
//     Function: DCPacker::clear_data
//       Access: Published
//  Description: Empties the data in the pack buffer and unpack
//               buffer.  This should be called between calls to
//               begin_pack(), unless you want to concatenate all of
//               the pack results together.
//////////////////////////////////////////////////////////////////// 1 4 this 3 525  
60 0 0 4 63 524 0 0 703 ////////////////////////////////////////////////////////////////////
//     Function: DCPacker::begin_pack
//       Access: Published
//  Description: Begins a packing session.  The parameter is the DC
//               object that describes the packing format; it may be a
//               DCParameter or DCField.
//
//               Unless you call clear_data() between sessions,
//               multiple packing sessions will be concatenated
//               together into the same buffer.  If you wish to add
//               bytes to the buffer between packing sessions, use
//               append_data() or get_write_pointer().
//////////////////////////////////////////////////////////////////// 2 4 this 3 525  4 root 1 492  
61 0 0 6 64 506 0 0 382 ////////////////////////////////////////////////////////////////////
//     Function: DCPacker::end_pack
//       Access: Published, Virtual
//  Description: Finishes a packing session.
//
//               The return value is true on success, or false if
//               there has been some error during packing.
//////////////////////////////////////////////////////////////////// 1 4 this 3 525  
62 0 0 4 65 524 0 0 383 ////////////////////////////////////////////////////////////////////
//     Function: DCPacker::set_unpack_data
//       Access: Public
//  Description: Sets up the unpack_data pointer.  You may call this
//               before calling the version of begin_unpack() that
//               takes only one parameter.
//////////////////////////////////////////////////////////////////// 2 4 this 3 525  4 data 1 494  
63 0 0 4 66 524 0 0 688 ////////////////////////////////////////////////////////////////////
//     Function: DCPacker::begin_unpack
//       Access: Public
//  Description: Begins an unpacking session.  You must have
//               previously called set_unpack_data() to specify a
//               buffer to unpack.
//
//               If there was data left in the buffer after a previous
//               begin_unpack() .. end_unpack() session, the new
//               session will resume from the current point.  This
//               method may be used, therefore, to unpack a sequence
//               of objects from the same buffer.
//////////////////////////////////////////////////////////////////// 2 4 this 3 525  4 root 1 492  
64 0 0 6 67 506 0 0 440 ////////////////////////////////////////////////////////////////////
//     Function: DCPacker::end_unpack
//       Access: Published
//  Description: Finishes the unpacking session.
//
//               The return value is true on success, or false if
//               there has been some error during unpacking (or if all
//               fields have not been unpacked).
//////////////////////////////////////////////////////////////////// 1 4 this 3 525  
65 0 0 4 68 524 0 0 937 ////////////////////////////////////////////////////////////////////
//     Function: DCPacker::begin_repack
//       Access: Public
//  Description: Begins a repacking session.  You must have previously
//               called set_unpack_data() to specify a buffer to
//               unpack.
//
//               Unlike begin_pack() or begin_unpack() you may not
//               concatenate the results of multiple begin_repack()
//               sessions in one buffer.
//
//               Also, unlike in packing or unpacking modes, you may
//               not walk through the fields from beginning to end, or
//               even pack two consecutive fields at once.  Instead,
//               you must call seek() for each field you wish to
//               modify and pack only that one field; then call seek()
//               again to modify another field.
//////////////////////////////////////////////////////////////////// 2 4 this 3 525  4 root 1 492  
66 0 0 6 69 506 0 0 440 ////////////////////////////////////////////////////////////////////
//     Function: DCPacker::end_repack
//       Access: Published
//  Description: Finishes the repacking session.
//
//               The return value is true on success, or false if
//               there has been some error during repacking (or if all
//               fields have not been repacked).
//////////////////////////////////////////////////////////////////// 1 4 this 3 525  
67 0 0 6 70 506 0 0 632 ////////////////////////////////////////////////////////////////////
//     Function: DCPacker::seek
//       Access: Published
//  Description: Seeks to the field indentified by seek_index, which
//               was returned by an earlier call to
//               DCField::find_seek_index() to get the index of some
//               nested field.  Also see the version of seek() that
//               accepts a field name.
//
//               Returns true if successful, false if the field is not
//               known (or if the packer is in an invalid mode).
//////////////////////////////////////////////////////////////////// 2 4 this 3 525  10 seek_index 1 495  
68 0 0 6 70 506 0 0 658 ////////////////////////////////////////////////////////////////////
//     Function: DCPacker::seek
//       Access: Published
//  Description: Sets the current unpack (or repack) position to the
//               named field.  In unpack mode, the next call to
//               unpack_*() or push() will begin to read the named
//               field.  In repack mode, the next call to pack_*() or
//               push() will modify the named field.
//
//               Returns true if successful, false if the field is not
//               known (or if the packer is in an invalid mode).
//////////////////////////////////////////////////////////////////// 2 4 this 3 525  10 field_name 1 494  
69 0 0 6 71 506 0 0 529 ////////////////////////////////////////////////////////////////////
//     Function: DCPacker::has_nested_fields
//       Access: Published
//  Description: Returns true if the current field has any nested
//               fields (and thus expects a push() .. pop()
//               interface), or false otherwise.  If this returns
//               true, get_num_nested_fields() may be called to
//               determine how many nested fields are expected.
//////////////////////////////////////////////////////////////////// 1 4 this 3 543  
70 0 0 6 72 495 0 0 885 ////////////////////////////////////////////////////////////////////
//     Function: DCPacker::get_num_nested_fields
//       Access: Published
//  Description: Returns the number of nested fields associated with
//               the current field, if has_nested_fields() returned
//               true.
//
//               The return value may be -1 to indicate that a
//               variable number of nested fields are accepted by this
//               field type (e.g. a variable-length array).
//
//               Note that this method is unreliable to determine how
//               many fields you must traverse before you can call
//               pop(), since particularly in the presence of a
//               DCSwitch, it may change during traversal.  Use
//               more_nested_fields() instead.
//////////////////////////////////////////////////////////////////// 1 4 this 3 543  
71 0 0 6 73 506 0 0 389 ////////////////////////////////////////////////////////////////////
//     Function: DCPacker::more_nested_fields
//       Access: Published
//  Description: Returns true if there are more nested fields to pack
//               or unpack in the current push sequence, false if it
//               is time to call pop().
//////////////////////////////////////////////////////////////////// 1 4 this 3 543  
72 0 0 6 74 492 0 0 436 ////////////////////////////////////////////////////////////////////
//     Function: DCPacker::get_current_parent
//       Access: Published
//  Description: Returns the field that we left in our last call to
//               push(): the owner of the current level of fields.
//               This may be NULL at the beginning of the pack
//               operation.
//////////////////////////////////////////////////////////////////// 1 4 this 3 543  
73 0 0 6 75 492 0 0 458 ////////////////////////////////////////////////////////////////////
//     Function: DCPacker::get_current_field
//       Access: Published
//  Description: Returns the field that will be referenced by the next
//               call to pack_*() or unpack_*().  This will be NULL if
//               we have unpacked (or packed) all fields, or if it is
//               time to call pop().
//////////////////////////////////////////////////////////////////// 1 4 this 3 543  
74 0 0 6 76 501 0 0 746 ////////////////////////////////////////////////////////////////////
//     Function: DCPacker::get_last_switch
//       Access: Published
//  Description: Returns a pointer to the last DCSwitch instance that
//               we have passed by and selected one case of during the
//               pack/unpack process.  Each time we encounter a new
//               DCSwitch and select a case, this will change state.
//
//               This may be used to detect when a DCSwitch has been
//               selected.  At the moment this changes state,
//               get_current_parent() will contain the particular
//               SwitchCase that was selected by the switch.
//////////////////////////////////////////////////////////////////// 1 4 this 3 543  
75 0 0 6 77 473 0 0 771 ////////////////////////////////////////////////////////////////////
//     Function: DCPacker::get_pack_type
//       Access: Published
//  Description: Returns the type of value expected by the current
//               field.  See the enumerated type definition at the top
//               of DCPackerInterface.h.  If this returns one of
//               PT_double, PT_int, PT_int64, or PT_string, then you
//               should call the corresponding pack_double(),
//               pack_int() function (or unpack_double(),
//               unpack_int(), etc.) to transfer data.  Otherwise, you
//               should call push() and begin packing or unpacking the
//               nested fields.
//////////////////////////////////////////////////////////////////// 1 4 this 3 543  
76 0 0 6 78 494 0 0 406 ////////////////////////////////////////////////////////////////////
//     Function: DCPacker::get_current_field_name
//       Access: Published
//  Description: Returns the name of the current field, if it has a
//               name, or the empty string if the field does not have
//               a name or there is no current field.
//////////////////////////////////////////////////////////////////// 1 4 this 3 543  
77 0 0 4 79 524 0 0 587 ////////////////////////////////////////////////////////////////////
//     Function: DCPacker::push
//       Access: Published
//  Description: Marks the beginning of a nested series of fields.
//
//               This must be called before filling the elements of an
//               array or the individual fields in a structure field.
//               It must also be balanced by a matching pop().
//
//               It is necessary to use push() / pop() only if
//               has_nested_fields() returns true.
//////////////////////////////////////////////////////////////////// 1 4 this 3 525  
78 0 0 4 80 524 0 0 495 ////////////////////////////////////////////////////////////////////
//     Function: DCPacker::pop
//       Access: Published
//  Description: Marks the end of a nested series of fields.
//
//               This must be called to match a previous push() only
//               after all the expected number of nested fields have
//               been packed.  It is an error to call it too early, or
//               too late.
//////////////////////////////////////////////////////////////////// 1 4 this 3 525  
79 0 0 4 81 524 0 0 298 ////////////////////////////////////////////////////////////////////
//     Function: DCPacker::pack_double
//       Access: Published
//  Description: Packs the indicated numeric or string value into the
//               stream.
//////////////////////////////////////////////////////////////////// 2 4 this 3 525  5 value 1 545  
80 0 0 4 82 524 0 0 295 ////////////////////////////////////////////////////////////////////
//     Function: DCPacker::pack_int
//       Access: Published
//  Description: Packs the indicated numeric or string value into the
//               stream.
//////////////////////////////////////////////////////////////////// 2 4 this 3 525  5 value 1 495  
81 0 0 4 83 524 0 0 296 ////////////////////////////////////////////////////////////////////
//     Function: DCPacker::pack_uint
//       Access: Published
//  Description: Packs the indicated numeric or string value into the
//               stream.
//////////////////////////////////////////////////////////////////// 2 4 this 3 525  5 value 1 532  
82 0 0 4 84 524 0 0 297 ////////////////////////////////////////////////////////////////////
//     Function: DCPacker::pack_int64
//       Access: Published
//  Description: Packs the indicated numeric or string value into the
//               stream.
//////////////////////////////////////////////////////////////////// 2 4 this 3 525  5 value 1 546  
83 0 0 4 85 524 0 0 298 ////////////////////////////////////////////////////////////////////
//     Function: DCPacker::pack_uint64
//       Access: Published
//  Description: Packs the indicated numeric or string value into the
//               stream.
//////////////////////////////////////////////////////////////////// 2 4 this 3 525  5 value 1 535  
84 0 0 4 86 524 0 0 298 ////////////////////////////////////////////////////////////////////
//     Function: DCPacker::pack_string
//       Access: Published
//  Description: Packs the indicated numeric or string value into the
//               stream.
//////////////////////////////////////////////////////////////////// 2 4 this 3 525  5 value 1 494  
85 0 0 4 87 524 0 0 402 ////////////////////////////////////////////////////////////////////
//     Function: DCPacker::pack_literal_value
//       Access: Published
//  Description: Adds the indicated string value into the stream,
//               representing a single pre-packed field element, or a
//               whole group of field elements at once.
//////////////////////////////////////////////////////////////////// 2 4 this 3 525  5 value 1 494  
86 0 0 4 88 524 0 0 406 ////////////////////////////////////////////////////////////////////
//     Function: DCPacker::pack_default_value
//       Access: Published
//  Description: Adds the default value for the current element into
//               the stream.  If no default has been set for the
//               current element, creates a sensible default.
//////////////////////////////////////////////////////////////////// 1 4 this 3 525  
87 0 0 6 89 545 0 0 300 ////////////////////////////////////////////////////////////////////
//     Function: DCPacker::unpack_double
//       Access: Published
//  Description: Unpacks the current numeric or string value from the
//               stream.
//////////////////////////////////////////////////////////////////// 1 4 this 3 525  
88 0 0 6 90 495 0 0 297 ////////////////////////////////////////////////////////////////////
//     Function: DCPacker::unpack_int
//       Access: Published
//  Description: Unpacks the current numeric or string value from the
//               stream.
//////////////////////////////////////////////////////////////////// 1 4 this 3 525  
89 0 0 6 91 532 0 0 298 ////////////////////////////////////////////////////////////////////
//     Function: DCPacker::unpack_uint
//       Access: Published
//  Description: Unpacks the current numeric or string value from the
//               stream.
//////////////////////////////////////////////////////////////////// 1 4 this 3 525  
90 0 0 6 92 546 0 0 299 ////////////////////////////////////////////////////////////////////
//     Function: DCPacker::unpack_int64
//       Access: Published
//  Description: Unpacks the current numeric or string value from the
//               stream.
//////////////////////////////////////////////////////////////////// 1 4 this 3 525  
91 0 0 6 93 535 0 0 300 ////////////////////////////////////////////////////////////////////
//     Function: DCPacker::unpack_uint64
//       Access: Published
//  Description: Unpacks the current numeric or string value from the
//               stream.
//////////////////////////////////////////////////////////////////// 1 4 this 3 525  
92 0 0 6 94 494 0 0 300 ////////////////////////////////////////////////////////////////////
//     Function: DCPacker::unpack_string
//       Access: Published
//  Description: Unpacks the current numeric or string value from the
//               stream.
//////////////////////////////////////////////////////////////////// 1 4 this 3 525  
93 0 0 6 95 494 0 0 377 ////////////////////////////////////////////////////////////////////
//     Function: DCPacker::unpack_literal_value
//       Access: Published
//  Description: Returns the literal string that represents the packed
//               value of the current field, and advances the field
//               pointer.
//////////////////////////////////////////////////////////////////// 1 4 this 3 525  
94 0 0 4 96 524 0 0 478 ////////////////////////////////////////////////////////////////////
//     Function: DCPacker::unpack_validate
//       Access: Published
//  Description: Internally unpacks the current numeric or string
//               value and validates it against the type range limits,
//               but does not return the value.  If the current field
//               contains nested fields, validates all of them.
//////////////////////////////////////////////////////////////////// 1 4 this 3 525  
95 0 0 4 97 524 0 0 396 ////////////////////////////////////////////////////////////////////
//     Function: DCPacker::unpack_skip
//       Access: Published
//  Description: Skips the current field without unpacking it and
//               advances to the next field.  If the current field
//               contains nested fields, skips all of them.
//////////////////////////////////////////////////////////////////// 1 4 this 3 525  
96 0 0 4 98 524 0 0 528 ////////////////////////////////////////////////////////////////////
//     Function: DCPacker::pack_object
//       Access: Published
//  Description: Packs the Python object of whatever type into the
//               packer.  Each numeric object and string object maps
//               to the corresponding pack_value() call; a tuple or
//               sequence maps to a push() followed by all of the
//               tuple's contents followed by a pop().
//////////////////////////////////////////////////////////////////// 2 4 this 3 525  6 object 1 526  
97 0 0 6 99 526 0 0 509 ////////////////////////////////////////////////////////////////////
//     Function: DCPacker::unpack_object
//       Access: Published
//  Description: Unpacks a Python object of the appropriate type from
//               the stream for the current field.  This may be an
//               integer or a string for a simple field object; if the
//               current field represents a list of fields it will be
//               a tuple.
//////////////////////////////////////////////////////////////////// 1 4 this 3 525  
98 0 0 6 100 506 0 0 410 ////////////////////////////////////////////////////////////////////
//     Function: DCPacker::parse_and_pack
//       Access: Published
//  Description: Parses an object's value according to the DC file
//               syntax (e.g. as a default value string) and packs it.
//               Returns true on success, false on a parse error.
//////////////////////////////////////////////////////////////////// 2 4 this 3 525  2 in 1 548  
99 0 0 6 100 506 0 0 410 ////////////////////////////////////////////////////////////////////
//     Function: DCPacker::parse_and_pack
//       Access: Published
//  Description: Parses an object's value according to the DC file
//               syntax (e.g. as a default value string) and packs it.
//               Returns true on success, false on a parse error.
//////////////////////////////////////////////////////////////////// 2 4 this 3 525  16 formatted_object 1 494  
100 0 0 6 101 494 0 0 409 ////////////////////////////////////////////////////////////////////
//     Function: DCPacker::unpack_and_format
//       Access: Published
//  Description: Unpacks an object and formats its value into a syntax
//               suitable for parsing in the dc file (e.g. as a
//               default value), or as an input to parse_object.
//////////////////////////////////////////////////////////////////// 2 4 this 3 525  16 show_field_names 1 506  
101 0 0 4 101 524 0 0 409 ////////////////////////////////////////////////////////////////////
//     Function: DCPacker::unpack_and_format
//       Access: Published
//  Description: Unpacks an object and formats its value into a syntax
//               suitable for parsing in the dc file (e.g. as a
//               default value), or as an input to parse_object.
//////////////////////////////////////////////////////////////////// 3 4 this 3 525  3 out 1 522  16 show_field_names 1 506  
102 0 0 6 102 506 0 0 394 ////////////////////////////////////////////////////////////////////
//     Function: DCPacker::had_parse_error
//       Access: Published
//  Description: Returns true if there has been an parse error
//               since the most recent call to begin(); this can only
//               happen if you call parse_and_pack().
//////////////////////////////////////////////////////////////////// 1 4 this 3 543  
103 0 0 6 103 506 0 0 802 ////////////////////////////////////////////////////////////////////
//     Function: DCPacker::had_pack_error
//       Access: Published
//  Description: Returns true if there has been an packing error
//               since the most recent call to begin(); in particular,
//               this may be called after end() has returned false to
//               determine the nature of the failure.
//
//               A return value of true indicates there was a push/pop
//               mismatch, or the push/pop structure did not match the
//               data structure, or there were the wrong number of
//               elements in a nested push/pop structure, or on unpack
//               that the data stream was truncated.
//////////////////////////////////////////////////////////////////// 1 4 this 3 543  
104 0 0 6 104 506 0 0 735 ////////////////////////////////////////////////////////////////////
//     Function: DCPacker::had_range_error
//       Access: Published
//  Description: Returns true if there has been an range validation
//               error since the most recent call to begin(); in
//               particular, this may be called after end() has
//               returned false to determine the nature of the
//               failure.
//
//               A return value of true indicates a value that was
//               packed or unpacked did not fit within the specified
//               legal range for a parameter, or within the limits of
//               the field size.
//////////////////////////////////////////////////////////////////// 1 4 this 3 543  
105 0 0 6 105 506 0 0 492 ////////////////////////////////////////////////////////////////////
//     Function: DCPacker::had_error
//       Access: Published
//  Description: Returns true if there has been any error (either a
//               pack error or a range error) since the most recent
//               call to begin().  If this returns true, then the
//               matching call to end() will indicate an error
//               (false).
//////////////////////////////////////////////////////////////////// 1 4 this 3 543  
106 0 0 6 106 541 0 0 587 ////////////////////////////////////////////////////////////////////
//     Function: DCPacker::get_num_unpacked_bytes
//       Access: Published
//  Description: Returns the number of bytes that have been unpacked
//               so far, or after unpack_end(), the total number of
//               bytes that were unpacked at all.  This can be used to
//               validate that all of the bytes in the buffer were
//               actually unpacked (which is not otherwise considered
//               an error).
//////////////////////////////////////////////////////////////////// 1 4 this 3 543  
107 0 0 6 107 541 0 0 391 ////////////////////////////////////////////////////////////////////
//     Function: DCPacker::get_length
//       Access: Published
//  Description: Returns the current length of the buffer.  This is
//               the number of useful bytes stored in the buffer, not
//               the amount of memory it takes up.
//////////////////////////////////////////////////////////////////// 1 4 this 3 543  
108 0 0 6 108 494 0 0 302 ////////////////////////////////////////////////////////////////////
//     Function: DCPacker::get_string
//       Access: Published
//  Description: Returns the packed data buffer as a string.  Also see
//               get_data().
//////////////////////////////////////////////////////////////////// 1 4 this 3 543  
109 0 0 6 109 541 0 0 471 ////////////////////////////////////////////////////////////////////
//     Function: DCPacker::get_unpack_length
//       Access: Published
//  Description: Returns the total number of bytes in the unpack data
//               buffer.  This is the buffer used when unpacking; it
//               is separate from the pack data returned by
//               get_length(), which is filled during packing.
//////////////////////////////////////////////////////////////////// 1 4 this 3 543  
110 0 0 6 110 494 0 0 500 ////////////////////////////////////////////////////////////////////
//     Function: DCPacker::get_unpack_string
//       Access: Published
//  Description: Returns the unpack data buffer, as a string.
//               This is the buffer used when unpacking; it is
//               separate from the pack data returned by get_string(),
//               which is filled during packing.  Also see
//               get_unpack_data().
//////////////////////////////////////////////////////////////////// 1 4 this 3 543  
111 0 0 6 111 495 0 0 524 ////////////////////////////////////////////////////////////////////
//     Function: DCPacker::StackElement::get_num_stack_elements_ever_allocated
//       Access: Published, Static
//  Description: Returns the number of DCPacker::StackElement pointers
//               ever simultaneously allocated; these are now either
//               in active use or have been recycled into the deleted
//               DCPacker::StackElement pool to be used again.
//////////////////////////////////////////////////////////////////// 0 
112 0 0 4 112 524 0 0 296 ////////////////////////////////////////////////////////////////////
//     Function: DCPacker::raw_pack_int8
//       Access: Published
//  Description: Packs the data into the buffer between packing
//               sessions.
//////////////////////////////////////////////////////////////////// 2 4 this 3 525  5 value 1 495  
113 0 0 4 113 524 0 0 297 ////////////////////////////////////////////////////////////////////
//     Function: DCPacker::raw_pack_int16
//       Access: Published
//  Description: Packs the data into the buffer between packing
//               sessions.
//////////////////////////////////////////////////////////////////// 2 4 this 3 525  5 value 1 495  
114 0 0 4 114 524 0 0 297 ////////////////////////////////////////////////////////////////////
//     Function: DCPacker::raw_pack_int32
//       Access: Published
//  Description: Packs the data into the buffer between packing
//               sessions.
//////////////////////////////////////////////////////////////////// 2 4 this 3 525  5 value 1 495  
115 0 0 4 115 524 0 0 297 ////////////////////////////////////////////////////////////////////
//     Function: DCPacker::raw_pack_int64
//       Access: Published
//  Description: Packs the data into the buffer between packing
//               sessions.
//////////////////////////////////////////////////////////////////// 2 4 this 3 525  5 value 1 546  
116 0 0 4 116 524 0 0 297 ////////////////////////////////////////////////////////////////////
//     Function: DCPacker::raw_pack_uint8
//       Access: Published
//  Description: Packs the data into the buffer between packing
//               sessions.
//////////////////////////////////////////////////////////////////// 2 4 this 3 525  5 value 1 532  
117 0 0 4 117 524 0 0 298 ////////////////////////////////////////////////////////////////////
//     Function: DCPacker::raw_pack_uint16
//       Access: Published
//  Description: Packs the data into the buffer between packing
//               sessions.
//////////////////////////////////////////////////////////////////// 2 4 this 3 525  5 value 1 532  
118 0 0 4 118 524 0 0 298 ////////////////////////////////////////////////////////////////////
//     Function: DCPacker::raw_pack_uint32
//       Access: Published
//  Description: Packs the data into the buffer between packing
//               sessions.
//////////////////////////////////////////////////////////////////// 2 4 this 3 525  5 value 1 532  
119 0 0 4 119 524 0 0 298 ////////////////////////////////////////////////////////////////////
//     Function: DCPacker::raw_pack_uint64
//       Access: Published
//  Description: Packs the data into the buffer between packing
//               sessions.
//////////////////////////////////////////////////////////////////// 2 4 this 3 525  5 value 1 535  
120 0 0 4 120 524 0 0 299 ////////////////////////////////////////////////////////////////////
//     Function: DCPacker::raw_pack_float64
//       Access: Published
//  Description: Packs the data into the buffer between packing
//               sessions.
//////////////////////////////////////////////////////////////////// 2 4 this 3 525  5 value 1 545  
121 0 0 4 121 524 0 0 298 ////////////////////////////////////////////////////////////////////
//     Function: DCPacker::raw_pack_string
//       Access: Published
//  Description: Packs the data into the buffer between packing
//               sessions.
//////////////////////////////////////////////////////////////////// 2 4 this 3 525  5 value 1 494  
122 0 0 6 122 495 0 0 302 ////////////////////////////////////////////////////////////////////
//     Function: DCPacker::raw_unpack_int8
//       Access: Published
//  Description: Unpacks the data from the buffer between unpacking
//               sessions.
//////////////////////////////////////////////////////////////////// 1 4 this 3 525  
123 0 0 6 123 495 0 0 303 ////////////////////////////////////////////////////////////////////
//     Function: DCPacker::raw_unpack_int16
//       Access: Published
//  Description: Unpacks the data from the buffer between unpacking
//               sessions.
//////////////////////////////////////////////////////////////////// 1 4 this 3 525  
124 0 0 6 124 495 0 0 303 ////////////////////////////////////////////////////////////////////
//     Function: DCPacker::raw_unpack_int32
//       Access: Published
//  Description: Unpacks the data from the buffer between unpacking
//               sessions.
//////////////////////////////////////////////////////////////////// 1 4 this 3 525  
125 0 0 6 125 546 0 0 303 ////////////////////////////////////////////////////////////////////
//     Function: DCPacker::raw_unpack_int64
//       Access: Published
//  Description: Unpacks the data from the buffer between unpacking
//               sessions.
//////////////////////////////////////////////////////////////////// 1 4 this 3 525  
126 0 0 6 126 532 0 0 303 ////////////////////////////////////////////////////////////////////
//     Function: DCPacker::raw_unpack_uint8
//       Access: Published
//  Description: Unpacks the data from the buffer between unpacking
//               sessions.
//////////////////////////////////////////////////////////////////// 1 4 this 3 525  
127 0 0 6 127 532 0 0 304 ////////////////////////////////////////////////////////////////////
//     Function: DCPacker::raw_unpack_uint16
//       Access: Published
//  Description: Unpacks the data from the buffer between unpacking
//               sessions.
//////////////////////////////////////////////////////////////////// 1 4 this 3 525  
128 0 0 6 128 532 0 0 304 ////////////////////////////////////////////////////////////////////
//     Function: DCPacker::raw_unpack_uint32
//       Access: Published
//  Description: Unpacks the data from the buffer between unpacking
//               sessions.
//////////////////////////////////////////////////////////////////// 1 4 this 3 525  
129 0 0 6 129 535 0 0 304 ////////////////////////////////////////////////////////////////////
//     Function: DCPacker::raw_unpack_uint64
//       Access: Published
//  Description: Unpacks the data from the buffer between unpacking
//               sessions.
//////////////////////////////////////////////////////////////////// 1 4 this 3 525  
130 0 0 6 130 545 0 0 305 ////////////////////////////////////////////////////////////////////
//     Function: DCPacker::raw_unpack_float64
//       Access: Published
//  Description: Unpacks the data from the buffer between unpacking
//               sessions.
//////////////////////////////////////////////////////////////////// 1 4 this 3 525  
131 0 0 6 131 494 0 0 304 ////////////////////////////////////////////////////////////////////
//     Function: DCPacker::raw_unpack_string
//       Access: Published
//  Description: Unpacks the data from the buffer between unpacking
//               sessions.
//////////////////////////////////////////////////////////////////// 1 4 this 3 525  
132 0 0 6 133 550 0 0 241 ////////////////////////////////////////////////////////////////////
//     Function: DCParameter::as_simple_parameter
//       Access: Published, Virtual
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 519  
133 0 0 6 133 551 0 0 241 ////////////////////////////////////////////////////////////////////
//     Function: DCParameter::as_simple_parameter
//       Access: Published, Virtual
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 520  
134 0 0 6 134 553 0 0 240 ////////////////////////////////////////////////////////////////////
//     Function: DCParameter::as_array_parameter
//       Access: Published, Virtual
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 519  
135 0 0 6 134 554 0 0 240 ////////////////////////////////////////////////////////////////////
//     Function: DCParameter::as_array_parameter
//       Access: Published, Virtual
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 520  
136 0 0 6 135 519 0 0 0 1 4 this 3 520  
137 0 0 6 136 506 0 0 0 1 4 this 3 520  
138 0 0 6 137 556 0 0 383 ////////////////////////////////////////////////////////////////////
//     Function: DCParameter::get_typedef
//       Access: Published
//  Description: If this type has been referenced from a typedef,
//               returns the DCTypedef instance, or NULL if the
//               type was declared on-the-fly.
//////////////////////////////////////////////////////////////////// 1 4 this 3 520  
139 0 0 6 139 519 0 0 309 ////////////////////////////////////////////////////////////////////
//     Function: DCArrayParameter::get_element_type
//       Access: Published
//  Description: Returns the type of the individual elements of this
//               array.
//////////////////////////////////////////////////////////////////// 1 4 this 3 554  
140 0 0 6 140 495 0 0 379 ////////////////////////////////////////////////////////////////////
//     Function: DCArrayParameter::get_array_size
//       Access: Published
//  Description: Returns the fixed number of elements in this array,
//               or -1 if the array may contain a variable number of
//               elements.
//////////////////////////////////////////////////////////////////// 1 4 this 3 554  
141 0 0 6 142 495 0 0 312 ////////////////////////////////////////////////////////////////////
//     Function: DCAtomicField::get_num_elements
//       Access: Published
//  Description: Returns the number of elements (parameters) of the
//               atomic field.
//////////////////////////////////////////////////////////////////// 1 4 this 3 514  
142 0 0 6 143 519 0 0 299 ////////////////////////////////////////////////////////////////////
//     Function: DCAtomicField::get_element
//       Access: Published
//  Description: Returns the parameter object describing the
//               nth element.
//////////////////////////////////////////////////////////////////// 2 4 this 3 514  1 n 1 495  
143 0 0 6 144 494 0 0 790 ////////////////////////////////////////////////////////////////////
//     Function: DCAtomicField::get_element_default
//       Access: Published
//  Description: Returns the pre-formatted default value associated
//               with the nth element of the field.  This is only
//               valid if has_element_default() returns true, in which
//               case this string represents the bytes that should be
//               assigned to the field as a default value.
//
//               If the element is an array-type element, the returned
//               value will include the two-byte length preceding the
//               array data.
//
//               This is deprecated; use get_element() instead.
//////////////////////////////////////////////////////////////////// 2 4 this 3 514  1 n 1 495  
144 0 0 6 145 506 0 0 410 ////////////////////////////////////////////////////////////////////
//     Function: DCAtomicField::has_element_default
//       Access: Published
//  Description: Returns true if the nth element of the field has a
//               default value specified, false otherwise.
//
//               This is deprecated; use get_element() instead.
//////////////////////////////////////////////////////////////////// 2 4 this 3 514  1 n 1 495  
145 0 0 6 146 494 0 0 582 ////////////////////////////////////////////////////////////////////
//     Function: DCAtomicField::get_element_name
//       Access: Published
//  Description: Returns the name of the nth element of the field.
//               This name is strictly for documentary purposes; it
//               does not generally affect operation.  If a name is
//               not specified, this will be the empty string.
//
//               This method is deprecated; use
//               get_element()->get_name() instead.
//////////////////////////////////////////////////////////////////// 2 4 this 3 514  1 n 1 495  
146 0 0 6 147 472 0 0 377 ////////////////////////////////////////////////////////////////////
//     Function: DCAtomicField::get_element_type
//       Access: Published
//  Description: Returns the numeric type of the nth element of the
//               field.  This method is deprecated; use
//               get_element() instead.
//////////////////////////////////////////////////////////////////// 2 4 this 3 514  1 n 1 495  
147 0 0 6 148 495 0 0 653 ////////////////////////////////////////////////////////////////////
//     Function: DCAtomicField::get_element_divisor
//       Access: Published
//  Description: Returns the divisor associated with the nth element
//               of the field.  This implements an implicit
//               fixed-point system; floating-point values are to be
//               multiplied by this value before encoding into a
//               packet, and divided by this number after decoding.
//
//               This method is deprecated; use
//               get_element()->get_divisor() instead.
//////////////////////////////////////////////////////////////////// 2 4 this 3 514  1 n 1 495  
148 0 0 6 151 512 0 0 232 ////////////////////////////////////////////////////////////////////
//     Function: DCDeclaration::as_class
//       Access: Published, Virtual
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 558  
149 0 0 6 151 561 0 0 232 ////////////////////////////////////////////////////////////////////
//     Function: DCDeclaration::as_class
//       Access: Published, Virtual
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 559  
150 0 0 6 152 563 0 0 233 ////////////////////////////////////////////////////////////////////
//     Function: DCDeclaration::as_switch
//       Access: Published, Virtual
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 558  
151 0 0 6 152 564 0 0 233 ////////////////////////////////////////////////////////////////////
//     Function: DCDeclaration::as_switch
//       Access: Published, Virtual
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 559  
152 0 0 4 153 524 0 0 307 ////////////////////////////////////////////////////////////////////
//     Function : DCDeclaration::output
//       Access : Published, Virtual
//  Description : Write a string representation of this instance to
//                <out>.
//////////////////////////////////////////////////////////////////// 2 4 this 3 559  3 out 1 522  
153 0 0 4 154 524 0 0 292 ////////////////////////////////////////////////////////////////////
//     Function : DCDeclaration::
//       Access : Published
//  Description : Write a string representation of this instance to
//                <out>.
//////////////////////////////////////////////////////////////////// 3 4 this 3 559  3 out 1 522  12 indent_level 1 495  
154 0 0 6 156 507 0 0 270 ////////////////////////////////////////////////////////////////////
//     Function: DCClass::get_dc_file
//       Access: Published
//  Description: Returns the DCFile object that contains the class.
//////////////////////////////////////////////////////////////////// 1 4 this 3 561  
155 0 0 6 157 494 0 0 248 ////////////////////////////////////////////////////////////////////
//     Function: DCClass::get_name
//       Access: Published
//  Description: Returns the name of this class.
//////////////////////////////////////////////////////////////////// 1 4 this 3 561  
156 0 0 6 158 495 0 0 369 ////////////////////////////////////////////////////////////////////
//     Function: DCClass::get_number
//       Access: Published
//  Description: Returns a unique index number associated with this
//               class.  This is defined implicitly when the .dc
//               file(s) are read.
//////////////////////////////////////////////////////////////////// 1 4 this 3 561  
157 0 0 6 159 495 0 0 301 ////////////////////////////////////////////////////////////////////
//     Function: DCClass::get_num_parents
//       Access: Published
//  Description: Returns the number of base classes this class
//               inherits from.
//////////////////////////////////////////////////////////////////// 1 4 this 3 561  
158 0 0 6 160 512 0 0 290 ////////////////////////////////////////////////////////////////////
//     Function: DCClass::get_parent
//       Access: Published
//  Description: Returns the nth parent class this class inherits
//               from.
//////////////////////////////////////////////////////////////////// 2 4 this 3 561  1 n 1 495  
159 0 0 6 161 506 0 0 340 ////////////////////////////////////////////////////////////////////
//     Function: DCClass::has_constructor
//       Access: Published
//  Description: Returns true if this class has a constructor method,
//               false if it just uses the default constructor.
//////////////////////////////////////////////////////////////////// 1 4 this 3 561  
160 0 0 6 162 497 0 0 372 ////////////////////////////////////////////////////////////////////
//     Function: DCClass::get_constructor
//       Access: Published
//  Description: Returns the constructor method for this class if it
//               is defined, or NULL if the class uses the default
//               constructor.
//////////////////////////////////////////////////////////////////// 1 4 this 3 561  
161 0 0 6 163 495 0 0 322 ////////////////////////////////////////////////////////////////////
//     Function: DCClass::get_num_fields
//       Access: Published
//  Description: Returns the number of fields defined directly in this
//               class, ignoring inheritance.
//////////////////////////////////////////////////////////////////// 1 4 this 3 561  
162 0 0 6 164 497 0 0 428 ////////////////////////////////////////////////////////////////////
//     Function: DCClass::get_field
//       Access: Published
//  Description: Returns the nth field in the class.  This is not
//               necessarily the field with index n; this is the nth
//               field defined in the class directly, ignoring
//               inheritance.
//////////////////////////////////////////////////////////////////// 2 4 this 3 561  1 n 1 495  
163 0 0 6 165 497 0 0 585 ////////////////////////////////////////////////////////////////////
//     Function: DCClass::get_field_by_name
//       Access: Published
//  Description: Returns a pointer to the DCField that shares the
//               indicated name.  If the named field is not found in
//               the current class, the parent classes will be
//               searched, so the value returned may not actually be a
//               field within this class.  Returns NULL if there is no
//               such field defined.
//////////////////////////////////////////////////////////////////// 2 4 this 3 561  4 name 1 494  
164 0 0 6 166 497 0 0 594 ////////////////////////////////////////////////////////////////////
//     Function: DCClass::get_field_by_index
//       Access: Published
//  Description: Returns a pointer to the DCField that has the
//               indicated index number.  If the numbered field is not
//               found in the current class, the parent classes will
//               be searched, so the value returned may not actually
//               be a field within this class.  Returns NULL if there
//               is no such field defined.
//////////////////////////////////////////////////////////////////// 2 4 this 3 561  12 index_number 1 495  
165 0 0 6 167 495 0 0 338 ////////////////////////////////////////////////////////////////////
//     Function: DCClass::get_num_inherited_fields
//       Access: Published
//  Description: Returns the total number of field fields defined in
//               this class and all ancestor classes.
//////////////////////////////////////////////////////////////////// 1 4 this 3 561  
166 0 0 6 168 497 0 0 625 ////////////////////////////////////////////////////////////////////
//     Function: DCClass::get_inherited_field
//       Access: Published
//  Description: Returns the nth field field in the class and all of
//               its ancestors.  
//
//               This *used* to be the same thing as
//               get_field_by_index(), back when the fields were
//               numbered sequentially within a class's inheritance
//               hierarchy.  Now that fields have a globally unique
//               index number, this is no longer true.
//////////////////////////////////////////////////////////////////// 2 4 this 3 561  1 n 1 495  
167 0 0 6 169 506 0 0 379 ////////////////////////////////////////////////////////////////////
//     Function: DCClass::is_struct
//       Access: Published
//  Description: Returns true if the class has been identified with
//               the "struct" keyword in the dc file, false if it was
//               declared with "dclass".
//////////////////////////////////////////////////////////////////// 1 4 this 3 561  
168 0 0 6 170 506 0 0 524 ////////////////////////////////////////////////////////////////////
//     Function: DCClass::is_bogus_class
//       Access: Published
//  Description: Returns true if the class has been flagged as a bogus
//               class.  This is set for classes that are generated by
//               the parser as placeholder for missing classes, as
//               when reading a partial file; it should not occur in a
//               normal valid dc file.
//////////////////////////////////////////////////////////////////// 1 4 this 3 561  
169 0 0 6 171 506 0 0 446 ////////////////////////////////////////////////////////////////////
//     Function : DCClass::inherits_from_bogus_class
//       Access : Published
//  Description : Returns true if this class, or any class in the
//                inheritance heirarchy for this class, is a "bogus"
//                class--a forward reference to an as-yet-undefined
//                class.
//////////////////////////////////////////////////////////////////// 1 4 this 3 561  
170 0 0 4 172 524 0 0 543 ////////////////////////////////////////////////////////////////////
//     Function: DCClass::start_generate
//       Access: Published
//  Description: Starts the PStats timer going on the "generate" task,
//               that is, marks the beginning of the process of
//               generating a new object, for the purposes of timing
//               this process.
//
//               This should balance with a corresponding call to
//               stop_generate().
//////////////////////////////////////////////////////////////////// 1 4 this 3 512  
171 0 0 4 173 524 0 0 365 ////////////////////////////////////////////////////////////////////
//     Function: DCClass::stop_generate
//       Access: Published
//  Description: Stops the PStats timer on the "generate" task.
//               This should balance with a preceding call to
//               start_generate().
//////////////////////////////////////////////////////////////////// 1 4 this 3 512  
172 0 0 4 174 524 0 0 301 ////////////////////////////////////////////////////////////////////
//     Function : DCClass::output
//       Access : Published, Virtual
//  Description : Write a string representation of this instance to
//                <out>.
//////////////////////////////////////////////////////////////////// 2 4 this 3 561  3 out 1 522  
173 0 0 6 175 506 0 0 333 ////////////////////////////////////////////////////////////////////
//     Function: DCClass::has_class_def
//       Access: Published
//  Description: Returns true if the DCClass object has an associated
//               Python class definition, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 561  
174 0 0 4 176 524 0 0 383 ////////////////////////////////////////////////////////////////////
//     Function: DCClass::set_class_def
//       Access: Published
//  Description: Sets the class object associated with this
//               DistributedClass.  This object will be used to
//               construct new instances of the class.
//////////////////////////////////////////////////////////////////// 2 4 this 3 512  9 class_def 1 526  
175 0 0 6 177 526 0 0 388 ////////////////////////////////////////////////////////////////////
//     Function: DCClass::get_class_def
//       Access: Published
//  Description: Returns the class object that was previously
//               associated with this DistributedClass.  This will
//               return a new reference to the object.
//////////////////////////////////////////////////////////////////// 1 4 this 3 561  
176 0 0 6 178 506 0 0 345 ////////////////////////////////////////////////////////////////////
//     Function: DCClass::has_owner_class_def
//       Access: Published
//  Description: Returns true if the DCClass object has an associated
//               Python owner class definition, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 561  
177 0 0 4 179 524 0 0 401 ////////////////////////////////////////////////////////////////////
//     Function: DCClass::set_owner_class_def
//       Access: Published
//  Description: Sets the owner class object associated with this
//               DistributedClass.  This object will be used to
//               construct new owner instances of the class.
//////////////////////////////////////////////////////////////////// 2 4 this 3 512  15 owner_class_def 1 526  
178 0 0 6 180 526 0 0 400 ////////////////////////////////////////////////////////////////////
//     Function: DCClass::get_owner_class_def
//       Access: Published
//  Description: Returns the owner class object that was previously
//               associated with this DistributedClass.  This will
//               return a new reference to the object.
//////////////////////////////////////////////////////////////////// 1 4 this 3 561  
179 0 0 4 181 524 0 0 376 ////////////////////////////////////////////////////////////////////
//     Function: DCClass::receive_update
//       Access: Published
//  Description: Extracts the update message out of the packer and
//               applies it to the indicated object by calling the
//               appropriate method.
//////////////////////////////////////////////////////////////////// 3 4 this 3 561  7 distobj 1 526  2 di 1 566  
180 0 0 4 182 524 0 0 500 ////////////////////////////////////////////////////////////////////
//     Function: DCClass::receive_update_broadcast_required
//       Access: Published
//  Description: Processes a big datagram that includes all of the
//               "required" fields that are sent along with a normal
//               "generate with required" message.  This is all of the
//               atomic fields that are marked "broadcast required".
//////////////////////////////////////////////////////////////////// 3 4 this 3 561  7 distobj 1 526  2 di 1 566  
181 0 0 4 183 524 0 0 563 ////////////////////////////////////////////////////////////////////
//     Function: DCClass::receive_update_broadcast_required_owner
//       Access: Published
//  Description: Processes a big datagram that includes all of the
//               "required" fields that are sent along with a normal
//               "generate with required" message.  This is all of the
//               atomic fields that are marked "broadcast ownrecv". Should
//               be used for 'owner-view' objects.
//////////////////////////////////////////////////////////////////// 3 4 this 3 561  7 distobj 1 526  2 di 1 566  
182 0 0 4 184 524 0 0 492 ////////////////////////////////////////////////////////////////////
//     Function: DCClass::receive_update_all_required
//       Access: Published
//  Description: Processes a big datagram that includes all of the
//               "required" fields that are sent when an avatar is
//               created.  This is all of the atomic fields that are
//               marked "required", whether they are broadcast or not.
//////////////////////////////////////////////////////////////////// 3 4 this 3 561  7 distobj 1 526  2 di 1 566  
183 0 0 4 185 524 0 0 333 ////////////////////////////////////////////////////////////////////
//     Function: DCClass::receive_update_other
//       Access: Published
//  Description: Processes a datagram that lists some additional
//               fields that are broadcast in one chunk.
//////////////////////////////////////////////////////////////////// 3 4 this 3 561  7 distobj 1 526  2 di 1 566  
184 0 0 4 186 524 0 0 300 ////////////////////////////////////////////////////////////////////
//     Function: DCClass::direct_update
//       Access: Published
//  Description: Processes an update for a named field from a packed
//               datagram.
//////////////////////////////////////////////////////////////////// 4 4 this 3 512  7 distobj 1 526  10 field_name 1 494  8 datagram 1 568  
185 0 0 4 186 524 0 0 302 ////////////////////////////////////////////////////////////////////
//     Function: DCClass::direct_update
//       Access: Published
//  Description: Processes an update for a named field from a packed
//               value blob.
//////////////////////////////////////////////////////////////////// 4 4 this 3 512  7 distobj 1 526  10 field_name 1 494  10 value_blob 1 494  
186 0 0 6 187 506 0 0 663 ////////////////////////////////////////////////////////////////////
//     Function: DCClass::pack_required_field
//       Access: Published
//  Description: Looks up the current value of the indicated field by
//               calling the appropriate get*() function, then packs
//               that value into the packer.  This field is
//               presumably either a required field or a specified
//               optional field, and we are building up a datagram for
//               the generate-with-required message.
//
//               Returns true on success, false on failure.
//////////////////////////////////////////////////////////////////// 4 4 this 3 561  6 packer 1 525  7 distobj 1 526  5 field 1 498  
187 0 0 6 187 506 0 0 665 ////////////////////////////////////////////////////////////////////
//     Function: DCClass::pack_required_field
//       Access: Published
//  Description: Looks up the current value of the indicated field by
//               calling the appropriate get*() function, then packs
//               that value into the datagram.  This field is
//               presumably either a required field or a specified
//               optional field, and we are building up a datagram for
//               the generate-with-required message.
//
//               Returns true on success, false on failure.
//////////////////////////////////////////////////////////////////// 4 4 this 3 561  8 datagram 1 533  7 distobj 1 526  5 field 1 498  
188 0 0 7 188 533 0 0 388 ////////////////////////////////////////////////////////////////////
//     Function: DCClass::client_format_update
//       Access: Published
//  Description: Generates a datagram containing the message necessary
//               to send an update for the indicated distributed
//               object from the client.
//////////////////////////////////////////////////////////////////// 4 4 this 3 561  10 field_name 1 494  5 do_id 1 530  4 args 1 526  
189 0 0 7 189 533 0 0 380 ////////////////////////////////////////////////////////////////////
//     Function: DCClass::ai_format_update
//       Access: Published
//  Description: Generates a datagram containing the message necessary
//               to send an update for the indicated distributed
//               object from the AI.
//////////////////////////////////////////////////////////////////// 6 4 this 3 561  10 field_name 1 494  5 do_id 1 530  5 to_id 1 534  7 from_id 1 534  4 args 1 526  
190 0 0 7 190 533 0 0 436 ////////////////////////////////////////////////////////////////////
//     Function: DCClass::ai_format_update_msg_type
//       Access: Published
//  Description: Generates a datagram containing the message necessary
//               to send an update, using the indicated msg type
//               for the indicated distributed
//               object from the AI.
//////////////////////////////////////////////////////////////////// 7 4 this 3 561  10 field_name 1 494  5 do_id 1 530  5 to_id 1 534  7 from_id 1 534  8 msg_type 1 495  4 args 1 526  
191 0 0 7 191 533 0 0 0 8 4 this 3 561  7 distobj 1 526  5 do_id 1 530  9 parent_id 1 570  7 zone_id 1 570  19 district_channel_id 1 534  15 from_channel_id 1 534  15 optional_fields 1 526  
192 0 0 7 192 533 0 0 679 ////////////////////////////////////////////////////////////////////
//     Function: DCClass::client_format_generate_CMU
//       Access: Published
//  Description: Generates a datagram containing the message necessary
//               to generate a new distributed object from the client.
//               This requires querying the object for the initial
//               value of its required fields.
//
//               optional_fields is a list of fieldNames to generate
//               in addition to the normal required fields.
//
//               This method is only called by the CMU implementation.
//////////////////////////////////////////////////////////////////// 5 4 this 3 561  7 distobj 1 526  5 do_id 1 530  7 zone_id 1 570  15 optional_fields 1 526  
193 0 0 6 194 561 0 0 278 ////////////////////////////////////////////////////////////////////
//     Function: DCClassParameter::get_class
//       Access: Published
//  Description: Returns the class object this parameter represents.
//////////////////////////////////////////////////////////////////// 1 4 this 3 504  
194 0 0 7 197 507 424 0 218 ////////////////////////////////////////////////////////////////////
//     Function: DCFile::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
195 0 0 4 199 524 0 0 322 ////////////////////////////////////////////////////////////////////
//     Function: DCFile::clear
//       Access: Published
//  Description: Removes all of the classes defined within the DCFile
//               and prepares it for reading a new file.
//////////////////////////////////////////////////////////////////// 1 4 this 3 507  
196 0 0 6 200 506 0 0 382 ////////////////////////////////////////////////////////////////////
//     Function: DCFile::read_all
//       Access: Published
//  Description: This special method reads all of the .dc files named
//               by the "dc-file" config.prc variable, and loads them
//               into the DCFile namespace.
//////////////////////////////////////////////////////////////////// 1 4 this 3 507  
197 0 0 6 201 506 0 0 618 ////////////////////////////////////////////////////////////////////
//     Function: DCFile::read
//       Access: Published
//  Description: Opens and reads the indicated .dc file by name.  The
//               distributed classes defined in the file will be
//               appended to the set of distributed classes already
//               recorded, if any.
//
//               Returns true if the file is successfully read, false
//               if there was an error (in which case the file might
//               have been partially read).
//////////////////////////////////////////////////////////////////// 2 4 this 3 507  8 filename 1 571  
198 0 0 6 201 506 0 0 774 ////////////////////////////////////////////////////////////////////
//     Function: DCFile::read
//       Access: Published
//  Description: Parses the already-opened input stream for
//               distributed class descriptions.  The filename
//               parameter is optional and is only used when reporting
//               errors.
//
//               The distributed classes defined in the file will be
//               appended to the set of distributed classes already
//               recorded, if any.
//
//               Returns true if the file is successfully read, false
//               if there was an error (in which case the file might
//               have been partially read).
//////////////////////////////////////////////////////////////////// 3 4 this 3 507  2 in 1 548  8 filename 1 494  
199 0 0 6 202 506 0 0 482 ////////////////////////////////////////////////////////////////////
//     Function: DCFile::write
//       Access: Published
//  Description: Opens the indicated filename for output and writes a
//               parseable description of all the known distributed
//               classes to the file.
//
//               Returns true if the description is successfully
//               written, false otherwise.
//////////////////////////////////////////////////////////////////// 3 4 this 3 573  8 filename 1 571  5 brief 1 506  
200 0 0 6 202 506 0 0 423 ////////////////////////////////////////////////////////////////////
//     Function: DCFile::write
//       Access: Published
//  Description: Writes a parseable description of all the known
//               distributed classes to the stream.
//
//               Returns true if the description is successfully
//               written, false otherwise.
//////////////////////////////////////////////////////////////////// 3 4 this 3 573  3 out 1 522  5 brief 1 506  
201 0 0 6 203 495 0 0 296 ////////////////////////////////////////////////////////////////////
//     Function: DCFile::get_num_classes
//       Access: Published
//  Description: Returns the number of classes read from the .dc
//               file(s).
//////////////////////////////////////////////////////////////////// 1 4 this 3 573  
202 0 0 6 204 512 0 0 265 ////////////////////////////////////////////////////////////////////
//     Function: DCFile::get_class
//       Access: Published
//  Description: Returns the nth class read from the .dc file(s).
//////////////////////////////////////////////////////////////////// 2 4 this 3 573  1 n 1 495  
203 0 0 6 205 512 0 0 323 ////////////////////////////////////////////////////////////////////
//     Function: DCFile::get_class_by_name
//       Access: Published
//  Description: Returns the class that has the indicated name, or
//               NULL if there is no such class.
//////////////////////////////////////////////////////////////////// 2 4 this 3 573  4 name 1 494  
204 0 0 6 206 563 0 0 326 ////////////////////////////////////////////////////////////////////
//     Function: DCFile::get_switch_by_name
//       Access: Published
//  Description: Returns the switch that has the indicated name, or
//               NULL if there is no such switch.
//////////////////////////////////////////////////////////////////// 2 4 this 3 573  4 name 1 494  
205 0 0 6 207 497 0 0 667 ////////////////////////////////////////////////////////////////////
//     Function: DCFile::get_field_by_index
//       Access: Published, Static
//  Description: Returns a pointer to the one DCField that has the
//               indicated index number, of all the DCFields across
//               all classes in the file.
//
//               This method is only valid if dc-multiple-inheritance
//               is set true in the Config.prc file.  Without this
//               setting, different DCFields may share the same index
//               number, so this global lookup is not possible.
//////////////////////////////////////////////////////////////////// 2 4 this 3 573  12 index_number 1 495  
206 0 0 6 208 506 0 0 467 ////////////////////////////////////////////////////////////////////
//     Function: DCFile::all_objects_valid
//       Access: Published
//  Description: Returns true if all of the classes read from the DC
//               file were defined and valid, or false if any of them
//               were undefined ("bogus classes").  If this is true,
//               we might have read a partial file.
//////////////////////////////////////////////////////////////////// 1 4 this 3 573  
207 0 0 6 209 495 0 0 308 ////////////////////////////////////////////////////////////////////
//     Function: DCFile::get_num_import_modules
//       Access: Published
//  Description: Returns the number of import lines read from the .dc
//               file(s).
//////////////////////////////////////////////////////////////////// 1 4 this 3 573  
208 0 0 6 210 494 0 0 316 ////////////////////////////////////////////////////////////////////
//     Function: DCFile::get_import_module
//       Access: Published
//  Description: Returns the module named by the nth import line read
//               from the .dc file(s).
//////////////////////////////////////////////////////////////////// 2 4 this 3 573  1 n 1 495  
209 0 0 6 211 495 0 0 482 ////////////////////////////////////////////////////////////////////
//     Function: DCFile::get_num_import_symbols
//       Access: Published
//  Description: Returns the number of symbols explicitly imported by
//               the nth import line.  If this is 0, the line is
//               "import modulename"; if it is more than 0, the line
//               is "from modulename import symbol, symbol ... ".
//////////////////////////////////////////////////////////////////// 2 4 this 3 573  1 n 1 495  
210 0 0 6 212 494 0 0 320 ////////////////////////////////////////////////////////////////////
//     Function: DCFile::get_import_symbol
//       Access: Published
//  Description: Returns the ith symbol named by the nth import line
//               read from the .dc file(s).
//////////////////////////////////////////////////////////////////// 3 4 this 3 573  1 n 1 495  1 i 1 495  
211 0 0 6 213 495 0 0 298 ////////////////////////////////////////////////////////////////////
//     Function: DCFile::get_num_typedefs
//       Access: Published
//  Description: Returns the number of typedefs read from the .dc
//               file(s).
//////////////////////////////////////////////////////////////////// 1 4 this 3 573  
212 0 0 6 214 575 0 0 269 ////////////////////////////////////////////////////////////////////
//     Function: DCFile::get_typedef
//       Access: Published
//  Description: Returns the nth typedef read from the .dc file(s).
//////////////////////////////////////////////////////////////////// 2 4 this 3 573  1 n 1 495  
213 0 0 6 215 575 0 0 334 ////////////////////////////////////////////////////////////////////
//     Function: DCFile::get_typedef_by_name
//       Access: Published
//  Description: Returns the typedef that has the indicated name, or
//               NULL if there is no such typedef name.
//////////////////////////////////////////////////////////////////// 2 4 this 3 573  4 name 1 494  
214 0 0 6 216 495 0 0 298 ////////////////////////////////////////////////////////////////////
//     Function: DCFile::get_num_keywords
//       Access: Published
//  Description: Returns the number of keywords read from the .dc
//               file(s).
//////////////////////////////////////////////////////////////////// 1 4 this 3 573  
215 0 0 6 217 510 0 0 269 ////////////////////////////////////////////////////////////////////
//     Function: DCFile::get_keyword
//       Access: Published
//  Description: Returns the nth keyword read from the .dc file(s).
//////////////////////////////////////////////////////////////////// 2 4 this 3 573  1 n 1 495  
216 0 0 6 218 510 0 0 334 ////////////////////////////////////////////////////////////////////
//     Function: DCFile::get_keyword_by_name
//       Access: Published
//  Description: Returns the keyword that has the indicated name, or
//               NULL if there is no such keyword name.
//////////////////////////////////////////////////////////////////// 2 4 this 3 573  4 name 1 494  
217 0 0 6 219 542 0 0 505 ////////////////////////////////////////////////////////////////////
//     Function: DCFile::get_hash
//       Access: Published
//  Description: Returns a 32-bit hash index associated with this
//               file.  This number is guaranteed to be consistent if
//               the contents of the file have not changed, and it is
//               very likely to be different if the contents of the
//               file do change.
//////////////////////////////////////////////////////////////////// 1 4 this 3 573  
218 0 0 6 221 494 0 0 252 ////////////////////////////////////////////////////////////////////
//     Function: DCKeyword::get_name
//       Access: Published
//  Description: Returns the name of this keyword.
//////////////////////////////////////////////////////////////////// 1 4 this 3 510  
219 0 0 6 223 495 0 0 320 ////////////////////////////////////////////////////////////////////
//     Function: DCMolecularField::get_num_atomics
//       Access: Published
//  Description: Returns the number of atomic fields that make up this
//               molecular field.
//////////////////////////////////////////////////////////////////// 1 4 this 3 517  
220 0 0 6 224 513 0 0 440 ////////////////////////////////////////////////////////////////////
//     Function: DCMolecularField::get_atomic
//       Access: Published
//  Description: Returns the nth atomic field that makes up this
//               molecular field.  This may or may not be a field of
//               this particular class; it might be defined in a
//               parent class.
//////////////////////////////////////////////////////////////////// 2 4 this 3 517  1 n 1 495  
221 0 0 6 227 472 0 0 311 ////////////////////////////////////////////////////////////////////
//     Function: DCSimpleParameter::get_type
//       Access: Published
//  Description: Returns the particular subatomic type represented by
//               this instance.
//////////////////////////////////////////////////////////////////// 1 4 this 3 551  
222 0 0 6 228 506 0 0 311 ////////////////////////////////////////////////////////////////////
//     Function: DCSimpleParameter::has_modulus
//       Access: Published
//  Description: Returns true if there is a modulus associated, false
//               otherwise.,
//////////////////////////////////////////////////////////////////// 1 4 this 3 551  
223 0 0 6 229 545 0 0 564 ////////////////////////////////////////////////////////////////////
//     Function: DCSimpleParameter::get_modulus
//       Access: Published
//  Description: Returns the modulus associated with this type, if
//               any.  It is an error to call this if has_modulus()
//               returned false.
//
//               If present, this is the modulus that is used to
//               constrain the numeric value of the field before it is
//               packed (and range-checked).
//////////////////////////////////////////////////////////////////// 1 4 this 3 551  
224 0 0 6 230 495 0 0 588 ////////////////////////////////////////////////////////////////////
//     Function: DCSimpleParameter::get_divisor
//       Access: Published
//  Description: Returns the divisor associated with this type.  This
//               is 1 by default, but if this is other than one it
//               represents the scale to apply when packing and
//               unpacking numeric values (to store fixed-point values
//               in an integer field).  It is only meaningful for
//               numeric-type fields.
//////////////////////////////////////////////////////////////////// 1 4 this 3 551  
225 0 0 6 233 494 0 0 250 ////////////////////////////////////////////////////////////////////
//     Function: DCSwitch::get_name
//       Access: Published
//  Description: Returns the name of this switch.
//////////////////////////////////////////////////////////////////// 1 4 this 3 564  
226 0 0 6 234 497 0 0 450 ////////////////////////////////////////////////////////////////////
//     Function: DCSwitch::get_key_parameter
//       Access: Published
//  Description: Returns the key parameter on which the switch is
//               based.  The value of this parameter in the record
//               determines which one of the several cases within the
//               switch will be used.
//////////////////////////////////////////////////////////////////// 1 4 this 3 564  
227 0 0 6 235 495 0 0 383 ////////////////////////////////////////////////////////////////////
//     Function: DCSwitch::get_num_cases
//       Access: Published
//  Description: Returns the number of different cases within the
//               switch.  The legal values for case_index range from 0
//               to get_num_cases() - 1.
//////////////////////////////////////////////////////////////////// 1 4 this 3 564  
228 0 0 6 236 495 0 0 363 ////////////////////////////////////////////////////////////////////
//     Function: DCSwitch::get_case_by_value
//       Access: Published
//  Description: Returns the index number of the case with the
//               indicated packed value, or -1 if no case has this
//               value.
//////////////////////////////////////////////////////////////////// 2 4 this 3 564  10 case_value 1 494  
229 0 0 6 237 496 0 0 272 ////////////////////////////////////////////////////////////////////
//     Function: DCSwitch::get_case
//       Access: Published
//  Description: Returns the DCPackerInterface that packs the nth case.
//////////////////////////////////////////////////////////////////// 2 4 this 3 564  1 n 1 495  
230 0 0 6 238 496 0 0 338 ////////////////////////////////////////////////////////////////////
//     Function: DCSwitch::get_default_case
//       Access: Published
//  Description: Returns the DCPackerInterface that packs the default
//               case, or NULL if there is no default case.
//////////////////////////////////////////////////////////////////// 1 4 this 3 564  
231 0 0 6 239 494 0 0 296 ////////////////////////////////////////////////////////////////////
//     Function: DCSwitch::get_value
//       Access: Published
//  Description: Returns the packed value associated with the
//               indicated case.
//////////////////////////////////////////////////////////////////// 2 4 this 3 564  10 case_index 1 495  
232 0 0 6 240 495 0 0 275 ////////////////////////////////////////////////////////////////////
//     Function: DCSwitch::get_num_fields
//       Access: Published
//  Description: Returns the number of fields in the indicated case.
//////////////////////////////////////////////////////////////////// 2 4 this 3 564  10 case_index 1 495  
233 0 0 6 241 497 0 0 268 ////////////////////////////////////////////////////////////////////
//     Function: DCSwitch::get_num_fields
//       Access: Published
//  Description: Returns the nth field in the indicated case.
//////////////////////////////////////////////////////////////////// 3 4 this 3 564  10 case_index 1 495  1 n 1 495  
234 0 0 6 242 497 0 0 341 ////////////////////////////////////////////////////////////////////
//     Function: DCSwitch::get_field_by_name
//       Access: Published
//  Description: Returns the field with the given name from the
//               indicated case, or NULL if no field has this name.
//////////////////////////////////////////////////////////////////// 3 4 this 3 564  10 case_index 1 495  4 name 1 494  
235 0 0 6 244 564 0 0 281 ////////////////////////////////////////////////////////////////////
//     Function: DCSwitchParameter::get_switch
//       Access: Published
//  Description: Returns the switch object this parameter represents.
//////////////////////////////////////////////////////////////////// 1 4 this 3 501  
236 0 0 6 247 495 0 0 384 ////////////////////////////////////////////////////////////////////
//     Function: DCTypedef::get_number
//       Access: Published
//  Description: Returns a unique index number associated with this
//               typedef definition.  This is defined implicitly when
//               the .dc file(s) are read.
//////////////////////////////////////////////////////////////////// 1 4 this 3 556  
237 0 0 6 248 494 0 0 252 ////////////////////////////////////////////////////////////////////
//     Function: DCTypedef::get_name
//       Access: Published
//  Description: Returns the name of this typedef.
//////////////////////////////////////////////////////////////////// 1 4 this 3 556  
238 0 0 6 249 494 0 0 315 ////////////////////////////////////////////////////////////////////
//     Function: DCTypedef::get_description
//       Access: Published
//  Description: Returns a brief decription of the typedef, useful for
//               human consumption.
//////////////////////////////////////////////////////////////////// 1 4 this 3 556  
239 0 0 6 250 506 0 0 531 ////////////////////////////////////////////////////////////////////
//     Function: DCTypedef::is_bogus_typedef
//       Access: Public
//  Description: Returns true if the typedef has been flagged as a bogus
//               typedef.  This is set for typedefs that are generated by
//               the parser as placeholder for missing typedefs, as
//               when reading a partial file; it should not occur in a
//               normal valid dc file.
//////////////////////////////////////////////////////////////////// 1 4 this 3 556  
240 0 0 6 251 506 0 0 404 ////////////////////////////////////////////////////////////////////
//     Function: DCTypedef::is_implicit_typedef
//       Access: Public
//  Description: Returns true if the typedef has been flagged as an
//               implicit typedef, meaning it was created for a
//               DCClass that was referenced inline as a type.
//////////////////////////////////////////////////////////////////// 1 4 this 3 556  
104
472 15 DCSubatomicType 0 532481 15 DCSubatomicType 15 DCSubatomicType 0 0 0 0 0 0 0 0 0 0 21 7 ST_int8 7 ST_int8 0
0 8 ST_int16 8 ST_int16 0
1 8 ST_int32 8 ST_int32 0
2 8 ST_int64 8 ST_int64 0
3 8 ST_uint8 8 ST_uint8 0
4 9 ST_uint16 9 ST_uint16 0
5 9 ST_uint32 9 ST_uint32 0
6 9 ST_uint64 9 ST_uint64 0
7 10 ST_float64 10 ST_float64 0
8 9 ST_string 9 ST_string 27
// a human-printable string
9 7 ST_blob 7 ST_blob 50
// any variable length message, stored as a string
10 9 ST_blob32 9 ST_blob32 49
// a blob with a 32-bit length, up to 4.2 GB long
11 13 ST_int16array 13 ST_int16array 0
12 13 ST_int32array 13 ST_int32array 0
13 14 ST_uint16array 14 ST_uint16array 0
14 14 ST_uint32array 14 ST_uint32array 0
15 12 ST_int8array 12 ST_int8array 0
16 13 ST_uint8array 13 ST_uint8array 0
17 19 ST_uint32uint8array 19 ST_uint32uint8array 122
// A special-purpose array: a list of alternating uint32 and uint8
// values.  In Python, this becomes a list of 2-tuples.
18 7 ST_char 7 ST_char 76
// Equivalent to uint8, except that it suggests a pack_type of
// PT_string.
19 10 ST_invalid 10 ST_invalid 0
20 0 410
////////////////////////////////////////////////////////////////////
//        Enum : DCSubatomicType
// Description : This defines the numeric type of each element of a
//               DCAtomicField; that is, the particular values that
//               will get added to the message when the atomic field
//               method is called.
////////////////////////////////////////////////////////////////////

473 10 DCPackType 0 532481 10 DCPackType 10 DCPackType 0 0 0 0 0 0 0 0 0 0 12 10 PT_invalid 10 PT_invalid 59
// This one should never be returned in a normal situation.
0 9 PT_double 9 PT_double 237
// These PackTypes are all fundamental types, and should be packed
// (or unpacked) with the corresponding call to pack_double(),
// pack_int(), etc.  PT_blob is the same as PT_string, but implies
// that the string contains binary data.
1 6 PT_int 6 PT_int 0
2 7 PT_uint 7 PT_uint 0
3 8 PT_int64 8 PT_int64 0
4 9 PT_uint64 9 PT_uint64 0
5 9 PT_string 9 PT_string 0
6 7 PT_blob 7 PT_blob 0
7 8 PT_array 8 PT_array 192
// The remaining PackTypes imply a need to call push() and pop().
// They are all variants on the same thing: a list of nested fields,
// but the PackType provides a bit of a semantic context.
8 8 PT_field 8 PT_field 0
9 8 PT_class 8 PT_class 0
10 9 PT_switch 9 PT_switch 0
11 0 137
// This enumerated type is returned by get_pack_type() and represents
// the best choice for a subsequent call to pack_*() or unpack_*().

474 17 DCPackerInterface 0 26625 17 DCPackerInterface 17 DCPackerInterface 0 0 0 0 241 0 6 242 243 244 245 246 247 0 0 0 0 0 514
////////////////////////////////////////////////////////////////////
//       Class : DCPackerInterface
// Description : This defines the internal interface for packing
//               values into a DCField.  The various different DC
//               objects inherit from this.  
//
//               Normally these methods are called only by the
//               DCPacker object; the user wouldn't normally call
//               these directly.
////////////////////////////////////////////////////////////////////

475 13 DCKeywordList 0 26625 13 DCKeywordList 13 DCKeywordList 0 0 0 0 248 0 5 249 250 251 252 253 0 0 0 0 0 284
////////////////////////////////////////////////////////////////////
//       Class : DCKeywordList
// Description : This is a list of keywords (see DCKeyword) that may
//               be set on a particular field.
////////////////////////////////////////////////////////////////////

476 7 DCField 0 26625 7 DCField 7 DCField 0 0 0 0 258 0 29 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 0 0 2 3 474 254 255 3 475 256 257 0 0 263
////////////////////////////////////////////////////////////////////
//       Class : DCField
// Description : A single field of a Distributed Class, either atomic
//               or molecular.
////////////////////////////////////////////////////////////////////

477 10 DCPackData 0 26625 10 DCPackData 10 DCPackData 0 0 0 1 288 289 0 3 290 291 292 0 0 0 0 0 262
////////////////////////////////////////////////////////////////////
//       Class : DCPackData
// Description : This is a block of data that receives the results of
//               DCPacker.
////////////////////////////////////////////////////////////////////

478 8 DCPacker 0 26625 8 DCPacker 8 DCPacker 0 0 0 1 293 294 0 70 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 0 0 0 0 0 499
////////////////////////////////////////////////////////////////////
//       Class : DCPacker
// Description : This class can be used for packing a series of
//               numeric and string data into a binary stream,
//               according to the DC specification.
//
//               See also direct/src/doc/dcPacker.txt for a more
//               complete description and examples of using this
//               class.
////////////////////////////////////////////////////////////////////

479 11 DCParameter 0 75777 11 DCParameter 11 DCParameter 0 0 0 0 258 0 5 365 366 367 368 369 0 0 1 0 476 0 0 0 0 577
////////////////////////////////////////////////////////////////////
//       Class : DCParameter
// Description : Represents the type specification for a single
//               parameter within a field specification.  This may be
//               a simple type, or it may be a class or an array
//               reference.
//
//               This may also be a typedef reference to another type,
//               which has the same properties as the referenced type,
//               but a different name.
////////////////////////////////////////////////////////////////////

480 16 DCArrayParameter 0 75777 16 DCArrayParameter 16 DCArrayParameter 0 0 0 0 258 0 2 370 371 0 0 1 0 479 0 0 0 0 423
////////////////////////////////////////////////////////////////////
//       Class : DCArrayParameter
// Description : This represents an array of some other kind of
//               object, meaning this parameter type accepts an
//               arbitrary (or possibly fixed) number of nested
//               fields, all of which are of the same type.
////////////////////////////////////////////////////////////////////

481 13 DCAtomicField 0 75777 13 DCAtomicField 13 DCAtomicField 0 0 0 0 258 0 7 372 373 374 375 376 377 378 0 0 1 0 476 0 0 0 0 416
////////////////////////////////////////////////////////////////////
//       Class : DCAtomicField
// Description : A single atomic field of a Distributed Class, as read
//               from a .dc file.  This defines an interface to the
//               Distributed Class, and is always implemented as a
//               remote procedure method.
////////////////////////////////////////////////////////////////////

482 13 DCDeclaration 0 26625 13 DCDeclaration 13 DCDeclaration 0 0 0 0 379 0 4 380 381 382 383 0 0 0 0 0 634
////////////////////////////////////////////////////////////////////
//       Class : DCDeclaration
// Description : This is a common interface for a declaration in a DC
//               file.  Currently, this is either a class or a typedef
//               declaration (import declarations are still collected
//               together at the top, and don't inherit from this
//               object).  Its only purpose is so that classes and
//               typedefs can be stored in one list together so they
//               can be ordered correctly on output.
////////////////////////////////////////////////////////////////////

483 7 DCClass 0 75777 7 DCClass 7 DCClass 0 0 0 0 379 0 37 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 0 0 1 0 482 0 0 0 0 266
////////////////////////////////////////////////////////////////////
//       Class : DCClass
// Description : Defines a particular DistributedClass as read from an
//               input .dc file.
////////////////////////////////////////////////////////////////////

484 16 DCClassParameter 0 141313 16 DCClassParameter 16 DCClassParameter 0 0 0 0 422 0 1 421 0 0 1 0 479 0 0 0 0 367
////////////////////////////////////////////////////////////////////
//       Class : DCClassParameter
// Description : This represents a class (or struct) object used as a
//               parameter itself.  This means that all the fields of
//               the class get packed into the message.
////////////////////////////////////////////////////////////////////

485 6 DCFile 0 26625 6 DCFile 6 DCFile 0 0 0 1 423 424 0 21 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 0 0 0 0 0 283
////////////////////////////////////////////////////////////////////
//       Class : DCFile
// Description : Represents the complete list of Distributed Class
//               descriptions as read from a .dc file.
////////////////////////////////////////////////////////////////////

486 9 DCKeyword 0 75777 9 DCKeyword 9 DCKeyword 0 0 0 0 379 0 1 446 0 0 1 0 482 0 0 0 0 403
////////////////////////////////////////////////////////////////////
//       Class : DCKeyword
// Description : This represents a single keyword declaration in the
//               dc file.  It is used to define a communication
//               property associated with a field, for instance
//               "broadcast" or "airecv".
////////////////////////////////////////////////////////////////////

487 16 DCMolecularField 0 141313 16 DCMolecularField 16 DCMolecularField 0 0 0 0 449 0 2 447 448 0 0 1 0 476 0 0 0 0 420
////////////////////////////////////////////////////////////////////
//       Class : DCMolecularField
// Description : A single molecular field of a Distributed Class, as
//               read from a .dc file.  This represents a combination
//               of two or more related atomic fields, that will often
//               be treated as a unit.
////////////////////////////////////////////////////////////////////

488 17 DCSimpleParameter 0 141313 17 DCSimpleParameter 17 DCSimpleParameter 0 0 0 0 454 0 4 450 451 452 453 0 0 1 0 479 0 0 0 0 537
////////////////////////////////////////////////////////////////////
//       Class : DCSimpleParameter
// Description : This is the most fundamental kind of parameter type:
//               a single number or string, one of the DCSubatomicType
//               elements.  It may also optionally have a divisor,
//               which is meaningful only for the numeric type
//               elements (and represents a fixed-point numeric
//               convention).
////////////////////////////////////////////////////////////////////

489 8 DCSwitch 0 75777 8 DCSwitch 8 DCSwitch 0 0 0 0 379 0 10 455 456 457 458 459 460 461 462 463 464 0 0 1 0 482 0 0 0 0 392
////////////////////////////////////////////////////////////////////
//       Class : DCSwitch
// Description : This represents a switch statement, which can appear
//               inside a class body and represents two or more
//               alternative unpacking schemes based on the first
//               field read.
////////////////////////////////////////////////////////////////////

490 17 DCSwitchParameter 0 141313 17 DCSwitchParameter 17 DCSwitchParameter 0 0 0 0 466 0 1 465 0 0 1 0 479 0 0 0 0 350
////////////////////////////////////////////////////////////////////
//       Class : DCSwitchParameter
// Description : This represents a switch object used as a
//               parameter itself, which packs the appropriate fields
//               of the switch into the message.
////////////////////////////////////////////////////////////////////

491 9 DCTypedef 0 75777 9 DCTypedef 9 DCTypedef 0 0 0 0 379 0 5 467 468 469 470 471 0 0 1 0 482 0 0 0 0 344
////////////////////////////////////////////////////////////////////
//       Class : DCTypedef
// Description : This represents a single typedef declaration in the
//               dc file.  It assigns a particular type to a new name,
//               just like a C typedef.
////////////////////////////////////////////////////////////////////

492 25 DCPackerInterface const * 0 8576 25 DCPackerInterface const * 25 DCPackerInterface const * 0 0 493 0 0 0 0 0 0 0 0 0 0

493 23 DCPackerInterface const 0 8832 23 DCPackerInterface const 23 DCPackerInterface const 0 0 474 0 0 0 0 0 0 0 0 0 0

494 13 atomic string 0 2 13 atomic string 13 atomic string 0 7 0 0 0 0 0 0 0 0 0 0 0

495 3 int 0 8194 3 int 3 int 0 1 0 0 0 0 0 0 0 0 0 0 0

496 19 DCPackerInterface * 0 8576 19 DCPackerInterface * 19 DCPackerInterface * 0 0 474 0 0 0 0 0 0 0 0 0 0

497 9 DCField * 0 8576 9 DCField * 9 DCField * 0 0 476 0 0 0 0 0 0 0 0 0 0

498 15 DCField const * 0 8576 15 DCField const * 15 DCField const * 0 0 499 0 0 0 0 0 0 0 0 0 0

499 13 DCField const 0 8832 13 DCField const 13 DCField const 0 0 476 0 0 0 0 0 0 0 0 0 0

500 19 DCSwitchParameter * 0 8576 19 DCSwitchParameter * 19 DCSwitchParameter * 0 0 490 0 0 0 0 0 0 0 0 0 0

501 25 DCSwitchParameter const * 0 8576 25 DCSwitchParameter const * 25 DCSwitchParameter const * 0 0 502 0 0 0 0 0 0 0 0 0 0

502 23 DCSwitchParameter const 0 8832 23 DCSwitchParameter const 23 DCSwitchParameter const 0 0 490 0 0 0 0 0 0 0 0 0 0

503 18 DCClassParameter * 0 8576 18 DCClassParameter * 18 DCClassParameter * 0 0 484 0 0 0 0 0 0 0 0 0 0

504 24 DCClassParameter const * 0 8576 24 DCClassParameter const * 24 DCClassParameter const * 0 0 505 0 0 0 0 0 0 0 0 0 0

505 22 DCClassParameter const 0 8832 22 DCClassParameter const 22 DCClassParameter const 0 0 484 0 0 0 0 0 0 0 0 0 0

506 4 bool 0 8194 4 bool 4 bool 0 4 0 0 0 0 0 0 0 0 0 0 0

507 8 DCFile * 0 8576 8 DCFile * 8 DCFile * 0 0 485 0 0 0 0 0 0 0 0 0 0

508 21 DCKeywordList const * 0 8576 21 DCKeywordList const * 21 DCKeywordList const * 0 0 509 0 0 0 0 0 0 0 0 0 0

509 19 DCKeywordList const 0 8832 19 DCKeywordList const 19 DCKeywordList const 0 0 475 0 0 0 0 0 0 0 0 0 0

510 17 DCKeyword const * 0 8576 17 DCKeyword const * 17 DCKeyword const * 0 0 511 0 0 0 0 0 0 0 0 0 0

511 15 DCKeyword const 0 8832 15 DCKeyword const 15 DCKeyword const 0 0 486 0 0 0 0 0 0 0 0 0 0

512 9 DCClass * 0 8576 9 DCClass * 9 DCClass * 0 0 483 0 0 0 0 0 0 0 0 0 0

513 15 DCAtomicField * 0 8576 15 DCAtomicField * 15 DCAtomicField * 0 0 481 0 0 0 0 0 0 0 0 0 0

514 21 DCAtomicField const * 0 8576 21 DCAtomicField const * 21 DCAtomicField const * 0 0 515 0 0 0 0 0 0 0 0 0 0

515 19 DCAtomicField const 0 8832 19 DCAtomicField const 19 DCAtomicField const 0 0 481 0 0 0 0 0 0 0 0 0 0

516 18 DCMolecularField * 0 8576 18 DCMolecularField * 18 DCMolecularField * 0 0 487 0 0 0 0 0 0 0 0 0 0

517 24 DCMolecularField const * 0 8576 24 DCMolecularField const * 24 DCMolecularField const * 0 0 518 0 0 0 0 0 0 0 0 0 0

518 22 DCMolecularField const 0 8832 22 DCMolecularField const 22 DCMolecularField const 0 0 487 0 0 0 0 0 0 0 0 0 0

519 13 DCParameter * 0 8576 13 DCParameter * 13 DCParameter * 0 0 479 0 0 0 0 0 0 0 0 0 0

520 19 DCParameter const * 0 8576 19 DCParameter const * 19 DCParameter const * 0 0 521 0 0 0 0 0 0 0 0 0 0

521 17 DCParameter const 0 8832 17 DCParameter const 17 DCParameter const 0 0 479 0 0 0 0 0 0 0 0 0 0

522 9 ostream * 0 8576 9 ostream * 9 ostream * 0 0 523 0 0 0 0 0 0 0 0 0 0

523 7 ostream 0 2048 7 ostream 7 ostream 0 0 0 0 0 0 0 0 0 0 0 0 0

524 4 void 0 8194 4 void 4 void 0 6 0 0 0 0 0 0 0 0 0 0 0

525 10 DCPacker * 0 8576 10 DCPacker * 10 DCPacker * 0 0 478 0 0 0 0 0 0 0 0 0 0

526 10 PyObject * 0 8576 10 PyObject * 10 PyObject * 0 0 527 0 0 0 0 0 0 0 0 0 0

527 8 PyObject 0 2105344 8 PyObject 8 PyObject 0 0 528 0 0 0 0 0 0 0 0 0 0

528 7 _object 0 1024 7 _object 7 _object 0 0 0 0 0 0 0 0 0 0 0 0 0

529 8 Datagram 0 2048 8 Datagram 8 Datagram 0 0 0 0 0 0 0 0 0 0 0 0 900
////////////////////////////////////////////////////////////////////
//       Class : Datagram
// Description : An ordered list of data elements, formatted in memory
//               for transmission over a socket or writing to a data
//               file.
//
//               Data elements should be added one at a time, in
//               order, to the Datagram.  The nature and contents of
//               the data elements are totally up to the user.  When a
//               Datagram has been transmitted and received, its data
//               elements may be extracted using a DatagramIterator;
//               it is up to the caller to know the correct type of
//               each data element in order.
//
//               A Datagram is itself headerless; it is simply a
//               collection of data elements.
////////////////////////////////////////////////////////////////////

530 9 DOID_TYPE 0 2105344 9 DOID_TYPE 9 DOID_TYPE 0 0 531 0 0 0 0 0 0 0 0 0 0

531 9 PN_uint32 0 2105344 9 PN_uint32 9 PN_uint32 0 0 532 0 0 0 0 0 0 0 0 0 0

532 12 unsigned int 0 8198 12 unsigned int 12 unsigned int 0 1 0 0 0 0 0 0 0 0 0 0 0

533 10 Datagram * 0 8576 10 Datagram * 10 Datagram * 0 0 529 0 0 0 0 0 0 0 0 0 0

534 12 CHANNEL_TYPE 0 2105344 12 CHANNEL_TYPE 12 CHANNEL_TYPE 0 0 535 0 0 0 0 0 0 0 0 0 0

535 9 PN_uint64 0 2105344 9 PN_uint64 9 PN_uint64 0 0 536 0 0 0 0 0 0 0 0 0 0

536 22 unsigned long long int 0 8230 22 unsigned long long int 22 unsigned long long int 0 8 0 0 0 0 0 0 0 0 0 0 0

537 15 DCKeywordList * 0 8576 15 DCKeywordList * 15 DCKeywordList * 0 0 475 0 0 0 0 0 0 0 0 0 0

538 12 DCPackData * 0 8576 12 DCPackData * 12 DCPackData * 0 0 477 0 0 0 0 0 0 0 0 0 0

539 18 DCPackData const * 0 8576 18 DCPackData const * 18 DCPackData const * 0 0 540 0 0 0 0 0 0 0 0 0 0

540 16 DCPackData const 0 8832 16 DCPackData const 16 DCPackData const 0 0 477 0 0 0 0 0 0 0 0 0 0

541 6 size_t 0 2105344 6 size_t 6 size_t 0 0 542 0 0 0 0 0 0 0 0 0 0

542 17 unsigned long int 0 8214 17 unsigned long int 17 unsigned long int 0 1 0 0 0 0 0 0 0 0 0 0 0

543 16 DCPacker const * 0 8576 16 DCPacker const * 16 DCPacker const * 0 0 544 0 0 0 0 0 0 0 0 0 0

544 14 DCPacker const 0 8832 14 DCPacker const 14 DCPacker const 0 0 478 0 0 0 0 0 0 0 0 0 0

545 6 double 0 8194 6 double 6 double 0 3 0 0 0 0 0 0 0 0 0 0 0

546 8 PN_int64 0 2105344 8 PN_int64 8 PN_int64 0 0 547 0 0 0 0 0 0 0 0 0 0

547 13 long long int 0 8226 13 long long int 13 long long int 0 8 0 0 0 0 0 0 0 0 0 0 0

548 9 istream * 0 8576 9 istream * 9 istream * 0 0 549 0 0 0 0 0 0 0 0 0 0

549 7 istream 0 2048 7 istream 7 istream 0 0 0 0 0 0 0 0 0 0 0 0 0

550 19 DCSimpleParameter * 0 8576 19 DCSimpleParameter * 19 DCSimpleParameter * 0 0 488 0 0 0 0 0 0 0 0 0 0

551 25 DCSimpleParameter const * 0 8576 25 DCSimpleParameter const * 25 DCSimpleParameter const * 0 0 552 0 0 0 0 0 0 0 0 0 0

552 23 DCSimpleParameter const 0 8832 23 DCSimpleParameter const 23 DCSimpleParameter const 0 0 488 0 0 0 0 0 0 0 0 0 0

553 18 DCArrayParameter * 0 8576 18 DCArrayParameter * 18 DCArrayParameter * 0 0 480 0 0 0 0 0 0 0 0 0 0

554 24 DCArrayParameter const * 0 8576 24 DCArrayParameter const * 24 DCArrayParameter const * 0 0 555 0 0 0 0 0 0 0 0 0 0

555 22 DCArrayParameter const 0 8832 22 DCArrayParameter const 22 DCArrayParameter const 0 0 480 0 0 0 0 0 0 0 0 0 0

556 17 DCTypedef const * 0 8576 17 DCTypedef const * 17 DCTypedef const * 0 0 557 0 0 0 0 0 0 0 0 0 0

557 15 DCTypedef const 0 8832 15 DCTypedef const 15 DCTypedef const 0 0 491 0 0 0 0 0 0 0 0 0 0

558 15 DCDeclaration * 0 8576 15 DCDeclaration * 15 DCDeclaration * 0 0 482 0 0 0 0 0 0 0 0 0 0

559 21 DCDeclaration const * 0 8576 21 DCDeclaration const * 21 DCDeclaration const * 0 0 560 0 0 0 0 0 0 0 0 0 0

560 19 DCDeclaration const 0 8832 19 DCDeclaration const 19 DCDeclaration const 0 0 482 0 0 0 0 0 0 0 0 0 0

561 15 DCClass const * 0 8576 15 DCClass const * 15 DCClass const * 0 0 562 0 0 0 0 0 0 0 0 0 0

562 13 DCClass const 0 8832 13 DCClass const 13 DCClass const 0 0 483 0 0 0 0 0 0 0 0 0 0

563 10 DCSwitch * 0 8576 10 DCSwitch * 10 DCSwitch * 0 0 489 0 0 0 0 0 0 0 0 0 0

564 16 DCSwitch const * 0 8576 16 DCSwitch const * 16 DCSwitch const * 0 0 565 0 0 0 0 0 0 0 0 0 0

565 14 DCSwitch const 0 8832 14 DCSwitch const 14 DCSwitch const 0 0 489 0 0 0 0 0 0 0 0 0 0

566 18 DatagramIterator * 0 8576 18 DatagramIterator * 18 DatagramIterator * 0 0 567 0 0 0 0 0 0 0 0 0 0

567 16 DatagramIterator 0 2048 16 DatagramIterator 16 DatagramIterator 0 0 0 0 0 0 0 0 0 0 0 0 438
////////////////////////////////////////////////////////////////////
//       Class : DatagramIterator
// Description : A class to retrieve the individual data elements
//               previously stored in a Datagram.  Elements may be
//               retrieved one at a time; it is up to the caller to
//               know the correct type and order of each element.
////////////////////////////////////////////////////////////////////

568 16 Datagram const * 0 8576 16 Datagram const * 16 Datagram const * 0 0 569 0 0 0 0 0 0 0 0 0 0

569 14 Datagram const 0 8832 14 Datagram const 14 Datagram const 0 0 529 0 0 0 0 0 0 0 0 0 0

570 11 ZONEID_TYPE 0 2105344 11 ZONEID_TYPE 11 ZONEID_TYPE 0 0 531 0 0 0 0 0 0 0 0 0 0

571 10 Filename * 0 8576 10 Filename * 10 Filename * 0 0 572 0 0 0 0 0 0 0 0 0 0

572 8 Filename 0 2048 8 Filename 8 Filename 0 0 0 0 0 0 0 0 0 0 0 0 869
////////////////////////////////////////////////////////////////////
//       Class : Filename
// Description : The name of a file, such as a texture file or an Egg
//               file.  Stores the full pathname, and includes
//               functions for extracting out the directory prefix
//               part and the file extension and stuff.
//
//               A Filename is also aware of the mapping between the
//               Unix-like filename convention we use internally, and
//               the local OS's specific filename convention, and it
//               knows how to perform basic OS-specific I/O, like
//               testing for file existence and searching a
//               searchpath, as well as the best way to open an
//               fstream for reading or writing.
////////////////////////////////////////////////////////////////////

573 14 DCFile const * 0 8576 14 DCFile const * 14 DCFile const * 0 0 574 0 0 0 0 0 0 0 0 0 0

574 12 DCFile const 0 8832 12 DCFile const 12 DCFile const 0 0 485 0 0 0 0 0 0 0 0 0 0

575 11 DCTypedef * 0 8576 11 DCTypedef * 11 DCTypedef * 0 0 491 0 0 0 0 0 0 0 0 0 0

0
0
0
