1436948306
2 3
9 libp3text 4 z_GL 12 panda3d.core 
361
378 13 get_character 0 4 739 24 TextGlyph::get_character 0 1 1 320
////////////////////////////////////////////////////////////////////
//     Function: TextGlyph::get_character
//       Access: Public
//  Description: Returns the Unicode value that corresponds to the
//               character this glyph represents.
////////////////////////////////////////////////////////////////////
48
inline int TextGlyph::get_character(void) const;

379 8 get_geom 0 4 739 19 TextGlyph::get_geom 0 1 2 265
////////////////////////////////////////////////////////////////////
//     Function: TextGlyph::get_geom
//       Access: Public
//  Description: Returns a Geom that renders the particular glyph.
////////////////////////////////////////////////////////////////////
84
inline PointerTo< Geom > TextGlyph::get_geom(GeomEnums::UsageHint usage_hint) const;

380 9 get_state 0 4 739 20 TextGlyph::get_state 0 1 3 290
////////////////////////////////////////////////////////////////////
//     Function: TextGlyph::get_state
//       Access: Public
//  Description: Returns the state in which the glyph should be
//               rendered.
////////////////////////////////////////////////////////////////////
59
inline RenderState const *TextGlyph::get_state(void) const;

381 11 get_advance 0 4 739 22 TextGlyph::get_advance 0 1 4 433
////////////////////////////////////////////////////////////////////
//     Function: TextGlyph::get_advance
//       Access: Public
//  Description: Returns the distance by which the character pointer
//               should be advanced after placing this character;
//               i.e. the approximate width the character takes up on
//               the line.
////////////////////////////////////////////////////////////////////
54
inline PN_stdfloat TextGlyph::get_advance(void) const;

382 13 is_whitespace 0 6 739 24 TextGlyph::is_whitespace 0 1 5 377
////////////////////////////////////////////////////////////////////
//     Function: TextGlyph::is_whitespace
//       Access: Public, Virtual
//  Description: Returns true if this glyph represents invisible
//               whitespace, or false if it corresponds to some
//               visible character.
////////////////////////////////////////////////////////////////////
50
virtual bool TextGlyph::is_whitespace(void) const;

383 14 get_class_type 0 4 739 25 TextGlyph::get_class_type 0 1 6 0
50
static TypeHandle TextGlyph::get_class_type(void);

384 29 upcast_to_TypedReferenceCount 0 12 741 39 TextFont::upcast_to_TypedReferenceCount 0 1 17 43
upcast from TextFont to TypedReferenceCount
67
TypedReferenceCount *TextFont::upcast_to_TypedReferenceCount(void);

385 20 downcast_to_TextFont 0 12 740 41 TypedReferenceCount::downcast_to_TextFont 0 1 18 45
downcast from TypedReferenceCount to TextFont
58
TextFont *TypedReferenceCount::downcast_to_TextFont(void);

386 17 upcast_to_Namable 0 12 741 27 TextFont::upcast_to_Namable 0 1 19 31
upcast from TextFont to Namable
43
Namable *TextFont::upcast_to_Namable(void);

387 20 downcast_to_TextFont 0 12 742 29 Namable::downcast_to_TextFont 0 1 20 33
downcast from Namable to TextFont
46
TextFont *Namable::downcast_to_TextFont(void);

388 9 ~TextFont 0 6 741 19 TextFont::~TextFont 0 0 228
////////////////////////////////////////////////////////////////////
//     Function: TextFont::Destructor
//       Access: Published, Virtual
//  Description:
////////////////////////////////////////////////////////////////////
34
virtual TextFont::~TextFont(void);

389 9 make_copy 0 6 741 19 TextFont::make_copy 0 1 7 0
66
virtual PointerTo< TextFont > TextFont::make_copy(void) const = 0;

390 8 is_valid 0 4 741 18 TextFont::is_valid 0 1 8 303
////////////////////////////////////////////////////////////////////
//     Function: TextFont::is_valid
//       Access: Published
//  Description: Returns true if the font is valid and ready to use,
//               false otherwise.
////////////////////////////////////////////////////////////////////
43
inline bool TextFont::is_valid(void) const;

391 22 operator typecast bool 0 132 741 32 TextFont::operator typecast bool 0 1 16 0
57
inline bool TextFont::operator typecast bool(void) const;

392 15 get_line_height 0 4 741 25 TextFont::get_line_height 0 1 9 296
////////////////////////////////////////////////////////////////////
//     Function: TextFont::get_line_height
//       Access: Published
//  Description: Returns the number of units high each line of text
//               is.
////////////////////////////////////////////////////////////////////
57
inline PN_stdfloat TextFont::get_line_height(void) const;

393 15 set_line_height 0 4 741 25 TextFont::set_line_height 0 1 10 296
////////////////////////////////////////////////////////////////////
//     Function: TextFont::set_line_height
//       Access: Published
//  Description: Changes the number of units high each line of text
//               is.
////////////////////////////////////////////////////////////////////
63
inline void TextFont::set_line_height(PN_stdfloat line_height);

394 17 get_space_advance 0 4 741 27 TextFont::get_space_advance 0 1 11 271
////////////////////////////////////////////////////////////////////
//     Function: TextFont::get_space_advance
//       Access: Published
//  Description: Returns the number of units wide a space is.
////////////////////////////////////////////////////////////////////
59
inline PN_stdfloat TextFont::get_space_advance(void) const;

395 17 set_space_advance 0 4 741 27 TextFont::set_space_advance 0 1 12 271
////////////////////////////////////////////////////////////////////
//     Function: TextFont::set_space_advance
//       Access: Published
//  Description: Changes the number of units wide a space is.
////////////////////////////////////////////////////////////////////
67
inline void TextFont::set_space_advance(PN_stdfloat space_advance);

396 9 get_glyph 0 4 741 19 TextFont::get_glyph 0 1 13 591
////////////////////////////////////////////////////////////////////
//     Function: DynamicTextFont::get_glyph
//       Access: Public, Virtual
//  Description: Gets the glyph associated with the given character
//               code, as well as an optional scaling parameter that
//               should be applied to the glyph's geometry and advance
//               parameters.  Returns the glyph on success.  On failure,
//               it may still return a printable glyph, or it may
//               return NULL.
////////////////////////////////////////////////////////////////////
59
inline TextGlyph const *TextFont::get_glyph(int character);

397 5 write 0 6 741 15 TextFont::write 0 1 14 223
////////////////////////////////////////////////////////////////////
//     Function: TextFont::write
//       Access: Published, Virtual
//  Description:
////////////////////////////////////////////////////////////////////
67
virtual void TextFont::write(ostream &out, int indent_level) const;

398 14 get_class_type 0 4 741 24 TextFont::get_class_type 0 1 15 0
49
static TypeHandle TextFont::get_class_type(void);

399 8 get_page 0 4 745 26 DynamicTextGlyph::get_page 0 1 21 276
////////////////////////////////////////////////////////////////////
//     Function: DynamicTextGlyph::get_page
//       Access: Published
//  Description: Returns the DynamicTextPage that this glyph is on.
////////////////////////////////////////////////////////////////////
63
inline DynamicTextPage *DynamicTextGlyph::get_page(void) const;

400 10 intersects 0 4 745 28 DynamicTextGlyph::intersects 0 1 22 469
////////////////////////////////////////////////////////////////////
//     Function: DynamicTextGlyph::intersects
//       Access: Published
//  Description: Returns true if the particular position this glyph
//               has been assigned to overlaps the rectangle whose
//               top left corner is at x, y and whose size is given by
//               x_size, y_size, or false otherwise.
////////////////////////////////////////////////////////////////////
85
inline bool DynamicTextGlyph::intersects(int x, int y, int x_size, int y_size) const;

401 7 get_top 0 4 745 25 DynamicTextGlyph::get_top 0 1 23 327
////////////////////////////////////////////////////////////////////
//     Function: DynamicTextGlyph::get_top
//       Access: Published
//  Description: Returns the vertex coordinates that can be used when
//               creating a custom text renderer.
////////////////////////////////////////////////////////////////////
57
inline PN_stdfloat DynamicTextGlyph::get_top(void) const;

402 8 get_left 0 4 745 26 DynamicTextGlyph::get_left 0 1 24 328
////////////////////////////////////////////////////////////////////
//     Function: DynamicTextGlyph::get_left
//       Access: Published
//  Description: Returns the vertex coordinates that can be used when
//               creating a custom text renderer.
////////////////////////////////////////////////////////////////////
58
inline PN_stdfloat DynamicTextGlyph::get_left(void) const;

403 10 get_bottom 0 4 745 28 DynamicTextGlyph::get_bottom 0 1 25 330
////////////////////////////////////////////////////////////////////
//     Function: DynamicTextGlyph::get_bottom
//       Access: Published
//  Description: Returns the vertex coordinates that can be used when
//               creating a custom text renderer.
////////////////////////////////////////////////////////////////////
60
inline PN_stdfloat DynamicTextGlyph::get_bottom(void) const;

404 9 get_right 0 4 745 27 DynamicTextGlyph::get_right 0 1 26 329
////////////////////////////////////////////////////////////////////
//     Function: DynamicTextGlyph::get_right
//       Access: Published
//  Description: Returns the vertex coordinates that can be used when
//               creating a custom text renderer.
////////////////////////////////////////////////////////////////////
59
inline PN_stdfloat DynamicTextGlyph::get_right(void) const;

405 10 get_uv_top 0 4 745 28 DynamicTextGlyph::get_uv_top 0 1 27 326
////////////////////////////////////////////////////////////////////
//     Function: DynamicTextGlyph::get_uv_top
//       Access: Published
//  Description: Returns the UV coordinates that can be used when
//               creating a custom text renderer.
////////////////////////////////////////////////////////////////////
60
inline PN_stdfloat DynamicTextGlyph::get_uv_top(void) const;

406 11 get_uv_left 0 4 745 29 DynamicTextGlyph::get_uv_left 0 1 28 327
////////////////////////////////////////////////////////////////////
//     Function: DynamicTextGlyph::get_uv_left
//       Access: Published
//  Description: Returns the UV coordinates that can be used when
//               creating a custom text renderer.
////////////////////////////////////////////////////////////////////
61
inline PN_stdfloat DynamicTextGlyph::get_uv_left(void) const;

407 13 get_uv_bottom 0 4 745 31 DynamicTextGlyph::get_uv_bottom 0 1 29 329
////////////////////////////////////////////////////////////////////
//     Function: DynamicTextGlyph::get_uv_bottom
//       Access: Published
//  Description: Returns the UV coordinates that can be used when
//               creating a custom text renderer.
////////////////////////////////////////////////////////////////////
63
inline PN_stdfloat DynamicTextGlyph::get_uv_bottom(void) const;

408 12 get_uv_right 0 4 745 30 DynamicTextGlyph::get_uv_right 0 1 30 328
////////////////////////////////////////////////////////////////////
//     Function: DynamicTextGlyph::get_uv_right
//       Access: Published
//  Description: Returns the UV coordinates that can be used when
//               creating a custom text renderer.
////////////////////////////////////////////////////////////////////
62
inline PN_stdfloat DynamicTextGlyph::get_uv_right(void) const;

409 14 get_class_type 0 4 745 32 DynamicTextGlyph::get_class_type 0 1 31 0
57
static TypeHandle DynamicTextGlyph::get_class_type(void);

410 10 get_x_size 0 4 746 27 DynamicTextPage::get_x_size 0 1 32 279
////////////////////////////////////////////////////////////////////
//     Function: DynamicTextPage::get_x_size
//       Access: Published
//  Description: Returns the x size of the page (texture), in pixels.
////////////////////////////////////////////////////////////////////
51
inline int DynamicTextPage::get_x_size(void) const;

411 10 get_y_size 0 4 746 27 DynamicTextPage::get_y_size 0 1 33 279
////////////////////////////////////////////////////////////////////
//     Function: DynamicTextPage::get_y_size
//       Access: Published
//  Description: Returns the y size of the page (texture), in pixels.
////////////////////////////////////////////////////////////////////
51
inline int DynamicTextPage::get_y_size(void) const;

412 8 is_empty 0 4 746 25 DynamicTextPage::is_empty 0 1 34 298
////////////////////////////////////////////////////////////////////
//     Function: DynamicTextPage::is_empty
//       Access: Published
//  Description: Returns true if the page has no glyphs, false
//               otherwise.
////////////////////////////////////////////////////////////////////
50
inline bool DynamicTextPage::is_empty(void) const;

413 14 get_class_type 0 4 746 31 DynamicTextPage::get_class_type 0 1 35 0
56
static TypeHandle DynamicTextPage::get_class_type(void);

414 16 ~DynamicTextPage 0 4 746 33 DynamicTextPage::~DynamicTextPage 0 0 0
40
DynamicTextPage::~DynamicTextPage(void);

415 18 upcast_to_TextFont 0 12 748 35 DynamicTextFont::upcast_to_TextFont 0 1 84 39
upcast from DynamicTextFont to TextFont
52
TextFont *DynamicTextFont::upcast_to_TextFont(void);

416 27 downcast_to_DynamicTextFont 0 12 741 37 TextFont::downcast_to_DynamicTextFont 0 1 85 41
downcast from TextFont to DynamicTextFont
61
DynamicTextFont *TextFont::downcast_to_DynamicTextFont(void);

417 22 upcast_to_FreetypeFont 0 12 748 39 DynamicTextFont::upcast_to_FreetypeFont 0 1 86 43
upcast from DynamicTextFont to FreetypeFont
60
FreetypeFont *DynamicTextFont::upcast_to_FreetypeFont(void);

418 27 downcast_to_DynamicTextFont 0 12 749 41 FreetypeFont::downcast_to_DynamicTextFont 0 1 87 45
downcast from FreetypeFont to DynamicTextFont
65
DynamicTextFont *FreetypeFont::downcast_to_DynamicTextFont(void);

419 15 DynamicTextFont 0 4 748 32 DynamicTextFont::DynamicTextFont 0 3 36 37 38 1057
////////////////////////////////////////////////////////////////////
//     Function: DynamicTextFont::Constructor
//       Access: Published
//  Description: The constructor expects the name of some font file
//               that FreeType can read, along with face_index,
//               indicating which font within the file to load
//               (usually 0).
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: DynamicTextFont::Constructor
//       Access: Published
//  Description: This constructor accepts a table of data representing
//               the font file, loaded from some source other than a
//               filename on disk.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: DynamicTextFont::Copy Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
237
DynamicTextFont::DynamicTextFont(Filename const &font_filename, int face_index = 0);
DynamicTextFont::DynamicTextFont(char const *font_data, int data_length, int face_index);
DynamicTextFont::DynamicTextFont(DynamicTextFont const &copy);

420 16 ~DynamicTextFont 0 6 748 33 DynamicTextFont::~DynamicTextFont 0 0 236
////////////////////////////////////////////////////////////////////
//     Function: DynamicTextFont::Destructor
//       Access: Published, Virtual
//  Description: 
////////////////////////////////////////////////////////////////////
48
virtual DynamicTextFont::~DynamicTextFont(void);

421 9 make_copy 0 6 748 26 DynamicTextFont::make_copy 0 1 39 262
////////////////////////////////////////////////////////////////////
//     Function: DynamicTextFont::make_copy
//       Access: Published
//  Description: Returns a new copy of the same font.
////////////////////////////////////////////////////////////////////
69
virtual PointerTo< TextFont > DynamicTextFont::make_copy(void) const;

422 8 get_name 0 4 748 25 DynamicTextFont::get_name 0 1 40 369
////////////////////////////////////////////////////////////////////
//     Function: DynamicTextFont::get_name
//       Access: Published
//  Description: Disambiguates the get_name() method between that
//               inherited from TextFont and that inherited from
//               FreetypeFont.
////////////////////////////////////////////////////////////////////
59
inline string const &DynamicTextFont::get_name(void) const;

423 14 set_point_size 0 4 748 31 DynamicTextFont::set_point_size 0 1 41 591
////////////////////////////////////////////////////////////////////
//     Function: DynamicTextFont::set_point_size
//       Access: Published
//  Description: Sets the point size of the font.  This controls the
//               apparent size of the font onscreen.  By convention, a
//               10 point font is about 1 screen unit high.
//
//               This should only be called before any characters have
//               been requested out of the font, or immediately after
//               calling clear().
////////////////////////////////////////////////////////////////////
68
inline bool DynamicTextFont::set_point_size(PN_stdfloat point_size);

424 14 get_point_size 0 4 748 31 DynamicTextFont::get_point_size 0 1 42 266
////////////////////////////////////////////////////////////////////
//     Function: DynamicTextFont::get_point_size
//       Access: Published
//  Description: Returns the point size of the font.
////////////////////////////////////////////////////////////////////
63
inline PN_stdfloat DynamicTextFont::get_point_size(void) const;

425 19 set_pixels_per_unit 0 4 748 36 DynamicTextFont::set_pixels_per_unit 0 1 43 776
////////////////////////////////////////////////////////////////////
//     Function: DynamicTextFont::set_pixels_per_unit
//       Access: Published
//  Description: Set the resolution of the texture map, and hence the
//               clarity of the resulting font.  This sets the number
//               of pixels in the texture map that are used for each
//               onscreen unit.
//
//               Setting this number larger results in an easier to
//               read font, but at the cost of more texture memory.
//
//               This should only be called before any characters have
//               been requested out of the font, or immediately after
//               calling clear().
////////////////////////////////////////////////////////////////////
78
inline bool DynamicTextFont::set_pixels_per_unit(PN_stdfloat pixels_per_unit);

426 19 get_pixels_per_unit 0 4 748 36 DynamicTextFont::get_pixels_per_unit 0 1 44 323
////////////////////////////////////////////////////////////////////
//     Function: DynamicTextFont::get_pixels_per_unit
//       Access: Published
//  Description: Returns the resolution of the texture map.  See
//               set_pixels_per_unit().
////////////////////////////////////////////////////////////////////
68
inline PN_stdfloat DynamicTextFont::get_pixels_per_unit(void) const;

427 16 set_scale_factor 0 4 748 33 DynamicTextFont::set_scale_factor 0 1 45 979
////////////////////////////////////////////////////////////////////
//     Function: DynamicTextFont::set_scale_factor
//       Access: Published
//  Description: Sets the factor by which the font is rendered larger
//               by the FreeType library before being filtered down to
//               its actual size in the texture as specified by
//               set_pixels_per_unit().  This may be set to a number
//               larger than 1.0 to improve the font's antialiasing
//               (since FreeType doesn't really do a swell job of
//               antialiasing by itself).  There is some performance
//               implication for setting this different than 1.0, but
//               it is probably small.
//
//               This should only be called before any characters have
//               been requested out of the font, or immediately after
//               calling clear().
////////////////////////////////////////////////////////////////////
72
inline bool DynamicTextFont::set_scale_factor(PN_stdfloat scale_factor);

428 16 get_scale_factor 0 4 748 33 DynamicTextFont::get_scale_factor 0 1 46 313
////////////////////////////////////////////////////////////////////
//     Function: DynamicTextFont::get_scale_factor
//       Access: Published
//  Description: Returns the antialiasing scale factor.  See
//               set_scale_factor().
////////////////////////////////////////////////////////////////////
65
inline PN_stdfloat DynamicTextFont::get_scale_factor(void) const;

429 20 set_native_antialias 0 4 748 37 DynamicTextFont::set_native_antialias 0 1 47 833
////////////////////////////////////////////////////////////////////
//     Function: DynamicTextFont::set_native_antialias
//       Access: Published
//  Description: Sets whether the Freetype library's built-in
//               antialias mode is enabled.  There are two unrelated
//               ways to achieve antialiasing: with Freetype's native
//               antialias mode, and with the use of a scale_factor
//               greater than one.  By default, both modes are
//               enabled.
//
//               At low resolutions, some fonts may do better with one
//               mode or the other.  In general, Freetype's native
//               antialiasing will produce less blurry results, but
//               may introduce more artifacts.
////////////////////////////////////////////////////////////////////
73
inline void DynamicTextFont::set_native_antialias(bool native_antialias);

430 20 get_native_antialias 0 4 748 37 DynamicTextFont::get_native_antialias 0 1 48 345
////////////////////////////////////////////////////////////////////
//     Function: DynamicTextFont::get_native_antialias
//       Access: Published
//  Description: Returns whether Freetype's built-in antialias mode is
//               enabled.  See set_native_antialias().
////////////////////////////////////////////////////////////////////
62
inline bool DynamicTextFont::get_native_antialias(void) const;

431 19 get_font_pixel_size 0 4 748 36 DynamicTextFont::get_font_pixel_size 0 1 49 715
////////////////////////////////////////////////////////////////////
//     Function: DynamicTextFont::get_font_pixel_size
//       Access: Published
//  Description: This is used to report whether the requested pixel
//               size is being only approximated by a fixed-pixel-size
//               font.  This returns 0 in the normal case, in which a
//               scalable font is used, or the fixed-pixel-size font
//               has exactly the requested pixel size.
//
//               If this returns non-zero, it is the pixel size of the
//               font that we are using to approximate our desired
//               size.
////////////////////////////////////////////////////////////////////
60
inline int DynamicTextFont::get_font_pixel_size(void) const;

432 15 get_line_height 0 4 748 32 DynamicTextFont::get_line_height 0 1 50 303
////////////////////////////////////////////////////////////////////
//     Function: DynamicTextFont::get_line_height
//       Access: Published
//  Description: Returns the number of units high each line of text
//               is.
////////////////////////////////////////////////////////////////////
64
inline PN_stdfloat DynamicTextFont::get_line_height(void) const;

433 17 get_space_advance 0 4 748 34 DynamicTextFont::get_space_advance 0 1 51 278
////////////////////////////////////////////////////////////////////
//     Function: DynamicTextFont::get_space_advance
//       Access: Published
//  Description: Returns the number of units wide a space is.
////////////////////////////////////////////////////////////////////
66
inline PN_stdfloat DynamicTextFont::get_space_advance(void) const;

434 18 set_texture_margin 0 4 748 35 DynamicTextFont::set_texture_margin 0 1 52 476
////////////////////////////////////////////////////////////////////
//     Function: DynamicTextFont::set_texture_margin
//       Access: Published
//  Description: Sets the number of pixels of padding that is added
//               around the border of each glyph before adding it to
//               the texture map.  This reduces the bleed in from
//               neighboring glyphs in the texture map.
////////////////////////////////////////////////////////////////////
68
inline void DynamicTextFont::set_texture_margin(int texture_margin);

435 18 get_texture_margin 0 4 748 35 DynamicTextFont::get_texture_margin 0 1 53 400
////////////////////////////////////////////////////////////////////
//     Function: DynamicTextFont::get_texture_margin
//       Access: Published
//  Description: Returns the number of pixels of padding that is added
//               around the border of each glyph in the texture map.
//               See set_texture_margin().
////////////////////////////////////////////////////////////////////
59
inline int DynamicTextFont::get_texture_margin(void) const;

436 15 set_poly_margin 0 4 748 32 DynamicTextFont::set_poly_margin 0 1 54 794
////////////////////////////////////////////////////////////////////
//     Function: DynamicTextFont::set_poly_margin
//       Access: Published
//  Description: Sets the number of pixels of padding that is included
//               around each glyph in the generated polygons.  This
//               helps prevent the edges of the glyphs from being cut
//               off at small minifications.  It is not related to the
//               amount of extra pixels reserved in the texture map
//               (but it should be set somewhat smaller than this
//               number, which is controlled by set_texture_margin(),
//               to prevent bleed-in from neighboring letters in the
//               texture).
////////////////////////////////////////////////////////////////////
70
inline void DynamicTextFont::set_poly_margin(PN_stdfloat poly_margin);

437 15 get_poly_margin 0 4 748 32 DynamicTextFont::get_poly_margin 0 1 55 390
////////////////////////////////////////////////////////////////////
//     Function: DynamicTextFont::get_poly_margin
//       Access: Published
//  Description: Returns the number of pixels of padding that is
//               included around each glyph in the generated polygons.
//               See set_poly_margin().
////////////////////////////////////////////////////////////////////
64
inline PN_stdfloat DynamicTextFont::get_poly_margin(void) const;

438 13 set_page_size 0 4 748 30 DynamicTextFont::set_page_size 0 1 56 323
////////////////////////////////////////////////////////////////////
//     Function: DynamicTextFont::set_page_size
//       Access: Published
//  Description: Sets the x, y size of the textures that are created
//               for the DynamicTextFont.
////////////////////////////////////////////////////////////////////
67
inline void DynamicTextFont::set_page_size(int x_size, int y_size);

439 15 get_page_x_size 0 4 748 32 DynamicTextFont::get_page_x_size 0 1 57 347
////////////////////////////////////////////////////////////////////
//     Function: DynamicTextFont::get_page_x_size
//       Access: Published
//  Description: Returns the x size of the textures that are created
//               for the DynamicTextFont.  See set_page_size().
////////////////////////////////////////////////////////////////////
56
inline int DynamicTextFont::get_page_x_size(void) const;

440 15 get_page_y_size 0 4 748 32 DynamicTextFont::get_page_y_size 0 1 58 347
////////////////////////////////////////////////////////////////////
//     Function: DynamicTextFont::get_page_y_size
//       Access: Published
//  Description: Returns the y size of the textures that are created
//               for the DynamicTextFont.  See set_page_size().
////////////////////////////////////////////////////////////////////
56
inline int DynamicTextFont::get_page_y_size(void) const;

441 13 set_minfilter 0 4 748 30 DynamicTextFont::set_minfilter 0 1 59 324
////////////////////////////////////////////////////////////////////
//     Function: DynamicTextFont::set_minfilter
//       Access: Published
//  Description: Sets the filter type used when minimizing the
//               textures created for this font.
////////////////////////////////////////////////////////////////////
76
inline void DynamicTextFont::set_minfilter(SamplerState::FilterType filter);

442 13 get_minfilter 0 4 748 30 DynamicTextFont::get_minfilter 0 1 60 327
////////////////////////////////////////////////////////////////////
//     Function: DynamicTextFont::get_minfilter
//       Access: Published
//  Description: Returns the filter type used when minimizing the
//               textures created for this font.
////////////////////////////////////////////////////////////////////
75
inline SamplerState::FilterType DynamicTextFont::get_minfilter(void) const;

443 13 set_magfilter 0 4 748 30 DynamicTextFont::set_magfilter 0 1 61 323
////////////////////////////////////////////////////////////////////
//     Function: DynamicTextFont::set_magfilter
//       Access: Published
//  Description: Sets the filter type used when enlarging the
//               textures created for this font.
////////////////////////////////////////////////////////////////////
76
inline void DynamicTextFont::set_magfilter(SamplerState::FilterType filter);

444 13 get_magfilter 0 4 748 30 DynamicTextFont::get_magfilter 0 1 62 326
////////////////////////////////////////////////////////////////////
//     Function: DynamicTextFont::get_magfilter
//       Access: Published
//  Description: Returns the filter type used when enlarging the
//               textures created for this font.
////////////////////////////////////////////////////////////////////
75
inline SamplerState::FilterType DynamicTextFont::get_magfilter(void) const;

445 22 set_anisotropic_degree 0 4 748 39 DynamicTextFont::set_anisotropic_degree 0 1 63 482
////////////////////////////////////////////////////////////////////
//     Function: DynamicTextFont::set_anisotropic_degree
//       Access: Published
//  Description: Enables or disables anisotropic filtering on the
//               textures created for this font.  The default value is
//               specified by the text-anisotropic-degree variable.
//               See Texture::set_anisotropic_degree().
////////////////////////////////////////////////////////////////////
76
inline void DynamicTextFont::set_anisotropic_degree(int anisotropic_degree);

446 22 get_anisotropic_degree 0 4 748 39 DynamicTextFont::get_anisotropic_degree 0 1 64 361
////////////////////////////////////////////////////////////////////
//     Function: DynamicTextFont::get_anisotropic_degree
//       Access: Published
//  Description: Returns the current anisotropic degree for textures
//               created for this font.  See set_anisotropic_degree().
////////////////////////////////////////////////////////////////////
63
inline int DynamicTextFont::get_anisotropic_degree(void) const;

447 15 set_render_mode 0 4 748 32 DynamicTextFont::set_render_mode 0 1 65 477
////////////////////////////////////////////////////////////////////
//     Function: DynamicTextFont::set_render_mode
//       Access: Published
//  Description: Specifies the way the glyphs on this particular font
//               are generated.  The default is RM_texture, which is
//               the only mode supported for bitmap fonts. Other modes
//               are possible for most modern fonts.
////////////////////////////////////////////////////////////////////
79
inline void DynamicTextFont::set_render_mode(TextFont::RenderMode render_mode);

448 15 get_render_mode 0 4 748 32 DynamicTextFont::get_render_mode 0 1 66 338
////////////////////////////////////////////////////////////////////
//     Function: DynamicTextFont::get_render_mode
//       Access: Published
//  Description: Returns the way the glyphs on this particular font
//               are generated.  See set_render_mode().
////////////////////////////////////////////////////////////////////
73
inline TextFont::RenderMode DynamicTextFont::get_render_mode(void) const;

449 17 set_winding_order 0 4 748 34 DynamicTextFont::set_winding_order 0 1 67 539
////////////////////////////////////////////////////////////////////
//     Function: DynamicTextFont::set_winding_order
//       Access: Published
//  Description: Specifies an explicitly winding order on this
//               particular font.  This is only necessary if the
//               render_mode is RM_polygon or RM_solid, and only if
//               FreeType appears to guess wrong on this font.
//               Normally, you should leave this at WO_default.
////////////////////////////////////////////////////////////////////
85
inline void DynamicTextFont::set_winding_order(TextFont::WindingOrder winding_order);

450 17 get_winding_order 0 4 748 34 DynamicTextFont::get_winding_order 0 1 68 288
////////////////////////////////////////////////////////////////////
//     Function: DynamicTextFont::get_winding_order
//       Access: Published
//  Description: Returns the winding order set via set_winding_order().
////////////////////////////////////////////////////////////////////
77
inline TextFont::WindingOrder DynamicTextFont::get_winding_order(void) const;

451 6 set_fg 0 4 748 23 DynamicTextFont::set_fg 0 1 69 832
////////////////////////////////////////////////////////////////////
//     Function: DynamicTextFont::set_fg
//       Access: Published
//  Description: Changes the color of the foreground pixels of the
//               font as they are rendered into the font texture.  The
//               default is (1, 1, 1, 1), or opaque white, which
//               allows text created with the font to be colored
//               individually.  Normally, you would not change this
//               unless you really need a particular color effect to
//               appear in the font itself.
//
//               This should only be called before any characters have
//               been requested out of the font, or immediately after
//               calling clear().
////////////////////////////////////////////////////////////////////
54
inline void DynamicTextFont::set_fg(LColor const &fg);

452 6 get_fg 0 4 748 23 DynamicTextFont::get_fg 0 1 70 369
////////////////////////////////////////////////////////////////////
//     Function: DynamicTextFont::get_fg
//       Access: Published
//  Description: Returns the color of the foreground pixels of the
//               font as they are rendered into the font texture.
//               See set_fg().
////////////////////////////////////////////////////////////////////
57
inline LColor const &DynamicTextFont::get_fg(void) const;

453 6 set_bg 0 4 748 23 DynamicTextFont::set_bg 0 1 71 1079
////////////////////////////////////////////////////////////////////
//     Function: DynamicTextFont::set_bg
//       Access: Published
//  Description: Changes the color of the background pixels of the
//               font as they are rendered into the font texture.  The
//               default is (1, 1, 1, 0), or transparent white, which
//               allows text created with the font to be colored
//               individually.  (Note that it should not generally be
//               (0, 0, 0, 0), which would tend to bleed into the
//               foreground color, unless you have also specified a
//               outline color of (0, 0, 0, 1)) .
//
//               Normally, you would not change this unless you really
//               need a particular color effect to appear in the font
//               itself.
//
//               This should only be called before any characters have
//               been requested out of the font, or immediately after
//               calling clear().
////////////////////////////////////////////////////////////////////
54
inline void DynamicTextFont::set_bg(LColor const &bg);

454 6 get_bg 0 4 748 23 DynamicTextFont::get_bg 0 1 72 369
////////////////////////////////////////////////////////////////////
//     Function: DynamicTextFont::get_bg
//       Access: Published
//  Description: Returns the color of the background pixels of the
//               font as they are rendered into the font texture.
//               See set_bg().
////////////////////////////////////////////////////////////////////
57
inline LColor const &DynamicTextFont::get_bg(void) const;

455 11 set_outline 0 4 748 28 DynamicTextFont::set_outline 0 1 73 1150
////////////////////////////////////////////////////////////////////
//     Function: DynamicTextFont::set_outline
//       Access: Published
//  Description: Sets up the font to have an outline around each font
//               letter.  This is achieved via a Gaussian post-process
//               as each letter is generated; there is some runtime
//               cost for this effect, but it is minimal as each
//               letter is normally generated only once and then
//               cached.
//
//               The color is the desired color of the outline, width
//               is the number of points beyond the letter that the
//               outline extends (a typical font is 10 points high),
//               and feather is a number in the range 0.0 .. 1.0 that
//               controls the softness of the outline.  Set the width
//               to 0.0 to disable the outline.
//
//               This should only be called before any characters have
//               been requested out of the font, or immediately after
//               calling clear().
////////////////////////////////////////////////////////////////////
126
inline void DynamicTextFont::set_outline(LColor const &outline_color, PN_stdfloat outline_width, PN_stdfloat outline_feather);

456 17 get_outline_color 0 4 748 34 DynamicTextFont::get_outline_color 0 1 74 382
////////////////////////////////////////////////////////////////////
//     Function: DynamicTextFont::get_outline_color
//       Access: Published
//  Description: Returns the color of the outline pixels of the
//               font as they are rendered into the font texture.
//               See set_outline().
////////////////////////////////////////////////////////////////////
68
inline LColor const &DynamicTextFont::get_outline_color(void) const;

457 17 get_outline_width 0 4 748 34 DynamicTextFont::get_outline_width 0 1 75 383
////////////////////////////////////////////////////////////////////
//     Function: DynamicTextFont::get_outline_width
//       Access: Published
//  Description: Returns the width of the outline pixels of the
//               font, as the number of points beyond each letter.
//               See set_outline().
////////////////////////////////////////////////////////////////////
66
inline PN_stdfloat DynamicTextFont::get_outline_width(void) const;

458 19 get_outline_feather 0 4 748 36 DynamicTextFont::get_outline_feather 0 1 76 380
////////////////////////////////////////////////////////////////////
//     Function: DynamicTextFont::get_outline_feather
//       Access: Published
//  Description: Returns the softness of the outline pixels of the
//               font, as a value in the range 0.0 to 1.0.
//               See set_outline().
////////////////////////////////////////////////////////////////////
68
inline PN_stdfloat DynamicTextFont::get_outline_feather(void) const;

459 14 get_tex_format 0 4 748 31 DynamicTextFont::get_tex_format 0 1 77 389
////////////////////////////////////////////////////////////////////
//     Function: DynamicTextFont::get_tex_format
//       Access: Published
//  Description: Returns the texture format used to render the
//               individual pages.  This is set automatically
//               according to the colors selected.
////////////////////////////////////////////////////////////////////
67
inline Texture::Format DynamicTextFont::get_tex_format(void) const;

460 13 get_num_pages 0 4 748 30 DynamicTextFont::get_num_pages 0 1 78 607
////////////////////////////////////////////////////////////////////
//     Function: DynamicTextFont::get_num_pages
//       Access: Published
//  Description: Returns the number of pages associated with the font.
//               Initially, the font has zero pages; when the first
//               piece of text is rendered with the font, it will add
//               additional pages as needed.  Each page is a Texture
//               object that contains the images for each of the
//               glyphs currently in use somewhere.
////////////////////////////////////////////////////////////////////
47
int DynamicTextFont::get_num_pages(void) const;

461 8 get_page 0 4 748 25 DynamicTextFont::get_page 0 1 79 595
////////////////////////////////////////////////////////////////////
//     Function: DynamicTextFont::get_page
//       Access: Published
//  Description: Returns the nth page associated with the font.
//               Initially, the font has zero pages; when the first
//               piece of text is rendered with the font, it will add
//               additional pages as needed.  Each page is a Texture
//               object that contains the images for each of the
//               glyphs currently in use somewhere.
////////////////////////////////////////////////////////////////////
56
DynamicTextPage *DynamicTextFont::get_page(int n) const;

462 15 garbage_collect 0 4 748 32 DynamicTextFont::garbage_collect 0 1 80 388
////////////////////////////////////////////////////////////////////
//     Function: DynamicTextFont::garbage_collect
//       Access: Published
//  Description: Removes all of the glyphs from the font that are no
//               longer being used by any Geoms.  Returns the number
//               of glyphs removed.
////////////////////////////////////////////////////////////////////
43
int DynamicTextFont::garbage_collect(void);

463 5 clear 0 4 748 22 DynamicTextFont::clear 0 1 81 699
////////////////////////////////////////////////////////////////////
//     Function: DynamicTextFont::clear
//       Access: Published
//  Description: Drops all the glyphs out of the cache and frees any
//               association with any previously-generated pages.
//
//               Calling this frequently can result in wasted texture
//               memory, as any previously rendered text will still
//               keep a pointer to the old, previously-generated
//               pages.  As long as the previously rendered text
//               remains around, the old pages will also remain
//               around.
////////////////////////////////////////////////////////////////////
34
void DynamicTextFont::clear(void);

464 5 write 0 6 748 22 DynamicTextFont::write 0 1 82 230
////////////////////////////////////////////////////////////////////
//     Function: DynamicTextFont::write
//       Access: Published, Virtual
//  Description:
////////////////////////////////////////////////////////////////////
74
virtual void DynamicTextFont::write(ostream &out, int indent_level) const;

465 14 get_class_type 0 4 748 31 DynamicTextFont::get_class_type 0 1 83 0
56
static TypeHandle DynamicTextFont::get_class_type(void);

466 8 has_font 0 4 750 18 FontPool::has_font 0 1 88 303
////////////////////////////////////////////////////////////////////
//     Function: FontPool::has_font
//       Access: Public, Static
//  Description: Returns true if the font has ever been loaded,
//               false otherwise.
////////////////////////////////////////////////////////////////////
62
static inline bool FontPool::has_font(string const &filename);

467 11 verify_font 0 4 750 21 FontPool::verify_font 0 1 89 590
////////////////////////////////////////////////////////////////////
//     Function: FontPool::verify_font
//       Access: Public, Static
//  Description: Loads the given filename up into a font, if it has
//               not already been loaded, and returns true to indicate
//               success, or false to indicate failure.  If this
//               returns true, it is guaranteed that a subsequent call
//               to load_font() with the same font name will
//               return a valid Font pointer.
////////////////////////////////////////////////////////////////////
65
static inline bool FontPool::verify_font(string const &filename);

468 9 load_font 0 4 750 19 FontPool::load_font 0 1 90 524
////////////////////////////////////////////////////////////////////
//     Function: FontPool::load_font
//       Access: Public, Static
//  Description: Loads the given filename up into a font, if it has
//               not already been loaded, and returns the new font.
//               If a font with the same filename was previously
//               loaded, returns that one instead.  If the font
//               file cannot be found, returns NULL.
////////////////////////////////////////////////////////////////////
68
static inline TextFont *FontPool::load_font(string const &filename);

469 8 add_font 0 4 750 18 FontPool::add_font 0 1 91 422
////////////////////////////////////////////////////////////////////
//     Function: FontPool::add_font
//       Access: Public, Static
//  Description: Adds the indicated already-loaded font to the
//               pool.  The font will always replace any
//               previously-loaded font in the pool that had the
//               same filename.
////////////////////////////////////////////////////////////////////
78
static inline void FontPool::add_font(string const &filename, TextFont *font);

470 12 release_font 0 4 750 22 FontPool::release_font 0 1 92 537
////////////////////////////////////////////////////////////////////
//     Function: FontPool::release_font
//       Access: Public, Static
//  Description: Removes the indicated font from the pool,
//               indicating it will never be loaded again; the font
//               may then be freed.  If this function is never called,
//               a reference count will be maintained on every font
//               every loaded, and fonts will never be freed.
////////////////////////////////////////////////////////////////////
66
static inline void FontPool::release_font(string const &filename);

471 17 release_all_fonts 0 4 750 27 FontPool::release_all_fonts 0 1 93 321
////////////////////////////////////////////////////////////////////
//     Function: FontPool::release_all_fonts
//       Access: Public, Static
//  Description: Releases all fonts in the pool and restores the
//               pool to the empty state.
////////////////////////////////////////////////////////////////////
53
static inline void FontPool::release_all_fonts(void);

472 15 garbage_collect 0 4 750 25 FontPool::garbage_collect 0 1 94 465
////////////////////////////////////////////////////////////////////
//     Function: FontPool::garbage_collect
//       Access: Public, Static
//  Description: Releases only those fonts in the pool that have a
//               reference count of exactly 1; i.e. only those
//               fonts that are not being used outside of the pool.
//               Returns the number of fonts released.
////////////////////////////////////////////////////////////////////
50
static inline int FontPool::garbage_collect(void);

473 13 list_contents 0 4 750 23 FontPool::list_contents 0 1 95 312
////////////////////////////////////////////////////////////////////
//     Function: FontPool::list_contents
//       Access: Public, Static
//  Description: Lists the contents of the font pool to the
//               indicated output stream.
////////////////////////////////////////////////////////////////////
57
static inline void FontPool::list_contents(ostream &out);

474 5 write 0 4 750 15 FontPool::write 0 1 96 307
////////////////////////////////////////////////////////////////////
//     Function: FontPool::write
//       Access: Published, Static
//  Description: Lists the contents of the font pool to the
//               indicated output stream.
////////////////////////////////////////////////////////////////////
42
static void FontPool::write(ostream &out);

475 9 ~FontPool 0 4 750 19 FontPool::~FontPool 0 0 0
26
FontPool::~FontPool(void);

476 14 get_class_type 0 4 751 29 GeomTextGlyph::get_class_type 0 1 97 0
54
static TypeHandle GeomTextGlyph::get_class_type(void);

477 14 StaticTextFont 0 4 753 30 StaticTextFont::StaticTextFont 0 1 98 680
////////////////////////////////////////////////////////////////////
//     Function: StaticTextFont::Constructor
//       Access: Published
//  Description: The constructor expects the root node to a model
//               generated via egg-mkfont, which consists of a set of
//               models, one per each character in the font.
//
//               If a CoordinateSystem value is specified, it informs
//               the font of the coordinate system in which this model
//               was generated.  "up" in this coordinate system will
//               be the direction of the top of the letters.
////////////////////////////////////////////////////////////////////
88
StaticTextFont::StaticTextFont(PandaNode *font_def, CoordinateSystem cs = ::CS_default);

478 14 get_class_type 0 4 753 30 StaticTextFont::get_class_type 0 1 99 0
55
static TypeHandle StaticTextFont::get_class_type(void);

479 15 ~StaticTextFont 0 4 753 31 StaticTextFont::~StaticTextFont 0 0 0
38
StaticTextFont::~StaticTextFont(void);

480 14 TextProperties 0 4 754 30 TextProperties::TextProperties 0 2 100 101 459
////////////////////////////////////////////////////////////////////
//     Function: TextProperties::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: TextProperties::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
97
TextProperties::TextProperties(void);
TextProperties::TextProperties(TextProperties const &copy);

481 10 operator = 0 4 754 26 TextProperties::operator = 0 1 102 0
60
void TextProperties::operator =(TextProperties const &copy);

482 11 operator == 0 4 754 27 TextProperties::operator == 0 1 103 0
68
bool TextProperties::operator ==(TextProperties const &other) const;

483 11 operator != 0 4 754 27 TextProperties::operator != 0 1 104 0
75
inline bool TextProperties::operator !=(TextProperties const &other) const;

484 5 clear 0 4 754 21 TextProperties::clear 0 1 105 377
////////////////////////////////////////////////////////////////////
//     Function: TextProperties::clear
//       Access: Published
//  Description: Unsets all properties that have been specified so
//               far, and resets the TextProperties structure to its
//               initial empty state.
////////////////////////////////////////////////////////////////////
33
void TextProperties::clear(void);

485 16 is_any_specified 0 4 754 32 TextProperties::is_any_specified 0 1 106 317
////////////////////////////////////////////////////////////////////
//     Function: TextProperties::is_any_specified
//       Access: Published
//  Description: Returns true if any properties have been specified,
//               false otherwise.
////////////////////////////////////////////////////////////////////
57
inline bool TextProperties::is_any_specified(void) const;

486 16 set_default_font 0 4 754 32 TextProperties::set_default_font 0 1 107 382
////////////////////////////////////////////////////////////////////
//     Function: TextProperties::set_default_font
//       Access: Published, Static
//  Description: Specifies the default font to be used for any
//               TextNode whose font is uninitialized or NULL.  See
//               set_font().
////////////////////////////////////////////////////////////////////
64
static inline void TextProperties::set_default_font(TextFont *);

487 16 get_default_font 0 4 754 32 TextProperties::get_default_font 0 1 108 382
////////////////////////////////////////////////////////////////////
//     Function: TextProperties::get_default_font
//       Access: Published, Static
//  Description: Specifies the default font to be used for any
//               TextNode whose font is uninitialized or NULL.  See
//               set_font().
////////////////////////////////////////////////////////////////////
63
static inline TextFont *TextProperties::get_default_font(void);

488 8 set_font 0 4 754 24 TextProperties::set_font 0 1 109 404
////////////////////////////////////////////////////////////////////
//     Function: TextProperties::set_font
//       Access: Published
//  Description: Sets the font that will be used when making text.  If
//               this is set to NULL, the default font will be used,
//               which can be set via set_default_font().
////////////////////////////////////////////////////////////////////
53
inline void TextProperties::set_font(TextFont *font);

489 10 clear_font 0 4 754 26 TextProperties::clear_font 0 1 110 264
////////////////////////////////////////////////////////////////////
//     Function: TextProperties::clear_font
//       Access: Published
//  Description: Restores the default font to the text.
////////////////////////////////////////////////////////////////////
45
inline void TextProperties::clear_font(void);

490 8 has_font 0 4 754 24 TextProperties::has_font 0 1 111 223
////////////////////////////////////////////////////////////////////
//     Function: TextProperties::has_font
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
49
inline bool TextProperties::has_font(void) const;

491 8 get_font 0 4 754 24 TextProperties::get_font 0 1 112 337
////////////////////////////////////////////////////////////////////
//     Function: TextProperties::get_font
//       Access: Published
//  Description: Returns the font currently in use, if any.  If no
//               font is in use, this returns the default font.
////////////////////////////////////////////////////////////////////
54
inline TextFont *TextProperties::get_font(void) const;

492 14 set_small_caps 0 4 754 30 TextProperties::set_small_caps 0 1 113 1137
////////////////////////////////////////////////////////////////////
//     Function: TextProperties::set_small_caps
//       Access: Published
//  Description: Sets the small_caps flag.  When this is set,
//               lowercase letters are generated as scaled-down
//               versions of their uppercase equivalents.  This is
//               particularly useful to set for fonts that do not have
//               lowercase letters.
//
//               It is also a good idea to set this for a (dynamic)
//               font that has already implemented lowercase letters
//               as scaled-down versions of their uppercase
//               equivalents, since without this flag the texture
//               memory may needlessly duplicate equivalent glyphs for
//               upper and lowercase letters.  Setting this flag
//               causes the texture memory to share the mixed-case
//               letters.
//
//               The amount by which the lowercase letters are scaled
//               is specified by set_small_caps_scale().
////////////////////////////////////////////////////////////////////
60
inline void TextProperties::set_small_caps(bool small_caps);

493 16 clear_small_caps 0 4 754 32 TextProperties::clear_small_caps 0 1 114 231
////////////////////////////////////////////////////////////////////
//     Function: TextProperties::clear_small_caps
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
51
inline void TextProperties::clear_small_caps(void);

494 14 has_small_caps 0 4 754 30 TextProperties::has_small_caps 0 1 115 229
////////////////////////////////////////////////////////////////////
//     Function: TextProperties::has_small_caps
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
55
inline bool TextProperties::has_small_caps(void) const;

495 14 get_small_caps 0 4 754 30 TextProperties::get_small_caps 0 1 116 281
////////////////////////////////////////////////////////////////////
//     Function: TextProperties::get_small_caps
//       Access: Published
//  Description: Returns the small_caps flag.  See set_small_caps().
////////////////////////////////////////////////////////////////////
55
inline bool TextProperties::get_small_caps(void) const;

496 20 set_small_caps_scale 0 4 754 36 TextProperties::set_small_caps_scale 0 1 117 481
////////////////////////////////////////////////////////////////////
//     Function: TextProperties::set_small_caps_scale
//       Access: Published
//  Description: Sets the scale factor applied to lowercase letters
//               from their uppercase equivalents, when the small_caps
//               flag is in effect.  See set_small_caps().  Normally,
//               this will be a number less than one.
////////////////////////////////////////////////////////////////////
79
inline void TextProperties::set_small_caps_scale(PN_stdfloat small_caps_scale);

497 22 clear_small_caps_scale 0 4 754 38 TextProperties::clear_small_caps_scale 0 1 118 237
////////////////////////////////////////////////////////////////////
//     Function: TextProperties::clear_small_caps_scale
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
57
inline void TextProperties::clear_small_caps_scale(void);

498 20 has_small_caps_scale 0 4 754 36 TextProperties::has_small_caps_scale 0 1 119 235
////////////////////////////////////////////////////////////////////
//     Function: TextProperties::has_small_caps_scale
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
61
inline bool TextProperties::has_small_caps_scale(void) const;

499 20 get_small_caps_scale 0 4 754 36 TextProperties::get_small_caps_scale 0 1 120 463
////////////////////////////////////////////////////////////////////
//     Function: TextProperties::get_small_caps_scale
//       Access: Published
//  Description: Returns the scale factor applied to lowercase letters
//               from their uppercase equivalents, when the small_caps
//               flag is in effect.  See set_small_caps() and
//               set_small_caps_scale().
////////////////////////////////////////////////////////////////////
68
inline PN_stdfloat TextProperties::get_small_caps_scale(void) const;

500 9 set_slant 0 4 754 25 TextProperties::set_slant 0 1 121 301
////////////////////////////////////////////////////////////////////
//     Function: TextProperties::set_slant
//       Access: Published
//  Description: Specifies the factor by which the text slants to the
//               right.
////////////////////////////////////////////////////////////////////
57
inline void TextProperties::set_slant(PN_stdfloat slant);

501 11 clear_slant 0 4 754 27 TextProperties::clear_slant 0 1 122 227
////////////////////////////////////////////////////////////////////
//     Function: TextProperties::clear_slant
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
46
inline void TextProperties::clear_slant(void);

502 9 has_slant 0 4 754 25 TextProperties::has_slant 0 1 123 224
////////////////////////////////////////////////////////////////////
//     Function: TextProperties::has_slant
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
50
inline bool TextProperties::has_slant(void) const;

503 9 get_slant 0 4 754 25 TextProperties::get_slant 0 1 124 314
////////////////////////////////////////////////////////////////////
//     Function: TextProperties::get_slant
//       Access: Published
//  Description: Returns the factor by which the text is specified to
//               slant to the right.
////////////////////////////////////////////////////////////////////
57
inline PN_stdfloat TextProperties::get_slant(void) const;

504 14 set_underscore 0 4 754 30 TextProperties::set_underscore 0 1 125 433
////////////////////////////////////////////////////////////////////
//     Function: TextProperties::set_underscore
//       Access: Published
//  Description: Sets the underscore flag.  When this is set,
//               the text is underscored with a one-pixel line the
//               same color as the text foreground, drawn at the
//               baseline.
////////////////////////////////////////////////////////////////////
60
inline void TextProperties::set_underscore(bool underscore);

505 16 clear_underscore 0 4 754 32 TextProperties::clear_underscore 0 1 126 231
////////////////////////////////////////////////////////////////////
//     Function: TextProperties::clear_underscore
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
51
inline void TextProperties::clear_underscore(void);

506 14 has_underscore 0 4 754 30 TextProperties::has_underscore 0 1 127 229
////////////////////////////////////////////////////////////////////
//     Function: TextProperties::has_underscore
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
55
inline bool TextProperties::has_underscore(void) const;

507 14 get_underscore 0 4 754 30 TextProperties::get_underscore 0 1 128 281
////////////////////////////////////////////////////////////////////
//     Function: TextProperties::get_underscore
//       Access: Published
//  Description: Returns the underscore flag.  See set_underscore().
////////////////////////////////////////////////////////////////////
55
inline bool TextProperties::get_underscore(void) const;

508 21 set_underscore_height 0 4 754 37 TextProperties::set_underscore_height 0 1 129 447
////////////////////////////////////////////////////////////////////
//     Function: TextProperties::set_underscore_height
//       Access: Published
//  Description: Specifies the vertical height of the underscore,
//               relative to the text baseline.  This only has meaning
//               if the underscore mode is enabled with
//               set_underscore().
////////////////////////////////////////////////////////////////////
81
inline void TextProperties::set_underscore_height(PN_stdfloat underscore_height);

509 23 clear_underscore_height 0 4 754 39 TextProperties::clear_underscore_height 0 1 130 239
////////////////////////////////////////////////////////////////////
//     Function: TextProperties::clear_underscore_height
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
58
inline void TextProperties::clear_underscore_height(void);

510 21 has_underscore_height 0 4 754 37 TextProperties::has_underscore_height 0 1 131 236
////////////////////////////////////////////////////////////////////
//     Function: TextProperties::has_underscore_height
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
62
inline bool TextProperties::has_underscore_height(void) const;

511 21 get_underscore_height 0 4 754 37 TextProperties::get_underscore_height 0 1 132 329
////////////////////////////////////////////////////////////////////
//     Function: TextProperties::get_underscore_height
//       Access: Published
//  Description: Returns the vertical height of the underscore; see
//               set_underscore_height().
////////////////////////////////////////////////////////////////////
69
inline PN_stdfloat TextProperties::get_underscore_height(void) const;

512 9 set_align 0 4 754 25 TextProperties::set_align 0 1 133 297
////////////////////////////////////////////////////////////////////
//     Function: TextProperties::set_align
//       Access: Published
//  Description: Specifies the alignment of the text within its
//               margins.
////////////////////////////////////////////////////////////////////
76
inline void TextProperties::set_align(TextProperties::Alignment align_type);

513 11 clear_align 0 4 754 27 TextProperties::clear_align 0 1 134 270
////////////////////////////////////////////////////////////////////
//     Function: TextProperties::clear_align
//       Access: Published
//  Description: Restores the default alignment of the text.
////////////////////////////////////////////////////////////////////
46
inline void TextProperties::clear_align(void);

514 9 has_align 0 4 754 25 TextProperties::has_align 0 1 135 224
////////////////////////////////////////////////////////////////////
//     Function: TextProperties::has_align
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
50
inline bool TextProperties::has_align(void) const;

515 9 get_align 0 4 754 25 TextProperties::get_align 0 1 136 224
////////////////////////////////////////////////////////////////////
//     Function: TextProperties::get_align
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
71
inline TextProperties::Alignment TextProperties::get_align(void) const;

516 10 set_indent 0 4 754 26 TextProperties::set_indent 0 1 137 395
////////////////////////////////////////////////////////////////////
//     Function: TextProperties::set_indent
//       Access: Published
//  Description: Specifies the amount of extra space that is inserted
//               before the first character of each line.  This can be
//               thought of as a left margin.
////////////////////////////////////////////////////////////////////
59
inline void TextProperties::set_indent(PN_stdfloat indent);

517 12 clear_indent 0 4 754 28 TextProperties::clear_indent 0 1 138 318
////////////////////////////////////////////////////////////////////
//     Function: TextProperties::clear_indent
//       Access: Published
//  Description: Removes the indent setting from the text.  Text
//               will be as wide as it is.
////////////////////////////////////////////////////////////////////
47
inline void TextProperties::clear_indent(void);

518 10 has_indent 0 4 754 26 TextProperties::has_indent 0 1 139 225
////////////////////////////////////////////////////////////////////
//     Function: TextProperties::has_indent
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
51
inline bool TextProperties::has_indent(void) const;

519 10 get_indent 0 4 754 26 TextProperties::get_indent 0 1 140 225
////////////////////////////////////////////////////////////////////
//     Function: TextProperties::get_indent
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
58
inline PN_stdfloat TextProperties::get_indent(void) const;

520 12 set_wordwrap 0 4 754 28 TextProperties::set_wordwrap 0 1 141 400
////////////////////////////////////////////////////////////////////
//     Function: TextProperties::set_wordwrap
//       Access: Published
//  Description: Sets the text up to automatically wordwrap when it
//               exceeds the indicated width.  This can be thought of
//               as a right margin or margin width.
////////////////////////////////////////////////////////////////////
63
inline void TextProperties::set_wordwrap(PN_stdfloat wordwrap);

521 14 clear_wordwrap 0 4 754 30 TextProperties::clear_wordwrap 0 1 142 322
////////////////////////////////////////////////////////////////////
//     Function: TextProperties::clear_wordwrap
//       Access: Published
//  Description: Removes the wordwrap setting from the text.  Text
//               will be as wide as it is.
////////////////////////////////////////////////////////////////////
49
inline void TextProperties::clear_wordwrap(void);

522 12 has_wordwrap 0 4 754 28 TextProperties::has_wordwrap 0 1 143 227
////////////////////////////////////////////////////////////////////
//     Function: TextProperties::has_wordwrap
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
53
inline bool TextProperties::has_wordwrap(void) const;

523 12 get_wordwrap 0 4 754 28 TextProperties::get_wordwrap 0 1 144 227
////////////////////////////////////////////////////////////////////
//     Function: TextProperties::get_wordwrap
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
60
inline PN_stdfloat TextProperties::get_wordwrap(void) const;

524 32 set_preserve_trailing_whitespace 0 4 754 48 TextProperties::set_preserve_trailing_whitespace 0 1 145 671
////////////////////////////////////////////////////////////////////
//     Function: TextProperties::set_preserve_trailing_whitespace
//       Access: Published
//  Description: Sets the preserve_trailing_whitespace flag.  When
//               this is set, trailing whitespace at the end of the
//               line is not stripped when the text is wordwrapped (it
//               is stripped by default).  Since the trailing
//               whitespace is invisible, this is important primarily
//               for determining the proper width of a frame or card
//               behind the text.
////////////////////////////////////////////////////////////////////
96
inline void TextProperties::set_preserve_trailing_whitespace(bool preserve_trailing_whitespace);

525 34 clear_preserve_trailing_whitespace 0 4 754 50 TextProperties::clear_preserve_trailing_whitespace 0 1 146 249
////////////////////////////////////////////////////////////////////
//     Function: TextProperties::clear_preserve_trailing_whitespace
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
69
inline void TextProperties::clear_preserve_trailing_whitespace(void);

526 32 has_preserve_trailing_whitespace 0 4 754 48 TextProperties::has_preserve_trailing_whitespace 0 1 147 247
////////////////////////////////////////////////////////////////////
//     Function: TextProperties::has_preserve_trailing_whitespace
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
73
inline bool TextProperties::has_preserve_trailing_whitespace(void) const;

527 32 get_preserve_trailing_whitespace 0 4 754 48 TextProperties::get_preserve_trailing_whitespace 0 1 148 352
////////////////////////////////////////////////////////////////////
//     Function: TextProperties::get_preserve_trailing_whitespace
//       Access: Published
//  Description: Returns the preserve_trailing_whitespace flag.  See
//               set_preserve_trailing_whitespace().
////////////////////////////////////////////////////////////////////
73
inline bool TextProperties::get_preserve_trailing_whitespace(void) const;

528 14 set_text_color 0 4 754 30 TextProperties::set_text_color 0 2 149 150 460
////////////////////////////////////////////////////////////////////
//     Function: TextProperties::set_text_color
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: TextProperties::set_text_color
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
173
inline void TextProperties::set_text_color(PN_stdfloat r, PN_stdfloat g, PN_stdfloat b, PN_stdfloat a);
inline void TextProperties::set_text_color(LColor const &text_color);

529 16 clear_text_color 0 4 754 32 TextProperties::clear_text_color 0 1 151 352
////////////////////////////////////////////////////////////////////
//     Function: TextProperties::clear_text_color
//       Access: Published
//  Description: Removes the text color specification; the text will
//               be colored whatever it was in the source font file.
////////////////////////////////////////////////////////////////////
51
inline void TextProperties::clear_text_color(void);

530 14 has_text_color 0 4 754 30 TextProperties::has_text_color 0 1 152 229
////////////////////////////////////////////////////////////////////
//     Function: TextProperties::has_text_color
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
55
inline bool TextProperties::has_text_color(void) const;

531 14 get_text_color 0 4 754 30 TextProperties::get_text_color 0 1 153 229
////////////////////////////////////////////////////////////////////
//     Function: TextProperties::get_text_color
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
57
inline LColor TextProperties::get_text_color(void) const;

532 16 set_shadow_color 0 4 754 32 TextProperties::set_shadow_color 0 2 154 155 464
////////////////////////////////////////////////////////////////////
//     Function: TextProperties::set_shadow_color
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: TextProperties::set_shadow_color
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
179
inline void TextProperties::set_shadow_color(PN_stdfloat r, PN_stdfloat g, PN_stdfloat b, PN_stdfloat a);
inline void TextProperties::set_shadow_color(LColor const &shadow_color);

533 18 clear_shadow_color 0 4 754 34 TextProperties::clear_shadow_color 0 1 156 273
////////////////////////////////////////////////////////////////////
//     Function: TextProperties::clear_shadow_color
//       Access: Published
//  Description: Removes the shadow color specification.
////////////////////////////////////////////////////////////////////
53
inline void TextProperties::clear_shadow_color(void);

534 16 has_shadow_color 0 4 754 32 TextProperties::has_shadow_color 0 1 157 231
////////////////////////////////////////////////////////////////////
//     Function: TextProperties::has_shadow_color
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
57
inline bool TextProperties::has_shadow_color(void) const;

535 16 get_shadow_color 0 4 754 32 TextProperties::get_shadow_color 0 1 158 231
////////////////////////////////////////////////////////////////////
//     Function: TextProperties::get_shadow_color
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
59
inline LColor TextProperties::get_shadow_color(void) const;

536 10 set_shadow 0 4 754 26 TextProperties::set_shadow 0 2 159 160 796
////////////////////////////////////////////////////////////////////
//     Function: TextProperties::set_shadow
//       Access: Published
//  Description: Specifies that the text should be drawn with a
//               shadow, by creating a second copy of the text and
//               offsetting it slightly behind the first.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: TextProperties::set_shadow
//       Access: Published
//  Description: Specifies that the text should be drawn with a
//               shadow, by creating a second copy of the text and
//               offsetting it slightly behind the first.
////////////////////////////////////////////////////////////////////
153
inline void TextProperties::set_shadow(PN_stdfloat xoffset, PN_stdfloat yoffset);
inline void TextProperties::set_shadow(LVecBase2 const &shadow_offset);

537 12 clear_shadow 0 4 754 28 TextProperties::clear_shadow 0 1 161 303
////////////////////////////////////////////////////////////////////
//     Function: TextProperties::clear_shadow
//       Access: Published
//  Description: Specifies that a shadow will not be drawn behind the
//               text.
////////////////////////////////////////////////////////////////////
47
inline void TextProperties::clear_shadow(void);

538 10 has_shadow 0 4 754 26 TextProperties::has_shadow 0 1 162 225
////////////////////////////////////////////////////////////////////
//     Function: TextProperties::has_shadow
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
51
inline bool TextProperties::has_shadow(void) const;

539 10 get_shadow 0 4 754 26 TextProperties::get_shadow 0 1 163 371
////////////////////////////////////////////////////////////////////
//     Function: TextProperties::get_shadow
//       Access: Published
//  Description: Returns the offset of the shadow as set by
//               set_shadow().  It is an error to call this if
//               has_shadow() is false.
////////////////////////////////////////////////////////////////////
55
inline LVector2 TextProperties::get_shadow(void) const;

540 7 set_bin 0 4 754 23 TextProperties::set_bin 0 1 164 649
////////////////////////////////////////////////////////////////////
//     Function: TextProperties::set_bin
//       Access: Published
//  Description: Names the CullBin that the text geometry should be
//               assigned to.  If this is set, then a CullBinAttrib
//               will be created to explicitly place each component in
//               the named bin.
//
//               The draw_order value will also be passed to each
//               CullBinAttrib as appropriate; this is particularly
//               useful if this names a CullBinFixed, e.g. "fixed".
////////////////////////////////////////////////////////////////////
55
inline void TextProperties::set_bin(string const &bin);

541 9 clear_bin 0 4 754 25 TextProperties::clear_bin 0 1 165 420
////////////////////////////////////////////////////////////////////
//     Function: TextProperties::clear_bin
//       Access: Published
//  Description: Removes the effect of a previous call to
//               set_bin().  Text will be drawn in whatever bin
//               it would like to be drawn in, with no explicit
//               ordering.
////////////////////////////////////////////////////////////////////
44
inline void TextProperties::clear_bin(void);

542 7 has_bin 0 4 754 23 TextProperties::has_bin 0 1 166 324
////////////////////////////////////////////////////////////////////
//     Function: TextProperties::has_bin
//       Access: Published
//  Description: Returns true if an explicit drawing bin has been
//               set via set_bin(), false otherwise.
////////////////////////////////////////////////////////////////////
48
inline bool TextProperties::has_bin(void) const;

543 7 get_bin 0 4 754 23 TextProperties::get_bin 0 1 167 323
////////////////////////////////////////////////////////////////////
//     Function: TextProperties::get_bin
//       Access: Published
//  Description: Returns the drawing bin set with set_bin(), or empty
//               string if no bin has been set.
////////////////////////////////////////////////////////////////////
57
inline string const &TextProperties::get_bin(void) const;

544 14 set_draw_order 0 4 754 30 TextProperties::set_draw_order 0 1 168 771
////////////////////////////////////////////////////////////////////
//     Function: TextProperties::set_draw_order
//       Access: Published
//  Description: Sets the drawing order of text created by the
//               TextNode.  This is actually the draw order of the
//               card and frame.  The shadow is drawn at
//               _draw_order+1, and the text at _draw_order+2.
//
//               This affects the sorting order assigned to the nodes
//               as they are created, and also is passed to whatever
//               bin may be assigned via set_bin().
//
//               The return value is the first unused draw_order
//               number, e.g. _draw_order + 3.
////////////////////////////////////////////////////////////////////
58
inline int TextProperties::set_draw_order(int draw_order);

545 16 clear_draw_order 0 4 754 32 TextProperties::clear_draw_order 0 1 169 232
////////////////////////////////////////////////////////////////////
//     Function: TextProperties::clear_draw_order
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
51
inline void TextProperties::clear_draw_order(void);

546 14 has_draw_order 0 4 754 30 TextProperties::has_draw_order 0 1 170 229
////////////////////////////////////////////////////////////////////
//     Function: TextProperties::has_draw_order
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
55
inline bool TextProperties::has_draw_order(void) const;

547 14 get_draw_order 0 4 754 30 TextProperties::get_draw_order 0 1 171 282
////////////////////////////////////////////////////////////////////
//     Function: TextProperties::get_draw_order
//       Access: Published
//  Description: Returns the drawing order set with set_draw_order().
////////////////////////////////////////////////////////////////////
54
inline int TextProperties::get_draw_order(void) const;

548 13 set_tab_width 0 4 754 29 TextProperties::set_tab_width 0 1 172 409
////////////////////////////////////////////////////////////////////
//     Function: TextProperties::set_tab_width
//       Access: Published
//  Description: Sets the width of each tab stop, in screen units.  A
//               tab character embedded in the text will advance the
//               horizontal position to the next tab stop.
////////////////////////////////////////////////////////////////////
65
inline void TextProperties::set_tab_width(PN_stdfloat tab_width);

549 15 clear_tab_width 0 4 754 31 TextProperties::clear_tab_width 0 1 173 231
////////////////////////////////////////////////////////////////////
//     Function: TextProperties::clear_tab_width
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
50
inline void TextProperties::clear_tab_width(void);

550 13 has_tab_width 0 4 754 29 TextProperties::has_tab_width 0 1 174 228
////////////////////////////////////////////////////////////////////
//     Function: TextProperties::has_tab_width
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
54
inline bool TextProperties::has_tab_width(void) const;

551 13 get_tab_width 0 4 754 29 TextProperties::get_tab_width 0 1 175 271
////////////////////////////////////////////////////////////////////
//     Function: TextProperties::get_tab_width
//       Access: Published
//  Description: Returns the width set via set_tab_width().
////////////////////////////////////////////////////////////////////
61
inline PN_stdfloat TextProperties::get_tab_width(void) const;

552 15 set_glyph_scale 0 4 754 31 TextProperties::set_glyph_scale 0 1 176 962
////////////////////////////////////////////////////////////////////
//     Function: TextProperties::set_glyph_scale
//       Access: Published
//  Description: Specifies the factor by which to scale each letter of
//               the text as it is placed, in addition to any scales
//               inherited from the node or from set_text_scale().
//               This can be used (possibly in conjunction with
//               set_glyph_shift()) to implement superscripting or
//               subscripting.
//
//               The glyph scale is cumulative when applied to nested
//               TextProperties.  It is intended primarily for
//               implementing superscripts, not for scaling the text
//               in general.  See also set_text_scale(), which is
//               intended primarily for scaling the text in general,
//               and is not cumulative.
////////////////////////////////////////////////////////////////////
69
inline void TextProperties::set_glyph_scale(PN_stdfloat glyph_scale);

553 17 clear_glyph_scale 0 4 754 33 TextProperties::clear_glyph_scale 0 1 177 233
////////////////////////////////////////////////////////////////////
//     Function: TextProperties::clear_glyph_scale
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
52
inline void TextProperties::clear_glyph_scale(void);

554 15 has_glyph_scale 0 4 754 31 TextProperties::has_glyph_scale 0 1 178 230
////////////////////////////////////////////////////////////////////
//     Function: TextProperties::has_glyph_scale
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
56
inline bool TextProperties::has_glyph_scale(void) const;

555 15 get_glyph_scale 0 4 754 31 TextProperties::get_glyph_scale 0 1 179 322
////////////////////////////////////////////////////////////////////
//     Function: TextProperties::get_glyph_scale
//       Access: Published
//  Description: Returns the scale factor of each letter as specified
//               by set_glyph_scale().
////////////////////////////////////////////////////////////////////
63
inline PN_stdfloat TextProperties::get_glyph_scale(void) const;

556 15 set_glyph_shift 0 4 754 31 TextProperties::set_glyph_shift 0 1 180 471
////////////////////////////////////////////////////////////////////
//     Function: TextProperties::set_glyph_shift
//       Access: Published
//  Description: Specifies a vertical amount to shift each letter of
//               the text as it is placed.  This can be used (possibly
//               in conjunction with set_glyph_scale()) to implement
//               superscripting or subscripting.
////////////////////////////////////////////////////////////////////
69
inline void TextProperties::set_glyph_shift(PN_stdfloat glyph_shift);

557 17 clear_glyph_shift 0 4 754 33 TextProperties::clear_glyph_shift 0 1 181 233
////////////////////////////////////////////////////////////////////
//     Function: TextProperties::clear_glyph_shift
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
52
inline void TextProperties::clear_glyph_shift(void);

558 15 has_glyph_shift 0 4 754 31 TextProperties::has_glyph_shift 0 1 182 230
////////////////////////////////////////////////////////////////////
//     Function: TextProperties::has_glyph_shift
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
56
inline bool TextProperties::has_glyph_shift(void) const;

559 15 get_glyph_shift 0 4 754 31 TextProperties::get_glyph_shift 0 1 183 324
////////////////////////////////////////////////////////////////////
//     Function: TextProperties::get_glyph_shift
//       Access: Published
//  Description: Returns the vertical shift of each letter as
//               specified by set_glyph_shift().
////////////////////////////////////////////////////////////////////
63
inline PN_stdfloat TextProperties::get_glyph_shift(void) const;

560 14 set_text_scale 0 4 754 30 TextProperties::set_text_scale 0 1 184 580
////////////////////////////////////////////////////////////////////
//     Function: TextProperties::set_text_scale
//       Access: Published
//  Description: Specifies the factor by which to scale the text, in
//               addition to any scalings imposed by the node, as well
//               as in addition to the glyph scale.
//
//               The text scale is not cumulative when applied to
//               nested TextProperties.  See also set_glyph_scale(),
//               which is cumulative.
////////////////////////////////////////////////////////////////////
67
inline void TextProperties::set_text_scale(PN_stdfloat text_scale);

561 16 clear_text_scale 0 4 754 32 TextProperties::clear_text_scale 0 1 185 232
////////////////////////////////////////////////////////////////////
//     Function: TextProperties::clear_text_scale
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
51
inline void TextProperties::clear_text_scale(void);

562 14 has_text_scale 0 4 754 30 TextProperties::has_text_scale 0 1 186 229
////////////////////////////////////////////////////////////////////
//     Function: TextProperties::has_text_scale
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
55
inline bool TextProperties::has_text_scale(void) const;

563 14 get_text_scale 0 4 754 30 TextProperties::get_text_scale 0 1 187 317
////////////////////////////////////////////////////////////////////
//     Function: TextProperties::get_text_scale
//       Access: Published
//  Description: Returns the scale factor of the text as specified
//               by set_text_scale().
////////////////////////////////////////////////////////////////////
62
inline PN_stdfloat TextProperties::get_text_scale(void) const;

564 14 add_properties 0 4 754 30 TextProperties::add_properties 0 1 188 374
////////////////////////////////////////////////////////////////////
//     Function: TextProperties::add_properties
//       Access: Published
//  Description: Sets any properties that are explicitly specified in
//               other on this object.  Leaves other properties
//               unchanged.
////////////////////////////////////////////////////////////////////
65
void TextProperties::add_properties(TextProperties const &other);

565 5 write 0 4 754 21 TextProperties::write 0 1 189 220
////////////////////////////////////////////////////////////////////
//     Function: TextProperties::write
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
69
void TextProperties::write(ostream &out, int indent_level = 0) const;

566 14 get_class_type 0 4 754 30 TextProperties::get_class_type 0 1 190 0
55
static TypeHandle TextProperties::get_class_type(void);

567 15 ~TextProperties 0 4 754 31 TextProperties::~TextProperties 0 0 0
38
TextProperties::~TextProperties(void);

568 11 TextGraphic 0 4 756 24 TextGraphic::TextGraphic 0 3 191 192 193 673
////////////////////////////////////////////////////////////////////
//     Function: TextGraphic::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: TextGraphic::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: TextGraphic::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
248
inline TextGraphic::TextGraphic(void);
inline TextGraphic::TextGraphic(NodePath const &model, LVecBase4 const &frame);
inline TextGraphic::TextGraphic(NodePath const &model, PN_stdfloat left, PN_stdfloat right, PN_stdfloat bottom, PN_stdfloat top);

569 9 get_model 0 4 756 22 TextGraphic::get_model 0 1 194 320
////////////////////////////////////////////////////////////////////
//     Function: TextGraphic::get_model
//       Access: Published
//  Description: Returns the NodePath associated with the graphic,
//               that renders the desired image.
////////////////////////////////////////////////////////////////////
51
inline NodePath TextGraphic::get_model(void) const;

570 9 set_model 0 4 756 22 TextGraphic::set_model 0 1 195 387
////////////////////////////////////////////////////////////////////
//     Function: TextGraphic::set_model
//       Access: Published
//  Description: Changes the NodePath associated with the graphic.
//               This NodePath should contain geometry that will
//               render the desired graphic image.
////////////////////////////////////////////////////////////////////
58
inline void TextGraphic::set_model(NodePath const &model);

571 9 get_frame 0 4 756 22 TextGraphic::get_frame 0 1 196 786
////////////////////////////////////////////////////////////////////
//     Function: TextGraphic::get_frame
//       Access: Published
//  Description: Returns the frame specified for the graphic.  This is
//               the amount of space that will be reserved for the
//               graphic when it is embedded in a text paragraph, in
//               the form (left, right, bottom, top).
//
//               The actual graphic, as rendered by the NodePath
//               specified via set_model(), should more or less fit
//               within this rectangle.  It is not required to fit
//               completely within it, but if it does not, it may
//               visually overlap with nearby text.
////////////////////////////////////////////////////////////////////
52
inline LVecBase4 TextGraphic::get_frame(void) const;

572 9 set_frame 0 4 756 22 TextGraphic::set_frame 0 2 197 198 660
////////////////////////////////////////////////////////////////////
//     Function: TextGraphic::set_frame
//       Access: Published
//  Description: Specifies the (left, right, bottom, top) bounding
//               frame for the graphic.  See get_frame().
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: TextGraphic::set_frame
//       Access: Published
//  Description: Specifies the (left, right, bottom, top) bounding
//               frame for the graphic.  See get_frame().
////////////////////////////////////////////////////////////////////
169
inline void TextGraphic::set_frame(LVecBase4 const &frame);
inline void TextGraphic::set_frame(PN_stdfloat left, PN_stdfloat right, PN_stdfloat bottom, PN_stdfloat top);

573 17 get_instance_flag 0 4 756 30 TextGraphic::get_instance_flag 0 1 199 282
////////////////////////////////////////////////////////////////////
//     Function: TextGraphic::get_instance_flag
//       Access: Published
//  Description: Returns the instance_flag.  See set_instance_flag().
////////////////////////////////////////////////////////////////////
55
inline bool TextGraphic::get_instance_flag(void) const;

574 17 set_instance_flag 0 4 756 30 TextGraphic::set_instance_flag 0 1 200 664
////////////////////////////////////////////////////////////////////
//     Function: TextGraphic::set_instance_flag
//       Access: Published
//  Description: Sets the instance_flag.  When this is true, the
//               graphic is directly instanced to the scene graph
//               whenever it appears; when it is false, the graphic is
//               copied.  The default is false, which is best for most
//               applications.  You might need to set it true for
//               special kinds of "graphics" like interactive
//               elements, for instance a PGEntry.
////////////////////////////////////////////////////////////////////
63
inline void TextGraphic::set_instance_flag(bool instance_flag);

575 12 ~TextGraphic 0 4 756 25 TextGraphic::~TextGraphic 0 0 0
32
TextGraphic::~TextGraphic(void);

576 14 set_properties 0 4 757 37 TextPropertiesManager::set_properties 0 1 201 707
////////////////////////////////////////////////////////////////////
//     Function: TextPropertiesManager::set_properties
//       Access: Published
//  Description: Defines the TextProperties associated with the
//               indicated name.  When the name is subsequently
//               encountered in text embedded between \1 characters in
//               a TextNode string, the following text will be
//               rendered with these properties.
//
//               If there was already a TextProperties structure
//               associated with this name, it is quietly replaced
//               with the new definition.
////////////////////////////////////////////////////////////////////
97
void TextPropertiesManager::set_properties(string const &name, TextProperties const &properties);

577 14 get_properties 0 4 757 37 TextPropertiesManager::get_properties 0 1 202 668
////////////////////////////////////////////////////////////////////
//     Function: TextPropertiesManager::get_properties
//       Access: Published
//  Description: Returns the TextProperties associated with the
//               indicated name.  If there was not previously a
//               TextProperties associated with this name, a warning
//               is printed and then a default TextProperties
//               structure is associated with the name, and returned.
//
//               Call has_properties() instead to check whether a
//               particular name has been defined.
////////////////////////////////////////////////////////////////////
73
TextProperties TextPropertiesManager::get_properties(string const &name);

578 14 has_properties 0 4 757 37 TextPropertiesManager::has_properties 0 1 203 687
////////////////////////////////////////////////////////////////////
//     Function: TextPropertiesManager::has_properties
//       Access: Published
//  Description: Returns true if a TextProperties structure has been
//               associated with the indicated name, false otherwise.
//               Normally this means set_properties() has been called
//               with this name, but because get_properties() will
//               implicitly create a default TextProperties structure,
//               it may also mean simply that get_properties() has
//               been called with the indicated name.
////////////////////////////////////////////////////////////////////
69
bool TextPropertiesManager::has_properties(string const &name) const;

579 16 clear_properties 0 4 757 39 TextPropertiesManager::clear_properties 0 1 204 316
////////////////////////////////////////////////////////////////////
//     Function: TextPropertiesManager::clear_properties
//       Access: Published
//  Description: Removes the named TextProperties structure from the
//               manager.
////////////////////////////////////////////////////////////////////
65
void TextPropertiesManager::clear_properties(string const &name);

580 11 set_graphic 0 4 757 34 TextPropertiesManager::set_graphic 0 2 205 206 1277
////////////////////////////////////////////////////////////////////
//     Function: TextPropertiesManager::set_graphic
//       Access: Published
//  Description: Defines the TextGraphic associated with the
//               indicated name.  When the name is subsequently
//               encountered in text embedded between \5 characters in
//               a TextNode string, the specified graphic will be
//               embedded in the text at that point.
//
//               If there was already a TextGraphic structure
//               associated with this name, it is quietly replaced
//               with the new definition.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: TextPropertiesManager::set_graphic
//       Access: Published
//  Description: This flavor of set_graphic implicitly creates a frame
//               for the model using the model's actual computed
//               bounding volume, as derived from
//               NodePath::calc_tight_bounds().  Create a TextGraphic
//               object first if you want to have explicit control of
//               the frame.
////////////////////////////////////////////////////////////////////
172
void TextPropertiesManager::set_graphic(string const &name, TextGraphic const &graphic);
void TextPropertiesManager::set_graphic(string const &name, NodePath const &model);

581 11 get_graphic 0 4 757 34 TextPropertiesManager::get_graphic 0 1 207 653
////////////////////////////////////////////////////////////////////
//     Function: TextPropertiesManager::get_graphic
//       Access: Published
//  Description: Returns the TextGraphic associated with the
//               indicated name.  If there was not previously a
//               TextGraphic associated with this name, a warning
//               is printed and then a default TextGraphic
//               structure is associated with the name, and returned.
//
//               Call has_graphic() instead to check whether a
//               particular name has been defined.
////////////////////////////////////////////////////////////////////
67
TextGraphic TextPropertiesManager::get_graphic(string const &name);

582 11 has_graphic 0 4 757 34 TextPropertiesManager::has_graphic 0 1 208 669
////////////////////////////////////////////////////////////////////
//     Function: TextPropertiesManager::has_graphic
//       Access: Published
//  Description: Returns true if a TextGraphic structure has been
//               associated with the indicated name, false otherwise.
//               Normally this means set_graphic() has been called
//               with this name, but because get_graphic() will
//               implicitly create a default TextGraphic structure,
//               it may also mean simply that get_graphic() has
//               been called with the indicated name.
////////////////////////////////////////////////////////////////////
66
bool TextPropertiesManager::has_graphic(string const &name) const;

583 13 clear_graphic 0 4 757 36 TextPropertiesManager::clear_graphic 0 1 209 310
////////////////////////////////////////////////////////////////////
//     Function: TextPropertiesManager::clear_graphic
//       Access: Published
//  Description: Removes the named TextGraphic structure from the
//               manager.
////////////////////////////////////////////////////////////////////
62
void TextPropertiesManager::clear_graphic(string const &name);

584 5 write 0 4 757 28 TextPropertiesManager::write 0 1 210 228
////////////////////////////////////////////////////////////////////
//     Function: TextPropertiesManager::write
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
76
void TextPropertiesManager::write(ostream &out, int indent_level = 0) const;

585 14 get_global_ptr 0 4 757 37 TextPropertiesManager::get_global_ptr 0 1 211 325
////////////////////////////////////////////////////////////////////
//     Function: TextPropertiesManager::get_global_ptr
//       Access: Published, Static
//  Description: Returns the pointer to the global TextPropertiesManager
//               object.
////////////////////////////////////////////////////////////////////
74
static TextPropertiesManager *TextPropertiesManager::get_global_ptr(void);

586 13 TextAssembler 0 4 758 28 TextAssembler::TextAssembler 0 2 212 213 459
////////////////////////////////////////////////////////////////////
//     Function: TextAssembler::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: TextAssembler::Copy Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
108
TextAssembler::TextAssembler(TextEncoder *encoder);
TextAssembler::TextAssembler(TextAssembler const &copy);

587 10 operator = 0 4 758 25 TextAssembler::operator = 0 1 214 0
58
void TextAssembler::operator =(TextAssembler const &copy);

588 14 ~TextAssembler 0 4 758 29 TextAssembler::~TextAssembler 0 0 225
////////////////////////////////////////////////////////////////////
//     Function: TextAssembler::Destructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
36
TextAssembler::~TextAssembler(void);

589 5 clear 0 4 758 20 TextAssembler::clear 0 1 215 268
////////////////////////////////////////////////////////////////////
//     Function: TextAssembler::clear
//       Access: Published
//  Description: Reinitializes the contents of the TextAssembler.
////////////////////////////////////////////////////////////////////
32
void TextAssembler::clear(void);

590 14 set_usage_hint 0 4 758 29 TextAssembler::set_usage_hint 0 1 216 572
////////////////////////////////////////////////////////////////////
//     Function: TextAssembler::set_usage_hint
//       Access: Published
//  Description: Specifies the UsageHint that will be applied to
//               generated geometry.  The default is UH_static, which
//               is probably the right setting, but if you know the
//               TextNode's geometry will have a short lifespan, it
//               may be better to set it to UH_stream.  See
//               geomEnums.h.
////////////////////////////////////////////////////////////////////
75
inline void TextAssembler::set_usage_hint(GeomEnums::UsageHint usage_hint);

591 14 get_usage_hint 0 4 758 29 TextAssembler::get_usage_hint 0 1 217 334
////////////////////////////////////////////////////////////////////
//     Function: TextAssembler::get_usage_hint
//       Access: Published
//  Description: Returns the UsageHint that will be applied to
//               generated geometry.  See set_usage_hint().
////////////////////////////////////////////////////////////////////
70
inline GeomEnums::UsageHint TextAssembler::get_usage_hint(void) const;

592 12 set_max_rows 0 4 758 27 TextAssembler::set_max_rows 0 1 218 557
////////////////////////////////////////////////////////////////////
//     Function: TextAssembler::set_max_rows
//       Access: Published
//  Description: If max_rows is greater than zero, no more than
//               max_rows will be accepted.  Text beyond that will be
//               truncated.
//
//               Setting this will not truncate text immediately.  You
//               must follow this up with a call to set_wtext() to
//               truncate the existing text.
////////////////////////////////////////////////////////////////////
54
inline void TextAssembler::set_max_rows(int max_rows);

593 12 get_max_rows 0 4 758 27 TextAssembler::get_max_rows 0 1 219 371
////////////////////////////////////////////////////////////////////
//     Function: TextAssembler::get_max_rows
//       Access: Published
//  Description: If max_rows is greater than zero, no more than
//               max_rows will be accepted.  Text beyond that will be
//               truncated.
////////////////////////////////////////////////////////////////////
51
inline int TextAssembler::get_max_rows(void) const;

594 17 set_dynamic_merge 0 4 758 32 TextAssembler::set_dynamic_merge 0 1 220 313
////////////////////////////////////////////////////////////////////
//     Function: TextAssembler::set_dynamic_merge
//       Access: Published
//  Description: Sets the dynamic_merge flag.  See
//               TextNode::set_flatten_flags().
////////////////////////////////////////////////////////////////////
65
inline void TextAssembler::set_dynamic_merge(bool dynamic_merge);

595 17 get_dynamic_merge 0 4 758 32 TextAssembler::get_dynamic_merge 0 1 221 316
////////////////////////////////////////////////////////////////////
//     Function: TextAssembler::get_dynamic_merge
//       Access: Published
//  Description: Returns the dynamic_merge flag.  See
//               TextNode::set_flatten_flags().
////////////////////////////////////////////////////////////////////
57
inline bool TextAssembler::get_dynamic_merge(void) const;

596 18 set_multiline_mode 0 4 758 33 TextAssembler::set_multiline_mode 0 1 222 346
////////////////////////////////////////////////////////////////////
//     Function: TextAssembler::set_multiline_mode
//       Access: Published
//  Description: Sets the multiline mode flag. Set the multiline
//               mode to allow text to wrap. It defaults to true.
////////////////////////////////////////////////////////////////////
57
inline void TextAssembler::set_multiline_mode(bool flag);

597 18 get_multiline_mode 0 4 758 33 TextAssembler::get_multiline_mode 0 1 223 318
////////////////////////////////////////////////////////////////////
//     Function: TextAssembler::get_multiline_mode
//       Access: Published
//  Description: Returns the multline_mode flag.  See
//               TextNode::set_multiline_mode().
////////////////////////////////////////////////////////////////////
58
inline bool TextAssembler::get_multiline_mode(void) const;

598 14 set_properties 0 4 758 29 TextAssembler::set_properties 0 1 224 384
////////////////////////////////////////////////////////////////////
//     Function: TextAssembler::set_properties
//       Access: Published
//  Description: Specifies the default TextProperties that are applied
//               to the text in the absence of any nested property
//               change sequences.
////////////////////////////////////////////////////////////////////
76
inline void TextAssembler::set_properties(TextProperties const &properties);

599 14 get_properties 0 4 758 29 TextAssembler::get_properties 0 3 225 226 227 1102
////////////////////////////////////////////////////////////////////
//     Function: TextAssembler::get_properties
//       Access: Published
//  Description: Returns the default TextProperties that are applied
//               to the text in the absence of any nested property
//               change sequences.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: TextAssembler::get_properties
//       Access: Published
//  Description: Returns the TextProperties in effect for the object
//               at the indicated position in the pre-wordwrapped
//               string.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: TextAssembler::get_properties
//       Access: Published
//  Description: Returns the TextProperties in effect for the object
//               at the indicated position in the indicated row.
////////////////////////////////////////////////////////////////////
224
inline TextProperties const &TextAssembler::get_properties(void) const;
inline TextProperties const &TextAssembler::get_properties(int n) const;
inline TextProperties const &TextAssembler::get_properties(int r, int c) const;

600 9 set_wtext 0 4 758 24 TextAssembler::set_wtext 0 1 228 629
////////////////////////////////////////////////////////////////////
//     Function: TextAssembler::set_wtext
//       Access: Published
//  Description: Accepts a new text string and associated properties
//               structure, and precomputes the wordwrapping layout
//               appropriately.  After this call,
//               get_wordwrapped_wtext() and get_num_rows() can be
//               called.
//
//               The return value is true if all the text is accepted,
//               or false if some was truncated (see set_max_rows()).
////////////////////////////////////////////////////////////////////
52
bool TextAssembler::set_wtext(wstring const &wtext);

601 11 set_wsubstr 0 4 758 26 TextAssembler::set_wsubstr 0 1 229 956
////////////////////////////////////////////////////////////////////
//     Function: TextAssembler::set_wsubstr
//       Access: Published
//  Description: Replaces the 'count' characters from 'start' of the
//               current text with the indicated replacement text.  If
//               the replacement text does not have count characters,
//               the length of the string will be changed accordingly.
//
//               The substring may include nested formatting
//               characters, but they must be self-contained and
//               self-closed.  The formatting characters are not
//               literally saved in the internal string; they are
//               parsed at the time of the set_wsubstr() call.
//
//               The return value is true if all the text is accepted,
//               or false if some was truncated (see set_max_rows()).
////////////////////////////////////////////////////////////////////
76
bool TextAssembler::set_wsubstr(wstring const &wtext, int start, int count);

602 15 get_plain_wtext 0 4 758 30 TextAssembler::get_plain_wtext 0 1 230 702
////////////////////////////////////////////////////////////////////
//     Function: TextAssembler::get_plain_wtext
//       Access: Published
//  Description: Returns a wstring that represents the contents of the
//               text, without any embedded properties characters.  If
//               there is an embedded graphic object, a zero value is
//               inserted in that position.
//
//               This string has the same length as
//               get_num_characters(), and the characters in this
//               string correspond one-to-one with the characters
//               returned by get_character(n).
////////////////////////////////////////////////////////////////////
51
wstring TextAssembler::get_plain_wtext(void) const;

603 27 get_wordwrapped_plain_wtext 0 4 758 42 TextAssembler::get_wordwrapped_plain_wtext 0 1 231 837
////////////////////////////////////////////////////////////////////
//     Function: TextAssembler::get_wordwrapped_plain_wtext
//       Access: Published
//  Description: Returns a wstring that represents the contents of the
//               text, with newlines inserted according to the
//               wordwrapping.  The string will contain no embedded
//               properties characters.  If there is an embedded
//               graphic object, a zero value is inserted in that
//               position.
//
//               This string has the same number of newline characters
//               as get_num_rows(), and the characters in this string
//               correspond one-to-one with the characters returned by
//               get_character(r, c).
////////////////////////////////////////////////////////////////////
63
wstring TextAssembler::get_wordwrapped_plain_wtext(void) const;

604 9 get_wtext 0 4 758 24 TextAssembler::get_wtext 0 1 232 547
////////////////////////////////////////////////////////////////////
//     Function: TextAssembler::get_wtext
//       Access: Published
//  Description: Returns a wstring that represents the contents of the
//               text.
//
//               The string will contain embedded properties
//               characters, which may not exactly match the embedded
//               properties characters of the original string, but it
//               will encode the same way.
////////////////////////////////////////////////////////////////////
45
wstring TextAssembler::get_wtext(void) const;

605 21 get_wordwrapped_wtext 0 4 758 36 TextAssembler::get_wordwrapped_wtext 0 1 233 1004
////////////////////////////////////////////////////////////////////
//     Function: TextAssembler::get_wordwrapped_wtext
//       Access: Published
//  Description: Returns a wstring that represents the contents of the
//               text, with newlines inserted according to the
//               wordwrapping.
//
//               The string will contain embedded properties
//               characters, which may not exactly match the embedded
//               properties characters of the original string, but it
//               will encode the same way.
//
//               Embedded properties characters will be closed before
//               every newline, then reopened (if necessary) on the
//               subsequent character following the newline.  This
//               means it will be safe to divide the text up at the
//               newline characters and treat each line as an
//               independent piece.
////////////////////////////////////////////////////////////////////
57
wstring TextAssembler::get_wordwrapped_wtext(void) const;

606 8 calc_r_c 0 4 758 23 TextAssembler::calc_r_c 0 0 715
////////////////////////////////////////////////////////////////////
//     Function: TextAssembler::calc_r_c
//       Access: Published
//  Description: Computes the row and column index of the nth
//               character or graphic object in the text.  Fills r and
//               c accordingly.
//
//               Returns true if the nth character is valid and has a
//               corresponding r and c position, false otherwise (for
//               instance, a soft-hyphen character, or a newline
//               character, may not have a corresponding position).
//               In either case, r and c will be filled in sensibly.
////////////////////////////////////////////////////////////////////
58
bool TextAssembler::calc_r_c(int &r, int &c, int n) const;

607 6 calc_r 0 4 758 21 TextAssembler::calc_r 0 1 234 630
////////////////////////////////////////////////////////////////////
//     Function: TextAssembler::calc_r
//       Access: Published
//  Description: Computes the row index of the nth character or
//               graphic object in the text and returns it.
//
//               If the nth character is not a normal printable
//               character with a position in the wordwrapped string,
//               returns -1 (for instance, a soft-hyphen character, or
//               a newline character, may not have a corresponding
//               position).
////////////////////////////////////////////////////////////////////
46
inline int TextAssembler::calc_r(int n) const;

608 6 calc_c 0 4 758 21 TextAssembler::calc_c 0 1 235 633
////////////////////////////////////////////////////////////////////
//     Function: TextAssembler::calc_c
//       Access: Published
//  Description: Computes the column index of the nth character or
//               graphic object in the text and returns it.
//
//               If the nth character is not a normal printable
//               character with a position in the wordwrapped string,
//               returns -1 (for instance, a soft-hyphen character, or
//               a newline character, may not have a corresponding
//               position).
////////////////////////////////////////////////////////////////////
46
inline int TextAssembler::calc_c(int n) const;

609 10 calc_index 0 4 758 25 TextAssembler::calc_index 0 1 236 586
////////////////////////////////////////////////////////////////////
//     Function: TextAssembler::calc_index
//       Access: Published
//  Description: Computes the character index of the character at the
//               rth row and cth column position.  This is the inverse
//               of calc_r_c().
//
//               It is legal for c to exceed the index number of the
//               last column by 1, and it is legal for r to exceed the
//               index number of the last row by 1, if c is 0.
////////////////////////////////////////////////////////////////////
50
int TextAssembler::calc_index(int r, int c) const;

610 18 get_num_characters 0 4 758 33 TextAssembler::get_num_characters 0 1 237 312
////////////////////////////////////////////////////////////////////
//     Function: TextAssembler::get_num_characters
//       Access: Published
//  Description: Returns the number of characters of text, before
//               wordwrapping.
////////////////////////////////////////////////////////////////////
57
inline int TextAssembler::get_num_characters(void) const;

611 13 get_character 0 4 758 28 TextAssembler::get_character 0 2 238 239 864
////////////////////////////////////////////////////////////////////
//     Function: TextAssembler::get_character
//       Access: Published
//  Description: Returns the character at the indicated position in
//               the pre-wordwrapped string.  If the object at this
//               position is a graphic object instead of a character,
//               returns 0.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: TextAssembler::get_character
//       Access: Published
//  Description: Returns the character at the indicated position in
//               the indicated row.  If the object at this position is
//               a graphic object instead of a character, returns 0.
////////////////////////////////////////////////////////////////////
122
inline wchar_t TextAssembler::get_character(int n) const;
inline wchar_t TextAssembler::get_character(int r, int c) const;

612 11 get_graphic 0 4 758 26 TextAssembler::get_graphic 0 2 240 241 893
////////////////////////////////////////////////////////////////////
//     Function: TextAssembler::get_graphic
//       Access: Published
//  Description: Returns the graphic object at the indicated position
//               in the pre-wordwrapped string.  If the object at this
//               position is a character instead of a graphic object,
//               returns NULL.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: TextAssembler::get_graphic
//       Access: Published
//  Description: Returns the graphic object at the indicated position
//               in the indicated row.  If the object at this position
//               is a character instead of a graphic object, returns
//               NULL.
////////////////////////////////////////////////////////////////////
140
inline TextGraphic const *TextAssembler::get_graphic(int n) const;
inline TextGraphic const *TextAssembler::get_graphic(int r, int c) const;

613 9 get_width 0 4 758 24 TextAssembler::get_width 0 2 242 243 677
////////////////////////////////////////////////////////////////////
//     Function: TextAssembler::get_width
//       Access: Published
//  Description: Returns the width of the character or object at the
//               indicated position in the pre-wordwrapped string.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: TextAssembler::get_width
//       Access: Published
//  Description: Returns the width of the character or object at the
//               indicated position in the indicated row.
////////////////////////////////////////////////////////////////////
122
inline PN_stdfloat TextAssembler::get_width(int n) const;
inline PN_stdfloat TextAssembler::get_width(int r, int c) const;

614 12 get_num_rows 0 4 758 27 TextAssembler::get_num_rows 0 1 244 327
////////////////////////////////////////////////////////////////////
//     Function: TextAssembler::get_num_rows
//       Access: Published
//  Description: Returns the number of rows of text after it has all
//               been wordwrapped and assembled.
////////////////////////////////////////////////////////////////////
51
inline int TextAssembler::get_num_rows(void) const;

615 12 get_num_cols 0 4 758 27 TextAssembler::get_num_cols 0 1 245 315
////////////////////////////////////////////////////////////////////
//     Function: TextAssembler::get_num_cols
//       Access: Published
//  Description: Returns the number of characters and/or graphic
//               objects in the nth row.
////////////////////////////////////////////////////////////////////
52
inline int TextAssembler::get_num_cols(int r) const;

616 8 get_xpos 0 4 758 23 TextAssembler::get_xpos 0 1 246 582
////////////////////////////////////////////////////////////////////
//     Function: TextAssembler::get_xpos
//       Access: Published
//  Description: Returns the x position of the origin of the character
//               or graphic object at the indicated position in the
//               indicated row.
//
//               It is legal for c to exceed the index number of the
//               last column by 1, and it is legal for r to exceed the
//               index number of the last row by 1, if c is 0.
////////////////////////////////////////////////////////////////////
56
PN_stdfloat TextAssembler::get_xpos(int r, int c) const;

617 8 get_ypos 0 4 758 23 TextAssembler::get_ypos 0 1 247 484
////////////////////////////////////////////////////////////////////
//     Function: TextAssembler::get_ypos
//       Access: Published
//  Description: Returns the y position of the origin of all of the
//               characters or graphic objects in the indicated row.
//
//               It is legal for r to exceed the index number of the
//               last row by 1.  The value of c is presently ignored.
////////////////////////////////////////////////////////////////////
63
inline PN_stdfloat TextAssembler::get_ypos(int r, int c) const;

618 13 assemble_text 0 4 758 28 TextAssembler::assemble_text 0 1 248 523
////////////////////////////////////////////////////////////////////
//     Function: TextAssembler::assemble_text
//       Access: Published
//  Description: Actually assembles all of the text into a GeomNode,
//               and returns the node (or possibly a parent of the
//               node, to keep the shadow separate).  Once this has
//               been called, you may query the extents of the text
//               via get_ul(), get_lr().
////////////////////////////////////////////////////////////////////
58
PointerTo< PandaNode > TextAssembler::assemble_text(void);

619 6 get_ul 0 4 758 21 TextAssembler::get_ul 0 1 249 315
////////////////////////////////////////////////////////////////////
//     Function: TextAssembler::get_ul
//       Access: Published
//  Description: Returns the upper-left corner of the assembled text,
//               in 2-d text coordinates.
////////////////////////////////////////////////////////////////////
57
inline LVector2 const &TextAssembler::get_ul(void) const;

620 6 get_lr 0 4 758 21 TextAssembler::get_lr 0 1 250 316
////////////////////////////////////////////////////////////////////
//     Function: TextAssembler::get_lr
//       Access: Published
//  Description: Returns the lower-right corner of the assembled text,
//               in 2-d text coordinates.
////////////////////////////////////////////////////////////////////
57
inline LVector2 const &TextAssembler::get_lr(void) const;

621 10 calc_width 0 4 758 25 TextAssembler::calc_width 0 2 251 252 1093
////////////////////////////////////////////////////////////////////
//     Function: TextAssembler::calc_width
//       Access: Private, Static
//  Description: Returns the width of a single character, according to
//               its associated font.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: TextAssembler::calc_width
//       Access: Published, Static
//  Description: Returns the width of a single character, according to
//               its associated font.  This also correctly calculates
//               the width of cheesy ligatures and accented
//               characters, which may not exist in the font as such.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: TextAssembler::calc_width
//       Access: Published, Static
//  Description: Returns the width of a single TextGraphic image.
////////////////////////////////////////////////////////////////////
206
static PN_stdfloat TextAssembler::calc_width(wchar_t character, TextProperties const &properties);
static PN_stdfloat TextAssembler::calc_width(TextGraphic const *graphic, TextProperties const &properties);

622 19 has_exact_character 0 4 758 34 TextAssembler::has_exact_character 0 1 253 1045
////////////////////////////////////////////////////////////////////
//     Function: TextAssembler::has_exact_character
//       Access: Published, Static
//  Description: Returns true if the named character exists in the
//               font exactly as named, false otherwise.  Note that
//               because Panda can assemble glyphs together
//               automatically using cheesy accent marks, this is not
//               a reliable indicator of whether a suitable glyph can
//               be rendered for the character.  For that, use
//               has_character() instead.
//
//               This returns true for whitespace and Unicode
//               whitespace characters (if they exist in the font),
//               but returns false for characters that would render
//               with the "invalid glyph".  It also returns false for
//               characters that would be synthesized within Panda,
//               but see has_character().
////////////////////////////////////////////////////////////////////
100
static bool TextAssembler::has_exact_character(wchar_t character, TextProperties const &properties);

623 13 has_character 0 4 758 28 TextAssembler::has_character 0 1 254 733
////////////////////////////////////////////////////////////////////
//     Function: TextAssembler::has_character
//       Access: Published, Static
//  Description: Returns true if the named character exists in the
//               font or can be synthesized by Panda, false otherwise.
//               (Panda can synthesize some accented characters by
//               combining similar-looking glyphs from the font.)
//
//               This returns true for whitespace and Unicode
//               whitespace characters (if they exist in the font),
//               but returns false for characters that would render
//               with the "invalid glyph".
////////////////////////////////////////////////////////////////////
94
static bool TextAssembler::has_character(wchar_t character, TextProperties const &properties);

624 13 is_whitespace 0 4 758 28 TextAssembler::is_whitespace 0 1 255 1131
////////////////////////////////////////////////////////////////////
//     Function: TextAssembler::is_whitespace
//       Access: Published, Static
//  Description: Returns true if the indicated character represents
//               whitespace in the font, or false if anything visible
//               will be rendered for it.
//
//               This returns true for whitespace and Unicode
//               whitespace characters (if they exist in the font),
//               and returns false for any other characters, including
//               characters that do not exist in the font (these would
//               be rendered with the "invalid glyph", which is
//               visible).
//
//               Note that this function can be reliably used to
//               identify Unicode whitespace characters only if the
//               font has all of the whitespace characters defined.
//               It will return false for any character not in the
//               font, even if it is an official Unicode whitespace
//               character.
////////////////////////////////////////////////////////////////////
94
static bool TextAssembler::is_whitespace(wchar_t character, TextProperties const &properties);

625 19 upcast_to_PandaNode 0 12 759 29 TextNode::upcast_to_PandaNode 0 1 372 33
upcast from TextNode to PandaNode
47
PandaNode *TextNode::upcast_to_PandaNode(void);

626 20 downcast_to_TextNode 0 12 760 31 PandaNode::downcast_to_TextNode 0 1 373 35
downcast from PandaNode to TextNode
48
TextNode *PandaNode::downcast_to_TextNode(void);

627 21 upcast_to_TextEncoder 0 12 759 31 TextNode::upcast_to_TextEncoder 0 1 374 35
upcast from TextNode to TextEncoder
51
TextEncoder *TextNode::upcast_to_TextEncoder(void);

628 20 downcast_to_TextNode 0 12 761 33 TextEncoder::downcast_to_TextNode 0 1 375 37
downcast from TextEncoder to TextNode
50
TextNode *TextEncoder::downcast_to_TextNode(void);

629 24 upcast_to_TextProperties 0 12 759 34 TextNode::upcast_to_TextProperties 0 1 376 38
upcast from TextNode to TextProperties
57
TextProperties *TextNode::upcast_to_TextProperties(void);

630 20 downcast_to_TextNode 0 12 754 36 TextProperties::downcast_to_TextNode 0 1 377 40
downcast from TextProperties to TextNode
53
TextNode *TextProperties::downcast_to_TextNode(void);

631 8 TextNode 0 4 759 18 TextNode::TextNode 0 2 256 257 855
////////////////////////////////////////////////////////////////////
//     Function: TextNode::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: TextNode::Copy Constructor
//       Access: Published
//  Description: It's sort of a copy constructor: it copies the
//               indicated TextProperties, without copying a complete
//               TextNode.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: TextNode::Copy Constructor
//       Access: Published
//  Description: OK, this is a true copy constructor.
////////////////////////////////////////////////////////////////////
107
TextNode::TextNode(string const &name);
TextNode::TextNode(string const &name, TextProperties const &copy);

632 9 ~TextNode 0 6 759 19 TextNode::~TextNode 0 0 219
////////////////////////////////////////////////////////////////////
//     Function: TextNode::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
34
virtual TextNode::~TextNode(void);

633 15 get_line_height 0 4 759 25 TextNode::get_line_height 0 1 258 510
////////////////////////////////////////////////////////////////////
//     Function: TextNode::get_line_height
//       Access: Published
//  Description: Returns the number of units high each line of text
//               is.  This is based on the font.  Note that it is
//               possible for the text to include nested font change
//               commands, in which case the value of this method is
//               questionable.
////////////////////////////////////////////////////////////////////
57
inline PN_stdfloat TextNode::get_line_height(void) const;

634 12 set_max_rows 0 4 759 22 TextNode::set_max_rows 0 1 259 439
////////////////////////////////////////////////////////////////////
//     Function: TextNode::set_max_rows
//       Access: Published
//  Description: Sets the maximum number of rows that may be formatted
//               by the TextNode.  If more text than this is
//               attempted, it will be truncated and has_overflow()
//               will return true.
////////////////////////////////////////////////////////////////////
49
inline void TextNode::set_max_rows(int max_rows);

635 14 clear_max_rows 0 4 759 24 TextNode::clear_max_rows 0 1 260 323
////////////////////////////////////////////////////////////////////
//     Function: TextNode::clear_max_rows
//       Access: Published
//  Description: Resets the TextNode's default behavior of not
//               limiting the number of rows of text.
////////////////////////////////////////////////////////////////////
43
inline void TextNode::clear_max_rows(void);

636 12 has_max_rows 0 4 759 22 TextNode::has_max_rows 0 1 261 342
////////////////////////////////////////////////////////////////////
//     Function: TextNode::has_max_rows
//       Access: Published
//  Description: Returns true if a limit on the height of the TextNode
//               has been set via set_max_rows(), false otherwise.
////////////////////////////////////////////////////////////////////
47
inline bool TextNode::has_max_rows(void) const;

637 12 get_max_rows 0 4 759 22 TextNode::get_max_rows 0 1 262 315
////////////////////////////////////////////////////////////////////
//     Function: TextNode::get_max_rows
//       Access: Published
//  Description: Returns the limit on the height of the TextNode
//               specified by set_max_rows().
////////////////////////////////////////////////////////////////////
46
inline int TextNode::get_max_rows(void) const;

638 12 has_overflow 0 4 759 22 TextNode::has_overflow 0 1 263 364
////////////////////////////////////////////////////////////////////
//     Function: TextNode::has_overflow
//       Access: Published
//  Description: Returns true if the last text set on the text node
//               exceeded the max_rows constraint, or false if it all
//               fit.
////////////////////////////////////////////////////////////////////
47
inline bool TextNode::has_overflow(void) const;

639 15 set_frame_color 0 4 759 25 TextNode::set_frame_color 0 2 264 265 450
////////////////////////////////////////////////////////////////////
//     Function: TextNode::set_frame_color
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: TextNode::set_frame_color
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
164
inline void TextNode::set_frame_color(PN_stdfloat r, PN_stdfloat g, PN_stdfloat b, PN_stdfloat a);
inline void TextNode::set_frame_color(LColor const &frame_color);

640 15 get_frame_color 0 4 759 25 TextNode::get_frame_color 0 1 266 224
////////////////////////////////////////////////////////////////////
//     Function: TextNode::get_frame_color
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
52
inline LColor TextNode::get_frame_color(void) const;

641 15 set_card_border 0 4 759 25 TextNode::set_card_border 0 1 267 224
////////////////////////////////////////////////////////////////////
//     Function: TextNode::set_card_border
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
80
inline void TextNode::set_card_border(PN_stdfloat size, PN_stdfloat uv_portion);

642 17 clear_card_border 0 4 759 27 TextNode::clear_card_border 0 1 268 226
////////////////////////////////////////////////////////////////////
//     Function: TextNode::clear_card_border
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
46
inline void TextNode::clear_card_border(void);

643 20 get_card_border_size 0 4 759 30 TextNode::get_card_border_size 0 1 269 229
////////////////////////////////////////////////////////////////////
//     Function: TextNode::get_card_border_size
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
62
inline PN_stdfloat TextNode::get_card_border_size(void) const;

644 26 get_card_border_uv_portion 0 4 759 36 TextNode::get_card_border_uv_portion 0 1 270 235
////////////////////////////////////////////////////////////////////
//     Function: TextNode::get_card_border_uv_portion
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
68
inline PN_stdfloat TextNode::get_card_border_uv_portion(void) const;

645 15 has_card_border 0 4 759 25 TextNode::has_card_border 0 1 271 224
////////////////////////////////////////////////////////////////////
//     Function: TextNode::has_card_border
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
50
inline bool TextNode::has_card_border(void) const;

646 14 set_card_color 0 4 759 24 TextNode::set_card_color 0 2 272 273 448
////////////////////////////////////////////////////////////////////
//     Function: TextNode::set_card_color
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: TextNode::set_card_color
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
161
inline void TextNode::set_card_color(PN_stdfloat r, PN_stdfloat g, PN_stdfloat b, PN_stdfloat a);
inline void TextNode::set_card_color(LColor const &card_color);

647 14 get_card_color 0 4 759 24 TextNode::get_card_color 0 1 274 223
////////////////////////////////////////////////////////////////////
//     Function: TextNode::get_card_color
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
51
inline LColor TextNode::get_card_color(void) const;

648 16 set_card_texture 0 4 759 26 TextNode::set_card_texture 0 1 275 225
////////////////////////////////////////////////////////////////////
//     Function: TextNode::set_card_texture
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
62
inline void TextNode::set_card_texture(Texture *card_texture);

649 18 clear_card_texture 0 4 759 28 TextNode::clear_card_texture 0 1 276 227
////////////////////////////////////////////////////////////////////
//     Function: TextNode::clear_card_texture
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
47
inline void TextNode::clear_card_texture(void);

650 16 has_card_texture 0 4 759 26 TextNode::has_card_texture 0 1 277 225
////////////////////////////////////////////////////////////////////
//     Function: TextNode::has_card_texture
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
51
inline bool TextNode::has_card_texture(void) const;

651 16 get_card_texture 0 4 759 26 TextNode::get_card_texture 0 1 278 225
////////////////////////////////////////////////////////////////////
//     Function: TextNode::get_card_texture
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
55
inline Texture *TextNode::get_card_texture(void) const;

652 19 set_frame_as_margin 0 4 759 29 TextNode::set_frame_as_margin 0 1 279 526
////////////////////////////////////////////////////////////////////
//     Function: TextNode::set_frame_as_margin
//       Access: Published
//  Description: Specifies that a border will be drawn around the text
//               when it is next created.  The parameters are the
//               amount of additional padding to insert between the
//               frame and the text in each dimension, and all should
//               generally be positive.
////////////////////////////////////////////////////////////////////
116
inline void TextNode::set_frame_as_margin(PN_stdfloat left, PN_stdfloat right, PN_stdfloat bottom, PN_stdfloat top);

653 16 set_frame_actual 0 4 759 26 TextNode::set_frame_actual 0 1 280 599
////////////////////////////////////////////////////////////////////
//     Function: TextNode::set_frame_actual
//       Access: Published
//  Description: Similar to set_frame_as_margin, except the frame is
//               specified in actual coordinate units (relative to
//               the text's origin), irrespective of the size of the
//               text.  The left and bottom coordinates should
//               generally be negative, while the right and top
//               coordinates should generally be positive.
////////////////////////////////////////////////////////////////////
113
inline void TextNode::set_frame_actual(PN_stdfloat left, PN_stdfloat right, PN_stdfloat bottom, PN_stdfloat top);

654 11 clear_frame 0 4 759 21 TextNode::clear_frame 0 1 281 296
////////////////////////////////////////////////////////////////////
//     Function: TextNode::clear_frame
//       Access: Published
//  Description: Specifies that a border will not be drawn around the
//               text.
////////////////////////////////////////////////////////////////////
40
inline void TextNode::clear_frame(void);

655 9 has_frame 0 4 759 19 TextNode::has_frame 0 1 282 218
////////////////////////////////////////////////////////////////////
//     Function: TextNode::has_frame
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
44
inline bool TextNode::has_frame(void) const;

656 18 is_frame_as_margin 0 4 759 28 TextNode::is_frame_as_margin 0 1 283 675
////////////////////////////////////////////////////////////////////
//     Function: TextNode::is_frame_as_margin
//       Access: Published
//  Description: If this is true, the frame was set via a call to
//               set_frame_as_margin(), and the dimension of the frame
//               as returned by get_frame_as_set() represent a margin
//               all around the text.  If false, then the frame was
//               set via a call to set_frame_actual(), and the
//               dimensions of the frame as returned by
//               get_frame_as_set() are relative to the text's origin.
////////////////////////////////////////////////////////////////////
53
inline bool TextNode::is_frame_as_margin(void) const;

657 16 get_frame_as_set 0 4 759 26 TextNode::get_frame_as_set 0 1 284 529
////////////////////////////////////////////////////////////////////
//     Function: TextNode::get_frame_as_set
//       Access: Published
//  Description: Returns the dimensions of the frame as set by
//               set_frame_as_margin() or set_frame_actual().  Use
//               is_frame_actual() to determine how to interpret the
//               values returned by this function.  It is an error to
//               call this if has_frame() is false.
////////////////////////////////////////////////////////////////////
56
inline LVecBase4 TextNode::get_frame_as_set(void) const;

658 16 get_frame_actual 0 4 759 26 TextNode::get_frame_actual 0 1 285 767
////////////////////////////////////////////////////////////////////
//     Function: TextNode::get_frame_actual
//       Access: Published
//  Description: Returns the actual dimensions of the frame around the
//               text.  If the frame was set via set_frame_as_margin(),
//               the result returned by this function reflects the
//               size of the current text; if the frame was set via
//               set_frame_actual(), this returns the values
//               actually set.
//
//               If the text has no frame at all, this returns the
//               dimensions of the text itself, as if the frame were
//               set with a margin of 0, 0, 0, 0.
////////////////////////////////////////////////////////////////////
56
inline LVecBase4 TextNode::get_frame_actual(void) const;

659 20 set_frame_line_width 0 4 759 30 TextNode::set_frame_line_width 0 1 286 320
////////////////////////////////////////////////////////////////////
//     Function: TextNode::set_frame_line_width
//       Access: Published
//  Description: Specifies the thickness of the lines that will be
//               used to draw the frame.
////////////////////////////////////////////////////////////////////
67
inline void TextNode::set_frame_line_width(PN_stdfloat line_width);

660 20 get_frame_line_width 0 4 759 30 TextNode::get_frame_line_width 0 1 287 318
////////////////////////////////////////////////////////////////////
//     Function: TextNode::get_frame_line_width
//       Access: Published
//  Description: Returns the thickness of the lines that will be
//               used to draw the frame.
////////////////////////////////////////////////////////////////////
62
inline PN_stdfloat TextNode::get_frame_line_width(void) const;

661 17 set_frame_corners 0 4 759 27 TextNode::set_frame_corners 0 1 288 470
////////////////////////////////////////////////////////////////////
//     Function: TextNode::set_frame_corners
//       Access: Published
//  Description: Enables or disables the drawing of corners for the
//               frame.  These are extra points drawn at each of the
//               four corners, to soften the ugly edges generated when
//               the line width is greater than one.
////////////////////////////////////////////////////////////////////
54
inline void TextNode::set_frame_corners(bool corners);

662 17 get_frame_corners 0 4 759 27 TextNode::get_frame_corners 0 1 289 226
////////////////////////////////////////////////////////////////////
//     Function: TextNode::get_frame_corners
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
52
inline bool TextNode::get_frame_corners(void) const;

663 18 set_card_as_margin 0 4 759 28 TextNode::set_card_as_margin 0 1 290 587
////////////////////////////////////////////////////////////////////
//     Function: TextNode::set_card_as_margin
//       Access: Published
//  Description: Specifies that a (possibly opaque or semitransparent)
//               card will be held behind the text when it is next
//               created.  Like set_frame_as_margin, the parameters are
//               the amount of additional padding to insert around the
//               text in each dimension, and all should generally be
//               positive.
////////////////////////////////////////////////////////////////////
115
inline void TextNode::set_card_as_margin(PN_stdfloat left, PN_stdfloat right, PN_stdfloat bottom, PN_stdfloat top);

664 15 set_card_actual 0 4 759 25 TextNode::set_card_actual 0 1 291 596
////////////////////////////////////////////////////////////////////
//     Function: TextNode::set_card_actual
//       Access: Published
//  Description: Similar to set_card_as_margin, except the card is
//               specified in actual coordinate units (relative to
//               the text's origin), irrespective of the size of the
//               text.  The left and bottom coordinates should
//               generally be negative, while the right and top
//               coordinates should generally be positive.
////////////////////////////////////////////////////////////////////
112
inline void TextNode::set_card_actual(PN_stdfloat left, PN_stdfloat right, PN_stdfloat bottom, PN_stdfloat top);

665 14 set_card_decal 0 4 759 24 TextNode::set_card_decal 0 1 292 455
////////////////////////////////////////////////////////////////////
//     Function: TextNode::set_card_decal
//       Access: Published
//  Description: Sets the card_decal flag.  When this is true, the
//               text is decalled onto the card, which is necessary if
//               the TextNode is to be rendered in the 3-d world
//               without putting it in a bin.
////////////////////////////////////////////////////////////////////
54
inline void TextNode::set_card_decal(bool card_decal);

666 10 clear_card 0 4 759 20 TextNode::clear_card 0 1 293 293
////////////////////////////////////////////////////////////////////
//     Function: TextNode::clear_card
//       Access: Published
//  Description: Specifies that a card will not be drawn behind the
//               text.
////////////////////////////////////////////////////////////////////
39
inline void TextNode::clear_card(void);

667 8 has_card 0 4 759 18 TextNode::has_card 0 1 294 217
////////////////////////////////////////////////////////////////////
//     Function: TextNode::has_card
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
43
inline bool TextNode::has_card(void) const;

668 14 get_card_decal 0 4 759 24 TextNode::get_card_decal 0 1 295 275
////////////////////////////////////////////////////////////////////
//     Function: TextNode::get_card_decal
//       Access: Published
//  Description: Returns the card_decal flag.  See set_card_decal().
////////////////////////////////////////////////////////////////////
49
inline bool TextNode::get_card_decal(void) const;

669 17 is_card_as_margin 0 4 759 27 TextNode::is_card_as_margin 0 1 296 666
////////////////////////////////////////////////////////////////////
//     Function: TextNode::is_card_as_margin
//       Access: Published
//  Description: If this is true, the card was set via a call to
//               set_card_as_margin(), and the dimension of the card
//               as returned by get_card_as_set() represent a margin
//               all around the text.  If false, then the card was
//               set via a call to set_card_actual(), and the
//               dimensions of the card as returned by
//               get_card_as_set() are relative to the text's origin.
////////////////////////////////////////////////////////////////////
52
inline bool TextNode::is_card_as_margin(void) const;

670 15 get_card_as_set 0 4 759 25 TextNode::get_card_as_set 0 1 297 523
////////////////////////////////////////////////////////////////////
//     Function: TextNode::get_card_as_set
//       Access: Published
//  Description: Returns the dimensions of the card as set by
//               set_card_as_margin() or set_card_actual().  Use
//               is_card_actual() to determine how to interpret the
//               values returned by this function.  It is an error to
//               call this if has_card() is false.
////////////////////////////////////////////////////////////////////
55
inline LVecBase4 TextNode::get_card_as_set(void) const;

671 15 get_card_actual 0 4 759 25 TextNode::get_card_actual 0 1 298 759
////////////////////////////////////////////////////////////////////
//     Function: TextNode::get_card_actual
//       Access: Published
//  Description: Returns the actual dimensions of the card around the
//               text.  If the card was set via set_card_as_margin(),
//               the result returned by this function reflects the
//               size of the current text; if the card was set via
//               set_card_actual(), this returns the values
//               actually set.
//
//               If the text has no card at all, this returns the
//               dimensions of the text itself, as if the card were
//               set with a margin of 0, 0, 0, 0.
////////////////////////////////////////////////////////////////////
55
inline LVecBase4 TextNode::get_card_actual(void) const;

672 20 get_card_transformed 0 4 759 30 TextNode::get_card_transformed 0 1 299 529
////////////////////////////////////////////////////////////////////
//     Function: TextNode::get_card_transformed
//       Access: Published
//  Description: Returns the actual card dimensions, transformed by
//               the matrix set by set_transform().  This returns the
//               card dimensions in actual coordinates as seen by the
//               rest of the world.  Also see get_upper_left_3d() and
//               get_lower_right_3d().
////////////////////////////////////////////////////////////////////
60
inline LVecBase4 TextNode::get_card_transformed(void) const;

673 13 set_transform 0 4 759 23 TextNode::set_transform 0 1 300 314
////////////////////////////////////////////////////////////////////
//     Function: TextNode::set_transform
//       Access: Published
//  Description: Sets an additional transform that is applied to the
//               entire text paragraph.
////////////////////////////////////////////////////////////////////
63
inline void TextNode::set_transform(LMatrix4 const &transform);

674 13 get_transform 0 4 759 23 TextNode::get_transform 0 1 301 222
////////////////////////////////////////////////////////////////////
//     Function: TextNode::get_transform
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
52
inline LMatrix4 TextNode::get_transform(void) const;

675 21 set_coordinate_system 0 4 759 31 TextNode::set_coordinate_system 0 1 302 316
////////////////////////////////////////////////////////////////////
//     Function: TextNode::set_coordinate_system
//       Access: Published
//  Description: Specifies the coordinate system in which the text
//               will be generated.
////////////////////////////////////////////////////////////////////
65
inline void TextNode::set_coordinate_system(CoordinateSystem cs);

676 21 get_coordinate_system 0 4 759 31 TextNode::get_coordinate_system 0 1 303 230
////////////////////////////////////////////////////////////////////
//     Function: TextNode::get_coordinate_system
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
68
inline CoordinateSystem TextNode::get_coordinate_system(void) const;

677 14 set_usage_hint 0 4 759 24 TextNode::set_usage_hint 0 1 304 567
////////////////////////////////////////////////////////////////////
//     Function: TextNode::set_usage_hint
//       Access: Published
//  Description: Specifies the UsageHint that will be applied to
//               generated geometry.  The default is UH_static, which
//               is probably the right setting, but if you know the
//               TextNode's geometry will have a short lifespan, it
//               may be better to set it to UH_stream.  See
//               geomEnums.h.
////////////////////////////////////////////////////////////////////
70
inline void TextNode::set_usage_hint(GeomEnums::UsageHint usage_hint);

678 14 get_usage_hint 0 4 759 24 TextNode::get_usage_hint 0 1 305 329
////////////////////////////////////////////////////////////////////
//     Function: TextNode::get_usage_hint
//       Access: Published
//  Description: Returns the UsageHint that will be applied to
//               generated geometry.  See set_usage_hint().
////////////////////////////////////////////////////////////////////
65
inline GeomEnums::UsageHint TextNode::get_usage_hint(void) const;

679 17 set_flatten_flags 0 4 759 27 TextNode::set_flatten_flags 0 1 306 2201
////////////////////////////////////////////////////////////////////
//     Function: TextNode::set_flatten_flags
//       Access: Published
//  Description: Sets the flatten flags.  This should be a union of
//               the TextNode::FlattenFlags options.  This controls
//               the degree of flattening performed on the TextNode's
//               internal geometry (i.e. the scene graph returned by
//               generate()) each time the text is changed.  In
//               general, more flattening means a more optimal result,
//               but it will take more time to generate.
//
//               The choice may be any of these three:
//
//               FF_none - No flatten operation is called.  The
//               letters are left as independent Geoms.
//
//               FF_light - A flatten_light() operation is called.
//               The attributes are applied to the vertices, but no
//               nodes are removed.
//
//               FF_medium - A flatten_medium() operation is called.
//               The attributes are applied to the vertices, and a few
//               trivial nodes are removed.
//
//               FF_strong - A flatten_strong() operation is called.
//               The attributes are applied to the vertices, and the
//               resulting nodes are aggressively combined into as few
//               nodes as possible.
//
//               In addition to the above choices, you may optionally
//               include the following flag:
//
//               FF_dynamic_merge - Copy the geoms into a single
//               GeomVertexData as we go, instead of relying on the
//               flatten operation at the end.  This pre-flattens the
//               text considerably, and may obviate the need for
//               flatten altogether; it also tends to improve
//               performance considerably even if you do call flatten.
//               However, it is not as fast as not calling flatten at
//               all.
//
//               The default is taken from the text-flatten and
//               text-dynamic-merge config variables.
////////////////////////////////////////////////////////////////////
59
inline void TextNode::set_flatten_flags(int flatten_flags);

680 17 get_flatten_flags 0 4 759 27 TextNode::get_flatten_flags 0 1 307 279
////////////////////////////////////////////////////////////////////
//     Function: TextNode::get_flatten_flags
//       Access: Published
//  Description: Returns the flatten flags.  See set_flatten_flags().
////////////////////////////////////////////////////////////////////
51
inline int TextNode::get_flatten_flags(void) const;

681 8 set_font 0 4 759 18 TextNode::set_font 0 1 308 398
////////////////////////////////////////////////////////////////////
//     Function: TextNode::set_font
//       Access: Published
//  Description: Sets the font that will be used when making text.  If
//               this is set to NULL, the default font will be used,
//               which can be set via set_default_font().
////////////////////////////////////////////////////////////////////
47
inline void TextNode::set_font(TextFont *font);

682 10 clear_font 0 4 759 20 TextNode::clear_font 0 1 309 256
////////////////////////////////////////////////////////////////////
//     Function: TextNode::clear_font
//       Access: Published
//  Description: Resets the font to the default font.
////////////////////////////////////////////////////////////////////
39
inline void TextNode::clear_font(void);

683 14 set_small_caps 0 4 759 24 TextNode::set_small_caps 0 1 310 1131
////////////////////////////////////////////////////////////////////
//     Function: TextNode::set_small_caps
//       Access: Published
//  Description: Sets the small_caps flag.  When this is set,
//               lowercase letters are generated as scaled-down
//               versions of their uppercase equivalents.  This is
//               particularly useful to set for fonts that do not have
//               lowercase letters.
//
//               It is also a good idea to set this for a (dynamic)
//               font that has already implemented lowercase letters
//               as scaled-down versions of their uppercase
//               equivalents, since without this flag the texture
//               memory may needlessly duplicate equivalent glyphs for
//               upper and lowercase letters.  Setting this flag
//               causes the texture memory to share the mixed-case
//               letters.
//
//               The amount by which the lowercase letters are scaled
//               is specified by set_small_caps_scale().
////////////////////////////////////////////////////////////////////
54
inline void TextNode::set_small_caps(bool small_caps);

684 16 clear_small_caps 0 4 759 26 TextNode::clear_small_caps 0 1 311 226
////////////////////////////////////////////////////////////////////
//     Function: TextNode::clear_small_caps
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
45
inline void TextNode::clear_small_caps(void);

685 20 set_small_caps_scale 0 4 759 30 TextNode::set_small_caps_scale 0 1 312 475
////////////////////////////////////////////////////////////////////
//     Function: TextNode::set_small_caps_scale
//       Access: Published
//  Description: Sets the scale factor applied to lowercase letters
//               from their uppercase equivalents, when the small_caps
//               flag is in effect.  See set_small_caps().  Normally,
//               this will be a number less than one.
////////////////////////////////////////////////////////////////////
73
inline void TextNode::set_small_caps_scale(PN_stdfloat small_caps_scale);

686 22 clear_small_caps_scale 0 4 759 32 TextNode::clear_small_caps_scale 0 1 313 232
////////////////////////////////////////////////////////////////////
//     Function: TextNode::clear_small_caps_scale
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
51
inline void TextNode::clear_small_caps_scale(void);

687 9 set_slant 0 4 759 19 TextNode::set_slant 0 1 314 218
////////////////////////////////////////////////////////////////////
//     Function: TextNode::set_slant
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
51
inline void TextNode::set_slant(PN_stdfloat slant);

688 11 clear_slant 0 4 759 21 TextNode::clear_slant 0 1 315 221
////////////////////////////////////////////////////////////////////
//     Function: TextNode::clear_slant
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
40
inline void TextNode::clear_slant(void);

689 9 set_align 0 4 759 19 TextNode::set_align 0 1 316 218
////////////////////////////////////////////////////////////////////
//     Function: TextNode::set_align
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
70
inline void TextNode::set_align(TextProperties::Alignment align_type);

690 11 clear_align 0 4 759 21 TextNode::clear_align 0 1 317 221
////////////////////////////////////////////////////////////////////
//     Function: TextNode::clear_align
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
40
inline void TextNode::clear_align(void);

691 10 set_indent 0 4 759 20 TextNode::set_indent 0 1 318 389
////////////////////////////////////////////////////////////////////
//     Function: TextNode::set_indent
//       Access: Published
//  Description: Specifies the amount of extra space that is inserted
//               before the first character of each line.  This can be
//               thought of as a left margin.
////////////////////////////////////////////////////////////////////
53
inline void TextNode::set_indent(PN_stdfloat indent);

692 12 clear_indent 0 4 759 22 TextNode::clear_indent 0 1 319 222
////////////////////////////////////////////////////////////////////
//     Function: TextNode::clear_indent
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
41
inline void TextNode::clear_indent(void);

693 12 set_wordwrap 0 4 759 22 TextNode::set_wordwrap 0 1 320 394
////////////////////////////////////////////////////////////////////
//     Function: TextNode::set_wordwrap
//       Access: Published
//  Description: Sets the text up to automatically wordwrap when it
//               exceeds the indicated width.  This can be thought of
//               as a right margin or margin width.
////////////////////////////////////////////////////////////////////
57
inline void TextNode::set_wordwrap(PN_stdfloat wordwrap);

694 14 clear_wordwrap 0 4 759 24 TextNode::clear_wordwrap 0 1 321 320
////////////////////////////////////////////////////////////////////
//     Function: TextNode::clear_wordwrap
//       Access: Published
//  Description: Removes the wordwrap setting from the TextNode.  Text
//               will be as wide as it is.
////////////////////////////////////////////////////////////////////
43
inline void TextNode::clear_wordwrap(void);

695 14 set_text_color 0 4 759 24 TextNode::set_text_color 0 2 322 323 448
////////////////////////////////////////////////////////////////////
//     Function: TextNode::set_text_color
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: TextNode::set_text_color
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
161
inline void TextNode::set_text_color(PN_stdfloat r, PN_stdfloat g, PN_stdfloat b, PN_stdfloat a);
inline void TextNode::set_text_color(LColor const &text_color);

696 16 clear_text_color 0 4 759 26 TextNode::clear_text_color 0 1 324 346
////////////////////////////////////////////////////////////////////
//     Function: TextNode::clear_text_color
//       Access: Published
//  Description: Removes the text color specification; the text will
//               be colored whatever it was in the source font file.
////////////////////////////////////////////////////////////////////
45
inline void TextNode::clear_text_color(void);

697 16 set_shadow_color 0 4 759 26 TextNode::set_shadow_color 0 2 325 326 452
////////////////////////////////////////////////////////////////////
//     Function: TextNode::set_shadow_color
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: TextNode::set_shadow_color
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
167
inline void TextNode::set_shadow_color(PN_stdfloat r, PN_stdfloat g, PN_stdfloat b, PN_stdfloat a);
inline void TextNode::set_shadow_color(LColor const &shadow_color);

698 18 clear_shadow_color 0 4 759 28 TextNode::clear_shadow_color 0 1 327 228
////////////////////////////////////////////////////////////////////
//     Function: TextNode::clear_shadow_color
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
47
inline void TextNode::clear_shadow_color(void);

699 10 set_shadow 0 4 759 20 TextNode::set_shadow 0 2 328 329 784
////////////////////////////////////////////////////////////////////
//     Function: TextNode::set_shadow
//       Access: Published
//  Description: Specifies that the text should be drawn with a
//               shadow, by creating a second copy of the text and
//               offsetting it slightly behind the first.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: TextNode::set_shadow
//       Access: Published
//  Description: Specifies that the text should be drawn with a
//               shadow, by creating a second copy of the text and
//               offsetting it slightly behind the first.
////////////////////////////////////////////////////////////////////
141
inline void TextNode::set_shadow(PN_stdfloat xoffset, PN_stdfloat yoffset);
inline void TextNode::set_shadow(LVecBase2 const &shadow_offset);

700 12 clear_shadow 0 4 759 22 TextNode::clear_shadow 0 1 330 297
////////////////////////////////////////////////////////////////////
//     Function: TextNode::clear_shadow
//       Access: Published
//  Description: Specifies that a shadow will not be drawn behind the
//               text.
////////////////////////////////////////////////////////////////////
41
inline void TextNode::clear_shadow(void);

701 7 set_bin 0 4 759 17 TextNode::set_bin 0 1 331 672
////////////////////////////////////////////////////////////////////
//     Function: TextNode::set_bin
//       Access: Published
//  Description: Names the GeomBin that the TextNode geometry should
//               be assigned to.  If this is set, then a
//               GeomBinTransition will be created to explicitly place
//               each component in the named bin.
//
//               The draw_order value will also be passed to each
//               GeomBinTransition as appropriate; this is
//               particularly useful if this names a GeomBinFixed,
//               e.g. "fixed".
////////////////////////////////////////////////////////////////////
49
inline void TextNode::set_bin(string const &bin);

702 9 clear_bin 0 4 759 19 TextNode::clear_bin 0 1 332 414
////////////////////////////////////////////////////////////////////
//     Function: TextNode::clear_bin
//       Access: Published
//  Description: Removes the effect of a previous call to
//               set_bin().  Text will be drawn in whatever bin
//               it would like to be drawn in, with no explicit
//               ordering.
////////////////////////////////////////////////////////////////////
38
inline void TextNode::clear_bin(void);

703 14 set_draw_order 0 4 759 24 TextNode::set_draw_order 0 1 333 765
////////////////////////////////////////////////////////////////////
//     Function: TextNode::set_draw_order
//       Access: Published
//  Description: Sets the drawing order of text created by the
//               TextMaker.  This is actually the draw order of the
//               card and frame.  The shadow is drawn at
//               _draw_order+1, and the text at _draw_order+2.
//
//               This affects the sorting order assigned to the arcs
//               as they are created, and also is passed to whatever
//               bin may be assigned via set_bin().
//
//               The return value is the first unused draw_order
//               number, e.g. _draw_order + 3.
////////////////////////////////////////////////////////////////////
52
inline int TextNode::set_draw_order(int draw_order);

704 16 clear_draw_order 0 4 759 26 TextNode::clear_draw_order 0 1 334 226
////////////////////////////////////////////////////////////////////
//     Function: TextNode::clear_draw_order
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
45
inline void TextNode::clear_draw_order(void);

705 13 set_tab_width 0 4 759 23 TextNode::set_tab_width 0 1 335 403
////////////////////////////////////////////////////////////////////
//     Function: TextNode::set_tab_width
//       Access: Published
//  Description: Sets the width of each tab stop, in screen units.  A
//               tab character embedded in the text will advance the
//               horizontal position to the next tab stop.
////////////////////////////////////////////////////////////////////
59
inline void TextNode::set_tab_width(PN_stdfloat tab_width);

706 15 clear_tab_width 0 4 759 25 TextNode::clear_tab_width 0 1 336 225
////////////////////////////////////////////////////////////////////
//     Function: TextNode::clear_tab_width
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
44
inline void TextNode::clear_tab_width(void);

707 15 set_glyph_scale 0 4 759 25 TextNode::set_glyph_scale 0 1 337 467
////////////////////////////////////////////////////////////////////
//     Function: TextNode::set_glyph_scale
//       Access: Published
//  Description: Specifies the factor by which to scale each letter of
//               the text as it is placed.  This can be used (possibly
//               in conjunction with set_glyph_shift()) to implement
//               superscripting or subscripting.
////////////////////////////////////////////////////////////////////
63
inline void TextNode::set_glyph_scale(PN_stdfloat glyph_scale);

708 17 clear_glyph_scale 0 4 759 27 TextNode::clear_glyph_scale 0 1 338 227
////////////////////////////////////////////////////////////////////
//     Function: TextNode::clear_glyph_scale
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
46
inline void TextNode::clear_glyph_scale(void);

709 15 set_glyph_shift 0 4 759 25 TextNode::set_glyph_shift 0 1 339 465
////////////////////////////////////////////////////////////////////
//     Function: TextNode::set_glyph_shift
//       Access: Published
//  Description: Specifies a vertical amount to shift each letter of
//               the text as it is placed.  This can be used (possibly
//               in conjunction with set_glyph_scale()) to implement
//               superscripting or subscripting.
////////////////////////////////////////////////////////////////////
63
inline void TextNode::set_glyph_shift(PN_stdfloat glyph_shift);

710 17 clear_glyph_shift 0 4 759 27 TextNode::clear_glyph_shift 0 1 340 227
////////////////////////////////////////////////////////////////////
//     Function: TextNode::clear_glyph_shift
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
46
inline void TextNode::clear_glyph_shift(void);

711 8 set_text 0 4 759 18 TextNode::set_text 0 2 341 342 1003
// These methods are inherited from TextEncoder, but we override
// here so we can flag the TextNode as dirty when they have been
// changed.

////////////////////////////////////////////////////////////////////
//     Function: TextNode::set_text
//       Access: Published
//  Description: Changes the text that is displayed under the
//               TextNode.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: TextNode::set_text
//       Access: Published
//  Description: The two-parameter version of set_text() accepts an
//               explicit encoding; the text is immediately decoded
//               and stored as a wide-character string.  Subsequent
//               calls to get_text() will return the same text
//               re-encoded using whichever encoding is specified by
//               set_encoding().
////////////////////////////////////////////////////////////////////
135
inline void TextNode::set_text(string const &text);
inline void TextNode::set_text(string const &text, TextEncoder::Encoding encoding);

712 10 clear_text 0 4 759 20 TextNode::clear_text 0 1 343 255
////////////////////////////////////////////////////////////////////
//     Function: TextNode::clear_text
//       Access: Published
//  Description: Removes the text from the TextNode.
////////////////////////////////////////////////////////////////////
39
inline void TextNode::clear_text(void);

713 11 append_text 0 4 759 21 TextNode::append_text 0 1 344 297
////////////////////////////////////////////////////////////////////
//     Function: TextNode::append_text
//       Access: Published
//  Description: Appends the indicates string to the end of the stored
//               text.
////////////////////////////////////////////////////////////////////
54
inline void TextNode::append_text(string const &text);

714 19 append_unicode_char 0 4 759 29 TextNode::append_unicode_char 0 1 345 377
////////////////////////////////////////////////////////////////////
//     Function: TextNode::append_unicode_char
//       Access: Published
//  Description: Appends a single character to the end of the stored
//               text.  This may be a wide character, up to 16 bits in
//               Unicode.
////////////////////////////////////////////////////////////////////
61
inline void TextNode::append_unicode_char(wchar_t character);

715 20 get_wordwrapped_text 0 4 759 30 TextNode::get_wordwrapped_text 0 1 346 598
// After the text has been set, you can query this to determine how
// it will be wordwrapped.

////////////////////////////////////////////////////////////////////
//     Function: TextNode::get_wordwrapped_text
//       Access: Public
//  Description: Returns a string that represents the contents of the
//               text, as it has been formatted by wordwrap rules.
//
//               In earlier versions, this did not contain any
//               embedded special characters like \1 or \3; now it
//               does.
////////////////////////////////////////////////////////////////////
57
inline string TextNode::get_wordwrapped_text(void) const;

716 10 calc_width 0 4 759 20 TextNode::calc_width 0 3 347 348 349 1298
// These methods calculate the width of a single character or a line
// of text in the current font.

////////////////////////////////////////////////////////////////////
//     Function: TextNode::calc_width
//       Access: Published
//  Description: Returns the width of a line of text of arbitrary
//               characters.  The line should not include the newline
//               character.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: TextNode::calc_width
//       Access: Published
//  Description: Returns the width of a single character of the font,
//               or 0.0 if the character is not known.  This may be a
//               wide character (greater than 255).
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: TextNode::calc_width
//       Access: Published
//  Description: Returns the width of a line of text of arbitrary
//               characters.  The line should not include the newline
//               character or any embedded control characters like \1
//               or \3.
////////////////////////////////////////////////////////////////////
186
PN_stdfloat TextNode::calc_width(wchar_t character) const;
inline PN_stdfloat TextNode::calc_width(string const &line) const;
PN_stdfloat TextNode::calc_width(wstring const &line) const;

717 19 has_exact_character 0 4 759 29 TextNode::has_exact_character 0 1 350 1032
////////////////////////////////////////////////////////////////////
//     Function: TextNode::has_exact_character
//       Access: Published
//  Description: Returns true if the named character exists in the
//               font exactly as named, false otherwise.  Note that
//               because Panda can assemble glyphs together
//               automatically using cheesy accent marks, this is not
//               a reliable indicator of whether a suitable glyph can
//               be rendered for the character.  For that, use
//               has_character() instead.
//
//               This returns true for whitespace and Unicode
//               whitespace characters (if they exist in the font),
//               but returns false for characters that would render
//               with the "invalid glyph".  It also returns false for
//               characters that would be synthesized within Panda,
//               but see has_character().
////////////////////////////////////////////////////////////////////
60
bool TextNode::has_exact_character(wchar_t character) const;

718 13 has_character 0 4 759 23 TextNode::has_character 0 1 351 720
////////////////////////////////////////////////////////////////////
//     Function: TextNode::has_character
//       Access: Published
//  Description: Returns true if the named character exists in the
//               font or can be synthesized by Panda, false otherwise.
//               (Panda can synthesize some accented characters by
//               combining similar-looking glyphs from the font.)
//
//               This returns true for whitespace and Unicode
//               whitespace characters (if they exist in the font),
//               but returns false for characters that would render
//               with the "invalid glyph".
////////////////////////////////////////////////////////////////////
54
bool TextNode::has_character(wchar_t character) const;

719 13 is_whitespace 0 4 759 23 TextNode::is_whitespace 0 1 352 1118
////////////////////////////////////////////////////////////////////
//     Function: TextNode::is_whitespace
//       Access: Published
//  Description: Returns true if the indicated character represents
//               whitespace in the font, or false if anything visible
//               will be rendered for it.
//
//               This returns true for whitespace and Unicode
//               whitespace characters (if they exist in the font),
//               and returns false for any other characters, including
//               characters that do not exist in the font (these would
//               be rendered with the "invalid glyph", which is
//               visible).
//
//               Note that this function can be reliably used to
//               identify Unicode whitespace characters only if the
//               font has all of the whitespace characters defined.
//               It will return false for any character not in the
//               font, even if it is an official Unicode whitespace
//               character.
////////////////////////////////////////////////////////////////////
54
bool TextNode::is_whitespace(wchar_t character) const;

720 9 set_wtext 0 4 759 19 TextNode::set_wtext 0 1 353 497
// Direct support for wide-character strings.

////////////////////////////////////////////////////////////////////
//     Function: TextNode::set_wtext
//       Access: Published
//  Description: Changes the text that is displayed under the
//               TextNode, with a wide text.  This automatically sets
//               the string reported by get_text() to the 8-bit
//               encoded version of the same string.
////////////////////////////////////////////////////////////////////
54
inline void TextNode::set_wtext(wstring const &wtext);

721 12 append_wtext 0 4 759 22 TextNode::append_wtext 0 1 354 313
////////////////////////////////////////////////////////////////////
//     Function: TextNode::append_wtext
//       Access: Published
//  Description: Appends the indicates string to the end of the stored
//               wide-character text.
////////////////////////////////////////////////////////////////////
56
inline void TextNode::append_wtext(wstring const &text);

722 21 get_wordwrapped_wtext 0 4 759 31 TextNode::get_wordwrapped_wtext 0 1 355 507
////////////////////////////////////////////////////////////////////
//     Function: TextNode::get_wordwrapped_wtext
//       Access: Published
//  Description: Returns a wstring that represents the contents of the
//               text, as it has been formatted by wordwrap rules.
//
//               In earlier versions, this did not contain any
//               embedded special characters like \1 or \3; now it
//               does.
////////////////////////////////////////////////////////////////////
59
inline wstring TextNode::get_wordwrapped_wtext(void) const;

723 6 output 0 6 759 16 TextNode::output 0 1 356 222
////////////////////////////////////////////////////////////////////
//     Function: TextNode::output
//       Access: Public, Virtual
//  Description: 
////////////////////////////////////////////////////////////////////
50
virtual void TextNode::output(ostream &out) const;

724 5 write 0 6 759 15 TextNode::write 0 1 357 223
////////////////////////////////////////////////////////////////////
//     Function: TextNode::write
//       Access: Published, Virtual
//  Description:
////////////////////////////////////////////////////////////////////
71
virtual void TextNode::write(ostream &out, int indent_level = 0) const;

725 8 get_left 0 4 759 18 TextNode::get_left 0 1 358 472
// The following functions return information about the text that
// was last built (and is currently visible).

////////////////////////////////////////////////////////////////////
//     Function: TextNode::get_left
//       Access: Published
//  Description: Returns the leftmost extent of the text in local 2-d
//               coordinates, unmodified by the set_transform()
//               matrix.
////////////////////////////////////////////////////////////////////
50
inline PN_stdfloat TextNode::get_left(void) const;

726 9 get_right 0 4 759 19 TextNode::get_right 0 1 359 361
////////////////////////////////////////////////////////////////////
//     Function: TextNode::get_right
//       Access: Published
//  Description: Returns the rightmost extent of the text in local 2-d
//               coordinates, unmodified by the set_transform()
//               matrix.
////////////////////////////////////////////////////////////////////
51
inline PN_stdfloat TextNode::get_right(void) const;

727 10 get_bottom 0 4 759 20 TextNode::get_bottom 0 1 360 363
////////////////////////////////////////////////////////////////////
//     Function: TextNode::get_bottom
//       Access: Published
//  Description: Returns the bottommost extent of the text in local
//               2-d coordinates, unmodified by the set_transform()
//               matrix.
////////////////////////////////////////////////////////////////////
52
inline PN_stdfloat TextNode::get_bottom(void) const;

728 7 get_top 0 4 759 17 TextNode::get_top 0 1 361 357
////////////////////////////////////////////////////////////////////
//     Function: TextNode::get_top
//       Access: Published
//  Description: Returns the topmost extent of the text in local 2-d
//               coordinates, unmodified by the set_transform()
//               matrix.
////////////////////////////////////////////////////////////////////
49
inline PN_stdfloat TextNode::get_top(void) const;

729 10 get_height 0 4 759 20 TextNode::get_height 0 1 362 297
////////////////////////////////////////////////////////////////////
//     Function: TextNode::get_height
//       Access: Published
//  Description: Returns the net height of the text in local 2-d
//               coordinates.
////////////////////////////////////////////////////////////////////
52
inline PN_stdfloat TextNode::get_height(void) const;

730 9 get_width 0 4 759 19 TextNode::get_width 0 1 363 295
////////////////////////////////////////////////////////////////////
//     Function: TextNode::get_width
//       Access: Published
//  Description: Returns the net width of the text in local 2-d
//               coordinates.
////////////////////////////////////////////////////////////////////
51
inline PN_stdfloat TextNode::get_width(void) const;

731 17 get_upper_left_3d 0 4 759 27 TextNode::get_upper_left_3d 0 1 364 395
////////////////////////////////////////////////////////////////////
//     Function: TextNode::get_upper_left_3d
//       Access: Published
//  Description: Returns the upper-left extent of the text object,
//               after it has been transformed into 3-d space by
//               applying the set_transform() matrix.
////////////////////////////////////////////////////////////////////
55
inline LPoint3 TextNode::get_upper_left_3d(void) const;

732 18 get_lower_right_3d 0 4 759 28 TextNode::get_lower_right_3d 0 1 365 397
////////////////////////////////////////////////////////////////////
//     Function: TextNode::get_lower_right_3d
//       Access: Published
//  Description: Returns the lower-right extent of the text object,
//               after it has been transformed into 3-d space by
//               applying the set_transform() matrix.
////////////////////////////////////////////////////////////////////
56
inline LPoint3 TextNode::get_lower_right_3d(void) const;

733 12 get_num_rows 0 4 759 22 TextNode::get_num_rows 0 1 366 394
////////////////////////////////////////////////////////////////////
//     Function: TextNode::get_num_rows
//       Access: Published
//  Description: Returns the number of rows of text that were
//               generated.  This counts word-wrapped rows as well as
//               rows generated due to embedded newlines.
////////////////////////////////////////////////////////////////////
46
inline int TextNode::get_num_rows(void) const;

734 8 generate 0 4 759 18 TextNode::generate 0 1 367 403
////////////////////////////////////////////////////////////////////
//     Function: TextNode::generate
//       Access: Published
//  Description: Generates the text, according to the parameters
//               indicated within the TextNode, and returns a Node
//               that may be parented within the tree to represent it.
////////////////////////////////////////////////////////////////////
48
PointerTo< PandaNode > TextNode::generate(void);

735 6 update 0 4 759 16 TextNode::update 0 1 368 442
////////////////////////////////////////////////////////////////////
//     Function: TextNode::update
//       Access: Published
//  Description: Can be called after the TextNode has been fully
//               configured, to force the node to recompute its text
//               immediately, rather than waiting for it to be drawn.
//               This call is optional.
////////////////////////////////////////////////////////////////////
35
inline void TextNode::update(void);

736 12 force_update 0 4 759 22 TextNode::force_update 0 1 369 537
////////////////////////////////////////////////////////////////////
//     Function: TextNode::force_update
//       Access: Published
//  Description: Forces the TextNode to recompute itself now, even if
//               it believes nothing has changed.  Normally, this
//               should not need to be called, but it may be useful if
//               some properties change outside of the TextNode's
//               knowledge (for instance, within the font).
////////////////////////////////////////////////////////////////////
41
inline void TextNode::force_update(void);

737 17 get_internal_geom 0 4 759 27 TextNode::get_internal_geom 0 1 370 637
////////////////////////////////////////////////////////////////////
//     Function: TextNode::get_internal_geom
//       Access: Published
//  Description: Returns the actual node that is used internally to
//               render the text, if the TextNode is parented within
//               the scene graph.
//
//               In general, you should not call this method.  Call
//               generate() instead if you want to get a handle to
//               geometry that represents the text.  This method is
//               provided as a debugging aid only.
////////////////////////////////////////////////////////////////////
51
PandaNode *TextNode::get_internal_geom(void) const;

738 14 get_class_type 0 4 759 24 TextNode::get_class_type 0 1 371 0
49
static TypeHandle TextNode::get_class_type(void);

377
1 0 0 6 3 765 0 0 320 ////////////////////////////////////////////////////////////////////
//     Function: TextGlyph::get_character
//       Access: Public
//  Description: Returns the Unicode value that corresponds to the
//               character this glyph represents.
//////////////////////////////////////////////////////////////////// 1 4 this 3 763  
2 0 0 7 4 768 0 0 265 ////////////////////////////////////////////////////////////////////
//     Function: TextGlyph::get_geom
//       Access: Public
//  Description: Returns a Geom that renders the particular glyph.
//////////////////////////////////////////////////////////////////// 2 4 this 3 763  10 usage_hint 1 766  
3 0 0 7 5 771 0 0 290 ////////////////////////////////////////////////////////////////////
//     Function: TextGlyph::get_state
//       Access: Public
//  Description: Returns the state in which the glyph should be
//               rendered.
//////////////////////////////////////////////////////////////////// 1 4 this 3 763  
4 0 0 6 6 772 0 0 433 ////////////////////////////////////////////////////////////////////
//     Function: TextGlyph::get_advance
//       Access: Public
//  Description: Returns the distance by which the character pointer
//               should be advanced after placing this character;
//               i.e. the approximate width the character takes up on
//               the line.
//////////////////////////////////////////////////////////////////// 1 4 this 3 763  
5 0 0 6 7 774 0 0 377 ////////////////////////////////////////////////////////////////////
//     Function: TextGlyph::is_whitespace
//       Access: Public, Virtual
//  Description: Returns true if this glyph represents invisible
//               whitespace, or false if it corresponds to some
//               visible character.
//////////////////////////////////////////////////////////////////// 1 4 this 3 763  
6 0 0 7 8 776 0 0 0 0 
7 0 0 7 18 779 388 0 0 1 4 this 3 777  
8 0 0 6 19 774 0 0 303 ////////////////////////////////////////////////////////////////////
//     Function: TextFont::is_valid
//       Access: Published
//  Description: Returns true if the font is valid and ready to use,
//               false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 777  
9 0 0 6 21 772 0 0 296 ////////////////////////////////////////////////////////////////////
//     Function: TextFont::get_line_height
//       Access: Published
//  Description: Returns the number of units high each line of text
//               is.
//////////////////////////////////////////////////////////////////// 1 4 this 3 777  
10 0 0 4 22 780 0 0 296 ////////////////////////////////////////////////////////////////////
//     Function: TextFont::set_line_height
//       Access: Published
//  Description: Changes the number of units high each line of text
//               is.
//////////////////////////////////////////////////////////////////// 2 4 this 3 779  11 line_height 1 772  
11 0 0 6 23 772 0 0 271 ////////////////////////////////////////////////////////////////////
//     Function: TextFont::get_space_advance
//       Access: Published
//  Description: Returns the number of units wide a space is.
//////////////////////////////////////////////////////////////////// 1 4 this 3 777  
12 0 0 4 24 780 0 0 271 ////////////////////////////////////////////////////////////////////
//     Function: TextFont::set_space_advance
//       Access: Published
//  Description: Changes the number of units wide a space is.
//////////////////////////////////////////////////////////////////// 2 4 this 3 779  13 space_advance 1 772  
13 0 0 7 25 763 0 0 591 ////////////////////////////////////////////////////////////////////
//     Function: DynamicTextFont::get_glyph
//       Access: Public, Virtual
//  Description: Gets the glyph associated with the given character
//               code, as well as an optional scaling parameter that
//               should be applied to the glyph's geometry and advance
//               parameters.  Returns the glyph on success.  On failure,
//               it may still return a printable glyph, or it may
//               return NULL.
//////////////////////////////////////////////////////////////////// 2 4 this 3 779  9 character 1 765  
14 0 0 4 26 780 0 0 223 ////////////////////////////////////////////////////////////////////
//     Function: TextFont::write
//       Access: Published, Virtual
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 777  3 out 1 781  12 indent_level 1 765  
15 0 0 7 27 776 0 0 0 0 
16 0 0 6 20 774 0 0 0 1 4 this 3 777  
17 0 0 7 10 783 0 0 0 1 4 this 3 779  
18 0 0 7 11 779 388 0 0 1 4 this 3 783  
19 0 0 6 13 784 0 0 0 1 4 this 3 779  
20 0 0 7 14 779 388 0 0 1 4 this 3 784  
21 0 0 7 29 787 414 0 276 ////////////////////////////////////////////////////////////////////
//     Function: DynamicTextGlyph::get_page
//       Access: Published
//  Description: Returns the DynamicTextPage that this glyph is on.
//////////////////////////////////////////////////////////////////// 1 4 this 3 785  
22 0 0 6 30 774 0 0 469 ////////////////////////////////////////////////////////////////////
//     Function: DynamicTextGlyph::intersects
//       Access: Published
//  Description: Returns true if the particular position this glyph
//               has been assigned to overlaps the rectangle whose
//               top left corner is at x, y and whose size is given by
//               x_size, y_size, or false otherwise.
//////////////////////////////////////////////////////////////////// 5 4 this 3 785  1 x 1 765  1 y 1 765  6 x_size 1 765  6 y_size 1 765  
23 0 0 6 31 772 0 0 327 ////////////////////////////////////////////////////////////////////
//     Function: DynamicTextGlyph::get_top
//       Access: Published
//  Description: Returns the vertex coordinates that can be used when
//               creating a custom text renderer.
//////////////////////////////////////////////////////////////////// 1 4 this 3 785  
24 0 0 6 32 772 0 0 328 ////////////////////////////////////////////////////////////////////
//     Function: DynamicTextGlyph::get_left
//       Access: Published
//  Description: Returns the vertex coordinates that can be used when
//               creating a custom text renderer.
//////////////////////////////////////////////////////////////////// 1 4 this 3 785  
25 0 0 6 33 772 0 0 330 ////////////////////////////////////////////////////////////////////
//     Function: DynamicTextGlyph::get_bottom
//       Access: Published
//  Description: Returns the vertex coordinates that can be used when
//               creating a custom text renderer.
//////////////////////////////////////////////////////////////////// 1 4 this 3 785  
26 0 0 6 34 772 0 0 329 ////////////////////////////////////////////////////////////////////
//     Function: DynamicTextGlyph::get_right
//       Access: Published
//  Description: Returns the vertex coordinates that can be used when
//               creating a custom text renderer.
//////////////////////////////////////////////////////////////////// 1 4 this 3 785  
27 0 0 6 35 772 0 0 326 ////////////////////////////////////////////////////////////////////
//     Function: DynamicTextGlyph::get_uv_top
//       Access: Published
//  Description: Returns the UV coordinates that can be used when
//               creating a custom text renderer.
//////////////////////////////////////////////////////////////////// 1 4 this 3 785  
28 0 0 6 36 772 0 0 327 ////////////////////////////////////////////////////////////////////
//     Function: DynamicTextGlyph::get_uv_left
//       Access: Published
//  Description: Returns the UV coordinates that can be used when
//               creating a custom text renderer.
//////////////////////////////////////////////////////////////////// 1 4 this 3 785  
29 0 0 6 37 772 0 0 329 ////////////////////////////////////////////////////////////////////
//     Function: DynamicTextGlyph::get_uv_bottom
//       Access: Published
//  Description: Returns the UV coordinates that can be used when
//               creating a custom text renderer.
//////////////////////////////////////////////////////////////////// 1 4 this 3 785  
30 0 0 6 38 772 0 0 328 ////////////////////////////////////////////////////////////////////
//     Function: DynamicTextGlyph::get_uv_right
//       Access: Published
//  Description: Returns the UV coordinates that can be used when
//               creating a custom text renderer.
//////////////////////////////////////////////////////////////////// 1 4 this 3 785  
31 0 0 7 39 776 0 0 0 0 
32 0 0 6 42 765 0 0 279 ////////////////////////////////////////////////////////////////////
//     Function: DynamicTextPage::get_x_size
//       Access: Published
//  Description: Returns the x size of the page (texture), in pixels.
//////////////////////////////////////////////////////////////////// 1 4 this 3 788  
33 0 0 6 43 765 0 0 279 ////////////////////////////////////////////////////////////////////
//     Function: DynamicTextPage::get_y_size
//       Access: Published
//  Description: Returns the y size of the page (texture), in pixels.
//////////////////////////////////////////////////////////////////// 1 4 this 3 788  
34 0 0 6 44 774 0 0 298 ////////////////////////////////////////////////////////////////////
//     Function: DynamicTextPage::is_empty
//       Access: Published
//  Description: Returns true if the page has no glyphs, false
//               otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 788  
35 0 0 7 45 776 0 0 0 0 
36 0 0 7 53 792 420 0 233 ////////////////////////////////////////////////////////////////////
//     Function: DynamicTextFont::Copy Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 copy 1 790  
37 0 0 7 53 792 420 0 435 ////////////////////////////////////////////////////////////////////
//     Function: DynamicTextFont::Constructor
//       Access: Published
//  Description: The constructor expects the name of some font file
//               that FreeType can read, along with face_index,
//               indicating which font within the file to load
//               (usually 0).
//////////////////////////////////////////////////////////////////// 2 13 font_filename 1 793  10 face_index 1 765  
38 0 0 7 53 792 420 0 385 ////////////////////////////////////////////////////////////////////
//     Function: DynamicTextFont::Constructor
//       Access: Published
//  Description: This constructor accepts a table of data representing
//               the font file, loaded from some source other than a
//               filename on disk.
//////////////////////////////////////////////////////////////////// 3 9 font_data 1 796  11 data_length 1 765  10 face_index 1 765  
39 0 0 7 55 779 388 0 262 ////////////////////////////////////////////////////////////////////
//     Function: DynamicTextFont::make_copy
//       Access: Published
//  Description: Returns a new copy of the same font.
//////////////////////////////////////////////////////////////////// 1 4 this 3 790  
40 0 0 6 56 796 0 0 369 ////////////////////////////////////////////////////////////////////
//     Function: DynamicTextFont::get_name
//       Access: Published
//  Description: Disambiguates the get_name() method between that
//               inherited from TextFont and that inherited from
//               FreetypeFont.
//////////////////////////////////////////////////////////////////// 1 4 this 3 790  
41 0 0 6 57 774 0 0 591 ////////////////////////////////////////////////////////////////////
//     Function: DynamicTextFont::set_point_size
//       Access: Published
//  Description: Sets the point size of the font.  This controls the
//               apparent size of the font onscreen.  By convention, a
//               10 point font is about 1 screen unit high.
//
//               This should only be called before any characters have
//               been requested out of the font, or immediately after
//               calling clear().
//////////////////////////////////////////////////////////////////// 2 4 this 3 792  10 point_size 1 772  
42 0 0 6 58 772 0 0 266 ////////////////////////////////////////////////////////////////////
//     Function: DynamicTextFont::get_point_size
//       Access: Published
//  Description: Returns the point size of the font.
//////////////////////////////////////////////////////////////////// 1 4 this 3 790  
43 0 0 6 59 774 0 0 776 ////////////////////////////////////////////////////////////////////
//     Function: DynamicTextFont::set_pixels_per_unit
//       Access: Published
//  Description: Set the resolution of the texture map, and hence the
//               clarity of the resulting font.  This sets the number
//               of pixels in the texture map that are used for each
//               onscreen unit.
//
//               Setting this number larger results in an easier to
//               read font, but at the cost of more texture memory.
//
//               This should only be called before any characters have
//               been requested out of the font, or immediately after
//               calling clear().
//////////////////////////////////////////////////////////////////// 2 4 this 3 792  15 pixels_per_unit 1 772  
44 0 0 6 60 772 0 0 323 ////////////////////////////////////////////////////////////////////
//     Function: DynamicTextFont::get_pixels_per_unit
//       Access: Published
//  Description: Returns the resolution of the texture map.  See
//               set_pixels_per_unit().
//////////////////////////////////////////////////////////////////// 1 4 this 3 790  
45 0 0 6 61 774 0 0 979 ////////////////////////////////////////////////////////////////////
//     Function: DynamicTextFont::set_scale_factor
//       Access: Published
//  Description: Sets the factor by which the font is rendered larger
//               by the FreeType library before being filtered down to
//               its actual size in the texture as specified by
//               set_pixels_per_unit().  This may be set to a number
//               larger than 1.0 to improve the font's antialiasing
//               (since FreeType doesn't really do a swell job of
//               antialiasing by itself).  There is some performance
//               implication for setting this different than 1.0, but
//               it is probably small.
//
//               This should only be called before any characters have
//               been requested out of the font, or immediately after
//               calling clear().
//////////////////////////////////////////////////////////////////// 2 4 this 3 792  12 scale_factor 1 772  
46 0 0 6 62 772 0 0 313 ////////////////////////////////////////////////////////////////////
//     Function: DynamicTextFont::get_scale_factor
//       Access: Published
//  Description: Returns the antialiasing scale factor.  See
//               set_scale_factor().
//////////////////////////////////////////////////////////////////// 1 4 this 3 790  
47 0 0 4 63 780 0 0 833 ////////////////////////////////////////////////////////////////////
//     Function: DynamicTextFont::set_native_antialias
//       Access: Published
//  Description: Sets whether the Freetype library's built-in
//               antialias mode is enabled.  There are two unrelated
//               ways to achieve antialiasing: with Freetype's native
//               antialias mode, and with the use of a scale_factor
//               greater than one.  By default, both modes are
//               enabled.
//
//               At low resolutions, some fonts may do better with one
//               mode or the other.  In general, Freetype's native
//               antialiasing will produce less blurry results, but
//               may introduce more artifacts.
//////////////////////////////////////////////////////////////////// 2 4 this 3 792  16 native_antialias 1 774  
48 0 0 6 64 774 0 0 345 ////////////////////////////////////////////////////////////////////
//     Function: DynamicTextFont::get_native_antialias
//       Access: Published
//  Description: Returns whether Freetype's built-in antialias mode is
//               enabled.  See set_native_antialias().
//////////////////////////////////////////////////////////////////// 1 4 this 3 790  
49 0 0 6 65 765 0 0 715 ////////////////////////////////////////////////////////////////////
//     Function: DynamicTextFont::get_font_pixel_size
//       Access: Published
//  Description: This is used to report whether the requested pixel
//               size is being only approximated by a fixed-pixel-size
//               font.  This returns 0 in the normal case, in which a
//               scalable font is used, or the fixed-pixel-size font
//               has exactly the requested pixel size.
//
//               If this returns non-zero, it is the pixel size of the
//               font that we are using to approximate our desired
//               size.
//////////////////////////////////////////////////////////////////// 1 4 this 3 790  
50 0 0 6 66 772 0 0 303 ////////////////////////////////////////////////////////////////////
//     Function: DynamicTextFont::get_line_height
//       Access: Published
//  Description: Returns the number of units high each line of text
//               is.
//////////////////////////////////////////////////////////////////// 1 4 this 3 790  
51 0 0 6 67 772 0 0 278 ////////////////////////////////////////////////////////////////////
//     Function: DynamicTextFont::get_space_advance
//       Access: Published
//  Description: Returns the number of units wide a space is.
//////////////////////////////////////////////////////////////////// 1 4 this 3 790  
52 0 0 4 68 780 0 0 476 ////////////////////////////////////////////////////////////////////
//     Function: DynamicTextFont::set_texture_margin
//       Access: Published
//  Description: Sets the number of pixels of padding that is added
//               around the border of each glyph before adding it to
//               the texture map.  This reduces the bleed in from
//               neighboring glyphs in the texture map.
//////////////////////////////////////////////////////////////////// 2 4 this 3 792  14 texture_margin 1 765  
53 0 0 6 69 765 0 0 400 ////////////////////////////////////////////////////////////////////
//     Function: DynamicTextFont::get_texture_margin
//       Access: Published
//  Description: Returns the number of pixels of padding that is added
//               around the border of each glyph in the texture map.
//               See set_texture_margin().
//////////////////////////////////////////////////////////////////// 1 4 this 3 790  
54 0 0 4 70 780 0 0 794 ////////////////////////////////////////////////////////////////////
//     Function: DynamicTextFont::set_poly_margin
//       Access: Published
//  Description: Sets the number of pixels of padding that is included
//               around each glyph in the generated polygons.  This
//               helps prevent the edges of the glyphs from being cut
//               off at small minifications.  It is not related to the
//               amount of extra pixels reserved in the texture map
//               (but it should be set somewhat smaller than this
//               number, which is controlled by set_texture_margin(),
//               to prevent bleed-in from neighboring letters in the
//               texture).
//////////////////////////////////////////////////////////////////// 2 4 this 3 792  11 poly_margin 1 772  
55 0 0 6 71 772 0 0 390 ////////////////////////////////////////////////////////////////////
//     Function: DynamicTextFont::get_poly_margin
//       Access: Published
//  Description: Returns the number of pixels of padding that is
//               included around each glyph in the generated polygons.
//               See set_poly_margin().
//////////////////////////////////////////////////////////////////// 1 4 this 3 790  
56 0 0 4 72 780 0 0 323 ////////////////////////////////////////////////////////////////////
//     Function: DynamicTextFont::set_page_size
//       Access: Published
//  Description: Sets the x, y size of the textures that are created
//               for the DynamicTextFont.
//////////////////////////////////////////////////////////////////// 3 4 this 3 792  6 x_size 1 765  6 y_size 1 765  
57 0 0 6 73 765 0 0 347 ////////////////////////////////////////////////////////////////////
//     Function: DynamicTextFont::get_page_x_size
//       Access: Published
//  Description: Returns the x size of the textures that are created
//               for the DynamicTextFont.  See set_page_size().
//////////////////////////////////////////////////////////////////// 1 4 this 3 790  
58 0 0 6 74 765 0 0 347 ////////////////////////////////////////////////////////////////////
//     Function: DynamicTextFont::get_page_y_size
//       Access: Published
//  Description: Returns the y size of the textures that are created
//               for the DynamicTextFont.  See set_page_size().
//////////////////////////////////////////////////////////////////// 1 4 this 3 790  
59 0 0 4 75 780 0 0 324 ////////////////////////////////////////////////////////////////////
//     Function: DynamicTextFont::set_minfilter
//       Access: Published
//  Description: Sets the filter type used when minimizing the
//               textures created for this font.
//////////////////////////////////////////////////////////////////// 2 4 this 3 792  6 filter 1 797  
60 0 0 6 76 797 0 0 327 ////////////////////////////////////////////////////////////////////
//     Function: DynamicTextFont::get_minfilter
//       Access: Published
//  Description: Returns the filter type used when minimizing the
//               textures created for this font.
//////////////////////////////////////////////////////////////////// 1 4 this 3 790  
61 0 0 4 77 780 0 0 323 ////////////////////////////////////////////////////////////////////
//     Function: DynamicTextFont::set_magfilter
//       Access: Published
//  Description: Sets the filter type used when enlarging the
//               textures created for this font.
//////////////////////////////////////////////////////////////////// 2 4 this 3 792  6 filter 1 797  
62 0 0 6 78 797 0 0 326 ////////////////////////////////////////////////////////////////////
//     Function: DynamicTextFont::get_magfilter
//       Access: Published
//  Description: Returns the filter type used when enlarging the
//               textures created for this font.
//////////////////////////////////////////////////////////////////// 1 4 this 3 790  
63 0 0 4 79 780 0 0 482 ////////////////////////////////////////////////////////////////////
//     Function: DynamicTextFont::set_anisotropic_degree
//       Access: Published
//  Description: Enables or disables anisotropic filtering on the
//               textures created for this font.  The default value is
//               specified by the text-anisotropic-degree variable.
//               See Texture::set_anisotropic_degree().
//////////////////////////////////////////////////////////////////// 2 4 this 3 792  18 anisotropic_degree 1 765  
64 0 0 6 80 765 0 0 361 ////////////////////////////////////////////////////////////////////
//     Function: DynamicTextFont::get_anisotropic_degree
//       Access: Published
//  Description: Returns the current anisotropic degree for textures
//               created for this font.  See set_anisotropic_degree().
//////////////////////////////////////////////////////////////////// 1 4 this 3 790  
65 0 0 4 81 780 0 0 477 ////////////////////////////////////////////////////////////////////
//     Function: DynamicTextFont::set_render_mode
//       Access: Published
//  Description: Specifies the way the glyphs on this particular font
//               are generated.  The default is RM_texture, which is
//               the only mode supported for bitmap fonts. Other modes
//               are possible for most modern fonts.
//////////////////////////////////////////////////////////////////// 2 4 this 3 792  11 render_mode 1 743  
66 0 0 6 82 743 0 0 338 ////////////////////////////////////////////////////////////////////
//     Function: DynamicTextFont::get_render_mode
//       Access: Published
//  Description: Returns the way the glyphs on this particular font
//               are generated.  See set_render_mode().
//////////////////////////////////////////////////////////////////// 1 4 this 3 790  
67 0 0 4 83 780 0 0 539 ////////////////////////////////////////////////////////////////////
//     Function: DynamicTextFont::set_winding_order
//       Access: Published
//  Description: Specifies an explicitly winding order on this
//               particular font.  This is only necessary if the
//               render_mode is RM_polygon or RM_solid, and only if
//               FreeType appears to guess wrong on this font.
//               Normally, you should leave this at WO_default.
//////////////////////////////////////////////////////////////////// 2 4 this 3 792  13 winding_order 1 744  
68 0 0 6 84 744 0 0 288 ////////////////////////////////////////////////////////////////////
//     Function: DynamicTextFont::get_winding_order
//       Access: Published
//  Description: Returns the winding order set via set_winding_order().
//////////////////////////////////////////////////////////////////// 1 4 this 3 790  
69 0 0 4 85 780 0 0 832 ////////////////////////////////////////////////////////////////////
//     Function: DynamicTextFont::set_fg
//       Access: Published
//  Description: Changes the color of the foreground pixels of the
//               font as they are rendered into the font texture.  The
//               default is (1, 1, 1, 1), or opaque white, which
//               allows text created with the font to be colored
//               individually.  Normally, you would not change this
//               unless you really need a particular color effect to
//               appear in the font itself.
//
//               This should only be called before any characters have
//               been requested out of the font, or immediately after
//               calling clear().
//////////////////////////////////////////////////////////////////// 2 4 this 3 792  2 fg 1 799  
70 0 0 6 86 799 0 0 369 ////////////////////////////////////////////////////////////////////
//     Function: DynamicTextFont::get_fg
//       Access: Published
//  Description: Returns the color of the foreground pixels of the
//               font as they are rendered into the font texture.
//               See set_fg().
//////////////////////////////////////////////////////////////////// 1 4 this 3 790  
71 0 0 4 87 780 0 0 1079 ////////////////////////////////////////////////////////////////////
//     Function: DynamicTextFont::set_bg
//       Access: Published
//  Description: Changes the color of the background pixels of the
//               font as they are rendered into the font texture.  The
//               default is (1, 1, 1, 0), or transparent white, which
//               allows text created with the font to be colored
//               individually.  (Note that it should not generally be
//               (0, 0, 0, 0), which would tend to bleed into the
//               foreground color, unless you have also specified a
//               outline color of (0, 0, 0, 1)) .
//
//               Normally, you would not change this unless you really
//               need a particular color effect to appear in the font
//               itself.
//
//               This should only be called before any characters have
//               been requested out of the font, or immediately after
//               calling clear().
//////////////////////////////////////////////////////////////////// 2 4 this 3 792  2 bg 1 799  
72 0 0 6 88 799 0 0 369 ////////////////////////////////////////////////////////////////////
//     Function: DynamicTextFont::get_bg
//       Access: Published
//  Description: Returns the color of the background pixels of the
//               font as they are rendered into the font texture.
//               See set_bg().
//////////////////////////////////////////////////////////////////// 1 4 this 3 790  
73 0 0 4 89 780 0 0 1150 ////////////////////////////////////////////////////////////////////
//     Function: DynamicTextFont::set_outline
//       Access: Published
//  Description: Sets up the font to have an outline around each font
//               letter.  This is achieved via a Gaussian post-process
//               as each letter is generated; there is some runtime
//               cost for this effect, but it is minimal as each
//               letter is normally generated only once and then
//               cached.
//
//               The color is the desired color of the outline, width
//               is the number of points beyond the letter that the
//               outline extends (a typical font is 10 points high),
//               and feather is a number in the range 0.0 .. 1.0 that
//               controls the softness of the outline.  Set the width
//               to 0.0 to disable the outline.
//
//               This should only be called before any characters have
//               been requested out of the font, or immediately after
//               calling clear().
//////////////////////////////////////////////////////////////////// 4 4 this 3 792  13 outline_color 1 799  13 outline_width 1 772  15 outline_feather 1 772  
74 0 0 6 90 799 0 0 382 ////////////////////////////////////////////////////////////////////
//     Function: DynamicTextFont::get_outline_color
//       Access: Published
//  Description: Returns the color of the outline pixels of the
//               font as they are rendered into the font texture.
//               See set_outline().
//////////////////////////////////////////////////////////////////// 1 4 this 3 790  
75 0 0 6 91 772 0 0 383 ////////////////////////////////////////////////////////////////////
//     Function: DynamicTextFont::get_outline_width
//       Access: Published
//  Description: Returns the width of the outline pixels of the
//               font, as the number of points beyond each letter.
//               See set_outline().
//////////////////////////////////////////////////////////////////// 1 4 this 3 790  
76 0 0 6 92 772 0 0 380 ////////////////////////////////////////////////////////////////////
//     Function: DynamicTextFont::get_outline_feather
//       Access: Published
//  Description: Returns the softness of the outline pixels of the
//               font, as a value in the range 0.0 to 1.0.
//               See set_outline().
//////////////////////////////////////////////////////////////////// 1 4 this 3 790  
77 0 0 6 93 804 0 0 389 ////////////////////////////////////////////////////////////////////
//     Function: DynamicTextFont::get_tex_format
//       Access: Published
//  Description: Returns the texture format used to render the
//               individual pages.  This is set automatically
//               according to the colors selected.
//////////////////////////////////////////////////////////////////// 1 4 this 3 790  
78 0 0 6 94 765 0 0 607 ////////////////////////////////////////////////////////////////////
//     Function: DynamicTextFont::get_num_pages
//       Access: Published
//  Description: Returns the number of pages associated with the font.
//               Initially, the font has zero pages; when the first
//               piece of text is rendered with the font, it will add
//               additional pages as needed.  Each page is a Texture
//               object that contains the images for each of the
//               glyphs currently in use somewhere.
//////////////////////////////////////////////////////////////////// 1 4 this 3 790  
79 0 0 7 95 787 414 0 595 ////////////////////////////////////////////////////////////////////
//     Function: DynamicTextFont::get_page
//       Access: Published
//  Description: Returns the nth page associated with the font.
//               Initially, the font has zero pages; when the first
//               piece of text is rendered with the font, it will add
//               additional pages as needed.  Each page is a Texture
//               object that contains the images for each of the
//               glyphs currently in use somewhere.
//////////////////////////////////////////////////////////////////// 2 4 this 3 790  1 n 1 765  
80 0 0 6 96 765 0 0 388 ////////////////////////////////////////////////////////////////////
//     Function: DynamicTextFont::garbage_collect
//       Access: Published
//  Description: Removes all of the glyphs from the font that are no
//               longer being used by any Geoms.  Returns the number
//               of glyphs removed.
//////////////////////////////////////////////////////////////////// 1 4 this 3 792  
81 0 0 4 97 780 0 0 699 ////////////////////////////////////////////////////////////////////
//     Function: DynamicTextFont::clear
//       Access: Published
//  Description: Drops all the glyphs out of the cache and frees any
//               association with any previously-generated pages.
//
//               Calling this frequently can result in wasted texture
//               memory, as any previously rendered text will still
//               keep a pointer to the old, previously-generated
//               pages.  As long as the previously rendered text
//               remains around, the old pages will also remain
//               around.
//////////////////////////////////////////////////////////////////// 1 4 this 3 792  
82 0 0 4 98 780 0 0 230 ////////////////////////////////////////////////////////////////////
//     Function: DynamicTextFont::write
//       Access: Published, Virtual
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 790  3 out 1 781  12 indent_level 1 765  
83 0 0 7 99 776 0 0 0 0 
84 0 0 7 48 779 388 0 0 1 4 this 3 792  
85 0 0 7 49 792 420 0 0 1 4 this 3 779  
86 0 0 6 51 805 0 0 0 1 4 this 3 792  
87 0 0 7 52 792 420 0 0 1 4 this 3 805  
88 0 0 6 101 774 0 0 303 ////////////////////////////////////////////////////////////////////
//     Function: FontPool::has_font
//       Access: Public, Static
//  Description: Returns true if the font has ever been loaded,
//               false otherwise.
//////////////////////////////////////////////////////////////////// 1 8 filename 1 796  
89 0 0 6 102 774 0 0 590 ////////////////////////////////////////////////////////////////////
//     Function: FontPool::verify_font
//       Access: Public, Static
//  Description: Loads the given filename up into a font, if it has
//               not already been loaded, and returns true to indicate
//               success, or false to indicate failure.  If this
//               returns true, it is guaranteed that a subsequent call
//               to load_font() with the same font name will
//               return a valid Font pointer.
//////////////////////////////////////////////////////////////////// 1 8 filename 1 796  
90 0 0 7 103 779 388 0 524 ////////////////////////////////////////////////////////////////////
//     Function: FontPool::load_font
//       Access: Public, Static
//  Description: Loads the given filename up into a font, if it has
//               not already been loaded, and returns the new font.
//               If a font with the same filename was previously
//               loaded, returns that one instead.  If the font
//               file cannot be found, returns NULL.
//////////////////////////////////////////////////////////////////// 1 8 filename 1 796  
91 0 0 4 104 780 0 0 422 ////////////////////////////////////////////////////////////////////
//     Function: FontPool::add_font
//       Access: Public, Static
//  Description: Adds the indicated already-loaded font to the
//               pool.  The font will always replace any
//               previously-loaded font in the pool that had the
//               same filename.
//////////////////////////////////////////////////////////////////// 2 8 filename 1 796  4 font 1 779  
92 0 0 4 105 780 0 0 537 ////////////////////////////////////////////////////////////////////
//     Function: FontPool::release_font
//       Access: Public, Static
//  Description: Removes the indicated font from the pool,
//               indicating it will never be loaded again; the font
//               may then be freed.  If this function is never called,
//               a reference count will be maintained on every font
//               every loaded, and fonts will never be freed.
//////////////////////////////////////////////////////////////////// 1 8 filename 1 796  
93 0 0 4 106 780 0 0 321 ////////////////////////////////////////////////////////////////////
//     Function: FontPool::release_all_fonts
//       Access: Public, Static
//  Description: Releases all fonts in the pool and restores the
//               pool to the empty state.
//////////////////////////////////////////////////////////////////// 0 
94 0 0 6 107 765 0 0 465 ////////////////////////////////////////////////////////////////////
//     Function: FontPool::garbage_collect
//       Access: Public, Static
//  Description: Releases only those fonts in the pool that have a
//               reference count of exactly 1; i.e. only those
//               fonts that are not being used outside of the pool.
//               Returns the number of fonts released.
//////////////////////////////////////////////////////////////////// 0 
95 0 0 4 108 780 0 0 312 ////////////////////////////////////////////////////////////////////
//     Function: FontPool::list_contents
//       Access: Public, Static
//  Description: Lists the contents of the font pool to the
//               indicated output stream.
//////////////////////////////////////////////////////////////////// 1 3 out 1 781  
96 0 0 4 109 780 0 0 307 ////////////////////////////////////////////////////////////////////
//     Function: FontPool::write
//       Access: Published, Static
//  Description: Lists the contents of the font pool to the
//               indicated output stream.
//////////////////////////////////////////////////////////////////// 1 3 out 1 781  
97 0 0 7 113 776 0 0 0 0 
98 0 0 7 115 808 479 0 680 ////////////////////////////////////////////////////////////////////
//     Function: StaticTextFont::Constructor
//       Access: Published
//  Description: The constructor expects the root node to a model
//               generated via egg-mkfont, which consists of a set of
//               models, one per each character in the font.
//
//               If a CoordinateSystem value is specified, it informs
//               the font of the coordinate system in which this model
//               was generated.  "up" in this coordinate system will
//               be the direction of the top of the letters.
//////////////////////////////////////////////////////////////////// 2 8 font_def 1 806  2 cs 1 807  
99 0 0 7 116 776 0 0 0 0 
100 0 0 7 120 809 567 0 226 ////////////////////////////////////////////////////////////////////
//     Function: TextProperties::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
101 0 0 7 120 809 567 0 231 ////////////////////////////////////////////////////////////////////
//     Function: TextProperties::Copy Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 810  
102 0 0 6 121 809 0 0 0 2 4 this 3 809  4 copy 1 810  
103 0 0 6 122 774 0 0 0 2 4 this 3 810  5 other 1 810  
104 0 0 6 123 774 0 0 0 2 4 this 3 810  5 other 1 810  
105 0 0 4 124 780 0 0 377 ////////////////////////////////////////////////////////////////////
//     Function: TextProperties::clear
//       Access: Published
//  Description: Unsets all properties that have been specified so
//               far, and resets the TextProperties structure to its
//               initial empty state.
//////////////////////////////////////////////////////////////////// 1 4 this 3 809  
106 0 0 6 125 774 0 0 317 ////////////////////////////////////////////////////////////////////
//     Function: TextProperties::is_any_specified
//       Access: Published
//  Description: Returns true if any properties have been specified,
//               false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 810  
107 0 0 4 126 780 0 0 382 ////////////////////////////////////////////////////////////////////
//     Function: TextProperties::set_default_font
//       Access: Published, Static
//  Description: Specifies the default font to be used for any
//               TextNode whose font is uninitialized or NULL.  See
//               set_font().
//////////////////////////////////////////////////////////////////// 1 6 param0 0 779  
108 0 0 7 127 779 388 0 382 ////////////////////////////////////////////////////////////////////
//     Function: TextProperties::get_default_font
//       Access: Published, Static
//  Description: Specifies the default font to be used for any
//               TextNode whose font is uninitialized or NULL.  See
//               set_font().
//////////////////////////////////////////////////////////////////// 0 
109 0 0 4 128 780 0 0 404 ////////////////////////////////////////////////////////////////////
//     Function: TextProperties::set_font
//       Access: Published
//  Description: Sets the font that will be used when making text.  If
//               this is set to NULL, the default font will be used,
//               which can be set via set_default_font().
//////////////////////////////////////////////////////////////////// 2 4 this 3 809  4 font 1 779  
110 0 0 4 129 780 0 0 264 ////////////////////////////////////////////////////////////////////
//     Function: TextProperties::clear_font
//       Access: Published
//  Description: Restores the default font to the text.
//////////////////////////////////////////////////////////////////// 1 4 this 3 809  
111 0 0 6 130 774 0 0 223 ////////////////////////////////////////////////////////////////////
//     Function: TextProperties::has_font
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 810  
112 0 0 7 131 779 388 0 337 ////////////////////////////////////////////////////////////////////
//     Function: TextProperties::get_font
//       Access: Published
//  Description: Returns the font currently in use, if any.  If no
//               font is in use, this returns the default font.
//////////////////////////////////////////////////////////////////// 1 4 this 3 810  
113 0 0 4 132 780 0 0 1137 ////////////////////////////////////////////////////////////////////
//     Function: TextProperties::set_small_caps
//       Access: Published
//  Description: Sets the small_caps flag.  When this is set,
//               lowercase letters are generated as scaled-down
//               versions of their uppercase equivalents.  This is
//               particularly useful to set for fonts that do not have
//               lowercase letters.
//
//               It is also a good idea to set this for a (dynamic)
//               font that has already implemented lowercase letters
//               as scaled-down versions of their uppercase
//               equivalents, since without this flag the texture
//               memory may needlessly duplicate equivalent glyphs for
//               upper and lowercase letters.  Setting this flag
//               causes the texture memory to share the mixed-case
//               letters.
//
//               The amount by which the lowercase letters are scaled
//               is specified by set_small_caps_scale().
//////////////////////////////////////////////////////////////////// 2 4 this 3 809  10 small_caps 1 774  
114 0 0 4 133 780 0 0 231 ////////////////////////////////////////////////////////////////////
//     Function: TextProperties::clear_small_caps
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 809  
115 0 0 6 134 774 0 0 229 ////////////////////////////////////////////////////////////////////
//     Function: TextProperties::has_small_caps
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 810  
116 0 0 6 135 774 0 0 281 ////////////////////////////////////////////////////////////////////
//     Function: TextProperties::get_small_caps
//       Access: Published
//  Description: Returns the small_caps flag.  See set_small_caps().
//////////////////////////////////////////////////////////////////// 1 4 this 3 810  
117 0 0 4 136 780 0 0 481 ////////////////////////////////////////////////////////////////////
//     Function: TextProperties::set_small_caps_scale
//       Access: Published
//  Description: Sets the scale factor applied to lowercase letters
//               from their uppercase equivalents, when the small_caps
//               flag is in effect.  See set_small_caps().  Normally,
//               this will be a number less than one.
//////////////////////////////////////////////////////////////////// 2 4 this 3 809  16 small_caps_scale 1 772  
118 0 0 4 137 780 0 0 237 ////////////////////////////////////////////////////////////////////
//     Function: TextProperties::clear_small_caps_scale
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 809  
119 0 0 6 138 774 0 0 235 ////////////////////////////////////////////////////////////////////
//     Function: TextProperties::has_small_caps_scale
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 810  
120 0 0 6 139 772 0 0 463 ////////////////////////////////////////////////////////////////////
//     Function: TextProperties::get_small_caps_scale
//       Access: Published
//  Description: Returns the scale factor applied to lowercase letters
//               from their uppercase equivalents, when the small_caps
//               flag is in effect.  See set_small_caps() and
//               set_small_caps_scale().
//////////////////////////////////////////////////////////////////// 1 4 this 3 810  
121 0 0 4 140 780 0 0 301 ////////////////////////////////////////////////////////////////////
//     Function: TextProperties::set_slant
//       Access: Published
//  Description: Specifies the factor by which the text slants to the
//               right.
//////////////////////////////////////////////////////////////////// 2 4 this 3 809  5 slant 1 772  
122 0 0 4 141 780 0 0 227 ////////////////////////////////////////////////////////////////////
//     Function: TextProperties::clear_slant
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 809  
123 0 0 6 142 774 0 0 224 ////////////////////////////////////////////////////////////////////
//     Function: TextProperties::has_slant
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 810  
124 0 0 6 143 772 0 0 314 ////////////////////////////////////////////////////////////////////
//     Function: TextProperties::get_slant
//       Access: Published
//  Description: Returns the factor by which the text is specified to
//               slant to the right.
//////////////////////////////////////////////////////////////////// 1 4 this 3 810  
125 0 0 4 144 780 0 0 433 ////////////////////////////////////////////////////////////////////
//     Function: TextProperties::set_underscore
//       Access: Published
//  Description: Sets the underscore flag.  When this is set,
//               the text is underscored with a one-pixel line the
//               same color as the text foreground, drawn at the
//               baseline.
//////////////////////////////////////////////////////////////////// 2 4 this 3 809  10 underscore 1 774  
126 0 0 4 145 780 0 0 231 ////////////////////////////////////////////////////////////////////
//     Function: TextProperties::clear_underscore
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 809  
127 0 0 6 146 774 0 0 229 ////////////////////////////////////////////////////////////////////
//     Function: TextProperties::has_underscore
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 810  
128 0 0 6 147 774 0 0 281 ////////////////////////////////////////////////////////////////////
//     Function: TextProperties::get_underscore
//       Access: Published
//  Description: Returns the underscore flag.  See set_underscore().
//////////////////////////////////////////////////////////////////// 1 4 this 3 810  
129 0 0 4 148 780 0 0 447 ////////////////////////////////////////////////////////////////////
//     Function: TextProperties::set_underscore_height
//       Access: Published
//  Description: Specifies the vertical height of the underscore,
//               relative to the text baseline.  This only has meaning
//               if the underscore mode is enabled with
//               set_underscore().
//////////////////////////////////////////////////////////////////// 2 4 this 3 809  17 underscore_height 1 772  
130 0 0 4 149 780 0 0 239 ////////////////////////////////////////////////////////////////////
//     Function: TextProperties::clear_underscore_height
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 809  
131 0 0 6 150 774 0 0 236 ////////////////////////////////////////////////////////////////////
//     Function: TextProperties::has_underscore_height
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 810  
132 0 0 6 151 772 0 0 329 ////////////////////////////////////////////////////////////////////
//     Function: TextProperties::get_underscore_height
//       Access: Published
//  Description: Returns the vertical height of the underscore; see
//               set_underscore_height().
//////////////////////////////////////////////////////////////////// 1 4 this 3 810  
133 0 0 4 152 780 0 0 297 ////////////////////////////////////////////////////////////////////
//     Function: TextProperties::set_align
//       Access: Published
//  Description: Specifies the alignment of the text within its
//               margins.
//////////////////////////////////////////////////////////////////// 2 4 this 3 809  10 align_type 1 755  
134 0 0 4 153 780 0 0 270 ////////////////////////////////////////////////////////////////////
//     Function: TextProperties::clear_align
//       Access: Published
//  Description: Restores the default alignment of the text.
//////////////////////////////////////////////////////////////////// 1 4 this 3 809  
135 0 0 6 154 774 0 0 224 ////////////////////////////////////////////////////////////////////
//     Function: TextProperties::has_align
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 810  
136 0 0 6 155 755 0 0 224 ////////////////////////////////////////////////////////////////////
//     Function: TextProperties::get_align
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 810  
137 0 0 4 156 780 0 0 395 ////////////////////////////////////////////////////////////////////
//     Function: TextProperties::set_indent
//       Access: Published
//  Description: Specifies the amount of extra space that is inserted
//               before the first character of each line.  This can be
//               thought of as a left margin.
//////////////////////////////////////////////////////////////////// 2 4 this 3 809  6 indent 1 772  
138 0 0 4 157 780 0 0 318 ////////////////////////////////////////////////////////////////////
//     Function: TextProperties::clear_indent
//       Access: Published
//  Description: Removes the indent setting from the text.  Text
//               will be as wide as it is.
//////////////////////////////////////////////////////////////////// 1 4 this 3 809  
139 0 0 6 158 774 0 0 225 ////////////////////////////////////////////////////////////////////
//     Function: TextProperties::has_indent
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 810  
140 0 0 6 159 772 0 0 225 ////////////////////////////////////////////////////////////////////
//     Function: TextProperties::get_indent
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 810  
141 0 0 4 160 780 0 0 400 ////////////////////////////////////////////////////////////////////
//     Function: TextProperties::set_wordwrap
//       Access: Published
//  Description: Sets the text up to automatically wordwrap when it
//               exceeds the indicated width.  This can be thought of
//               as a right margin or margin width.
//////////////////////////////////////////////////////////////////// 2 4 this 3 809  8 wordwrap 1 772  
142 0 0 4 161 780 0 0 322 ////////////////////////////////////////////////////////////////////
//     Function: TextProperties::clear_wordwrap
//       Access: Published
//  Description: Removes the wordwrap setting from the text.  Text
//               will be as wide as it is.
//////////////////////////////////////////////////////////////////// 1 4 this 3 809  
143 0 0 6 162 774 0 0 227 ////////////////////////////////////////////////////////////////////
//     Function: TextProperties::has_wordwrap
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 810  
144 0 0 6 163 772 0 0 227 ////////////////////////////////////////////////////////////////////
//     Function: TextProperties::get_wordwrap
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 810  
145 0 0 4 164 780 0 0 671 ////////////////////////////////////////////////////////////////////
//     Function: TextProperties::set_preserve_trailing_whitespace
//       Access: Published
//  Description: Sets the preserve_trailing_whitespace flag.  When
//               this is set, trailing whitespace at the end of the
//               line is not stripped when the text is wordwrapped (it
//               is stripped by default).  Since the trailing
//               whitespace is invisible, this is important primarily
//               for determining the proper width of a frame or card
//               behind the text.
//////////////////////////////////////////////////////////////////// 2 4 this 3 809  28 preserve_trailing_whitespace 1 774  
146 0 0 4 165 780 0 0 249 ////////////////////////////////////////////////////////////////////
//     Function: TextProperties::clear_preserve_trailing_whitespace
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 809  
147 0 0 6 166 774 0 0 247 ////////////////////////////////////////////////////////////////////
//     Function: TextProperties::has_preserve_trailing_whitespace
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 810  
148 0 0 6 167 774 0 0 352 ////////////////////////////////////////////////////////////////////
//     Function: TextProperties::get_preserve_trailing_whitespace
//       Access: Published
//  Description: Returns the preserve_trailing_whitespace flag.  See
//               set_preserve_trailing_whitespace().
//////////////////////////////////////////////////////////////////// 1 4 this 3 810  
149 0 0 4 168 780 0 0 229 ////////////////////////////////////////////////////////////////////
//     Function: TextProperties::set_text_color
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 809  10 text_color 1 799  
150 0 0 4 168 780 0 0 229 ////////////////////////////////////////////////////////////////////
//     Function: TextProperties::set_text_color
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 5 4 this 3 809  1 r 1 772  1 g 1 772  1 b 1 772  1 a 1 772  
151 0 0 4 169 780 0 0 352 ////////////////////////////////////////////////////////////////////
//     Function: TextProperties::clear_text_color
//       Access: Published
//  Description: Removes the text color specification; the text will
//               be colored whatever it was in the source font file.
//////////////////////////////////////////////////////////////////// 1 4 this 3 809  
152 0 0 6 170 774 0 0 229 ////////////////////////////////////////////////////////////////////
//     Function: TextProperties::has_text_color
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 810  
153 0 0 7 171 812 0 0 229 ////////////////////////////////////////////////////////////////////
//     Function: TextProperties::get_text_color
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 810  
154 0 0 4 172 780 0 0 231 ////////////////////////////////////////////////////////////////////
//     Function: TextProperties::set_shadow_color
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 809  12 shadow_color 1 799  
155 0 0 4 172 780 0 0 231 ////////////////////////////////////////////////////////////////////
//     Function: TextProperties::set_shadow_color
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 5 4 this 3 809  1 r 1 772  1 g 1 772  1 b 1 772  1 a 1 772  
156 0 0 4 173 780 0 0 273 ////////////////////////////////////////////////////////////////////
//     Function: TextProperties::clear_shadow_color
//       Access: Published
//  Description: Removes the shadow color specification.
//////////////////////////////////////////////////////////////////// 1 4 this 3 809  
157 0 0 6 174 774 0 0 231 ////////////////////////////////////////////////////////////////////
//     Function: TextProperties::has_shadow_color
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 810  
158 0 0 7 175 812 0 0 231 ////////////////////////////////////////////////////////////////////
//     Function: TextProperties::get_shadow_color
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 810  
159 0 0 4 176 780 0 0 397 ////////////////////////////////////////////////////////////////////
//     Function: TextProperties::set_shadow
//       Access: Published
//  Description: Specifies that the text should be drawn with a
//               shadow, by creating a second copy of the text and
//               offsetting it slightly behind the first.
//////////////////////////////////////////////////////////////////// 2 4 this 3 809  13 shadow_offset 1 813  
160 0 0 4 176 780 0 0 397 ////////////////////////////////////////////////////////////////////
//     Function: TextProperties::set_shadow
//       Access: Published
//  Description: Specifies that the text should be drawn with a
//               shadow, by creating a second copy of the text and
//               offsetting it slightly behind the first.
//////////////////////////////////////////////////////////////////// 3 4 this 3 809  7 xoffset 1 772  7 yoffset 1 772  
161 0 0 4 177 780 0 0 303 ////////////////////////////////////////////////////////////////////
//     Function: TextProperties::clear_shadow
//       Access: Published
//  Description: Specifies that a shadow will not be drawn behind the
//               text.
//////////////////////////////////////////////////////////////////// 1 4 this 3 809  
162 0 0 6 178 774 0 0 225 ////////////////////////////////////////////////////////////////////
//     Function: TextProperties::has_shadow
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 810  
163 0 0 7 179 819 0 0 371 ////////////////////////////////////////////////////////////////////
//     Function: TextProperties::get_shadow
//       Access: Published
//  Description: Returns the offset of the shadow as set by
//               set_shadow().  It is an error to call this if
//               has_shadow() is false.
//////////////////////////////////////////////////////////////////// 1 4 this 3 810  
164 0 0 4 180 780 0 0 649 ////////////////////////////////////////////////////////////////////
//     Function: TextProperties::set_bin
//       Access: Published
//  Description: Names the CullBin that the text geometry should be
//               assigned to.  If this is set, then a CullBinAttrib
//               will be created to explicitly place each component in
//               the named bin.
//
//               The draw_order value will also be passed to each
//               CullBinAttrib as appropriate; this is particularly
//               useful if this names a CullBinFixed, e.g. "fixed".
//////////////////////////////////////////////////////////////////// 2 4 this 3 809  3 bin 1 796  
165 0 0 4 181 780 0 0 420 ////////////////////////////////////////////////////////////////////
//     Function: TextProperties::clear_bin
//       Access: Published
//  Description: Removes the effect of a previous call to
//               set_bin().  Text will be drawn in whatever bin
//               it would like to be drawn in, with no explicit
//               ordering.
//////////////////////////////////////////////////////////////////// 1 4 this 3 809  
166 0 0 6 182 774 0 0 324 ////////////////////////////////////////////////////////////////////
//     Function: TextProperties::has_bin
//       Access: Published
//  Description: Returns true if an explicit drawing bin has been
//               set via set_bin(), false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 810  
167 0 0 6 183 796 0 0 323 ////////////////////////////////////////////////////////////////////
//     Function: TextProperties::get_bin
//       Access: Published
//  Description: Returns the drawing bin set with set_bin(), or empty
//               string if no bin has been set.
//////////////////////////////////////////////////////////////////// 1 4 this 3 810  
168 0 0 6 184 765 0 0 771 ////////////////////////////////////////////////////////////////////
//     Function: TextProperties::set_draw_order
//       Access: Published
//  Description: Sets the drawing order of text created by the
//               TextNode.  This is actually the draw order of the
//               card and frame.  The shadow is drawn at
//               _draw_order+1, and the text at _draw_order+2.
//
//               This affects the sorting order assigned to the nodes
//               as they are created, and also is passed to whatever
//               bin may be assigned via set_bin().
//
//               The return value is the first unused draw_order
//               number, e.g. _draw_order + 3.
//////////////////////////////////////////////////////////////////// 2 4 this 3 809  10 draw_order 1 765  
169 0 0 4 185 780 0 0 232 ////////////////////////////////////////////////////////////////////
//     Function: TextProperties::clear_draw_order
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 809  
170 0 0 6 186 774 0 0 229 ////////////////////////////////////////////////////////////////////
//     Function: TextProperties::has_draw_order
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 810  
171 0 0 6 187 765 0 0 282 ////////////////////////////////////////////////////////////////////
//     Function: TextProperties::get_draw_order
//       Access: Published
//  Description: Returns the drawing order set with set_draw_order().
//////////////////////////////////////////////////////////////////// 1 4 this 3 810  
172 0 0 4 188 780 0 0 409 ////////////////////////////////////////////////////////////////////
//     Function: TextProperties::set_tab_width
//       Access: Published
//  Description: Sets the width of each tab stop, in screen units.  A
//               tab character embedded in the text will advance the
//               horizontal position to the next tab stop.
//////////////////////////////////////////////////////////////////// 2 4 this 3 809  9 tab_width 1 772  
173 0 0 4 189 780 0 0 231 ////////////////////////////////////////////////////////////////////
//     Function: TextProperties::clear_tab_width
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 809  
174 0 0 6 190 774 0 0 228 ////////////////////////////////////////////////////////////////////
//     Function: TextProperties::has_tab_width
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 810  
175 0 0 6 191 772 0 0 271 ////////////////////////////////////////////////////////////////////
//     Function: TextProperties::get_tab_width
//       Access: Published
//  Description: Returns the width set via set_tab_width().
//////////////////////////////////////////////////////////////////// 1 4 this 3 810  
176 0 0 4 192 780 0 0 962 ////////////////////////////////////////////////////////////////////
//     Function: TextProperties::set_glyph_scale
//       Access: Published
//  Description: Specifies the factor by which to scale each letter of
//               the text as it is placed, in addition to any scales
//               inherited from the node or from set_text_scale().
//               This can be used (possibly in conjunction with
//               set_glyph_shift()) to implement superscripting or
//               subscripting.
//
//               The glyph scale is cumulative when applied to nested
//               TextProperties.  It is intended primarily for
//               implementing superscripts, not for scaling the text
//               in general.  See also set_text_scale(), which is
//               intended primarily for scaling the text in general,
//               and is not cumulative.
//////////////////////////////////////////////////////////////////// 2 4 this 3 809  11 glyph_scale 1 772  
177 0 0 4 193 780 0 0 233 ////////////////////////////////////////////////////////////////////
//     Function: TextProperties::clear_glyph_scale
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 809  
178 0 0 6 194 774 0 0 230 ////////////////////////////////////////////////////////////////////
//     Function: TextProperties::has_glyph_scale
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 810  
179 0 0 6 195 772 0 0 322 ////////////////////////////////////////////////////////////////////
//     Function: TextProperties::get_glyph_scale
//       Access: Published
//  Description: Returns the scale factor of each letter as specified
//               by set_glyph_scale().
//////////////////////////////////////////////////////////////////// 1 4 this 3 810  
180 0 0 4 196 780 0 0 471 ////////////////////////////////////////////////////////////////////
//     Function: TextProperties::set_glyph_shift
//       Access: Published
//  Description: Specifies a vertical amount to shift each letter of
//               the text as it is placed.  This can be used (possibly
//               in conjunction with set_glyph_scale()) to implement
//               superscripting or subscripting.
//////////////////////////////////////////////////////////////////// 2 4 this 3 809  11 glyph_shift 1 772  
181 0 0 4 197 780 0 0 233 ////////////////////////////////////////////////////////////////////
//     Function: TextProperties::clear_glyph_shift
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 809  
182 0 0 6 198 774 0 0 230 ////////////////////////////////////////////////////////////////////
//     Function: TextProperties::has_glyph_shift
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 810  
183 0 0 6 199 772 0 0 324 ////////////////////////////////////////////////////////////////////
//     Function: TextProperties::get_glyph_shift
//       Access: Published
//  Description: Returns the vertical shift of each letter as
//               specified by set_glyph_shift().
//////////////////////////////////////////////////////////////////// 1 4 this 3 810  
184 0 0 4 200 780 0 0 580 ////////////////////////////////////////////////////////////////////
//     Function: TextProperties::set_text_scale
//       Access: Published
//  Description: Specifies the factor by which to scale the text, in
//               addition to any scalings imposed by the node, as well
//               as in addition to the glyph scale.
//
//               The text scale is not cumulative when applied to
//               nested TextProperties.  See also set_glyph_scale(),
//               which is cumulative.
//////////////////////////////////////////////////////////////////// 2 4 this 3 809  10 text_scale 1 772  
185 0 0 4 201 780 0 0 232 ////////////////////////////////////////////////////////////////////
//     Function: TextProperties::clear_text_scale
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 809  
186 0 0 6 202 774 0 0 229 ////////////////////////////////////////////////////////////////////
//     Function: TextProperties::has_text_scale
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 810  
187 0 0 6 203 772 0 0 317 ////////////////////////////////////////////////////////////////////
//     Function: TextProperties::get_text_scale
//       Access: Published
//  Description: Returns the scale factor of the text as specified
//               by set_text_scale().
//////////////////////////////////////////////////////////////////// 1 4 this 3 810  
188 0 0 4 204 780 0 0 374 ////////////////////////////////////////////////////////////////////
//     Function: TextProperties::add_properties
//       Access: Published
//  Description: Sets any properties that are explicitly specified in
//               other on this object.  Leaves other properties
//               unchanged.
//////////////////////////////////////////////////////////////////// 2 4 this 3 809  5 other 1 810  
189 0 0 4 205 780 0 0 220 ////////////////////////////////////////////////////////////////////
//     Function: TextProperties::write
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 810  3 out 1 781  12 indent_level 1 765  
190 0 0 7 206 776 0 0 0 0 
191 0 0 7 209 820 575 0 223 ////////////////////////////////////////////////////////////////////
//     Function: TextGraphic::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
192 0 0 7 209 820 575 0 223 ////////////////////////////////////////////////////////////////////
//     Function: TextGraphic::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 5 model 1 821  5 frame 1 824  
193 0 0 7 209 820 575 0 223 ////////////////////////////////////////////////////////////////////
//     Function: TextGraphic::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 5 5 model 1 821  4 left 1 772  5 right 1 772  6 bottom 1 772  3 top 1 772  
194 0 0 7 210 829 0 0 320 ////////////////////////////////////////////////////////////////////
//     Function: TextGraphic::get_model
//       Access: Published
//  Description: Returns the NodePath associated with the graphic,
//               that renders the desired image.
//////////////////////////////////////////////////////////////////// 1 4 this 3 827  
195 0 0 4 211 780 0 0 387 ////////////////////////////////////////////////////////////////////
//     Function: TextGraphic::set_model
//       Access: Published
//  Description: Changes the NodePath associated with the graphic.
//               This NodePath should contain geometry that will
//               render the desired graphic image.
//////////////////////////////////////////////////////////////////// 2 4 this 3 820  5 model 1 821  
196 0 0 7 212 830 0 0 786 ////////////////////////////////////////////////////////////////////
//     Function: TextGraphic::get_frame
//       Access: Published
//  Description: Returns the frame specified for the graphic.  This is
//               the amount of space that will be reserved for the
//               graphic when it is embedded in a text paragraph, in
//               the form (left, right, bottom, top).
//
//               The actual graphic, as rendered by the NodePath
//               specified via set_model(), should more or less fit
//               within this rectangle.  It is not required to fit
//               completely within it, but if it does not, it may
//               visually overlap with nearby text.
//////////////////////////////////////////////////////////////////// 1 4 this 3 827  
197 0 0 4 213 780 0 0 329 ////////////////////////////////////////////////////////////////////
//     Function: TextGraphic::set_frame
//       Access: Published
//  Description: Specifies the (left, right, bottom, top) bounding
//               frame for the graphic.  See get_frame().
//////////////////////////////////////////////////////////////////// 2 4 this 3 820  5 frame 1 824  
198 0 0 4 213 780 0 0 329 ////////////////////////////////////////////////////////////////////
//     Function: TextGraphic::set_frame
//       Access: Published
//  Description: Specifies the (left, right, bottom, top) bounding
//               frame for the graphic.  See get_frame().
//////////////////////////////////////////////////////////////////// 5 4 this 3 820  4 left 1 772  5 right 1 772  6 bottom 1 772  3 top 1 772  
199 0 0 6 214 774 0 0 282 ////////////////////////////////////////////////////////////////////
//     Function: TextGraphic::get_instance_flag
//       Access: Published
//  Description: Returns the instance_flag.  See set_instance_flag().
//////////////////////////////////////////////////////////////////// 1 4 this 3 827  
200 0 0 4 215 780 0 0 664 ////////////////////////////////////////////////////////////////////
//     Function: TextGraphic::set_instance_flag
//       Access: Published
//  Description: Sets the instance_flag.  When this is true, the
//               graphic is directly instanced to the scene graph
//               whenever it appears; when it is false, the graphic is
//               copied.  The default is false, which is best for most
//               applications.  You might need to set it true for
//               special kinds of "graphics" like interactive
//               elements, for instance a PGEntry.
//////////////////////////////////////////////////////////////////// 2 4 this 3 820  13 instance_flag 1 774  
201 0 0 4 218 780 0 0 707 ////////////////////////////////////////////////////////////////////
//     Function: TextPropertiesManager::set_properties
//       Access: Published
//  Description: Defines the TextProperties associated with the
//               indicated name.  When the name is subsequently
//               encountered in text embedded between \1 characters in
//               a TextNode string, the following text will be
//               rendered with these properties.
//
//               If there was already a TextProperties structure
//               associated with this name, it is quietly replaced
//               with the new definition.
//////////////////////////////////////////////////////////////////// 3 4 this 3 831  4 name 1 796  10 properties 1 810  
202 0 0 7 219 809 567 0 668 ////////////////////////////////////////////////////////////////////
//     Function: TextPropertiesManager::get_properties
//       Access: Published
//  Description: Returns the TextProperties associated with the
//               indicated name.  If there was not previously a
//               TextProperties associated with this name, a warning
//               is printed and then a default TextProperties
//               structure is associated with the name, and returned.
//
//               Call has_properties() instead to check whether a
//               particular name has been defined.
//////////////////////////////////////////////////////////////////// 2 4 this 3 831  4 name 1 796  
203 0 0 6 220 774 0 0 687 ////////////////////////////////////////////////////////////////////
//     Function: TextPropertiesManager::has_properties
//       Access: Published
//  Description: Returns true if a TextProperties structure has been
//               associated with the indicated name, false otherwise.
//               Normally this means set_properties() has been called
//               with this name, but because get_properties() will
//               implicitly create a default TextProperties structure,
//               it may also mean simply that get_properties() has
//               been called with the indicated name.
//////////////////////////////////////////////////////////////////// 2 4 this 3 832  4 name 1 796  
204 0 0 4 221 780 0 0 316 ////////////////////////////////////////////////////////////////////
//     Function: TextPropertiesManager::clear_properties
//       Access: Published
//  Description: Removes the named TextProperties structure from the
//               manager.
//////////////////////////////////////////////////////////////////// 2 4 this 3 831  4 name 1 796  
205 0 0 4 222 780 0 0 570 ////////////////////////////////////////////////////////////////////
//     Function: TextPropertiesManager::set_graphic
//       Access: Published
//  Description: This flavor of set_graphic implicitly creates a frame
//               for the model using the model's actual computed
//               bounding volume, as derived from
//               NodePath::calc_tight_bounds().  Create a TextGraphic
//               object first if you want to have explicit control of
//               the frame.
//////////////////////////////////////////////////////////////////// 3 4 this 3 831  4 name 1 796  5 model 1 821  
206 0 0 4 222 780 0 0 705 ////////////////////////////////////////////////////////////////////
//     Function: TextPropertiesManager::set_graphic
//       Access: Published
//  Description: Defines the TextGraphic associated with the
//               indicated name.  When the name is subsequently
//               encountered in text embedded between \5 characters in
//               a TextNode string, the specified graphic will be
//               embedded in the text at that point.
//
//               If there was already a TextGraphic structure
//               associated with this name, it is quietly replaced
//               with the new definition.
//////////////////////////////////////////////////////////////////// 3 4 this 3 831  4 name 1 796  7 graphic 1 827  
207 0 0 7 223 820 575 0 653 ////////////////////////////////////////////////////////////////////
//     Function: TextPropertiesManager::get_graphic
//       Access: Published
//  Description: Returns the TextGraphic associated with the
//               indicated name.  If there was not previously a
//               TextGraphic associated with this name, a warning
//               is printed and then a default TextGraphic
//               structure is associated with the name, and returned.
//
//               Call has_graphic() instead to check whether a
//               particular name has been defined.
//////////////////////////////////////////////////////////////////// 2 4 this 3 831  4 name 1 796  
208 0 0 6 224 774 0 0 669 ////////////////////////////////////////////////////////////////////
//     Function: TextPropertiesManager::has_graphic
//       Access: Published
//  Description: Returns true if a TextGraphic structure has been
//               associated with the indicated name, false otherwise.
//               Normally this means set_graphic() has been called
//               with this name, but because get_graphic() will
//               implicitly create a default TextGraphic structure,
//               it may also mean simply that get_graphic() has
//               been called with the indicated name.
//////////////////////////////////////////////////////////////////// 2 4 this 3 832  4 name 1 796  
209 0 0 4 225 780 0 0 310 ////////////////////////////////////////////////////////////////////
//     Function: TextPropertiesManager::clear_graphic
//       Access: Published
//  Description: Removes the named TextGraphic structure from the
//               manager.
//////////////////////////////////////////////////////////////////// 2 4 this 3 831  4 name 1 796  
210 0 0 4 226 780 0 0 228 ////////////////////////////////////////////////////////////////////
//     Function: TextPropertiesManager::write
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 3 4 this 3 832  3 out 1 781  12 indent_level 1 765  
211 0 0 6 227 831 0 0 325 ////////////////////////////////////////////////////////////////////
//     Function: TextPropertiesManager::get_global_ptr
//       Access: Published, Static
//  Description: Returns the pointer to the global TextPropertiesManager
//               object.
//////////////////////////////////////////////////////////////////// 0 
212 0 0 7 229 836 588 0 231 ////////////////////////////////////////////////////////////////////
//     Function: TextAssembler::Copy Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 copy 1 834  
213 0 0 7 229 836 588 0 226 ////////////////////////////////////////////////////////////////////
//     Function: TextAssembler::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 7 encoder 1 837  
214 0 0 6 230 836 0 0 0 2 4 this 3 836  4 copy 1 834  
215 0 0 4 232 780 0 0 268 ////////////////////////////////////////////////////////////////////
//     Function: TextAssembler::clear
//       Access: Published
//  Description: Reinitializes the contents of the TextAssembler.
//////////////////////////////////////////////////////////////////// 1 4 this 3 836  
216 0 0 4 233 780 0 0 572 ////////////////////////////////////////////////////////////////////
//     Function: TextAssembler::set_usage_hint
//       Access: Published
//  Description: Specifies the UsageHint that will be applied to
//               generated geometry.  The default is UH_static, which
//               is probably the right setting, but if you know the
//               TextNode's geometry will have a short lifespan, it
//               may be better to set it to UH_stream.  See
//               geomEnums.h.
//////////////////////////////////////////////////////////////////// 2 4 this 3 836  10 usage_hint 1 766  
217 0 0 6 234 766 0 0 334 ////////////////////////////////////////////////////////////////////
//     Function: TextAssembler::get_usage_hint
//       Access: Published
//  Description: Returns the UsageHint that will be applied to
//               generated geometry.  See set_usage_hint().
//////////////////////////////////////////////////////////////////// 1 4 this 3 834  
218 0 0 4 235 780 0 0 557 ////////////////////////////////////////////////////////////////////
//     Function: TextAssembler::set_max_rows
//       Access: Published
//  Description: If max_rows is greater than zero, no more than
//               max_rows will be accepted.  Text beyond that will be
//               truncated.
//
//               Setting this will not truncate text immediately.  You
//               must follow this up with a call to set_wtext() to
//               truncate the existing text.
//////////////////////////////////////////////////////////////////// 2 4 this 3 836  8 max_rows 1 765  
219 0 0 6 236 765 0 0 371 ////////////////////////////////////////////////////////////////////
//     Function: TextAssembler::get_max_rows
//       Access: Published
//  Description: If max_rows is greater than zero, no more than
//               max_rows will be accepted.  Text beyond that will be
//               truncated.
//////////////////////////////////////////////////////////////////// 1 4 this 3 834  
220 0 0 4 237 780 0 0 313 ////////////////////////////////////////////////////////////////////
//     Function: TextAssembler::set_dynamic_merge
//       Access: Published
//  Description: Sets the dynamic_merge flag.  See
//               TextNode::set_flatten_flags().
//////////////////////////////////////////////////////////////////// 2 4 this 3 836  13 dynamic_merge 1 774  
221 0 0 6 238 774 0 0 316 ////////////////////////////////////////////////////////////////////
//     Function: TextAssembler::get_dynamic_merge
//       Access: Published
//  Description: Returns the dynamic_merge flag.  See
//               TextNode::set_flatten_flags().
//////////////////////////////////////////////////////////////////// 1 4 this 3 834  
222 0 0 4 239 780 0 0 346 ////////////////////////////////////////////////////////////////////
//     Function: TextAssembler::set_multiline_mode
//       Access: Published
//  Description: Sets the multiline mode flag. Set the multiline
//               mode to allow text to wrap. It defaults to true.
//////////////////////////////////////////////////////////////////// 2 4 this 3 836  4 flag 1 774  
223 0 0 6 240 774 0 0 318 ////////////////////////////////////////////////////////////////////
//     Function: TextAssembler::get_multiline_mode
//       Access: Published
//  Description: Returns the multline_mode flag.  See
//               TextNode::set_multiline_mode().
//////////////////////////////////////////////////////////////////// 1 4 this 3 834  
224 0 0 4 241 780 0 0 384 ////////////////////////////////////////////////////////////////////
//     Function: TextAssembler::set_properties
//       Access: Published
//  Description: Specifies the default TextProperties that are applied
//               to the text in the absence of any nested property
//               change sequences.
//////////////////////////////////////////////////////////////////// 2 4 this 3 836  10 properties 1 810  
225 0 0 6 242 810 0 0 382 ////////////////////////////////////////////////////////////////////
//     Function: TextAssembler::get_properties
//       Access: Published
//  Description: Returns the default TextProperties that are applied
//               to the text in the absence of any nested property
//               change sequences.
//////////////////////////////////////////////////////////////////// 1 4 this 3 834  
226 0 0 6 242 810 0 0 371 ////////////////////////////////////////////////////////////////////
//     Function: TextAssembler::get_properties
//       Access: Published
//  Description: Returns the TextProperties in effect for the object
//               at the indicated position in the pre-wordwrapped
//               string.
//////////////////////////////////////////////////////////////////// 2 4 this 3 834  1 n 1 765  
227 0 0 6 242 810 0 0 345 ////////////////////////////////////////////////////////////////////
//     Function: TextAssembler::get_properties
//       Access: Published
//  Description: Returns the TextProperties in effect for the object
//               at the indicated position in the indicated row.
//////////////////////////////////////////////////////////////////// 3 4 this 3 834  1 r 1 765  1 c 1 765  
228 0 0 6 243 774 0 0 629 ////////////////////////////////////////////////////////////////////
//     Function: TextAssembler::set_wtext
//       Access: Published
//  Description: Accepts a new text string and associated properties
//               structure, and precomputes the wordwrapping layout
//               appropriately.  After this call,
//               get_wordwrapped_wtext() and get_num_rows() can be
//               called.
//
//               The return value is true if all the text is accepted,
//               or false if some was truncated (see set_max_rows()).
//////////////////////////////////////////////////////////////////// 2 4 this 3 836  5 wtext 1 796  
229 0 0 6 244 774 0 0 956 ////////////////////////////////////////////////////////////////////
//     Function: TextAssembler::set_wsubstr
//       Access: Published
//  Description: Replaces the 'count' characters from 'start' of the
//               current text with the indicated replacement text.  If
//               the replacement text does not have count characters,
//               the length of the string will be changed accordingly.
//
//               The substring may include nested formatting
//               characters, but they must be self-contained and
//               self-closed.  The formatting characters are not
//               literally saved in the internal string; they are
//               parsed at the time of the set_wsubstr() call.
//
//               The return value is true if all the text is accepted,
//               or false if some was truncated (see set_max_rows()).
//////////////////////////////////////////////////////////////////// 4 4 this 3 836  5 wtext 1 796  5 start 1 765  5 count 1 765  
230 0 0 6 245 796 0 0 702 ////////////////////////////////////////////////////////////////////
//     Function: TextAssembler::get_plain_wtext
//       Access: Published
//  Description: Returns a wstring that represents the contents of the
//               text, without any embedded properties characters.  If
//               there is an embedded graphic object, a zero value is
//               inserted in that position.
//
//               This string has the same length as
//               get_num_characters(), and the characters in this
//               string correspond one-to-one with the characters
//               returned by get_character(n).
//////////////////////////////////////////////////////////////////// 1 4 this 3 834  
231 0 0 6 246 796 0 0 837 ////////////////////////////////////////////////////////////////////
//     Function: TextAssembler::get_wordwrapped_plain_wtext
//       Access: Published
//  Description: Returns a wstring that represents the contents of the
//               text, with newlines inserted according to the
//               wordwrapping.  The string will contain no embedded
//               properties characters.  If there is an embedded
//               graphic object, a zero value is inserted in that
//               position.
//
//               This string has the same number of newline characters
//               as get_num_rows(), and the characters in this string
//               correspond one-to-one with the characters returned by
//               get_character(r, c).
//////////////////////////////////////////////////////////////////// 1 4 this 3 834  
232 0 0 6 247 796 0 0 547 ////////////////////////////////////////////////////////////////////
//     Function: TextAssembler::get_wtext
//       Access: Published
//  Description: Returns a wstring that represents the contents of the
//               text.
//
//               The string will contain embedded properties
//               characters, which may not exactly match the embedded
//               properties characters of the original string, but it
//               will encode the same way.
//////////////////////////////////////////////////////////////////// 1 4 this 3 834  
233 0 0 6 248 796 0 0 1004 ////////////////////////////////////////////////////////////////////
//     Function: TextAssembler::get_wordwrapped_wtext
//       Access: Published
//  Description: Returns a wstring that represents the contents of the
//               text, with newlines inserted according to the
//               wordwrapping.
//
//               The string will contain embedded properties
//               characters, which may not exactly match the embedded
//               properties characters of the original string, but it
//               will encode the same way.
//
//               Embedded properties characters will be closed before
//               every newline, then reopened (if necessary) on the
//               subsequent character following the newline.  This
//               means it will be safe to divide the text up at the
//               newline characters and treat each line as an
//               independent piece.
//////////////////////////////////////////////////////////////////// 1 4 this 3 834  
234 0 0 6 250 765 0 0 630 ////////////////////////////////////////////////////////////////////
//     Function: TextAssembler::calc_r
//       Access: Published
//  Description: Computes the row index of the nth character or
//               graphic object in the text and returns it.
//
//               If the nth character is not a normal printable
//               character with a position in the wordwrapped string,
//               returns -1 (for instance, a soft-hyphen character, or
//               a newline character, may not have a corresponding
//               position).
//////////////////////////////////////////////////////////////////// 2 4 this 3 834  1 n 1 765  
235 0 0 6 251 765 0 0 633 ////////////////////////////////////////////////////////////////////
//     Function: TextAssembler::calc_c
//       Access: Published
//  Description: Computes the column index of the nth character or
//               graphic object in the text and returns it.
//
//               If the nth character is not a normal printable
//               character with a position in the wordwrapped string,
//               returns -1 (for instance, a soft-hyphen character, or
//               a newline character, may not have a corresponding
//               position).
//////////////////////////////////////////////////////////////////// 2 4 this 3 834  1 n 1 765  
236 0 0 6 252 765 0 0 586 ////////////////////////////////////////////////////////////////////
//     Function: TextAssembler::calc_index
//       Access: Published
//  Description: Computes the character index of the character at the
//               rth row and cth column position.  This is the inverse
//               of calc_r_c().
//
//               It is legal for c to exceed the index number of the
//               last column by 1, and it is legal for r to exceed the
//               index number of the last row by 1, if c is 0.
//////////////////////////////////////////////////////////////////// 3 4 this 3 834  1 r 1 765  1 c 1 765  
237 0 0 6 253 765 0 0 312 ////////////////////////////////////////////////////////////////////
//     Function: TextAssembler::get_num_characters
//       Access: Published
//  Description: Returns the number of characters of text, before
//               wordwrapping.
//////////////////////////////////////////////////////////////////// 1 4 this 3 834  
238 0 0 6 254 838 0 0 444 ////////////////////////////////////////////////////////////////////
//     Function: TextAssembler::get_character
//       Access: Published
//  Description: Returns the character at the indicated position in
//               the pre-wordwrapped string.  If the object at this
//               position is a graphic object instead of a character,
//               returns 0.
//////////////////////////////////////////////////////////////////// 2 4 this 3 834  1 n 1 765  
239 0 0 6 254 838 0 0 418 ////////////////////////////////////////////////////////////////////
//     Function: TextAssembler::get_character
//       Access: Published
//  Description: Returns the character at the indicated position in
//               the indicated row.  If the object at this position is
//               a graphic object instead of a character, returns 0.
//////////////////////////////////////////////////////////////////// 3 4 this 3 834  1 r 1 765  1 c 1 765  
240 0 0 6 255 827 0 0 450 ////////////////////////////////////////////////////////////////////
//     Function: TextAssembler::get_graphic
//       Access: Published
//  Description: Returns the graphic object at the indicated position
//               in the pre-wordwrapped string.  If the object at this
//               position is a character instead of a graphic object,
//               returns NULL.
//////////////////////////////////////////////////////////////////// 2 4 this 3 834  1 n 1 765  
241 0 0 6 255 827 0 0 441 ////////////////////////////////////////////////////////////////////
//     Function: TextAssembler::get_graphic
//       Access: Published
//  Description: Returns the graphic object at the indicated position
//               in the indicated row.  If the object at this position
//               is a character instead of a graphic object, returns
//               NULL.
//////////////////////////////////////////////////////////////////// 3 4 this 3 834  1 r 1 765  1 c 1 765  
242 0 0 6 256 772 0 0 342 ////////////////////////////////////////////////////////////////////
//     Function: TextAssembler::get_width
//       Access: Published
//  Description: Returns the width of the character or object at the
//               indicated position in the pre-wordwrapped string.
//////////////////////////////////////////////////////////////////// 2 4 this 3 834  1 n 1 765  
243 0 0 6 256 772 0 0 333 ////////////////////////////////////////////////////////////////////
//     Function: TextAssembler::get_width
//       Access: Published
//  Description: Returns the width of the character or object at the
//               indicated position in the indicated row.
//////////////////////////////////////////////////////////////////// 3 4 this 3 834  1 r 1 765  1 c 1 765  
244 0 0 6 257 765 0 0 327 ////////////////////////////////////////////////////////////////////
//     Function: TextAssembler::get_num_rows
//       Access: Published
//  Description: Returns the number of rows of text after it has all
//               been wordwrapped and assembled.
//////////////////////////////////////////////////////////////////// 1 4 this 3 834  
245 0 0 6 258 765 0 0 315 ////////////////////////////////////////////////////////////////////
//     Function: TextAssembler::get_num_cols
//       Access: Published
//  Description: Returns the number of characters and/or graphic
//               objects in the nth row.
//////////////////////////////////////////////////////////////////// 2 4 this 3 834  1 r 1 765  
246 0 0 6 259 772 0 0 582 ////////////////////////////////////////////////////////////////////
//     Function: TextAssembler::get_xpos
//       Access: Published
//  Description: Returns the x position of the origin of the character
//               or graphic object at the indicated position in the
//               indicated row.
//
//               It is legal for c to exceed the index number of the
//               last column by 1, and it is legal for r to exceed the
//               index number of the last row by 1, if c is 0.
//////////////////////////////////////////////////////////////////// 3 4 this 3 834  1 r 1 765  1 c 1 765  
247 0 0 6 260 772 0 0 484 ////////////////////////////////////////////////////////////////////
//     Function: TextAssembler::get_ypos
//       Access: Published
//  Description: Returns the y position of the origin of all of the
//               characters or graphic objects in the indicated row.
//
//               It is legal for r to exceed the index number of the
//               last row by 1.  The value of c is presently ignored.
//////////////////////////////////////////////////////////////////// 3 4 this 3 834  1 r 1 765  1 c 1 765  
248 0 0 7 261 806 0 0 523 ////////////////////////////////////////////////////////////////////
//     Function: TextAssembler::assemble_text
//       Access: Published
//  Description: Actually assembles all of the text into a GeomNode,
//               and returns the node (or possibly a parent of the
//               node, to keep the shadow separate).  Once this has
//               been called, you may query the extents of the text
//               via get_ul(), get_lr().
//////////////////////////////////////////////////////////////////// 1 4 this 3 836  
249 0 0 6 262 839 0 0 315 ////////////////////////////////////////////////////////////////////
//     Function: TextAssembler::get_ul
//       Access: Published
//  Description: Returns the upper-left corner of the assembled text,
//               in 2-d text coordinates.
//////////////////////////////////////////////////////////////////// 1 4 this 3 834  
250 0 0 6 263 839 0 0 316 ////////////////////////////////////////////////////////////////////
//     Function: TextAssembler::get_lr
//       Access: Published
//  Description: Returns the lower-right corner of the assembled text,
//               in 2-d text coordinates.
//////////////////////////////////////////////////////////////////// 1 4 this 3 834  
251 0 0 6 264 772 0 0 281 ////////////////////////////////////////////////////////////////////
//     Function: TextAssembler::calc_width
//       Access: Published, Static
//  Description: Returns the width of a single TextGraphic image.
//////////////////////////////////////////////////////////////////// 2 7 graphic 1 827  10 properties 1 810  
252 0 0 6 264 772 0 0 486 ////////////////////////////////////////////////////////////////////
//     Function: TextAssembler::calc_width
//       Access: Published, Static
//  Description: Returns the width of a single character, according to
//               its associated font.  This also correctly calculates
//               the width of cheesy ligatures and accented
//               characters, which may not exist in the font as such.
//////////////////////////////////////////////////////////////////// 2 9 character 1 838  10 properties 1 810  
253 0 0 6 265 774 0 0 1045 ////////////////////////////////////////////////////////////////////
//     Function: TextAssembler::has_exact_character
//       Access: Published, Static
//  Description: Returns true if the named character exists in the
//               font exactly as named, false otherwise.  Note that
//               because Panda can assemble glyphs together
//               automatically using cheesy accent marks, this is not
//               a reliable indicator of whether a suitable glyph can
//               be rendered for the character.  For that, use
//               has_character() instead.
//
//               This returns true for whitespace and Unicode
//               whitespace characters (if they exist in the font),
//               but returns false for characters that would render
//               with the "invalid glyph".  It also returns false for
//               characters that would be synthesized within Panda,
//               but see has_character().
//////////////////////////////////////////////////////////////////// 2 9 character 1 838  10 properties 1 810  
254 0 0 6 266 774 0 0 733 ////////////////////////////////////////////////////////////////////
//     Function: TextAssembler::has_character
//       Access: Published, Static
//  Description: Returns true if the named character exists in the
//               font or can be synthesized by Panda, false otherwise.
//               (Panda can synthesize some accented characters by
//               combining similar-looking glyphs from the font.)
//
//               This returns true for whitespace and Unicode
//               whitespace characters (if they exist in the font),
//               but returns false for characters that would render
//               with the "invalid glyph".
//////////////////////////////////////////////////////////////////// 2 9 character 1 838  10 properties 1 810  
255 0 0 6 267 774 0 0 1131 ////////////////////////////////////////////////////////////////////
//     Function: TextAssembler::is_whitespace
//       Access: Published, Static
//  Description: Returns true if the indicated character represents
//               whitespace in the font, or false if anything visible
//               will be rendered for it.
//
//               This returns true for whitespace and Unicode
//               whitespace characters (if they exist in the font),
//               and returns false for any other characters, including
//               characters that do not exist in the font (these would
//               be rendered with the "invalid glyph", which is
//               visible).
//
//               Note that this function can be reliably used to
//               identify Unicode whitespace characters only if the
//               font has all of the whitespace characters defined.
//               It will return false for any character not in the
//               font, even if it is an official Unicode whitespace
//               character.
//////////////////////////////////////////////////////////////////// 2 9 character 1 838  10 properties 1 810  
256 0 0 7 277 841 632 0 220 ////////////////////////////////////////////////////////////////////
//     Function: TextNode::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 name 1 796  
257 0 0 7 277 841 632 0 369 ////////////////////////////////////////////////////////////////////
//     Function: TextNode::Copy Constructor
//       Access: Published
//  Description: It's sort of a copy constructor: it copies the
//               indicated TextProperties, without copying a complete
//               TextNode.
//////////////////////////////////////////////////////////////////// 2 4 name 1 796  4 copy 1 810  
258 0 0 6 280 772 0 0 510 ////////////////////////////////////////////////////////////////////
//     Function: TextNode::get_line_height
//       Access: Published
//  Description: Returns the number of units high each line of text
//               is.  This is based on the font.  Note that it is
//               possible for the text to include nested font change
//               commands, in which case the value of this method is
//               questionable.
//////////////////////////////////////////////////////////////////// 1 4 this 3 842  
259 0 0 4 281 780 0 0 439 ////////////////////////////////////////////////////////////////////
//     Function: TextNode::set_max_rows
//       Access: Published
//  Description: Sets the maximum number of rows that may be formatted
//               by the TextNode.  If more text than this is
//               attempted, it will be truncated and has_overflow()
//               will return true.
//////////////////////////////////////////////////////////////////// 2 4 this 3 841  8 max_rows 1 765  
260 0 0 4 282 780 0 0 323 ////////////////////////////////////////////////////////////////////
//     Function: TextNode::clear_max_rows
//       Access: Published
//  Description: Resets the TextNode's default behavior of not
//               limiting the number of rows of text.
//////////////////////////////////////////////////////////////////// 1 4 this 3 841  
261 0 0 6 283 774 0 0 342 ////////////////////////////////////////////////////////////////////
//     Function: TextNode::has_max_rows
//       Access: Published
//  Description: Returns true if a limit on the height of the TextNode
//               has been set via set_max_rows(), false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 842  
262 0 0 6 284 765 0 0 315 ////////////////////////////////////////////////////////////////////
//     Function: TextNode::get_max_rows
//       Access: Published
//  Description: Returns the limit on the height of the TextNode
//               specified by set_max_rows().
//////////////////////////////////////////////////////////////////// 1 4 this 3 842  
263 0 0 6 285 774 0 0 364 ////////////////////////////////////////////////////////////////////
//     Function: TextNode::has_overflow
//       Access: Published
//  Description: Returns true if the last text set on the text node
//               exceeded the max_rows constraint, or false if it all
//               fit.
//////////////////////////////////////////////////////////////////// 1 4 this 3 842  
264 0 0 4 286 780 0 0 224 ////////////////////////////////////////////////////////////////////
//     Function: TextNode::set_frame_color
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 841  11 frame_color 1 799  
265 0 0 4 286 780 0 0 224 ////////////////////////////////////////////////////////////////////
//     Function: TextNode::set_frame_color
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 5 4 this 3 841  1 r 1 772  1 g 1 772  1 b 1 772  1 a 1 772  
266 0 0 7 287 812 0 0 224 ////////////////////////////////////////////////////////////////////
//     Function: TextNode::get_frame_color
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 842  
267 0 0 4 288 780 0 0 224 ////////////////////////////////////////////////////////////////////
//     Function: TextNode::set_card_border
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 841  4 size 1 772  10 uv_portion 1 772  
268 0 0 4 289 780 0 0 226 ////////////////////////////////////////////////////////////////////
//     Function: TextNode::clear_card_border
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 841  
269 0 0 6 290 772 0 0 229 ////////////////////////////////////////////////////////////////////
//     Function: TextNode::get_card_border_size
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 842  
270 0 0 6 291 772 0 0 235 ////////////////////////////////////////////////////////////////////
//     Function: TextNode::get_card_border_uv_portion
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 842  
271 0 0 6 292 774 0 0 224 ////////////////////////////////////////////////////////////////////
//     Function: TextNode::has_card_border
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 842  
272 0 0 4 293 780 0 0 223 ////////////////////////////////////////////////////////////////////
//     Function: TextNode::set_card_color
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 841  10 card_color 1 799  
273 0 0 4 293 780 0 0 223 ////////////////////////////////////////////////////////////////////
//     Function: TextNode::set_card_color
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 5 4 this 3 841  1 r 1 772  1 g 1 772  1 b 1 772  1 a 1 772  
274 0 0 7 294 812 0 0 223 ////////////////////////////////////////////////////////////////////
//     Function: TextNode::get_card_color
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 842  
275 0 0 4 295 780 0 0 225 ////////////////////////////////////////////////////////////////////
//     Function: TextNode::set_card_texture
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 841  12 card_texture 1 844  
276 0 0 4 296 780 0 0 227 ////////////////////////////////////////////////////////////////////
//     Function: TextNode::clear_card_texture
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 841  
277 0 0 6 297 774 0 0 225 ////////////////////////////////////////////////////////////////////
//     Function: TextNode::has_card_texture
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 842  
278 0 0 7 298 844 0 0 225 ////////////////////////////////////////////////////////////////////
//     Function: TextNode::get_card_texture
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 842  
279 0 0 4 299 780 0 0 526 ////////////////////////////////////////////////////////////////////
//     Function: TextNode::set_frame_as_margin
//       Access: Published
//  Description: Specifies that a border will be drawn around the text
//               when it is next created.  The parameters are the
//               amount of additional padding to insert between the
//               frame and the text in each dimension, and all should
//               generally be positive.
//////////////////////////////////////////////////////////////////// 5 4 this 3 841  4 left 1 772  5 right 1 772  6 bottom 1 772  3 top 1 772  
280 0 0 4 300 780 0 0 599 ////////////////////////////////////////////////////////////////////
//     Function: TextNode::set_frame_actual
//       Access: Published
//  Description: Similar to set_frame_as_margin, except the frame is
//               specified in actual coordinate units (relative to
//               the text's origin), irrespective of the size of the
//               text.  The left and bottom coordinates should
//               generally be negative, while the right and top
//               coordinates should generally be positive.
//////////////////////////////////////////////////////////////////// 5 4 this 3 841  4 left 1 772  5 right 1 772  6 bottom 1 772  3 top 1 772  
281 0 0 4 301 780 0 0 296 ////////////////////////////////////////////////////////////////////
//     Function: TextNode::clear_frame
//       Access: Published
//  Description: Specifies that a border will not be drawn around the
//               text.
//////////////////////////////////////////////////////////////////// 1 4 this 3 841  
282 0 0 6 302 774 0 0 218 ////////////////////////////////////////////////////////////////////
//     Function: TextNode::has_frame
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 842  
283 0 0 6 303 774 0 0 675 ////////////////////////////////////////////////////////////////////
//     Function: TextNode::is_frame_as_margin
//       Access: Published
//  Description: If this is true, the frame was set via a call to
//               set_frame_as_margin(), and the dimension of the frame
//               as returned by get_frame_as_set() represent a margin
//               all around the text.  If false, then the frame was
//               set via a call to set_frame_actual(), and the
//               dimensions of the frame as returned by
//               get_frame_as_set() are relative to the text's origin.
//////////////////////////////////////////////////////////////////// 1 4 this 3 842  
284 0 0 7 304 830 0 0 529 ////////////////////////////////////////////////////////////////////
//     Function: TextNode::get_frame_as_set
//       Access: Published
//  Description: Returns the dimensions of the frame as set by
//               set_frame_as_margin() or set_frame_actual().  Use
//               is_frame_actual() to determine how to interpret the
//               values returned by this function.  It is an error to
//               call this if has_frame() is false.
//////////////////////////////////////////////////////////////////// 1 4 this 3 842  
285 0 0 7 305 830 0 0 767 ////////////////////////////////////////////////////////////////////
//     Function: TextNode::get_frame_actual
//       Access: Published
//  Description: Returns the actual dimensions of the frame around the
//               text.  If the frame was set via set_frame_as_margin(),
//               the result returned by this function reflects the
//               size of the current text; if the frame was set via
//               set_frame_actual(), this returns the values
//               actually set.
//
//               If the text has no frame at all, this returns the
//               dimensions of the text itself, as if the frame were
//               set with a margin of 0, 0, 0, 0.
//////////////////////////////////////////////////////////////////// 1 4 this 3 842  
286 0 0 4 306 780 0 0 320 ////////////////////////////////////////////////////////////////////
//     Function: TextNode::set_frame_line_width
//       Access: Published
//  Description: Specifies the thickness of the lines that will be
//               used to draw the frame.
//////////////////////////////////////////////////////////////////// 2 4 this 3 841  10 line_width 1 772  
287 0 0 6 307 772 0 0 318 ////////////////////////////////////////////////////////////////////
//     Function: TextNode::get_frame_line_width
//       Access: Published
//  Description: Returns the thickness of the lines that will be
//               used to draw the frame.
//////////////////////////////////////////////////////////////////// 1 4 this 3 842  
288 0 0 4 308 780 0 0 470 ////////////////////////////////////////////////////////////////////
//     Function: TextNode::set_frame_corners
//       Access: Published
//  Description: Enables or disables the drawing of corners for the
//               frame.  These are extra points drawn at each of the
//               four corners, to soften the ugly edges generated when
//               the line width is greater than one.
//////////////////////////////////////////////////////////////////// 2 4 this 3 841  7 corners 1 774  
289 0 0 6 309 774 0 0 226 ////////////////////////////////////////////////////////////////////
//     Function: TextNode::get_frame_corners
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 842  
290 0 0 4 310 780 0 0 587 ////////////////////////////////////////////////////////////////////
//     Function: TextNode::set_card_as_margin
//       Access: Published
//  Description: Specifies that a (possibly opaque or semitransparent)
//               card will be held behind the text when it is next
//               created.  Like set_frame_as_margin, the parameters are
//               the amount of additional padding to insert around the
//               text in each dimension, and all should generally be
//               positive.
//////////////////////////////////////////////////////////////////// 5 4 this 3 841  4 left 1 772  5 right 1 772  6 bottom 1 772  3 top 1 772  
291 0 0 4 311 780 0 0 596 ////////////////////////////////////////////////////////////////////
//     Function: TextNode::set_card_actual
//       Access: Published
//  Description: Similar to set_card_as_margin, except the card is
//               specified in actual coordinate units (relative to
//               the text's origin), irrespective of the size of the
//               text.  The left and bottom coordinates should
//               generally be negative, while the right and top
//               coordinates should generally be positive.
//////////////////////////////////////////////////////////////////// 5 4 this 3 841  4 left 1 772  5 right 1 772  6 bottom 1 772  3 top 1 772  
292 0 0 4 312 780 0 0 455 ////////////////////////////////////////////////////////////////////
//     Function: TextNode::set_card_decal
//       Access: Published
//  Description: Sets the card_decal flag.  When this is true, the
//               text is decalled onto the card, which is necessary if
//               the TextNode is to be rendered in the 3-d world
//               without putting it in a bin.
//////////////////////////////////////////////////////////////////// 2 4 this 3 841  10 card_decal 1 774  
293 0 0 4 313 780 0 0 293 ////////////////////////////////////////////////////////////////////
//     Function: TextNode::clear_card
//       Access: Published
//  Description: Specifies that a card will not be drawn behind the
//               text.
//////////////////////////////////////////////////////////////////// 1 4 this 3 841  
294 0 0 6 314 774 0 0 217 ////////////////////////////////////////////////////////////////////
//     Function: TextNode::has_card
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 842  
295 0 0 6 315 774 0 0 275 ////////////////////////////////////////////////////////////////////
//     Function: TextNode::get_card_decal
//       Access: Published
//  Description: Returns the card_decal flag.  See set_card_decal().
//////////////////////////////////////////////////////////////////// 1 4 this 3 842  
296 0 0 6 316 774 0 0 666 ////////////////////////////////////////////////////////////////////
//     Function: TextNode::is_card_as_margin
//       Access: Published
//  Description: If this is true, the card was set via a call to
//               set_card_as_margin(), and the dimension of the card
//               as returned by get_card_as_set() represent a margin
//               all around the text.  If false, then the card was
//               set via a call to set_card_actual(), and the
//               dimensions of the card as returned by
//               get_card_as_set() are relative to the text's origin.
//////////////////////////////////////////////////////////////////// 1 4 this 3 842  
297 0 0 7 317 830 0 0 523 ////////////////////////////////////////////////////////////////////
//     Function: TextNode::get_card_as_set
//       Access: Published
//  Description: Returns the dimensions of the card as set by
//               set_card_as_margin() or set_card_actual().  Use
//               is_card_actual() to determine how to interpret the
//               values returned by this function.  It is an error to
//               call this if has_card() is false.
//////////////////////////////////////////////////////////////////// 1 4 this 3 842  
298 0 0 7 318 830 0 0 759 ////////////////////////////////////////////////////////////////////
//     Function: TextNode::get_card_actual
//       Access: Published
//  Description: Returns the actual dimensions of the card around the
//               text.  If the card was set via set_card_as_margin(),
//               the result returned by this function reflects the
//               size of the current text; if the card was set via
//               set_card_actual(), this returns the values
//               actually set.
//
//               If the text has no card at all, this returns the
//               dimensions of the text itself, as if the card were
//               set with a margin of 0, 0, 0, 0.
//////////////////////////////////////////////////////////////////// 1 4 this 3 842  
299 0 0 7 319 830 0 0 529 ////////////////////////////////////////////////////////////////////
//     Function: TextNode::get_card_transformed
//       Access: Published
//  Description: Returns the actual card dimensions, transformed by
//               the matrix set by set_transform().  This returns the
//               card dimensions in actual coordinates as seen by the
//               rest of the world.  Also see get_upper_left_3d() and
//               get_lower_right_3d().
//////////////////////////////////////////////////////////////////// 1 4 this 3 842  
300 0 0 4 320 780 0 0 314 ////////////////////////////////////////////////////////////////////
//     Function: TextNode::set_transform
//       Access: Published
//  Description: Sets an additional transform that is applied to the
//               entire text paragraph.
//////////////////////////////////////////////////////////////////// 2 4 this 3 841  9 transform 1 845  
301 0 0 7 321 849 0 0 222 ////////////////////////////////////////////////////////////////////
//     Function: TextNode::get_transform
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 842  
302 0 0 4 322 780 0 0 316 ////////////////////////////////////////////////////////////////////
//     Function: TextNode::set_coordinate_system
//       Access: Published
//  Description: Specifies the coordinate system in which the text
//               will be generated.
//////////////////////////////////////////////////////////////////// 2 4 this 3 841  2 cs 1 807  
303 0 0 6 323 807 0 0 230 ////////////////////////////////////////////////////////////////////
//     Function: TextNode::get_coordinate_system
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 842  
304 0 0 4 324 780 0 0 567 ////////////////////////////////////////////////////////////////////
//     Function: TextNode::set_usage_hint
//       Access: Published
//  Description: Specifies the UsageHint that will be applied to
//               generated geometry.  The default is UH_static, which
//               is probably the right setting, but if you know the
//               TextNode's geometry will have a short lifespan, it
//               may be better to set it to UH_stream.  See
//               geomEnums.h.
//////////////////////////////////////////////////////////////////// 2 4 this 3 841  10 usage_hint 1 766  
305 0 0 6 325 766 0 0 329 ////////////////////////////////////////////////////////////////////
//     Function: TextNode::get_usage_hint
//       Access: Published
//  Description: Returns the UsageHint that will be applied to
//               generated geometry.  See set_usage_hint().
//////////////////////////////////////////////////////////////////// 1 4 this 3 842  
306 0 0 4 326 780 0 0 2201 ////////////////////////////////////////////////////////////////////
//     Function: TextNode::set_flatten_flags
//       Access: Published
//  Description: Sets the flatten flags.  This should be a union of
//               the TextNode::FlattenFlags options.  This controls
//               the degree of flattening performed on the TextNode's
//               internal geometry (i.e. the scene graph returned by
//               generate()) each time the text is changed.  In
//               general, more flattening means a more optimal result,
//               but it will take more time to generate.
//
//               The choice may be any of these three:
//
//               FF_none - No flatten operation is called.  The
//               letters are left as independent Geoms.
//
//               FF_light - A flatten_light() operation is called.
//               The attributes are applied to the vertices, but no
//               nodes are removed.
//
//               FF_medium - A flatten_medium() operation is called.
//               The attributes are applied to the vertices, and a few
//               trivial nodes are removed.
//
//               FF_strong - A flatten_strong() operation is called.
//               The attributes are applied to the vertices, and the
//               resulting nodes are aggressively combined into as few
//               nodes as possible.
//
//               In addition to the above choices, you may optionally
//               include the following flag:
//
//               FF_dynamic_merge - Copy the geoms into a single
//               GeomVertexData as we go, instead of relying on the
//               flatten operation at the end.  This pre-flattens the
//               text considerably, and may obviate the need for
//               flatten altogether; it also tends to improve
//               performance considerably even if you do call flatten.
//               However, it is not as fast as not calling flatten at
//               all.
//
//               The default is taken from the text-flatten and
//               text-dynamic-merge config variables.
//////////////////////////////////////////////////////////////////// 2 4 this 3 841  13 flatten_flags 1 765  
307 0 0 6 327 765 0 0 279 ////////////////////////////////////////////////////////////////////
//     Function: TextNode::get_flatten_flags
//       Access: Published
//  Description: Returns the flatten flags.  See set_flatten_flags().
//////////////////////////////////////////////////////////////////// 1 4 this 3 842  
308 0 0 4 328 780 0 0 398 ////////////////////////////////////////////////////////////////////
//     Function: TextNode::set_font
//       Access: Published
//  Description: Sets the font that will be used when making text.  If
//               this is set to NULL, the default font will be used,
//               which can be set via set_default_font().
//////////////////////////////////////////////////////////////////// 2 4 this 3 841  4 font 1 779  
309 0 0 4 329 780 0 0 256 ////////////////////////////////////////////////////////////////////
//     Function: TextNode::clear_font
//       Access: Published
//  Description: Resets the font to the default font.
//////////////////////////////////////////////////////////////////// 1 4 this 3 841  
310 0 0 4 330 780 0 0 1131 ////////////////////////////////////////////////////////////////////
//     Function: TextNode::set_small_caps
//       Access: Published
//  Description: Sets the small_caps flag.  When this is set,
//               lowercase letters are generated as scaled-down
//               versions of their uppercase equivalents.  This is
//               particularly useful to set for fonts that do not have
//               lowercase letters.
//
//               It is also a good idea to set this for a (dynamic)
//               font that has already implemented lowercase letters
//               as scaled-down versions of their uppercase
//               equivalents, since without this flag the texture
//               memory may needlessly duplicate equivalent glyphs for
//               upper and lowercase letters.  Setting this flag
//               causes the texture memory to share the mixed-case
//               letters.
//
//               The amount by which the lowercase letters are scaled
//               is specified by set_small_caps_scale().
//////////////////////////////////////////////////////////////////// 2 4 this 3 841  10 small_caps 1 774  
311 0 0 4 331 780 0 0 226 ////////////////////////////////////////////////////////////////////
//     Function: TextNode::clear_small_caps
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 841  
312 0 0 4 332 780 0 0 475 ////////////////////////////////////////////////////////////////////
//     Function: TextNode::set_small_caps_scale
//       Access: Published
//  Description: Sets the scale factor applied to lowercase letters
//               from their uppercase equivalents, when the small_caps
//               flag is in effect.  See set_small_caps().  Normally,
//               this will be a number less than one.
//////////////////////////////////////////////////////////////////// 2 4 this 3 841  16 small_caps_scale 1 772  
313 0 0 4 333 780 0 0 232 ////////////////////////////////////////////////////////////////////
//     Function: TextNode::clear_small_caps_scale
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 841  
314 0 0 4 334 780 0 0 218 ////////////////////////////////////////////////////////////////////
//     Function: TextNode::set_slant
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 841  5 slant 1 772  
315 0 0 4 335 780 0 0 221 ////////////////////////////////////////////////////////////////////
//     Function: TextNode::clear_slant
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 841  
316 0 0 4 336 780 0 0 218 ////////////////////////////////////////////////////////////////////
//     Function: TextNode::set_align
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 841  10 align_type 1 755  
317 0 0 4 337 780 0 0 221 ////////////////////////////////////////////////////////////////////
//     Function: TextNode::clear_align
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 841  
318 0 0 4 338 780 0 0 389 ////////////////////////////////////////////////////////////////////
//     Function: TextNode::set_indent
//       Access: Published
//  Description: Specifies the amount of extra space that is inserted
//               before the first character of each line.  This can be
//               thought of as a left margin.
//////////////////////////////////////////////////////////////////// 2 4 this 3 841  6 indent 1 772  
319 0 0 4 339 780 0 0 222 ////////////////////////////////////////////////////////////////////
//     Function: TextNode::clear_indent
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 841  
320 0 0 4 340 780 0 0 394 ////////////////////////////////////////////////////////////////////
//     Function: TextNode::set_wordwrap
//       Access: Published
//  Description: Sets the text up to automatically wordwrap when it
//               exceeds the indicated width.  This can be thought of
//               as a right margin or margin width.
//////////////////////////////////////////////////////////////////// 2 4 this 3 841  8 wordwrap 1 772  
321 0 0 4 341 780 0 0 320 ////////////////////////////////////////////////////////////////////
//     Function: TextNode::clear_wordwrap
//       Access: Published
//  Description: Removes the wordwrap setting from the TextNode.  Text
//               will be as wide as it is.
//////////////////////////////////////////////////////////////////// 1 4 this 3 841  
322 0 0 4 342 780 0 0 223 ////////////////////////////////////////////////////////////////////
//     Function: TextNode::set_text_color
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 841  10 text_color 1 799  
323 0 0 4 342 780 0 0 223 ////////////////////////////////////////////////////////////////////
//     Function: TextNode::set_text_color
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 5 4 this 3 841  1 r 1 772  1 g 1 772  1 b 1 772  1 a 1 772  
324 0 0 4 343 780 0 0 346 ////////////////////////////////////////////////////////////////////
//     Function: TextNode::clear_text_color
//       Access: Published
//  Description: Removes the text color specification; the text will
//               be colored whatever it was in the source font file.
//////////////////////////////////////////////////////////////////// 1 4 this 3 841  
325 0 0 4 344 780 0 0 225 ////////////////////////////////////////////////////////////////////
//     Function: TextNode::set_shadow_color
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 841  12 shadow_color 1 799  
326 0 0 4 344 780 0 0 225 ////////////////////////////////////////////////////////////////////
//     Function: TextNode::set_shadow_color
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 5 4 this 3 841  1 r 1 772  1 g 1 772  1 b 1 772  1 a 1 772  
327 0 0 4 345 780 0 0 228 ////////////////////////////////////////////////////////////////////
//     Function: TextNode::clear_shadow_color
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 841  
328 0 0 4 346 780 0 0 391 ////////////////////////////////////////////////////////////////////
//     Function: TextNode::set_shadow
//       Access: Published
//  Description: Specifies that the text should be drawn with a
//               shadow, by creating a second copy of the text and
//               offsetting it slightly behind the first.
//////////////////////////////////////////////////////////////////// 2 4 this 3 841  13 shadow_offset 1 813  
329 0 0 4 346 780 0 0 391 ////////////////////////////////////////////////////////////////////
//     Function: TextNode::set_shadow
//       Access: Published
//  Description: Specifies that the text should be drawn with a
//               shadow, by creating a second copy of the text and
//               offsetting it slightly behind the first.
//////////////////////////////////////////////////////////////////// 3 4 this 3 841  7 xoffset 1 772  7 yoffset 1 772  
330 0 0 4 347 780 0 0 297 ////////////////////////////////////////////////////////////////////
//     Function: TextNode::clear_shadow
//       Access: Published
//  Description: Specifies that a shadow will not be drawn behind the
//               text.
//////////////////////////////////////////////////////////////////// 1 4 this 3 841  
331 0 0 4 348 780 0 0 672 ////////////////////////////////////////////////////////////////////
//     Function: TextNode::set_bin
//       Access: Published
//  Description: Names the GeomBin that the TextNode geometry should
//               be assigned to.  If this is set, then a
//               GeomBinTransition will be created to explicitly place
//               each component in the named bin.
//
//               The draw_order value will also be passed to each
//               GeomBinTransition as appropriate; this is
//               particularly useful if this names a GeomBinFixed,
//               e.g. "fixed".
//////////////////////////////////////////////////////////////////// 2 4 this 3 841  3 bin 1 796  
332 0 0 4 349 780 0 0 414 ////////////////////////////////////////////////////////////////////
//     Function: TextNode::clear_bin
//       Access: Published
//  Description: Removes the effect of a previous call to
//               set_bin().  Text will be drawn in whatever bin
//               it would like to be drawn in, with no explicit
//               ordering.
//////////////////////////////////////////////////////////////////// 1 4 this 3 841  
333 0 0 6 350 765 0 0 765 ////////////////////////////////////////////////////////////////////
//     Function: TextNode::set_draw_order
//       Access: Published
//  Description: Sets the drawing order of text created by the
//               TextMaker.  This is actually the draw order of the
//               card and frame.  The shadow is drawn at
//               _draw_order+1, and the text at _draw_order+2.
//
//               This affects the sorting order assigned to the arcs
//               as they are created, and also is passed to whatever
//               bin may be assigned via set_bin().
//
//               The return value is the first unused draw_order
//               number, e.g. _draw_order + 3.
//////////////////////////////////////////////////////////////////// 2 4 this 3 841  10 draw_order 1 765  
334 0 0 4 351 780 0 0 226 ////////////////////////////////////////////////////////////////////
//     Function: TextNode::clear_draw_order
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 841  
335 0 0 4 352 780 0 0 403 ////////////////////////////////////////////////////////////////////
//     Function: TextNode::set_tab_width
//       Access: Published
//  Description: Sets the width of each tab stop, in screen units.  A
//               tab character embedded in the text will advance the
//               horizontal position to the next tab stop.
//////////////////////////////////////////////////////////////////// 2 4 this 3 841  9 tab_width 1 772  
336 0 0 4 353 780 0 0 225 ////////////////////////////////////////////////////////////////////
//     Function: TextNode::clear_tab_width
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 841  
337 0 0 4 354 780 0 0 467 ////////////////////////////////////////////////////////////////////
//     Function: TextNode::set_glyph_scale
//       Access: Published
//  Description: Specifies the factor by which to scale each letter of
//               the text as it is placed.  This can be used (possibly
//               in conjunction with set_glyph_shift()) to implement
//               superscripting or subscripting.
//////////////////////////////////////////////////////////////////// 2 4 this 3 841  11 glyph_scale 1 772  
338 0 0 4 355 780 0 0 227 ////////////////////////////////////////////////////////////////////
//     Function: TextNode::clear_glyph_scale
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 841  
339 0 0 4 356 780 0 0 465 ////////////////////////////////////////////////////////////////////
//     Function: TextNode::set_glyph_shift
//       Access: Published
//  Description: Specifies a vertical amount to shift each letter of
//               the text as it is placed.  This can be used (possibly
//               in conjunction with set_glyph_scale()) to implement
//               superscripting or subscripting.
//////////////////////////////////////////////////////////////////// 2 4 this 3 841  11 glyph_shift 1 772  
340 0 0 4 357 780 0 0 227 ////////////////////////////////////////////////////////////////////
//     Function: TextNode::clear_glyph_shift
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 841  
341 0 0 4 358 780 0 0 289 ////////////////////////////////////////////////////////////////////
//     Function: TextNode::set_text
//       Access: Published
//  Description: Changes the text that is displayed under the
//               TextNode.
//////////////////////////////////////////////////////////////////// 2 4 this 3 841  4 text 1 796  
342 0 0 4 358 780 0 0 569 ////////////////////////////////////////////////////////////////////
//     Function: TextNode::set_text
//       Access: Published
//  Description: The two-parameter version of set_text() accepts an
//               explicit encoding; the text is immediately decoded
//               and stored as a wide-character string.  Subsequent
//               calls to get_text() will return the same text
//               re-encoded using whichever encoding is specified by
//               set_encoding().
//////////////////////////////////////////////////////////////////// 3 4 this 3 841  4 text 1 796  8 encoding 1 850  
343 0 0 4 359 780 0 0 255 ////////////////////////////////////////////////////////////////////
//     Function: TextNode::clear_text
//       Access: Published
//  Description: Removes the text from the TextNode.
//////////////////////////////////////////////////////////////////// 1 4 this 3 841  
344 0 0 4 360 780 0 0 297 ////////////////////////////////////////////////////////////////////
//     Function: TextNode::append_text
//       Access: Published
//  Description: Appends the indicates string to the end of the stored
//               text.
//////////////////////////////////////////////////////////////////// 2 4 this 3 841  4 text 1 796  
345 0 0 4 361 780 0 0 377 ////////////////////////////////////////////////////////////////////
//     Function: TextNode::append_unicode_char
//       Access: Published
//  Description: Appends a single character to the end of the stored
//               text.  This may be a wide character, up to 16 bits in
//               Unicode.
//////////////////////////////////////////////////////////////////// 2 4 this 3 841  9 character 1 838  
346 0 0 6 362 796 0 0 502 ////////////////////////////////////////////////////////////////////
//     Function: TextNode::get_wordwrapped_text
//       Access: Public
//  Description: Returns a string that represents the contents of the
//               text, as it has been formatted by wordwrap rules.
//
//               In earlier versions, this did not contain any
//               embedded special characters like \1 or \3; now it
//               does.
//////////////////////////////////////////////////////////////////// 1 4 this 3 842  
347 0 0 6 363 772 0 0 366 ////////////////////////////////////////////////////////////////////
//     Function: TextNode::calc_width
//       Access: Published
//  Description: Returns the width of a line of text of arbitrary
//               characters.  The line should not include the newline
//               character.
//////////////////////////////////////////////////////////////////// 2 4 this 3 842  4 line 1 796  
348 0 0 6 363 772 0 0 394 ////////////////////////////////////////////////////////////////////
//     Function: TextNode::calc_width
//       Access: Published
//  Description: Returns the width of a single character of the font,
//               or 0.0 if the character is not known.  This may be a
//               wide character (greater than 255).
//////////////////////////////////////////////////////////////////// 2 4 this 3 842  9 character 1 838  
349 0 0 6 363 772 0 0 432 ////////////////////////////////////////////////////////////////////
//     Function: TextNode::calc_width
//       Access: Published
//  Description: Returns the width of a line of text of arbitrary
//               characters.  The line should not include the newline
//               character or any embedded control characters like \1
//               or \3.
//////////////////////////////////////////////////////////////////// 2 4 this 3 842  4 line 1 796  
350 0 0 6 364 774 0 0 1032 ////////////////////////////////////////////////////////////////////
//     Function: TextNode::has_exact_character
//       Access: Published
//  Description: Returns true if the named character exists in the
//               font exactly as named, false otherwise.  Note that
//               because Panda can assemble glyphs together
//               automatically using cheesy accent marks, this is not
//               a reliable indicator of whether a suitable glyph can
//               be rendered for the character.  For that, use
//               has_character() instead.
//
//               This returns true for whitespace and Unicode
//               whitespace characters (if they exist in the font),
//               but returns false for characters that would render
//               with the "invalid glyph".  It also returns false for
//               characters that would be synthesized within Panda,
//               but see has_character().
//////////////////////////////////////////////////////////////////// 2 4 this 3 842  9 character 1 838  
351 0 0 6 365 774 0 0 720 ////////////////////////////////////////////////////////////////////
//     Function: TextNode::has_character
//       Access: Published
//  Description: Returns true if the named character exists in the
//               font or can be synthesized by Panda, false otherwise.
//               (Panda can synthesize some accented characters by
//               combining similar-looking glyphs from the font.)
//
//               This returns true for whitespace and Unicode
//               whitespace characters (if they exist in the font),
//               but returns false for characters that would render
//               with the "invalid glyph".
//////////////////////////////////////////////////////////////////// 2 4 this 3 842  9 character 1 838  
352 0 0 6 366 774 0 0 1118 ////////////////////////////////////////////////////////////////////
//     Function: TextNode::is_whitespace
//       Access: Published
//  Description: Returns true if the indicated character represents
//               whitespace in the font, or false if anything visible
//               will be rendered for it.
//
//               This returns true for whitespace and Unicode
//               whitespace characters (if they exist in the font),
//               and returns false for any other characters, including
//               characters that do not exist in the font (these would
//               be rendered with the "invalid glyph", which is
//               visible).
//
//               Note that this function can be reliably used to
//               identify Unicode whitespace characters only if the
//               font has all of the whitespace characters defined.
//               It will return false for any character not in the
//               font, even if it is an official Unicode whitespace
//               character.
//////////////////////////////////////////////////////////////////// 2 4 this 3 842  9 character 1 838  
353 0 0 4 367 780 0 0 450 ////////////////////////////////////////////////////////////////////
//     Function: TextNode::set_wtext
//       Access: Published
//  Description: Changes the text that is displayed under the
//               TextNode, with a wide text.  This automatically sets
//               the string reported by get_text() to the 8-bit
//               encoded version of the same string.
//////////////////////////////////////////////////////////////////// 2 4 this 3 841  5 wtext 1 796  
354 0 0 4 368 780 0 0 313 ////////////////////////////////////////////////////////////////////
//     Function: TextNode::append_wtext
//       Access: Published
//  Description: Appends the indicates string to the end of the stored
//               wide-character text.
//////////////////////////////////////////////////////////////////// 2 4 this 3 841  4 text 1 796  
355 0 0 6 369 796 0 0 507 ////////////////////////////////////////////////////////////////////
//     Function: TextNode::get_wordwrapped_wtext
//       Access: Published
//  Description: Returns a wstring that represents the contents of the
//               text, as it has been formatted by wordwrap rules.
//
//               In earlier versions, this did not contain any
//               embedded special characters like \1 or \3; now it
//               does.
//////////////////////////////////////////////////////////////////// 1 4 this 3 842  
356 0 0 4 370 780 0 0 222 ////////////////////////////////////////////////////////////////////
//     Function: TextNode::output
//       Access: Public, Virtual
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 842  3 out 1 781  
357 0 0 4 371 780 0 0 223 ////////////////////////////////////////////////////////////////////
//     Function: TextNode::write
//       Access: Published, Virtual
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 842  3 out 1 781  12 indent_level 1 765  
358 0 0 6 372 772 0 0 359 ////////////////////////////////////////////////////////////////////
//     Function: TextNode::get_left
//       Access: Published
//  Description: Returns the leftmost extent of the text in local 2-d
//               coordinates, unmodified by the set_transform()
//               matrix.
//////////////////////////////////////////////////////////////////// 1 4 this 3 842  
359 0 0 6 373 772 0 0 361 ////////////////////////////////////////////////////////////////////
//     Function: TextNode::get_right
//       Access: Published
//  Description: Returns the rightmost extent of the text in local 2-d
//               coordinates, unmodified by the set_transform()
//               matrix.
//////////////////////////////////////////////////////////////////// 1 4 this 3 842  
360 0 0 6 374 772 0 0 363 ////////////////////////////////////////////////////////////////////
//     Function: TextNode::get_bottom
//       Access: Published
//  Description: Returns the bottommost extent of the text in local
//               2-d coordinates, unmodified by the set_transform()
//               matrix.
//////////////////////////////////////////////////////////////////// 1 4 this 3 842  
361 0 0 6 375 772 0 0 357 ////////////////////////////////////////////////////////////////////
//     Function: TextNode::get_top
//       Access: Published
//  Description: Returns the topmost extent of the text in local 2-d
//               coordinates, unmodified by the set_transform()
//               matrix.
//////////////////////////////////////////////////////////////////// 1 4 this 3 842  
362 0 0 6 376 772 0 0 297 ////////////////////////////////////////////////////////////////////
//     Function: TextNode::get_height
//       Access: Published
//  Description: Returns the net height of the text in local 2-d
//               coordinates.
//////////////////////////////////////////////////////////////////// 1 4 this 3 842  
363 0 0 6 377 772 0 0 295 ////////////////////////////////////////////////////////////////////
//     Function: TextNode::get_width
//       Access: Published
//  Description: Returns the net width of the text in local 2-d
//               coordinates.
//////////////////////////////////////////////////////////////////// 1 4 this 3 842  
364 0 0 7 378 853 0 0 395 ////////////////////////////////////////////////////////////////////
//     Function: TextNode::get_upper_left_3d
//       Access: Published
//  Description: Returns the upper-left extent of the text object,
//               after it has been transformed into 3-d space by
//               applying the set_transform() matrix.
//////////////////////////////////////////////////////////////////// 1 4 this 3 842  
365 0 0 7 379 853 0 0 397 ////////////////////////////////////////////////////////////////////
//     Function: TextNode::get_lower_right_3d
//       Access: Published
//  Description: Returns the lower-right extent of the text object,
//               after it has been transformed into 3-d space by
//               applying the set_transform() matrix.
//////////////////////////////////////////////////////////////////// 1 4 this 3 842  
366 0 0 6 380 765 0 0 394 ////////////////////////////////////////////////////////////////////
//     Function: TextNode::get_num_rows
//       Access: Published
//  Description: Returns the number of rows of text that were
//               generated.  This counts word-wrapped rows as well as
//               rows generated due to embedded newlines.
//////////////////////////////////////////////////////////////////// 1 4 this 3 842  
367 0 0 7 381 806 0 0 403 ////////////////////////////////////////////////////////////////////
//     Function: TextNode::generate
//       Access: Published
//  Description: Generates the text, according to the parameters
//               indicated within the TextNode, and returns a Node
//               that may be parented within the tree to represent it.
//////////////////////////////////////////////////////////////////// 1 4 this 3 841  
368 0 0 4 382 780 0 0 442 ////////////////////////////////////////////////////////////////////
//     Function: TextNode::update
//       Access: Published
//  Description: Can be called after the TextNode has been fully
//               configured, to force the node to recompute its text
//               immediately, rather than waiting for it to be drawn.
//               This call is optional.
//////////////////////////////////////////////////////////////////// 1 4 this 3 841  
369 0 0 4 383 780 0 0 537 ////////////////////////////////////////////////////////////////////
//     Function: TextNode::force_update
//       Access: Published
//  Description: Forces the TextNode to recompute itself now, even if
//               it believes nothing has changed.  Normally, this
//               should not need to be called, but it may be useful if
//               some properties change outside of the TextNode's
//               knowledge (for instance, within the font).
//////////////////////////////////////////////////////////////////// 1 4 this 3 841  
370 0 0 7 384 806 0 0 637 ////////////////////////////////////////////////////////////////////
//     Function: TextNode::get_internal_geom
//       Access: Published
//  Description: Returns the actual node that is used internally to
//               render the text, if the TextNode is parented within
//               the scene graph.
//
//               In general, you should not call this method.  Call
//               generate() instead if you want to get a handle to
//               geometry that represents the text.  This method is
//               provided as a debugging aid only.
//////////////////////////////////////////////////////////////////// 1 4 this 3 842  
371 0 0 7 385 776 0 0 0 0 
372 0 0 7 270 806 0 0 0 1 4 this 3 841  
373 0 0 7 271 841 632 0 0 1 4 this 3 806  
374 0 0 6 273 837 0 0 0 1 4 this 3 841  
375 0 0 7 274 841 632 0 0 1 4 this 3 837  
376 0 0 6 275 809 0 0 0 1 4 this 3 841  
377 0 0 7 276 841 632 0 0 1 4 this 3 809  
115
739 9 TextGlyph 0 75777 9 TextGlyph 9 TextGlyph 0 0 0 0 0 0 6 378 379 380 381 382 383 0 0 1 0 740 0 0 0 0 329
////////////////////////////////////////////////////////////////////
//       Class : TextGlyph
// Description : A representation of a single glyph (character) from a
//               font.  This is a piece of renderable geometry of some
//               kind.
////////////////////////////////////////////////////////////////////

740 19 TypedReferenceCount 0 2049 19 TypedReferenceCount 19 TypedReferenceCount 0 0 0 0 0 0 0 0 0 0 0 0 710
////////////////////////////////////////////////////////////////////
//       Class : TypedReferenceCount
// Description : A base class for things which need to inherit from
//               both TypedObject and from ReferenceCount.  It's
//               convenient to define this intermediate base class
//               instead of multiply inheriting from the two classes
//               each time they are needed, so that we can sensibly
//               pass around pointers to things which are both
//               TypedObjects and ReferenceCounters.
//               
//               See also TypedObject for detailed instructions.
////////////////////////////////////////////////////////////////////

741 8 TextFont 0 26625 8 TextFont 8 TextFont 0 0 0 0 388 0 9 389 390 392 393 394 395 396 397 398 0 1 391 2 3 740 384 385 3 742 386 387 0 2 743 744 497
////////////////////////////////////////////////////////////////////
//       Class : TextFont
// Description : An encapsulation of a font; i.e. a set of glyphs that
//               may be assembled together by a TextNode to represent
//               a string of text.
//
//               This is just an abstract interface; see
//               StaticTextFont or DynamicTextFont for an actual
//               implementation.
////////////////////////////////////////////////////////////////////

742 7 Namable 0 2049 7 Namable 7 Namable 0 0 0 0 0 0 0 0 0 0 0 0 324
////////////////////////////////////////////////////////////////////
//       Class : Namable
// Description : A base class for all things which can have a name.
//               The name is either empty or nonempty, but it is never
//               NULL.
////////////////////////////////////////////////////////////////////

743 10 RenderMode 0 794624 20 TextFont::RenderMode 20 TextFont::RenderMode 741 0 0 0 0 0 0 0 0 0 6 10 RM_texture 20 TextFont::RM_texture 44
// Each glyph is a single textured rectangle
0 12 RM_wireframe 22 TextFont::RM_wireframe 39
// Each glyph is a lot of line segments
1 10 RM_polygon 20 TextFont::RM_polygon 35
// Each glyph is a lot of triangles
2 11 RM_extruded 21 TextFont::RM_extruded 38
// a 3-D outline, like a cookie cutter
3 8 RM_solid 18 TextFont::RM_solid 44
// combination of RM_extruded and RM_polygon
4 10 RM_invalid 20 TextFont::RM_invalid 57
// Returned by string_render_mode() for an invalid match.
5 0 0

744 12 WindingOrder 0 794624 22 TextFont::WindingOrder 22 TextFont::WindingOrder 741 0 0 0 0 0 0 0 0 0 4 10 WO_default 20 TextFont::WO_default 0
0 7 WO_left 17 TextFont::WO_left 0
1 8 WO_right 18 TextFont::WO_right 0
2 10 WO_invalid 20 TextFont::WO_invalid 0
3 0 0

745 16 DynamicTextGlyph 0 75777 16 DynamicTextGlyph 16 DynamicTextGlyph 0 0 0 0 0 0 11 399 400 401 402 403 404 405 406 407 408 409 0 0 1 0 739 0 0 0 0 411
////////////////////////////////////////////////////////////////////
//       Class : DynamicTextGlyph
// Description : A specialization on TextGlyph that is generated and
//               stored by a DynamicTextFont.  This keeps some
//               additional information, such as where the glyph
//               appears on a texture map.
////////////////////////////////////////////////////////////////////

746 15 DynamicTextPage 0 141313 15 DynamicTextPage 15 DynamicTextPage 0 0 0 0 414 0 4 410 411 412 413 0 0 1 0 747 0 0 0 0 419
////////////////////////////////////////////////////////////////////
//       Class : DynamicTextPage
// Description : A single "page" of a DynamicTextFont.  This is a
//               single texture that holds a number of glyphs for
//               rendering.  The font starts out with one page, and
//               will add more as it needs them.
////////////////////////////////////////////////////////////////////

747 7 Texture 0 2049 7 Texture 7 Texture 0 0 0 0 0 0 0 0 0 0 0 0 1051
////////////////////////////////////////////////////////////////////
//       Class : Texture
// Description : Represents a texture object, which is typically a
//               single 2-d image but may also represent a 1-d or 3-d
//               texture image, or the six 2-d faces of a cube map
//               texture.
//
//               A texture's image data might be stored in system RAM
//               (see get_ram_image()) or its image may be represented
//               in texture memory on one or more
//               GraphicsStateGuardians (see prepare()), or both.  The
//               typical usage pattern is that a texture is loaded
//               from an image file on disk, which copies its image
//               data into system RAM; then the first time the texture
//               is rendered its image data is copied to texture
//               memory (actually, to the graphics API), and the
//               system RAM image is automatically freed.
////////////////////////////////////////////////////////////////////

748 15 DynamicTextFont 0 26625 15 DynamicTextFont 15 DynamicTextFont 0 0 0 1 419 420 0 45 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 1 854 0 2 3 741 415 416 3 749 417 418 0 0 469
////////////////////////////////////////////////////////////////////
//       Class : DynamicTextFont
// Description : A DynamicTextFont is a special TextFont object that
//               rasterizes its glyphs from a standard font file
//               (e.g. a TTF file) on the fly.  It requires the
//               FreeType 2.0 library (or any higher,
//               backward-compatible version).
////////////////////////////////////////////////////////////////////

749 12 FreetypeFont 0 2049 12 FreetypeFont 12 FreetypeFont 0 0 0 0 0 0 0 0 0 0 0 0 481
////////////////////////////////////////////////////////////////////
//       Class : FreetypeFont
// Description : This is a common base class for both DynamicTextFont
//               and PNMTextMaker.  Both of these are utility classes
//               that use the FreeType library to generate glyphs from
//               fonts; this class abstracts out that common wrapper
//               around FreeType.
////////////////////////////////////////////////////////////////////

750 8 FontPool 0 141313 8 FontPool 8 FontPool 0 0 0 0 475 0 9 466 467 468 469 470 471 472 473 474 0 0 0 0 0 402
////////////////////////////////////////////////////////////////////
//       Class : FontPool
// Description : This is the preferred interface for loading fonts for
//               the TextNode system.  It is similar to ModelPool and
//               TexturePool in that it unifies references to the same
//               filename.
////////////////////////////////////////////////////////////////////

751 13 GeomTextGlyph 0 75777 13 GeomTextGlyph 13 GeomTextGlyph 0 0 0 0 0 0 1 476 0 0 1 0 752 0 0 0 0 549
////////////////////////////////////////////////////////////////////
//       Class : GeomTextGlyph
// Description : This is a specialization on Geom for containing a
//               primitive intended to represent a DynamicTextGlyph.
//               Its sole purpose is to maintain the geom count on the
//               glyph, so we can determine the actual usage count on
//               a dynamic glyph (and thus know when it is safe to
//               recycle the glyph).
////////////////////////////////////////////////////////////////////

752 4 Geom 0 2049 4 Geom 4 Geom 0 0 0 0 0 0 0 1 855 0 0 0 0 687
////////////////////////////////////////////////////////////////////
//       Class : Geom
// Description : A container for geometry primitives.  This class
//               associates one or more GeomPrimitive objects with a
//               table of vertices defined by a GeomVertexData object.
//               All of the primitives stored in a particular Geom are
//               drawn from the same set of vertices (each primitive
//               uses a subset of all of the vertices in the table),
//               and all of them must be rendered at the same time, in
//               the same graphics state.
////////////////////////////////////////////////////////////////////

753 14 StaticTextFont 0 141313 14 StaticTextFont 14 StaticTextFont 0 0 0 1 477 479 0 1 478 0 0 1 0 741 0 0 0 0 486
////////////////////////////////////////////////////////////////////
//       Class : StaticTextFont
// Description : A StaticTextFont is loaded up from a model that was
//               previously generated via egg-mkfont, and contains all
//               of its glyphs already generated and available for
//               use.  It doesn't require linking with any external
//               libraries like FreeType.
////////////////////////////////////////////////////////////////////

754 14 TextProperties 0 141313 14 TextProperties 14 TextProperties 0 0 0 1 480 567 0 86 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 0 0 0 0 1 755 1219
////////////////////////////////////////////////////////////////////
//       Class : TextProperties
// Description : This defines the set of visual properties that may be
//               assigned to the individual characters of the text.
//               (Properties which affect the overall block of text
//               can only be specified on the TextNode directly).
//
//               Typically, there is just one set of properties on a
//               given block of text, which is set directly on the
//               TextNode (TextNode inherits from TextProperties).
//               That makes all of the text within a particular block
//               have the same appearance.
//
//               This separate class exists in order to implement
//               multiple different kinds of text appearing within one
//               block.  The text string itself may reference a
//               TextProperties structure by name using the \1 and \2
//               tokens embedded within the string; each nested
//               TextProperties structure modifies the appearance of
//               subsequent text within the block.
////////////////////////////////////////////////////////////////////

755 9 Alignment 0 794624 25 TextProperties::Alignment 25 TextProperties::Alignment 754 0 0 0 0 0 0 0 0 0 6 6 A_left 22 TextProperties::A_left 0
0 7 A_right 23 TextProperties::A_right 0
1 8 A_center 24 TextProperties::A_center 0
2 12 A_boxed_left 28 TextProperties::A_boxed_left 0
3 13 A_boxed_right 29 TextProperties::A_boxed_right 0
4 14 A_boxed_center 30 TextProperties::A_boxed_center 0
5 0 0

756 11 TextGraphic 0 141313 11 TextGraphic 11 TextGraphic 0 0 0 1 568 575 0 6 569 570 571 572 573 574 0 0 0 0 0 1140
////////////////////////////////////////////////////////////////////
//       Class : TextGraphic
// Description : This defines a special model that has been
//               constructed for the purposes of embedding an
//               arbitrary graphic image within a text paragraph.
//
//               It can be any arbitrary model, though it should be
//               built along the same scale as the text, and it should
//               probably be at least mostly two-dimensional.
//               Typically, this means it should be constructed in the
//               X-Z plane, and it should have a maximum vertical (Z)
//               height of 1.0.
//
//               The frame specifies an arbitrary bounding volume in
//               the form (left, right, bottom, top).  This indicates
//               the amount of space that will be reserved within the
//               paragraph.  The actual model is not actually required
//               to fit within this rectangle, but if it does not, it
//               may visually overlap with nearby text.
////////////////////////////////////////////////////////////////////

757 21 TextPropertiesManager 0 43009 21 TextPropertiesManager 21 TextPropertiesManager 0 0 0 0 0 0 10 576 577 578 579 580 581 582 583 584 585 0 0 0 0 0 1613
////////////////////////////////////////////////////////////////////
//       Class : TextPropertiesManager
// Description : This defines all of the TextProperties structures
//               that might be referenced by name from an embedded
//               text string.
//
//               A text string, as rendered by a TextNode, can contain
//               embedded references to one of the TextProperties
//               defined here, by enclosing the name between \1 (ASCII
//               0x01) characters; this causes a "push" to the named
//               state.  All text following the closing \1 character
//               will then be rendered in the new state.  The next \2
//               (ASCII 0x02) character will then restore the previous
//               state for subsequent text.
//
//               For instance, "x\1up\1n\2 + y" indicates that the
//               character "x" will be rendered in the normal state,
//               the character "n" will be rendered in the "up" state,
//               and then " + y" will be rendered in the normal state
//               again.
//
//               This can also be used to define arbitrary models that
//               can serve as embedded graphic images in a text
//               paragraph.  This works similarly; the convention is
//               to create a TextGraphic that describes the graphic
//               image, and then associate it here via the
//               set_graphic() call.  Then "\5name\5" will embed the
//               named graphic.
////////////////////////////////////////////////////////////////////

758 13 TextAssembler 0 26625 13 TextAssembler 13 TextAssembler 0 0 0 1 586 588 0 37 587 589 590 591 592 593 594 595 596 597 598 599 600 601 602 603 604 605 606 607 608 609 610 611 612 613 614 615 616 617 618 619 620 621 622 623 624 0 0 0 0 0 541
////////////////////////////////////////////////////////////////////
//       Class : TextAssembler
// Description : This class is not normally used directly by user
//               code, but is used by the TextNode to lay out a block
//               of text and convert it into rows of Geoms according
//               to the TextProperties.  However, user code may take
//               advantage of it, if desired, for very low-level text
//               operations.
////////////////////////////////////////////////////////////////////

759 8 TextNode 0 26625 8 TextNode 8 TextNode 0 0 0 1 631 632 0 106 633 634 635 636 637 638 639 640 641 642 643 644 645 646 647 648 649 650 651 652 653 654 655 656 657 658 659 660 661 662 663 664 665 666 667 668 669 670 671 672 673 674 675 676 677 678 679 680 681 682 683 684 685 686 687 688 689 690 691 692 693 694 695 696 697 698 699 700 701 702 703 704 705 706 707 708 709 710 711 712 713 714 715 716 717 718 719 720 721 722 723 724 725 726 727 728 729 730 731 732 733 734 735 736 737 738 0 0 3 3 760 625 626 3 761 627 628 3 754 629 630 0 1 762 1336
////////////////////////////////////////////////////////////////////
//       Class : TextNode
// Description : The primary interface to this module.  This class
//               does basic text assembly; given a string of text and
//               a TextFont object, it creates a piece of geometry
//               that may be placed in the 3-d or 2-d world to
//               represent the indicated text.
//
//               The TextNode may be used in one of two ways.
//               Naively, it may simply be parented directly into the
//               scene graph and rendered as if it were a GeomNode; in
//               this mode, the actual polygon geometry that renders
//               the text is not directly visible or accessible, but
//               remains hidden within the TextNode.
//
//               The second way TextNode may be used is as a text
//               generator.  To use it in this way, do not parent the
//               TextNode to the scene graph; instead, set the
//               properties of the text and call generate() to return
//               an ordinary node, containing ordinary geometry, which
//               you may use however you like.  Each time you call
//               generate() a new node is returned.
////////////////////////////////////////////////////////////////////

760 9 PandaNode 0 2049 9 PandaNode 9 PandaNode 0 0 0 0 0 0 0 3 856 857 858 0 0 0 0 374
////////////////////////////////////////////////////////////////////
//       Class : PandaNode
// Description : A basic node of the scene graph or data graph.  This
//               is the base class of all specialized nodes, and also
//               serves as a generic node with no special properties.
////////////////////////////////////////////////////////////////////

761 11 TextEncoder 0 2049 11 TextEncoder 11 TextEncoder 0 0 0 0 0 0 0 0 0 0 0 0 676
////////////////////////////////////////////////////////////////////
//       Class : TextEncoder
// Description : This class can be used to convert text between
//               multiple representations, e.g. utf-8 to Unicode.  You
//               may use it as a static class object, passing the
//               encoding each time, or you may create an instance and
//               use that object, which will record the current
//               encoding and retain the current string.
//
//               This class is also a base class of TextNode, which
//               inherits this functionality.
////////////////////////////////////////////////////////////////////

762 12 FlattenFlags 0 794624 22 TextNode::FlattenFlags 22 TextNode::FlattenFlags 759 0 0 0 0 0 0 0 0 0 5 7 FF_none 17 TextNode::FF_none 0
0 8 FF_light 18 TextNode::FF_light 0
1 9 FF_medium 19 TextNode::FF_medium 0
2 9 FF_strong 19 TextNode::FF_strong 0
4 16 FF_dynamic_merge 26 TextNode::FF_dynamic_merge 0
8 0 0

763 17 TextGlyph const * 0 8576 17 TextGlyph const * 17 TextGlyph const * 0 0 764 0 0 0 0 0 0 0 0 0 0

764 15 TextGlyph const 0 8832 15 TextGlyph const 15 TextGlyph const 0 0 739 0 0 0 0 0 0 0 0 0 0

765 3 int 0 8194 3 int 3 int 0 1 0 0 0 0 0 0 0 0 0 0 0

766 9 UsageHint 0 794624 20 GeomEnums::UsageHint 20 GeomEnums::UsageHint 767 0 0 0 0 0 0 0 0 0 5 9 UH_client 20 GeomEnums::UH_client 80
// UH_client: don't attempt to upload the data; always keep it on
// the client.
0 9 UH_stream 20 GeomEnums::UH_stream 154
// UH_stream: the data will be created once, used to render a few
// times, and then discarded.  This should be used for short-lived
// temporary objects.
1 10 UH_dynamic 21 GeomEnums::UH_dynamic 169
// UH_dynamic: the data will be repeatedly modified and
// re-rendered.  This is for data that will be modified at
// runtime, such as animated or soft-skinned vertices.
2 9 UH_static 20 GeomEnums::UH_static 283
// UH_static: the data will be created once, and used to render
// many times, without modification.  This is the most common
// case, since typically vertex data is not directly animated
// (this is not related to scene graph animation, e.g. from
// adjusting transforms on a node).
3 14 UH_unspecified 25 GeomEnums::UH_unspecified 268
// UH_unspecified: the usage is unspecified.  This is intended as
// a "don't care" option for abstract objects; it should not be
// applied to any actual geometry to be rendered.  You take your
// chances if a geom actually gets into the scene graph with this
// set.
4 0 0

767 9 GeomEnums 0 2048 9 GeomEnums 9 GeomEnums 0 0 0 0 0 0 0 0 0 0 0 0 400
////////////////////////////////////////////////////////////////////
//       Class : GeomEnums
// Description : This class exists just to provide scoping for the
//               various enumerated types used by Geom,
//               GeomVertexData, GeomVertexArrayData, GeomPrimitive,
//               and other related classes.
////////////////////////////////////////////////////////////////////

768 6 Geom * 0 8576 6 Geom * 6 Geom * 0 0 752 0 0 0 0 0 0 0 0 0 0

769 17 RenderState const 0 8832 17 RenderState const 17 RenderState const 0 0 770 0 0 0 0 0 0 0 0 0 0

770 11 RenderState 0 2048 11 RenderState 11 RenderState 0 0 0 0 0 0 0 0 0 0 0 0 621
////////////////////////////////////////////////////////////////////
//       Class : RenderState
// Description : This represents a unique collection of RenderAttrib
//               objects that correspond to a particular renderable
//               state.
//
//               You should not attempt to create or modify a
//               RenderState object directly.  Instead, call one of
//               the make() functions to create one for you.  And
//               instead of modifying a RenderState object, create a
//               new one.
////////////////////////////////////////////////////////////////////

771 19 RenderState const * 0 8576 19 RenderState const * 19 RenderState const * 0 0 769 0 0 0 0 0 0 0 0 0 0

772 11 PN_stdfloat 0 2105344 11 PN_stdfloat 11 PN_stdfloat 0 0 773 0 0 0 0 0 0 0 0 0 0

773 5 float 0 8194 5 float 5 float 0 2 0 0 0 0 0 0 0 0 0 0 0

774 4 bool 0 8194 4 bool 4 bool 0 4 0 0 0 0 0 0 0 0 0 0 0

775 10 TypeHandle 0 2048 10 TypeHandle 10 TypeHandle 0 0 0 0 0 0 0 0 0 0 0 0 1098
////////////////////////////////////////////////////////////////////
//       Class : TypeHandle
// Description : TypeHandle is the identifier used to differentiate
//               C++ class types.  Any C++ classes that inherit from
//               some base class, and must be differentiated at run
//               time, should store a static TypeHandle object that
//               can be queried through a static member function
//               named get_class_type().  Most of the time, it is also
//               desirable to inherit from TypedObject, which provides
//               some virtual functions to return the TypeHandle for a
//               particular instance.
//
//               At its essence, a TypeHandle is simply a unique
//               identifier that is assigned by the TypeRegistry.  The
//               TypeRegistry stores a tree of TypeHandles, so that
//               ancestry of a particular type may be queried, and the
//               type name may be retrieved for run-time display.
////////////////////////////////////////////////////////////////////

776 12 TypeHandle * 0 8576 12 TypeHandle * 12 TypeHandle * 0 0 775 0 0 0 0 0 0 0 0 0 0

777 16 TextFont const * 0 8576 16 TextFont const * 16 TextFont const * 0 0 778 0 0 0 0 0 0 0 0 0 0

778 14 TextFont const 0 8832 14 TextFont const 14 TextFont const 0 0 741 0 0 0 0 0 0 0 0 0 0

779 10 TextFont * 0 8576 10 TextFont * 10 TextFont * 0 0 741 0 0 0 0 0 0 0 0 0 0

780 4 void 0 8194 4 void 4 void 0 6 0 0 0 0 0 0 0 0 0 0 0

781 9 ostream * 0 8576 9 ostream * 9 ostream * 0 0 782 0 0 0 0 0 0 0 0 0 0

782 7 ostream 0 2048 7 ostream 7 ostream 0 0 0 0 0 0 0 0 0 0 0 0 0

783 21 TypedReferenceCount * 0 8576 21 TypedReferenceCount * 21 TypedReferenceCount * 0 0 740 0 0 0 0 0 0 0 0 0 0

784 9 Namable * 0 8576 9 Namable * 9 Namable * 0 0 742 0 0 0 0 0 0 0 0 0 0

785 24 DynamicTextGlyph const * 0 8576 24 DynamicTextGlyph const * 24 DynamicTextGlyph const * 0 0 786 0 0 0 0 0 0 0 0 0 0

786 22 DynamicTextGlyph const 0 8832 22 DynamicTextGlyph const 22 DynamicTextGlyph const 0 0 745 0 0 0 0 0 0 0 0 0 0

787 17 DynamicTextPage * 0 8576 17 DynamicTextPage * 17 DynamicTextPage * 0 0 746 0 0 0 0 0 0 0 0 0 0

788 23 DynamicTextPage const * 0 8576 23 DynamicTextPage const * 23 DynamicTextPage const * 0 0 789 0 0 0 0 0 0 0 0 0 0

789 21 DynamicTextPage const 0 8832 21 DynamicTextPage const 21 DynamicTextPage const 0 0 746 0 0 0 0 0 0 0 0 0 0

790 23 DynamicTextFont const * 0 8576 23 DynamicTextFont const * 23 DynamicTextFont const * 0 0 791 0 0 0 0 0 0 0 0 0 0

791 21 DynamicTextFont const 0 8832 21 DynamicTextFont const 21 DynamicTextFont const 0 0 748 0 0 0 0 0 0 0 0 0 0

792 17 DynamicTextFont * 0 8576 17 DynamicTextFont * 17 DynamicTextFont * 0 0 748 0 0 0 0 0 0 0 0 0 0

793 16 Filename const * 0 8576 16 Filename const * 16 Filename const * 0 0 794 0 0 0 0 0 0 0 0 0 0

794 14 Filename const 0 8832 14 Filename const 14 Filename const 0 0 795 0 0 0 0 0 0 0 0 0 0

795 8 Filename 0 2048 8 Filename 8 Filename 0 0 0 0 0 0 0 0 0 0 0 0 869
////////////////////////////////////////////////////////////////////
//       Class : Filename
// Description : The name of a file, such as a texture file or an Egg
//               file.  Stores the full pathname, and includes
//               functions for extracting out the directory prefix
//               part and the file extension and stuff.
//
//               A Filename is also aware of the mapping between the
//               Unix-like filename convention we use internally, and
//               the local OS's specific filename convention, and it
//               knows how to perform basic OS-specific I/O, like
//               testing for file existence and searching a
//               searchpath, as well as the best way to open an
//               fstream for reading or writing.
////////////////////////////////////////////////////////////////////

796 13 atomic string 0 2 13 atomic string 13 atomic string 0 7 0 0 0 0 0 0 0 0 0 0 0

797 10 FilterType 0 794624 24 SamplerState::FilterType 24 SamplerState::FilterType 798 0 0 0 0 0 0 0 0 0 9 10 FT_nearest 24 SamplerState::FT_nearest 25
// Point sample the pixel
0 9 FT_linear 23 SamplerState::FT_linear 48
// Bilinear filtering of four neighboring pixels
1 25 FT_nearest_mipmap_nearest 39 SamplerState::FT_nearest_mipmap_nearest 55
// Point sample the pixel from the nearest mipmap level
2 24 FT_linear_mipmap_nearest 38 SamplerState::FT_linear_mipmap_nearest 58
// Bilinear filter the pixel from the nearest mipmap level
3 24 FT_nearest_mipmap_linear 38 SamplerState::FT_nearest_mipmap_linear 68
// Point sample the pixel from two mipmap levels, and linearly blend
4 23 FT_linear_mipmap_linear 37 SamplerState::FT_linear_mipmap_linear 115
// A.k.a. trilinear filtering: Bilinear filter the pixel from
// two mipmap levels, and linearly blend the results.
5 9 FT_shadow 23 SamplerState::FT_shadow 76
// The OpenGL ARB_shadow extension can be thought of as a kind of filtering.
6 10 FT_default 24 SamplerState::FT_default 128
// Default is usually linear, but it depends on format.
// This was added at the end of the list to avoid bumping TXO version #.
7 10 FT_invalid 24 SamplerState::FT_invalid 57
// Returned by string_filter_type() for an invalid match.
8 0 0

798 12 SamplerState 0 2048 12 SamplerState 12 SamplerState 0 0 0 0 0 0 0 0 0 0 0 0 395
////////////////////////////////////////////////////////////////////
//       Class : SamplerState
// Description : Represents a set of settings that indicate how a
//               texture is sampled.  This can be used to sample the
//               same texture using different settings in different
//               places.
////////////////////////////////////////////////////////////////////

799 14 LColor const * 0 8576 14 LColor const * 14 LColor const * 0 0 800 0 0 0 0 0 0 0 0 0 0

800 12 LColor const 0 8832 12 LColor const 12 LColor const 0 0 801 0 0 0 0 0 0 0 0 0 0

801 6 LColor 0 2105344 6 LColor 6 LColor 0 0 802 0 0 0 0 0 0 0 0 0 0

802 7 LColorf 0 2105344 7 LColorf 7 LColorf 0 0 803 0 0 0 0 0 0 0 0 0 0

803 10 LVecBase4f 0 2048 10 LVecBase4f 10 LVecBase4f 0 0 0 0 0 0 0 0 0 0 0 0 265
////////////////////////////////////////////////////////////////////
//       Class : LVecBase4
// Description : This is the base class for all three-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

804 6 Format 0 794624 15 Texture::Format 15 Texture::Format 747 0 0 0 0 0 0 0 0 0 41 15 F_depth_stencil 24 Texture::F_depth_stencil 0
1 13 F_color_index 22 Texture::F_color_index 0
2 5 F_red 14 Texture::F_red 0
3 7 F_green 16 Texture::F_green 0
4 6 F_blue 15 Texture::F_blue 0
5 7 F_alpha 16 Texture::F_alpha 0
6 5 F_rgb 14 Texture::F_rgb 55
// any suitable RGB mode, whatever the hardware prefers
7 6 F_rgb5 15 Texture::F_rgb5 27
// 5 bits per R,G,B channel
8 6 F_rgb8 15 Texture::F_rgb8 27
// 8 bits per R,G,B channel
9 7 F_rgb12 16 Texture::F_rgb12 28
// 12 bits per R,G,B channel
10 8 F_rgb332 17 Texture::F_rgb332 33
// 3 bits per R & G, 2 bits for B
11 6 F_rgba 15 Texture::F_rgba 56
// any suitable RGBA mode, whatever the hardware prefers
12 6 F_rgbm 15 Texture::F_rgbm 58
// as above, but only requires 1 bit for alpha (i.e. mask)
13 7 F_rgba4 16 Texture::F_rgba4 29
// 4 bits per R,G,B,A channel
14 7 F_rgba5 16 Texture::F_rgba5 40
// 5 bits per R,G,B channel, 1 bit alpha
15 7 F_rgba8 16 Texture::F_rgba8 29
// 8 bits per R,G,B,A channel
16 8 F_rgba12 17 Texture::F_rgba12 30
// 12 bits per R,G,B,A channel
17 11 F_luminance 20 Texture::F_luminance 0
18 17 F_luminance_alpha 26 Texture::F_luminance_alpha 33
// 8 bits luminance, 8 bits alpha
19 21 F_luminance_alphamask 30 Texture::F_luminance_alphamask 46
// 8 bits luminance, only needs 1 bit of alpha
20 8 F_rgba16 17 Texture::F_rgba16 30
// 16 bits per R,G,B,A channel
21 8 F_rgba32 17 Texture::F_rgba32 30
// 32 bits per R,G,B,A channel
22 17 F_depth_component 26 Texture::F_depth_component 0
23 19 F_depth_component16 28 Texture::F_depth_component16 0
24 19 F_depth_component24 28 Texture::F_depth_component24 0
25 19 F_depth_component32 28 Texture::F_depth_component32 0
26 5 F_r16 14 Texture::F_r16 0
27 6 F_rg16 15 Texture::F_rg16 0
28 7 F_rgb16 16 Texture::F_rgb16 0
29 6 F_srgb 15 Texture::F_srgb 100
// These formats are in the sRGB color space.
// RGB is 2.2 gamma corrected, alpha is always linear.
30 12 F_srgb_alpha 21 Texture::F_srgb_alpha 0
31 12 F_sluminance 21 Texture::F_sluminance 0
32 18 F_sluminance_alpha 27 Texture::F_sluminance_alpha 0
33 6 F_r32i 15 Texture::F_r32i 41
// 32-bit integer, used for atomic access
34 5 F_r32 14 Texture::F_r32 0
35 6 F_rg32 15 Texture::F_rg32 0
36 7 F_rgb32 16 Texture::F_rgb32 0
37 5 F_r8i 14 Texture::F_r8i 31
// 8 integer bits per R channel
38 6 F_rg8i 15 Texture::F_rg8i 33
// 8 integer bits per R,G channel
39 7 F_rgb8i 16 Texture::F_rgb8i 35
// 8 integer bits per R,G,B channel
40 8 F_rgba8i 17 Texture::F_rgba8i 37
// 8 integer bits per R,G,B,A channel
41 0 0

805 14 FreetypeFont * 0 8576 14 FreetypeFont * 14 FreetypeFont * 0 0 749 0 0 0 0 0 0 0 0 0 0

806 11 PandaNode * 0 8576 11 PandaNode * 11 PandaNode * 0 0 760 0 0 0 0 0 0 0 0 0 0

807 16 CoordinateSystem 0 532480 16 CoordinateSystem 16 CoordinateSystem 0 0 0 0 0 0 0 0 0 0 6 10 CS_default 10 CS_default 213
// The CS_default entry does not refer to a particular coordinate
// system, but rather to the value stored in
// default_coordinate_system, which in turn is loaded from the
// config variable "coordinate-system".
0 12 CS_zup_right 12 CS_zup_right 0
1 12 CS_yup_right 12 CS_yup_right 0
2 11 CS_zup_left 11 CS_zup_left 0
3 11 CS_yup_left 11 CS_yup_left 0
4 10 CS_invalid 10 CS_invalid 155
// CS_invalid is not a coordinate system at all.  It can be used in
// user-input processing code to indicate a contradictory coordinate
// system request.
5 0 0

808 16 StaticTextFont * 0 8576 16 StaticTextFont * 16 StaticTextFont * 0 0 753 0 0 0 0 0 0 0 0 0 0

809 16 TextProperties * 0 8576 16 TextProperties * 16 TextProperties * 0 0 754 0 0 0 0 0 0 0 0 0 0

810 22 TextProperties const * 0 8576 22 TextProperties const * 22 TextProperties const * 0 0 811 0 0 0 0 0 0 0 0 0 0

811 20 TextProperties const 0 8832 20 TextProperties const 20 TextProperties const 0 0 754 0 0 0 0 0 0 0 0 0 0

812 8 LColor * 0 8576 8 LColor * 8 LColor * 0 0 801 0 0 0 0 0 0 0 0 0 0

813 17 LVecBase2 const * 0 8576 17 LVecBase2 const * 17 LVecBase2 const * 0 0 814 0 0 0 0 0 0 0 0 0 0

814 15 LVecBase2 const 0 8832 15 LVecBase2 const 15 LVecBase2 const 0 0 815 0 0 0 0 0 0 0 0 0 0

815 9 LVecBase2 0 2105344 9 LVecBase2 9 LVecBase2 0 0 816 0 0 0 0 0 0 0 0 0 0

816 10 LVecBase2f 0 2048 10 LVecBase2f 10 LVecBase2f 0 0 0 0 0 0 0 0 0 0 0 0 263
////////////////////////////////////////////////////////////////////
//       Class : LVecBase2
// Description : This is the base class for all two-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

817 8 LVector2 0 2105344 8 LVector2 8 LVector2 0 0 818 0 0 0 0 0 0 0 0 0 0

818 9 LVector2f 0 2048 9 LVector2f 9 LVector2f 0 0 0 0 0 0 0 0 0 0 0 0 219
////////////////////////////////////////////////////////////////////
//       Class : LVector2
// Description : This is a two-component vector offset.
////////////////////////////////////////////////////////////////////

819 10 LVector2 * 0 8576 10 LVector2 * 10 LVector2 * 0 0 817 0 0 0 0 0 0 0 0 0 0

820 13 TextGraphic * 0 8576 13 TextGraphic * 13 TextGraphic * 0 0 756 0 0 0 0 0 0 0 0 0 0

821 16 NodePath const * 0 8576 16 NodePath const * 16 NodePath const * 0 0 822 0 0 0 0 0 0 0 0 0 0

822 14 NodePath const 0 8832 14 NodePath const 14 NodePath const 0 0 823 0 0 0 0 0 0 0 0 0 0

823 8 NodePath 0 2048 8 NodePath 8 NodePath 0 0 0 0 0 0 0 2 859 860 0 0 0 0 1139
////////////////////////////////////////////////////////////////////
//       Class : NodePath
// Description : NodePath is the fundamental system for disambiguating
//               instances, and also provides a higher-level interface
//               for manipulating the scene graph.
//
//               A NodePath is a list of connected nodes from the root
//               of the graph to any sub-node.  Each NodePath
//               therefore uniquely describes one instance of a node.
//
//               NodePaths themselves are lightweight objects that may
//               easily be copied and passed by value.  Their data is
//               stored as a series of NodePathComponents that are
//               stored on the nodes.  Holding a NodePath will keep a
//               reference count to all the nodes in the path.
//               However, if any node in the path is removed or
//               reparented (perhaps through a different NodePath),
//               the NodePath will automatically be updated to reflect
//               the changes.
////////////////////////////////////////////////////////////////////

824 17 LVecBase4 const * 0 8576 17 LVecBase4 const * 17 LVecBase4 const * 0 0 825 0 0 0 0 0 0 0 0 0 0

825 15 LVecBase4 const 0 8832 15 LVecBase4 const 15 LVecBase4 const 0 0 826 0 0 0 0 0 0 0 0 0 0

826 9 LVecBase4 0 2105344 9 LVecBase4 9 LVecBase4 0 0 803 0 0 0 0 0 0 0 0 0 0

827 19 TextGraphic const * 0 8576 19 TextGraphic const * 19 TextGraphic const * 0 0 828 0 0 0 0 0 0 0 0 0 0

828 17 TextGraphic const 0 8832 17 TextGraphic const 17 TextGraphic const 0 0 756 0 0 0 0 0 0 0 0 0 0

829 10 NodePath * 0 8576 10 NodePath * 10 NodePath * 0 0 823 0 0 0 0 0 0 0 0 0 0

830 11 LVecBase4 * 0 8576 11 LVecBase4 * 11 LVecBase4 * 0 0 826 0 0 0 0 0 0 0 0 0 0

831 23 TextPropertiesManager * 0 8576 23 TextPropertiesManager * 23 TextPropertiesManager * 0 0 757 0 0 0 0 0 0 0 0 0 0

832 29 TextPropertiesManager const * 0 8576 29 TextPropertiesManager const * 29 TextPropertiesManager const * 0 0 833 0 0 0 0 0 0 0 0 0 0

833 27 TextPropertiesManager const 0 8832 27 TextPropertiesManager const 27 TextPropertiesManager const 0 0 757 0 0 0 0 0 0 0 0 0 0

834 21 TextAssembler const * 0 8576 21 TextAssembler const * 21 TextAssembler const * 0 0 835 0 0 0 0 0 0 0 0 0 0

835 19 TextAssembler const 0 8832 19 TextAssembler const 19 TextAssembler const 0 0 758 0 0 0 0 0 0 0 0 0 0

836 15 TextAssembler * 0 8576 15 TextAssembler * 15 TextAssembler * 0 0 758 0 0 0 0 0 0 0 0 0 0

837 13 TextEncoder * 0 8576 13 TextEncoder * 13 TextEncoder * 0 0 761 0 0 0 0 0 0 0 0 0 0

838 7 wchar_t 0 8194 7 wchar_t 7 wchar_t 0 1 0 0 0 0 0 0 0 0 0 0 0

839 16 LVector2 const * 0 8576 16 LVector2 const * 16 LVector2 const * 0 0 840 0 0 0 0 0 0 0 0 0 0

840 14 LVector2 const 0 8832 14 LVector2 const 14 LVector2 const 0 0 817 0 0 0 0 0 0 0 0 0 0

841 10 TextNode * 0 8576 10 TextNode * 10 TextNode * 0 0 759 0 0 0 0 0 0 0 0 0 0

842 16 TextNode const * 0 8576 16 TextNode const * 16 TextNode const * 0 0 843 0 0 0 0 0 0 0 0 0 0

843 14 TextNode const 0 8832 14 TextNode const 14 TextNode const 0 0 759 0 0 0 0 0 0 0 0 0 0

844 9 Texture * 0 8576 9 Texture * 9 Texture * 0 0 747 0 0 0 0 0 0 0 0 0 0

845 16 LMatrix4 const * 0 8576 16 LMatrix4 const * 16 LMatrix4 const * 0 0 846 0 0 0 0 0 0 0 0 0 0

846 14 LMatrix4 const 0 8832 14 LMatrix4 const 14 LMatrix4 const 0 0 847 0 0 0 0 0 0 0 0 0 0

847 8 LMatrix4 0 2105344 8 LMatrix4 8 LMatrix4 0 0 848 0 0 0 0 0 0 0 0 0 0

848 9 LMatrix4f 0 2048 9 LMatrix4f 9 LMatrix4f 0 0 0 0 0 0 0 3 861 862 863 0 0 0 0 215
////////////////////////////////////////////////////////////////////
//       Class : LMatrix4
// Description : This is a 4-by-4 transform matrix.
////////////////////////////////////////////////////////////////////

849 10 LMatrix4 * 0 8576 10 LMatrix4 * 10 LMatrix4 * 0 0 847 0 0 0 0 0 0 0 0 0 0

850 8 Encoding 0 794624 21 TextEncoder::Encoding 21 TextEncoder::Encoding 761 0 0 0 0 0 0 0 0 0 3 9 E_iso8859 22 TextEncoder::E_iso8859 0
0 6 E_utf8 19 TextEncoder::E_utf8 0
1 9 E_unicode 22 TextEncoder::E_unicode 0
2 0 0

851 7 LPoint3 0 2105344 7 LPoint3 7 LPoint3 0 0 852 0 0 0 0 0 0 0 0 0 0

852 8 LPoint3f 0 2048 8 LPoint3f 8 LPoint3f 0 0 0 0 0 0 0 0 0 0 0 0 596
////////////////////////////////////////////////////////////////////
//       Class : LPoint3
// Description : This is a three-component point in space (as opposed
//               to a three-component vector, which represents a
//               direction and a distance).  Some of the methods are
//               slightly different between LPoint3 and LVector3; in
//               particular, subtraction of two points yields a
//               vector, while addition of a vector and a point yields
//               a point.
////////////////////////////////////////////////////////////////////

853 9 LPoint3 * 0 8576 9 LPoint3 * 9 LPoint3 * 0 0 851 0 0 0 0 0 0 0 0 0 0

0
0
10
854 0 0 47 9 get_pages 13 get_num_pages 8 get_page 
855 0 0 112 14 get_primitives 18 get_num_primitives 13 get_primitive 
856 0 0 269 11 get_parents 15 get_num_parents 10 get_parent 
857 0 0 269 12 get_children 16 get_num_children 9 get_child 
858 0 0 269 11 get_stashed 15 get_num_stashed 11 get_stashed 
859 0 0 640 9 get_nodes 13 get_num_nodes 8 get_node 
860 0 0 640 13 get_ancestors 13 get_num_nodes 12 get_ancestor 
861 0 0 773 8 get_rows 4 size 7 get_row 
862 0 0 773 8 get_cols 4 size 7 get_col 
863 0 0 773 9 get_row3s 4 size 8 get_row3 
