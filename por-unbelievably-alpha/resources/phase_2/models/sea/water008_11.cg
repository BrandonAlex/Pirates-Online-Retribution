//Cg
//
//Cg profile vp20 fp20


#define enable_reflection 1
#define enable_color_map 1
#define enable_alpha_map 1


void vshader(float3 vtx_position      : POSITION,
             float3 vtx_normal        : NORMAL,
             float2 vtx_texcoord0     : TEXCOORD0,
             out float4 l_position    : POSITION,

             out float2 l_texcoord0   : TEXCOORD0,
             out float2 l_texcoord1   : TEXCOORD1,  // projective texture coordinates
             out float2 l_interpolate : TEXCOORD2,  // xy = color map uv
             out float2 l_alpha_uv    : TEXCOORD3,  // xy = alpha color map uv

             out float4 l_color       : COLOR0,     // w = fog factor

             uniform float4 k_lightposition,
//             uniform float4 k_cameraposition,
             uniform float4 k_ambientcolor,
             uniform float4 k_diffusecolor,
             uniform float4 k_lightparameters,
             uniform float4 k_watercolor,

             uniform float4 k_fogexpdensity,
             uniform float4 k_map,                  // xy = map origin, zw = map scaling factor
             uniform float4 k_alphamap,             // xy = alpha map origin, zw = alpha map scaling factor
             uniform float4x4 trans_view_to_world,
             uniform float4x4 trans_model_to_view,
             uniform float4x4 trans_model_to_apiclip)
{
  float4 vertex;
  float4 position;
  
  vertex.xyz = vtx_position.xyz;
  vertex.w = 1.0;

  position = mul (trans_model_to_apiclip, vertex);
    
  l_texcoord0 = vtx_texcoord0;

  float4 view_space_position = mul (trans_model_to_view, vertex);

  // world coordinates to map UV 
  float2 world_space_position;

  world_space_position.xy = mul (trans_view_to_world, view_space_position).xy;
  l_interpolate.xy = (world_space_position.xy - k_map.xy) * k_map.zw;

  l_alpha_uv.xy = (world_space_position.xy - k_alphamap.xy) * k_alphamap.zw;

  // use alpha component for fog
  l_color.w = 1.0 - exp (-1.0 * (k_fogexpdensity.x * view_space_position.y));

  float4x4 projection_adjustment_matrix =
  {
      0.5, 0.0, 0.0, 0.5,
      0.0, 0.5, 0.0, 0.5,
      0.0, 0.0, 0.5, 0.5,
      0.0, 0.0, 0.0, 1.0,
  };

  float4 projective_coordinates;
  projective_coordinates = mul (projection_adjustment_matrix, position);
  l_texcoord1.xy = projective_coordinates.xy / projective_coordinates.w;

  float diffuse;
  float3 world_normal;
  float3 light_direction;
  float3 opposite_light_direction;

  float3 light_position;    
  float4 world_position;

  float diffuse_factor2 = k_lightparameters.x;

  // LIGHT
  light_position = k_lightposition.xyz;

  // point light    
  light_direction = normalize (vertex.xyz - light_position);
  opposite_light_direction = normalize (-light_direction);
    
  diffuse = dot (vtx_normal, opposite_light_direction);
  l_color.xyz = (k_diffusecolor.xyz * diffuse * diffuse_factor2) + k_ambientcolor.xyz;  

  l_position = position;
}


void fshader(
//             float2 l_texcoord0   : TEXCOORD0, 
             float2 l_texcoord1   : TEXCOORD1, 
             float2 l_interpolate : TEXCOORD2,
             float2 l_alpha_uv    : TEXCOORD3,

             float4 l_color : COLOR0,

             uniform float4 k_fogcolor,
//             uniform float4 k_uvanim,            
             uniform float4 k_reflectionparameters,

//             uniform sampler2D tex_0,
             uniform sampler2D k_watercolortexture, 
             uniform sampler2D k_reflectiontexture, 
             uniform sampler2D k_wateralphatexture,
             out float4 o_color : COLOR)
{  
  float reflection_factor;
  float4 water_color;
  float4 reflection_texel;
  float4 output_color;

  water_color = tex2D (k_watercolortexture, l_interpolate.xy);
  reflection_texel = tex2D (k_reflectiontexture, l_texcoord1.xy);

  reflection_factor = k_reflectionparameters.z;
  
  output_color = l_color * water_color;
  output_color.xyz = (output_color.xyz) + (reflection_factor * reflection_texel.xyz);

  // FOG
  output_color.xyz = lerp (output_color.xyz, k_fogcolor.xyz, l_color.w);

  // ALPHA
  if (enable_alpha_map)
  {  
    output_color.w = 1.0 - tex2D (k_wateralphatexture, l_alpha_uv.xy).x;
  }
  else
  {
    output_color.w = 1.0;
  }
  
  o_color = output_color;
}
