1412104742
2 2
11 libpandaode 4 sTqO 11 panda3d.ode 
584
686 8 OdeWorld 0 4 1277 18 OdeWorld::OdeWorld 0 2 1 2 0
67
OdeWorld::OdeWorld(void);
OdeWorld::OdeWorld(OdeWorld const &copy);

687 7 destroy 0 4 1277 17 OdeWorld::destroy 0 1 3 0
29
void OdeWorld::destroy(void);

688 8 is_empty 0 4 1277 18 OdeWorld::is_empty 0 1 4 942
// Filename: odeWorld.I
// Created by:  joswilso (27Dec06)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: OdeWorld::is_empty
//       Access: Published
//  Description: Returns true if the ID is 0, meaning the OdeWorld
//               does not point to a valid world. It is an error to
//               call a method on an empty world.
//               Note that an empty OdeWorld also evaluates to False.
////////////////////////////////////////////////////////////////////
43
inline bool OdeWorld::is_empty(void) const;

689 6 get_id 0 4 1277 16 OdeWorld::get_id 0 1 5 248
////////////////////////////////////////////////////////////////////
//     Function: OdeWorld::get_id
//       Access: Published
//  Description: Returns the underlying dWorldID.
////////////////////////////////////////////////////////////////////
45
inline dxWorld *OdeWorld::get_id(void) const;

690 11 set_gravity 0 4 1277 21 OdeWorld::set_gravity 0 2 6 7 0
119
inline void OdeWorld::set_gravity(float x, float y, float z);
inline void OdeWorld::set_gravity(LVecBase3f const &vec);

691 7 set_erp 0 4 1277 17 OdeWorld::set_erp 0 1 8 0
41
inline void OdeWorld::set_erp(float erp);

692 7 set_cfm 0 4 1277 17 OdeWorld::set_cfm 0 1 9 0
41
inline void OdeWorld::set_cfm(float cfm);

693 29 set_quick_step_num_iterations 0 4 1277 39 OdeWorld::set_quick_step_num_iterations 0 1 10 0
61
inline void OdeWorld::set_quick_step_num_iterations(int num);

694 16 set_quick_step_w 0 4 1277 26 OdeWorld::set_quick_step_w 0 1 11 0
62
inline void OdeWorld::set_quick_step_w(float over_relaxation);

695 30 set_contact_max_correcting_vel 0 4 1277 40 OdeWorld::set_contact_max_correcting_vel 0 1 12 0
64
inline void OdeWorld::set_contact_max_correcting_vel(float vel);

696 25 set_contact_surface_layer 0 4 1277 35 OdeWorld::set_contact_surface_layer 0 1 13 0
61
inline void OdeWorld::set_contact_surface_layer(float depth);

697 33 set_auto_disable_linear_threshold 0 4 1277 43 OdeWorld::set_auto_disable_linear_threshold 0 1 14 0
80
inline void OdeWorld::set_auto_disable_linear_threshold(float linear_threshold);

698 34 set_auto_disable_angular_threshold 0 4 1277 44 OdeWorld::set_auto_disable_angular_threshold 0 1 15 0
82
inline void OdeWorld::set_auto_disable_angular_threshold(float angular_threshold);

699 22 set_auto_disable_steps 0 4 1277 32 OdeWorld::set_auto_disable_steps 0 1 16 0
56
inline void OdeWorld::set_auto_disable_steps(int steps);

700 21 set_auto_disable_time 0 4 1277 31 OdeWorld::set_auto_disable_time 0 1 17 0
56
inline void OdeWorld::set_auto_disable_time(float time);

701 21 set_auto_disable_flag 0 4 1277 31 OdeWorld::set_auto_disable_flag 0 1 18 0
65
inline void OdeWorld::set_auto_disable_flag(int do_auto_disable);

702 11 get_gravity 0 4 1277 21 OdeWorld::get_gravity 0 1 19 0
52
inline LVecBase3f OdeWorld::get_gravity(void) const;

703 7 get_erp 0 4 1277 17 OdeWorld::get_erp 0 1 20 0
43
inline float OdeWorld::get_erp(void) const;

704 7 get_cfm 0 4 1277 17 OdeWorld::get_cfm 0 1 21 0
43
inline float OdeWorld::get_cfm(void) const;

705 29 get_quick_step_num_iterations 0 4 1277 39 OdeWorld::get_quick_step_num_iterations 0 1 22 0
63
inline int OdeWorld::get_quick_step_num_iterations(void) const;

706 16 get_quick_step_w 0 4 1277 26 OdeWorld::get_quick_step_w 0 1 23 0
52
inline float OdeWorld::get_quick_step_w(void) const;

707 30 get_contact_max_correcting_vel 0 4 1277 40 OdeWorld::get_contact_max_correcting_vel 0 1 24 0
66
inline float OdeWorld::get_contact_max_correcting_vel(void) const;

708 25 get_contact_surface_layer 0 4 1277 35 OdeWorld::get_contact_surface_layer 0 1 25 0
61
inline float OdeWorld::get_contact_surface_layer(void) const;

709 33 get_auto_disable_linear_threshold 0 4 1277 43 OdeWorld::get_auto_disable_linear_threshold 0 1 26 0
69
inline float OdeWorld::get_auto_disable_linear_threshold(void) const;

710 34 get_auto_disable_angular_threshold 0 4 1277 44 OdeWorld::get_auto_disable_angular_threshold 0 1 27 0
70
inline float OdeWorld::get_auto_disable_angular_threshold(void) const;

711 22 get_auto_disable_steps 0 4 1277 32 OdeWorld::get_auto_disable_steps 0 1 28 0
56
inline int OdeWorld::get_auto_disable_steps(void) const;

712 21 get_auto_disable_time 0 4 1277 31 OdeWorld::get_auto_disable_time 0 1 29 0
57
inline float OdeWorld::get_auto_disable_time(void) const;

713 21 get_auto_disable_flag 0 4 1277 31 OdeWorld::get_auto_disable_flag 0 1 30 0
55
inline int OdeWorld::get_auto_disable_flag(void) const;

714 16 impulse_to_force 0 4 1277 26 OdeWorld::impulse_to_force 0 2 31 32 0
180
inline LVecBase3f OdeWorld::impulse_to_force(float stepsize, float ix, float iy, float iz);
inline LVecBase3f OdeWorld::impulse_to_force(float stepsize, LVecBase3f const &impulse);

715 4 step 0 4 1277 14 OdeWorld::step 0 1 33 0
43
inline void OdeWorld::step(float stepsize);

716 10 quick_step 0 4 1277 20 OdeWorld::quick_step 0 1 34 0
49
inline void OdeWorld::quick_step(float stepsize);

717 10 compare_to 0 4 1277 20 OdeWorld::compare_to 0 1 35 0
61
inline int OdeWorld::compare_to(OdeWorld const &other) const;

718 18 init_surface_table 0 4 1277 28 OdeWorld::init_surface_table 0 1 36 0
62
void OdeWorld::init_surface_table(unsigned char num_surfaces);

719 18 add_body_dampening 0 4 1277 28 OdeWorld::add_body_dampening 0 1 37 55
//void assign_surface_body(OdeBody& body, int surface);
62
void OdeWorld::add_body_dampening(OdeBody &body, int surface);

720 17 set_surface_entry 0 4 1277 27 OdeWorld::set_surface_entry 0 1 38 55
//void assign_surface_body(OdeBody& body, int surface);
173
void OdeWorld::set_surface_entry(unsigned char pos1, unsigned char pos2, float mu, float bounce, float bounce_vel, float soft_erp, float soft_cfm, float slip, float dampen);

721 15 apply_dampening 0 4 1277 25 OdeWorld::apply_dampening 0 1 39 0
57
float OdeWorld::apply_dampening(float dt, OdeBody &body);

722 22 operator typecast bool 0 132 1277 32 OdeWorld::operator typecast bool 0 1 41 0
50
bool OdeWorld::operator typecast bool(void) const;

723 14 get_class_type 0 4 1277 24 OdeWorld::get_class_type 0 1 40 0
49
static TypeHandle OdeWorld::get_class_type(void);

724 13 OdeJointGroup 0 4 1279 28 OdeJointGroup::OdeJointGroup 0 1 42 0
35
OdeJointGroup::OdeJointGroup(void);

725 7 destroy 0 4 1279 22 OdeJointGroup::destroy 0 1 43 0
34
void OdeJointGroup::destroy(void);

726 6 get_id 0 4 1279 21 OdeJointGroup::get_id 0 1 44 491
// Filename: odeJointGroup.I
// Created by:  joswilso (27Dec06)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
55
inline dxJointGroup *OdeJointGroup::get_id(void) const;

727 5 empty 0 4 1279 20 OdeJointGroup::empty 0 1 45 0
45
inline void OdeJointGroup::empty(void) const;

728 10 compare_to 0 4 1279 25 OdeJointGroup::compare_to 0 1 46 0
71
inline int OdeJointGroup::compare_to(OdeJointGroup const &other) const;

729 14 get_class_type 0 4 1279 29 OdeJointGroup::get_class_type 0 1 47 0
54
static TypeHandle OdeJointGroup::get_class_type(void);

730 10 get_force1 0 4 1280 28 OdeJointFeedback::get_force1 0 1 48 0
64
inline LVector3f const OdeJointFeedback::get_force1(void) const;

731 10 get_force2 0 4 1280 28 OdeJointFeedback::get_force2 0 1 49 0
64
inline LVector3f const OdeJointFeedback::get_force2(void) const;

732 11 get_torque1 0 4 1280 29 OdeJointFeedback::get_torque1 0 1 50 0
65
inline LVector3f const OdeJointFeedback::get_torque1(void) const;

733 11 get_torque2 0 4 1280 29 OdeJointFeedback::get_torque2 0 1 51 0
65
inline LVector3f const OdeJointFeedback::get_torque2(void) const;

734 17 ~OdeJointFeedback 0 4 1280 35 OdeJointFeedback::~OdeJointFeedback 0 0 0
42
OdeJointFeedback::~OdeJointFeedback(void);

735 7 destroy 0 4 1282 17 OdeJoint::destroy 0 1 52 0
29
void OdeJoint::destroy(void);

736 8 is_empty 0 4 1282 18 OdeJoint::is_empty 0 1 53 942
// Filename: odeJoint.I
// Created by:  joswilso (27Dec06)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: OdeJoint::is_empty
//       Access: Published
//  Description: Returns true if the ID is 0, meaning the OdeJoint
//               does not point to a valid joint. It is an error to
//               call a method on an empty joint.
//               Note that an empty OdeJoint also evaluates to False.
////////////////////////////////////////////////////////////////////
43
inline bool OdeJoint::is_empty(void) const;

737 6 get_id 0 4 1282 16 OdeJoint::get_id 0 1 54 248
////////////////////////////////////////////////////////////////////
//     Function: OdeJoint::get_id
//       Access: Published
//  Description: Returns the underlying dJointID.
////////////////////////////////////////////////////////////////////
45
inline dxJoint *OdeJoint::get_id(void) const;

738 14 get_joint_type 0 4 1282 24 OdeJoint::get_joint_type 0 1 55 30
/* INLINE void *get_data(); */
48
inline int OdeJoint::get_joint_type(void) const;

739 8 get_body 0 4 1282 18 OdeJoint::get_body 0 1 56 0
44
OdeBody OdeJoint::get_body(int index) const;

740 12 set_feedback 0 4 1282 22 OdeJoint::set_feedback 0 3 57 58 59 0
108
inline void OdeJoint::set_feedback(OdeJointFeedback *);
inline void OdeJoint::set_feedback(bool flag = (1));

741 12 get_feedback 0 4 1282 22 OdeJoint::get_feedback 0 1 60 0
54
inline OdeJointFeedback *OdeJoint::get_feedback(void);

742 6 attach 0 4 1282 16 OdeJoint::attach 0 1 61 0
66
void OdeJoint::attach(OdeBody const *body1, OdeBody const *body2);

743 13 attach_bodies 0 4 1282 23 OdeJoint::attach_bodies 0 1 62 430
////////////////////////////////////////////////////////////////////
//     Function: OdeJoint::attach_bodies
//       Access: Published
//  Description: Attaches two OdeBody objects to this joint.
//               Order is important.
//               Consider using the OdeJoint::attach extension
//               function if you're using the Python interface.
////////////////////////////////////////////////////////////////////
73
void OdeJoint::attach_bodies(OdeBody const &body1, OdeBody const &body2);

744 11 attach_body 0 4 1282 21 OdeJoint::attach_body 0 1 63 511
////////////////////////////////////////////////////////////////////
//     Function: OdeJoint::attach_body
//       Access: Published
//  Description: Attaches a single OdeBody to this joint at the
//               specified index (0 or 1).  The other index will be 
//               set to the environment (null).
//               Consider using the OdeJoint::attach extension
//               function if you're using the Python interface.
////////////////////////////////////////////////////////////////////
59
void OdeJoint::attach_body(OdeBody const &body, int index);

745 6 detach 0 4 1282 16 OdeJoint::detach 0 1 64 0
28
void OdeJoint::detach(void);

746 5 write 0 6 1282 15 OdeJoint::write 0 3 65 66 67 0
85
virtual void OdeJoint::write(ostream &out = (cout), unsigned int indent = (0)) const;

747 10 compare_to 0 4 1282 20 OdeJoint::compare_to 0 1 68 0
61
inline int OdeJoint::compare_to(OdeJoint const &other) const;

748 11 operator == 0 4 1282 21 OdeJoint::operator == 0 1 69 0
63
inline bool OdeJoint::operator ==(OdeJoint const &other) const;

749 22 operator typecast bool 0 132 1282 32 OdeJoint::operator typecast bool 0 1 83 0
50
bool OdeJoint::operator typecast bool(void) const;

750 7 convert 0 4 1282 17 OdeJoint::convert 0 1 70 0
40
PyObject *OdeJoint::convert(void) const;

751 15 convert_to_ball 0 4 1282 25 OdeJoint::convert_to_ball 0 1 71 0
51
OdeBallJoint OdeJoint::convert_to_ball(void) const;

752 16 convert_to_hinge 0 4 1282 26 OdeJoint::convert_to_hinge 0 1 72 0
53
OdeHingeJoint OdeJoint::convert_to_hinge(void) const;

753 17 convert_to_slider 0 4 1282 27 OdeJoint::convert_to_slider 0 1 73 0
55
OdeSliderJoint OdeJoint::convert_to_slider(void) const;

754 18 convert_to_contact 0 4 1282 28 OdeJoint::convert_to_contact 0 1 74 0
57
OdeContactJoint OdeJoint::convert_to_contact(void) const;

755 20 convert_to_universal 0 4 1282 30 OdeJoint::convert_to_universal 0 1 75 0
61
OdeUniversalJoint OdeJoint::convert_to_universal(void) const;

756 17 convert_to_hinge2 0 4 1282 27 OdeJoint::convert_to_hinge2 0 1 76 0
55
OdeHinge2Joint OdeJoint::convert_to_hinge2(void) const;

757 16 convert_to_fixed 0 4 1282 26 OdeJoint::convert_to_fixed 0 1 77 0
53
OdeFixedJoint OdeJoint::convert_to_fixed(void) const;

758 15 convert_to_null 0 4 1282 25 OdeJoint::convert_to_null 0 1 78 0
51
OdeNullJoint OdeJoint::convert_to_null(void) const;

759 18 convert_to_a_motor 0 4 1282 28 OdeJoint::convert_to_a_motor 0 1 79 0
56
OdeAMotorJoint OdeJoint::convert_to_a_motor(void) const;

760 18 convert_to_l_motor 0 4 1282 28 OdeJoint::convert_to_l_motor 0 1 80 0
56
OdeLMotorJoint OdeJoint::convert_to_l_motor(void) const;

761 18 convert_to_plane2d 0 4 1282 28 OdeJoint::convert_to_plane2d 0 1 81 0
57
OdePlane2dJoint OdeJoint::convert_to_plane2d(void) const;

762 14 get_class_type 0 4 1282 24 OdeJoint::get_class_type 0 1 82 0
49
static TypeHandle OdeJoint::get_class_type(void);

763 14 OdeAMotorJoint 0 4 1284 30 OdeAMotorJoint::OdeAMotorJoint 0 2 84 85 0
125
OdeAMotorJoint::OdeAMotorJoint(OdeWorld &world);
OdeAMotorJoint::OdeAMotorJoint(OdeWorld &world, OdeJointGroup &joint_group);

764 12 set_num_axes 0 4 1284 28 OdeAMotorJoint::set_num_axes 0 1 86 492
// Filename: odeAMotorJoint.I
// Created by:  joswilso (27Dec06)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
50
inline void OdeAMotorJoint::set_num_axes(int num);

765 8 set_axis 0 4 1284 24 OdeAMotorJoint::set_axis 0 2 87 88 0
164
inline void OdeAMotorJoint::set_axis(int anum, int rel, float x, float y, float z);
inline void OdeAMotorJoint::set_axis(int anum, int rel, LVecBase3f const &axis);

766 9 set_angle 0 4 1284 25 OdeAMotorJoint::set_angle 0 1 89 0
61
inline void OdeAMotorJoint::set_angle(int anum, float angle);

767 8 set_mode 0 4 1284 24 OdeAMotorJoint::set_mode 0 1 90 0
47
inline void OdeAMotorJoint::set_mode(int mode);

768 11 add_torques 0 4 1284 27 OdeAMotorJoint::add_torques 0 1 91 0
85
inline void OdeAMotorJoint::add_torques(float torque1, float torque2, float torque3);

769 12 get_num_axes 0 4 1284 28 OdeAMotorJoint::get_num_axes 0 1 92 0
52
inline int OdeAMotorJoint::get_num_axes(void) const;

770 8 get_axis 0 4 1284 24 OdeAMotorJoint::get_axis 0 1 93 0
59
inline LVecBase3f OdeAMotorJoint::get_axis(int anum) const;

771 12 get_axis_rel 0 4 1284 28 OdeAMotorJoint::get_axis_rel 0 1 94 0
56
inline int OdeAMotorJoint::get_axis_rel(int anum) const;

772 9 get_angle 0 4 1284 25 OdeAMotorJoint::get_angle 0 1 95 0
55
inline float OdeAMotorJoint::get_angle(int anum) const;

773 14 get_angle_rate 0 4 1284 30 OdeAMotorJoint::get_angle_rate 0 1 96 0
60
inline float OdeAMotorJoint::get_angle_rate(int anum) const;

774 8 get_mode 0 4 1284 24 OdeAMotorJoint::get_mode 0 1 97 0
48
inline int OdeAMotorJoint::get_mode(void) const;

775 17 set_param_lo_stop 0 4 1284 33 OdeAMotorJoint::set_param_lo_stop 0 1 98 0
67
inline void OdeAMotorJoint::set_param_lo_stop(int axis, float val);

776 17 set_param_hi_stop 0 4 1284 33 OdeAMotorJoint::set_param_hi_stop 0 1 99 0
67
inline void OdeAMotorJoint::set_param_hi_stop(int axis, float val);

777 13 set_param_vel 0 4 1284 29 OdeAMotorJoint::set_param_vel 0 1 100 0
63
inline void OdeAMotorJoint::set_param_vel(int axis, float val);

778 15 set_param_f_max 0 4 1284 31 OdeAMotorJoint::set_param_f_max 0 1 101 0
65
inline void OdeAMotorJoint::set_param_f_max(int axis, float val);

779 22 set_param_fudge_factor 0 4 1284 38 OdeAMotorJoint::set_param_fudge_factor 0 1 102 0
72
inline void OdeAMotorJoint::set_param_fudge_factor(int axis, float val);

780 16 set_param_bounce 0 4 1284 32 OdeAMotorJoint::set_param_bounce 0 1 103 0
66
inline void OdeAMotorJoint::set_param_bounce(int axis, float val);

781 13 set_param_CFM 0 4 1284 29 OdeAMotorJoint::set_param_CFM 0 1 104 0
63
inline void OdeAMotorJoint::set_param_CFM(int axis, float val);

782 18 set_param_stop_ERP 0 4 1284 34 OdeAMotorJoint::set_param_stop_ERP 0 1 105 0
68
inline void OdeAMotorJoint::set_param_stop_ERP(int axis, float val);

783 18 set_param_stop_CFM 0 4 1284 34 OdeAMotorJoint::set_param_stop_CFM 0 1 106 0
68
inline void OdeAMotorJoint::set_param_stop_CFM(int axis, float val);

784 17 get_param_lo_stop 0 4 1284 33 OdeAMotorJoint::get_param_lo_stop 0 1 107 0
63
inline float OdeAMotorJoint::get_param_lo_stop(int axis) const;

785 17 get_param_hi_stop 0 4 1284 33 OdeAMotorJoint::get_param_hi_stop 0 1 108 0
63
inline float OdeAMotorJoint::get_param_hi_stop(int axis) const;

786 13 get_param_vel 0 4 1284 29 OdeAMotorJoint::get_param_vel 0 1 109 0
59
inline float OdeAMotorJoint::get_param_vel(int axis) const;

787 15 get_param_f_max 0 4 1284 31 OdeAMotorJoint::get_param_f_max 0 1 110 0
61
inline float OdeAMotorJoint::get_param_f_max(int axis) const;

788 22 get_param_fudge_factor 0 4 1284 38 OdeAMotorJoint::get_param_fudge_factor 0 1 111 0
68
inline float OdeAMotorJoint::get_param_fudge_factor(int axis) const;

789 16 get_param_bounce 0 4 1284 32 OdeAMotorJoint::get_param_bounce 0 1 112 0
62
inline float OdeAMotorJoint::get_param_bounce(int axis) const;

790 13 get_param_CFM 0 4 1284 29 OdeAMotorJoint::get_param_CFM 0 1 113 0
59
inline float OdeAMotorJoint::get_param_CFM(int axis) const;

791 18 get_param_stop_ERP 0 4 1284 34 OdeAMotorJoint::get_param_stop_ERP 0 1 114 0
64
inline float OdeAMotorJoint::get_param_stop_ERP(int axis) const;

792 18 get_param_stop_CFM 0 4 1284 34 OdeAMotorJoint::get_param_stop_CFM 0 1 115 0
64
inline float OdeAMotorJoint::get_param_stop_CFM(int axis) const;

793 14 get_class_type 0 4 1284 30 OdeAMotorJoint::get_class_type 0 1 116 0
55
static TypeHandle OdeAMotorJoint::get_class_type(void);

794 12 OdeBallJoint 0 4 1285 26 OdeBallJoint::OdeBallJoint 0 2 117 118 0
117
OdeBallJoint::OdeBallJoint(OdeWorld &world);
OdeBallJoint::OdeBallJoint(OdeWorld &world, OdeJointGroup &joint_group);

795 10 set_anchor 0 4 1285 24 OdeBallJoint::set_anchor 0 2 119 120 490
// Filename: odeBallJoint.I
// Created by:  joswilso (27Dec06)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
128
inline void OdeBallJoint::set_anchor(float x, float y, float z);
inline void OdeBallJoint::set_anchor(LVecBase3f const &anchor);

796 11 set_anchor2 0 4 1285 25 OdeBallJoint::set_anchor2 0 2 121 122 0
130
inline void OdeBallJoint::set_anchor2(float x, float y, float z);
inline void OdeBallJoint::set_anchor2(LVecBase3f const &anchor);

797 10 get_anchor 0 4 1285 24 OdeBallJoint::get_anchor 0 1 123 0
55
inline LVecBase3f OdeBallJoint::get_anchor(void) const;

798 11 get_anchor2 0 4 1285 25 OdeBallJoint::get_anchor2 0 1 124 0
56
inline LVecBase3f OdeBallJoint::get_anchor2(void) const;

799 14 get_class_type 0 4 1285 28 OdeBallJoint::get_class_type 0 1 125 0
53
static TypeHandle OdeBallJoint::get_class_type(void);

800 7 OdeMass 0 4 1286 16 OdeMass::OdeMass 0 2 126 127 0
62
OdeMass::OdeMass(void);
OdeMass::OdeMass(OdeMass const &copy);

801 5 check 0 4 1286 14 OdeMass::check 0 1 128 485
// Filename: odeMass.I
// Created by:  joswilso (27Dec06)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
32
inline int OdeMass::check(void);

802 8 set_zero 0 4 1286 17 OdeMass::set_zero 0 1 129 0
36
inline void OdeMass::set_zero(void);

803 14 set_parameters 0 4 1286 23 OdeMass::set_parameters 0 2 130 131 0
248
inline void OdeMass::set_parameters(float themass, float cgx, float cgy, float cgz, float I11, float I22, float I33, float I12, float I13, float I23);
inline void OdeMass::set_parameters(float themass, LVecBase3f const &center, LMatrix3f const &r);

804 10 set_sphere 0 4 1286 19 OdeMass::set_sphere 0 1 132 0
61
inline void OdeMass::set_sphere(float density, float radius);

805 16 set_sphere_total 0 4 1286 25 OdeMass::set_sphere_total 0 1 133 0
70
inline void OdeMass::set_sphere_total(float total_mass, float radius);

806 11 set_capsule 0 4 1286 20 OdeMass::set_capsule 0 1 134 0
91
inline void OdeMass::set_capsule(float density, int direction, float radius, float length);

807 17 set_capsule_total 0 4 1286 26 OdeMass::set_capsule_total 0 1 135 0
100
inline void OdeMass::set_capsule_total(float total_mass, int direction, float radius, float length);

808 12 set_cylinder 0 4 1286 21 OdeMass::set_cylinder 0 1 136 0
92
inline void OdeMass::set_cylinder(float density, int direction, float radius, float length);

809 18 set_cylinder_total 0 4 1286 27 OdeMass::set_cylinder_total 0 1 137 0
101
inline void OdeMass::set_cylinder_total(float total_mass, int direction, float radius, float length);

810 7 set_box 0 4 1286 16 OdeMass::set_box 0 2 138 139 0
143
inline void OdeMass::set_box(float density, float lx, float ly, float lz);
inline void OdeMass::set_box(float density, LVecBase3f const &size);

811 13 set_box_total 0 4 1286 22 OdeMass::set_box_total 0 2 140 141 0
161
inline void OdeMass::set_box_total(float total_mass, float lx, float ly, float lz);
inline void OdeMass::set_box_total(float total_mass, LVecBase3f const &size);

812 6 adjust 0 4 1286 15 OdeMass::adjust 0 1 142 0
43
inline void OdeMass::adjust(float newmass);

813 9 translate 0 4 1286 18 OdeMass::translate 0 2 143 144 0
113
inline void OdeMass::translate(float x, float y, float z);
inline void OdeMass::translate(LVecBase3f const &pos);

814 6 rotate 0 4 1286 15 OdeMass::rotate 0 1 145 0
48
inline void OdeMass::rotate(LMatrix3f const &r);

815 3 add 0 4 1286 12 OdeMass::add 0 1 146 0
41
inline void OdeMass::add(OdeMass &other);

816 13 get_magnitude 0 4 1286 22 OdeMass::get_magnitude 0 1 147 0
48
inline float OdeMass::get_magnitude(void) const;

817 10 get_center 0 4 1286 19 OdeMass::get_center 0 1 148 0
48
inline LPoint3f OdeMass::get_center(void) const;

818 19 get_inertial_tensor 0 4 1286 28 OdeMass::get_inertial_tensor 0 1 149 0
58
inline LMatrix3f OdeMass::get_inertial_tensor(void) const;

819 5 write 0 6 1286 14 OdeMass::write 0 3 150 151 152 0
84
virtual void OdeMass::write(ostream &out = (cout), unsigned int indent = (0)) const;

820 14 get_class_type 0 4 1286 23 OdeMass::get_class_type 0 1 153 0
48
static TypeHandle OdeMass::get_class_type(void);

821 7 OdeBody 0 4 1288 16 OdeBody::OdeBody 0 1 154 0
34
OdeBody::OdeBody(OdeWorld &world);

822 7 destroy 0 4 1288 16 OdeBody::destroy 0 1 155 0
28
void OdeBody::destroy(void);

823 8 is_empty 0 4 1288 17 OdeBody::is_empty 0 1 156 936
// Filename: odeBody.I
// Created by:  joswilso (27Dec06)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: OdeBody::is_empty
//       Access: Published
//  Description: Returns true if the ID is 0, meaning the OdeBody
//               does not point to a valid body. It is an error to
//               call a method on an empty body.
//               Note that an empty OdeBody also evaluates to False.
////////////////////////////////////////////////////////////////////
42
inline bool OdeBody::is_empty(void) const;

824 6 get_id 0 4 1288 15 OdeBody::get_id 0 1 157 246
////////////////////////////////////////////////////////////////////
//     Function: OdeBody::get_id
//       Access: Published
//  Description: Returns the underlying dBodyID.
////////////////////////////////////////////////////////////////////
43
inline dxBody *OdeBody::get_id(void) const;

825 33 set_auto_disable_linear_threshold 0 4 1288 42 OdeBody::set_auto_disable_linear_threshold 0 1 158 0
79
inline void OdeBody::set_auto_disable_linear_threshold(float linear_threshold);

826 34 set_auto_disable_angular_threshold 0 4 1288 43 OdeBody::set_auto_disable_angular_threshold 0 1 159 0
81
inline void OdeBody::set_auto_disable_angular_threshold(float angular_threshold);

827 22 set_auto_disable_steps 0 4 1288 31 OdeBody::set_auto_disable_steps 0 1 160 0
55
inline void OdeBody::set_auto_disable_steps(int steps);

828 21 set_auto_disable_time 0 4 1288 30 OdeBody::set_auto_disable_time 0 1 161 0
55
inline void OdeBody::set_auto_disable_time(float time);

829 21 set_auto_disable_flag 0 4 1288 30 OdeBody::set_auto_disable_flag 0 1 162 0
64
inline void OdeBody::set_auto_disable_flag(int do_auto_disable);

830 25 set_auto_disable_defaults 0 4 1288 34 OdeBody::set_auto_disable_defaults 0 1 163 0
53
inline void OdeBody::set_auto_disable_defaults(void);

831 8 set_data 0 4 1288 17 OdeBody::set_data 0 1 164 0
89
inline void OdeBody::set_data(void *data);
inline void OdeBody::set_data(PyObject *data);

832 12 set_position 0 4 1288 21 OdeBody::set_position 0 2 165 166 0
119
inline void OdeBody::set_position(float x, float y, float z);
inline void OdeBody::set_position(LVecBase3f const &pos);

833 12 set_rotation 0 4 1288 21 OdeBody::set_rotation 0 1 167 0
54
inline void OdeBody::set_rotation(LMatrix3f const &r);

834 14 set_quaternion 0 4 1288 23 OdeBody::set_quaternion 0 1 168 0
59
inline void OdeBody::set_quaternion(LQuaternionf const &q);

835 14 set_linear_vel 0 4 1288 23 OdeBody::set_linear_vel 0 2 169 170 0
123
inline void OdeBody::set_linear_vel(float x, float y, float z);
inline void OdeBody::set_linear_vel(LVecBase3f const &vel);

836 15 set_angular_vel 0 4 1288 24 OdeBody::set_angular_vel 0 2 171 172 0
125
inline void OdeBody::set_angular_vel(float x, float y, float z);
inline void OdeBody::set_angular_vel(LVecBase3f const &vel);

837 8 set_mass 0 4 1288 17 OdeBody::set_mass 0 1 173 0
45
inline void OdeBody::set_mass(OdeMass &mass);

838 33 get_auto_disable_linear_threshold 0 4 1288 42 OdeBody::get_auto_disable_linear_threshold 0 1 174 0
68
inline float OdeBody::get_auto_disable_linear_threshold(void) const;

839 34 get_auto_disable_angular_threshold 0 4 1288 43 OdeBody::get_auto_disable_angular_threshold 0 1 175 0
69
inline float OdeBody::get_auto_disable_angular_threshold(void) const;

840 22 get_auto_disable_steps 0 4 1288 31 OdeBody::get_auto_disable_steps 0 1 176 0
55
inline int OdeBody::get_auto_disable_steps(void) const;

841 21 get_auto_disable_time 0 4 1288 30 OdeBody::get_auto_disable_time 0 1 177 0
56
inline float OdeBody::get_auto_disable_time(void) const;

842 21 get_auto_disable_flag 0 4 1288 30 OdeBody::get_auto_disable_flag 0 1 178 0
54
inline int OdeBody::get_auto_disable_flag(void) const;

843 8 get_data 0 4 1288 17 OdeBody::get_data 0 1 179 0
47
inline PyObject *OdeBody::get_data(void) const;

844 12 get_position 0 4 1288 21 OdeBody::get_position 0 1 180 0
52
inline LVecBase3f OdeBody::get_position(void) const;

845 12 get_rotation 0 4 1288 21 OdeBody::get_rotation 0 1 181 0
51
inline LMatrix3f OdeBody::get_rotation(void) const;

846 14 get_quaternion 0 4 1288 23 OdeBody::get_quaternion 0 1 182 0
54
inline LVecBase4f OdeBody::get_quaternion(void) const;

847 14 get_linear_vel 0 4 1288 23 OdeBody::get_linear_vel 0 1 183 0
54
inline LVecBase3f OdeBody::get_linear_vel(void) const;

848 15 get_angular_vel 0 4 1288 24 OdeBody::get_angular_vel 0 1 184 0
55
inline LVecBase3f OdeBody::get_angular_vel(void) const;

849 8 get_mass 0 4 1288 17 OdeBody::get_mass 0 1 185 0
45
inline OdeMass OdeBody::get_mass(void) const;

850 9 add_force 0 4 1288 18 OdeBody::add_force 0 2 186 187 0
114
inline void OdeBody::add_force(float fx, float fy, float fz);
inline void OdeBody::add_force(LVecBase3f const &f);

851 10 add_torque 0 4 1288 19 OdeBody::add_torque 0 2 188 189 0
116
inline void OdeBody::add_torque(float fx, float fy, float fz);
inline void OdeBody::add_torque(LVecBase3f const &f);

852 13 add_rel_force 0 4 1288 22 OdeBody::add_rel_force 0 2 190 191 0
122
inline void OdeBody::add_rel_force(float fx, float fy, float fz);
inline void OdeBody::add_rel_force(LVecBase3f const &f);

853 14 add_rel_torque 0 4 1288 23 OdeBody::add_rel_torque 0 2 192 193 0
124
inline void OdeBody::add_rel_torque(float fx, float fy, float fz);
inline void OdeBody::add_rel_torque(LVecBase3f const &f);

854 16 add_force_at_pos 0 4 1288 25 OdeBody::add_force_at_pos 0 2 194 195 0
181
inline void OdeBody::add_force_at_pos(float fx, float fy, float fz, float px, float py, float pz);
inline void OdeBody::add_force_at_pos(LVecBase3f const &f, LVecBase3f const &pos);

855 20 add_force_at_rel_pos 0 4 1288 29 OdeBody::add_force_at_rel_pos 0 2 196 197 0
189
inline void OdeBody::add_force_at_rel_pos(float fx, float fy, float fz, float px, float py, float pz);
inline void OdeBody::add_force_at_rel_pos(LVecBase3f const &f, LVecBase3f const &pos);

856 20 add_rel_force_at_pos 0 4 1288 29 OdeBody::add_rel_force_at_pos 0 2 198 199 0
189
inline void OdeBody::add_rel_force_at_pos(float fx, float fy, float fz, float px, float py, float pz);
inline void OdeBody::add_rel_force_at_pos(LVecBase3f const &f, LVecBase3f const &pos);

857 24 add_rel_force_at_rel_pos 0 4 1288 33 OdeBody::add_rel_force_at_rel_pos 0 2 200 201 0
197
inline void OdeBody::add_rel_force_at_rel_pos(float fx, float fy, float fz, float px, float py, float pz);
inline void OdeBody::add_rel_force_at_rel_pos(LVecBase3f const &f, LVecBase3f const &pos);

858 9 set_force 0 4 1288 18 OdeBody::set_force 0 2 202 203 0
111
inline void OdeBody::set_force(float x, float y, float z);
inline void OdeBody::set_force(LVecBase3f const &f);

859 10 set_torque 0 4 1288 19 OdeBody::set_torque 0 2 204 205 0
113
inline void OdeBody::set_torque(float x, float y, float z);
inline void OdeBody::set_torque(LVecBase3f const &f);

860 17 get_rel_point_pos 0 4 1288 26 OdeBody::get_rel_point_pos 0 2 206 207 0
152
inline LPoint3f OdeBody::get_rel_point_pos(float px, float py, float pz) const;
inline LPoint3f OdeBody::get_rel_point_pos(LVecBase3f const &pos) const;

861 17 get_rel_point_vel 0 4 1288 26 OdeBody::get_rel_point_vel 0 2 208 209 0
152
inline LPoint3f OdeBody::get_rel_point_vel(float px, float py, float pz) const;
inline LPoint3f OdeBody::get_rel_point_vel(LVecBase3f const &pos) const;

862 13 get_point_vel 0 4 1288 22 OdeBody::get_point_vel 0 2 210 211 0
144
inline LPoint3f OdeBody::get_point_vel(float px, float py, float pz) const;
inline LPoint3f OdeBody::get_point_vel(LVecBase3f const &pos) const;

863 17 get_pos_rel_point 0 4 1288 26 OdeBody::get_pos_rel_point 0 2 212 213 0
152
inline LPoint3f OdeBody::get_pos_rel_point(float px, float py, float pz) const;
inline LPoint3f OdeBody::get_pos_rel_point(LVecBase3f const &pos) const;

864 15 vector_to_world 0 4 1288 24 OdeBody::vector_to_world 0 2 214 215 0
152
inline LVecBase3f OdeBody::vector_to_world(float px, float py, float pz) const;
inline LVecBase3f OdeBody::vector_to_world(LVecBase3f const &pos) const;

865 17 vector_from_world 0 4 1288 26 OdeBody::vector_from_world 0 2 216 217 0
156
inline LVecBase3f OdeBody::vector_from_world(float px, float py, float pz) const;
inline LVecBase3f OdeBody::vector_from_world(LVecBase3f const &pos) const;

866 24 set_finite_rotation_mode 0 4 1288 33 OdeBody::set_finite_rotation_mode 0 1 218 0
56
inline void OdeBody::set_finite_rotation_mode(int mode);

867 24 set_finite_rotation_axis 0 4 1288 33 OdeBody::set_finite_rotation_axis 0 2 219 220 0
144
inline void OdeBody::set_finite_rotation_axis(float x, float y, float z);
inline void OdeBody::set_finite_rotation_axis(LVecBase3f const &axis);

868 24 get_finite_rotation_mode 0 4 1288 33 OdeBody::get_finite_rotation_mode 0 1 221 0
57
inline int OdeBody::get_finite_rotation_mode(void) const;

869 24 get_finite_rotation_axis 0 4 1288 33 OdeBody::get_finite_rotation_axis 0 1 222 0
64
inline LVecBase3f OdeBody::get_finite_rotation_axis(void) const;

870 14 get_num_joints 0 4 1288 23 OdeBody::get_num_joints 0 1 223 0
47
inline int OdeBody::get_num_joints(void) const;

871 9 get_joint 0 4 1288 18 OdeBody::get_joint 0 1 224 0
45
OdeJoint OdeBody::get_joint(int index) const;

872 19 get_converted_joint 0 4 1288 28 OdeBody::get_converted_joint 0 1 225 0
59
inline PyObject *OdeBody::get_converted_joint(int i) const;

873 6 enable 0 4 1288 15 OdeBody::enable 0 1 226 0
34
inline void OdeBody::enable(void);

874 7 disable 0 4 1288 16 OdeBody::disable 0 1 227 0
35
inline void OdeBody::disable(void);

875 10 is_enabled 0 4 1288 19 OdeBody::is_enabled 0 1 228 0
43
inline int OdeBody::is_enabled(void) const;

876 16 set_gravity_mode 0 4 1288 25 OdeBody::set_gravity_mode 0 1 229 0
48
inline void OdeBody::set_gravity_mode(int mode);

877 16 get_gravity_mode 0 4 1288 25 OdeBody::get_gravity_mode 0 1 230 0
49
inline int OdeBody::get_gravity_mode(void) const;

878 5 write 0 6 1288 14 OdeBody::write 0 3 231 232 233 0
84
virtual void OdeBody::write(ostream &out = (cout), unsigned int indent = (0)) const;

879 22 operator typecast bool 0 132 1288 31 OdeBody::operator typecast bool 0 1 236 0
49
bool OdeBody::operator typecast bool(void) const;

880 10 compare_to 0 4 1288 19 OdeBody::compare_to 0 1 234 0
59
inline int OdeBody::compare_to(OdeBody const &other) const;

881 14 get_class_type 0 4 1288 23 OdeBody::get_class_type 0 1 235 0
48
static TypeHandle OdeBody::get_class_type(void);

882 7 destroy 0 4 1289 17 OdeSpace::destroy 0 1 237 0
29
void OdeSpace::destroy(void);

883 8 is_empty 0 4 1289 18 OdeSpace::is_empty 0 1 238 942
// Filename: odeSpace.I
// Created by:  joswilso (27Dec06)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: OdeSpace::is_empty
//       Access: Published
//  Description: Returns true if the ID is 0, meaning the OdeSpace
//               does not point to a valid space. It is an error to
//               call a method on an empty space.
//               Note that an empty OdeSpace also evaluates to False.
////////////////////////////////////////////////////////////////////
43
inline bool OdeSpace::is_empty(void) const;

884 11 set_cleanup 0 4 1289 21 OdeSpace::set_cleanup 0 1 239 0
44
inline void OdeSpace::set_cleanup(int mode);

885 11 get_cleanup 0 4 1289 21 OdeSpace::get_cleanup 0 1 240 0
45
inline int OdeSpace::get_cleanup(void) const;

886 5 query 0 4 1289 15 OdeSpace::query 0 2 241 242 0
97
int OdeSpace::query(OdeGeom const &geom) const;
int OdeSpace::query(OdeSpace const &space) const;

887 13 get_num_geoms 0 4 1289 23 OdeSpace::get_num_geoms 0 1 243 0
47
inline int OdeSpace::get_num_geoms(void) const;

888 8 get_AABB 0 4 1289 18 OdeSpace::get_AABB 0 1 244 0
71
inline void OdeSpace::get_AABB(LVecBase3f &min, LVecBase3f &max) const;

889 13 get_AA_bounds 0 4 1289 23 OdeSpace::get_AA_bounds 0 1 245 0
53
inline PyObject *OdeSpace::get_AA_bounds(void) const;

890 8 is_space 0 4 1289 18 OdeSpace::is_space 0 1 246 0
36
inline int OdeSpace::is_space(void);

891 9 get_class 0 4 1289 19 OdeSpace::get_class 0 1 247 0
43
inline int OdeSpace::get_class(void) const;

892 17 set_category_bits 0 4 1289 27 OdeSpace::set_category_bits 0 1 248 0
81
inline void OdeSpace::set_category_bits(BitMask< unsigned int, 32 > const &bits);

893 16 set_collide_bits 0 4 1289 26 OdeSpace::set_collide_bits 0 1 249 0
80
inline void OdeSpace::set_collide_bits(BitMask< unsigned int, 32 > const &bits);

894 17 get_category_bits 0 4 1289 27 OdeSpace::get_category_bits 0 1 250 0
69
inline BitMask< unsigned int, 32 > OdeSpace::get_category_bits(void);

895 16 get_collide_bits 0 4 1289 26 OdeSpace::get_collide_bits 0 1 251 0
68
inline BitMask< unsigned int, 32 > OdeSpace::get_collide_bits(void);

896 6 enable 0 4 1289 16 OdeSpace::enable 0 1 252 0
35
inline void OdeSpace::enable(void);

897 7 disable 0 4 1289 17 OdeSpace::disable 0 1 253 0
36
inline void OdeSpace::disable(void);

898 10 is_enabled 0 4 1289 20 OdeSpace::is_enabled 0 1 254 0
38
inline int OdeSpace::is_enabled(void);

899 22 set_auto_collide_world 0 4 1289 32 OdeSpace::set_auto_collide_world 0 1 255 0
50
void OdeSpace::set_auto_collide_world(OdeWorld &);

900 28 set_auto_collide_joint_group 0 4 1289 38 OdeSpace::set_auto_collide_joint_group 0 1 256 0
61
void OdeSpace::set_auto_collide_joint_group(OdeJointGroup &);

901 3 add 0 4 1289 13 OdeSpace::add 0 2 257 258 0
71
void OdeSpace::add(OdeGeom &geom);
void OdeSpace::add(OdeSpace &space);

902 6 remove 0 4 1289 16 OdeSpace::remove 0 2 259 260 0
77
void OdeSpace::remove(OdeGeom &geom);
void OdeSpace::remove(OdeSpace &space);

903 5 clean 0 4 1289 15 OdeSpace::clean 0 1 261 0
27
void OdeSpace::clean(void);

904 8 get_geom 0 4 1289 18 OdeSpace::get_geom 0 1 262 0
34
OdeGeom OdeSpace::get_geom(int i);

905 9 get_space 0 4 1289 19 OdeSpace::get_space 0 1 263 104
// Not INLINE because of forward declaration
//static int get_surface_type(OdeSpace * self, dGeomID o1);
48
inline OdeSpace OdeSpace::get_space(void) const;

906 5 write 0 6 1289 15 OdeSpace::write 0 3 264 265 266 0
85
virtual void OdeSpace::write(ostream &out = (cout), unsigned int indent = (0)) const;

907 22 operator typecast bool 0 132 1289 32 OdeSpace::operator typecast bool 0 1 286 0
50
bool OdeSpace::operator typecast bool(void) const;

908 23 convert_to_simple_space 0 4 1289 33 OdeSpace::convert_to_simple_space 0 1 267 0
61
OdeSimpleSpace OdeSpace::convert_to_simple_space(void) const;

909 21 convert_to_hash_space 0 4 1289 31 OdeSpace::convert_to_hash_space 0 1 268 0
57
OdeHashSpace OdeSpace::convert_to_hash_space(void) const;

910 26 convert_to_quad_tree_space 0 4 1289 36 OdeSpace::convert_to_quad_tree_space 0 1 269 0
66
OdeQuadTreeSpace OdeSpace::convert_to_quad_tree_space(void) const;

911 7 convert 0 4 1289 17 OdeSpace::convert 0 1 270 0
40
PyObject *OdeSpace::convert(void) const;

912 18 get_converted_geom 0 4 1289 28 OdeSpace::get_converted_geom 0 1 271 0
59
inline PyObject *OdeSpace::get_converted_geom(int i) const;

913 19 get_converted_space 0 4 1289 29 OdeSpace::get_converted_space 0 1 272 0
59
inline PyObject *OdeSpace::get_converted_space(void) const;

914 12 auto_collide 0 4 1289 22 OdeSpace::auto_collide 0 1 273 0
34
void OdeSpace::auto_collide(void);

915 7 collide 0 4 1289 17 OdeSpace::collide 0 1 274 0
62
int OdeSpace::collide(PyObject *arg, PyObject *near_callback);

916 14 set_collide_id 0 4 1289 24 OdeSpace::set_collide_id 0 2 275 276 0
118
int OdeSpace::set_collide_id(int collide_id, dxGeom *id);
int OdeSpace::set_collide_id(OdeGeom &geom, int collide_id);

917 16 set_surface_type 0 4 1289 26 OdeSpace::set_surface_type 0 2 277 278 0
128
void OdeSpace::set_surface_type(int surface_type, dxGeom *id);
void OdeSpace::set_surface_type(OdeGeom &geom, int surface_type);

918 16 get_surface_type 0 4 1289 26 OdeSpace::get_surface_type 0 2 279 280 0
90
int OdeSpace::get_surface_type(dxGeom *o1);
int OdeSpace::get_surface_type(OdeGeom &geom);

919 14 get_collide_id 0 4 1289 24 OdeSpace::get_collide_id 0 2 281 282 0
86
int OdeSpace::get_collide_id(dxGeom *o1);
int OdeSpace::get_collide_id(OdeGeom &geom);

920 19 set_collision_event 0 4 1289 29 OdeSpace::set_collision_event 0 1 283 0
82
inline void OdeSpace::set_collision_event(basic_string< char > const &event_name);

921 19 get_collision_event 0 4 1289 29 OdeSpace::get_collision_event 0 1 284 0
64
inline basic_string< char > OdeSpace::get_collision_event(void);

922 14 get_class_type 0 4 1289 24 OdeSpace::get_class_type 0 1 285 0
49
static TypeHandle OdeSpace::get_class_type(void);

923 7 destroy 0 4 1290 16 OdeGeom::destroy 0 1 287 0
28
void OdeGeom::destroy(void);

924 8 is_empty 0 4 1290 17 OdeGeom::is_empty 0 1 288 936
// Filename: odeGeom.I
// Created by:  joswilso (27Dec06)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: OdeGeom::is_empty
//       Access: Published
//  Description: Returns true if the ID is 0, meaning the OdeGeom
//               does not point to a valid geom. It is an error to
//               call a method on an empty geom.
//               Note that an empty OdeGeom also evaluates to False.
////////////////////////////////////////////////////////////////////
42
inline bool OdeGeom::is_empty(void) const;

925 6 get_id 0 4 1290 15 OdeGeom::get_id 0 1 289 246
////////////////////////////////////////////////////////////////////
//     Function: OdeGeom::get_id
//       Access: Published
//  Description: Returns the underlying dGeomID.
////////////////////////////////////////////////////////////////////
43
inline dxGeom *OdeGeom::get_id(void) const;

926 8 set_body 0 4 1290 17 OdeGeom::set_body 0 1 290 35
//INLINE void set_data(void* data);
45
inline void OdeGeom::set_body(OdeBody &body);

927 8 has_body 0 4 1290 17 OdeGeom::has_body 0 1 291 35
//INLINE void set_data(void* data);
42
inline bool OdeGeom::has_body(void) const;

928 8 get_body 0 4 1290 17 OdeGeom::get_body 0 1 292 0
45
inline OdeBody OdeGeom::get_body(void) const;

929 12 set_position 0 4 1290 21 OdeGeom::set_position 0 2 293 294 0
119
inline void OdeGeom::set_position(float x, float y, float z);
inline void OdeGeom::set_position(LVecBase3f const &pos);

930 12 set_rotation 0 4 1290 21 OdeGeom::set_rotation 0 1 295 0
54
inline void OdeGeom::set_rotation(LMatrix3f const &r);

931 14 set_quaternion 0 4 1290 23 OdeGeom::set_quaternion 0 1 296 0
59
inline void OdeGeom::set_quaternion(LQuaternionf const &q);

932 12 get_position 0 4 1290 21 OdeGeom::get_position 0 1 297 0
50
inline LPoint3f OdeGeom::get_position(void) const;

933 12 get_rotation 0 4 1290 21 OdeGeom::get_rotation 0 1 298 0
51
inline LMatrix3f OdeGeom::get_rotation(void) const;

934 14 get_quaternion 0 4 1290 23 OdeGeom::get_quaternion 0 1 299 0
56
inline LQuaternionf OdeGeom::get_quaternion(void) const;

935 8 get_AABB 0 4 1290 17 OdeGeom::get_AABB 0 1 300 0
70
inline void OdeGeom::get_AABB(LVecBase3f &min, LVecBase3f &max) const;

936 13 get_AA_bounds 0 4 1290 22 OdeGeom::get_AA_bounds 0 1 301 0
52
inline PyObject *OdeGeom::get_AA_bounds(void) const;

937 8 is_space 0 4 1290 17 OdeGeom::is_space 0 1 302 0
35
inline int OdeGeom::is_space(void);

938 9 get_class 0 4 1290 18 OdeGeom::get_class 0 1 303 0
42
inline int OdeGeom::get_class(void) const;

939 17 set_category_bits 0 4 1290 26 OdeGeom::set_category_bits 0 1 304 0
80
inline void OdeGeom::set_category_bits(BitMask< unsigned int, 32 > const &bits);

940 16 set_collide_bits 0 4 1290 25 OdeGeom::set_collide_bits 0 1 305 0
79
inline void OdeGeom::set_collide_bits(BitMask< unsigned int, 32 > const &bits);

941 17 get_category_bits 0 4 1290 26 OdeGeom::get_category_bits 0 1 306 0
68
inline BitMask< unsigned int, 32 > OdeGeom::get_category_bits(void);

942 16 get_collide_bits 0 4 1290 25 OdeGeom::get_collide_bits 0 1 307 0
67
inline BitMask< unsigned int, 32 > OdeGeom::get_collide_bits(void);

943 6 enable 0 4 1290 15 OdeGeom::enable 0 1 308 0
34
inline void OdeGeom::enable(void);

944 7 disable 0 4 1290 16 OdeGeom::disable 0 1 309 0
35
inline void OdeGeom::disable(void);

945 10 is_enabled 0 4 1290 19 OdeGeom::is_enabled 0 1 310 0
37
inline int OdeGeom::is_enabled(void);

946 19 set_offset_position 0 4 1290 28 OdeGeom::set_offset_position 0 2 311 312 0
133
inline void OdeGeom::set_offset_position(float x, float y, float z);
inline void OdeGeom::set_offset_position(LVecBase3f const &pos);

947 19 set_offset_rotation 0 4 1290 28 OdeGeom::set_offset_rotation 0 1 313 0
61
inline void OdeGeom::set_offset_rotation(LMatrix3f const &r);

948 21 set_offset_quaternion 0 4 1290 30 OdeGeom::set_offset_quaternion 0 1 314 0
66
inline void OdeGeom::set_offset_quaternion(LQuaternionf const &q);

949 25 set_offset_world_position 0 4 1290 34 OdeGeom::set_offset_world_position 0 2 315 316 0
145
inline void OdeGeom::set_offset_world_position(float x, float y, float z);
inline void OdeGeom::set_offset_world_position(LVecBase3f const &pos);

950 25 set_offset_world_rotation 0 4 1290 34 OdeGeom::set_offset_world_rotation 0 1 317 0
67
inline void OdeGeom::set_offset_world_rotation(LMatrix3f const &r);

951 27 set_offset_world_quaternion 0 4 1290 36 OdeGeom::set_offset_world_quaternion 0 1 318 0
72
inline void OdeGeom::set_offset_world_quaternion(LQuaternionf const &q);

952 12 clear_offset 0 4 1290 21 OdeGeom::clear_offset 0 1 319 0
40
inline void OdeGeom::clear_offset(void);

953 9 is_offset 0 4 1290 18 OdeGeom::is_offset 0 1 320 0
36
inline int OdeGeom::is_offset(void);

954 19 get_offset_position 0 4 1290 28 OdeGeom::get_offset_position 0 1 321 0
57
inline LPoint3f OdeGeom::get_offset_position(void) const;

955 19 get_offset_rotation 0 4 1290 28 OdeGeom::get_offset_rotation 0 1 322 0
58
inline LMatrix3f OdeGeom::get_offset_rotation(void) const;

956 21 get_offset_quaternion 0 4 1290 30 OdeGeom::get_offset_quaternion 0 1 323 0
63
inline LQuaternionf OdeGeom::get_offset_quaternion(void) const;

957 9 get_space 0 4 1290 18 OdeGeom::get_space 0 1 324 174
//int get_surface_type() ;
//int get_collide_id() ;
//int set_collide_id( int collide_id);
//void set_surface_type( int surface_type);
//int test_collide_id( int collide_id);
40
OdeSpace OdeGeom::get_space(void) const;

958 19 get_converted_space 0 4 1290 28 OdeGeom::get_converted_space 0 1 325 0
58
inline PyObject *OdeGeom::get_converted_space(void) const;

959 5 write 0 6 1290 14 OdeGeom::write 0 3 326 327 328 0
84
virtual void OdeGeom::write(ostream &out = (cout), unsigned int indent = (0)) const;

960 22 operator typecast bool 0 132 1290 31 OdeGeom::operator typecast bool 0 1 342 0
49
bool OdeGeom::operator typecast bool(void) const;

961 10 compare_to 0 4 1290 19 OdeGeom::compare_to 0 1 329 0
59
inline int OdeGeom::compare_to(OdeGeom const &other) const;

962 7 convert 0 4 1290 16 OdeGeom::convert 0 1 330 0
39
PyObject *OdeGeom::convert(void) const;

963 14 convert_to_box 0 4 1290 23 OdeGeom::convert_to_box 0 1 331 0
47
OdeBoxGeom OdeGeom::convert_to_box(void) const;

964 26 convert_to_capped_cylinder 0 4 1290 35 OdeGeom::convert_to_capped_cylinder 0 1 332 0
70
OdeCappedCylinderGeom OdeGeom::convert_to_capped_cylinder(void) const;

965 19 convert_to_cylinder 0 4 1290 28 OdeGeom::convert_to_cylinder 0 1 333 43
// OdeConvexGeom convert_to_convex() const;
57
OdeCylinderGeom OdeGeom::convert_to_cylinder(void) const;

966 16 convert_to_plane 0 4 1290 25 OdeGeom::convert_to_plane 0 1 334 53
// OdeHeightfieldGeom convert_to_heightfield() const;
51
OdePlaneGeom OdeGeom::convert_to_plane(void) const;

967 14 convert_to_ray 0 4 1290 23 OdeGeom::convert_to_ray 0 1 335 53
// OdeHeightfieldGeom convert_to_heightfield() const;
47
OdeRayGeom OdeGeom::convert_to_ray(void) const;

968 17 convert_to_sphere 0 4 1290 26 OdeGeom::convert_to_sphere 0 1 336 0
53
OdeSphereGeom OdeGeom::convert_to_sphere(void) const;

969 19 convert_to_tri_mesh 0 4 1290 28 OdeGeom::convert_to_tri_mesh 0 1 337 0
56
OdeTriMeshGeom OdeGeom::convert_to_tri_mesh(void) const;

970 23 convert_to_simple_space 0 4 1290 32 OdeGeom::convert_to_simple_space 0 1 338 0
60
OdeSimpleSpace OdeGeom::convert_to_simple_space(void) const;

971 21 convert_to_hash_space 0 4 1290 30 OdeGeom::convert_to_hash_space 0 1 339 0
56
OdeHashSpace OdeGeom::convert_to_hash_space(void) const;

972 26 convert_to_quad_tree_space 0 4 1290 35 OdeGeom::convert_to_quad_tree_space 0 1 340 0
65
OdeQuadTreeSpace OdeGeom::convert_to_quad_tree_space(void) const;

973 14 get_class_type 0 4 1290 23 OdeGeom::get_class_type 0 1 341 0
48
static TypeHandle OdeGeom::get_class_type(void);

974 10 OdeBoxGeom 0 4 1292 22 OdeBoxGeom::OdeBoxGeom 0 3 343 344 345 0
189
OdeBoxGeom::OdeBoxGeom(float lx, float ly, float lz);
OdeBoxGeom::OdeBoxGeom(OdeSpace &space, float lx, float ly, float lz);
OdeBoxGeom::OdeBoxGeom(OdeSpace &space, LVecBase3f const &size);

975 11 set_lengths 0 4 1292 23 OdeBoxGeom::set_lengths 0 2 346 347 488
// Filename: odeBoxGeom.I
// Created by:  joswilso (27Dec06)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
127
inline void OdeBoxGeom::set_lengths(float lx, float ly, float lz);
inline void OdeBoxGeom::set_lengths(LVecBase3f const &size);

976 11 get_lengths 0 4 1292 23 OdeBoxGeom::get_lengths 0 1 348 0
48
inline LVecBase3f OdeBoxGeom::get_lengths(void);

977 15 get_point_depth 0 4 1292 27 OdeBoxGeom::get_point_depth 0 2 349 350 0
129
inline float OdeBoxGeom::get_point_depth(float x, float y, float z);
inline float OdeBoxGeom::get_point_depth(LPoint3f const &p);

978 14 get_class_type 0 4 1292 26 OdeBoxGeom::get_class_type 0 1 351 0
51
static TypeHandle OdeBoxGeom::get_class_type(void);

979 21 OdeCappedCylinderGeom 0 4 1293 44 OdeCappedCylinderGeom::OdeCappedCylinderGeom 0 2 352 353 0
164
OdeCappedCylinderGeom::OdeCappedCylinderGeom(float radius, float length);
OdeCappedCylinderGeom::OdeCappedCylinderGeom(OdeSpace &space, float radius, float length);

980 10 set_params 0 4 1293 33 OdeCappedCylinderGeom::set_params 0 1 354 499
// Filename: odeCappedCylinderGeom.I
// Created by:  joswilso (27Dec06)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
74
inline void OdeCappedCylinderGeom::set_params(float radius, float length);

981 10 get_params 0 4 1293 33 OdeCappedCylinderGeom::get_params 0 0 0
82
inline void OdeCappedCylinderGeom::get_params(float *radius, float *length) const;

982 10 get_radius 0 4 1293 33 OdeCappedCylinderGeom::get_radius 0 1 355 0
59
inline float OdeCappedCylinderGeom::get_radius(void) const;

983 10 get_length 0 4 1293 33 OdeCappedCylinderGeom::get_length 0 1 356 0
59
inline float OdeCappedCylinderGeom::get_length(void) const;

984 15 get_point_depth 0 4 1293 38 OdeCappedCylinderGeom::get_point_depth 0 2 357 358 0
163
inline float OdeCappedCylinderGeom::get_point_depth(float x, float y, float z) const;
inline float OdeCappedCylinderGeom::get_point_depth(LPoint3f const &p) const;

985 14 get_class_type 0 4 1293 37 OdeCappedCylinderGeom::get_class_type 0 1 359 0
62
static TypeHandle OdeCappedCylinderGeom::get_class_type(void);

986 14 OdeContactGeom 0 4 1294 30 OdeContactGeom::OdeContactGeom 0 2 360 361 0
97
OdeContactGeom::OdeContactGeom(void);
OdeContactGeom::OdeContactGeom(OdeContactGeom const &copy);

987 7 get_pos 0 4 1294 23 OdeContactGeom::get_pos 0 1 362 492
// Filename: odeContactGeom.I
// Created by:  joswilso (27Dec06)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
54
inline LVecBase3f OdeContactGeom::get_pos(void) const;

988 10 get_normal 0 4 1294 26 OdeContactGeom::get_normal 0 1 363 0
57
inline LVecBase3f OdeContactGeom::get_normal(void) const;

989 9 get_depth 0 4 1294 25 OdeContactGeom::get_depth 0 1 364 0
51
inline float OdeContactGeom::get_depth(void) const;

990 6 get_g1 0 4 1294 22 OdeContactGeom::get_g1 0 1 365 0
50
inline OdeGeom OdeContactGeom::get_g1(void) const;

991 6 get_g2 0 4 1294 22 OdeContactGeom::get_g2 0 1 366 0
50
inline OdeGeom OdeContactGeom::get_g2(void) const;

992 9 get_side1 0 4 1294 25 OdeContactGeom::get_side1 0 1 367 0
49
inline int OdeContactGeom::get_side1(void) const;

993 9 get_side2 0 4 1294 25 OdeContactGeom::get_side2 0 1 368 0
49
inline int OdeContactGeom::get_side2(void) const;

994 7 set_pos 0 4 1294 23 OdeContactGeom::set_pos 0 1 369 0
59
inline void OdeContactGeom::set_pos(LVecBase3f const &pos);

995 10 set_normal 0 4 1294 26 OdeContactGeom::set_normal 0 1 370 0
65
inline void OdeContactGeom::set_normal(LVecBase3f const &normal);

996 9 set_depth 0 4 1294 25 OdeContactGeom::set_depth 0 1 371 0
57
inline void OdeContactGeom::set_depth(float const depth);

997 6 set_g1 0 4 1294 22 OdeContactGeom::set_g1 0 1 372 0
56
inline void OdeContactGeom::set_g1(OdeGeom const &geom);

998 6 set_g2 0 4 1294 22 OdeContactGeom::set_g2 0 1 373 0
56
inline void OdeContactGeom::set_g2(OdeGeom const &geom);

999 14 get_class_type 0 4 1294 30 OdeContactGeom::get_class_type 0 1 374 0
55
static TypeHandle OdeContactGeom::get_class_type(void);

1000 9 get_geom1 0 4 1295 28 OdeCollisionEntry::get_geom1 0 1 375 268
////////////////////////////////////////////////////////////////////
//     Function: OdeCollisionEntry::get_geom1
//       Access: Published
//  Description: Returns the first geom in the collision.
////////////////////////////////////////////////////////////////////
56
inline OdeGeom OdeCollisionEntry::get_geom1(void) const;

1001 9 get_geom2 0 4 1295 28 OdeCollisionEntry::get_geom2 0 1 376 269
////////////////////////////////////////////////////////////////////
//     Function: OdeCollisionEntry::get_geom2
//       Access: Published
//  Description: Returns the second geom in the collision.
////////////////////////////////////////////////////////////////////
56
inline OdeGeom OdeCollisionEntry::get_geom2(void) const;

1002 9 get_body1 0 4 1295 28 OdeCollisionEntry::get_body1 0 1 377 268
////////////////////////////////////////////////////////////////////
//     Function: OdeCollisionEntry::get_body1
//       Access: Published
//  Description: Returns the first body in the collision.
////////////////////////////////////////////////////////////////////
56
inline OdeBody OdeCollisionEntry::get_body1(void) const;

1003 9 get_body2 0 4 1295 28 OdeCollisionEntry::get_body2 0 1 378 269
////////////////////////////////////////////////////////////////////
//     Function: OdeCollisionEntry::get_body2
//       Access: Published
//  Description: Returns the second body in the collision.
////////////////////////////////////////////////////////////////////
56
inline OdeBody OdeCollisionEntry::get_body2(void) const;

1004 16 get_num_contacts 0 4 1295 35 OdeCollisionEntry::get_num_contacts 0 1 379 283
////////////////////////////////////////////////////////////////////
//     Function: OdeCollisionEntry::get_num_contacts
//       Access: Published
//  Description: Returns the number of contacts in the collision.
////////////////////////////////////////////////////////////////////
68
inline unsigned int OdeCollisionEntry::get_num_contacts(void) const;

1005 17 get_contact_point 0 4 1295 36 OdeCollisionEntry::get_contact_point 0 1 380 378
////////////////////////////////////////////////////////////////////
//     Function: OdeCollisionEntry::get_contact_point
//       Access: Published
//  Description: Returns the nth contact point in the collision.
//               This does exactly the same as
//               get_contact_geom(n).get_pos().
////////////////////////////////////////////////////////////////////
75
inline LPoint3f OdeCollisionEntry::get_contact_point(unsigned int n) const;

1006 16 get_contact_geom 0 4 1295 35 OdeCollisionEntry::get_contact_geom 0 1 381 281
////////////////////////////////////////////////////////////////////
//     Function: OdeCollisionEntry::get_contact_geom
//       Access: Published
//  Description: Returns the nth contact geom in the collision.
////////////////////////////////////////////////////////////////////
80
inline OdeContactGeom OdeCollisionEntry::get_contact_geom(unsigned int n) const;

1007 11 operator [] 0 4 1295 30 OdeCollisionEntry::operator [] 0 1 382 276
////////////////////////////////////////////////////////////////////
//     Function: OdeCollisionEntry::operator []
//       Access: Published
//  Description: Returns the nth contact geom in the collision.
////////////////////////////////////////////////////////////////////
75
inline OdeContactGeom OdeCollisionEntry::operator [](unsigned int n) const;

1008 22 operator typecast bool 0 132 1295 41 OdeCollisionEntry::operator typecast bool 0 1 385 313
////////////////////////////////////////////////////////////////////
//     Function: OdeCollisionEntry::operator bool
//       Access: Published
//  Description: An OdeCollisionEntry evaluates to False if it
//               holds no contacts.
////////////////////////////////////////////////////////////////////
66
inline bool OdeCollisionEntry::operator typecast bool(void) const;

1009 8 is_empty 0 4 1295 27 OdeCollisionEntry::is_empty 0 1 383 271
////////////////////////////////////////////////////////////////////
//     Function: OdeCollisionEntry::is_empty
//       Access: Published
//  Description: Returns true if the entry holds no contacts.
////////////////////////////////////////////////////////////////////
52
inline bool OdeCollisionEntry::is_empty(void) const;

1010 14 get_class_type 0 4 1295 33 OdeCollisionEntry::get_class_type 0 1 384 0
58
static TypeHandle OdeCollisionEntry::get_class_type(void);

1011 20 OdeSurfaceParameters 0 4 1296 42 OdeSurfaceParameters::OdeSurfaceParameters 0 3 386 387 388 0
75
OdeSurfaceParameters::OdeSurfaceParameters(int mode = (0), float mu = (0));

1012 8 set_mode 0 4 1296 30 OdeSurfaceParameters::set_mode 0 1 389 498
// Filename: odeSurfaceParameters.I
// Created by:  joswilso (27Dec06)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
53
inline void OdeSurfaceParameters::set_mode(int mode);

1013 6 set_mu 0 4 1296 28 OdeSurfaceParameters::set_mu 0 1 390 0
51
inline void OdeSurfaceParameters::set_mu(float mu);

1014 7 set_mu2 0 4 1296 29 OdeSurfaceParameters::set_mu2 0 1 391 0
53
inline void OdeSurfaceParameters::set_mu2(float mu2);

1015 10 set_bounce 0 4 1296 32 OdeSurfaceParameters::set_bounce 0 1 392 0
59
inline void OdeSurfaceParameters::set_bounce(float bounce);

1016 14 set_bounce_vel 0 4 1296 36 OdeSurfaceParameters::set_bounce_vel 0 1 393 0
67
inline void OdeSurfaceParameters::set_bounce_vel(float bounce_vel);

1017 12 set_soft_erp 0 4 1296 34 OdeSurfaceParameters::set_soft_erp 0 1 394 0
63
inline void OdeSurfaceParameters::set_soft_erp(float soft_erp);

1018 12 set_soft_cfm 0 4 1296 34 OdeSurfaceParameters::set_soft_cfm 0 1 395 0
63
inline void OdeSurfaceParameters::set_soft_cfm(float soft_cfm);

1019 11 set_motion1 0 4 1296 33 OdeSurfaceParameters::set_motion1 0 1 396 0
60
inline void OdeSurfaceParameters::set_motion1(float motion);

1020 11 set_motion2 0 4 1296 33 OdeSurfaceParameters::set_motion2 0 1 397 0
60
inline void OdeSurfaceParameters::set_motion2(float motion);

1021 9 set_slip1 0 4 1296 31 OdeSurfaceParameters::set_slip1 0 1 398 0
56
inline void OdeSurfaceParameters::set_slip1(float slip);

1022 9 set_slip2 0 4 1296 31 OdeSurfaceParameters::set_slip2 0 1 399 0
56
inline void OdeSurfaceParameters::set_slip2(float slip);

1023 8 get_mode 0 4 1296 30 OdeSurfaceParameters::get_mode 0 1 400 0
54
inline int OdeSurfaceParameters::get_mode(void) const;

1024 6 get_mu 0 4 1296 28 OdeSurfaceParameters::get_mu 0 1 401 0
54
inline float OdeSurfaceParameters::get_mu(void) const;

1025 7 get_mu2 0 4 1296 29 OdeSurfaceParameters::get_mu2 0 1 402 0
55
inline float OdeSurfaceParameters::get_mu2(void) const;

1026 10 get_bounce 0 4 1296 32 OdeSurfaceParameters::get_bounce 0 1 403 0
58
inline float OdeSurfaceParameters::get_bounce(void) const;

1027 14 get_bounce_vel 0 4 1296 36 OdeSurfaceParameters::get_bounce_vel 0 1 404 0
62
inline float OdeSurfaceParameters::get_bounce_vel(void) const;

1028 12 get_soft_erp 0 4 1296 34 OdeSurfaceParameters::get_soft_erp 0 1 405 0
60
inline float OdeSurfaceParameters::get_soft_erp(void) const;

1029 12 get_soft_cfm 0 4 1296 34 OdeSurfaceParameters::get_soft_cfm 0 1 406 0
60
inline float OdeSurfaceParameters::get_soft_cfm(void) const;

1030 11 get_motion1 0 4 1296 33 OdeSurfaceParameters::get_motion1 0 1 407 0
59
inline float OdeSurfaceParameters::get_motion1(void) const;

1031 11 get_motion2 0 4 1296 33 OdeSurfaceParameters::get_motion2 0 1 408 0
59
inline float OdeSurfaceParameters::get_motion2(void) const;

1032 9 get_slip1 0 4 1296 31 OdeSurfaceParameters::get_slip1 0 1 409 0
57
inline float OdeSurfaceParameters::get_slip1(void) const;

1033 9 get_slip2 0 4 1296 31 OdeSurfaceParameters::get_slip2 0 1 410 0
57
inline float OdeSurfaceParameters::get_slip2(void) const;

1034 14 get_class_type 0 4 1296 36 OdeSurfaceParameters::get_class_type 0 1 411 0
61
static TypeHandle OdeSurfaceParameters::get_class_type(void);

1035 10 OdeContact 0 4 1298 22 OdeContact::OdeContact 0 2 412 413 38
// OdeContact(const OdeContact &copy);
78
OdeContact::OdeContact(void);
OdeContact::OdeContact(dContact const &contact);

1036 11 get_surface 0 4 1298 23 OdeContact::get_surface 0 1 414 488
// Filename: odeContact.I
// Created by:  joswilso (27Dec06)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
64
inline OdeSurfaceParameters OdeContact::get_surface(void) const;

1037 8 get_geom 0 4 1298 20 OdeContact::get_geom 0 1 415 0
49
inline OdeContactGeom OdeContact::get_geom(void);

1038 9 get_fdir1 0 4 1298 21 OdeContact::get_fdir1 0 1 416 0
52
inline LVecBase3f OdeContact::get_fdir1(void) const;

1039 11 set_surface 0 4 1298 23 OdeContact::set_surface 0 1 417 0
84
inline void OdeContact::set_surface(OdeSurfaceParameters const &surface_parameters);

1040 8 set_geom 0 4 1298 20 OdeContact::set_geom 0 1 418 0
69
inline void OdeContact::set_geom(OdeContactGeom const &contact_geom);

1041 9 set_fdir1 0 4 1298 21 OdeContact::set_fdir1 0 1 419 0
59
inline void OdeContact::set_fdir1(LVecBase3f const &fdir1);

1042 14 get_class_type 0 4 1298 26 OdeContact::get_class_type 0 1 420 0
51
static TypeHandle OdeContact::get_class_type(void);

1043 15 OdeContactJoint 0 4 1299 32 OdeContactJoint::OdeContactJoint 0 2 421 422 0
183
OdeContactJoint::OdeContactJoint(OdeWorld &world, OdeContact const &contact);
OdeContactJoint::OdeContactJoint(OdeWorld &world, OdeJointGroup &joint_group, OdeContact const &contact);

1044 14 get_class_type 0 4 1299 31 OdeContactJoint::get_class_type 0 1 423 0
56
static TypeHandle OdeContactJoint::get_class_type(void);

1045 15 OdeCylinderGeom 0 4 1300 32 OdeCylinderGeom::OdeCylinderGeom 0 2 424 425 0
140
OdeCylinderGeom::OdeCylinderGeom(float radius, float length);
OdeCylinderGeom::OdeCylinderGeom(OdeSpace &space, float radius, float length);

1046 10 set_params 0 4 1300 27 OdeCylinderGeom::set_params 0 1 426 493
// Filename: odeCylinderGeom.I
// Created by:  joswilso (27Dec06)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
68
inline void OdeCylinderGeom::set_params(float radius, float length);

1047 10 get_params 0 4 1300 27 OdeCylinderGeom::get_params 0 0 0
76
inline void OdeCylinderGeom::get_params(float *radius, float *length) const;

1048 10 get_radius 0 4 1300 27 OdeCylinderGeom::get_radius 0 1 427 0
53
inline float OdeCylinderGeom::get_radius(void) const;

1049 10 get_length 0 4 1300 27 OdeCylinderGeom::get_length 0 1 428 0
53
inline float OdeCylinderGeom::get_length(void) const;

1050 14 get_class_type 0 4 1300 31 OdeCylinderGeom::get_class_type 0 1 429 0
56
static TypeHandle OdeCylinderGeom::get_class_type(void);

1051 13 OdeFixedJoint 0 4 1301 28 OdeFixedJoint::OdeFixedJoint 0 2 430 431 0
121
OdeFixedJoint::OdeFixedJoint(OdeWorld &world);
OdeFixedJoint::OdeFixedJoint(OdeWorld &world, OdeJointGroup &joint_group);

1052 3 set 0 4 1301 18 OdeFixedJoint::set 0 1 432 491
// Filename: odeFixedJoint.I
// Created by:  joswilso (27Dec06)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
37
inline void OdeFixedJoint::set(void);

1053 14 get_class_type 0 4 1301 29 OdeFixedJoint::get_class_type 0 1 433 0
54
static TypeHandle OdeFixedJoint::get_class_type(void);

1054 12 OdeHashSpace 0 4 1302 26 OdeHashSpace::OdeHashSpace 0 2 434 435 0
78
OdeHashSpace::OdeHashSpace(void);
OdeHashSpace::OdeHashSpace(OdeSpace &space);

1055 10 set_levels 0 4 1302 24 OdeHashSpace::set_levels 0 1 436 490
// Filename: odeHashSpace.I
// Created by:  joswilso (27Dec06)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
65
inline void OdeHashSpace::set_levels(int minlevel, int maxlevel);

1056 13 get_min_level 0 4 1302 27 OdeHashSpace::get_min_level 0 1 437 0
51
inline int OdeHashSpace::get_min_level(void) const;

1057 13 get_max_level 0 4 1302 27 OdeHashSpace::get_max_level 0 1 438 0
51
inline int OdeHashSpace::get_max_level(void) const;

1058 14 get_class_type 0 4 1302 28 OdeHashSpace::get_class_type 0 1 439 0
53
static TypeHandle OdeHashSpace::get_class_type(void);

1059 14 OdeHinge2Joint 0 4 1303 30 OdeHinge2Joint::OdeHinge2Joint 0 2 440 441 0
125
OdeHinge2Joint::OdeHinge2Joint(OdeWorld &world, OdeJointGroup &joint_group);
OdeHinge2Joint::OdeHinge2Joint(OdeWorld &world);

1060 10 set_anchor 0 4 1303 26 OdeHinge2Joint::set_anchor 0 2 442 443 0
132
inline void OdeHinge2Joint::set_anchor(float x, float y, float z);
inline void OdeHinge2Joint::set_anchor(LVecBase3f const &anchor);

1061 9 set_axis1 0 4 1303 25 OdeHinge2Joint::set_axis1 0 2 444 445 0
128
inline void OdeHinge2Joint::set_axis1(float x, float y, float z);
inline void OdeHinge2Joint::set_axis1(LVecBase3f const &axis);

1062 9 set_axis2 0 4 1303 25 OdeHinge2Joint::set_axis2 0 2 446 447 0
128
inline void OdeHinge2Joint::set_axis2(float x, float y, float z);
inline void OdeHinge2Joint::set_axis2(LVecBase3f const &axis);

1063 11 add_torques 0 4 1303 27 OdeHinge2Joint::add_torques 0 1 448 0
70
inline void OdeHinge2Joint::add_torques(float torque1, float torque2);

1064 10 get_anchor 0 4 1303 26 OdeHinge2Joint::get_anchor 0 1 449 0
57
inline LVecBase3f OdeHinge2Joint::get_anchor(void) const;

1065 11 get_anchor2 0 4 1303 27 OdeHinge2Joint::get_anchor2 0 1 450 0
58
inline LVecBase3f OdeHinge2Joint::get_anchor2(void) const;

1066 9 get_axis1 0 4 1303 25 OdeHinge2Joint::get_axis1 0 1 451 0
56
inline LVecBase3f OdeHinge2Joint::get_axis1(void) const;

1067 9 get_axis2 0 4 1303 25 OdeHinge2Joint::get_axis2 0 1 452 0
56
inline LVecBase3f OdeHinge2Joint::get_axis2(void) const;

1068 10 get_angle1 0 4 1303 26 OdeHinge2Joint::get_angle1 0 1 453 0
52
inline float OdeHinge2Joint::get_angle1(void) const;

1069 15 get_angle1_rate 0 4 1303 31 OdeHinge2Joint::get_angle1_rate 0 1 454 0
57
inline float OdeHinge2Joint::get_angle1_rate(void) const;

1070 15 get_angle2_rate 0 4 1303 31 OdeHinge2Joint::get_angle2_rate 0 1 455 0
57
inline float OdeHinge2Joint::get_angle2_rate(void) const;

1071 17 set_param_lo_stop 0 4 1303 33 OdeHinge2Joint::set_param_lo_stop 0 1 456 0
67
inline void OdeHinge2Joint::set_param_lo_stop(int axis, float val);

1072 17 set_param_hi_stop 0 4 1303 33 OdeHinge2Joint::set_param_hi_stop 0 1 457 0
67
inline void OdeHinge2Joint::set_param_hi_stop(int axis, float val);

1073 13 set_param_vel 0 4 1303 29 OdeHinge2Joint::set_param_vel 0 1 458 0
63
inline void OdeHinge2Joint::set_param_vel(int axis, float val);

1074 15 set_param_f_max 0 4 1303 31 OdeHinge2Joint::set_param_f_max 0 1 459 0
65
inline void OdeHinge2Joint::set_param_f_max(int axis, float val);

1075 22 set_param_fudge_factor 0 4 1303 38 OdeHinge2Joint::set_param_fudge_factor 0 1 460 0
72
inline void OdeHinge2Joint::set_param_fudge_factor(int axis, float val);

1076 16 set_param_bounce 0 4 1303 32 OdeHinge2Joint::set_param_bounce 0 1 461 0
66
inline void OdeHinge2Joint::set_param_bounce(int axis, float val);

1077 13 set_param_CFM 0 4 1303 29 OdeHinge2Joint::set_param_CFM 0 1 462 0
63
inline void OdeHinge2Joint::set_param_CFM(int axis, float val);

1078 18 set_param_stop_ERP 0 4 1303 34 OdeHinge2Joint::set_param_stop_ERP 0 1 463 0
68
inline void OdeHinge2Joint::set_param_stop_ERP(int axis, float val);

1079 18 set_param_stop_CFM 0 4 1303 34 OdeHinge2Joint::set_param_stop_CFM 0 1 464 0
68
inline void OdeHinge2Joint::set_param_stop_CFM(int axis, float val);

1080 24 set_param_suspension_ERP 0 4 1303 40 OdeHinge2Joint::set_param_suspension_ERP 0 1 465 0
74
inline void OdeHinge2Joint::set_param_suspension_ERP(int axis, float val);

1081 24 set_param_suspension_CFM 0 4 1303 40 OdeHinge2Joint::set_param_suspension_CFM 0 1 466 0
74
inline void OdeHinge2Joint::set_param_suspension_CFM(int axis, float val);

1082 17 get_param_lo_stop 0 4 1303 33 OdeHinge2Joint::get_param_lo_stop 0 1 467 0
63
inline float OdeHinge2Joint::get_param_lo_stop(int axis) const;

1083 17 get_param_hi_stop 0 4 1303 33 OdeHinge2Joint::get_param_hi_stop 0 1 468 0
63
inline float OdeHinge2Joint::get_param_hi_stop(int axis) const;

1084 13 get_param_vel 0 4 1303 29 OdeHinge2Joint::get_param_vel 0 1 469 0
59
inline float OdeHinge2Joint::get_param_vel(int axis) const;

1085 15 get_param_f_max 0 4 1303 31 OdeHinge2Joint::get_param_f_max 0 1 470 0
61
inline float OdeHinge2Joint::get_param_f_max(int axis) const;

1086 22 get_param_fudge_factor 0 4 1303 38 OdeHinge2Joint::get_param_fudge_factor 0 1 471 0
68
inline float OdeHinge2Joint::get_param_fudge_factor(int axis) const;

1087 16 get_param_bounce 0 4 1303 32 OdeHinge2Joint::get_param_bounce 0 1 472 0
62
inline float OdeHinge2Joint::get_param_bounce(int axis) const;

1088 13 get_param_CFM 0 4 1303 29 OdeHinge2Joint::get_param_CFM 0 1 473 0
59
inline float OdeHinge2Joint::get_param_CFM(int axis) const;

1089 18 get_param_stop_ERP 0 4 1303 34 OdeHinge2Joint::get_param_stop_ERP 0 1 474 0
64
inline float OdeHinge2Joint::get_param_stop_ERP(int axis) const;

1090 18 get_param_stop_CFM 0 4 1303 34 OdeHinge2Joint::get_param_stop_CFM 0 1 475 0
64
inline float OdeHinge2Joint::get_param_stop_CFM(int axis) const;

1091 24 get_param_suspension_ERP 0 4 1303 40 OdeHinge2Joint::get_param_suspension_ERP 0 1 476 0
70
inline float OdeHinge2Joint::get_param_suspension_ERP(int axis) const;

1092 24 get_param_suspension_CFM 0 4 1303 40 OdeHinge2Joint::get_param_suspension_CFM 0 1 477 0
70
inline float OdeHinge2Joint::get_param_suspension_CFM(int axis) const;

1093 14 get_class_type 0 4 1303 30 OdeHinge2Joint::get_class_type 0 1 478 0
55
static TypeHandle OdeHinge2Joint::get_class_type(void);

1094 13 OdeHingeJoint 0 4 1304 28 OdeHingeJoint::OdeHingeJoint 0 2 479 480 0
121
OdeHingeJoint::OdeHingeJoint(OdeWorld &world);
OdeHingeJoint::OdeHingeJoint(OdeWorld &world, OdeJointGroup &joint_group);

1095 10 set_anchor 0 4 1304 25 OdeHingeJoint::set_anchor 0 2 481 482 491
// Filename: odeHingeJoint.I
// Created by:  joswilso (27Dec06)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
130
inline void OdeHingeJoint::set_anchor(float x, float y, float z);
inline void OdeHingeJoint::set_anchor(LVecBase3f const &anchor);

1096 16 set_anchor_delta 0 4 1304 31 OdeHingeJoint::set_anchor_delta 0 2 483 484 0
195
inline void OdeHingeJoint::set_anchor_delta(float x, float y, float z, float ax, float ay, float az);
inline void OdeHingeJoint::set_anchor_delta(LVecBase3f const &anchor, LVecBase3f const &vec);

1097 8 set_axis 0 4 1304 23 OdeHingeJoint::set_axis 0 2 485 486 0
124
inline void OdeHingeJoint::set_axis(float x, float y, float z);
inline void OdeHingeJoint::set_axis(LVecBase3f const &axis);

1098 10 add_torque 0 4 1304 25 OdeHingeJoint::add_torque 0 1 487 0
52
inline void OdeHingeJoint::add_torque(float torque);

1099 10 get_anchor 0 4 1304 25 OdeHingeJoint::get_anchor 0 1 488 0
56
inline LVecBase3f OdeHingeJoint::get_anchor(void) const;

1100 11 get_anchor2 0 4 1304 26 OdeHingeJoint::get_anchor2 0 1 489 0
57
inline LVecBase3f OdeHingeJoint::get_anchor2(void) const;

1101 8 get_axis 0 4 1304 23 OdeHingeJoint::get_axis 0 1 490 0
54
inline LVecBase3f OdeHingeJoint::get_axis(void) const;

1102 9 get_angle 0 4 1304 24 OdeHingeJoint::get_angle 0 1 491 0
50
inline float OdeHingeJoint::get_angle(void) const;

1103 14 get_angle_rate 0 4 1304 29 OdeHingeJoint::get_angle_rate 0 1 492 0
55
inline float OdeHingeJoint::get_angle_rate(void) const;

1104 17 set_param_lo_stop 0 4 1304 32 OdeHingeJoint::set_param_lo_stop 0 1 493 0
56
inline void OdeHingeJoint::set_param_lo_stop(float val);

1105 17 set_param_hi_stop 0 4 1304 32 OdeHingeJoint::set_param_hi_stop 0 1 494 0
56
inline void OdeHingeJoint::set_param_hi_stop(float val);

1106 13 set_param_vel 0 4 1304 28 OdeHingeJoint::set_param_vel 0 1 495 0
52
inline void OdeHingeJoint::set_param_vel(float val);

1107 15 set_param_f_max 0 4 1304 30 OdeHingeJoint::set_param_f_max 0 1 496 0
54
inline void OdeHingeJoint::set_param_f_max(float val);

1108 22 set_param_fudge_factor 0 4 1304 37 OdeHingeJoint::set_param_fudge_factor 0 1 497 0
61
inline void OdeHingeJoint::set_param_fudge_factor(float val);

1109 16 set_param_bounce 0 4 1304 31 OdeHingeJoint::set_param_bounce 0 1 498 0
55
inline void OdeHingeJoint::set_param_bounce(float val);

1110 13 set_param_CFM 0 4 1304 28 OdeHingeJoint::set_param_CFM 0 1 499 0
52
inline void OdeHingeJoint::set_param_CFM(float val);

1111 18 set_param_stop_ERP 0 4 1304 33 OdeHingeJoint::set_param_stop_ERP 0 1 500 0
57
inline void OdeHingeJoint::set_param_stop_ERP(float val);

1112 18 set_param_stop_CFM 0 4 1304 33 OdeHingeJoint::set_param_stop_CFM 0 1 501 0
57
inline void OdeHingeJoint::set_param_stop_CFM(float val);

1113 17 get_param_lo_stop 0 4 1304 32 OdeHingeJoint::get_param_lo_stop 0 1 502 0
58
inline float OdeHingeJoint::get_param_lo_stop(void) const;

1114 17 get_param_hi_stop 0 4 1304 32 OdeHingeJoint::get_param_hi_stop 0 1 503 0
58
inline float OdeHingeJoint::get_param_hi_stop(void) const;

1115 13 get_param_vel 0 4 1304 28 OdeHingeJoint::get_param_vel 0 1 504 0
54
inline float OdeHingeJoint::get_param_vel(void) const;

1116 15 get_param_f_max 0 4 1304 30 OdeHingeJoint::get_param_f_max 0 1 505 0
56
inline float OdeHingeJoint::get_param_f_max(void) const;

1117 22 get_param_fudge_factor 0 4 1304 37 OdeHingeJoint::get_param_fudge_factor 0 1 506 0
63
inline float OdeHingeJoint::get_param_fudge_factor(void) const;

1118 16 get_param_bounce 0 4 1304 31 OdeHingeJoint::get_param_bounce 0 1 507 0
57
inline float OdeHingeJoint::get_param_bounce(void) const;

1119 13 get_param_CFM 0 4 1304 28 OdeHingeJoint::get_param_CFM 0 1 508 0
54
inline float OdeHingeJoint::get_param_CFM(void) const;

1120 18 get_param_stop_ERP 0 4 1304 33 OdeHingeJoint::get_param_stop_ERP 0 1 509 0
59
inline float OdeHingeJoint::get_param_stop_ERP(void) const;

1121 18 get_param_stop_CFM 0 4 1304 33 OdeHingeJoint::get_param_stop_CFM 0 1 510 0
59
inline float OdeHingeJoint::get_param_stop_CFM(void) const;

1122 14 get_class_type 0 4 1304 29 OdeHingeJoint::get_class_type 0 1 511 0
54
static TypeHandle OdeHingeJoint::get_class_type(void);

1123 18 OdeJointCollection 0 4 1305 38 OdeJointCollection::OdeJointCollection 0 2 512 513 0
117
OdeJointCollection::OdeJointCollection(void);
OdeJointCollection::OdeJointCollection(OdeJointCollection const &copy);

1124 10 operator = 0 4 1305 30 OdeJointCollection::operator = 0 1 514 0
68
void OdeJointCollection::operator =(OdeJointCollection const &copy);

1125 19 ~OdeJointCollection 0 4 1305 39 OdeJointCollection::~OdeJointCollection 0 0 723
// Filename: odeJointCollection.I
// Created by:  drose (10Nov08)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: OdeJointCollection::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
53
inline OdeJointCollection::~OdeJointCollection(void);

1126 9 add_joint 0 4 1305 29 OdeJointCollection::add_joint 0 1 515 0
58
void OdeJointCollection::add_joint(OdeJoint const &joint);

1127 12 remove_joint 0 4 1305 32 OdeJointCollection::remove_joint 0 1 516 0
61
bool OdeJointCollection::remove_joint(OdeJoint const &joint);

1128 15 add_joints_from 0 4 1305 35 OdeJointCollection::add_joints_from 0 1 517 0
74
void OdeJointCollection::add_joints_from(OdeJointCollection const &other);

1129 18 remove_joints_from 0 4 1305 38 OdeJointCollection::remove_joints_from 0 1 518 0
77
void OdeJointCollection::remove_joints_from(OdeJointCollection const &other);

1130 23 remove_duplicate_joints 0 4 1305 43 OdeJointCollection::remove_duplicate_joints 0 1 519 0
55
void OdeJointCollection::remove_duplicate_joints(void);

1131 9 has_joint 0 4 1305 29 OdeJointCollection::has_joint 0 1 520 0
64
bool OdeJointCollection::has_joint(OdeJoint const &joint) const;

1132 5 clear 0 4 1305 25 OdeJointCollection::clear 0 1 521 0
37
void OdeJointCollection::clear(void);

1133 8 is_empty 0 4 1305 28 OdeJointCollection::is_empty 0 1 522 0
46
bool OdeJointCollection::is_empty(void) const;

1134 14 get_num_joints 0 4 1305 34 OdeJointCollection::get_num_joints 0 1 523 0
51
int OdeJointCollection::get_num_joints(void) const;

1135 9 get_joint 0 4 1305 29 OdeJointCollection::get_joint 0 1 524 0
56
OdeJoint OdeJointCollection::get_joint(int index) const;

1136 11 operator [] 0 4 1305 31 OdeJointCollection::operator [] 0 1 525 0
58
OdeJoint OdeJointCollection::operator [](int index) const;

1137 4 size 0 4 1305 24 OdeJointCollection::size 0 1 526 333
////////////////////////////////////////////////////////////////////
//     Function: OdeJointCollection::size
//       Access: Published
//  Description: Returns the number of joints in the collection.  This
//               is the same thing as get_num_joints().
////////////////////////////////////////////////////////////////////
41
int OdeJointCollection::size(void) const;

1138 11 operator += 0 4 1305 31 OdeJointCollection::operator += 0 1 527 279
////////////////////////////////////////////////////////////////////
//     Function: OdeJointCollection::operator +=
//       Access: Published
//  Description: Appends the other list onto the end of this one.
////////////////////////////////////////////////////////////////////
77
inline void OdeJointCollection::operator +=(OdeJointCollection const &other);

1139 10 operator + 0 4 1305 30 OdeJointCollection::operator + 0 1 528 324
////////////////////////////////////////////////////////////////////
//     Function: OdeJointCollection::operator +
//       Access: Published
//  Description: Returns a OdeJointCollection representing the
//               concatenation of the two lists.
////////////////////////////////////////////////////////////////////
96
inline OdeJointCollection OdeJointCollection::operator +(OdeJointCollection const &other) const;

1140 14 OdeLMotorJoint 0 4 1306 30 OdeLMotorJoint::OdeLMotorJoint 0 2 529 530 0
125
OdeLMotorJoint::OdeLMotorJoint(OdeWorld &world);
OdeLMotorJoint::OdeLMotorJoint(OdeWorld &world, OdeJointGroup &joint_group);

1141 12 set_num_axes 0 4 1306 28 OdeLMotorJoint::set_num_axes 0 1 531 0
50
inline void OdeLMotorJoint::set_num_axes(int num);

1142 8 set_axis 0 4 1306 24 OdeLMotorJoint::set_axis 0 2 532 533 0
164
inline void OdeLMotorJoint::set_axis(int anum, int rel, float x, float y, float z);
inline void OdeLMotorJoint::set_axis(int anum, int rel, LVecBase3f const &axis);

1143 9 set_param 0 4 1306 25 OdeLMotorJoint::set_param 0 1 534 0
66
inline void OdeLMotorJoint::set_param(int parameter, float value);

1144 12 get_num_axes 0 4 1306 28 OdeLMotorJoint::get_num_axes 0 1 535 0
52
inline int OdeLMotorJoint::get_num_axes(void) const;

1145 8 get_axis 0 4 1306 24 OdeLMotorJoint::get_axis 0 1 536 0
59
inline LVecBase3f OdeLMotorJoint::get_axis(int anum) const;

1146 9 get_param 0 4 1306 25 OdeLMotorJoint::get_param 0 1 537 0
60
inline float OdeLMotorJoint::get_param(int parameter) const;

1147 14 get_class_type 0 4 1306 30 OdeLMotorJoint::get_class_type 0 1 538 0
55
static TypeHandle OdeLMotorJoint::get_class_type(void);

1148 12 OdeNullJoint 0 4 1307 26 OdeNullJoint::OdeNullJoint 0 2 539 540 0
117
OdeNullJoint::OdeNullJoint(OdeWorld &world);
OdeNullJoint::OdeNullJoint(OdeWorld &world, OdeJointGroup &joint_group);

1149 14 get_class_type 0 4 1307 28 OdeNullJoint::get_class_type 0 1 541 0
53
static TypeHandle OdeNullJoint::get_class_type(void);

1150 15 OdePlane2dJoint 0 4 1308 32 OdePlane2dJoint::OdePlane2dJoint 0 2 542 543 0
129
OdePlane2dJoint::OdePlane2dJoint(OdeWorld &world);
OdePlane2dJoint::OdePlane2dJoint(OdeWorld &world, OdeJointGroup &joint_group);

1151 11 set_x_param 0 4 1308 28 OdePlane2dJoint::set_x_param 0 1 544 493
// Filename: odePlane2dJoint.I
// Created by:  joswilso (27Dec06)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
69
inline void OdePlane2dJoint::set_x_param(int parameter, float value);

1152 11 set_y_param 0 4 1308 28 OdePlane2dJoint::set_y_param 0 1 545 0
69
inline void OdePlane2dJoint::set_y_param(int parameter, float value);

1153 15 set_angle_param 0 4 1308 32 OdePlane2dJoint::set_angle_param 0 1 546 0
73
inline void OdePlane2dJoint::set_angle_param(int parameter, float value);

1154 14 get_class_type 0 4 1308 31 OdePlane2dJoint::get_class_type 0 1 547 0
56
static TypeHandle OdePlane2dJoint::get_class_type(void);

1155 12 OdePlaneGeom 0 4 1309 26 OdePlaneGeom::OdePlaneGeom 0 4 548 549 550 551 0
269
OdePlaneGeom::OdePlaneGeom(float a, float b, float c, float d);
OdePlaneGeom::OdePlaneGeom(LVecBase4f const &params);
OdePlaneGeom::OdePlaneGeom(OdeSpace &space, float a, float b, float c, float d);
OdePlaneGeom::OdePlaneGeom(OdeSpace &space, LVecBase4f const &params);

1156 10 set_params 0 4 1309 24 OdePlaneGeom::set_params 0 2 552 553 490
// Filename: odePlaneGeom.I
// Created by:  joswilso (27Dec06)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
137
inline void OdePlaneGeom::set_params(float a, float b, float c, float d);
inline void OdePlaneGeom::set_params(LVecBase4f const &params);

1157 10 get_params 0 4 1309 24 OdePlaneGeom::get_params 0 1 554 0
55
inline LVecBase4f OdePlaneGeom::get_params(void) const;

1158 15 get_point_depth 0 4 1309 29 OdePlaneGeom::get_point_depth 0 2 555 556 0
145
inline float OdePlaneGeom::get_point_depth(float x, float y, float z) const;
inline float OdePlaneGeom::get_point_depth(LPoint3f const &p) const;

1159 14 get_class_type 0 4 1309 28 OdePlaneGeom::get_class_type 0 1 557 0
53
static TypeHandle OdePlaneGeom::get_class_type(void);

1160 16 OdeQuadTreeSpace 0 4 1310 34 OdeQuadTreeSpace::OdeQuadTreeSpace 0 2 558 559 0
224
OdeQuadTreeSpace::OdeQuadTreeSpace(LPoint3f const &center, LVecBase3f const &extents, int const depth);
OdeQuadTreeSpace::OdeQuadTreeSpace(OdeSpace &space, LPoint3f const &center, LVecBase3f const &extents, int const depth);

1161 14 get_class_type 0 4 1310 32 OdeQuadTreeSpace::get_class_type 0 1 560 0
57
static TypeHandle OdeQuadTreeSpace::get_class_type(void);

1162 10 OdeRayGeom 0 4 1311 22 OdeRayGeom::OdeRayGeom 0 2 561 562 0
92
OdeRayGeom::OdeRayGeom(float length);
OdeRayGeom::OdeRayGeom(OdeSpace &space, float length);

1163 10 set_length 0 4 1311 22 OdeRayGeom::set_length 0 1 563 488
// Filename: odeRayGeom.I
// Created by:  joswilso (27Dec06)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
49
inline void OdeRayGeom::set_length(float length);

1164 10 get_length 0 4 1311 22 OdeRayGeom::get_length 0 1 564 0
42
inline float OdeRayGeom::get_length(void);

1165 3 set 0 4 1311 15 OdeRayGeom::set 0 2 565 566 0
165
inline void OdeRayGeom::set(float px, float py, float pz, float dx, float dy, float dz);
inline void OdeRayGeom::set(LVecBase3f const &start, LVecBase3f const &dir);

1166 3 get 0 4 1311 15 OdeRayGeom::get 0 1 567 0
70
inline void OdeRayGeom::get(LVecBase3f &start, LVecBase3f &dir) const;

1167 9 get_start 0 4 1311 21 OdeRayGeom::get_start 0 1 568 0
52
inline LVecBase3f OdeRayGeom::get_start(void) const;

1168 13 get_direction 0 4 1311 25 OdeRayGeom::get_direction 0 1 569 0
56
inline LVecBase3f OdeRayGeom::get_direction(void) const;

1169 10 set_params 0 4 1311 22 OdeRayGeom::set_params 0 1 570 0
73
inline void OdeRayGeom::set_params(int first_contact, int backface_cull);

1170 10 get_params 0 4 1311 22 OdeRayGeom::get_params 0 0 0
81
inline void OdeRayGeom::get_params(int &first_contact, int &backface_cull) const;

1171 17 get_first_contact 0 4 1311 29 OdeRayGeom::get_first_contact 0 1 571 0
53
inline int OdeRayGeom::get_first_contact(void) const;

1172 17 get_backface_cull 0 4 1311 29 OdeRayGeom::get_backface_cull 0 1 572 0
53
inline int OdeRayGeom::get_backface_cull(void) const;

1173 15 set_closest_hit 0 4 1311 27 OdeRayGeom::set_closest_hit 0 1 573 0
57
inline void OdeRayGeom::set_closest_hit(int closest_hit);

1174 15 get_closest_hit 0 4 1311 27 OdeRayGeom::get_closest_hit 0 1 574 0
45
inline int OdeRayGeom::get_closest_hit(void);

1175 14 get_class_type 0 4 1311 26 OdeRayGeom::get_class_type 0 1 575 0
51
static TypeHandle OdeRayGeom::get_class_type(void);

1176 14 OdeSimpleSpace 0 4 1312 30 OdeSimpleSpace::OdeSimpleSpace 0 2 576 577 0
86
OdeSimpleSpace::OdeSimpleSpace(void);
OdeSimpleSpace::OdeSimpleSpace(OdeSpace &space);

1177 14 get_class_type 0 4 1312 30 OdeSimpleSpace::get_class_type 0 1 578 0
55
static TypeHandle OdeSimpleSpace::get_class_type(void);

1178 14 OdeSliderJoint 0 4 1313 30 OdeSliderJoint::OdeSliderJoint 0 2 579 580 0
125
OdeSliderJoint::OdeSliderJoint(OdeWorld &world);
OdeSliderJoint::OdeSliderJoint(OdeWorld &world, OdeJointGroup &joint_group);

1179 8 set_axis 0 4 1313 24 OdeSliderJoint::set_axis 0 2 581 582 492
// Filename: odeSliderJoint.I
// Created by:  joswilso (27Dec06)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
126
inline void OdeSliderJoint::set_axis(float x, float y, float z);
inline void OdeSliderJoint::set_axis(LVecBase3f const &axis);

1180 14 set_axis_delta 0 4 1313 30 OdeSliderJoint::set_axis_delta 0 2 583 584 0
191
inline void OdeSliderJoint::set_axis_delta(float x, float y, float z, float ax, float ay, float az);
inline void OdeSliderJoint::set_axis_delta(LVecBase3f const &axis, LVecBase3f const &vec);

1181 9 add_force 0 4 1313 25 OdeSliderJoint::add_force 0 1 585 0
51
inline void OdeSliderJoint::add_force(float force);

1182 12 get_position 0 4 1313 28 OdeSliderJoint::get_position 0 1 586 0
54
inline float OdeSliderJoint::get_position(void) const;

1183 17 get_position_rate 0 4 1313 33 OdeSliderJoint::get_position_rate 0 1 587 0
59
inline float OdeSliderJoint::get_position_rate(void) const;

1184 8 get_axis 0 4 1313 24 OdeSliderJoint::get_axis 0 1 588 0
55
inline LVecBase3f OdeSliderJoint::get_axis(void) const;

1185 17 set_param_lo_stop 0 4 1313 33 OdeSliderJoint::set_param_lo_stop 0 1 589 0
57
inline void OdeSliderJoint::set_param_lo_stop(float val);

1186 17 set_param_hi_stop 0 4 1313 33 OdeSliderJoint::set_param_hi_stop 0 1 590 0
57
inline void OdeSliderJoint::set_param_hi_stop(float val);

1187 13 set_param_vel 0 4 1313 29 OdeSliderJoint::set_param_vel 0 1 591 0
53
inline void OdeSliderJoint::set_param_vel(float val);

1188 15 set_param_f_max 0 4 1313 31 OdeSliderJoint::set_param_f_max 0 1 592 0
55
inline void OdeSliderJoint::set_param_f_max(float val);

1189 22 set_param_fudge_factor 0 4 1313 38 OdeSliderJoint::set_param_fudge_factor 0 1 593 0
62
inline void OdeSliderJoint::set_param_fudge_factor(float val);

1190 16 set_param_bounce 0 4 1313 32 OdeSliderJoint::set_param_bounce 0 1 594 0
56
inline void OdeSliderJoint::set_param_bounce(float val);

1191 13 set_param_CFM 0 4 1313 29 OdeSliderJoint::set_param_CFM 0 1 595 0
53
inline void OdeSliderJoint::set_param_CFM(float val);

1192 18 set_param_stop_ERP 0 4 1313 34 OdeSliderJoint::set_param_stop_ERP 0 1 596 0
58
inline void OdeSliderJoint::set_param_stop_ERP(float val);

1193 18 set_param_stop_CFM 0 4 1313 34 OdeSliderJoint::set_param_stop_CFM 0 1 597 0
58
inline void OdeSliderJoint::set_param_stop_CFM(float val);

1194 17 get_param_lo_stop 0 4 1313 33 OdeSliderJoint::get_param_lo_stop 0 1 598 0
59
inline float OdeSliderJoint::get_param_lo_stop(void) const;

1195 17 get_param_hi_stop 0 4 1313 33 OdeSliderJoint::get_param_hi_stop 0 1 599 0
59
inline float OdeSliderJoint::get_param_hi_stop(void) const;

1196 13 get_param_vel 0 4 1313 29 OdeSliderJoint::get_param_vel 0 1 600 0
55
inline float OdeSliderJoint::get_param_vel(void) const;

1197 15 get_param_f_max 0 4 1313 31 OdeSliderJoint::get_param_f_max 0 1 601 0
57
inline float OdeSliderJoint::get_param_f_max(void) const;

1198 22 get_param_fudge_factor 0 4 1313 38 OdeSliderJoint::get_param_fudge_factor 0 1 602 0
64
inline float OdeSliderJoint::get_param_fudge_factor(void) const;

1199 16 get_param_bounce 0 4 1313 32 OdeSliderJoint::get_param_bounce 0 1 603 0
58
inline float OdeSliderJoint::get_param_bounce(void) const;

1200 13 get_param_CFM 0 4 1313 29 OdeSliderJoint::get_param_CFM 0 1 604 0
55
inline float OdeSliderJoint::get_param_CFM(void) const;

1201 18 get_param_stop_ERP 0 4 1313 34 OdeSliderJoint::get_param_stop_ERP 0 1 605 0
60
inline float OdeSliderJoint::get_param_stop_ERP(void) const;

1202 18 get_param_stop_CFM 0 4 1313 34 OdeSliderJoint::get_param_stop_CFM 0 1 606 0
60
inline float OdeSliderJoint::get_param_stop_CFM(void) const;

1203 14 get_class_type 0 4 1313 30 OdeSliderJoint::get_class_type 0 1 607 0
55
static TypeHandle OdeSliderJoint::get_class_type(void);

1204 13 OdeSphereGeom 0 4 1314 28 OdeSphereGeom::OdeSphereGeom 0 3 608 609 610 0
149
OdeSphereGeom::OdeSphereGeom(float radius);
OdeSphereGeom::OdeSphereGeom(OdeSpace &space, float radius);
OdeSphereGeom::OdeSphereGeom(OdeGeom &geom);

1205 10 set_radius 0 4 1314 25 OdeSphereGeom::set_radius 0 1 611 491
// Filename: odeSphereGeom.I
// Created by:  joswilso (27Dec06)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
52
inline void OdeSphereGeom::set_radius(float radius);

1206 10 get_radius 0 4 1314 25 OdeSphereGeom::get_radius 0 1 612 0
51
inline float OdeSphereGeom::get_radius(void) const;

1207 15 get_point_depth 0 4 1314 30 OdeSphereGeom::get_point_depth 0 2 613 614 0
147
inline float OdeSphereGeom::get_point_depth(float x, float y, float z) const;
inline float OdeSphereGeom::get_point_depth(LPoint3f const &p) const;

1208 14 get_class_type 0 4 1314 29 OdeSphereGeom::get_class_type 0 1 615 0
54
static TypeHandle OdeSphereGeom::get_class_type(void);

1209 14 OdeTriMeshData 0 4 1315 30 OdeTriMeshData::OdeTriMeshData 0 2 616 617 202
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////

// Private copy constructor, shouldn't be copying these objects
78
OdeTriMeshData::OdeTriMeshData(NodePath const &model, bool use_normals = (0));

1210 7 destroy 0 4 1315 23 OdeTriMeshData::destroy 0 1 618 0
35
void OdeTriMeshData::destroy(void);

1211 5 write 0 6 1315 21 OdeTriMeshData::write 0 3 619 620 621 221
// INLINE void set(int data_id, void* in_data);
// INLINE void* get(int data_id);
// INLINE void get_buffer(unsigned char** buf, int* buf_len) const;
// INLINE void set_buffer(unsigned char* buf);
// INLINE void update();
91
virtual void OdeTriMeshData::write(ostream &out = (cout), unsigned int indent = (0)) const;

1212 11 write_faces 0 4 1315 27 OdeTriMeshData::write_faces 0 1 622 221
// INLINE void set(int data_id, void* in_data);
// INLINE void* get(int data_id);
// INLINE void get_buffer(unsigned char** buf, int* buf_len) const;
// INLINE void set_buffer(unsigned char* buf);
// INLINE void update();
53
void OdeTriMeshData::write_faces(ostream &out) const;

1213 14 get_class_type 0 4 1315 30 OdeTriMeshData::get_class_type 0 1 623 0
55
static TypeHandle OdeTriMeshData::get_class_type(void);

1214 14 OdeTriMeshGeom 0 4 1317 30 OdeTriMeshGeom::OdeTriMeshGeom 0 3 624 625 626 162
/* ODE_API dGeomID dCreateTriMesh(dSpaceID space, dTriMeshDataID Data, dTriCallback* Callback, dTriArrayCallback* ArrayCallback, dTriRayCallback* RayCallback); */
184
OdeTriMeshGeom::OdeTriMeshGeom(OdeTriMeshData &data);
OdeTriMeshGeom::OdeTriMeshGeom(OdeSpace &space, OdeTriMeshData &data);
OdeTriMeshGeom::OdeTriMeshGeom(OdeTriMeshGeom const &copy);

1215 7 destroy 0 4 1317 23 OdeTriMeshGeom::destroy 0 1 627 0
35
void OdeTriMeshGeom::destroy(void);

1216 17 set_tri_mesh_data 0 4 1317 33 OdeTriMeshGeom::set_tri_mesh_data 0 1 628 0
68
inline void OdeTriMeshGeom::set_tri_mesh_data(OdeTriMeshData &data);

1217 17 get_tri_mesh_data 0 4 1317 33 OdeTriMeshGeom::get_tri_mesh_data 0 1 629 0
81
inline PointerTo< OdeTriMeshData > OdeTriMeshGeom::get_tri_mesh_data(void) const;

1218 8 set_data 0 4 1317 24 OdeTriMeshGeom::set_data 0 1 630 492
// Filename: odeTriMeshGeom.I
// Created by:  joswilso (27Dec06)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
59
inline void OdeTriMeshGeom::set_data(OdeTriMeshData &data);

1219 8 get_data 0 4 1317 24 OdeTriMeshGeom::get_data 0 1 631 0
72
inline PointerTo< OdeTriMeshData > OdeTriMeshGeom::get_data(void) const;

1220 9 enable_TC 0 4 1317 25 OdeTriMeshGeom::enable_TC 0 1 632 0
66
inline void OdeTriMeshGeom::enable_TC(int geom_class, int enable);

1221 13 is_TC_enabled 0 4 1317 29 OdeTriMeshGeom::is_TC_enabled 0 1 633 0
63
inline int OdeTriMeshGeom::is_TC_enabled(int geom_class) const;

1222 14 clear_TC_cache 0 4 1317 30 OdeTriMeshGeom::clear_TC_cache 0 1 634 0
64
inline void OdeTriMeshGeom::clear_TC_cache(OdeGeom const &geom);

1223 12 get_triangle 0 4 1317 28 OdeTriMeshGeom::get_triangle 0 1 635 0
105
inline void OdeTriMeshGeom::get_triangle(int face_index, LPoint3f &v0, LPoint3f &v1, LPoint3f &v2) const;

1224 9 get_point 0 4 1317 25 OdeTriMeshGeom::get_point 0 1 636 0
82
inline LPoint3f OdeTriMeshGeom::get_point(int face_index, float u, float v) const;

1225 17 get_num_triangles 0 4 1317 33 OdeTriMeshGeom::get_num_triangles 0 1 637 0
57
inline int OdeTriMeshGeom::get_num_triangles(void) const;

1226 14 get_class_type 0 4 1317 30 OdeTriMeshGeom::get_class_type 0 1 638 0
55
static TypeHandle OdeTriMeshGeom::get_class_type(void);

1227 17 OdeUniversalJoint 0 4 1318 36 OdeUniversalJoint::OdeUniversalJoint 0 2 639 640 0
137
OdeUniversalJoint::OdeUniversalJoint(OdeWorld &world);
OdeUniversalJoint::OdeUniversalJoint(OdeWorld &world, OdeJointGroup &joint_group);

1228 10 set_anchor 0 4 1318 29 OdeUniversalJoint::set_anchor 0 2 641 642 495
// Filename: odeUniversalJoint.I
// Created by:  joswilso (27Dec06)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
138
inline void OdeUniversalJoint::set_anchor(float x, float y, float z);
inline void OdeUniversalJoint::set_anchor(LVecBase3f const &anchor);

1229 9 set_axis1 0 4 1318 28 OdeUniversalJoint::set_axis1 0 2 643 644 0
134
inline void OdeUniversalJoint::set_axis1(float x, float y, float z);
inline void OdeUniversalJoint::set_axis1(LVecBase3f const &axis);

1230 9 set_axis2 0 4 1318 28 OdeUniversalJoint::set_axis2 0 2 645 646 0
134
inline void OdeUniversalJoint::set_axis2(float x, float y, float z);
inline void OdeUniversalJoint::set_axis2(LVecBase3f const &axis);

1231 11 add_torques 0 4 1318 30 OdeUniversalJoint::add_torques 0 1 647 0
73
inline void OdeUniversalJoint::add_torques(float torque1, float torque2);

1232 10 get_anchor 0 4 1318 29 OdeUniversalJoint::get_anchor 0 1 648 0
60
inline LVecBase3f OdeUniversalJoint::get_anchor(void) const;

1233 11 get_anchor2 0 4 1318 30 OdeUniversalJoint::get_anchor2 0 1 649 0
61
inline LVecBase3f OdeUniversalJoint::get_anchor2(void) const;

1234 9 get_axis1 0 4 1318 28 OdeUniversalJoint::get_axis1 0 1 650 0
59
inline LVecBase3f OdeUniversalJoint::get_axis1(void) const;

1235 9 get_axis2 0 4 1318 28 OdeUniversalJoint::get_axis2 0 1 651 0
59
inline LVecBase3f OdeUniversalJoint::get_axis2(void) const;

1236 10 get_angle1 0 4 1318 29 OdeUniversalJoint::get_angle1 0 1 652 0
55
inline float OdeUniversalJoint::get_angle1(void) const;

1237 10 get_angle2 0 4 1318 29 OdeUniversalJoint::get_angle2 0 1 653 0
55
inline float OdeUniversalJoint::get_angle2(void) const;

1238 15 get_angle1_rate 0 4 1318 34 OdeUniversalJoint::get_angle1_rate 0 1 654 0
60
inline float OdeUniversalJoint::get_angle1_rate(void) const;

1239 15 get_angle2_rate 0 4 1318 34 OdeUniversalJoint::get_angle2_rate 0 1 655 0
60
inline float OdeUniversalJoint::get_angle2_rate(void) const;

1240 17 set_param_lo_stop 0 4 1318 36 OdeUniversalJoint::set_param_lo_stop 0 1 656 0
70
inline void OdeUniversalJoint::set_param_lo_stop(int axis, float val);

1241 17 set_param_hi_stop 0 4 1318 36 OdeUniversalJoint::set_param_hi_stop 0 1 657 0
70
inline void OdeUniversalJoint::set_param_hi_stop(int axis, float val);

1242 13 set_param_vel 0 4 1318 32 OdeUniversalJoint::set_param_vel 0 1 658 0
66
inline void OdeUniversalJoint::set_param_vel(int axis, float val);

1243 15 set_param_f_max 0 4 1318 34 OdeUniversalJoint::set_param_f_max 0 1 659 0
68
inline void OdeUniversalJoint::set_param_f_max(int axis, float val);

1244 22 set_param_fudge_factor 0 4 1318 41 OdeUniversalJoint::set_param_fudge_factor 0 1 660 0
75
inline void OdeUniversalJoint::set_param_fudge_factor(int axis, float val);

1245 16 set_param_bounce 0 4 1318 35 OdeUniversalJoint::set_param_bounce 0 1 661 0
69
inline void OdeUniversalJoint::set_param_bounce(int axis, float val);

1246 13 set_param_CFM 0 4 1318 32 OdeUniversalJoint::set_param_CFM 0 1 662 0
66
inline void OdeUniversalJoint::set_param_CFM(int axis, float val);

1247 18 set_param_stop_ERP 0 4 1318 37 OdeUniversalJoint::set_param_stop_ERP 0 1 663 0
71
inline void OdeUniversalJoint::set_param_stop_ERP(int axis, float val);

1248 18 set_param_stop_CFM 0 4 1318 37 OdeUniversalJoint::set_param_stop_CFM 0 1 664 0
71
inline void OdeUniversalJoint::set_param_stop_CFM(int axis, float val);

1249 17 get_param_lo_stop 0 4 1318 36 OdeUniversalJoint::get_param_lo_stop 0 1 665 0
66
inline float OdeUniversalJoint::get_param_lo_stop(int axis) const;

1250 17 get_param_hi_stop 0 4 1318 36 OdeUniversalJoint::get_param_hi_stop 0 1 666 0
66
inline float OdeUniversalJoint::get_param_hi_stop(int axis) const;

1251 13 get_param_vel 0 4 1318 32 OdeUniversalJoint::get_param_vel 0 1 667 0
62
inline float OdeUniversalJoint::get_param_vel(int axis) const;

1252 15 get_param_f_max 0 4 1318 34 OdeUniversalJoint::get_param_f_max 0 1 668 0
64
inline float OdeUniversalJoint::get_param_f_max(int axis) const;

1253 22 get_param_fudge_factor 0 4 1318 41 OdeUniversalJoint::get_param_fudge_factor 0 1 669 0
71
inline float OdeUniversalJoint::get_param_fudge_factor(int axis) const;

1254 16 get_param_bounce 0 4 1318 35 OdeUniversalJoint::get_param_bounce 0 1 670 0
65
inline float OdeUniversalJoint::get_param_bounce(int axis) const;

1255 13 get_param_CFM 0 4 1318 32 OdeUniversalJoint::get_param_CFM 0 1 671 0
62
inline float OdeUniversalJoint::get_param_CFM(int axis) const;

1256 18 get_param_stop_ERP 0 4 1318 37 OdeUniversalJoint::get_param_stop_ERP 0 1 672 0
67
inline float OdeUniversalJoint::get_param_stop_ERP(int axis) const;

1257 18 get_param_stop_CFM 0 4 1318 37 OdeUniversalJoint::get_param_stop_CFM 0 1 673 0
67
inline float OdeUniversalJoint::get_param_stop_CFM(int axis) const;

1258 14 get_class_type 0 4 1318 33 OdeUniversalJoint::get_class_type 0 1 674 0
58
static TypeHandle OdeUniversalJoint::get_class_type(void);

1259 20 get_connecting_joint 0 4 1319 29 OdeUtil::get_connecting_joint 0 1 675 283
////////////////////////////////////////////////////////////////////
//     Function: OdeUtil::get_connecting_joint
//       Access: Public, Static
//  Description: Returns the joint that connects the given bodies.
////////////////////////////////////////////////////////////////////
90
static OdeJoint OdeUtil::get_connecting_joint(OdeBody const &body1, OdeBody const &body2);

1260 25 get_connecting_joint_list 0 4 1319 34 OdeUtil::get_connecting_joint_list 0 1 676 319
////////////////////////////////////////////////////////////////////
//     Function: OdeUtil::get_connecting_joint_list
//       Access: Public, Static
//  Description: Returns a collection of joints connecting the
//               specified bodies.
////////////////////////////////////////////////////////////////////
105
static OdeJointCollection OdeUtil::get_connecting_joint_list(OdeBody const &body1, OdeBody const &body2);

1261 13 are_connected 0 4 1319 22 OdeUtil::are_connected 0 1 677 320
////////////////////////////////////////////////////////////////////
//     Function: OdeUtil::are_connected
//       Access: Public, Static
//  Description: Returns 1 if the given bodies are connected
//               by a joint, returns 0 otherwise.
////////////////////////////////////////////////////////////////////
78
static int OdeUtil::are_connected(OdeBody const &body1, OdeBody const &body2);

1262 23 are_connected_excluding 0 4 1319 32 OdeUtil::are_connected_excluding 0 1 678 733
////////////////////////////////////////////////////////////////////
//     Function: OdeUtil::are_connected_excluding
//       Access: Public, Static
//  Description: Returns 1 if the given bodies are connected
//               by a joint that does not match the given
//               joint_type, returns 0 otherwise. This is useful
//               for deciding whether to add contact joints between
//               two bodies: if they are already connected by
//               non-contact joints then it may not be appropriate
//               to add contacts, however it is okay to add more
//               contact between bodies that already have contacts.
////////////////////////////////////////////////////////////////////
110
static int OdeUtil::are_connected_excluding(OdeBody const &body1, OdeBody const &body2, int const joint_type);

1263 7 collide 0 4 1319 16 OdeUtil::collide 0 2 679 680 392
////////////////////////////////////////////////////////////////////
//     Function: OdeUtil::collide
//       Access: Public, Static
//  Description: Given two geometry objects that potentially touch
//               (geom1 and geom2), generate contact information
//               for them. Returns an OdeCollisionEntry.
////////////////////////////////////////////////////////////////////
137
static PointerTo< OdeCollisionEntry > OdeUtil::collide(OdeGeom const &geom1, OdeGeom const &geom2, short int const max_contacts = (150));

1264 8 collide2 0 4 1319 17 OdeUtil::collide2 0 1 681 0
108
static int OdeUtil::collide2(OdeGeom const &geom1, OdeGeom const &geom2, PyObject *arg, PyObject *callback);

1265 13 space_to_geom 0 4 1319 22 OdeUtil::space_to_geom 0 1 682 0
61
static OdeGeom OdeUtil::space_to_geom(OdeSpace const &space);

1266 12 get_infinity 0 4 1319 21 OdeUtil::get_infinity 0 1 683 73
// RAU we can't access OC_infinity as constants are not exposed in python
41
static float OdeUtil::get_infinity(void);

1267 13 rand_get_seed 0 4 1319 22 OdeUtil::rand_get_seed 0 1 684 0
40
static int OdeUtil::rand_get_seed(void);

1268 13 rand_set_seed 0 4 1319 22 OdeUtil::rand_set_seed 0 1 685 0
42
static void OdeUtil::rand_set_seed(int s);

1269 8 ~OdeUtil 0 4 1319 17 OdeUtil::~OdeUtil 0 0 0
24
OdeUtil::~OdeUtil(void);

685
1 14 Dtool_sTqOSgW9 0 7 10 1320 0 14 Dtool_sTqOSgW9 0 0 
2 14 Dtool_sTqOK2Lv 0 7 10 1320 0 14 Dtool_sTqOK2Lv 0 1 4 copy 1 1321  
3 14 Dtool_sTqOQY8E 0 4 11 1323 0 14 Dtool_sTqOQY8E 0 1 4 this 3 1320  
4 14 Dtool_sTqOqrmt 0 6 12 1324 0 14 Dtool_sTqOqrmt 942 // Filename: odeWorld.I
// Created by:  joswilso (27Dec06)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: OdeWorld::is_empty
//       Access: Published
//  Description: Returns true if the ID is 0, meaning the OdeWorld
//               does not point to a valid world. It is an error to
//               call a method on an empty world.
//               Note that an empty OdeWorld also evaluates to False.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1321  
5 14 Dtool_sTqOeICR 0 6 13 1325 0 14 Dtool_sTqOeICR 248 ////////////////////////////////////////////////////////////////////
//     Function: OdeWorld::get_id
//       Access: Published
//  Description: Returns the underlying dWorldID.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1321  
6 14 Dtool_sTqOpAda 0 4 14 1323 0 14 Dtool_sTqOpAda 0 2 4 this 3 1320  3 vec 1 1326  
7 14 Dtool_sTqOenQT 0 4 14 1323 0 14 Dtool_sTqOenQT 0 4 4 this 3 1320  1 x 1 1329  1 y 1 1329  1 z 1 1329  
8 14 Dtool_sTqO7r7A 0 4 15 1323 0 14 Dtool_sTqO7r7A 0 2 4 this 3 1320  3 erp 1 1329  
9 14 Dtool_sTqOInbQ 0 4 16 1323 0 14 Dtool_sTqOInbQ 0 2 4 this 3 1320  3 cfm 1 1329  
10 14 Dtool_sTqOxVK8 0 4 17 1323 0 14 Dtool_sTqOxVK8 0 2 4 this 3 1320  3 num 1 1330  
11 14 Dtool_sTqOg82m 0 4 18 1323 0 14 Dtool_sTqOg82m 0 2 4 this 3 1320  15 over_relaxation 1 1329  
12 14 Dtool_sTqOJiHA 0 4 19 1323 0 14 Dtool_sTqOJiHA 0 2 4 this 3 1320  3 vel 1 1329  
13 14 Dtool_sTqO4p5o 0 4 20 1323 0 14 Dtool_sTqO4p5o 0 2 4 this 3 1320  5 depth 1 1329  
14 14 Dtool_sTqOktT6 0 4 21 1323 0 14 Dtool_sTqOktT6 0 2 4 this 3 1320  16 linear_threshold 1 1329  
15 14 Dtool_sTqOP717 0 4 22 1323 0 14 Dtool_sTqOP717 0 2 4 this 3 1320  17 angular_threshold 1 1329  
16 14 Dtool_sTqOfJpy 0 4 23 1323 0 14 Dtool_sTqOfJpy 0 2 4 this 3 1320  5 steps 1 1330  
17 14 Dtool_sTqO9LLJ 0 4 24 1323 0 14 Dtool_sTqO9LLJ 0 2 4 this 3 1320  4 time 1 1329  
18 14 Dtool_sTqOt_qL 0 4 25 1323 0 14 Dtool_sTqOt_qL 0 2 4 this 3 1320  15 do_auto_disable 1 1330  
19 14 Dtool_sTqO7FBj 0 7 26 1331 0 14 Dtool_sTqO7FBj 0 1 4 this 3 1321  
20 14 Dtool_sTqO9H6U 0 6 27 1329 0 14 Dtool_sTqO9H6U 0 1 4 this 3 1321  
21 14 Dtool_sTqOo7bk 0 6 28 1329 0 14 Dtool_sTqOo7bk 0 1 4 this 3 1321  
22 14 Dtool_sTqOeLjK 0 6 29 1330 0 14 Dtool_sTqOeLjK 0 1 4 this 3 1321  
23 14 Dtool_sTqOOhj4 0 6 30 1329 0 14 Dtool_sTqOOhj4 0 1 4 this 3 1321  
24 14 Dtool_sTqO8R2j 0 6 31 1329 0 14 Dtool_sTqO8R2j 0 1 4 this 3 1321  
25 14 Dtool_sTqOdaT6 0 6 32 1329 0 14 Dtool_sTqOdaT6 0 1 4 this 3 1321  
26 14 Dtool_sTqO47sl 0 6 33 1329 0 14 Dtool_sTqO47sl 0 1 4 this 3 1321  
27 14 Dtool_sTqOm9NF 0 6 34 1329 0 14 Dtool_sTqOm9NF 0 1 4 this 3 1321  
28 14 Dtool_sTqOvFAB 0 6 35 1330 0 14 Dtool_sTqOvFAB 0 1 4 this 3 1321  
29 14 Dtool_sTqO56ft 0 6 36 1329 0 14 Dtool_sTqO56ft 0 1 4 this 3 1321  
30 14 Dtool_sTqOw4OX 0 6 37 1330 0 14 Dtool_sTqOw4OX 0 1 4 this 3 1321  
31 14 Dtool_sTqOrA8s 0 7 38 1331 0 14 Dtool_sTqOrA8s 0 3 4 this 3 1320  8 stepsize 1 1329  7 impulse 1 1326  
32 14 Dtool_sTqOTN6b 0 7 38 1331 0 14 Dtool_sTqOTN6b 0 5 4 this 3 1320  8 stepsize 1 1329  2 ix 1 1329  2 iy 1 1329  2 iz 1 1329  
33 14 Dtool_sTqOAQKf 0 4 39 1323 0 14 Dtool_sTqOAQKf 0 2 4 this 3 1320  8 stepsize 1 1329  
34 14 Dtool_sTqOSBA1 0 4 40 1323 0 14 Dtool_sTqOSBA1 0 2 4 this 3 1320  8 stepsize 1 1329  
35 14 Dtool_sTqOYsYo 0 6 41 1330 0 14 Dtool_sTqOYsYo 0 2 4 this 3 1321  5 other 1 1321  
36 14 Dtool_sTqOmm6V 0 4 42 1323 0 14 Dtool_sTqOmm6V 0 2 4 this 3 1320  12 num_surfaces 1 1332  
37 14 Dtool_sTqOCIbf 0 4 43 1323 0 14 Dtool_sTqOCIbf 55 //void assign_surface_body(OdeBody& body, int surface); 3 4 this 3 1320  4 body 1 1333  7 surface 1 1330  
38 14 Dtool_sTqO3lGk 0 4 44 1323 0 14 Dtool_sTqO3lGk 55 //void assign_surface_body(OdeBody& body, int surface); 10 4 this 3 1320  4 pos1 1 1332  4 pos2 1 1332  2 mu 1 1329  6 bounce 1 1329  10 bounce_vel 1 1329  8 soft_erp 1 1329  8 soft_cfm 1 1329  4 slip 1 1329  6 dampen 1 1329  
39 14 Dtool_sTqOOfqx 0 6 45 1329 0 14 Dtool_sTqOOfqx 0 3 4 this 3 1320  2 dt 1 1329  4 body 1 1333  
40 14 Dtool_sTqO05DB 0 7 47 1335 0 14 Dtool_sTqO05DB 0 0 
41 14 Dtool_sTqO_scl 0 6 46 1324 0 14 Dtool_sTqO_scl 0 1 4 this 3 1321  
42 14 Dtool_sTqO8kx4 0 7 49 1336 0 14 Dtool_sTqO8kx4 0 0 
43 14 Dtool_sTqO7Etj 0 4 50 1323 0 14 Dtool_sTqO7Etj 0 1 4 this 3 1336  
44 14 Dtool_sTqO0a67 0 6 51 1339 0 14 Dtool_sTqO0a67 491 // Filename: odeJointGroup.I
// Created by:  joswilso (27Dec06)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
//////////////////////////////////////////////////////////////////// 1 4 this 3 1337  
45 14 Dtool_sTqO9_fM 0 4 52 1323 0 14 Dtool_sTqO9_fM 0 1 4 this 3 1337  
46 14 Dtool_sTqOoK_U 0 6 53 1330 0 14 Dtool_sTqOoK_U 0 2 4 this 3 1337  5 other 1 1337  
47 14 Dtool_sTqO436b 0 7 54 1335 0 14 Dtool_sTqO436b 0 0 
48 14 Dtool_sTqOh5ao 0 7 57 1344 0 14 Dtool_sTqOh5ao 0 1 4 this 3 1342  
49 14 Dtool_sTqOr5SZ 0 7 58 1344 0 14 Dtool_sTqOr5SZ 0 1 4 this 3 1342  
50 14 Dtool_sTqOjUNA 0 7 59 1344 0 14 Dtool_sTqOjUNA 0 1 4 this 3 1342  
51 14 Dtool_sTqObQNc 0 7 60 1344 0 14 Dtool_sTqObQNc 0 1 4 this 3 1342  
52 14 Dtool_sTqOIKi8 0 4 64 1323 0 14 Dtool_sTqOIKi8 0 1 4 this 3 1345  
53 14 Dtool_sTqOhYNl 0 6 65 1324 0 14 Dtool_sTqOhYNl 942 // Filename: odeJoint.I
// Created by:  joswilso (27Dec06)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: OdeJoint::is_empty
//       Access: Published
//  Description: Returns true if the ID is 0, meaning the OdeJoint
//               does not point to a valid joint. It is an error to
//               call a method on an empty joint.
//               Note that an empty OdeJoint also evaluates to False.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1346  
54 14 Dtool_sTqOL6oI 0 6 66 1348 0 14 Dtool_sTqOL6oI 248 ////////////////////////////////////////////////////////////////////
//     Function: OdeJoint::get_id
//       Access: Published
//  Description: Returns the underlying dJointID.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1346  
55 14 Dtool_sTqOmNmo 0 6 67 1330 0 14 Dtool_sTqOmNmo 30 /* INLINE void *get_data(); */ 1 4 this 3 1346  
56 14 Dtool_sTqO3H_I 0 7 68 1333 0 14 Dtool_sTqO3H_I 0 2 4 this 3 1346  5 index 1 1330  
57 14 Dtool_sTqONoSO 0 4 69 1323 0 14 Dtool_sTqONoSO 0 2 4 this 3 1345  6 param0 0 1349  
58 14 Dtool_sTqOvJTj 0 4 69 1323 0 14 Dtool_sTqOvJTj 0 2 4 this 3 1345  4 flag 1 1324  
59 14 Dtool_sTqOLVlu 0 4 69 1323 0 14 Dtool_sTqOLVlu 0 1 4 this 3 1345  
60 14 Dtool_sTqO7Pqt 0 6 70 1349 0 14 Dtool_sTqO7Pqt 0 1 4 this 3 1345  
61 14 Dtool_sTqOmIqs 0 4 71 1323 0 14 Dtool_sTqOmIqs 0 3 4 this 3 1345  5 body1 1 1350  5 body2 1 1350  
62 14 Dtool_sTqO65Uw 0 4 72 1323 0 14 Dtool_sTqO65Uw 430 ////////////////////////////////////////////////////////////////////
//     Function: OdeJoint::attach_bodies
//       Access: Published
//  Description: Attaches two OdeBody objects to this joint.
//               Order is important.
//               Consider using the OdeJoint::attach extension
//               function if you're using the Python interface.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1345  5 body1 1 1350  5 body2 1 1350  
63 14 Dtool_sTqO999A 0 4 73 1323 0 14 Dtool_sTqO999A 511 ////////////////////////////////////////////////////////////////////
//     Function: OdeJoint::attach_body
//       Access: Published
//  Description: Attaches a single OdeBody to this joint at the
//               specified index (0 or 1).  The other index will be 
//               set to the environment (null).
//               Consider using the OdeJoint::attach extension
//               function if you're using the Python interface.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1345  4 body 1 1350  5 index 1 1330  
64 14 Dtool_sTqO3ezo 0 4 74 1323 0 14 Dtool_sTqO3ezo 0 1 4 this 3 1345  
65 14 Dtool_sTqOm_hW 0 4 75 1323 0 14 Dtool_sTqOm_hW 0 3 4 this 3 1346  3 out 1 1352  6 indent 1 1354  
66 14 Dtool_sTqOFaTp 0 4 75 1323 0 14 Dtool_sTqOFaTp 0 2 4 this 3 1346  3 out 1 1352  
67 14 Dtool_sTqO7io7 0 4 75 1323 0 14 Dtool_sTqO7io7 0 1 4 this 3 1346  
68 14 Dtool_sTqOakwR 0 6 76 1330 0 14 Dtool_sTqOakwR 0 2 4 this 3 1346  5 other 1 1346  
69 14 Dtool_sTqO72Nf 0 6 77 1324 0 14 Dtool_sTqO72Nf 0 2 4 this 3 1346  5 other 1 1346  
70 14 Dtool_sTqOu__z 0 6 79 1355 0 14 Dtool_sTqOu__z 0 1 4 this 3 1346  
71 14 Dtool_sTqOtRu7 0 7 80 1357 0 14 Dtool_sTqOtRu7 0 1 4 this 3 1346  
72 14 Dtool_sTqORgNH 0 7 81 1358 0 14 Dtool_sTqORgNH 0 1 4 this 3 1346  
73 14 Dtool_sTqOo_8D 0 7 82 1359 0 14 Dtool_sTqOo_8D 0 1 4 this 3 1346  
74 14 Dtool_sTqO6AOV 0 7 83 1360 0 14 Dtool_sTqO6AOV 0 1 4 this 3 1346  
75 14 Dtool_sTqOz_o3 0 7 84 1361 0 14 Dtool_sTqOz_o3 0 1 4 this 3 1346  
76 14 Dtool_sTqOr_jT 0 7 85 1362 0 14 Dtool_sTqOr_jT 0 1 4 this 3 1346  
77 14 Dtool_sTqOxLC_ 0 7 86 1363 0 14 Dtool_sTqOxLC_ 0 1 4 this 3 1346  
78 14 Dtool_sTqOxzoZ 0 7 87 1364 0 14 Dtool_sTqOxzoZ 0 1 4 this 3 1346  
79 14 Dtool_sTqO_QxA 0 7 88 1365 0 14 Dtool_sTqO_QxA 0 1 4 this 3 1346  
80 14 Dtool_sTqO8ILs 0 7 89 1366 0 14 Dtool_sTqO8ILs 0 1 4 this 3 1346  
81 14 Dtool_sTqOTcVs 0 7 90 1367 0 14 Dtool_sTqOTcVs 0 1 4 this 3 1346  
82 14 Dtool_sTqOMrp4 0 7 91 1335 0 14 Dtool_sTqOMrp4 0 0 
83 14 Dtool_sTqOqeCd 0 6 78 1324 0 14 Dtool_sTqOqeCd 0 1 4 this 3 1346  
84 14 Dtool_sTqOX6_b 0 7 93 1365 0 14 Dtool_sTqOX6_b 0 1 5 world 1 1320  
85 14 Dtool_sTqO2TWl 0 7 93 1365 0 14 Dtool_sTqO2TWl 0 2 5 world 1 1320  11 joint_group 1 1336  
86 14 Dtool_sTqO3gnC 0 4 94 1323 0 14 Dtool_sTqO3gnC 492 // Filename: odeAMotorJoint.I
// Created by:  joswilso (27Dec06)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
//////////////////////////////////////////////////////////////////// 2 4 this 3 1365  3 num 1 1330  
87 14 Dtool_sTqOb2u3 0 4 95 1323 0 14 Dtool_sTqOb2u3 0 4 4 this 3 1365  4 anum 1 1330  3 rel 1 1330  4 axis 1 1326  
88 14 Dtool_sTqOrAqW 0 4 95 1323 0 14 Dtool_sTqOrAqW 0 6 4 this 3 1365  4 anum 1 1330  3 rel 1 1330  1 x 1 1329  1 y 1 1329  1 z 1 1329  
89 14 Dtool_sTqOU3BV 0 4 96 1323 0 14 Dtool_sTqOU3BV 0 3 4 this 3 1365  4 anum 1 1330  5 angle 1 1329  
90 14 Dtool_sTqOGG1t 0 4 97 1323 0 14 Dtool_sTqOGG1t 0 2 4 this 3 1365  4 mode 1 1330  
91 14 Dtool_sTqOJBrb 0 4 98 1323 0 14 Dtool_sTqOJBrb 0 4 4 this 3 1365  7 torque1 1 1329  7 torque2 1 1329  7 torque3 1 1329  
92 14 Dtool_sTqOavI9 0 6 99 1330 0 14 Dtool_sTqOavI9 0 1 4 this 3 1368  
93 14 Dtool_sTqOCTYA 0 7 100 1331 0 14 Dtool_sTqOCTYA 0 2 4 this 3 1368  4 anum 1 1330  
94 14 Dtool_sTqO1zd3 0 6 101 1330 0 14 Dtool_sTqO1zd3 0 2 4 this 3 1368  4 anum 1 1330  
95 14 Dtool_sTqO3tTR 0 6 102 1329 0 14 Dtool_sTqO3tTR 0 2 4 this 3 1368  4 anum 1 1330  
96 14 Dtool_sTqOM44a 0 6 103 1329 0 14 Dtool_sTqOM44a 0 2 4 this 3 1368  4 anum 1 1330  
97 14 Dtool_sTqO5NLF 0 6 104 1330 0 14 Dtool_sTqO5NLF 0 1 4 this 3 1368  
98 14 Dtool_sTqOl7N0 0 4 105 1323 0 14 Dtool_sTqOl7N0 0 3 4 this 3 1365  4 axis 1 1330  3 val 1 1329  
99 14 Dtool_sTqOg82A 0 4 106 1323 0 14 Dtool_sTqOg82A 0 3 4 this 3 1365  4 axis 1 1330  3 val 1 1329  
100 14 Dtool_sTqOtNYF 0 4 107 1323 0 14 Dtool_sTqOtNYF 0 3 4 this 3 1365  4 axis 1 1330  3 val 1 1329  
101 14 Dtool_sTqOEaVZ 0 4 108 1323 0 14 Dtool_sTqOEaVZ 0 3 4 this 3 1365  4 axis 1 1330  3 val 1 1329  
102 14 Dtool_sTqO8_bG 0 4 109 1323 0 14 Dtool_sTqO8_bG 0 3 4 this 3 1365  4 axis 1 1330  3 val 1 1329  
103 14 Dtool_sTqOETYh 0 4 110 1323 0 14 Dtool_sTqOETYh 0 3 4 this 3 1365  4 axis 1 1330  3 val 1 1329  
104 14 Dtool_sTqO1hVS 0 4 111 1323 0 14 Dtool_sTqO1hVS 0 3 4 this 3 1365  4 axis 1 1330  3 val 1 1329  
105 14 Dtool_sTqOsUe9 0 4 112 1323 0 14 Dtool_sTqOsUe9 0 3 4 this 3 1365  4 axis 1 1330  3 val 1 1329  
106 14 Dtool_sTqOM5Uy 0 4 113 1323 0 14 Dtool_sTqOM5Uy 0 3 4 this 3 1365  4 axis 1 1330  3 val 1 1329  
107 14 Dtool_sTqObhmS 0 6 114 1329 0 14 Dtool_sTqObhmS 0 2 4 this 3 1368  4 axis 1 1330  
108 14 Dtool_sTqOHePf 0 6 115 1329 0 14 Dtool_sTqOHePf 0 2 4 this 3 1368  4 axis 1 1330  
109 14 Dtool_sTqOo9Pa 0 6 116 1329 0 14 Dtool_sTqOo9Pa 0 2 4 this 3 1368  4 axis 1 1330  
110 14 Dtool_sTqOiHpV 0 6 117 1329 0 14 Dtool_sTqOiHpV 0 2 4 this 3 1368  4 axis 1 1330  
111 14 Dtool_sTqOhLw9 0 6 118 1329 0 14 Dtool_sTqOhLw9 0 2 4 this 3 1368  4 axis 1 1330  
112 14 Dtool_sTqOTulD 0 6 119 1329 0 14 Dtool_sTqOTulD 0 2 4 this 3 1368  4 axis 1 1330  
113 14 Dtool_sTqOgoLn 0 6 120 1329 0 14 Dtool_sTqOgoLn 0 2 4 this 3 1368  4 axis 1 1330  
114 14 Dtool_sTqO4Jvh 0 6 121 1329 0 14 Dtool_sTqO4Jvh 0 2 4 this 3 1368  4 axis 1 1330  
115 14 Dtool_sTqOzenW 0 6 122 1329 0 14 Dtool_sTqOzenW 0 2 4 this 3 1368  4 axis 1 1330  
116 14 Dtool_sTqOQJeM 0 7 123 1335 0 14 Dtool_sTqOQJeM 0 0 
117 14 Dtool_sTqO0ou4 0 7 125 1357 0 14 Dtool_sTqO0ou4 0 1 5 world 1 1320  
118 14 Dtool_sTqOkXuP 0 7 125 1357 0 14 Dtool_sTqOkXuP 0 2 5 world 1 1320  11 joint_group 1 1336  
119 14 Dtool_sTqOqXP7 0 4 126 1323 0 14 Dtool_sTqOqXP7 0 2 4 this 3 1357  6 anchor 1 1326  
120 14 Dtool_sTqO7e9y 0 4 126 1323 0 14 Dtool_sTqO7e9y 490 // Filename: odeBallJoint.I
// Created by:  joswilso (27Dec06)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
//////////////////////////////////////////////////////////////////// 4 4 this 3 1357  1 x 1 1329  1 y 1 1329  1 z 1 1329  
121 14 Dtool_sTqO1Rm1 0 4 127 1323 0 14 Dtool_sTqO1Rm1 0 2 4 this 3 1357  6 anchor 1 1326  
122 14 Dtool_sTqOScGt 0 4 127 1323 0 14 Dtool_sTqOScGt 0 4 4 this 3 1357  1 x 1 1329  1 y 1 1329  1 z 1 1329  
123 14 Dtool_sTqOPwkP 0 7 128 1331 0 14 Dtool_sTqOPwkP 0 1 4 this 3 1370  
124 14 Dtool_sTqOK2IC 0 7 129 1331 0 14 Dtool_sTqOK2IC 0 1 4 this 3 1370  
125 14 Dtool_sTqOMY4I 0 7 130 1335 0 14 Dtool_sTqOMY4I 0 0 
126 14 Dtool_sTqOl7RU 0 7 133 1372 0 14 Dtool_sTqOl7RU 0 0 
127 14 Dtool_sTqOFvRR 0 7 133 1372 0 14 Dtool_sTqOFvRR 0 1 4 copy 1 1373  
128 14 Dtool_sTqO64Kq 0 6 134 1330 0 14 Dtool_sTqO64Kq 485 // Filename: odeMass.I
// Created by:  joswilso (27Dec06)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
//////////////////////////////////////////////////////////////////// 1 4 this 3 1372  
129 14 Dtool_sTqOoBsr 0 4 135 1323 0 14 Dtool_sTqOoBsr 0 1 4 this 3 1372  
130 14 Dtool_sTqOz44c 0 4 136 1323 0 14 Dtool_sTqOz44c 0 4 4 this 3 1372  7 themass 1 1329  6 center 1 1326  1 r 1 1375  
131 14 Dtool_sTqOKsYE 0 4 136 1323 0 14 Dtool_sTqOKsYE 0 11 4 this 3 1372  7 themass 1 1329  3 cgx 1 1329  3 cgy 1 1329  3 cgz 1 1329  3 I11 1 1329  3 I22 1 1329  3 I33 1 1329  3 I12 1 1329  3 I13 1 1329  3 I23 1 1329  
132 14 Dtool_sTqO0Nut 0 4 137 1323 0 14 Dtool_sTqO0Nut 0 3 4 this 3 1372  7 density 1 1329  6 radius 1 1329  
133 14 Dtool_sTqOv8vI 0 4 138 1323 0 14 Dtool_sTqOv8vI 0 3 4 this 3 1372  10 total_mass 1 1329  6 radius 1 1329  
134 14 Dtool_sTqOoYEB 0 4 139 1323 0 14 Dtool_sTqOoYEB 0 5 4 this 3 1372  7 density 1 1329  9 direction 1 1330  6 radius 1 1329  6 length 1 1329  
135 14 Dtool_sTqOHNH7 0 4 140 1323 0 14 Dtool_sTqOHNH7 0 5 4 this 3 1372  10 total_mass 1 1329  9 direction 1 1330  6 radius 1 1329  6 length 1 1329  
136 14 Dtool_sTqOBMGT 0 4 141 1323 0 14 Dtool_sTqOBMGT 0 5 4 this 3 1372  7 density 1 1329  9 direction 1 1330  6 radius 1 1329  6 length 1 1329  
137 14 Dtool_sTqOJK4T 0 4 142 1323 0 14 Dtool_sTqOJK4T 0 5 4 this 3 1372  10 total_mass 1 1329  9 direction 1 1330  6 radius 1 1329  6 length 1 1329  
138 14 Dtool_sTqOC9N1 0 4 143 1323 0 14 Dtool_sTqOC9N1 0 3 4 this 3 1372  7 density 1 1329  4 size 1 1326  
139 14 Dtool_sTqOhh5g 0 4 143 1323 0 14 Dtool_sTqOhh5g 0 5 4 this 3 1372  7 density 1 1329  2 lx 1 1329  2 ly 1 1329  2 lz 1 1329  
140 14 Dtool_sTqOmp5A 0 4 144 1323 0 14 Dtool_sTqOmp5A 0 3 4 this 3 1372  10 total_mass 1 1329  4 size 1 1326  
141 14 Dtool_sTqO9XXw 0 4 144 1323 0 14 Dtool_sTqO9XXw 0 5 4 this 3 1372  10 total_mass 1 1329  2 lx 1 1329  2 ly 1 1329  2 lz 1 1329  
142 14 Dtool_sTqOPVcX 0 4 145 1323 0 14 Dtool_sTqOPVcX 0 2 4 this 3 1372  7 newmass 1 1329  
143 14 Dtool_sTqOxBsQ 0 4 146 1323 0 14 Dtool_sTqOxBsQ 0 2 4 this 3 1372  3 pos 1 1326  
144 14 Dtool_sTqOXdfG 0 4 146 1323 0 14 Dtool_sTqOXdfG 0 4 4 this 3 1372  1 x 1 1329  1 y 1 1329  1 z 1 1329  
145 14 Dtool_sTqO89Mg 0 4 147 1323 0 14 Dtool_sTqO89Mg 0 2 4 this 3 1372  1 r 1 1375  
146 14 Dtool_sTqOtlWU 0 4 148 1323 0 14 Dtool_sTqOtlWU 0 2 4 this 3 1372  5 other 1 1372  
147 14 Dtool_sTqOTidF 0 6 149 1329 0 14 Dtool_sTqOTidF 0 1 4 this 3 1373  
148 14 Dtool_sTqOz_eX 0 7 150 1379 0 14 Dtool_sTqOz_eX 0 1 4 this 3 1373  
149 14 Dtool_sTqO63xk 0 7 151 1380 0 14 Dtool_sTqO63xk 0 1 4 this 3 1373  
150 14 Dtool_sTqODs9v 0 4 152 1323 0 14 Dtool_sTqODs9v 0 3 4 this 3 1373  3 out 1 1352  6 indent 1 1354  
151 14 Dtool_sTqO1JlI 0 4 152 1323 0 14 Dtool_sTqO1JlI 0 2 4 this 3 1373  3 out 1 1352  
152 14 Dtool_sTqO39NP 0 4 152 1323 0 14 Dtool_sTqO39NP 0 1 4 this 3 1373  
153 14 Dtool_sTqOAuG7 0 7 153 1335 0 14 Dtool_sTqOAuG7 0 0 
154 14 Dtool_sTqOUz7M 0 7 155 1333 0 14 Dtool_sTqOUz7M 0 1 5 world 1 1320  
155 14 Dtool_sTqOWmXm 0 4 156 1323 0 14 Dtool_sTqOWmXm 0 1 4 this 3 1333  
156 14 Dtool_sTqOu8oN 0 6 157 1324 0 14 Dtool_sTqOu8oN 936 // Filename: odeBody.I
// Created by:  joswilso (27Dec06)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: OdeBody::is_empty
//       Access: Published
//  Description: Returns true if the ID is 0, meaning the OdeBody
//               does not point to a valid body. It is an error to
//               call a method on an empty body.
//               Note that an empty OdeBody also evaluates to False.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1350  
157 14 Dtool_sTqOFGug 0 6 158 1381 0 14 Dtool_sTqOFGug 246 ////////////////////////////////////////////////////////////////////
//     Function: OdeBody::get_id
//       Access: Published
//  Description: Returns the underlying dBodyID.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1350  
158 14 Dtool_sTqO9H7b 0 4 159 1323 0 14 Dtool_sTqO9H7b 0 2 4 this 3 1333  16 linear_threshold 1 1329  
159 14 Dtool_sTqOIb_t 0 4 160 1323 0 14 Dtool_sTqOIb_t 0 2 4 this 3 1333  17 angular_threshold 1 1329  
160 14 Dtool_sTqOHVvj 0 4 161 1323 0 14 Dtool_sTqOHVvj 0 2 4 this 3 1333  5 steps 1 1330  
161 14 Dtool_sTqOWebs 0 4 162 1323 0 14 Dtool_sTqOWebs 0 2 4 this 3 1333  4 time 1 1329  
162 14 Dtool_sTqOiqiM 0 4 163 1323 0 14 Dtool_sTqOiqiM 0 2 4 this 3 1333  15 do_auto_disable 1 1330  
163 14 Dtool_sTqOQBwk 0 4 164 1323 0 14 Dtool_sTqOQBwk 0 1 4 this 3 1333  
164 14 Dtool_sTqO8wp1 0 4 165 1323 0 14 Dtool_sTqO8wp1 0 2 4 this 3 1333  4 data 1 1355  
165 14 Dtool_sTqOnLY5 0 4 166 1323 0 14 Dtool_sTqOnLY5 0 2 4 this 3 1333  3 pos 1 1326  
166 14 Dtool_sTqOXcNy 0 4 166 1323 0 14 Dtool_sTqOXcNy 0 4 4 this 3 1333  1 x 1 1329  1 y 1 1329  1 z 1 1329  
167 14 Dtool_sTqOllWo 0 4 167 1323 0 14 Dtool_sTqOllWo 0 2 4 this 3 1333  1 r 1 1375  
168 14 Dtool_sTqOvNAs 0 4 168 1323 0 14 Dtool_sTqOvNAs 0 2 4 this 3 1333  1 q 1 1382  
169 14 Dtool_sTqOnERy 0 4 169 1323 0 14 Dtool_sTqOnERy 0 2 4 this 3 1333  3 vel 1 1326  
170 14 Dtool_sTqOcX_d 0 4 169 1323 0 14 Dtool_sTqOcX_d 0 4 4 this 3 1333  1 x 1 1329  1 y 1 1329  1 z 1 1329  
171 14 Dtool_sTqOJnMq 0 4 170 1323 0 14 Dtool_sTqOJnMq 0 2 4 this 3 1333  3 vel 1 1326  
172 14 Dtool_sTqO2u6h 0 4 170 1323 0 14 Dtool_sTqO2u6h 0 4 4 this 3 1333  1 x 1 1329  1 y 1 1329  1 z 1 1329  
173 14 Dtool_sTqOOZsc 0 4 171 1323 0 14 Dtool_sTqOOZsc 0 2 4 this 3 1333  4 mass 1 1372  
174 14 Dtool_sTqOo9RZ 0 6 172 1329 0 14 Dtool_sTqOo9RZ 0 1 4 this 3 1350  
175 14 Dtool_sTqOt4Q6 0 6 173 1329 0 14 Dtool_sTqOt4Q6 0 1 4 this 3 1350  
176 14 Dtool_sTqOSKLQ 0 6 174 1330 0 14 Dtool_sTqOSKLQ 0 1 4 this 3 1350  
177 14 Dtool_sTqOd3j1 0 6 175 1329 0 14 Dtool_sTqOd3j1 0 1 4 this 3 1350  
178 14 Dtool_sTqOKU3m 0 6 176 1330 0 14 Dtool_sTqOKU3m 0 1 4 this 3 1350  
179 14 Dtool_sTqO9eZW 0 6 177 1355 0 14 Dtool_sTqO9eZW 0 1 4 this 3 1350  
180 14 Dtool_sTqOON1i 0 7 178 1331 0 14 Dtool_sTqOON1i 0 1 4 this 3 1350  
181 14 Dtool_sTqOka7C 0 7 179 1380 0 14 Dtool_sTqOka7C 0 1 4 this 3 1350  
182 14 Dtool_sTqOPrQp 0 7 180 1386 0 14 Dtool_sTqOPrQp 0 1 4 this 3 1350  
183 14 Dtool_sTqOJa4w 0 7 181 1331 0 14 Dtool_sTqOJa4w 0 1 4 this 3 1350  
184 14 Dtool_sTqOMoje 0 7 182 1331 0 14 Dtool_sTqOMoje 0 1 4 this 3 1350  
185 14 Dtool_sTqOWMnN 0 7 183 1372 0 14 Dtool_sTqOWMnN 0 1 4 this 3 1350  
186 14 Dtool_sTqOqyfi 0 4 184 1323 0 14 Dtool_sTqOqyfi 0 2 4 this 3 1333  1 f 1 1326  
187 14 Dtool_sTqOepTY 0 4 184 1323 0 14 Dtool_sTqOepTY 0 4 4 this 3 1333  2 fx 1 1329  2 fy 1 1329  2 fz 1 1329  
188 14 Dtool_sTqOqLRh 0 4 185 1323 0 14 Dtool_sTqOqLRh 0 2 4 this 3 1333  1 f 1 1326  
189 14 Dtool_sTqOe_Hd 0 4 185 1323 0 14 Dtool_sTqOe_Hd 0 4 4 this 3 1333  2 fx 1 1329  2 fy 1 1329  2 fz 1 1329  
190 14 Dtool_sTqOoZjF 0 4 186 1323 0 14 Dtool_sTqOoZjF 0 2 4 this 3 1333  1 f 1 1326  
191 14 Dtool_sTqOcc4g 0 4 186 1323 0 14 Dtool_sTqOcc4g 0 4 4 this 3 1333  2 fx 1 1329  2 fy 1 1329  2 fz 1 1329  
192 14 Dtool_sTqO1NeF 0 4 187 1323 0 14 Dtool_sTqO1NeF 0 2 4 this 3 1333  1 f 1 1326  
193 14 Dtool_sTqO6TKx 0 4 187 1323 0 14 Dtool_sTqO6TKx 0 4 4 this 3 1333  2 fx 1 1329  2 fy 1 1329  2 fz 1 1329  
194 14 Dtool_sTqOgmuA 0 4 188 1323 0 14 Dtool_sTqOgmuA 0 3 4 this 3 1333  1 f 1 1326  3 pos 1 1326  
195 14 Dtool_sTqOwkbd 0 4 188 1323 0 14 Dtool_sTqOwkbd 0 7 4 this 3 1333  2 fx 1 1329  2 fy 1 1329  2 fz 1 1329  2 px 1 1329  2 py 1 1329  2 pz 1 1329  
196 14 Dtool_sTqO_FQA 0 4 189 1323 0 14 Dtool_sTqO_FQA 0 3 4 this 3 1333  1 f 1 1326  3 pos 1 1326  
197 14 Dtool_sTqOj0Au 0 4 189 1323 0 14 Dtool_sTqOj0Au 0 7 4 this 3 1333  2 fx 1 1329  2 fy 1 1329  2 fz 1 1329  2 px 1 1329  2 py 1 1329  2 pz 1 1329  
198 14 Dtool_sTqOQ6Zv 0 4 190 1323 0 14 Dtool_sTqOQ6Zv 0 3 4 this 3 1333  1 f 1 1326  3 pos 1 1326  
199 14 Dtool_sTqOmVKd 0 4 190 1323 0 14 Dtool_sTqOmVKd 0 7 4 this 3 1333  2 fx 1 1329  2 fy 1 1329  2 fz 1 1329  2 px 1 1329  2 py 1 1329  2 pz 1 1329  
200 14 Dtool_sTqOJJWD 0 4 191 1323 0 14 Dtool_sTqOJJWD 0 3 4 this 3 1333  1 f 1 1326  3 pos 1 1326  
201 14 Dtool_sTqORRLK 0 4 191 1323 0 14 Dtool_sTqORRLK 0 7 4 this 3 1333  2 fx 1 1329  2 fy 1 1329  2 fz 1 1329  2 px 1 1329  2 py 1 1329  2 pz 1 1329  
202 14 Dtool_sTqOmMq5 0 4 192 1323 0 14 Dtool_sTqOmMq5 0 2 4 this 3 1333  1 f 1 1326  
203 14 Dtool_sTqOCOfv 0 4 192 1323 0 14 Dtool_sTqOCOfv 0 4 4 this 3 1333  1 x 1 1329  1 y 1 1329  1 z 1 1329  
204 14 Dtool_sTqOWrc4 0 4 193 1323 0 14 Dtool_sTqOWrc4 0 2 4 this 3 1333  1 f 1 1326  
205 14 Dtool_sTqOVzR0 0 4 193 1323 0 14 Dtool_sTqOVzR0 0 4 4 this 3 1333  1 x 1 1329  1 y 1 1329  1 z 1 1329  
206 14 Dtool_sTqOQ3wW 0 7 194 1379 0 14 Dtool_sTqOQ3wW 0 2 4 this 3 1350  3 pos 1 1326  
207 14 Dtool_sTqOBHgj 0 7 194 1379 0 14 Dtool_sTqOBHgj 0 4 4 this 3 1350  2 px 1 1329  2 py 1 1329  2 pz 1 1329  
208 14 Dtool_sTqOBvTm 0 7 195 1379 0 14 Dtool_sTqOBvTm 0 2 4 this 3 1350  3 pos 1 1326  
209 14 Dtool_sTqOJTDz 0 7 195 1379 0 14 Dtool_sTqOJTDz 0 4 4 this 3 1350  2 px 1 1329  2 py 1 1329  2 pz 1 1329  
210 14 Dtool_sTqO7KB0 0 7 196 1379 0 14 Dtool_sTqO7KB0 0 2 4 this 3 1350  3 pos 1 1326  
211 14 Dtool_sTqOeHjA 0 7 196 1379 0 14 Dtool_sTqOeHjA 0 4 4 this 3 1350  2 px 1 1329  2 py 1 1329  2 pz 1 1329  
212 14 Dtool_sTqOMiS9 0 7 197 1379 0 14 Dtool_sTqOMiS9 0 2 4 this 3 1350  3 pos 1 1326  
213 14 Dtool_sTqOEADK 0 7 197 1379 0 14 Dtool_sTqOEADK 0 4 4 this 3 1350  2 px 1 1329  2 py 1 1329  2 pz 1 1329  
214 14 Dtool_sTqOR2lV 0 7 198 1331 0 14 Dtool_sTqOR2lV 0 2 4 this 3 1350  3 pos 1 1326  
215 14 Dtool_sTqOImeS 0 7 198 1331 0 14 Dtool_sTqOImeS 0 4 4 this 3 1350  2 px 1 1329  2 py 1 1329  2 pz 1 1329  
216 14 Dtool_sTqODdVO 0 7 199 1331 0 14 Dtool_sTqODdVO 0 2 4 this 3 1350  3 pos 1 1326  
217 14 Dtool_sTqObFFb 0 7 199 1331 0 14 Dtool_sTqObFFb 0 4 4 this 3 1350  2 px 1 1329  2 py 1 1329  2 pz 1 1329  
218 14 Dtool_sTqOVsom 0 4 200 1323 0 14 Dtool_sTqOVsom 0 2 4 this 3 1333  4 mode 1 1330  
219 14 Dtool_sTqONRm8 0 4 201 1323 0 14 Dtool_sTqONRm8 0 2 4 this 3 1333  4 axis 1 1326  
220 14 Dtool_sTqOBGkr 0 4 201 1323 0 14 Dtool_sTqOBGkr 0 4 4 this 3 1333  1 x 1 1329  1 y 1 1329  1 z 1 1329  
221 14 Dtool_sTqOqt1w 0 6 202 1330 0 14 Dtool_sTqOqt1w 0 1 4 this 3 1350  
222 14 Dtool_sTqO98IX 0 7 203 1331 0 14 Dtool_sTqO98IX 0 1 4 this 3 1350  
223 14 Dtool_sTqOrroe 0 6 204 1330 0 14 Dtool_sTqOrroe 0 1 4 this 3 1350  
224 14 Dtool_sTqOmWrD 0 7 205 1345 0 14 Dtool_sTqOmWrD 0 2 4 this 3 1350  5 index 1 1330  
225 14 Dtool_sTqO8Q5h 0 6 206 1355 0 14 Dtool_sTqO8Q5h 0 2 4 this 3 1350  1 i 1 1330  
226 14 Dtool_sTqOoKqz 0 4 207 1323 0 14 Dtool_sTqOoKqz 0 1 4 this 3 1333  
227 14 Dtool_sTqOggiP 0 4 208 1323 0 14 Dtool_sTqOggiP 0 1 4 this 3 1333  
228 14 Dtool_sTqO0xr6 0 6 209 1330 0 14 Dtool_sTqO0xr6 0 1 4 this 3 1350  
229 14 Dtool_sTqORD2K 0 4 210 1323 0 14 Dtool_sTqORD2K 0 2 4 this 3 1333  4 mode 1 1330  
230 14 Dtool_sTqOz1_n 0 6 211 1330 0 14 Dtool_sTqOz1_n 0 1 4 this 3 1350  
231 14 Dtool_sTqO5WFl 0 4 212 1323 0 14 Dtool_sTqO5WFl 0 3 4 this 3 1350  3 out 1 1352  6 indent 1 1354  
232 14 Dtool_sTqOGKt9 0 4 212 1323 0 14 Dtool_sTqOGKt9 0 2 4 this 3 1350  3 out 1 1352  
233 14 Dtool_sTqOlKUE 0 4 212 1323 0 14 Dtool_sTqOlKUE 0 1 4 this 3 1350  
234 14 Dtool_sTqO_8IH 0 6 214 1330 0 14 Dtool_sTqO_8IH 0 2 4 this 3 1350  5 other 1 1350  
235 14 Dtool_sTqOD2Pw 0 7 215 1335 0 14 Dtool_sTqOD2Pw 0 0 
236 14 Dtool_sTqOu8Ux 0 6 213 1324 0 14 Dtool_sTqOu8Ux 0 1 4 this 3 1350  
237 14 Dtool_sTqOoE44 0 4 217 1323 0 14 Dtool_sTqOoE44 0 1 4 this 3 1387  
238 14 Dtool_sTqO_njh 0 6 218 1324 0 14 Dtool_sTqO_njh 942 // Filename: odeSpace.I
// Created by:  joswilso (27Dec06)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: OdeSpace::is_empty
//       Access: Published
//  Description: Returns true if the ID is 0, meaning the OdeSpace
//               does not point to a valid space. It is an error to
//               call a method on an empty space.
//               Note that an empty OdeSpace also evaluates to False.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1388  
239 14 Dtool_sTqO_5BH 0 4 219 1323 0 14 Dtool_sTqO_5BH 0 2 4 this 3 1387  4 mode 1 1330  
240 14 Dtool_sTqOgwMZ 0 6 220 1330 0 14 Dtool_sTqOgwMZ 0 1 4 this 3 1388  
241 14 Dtool_sTqOxVCc 0 6 221 1330 0 14 Dtool_sTqOxVCc 0 2 4 this 3 1388  4 geom 1 1390  
242 14 Dtool_sTqOpO1J 0 6 221 1330 0 14 Dtool_sTqOpO1J 0 2 4 this 3 1388  5 space 1 1388  
243 14 Dtool_sTqOBcMo 0 6 222 1330 0 14 Dtool_sTqOBcMo 0 1 4 this 3 1388  
244 14 Dtool_sTqOs6IK 0 4 223 1323 0 14 Dtool_sTqOs6IK 0 3 4 this 3 1388  3 min 1 1331  3 max 1 1331  
245 14 Dtool_sTqOIcVg 0 6 224 1355 0 14 Dtool_sTqOIcVg 0 1 4 this 3 1388  
246 14 Dtool_sTqOZZ8C 0 6 225 1330 0 14 Dtool_sTqOZZ8C 0 1 4 this 3 1387  
247 14 Dtool_sTqOD2mO 0 6 226 1330 0 14 Dtool_sTqOD2mO 0 1 4 this 3 1388  
248 14 Dtool_sTqOsWAU 0 4 227 1323 0 14 Dtool_sTqOsWAU 0 2 4 this 3 1387  4 bits 1 1392  
249 14 Dtool_sTqOz6QP 0 4 228 1323 0 14 Dtool_sTqOz6QP 0 2 4 this 3 1387  4 bits 1 1392  
250 14 Dtool_sTqO7Jza 0 7 229 1395 0 14 Dtool_sTqO7Jza 0 1 4 this 3 1387  
251 14 Dtool_sTqOQXsu 0 7 230 1395 0 14 Dtool_sTqOQXsu 0 1 4 this 3 1387  
252 14 Dtool_sTqOcFNi 0 4 231 1323 0 14 Dtool_sTqOcFNi 0 1 4 this 3 1387  
253 14 Dtool_sTqOHU_d 0 4 232 1323 0 14 Dtool_sTqOHU_d 0 1 4 this 3 1387  
254 14 Dtool_sTqOhEra 0 6 233 1330 0 14 Dtool_sTqOhEra 0 1 4 this 3 1387  
255 14 Dtool_sTqOjup_ 0 4 234 1323 0 14 Dtool_sTqOjup_ 0 2 4 this 3 1387  6 param0 0 1320  
256 14 Dtool_sTqO5dx8 0 4 235 1323 0 14 Dtool_sTqO5dx8 0 2 4 this 3 1387  6 param0 0 1336  
257 14 Dtool_sTqOZPSN 0 4 236 1323 0 14 Dtool_sTqOZPSN 0 2 4 this 3 1387  4 geom 1 1396  
258 14 Dtool_sTqO2zkP 0 4 236 1323 0 14 Dtool_sTqO2zkP 0 2 4 this 3 1387  5 space 1 1387  
259 14 Dtool_sTqO1wNo 0 4 237 1323 0 14 Dtool_sTqO1wNo 0 2 4 this 3 1387  4 geom 1 1396  
260 14 Dtool_sTqOfLFM 0 4 237 1323 0 14 Dtool_sTqOfLFM 0 2 4 this 3 1387  5 space 1 1387  
261 14 Dtool_sTqOJCvo 0 4 238 1323 0 14 Dtool_sTqOJCvo 0 1 4 this 3 1387  
262 14 Dtool_sTqOtlfI 0 7 239 1396 0 14 Dtool_sTqOtlfI 0 2 4 this 3 1387  1 i 1 1330  
263 14 Dtool_sTqO0Iyp 0 7 240 1387 0 14 Dtool_sTqO0Iyp 104 // Not INLINE because of forward declaration
//static int get_surface_type(OdeSpace * self, dGeomID o1); 1 4 this 3 1388  
264 14 Dtool_sTqO2l3S 0 4 241 1323 0 14 Dtool_sTqO2l3S 0 3 4 this 3 1388  3 out 1 1352  6 indent 1 1354  
265 14 Dtool_sTqOXVpl 0 4 241 1323 0 14 Dtool_sTqOXVpl 0 2 4 this 3 1388  3 out 1 1352  
266 14 Dtool_sTqOSr_3 0 4 241 1323 0 14 Dtool_sTqOSr_3 0 1 4 this 3 1388  
267 14 Dtool_sTqOYg8r 0 7 243 1397 0 14 Dtool_sTqOYg8r 0 1 4 this 3 1388  
268 14 Dtool_sTqOpTBD 0 7 244 1398 0 14 Dtool_sTqOpTBD 0 1 4 this 3 1388  
269 14 Dtool_sTqO5ezm 0 7 245 1399 0 14 Dtool_sTqO5ezm 0 1 4 this 3 1388  
270 14 Dtool_sTqOSlVw 0 6 246 1355 0 14 Dtool_sTqOSlVw 0 1 4 this 3 1388  
271 14 Dtool_sTqOkE_1 0 6 247 1355 0 14 Dtool_sTqOkE_1 0 2 4 this 3 1388  1 i 1 1330  
272 14 Dtool_sTqOavdB 0 6 248 1355 0 14 Dtool_sTqOavdB 0 1 4 this 3 1388  
273 14 Dtool_sTqODPpW 0 4 249 1323 0 14 Dtool_sTqODPpW 0 1 4 this 3 1387  
274 14 Dtool_sTqOQBGE 0 6 250 1330 0 14 Dtool_sTqOQBGE 0 3 4 this 3 1387  3 arg 1 1355  13 near_callback 1 1355  
275 14 Dtool_sTqO2IlA 0 6 251 1330 0 14 Dtool_sTqO2IlA 0 3 4 this 3 1387  4 geom 1 1396  10 collide_id 1 1330  
276 14 Dtool_sTqObtO9 0 6 251 1330 0 14 Dtool_sTqObtO9 0 3 4 this 3 1387  10 collide_id 1 1330  2 id 1 1400  
277 14 Dtool_sTqOrMQD 0 4 252 1323 0 14 Dtool_sTqOrMQD 0 3 4 this 3 1387  4 geom 1 1396  12 surface_type 1 1330  
278 14 Dtool_sTqO5jZN 0 4 252 1323 0 14 Dtool_sTqO5jZN 0 3 4 this 3 1387  12 surface_type 1 1330  2 id 1 1400  
279 14 Dtool_sTqOPNdr 0 6 253 1330 0 14 Dtool_sTqOPNdr 0 2 4 this 3 1387  4 geom 1 1396  
280 14 Dtool_sTqOT7zx 0 6 253 1330 0 14 Dtool_sTqOT7zx 0 2 4 this 3 1387  2 o1 1 1400  
281 14 Dtool_sTqOKVCg 0 6 254 1330 0 14 Dtool_sTqOKVCg 0 2 4 this 3 1387  4 geom 1 1396  
282 14 Dtool_sTqOU4S2 0 6 254 1330 0 14 Dtool_sTqOU4S2 0 2 4 this 3 1387  2 o1 1 1400  
283 14 Dtool_sTqOGhKS 0 4 255 1323 0 14 Dtool_sTqOGhKS 0 2 4 this 3 1387  10 event_name 1 1401  
284 14 Dtool_sTqOVyQ_ 0 6 256 1401 0 14 Dtool_sTqOVyQ_ 0 1 4 this 3 1387  
285 14 Dtool_sTqOst_0 0 7 257 1335 0 14 Dtool_sTqOst_0 0 0 
286 14 Dtool_sTqOqaYZ 0 6 242 1324 0 14 Dtool_sTqOqaYZ 0 1 4 this 3 1388  
287 14 Dtool_sTqODmh0 0 4 260 1323 0 14 Dtool_sTqODmh0 0 1 4 this 3 1396  
288 14 Dtool_sTqOUuxb 0 6 261 1324 0 14 Dtool_sTqOUuxb 936 // Filename: odeGeom.I
// Created by:  joswilso (27Dec06)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: OdeGeom::is_empty
//       Access: Published
//  Description: Returns true if the ID is 0, meaning the OdeGeom
//               does not point to a valid geom. It is an error to
//               call a method on an empty geom.
//               Note that an empty OdeGeom also evaluates to False.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1390  
289 14 Dtool_sTqOWW3u 0 6 262 1400 0 14 Dtool_sTqOWW3u 246 ////////////////////////////////////////////////////////////////////
//     Function: OdeGeom::get_id
//       Access: Published
//  Description: Returns the underlying dGeomID.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1390  
290 14 Dtool_sTqOtSQY 0 4 263 1323 0 14 Dtool_sTqOtSQY 35 //INLINE void set_data(void* data); 2 4 this 3 1396  4 body 1 1333  
291 14 Dtool_sTqOXAml 0 6 264 1324 0 14 Dtool_sTqOXAml 35 //INLINE void set_data(void* data); 1 4 this 3 1390  
292 14 Dtool_sTqOf0Vw 0 7 265 1333 0 14 Dtool_sTqOf0Vw 0 1 4 this 3 1390  
293 14 Dtool_sTqOO_iH 0 4 266 1323 0 14 Dtool_sTqOO_iH 0 2 4 this 3 1396  3 pos 1 1326  
294 14 Dtool_sTqOwOXA 0 4 266 1323 0 14 Dtool_sTqOwOXA 0 4 4 this 3 1396  1 x 1 1329  1 y 1 1329  1 z 1 1329  
295 14 Dtool_sTqOPIg2 0 4 267 1323 0 14 Dtool_sTqOPIg2 0 2 4 this 3 1396  1 r 1 1375  
296 14 Dtool_sTqOBfK6 0 4 268 1323 0 14 Dtool_sTqOBfK6 0 2 4 this 3 1396  1 q 1 1382  
297 14 Dtool_sTqORB_w 0 7 269 1379 0 14 Dtool_sTqORB_w 0 1 4 this 3 1390  
298 14 Dtool_sTqOLTER 0 7 270 1380 0 14 Dtool_sTqOLTER 0 1 4 this 3 1390  
299 14 Dtool_sTqOR9Z3 0 7 271 1402 0 14 Dtool_sTqOR9Z3 0 1 4 this 3 1390  
300 14 Dtool_sTqO6C_Y 0 4 272 1323 0 14 Dtool_sTqO6C_Y 0 3 4 this 3 1390  3 min 1 1331  3 max 1 1331  
301 14 Dtool_sTqOOHvL 0 6 273 1355 0 14 Dtool_sTqOOHvL 0 1 4 this 3 1390  
302 14 Dtool_sTqO8M0Q 0 6 274 1330 0 14 Dtool_sTqO8M0Q 0 1 4 this 3 1396  
303 14 Dtool_sTqOhmKT 0 6 275 1330 0 14 Dtool_sTqOhmKT 0 1 4 this 3 1390  
304 14 Dtool_sTqO5wRx 0 4 276 1323 0 14 Dtool_sTqO5wRx 0 2 4 this 3 1396  4 bits 1 1392  
305 14 Dtool_sTqOH4Fr 0 4 277 1323 0 14 Dtool_sTqOH4Fr 0 2 4 this 3 1396  4 bits 1 1392  
306 14 Dtool_sTqOuOix 0 7 278 1395 0 14 Dtool_sTqOuOix 0 1 4 this 3 1396  
307 14 Dtool_sTqOcjIK 0 7 279 1395 0 14 Dtool_sTqOcjIK 0 1 4 this 3 1396  
308 14 Dtool_sTqOyJzB 0 4 280 1323 0 14 Dtool_sTqOyJzB 0 1 4 this 3 1396  
309 14 Dtool_sTqOGzrd 0 4 281 1323 0 14 Dtool_sTqOGzrd 0 1 4 this 3 1396  
310 14 Dtool_sTqOnMkJ 0 6 282 1330 0 14 Dtool_sTqOnMkJ 0 1 4 this 3 1396  
311 14 Dtool_sTqO8kBe 0 4 283 1323 0 14 Dtool_sTqO8kBe 0 2 4 this 3 1396  3 pos 1 1326  
312 14 Dtool_sTqOBod1 0 4 283 1323 0 14 Dtool_sTqOBod1 0 4 4 this 3 1396  1 x 1 1329  1 y 1 1329  1 z 1 1329  
313 14 Dtool_sTqOjjCF 0 4 284 1323 0 14 Dtool_sTqOjjCF 0 2 4 this 3 1396  1 r 1 1375  
314 14 Dtool_sTqODj5O 0 4 285 1323 0 14 Dtool_sTqODj5O 0 2 4 this 3 1396  1 q 1 1382  
315 14 Dtool_sTqO1fEA 0 4 286 1323 0 14 Dtool_sTqO1fEA 0 2 4 this 3 1396  3 pos 1 1326  
316 14 Dtool_sTqOe7Bf 0 4 286 1323 0 14 Dtool_sTqOe7Bf 0 4 4 this 3 1396  1 x 1 1329  1 y 1 1329  1 z 1 1329  
317 14 Dtool_sTqOns9A 0 4 287 1323 0 14 Dtool_sTqOns9A 0 2 4 this 3 1396  1 r 1 1375  
318 14 Dtool_sTqO_h_7 0 4 288 1323 0 14 Dtool_sTqO_h_7 0 2 4 this 3 1396  1 q 1 1382  
319 14 Dtool_sTqOJiDv 0 4 289 1323 0 14 Dtool_sTqOJiDv 0 1 4 this 3 1396  
320 14 Dtool_sTqOhq2h 0 6 290 1330 0 14 Dtool_sTqOhq2h 0 1 4 this 3 1396  
321 14 Dtool_sTqOADQ7 0 7 291 1379 0 14 Dtool_sTqOADQ7 0 1 4 this 3 1390  
322 14 Dtool_sTqOEoTE 0 7 292 1380 0 14 Dtool_sTqOEoTE 0 1 4 this 3 1390  
323 14 Dtool_sTqOn5PY 0 7 293 1402 0 14 Dtool_sTqOn5PY 0 1 4 this 3 1390  
324 14 Dtool_sTqOp_Ay 0 7 294 1387 0 14 Dtool_sTqOp_Ay 174 //int get_surface_type() ;
//int get_collide_id() ;
//int set_collide_id( int collide_id);
//void set_surface_type( int surface_type);
//int test_collide_id( int collide_id); 1 4 this 3 1390  
325 14 Dtool_sTqOm8tw 0 6 295 1355 0 14 Dtool_sTqOm8tw 0 1 4 this 3 1390  
326 14 Dtool_sTqOiWOz 0 4 296 1323 0 14 Dtool_sTqOiWOz 0 3 4 this 3 1390  3 out 1 1352  6 indent 1 1354  
327 14 Dtool_sTqOdY3L 0 4 296 1323 0 14 Dtool_sTqOdY3L 0 2 4 this 3 1390  3 out 1 1352  
328 14 Dtool_sTqOPXeS 0 4 296 1323 0 14 Dtool_sTqOPXeS 0 1 4 this 3 1390  
329 14 Dtool_sTqO2Ef3 0 6 298 1330 0 14 Dtool_sTqO2Ef3 0 2 4 this 3 1390  5 other 1 1390  
330 14 Dtool_sTqOgxN2 0 6 299 1355 0 14 Dtool_sTqOgxN2 0 1 4 this 3 1390  
331 14 Dtool_sTqOVNxU 0 7 300 1403 0 14 Dtool_sTqOVNxU 0 1 4 this 3 1390  
332 14 Dtool_sTqOfK7w 0 7 301 1404 0 14 Dtool_sTqOfK7w 0 1 4 this 3 1390  
333 14 Dtool_sTqOahYj 0 7 302 1405 0 14 Dtool_sTqOahYj 43 // OdeConvexGeom convert_to_convex() const; 1 4 this 3 1390  
334 14 Dtool_sTqOeq3c 0 7 303 1406 0 14 Dtool_sTqOeq3c 53 // OdeHeightfieldGeom convert_to_heightfield() const; 1 4 this 3 1390  
335 14 Dtool_sTqOqZZJ 0 7 304 1407 0 14 Dtool_sTqOqZZJ 53 // OdeHeightfieldGeom convert_to_heightfield() const; 1 4 this 3 1390  
336 14 Dtool_sTqOyqpD 0 7 305 1408 0 14 Dtool_sTqOyqpD 0 1 4 this 3 1390  
337 14 Dtool_sTqOXaIY 0 7 306 1409 0 14 Dtool_sTqOXaIY 0 1 4 this 3 1390  
338 14 Dtool_sTqOX_CC 0 7 307 1397 0 14 Dtool_sTqOX_CC 0 1 4 this 3 1390  
339 14 Dtool_sTqO2TwK 0 7 308 1398 0 14 Dtool_sTqO2TwK 0 1 4 this 3 1390  
340 14 Dtool_sTqOsd3z 0 7 309 1399 0 14 Dtool_sTqOsd3z 0 1 4 this 3 1390  
341 14 Dtool_sTqOhAY_ 0 7 310 1335 0 14 Dtool_sTqOhAY_ 0 0 
342 14 Dtool_sTqOYyd_ 0 6 297 1324 0 14 Dtool_sTqOYyd_ 0 1 4 this 3 1390  
343 14 Dtool_sTqO5Mqw 0 7 312 1403 0 14 Dtool_sTqO5Mqw 0 2 5 space 1 1387  4 size 1 1326  
344 14 Dtool_sTqOG0nP 0 7 312 1403 0 14 Dtool_sTqOG0nP 0 4 5 space 1 1387  2 lx 1 1329  2 ly 1 1329  2 lz 1 1329  
345 14 Dtool_sTqOUAjx 0 7 312 1403 0 14 Dtool_sTqOUAjx 0 3 2 lx 1 1329  2 ly 1 1329  2 lz 1 1329  
346 14 Dtool_sTqOrilP 0 4 313 1323 0 14 Dtool_sTqOrilP 0 2 4 this 3 1403  4 size 1 1326  
347 14 Dtool_sTqOTeQ7 0 4 313 1323 0 14 Dtool_sTqOTeQ7 488 // Filename: odeBoxGeom.I
// Created by:  joswilso (27Dec06)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
//////////////////////////////////////////////////////////////////// 4 4 this 3 1403  2 lx 1 1329  2 ly 1 1329  2 lz 1 1329  
348 14 Dtool_sTqOiU9Y 0 7 314 1331 0 14 Dtool_sTqOiU9Y 0 1 4 this 3 1403  
349 14 Dtool_sTqOmkzM 0 6 315 1329 0 14 Dtool_sTqOmkzM 0 2 4 this 3 1403  1 p 1 1410  
350 14 Dtool_sTqOmr58 0 6 315 1329 0 14 Dtool_sTqOmr58 0 4 4 this 3 1403  1 x 1 1329  1 y 1 1329  1 z 1 1329  
351 14 Dtool_sTqO4h7F 0 7 316 1335 0 14 Dtool_sTqO4h7F 0 0 
352 14 Dtool_sTqOfjkn 0 7 318 1404 0 14 Dtool_sTqOfjkn 0 3 5 space 1 1387  6 radius 1 1329  6 length 1 1329  
353 14 Dtool_sTqOVPcL 0 7 318 1404 0 14 Dtool_sTqOVPcL 0 2 6 radius 1 1329  6 length 1 1329  
354 14 Dtool_sTqOSpf3 0 4 319 1323 0 14 Dtool_sTqOSpf3 499 // Filename: odeCappedCylinderGeom.I
// Created by:  joswilso (27Dec06)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
//////////////////////////////////////////////////////////////////// 3 4 this 3 1404  6 radius 1 1329  6 length 1 1329  
355 14 Dtool_sTqOBhyZ 0 6 321 1329 0 14 Dtool_sTqOBhyZ 0 1 4 this 3 1412  
356 14 Dtool_sTqOFELI 0 6 322 1329 0 14 Dtool_sTqOFELI 0 1 4 this 3 1412  
357 14 Dtool_sTqOaaTf 0 6 323 1329 0 14 Dtool_sTqOaaTf 0 2 4 this 3 1412  1 p 1 1410  
358 14 Dtool_sTqOwl8R 0 6 323 1329 0 14 Dtool_sTqOwl8R 0 4 4 this 3 1412  1 x 1 1329  1 y 1 1329  1 z 1 1329  
359 14 Dtool_sTqObowg 0 7 324 1335 0 14 Dtool_sTqObowg 0 0 
360 14 Dtool_sTqOrDgj 0 7 326 1414 0 14 Dtool_sTqOrDgj 0 0 
361 14 Dtool_sTqOxR7P 0 7 326 1414 0 14 Dtool_sTqOxR7P 0 1 4 copy 1 1415  
362 14 Dtool_sTqO_ppo 0 7 327 1331 0 14 Dtool_sTqO_ppo 492 // Filename: odeContactGeom.I
// Created by:  joswilso (27Dec06)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
//////////////////////////////////////////////////////////////////// 1 4 this 3 1415  
363 14 Dtool_sTqOchdK 0 7 328 1331 0 14 Dtool_sTqOchdK 0 1 4 this 3 1415  
364 14 Dtool_sTqOv0Qh 0 6 329 1329 0 14 Dtool_sTqOv0Qh 0 1 4 this 3 1415  
365 14 Dtool_sTqOBzZu 0 7 330 1396 0 14 Dtool_sTqOBzZu 0 1 4 this 3 1415  
366 14 Dtool_sTqOBrK4 0 7 331 1396 0 14 Dtool_sTqOBrK4 0 1 4 this 3 1415  
367 14 Dtool_sTqOa9mU 0 6 332 1330 0 14 Dtool_sTqOa9mU 0 1 4 this 3 1415  
368 14 Dtool_sTqOTvnU 0 6 333 1330 0 14 Dtool_sTqOTvnU 0 1 4 this 3 1415  
369 14 Dtool_sTqOCqlE 0 4 334 1323 0 14 Dtool_sTqOCqlE 0 2 4 this 3 1414  3 pos 1 1326  
370 14 Dtool_sTqOUgHy 0 4 335 1323 0 14 Dtool_sTqOUgHy 0 2 4 this 3 1414  6 normal 1 1326  
371 14 Dtool_sTqOEoiS 0 4 336 1323 0 14 Dtool_sTqOEoiS 0 2 4 this 3 1414  5 depth 1 1329  
372 14 Dtool_sTqOadT8 0 4 337 1323 0 14 Dtool_sTqOadT8 0 2 4 this 3 1414  4 geom 1 1390  
373 14 Dtool_sTqOdlDG 0 4 338 1323 0 14 Dtool_sTqOdlDG 0 2 4 this 3 1414  4 geom 1 1390  
374 14 Dtool_sTqOVmGi 0 7 339 1335 0 14 Dtool_sTqOVmGi 0 0 
375 14 Dtool_sTqO_HD5 0 7 341 1396 0 14 Dtool_sTqO_HD5 268 ////////////////////////////////////////////////////////////////////
//     Function: OdeCollisionEntry::get_geom1
//       Access: Published
//  Description: Returns the first geom in the collision.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1417  
376 14 Dtool_sTqOxH7p 0 7 342 1396 0 14 Dtool_sTqOxH7p 269 ////////////////////////////////////////////////////////////////////
//     Function: OdeCollisionEntry::get_geom2
//       Access: Published
//  Description: Returns the second geom in the collision.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1417  
377 14 Dtool_sTqOju3W 0 7 343 1333 0 14 Dtool_sTqOju3W 268 ////////////////////////////////////////////////////////////////////
//     Function: OdeCollisionEntry::get_body1
//       Access: Published
//  Description: Returns the first body in the collision.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1417  
378 14 Dtool_sTqOpuvH 0 7 344 1333 0 14 Dtool_sTqOpuvH 269 ////////////////////////////////////////////////////////////////////
//     Function: OdeCollisionEntry::get_body2
//       Access: Published
//  Description: Returns the second body in the collision.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1417  
379 14 Dtool_sTqOf6L7 0 6 345 1354 0 14 Dtool_sTqOf6L7 283 ////////////////////////////////////////////////////////////////////
//     Function: OdeCollisionEntry::get_num_contacts
//       Access: Published
//  Description: Returns the number of contacts in the collision.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1417  
380 14 Dtool_sTqODdLz 0 7 346 1379 0 14 Dtool_sTqODdLz 378 ////////////////////////////////////////////////////////////////////
//     Function: OdeCollisionEntry::get_contact_point
//       Access: Published
//  Description: Returns the nth contact point in the collision.
//               This does exactly the same as
//               get_contact_geom(n).get_pos().
//////////////////////////////////////////////////////////////////// 2 4 this 3 1417  1 n 1 1354  
381 14 Dtool_sTqOoD8_ 0 7 347 1414 0 14 Dtool_sTqOoD8_ 281 ////////////////////////////////////////////////////////////////////
//     Function: OdeCollisionEntry::get_contact_geom
//       Access: Published
//  Description: Returns the nth contact geom in the collision.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1417  1 n 1 1354  
382 14 Dtool_sTqOHg3X 0 7 348 1414 0 14 Dtool_sTqOHg3X 276 ////////////////////////////////////////////////////////////////////
//     Function: OdeCollisionEntry::operator []
//       Access: Published
//  Description: Returns the nth contact geom in the collision.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1417  1 n 1 1354  
383 14 Dtool_sTqO5L6p 0 6 350 1324 0 14 Dtool_sTqO5L6p 271 ////////////////////////////////////////////////////////////////////
//     Function: OdeCollisionEntry::is_empty
//       Access: Published
//  Description: Returns true if the entry holds no contacts.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1417  
384 14 Dtool_sTqOLNW0 0 7 351 1335 0 14 Dtool_sTqOLNW0 0 0 
385 14 Dtool_sTqOtk24 0 6 349 1324 0 14 Dtool_sTqOtk24 313 ////////////////////////////////////////////////////////////////////
//     Function: OdeCollisionEntry::operator bool
//       Access: Published
//  Description: An OdeCollisionEntry evaluates to False if it
//               holds no contacts.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1417  
386 14 Dtool_sTqOWmWA 0 7 354 1419 0 14 Dtool_sTqOWmWA 0 2 4 mode 1 1330  2 mu 1 1329  
387 14 Dtool_sTqOP6Dl 0 7 354 1419 0 14 Dtool_sTqOP6Dl 0 1 4 mode 1 1330  
388 14 Dtool_sTqO1ZXM 0 7 354 1419 0 14 Dtool_sTqO1ZXM 0 0 
389 14 Dtool_sTqOVM_j 0 4 355 1323 0 14 Dtool_sTqOVM_j 498 // Filename: odeSurfaceParameters.I
// Created by:  joswilso (27Dec06)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
//////////////////////////////////////////////////////////////////// 2 4 this 3 1419  4 mode 1 1330  
390 14 Dtool_sTqOCbx_ 0 4 356 1323 0 14 Dtool_sTqOCbx_ 0 2 4 this 3 1419  2 mu 1 1329  
391 14 Dtool_sTqOfGNz 0 4 357 1323 0 14 Dtool_sTqOfGNz 0 2 4 this 3 1419  3 mu2 1 1329  
392 14 Dtool_sTqOC0q9 0 4 358 1323 0 14 Dtool_sTqOC0q9 0 2 4 this 3 1419  6 bounce 1 1329  
393 14 Dtool_sTqOA0BE 0 4 359 1323 0 14 Dtool_sTqOA0BE 0 2 4 this 3 1419  10 bounce_vel 1 1329  
394 14 Dtool_sTqOgkJb 0 4 360 1323 0 14 Dtool_sTqOgkJb 0 2 4 this 3 1419  8 soft_erp 1 1329  
395 14 Dtool_sTqOQ5AQ 0 4 361 1323 0 14 Dtool_sTqOQ5AQ 0 2 4 this 3 1419  8 soft_cfm 1 1329  
396 14 Dtool_sTqOwv5X 0 4 362 1323 0 14 Dtool_sTqOwv5X 0 2 4 this 3 1419  6 motion 1 1329  
397 14 Dtool_sTqOlvp5 0 4 363 1323 0 14 Dtool_sTqOlvp5 0 2 4 this 3 1419  6 motion 1 1329  
398 14 Dtool_sTqOnGqL 0 4 364 1323 0 14 Dtool_sTqOnGqL 0 2 4 this 3 1419  4 slip 1 1329  
399 14 Dtool_sTqOnf4M 0 4 365 1323 0 14 Dtool_sTqOnf4M 0 2 4 this 3 1419  4 slip 1 1329  
400 14 Dtool_sTqOZ_H5 0 6 366 1330 0 14 Dtool_sTqOZ_H5 0 1 4 this 3 1420  
401 14 Dtool_sTqOTxDQ 0 6 367 1329 0 14 Dtool_sTqOTxDQ 0 1 4 this 3 1420  
402 14 Dtool_sTqOfhO_ 0 6 368 1329 0 14 Dtool_sTqOfhO_ 0 1 4 this 3 1420  
403 14 Dtool_sTqOgOw_ 0 6 369 1329 0 14 Dtool_sTqOgOw_ 0 1 4 this 3 1420  
404 14 Dtool_sTqONSOp 0 6 370 1329 0 14 Dtool_sTqONSOp 0 1 4 this 3 1420  
405 14 Dtool_sTqOf6eY 0 6 371 1329 0 14 Dtool_sTqOf6eY 0 1 4 this 3 1420  
406 14 Dtool_sTqOajVN 0 6 372 1329 0 14 Dtool_sTqOajVN 0 1 4 this 3 1420  
407 14 Dtool_sTqO2Vtd 0 6 373 1329 0 14 Dtool_sTqO2Vtd 0 1 4 this 3 1420  
408 14 Dtool_sTqObKd_ 0 6 374 1329 0 14 Dtool_sTqObKd_ 0 1 4 this 3 1420  
409 14 Dtool_sTqONEpL 0 6 375 1329 0 14 Dtool_sTqONEpL 0 1 4 this 3 1420  
410 14 Dtool_sTqONL3M 0 6 376 1329 0 14 Dtool_sTqONL3M 0 1 4 this 3 1420  
411 14 Dtool_sTqOyAtM 0 7 377 1335 0 14 Dtool_sTqOyAtM 0 0 
412 14 Dtool_sTqOoVpX 0 7 379 1422 0 14 Dtool_sTqOoVpX 0 0 
413 14 Dtool_sTqO5d7O 0 7 379 1422 0 14 Dtool_sTqO5d7O 38 // OdeContact(const OdeContact &copy); 1 7 contact 1 1423  
414 14 Dtool_sTqOTEDY 0 7 380 1419 0 14 Dtool_sTqOTEDY 488 // Filename: odeContact.I
// Created by:  joswilso (27Dec06)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
//////////////////////////////////////////////////////////////////// 1 4 this 3 1426  
415 14 Dtool_sTqOTva8 0 7 381 1414 0 14 Dtool_sTqOTva8 0 1 4 this 3 1422  
416 14 Dtool_sTqO86si 0 7 382 1331 0 14 Dtool_sTqO86si 0 1 4 this 3 1426  
417 14 Dtool_sTqOwAkR 0 4 383 1323 0 14 Dtool_sTqOwAkR 0 2 4 this 3 1422  18 surface_parameters 1 1420  
418 14 Dtool_sTqOxE1A 0 4 384 1323 0 14 Dtool_sTqOxE1A 0 2 4 this 3 1422  12 contact_geom 1 1415  
419 14 Dtool_sTqOO8iC 0 4 385 1323 0 14 Dtool_sTqOO8iC 0 2 4 this 3 1422  5 fdir1 1 1326  
420 14 Dtool_sTqOvRIE 0 7 386 1335 0 14 Dtool_sTqOvRIE 0 0 
421 14 Dtool_sTqOwqXn 0 7 388 1360 0 14 Dtool_sTqOwqXn 0 2 5 world 1 1320  7 contact 1 1426  
422 14 Dtool_sTqO7HAE 0 7 388 1360 0 14 Dtool_sTqO7HAE 0 3 5 world 1 1320  11 joint_group 1 1336  7 contact 1 1426  
423 14 Dtool_sTqOlL36 0 7 389 1335 0 14 Dtool_sTqOlL36 0 0 
424 14 Dtool_sTqOoKYd 0 7 391 1405 0 14 Dtool_sTqOoKYd 0 3 5 space 1 1387  6 radius 1 1329  6 length 1 1329  
425 14 Dtool_sTqOpiV_ 0 7 391 1405 0 14 Dtool_sTqOpiV_ 0 2 6 radius 1 1329  6 length 1 1329  
426 14 Dtool_sTqOr5k1 0 4 392 1323 0 14 Dtool_sTqOr5k1 493 // Filename: odeCylinderGeom.I
// Created by:  joswilso (27Dec06)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
//////////////////////////////////////////////////////////////////// 3 4 this 3 1405  6 radius 1 1329  6 length 1 1329  
427 14 Dtool_sTqOlFIl 0 6 394 1329 0 14 Dtool_sTqOlFIl 0 1 4 this 3 1428  
428 14 Dtool_sTqONs2A 0 6 395 1329 0 14 Dtool_sTqONs2A 0 1 4 this 3 1428  
429 14 Dtool_sTqOuZP3 0 7 396 1335 0 14 Dtool_sTqOuZP3 0 0 
430 14 Dtool_sTqOl0Dv 0 7 398 1363 0 14 Dtool_sTqOl0Dv 0 1 5 world 1 1320  
431 14 Dtool_sTqON2YW 0 7 398 1363 0 14 Dtool_sTqON2YW 0 2 5 world 1 1320  11 joint_group 1 1336  
432 14 Dtool_sTqO__C8 0 4 399 1323 0 14 Dtool_sTqO__C8 491 // Filename: odeFixedJoint.I
// Created by:  joswilso (27Dec06)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
//////////////////////////////////////////////////////////////////// 1 4 this 3 1363  
433 14 Dtool_sTqOCbRZ 0 7 400 1335 0 14 Dtool_sTqOCbRZ 0 0 
434 14 Dtool_sTqOYwng 0 7 402 1398 0 14 Dtool_sTqOYwng 0 0 
435 14 Dtool_sTqOK4tA 0 7 402 1398 0 14 Dtool_sTqOK4tA 0 1 5 space 1 1387  
436 14 Dtool_sTqOu9tU 0 4 403 1323 0 14 Dtool_sTqOu9tU 490 // Filename: odeHashSpace.I
// Created by:  joswilso (27Dec06)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
//////////////////////////////////////////////////////////////////// 3 4 this 3 1398  8 minlevel 1 1330  8 maxlevel 1 1330  
437 14 Dtool_sTqOeDbq 0 6 404 1330 0 14 Dtool_sTqOeDbq 0 1 4 this 3 1430  
438 14 Dtool_sTqOCkZt 0 6 405 1330 0 14 Dtool_sTqOCkZt 0 1 4 this 3 1430  
439 14 Dtool_sTqOgfSF 0 7 406 1335 0 14 Dtool_sTqOgfSF 0 0 
440 14 Dtool_sTqOXyov 0 7 408 1362 0 14 Dtool_sTqOXyov 0 1 5 world 1 1320  
441 14 Dtool_sTqO2EB5 0 7 408 1362 0 14 Dtool_sTqO2EB5 0 2 5 world 1 1320  11 joint_group 1 1336  
442 14 Dtool_sTqOIy1d 0 4 409 1323 0 14 Dtool_sTqOIy1d 0 2 4 this 3 1362  6 anchor 1 1326  
443 14 Dtool_sTqOmzgP 0 4 409 1323 0 14 Dtool_sTqOmzgP 0 4 4 this 3 1362  1 x 1 1329  1 y 1 1329  1 z 1 1329  
444 14 Dtool_sTqOgjz3 0 4 410 1323 0 14 Dtool_sTqOgjz3 0 2 4 this 3 1362  4 axis 1 1326  
445 14 Dtool_sTqOG9Sv 0 4 410 1323 0 14 Dtool_sTqOG9Sv 0 4 4 this 3 1362  1 x 1 1329  1 y 1 1329  1 z 1 1329  
446 14 Dtool_sTqOvt03 0 4 411 1323 0 14 Dtool_sTqOvt03 0 2 4 this 3 1362  4 axis 1 1326  
447 14 Dtool_sTqOBPUv 0 4 411 1323 0 14 Dtool_sTqOBPUv 0 4 4 this 3 1362  1 x 1 1329  1 y 1 1329  1 z 1 1329  
448 14 Dtool_sTqOvJ_0 0 4 412 1323 0 14 Dtool_sTqOvJ_0 0 3 4 this 3 1362  7 torque1 1 1329  7 torque2 1 1329  
449 14 Dtool_sTqOPXM2 0 7 413 1331 0 14 Dtool_sTqOPXM2 0 1 4 this 3 1432  
450 14 Dtool_sTqOlbiC 0 7 414 1331 0 14 Dtool_sTqOlbiC 0 1 4 this 3 1432  
451 14 Dtool_sTqOxF1J 0 7 415 1331 0 14 Dtool_sTqOxF1J 0 1 4 this 3 1432  
452 14 Dtool_sTqO_32J 0 7 416 1331 0 14 Dtool_sTqO_32J 0 1 4 this 3 1432  
453 14 Dtool_sTqOR8Fo 0 6 417 1329 0 14 Dtool_sTqOR8Fo 0 1 4 this 3 1432  
454 14 Dtool_sTqOlujE 0 6 418 1329 0 14 Dtool_sTqOlujE 0 1 4 this 3 1432  
455 14 Dtool_sTqOFxIF 0 6 419 1329 0 14 Dtool_sTqOFxIF 0 1 4 this 3 1432  
456 14 Dtool_sTqOno7T 0 4 420 1323 0 14 Dtool_sTqOno7T 0 3 4 this 3 1362  4 axis 1 1330  3 val 1 1329  
457 14 Dtool_sTqOjvkg 0 4 421 1323 0 14 Dtool_sTqOjvkg 0 3 4 this 3 1362  4 axis 1 1330  3 val 1 1329  
458 14 Dtool_sTqOnuGl 0 4 422 1323 0 14 Dtool_sTqOnuGl 0 3 4 this 3 1362  4 axis 1 1330  3 val 1 1329  
459 14 Dtool_sTqOFJC5 0 4 423 1323 0 14 Dtool_sTqOFJC5 0 3 4 this 3 1362  4 axis 1 1330  3 val 1 1329  
460 14 Dtool_sTqO7NIm 0 4 424 1323 0 14 Dtool_sTqO7NIm 0 3 4 this 3 1362  4 axis 1 1330  3 val 1 1329  
461 14 Dtool_sTqO7ZGB 0 4 425 1323 0 14 Dtool_sTqO7ZGB 0 3 4 this 3 1362  4 axis 1 1330  3 val 1 1329  
462 14 Dtool_sTqOz6Cy 0 4 426 1323 0 14 Dtool_sTqOz6Cy 0 3 4 this 3 1362  4 axis 1 1330  3 val 1 1329  
463 14 Dtool_sTqOuzKd 0 4 427 1323 0 14 Dtool_sTqOuzKd 0 3 4 this 3 1362  4 axis 1 1330  3 val 1 1329  
464 14 Dtool_sTqOJEDS 0 4 428 1323 0 14 Dtool_sTqOJEDS 0 3 4 this 3 1362  4 axis 1 1330  3 val 1 1329  
465 14 Dtool_sTqOieeQ 0 4 429 1323 0 14 Dtool_sTqOieeQ 0 3 4 this 3 1362  4 axis 1 1330  3 val 1 1329  
466 14 Dtool_sTqOVe9I 0 4 430 1323 0 14 Dtool_sTqOVe9I 0 3 4 this 3 1362  4 axis 1 1330  3 val 1 1329  
467 14 Dtool_sTqOauSy 0 6 431 1329 0 14 Dtool_sTqOauSy 0 2 4 this 3 1432  4 axis 1 1330  
468 14 Dtool_sTqOGh9_ 0 6 432 1329 0 14 Dtool_sTqOGh9_ 0 2 4 this 3 1432  4 axis 1 1330  
469 14 Dtool_sTqOSz85 0 6 433 1329 0 14 Dtool_sTqOSz85 0 2 4 this 3 1432  4 axis 1 1330  
470 14 Dtool_sTqOjCW1 0 6 434 1329 0 14 Dtool_sTqOjCW1 0 2 4 this 3 1432  4 axis 1 1330  
471 14 Dtool_sTqOmEed 0 6 435 1329 0 14 Dtool_sTqOmEed 0 2 4 this 3 1432  4 axis 1 1330  
472 14 Dtool_sTqOSbSj 0 6 436 1329 0 14 Dtool_sTqOSbSj 0 2 4 this 3 1432  4 axis 1 1330  
473 14 Dtool_sTqOlv4G 0 6 437 1329 0 14 Dtool_sTqOlv4G 0 2 4 this 3 1432  4 axis 1 1330  
474 14 Dtool_sTqODCdB 0 6 438 1329 0 14 Dtool_sTqODCdB 0 2 4 this 3 1432  4 axis 1 1330  
475 14 Dtool_sTqOyLU2 0 6 439 1329 0 14 Dtool_sTqOyLU2 0 2 4 this 3 1432  4 axis 1 1330  
476 14 Dtool_sTqO6YwM 0 6 440 1329 0 14 Dtool_sTqO6YwM 0 2 4 this 3 1432  4 axis 1 1330  
477 14 Dtool_sTqOncPF 0 6 441 1329 0 14 Dtool_sTqOncPF 0 2 4 this 3 1432  4 axis 1 1330  
478 14 Dtool_sTqOT6Ks 0 7 442 1335 0 14 Dtool_sTqOT6Ks 0 0 
479 14 Dtool_sTqOfM0Q 0 7 444 1358 0 14 Dtool_sTqOfM0Q 0 1 5 world 1 1320  
480 14 Dtool_sTqOkrK4 0 7 444 1358 0 14 Dtool_sTqOkrK4 0 2 5 world 1 1320  11 joint_group 1 1336  
481 14 Dtool_sTqOQ9qv 0 4 445 1323 0 14 Dtool_sTqOQ9qv 0 2 4 this 3 1358  6 anchor 1 1326  
482 14 Dtool_sTqOa7Ln 0 4 445 1323 0 14 Dtool_sTqOa7Ln 491 // Filename: odeHingeJoint.I
// Created by:  joswilso (27Dec06)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
//////////////////////////////////////////////////////////////////// 4 4 this 3 1358  1 x 1 1329  1 y 1 1329  1 z 1 1329  
483 14 Dtool_sTqOry6s 0 4 446 1323 0 14 Dtool_sTqOry6s 0 3 4 this 3 1358  6 anchor 1 1326  3 vec 1 1326  
484 14 Dtool_sTqOy9wf 0 4 446 1323 0 14 Dtool_sTqOy9wf 0 7 4 this 3 1358  1 x 1 1329  1 y 1 1329  1 z 1 1329  2 ax 1 1329  2 ay 1 1329  2 az 1 1329  
485 14 Dtool_sTqOlcqG 0 4 447 1323 0 14 Dtool_sTqOlcqG 0 2 4 this 3 1358  4 axis 1 1326  
486 14 Dtool_sTqOZIXy 0 4 447 1323 0 14 Dtool_sTqOZIXy 0 4 4 this 3 1358  1 x 1 1329  1 y 1 1329  1 z 1 1329  
487 14 Dtool_sTqOBsMf 0 4 448 1323 0 14 Dtool_sTqOBsMf 0 2 4 this 3 1358  6 torque 1 1329  
488 14 Dtool_sTqOBnc6 0 7 449 1331 0 14 Dtool_sTqOBnc6 0 1 4 this 3 1434  
489 14 Dtool_sTqOHU0M 0 7 450 1331 0 14 Dtool_sTqOHU0M 0 1 4 this 3 1434  
490 14 Dtool_sTqOa6ej 0 7 451 1331 0 14 Dtool_sTqOa6ej 0 1 4 this 3 1434  
491 14 Dtool_sTqOY2cD 0 6 452 1329 0 14 Dtool_sTqOY2cD 0 1 4 this 3 1434  
492 14 Dtool_sTqOrr56 0 6 453 1329 0 14 Dtool_sTqOrr56 0 1 4 this 3 1434  
493 14 Dtool_sTqOYOgY 0 4 454 1323 0 14 Dtool_sTqOYOgY 0 2 4 this 3 1358  3 val 1 1329  
494 14 Dtool_sTqOm95g 0 4 455 1323 0 14 Dtool_sTqOm95g 0 2 4 this 3 1358  3 val 1 1329  
495 14 Dtool_sTqOgsTY 0 4 456 1323 0 14 Dtool_sTqOgsTY 0 2 4 this 3 1358  3 val 1 1329  
496 14 Dtool_sTqONgqR 0 4 457 1323 0 14 Dtool_sTqONgqR 0 2 4 this 3 1358  3 val 1 1329  
497 14 Dtool_sTqO5RMy 0 4 458 1323 0 14 Dtool_sTqO5RMy 0 2 4 this 3 1358  3 val 1 1329  
498 14 Dtool_sTqOM1zg 0 4 459 1323 0 14 Dtool_sTqOM1zg 0 2 4 this 3 1358  3 val 1 1329  
499 14 Dtool_sTqOJntw 0 4 460 1323 0 14 Dtool_sTqOJntw 0 2 4 this 3 1358  3 val 1 1329  
500 14 Dtool_sTqOvwc4 0 4 461 1323 0 14 Dtool_sTqOvwc4 0 2 4 this 3 1358  3 val 1 1329  
501 14 Dtool_sTqOhHG8 0 4 462 1323 0 14 Dtool_sTqOhHG8 0 2 4 this 3 1358  3 val 1 1329  
502 14 Dtool_sTqOgPB_ 0 6 463 1329 0 14 Dtool_sTqOgPB_ 0 1 4 this 3 1434  
503 14 Dtool_sTqOhhaG 0 6 464 1329 0 14 Dtool_sTqOhhaG 0 1 4 this 3 1434  
504 14 Dtool_sTqO0IBM 0 6 465 1329 0 14 Dtool_sTqO0IBM 0 1 4 this 3 1434  
505 14 Dtool_sTqOFg_4 0 6 466 1329 0 14 Dtool_sTqOFg_4 0 1 4 this 3 1434  
506 14 Dtool_sTqO4TE_ 0 6 467 1329 0 14 Dtool_sTqO4TE_ 0 1 4 this 3 1434  
507 14 Dtool_sTqOZGNE 0 6 468 1329 0 14 Dtool_sTqOZGNE 0 1 4 this 3 1434  
508 14 Dtool_sTqOb_ak 0 6 469 1329 0 14 Dtool_sTqOb_ak 0 1 4 this 3 1434  
509 14 Dtool_sTqO7xqh 0 6 470 1329 0 14 Dtool_sTqO7xqh 0 1 4 this 3 1434  
510 14 Dtool_sTqO5kUl 0 6 471 1329 0 14 Dtool_sTqO5kUl 0 1 4 this 3 1434  
511 14 Dtool_sTqOimIk 0 7 472 1335 0 14 Dtool_sTqOimIk 0 0 
512 14 Dtool_sTqOgcW0 0 7 474 1436 1125 14 Dtool_sTqOgcW0 0 0 
513 14 Dtool_sTqO6fCE 0 7 474 1436 1125 14 Dtool_sTqO6fCE 0 1 4 copy 1 1437  
514 14 Dtool_sTqOvmwH 0 6 475 1436 0 14 Dtool_sTqOvmwH 0 2 4 this 3 1436  4 copy 1 1437  
515 14 Dtool_sTqOvxzZ 0 4 477 1323 0 14 Dtool_sTqOvxzZ 0 2 4 this 3 1436  5 joint 1 1346  
516 14 Dtool_sTqOOwzG 0 6 478 1324 0 14 Dtool_sTqOOwzG 0 2 4 this 3 1436  5 joint 1 1346  
517 14 Dtool_sTqO1juF 0 4 479 1323 0 14 Dtool_sTqO1juF 0 2 4 this 3 1436  5 other 1 1437  
518 14 Dtool_sTqOmEnm 0 4 480 1323 0 14 Dtool_sTqOmEnm 0 2 4 this 3 1436  5 other 1 1437  
519 14 Dtool_sTqOQUZh 0 4 481 1323 0 14 Dtool_sTqOQUZh 0 1 4 this 3 1436  
520 14 Dtool_sTqOipL4 0 6 482 1324 0 14 Dtool_sTqOipL4 0 2 4 this 3 1437  5 joint 1 1346  
521 14 Dtool_sTqOl1W8 0 4 483 1323 0 14 Dtool_sTqOl1W8 0 1 4 this 3 1436  
522 14 Dtool_sTqODtqf 0 6 484 1324 0 14 Dtool_sTqODtqf 0 1 4 this 3 1437  
523 14 Dtool_sTqOfBqm 0 6 485 1330 0 14 Dtool_sTqOfBqm 0 1 4 this 3 1437  
524 14 Dtool_sTqOMsVr 0 7 486 1345 0 14 Dtool_sTqOMsVr 0 2 4 this 3 1437  5 index 1 1330  
525 14 Dtool_sTqOHE_7 0 7 487 1345 0 14 Dtool_sTqOHE_7 0 2 4 this 3 1437  5 index 1 1330  
526 14 Dtool_sTqOBtOa 0 6 488 1330 0 14 Dtool_sTqOBtOa 333 ////////////////////////////////////////////////////////////////////
//     Function: OdeJointCollection::size
//       Access: Published
//  Description: Returns the number of joints in the collection.  This
//               is the same thing as get_num_joints().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1437  
527 14 Dtool_sTqOvSRf 0 6 489 1436 0 14 Dtool_sTqOvSRf 279 ////////////////////////////////////////////////////////////////////
//     Function: OdeJointCollection::operator +=
//       Access: Published
//  Description: Appends the other list onto the end of this one.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1436  5 other 1 1437  
528 14 Dtool_sTqO8PkF 0 7 490 1436 1125 14 Dtool_sTqO8PkF 324 ////////////////////////////////////////////////////////////////////
//     Function: OdeJointCollection::operator +
//       Access: Published
//  Description: Returns a OdeJointCollection representing the
//               concatenation of the two lists.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1437  5 other 1 1437  
529 14 Dtool_sTqO5DtV 0 7 492 1366 0 14 Dtool_sTqO5DtV 0 1 5 world 1 1320  
530 14 Dtool_sTqOYSGf 0 7 492 1366 0 14 Dtool_sTqOYSGf 0 2 5 world 1 1320  11 joint_group 1 1336  
531 14 Dtool_sTqOIhPc 0 4 493 1323 0 14 Dtool_sTqOIhPc 0 2 4 this 3 1366  3 num 1 1330  
532 14 Dtool_sTqO3IXR 0 4 494 1323 0 14 Dtool_sTqO3IXR 0 4 4 this 3 1366  4 anum 1 1330  3 rel 1 1330  4 axis 1 1326  
533 14 Dtool_sTqOeCSw 0 4 494 1323 0 14 Dtool_sTqOeCSw 0 6 4 this 3 1366  4 anum 1 1330  3 rel 1 1330  1 x 1 1329  1 y 1 1329  1 z 1 1329  
534 14 Dtool_sTqO1CQH 0 4 495 1323 0 14 Dtool_sTqO1CQH 0 3 4 this 3 1366  9 parameter 1 1330  5 value 1 1329  
535 14 Dtool_sTqOOpwW 0 6 496 1330 0 14 Dtool_sTqOOpwW 0 1 4 this 3 1439  
536 14 Dtool_sTqOfVAa 0 7 497 1331 0 14 Dtool_sTqOfVAa 0 2 4 this 3 1439  4 anum 1 1330  
537 14 Dtool_sTqOUAiD 0 6 498 1329 0 14 Dtool_sTqOUAiD 0 2 4 this 3 1439  9 parameter 1 1330  
538 14 Dtool_sTqOl3Gm 0 7 499 1335 0 14 Dtool_sTqOl3Gm 0 0 
539 14 Dtool_sTqO323R 0 7 501 1364 0 14 Dtool_sTqO323R 0 1 5 world 1 1320  
540 14 Dtool_sTqOc44o 0 7 501 1364 0 14 Dtool_sTqOc44o 0 2 5 world 1 1320  11 joint_group 1 1336  
541 14 Dtool_sTqOEhZD 0 7 502 1335 0 14 Dtool_sTqOEhZD 0 0 
542 14 Dtool_sTqO_I6P 0 7 504 1367 0 14 Dtool_sTqO_I6P 0 1 5 world 1 1320  
543 14 Dtool_sTqOP5XS 0 7 504 1367 0 14 Dtool_sTqOP5XS 0 2 5 world 1 1320  11 joint_group 1 1336  
544 14 Dtool_sTqOnFwY 0 4 505 1323 0 14 Dtool_sTqOnFwY 493 // Filename: odePlane2dJoint.I
// Created by:  joswilso (27Dec06)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
//////////////////////////////////////////////////////////////////// 3 4 this 3 1367  9 parameter 1 1330  5 value 1 1329  
545 14 Dtool_sTqOn9hi 0 4 506 1323 0 14 Dtool_sTqOn9hi 0 3 4 this 3 1367  9 parameter 1 1330  5 value 1 1329  
546 14 Dtool_sTqO4759 0 4 507 1323 0 14 Dtool_sTqO4759 0 3 4 this 3 1367  9 parameter 1 1330  5 value 1 1329  
547 14 Dtool_sTqO9i2A 0 7 508 1335 0 14 Dtool_sTqO9i2A 0 0 
548 14 Dtool_sTqOmjkN 0 7 510 1406 0 14 Dtool_sTqOmjkN 0 1 6 params 1 1441  
549 14 Dtool_sTqOYnwq 0 7 510 1406 0 14 Dtool_sTqOYnwq 0 2 5 space 1 1387  6 params 1 1441  
550 14 Dtool_sTqOs4w8 0 7 510 1406 0 14 Dtool_sTqOs4w8 0 5 5 space 1 1387  1 a 1 1329  1 b 1 1329  1 c 1 1329  1 d 1 1329  
551 14 Dtool_sTqOCRGY 0 7 510 1406 0 14 Dtool_sTqOCRGY 0 4 1 a 1 1329  1 b 1 1329  1 c 1 1329  1 d 1 1329  
552 14 Dtool_sTqO0DLj 0 4 511 1323 0 14 Dtool_sTqO0DLj 0 2 4 this 3 1406  6 params 1 1441  
553 14 Dtool_sTqO_vSr 0 4 511 1323 0 14 Dtool_sTqO_vSr 490 // Filename: odePlaneGeom.I
// Created by:  joswilso (27Dec06)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
//////////////////////////////////////////////////////////////////// 5 4 this 3 1406  1 a 1 1329  1 b 1 1329  1 c 1 1329  1 d 1 1329  
554 14 Dtool_sTqOfzg_ 0 7 512 1386 0 14 Dtool_sTqOfzg_ 0 1 4 this 3 1443  
555 14 Dtool_sTqOWeOH 0 6 513 1329 0 14 Dtool_sTqOWeOH 0 2 4 this 3 1443  1 p 1 1410  
556 14 Dtool_sTqOGPkc 0 6 513 1329 0 14 Dtool_sTqOGPkc 0 4 4 this 3 1443  1 x 1 1329  1 y 1 1329  1 z 1 1329  
557 14 Dtool_sTqOSlmS 0 7 514 1335 0 14 Dtool_sTqOSlmS 0 0 
558 14 Dtool_sTqOrKJx 0 7 516 1399 0 14 Dtool_sTqOrKJx 0 3 6 center 1 1410  7 extents 1 1326  5 depth 1 1330  
559 14 Dtool_sTqO5rmg 0 7 516 1399 0 14 Dtool_sTqO5rmg 0 4 5 space 1 1387  6 center 1 1410  7 extents 1 1326  5 depth 1 1330  
560 14 Dtool_sTqOQ4wa 0 7 517 1335 0 14 Dtool_sTqOQ4wa 0 0 
561 14 Dtool_sTqOqeCA 0 7 519 1407 0 14 Dtool_sTqOqeCA 0 2 5 space 1 1387  6 length 1 1329  
562 14 Dtool_sTqOIts7 0 7 519 1407 0 14 Dtool_sTqOIts7 0 1 6 length 1 1329  
563 14 Dtool_sTqOUVPw 0 4 520 1323 0 14 Dtool_sTqOUVPw 488 // Filename: odeRayGeom.I
// Created by:  joswilso (27Dec06)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
//////////////////////////////////////////////////////////////////// 2 4 this 3 1407  6 length 1 1329  
564 14 Dtool_sTqO_jaj 0 6 521 1329 0 14 Dtool_sTqO_jaj 0 1 4 this 3 1407  
565 14 Dtool_sTqOnrTu 0 4 522 1323 0 14 Dtool_sTqOnrTu 0 3 4 this 3 1407  5 start 1 1326  3 dir 1 1326  
566 14 Dtool_sTqOVXdl 0 4 522 1323 0 14 Dtool_sTqOVXdl 0 7 4 this 3 1407  2 px 1 1329  2 py 1 1329  2 pz 1 1329  2 dx 1 1329  2 dy 1 1329  2 dz 1 1329  
567 14 Dtool_sTqOPOpo 0 4 523 1323 0 14 Dtool_sTqOPOpo 0 3 4 this 3 1445  5 start 1 1331  3 dir 1 1331  
568 14 Dtool_sTqO557J 0 7 524 1331 0 14 Dtool_sTqO557J 0 1 4 this 3 1445  
569 14 Dtool_sTqO4Zrt 0 7 525 1331 0 14 Dtool_sTqO4Zrt 0 1 4 this 3 1445  
570 14 Dtool_sTqOoG1D 0 4 526 1323 0 14 Dtool_sTqOoG1D 0 3 4 this 3 1407  13 first_contact 1 1330  13 backface_cull 1 1330  
571 14 Dtool_sTqOJceH 0 6 528 1330 0 14 Dtool_sTqOJceH 0 1 4 this 3 1445  
572 14 Dtool_sTqOdAHA 0 6 529 1330 0 14 Dtool_sTqOdAHA 0 1 4 this 3 1445  
573 14 Dtool_sTqOmf4W 0 4 530 1323 0 14 Dtool_sTqOmf4W 0 2 4 this 3 1407  11 closest_hit 1 1330  
574 14 Dtool_sTqO86ea 0 6 531 1330 0 14 Dtool_sTqO86ea 0 1 4 this 3 1407  
575 14 Dtool_sTqObx9L 0 7 532 1335 0 14 Dtool_sTqObx9L 0 0 
576 14 Dtool_sTqOanNX 0 7 534 1397 0 14 Dtool_sTqOanNX 0 0 
577 14 Dtool_sTqO3oLp 0 7 534 1397 0 14 Dtool_sTqO3oLp 0 1 5 space 1 1387  
578 14 Dtool_sTqOGcQw 0 7 535 1335 0 14 Dtool_sTqOGcQw 0 0 
579 14 Dtool_sTqO4ugR 0 7 537 1359 0 14 Dtool_sTqO4ugR 0 1 5 world 1 1320  
580 14 Dtool_sTqOZI5a 0 7 537 1359 0 14 Dtool_sTqOZI5a 0 2 5 world 1 1320  11 joint_group 1 1336  
581 14 Dtool_sTqOfgOX 0 4 538 1323 0 14 Dtool_sTqOfgOX 0 2 4 this 3 1359  4 axis 1 1326  
582 14 Dtool_sTqOMn8O 0 4 538 1323 0 14 Dtool_sTqOMn8O 492 // Filename: odeSliderJoint.I
// Created by:  joswilso (27Dec06)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
//////////////////////////////////////////////////////////////////// 4 4 this 3 1359  1 x 1 1329  1 y 1 1329  1 z 1 1329  
583 14 Dtool_sTqOOVHP 0 4 539 1323 0 14 Dtool_sTqOOVHP 0 3 4 this 3 1359  4 axis 1 1326  3 vec 1 1326  
584 14 Dtool_sTqOLtnI 0 4 539 1323 0 14 Dtool_sTqOLtnI 0 7 4 this 3 1359  1 x 1 1329  1 y 1 1329  1 z 1 1329  2 ax 1 1329  2 ay 1 1329  2 az 1 1329  
585 14 Dtool_sTqOTFFs 0 4 540 1323 0 14 Dtool_sTqOTFFs 0 2 4 this 3 1359  5 force 1 1329  
586 14 Dtool_sTqOCxZh 0 6 541 1329 0 14 Dtool_sTqOCxZh 0 1 4 this 3 1447  
587 14 Dtool_sTqOST18 0 6 542 1329 0 14 Dtool_sTqOST18 0 1 4 this 3 1447  
588 14 Dtool_sTqONgCx 0 7 543 1331 0 14 Dtool_sTqONgCx 0 1 4 this 3 1447  
589 14 Dtool_sTqOmLeS 0 4 544 1323 0 14 Dtool_sTqOmLeS 0 2 4 this 3 1359  3 val 1 1329  
590 14 Dtool_sTqOqKJf 0 4 545 1323 0 14 Dtool_sTqOqKJf 0 2 4 this 3 1359  3 val 1 1329  
591 14 Dtool_sTqOAOYL 0 4 546 1323 0 14 Dtool_sTqOAOYL 0 2 4 this 3 1359  3 val 1 1329  
592 14 Dtool_sTqOaT52 0 4 547 1323 0 14 Dtool_sTqOaT52 0 2 4 this 3 1359  3 val 1 1329  
593 14 Dtool_sTqOMreJ 0 4 548 1323 0 14 Dtool_sTqOMreJ 0 2 4 this 3 1359  3 val 1 1329  
594 14 Dtool_sTqOlnBc 0 4 549 1323 0 14 Dtool_sTqOlnBc 0 2 4 this 3 1359  3 val 1 1329  
595 14 Dtool_sTqOIaUY 0 4 550 1323 0 14 Dtool_sTqOIaUY 0 2 4 this 3 1359  3 val 1 1329  
596 14 Dtool_sTqONU7P 0 4 551 1323 0 14 Dtool_sTqONU7P 0 2 4 this 3 1359  3 val 1 1329  
597 14 Dtool_sTqOLLyE 0 4 552 1323 0 14 Dtool_sTqOLLyE 0 2 4 this 3 1359  3 val 1 1329  
598 14 Dtool_sTqOKl_C 0 6 553 1329 0 14 Dtool_sTqOKl_C 0 1 4 this 3 1447  
599 14 Dtool_sTqO2lnP 0 6 554 1329 0 14 Dtool_sTqO2lnP 0 1 4 this 3 1447  
600 14 Dtool_sTqO8pEC 0 6 555 1329 0 14 Dtool_sTqO8pEC 0 1 4 this 3 1447  
601 14 Dtool_sTqOGPhh 0 6 556 1329 0 14 Dtool_sTqOGPhh 0 1 4 this 3 1447  
602 14 Dtool_sTqOUIDl 0 6 557 1329 0 14 Dtool_sTqOUIDl 0 1 4 this 3 1447  
603 14 Dtool_sTqO39yI 0 6 558 1329 0 14 Dtool_sTqO39yI 0 1 4 this 3 1447  
604 14 Dtool_sTqOMWAP 0 6 559 1329 0 14 Dtool_sTqOMWAP 0 1 4 this 3 1447  
605 14 Dtool_sTqOhP53 0 6 560 1329 0 14 Dtool_sTqOhP53 0 1 4 this 3 1447  
606 14 Dtool_sTqOY_xs 0 6 561 1329 0 14 Dtool_sTqOY_xs 0 1 4 this 3 1447  
607 14 Dtool_sTqOpG9F 0 7 562 1335 0 14 Dtool_sTqOpG9F 0 0 
608 14 Dtool_sTqOyzLV 0 7 564 1408 0 14 Dtool_sTqOyzLV 0 1 4 geom 1 1396  
609 14 Dtool_sTqOb_sr 0 7 564 1408 0 14 Dtool_sTqOb_sr 0 2 5 space 1 1387  6 radius 1 1329  
610 14 Dtool_sTqOV_0T 0 7 564 1408 0 14 Dtool_sTqOV_0T 0 1 6 radius 1 1329  
611 14 Dtool_sTqOXrVf 0 4 565 1323 0 14 Dtool_sTqOXrVf 491 // Filename: odeSphereGeom.I
// Created by:  joswilso (27Dec06)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
//////////////////////////////////////////////////////////////////// 2 4 this 3 1408  6 radius 1 1329  
612 14 Dtool_sTqObwFy 0 6 566 1329 0 14 Dtool_sTqObwFy 0 1 4 this 3 1449  
613 14 Dtool_sTqOUms_ 0 6 567 1329 0 14 Dtool_sTqOUms_ 0 2 4 this 3 1449  1 p 1 1410  
614 14 Dtool_sTqOmqCr 0 6 567 1329 0 14 Dtool_sTqOmqCr 0 4 4 this 3 1449  1 x 1 1329  1 y 1 1329  1 z 1 1329  
615 14 Dtool_sTqO__Wp 0 7 568 1335 0 14 Dtool_sTqO__Wp 0 0 
616 14 Dtool_sTqOWaU0 0 7 571 1454 0 14 Dtool_sTqOWaU0 137 ////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////// 2 5 model 1 1451  11 use_normals 1 1324  
617 14 Dtool_sTqOqx4u 0 7 571 1454 0 14 Dtool_sTqOqx4u 137 ////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////// 1 5 model 1 1451  
618 14 Dtool_sTqO9RYo 0 4 572 1323 0 14 Dtool_sTqO9RYo 0 1 4 this 3 1454  
619 14 Dtool_sTqO7eXr 0 4 573 1323 0 14 Dtool_sTqO7eXr 221 // INLINE void set(int data_id, void* in_data);
// INLINE void* get(int data_id);
// INLINE void get_buffer(unsigned char** buf, int* buf_len) const;
// INLINE void set_buffer(unsigned char* buf);
// INLINE void update(); 3 4 this 3 1455  3 out 1 1352  6 indent 1 1354  
620 14 Dtool_sTqOSGVZ 0 4 573 1323 0 14 Dtool_sTqOSGVZ 221 // INLINE void set(int data_id, void* in_data);
// INLINE void* get(int data_id);
// INLINE void get_buffer(unsigned char** buf, int* buf_len) const;
// INLINE void set_buffer(unsigned char* buf);
// INLINE void update(); 2 4 this 3 1455  3 out 1 1352  
621 14 Dtool_sTqOiAZv 0 4 573 1323 0 14 Dtool_sTqOiAZv 221 // INLINE void set(int data_id, void* in_data);
// INLINE void* get(int data_id);
// INLINE void get_buffer(unsigned char** buf, int* buf_len) const;
// INLINE void set_buffer(unsigned char* buf);
// INLINE void update(); 1 4 this 3 1455  
622 14 Dtool_sTqOfNl3 0 4 574 1323 0 14 Dtool_sTqOfNl3 221 // INLINE void set(int data_id, void* in_data);
// INLINE void* get(int data_id);
// INLINE void get_buffer(unsigned char** buf, int* buf_len) const;
// INLINE void set_buffer(unsigned char* buf);
// INLINE void update(); 2 4 this 3 1455  3 out 1 1352  
623 14 Dtool_sTqOqO9v 0 7 575 1335 0 14 Dtool_sTqOqO9v 0 0 
624 14 Dtool_sTqOwQ8d 0 7 577 1409 0 14 Dtool_sTqOwQ8d 0 2 5 space 1 1387  4 data 1 1454  
625 14 Dtool_sTqOOaZH 0 7 577 1409 0 14 Dtool_sTqOOaZH 162 /* ODE_API dGeomID dCreateTriMesh(dSpaceID space, dTriMeshDataID Data, dTriCallback* Callback, dTriArrayCallback* ArrayCallback, dTriRayCallback* RayCallback); */ 1 4 data 1 1454  
626 14 Dtool_sTqOU_3U 0 7 577 1409 0 14 Dtool_sTqOU_3U 0 1 4 copy 1 1457  
627 14 Dtool_sTqOY90V 0 4 578 1323 0 14 Dtool_sTqOY90V 0 1 4 this 3 1409  
628 14 Dtool_sTqOOglb 0 4 579 1323 0 14 Dtool_sTqOOglb 0 2 4 this 3 1409  4 data 1 1454  
629 14 Dtool_sTqOVIJR 0 7 580 1454 0 14 Dtool_sTqOVIJR 0 1 4 this 3 1457  
630 14 Dtool_sTqO2HMT 0 4 581 1323 0 14 Dtool_sTqO2HMT 492 // Filename: odeTriMeshGeom.I
// Created by:  joswilso (27Dec06)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
//////////////////////////////////////////////////////////////////// 2 4 this 3 1409  4 data 1 1454  
631 14 Dtool_sTqOTQpZ 0 7 582 1454 0 14 Dtool_sTqOTQpZ 0 1 4 this 3 1457  
632 14 Dtool_sTqO1PsA 0 4 583 1323 0 14 Dtool_sTqO1PsA 0 3 4 this 3 1409  10 geom_class 1 1330  6 enable 1 1330  
633 14 Dtool_sTqO61Qi 0 6 584 1330 0 14 Dtool_sTqO61Qi 0 2 4 this 3 1457  10 geom_class 1 1330  
634 14 Dtool_sTqOy1OF 0 4 585 1323 0 14 Dtool_sTqOy1OF 0 2 4 this 3 1409  4 geom 1 1390  
635 14 Dtool_sTqOXfUH 0 4 586 1323 0 14 Dtool_sTqOXfUH 0 5 4 this 3 1457  10 face_index 1 1330  2 v0 1 1379  2 v1 1 1379  2 v2 1 1379  
636 14 Dtool_sTqOyBnD 0 7 587 1379 0 14 Dtool_sTqOyBnD 0 4 4 this 3 1457  10 face_index 1 1330  1 u 1 1329  1 v 1 1329  
637 14 Dtool_sTqOcqRE 0 6 588 1330 0 14 Dtool_sTqOcqRE 0 1 4 this 3 1457  
638 14 Dtool_sTqOhUZd 0 7 589 1335 0 14 Dtool_sTqOhUZd 0 0 
639 14 Dtool_sTqOFrPO 0 7 591 1361 0 14 Dtool_sTqOFrPO 0 1 5 world 1 1320  
640 14 Dtool_sTqOtIUq 0 7 591 1361 0 14 Dtool_sTqOtIUq 0 2 5 world 1 1320  11 joint_group 1 1336  
641 14 Dtool_sTqOxQ_F 0 4 592 1323 0 14 Dtool_sTqOxQ_F 0 2 4 this 3 1361  6 anchor 1 1326  
642 14 Dtool_sTqOoWc1 0 4 592 1323 0 14 Dtool_sTqOoWc1 495 // Filename: odeUniversalJoint.I
// Created by:  joswilso (27Dec06)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
//////////////////////////////////////////////////////////////////// 4 4 this 3 1361  1 x 1 1329  1 y 1 1329  1 z 1 1329  
643 14 Dtool_sTqOKFpG 0 4 593 1323 0 14 Dtool_sTqOKFpG 0 2 4 this 3 1361  4 axis 1 1326  
644 14 Dtool_sTqOXGHe 0 4 593 1323 0 14 Dtool_sTqOXGHe 0 4 4 this 3 1361  1 x 1 1329  1 y 1 1329  1 z 1 1329  
645 14 Dtool_sTqOTFh3 0 4 594 1323 0 14 Dtool_sTqOTFh3 0 2 4 this 3 1361  4 axis 1 1326  
646 14 Dtool_sTqOdG_O 0 4 594 1323 0 14 Dtool_sTqOdG_O 0 4 4 this 3 1361  1 x 1 1329  1 y 1 1329  1 z 1 1329  
647 14 Dtool_sTqOVgez 0 4 595 1323 0 14 Dtool_sTqOVgez 0 3 4 this 3 1361  7 torque1 1 1329  7 torque2 1 1329  
648 14 Dtool_sTqO6Lqu 0 7 596 1331 0 14 Dtool_sTqO6Lqu 0 1 4 this 3 1459  
649 14 Dtool_sTqOwuzT 0 7 597 1331 0 14 Dtool_sTqOwuzT 0 1 4 this 3 1459  
650 14 Dtool_sTqOP20D 0 7 598 1331 0 14 Dtool_sTqOP20D 0 1 4 this 3 1459  
651 14 Dtool_sTqOU2s0 0 7 599 1331 0 14 Dtool_sTqOU2s0 0 1 4 this 3 1459  
652 14 Dtool_sTqOP7Y6 0 6 600 1329 0 14 Dtool_sTqOP7Y6 0 1 4 this 3 1459  
653 14 Dtool_sTqO2_YW 0 6 601 1329 0 14 Dtool_sTqO2_YW 0 1 4 this 3 1459  
654 14 Dtool_sTqOkOSp 0 6 602 1329 0 14 Dtool_sTqOkOSp 0 1 4 this 3 1459  
655 14 Dtool_sTqOvJSF 0 6 603 1329 0 14 Dtool_sTqOvJSF 0 1 4 this 3 1459  
656 14 Dtool_sTqO2vas 0 4 604 1323 0 14 Dtool_sTqO2vas 0 3 4 this 3 1361  4 axis 1 1330  3 val 1 1329  
657 14 Dtool_sTqO_K7k 0 4 605 1323 0 14 Dtool_sTqO_K7k 0 3 4 this 3 1361  4 axis 1 1330  3 val 1 1329  
658 14 Dtool_sTqODmVf 0 4 606 1323 0 14 Dtool_sTqODmVf 0 3 4 this 3 1361  4 axis 1 1330  3 val 1 1329  
659 14 Dtool_sTqO7mGj 0 4 607 1323 0 14 Dtool_sTqO7mGj 0 3 4 this 3 1361  4 axis 1 1330  3 val 1 1329  
660 14 Dtool_sTqOEx8V 0 4 608 1323 0 14 Dtool_sTqOEx8V 0 3 4 this 3 1361  4 axis 1 1330  3 val 1 1329  
661 14 Dtool_sTqOSFwm 0 4 609 1323 0 14 Dtool_sTqOSFwm 0 3 4 this 3 1361  4 axis 1 1330  3 val 1 1329  
662 14 Dtool_sTqO5O28 0 4 610 1323 0 14 Dtool_sTqO5O28 0 3 4 this 3 1361  4 axis 1 1330  3 val 1 1329  
663 14 Dtool_sTqO6BL0 0 4 611 1323 0 14 Dtool_sTqO6BL0 0 3 4 this 3 1361  4 axis 1 1330  3 val 1 1329  
664 14 Dtool_sTqO2Yas 0 4 612 1323 0 14 Dtool_sTqO2Yas 0 3 4 this 3 1361  4 axis 1 1330  3 val 1 1329  
665 14 Dtool_sTqOCZFa 0 6 613 1329 0 14 Dtool_sTqOCZFa 0 2 4 this 3 1459  4 axis 1 1330  
666 14 Dtool_sTqO6nnS 0 6 614 1329 0 14 Dtool_sTqO6nnS 0 2 4 this 3 1459  4 axis 1 1330  
667 14 Dtool_sTqOiNA8 0 6 615 1329 0 14 Dtool_sTqOiNA8 0 2 4 this 3 1459  4 axis 1 1330  
668 14 Dtool_sTqOfz2B 0 6 616 1329 0 14 Dtool_sTqOfz2B 0 2 4 this 3 1459  4 axis 1 1330  
669 14 Dtool_sTqOHybx 0 6 617 1329 0 14 Dtool_sTqOHybx 0 2 4 this 3 1459  4 axis 1 1330  
670 14 Dtool_sTqO_0FC 0 6 618 1329 0 14 Dtool_sTqO_0FC 0 2 4 this 3 1459  4 axis 1 1330  
671 14 Dtool_sTqOvlhZ 0 6 619 1329 0 14 Dtool_sTqOvlhZ 0 2 4 this 3 1459  4 axis 1 1330  
672 14 Dtool_sTqONTmt 0 6 620 1329 0 14 Dtool_sTqONTmt 0 2 4 this 3 1459  4 axis 1 1330  
673 14 Dtool_sTqOp60l 0 6 621 1329 0 14 Dtool_sTqOp60l 0 2 4 this 3 1459  4 axis 1 1330  
674 14 Dtool_sTqO8bRh 0 7 622 1335 0 14 Dtool_sTqO8bRh 0 0 
675 14 Dtool_sTqONyab 0 7 624 1345 0 14 Dtool_sTqONyab 283 ////////////////////////////////////////////////////////////////////
//     Function: OdeUtil::get_connecting_joint
//       Access: Public, Static
//  Description: Returns the joint that connects the given bodies.
//////////////////////////////////////////////////////////////////// 2 5 body1 1 1350  5 body2 1 1350  
676 14 Dtool_sTqOibpi 0 7 625 1436 1125 14 Dtool_sTqOibpi 319 ////////////////////////////////////////////////////////////////////
//     Function: OdeUtil::get_connecting_joint_list
//       Access: Public, Static
//  Description: Returns a collection of joints connecting the
//               specified bodies.
//////////////////////////////////////////////////////////////////// 2 5 body1 1 1350  5 body2 1 1350  
677 14 Dtool_sTqOniRD 0 6 626 1330 0 14 Dtool_sTqOniRD 320 ////////////////////////////////////////////////////////////////////
//     Function: OdeUtil::are_connected
//       Access: Public, Static
//  Description: Returns 1 if the given bodies are connected
//               by a joint, returns 0 otherwise.
//////////////////////////////////////////////////////////////////// 2 5 body1 1 1350  5 body2 1 1350  
678 14 Dtool_sTqON05R 0 6 627 1330 0 14 Dtool_sTqON05R 733 ////////////////////////////////////////////////////////////////////
//     Function: OdeUtil::are_connected_excluding
//       Access: Public, Static
//  Description: Returns 1 if the given bodies are connected
//               by a joint that does not match the given
//               joint_type, returns 0 otherwise. This is useful
//               for deciding whether to add contact joints between
//               two bodies: if they are already connected by
//               non-contact joints then it may not be appropriate
//               to add contacts, however it is okay to add more
//               contact between bodies that already have contacts.
//////////////////////////////////////////////////////////////////// 3 5 body1 1 1350  5 body2 1 1350  10 joint_type 1 1330  
679 14 Dtool_sTqO717j 0 7 628 1462 0 14 Dtool_sTqO717j 392 ////////////////////////////////////////////////////////////////////
//     Function: OdeUtil::collide
//       Access: Public, Static
//  Description: Given two geometry objects that potentially touch
//               (geom1 and geom2), generate contact information
//               for them. Returns an OdeCollisionEntry.
//////////////////////////////////////////////////////////////////// 3 5 geom1 1 1390  5 geom2 1 1390  12 max_contacts 1 1461  
680 14 Dtool_sTqO7_xF 0 7 628 1462 0 14 Dtool_sTqO7_xF 392 ////////////////////////////////////////////////////////////////////
//     Function: OdeUtil::collide
//       Access: Public, Static
//  Description: Given two geometry objects that potentially touch
//               (geom1 and geom2), generate contact information
//               for them. Returns an OdeCollisionEntry.
//////////////////////////////////////////////////////////////////// 2 5 geom1 1 1390  5 geom2 1 1390  
681 14 Dtool_sTqOux7A 0 6 629 1330 0 14 Dtool_sTqOux7A 0 4 5 geom1 1 1390  5 geom2 1 1390  3 arg 1 1355  8 callback 1 1355  
682 14 Dtool_sTqOyL0C 0 7 630 1396 0 14 Dtool_sTqOyL0C 0 1 5 space 1 1388  
683 14 Dtool_sTqOrRAh 0 6 631 1329 0 14 Dtool_sTqOrRAh 73 // RAU we can't access OC_infinity as constants are not exposed in python 0 
684 14 Dtool_sTqO3iBL 0 6 632 1330 0 14 Dtool_sTqO3iBL 0 0 
685 14 Dtool_sTqOFFo0 0 4 633 1323 0 14 Dtool_sTqOFFo0 0 1 1 s 1 1330  
193
1270 6 dxBody 0 1025 6 dxBody 6 dxBody 0 0 0 0 0 0 0 0 0 0 0 0 0

1271 6 dxGeom 0 1025 6 dxGeom 6 dxGeom 0 0 0 0 0 0 0 0 0 0 0 0 0

1272 7 dxJoint 0 1025 7 dxJoint 7 dxJoint 0 0 0 0 0 0 0 0 0 0 0 0 0

1273 12 dxJointGroup 0 1025 12 dxJointGroup 12 dxJointGroup 0 0 0 0 0 0 0 0 0 0 0 0 0

1274 7 dxSpace 0 1025 7 dxSpace 7 dxSpace 0 0 0 0 0 0 0 0 0 0 0 0 0

1275 13 dxTriMeshData 0 1025 13 dxTriMeshData 13 dxTriMeshData 0 0 0 0 0 0 0 0 0 0 0 0 0

1276 7 dxWorld 0 1025 7 dxWorld 7 dxWorld 0 0 0 0 0 0 0 0 0 0 0 0 0

1277 8 OdeWorld 0 75777 8 OdeWorld 8 OdeWorld 0 0 0 1 686 0 0 36 687 688 689 690 691 692 693 694 695 696 697 698 699 700 701 702 703 704 705 706 707 708 709 710 711 712 713 714 715 716 717 718 719 720 721 723 0 1 722 1 0 1278 0 0 0 0 181
////////////////////////////////////////////////////////////////////
//       Class : OdeWorld
// Description : 
////////////////////////////////////////////////////////////////////

1278 11 TypedObject 0 2049 11 TypedObject 11 TypedObject 0 0 0 0 0 0 0 0 0 0 0 0 3666
////////////////////////////////////////////////////////////////////
//       Class : TypedObject
// Description : This is an abstract class that all classes which
//               use TypeHandle, and also provide virtual functions to
//               support polymorphism, should inherit from.  Each
//               derived class should define get_type(), which should
//               return the specific type of the derived class.
//               Inheriting from this automatically provides support
//               for is_of_type() and is_exact_type().
//               
//               All classes that inherit directly or indirectly from
//               TypedObject should redefine get_type() and
//               force_init_type(), as shown below.  Some classes that
//               do not inherit from TypedObject may still declare
//               TypeHandles for themselves by defining methods called
//               get_class_type() and init_type().  Classes such as
//               these may serve as base classes, but the dynamic type
//               identification system will be limited.  Classes that
//               do not inherit from TypedObject need not define the
//               virtual functions get_type() and force_init_type()
//               (or any other virtual functions).
//               
//               There is a specific layout for defining the
//               overrides from this class.  Keeping the definitions
//               formatted just like these examples will allow
//               someone in the future to use a sed (or similar)
//               script to make global changes, if necessary.  Avoid
//               rearranging the braces or the order of the functions
//               unless you're ready to change them in every file all
//               at once.
//               
//               What follows are some examples that can be used in
//               new classes that you create.
//               
//               @par In the class definition (.h file):
//               @code
//               public:
//                 static TypeHandle get_class_type() {
//                   return _type_handle;
//                 }
//                 static void init_type() {
//                   <<<BaseClassOne>>>::init_type();
//                   <<<BaseClassTwo>>>::init_type();
//                   <<<BaseClassN>>>::init_type();
//                   register_type(_type_handle, "<<<ThisClassStringName>>>",
//                                 <<<BaseClassOne>>>::get_class_type(),
//                                 <<<BaseClassTwo>>>::get_class_type(),
//                                 <<<BaseClassN>>>::get_class_type());
//                 }
//                 virtual TypeHandle get_type() const {
//                   return get_class_type();
//                 }
//                 virtual TypeHandle force_init_type() {init_type(); return get_class_type();}
//               
//               private:
//                 static TypeHandle _type_handle;
//               @endcode
//               
//               @par In the class .cxx file:
//               @code
//               TypeHandle <<<ThisClassStringName>>>::_type_handle;
//               @endcode
//               
//               @par In the class config_<<<PackageName>>>.cxx file:
//               @code
//               ConfigureFn(config_<<<PackageName>>>) {
//                 <<<ClassOne>>>::init_type();
//                 <<<ClassTwo>>>::init_type();
//                 <<<ClassN>>>::init_type();
//               }
//               @endcode
////////////////////////////////////////////////////////////////////

1279 13 OdeJointGroup 0 75777 13 OdeJointGroup 13 OdeJointGroup 0 0 0 1 724 0 0 5 725 726 727 728 729 0 0 1 0 1278 0 0 0 0 186
////////////////////////////////////////////////////////////////////
//       Class : OdeJointGroup
// Description : 
////////////////////////////////////////////////////////////////////

1280 16 OdeJointFeedback 0 141313 16 OdeJointFeedback 16 OdeJointFeedback 0 0 0 0 734 0 4 730 731 732 733 0 0 1 0 1281 0 0 0 0 0

1281 14 dJointFeedback 0 1025 14 dJointFeedback 14 dJointFeedback 0 0 0 0 0 0 0 0 0 0 0 0 0

1282 8 OdeJoint 0 75777 8 OdeJoint 8 OdeJoint 0 0 0 0 0 0 27 735 736 737 738 739 740 741 742 743 744 745 746 747 748 750 751 752 753 754 755 756 757 758 759 760 761 762 0 1 749 1 0 1278 0 0 0 1 1283 180
////////////////////////////////////////////////////////////////////
//       Class : OdeJoint
// Description :
////////////////////////////////////////////////////////////////////

1283 9 JointType 0 794624 19 OdeJoint::JointType 19 OdeJoint::JointType 1282 0 0 0 0 0 0 0 0 0 12 7 JT_none 17 OdeJoint::JT_none 0 7 JT_ball 17 OdeJoint::JT_ball 1 8 JT_hinge 18 OdeJoint::JT_hinge 2 9 JT_slider 19 OdeJoint::JT_slider 3 10 JT_contact 20 OdeJoint::JT_contact 4 12 JT_universal 22 OdeJoint::JT_universal 5 9 JT_hinge2 19 OdeJoint::JT_hinge2 6 8 JT_fixed 18 OdeJoint::JT_fixed 7 7 JT_null 17 OdeJoint::JT_null 8 10 JT_a_motor 20 OdeJoint::JT_a_motor 9 10 JT_l_motor 20 OdeJoint::JT_l_motor 10 10 JT_plane2d 20 OdeJoint::JT_plane2d 11 0 18
/* or "unknown" */

1284 14 OdeAMotorJoint 0 75777 14 OdeAMotorJoint 14 OdeAMotorJoint 0 0 0 1 763 0 0 30 764 765 766 767 768 769 770 771 772 773 774 775 776 777 778 779 780 781 782 783 784 785 786 787 788 789 790 791 792 793 1 1463 0 1 0 1282 0 0 0 0 187
////////////////////////////////////////////////////////////////////
//       Class : OdeAMotorJoint
// Description : 
////////////////////////////////////////////////////////////////////

1285 12 OdeBallJoint 0 75777 12 OdeBallJoint 12 OdeBallJoint 0 0 0 1 794 0 0 5 795 796 797 798 799 0 0 1 0 1282 0 0 0 0 185
////////////////////////////////////////////////////////////////////
//       Class : OdeBallJoint
// Description : 
////////////////////////////////////////////////////////////////////

1286 7 OdeMass 0 75777 7 OdeMass 7 OdeMass 0 0 0 1 800 0 0 20 801 802 803 804 805 806 807 808 809 810 811 812 813 814 815 816 817 818 819 820 0 0 1 0 1287 0 0 0 0 180
////////////////////////////////////////////////////////////////////
//       Class : OdeMass
// Description : 
////////////////////////////////////////////////////////////////////

1287 19 TypedReferenceCount 0 2049 19 TypedReferenceCount 19 TypedReferenceCount 0 0 0 0 0 0 0 0 0 0 0 0 710
////////////////////////////////////////////////////////////////////
//       Class : TypedReferenceCount
// Description : A base class for things which need to inherit from
//               both TypedObject and from ReferenceCount.  It's
//               convenient to define this intermediate base class
//               instead of multiply inheriting from the two classes
//               each time they are needed, so that we can sensibly
//               pass around pointers to things which are both
//               TypedObjects and ReferenceCounters.
//               
//               See also TypedObject for detailed instructions.
////////////////////////////////////////////////////////////////////

1288 7 OdeBody 0 75777 7 OdeBody 7 OdeBody 0 0 0 1 821 0 0 59 822 823 824 825 826 827 828 829 830 831 832 833 834 835 836 837 838 839 840 841 842 843 844 845 846 847 848 849 850 851 852 853 854 855 856 857 858 859 860 861 862 863 864 865 866 867 868 869 870 871 872 873 874 875 876 877 878 880 881 1 1464 1 879 1 0 1278 0 0 0 0 180
////////////////////////////////////////////////////////////////////
//       Class : OdeBody
// Description : 
////////////////////////////////////////////////////////////////////

1289 8 OdeSpace 0 75777 8 OdeSpace 8 OdeSpace 0 0 0 0 0 0 40 882 883 884 885 886 887 888 889 890 891 892 893 894 895 896 897 898 899 900 901 902 903 904 905 906 908 909 910 911 912 913 914 915 916 917 918 919 920 921 922 0 1 907 1 0 1278 0 0 0 0 180
////////////////////////////////////////////////////////////////////
//       Class : OdeSpace
// Description :
////////////////////////////////////////////////////////////////////

1290 7 OdeGeom 0 75777 7 OdeGeom 7 OdeGeom 0 0 0 0 0 0 50 923 924 925 926 927 928 929 930 931 932 933 934 935 936 937 938 939 940 941 942 943 944 945 946 947 948 949 950 951 952 953 954 955 956 957 958 959 961 962 963 964 965 966 967 968 969 970 971 972 973 0 1 960 1 0 1278 0 0 0 1 1291 180
////////////////////////////////////////////////////////////////////
//       Class : OdeGeom
// Description : 
////////////////////////////////////////////////////////////////////

1291 9 GeomClass 0 794624 18 OdeGeom::GeomClass 18 OdeGeom::GeomClass 1290 0 0 0 0 0 0 0 0 0 10 9 GC_sphere 18 OdeGeom::GC_sphere 0 6 GC_box 15 OdeGeom::GC_box 1 18 GC_capped_cylinder 27 OdeGeom::GC_capped_cylinder 2 11 GC_cylinder 20 OdeGeom::GC_cylinder 3 8 GC_plane 17 OdeGeom::GC_plane 4 6 GC_ray 15 OdeGeom::GC_ray 5 11 GC_tri_mesh 20 OdeGeom::GC_tri_mesh 8 15 GC_simple_space 24 OdeGeom::GC_simple_space 10 13 GC_hash_space 22 OdeGeom::GC_hash_space 11 18 GC_quad_tree_space 27 OdeGeom::GC_quad_tree_space 12 0 0

1292 10 OdeBoxGeom 0 75777 10 OdeBoxGeom 10 OdeBoxGeom 0 0 0 1 974 0 0 4 975 976 977 978 0 0 1 0 1290 0 0 0 0 183
////////////////////////////////////////////////////////////////////
//       Class : OdeBoxGeom
// Description : 
////////////////////////////////////////////////////////////////////

1293 21 OdeCappedCylinderGeom 0 75777 21 OdeCappedCylinderGeom 21 OdeCappedCylinderGeom 0 0 0 1 979 0 0 6 980 981 982 983 984 985 0 0 1 0 1290 0 0 0 0 194
////////////////////////////////////////////////////////////////////
//       Class : OdeCappedCylinderGeom
// Description : 
////////////////////////////////////////////////////////////////////

1294 14 OdeContactGeom 0 75777 14 OdeContactGeom 14 OdeContactGeom 0 0 0 1 986 0 0 13 987 988 989 990 991 992 993 994 995 996 997 998 999 0 0 1 0 1287 0 0 0 0 187
////////////////////////////////////////////////////////////////////
//       Class : OdeContactGeom
// Description : 
////////////////////////////////////////////////////////////////////

1295 17 OdeCollisionEntry 0 75777 17 OdeCollisionEntry 17 OdeCollisionEntry 0 0 0 0 0 0 10 1000 1001 1002 1003 1004 1005 1006 1007 1009 1010 2 1465 1466 1 1008 1 0 1287 0 0 0 0 276
////////////////////////////////////////////////////////////////////
//       Class : OdeCollisionEntry
// Description : A class used to hold information about a collision
//               that has occurred.
////////////////////////////////////////////////////////////////////

1296 20 OdeSurfaceParameters 0 75777 20 OdeSurfaceParameters 20 OdeSurfaceParameters 0 0 0 1 1011 0 0 23 1012 1013 1014 1015 1016 1017 1018 1019 1020 1021 1022 1023 1024 1025 1026 1027 1028 1029 1030 1031 1032 1033 1034 0 0 1 0 1278 0 0 0 1 1297 193
////////////////////////////////////////////////////////////////////
//       Class : OdeSurfaceParameters
// Description : 
////////////////////////////////////////////////////////////////////

1297 9 ModeFlags 0 794624 31 OdeSurfaceParameters::ModeFlags 31 OdeSurfaceParameters::ModeFlags 1296 0 0 0 0 0 0 0 0 0 13 14 MF_contact_mu2 36 OdeSurfaceParameters::MF_contact_mu2 1 15 MF_contactFDir1 37 OdeSurfaceParameters::MF_contactFDir1 2 16 MF_contactBounce 38 OdeSurfaceParameters::MF_contactBounce 4 17 MF_contactSoftERP 39 OdeSurfaceParameters::MF_contactSoftERP 8 17 MF_contactSoftCFM 39 OdeSurfaceParameters::MF_contactSoftCFM 16 17 MF_contactMotion1 39 OdeSurfaceParameters::MF_contactMotion1 32 17 MF_contactMotion2 39 OdeSurfaceParameters::MF_contactMotion2 64 15 MF_contactSlip1 37 OdeSurfaceParameters::MF_contactSlip1 128 15 MF_contactSlip2 37 OdeSurfaceParameters::MF_contactSlip2 256 17 MF_contactApprox0 39 OdeSurfaceParameters::MF_contactApprox0 0 19 MF_contactApprox1_1 41 OdeSurfaceParameters::MF_contactApprox1_1 4096 19 MF_contactApprox1_2 41 OdeSurfaceParameters::MF_contactApprox1_2 8192 17 MF_contactApprox1 39 OdeSurfaceParameters::MF_contactApprox1 12288 0 0

1298 10 OdeContact 0 75777 10 OdeContact 10 OdeContact 0 0 0 1 1035 0 0 7 1036 1037 1038 1039 1040 1041 1042 0 0 1 0 1287 0 0 0 0 183
////////////////////////////////////////////////////////////////////
//       Class : OdeContact
// Description : 
////////////////////////////////////////////////////////////////////

1299 15 OdeContactJoint 0 75777 15 OdeContactJoint 15 OdeContactJoint 0 0 0 1 1043 0 0 1 1044 0 0 1 0 1282 0 0 0 0 188
////////////////////////////////////////////////////////////////////
//       Class : OdeContactJoint
// Description : 
////////////////////////////////////////////////////////////////////

1300 15 OdeCylinderGeom 0 75777 15 OdeCylinderGeom 15 OdeCylinderGeom 0 0 0 1 1045 0 0 5 1046 1047 1048 1049 1050 0 0 1 0 1290 0 0 0 0 188
////////////////////////////////////////////////////////////////////
//       Class : OdeCylinderGeom
// Description : 
////////////////////////////////////////////////////////////////////

1301 13 OdeFixedJoint 0 75777 13 OdeFixedJoint 13 OdeFixedJoint 0 0 0 1 1051 0 0 2 1052 1053 0 0 1 0 1282 0 0 0 0 186
////////////////////////////////////////////////////////////////////
//       Class : OdeFixedJoint
// Description : 
////////////////////////////////////////////////////////////////////

1302 12 OdeHashSpace 0 75777 12 OdeHashSpace 12 OdeHashSpace 0 0 0 1 1054 0 0 4 1055 1056 1057 1058 0 0 1 0 1289 0 0 0 0 186
////////////////////////////////////////////////////////////////////
//       Class : OdeHashSpace
// Description : 
////////////////////////////////////////////////////////////////////c

1303 14 OdeHinge2Joint 0 75777 14 OdeHinge2Joint 14 OdeHinge2Joint 0 0 0 1 1059 0 0 34 1060 1061 1062 1063 1064 1065 1066 1067 1068 1069 1070 1071 1072 1073 1074 1075 1076 1077 1078 1079 1080 1081 1082 1083 1084 1085 1086 1087 1088 1089 1090 1091 1092 1093 0 0 1 0 1282 0 0 0 0 187
////////////////////////////////////////////////////////////////////
//       Class : OdeHinge2Joint
// Description : 
////////////////////////////////////////////////////////////////////

1304 13 OdeHingeJoint 0 75777 13 OdeHingeJoint 13 OdeHingeJoint 0 0 0 1 1094 0 0 28 1095 1096 1097 1098 1099 1100 1101 1102 1103 1104 1105 1106 1107 1108 1109 1110 1111 1112 1113 1114 1115 1116 1117 1118 1119 1120 1121 1122 0 0 1 0 1282 0 0 0 0 186
////////////////////////////////////////////////////////////////////
//       Class : OdeHingeJoint
// Description : 
////////////////////////////////////////////////////////////////////

1305 18 OdeJointCollection 0 26625 18 OdeJointCollection 18 OdeJointCollection 0 0 0 1 1123 1125 0 15 1124 1126 1127 1128 1129 1130 1131 1132 1133 1134 1135 1136 1137 1138 1139 1 1467 0 0 0 0 191
////////////////////////////////////////////////////////////////////
//       Class : OdeJointCollection
// Description : 
////////////////////////////////////////////////////////////////////

1306 14 OdeLMotorJoint 0 75777 14 OdeLMotorJoint 14 OdeLMotorJoint 0 0 0 1 1140 0 0 7 1141 1142 1143 1144 1145 1146 1147 1 1468 0 1 0 1282 0 0 0 0 187
////////////////////////////////////////////////////////////////////
//       Class : OdeLMotorJoint
// Description : 
////////////////////////////////////////////////////////////////////

1307 12 OdeNullJoint 0 75777 12 OdeNullJoint 12 OdeNullJoint 0 0 0 1 1148 0 0 1 1149 0 0 1 0 1282 0 0 0 0 185
////////////////////////////////////////////////////////////////////
//       Class : OdeNullJoint
// Description : 
////////////////////////////////////////////////////////////////////

1308 15 OdePlane2dJoint 0 75777 15 OdePlane2dJoint 15 OdePlane2dJoint 0 0 0 1 1150 0 0 4 1151 1152 1153 1154 0 0 1 0 1282 0 0 0 0 188
////////////////////////////////////////////////////////////////////
//       Class : OdePlane2dJoint
// Description : 
////////////////////////////////////////////////////////////////////

1309 12 OdePlaneGeom 0 75777 12 OdePlaneGeom 12 OdePlaneGeom 0 0 0 1 1155 0 0 4 1156 1157 1158 1159 0 0 1 0 1290 0 0 0 0 185
////////////////////////////////////////////////////////////////////
//       Class : OdePlaneGeom
// Description : 
////////////////////////////////////////////////////////////////////

1310 16 OdeQuadTreeSpace 0 75777 16 OdeQuadTreeSpace 16 OdeQuadTreeSpace 0 0 0 1 1160 0 0 1 1161 0 0 1 0 1289 0 0 0 0 190
////////////////////////////////////////////////////////////////////
//       Class : OdeQuadTreeSpace
// Description : 
////////////////////////////////////////////////////////////////////c

1311 10 OdeRayGeom 0 75777 10 OdeRayGeom 10 OdeRayGeom 0 0 0 1 1162 0 0 13 1163 1164 1165 1166 1167 1168 1169 1170 1171 1172 1173 1174 1175 0 0 1 0 1290 0 0 0 0 183
////////////////////////////////////////////////////////////////////
//       Class : OdeRayGeom
// Description : 
////////////////////////////////////////////////////////////////////

1312 14 OdeSimpleSpace 0 75777 14 OdeSimpleSpace 14 OdeSimpleSpace 0 0 0 1 1176 0 0 1 1177 0 0 1 0 1289 0 0 0 0 188
////////////////////////////////////////////////////////////////////
//       Class : OdeSimpleSpace
// Description : 
////////////////////////////////////////////////////////////////////c

1313 14 OdeSliderJoint 0 75777 14 OdeSliderJoint 14 OdeSliderJoint 0 0 0 1 1178 0 0 25 1179 1180 1181 1182 1183 1184 1185 1186 1187 1188 1189 1190 1191 1192 1193 1194 1195 1196 1197 1198 1199 1200 1201 1202 1203 0 0 1 0 1282 0 0 0 0 187
////////////////////////////////////////////////////////////////////
//       Class : OdeSliderJoint
// Description : 
////////////////////////////////////////////////////////////////////

1314 13 OdeSphereGeom 0 75777 13 OdeSphereGeom 13 OdeSphereGeom 0 0 0 1 1204 0 0 4 1205 1206 1207 1208 0 0 1 0 1290 0 0 0 0 186
////////////////////////////////////////////////////////////////////
//       Class : OdeSphereGeom
// Description : 
////////////////////////////////////////////////////////////////////

1315 14 OdeTriMeshData 0 75777 14 OdeTriMeshData 14 OdeTriMeshData 0 0 0 1 1209 0 0 4 1210 1211 1212 1213 0 0 1 0 1287 0 0 0 1 1316 187
////////////////////////////////////////////////////////////////////
//       Class : OdeTriMeshData
// Description : 
////////////////////////////////////////////////////////////////////

1316 8 DataType 0 794624 24 OdeTriMeshData::DataType 24 OdeTriMeshData::DataType 1315 0 0 0 0 0 0 0 0 0 2 15 DT_face_normals 31 OdeTriMeshData::DT_face_normals 0 22 DT_last_transformation 38 OdeTriMeshData::DT_last_transformation 1 0 0

1317 14 OdeTriMeshGeom 0 75777 14 OdeTriMeshGeom 14 OdeTriMeshGeom 0 0 0 1 1214 0 0 12 1215 1216 1217 1218 1219 1220 1221 1222 1223 1224 1225 1226 0 0 1 0 1290 0 0 0 0 187
////////////////////////////////////////////////////////////////////
//       Class : OdeTriMeshGeom
// Description : 
////////////////////////////////////////////////////////////////////

1318 17 OdeUniversalJoint 0 75777 17 OdeUniversalJoint 17 OdeUniversalJoint 0 0 0 1 1227 0 0 31 1228 1229 1230 1231 1232 1233 1234 1235 1236 1237 1238 1239 1240 1241 1242 1243 1244 1245 1246 1247 1248 1249 1250 1251 1252 1253 1254 1255 1256 1257 1258 0 0 1 0 1282 0 0 0 0 190
////////////////////////////////////////////////////////////////////
//       Class : OdeUniversalJoint
// Description : 
////////////////////////////////////////////////////////////////////

1319 7 OdeUtil 0 141313 7 OdeUtil 7 OdeUtil 0 0 0 0 1269 0 10 1259 1260 1261 1262 1263 1264 1265 1266 1267 1268 0 0 0 0 0 180
////////////////////////////////////////////////////////////////////
//       Class : OdeUtil
// Description : 
////////////////////////////////////////////////////////////////////

1320 10 OdeWorld * 0 8576 10 OdeWorld * 10 OdeWorld * 0 0 1277 0 0 0 0 0 0 0 0 0 0

1321 16 OdeWorld const * 0 8576 16 OdeWorld const * 16 OdeWorld const * 0 0 1322 0 0 0 0 0 0 0 0 0 0

1322 14 OdeWorld const 0 8832 14 OdeWorld const 14 OdeWorld const 0 0 1277 0 0 0 0 0 0 0 0 0 0

1323 4 void 0 8194 4 void 4 void 0 6 0 0 0 0 0 0 0 0 0 0 0

1324 4 bool 0 8194 4 bool 4 bool 0 4 0 0 0 0 0 0 0 0 0 0 0

1325 9 dxWorld * 0 8576 9 dxWorld * 9 dxWorld * 0 0 1276 0 0 0 0 0 0 0 0 0 0

1326 18 LVecBase3f const * 0 8576 18 LVecBase3f const * 18 LVecBase3f const * 0 0 1327 0 0 0 0 0 0 0 0 0 0

1327 16 LVecBase3f const 0 8832 16 LVecBase3f const 16 LVecBase3f const 0 0 1328 0 0 0 0 0 0 0 0 0 0

1328 10 LVecBase3f 0 2048 10 LVecBase3f 10 LVecBase3f 0 0 0 0 0 0 0 0 0 0 0 0 754
// Filename: lvecBase3_src.h
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LVecBase3
// Description : This is the base class for all three-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

1329 5 float 0 8194 5 float 5 float 0 2 0 0 0 0 0 0 0 0 0 0 0

1330 3 int 0 8194 3 int 3 int 0 1 0 0 0 0 0 0 0 0 0 0 0

1331 12 LVecBase3f * 0 8576 12 LVecBase3f * 12 LVecBase3f * 0 0 1328 0 0 0 0 0 0 0 0 0 0

1332 13 unsigned char 0 8198 13 unsigned char 13 unsigned char 0 5 0 0 0 0 0 0 0 0 0 0 0

1333 9 OdeBody * 0 8576 9 OdeBody * 9 OdeBody * 0 0 1288 0 0 0 0 0 0 0 0 0 0

1334 10 TypeHandle 0 2048 10 TypeHandle 10 TypeHandle 0 0 0 0 0 0 0 0 0 0 0 0 1098
////////////////////////////////////////////////////////////////////
//       Class : TypeHandle
// Description : TypeHandle is the identifier used to differentiate
//               C++ class types.  Any C++ classes that inherit from
//               some base class, and must be differentiated at run
//               time, should store a static TypeHandle object that
//               can be queried through a static member function
//               named get_class_type().  Most of the time, it is also
//               desirable to inherit from TypedObject, which provides
//               some virtual functions to return the TypeHandle for a
//               particular instance.
//
//               At its essence, a TypeHandle is simply a unique
//               identifier that is assigned by the TypeRegistry.  The
//               TypeRegistry stores a tree of TypeHandles, so that
//               ancestry of a particular type may be queried, and the
//               type name may be retrieved for run-time display.
////////////////////////////////////////////////////////////////////

1335 12 TypeHandle * 0 8576 12 TypeHandle * 12 TypeHandle * 0 0 1334 0 0 0 0 0 0 0 0 0 0

1336 15 OdeJointGroup * 0 8576 15 OdeJointGroup * 15 OdeJointGroup * 0 0 1279 0 0 0 0 0 0 0 0 0 0

1337 21 OdeJointGroup const * 0 8576 21 OdeJointGroup const * 21 OdeJointGroup const * 0 0 1338 0 0 0 0 0 0 0 0 0 0

1338 19 OdeJointGroup const 0 8832 19 OdeJointGroup const 19 OdeJointGroup const 0 0 1279 0 0 0 0 0 0 0 0 0 0

1339 14 dxJointGroup * 0 8576 14 dxJointGroup * 14 dxJointGroup * 0 0 1273 0 0 0 0 0 0 0 0 0 0

1340 15 LVector3f const 0 8832 15 LVector3f const 15 LVector3f const 0 0 1341 0 0 0 0 0 0 0 0 0 0

1341 9 LVector3f 0 2048 9 LVector3f 9 LVector3f 0 0 0 0 0 0 0 0 0 0 0 0 1086
// Filename: lvector3_src.h
// Created by:  drose (24Sep99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LVector3
// Description : This is a three-component vector distance (as opposed
//               to a three-component point, which represents a
//               particular point in space).  Some of the methods are
//               slightly different between LPoint3 and LVector3; in
//               particular, subtraction of two points yields a
//               vector, while addition of a vector and a point yields
//               a point.
////////////////////////////////////////////////////////////////////

1342 24 OdeJointFeedback const * 0 8576 24 OdeJointFeedback const * 24 OdeJointFeedback const * 0 0 1343 0 0 0 0 0 0 0 0 0 0

1343 22 OdeJointFeedback const 0 8832 22 OdeJointFeedback const 22 OdeJointFeedback const 0 0 1280 0 0 0 0 0 0 0 0 0 0

1344 17 LVector3f const * 0 8576 17 LVector3f const * 17 LVector3f const * 0 0 1340 0 0 0 0 0 0 0 0 0 0

1345 10 OdeJoint * 0 8576 10 OdeJoint * 10 OdeJoint * 0 0 1282 0 0 0 0 0 0 0 0 0 0

1346 16 OdeJoint const * 0 8576 16 OdeJoint const * 16 OdeJoint const * 0 0 1347 0 0 0 0 0 0 0 0 0 0

1347 14 OdeJoint const 0 8832 14 OdeJoint const 14 OdeJoint const 0 0 1282 0 0 0 0 0 0 0 0 0 0

1348 9 dxJoint * 0 8576 9 dxJoint * 9 dxJoint * 0 0 1272 0 0 0 0 0 0 0 0 0 0

1349 18 OdeJointFeedback * 0 8576 18 OdeJointFeedback * 18 OdeJointFeedback * 0 0 1280 0 0 0 0 0 0 0 0 0 0

1350 15 OdeBody const * 0 8576 15 OdeBody const * 15 OdeBody const * 0 0 1351 0 0 0 0 0 0 0 0 0 0

1351 13 OdeBody const 0 8832 13 OdeBody const 13 OdeBody const 0 0 1288 0 0 0 0 0 0 0 0 0 0

1352 9 ostream * 0 8576 9 ostream * 9 ostream * 0 0 1353 0 0 0 0 0 0 0 0 0 0

1353 7 ostream 0 2048 7 ostream 7 ostream 0 0 0 0 0 0 0 0 0 0 0 0 0

1354 12 unsigned int 0 8198 12 unsigned int 12 unsigned int 0 1 0 0 0 0 0 0 0 0 0 0 0

1355 10 PyObject * 0 8576 10 PyObject * 10 PyObject * 0 0 1356 0 0 0 0 0 0 0 0 0 0

1356 8 PyObject 0 2048 8 PyObject 8 PyObject 0 0 0 0 0 0 0 0 0 0 0 0 0

1357 14 OdeBallJoint * 0 8576 14 OdeBallJoint * 14 OdeBallJoint * 0 0 1285 0 0 0 0 0 0 0 0 0 0

1358 15 OdeHingeJoint * 0 8576 15 OdeHingeJoint * 15 OdeHingeJoint * 0 0 1304 0 0 0 0 0 0 0 0 0 0

1359 16 OdeSliderJoint * 0 8576 16 OdeSliderJoint * 16 OdeSliderJoint * 0 0 1313 0 0 0 0 0 0 0 0 0 0

1360 17 OdeContactJoint * 0 8576 17 OdeContactJoint * 17 OdeContactJoint * 0 0 1299 0 0 0 0 0 0 0 0 0 0

1361 19 OdeUniversalJoint * 0 8576 19 OdeUniversalJoint * 19 OdeUniversalJoint * 0 0 1318 0 0 0 0 0 0 0 0 0 0

1362 16 OdeHinge2Joint * 0 8576 16 OdeHinge2Joint * 16 OdeHinge2Joint * 0 0 1303 0 0 0 0 0 0 0 0 0 0

1363 15 OdeFixedJoint * 0 8576 15 OdeFixedJoint * 15 OdeFixedJoint * 0 0 1301 0 0 0 0 0 0 0 0 0 0

1364 14 OdeNullJoint * 0 8576 14 OdeNullJoint * 14 OdeNullJoint * 0 0 1307 0 0 0 0 0 0 0 0 0 0

1365 16 OdeAMotorJoint * 0 8576 16 OdeAMotorJoint * 16 OdeAMotorJoint * 0 0 1284 0 0 0 0 0 0 0 0 0 0

1366 16 OdeLMotorJoint * 0 8576 16 OdeLMotorJoint * 16 OdeLMotorJoint * 0 0 1306 0 0 0 0 0 0 0 0 0 0

1367 17 OdePlane2dJoint * 0 8576 17 OdePlane2dJoint * 17 OdePlane2dJoint * 0 0 1308 0 0 0 0 0 0 0 0 0 0

1368 22 OdeAMotorJoint const * 0 8576 22 OdeAMotorJoint const * 22 OdeAMotorJoint const * 0 0 1369 0 0 0 0 0 0 0 0 0 0

1369 20 OdeAMotorJoint const 0 8832 20 OdeAMotorJoint const 20 OdeAMotorJoint const 0 0 1284 0 0 0 0 0 0 0 0 0 0

1370 20 OdeBallJoint const * 0 8576 20 OdeBallJoint const * 20 OdeBallJoint const * 0 0 1371 0 0 0 0 0 0 0 0 0 0

1371 18 OdeBallJoint const 0 8832 18 OdeBallJoint const 18 OdeBallJoint const 0 0 1285 0 0 0 0 0 0 0 0 0 0

1372 9 OdeMass * 0 8576 9 OdeMass * 9 OdeMass * 0 0 1286 0 0 0 0 0 0 0 0 0 0

1373 15 OdeMass const * 0 8576 15 OdeMass const * 15 OdeMass const * 0 0 1374 0 0 0 0 0 0 0 0 0 0

1374 13 OdeMass const 0 8832 13 OdeMass const 13 OdeMass const 0 0 1286 0 0 0 0 0 0 0 0 0 0

1375 17 LMatrix3f const * 0 8576 17 LMatrix3f const * 17 LMatrix3f const * 0 0 1376 0 0 0 0 0 0 0 0 0 0

1376 15 LMatrix3f const 0 8832 15 LMatrix3f const 15 LMatrix3f const 0 0 1377 0 0 0 0 0 0 0 0 0 0

1377 9 LMatrix3f 0 2048 9 LMatrix3f 9 LMatrix3f 0 0 0 0 0 0 0 4 1469 1470 1471 1472 0 0 0 0 462
////////////////////////////////////////////////////////////////////
//       Class : LMatrix3
// Description : This is a 3-by-3 transform matrix.  It typically will
//               represent either a rotation-and-scale (no
//               translation) matrix in 3-d, or a full affine matrix
//               (rotation, scale, translation) in 2-d, e.g. for a
//               texture matrix.
////////////////////////////////////////////////////////////////////

1378 8 LPoint3f 0 2048 8 LPoint3f 8 LPoint3f 0 0 0 0 0 0 0 0 0 0 0 0 1083
// Filename: lpoint3_src.h
// Created by:  drose (25Sep99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LPoint3
// Description : This is a three-component point in space (as opposed
//               to a three-component vector, which represents a
//               direction and a distance).  Some of the methods are
//               slightly different between LPoint3 and LVector3; in
//               particular, subtraction of two points yields a
//               vector, while addition of a vector and a point yields
//               a point.
////////////////////////////////////////////////////////////////////

1379 10 LPoint3f * 0 8576 10 LPoint3f * 10 LPoint3f * 0 0 1378 0 0 0 0 0 0 0 0 0 0

1380 11 LMatrix3f * 0 8576 11 LMatrix3f * 11 LMatrix3f * 0 0 1377 0 0 0 0 0 0 0 0 0 0

1381 8 dxBody * 0 8576 8 dxBody * 8 dxBody * 0 0 1270 0 0 0 0 0 0 0 0 0 0

1382 20 LQuaternionf const * 0 8576 20 LQuaternionf const * 20 LQuaternionf const * 0 0 1383 0 0 0 0 0 0 0 0 0 0

1383 18 LQuaternionf const 0 8832 18 LQuaternionf const 18 LQuaternionf const 0 0 1384 0 0 0 0 0 0 0 0 0 0

1384 12 LQuaternionf 0 2048 12 LQuaternionf 12 LQuaternionf 0 0 0 0 0 0 0 0 0 0 0 0 719
// Filename: lquaternion_src.h
// Created by:  frang (06Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : FLOATNAME(LQuaternion)
// Description : This is the base quaternion class
////////////////////////////////////////////////////////////////////

1385 10 LVecBase4f 0 2048 10 LVecBase4f 10 LVecBase4f 0 0 0 0 0 0 0 0 0 0 0 0 265
////////////////////////////////////////////////////////////////////
//       Class : LVecBase4
// Description : This is the base class for all three-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

1386 12 LVecBase4f * 0 8576 12 LVecBase4f * 12 LVecBase4f * 0 0 1385 0 0 0 0 0 0 0 0 0 0

1387 10 OdeSpace * 0 8576 10 OdeSpace * 10 OdeSpace * 0 0 1289 0 0 0 0 0 0 0 0 0 0

1388 16 OdeSpace const * 0 8576 16 OdeSpace const * 16 OdeSpace const * 0 0 1389 0 0 0 0 0 0 0 0 0 0

1389 14 OdeSpace const 0 8832 14 OdeSpace const 14 OdeSpace const 0 0 1289 0 0 0 0 0 0 0 0 0 0

1390 15 OdeGeom const * 0 8576 15 OdeGeom const * 15 OdeGeom const * 0 0 1391 0 0 0 0 0 0 0 0 0 0

1391 13 OdeGeom const 0 8832 13 OdeGeom const 13 OdeGeom const 0 0 1290 0 0 0 0 0 0 0 0 0 0

1392 35 BitMask< unsigned int, 32 > const * 0 8576 35 BitMask< unsigned int, 32 > const * 35 BitMask< unsigned int, 32 > const * 0 0 1393 0 0 0 0 0 0 0 0 0 0

1393 33 BitMask< unsigned int, 32 > const 0 8832 33 BitMask< unsigned int, 32 > const 33 BitMask< unsigned int, 32 > const 0 0 1394 0 0 0 0 0 0 0 0 0 0

1394 9 BitMask32 0 2048 27 BitMask< unsigned int, 32 > 27 BitMask< unsigned int, 32 > 0 0 0 0 0 0 0 0 0 0 0 0 0

1395 29 BitMask< unsigned int, 32 > * 0 8576 29 BitMask< unsigned int, 32 > * 29 BitMask< unsigned int, 32 > * 0 0 1394 0 0 0 0 0 0 0 0 0 0

1396 9 OdeGeom * 0 8576 9 OdeGeom * 9 OdeGeom * 0 0 1290 0 0 0 0 0 0 0 0 0 0

1397 16 OdeSimpleSpace * 0 8576 16 OdeSimpleSpace * 16 OdeSimpleSpace * 0 0 1312 0 0 0 0 0 0 0 0 0 0

1398 14 OdeHashSpace * 0 8576 14 OdeHashSpace * 14 OdeHashSpace * 0 0 1302 0 0 0 0 0 0 0 0 0 0

1399 18 OdeQuadTreeSpace * 0 8576 18 OdeQuadTreeSpace * 18 OdeQuadTreeSpace * 0 0 1310 0 0 0 0 0 0 0 0 0 0

1400 8 dxGeom * 0 8576 8 dxGeom * 8 dxGeom * 0 0 1271 0 0 0 0 0 0 0 0 0 0

1401 13 atomic string 0 2 13 atomic string 13 atomic string 0 7 0 0 0 0 0 0 0 0 0 0 0

1402 14 LQuaternionf * 0 8576 14 LQuaternionf * 14 LQuaternionf * 0 0 1384 0 0 0 0 0 0 0 0 0 0

1403 12 OdeBoxGeom * 0 8576 12 OdeBoxGeom * 12 OdeBoxGeom * 0 0 1292 0 0 0 0 0 0 0 0 0 0

1404 23 OdeCappedCylinderGeom * 0 8576 23 OdeCappedCylinderGeom * 23 OdeCappedCylinderGeom * 0 0 1293 0 0 0 0 0 0 0 0 0 0

1405 17 OdeCylinderGeom * 0 8576 17 OdeCylinderGeom * 17 OdeCylinderGeom * 0 0 1300 0 0 0 0 0 0 0 0 0 0

1406 14 OdePlaneGeom * 0 8576 14 OdePlaneGeom * 14 OdePlaneGeom * 0 0 1309 0 0 0 0 0 0 0 0 0 0

1407 12 OdeRayGeom * 0 8576 12 OdeRayGeom * 12 OdeRayGeom * 0 0 1311 0 0 0 0 0 0 0 0 0 0

1408 15 OdeSphereGeom * 0 8576 15 OdeSphereGeom * 15 OdeSphereGeom * 0 0 1314 0 0 0 0 0 0 0 0 0 0

1409 16 OdeTriMeshGeom * 0 8576 16 OdeTriMeshGeom * 16 OdeTriMeshGeom * 0 0 1317 0 0 0 0 0 0 0 0 0 0

1410 16 LPoint3f const * 0 8576 16 LPoint3f const * 16 LPoint3f const * 0 0 1411 0 0 0 0 0 0 0 0 0 0

1411 14 LPoint3f const 0 8832 14 LPoint3f const 14 LPoint3f const 0 0 1378 0 0 0 0 0 0 0 0 0 0

1412 29 OdeCappedCylinderGeom const * 0 8576 29 OdeCappedCylinderGeom const * 29 OdeCappedCylinderGeom const * 0 0 1413 0 0 0 0 0 0 0 0 0 0

1413 27 OdeCappedCylinderGeom const 0 8832 27 OdeCappedCylinderGeom const 27 OdeCappedCylinderGeom const 0 0 1293 0 0 0 0 0 0 0 0 0 0

1414 16 OdeContactGeom * 0 8576 16 OdeContactGeom * 16 OdeContactGeom * 0 0 1294 0 0 0 0 0 0 0 0 0 0

1415 22 OdeContactGeom const * 0 8576 22 OdeContactGeom const * 22 OdeContactGeom const * 0 0 1416 0 0 0 0 0 0 0 0 0 0

1416 20 OdeContactGeom const 0 8832 20 OdeContactGeom const 20 OdeContactGeom const 0 0 1294 0 0 0 0 0 0 0 0 0 0

1417 25 OdeCollisionEntry const * 0 8576 25 OdeCollisionEntry const * 25 OdeCollisionEntry const * 0 0 1418 0 0 0 0 0 0 0 0 0 0

1418 23 OdeCollisionEntry const 0 8832 23 OdeCollisionEntry const 23 OdeCollisionEntry const 0 0 1295 0 0 0 0 0 0 0 0 0 0

1419 22 OdeSurfaceParameters * 0 8576 22 OdeSurfaceParameters * 22 OdeSurfaceParameters * 0 0 1296 0 0 0 0 0 0 0 0 0 0

1420 28 OdeSurfaceParameters const * 0 8576 28 OdeSurfaceParameters const * 28 OdeSurfaceParameters const * 0 0 1421 0 0 0 0 0 0 0 0 0 0

1421 26 OdeSurfaceParameters const 0 8832 26 OdeSurfaceParameters const 26 OdeSurfaceParameters const 0 0 1296 0 0 0 0 0 0 0 0 0 0

1422 12 OdeContact * 0 8576 12 OdeContact * 12 OdeContact * 0 0 1298 0 0 0 0 0 0 0 0 0 0

1423 16 dContact const * 0 8576 16 dContact const * 16 dContact const * 0 0 1424 0 0 0 0 0 0 0 0 0 0

1424 14 dContact const 0 8832 14 dContact const 14 dContact const 0 0 1425 0 0 0 0 0 0 0 0 0 0

1425 8 dContact 0 1024 8 dContact 8 dContact 0 0 0 0 0 0 0 0 0 0 0 0 0

1426 18 OdeContact const * 0 8576 18 OdeContact const * 18 OdeContact const * 0 0 1427 0 0 0 0 0 0 0 0 0 0

1427 16 OdeContact const 0 8832 16 OdeContact const 16 OdeContact const 0 0 1298 0 0 0 0 0 0 0 0 0 0

1428 23 OdeCylinderGeom const * 0 8576 23 OdeCylinderGeom const * 23 OdeCylinderGeom const * 0 0 1429 0 0 0 0 0 0 0 0 0 0

1429 21 OdeCylinderGeom const 0 8832 21 OdeCylinderGeom const 21 OdeCylinderGeom const 0 0 1300 0 0 0 0 0 0 0 0 0 0

1430 20 OdeHashSpace const * 0 8576 20 OdeHashSpace const * 20 OdeHashSpace const * 0 0 1431 0 0 0 0 0 0 0 0 0 0

1431 18 OdeHashSpace const 0 8832 18 OdeHashSpace const 18 OdeHashSpace const 0 0 1302 0 0 0 0 0 0 0 0 0 0

1432 22 OdeHinge2Joint const * 0 8576 22 OdeHinge2Joint const * 22 OdeHinge2Joint const * 0 0 1433 0 0 0 0 0 0 0 0 0 0

1433 20 OdeHinge2Joint const 0 8832 20 OdeHinge2Joint const 20 OdeHinge2Joint const 0 0 1303 0 0 0 0 0 0 0 0 0 0

1434 21 OdeHingeJoint const * 0 8576 21 OdeHingeJoint const * 21 OdeHingeJoint const * 0 0 1435 0 0 0 0 0 0 0 0 0 0

1435 19 OdeHingeJoint const 0 8832 19 OdeHingeJoint const 19 OdeHingeJoint const 0 0 1304 0 0 0 0 0 0 0 0 0 0

1436 20 OdeJointCollection * 0 8576 20 OdeJointCollection * 20 OdeJointCollection * 0 0 1305 0 0 0 0 0 0 0 0 0 0

1437 26 OdeJointCollection const * 0 8576 26 OdeJointCollection const * 26 OdeJointCollection const * 0 0 1438 0 0 0 0 0 0 0 0 0 0

1438 24 OdeJointCollection const 0 8832 24 OdeJointCollection const 24 OdeJointCollection const 0 0 1305 0 0 0 0 0 0 0 0 0 0

1439 22 OdeLMotorJoint const * 0 8576 22 OdeLMotorJoint const * 22 OdeLMotorJoint const * 0 0 1440 0 0 0 0 0 0 0 0 0 0

1440 20 OdeLMotorJoint const 0 8832 20 OdeLMotorJoint const 20 OdeLMotorJoint const 0 0 1306 0 0 0 0 0 0 0 0 0 0

1441 18 LVecBase4f const * 0 8576 18 LVecBase4f const * 18 LVecBase4f const * 0 0 1442 0 0 0 0 0 0 0 0 0 0

1442 16 LVecBase4f const 0 8832 16 LVecBase4f const 16 LVecBase4f const 0 0 1385 0 0 0 0 0 0 0 0 0 0

1443 20 OdePlaneGeom const * 0 8576 20 OdePlaneGeom const * 20 OdePlaneGeom const * 0 0 1444 0 0 0 0 0 0 0 0 0 0

1444 18 OdePlaneGeom const 0 8832 18 OdePlaneGeom const 18 OdePlaneGeom const 0 0 1309 0 0 0 0 0 0 0 0 0 0

1445 18 OdeRayGeom const * 0 8576 18 OdeRayGeom const * 18 OdeRayGeom const * 0 0 1446 0 0 0 0 0 0 0 0 0 0

1446 16 OdeRayGeom const 0 8832 16 OdeRayGeom const 16 OdeRayGeom const 0 0 1311 0 0 0 0 0 0 0 0 0 0

1447 22 OdeSliderJoint const * 0 8576 22 OdeSliderJoint const * 22 OdeSliderJoint const * 0 0 1448 0 0 0 0 0 0 0 0 0 0

1448 20 OdeSliderJoint const 0 8832 20 OdeSliderJoint const 20 OdeSliderJoint const 0 0 1313 0 0 0 0 0 0 0 0 0 0

1449 21 OdeSphereGeom const * 0 8576 21 OdeSphereGeom const * 21 OdeSphereGeom const * 0 0 1450 0 0 0 0 0 0 0 0 0 0

1450 19 OdeSphereGeom const 0 8832 19 OdeSphereGeom const 19 OdeSphereGeom const 0 0 1314 0 0 0 0 0 0 0 0 0 0

1451 16 NodePath const * 0 8576 16 NodePath const * 16 NodePath const * 0 0 1452 0 0 0 0 0 0 0 0 0 0

1452 14 NodePath const 0 8832 14 NodePath const 14 NodePath const 0 0 1453 0 0 0 0 0 0 0 0 0 0

1453 8 NodePath 0 2048 8 NodePath 8 NodePath 0 0 0 0 0 0 0 2 1473 1474 0 0 0 0 4938
//
// A NodePath is the fundamental unit of high-level interaction with
// the scene graph.  It encapsulates the complete path down to a node
// from some other node, usually the root of the scene graph.  This is
// used to resolve ambiguities associated with instancing.
//
// NodePath also contains a number of handy high-level methods for
// common scene-graph manipulations, such as reparenting, and common
// state changes, such as repositioning.
//
// There are also a number of NodePath methods for finding nodes deep
// within the tree by name or by type.  These take a path string,
// which at its simplest consists of a series of node names separated
// by slashes, like a directory pathname.
//
// Each component of the path string may optionally consist of one of
// the following special names, instead of a node name:
//
//   *          -- matches exactly one node, with any name.
//   **         -- matches any sequence of zero or more nodes.
//   +typename  -- matches any node that is or derives from the given type.
//   -typename  -- matches any node that is the given type exactly.
//   =tag       -- matches any node that has the indicated tag.
//   =tag=value -- matches any node whose tag matches the indicated value.
//
// Furthermore, a node name may itself contain standard filename
// globbing characters, like *, ?, and [a-z], that will be accepted as
// a partial match.  (In fact, the '*' special name may be seen as
// just a special case of this.)  The globbing characters may not be
// used with the typename matches or with tag matches, but they may
// be used to match a tag's value in the =tag=value syntax.
//
// The special characters "@@", appearing at the beginning of a node
// name, indicate a stashed node.  Normally, stashed nodes are not
// returned by a find (but see the special flags, below), but a
// stashed node may be found if it is explicitly named with its
// leading @@ characters.  By extension, "@@*" may be used to identify
// any stashed node.
//
// Examples:
//
// "room//graph" will look for a node named "graph", which is a child
// of an unnamed node, which is a child of a node named "room", which
// is a child of the starting path.
//
// "**/red*" will look for any node anywhere in the tree (below the
// starting path) with a name that begins with "red".
//
// "**/+PartBundleNode/**/head" will look for a node named "head",
// somewhere below a PartBundleNode anywhere in the tree.
//
//
// The search is always potentially ambiguous, even if the special
// wildcard operators are not used, because there may be multiple
// nodes in the tree with the same name.  In general, in the case of
// an ambiguity, the shortest path is preferred; when a method (such
// as extend_by) must choose only only one of several possible paths,
// it will choose the shortest available; on the other hand, when a
// method (such as find_all_matches) is to return all of the matching
// paths, it will sort them so that the shortest paths appear first in
// the output.
//
//
// Special flags.  The entire string may optionally be followed by the
// ";" character, followed by one or more of the following special
// control flags, with no intervening spaces or punctuation:
//
//    -h    Do not return hidden nodes.
//    +h    Do return hidden nodes.
//    -s    Do not return stashed nodes unless explicitly referenced with @@.
//    +s    Return stashed nodes even without any explicit @@ characters.
//    -i    Node name comparisons are not case insensitive: case must match
//          exactly.
//    +i    Node name comparisons are case insensitive: case is not important.
//          This affects matches against the node name only; node type
//          and tag strings are always case sensitive.
//
// The default flags are +h-s-i.
//
////////////////////////////////////////////////////////////////////
//       Class : NodePath
// Description : NodePath is the fundamental system for disambiguating
//               instances, and also provides a higher-level interface
//               for manipulating the scene graph.
//
//               A NodePath is a list of connected nodes from the root
//               of the graph to any sub-node.  Each NodePath
//               therefore uniquely describes one instance of a node.
//
//               NodePaths themselves are lightweight objects that may
//               easily be copied and passed by value.  Their data is
//               stored as a series of NodePathComponents that are
//               stored on the nodes.  Holding a NodePath will keep a
//               reference count to all the nodes in the path.
//               However, if any node in the path is removed or
//               reparented (perhaps through a different NodePath),
//               the NodePath will automatically be updated to reflect
//               the changes.
////////////////////////////////////////////////////////////////////

1454 16 OdeTriMeshData * 0 8576 16 OdeTriMeshData * 16 OdeTriMeshData * 0 0 1315 0 0 0 0 0 0 0 0 0 0

1455 22 OdeTriMeshData const * 0 8576 22 OdeTriMeshData const * 22 OdeTriMeshData const * 0 0 1456 0 0 0 0 0 0 0 0 0 0

1456 20 OdeTriMeshData const 0 8832 20 OdeTriMeshData const 20 OdeTriMeshData const 0 0 1315 0 0 0 0 0 0 0 0 0 0

1457 22 OdeTriMeshGeom const * 0 8576 22 OdeTriMeshGeom const * 22 OdeTriMeshGeom const * 0 0 1458 0 0 0 0 0 0 0 0 0 0

1458 20 OdeTriMeshGeom const 0 8832 20 OdeTriMeshGeom const 20 OdeTriMeshGeom const 0 0 1317 0 0 0 0 0 0 0 0 0 0

1459 25 OdeUniversalJoint const * 0 8576 25 OdeUniversalJoint const * 25 OdeUniversalJoint const * 0 0 1460 0 0 0 0 0 0 0 0 0 0

1460 23 OdeUniversalJoint const 0 8832 23 OdeUniversalJoint const 23 OdeUniversalJoint const 0 0 1318 0 0 0 0 0 0 0 0 0 0

1461 9 short int 0 8258 9 short int 9 short int 0 1 0 0 0 0 0 0 0 0 0 0 0

1462 19 OdeCollisionEntry * 0 8576 19 OdeCollisionEntry * 19 OdeCollisionEntry * 0 0 1295 0 0 0 0 0 0 0 0 0 0

0
0
12
1463 0 0 92 8 get_axes 12 get_num_axes 8 get_axis 
1464 0 0 154 10 get_joints 14 get_num_joints 9 get_joint 
1465 0 0 340 18 get_contact_points 16 get_num_contacts 17 get_contact_point 
1466 0 0 340 17 get_contact_geoms 16 get_num_contacts 16 get_contact_geom 
1467 0 0 473 10 get_joints 14 get_num_joints 9 get_joint 
1468 0 0 491 8 get_axes 12 get_num_axes 8 get_axis 
1469 0 0 823 8 get_rows 4 size 7 get_row 
1470 0 0 823 8 get_cols 4 size 7 get_col 
1471 0 0 823 9 get_col2s 4 size 8 get_col2 
1472 0 0 823 9 get_row2s 4 size 8 get_row2 
1473 0 0 1390 9 get_nodes 13 get_num_nodes 8 get_node 
1474 0 0 1390 13 get_ancestors 13 get_num_nodes 12 get_ancestor 
