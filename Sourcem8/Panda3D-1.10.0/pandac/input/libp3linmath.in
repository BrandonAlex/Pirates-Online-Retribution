1436948119
2 3
12 libp3linmath 4 Ns0b 12 panda3d.core 
1507
1935 12 ~MathNumbers 0 4 3442 25 MathNumbers::~MathNumbers 0 0 0
32
MathNumbers::~MathNumbers(void);

1936 9 deg_2_rad 0 1 0 9 deg_2_rad 0 2 1821 1822 0
67
inline double deg_2_rad(double f);
inline float deg_2_rad(float f);

1937 9 rad_2_deg 0 1 0 9 rad_2_deg 0 2 1823 1824 0
67
inline double rad_2_deg(double f);
inline float rad_2_deg(float f);

1938 10 LVecBase2f 0 4 3443 22 LVecBase2f::LVecBase2f 0 4 1 2 3 4 903
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Default Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
189
inline LVecBase2f::LVecBase2f(void);
inline LVecBase2f::LVecBase2f(LVecBase2f const &copy);
inline LVecBase2f::LVecBase2f(float fill_value);
inline LVecBase2f::LVecBase2f(float x, float y);

1939 10 operator = 0 4 3443 22 LVecBase2f::operator = 0 2 5 6 470
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Copy Assignment Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Fill Assignment Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
127
inline LVecBase2f &LVecBase2f::operator =(LVecBase2f const &copy);
inline LVecBase2f &LVecBase2f::operator =(float fill_value);

1940 12 operator new 0 4 3443 24 LVecBase2f::operator new 0 1 7 0
114
inline void *LVecBase2f::operator new(size_t size);
inline void *LVecBase2f::operator new(size_t size, void *ptr);

1941 15 operator delete 0 4 3443 27 LVecBase2f::operator delete 0 0 0
108
inline void LVecBase2f::operator delete(void *ptr);
inline void LVecBase2f::operator delete(void *, void *);

1942 12 validate_ptr 0 4 3443 24 LVecBase2f::validate_ptr 0 0 0
61
static inline bool LVecBase2f::validate_ptr(void const *ptr);

1943 4 zero 0 4 3443 16 LVecBase2f::zero 0 1 8 262
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::zero Named Constructor
//       Access: Published
//  Description: Returns a zero-length vector.
////////////////////////////////////////////////////////////////////
55
static inline LVecBase2f const &LVecBase2f::zero(void);

1944 6 unit_x 0 4 3443 18 LVecBase2f::unit_x 0 1 9 259
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::unit_x Named Constructor
//       Access: Published
//  Description: Returns a unit X vector.
////////////////////////////////////////////////////////////////////
57
static inline LVecBase2f const &LVecBase2f::unit_x(void);

1945 6 unit_y 0 4 3443 18 LVecBase2f::unit_y 0 1 10 259
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::unit_y Named Constructor
//       Access: Published
//  Description: Returns a unit Y vector.
////////////////////////////////////////////////////////////////////
57
static inline LVecBase2f const &LVecBase2f::unit_y(void);

1946 11 ~LVecBase2f 0 4 3443 23 LVecBase2f::~LVecBase2f 0 0 220
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
37
inline LVecBase2f::~LVecBase2f(void);

1947 10 __reduce__ 0 4 3443 22 LVecBase2f::__reduce__ 0 1 11 0
62
inline PyObject *LVecBase2f::__reduce__(PyObject *self) const;

1948 11 __getattr__ 0 4 3443 23 LVecBase2f::__getattr__ 0 1 12 0
88
inline PyObject *LVecBase2f::__getattr__(PyObject *self, string const &attr_name) const;

1949 11 __setattr__ 0 4 3443 23 LVecBase2f::__setattr__ 0 1 13 0
94
inline int LVecBase2f::__setattr__(PyObject *self, string const &attr_name, PyObject *assign);

1950 11 operator [] 0 4 3443 23 LVecBase2f::operator [] 0 2 14 15 227
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Indexing Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
96
inline float LVecBase2f::operator [](int i) const;
inline float &LVecBase2f::operator [](int i);

1951 4 size 0 4 3443 16 LVecBase2f::size 0 1 16 274
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::size
//       Access: Published, Static
//  Description: Returns 2: the number of components of a LVecBase2.
////////////////////////////////////////////////////////////////////
41
static inline int LVecBase2f::size(void);

1952 6 is_nan 0 4 3443 18 LVecBase2f::is_nan 0 1 17 311
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::is_nan
//       Access: Published
//  Description: Returns true if any component of the vector is
//               not-a-number, false otherwise.
////////////////////////////////////////////////////////////////////
43
inline bool LVecBase2f::is_nan(void) const;

1953 8 get_cell 0 4 3443 20 LVecBase2f::get_cell 0 1 18 218
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_cell
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
47
inline float LVecBase2f::get_cell(int i) const;

1954 5 get_x 0 4 3443 17 LVecBase2f::get_x 0 1 19 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_x
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
43
inline float LVecBase2f::get_x(void) const;

1955 5 get_y 0 4 3443 17 LVecBase2f::get_y 0 1 20 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_y
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
43
inline float LVecBase2f::get_y(void) const;

1956 8 set_cell 0 4 3443 20 LVecBase2f::set_cell 0 1 21 218
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::set_cell
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
53
inline void LVecBase2f::set_cell(int i, float value);

1957 5 set_x 0 4 3443 17 LVecBase2f::set_x 0 1 22 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::set_x
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
43
inline void LVecBase2f::set_x(float value);

1958 5 set_y 0 4 3443 17 LVecBase2f::set_y 0 1 23 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::set_y
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
43
inline void LVecBase2f::set_y(float value);

1959 11 add_to_cell 0 4 3443 23 LVecBase2f::add_to_cell 0 1 24 377
// These next functions add to an existing value.
// i.e. foo.set_x(foo.get_x() + value)
// These are useful to reduce overhead in scripting
// languages:

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::add_to_cell
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
56
inline void LVecBase2f::add_to_cell(int i, float value);

1960 5 add_x 0 4 3443 17 LVecBase2f::add_x 0 1 25 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::add_x
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
43
inline void LVecBase2f::add_x(float value);

1961 5 add_y 0 4 3443 17 LVecBase2f::add_y 0 1 26 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::add_y
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
43
inline void LVecBase2f::add_y(float value);

1962 8 get_data 0 4 3443 20 LVecBase2f::get_data 0 1 27 395
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_data
//       Access: Published
//  Description: Returns the address of the first of the two data
//               elements in the vector.  The next element
//               occupies the next position consecutively in memory.
////////////////////////////////////////////////////////////////////
53
inline float const *LVecBase2f::get_data(void) const;

1963 18 get_num_components 0 4 3443 30 LVecBase2f::get_num_components 0 1 28 279
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_num_components
//       Access: Published
//  Description: Returns the number of elements in the vector, two.
////////////////////////////////////////////////////////////////////
54
inline int LVecBase2f::get_num_components(void) const;

1964 4 fill 0 4 3443 16 LVecBase2f::fill 0 1 29 364
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::fill
//       Access: Published
//  Description: Sets each element of the vector to the indicated
//               fill_value.  This is particularly useful for
//               initializing to zero.
////////////////////////////////////////////////////////////////////
47
inline void LVecBase2f::fill(float fill_value);

1965 3 set 0 4 3443 15 LVecBase2f::set 0 1 30 213
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::set
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
46
inline void LVecBase2f::set(float x, float y);

1966 3 dot 0 4 3443 15 LVecBase2f::dot 0 1 31 213
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::dot
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
60
inline float LVecBase2f::dot(LVecBase2f const &other) const;

1967 14 length_squared 0 4 3443 26 LVecBase2f::length_squared 0 1 32 300
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::length_squared
//       Access: Published
//  Description: Returns the square of the vector's length, cheap and
//               easy.
////////////////////////////////////////////////////////////////////
52
inline float LVecBase2f::length_squared(void) const;

1968 6 length 0 4 3443 18 LVecBase2f::length 0 1 33 295
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::length
//       Access: Published
//  Description: Returns the length of the vector, by the Pythagorean
//               theorem.
////////////////////////////////////////////////////////////////////
44
inline float LVecBase2f::length(void) const;

1969 9 normalize 0 4 3443 21 LVecBase2f::normalize 0 1 34 367
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::normalize
//       Access: Published
//  Description: Normalizes the vector in place.  Returns true if the
//               vector was normalized, false if it was a zero-length
//               vector.
////////////////////////////////////////////////////////////////////
40
inline bool LVecBase2f::normalize(void);

1970 7 project 0 4 3443 19 LVecBase2f::project 0 1 35 390
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
////////////////////////////////////////////////////////////////////
68
inline LVecBase2f LVecBase2f::project(LVecBase2f const &onto) const;

1971 10 operator < 0 4 3443 22 LVecBase2f::operator < 0 1 36 0
66
inline bool LVecBase2f::operator <(LVecBase2f const &other) const;

1972 11 operator == 0 4 3443 23 LVecBase2f::operator == 0 1 37 0
67
inline bool LVecBase2f::operator ==(LVecBase2f const &other) const;

1973 11 operator != 0 4 3443 23 LVecBase2f::operator != 0 1 38 0
67
inline bool LVecBase2f::operator !=(LVecBase2f const &other) const;

1974 10 compare_to 0 4 3443 22 LVecBase2f::compare_to 0 2 39 40 827
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::compare_to
//       Access: Published
//  Description: This flavor of compare_to uses a default threshold
//               value based on the numeric type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::compare_to
//       Access: Published
//  Description: Sorts vectors lexicographically, componentwise.
//               Returns a number less than 0 if this vector sorts
//               before the other one, greater than zero if it sorts
//               after, 0 if they are equivalent (within the indicated
//               tolerance).
////////////////////////////////////////////////////////////////////
148
inline int LVecBase2f::compare_to(LVecBase2f const &other) const;
inline int LVecBase2f::compare_to(LVecBase2f const &other, float threshold) const;

1975 8 get_hash 0 4 3443 20 LVecBase2f::get_hash 0 2 41 42 516
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////
106
inline size_t LVecBase2f::get_hash(void) const;
inline size_t LVecBase2f::get_hash(float threshold) const;

1976 8 add_hash 0 4 3443 20 LVecBase2f::add_hash 0 2 43 44 516
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////
126
inline size_t LVecBase2f::add_hash(size_t hash) const;
inline size_t LVecBase2f::add_hash(size_t hash, float threshold) const;

1977 13 generate_hash 0 4 3443 25 LVecBase2f::generate_hash 0 2 45 46 546
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::generate_hash
//       Access: Published
//  Description: Adds the vector to the indicated hash generator.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::generate_hash
//       Access: Published
//  Description: Adds the vector to the indicated hash generator.
////////////////////////////////////////////////////////////////////
170
inline void LVecBase2f::generate_hash(ChecksumHashGenerator &hashgen) const;
inline void LVecBase2f::generate_hash(ChecksumHashGenerator &hashgen, float threshold) const;

1978 10 operator - 0 68 3443 22 LVecBase2f::operator - 0 1 47 0
53
inline LVecBase2f LVecBase2f::operator -(void) const;

1979 10 operator + 0 4 3443 22 LVecBase2f::operator + 0 1 48 0
72
inline LVecBase2f LVecBase2f::operator +(LVecBase2f const &other) const;

1980 10 operator - 0 4 3443 22 LVecBase2f::operator - 0 1 49 0
72
inline LVecBase2f LVecBase2f::operator -(LVecBase2f const &other) const;

1981 10 operator * 0 4 3443 22 LVecBase2f::operator * 0 1 50 0
61
inline LVecBase2f LVecBase2f::operator *(float scalar) const;

1982 10 operator / 0 4 3443 22 LVecBase2f::operator / 0 1 51 0
61
inline LVecBase2f LVecBase2f::operator /(float scalar) const;

1983 11 operator += 0 4 3443 23 LVecBase2f::operator += 0 1 52 0
61
inline void LVecBase2f::operator +=(LVecBase2f const &other);

1984 11 operator -= 0 4 3443 23 LVecBase2f::operator -= 0 1 53 0
61
inline void LVecBase2f::operator -=(LVecBase2f const &other);

1985 11 operator *= 0 4 3443 23 LVecBase2f::operator *= 0 1 54 0
50
inline void LVecBase2f::operator *=(float scalar);

1986 11 operator /= 0 4 3443 23 LVecBase2f::operator /= 0 1 55 0
50
inline void LVecBase2f::operator /=(float scalar);

1987 18 componentwise_mult 0 4 3443 30 LVecBase2f::componentwise_mult 0 1 56 228
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::componentwise_mult
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
68
inline void LVecBase2f::componentwise_mult(LVecBase2f const &other);

1988 7 __pow__ 0 4 3443 19 LVecBase2f::__pow__ 0 1 57 0
60
inline LVecBase2f LVecBase2f::__pow__(float exponent) const;

1989 8 __ipow__ 0 4 3443 20 LVecBase2f::__ipow__ 0 1 58 0
70
inline PyObject *LVecBase2f::__ipow__(PyObject *self, float exponent);

1990 4 fmax 0 4 3443 16 LVecBase2f::fmax 0 1 59 214
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::fmax
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
66
inline LVecBase2f LVecBase2f::fmax(LVecBase2f const &other) const;

1991 4 fmin 0 4 3443 16 LVecBase2f::fmin 0 1 60 214
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::fmin
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
66
inline LVecBase2f LVecBase2f::fmin(LVecBase2f const &other) const;

1992 12 almost_equal 0 4 3443 24 LVecBase2f::almost_equal 0 2 61 62 662
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::almost_equal
//       Access: Published
//  Description: Returns true if two vectors are memberwise equal
//               within a specified tolerance.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::almost_equal
//       Access: Published
//  Description: Returns true if two vectors are memberwise equal
//               within a default tolerance based on the numeric type.
////////////////////////////////////////////////////////////////////
154
inline bool LVecBase2f::almost_equal(LVecBase2f const &other, float threshold) const;
inline bool LVecBase2f::almost_equal(LVecBase2f const &other) const;

1993 6 output 0 4 3443 18 LVecBase2f::output 0 1 63 216
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::output
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
51
inline void LVecBase2f::output(ostream &out) const;

1994 8 __repr__ 0 4 3443 20 LVecBase2f::__repr__ 0 1 64 0
47
inline string LVecBase2f::__repr__(void) const;

1995 20 write_datagram_fixed 0 4 3443 32 LVecBase2f::write_datagram_fixed 0 1 65 642
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::write_datagram_fixed
//       Access: Published
//  Description: Writes the vector to the Datagram using add_float32()
//               or add_float64(), depending on the type of floats in
//               the vector, regardless of the setting of
//               Datagram::set_stdfloat_double().  This is appropriate
//               when you want to write a fixed-width value to the
//               datagram, especially when you are not writing a bam
//               file.
////////////////////////////////////////////////////////////////////
74
inline void LVecBase2f::write_datagram_fixed(Datagram &destination) const;

1996 19 read_datagram_fixed 0 4 3443 31 LVecBase2f::read_datagram_fixed 0 1 66 348
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::read_datagram_fixed
//       Access: Published
//  Description: Reads the vector from the Datagram using get_float32()
//               or get_float64().  See write_datagram_fixed().
////////////////////////////////////////////////////////////////////
70
inline void LVecBase2f::read_datagram_fixed(DatagramIterator &source);

1997 14 write_datagram 0 4 3443 26 LVecBase2f::write_datagram 0 1 67 464
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::write_datagram
//       Access: Published
//  Description: Writes the vector to the Datagram using
//               add_stdfloat().  This is appropriate when you want to
//               write the vector using the standard width setting,
//               especially when you are writing a bam file.
////////////////////////////////////////////////////////////////////
68
inline void LVecBase2f::write_datagram(Datagram &destination) const;

1998 13 read_datagram 0 4 3443 25 LVecBase2f::read_datagram 0 1 68 280
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::read_datagram
//       Access: Published
//  Description: Reads the vector from the Datagram using get_stdfloat().
////////////////////////////////////////////////////////////////////
64
inline void LVecBase2f::read_datagram(DatagramIterator &source);

1999 14 get_class_type 0 4 3443 26 LVecBase2f::get_class_type 0 1 69 0
51
static TypeHandle LVecBase2f::get_class_type(void);

2000 10 LVecBase2d 0 4 3445 22 LVecBase2d::LVecBase2d 0 4 70 71 72 73 903
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Default Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
192
inline LVecBase2d::LVecBase2d(void);
inline LVecBase2d::LVecBase2d(LVecBase2d const &copy);
inline LVecBase2d::LVecBase2d(double fill_value);
inline LVecBase2d::LVecBase2d(double x, double y);

2001 10 operator = 0 4 3445 22 LVecBase2d::operator = 0 2 74 75 470
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Copy Assignment Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Fill Assignment Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
128
inline LVecBase2d &LVecBase2d::operator =(LVecBase2d const &copy);
inline LVecBase2d &LVecBase2d::operator =(double fill_value);

2002 12 operator new 0 4 3445 24 LVecBase2d::operator new 0 1 76 0
114
inline void *LVecBase2d::operator new(size_t size);
inline void *LVecBase2d::operator new(size_t size, void *ptr);

2003 15 operator delete 0 4 3445 27 LVecBase2d::operator delete 0 0 0
108
inline void LVecBase2d::operator delete(void *ptr);
inline void LVecBase2d::operator delete(void *, void *);

2004 12 validate_ptr 0 4 3445 24 LVecBase2d::validate_ptr 0 0 0
61
static inline bool LVecBase2d::validate_ptr(void const *ptr);

2005 4 zero 0 4 3445 16 LVecBase2d::zero 0 1 77 262
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::zero Named Constructor
//       Access: Published
//  Description: Returns a zero-length vector.
////////////////////////////////////////////////////////////////////
55
static inline LVecBase2d const &LVecBase2d::zero(void);

2006 6 unit_x 0 4 3445 18 LVecBase2d::unit_x 0 1 78 259
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::unit_x Named Constructor
//       Access: Published
//  Description: Returns a unit X vector.
////////////////////////////////////////////////////////////////////
57
static inline LVecBase2d const &LVecBase2d::unit_x(void);

2007 6 unit_y 0 4 3445 18 LVecBase2d::unit_y 0 1 79 259
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::unit_y Named Constructor
//       Access: Published
//  Description: Returns a unit Y vector.
////////////////////////////////////////////////////////////////////
57
static inline LVecBase2d const &LVecBase2d::unit_y(void);

2008 11 ~LVecBase2d 0 4 3445 23 LVecBase2d::~LVecBase2d 0 0 220
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
37
inline LVecBase2d::~LVecBase2d(void);

2009 10 __reduce__ 0 4 3445 22 LVecBase2d::__reduce__ 0 1 80 0
62
inline PyObject *LVecBase2d::__reduce__(PyObject *self) const;

2010 11 __getattr__ 0 4 3445 23 LVecBase2d::__getattr__ 0 1 81 0
88
inline PyObject *LVecBase2d::__getattr__(PyObject *self, string const &attr_name) const;

2011 11 __setattr__ 0 4 3445 23 LVecBase2d::__setattr__ 0 1 82 0
94
inline int LVecBase2d::__setattr__(PyObject *self, string const &attr_name, PyObject *assign);

2012 11 operator [] 0 4 3445 23 LVecBase2d::operator [] 0 2 83 84 227
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Indexing Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
98
inline double LVecBase2d::operator [](int i) const;
inline double &LVecBase2d::operator [](int i);

2013 4 size 0 4 3445 16 LVecBase2d::size 0 1 85 274
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::size
//       Access: Published, Static
//  Description: Returns 2: the number of components of a LVecBase2.
////////////////////////////////////////////////////////////////////
41
static inline int LVecBase2d::size(void);

2014 6 is_nan 0 4 3445 18 LVecBase2d::is_nan 0 1 86 311
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::is_nan
//       Access: Published
//  Description: Returns true if any component of the vector is
//               not-a-number, false otherwise.
////////////////////////////////////////////////////////////////////
43
inline bool LVecBase2d::is_nan(void) const;

2015 8 get_cell 0 4 3445 20 LVecBase2d::get_cell 0 1 87 218
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_cell
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
48
inline double LVecBase2d::get_cell(int i) const;

2016 5 get_x 0 4 3445 17 LVecBase2d::get_x 0 1 88 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_x
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
44
inline double LVecBase2d::get_x(void) const;

2017 5 get_y 0 4 3445 17 LVecBase2d::get_y 0 1 89 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_y
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
44
inline double LVecBase2d::get_y(void) const;

2018 8 set_cell 0 4 3445 20 LVecBase2d::set_cell 0 1 90 218
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::set_cell
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
54
inline void LVecBase2d::set_cell(int i, double value);

2019 5 set_x 0 4 3445 17 LVecBase2d::set_x 0 1 91 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::set_x
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
44
inline void LVecBase2d::set_x(double value);

2020 5 set_y 0 4 3445 17 LVecBase2d::set_y 0 1 92 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::set_y
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
44
inline void LVecBase2d::set_y(double value);

2021 11 add_to_cell 0 4 3445 23 LVecBase2d::add_to_cell 0 1 93 377
// These next functions add to an existing value.
// i.e. foo.set_x(foo.get_x() + value)
// These are useful to reduce overhead in scripting
// languages:

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::add_to_cell
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
57
inline void LVecBase2d::add_to_cell(int i, double value);

2022 5 add_x 0 4 3445 17 LVecBase2d::add_x 0 1 94 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::add_x
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
44
inline void LVecBase2d::add_x(double value);

2023 5 add_y 0 4 3445 17 LVecBase2d::add_y 0 1 95 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::add_y
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
44
inline void LVecBase2d::add_y(double value);

2024 8 get_data 0 4 3445 20 LVecBase2d::get_data 0 1 96 395
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_data
//       Access: Published
//  Description: Returns the address of the first of the two data
//               elements in the vector.  The next element
//               occupies the next position consecutively in memory.
////////////////////////////////////////////////////////////////////
54
inline double const *LVecBase2d::get_data(void) const;

2025 18 get_num_components 0 4 3445 30 LVecBase2d::get_num_components 0 1 97 279
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_num_components
//       Access: Published
//  Description: Returns the number of elements in the vector, two.
////////////////////////////////////////////////////////////////////
54
inline int LVecBase2d::get_num_components(void) const;

2026 4 fill 0 4 3445 16 LVecBase2d::fill 0 1 98 364
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::fill
//       Access: Published
//  Description: Sets each element of the vector to the indicated
//               fill_value.  This is particularly useful for
//               initializing to zero.
////////////////////////////////////////////////////////////////////
48
inline void LVecBase2d::fill(double fill_value);

2027 3 set 0 4 3445 15 LVecBase2d::set 0 1 99 213
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::set
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
48
inline void LVecBase2d::set(double x, double y);

2028 3 dot 0 4 3445 15 LVecBase2d::dot 0 1 100 213
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::dot
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
61
inline double LVecBase2d::dot(LVecBase2d const &other) const;

2029 14 length_squared 0 4 3445 26 LVecBase2d::length_squared 0 1 101 300
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::length_squared
//       Access: Published
//  Description: Returns the square of the vector's length, cheap and
//               easy.
////////////////////////////////////////////////////////////////////
53
inline double LVecBase2d::length_squared(void) const;

2030 6 length 0 4 3445 18 LVecBase2d::length 0 1 102 295
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::length
//       Access: Published
//  Description: Returns the length of the vector, by the Pythagorean
//               theorem.
////////////////////////////////////////////////////////////////////
45
inline double LVecBase2d::length(void) const;

2031 9 normalize 0 4 3445 21 LVecBase2d::normalize 0 1 103 367
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::normalize
//       Access: Published
//  Description: Normalizes the vector in place.  Returns true if the
//               vector was normalized, false if it was a zero-length
//               vector.
////////////////////////////////////////////////////////////////////
40
inline bool LVecBase2d::normalize(void);

2032 7 project 0 4 3445 19 LVecBase2d::project 0 1 104 390
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
////////////////////////////////////////////////////////////////////
68
inline LVecBase2d LVecBase2d::project(LVecBase2d const &onto) const;

2033 10 operator < 0 4 3445 22 LVecBase2d::operator < 0 1 105 0
66
inline bool LVecBase2d::operator <(LVecBase2d const &other) const;

2034 11 operator == 0 4 3445 23 LVecBase2d::operator == 0 1 106 0
67
inline bool LVecBase2d::operator ==(LVecBase2d const &other) const;

2035 11 operator != 0 4 3445 23 LVecBase2d::operator != 0 1 107 0
67
inline bool LVecBase2d::operator !=(LVecBase2d const &other) const;

2036 10 compare_to 0 4 3445 22 LVecBase2d::compare_to 0 2 108 109 827
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::compare_to
//       Access: Published
//  Description: This flavor of compare_to uses a default threshold
//               value based on the numeric type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::compare_to
//       Access: Published
//  Description: Sorts vectors lexicographically, componentwise.
//               Returns a number less than 0 if this vector sorts
//               before the other one, greater than zero if it sorts
//               after, 0 if they are equivalent (within the indicated
//               tolerance).
////////////////////////////////////////////////////////////////////
149
inline int LVecBase2d::compare_to(LVecBase2d const &other) const;
inline int LVecBase2d::compare_to(LVecBase2d const &other, double threshold) const;

2037 8 get_hash 0 4 3445 20 LVecBase2d::get_hash 0 2 110 111 516
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////
107
inline size_t LVecBase2d::get_hash(void) const;
inline size_t LVecBase2d::get_hash(double threshold) const;

2038 8 add_hash 0 4 3445 20 LVecBase2d::add_hash 0 2 112 113 516
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////
127
inline size_t LVecBase2d::add_hash(size_t hash) const;
inline size_t LVecBase2d::add_hash(size_t hash, double threshold) const;

2039 13 generate_hash 0 4 3445 25 LVecBase2d::generate_hash 0 2 114 115 546
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::generate_hash
//       Access: Published
//  Description: Adds the vector to the indicated hash generator.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::generate_hash
//       Access: Published
//  Description: Adds the vector to the indicated hash generator.
////////////////////////////////////////////////////////////////////
171
inline void LVecBase2d::generate_hash(ChecksumHashGenerator &hashgen) const;
inline void LVecBase2d::generate_hash(ChecksumHashGenerator &hashgen, double threshold) const;

2040 10 operator - 0 68 3445 22 LVecBase2d::operator - 0 1 116 0
53
inline LVecBase2d LVecBase2d::operator -(void) const;

2041 10 operator + 0 4 3445 22 LVecBase2d::operator + 0 1 117 0
72
inline LVecBase2d LVecBase2d::operator +(LVecBase2d const &other) const;

2042 10 operator - 0 4 3445 22 LVecBase2d::operator - 0 1 118 0
72
inline LVecBase2d LVecBase2d::operator -(LVecBase2d const &other) const;

2043 10 operator * 0 4 3445 22 LVecBase2d::operator * 0 1 119 0
62
inline LVecBase2d LVecBase2d::operator *(double scalar) const;

2044 10 operator / 0 4 3445 22 LVecBase2d::operator / 0 1 120 0
62
inline LVecBase2d LVecBase2d::operator /(double scalar) const;

2045 11 operator += 0 4 3445 23 LVecBase2d::operator += 0 1 121 0
61
inline void LVecBase2d::operator +=(LVecBase2d const &other);

2046 11 operator -= 0 4 3445 23 LVecBase2d::operator -= 0 1 122 0
61
inline void LVecBase2d::operator -=(LVecBase2d const &other);

2047 11 operator *= 0 4 3445 23 LVecBase2d::operator *= 0 1 123 0
51
inline void LVecBase2d::operator *=(double scalar);

2048 11 operator /= 0 4 3445 23 LVecBase2d::operator /= 0 1 124 0
51
inline void LVecBase2d::operator /=(double scalar);

2049 18 componentwise_mult 0 4 3445 30 LVecBase2d::componentwise_mult 0 1 125 228
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::componentwise_mult
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
68
inline void LVecBase2d::componentwise_mult(LVecBase2d const &other);

2050 7 __pow__ 0 4 3445 19 LVecBase2d::__pow__ 0 1 126 0
61
inline LVecBase2d LVecBase2d::__pow__(double exponent) const;

2051 8 __ipow__ 0 4 3445 20 LVecBase2d::__ipow__ 0 1 127 0
71
inline PyObject *LVecBase2d::__ipow__(PyObject *self, double exponent);

2052 4 fmax 0 4 3445 16 LVecBase2d::fmax 0 1 128 214
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::fmax
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
66
inline LVecBase2d LVecBase2d::fmax(LVecBase2d const &other) const;

2053 4 fmin 0 4 3445 16 LVecBase2d::fmin 0 1 129 214
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::fmin
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
66
inline LVecBase2d LVecBase2d::fmin(LVecBase2d const &other) const;

2054 12 almost_equal 0 4 3445 24 LVecBase2d::almost_equal 0 2 130 131 662
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::almost_equal
//       Access: Published
//  Description: Returns true if two vectors are memberwise equal
//               within a specified tolerance.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::almost_equal
//       Access: Published
//  Description: Returns true if two vectors are memberwise equal
//               within a default tolerance based on the numeric type.
////////////////////////////////////////////////////////////////////
155
inline bool LVecBase2d::almost_equal(LVecBase2d const &other, double threshold) const;
inline bool LVecBase2d::almost_equal(LVecBase2d const &other) const;

2055 6 output 0 4 3445 18 LVecBase2d::output 0 1 132 216
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::output
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
51
inline void LVecBase2d::output(ostream &out) const;

2056 8 __repr__ 0 4 3445 20 LVecBase2d::__repr__ 0 1 133 0
47
inline string LVecBase2d::__repr__(void) const;

2057 20 write_datagram_fixed 0 4 3445 32 LVecBase2d::write_datagram_fixed 0 1 134 642
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::write_datagram_fixed
//       Access: Published
//  Description: Writes the vector to the Datagram using add_float32()
//               or add_float64(), depending on the type of floats in
//               the vector, regardless of the setting of
//               Datagram::set_stdfloat_double().  This is appropriate
//               when you want to write a fixed-width value to the
//               datagram, especially when you are not writing a bam
//               file.
////////////////////////////////////////////////////////////////////
74
inline void LVecBase2d::write_datagram_fixed(Datagram &destination) const;

2058 19 read_datagram_fixed 0 4 3445 31 LVecBase2d::read_datagram_fixed 0 1 135 348
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::read_datagram_fixed
//       Access: Published
//  Description: Reads the vector from the Datagram using get_float32()
//               or get_float64().  See write_datagram_fixed().
////////////////////////////////////////////////////////////////////
70
inline void LVecBase2d::read_datagram_fixed(DatagramIterator &source);

2059 14 write_datagram 0 4 3445 26 LVecBase2d::write_datagram 0 1 136 464
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::write_datagram
//       Access: Published
//  Description: Writes the vector to the Datagram using
//               add_stdfloat().  This is appropriate when you want to
//               write the vector using the standard width setting,
//               especially when you are writing a bam file.
////////////////////////////////////////////////////////////////////
68
inline void LVecBase2d::write_datagram(Datagram &destination) const;

2060 13 read_datagram 0 4 3445 25 LVecBase2d::read_datagram 0 1 137 280
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::read_datagram
//       Access: Published
//  Description: Reads the vector from the Datagram using get_stdfloat().
////////////////////////////////////////////////////////////////////
64
inline void LVecBase2d::read_datagram(DatagramIterator &source);

2061 14 get_class_type 0 4 3445 26 LVecBase2d::get_class_type 0 1 138 0
51
static TypeHandle LVecBase2d::get_class_type(void);

2062 10 LVecBase2i 0 4 3447 22 LVecBase2i::LVecBase2i 0 4 139 140 141 142 903
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Default Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
183
inline LVecBase2i::LVecBase2i(void);
inline LVecBase2i::LVecBase2i(LVecBase2i const &copy);
inline LVecBase2i::LVecBase2i(int fill_value);
inline LVecBase2i::LVecBase2i(int x, int y);

2063 10 operator = 0 4 3447 22 LVecBase2i::operator = 0 2 143 144 470
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Copy Assignment Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Fill Assignment Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
125
inline LVecBase2i &LVecBase2i::operator =(LVecBase2i const &copy);
inline LVecBase2i &LVecBase2i::operator =(int fill_value);

2064 12 operator new 0 4 3447 24 LVecBase2i::operator new 0 1 145 0
114
inline void *LVecBase2i::operator new(size_t size);
inline void *LVecBase2i::operator new(size_t size, void *ptr);

2065 15 operator delete 0 4 3447 27 LVecBase2i::operator delete 0 0 0
108
inline void LVecBase2i::operator delete(void *ptr);
inline void LVecBase2i::operator delete(void *, void *);

2066 12 validate_ptr 0 4 3447 24 LVecBase2i::validate_ptr 0 0 0
61
static inline bool LVecBase2i::validate_ptr(void const *ptr);

2067 4 zero 0 4 3447 16 LVecBase2i::zero 0 1 146 262
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::zero Named Constructor
//       Access: Published
//  Description: Returns a zero-length vector.
////////////////////////////////////////////////////////////////////
55
static inline LVecBase2i const &LVecBase2i::zero(void);

2068 6 unit_x 0 4 3447 18 LVecBase2i::unit_x 0 1 147 259
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::unit_x Named Constructor
//       Access: Published
//  Description: Returns a unit X vector.
////////////////////////////////////////////////////////////////////
57
static inline LVecBase2i const &LVecBase2i::unit_x(void);

2069 6 unit_y 0 4 3447 18 LVecBase2i::unit_y 0 1 148 259
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::unit_y Named Constructor
//       Access: Published
//  Description: Returns a unit Y vector.
////////////////////////////////////////////////////////////////////
57
static inline LVecBase2i const &LVecBase2i::unit_y(void);

2070 11 ~LVecBase2i 0 4 3447 23 LVecBase2i::~LVecBase2i 0 0 220
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
37
inline LVecBase2i::~LVecBase2i(void);

2071 10 __reduce__ 0 4 3447 22 LVecBase2i::__reduce__ 0 1 149 0
62
inline PyObject *LVecBase2i::__reduce__(PyObject *self) const;

2072 11 __getattr__ 0 4 3447 23 LVecBase2i::__getattr__ 0 1 150 0
88
inline PyObject *LVecBase2i::__getattr__(PyObject *self, string const &attr_name) const;

2073 11 __setattr__ 0 4 3447 23 LVecBase2i::__setattr__ 0 1 151 0
94
inline int LVecBase2i::__setattr__(PyObject *self, string const &attr_name, PyObject *assign);

2074 11 operator [] 0 4 3447 23 LVecBase2i::operator [] 0 2 152 153 227
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Indexing Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
92
inline int LVecBase2i::operator [](int i) const;
inline int &LVecBase2i::operator [](int i);

2075 4 size 0 4 3447 16 LVecBase2i::size 0 1 154 274
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::size
//       Access: Published, Static
//  Description: Returns 2: the number of components of a LVecBase2.
////////////////////////////////////////////////////////////////////
41
static inline int LVecBase2i::size(void);

2076 6 is_nan 0 4 3447 18 LVecBase2i::is_nan 0 1 155 311
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::is_nan
//       Access: Published
//  Description: Returns true if any component of the vector is
//               not-a-number, false otherwise.
////////////////////////////////////////////////////////////////////
43
inline bool LVecBase2i::is_nan(void) const;

2077 8 get_cell 0 4 3447 20 LVecBase2i::get_cell 0 1 156 218
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_cell
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
45
inline int LVecBase2i::get_cell(int i) const;

2078 5 get_x 0 4 3447 17 LVecBase2i::get_x 0 1 157 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_x
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
41
inline int LVecBase2i::get_x(void) const;

2079 5 get_y 0 4 3447 17 LVecBase2i::get_y 0 1 158 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_y
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
41
inline int LVecBase2i::get_y(void) const;

2080 8 set_cell 0 4 3447 20 LVecBase2i::set_cell 0 1 159 218
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::set_cell
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
51
inline void LVecBase2i::set_cell(int i, int value);

2081 5 set_x 0 4 3447 17 LVecBase2i::set_x 0 1 160 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::set_x
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
41
inline void LVecBase2i::set_x(int value);

2082 5 set_y 0 4 3447 17 LVecBase2i::set_y 0 1 161 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::set_y
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
41
inline void LVecBase2i::set_y(int value);

2083 11 add_to_cell 0 4 3447 23 LVecBase2i::add_to_cell 0 1 162 377
// These next functions add to an existing value.
// i.e. foo.set_x(foo.get_x() + value)
// These are useful to reduce overhead in scripting
// languages:

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::add_to_cell
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
54
inline void LVecBase2i::add_to_cell(int i, int value);

2084 5 add_x 0 4 3447 17 LVecBase2i::add_x 0 1 163 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::add_x
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
41
inline void LVecBase2i::add_x(int value);

2085 5 add_y 0 4 3447 17 LVecBase2i::add_y 0 1 164 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::add_y
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
41
inline void LVecBase2i::add_y(int value);

2086 8 get_data 0 4 3447 20 LVecBase2i::get_data 0 1 165 395
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_data
//       Access: Published
//  Description: Returns the address of the first of the two data
//               elements in the vector.  The next element
//               occupies the next position consecutively in memory.
////////////////////////////////////////////////////////////////////
51
inline int const *LVecBase2i::get_data(void) const;

2087 18 get_num_components 0 4 3447 30 LVecBase2i::get_num_components 0 1 166 279
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_num_components
//       Access: Published
//  Description: Returns the number of elements in the vector, two.
////////////////////////////////////////////////////////////////////
54
inline int LVecBase2i::get_num_components(void) const;

2088 4 fill 0 4 3447 16 LVecBase2i::fill 0 1 167 364
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::fill
//       Access: Published
//  Description: Sets each element of the vector to the indicated
//               fill_value.  This is particularly useful for
//               initializing to zero.
////////////////////////////////////////////////////////////////////
45
inline void LVecBase2i::fill(int fill_value);

2089 3 set 0 4 3447 15 LVecBase2i::set 0 1 168 213
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::set
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
42
inline void LVecBase2i::set(int x, int y);

2090 3 dot 0 4 3447 15 LVecBase2i::dot 0 1 169 213
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::dot
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
58
inline int LVecBase2i::dot(LVecBase2i const &other) const;

2091 14 length_squared 0 4 3447 26 LVecBase2i::length_squared 0 1 170 300
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::length_squared
//       Access: Published
//  Description: Returns the square of the vector's length, cheap and
//               easy.
////////////////////////////////////////////////////////////////////
50
inline int LVecBase2i::length_squared(void) const;

2092 10 operator < 0 4 3447 22 LVecBase2i::operator < 0 1 171 0
66
inline bool LVecBase2i::operator <(LVecBase2i const &other) const;

2093 11 operator == 0 4 3447 23 LVecBase2i::operator == 0 1 172 0
67
inline bool LVecBase2i::operator ==(LVecBase2i const &other) const;

2094 11 operator != 0 4 3447 23 LVecBase2i::operator != 0 1 173 0
67
inline bool LVecBase2i::operator !=(LVecBase2i const &other) const;

2095 10 compare_to 0 4 3447 22 LVecBase2i::compare_to 0 1 174 321
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::compare_to
//       Access: Published
//  Description: This flavor of compare_to uses a default threshold
//               value based on the numeric type.
////////////////////////////////////////////////////////////////////
65
inline int LVecBase2i::compare_to(LVecBase2i const &other) const;

2096 8 get_hash 0 4 3447 20 LVecBase2i::get_hash 0 1 175 257
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////
47
inline size_t LVecBase2i::get_hash(void) const;

2097 8 add_hash 0 4 3447 20 LVecBase2i::add_hash 0 1 176 257
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////
54
inline size_t LVecBase2i::add_hash(size_t hash) const;

2098 13 generate_hash 0 4 3447 25 LVecBase2i::generate_hash 0 1 177 272
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::generate_hash
//       Access: Published
//  Description: Adds the vector to the indicated hash generator.
////////////////////////////////////////////////////////////////////
76
inline void LVecBase2i::generate_hash(ChecksumHashGenerator &hashgen) const;

2099 10 operator - 0 68 3447 22 LVecBase2i::operator - 0 1 178 0
53
inline LVecBase2i LVecBase2i::operator -(void) const;

2100 10 operator + 0 4 3447 22 LVecBase2i::operator + 0 1 179 0
72
inline LVecBase2i LVecBase2i::operator +(LVecBase2i const &other) const;

2101 10 operator - 0 4 3447 22 LVecBase2i::operator - 0 1 180 0
72
inline LVecBase2i LVecBase2i::operator -(LVecBase2i const &other) const;

2102 10 operator * 0 4 3447 22 LVecBase2i::operator * 0 1 181 0
59
inline LVecBase2i LVecBase2i::operator *(int scalar) const;

2103 10 operator / 0 4 3447 22 LVecBase2i::operator / 0 1 182 0
59
inline LVecBase2i LVecBase2i::operator /(int scalar) const;

2104 11 operator += 0 4 3447 23 LVecBase2i::operator += 0 1 183 0
61
inline void LVecBase2i::operator +=(LVecBase2i const &other);

2105 11 operator -= 0 4 3447 23 LVecBase2i::operator -= 0 1 184 0
61
inline void LVecBase2i::operator -=(LVecBase2i const &other);

2106 11 operator *= 0 4 3447 23 LVecBase2i::operator *= 0 1 185 0
48
inline void LVecBase2i::operator *=(int scalar);

2107 11 operator /= 0 4 3447 23 LVecBase2i::operator /= 0 1 186 0
48
inline void LVecBase2i::operator /=(int scalar);

2108 18 componentwise_mult 0 4 3447 30 LVecBase2i::componentwise_mult 0 1 187 228
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::componentwise_mult
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
68
inline void LVecBase2i::componentwise_mult(LVecBase2i const &other);

2109 7 __pow__ 0 4 3447 19 LVecBase2i::__pow__ 0 1 188 0
58
inline LVecBase2i LVecBase2i::__pow__(int exponent) const;

2110 8 __ipow__ 0 4 3447 20 LVecBase2i::__ipow__ 0 1 189 0
68
inline PyObject *LVecBase2i::__ipow__(PyObject *self, int exponent);

2111 4 fmax 0 4 3447 16 LVecBase2i::fmax 0 1 190 214
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::fmax
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
66
inline LVecBase2i LVecBase2i::fmax(LVecBase2i const &other) const;

2112 4 fmin 0 4 3447 16 LVecBase2i::fmin 0 1 191 214
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::fmin
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
66
inline LVecBase2i LVecBase2i::fmin(LVecBase2i const &other) const;

2113 12 almost_equal 0 4 3447 24 LVecBase2i::almost_equal 0 2 192 193 662
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::almost_equal
//       Access: Published
//  Description: Returns true if two vectors are memberwise equal
//               within a specified tolerance.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::almost_equal
//       Access: Published
//  Description: Returns true if two vectors are memberwise equal
//               within a default tolerance based on the numeric type.
////////////////////////////////////////////////////////////////////
152
inline bool LVecBase2i::almost_equal(LVecBase2i const &other, int threshold) const;
inline bool LVecBase2i::almost_equal(LVecBase2i const &other) const;

2114 6 output 0 4 3447 18 LVecBase2i::output 0 1 194 216
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::output
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
51
inline void LVecBase2i::output(ostream &out) const;

2115 8 __repr__ 0 4 3447 20 LVecBase2i::__repr__ 0 1 195 0
47
inline string LVecBase2i::__repr__(void) const;

2116 20 write_datagram_fixed 0 4 3447 32 LVecBase2i::write_datagram_fixed 0 1 196 642
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::write_datagram_fixed
//       Access: Published
//  Description: Writes the vector to the Datagram using add_float32()
//               or add_float64(), depending on the type of floats in
//               the vector, regardless of the setting of
//               Datagram::set_stdfloat_double().  This is appropriate
//               when you want to write a fixed-width value to the
//               datagram, especially when you are not writing a bam
//               file.
////////////////////////////////////////////////////////////////////
74
inline void LVecBase2i::write_datagram_fixed(Datagram &destination) const;

2117 19 read_datagram_fixed 0 4 3447 31 LVecBase2i::read_datagram_fixed 0 1 197 348
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::read_datagram_fixed
//       Access: Published
//  Description: Reads the vector from the Datagram using get_float32()
//               or get_float64().  See write_datagram_fixed().
////////////////////////////////////////////////////////////////////
70
inline void LVecBase2i::read_datagram_fixed(DatagramIterator &source);

2118 14 write_datagram 0 4 3447 26 LVecBase2i::write_datagram 0 1 198 464
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::write_datagram
//       Access: Published
//  Description: Writes the vector to the Datagram using
//               add_stdfloat().  This is appropriate when you want to
//               write the vector using the standard width setting,
//               especially when you are writing a bam file.
////////////////////////////////////////////////////////////////////
68
inline void LVecBase2i::write_datagram(Datagram &destination) const;

2119 13 read_datagram 0 4 3447 25 LVecBase2i::read_datagram 0 1 199 280
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::read_datagram
//       Access: Published
//  Description: Reads the vector from the Datagram using get_stdfloat().
////////////////////////////////////////////////////////////////////
64
inline void LVecBase2i::read_datagram(DatagramIterator &source);

2120 14 get_class_type 0 4 3447 26 LVecBase2i::get_class_type 0 1 200 0
51
static TypeHandle LVecBase2i::get_class_type(void);

2121 9 LVector2f 0 4 3449 20 LVector2f::LVector2f 0 4 201 202 203 204 887
////////////////////////////////////////////////////////////////////
//     Function: LVector2::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector2::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector2::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector2::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
181
inline LVector2f::LVector2f(void);
inline LVector2f::LVector2f(LVecBase2f const &copy);
inline LVector2f::LVector2f(float fill_value);
inline LVector2f::LVector2f(float x, float y);

2122 10 operator = 0 4 3449 21 LVector2f::operator = 0 2 205 206 456
////////////////////////////////////////////////////////////////////
//     Function: LVector2::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector2::Copy Fill Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
123
inline LVector2f &LVector2f::operator =(LVecBase2f const &copy);
inline LVector2f &LVector2f::operator =(float fill_value);

2123 11 __getattr__ 0 4 3449 22 LVector2f::__getattr__ 0 1 207 0
87
inline PyObject *LVector2f::__getattr__(PyObject *self, string const &attr_name) const;

2124 11 __setattr__ 0 4 3449 22 LVector2f::__setattr__ 0 1 208 0
93
inline int LVector2f::__setattr__(PyObject *self, string const &attr_name, PyObject *assign);

2125 4 zero 0 4 3449 15 LVector2f::zero 0 1 209 258
////////////////////////////////////////////////////////////////////
//     Function: LVector2::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length vector.
////////////////////////////////////////////////////////////////////
53
static inline LVector2f const &LVector2f::zero(void);

2126 6 unit_x 0 4 3449 17 LVector2f::unit_x 0 1 210 255
////////////////////////////////////////////////////////////////////
//     Function: LVector2::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X vector.
////////////////////////////////////////////////////////////////////
55
static inline LVector2f const &LVector2f::unit_x(void);

2127 6 unit_y 0 4 3449 17 LVector2f::unit_y 0 1 211 255
////////////////////////////////////////////////////////////////////
//     Function: LVector2::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y vector.
////////////////////////////////////////////////////////////////////
55
static inline LVector2f const &LVector2f::unit_y(void);

2128 10 operator - 0 68 3449 21 LVector2f::operator - 0 1 212 0
51
inline LVector2f LVector2f::operator -(void) const;

2129 10 operator + 0 4 3449 21 LVector2f::operator + 0 2 213 214 0
141
inline LVecBase2f LVector2f::operator +(LVecBase2f const &other) const;
inline LVector2f LVector2f::operator +(LVector2f const &other) const;

2130 10 operator - 0 4 3449 21 LVector2f::operator - 0 2 215 216 0
141
inline LVecBase2f LVector2f::operator -(LVecBase2f const &other) const;
inline LVector2f LVector2f::operator -(LVector2f const &other) const;

2131 10 operator * 0 4 3449 21 LVector2f::operator * 0 1 217 0
59
inline LVector2f LVector2f::operator *(float scalar) const;

2132 10 operator / 0 4 3449 21 LVector2f::operator / 0 1 218 0
59
inline LVector2f LVector2f::operator /(float scalar) const;

2133 7 project 0 4 3449 18 LVector2f::project 0 1 219 389
////////////////////////////////////////////////////////////////////
//     Function: LVector2::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
////////////////////////////////////////////////////////////////////
66
inline LVector2f LVector2f::project(LVecBase2f const &onto) const;

2134 16 signed_angle_rad 0 4 3449 27 LVector2f::signed_angle_rad 0 1 220 321
////////////////////////////////////////////////////////////////////
//     Function: LVector2::signed_angle_rad
//       Access: Published
//  Description: returns the signed angled between two vectors. 
//               normalization is NOT necessary
////////////////////////////////////////////////////////////////////
71
inline float LVector2f::signed_angle_rad(LVector2f const &other) const;

2135 16 signed_angle_deg 0 4 3449 27 LVector2f::signed_angle_deg 0 1 221 321
////////////////////////////////////////////////////////////////////
//     Function: LVector2::signed_angle_deg
//       Access: Published
//  Description: returns the signed angled between two vectors. 
//               normalization is NOT necessary
////////////////////////////////////////////////////////////////////
71
inline float LVector2f::signed_angle_deg(LVector2f const &other) const;

2136 8 __repr__ 0 4 3449 19 LVector2f::__repr__ 0 1 222 0
46
inline string LVector2f::__repr__(void) const;

2137 14 get_class_type 0 4 3449 25 LVector2f::get_class_type 0 1 223 0
50
static TypeHandle LVector2f::get_class_type(void);

2138 10 ~LVector2f 0 4 3449 21 LVector2f::~LVector2f 0 0 0
28
LVector2f::~LVector2f(void);

2139 9 LVector2d 0 4 3450 20 LVector2d::LVector2d 0 4 224 225 226 227 887
////////////////////////////////////////////////////////////////////
//     Function: LVector2::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector2::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector2::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector2::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
184
inline LVector2d::LVector2d(void);
inline LVector2d::LVector2d(LVecBase2d const &copy);
inline LVector2d::LVector2d(double fill_value);
inline LVector2d::LVector2d(double x, double y);

2140 10 operator = 0 4 3450 21 LVector2d::operator = 0 2 228 229 456
////////////////////////////////////////////////////////////////////
//     Function: LVector2::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector2::Copy Fill Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
124
inline LVector2d &LVector2d::operator =(LVecBase2d const &copy);
inline LVector2d &LVector2d::operator =(double fill_value);

2141 11 __getattr__ 0 4 3450 22 LVector2d::__getattr__ 0 1 230 0
87
inline PyObject *LVector2d::__getattr__(PyObject *self, string const &attr_name) const;

2142 11 __setattr__ 0 4 3450 22 LVector2d::__setattr__ 0 1 231 0
93
inline int LVector2d::__setattr__(PyObject *self, string const &attr_name, PyObject *assign);

2143 4 zero 0 4 3450 15 LVector2d::zero 0 1 232 258
////////////////////////////////////////////////////////////////////
//     Function: LVector2::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length vector.
////////////////////////////////////////////////////////////////////
53
static inline LVector2d const &LVector2d::zero(void);

2144 6 unit_x 0 4 3450 17 LVector2d::unit_x 0 1 233 255
////////////////////////////////////////////////////////////////////
//     Function: LVector2::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X vector.
////////////////////////////////////////////////////////////////////
55
static inline LVector2d const &LVector2d::unit_x(void);

2145 6 unit_y 0 4 3450 17 LVector2d::unit_y 0 1 234 255
////////////////////////////////////////////////////////////////////
//     Function: LVector2::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y vector.
////////////////////////////////////////////////////////////////////
55
static inline LVector2d const &LVector2d::unit_y(void);

2146 10 operator - 0 68 3450 21 LVector2d::operator - 0 1 235 0
51
inline LVector2d LVector2d::operator -(void) const;

2147 10 operator + 0 4 3450 21 LVector2d::operator + 0 2 236 237 0
141
inline LVecBase2d LVector2d::operator +(LVecBase2d const &other) const;
inline LVector2d LVector2d::operator +(LVector2d const &other) const;

2148 10 operator - 0 4 3450 21 LVector2d::operator - 0 2 238 239 0
141
inline LVecBase2d LVector2d::operator -(LVecBase2d const &other) const;
inline LVector2d LVector2d::operator -(LVector2d const &other) const;

2149 10 operator * 0 4 3450 21 LVector2d::operator * 0 1 240 0
60
inline LVector2d LVector2d::operator *(double scalar) const;

2150 10 operator / 0 4 3450 21 LVector2d::operator / 0 1 241 0
60
inline LVector2d LVector2d::operator /(double scalar) const;

2151 7 project 0 4 3450 18 LVector2d::project 0 1 242 389
////////////////////////////////////////////////////////////////////
//     Function: LVector2::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
////////////////////////////////////////////////////////////////////
66
inline LVector2d LVector2d::project(LVecBase2d const &onto) const;

2152 16 signed_angle_rad 0 4 3450 27 LVector2d::signed_angle_rad 0 1 243 321
////////////////////////////////////////////////////////////////////
//     Function: LVector2::signed_angle_rad
//       Access: Published
//  Description: returns the signed angled between two vectors. 
//               normalization is NOT necessary
////////////////////////////////////////////////////////////////////
72
inline double LVector2d::signed_angle_rad(LVector2d const &other) const;

2153 16 signed_angle_deg 0 4 3450 27 LVector2d::signed_angle_deg 0 1 244 321
////////////////////////////////////////////////////////////////////
//     Function: LVector2::signed_angle_deg
//       Access: Published
//  Description: returns the signed angled between two vectors. 
//               normalization is NOT necessary
////////////////////////////////////////////////////////////////////
72
inline double LVector2d::signed_angle_deg(LVector2d const &other) const;

2154 8 __repr__ 0 4 3450 19 LVector2d::__repr__ 0 1 245 0
46
inline string LVector2d::__repr__(void) const;

2155 14 get_class_type 0 4 3450 25 LVector2d::get_class_type 0 1 246 0
50
static TypeHandle LVector2d::get_class_type(void);

2156 10 ~LVector2d 0 4 3450 21 LVector2d::~LVector2d 0 0 0
28
LVector2d::~LVector2d(void);

2157 9 LVector2i 0 4 3451 20 LVector2i::LVector2i 0 4 247 248 249 250 887
////////////////////////////////////////////////////////////////////
//     Function: LVector2::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector2::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector2::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector2::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
175
inline LVector2i::LVector2i(void);
inline LVector2i::LVector2i(LVecBase2i const &copy);
inline LVector2i::LVector2i(int fill_value);
inline LVector2i::LVector2i(int x, int y);

2158 10 operator = 0 4 3451 21 LVector2i::operator = 0 2 251 252 456
////////////////////////////////////////////////////////////////////
//     Function: LVector2::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector2::Copy Fill Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
121
inline LVector2i &LVector2i::operator =(LVecBase2i const &copy);
inline LVector2i &LVector2i::operator =(int fill_value);

2159 11 __getattr__ 0 4 3451 22 LVector2i::__getattr__ 0 1 253 0
87
inline PyObject *LVector2i::__getattr__(PyObject *self, string const &attr_name) const;

2160 11 __setattr__ 0 4 3451 22 LVector2i::__setattr__ 0 1 254 0
93
inline int LVector2i::__setattr__(PyObject *self, string const &attr_name, PyObject *assign);

2161 4 zero 0 4 3451 15 LVector2i::zero 0 1 255 258
////////////////////////////////////////////////////////////////////
//     Function: LVector2::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length vector.
////////////////////////////////////////////////////////////////////
53
static inline LVector2i const &LVector2i::zero(void);

2162 6 unit_x 0 4 3451 17 LVector2i::unit_x 0 1 256 255
////////////////////////////////////////////////////////////////////
//     Function: LVector2::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X vector.
////////////////////////////////////////////////////////////////////
55
static inline LVector2i const &LVector2i::unit_x(void);

2163 6 unit_y 0 4 3451 17 LVector2i::unit_y 0 1 257 255
////////////////////////////////////////////////////////////////////
//     Function: LVector2::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y vector.
////////////////////////////////////////////////////////////////////
55
static inline LVector2i const &LVector2i::unit_y(void);

2164 10 operator - 0 68 3451 21 LVector2i::operator - 0 1 258 0
51
inline LVector2i LVector2i::operator -(void) const;

2165 10 operator + 0 4 3451 21 LVector2i::operator + 0 2 259 260 0
141
inline LVecBase2i LVector2i::operator +(LVecBase2i const &other) const;
inline LVector2i LVector2i::operator +(LVector2i const &other) const;

2166 10 operator - 0 4 3451 21 LVector2i::operator - 0 2 261 262 0
141
inline LVecBase2i LVector2i::operator -(LVecBase2i const &other) const;
inline LVector2i LVector2i::operator -(LVector2i const &other) const;

2167 10 operator * 0 4 3451 21 LVector2i::operator * 0 1 263 0
57
inline LVector2i LVector2i::operator *(int scalar) const;

2168 10 operator / 0 4 3451 21 LVector2i::operator / 0 1 264 0
57
inline LVector2i LVector2i::operator /(int scalar) const;

2169 8 __repr__ 0 4 3451 19 LVector2i::__repr__ 0 1 265 0
46
inline string LVector2i::__repr__(void) const;

2170 14 get_class_type 0 4 3451 25 LVector2i::get_class_type 0 1 266 0
50
static TypeHandle LVector2i::get_class_type(void);

2171 10 ~LVector2i 0 4 3451 21 LVector2i::~LVector2i 0 0 0
28
LVector2i::~LVector2i(void);

2172 8 LPoint2f 0 4 3452 18 LPoint2f::LPoint2f 0 4 267 268 269 270 883
////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
173
inline LPoint2f::LPoint2f(void);
inline LPoint2f::LPoint2f(LVecBase2f const &copy);
inline LPoint2f::LPoint2f(float fill_value);
inline LPoint2f::LPoint2f(float x, float y);

2173 10 operator = 0 4 3452 20 LPoint2f::operator = 0 2 271 272 454
////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Copy Fill Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
119
inline LPoint2f &LPoint2f::operator =(LVecBase2f const &copy);
inline LPoint2f &LPoint2f::operator =(float fill_value);

2174 11 __getattr__ 0 4 3452 21 LPoint2f::__getattr__ 0 1 273 0
86
inline PyObject *LPoint2f::__getattr__(PyObject *self, string const &attr_name) const;

2175 11 __setattr__ 0 4 3452 21 LPoint2f::__setattr__ 0 1 274 0
92
inline int LPoint2f::__setattr__(PyObject *self, string const &attr_name, PyObject *assign);

2176 4 zero 0 4 3452 14 LPoint2f::zero 0 1 275 256
////////////////////////////////////////////////////////////////////
//     Function: LPoint2::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length point.
////////////////////////////////////////////////////////////////////
51
static inline LPoint2f const &LPoint2f::zero(void);

2177 6 unit_x 0 4 3452 16 LPoint2f::unit_x 0 1 276 253
////////////////////////////////////////////////////////////////////
//     Function: LPoint2::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X point.
////////////////////////////////////////////////////////////////////
53
static inline LPoint2f const &LPoint2f::unit_x(void);

2178 6 unit_y 0 4 3452 16 LPoint2f::unit_y 0 1 277 253
////////////////////////////////////////////////////////////////////
//     Function: LPoint2::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y point.
////////////////////////////////////////////////////////////////////
53
static inline LPoint2f const &LPoint2f::unit_y(void);

2179 10 operator - 0 68 3452 20 LPoint2f::operator - 0 1 278 0
49
inline LPoint2f LPoint2f::operator -(void) const;

2180 10 operator + 0 4 3452 20 LPoint2f::operator + 0 2 279 280 0
138
inline LVecBase2f LPoint2f::operator +(LVecBase2f const &other) const;
inline LPoint2f LPoint2f::operator +(LVector2f const &other) const;

2181 10 operator - 0 4 3452 20 LPoint2f::operator - 0 3 281 282 283 0
206
inline LVecBase2f LPoint2f::operator -(LVecBase2f const &other) const;
inline LVector2f LPoint2f::operator -(LPoint2f const &other) const;
inline LPoint2f LPoint2f::operator -(LVector2f const &other) const;

2182 10 operator * 0 4 3452 20 LPoint2f::operator * 0 1 284 0
57
inline LPoint2f LPoint2f::operator *(float scalar) const;

2183 10 operator / 0 4 3452 20 LPoint2f::operator / 0 1 285 0
57
inline LPoint2f LPoint2f::operator /(float scalar) const;

2184 7 project 0 4 3452 17 LPoint2f::project 0 1 286 388
////////////////////////////////////////////////////////////////////
//     Function: LPoint2::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
////////////////////////////////////////////////////////////////////
64
inline LPoint2f LPoint2f::project(LVecBase2f const &onto) const;

2185 8 __repr__ 0 4 3452 18 LPoint2f::__repr__ 0 1 287 0
45
inline string LPoint2f::__repr__(void) const;

2186 14 get_class_type 0 4 3452 24 LPoint2f::get_class_type 0 1 288 0
49
static TypeHandle LPoint2f::get_class_type(void);

2187 9 ~LPoint2f 0 4 3452 19 LPoint2f::~LPoint2f 0 0 0
26
LPoint2f::~LPoint2f(void);

2188 8 LPoint2d 0 4 3453 18 LPoint2d::LPoint2d 0 4 289 290 291 292 883
////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
176
inline LPoint2d::LPoint2d(void);
inline LPoint2d::LPoint2d(LVecBase2d const &copy);
inline LPoint2d::LPoint2d(double fill_value);
inline LPoint2d::LPoint2d(double x, double y);

2189 10 operator = 0 4 3453 20 LPoint2d::operator = 0 2 293 294 454
////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Copy Fill Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
120
inline LPoint2d &LPoint2d::operator =(LVecBase2d const &copy);
inline LPoint2d &LPoint2d::operator =(double fill_value);

2190 11 __getattr__ 0 4 3453 21 LPoint2d::__getattr__ 0 1 295 0
86
inline PyObject *LPoint2d::__getattr__(PyObject *self, string const &attr_name) const;

2191 11 __setattr__ 0 4 3453 21 LPoint2d::__setattr__ 0 1 296 0
92
inline int LPoint2d::__setattr__(PyObject *self, string const &attr_name, PyObject *assign);

2192 4 zero 0 4 3453 14 LPoint2d::zero 0 1 297 256
////////////////////////////////////////////////////////////////////
//     Function: LPoint2::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length point.
////////////////////////////////////////////////////////////////////
51
static inline LPoint2d const &LPoint2d::zero(void);

2193 6 unit_x 0 4 3453 16 LPoint2d::unit_x 0 1 298 253
////////////////////////////////////////////////////////////////////
//     Function: LPoint2::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X point.
////////////////////////////////////////////////////////////////////
53
static inline LPoint2d const &LPoint2d::unit_x(void);

2194 6 unit_y 0 4 3453 16 LPoint2d::unit_y 0 1 299 253
////////////////////////////////////////////////////////////////////
//     Function: LPoint2::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y point.
////////////////////////////////////////////////////////////////////
53
static inline LPoint2d const &LPoint2d::unit_y(void);

2195 10 operator - 0 68 3453 20 LPoint2d::operator - 0 1 300 0
49
inline LPoint2d LPoint2d::operator -(void) const;

2196 10 operator + 0 4 3453 20 LPoint2d::operator + 0 2 301 302 0
138
inline LVecBase2d LPoint2d::operator +(LVecBase2d const &other) const;
inline LPoint2d LPoint2d::operator +(LVector2d const &other) const;

2197 10 operator - 0 4 3453 20 LPoint2d::operator - 0 3 303 304 305 0
206
inline LVecBase2d LPoint2d::operator -(LVecBase2d const &other) const;
inline LVector2d LPoint2d::operator -(LPoint2d const &other) const;
inline LPoint2d LPoint2d::operator -(LVector2d const &other) const;

2198 10 operator * 0 4 3453 20 LPoint2d::operator * 0 1 306 0
58
inline LPoint2d LPoint2d::operator *(double scalar) const;

2199 10 operator / 0 4 3453 20 LPoint2d::operator / 0 1 307 0
58
inline LPoint2d LPoint2d::operator /(double scalar) const;

2200 7 project 0 4 3453 17 LPoint2d::project 0 1 308 388
////////////////////////////////////////////////////////////////////
//     Function: LPoint2::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
////////////////////////////////////////////////////////////////////
64
inline LPoint2d LPoint2d::project(LVecBase2d const &onto) const;

2201 8 __repr__ 0 4 3453 18 LPoint2d::__repr__ 0 1 309 0
45
inline string LPoint2d::__repr__(void) const;

2202 14 get_class_type 0 4 3453 24 LPoint2d::get_class_type 0 1 310 0
49
static TypeHandle LPoint2d::get_class_type(void);

2203 9 ~LPoint2d 0 4 3453 19 LPoint2d::~LPoint2d 0 0 0
26
LPoint2d::~LPoint2d(void);

2204 8 LPoint2i 0 4 3454 18 LPoint2i::LPoint2i 0 4 311 312 313 314 883
////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
167
inline LPoint2i::LPoint2i(void);
inline LPoint2i::LPoint2i(LVecBase2i const &copy);
inline LPoint2i::LPoint2i(int fill_value);
inline LPoint2i::LPoint2i(int x, int y);

2205 10 operator = 0 4 3454 20 LPoint2i::operator = 0 2 315 316 454
////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Copy Fill Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
117
inline LPoint2i &LPoint2i::operator =(LVecBase2i const &copy);
inline LPoint2i &LPoint2i::operator =(int fill_value);

2206 11 __getattr__ 0 4 3454 21 LPoint2i::__getattr__ 0 1 317 0
86
inline PyObject *LPoint2i::__getattr__(PyObject *self, string const &attr_name) const;

2207 11 __setattr__ 0 4 3454 21 LPoint2i::__setattr__ 0 1 318 0
92
inline int LPoint2i::__setattr__(PyObject *self, string const &attr_name, PyObject *assign);

2208 4 zero 0 4 3454 14 LPoint2i::zero 0 1 319 256
////////////////////////////////////////////////////////////////////
//     Function: LPoint2::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length point.
////////////////////////////////////////////////////////////////////
51
static inline LPoint2i const &LPoint2i::zero(void);

2209 6 unit_x 0 4 3454 16 LPoint2i::unit_x 0 1 320 253
////////////////////////////////////////////////////////////////////
//     Function: LPoint2::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X point.
////////////////////////////////////////////////////////////////////
53
static inline LPoint2i const &LPoint2i::unit_x(void);

2210 6 unit_y 0 4 3454 16 LPoint2i::unit_y 0 1 321 253
////////////////////////////////////////////////////////////////////
//     Function: LPoint2::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y point.
////////////////////////////////////////////////////////////////////
53
static inline LPoint2i const &LPoint2i::unit_y(void);

2211 10 operator - 0 68 3454 20 LPoint2i::operator - 0 1 322 0
49
inline LPoint2i LPoint2i::operator -(void) const;

2212 10 operator + 0 4 3454 20 LPoint2i::operator + 0 2 323 324 0
138
inline LVecBase2i LPoint2i::operator +(LVecBase2i const &other) const;
inline LPoint2i LPoint2i::operator +(LVector2i const &other) const;

2213 10 operator - 0 4 3454 20 LPoint2i::operator - 0 3 325 326 327 0
206
inline LVecBase2i LPoint2i::operator -(LVecBase2i const &other) const;
inline LVector2i LPoint2i::operator -(LPoint2i const &other) const;
inline LPoint2i LPoint2i::operator -(LVector2i const &other) const;

2214 10 operator * 0 4 3454 20 LPoint2i::operator * 0 1 328 0
55
inline LPoint2i LPoint2i::operator *(int scalar) const;

2215 10 operator / 0 4 3454 20 LPoint2i::operator / 0 1 329 0
55
inline LPoint2i LPoint2i::operator /(int scalar) const;

2216 8 __repr__ 0 4 3454 18 LPoint2i::__repr__ 0 1 330 0
45
inline string LPoint2i::__repr__(void) const;

2217 14 get_class_type 0 4 3454 24 LPoint2i::get_class_type 0 1 331 0
49
static TypeHandle LPoint2i::get_class_type(void);

2218 9 ~LPoint2i 0 4 3454 19 LPoint2i::~LPoint2i 0 0 0
26
LPoint2i::~LPoint2i(void);

2219 10 LVecBase3f 0 4 3455 22 LVecBase3f::LVecBase3f 0 5 332 333 334 335 336 1114
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
262
inline LVecBase3f::LVecBase3f(void);
inline LVecBase3f::LVecBase3f(LVecBase3f const &copy);
inline LVecBase3f::LVecBase3f(float fill_value);
inline LVecBase3f::LVecBase3f(float x, float y, float z);
inline LVecBase3f::LVecBase3f(LVecBase2f const &copy, float z);

2220 10 operator = 0 4 3455 22 LVecBase3f::operator = 0 2 337 338 464
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Fill Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
127
inline LVecBase3f &LVecBase3f::operator =(LVecBase3f const &copy);
inline LVecBase3f &LVecBase3f::operator =(float fill_value);

2221 12 operator new 0 4 3455 24 LVecBase3f::operator new 0 1 339 0
114
inline void *LVecBase3f::operator new(size_t size);
inline void *LVecBase3f::operator new(size_t size, void *ptr);

2222 15 operator delete 0 4 3455 27 LVecBase3f::operator delete 0 0 0
108
inline void LVecBase3f::operator delete(void *ptr);
inline void LVecBase3f::operator delete(void *, void *);

2223 12 validate_ptr 0 4 3455 24 LVecBase3f::validate_ptr 0 0 0
61
static inline bool LVecBase3f::validate_ptr(void const *ptr);

2224 4 zero 0 4 3455 16 LVecBase3f::zero 0 1 340 259
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length vector.
////////////////////////////////////////////////////////////////////
55
static inline LVecBase3f const &LVecBase3f::zero(void);

2225 6 unit_x 0 4 3455 18 LVecBase3f::unit_x 0 1 341 256
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X vector.
////////////////////////////////////////////////////////////////////
57
static inline LVecBase3f const &LVecBase3f::unit_x(void);

2226 6 unit_y 0 4 3455 18 LVecBase3f::unit_y 0 1 342 256
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y vector.
////////////////////////////////////////////////////////////////////
57
static inline LVecBase3f const &LVecBase3f::unit_y(void);

2227 6 unit_z 0 4 3455 18 LVecBase3f::unit_z 0 1 343 256
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::unit_z Named Constructor
//       Access: Public
//  Description: Returns a unit Z vector.
////////////////////////////////////////////////////////////////////
57
static inline LVecBase3f const &LVecBase3f::unit_z(void);

2228 11 ~LVecBase3f 0 4 3455 23 LVecBase3f::~LVecBase3f 0 0 217
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Destructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
37
inline LVecBase3f::~LVecBase3f(void);

2229 10 __reduce__ 0 4 3455 22 LVecBase3f::__reduce__ 0 1 344 0
62
inline PyObject *LVecBase3f::__reduce__(PyObject *self) const;

2230 11 __getattr__ 0 4 3455 23 LVecBase3f::__getattr__ 0 1 345 0
88
inline PyObject *LVecBase3f::__getattr__(PyObject *self, string const &attr_name) const;

2231 11 __setattr__ 0 4 3455 23 LVecBase3f::__setattr__ 0 1 346 0
94
inline int LVecBase3f::__setattr__(PyObject *self, string const &attr_name, PyObject *assign);

2232 11 operator [] 0 4 3455 23 LVecBase3f::operator [] 0 2 347 348 224
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Indexing Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
96
inline float LVecBase3f::operator [](int i) const;
inline float &LVecBase3f::operator [](int i);

2233 4 size 0 4 3455 16 LVecBase3f::size 0 1 349 271
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::size
//       Access: Public, Static
//  Description: Returns 3: the number of components of a LVecBase3.
////////////////////////////////////////////////////////////////////
41
static inline int LVecBase3f::size(void);

2234 6 is_nan 0 4 3455 18 LVecBase3f::is_nan 0 1 350 308
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::is_nan
//       Access: Public
//  Description: Returns true if any component of the vector is
//               not-a-number, false otherwise.
////////////////////////////////////////////////////////////////////
43
inline bool LVecBase3f::is_nan(void) const;

2235 8 get_cell 0 4 3455 20 LVecBase3f::get_cell 0 1 351 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_cell
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
47
inline float LVecBase3f::get_cell(int i) const;

2236 5 get_x 0 4 3455 17 LVecBase3f::get_x 0 1 352 212
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_x
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
43
inline float LVecBase3f::get_x(void) const;

2237 5 get_y 0 4 3455 17 LVecBase3f::get_y 0 1 353 212
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_y
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
43
inline float LVecBase3f::get_y(void) const;

2238 5 get_z 0 4 3455 17 LVecBase3f::get_z 0 1 354 212
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_z
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
43
inline float LVecBase3f::get_z(void) const;

2239 8 set_cell 0 4 3455 20 LVecBase3f::set_cell 0 1 355 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set_cell
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
53
inline void LVecBase3f::set_cell(int i, float value);

2240 5 set_x 0 4 3455 17 LVecBase3f::set_x 0 1 356 212
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set_x
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
43
inline void LVecBase3f::set_x(float value);

2241 5 set_y 0 4 3455 17 LVecBase3f::set_y 0 1 357 212
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set_y
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
43
inline void LVecBase3f::set_y(float value);

2242 5 set_z 0 4 3455 17 LVecBase3f::set_z 0 1 358 212
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set_z
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
43
inline void LVecBase3f::set_z(float value);

2243 6 get_xy 0 4 3455 18 LVecBase3f::get_xy 0 1 359 317
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_xy
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first two components of this vector.
////////////////////////////////////////////////////////////////////
49
inline LVecBase2f LVecBase3f::get_xy(void) const;

2244 6 get_xz 0 4 3455 18 LVecBase3f::get_xz 0 1 360 322
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_xz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first and last components of this vector.
////////////////////////////////////////////////////////////////////
49
inline LVecBase2f LVecBase3f::get_xz(void) const;

2245 6 get_yz 0 4 3455 18 LVecBase3f::get_yz 0 1 361 316
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_yz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               last two components of this vector.
////////////////////////////////////////////////////////////////////
49
inline LVecBase2f LVecBase3f::get_yz(void) const;

2246 11 add_to_cell 0 4 3455 23 LVecBase3f::add_to_cell 0 1 362 374
// These next functions add to an existing value.
// i.e. foo.set_x(foo.get_x() + value)
// These are useful to reduce overhead in scripting
// languages:

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_to_cell
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
56
inline void LVecBase3f::add_to_cell(int i, float value);

2247 5 add_x 0 4 3455 17 LVecBase3f::add_x 0 1 363 212
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_x
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
43
inline void LVecBase3f::add_x(float value);

2248 5 add_y 0 4 3455 17 LVecBase3f::add_y 0 1 364 212
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_y
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
43
inline void LVecBase3f::add_y(float value);

2249 5 add_z 0 4 3455 17 LVecBase3f::add_z 0 1 365 212
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_z
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
43
inline void LVecBase3f::add_z(float value);

2250 8 get_data 0 4 3455 20 LVecBase3f::get_data 0 1 366 399
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_data
//       Access: Public
//  Description: Returns the address of the first of the three data
//               elements in the vector.  The remaining elements
//               occupy the next positions consecutively in memory.
////////////////////////////////////////////////////////////////////
53
inline float const *LVecBase3f::get_data(void) const;

2251 18 get_num_components 0 4 3455 30 LVecBase3f::get_num_components 0 1 367 278
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_num_components
//       Access: Public
//  Description: Returns the number of elements in the vector, three.
////////////////////////////////////////////////////////////////////
54
inline int LVecBase3f::get_num_components(void) const;

2252 4 fill 0 4 3455 16 LVecBase3f::fill 0 1 368 364
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::fill
//       Access: Published
//  Description: Sets each element of the vector to the indicated
//               fill_value.  This is particularly useful for
//               initializing to zero.
////////////////////////////////////////////////////////////////////
47
inline void LVecBase3f::fill(float fill_value);

2253 3 set 0 4 3455 15 LVecBase3f::set 0 1 369 213
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
55
inline void LVecBase3f::set(float x, float y, float z);

2254 3 dot 0 4 3455 15 LVecBase3f::dot 0 1 370 213
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::dot
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
60
inline float LVecBase3f::dot(LVecBase3f const &other) const;

2255 14 length_squared 0 4 3455 26 LVecBase3f::length_squared 0 1 371 300
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::length_squared
//       Access: Published
//  Description: Returns the square of the vector's length, cheap and
//               easy.
////////////////////////////////////////////////////////////////////
52
inline float LVecBase3f::length_squared(void) const;

2256 6 length 0 4 3455 18 LVecBase3f::length 0 1 372 295
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::length
//       Access: Published
//  Description: Returns the length of the vector, by the Pythagorean
//               theorem.
////////////////////////////////////////////////////////////////////
44
inline float LVecBase3f::length(void) const;

2257 9 normalize 0 4 3455 21 LVecBase3f::normalize 0 1 373 367
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::normalize
//       Access: Published
//  Description: Normalizes the vector in place.  Returns true if the
//               vector was normalized, false if it was a zero-length
//               vector.
////////////////////////////////////////////////////////////////////
40
inline bool LVecBase3f::normalize(void);

2258 7 project 0 4 3455 19 LVecBase3f::project 0 1 374 390
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
////////////////////////////////////////////////////////////////////
68
inline LVecBase3f LVecBase3f::project(LVecBase3f const &onto) const;

2259 5 cross 0 4 3455 17 LVecBase3f::cross 0 1 375 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::cross
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
67
inline LVecBase3f LVecBase3f::cross(LVecBase3f const &other) const;

2260 10 operator < 0 4 3455 22 LVecBase3f::operator < 0 1 376 0
66
inline bool LVecBase3f::operator <(LVecBase3f const &other) const;

2261 11 operator == 0 4 3455 23 LVecBase3f::operator == 0 1 377 0
67
inline bool LVecBase3f::operator ==(LVecBase3f const &other) const;

2262 11 operator != 0 4 3455 23 LVecBase3f::operator != 0 1 378 0
67
inline bool LVecBase3f::operator !=(LVecBase3f const &other) const;

2263 20 get_standardized_hpr 0 4 3455 32 LVecBase3f::get_standardized_hpr 0 1 379 1030
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_standardized_hpr
//       Access: Published
//  Description: Try to un-spin the hpr to a standard form.  Like
//               all standards, someone decides between many
//               arbitrary possible standards.  This function assumes
//               that 0 and 360 are the same, as is 720 and
//               -360.  Also 180 and -180 are the same.  Another
//               example is -90 and 270.
//               Each element will be in the range -180.0 to 179.99999.
//               The original usage of this function is for human
//               readable output.
//
//               It doesn't work so well for asserting that foo_hpr 
//               is roughly equal to bar_hpr.  Try using
//               LQuaternionf::is_same_direction() for that.
//     See Also: get_standardized_rotation,
//               LQuaternion::is_same_direction
////////////////////////////////////////////////////////////////////
63
inline LVecBase3f LVecBase3f::get_standardized_hpr(void) const;

2264 10 compare_to 0 4 3455 22 LVecBase3f::compare_to 0 2 380 381 827
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::compare_to
//       Access: Published
//  Description: This flavor of compare_to uses a default threshold
//               value based on the numeric type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::compare_to
//       Access: Published
//  Description: Sorts vectors lexicographically, componentwise.
//               Returns a number less than 0 if this vector sorts
//               before the other one, greater than zero if it sorts
//               after, 0 if they are equivalent (within the indicated
//               tolerance).
////////////////////////////////////////////////////////////////////
148
inline int LVecBase3f::compare_to(LVecBase3f const &other) const;
inline int LVecBase3f::compare_to(LVecBase3f const &other, float threshold) const;

2265 8 get_hash 0 4 3455 20 LVecBase3f::get_hash 0 2 382 383 516
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////
106
inline size_t LVecBase3f::get_hash(void) const;
inline size_t LVecBase3f::get_hash(float threshold) const;

2266 8 add_hash 0 4 3455 20 LVecBase3f::add_hash 0 2 384 385 516
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////
126
inline size_t LVecBase3f::add_hash(size_t hash) const;
inline size_t LVecBase3f::add_hash(size_t hash, float threshold) const;

2267 13 generate_hash 0 4 3455 25 LVecBase3f::generate_hash 0 2 386 387 546
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::generate_hash
//       Access: Published
//  Description: Adds the vector to the indicated hash generator.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::generate_hash
//       Access: Published
//  Description: Adds the vector to the indicated hash generator.
////////////////////////////////////////////////////////////////////
170
inline void LVecBase3f::generate_hash(ChecksumHashGenerator &hashgen) const;
inline void LVecBase3f::generate_hash(ChecksumHashGenerator &hashgen, float threshold) const;

2268 10 operator - 0 68 3455 22 LVecBase3f::operator - 0 1 388 0
53
inline LVecBase3f LVecBase3f::operator -(void) const;

2269 10 operator + 0 4 3455 22 LVecBase3f::operator + 0 1 389 0
72
inline LVecBase3f LVecBase3f::operator +(LVecBase3f const &other) const;

2270 10 operator - 0 4 3455 22 LVecBase3f::operator - 0 1 390 0
72
inline LVecBase3f LVecBase3f::operator -(LVecBase3f const &other) const;

2271 10 operator * 0 4 3455 22 LVecBase3f::operator * 0 1 391 0
61
inline LVecBase3f LVecBase3f::operator *(float scalar) const;

2272 10 operator / 0 4 3455 22 LVecBase3f::operator / 0 1 392 0
61
inline LVecBase3f LVecBase3f::operator /(float scalar) const;

2273 11 operator += 0 4 3455 23 LVecBase3f::operator += 0 1 393 0
61
inline void LVecBase3f::operator +=(LVecBase3f const &other);

2274 11 operator -= 0 4 3455 23 LVecBase3f::operator -= 0 1 394 0
61
inline void LVecBase3f::operator -=(LVecBase3f const &other);

2275 11 operator *= 0 4 3455 23 LVecBase3f::operator *= 0 1 395 0
50
inline void LVecBase3f::operator *=(float scalar);

2276 11 operator /= 0 4 3455 23 LVecBase3f::operator /= 0 1 396 0
50
inline void LVecBase3f::operator /=(float scalar);

2277 18 componentwise_mult 0 4 3455 30 LVecBase3f::componentwise_mult 0 1 397 228
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::componentwise_mult
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
68
inline void LVecBase3f::componentwise_mult(LVecBase3f const &other);

2278 7 __pow__ 0 4 3455 19 LVecBase3f::__pow__ 0 1 398 0
60
inline LVecBase3f LVecBase3f::__pow__(float exponent) const;

2279 8 __ipow__ 0 4 3455 20 LVecBase3f::__ipow__ 0 1 399 0
70
inline PyObject *LVecBase3f::__ipow__(PyObject *self, float exponent);

2280 4 fmax 0 4 3455 16 LVecBase3f::fmax 0 1 400 211
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::fmax
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
66
inline LVecBase3f LVecBase3f::fmax(LVecBase3f const &other) const;

2281 4 fmin 0 4 3455 16 LVecBase3f::fmin 0 1 401 211
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::fmin
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
66
inline LVecBase3f LVecBase3f::fmin(LVecBase3f const &other) const;

2282 10 cross_into 0 4 3455 22 LVecBase3f::cross_into 0 1 402 241
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::cross product (with assignment)
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
60
inline void LVecBase3f::cross_into(LVecBase3f const &other);

2283 12 almost_equal 0 4 3455 24 LVecBase3f::almost_equal 0 2 403 404 662
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::almost_equal
//       Access: Published
//  Description: Returns true if two vectors are memberwise equal
//               within a specified tolerance.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::almost_equal
//       Access: Published
//  Description: Returns true if two vectors are memberwise equal
//               within a default tolerance based on the numeric type.
////////////////////////////////////////////////////////////////////
154
inline bool LVecBase3f::almost_equal(LVecBase3f const &other, float threshold) const;
inline bool LVecBase3f::almost_equal(LVecBase3f const &other) const;

2284 6 output 0 4 3455 18 LVecBase3f::output 0 1 405 216
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::output
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
51
inline void LVecBase3f::output(ostream &out) const;

2285 8 __repr__ 0 4 3455 20 LVecBase3f::__repr__ 0 1 406 0
47
inline string LVecBase3f::__repr__(void) const;

2286 20 write_datagram_fixed 0 4 3455 32 LVecBase3f::write_datagram_fixed 0 1 407 642
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::write_datagram_fixed
//       Access: Published
//  Description: Writes the vector to the Datagram using add_float32()
//               or add_float64(), depending on the type of floats in
//               the vector, regardless of the setting of
//               Datagram::set_stdfloat_double().  This is appropriate
//               when you want to write a fixed-width value to the
//               datagram, especially when you are not writing a bam
//               file.
////////////////////////////////////////////////////////////////////
74
inline void LVecBase3f::write_datagram_fixed(Datagram &destination) const;

2287 19 read_datagram_fixed 0 4 3455 31 LVecBase3f::read_datagram_fixed 0 1 408 348
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::read_datagram_fixed
//       Access: Published
//  Description: Reads the vector from the Datagram using get_float32()
//               or get_float64().  See write_datagram_fixed().
////////////////////////////////////////////////////////////////////
70
inline void LVecBase3f::read_datagram_fixed(DatagramIterator &source);

2288 14 write_datagram 0 4 3455 26 LVecBase3f::write_datagram 0 1 409 464
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::write_datagram
//       Access: Published
//  Description: Writes the vector to the Datagram using
//               add_stdfloat().  This is appropriate when you want to
//               write the vector using the standard width setting,
//               especially when you are writing a bam file.
////////////////////////////////////////////////////////////////////
68
inline void LVecBase3f::write_datagram(Datagram &destination) const;

2289 13 read_datagram 0 4 3455 25 LVecBase3f::read_datagram 0 1 410 280
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::read_datagram
//       Access: Published
//  Description: Reads the vector from the Datagram using get_stdfloat().
////////////////////////////////////////////////////////////////////
64
inline void LVecBase3f::read_datagram(DatagramIterator &source);

2290 14 get_class_type 0 4 3455 26 LVecBase3f::get_class_type 0 1 411 0
51
static TypeHandle LVecBase3f::get_class_type(void);

2291 10 LVecBase3d 0 4 3457 22 LVecBase3d::LVecBase3d 0 5 412 413 414 415 416 1114
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
267
inline LVecBase3d::LVecBase3d(void);
inline LVecBase3d::LVecBase3d(LVecBase3d const &copy);
inline LVecBase3d::LVecBase3d(double fill_value);
inline LVecBase3d::LVecBase3d(double x, double y, double z);
inline LVecBase3d::LVecBase3d(LVecBase2d const &copy, double z);

2292 10 operator = 0 4 3457 22 LVecBase3d::operator = 0 2 417 418 464
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Fill Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
128
inline LVecBase3d &LVecBase3d::operator =(LVecBase3d const &copy);
inline LVecBase3d &LVecBase3d::operator =(double fill_value);

2293 12 operator new 0 4 3457 24 LVecBase3d::operator new 0 1 419 0
114
inline void *LVecBase3d::operator new(size_t size);
inline void *LVecBase3d::operator new(size_t size, void *ptr);

2294 15 operator delete 0 4 3457 27 LVecBase3d::operator delete 0 0 0
108
inline void LVecBase3d::operator delete(void *ptr);
inline void LVecBase3d::operator delete(void *, void *);

2295 12 validate_ptr 0 4 3457 24 LVecBase3d::validate_ptr 0 0 0
61
static inline bool LVecBase3d::validate_ptr(void const *ptr);

2296 4 zero 0 4 3457 16 LVecBase3d::zero 0 1 420 259
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length vector.
////////////////////////////////////////////////////////////////////
55
static inline LVecBase3d const &LVecBase3d::zero(void);

2297 6 unit_x 0 4 3457 18 LVecBase3d::unit_x 0 1 421 256
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X vector.
////////////////////////////////////////////////////////////////////
57
static inline LVecBase3d const &LVecBase3d::unit_x(void);

2298 6 unit_y 0 4 3457 18 LVecBase3d::unit_y 0 1 422 256
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y vector.
////////////////////////////////////////////////////////////////////
57
static inline LVecBase3d const &LVecBase3d::unit_y(void);

2299 6 unit_z 0 4 3457 18 LVecBase3d::unit_z 0 1 423 256
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::unit_z Named Constructor
//       Access: Public
//  Description: Returns a unit Z vector.
////////////////////////////////////////////////////////////////////
57
static inline LVecBase3d const &LVecBase3d::unit_z(void);

2300 11 ~LVecBase3d 0 4 3457 23 LVecBase3d::~LVecBase3d 0 0 217
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Destructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
37
inline LVecBase3d::~LVecBase3d(void);

2301 10 __reduce__ 0 4 3457 22 LVecBase3d::__reduce__ 0 1 424 0
62
inline PyObject *LVecBase3d::__reduce__(PyObject *self) const;

2302 11 __getattr__ 0 4 3457 23 LVecBase3d::__getattr__ 0 1 425 0
88
inline PyObject *LVecBase3d::__getattr__(PyObject *self, string const &attr_name) const;

2303 11 __setattr__ 0 4 3457 23 LVecBase3d::__setattr__ 0 1 426 0
94
inline int LVecBase3d::__setattr__(PyObject *self, string const &attr_name, PyObject *assign);

2304 11 operator [] 0 4 3457 23 LVecBase3d::operator [] 0 2 427 428 224
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Indexing Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
98
inline double LVecBase3d::operator [](int i) const;
inline double &LVecBase3d::operator [](int i);

2305 4 size 0 4 3457 16 LVecBase3d::size 0 1 429 271
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::size
//       Access: Public, Static
//  Description: Returns 3: the number of components of a LVecBase3.
////////////////////////////////////////////////////////////////////
41
static inline int LVecBase3d::size(void);

2306 6 is_nan 0 4 3457 18 LVecBase3d::is_nan 0 1 430 308
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::is_nan
//       Access: Public
//  Description: Returns true if any component of the vector is
//               not-a-number, false otherwise.
////////////////////////////////////////////////////////////////////
43
inline bool LVecBase3d::is_nan(void) const;

2307 8 get_cell 0 4 3457 20 LVecBase3d::get_cell 0 1 431 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_cell
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
48
inline double LVecBase3d::get_cell(int i) const;

2308 5 get_x 0 4 3457 17 LVecBase3d::get_x 0 1 432 212
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_x
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
44
inline double LVecBase3d::get_x(void) const;

2309 5 get_y 0 4 3457 17 LVecBase3d::get_y 0 1 433 212
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_y
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
44
inline double LVecBase3d::get_y(void) const;

2310 5 get_z 0 4 3457 17 LVecBase3d::get_z 0 1 434 212
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_z
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
44
inline double LVecBase3d::get_z(void) const;

2311 8 set_cell 0 4 3457 20 LVecBase3d::set_cell 0 1 435 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set_cell
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
54
inline void LVecBase3d::set_cell(int i, double value);

2312 5 set_x 0 4 3457 17 LVecBase3d::set_x 0 1 436 212
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set_x
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
44
inline void LVecBase3d::set_x(double value);

2313 5 set_y 0 4 3457 17 LVecBase3d::set_y 0 1 437 212
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set_y
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
44
inline void LVecBase3d::set_y(double value);

2314 5 set_z 0 4 3457 17 LVecBase3d::set_z 0 1 438 212
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set_z
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
44
inline void LVecBase3d::set_z(double value);

2315 6 get_xy 0 4 3457 18 LVecBase3d::get_xy 0 1 439 317
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_xy
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first two components of this vector.
////////////////////////////////////////////////////////////////////
49
inline LVecBase2d LVecBase3d::get_xy(void) const;

2316 6 get_xz 0 4 3457 18 LVecBase3d::get_xz 0 1 440 322
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_xz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first and last components of this vector.
////////////////////////////////////////////////////////////////////
49
inline LVecBase2d LVecBase3d::get_xz(void) const;

2317 6 get_yz 0 4 3457 18 LVecBase3d::get_yz 0 1 441 316
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_yz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               last two components of this vector.
////////////////////////////////////////////////////////////////////
49
inline LVecBase2d LVecBase3d::get_yz(void) const;

2318 11 add_to_cell 0 4 3457 23 LVecBase3d::add_to_cell 0 1 442 374
// These next functions add to an existing value.
// i.e. foo.set_x(foo.get_x() + value)
// These are useful to reduce overhead in scripting
// languages:

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_to_cell
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
57
inline void LVecBase3d::add_to_cell(int i, double value);

2319 5 add_x 0 4 3457 17 LVecBase3d::add_x 0 1 443 212
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_x
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
44
inline void LVecBase3d::add_x(double value);

2320 5 add_y 0 4 3457 17 LVecBase3d::add_y 0 1 444 212
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_y
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
44
inline void LVecBase3d::add_y(double value);

2321 5 add_z 0 4 3457 17 LVecBase3d::add_z 0 1 445 212
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_z
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
44
inline void LVecBase3d::add_z(double value);

2322 8 get_data 0 4 3457 20 LVecBase3d::get_data 0 1 446 399
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_data
//       Access: Public
//  Description: Returns the address of the first of the three data
//               elements in the vector.  The remaining elements
//               occupy the next positions consecutively in memory.
////////////////////////////////////////////////////////////////////
54
inline double const *LVecBase3d::get_data(void) const;

2323 18 get_num_components 0 4 3457 30 LVecBase3d::get_num_components 0 1 447 278
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_num_components
//       Access: Public
//  Description: Returns the number of elements in the vector, three.
////////////////////////////////////////////////////////////////////
54
inline int LVecBase3d::get_num_components(void) const;

2324 4 fill 0 4 3457 16 LVecBase3d::fill 0 1 448 364
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::fill
//       Access: Published
//  Description: Sets each element of the vector to the indicated
//               fill_value.  This is particularly useful for
//               initializing to zero.
////////////////////////////////////////////////////////////////////
48
inline void LVecBase3d::fill(double fill_value);

2325 3 set 0 4 3457 15 LVecBase3d::set 0 1 449 213
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
58
inline void LVecBase3d::set(double x, double y, double z);

2326 3 dot 0 4 3457 15 LVecBase3d::dot 0 1 450 213
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::dot
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
61
inline double LVecBase3d::dot(LVecBase3d const &other) const;

2327 14 length_squared 0 4 3457 26 LVecBase3d::length_squared 0 1 451 300
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::length_squared
//       Access: Published
//  Description: Returns the square of the vector's length, cheap and
//               easy.
////////////////////////////////////////////////////////////////////
53
inline double LVecBase3d::length_squared(void) const;

2328 6 length 0 4 3457 18 LVecBase3d::length 0 1 452 295
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::length
//       Access: Published
//  Description: Returns the length of the vector, by the Pythagorean
//               theorem.
////////////////////////////////////////////////////////////////////
45
inline double LVecBase3d::length(void) const;

2329 9 normalize 0 4 3457 21 LVecBase3d::normalize 0 1 453 367
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::normalize
//       Access: Published
//  Description: Normalizes the vector in place.  Returns true if the
//               vector was normalized, false if it was a zero-length
//               vector.
////////////////////////////////////////////////////////////////////
40
inline bool LVecBase3d::normalize(void);

2330 7 project 0 4 3457 19 LVecBase3d::project 0 1 454 390
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
////////////////////////////////////////////////////////////////////
68
inline LVecBase3d LVecBase3d::project(LVecBase3d const &onto) const;

2331 5 cross 0 4 3457 17 LVecBase3d::cross 0 1 455 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::cross
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
67
inline LVecBase3d LVecBase3d::cross(LVecBase3d const &other) const;

2332 10 operator < 0 4 3457 22 LVecBase3d::operator < 0 1 456 0
66
inline bool LVecBase3d::operator <(LVecBase3d const &other) const;

2333 11 operator == 0 4 3457 23 LVecBase3d::operator == 0 1 457 0
67
inline bool LVecBase3d::operator ==(LVecBase3d const &other) const;

2334 11 operator != 0 4 3457 23 LVecBase3d::operator != 0 1 458 0
67
inline bool LVecBase3d::operator !=(LVecBase3d const &other) const;

2335 20 get_standardized_hpr 0 4 3457 32 LVecBase3d::get_standardized_hpr 0 1 459 1030
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_standardized_hpr
//       Access: Published
//  Description: Try to un-spin the hpr to a standard form.  Like
//               all standards, someone decides between many
//               arbitrary possible standards.  This function assumes
//               that 0 and 360 are the same, as is 720 and
//               -360.  Also 180 and -180 are the same.  Another
//               example is -90 and 270.
//               Each element will be in the range -180.0 to 179.99999.
//               The original usage of this function is for human
//               readable output.
//
//               It doesn't work so well for asserting that foo_hpr 
//               is roughly equal to bar_hpr.  Try using
//               LQuaternionf::is_same_direction() for that.
//     See Also: get_standardized_rotation,
//               LQuaternion::is_same_direction
////////////////////////////////////////////////////////////////////
63
inline LVecBase3d LVecBase3d::get_standardized_hpr(void) const;

2336 10 compare_to 0 4 3457 22 LVecBase3d::compare_to 0 2 460 461 827
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::compare_to
//       Access: Published
//  Description: This flavor of compare_to uses a default threshold
//               value based on the numeric type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::compare_to
//       Access: Published
//  Description: Sorts vectors lexicographically, componentwise.
//               Returns a number less than 0 if this vector sorts
//               before the other one, greater than zero if it sorts
//               after, 0 if they are equivalent (within the indicated
//               tolerance).
////////////////////////////////////////////////////////////////////
149
inline int LVecBase3d::compare_to(LVecBase3d const &other) const;
inline int LVecBase3d::compare_to(LVecBase3d const &other, double threshold) const;

2337 8 get_hash 0 4 3457 20 LVecBase3d::get_hash 0 2 462 463 516
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////
107
inline size_t LVecBase3d::get_hash(void) const;
inline size_t LVecBase3d::get_hash(double threshold) const;

2338 8 add_hash 0 4 3457 20 LVecBase3d::add_hash 0 2 464 465 516
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////
127
inline size_t LVecBase3d::add_hash(size_t hash) const;
inline size_t LVecBase3d::add_hash(size_t hash, double threshold) const;

2339 13 generate_hash 0 4 3457 25 LVecBase3d::generate_hash 0 2 466 467 546
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::generate_hash
//       Access: Published
//  Description: Adds the vector to the indicated hash generator.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::generate_hash
//       Access: Published
//  Description: Adds the vector to the indicated hash generator.
////////////////////////////////////////////////////////////////////
171
inline void LVecBase3d::generate_hash(ChecksumHashGenerator &hashgen) const;
inline void LVecBase3d::generate_hash(ChecksumHashGenerator &hashgen, double threshold) const;

2340 10 operator - 0 68 3457 22 LVecBase3d::operator - 0 1 468 0
53
inline LVecBase3d LVecBase3d::operator -(void) const;

2341 10 operator + 0 4 3457 22 LVecBase3d::operator + 0 1 469 0
72
inline LVecBase3d LVecBase3d::operator +(LVecBase3d const &other) const;

2342 10 operator - 0 4 3457 22 LVecBase3d::operator - 0 1 470 0
72
inline LVecBase3d LVecBase3d::operator -(LVecBase3d const &other) const;

2343 10 operator * 0 4 3457 22 LVecBase3d::operator * 0 1 471 0
62
inline LVecBase3d LVecBase3d::operator *(double scalar) const;

2344 10 operator / 0 4 3457 22 LVecBase3d::operator / 0 1 472 0
62
inline LVecBase3d LVecBase3d::operator /(double scalar) const;

2345 11 operator += 0 4 3457 23 LVecBase3d::operator += 0 1 473 0
61
inline void LVecBase3d::operator +=(LVecBase3d const &other);

2346 11 operator -= 0 4 3457 23 LVecBase3d::operator -= 0 1 474 0
61
inline void LVecBase3d::operator -=(LVecBase3d const &other);

2347 11 operator *= 0 4 3457 23 LVecBase3d::operator *= 0 1 475 0
51
inline void LVecBase3d::operator *=(double scalar);

2348 11 operator /= 0 4 3457 23 LVecBase3d::operator /= 0 1 476 0
51
inline void LVecBase3d::operator /=(double scalar);

2349 18 componentwise_mult 0 4 3457 30 LVecBase3d::componentwise_mult 0 1 477 228
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::componentwise_mult
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
68
inline void LVecBase3d::componentwise_mult(LVecBase3d const &other);

2350 7 __pow__ 0 4 3457 19 LVecBase3d::__pow__ 0 1 478 0
61
inline LVecBase3d LVecBase3d::__pow__(double exponent) const;

2351 8 __ipow__ 0 4 3457 20 LVecBase3d::__ipow__ 0 1 479 0
71
inline PyObject *LVecBase3d::__ipow__(PyObject *self, double exponent);

2352 4 fmax 0 4 3457 16 LVecBase3d::fmax 0 1 480 211
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::fmax
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
66
inline LVecBase3d LVecBase3d::fmax(LVecBase3d const &other) const;

2353 4 fmin 0 4 3457 16 LVecBase3d::fmin 0 1 481 211
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::fmin
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
66
inline LVecBase3d LVecBase3d::fmin(LVecBase3d const &other) const;

2354 10 cross_into 0 4 3457 22 LVecBase3d::cross_into 0 1 482 241
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::cross product (with assignment)
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
60
inline void LVecBase3d::cross_into(LVecBase3d const &other);

2355 12 almost_equal 0 4 3457 24 LVecBase3d::almost_equal 0 2 483 484 662
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::almost_equal
//       Access: Published
//  Description: Returns true if two vectors are memberwise equal
//               within a specified tolerance.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::almost_equal
//       Access: Published
//  Description: Returns true if two vectors are memberwise equal
//               within a default tolerance based on the numeric type.
////////////////////////////////////////////////////////////////////
155
inline bool LVecBase3d::almost_equal(LVecBase3d const &other, double threshold) const;
inline bool LVecBase3d::almost_equal(LVecBase3d const &other) const;

2356 6 output 0 4 3457 18 LVecBase3d::output 0 1 485 216
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::output
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
51
inline void LVecBase3d::output(ostream &out) const;

2357 8 __repr__ 0 4 3457 20 LVecBase3d::__repr__ 0 1 486 0
47
inline string LVecBase3d::__repr__(void) const;

2358 20 write_datagram_fixed 0 4 3457 32 LVecBase3d::write_datagram_fixed 0 1 487 642
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::write_datagram_fixed
//       Access: Published
//  Description: Writes the vector to the Datagram using add_float32()
//               or add_float64(), depending on the type of floats in
//               the vector, regardless of the setting of
//               Datagram::set_stdfloat_double().  This is appropriate
//               when you want to write a fixed-width value to the
//               datagram, especially when you are not writing a bam
//               file.
////////////////////////////////////////////////////////////////////
74
inline void LVecBase3d::write_datagram_fixed(Datagram &destination) const;

2359 19 read_datagram_fixed 0 4 3457 31 LVecBase3d::read_datagram_fixed 0 1 488 348
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::read_datagram_fixed
//       Access: Published
//  Description: Reads the vector from the Datagram using get_float32()
//               or get_float64().  See write_datagram_fixed().
////////////////////////////////////////////////////////////////////
70
inline void LVecBase3d::read_datagram_fixed(DatagramIterator &source);

2360 14 write_datagram 0 4 3457 26 LVecBase3d::write_datagram 0 1 489 464
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::write_datagram
//       Access: Published
//  Description: Writes the vector to the Datagram using
//               add_stdfloat().  This is appropriate when you want to
//               write the vector using the standard width setting,
//               especially when you are writing a bam file.
////////////////////////////////////////////////////////////////////
68
inline void LVecBase3d::write_datagram(Datagram &destination) const;

2361 13 read_datagram 0 4 3457 25 LVecBase3d::read_datagram 0 1 490 280
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::read_datagram
//       Access: Published
//  Description: Reads the vector from the Datagram using get_stdfloat().
////////////////////////////////////////////////////////////////////
64
inline void LVecBase3d::read_datagram(DatagramIterator &source);

2362 14 get_class_type 0 4 3457 26 LVecBase3d::get_class_type 0 1 491 0
51
static TypeHandle LVecBase3d::get_class_type(void);

2363 10 LVecBase3i 0 4 3459 22 LVecBase3i::LVecBase3i 0 5 492 493 494 495 496 1114
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
252
inline LVecBase3i::LVecBase3i(void);
inline LVecBase3i::LVecBase3i(LVecBase3i const &copy);
inline LVecBase3i::LVecBase3i(int fill_value);
inline LVecBase3i::LVecBase3i(int x, int y, int z);
inline LVecBase3i::LVecBase3i(LVecBase2i const &copy, int z);

2364 10 operator = 0 4 3459 22 LVecBase3i::operator = 0 2 497 498 464
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Fill Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
125
inline LVecBase3i &LVecBase3i::operator =(LVecBase3i const &copy);
inline LVecBase3i &LVecBase3i::operator =(int fill_value);

2365 12 operator new 0 4 3459 24 LVecBase3i::operator new 0 1 499 0
114
inline void *LVecBase3i::operator new(size_t size);
inline void *LVecBase3i::operator new(size_t size, void *ptr);

2366 15 operator delete 0 4 3459 27 LVecBase3i::operator delete 0 0 0
108
inline void LVecBase3i::operator delete(void *ptr);
inline void LVecBase3i::operator delete(void *, void *);

2367 12 validate_ptr 0 4 3459 24 LVecBase3i::validate_ptr 0 0 0
61
static inline bool LVecBase3i::validate_ptr(void const *ptr);

2368 4 zero 0 4 3459 16 LVecBase3i::zero 0 1 500 259
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length vector.
////////////////////////////////////////////////////////////////////
55
static inline LVecBase3i const &LVecBase3i::zero(void);

2369 6 unit_x 0 4 3459 18 LVecBase3i::unit_x 0 1 501 256
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X vector.
////////////////////////////////////////////////////////////////////
57
static inline LVecBase3i const &LVecBase3i::unit_x(void);

2370 6 unit_y 0 4 3459 18 LVecBase3i::unit_y 0 1 502 256
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y vector.
////////////////////////////////////////////////////////////////////
57
static inline LVecBase3i const &LVecBase3i::unit_y(void);

2371 6 unit_z 0 4 3459 18 LVecBase3i::unit_z 0 1 503 256
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::unit_z Named Constructor
//       Access: Public
//  Description: Returns a unit Z vector.
////////////////////////////////////////////////////////////////////
57
static inline LVecBase3i const &LVecBase3i::unit_z(void);

2372 11 ~LVecBase3i 0 4 3459 23 LVecBase3i::~LVecBase3i 0 0 217
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Destructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
37
inline LVecBase3i::~LVecBase3i(void);

2373 10 __reduce__ 0 4 3459 22 LVecBase3i::__reduce__ 0 1 504 0
62
inline PyObject *LVecBase3i::__reduce__(PyObject *self) const;

2374 11 __getattr__ 0 4 3459 23 LVecBase3i::__getattr__ 0 1 505 0
88
inline PyObject *LVecBase3i::__getattr__(PyObject *self, string const &attr_name) const;

2375 11 __setattr__ 0 4 3459 23 LVecBase3i::__setattr__ 0 1 506 0
94
inline int LVecBase3i::__setattr__(PyObject *self, string const &attr_name, PyObject *assign);

2376 11 operator [] 0 4 3459 23 LVecBase3i::operator [] 0 2 507 508 224
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Indexing Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
92
inline int LVecBase3i::operator [](int i) const;
inline int &LVecBase3i::operator [](int i);

2377 4 size 0 4 3459 16 LVecBase3i::size 0 1 509 271
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::size
//       Access: Public, Static
//  Description: Returns 3: the number of components of a LVecBase3.
////////////////////////////////////////////////////////////////////
41
static inline int LVecBase3i::size(void);

2378 6 is_nan 0 4 3459 18 LVecBase3i::is_nan 0 1 510 308
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::is_nan
//       Access: Public
//  Description: Returns true if any component of the vector is
//               not-a-number, false otherwise.
////////////////////////////////////////////////////////////////////
43
inline bool LVecBase3i::is_nan(void) const;

2379 8 get_cell 0 4 3459 20 LVecBase3i::get_cell 0 1 511 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_cell
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
45
inline int LVecBase3i::get_cell(int i) const;

2380 5 get_x 0 4 3459 17 LVecBase3i::get_x 0 1 512 212
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_x
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
41
inline int LVecBase3i::get_x(void) const;

2381 5 get_y 0 4 3459 17 LVecBase3i::get_y 0 1 513 212
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_y
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
41
inline int LVecBase3i::get_y(void) const;

2382 5 get_z 0 4 3459 17 LVecBase3i::get_z 0 1 514 212
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_z
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
41
inline int LVecBase3i::get_z(void) const;

2383 8 set_cell 0 4 3459 20 LVecBase3i::set_cell 0 1 515 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set_cell
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
51
inline void LVecBase3i::set_cell(int i, int value);

2384 5 set_x 0 4 3459 17 LVecBase3i::set_x 0 1 516 212
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set_x
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
41
inline void LVecBase3i::set_x(int value);

2385 5 set_y 0 4 3459 17 LVecBase3i::set_y 0 1 517 212
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set_y
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
41
inline void LVecBase3i::set_y(int value);

2386 5 set_z 0 4 3459 17 LVecBase3i::set_z 0 1 518 212
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set_z
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
41
inline void LVecBase3i::set_z(int value);

2387 6 get_xy 0 4 3459 18 LVecBase3i::get_xy 0 1 519 317
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_xy
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first two components of this vector.
////////////////////////////////////////////////////////////////////
49
inline LVecBase2i LVecBase3i::get_xy(void) const;

2388 6 get_xz 0 4 3459 18 LVecBase3i::get_xz 0 1 520 322
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_xz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first and last components of this vector.
////////////////////////////////////////////////////////////////////
49
inline LVecBase2i LVecBase3i::get_xz(void) const;

2389 6 get_yz 0 4 3459 18 LVecBase3i::get_yz 0 1 521 316
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_yz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               last two components of this vector.
////////////////////////////////////////////////////////////////////
49
inline LVecBase2i LVecBase3i::get_yz(void) const;

2390 11 add_to_cell 0 4 3459 23 LVecBase3i::add_to_cell 0 1 522 374
// These next functions add to an existing value.
// i.e. foo.set_x(foo.get_x() + value)
// These are useful to reduce overhead in scripting
// languages:

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_to_cell
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
54
inline void LVecBase3i::add_to_cell(int i, int value);

2391 5 add_x 0 4 3459 17 LVecBase3i::add_x 0 1 523 212
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_x
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
41
inline void LVecBase3i::add_x(int value);

2392 5 add_y 0 4 3459 17 LVecBase3i::add_y 0 1 524 212
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_y
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
41
inline void LVecBase3i::add_y(int value);

2393 5 add_z 0 4 3459 17 LVecBase3i::add_z 0 1 525 212
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_z
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
41
inline void LVecBase3i::add_z(int value);

2394 8 get_data 0 4 3459 20 LVecBase3i::get_data 0 1 526 399
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_data
//       Access: Public
//  Description: Returns the address of the first of the three data
//               elements in the vector.  The remaining elements
//               occupy the next positions consecutively in memory.
////////////////////////////////////////////////////////////////////
51
inline int const *LVecBase3i::get_data(void) const;

2395 18 get_num_components 0 4 3459 30 LVecBase3i::get_num_components 0 1 527 278
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_num_components
//       Access: Public
//  Description: Returns the number of elements in the vector, three.
////////////////////////////////////////////////////////////////////
54
inline int LVecBase3i::get_num_components(void) const;

2396 4 fill 0 4 3459 16 LVecBase3i::fill 0 1 528 364
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::fill
//       Access: Published
//  Description: Sets each element of the vector to the indicated
//               fill_value.  This is particularly useful for
//               initializing to zero.
////////////////////////////////////////////////////////////////////
45
inline void LVecBase3i::fill(int fill_value);

2397 3 set 0 4 3459 15 LVecBase3i::set 0 1 529 213
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
49
inline void LVecBase3i::set(int x, int y, int z);

2398 3 dot 0 4 3459 15 LVecBase3i::dot 0 1 530 213
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::dot
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
58
inline int LVecBase3i::dot(LVecBase3i const &other) const;

2399 14 length_squared 0 4 3459 26 LVecBase3i::length_squared 0 1 531 300
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::length_squared
//       Access: Published
//  Description: Returns the square of the vector's length, cheap and
//               easy.
////////////////////////////////////////////////////////////////////
50
inline int LVecBase3i::length_squared(void) const;

2400 5 cross 0 4 3459 17 LVecBase3i::cross 0 1 532 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::cross
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
67
inline LVecBase3i LVecBase3i::cross(LVecBase3i const &other) const;

2401 10 operator < 0 4 3459 22 LVecBase3i::operator < 0 1 533 0
66
inline bool LVecBase3i::operator <(LVecBase3i const &other) const;

2402 11 operator == 0 4 3459 23 LVecBase3i::operator == 0 1 534 0
67
inline bool LVecBase3i::operator ==(LVecBase3i const &other) const;

2403 11 operator != 0 4 3459 23 LVecBase3i::operator != 0 1 535 0
67
inline bool LVecBase3i::operator !=(LVecBase3i const &other) const;

2404 20 get_standardized_hpr 0 4 3459 32 LVecBase3i::get_standardized_hpr 0 1 536 1030
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_standardized_hpr
//       Access: Published
//  Description: Try to un-spin the hpr to a standard form.  Like
//               all standards, someone decides between many
//               arbitrary possible standards.  This function assumes
//               that 0 and 360 are the same, as is 720 and
//               -360.  Also 180 and -180 are the same.  Another
//               example is -90 and 270.
//               Each element will be in the range -180.0 to 179.99999.
//               The original usage of this function is for human
//               readable output.
//
//               It doesn't work so well for asserting that foo_hpr 
//               is roughly equal to bar_hpr.  Try using
//               LQuaternionf::is_same_direction() for that.
//     See Also: get_standardized_rotation,
//               LQuaternion::is_same_direction
////////////////////////////////////////////////////////////////////
63
inline LVecBase3i LVecBase3i::get_standardized_hpr(void) const;

2405 10 compare_to 0 4 3459 22 LVecBase3i::compare_to 0 1 537 321
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::compare_to
//       Access: Published
//  Description: This flavor of compare_to uses a default threshold
//               value based on the numeric type.
////////////////////////////////////////////////////////////////////
65
inline int LVecBase3i::compare_to(LVecBase3i const &other) const;

2406 8 get_hash 0 4 3459 20 LVecBase3i::get_hash 0 1 538 257
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////
47
inline size_t LVecBase3i::get_hash(void) const;

2407 8 add_hash 0 4 3459 20 LVecBase3i::add_hash 0 1 539 257
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////
54
inline size_t LVecBase3i::add_hash(size_t hash) const;

2408 13 generate_hash 0 4 3459 25 LVecBase3i::generate_hash 0 1 540 272
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::generate_hash
//       Access: Published
//  Description: Adds the vector to the indicated hash generator.
////////////////////////////////////////////////////////////////////
76
inline void LVecBase3i::generate_hash(ChecksumHashGenerator &hashgen) const;

2409 10 operator - 0 68 3459 22 LVecBase3i::operator - 0 1 541 0
53
inline LVecBase3i LVecBase3i::operator -(void) const;

2410 10 operator + 0 4 3459 22 LVecBase3i::operator + 0 1 542 0
72
inline LVecBase3i LVecBase3i::operator +(LVecBase3i const &other) const;

2411 10 operator - 0 4 3459 22 LVecBase3i::operator - 0 1 543 0
72
inline LVecBase3i LVecBase3i::operator -(LVecBase3i const &other) const;

2412 10 operator * 0 4 3459 22 LVecBase3i::operator * 0 1 544 0
59
inline LVecBase3i LVecBase3i::operator *(int scalar) const;

2413 10 operator / 0 4 3459 22 LVecBase3i::operator / 0 1 545 0
59
inline LVecBase3i LVecBase3i::operator /(int scalar) const;

2414 11 operator += 0 4 3459 23 LVecBase3i::operator += 0 1 546 0
61
inline void LVecBase3i::operator +=(LVecBase3i const &other);

2415 11 operator -= 0 4 3459 23 LVecBase3i::operator -= 0 1 547 0
61
inline void LVecBase3i::operator -=(LVecBase3i const &other);

2416 11 operator *= 0 4 3459 23 LVecBase3i::operator *= 0 1 548 0
48
inline void LVecBase3i::operator *=(int scalar);

2417 11 operator /= 0 4 3459 23 LVecBase3i::operator /= 0 1 549 0
48
inline void LVecBase3i::operator /=(int scalar);

2418 18 componentwise_mult 0 4 3459 30 LVecBase3i::componentwise_mult 0 1 550 228
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::componentwise_mult
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
68
inline void LVecBase3i::componentwise_mult(LVecBase3i const &other);

2419 7 __pow__ 0 4 3459 19 LVecBase3i::__pow__ 0 1 551 0
58
inline LVecBase3i LVecBase3i::__pow__(int exponent) const;

2420 8 __ipow__ 0 4 3459 20 LVecBase3i::__ipow__ 0 1 552 0
68
inline PyObject *LVecBase3i::__ipow__(PyObject *self, int exponent);

2421 4 fmax 0 4 3459 16 LVecBase3i::fmax 0 1 553 211
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::fmax
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
66
inline LVecBase3i LVecBase3i::fmax(LVecBase3i const &other) const;

2422 4 fmin 0 4 3459 16 LVecBase3i::fmin 0 1 554 211
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::fmin
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
66
inline LVecBase3i LVecBase3i::fmin(LVecBase3i const &other) const;

2423 10 cross_into 0 4 3459 22 LVecBase3i::cross_into 0 1 555 241
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::cross product (with assignment)
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
60
inline void LVecBase3i::cross_into(LVecBase3i const &other);

2424 12 almost_equal 0 4 3459 24 LVecBase3i::almost_equal 0 2 556 557 662
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::almost_equal
//       Access: Published
//  Description: Returns true if two vectors are memberwise equal
//               within a specified tolerance.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::almost_equal
//       Access: Published
//  Description: Returns true if two vectors are memberwise equal
//               within a default tolerance based on the numeric type.
////////////////////////////////////////////////////////////////////
152
inline bool LVecBase3i::almost_equal(LVecBase3i const &other, int threshold) const;
inline bool LVecBase3i::almost_equal(LVecBase3i const &other) const;

2425 6 output 0 4 3459 18 LVecBase3i::output 0 1 558 216
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::output
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
51
inline void LVecBase3i::output(ostream &out) const;

2426 8 __repr__ 0 4 3459 20 LVecBase3i::__repr__ 0 1 559 0
47
inline string LVecBase3i::__repr__(void) const;

2427 20 write_datagram_fixed 0 4 3459 32 LVecBase3i::write_datagram_fixed 0 1 560 642
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::write_datagram_fixed
//       Access: Published
//  Description: Writes the vector to the Datagram using add_float32()
//               or add_float64(), depending on the type of floats in
//               the vector, regardless of the setting of
//               Datagram::set_stdfloat_double().  This is appropriate
//               when you want to write a fixed-width value to the
//               datagram, especially when you are not writing a bam
//               file.
////////////////////////////////////////////////////////////////////
74
inline void LVecBase3i::write_datagram_fixed(Datagram &destination) const;

2428 19 read_datagram_fixed 0 4 3459 31 LVecBase3i::read_datagram_fixed 0 1 561 348
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::read_datagram_fixed
//       Access: Published
//  Description: Reads the vector from the Datagram using get_float32()
//               or get_float64().  See write_datagram_fixed().
////////////////////////////////////////////////////////////////////
70
inline void LVecBase3i::read_datagram_fixed(DatagramIterator &source);

2429 14 write_datagram 0 4 3459 26 LVecBase3i::write_datagram 0 1 562 464
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::write_datagram
//       Access: Published
//  Description: Writes the vector to the Datagram using
//               add_stdfloat().  This is appropriate when you want to
//               write the vector using the standard width setting,
//               especially when you are writing a bam file.
////////////////////////////////////////////////////////////////////
68
inline void LVecBase3i::write_datagram(Datagram &destination) const;

2430 13 read_datagram 0 4 3459 25 LVecBase3i::read_datagram 0 1 563 280
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::read_datagram
//       Access: Published
//  Description: Reads the vector from the Datagram using get_stdfloat().
////////////////////////////////////////////////////////////////////
64
inline void LVecBase3i::read_datagram(DatagramIterator &source);

2431 14 get_class_type 0 4 3459 26 LVecBase3i::get_class_type 0 1 564 0
51
static TypeHandle LVecBase3i::get_class_type(void);

2432 29 get_default_coordinate_system 0 1 0 29 get_default_coordinate_system 0 1 1825 0
53
CoordinateSystem get_default_coordinate_system(void);

2433 30 parse_coordinate_system_string 0 1 0 30 parse_coordinate_system_string 0 1 1826 0
67
CoordinateSystem parse_coordinate_system_string(string const &str);

2434 24 format_coordinate_system 0 1 0 24 format_coordinate_system 0 1 1827 0
53
string format_coordinate_system(CoordinateSystem cs);

2435 15 is_right_handed 0 1 0 15 is_right_handed 0 1 1828 0
57
bool is_right_handed(CoordinateSystem cs = ::CS_default);

2436 9 LVector3f 0 4 3462 20 LVector3f::LVector3f 0 5 565 566 567 568 569 1121
////////////////////////////////////////////////////////////////////
//     Function: LVector3::Default Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
252
inline LVector3f::LVector3f(void);
inline LVector3f::LVector3f(LVecBase3f const &copy);
inline LVector3f::LVector3f(float fill_value);
inline LVector3f::LVector3f(float x, float y, float z);
inline LVector3f::LVector3f(LVecBase2f const &copy, float z);

2437 10 operator = 0 4 3462 21 LVector3f::operator = 0 2 570 571 462
////////////////////////////////////////////////////////////////////
//     Function: LVector3::Copy Assignment Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::Copy Fill Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
123
inline LVector3f &LVector3f::operator =(LVecBase3f const &copy);
inline LVector3f &LVector3f::operator =(float fill_value);

2438 11 __getattr__ 0 4 3462 22 LVector3f::__getattr__ 0 1 572 0
87
inline PyObject *LVector3f::__getattr__(PyObject *self, string const &attr_name) const;

2439 11 __setattr__ 0 4 3462 22 LVector3f::__setattr__ 0 1 573 0
93
inline int LVector3f::__setattr__(PyObject *self, string const &attr_name, PyObject *assign);

2440 4 zero 0 4 3462 15 LVector3f::zero 0 1 574 261
////////////////////////////////////////////////////////////////////
//     Function: LVector3::zero Named Constructor
//       Access: Published
//  Description: Returns a zero-length vector.
////////////////////////////////////////////////////////////////////
53
static inline LVector3f const &LVector3f::zero(void);

2441 6 unit_x 0 4 3462 17 LVector3f::unit_x 0 1 575 258
////////////////////////////////////////////////////////////////////
//     Function: LVector3::unit_x Named Constructor
//       Access: Published
//  Description: Returns a unit X vector.
////////////////////////////////////////////////////////////////////
55
static inline LVector3f const &LVector3f::unit_x(void);

2442 6 unit_y 0 4 3462 17 LVector3f::unit_y 0 1 576 258
////////////////////////////////////////////////////////////////////
//     Function: LVector3::unit_y Named Constructor
//       Access: Published
//  Description: Returns a unit Y vector.
////////////////////////////////////////////////////////////////////
55
static inline LVector3f const &LVector3f::unit_y(void);

2443 6 unit_z 0 4 3462 17 LVector3f::unit_z 0 1 577 258
////////////////////////////////////////////////////////////////////
//     Function: LVector3::unit_z Named Constructor
//       Access: Published
//  Description: Returns a unit Z vector.
////////////////////////////////////////////////////////////////////
55
static inline LVector3f const &LVector3f::unit_z(void);

2444 6 get_xy 0 4 3462 17 LVector3f::get_xy 0 1 578 316
////////////////////////////////////////////////////////////////////
//     Function: LVector3::get_xy
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first two components of this vector.
////////////////////////////////////////////////////////////////////
47
inline LVector2f LVector3f::get_xy(void) const;

2445 6 get_xz 0 4 3462 17 LVector3f::get_xz 0 1 579 321
////////////////////////////////////////////////////////////////////
//     Function: LVector3::get_xz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first and last components of this vector.
////////////////////////////////////////////////////////////////////
47
inline LVector2f LVector3f::get_xz(void) const;

2446 6 get_yz 0 4 3462 17 LVector3f::get_yz 0 1 580 315
////////////////////////////////////////////////////////////////////
//     Function: LVector3::get_yz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               last two components of this vector.
////////////////////////////////////////////////////////////////////
47
inline LVector2f LVector3f::get_yz(void) const;

2447 10 operator - 0 68 3462 21 LVector3f::operator - 0 1 581 0
51
inline LVector3f LVector3f::operator -(void) const;

2448 10 operator + 0 4 3462 21 LVector3f::operator + 0 2 582 583 0
141
inline LVecBase3f LVector3f::operator +(LVecBase3f const &other) const;
inline LVector3f LVector3f::operator +(LVector3f const &other) const;

2449 10 operator - 0 4 3462 21 LVector3f::operator - 0 2 584 585 0
141
inline LVecBase3f LVector3f::operator -(LVecBase3f const &other) const;
inline LVector3f LVector3f::operator -(LVector3f const &other) const;

2450 5 cross 0 4 3462 16 LVector3f::cross 0 1 586 214
////////////////////////////////////////////////////////////////////
//     Function: LVector3::cross
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
65
inline LVector3f LVector3f::cross(LVecBase3f const &other) const;

2451 7 project 0 4 3462 18 LVector3f::project 0 1 587 389
////////////////////////////////////////////////////////////////////
//     Function: LVector3::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
////////////////////////////////////////////////////////////////////
66
inline LVector3f LVector3f::project(LVecBase3f const &onto) const;

2452 9 angle_rad 0 4 3462 20 LVector3f::angle_rad 0 1 588 385
////////////////////////////////////////////////////////////////////
//     Function: LVector::angle_rad
//       Access: Published
//  Description: Returns the unsigned angle between this vector and
//               the other one, expressed in radians.  Both vectors
//               should be initially normalized.
////////////////////////////////////////////////////////////////////
64
inline float LVector3f::angle_rad(LVector3f const &other) const;

2453 9 angle_deg 0 4 3462 20 LVector3f::angle_deg 0 1 589 376
////////////////////////////////////////////////////////////////////
//     Function: LVector::angle_deg
//       Access: Published
//  Description: Returns the angle between this vector and the other
//               one, expressed in degrees.  Both vectors should be
//               initially normalized.
////////////////////////////////////////////////////////////////////
64
inline float LVector3f::angle_deg(LVector3f const &other) const;

2454 16 signed_angle_rad 0 4 3462 27 LVector3f::signed_angle_rad 0 1 590 548
////////////////////////////////////////////////////////////////////
//     Function: LVector::signed_angle_rad
//       Access: Published
//  Description: returns the signed angle between two vectors.
//               The angle is positive if the rotation from this
//               vector to other is clockwise when looking in the
//               direction of the ref vector.
//
//               Vectors (except the ref vector) should be initially
//               normalized.
////////////////////////////////////////////////////////////////////
93
inline float LVector3f::signed_angle_rad(LVector3f const &other, LVector3f const &ref) const;

2455 16 signed_angle_deg 0 4 3462 27 LVector3f::signed_angle_deg 0 1 591 549
////////////////////////////////////////////////////////////////////
//     Function: LVector::signed_angle_deg
//       Access: Published
//  Description: Returns the signed angle between two vectors. 
//               The angle is positive if the rotation from this
//               vector to other is clockwise when looking in the
//               direction of the ref vector.
//
//               Vectors (except the ref vector) should be initially
//               normalized.
////////////////////////////////////////////////////////////////////
93
inline float LVector3f::signed_angle_deg(LVector3f const &other, LVector3f const &ref) const;

2456 18 relative_angle_rad 0 4 3462 29 LVector3f::relative_angle_rad 0 1 592 266
////////////////////////////////////////////////////////////////////
//     Function: LVector::relative_angle_rad
//       Access: Published
//  Description: This method is deprecated.  Do not use.
////////////////////////////////////////////////////////////////////
73
inline float LVector3f::relative_angle_rad(LVector3f const &other) const;

2457 18 relative_angle_deg 0 4 3462 29 LVector3f::relative_angle_deg 0 1 593 266
////////////////////////////////////////////////////////////////////
//     Function: LVector::relative_angle_deg
//       Access: Published
//  Description: This method is deprecated.  Do not use.
////////////////////////////////////////////////////////////////////
73
inline float LVector3f::relative_angle_deg(LVector3f const &other) const;

2458 10 operator * 0 4 3462 21 LVector3f::operator * 0 1 594 0
59
inline LVector3f LVector3f::operator *(float scalar) const;

2459 10 operator / 0 4 3462 21 LVector3f::operator / 0 1 595 0
59
inline LVector3f LVector3f::operator /(float scalar) const;

2460 2 up 0 4 3462 13 LVector3f::up 0 1 596 291
////////////////////////////////////////////////////////////////////
//     Function: LVector3::up
//       Access: Published, Static
//  Description: Returns the up vector for the given coordinate
//               system.
////////////////////////////////////////////////////////////////////
74
static inline LVector3f LVector3f::up(CoordinateSystem cs = ::CS_default);

2461 5 right 0 4 3462 16 LVector3f::right 0 1 597 297
////////////////////////////////////////////////////////////////////
//     Function: LVector3::right
//       Access: Published, Static
//  Description: Returns the right vector for the given coordinate
//               system.
////////////////////////////////////////////////////////////////////
77
static inline LVector3f LVector3f::right(CoordinateSystem cs = ::CS_default);

2462 7 forward 0 4 3462 18 LVector3f::forward 0 1 598 301
////////////////////////////////////////////////////////////////////
//     Function: LVector3::forward
//       Access: Published, Static
//  Description: Returns the forward vector for the given coordinate
//               system.
////////////////////////////////////////////////////////////////////
79
static inline LVector3f LVector3f::forward(CoordinateSystem cs = ::CS_default);

2463 4 down 0 4 3462 15 LVector3f::down 0 1 599 295
////////////////////////////////////////////////////////////////////
//     Function: LVector3::down
//       Access: Published, Static
//  Description: Returns the down vector for the given coordinate
//               system.
////////////////////////////////////////////////////////////////////
76
static inline LVector3f LVector3f::down(CoordinateSystem cs = ::CS_default);

2464 4 left 0 4 3462 15 LVector3f::left 0 1 600 295
////////////////////////////////////////////////////////////////////
//     Function: LVector3::left
//       Access: Published, Static
//  Description: Returns the left vector for the given coordinate
//               system.
////////////////////////////////////////////////////////////////////
76
static inline LVector3f LVector3f::left(CoordinateSystem cs = ::CS_default);

2465 4 back 0 4 3462 15 LVector3f::back 0 1 601 295
////////////////////////////////////////////////////////////////////
//     Function: LVector3::back
//       Access: Published, Static
//  Description: Returns the back vector for the given coordinate
//               system.
////////////////////////////////////////////////////////////////////
76
static inline LVector3f LVector3f::back(CoordinateSystem cs = ::CS_default);

2466 3 rfu 0 4 3462 14 LVector3f::rfu 0 1 602 523
//  INLINE_LINMATH static FLOATNAME(LVector3) & rfu(FLOATTYPE right,

////////////////////////////////////////////////////////////////////
//     Function: LVector3::rfu
//       Access: Published, Static
//  Description: Returns a vector that is described by its right,
//               forward, and up components, in whatever way the
//               coordinate system represents that vector.
////////////////////////////////////////////////////////////////////
//INLINE_LINMATH FLOATNAME(LVector3) &FLOATNAME(LVector3)::
109
static inline LVector3f LVector3f::rfu(float right, float fwd, float up, CoordinateSystem cs = ::CS_default);

2467 8 __repr__ 0 4 3462 19 LVector3f::__repr__ 0 1 603 0
46
inline string LVector3f::__repr__(void) const;

2468 14 get_class_type 0 4 3462 25 LVector3f::get_class_type 0 1 604 0
50
static TypeHandle LVector3f::get_class_type(void);

2469 10 ~LVector3f 0 4 3462 21 LVector3f::~LVector3f 0 0 0
28
LVector3f::~LVector3f(void);

2470 9 LVector3d 0 4 3463 20 LVector3d::LVector3d 0 5 605 606 607 608 609 1121
////////////////////////////////////////////////////////////////////
//     Function: LVector3::Default Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
257
inline LVector3d::LVector3d(void);
inline LVector3d::LVector3d(LVecBase3d const &copy);
inline LVector3d::LVector3d(double fill_value);
inline LVector3d::LVector3d(double x, double y, double z);
inline LVector3d::LVector3d(LVecBase2d const &copy, double z);

2471 10 operator = 0 4 3463 21 LVector3d::operator = 0 2 610 611 462
////////////////////////////////////////////////////////////////////
//     Function: LVector3::Copy Assignment Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::Copy Fill Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
124
inline LVector3d &LVector3d::operator =(LVecBase3d const &copy);
inline LVector3d &LVector3d::operator =(double fill_value);

2472 11 __getattr__ 0 4 3463 22 LVector3d::__getattr__ 0 1 612 0
87
inline PyObject *LVector3d::__getattr__(PyObject *self, string const &attr_name) const;

2473 11 __setattr__ 0 4 3463 22 LVector3d::__setattr__ 0 1 613 0
93
inline int LVector3d::__setattr__(PyObject *self, string const &attr_name, PyObject *assign);

2474 4 zero 0 4 3463 15 LVector3d::zero 0 1 614 261
////////////////////////////////////////////////////////////////////
//     Function: LVector3::zero Named Constructor
//       Access: Published
//  Description: Returns a zero-length vector.
////////////////////////////////////////////////////////////////////
53
static inline LVector3d const &LVector3d::zero(void);

2475 6 unit_x 0 4 3463 17 LVector3d::unit_x 0 1 615 258
////////////////////////////////////////////////////////////////////
//     Function: LVector3::unit_x Named Constructor
//       Access: Published
//  Description: Returns a unit X vector.
////////////////////////////////////////////////////////////////////
55
static inline LVector3d const &LVector3d::unit_x(void);

2476 6 unit_y 0 4 3463 17 LVector3d::unit_y 0 1 616 258
////////////////////////////////////////////////////////////////////
//     Function: LVector3::unit_y Named Constructor
//       Access: Published
//  Description: Returns a unit Y vector.
////////////////////////////////////////////////////////////////////
55
static inline LVector3d const &LVector3d::unit_y(void);

2477 6 unit_z 0 4 3463 17 LVector3d::unit_z 0 1 617 258
////////////////////////////////////////////////////////////////////
//     Function: LVector3::unit_z Named Constructor
//       Access: Published
//  Description: Returns a unit Z vector.
////////////////////////////////////////////////////////////////////
55
static inline LVector3d const &LVector3d::unit_z(void);

2478 6 get_xy 0 4 3463 17 LVector3d::get_xy 0 1 618 316
////////////////////////////////////////////////////////////////////
//     Function: LVector3::get_xy
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first two components of this vector.
////////////////////////////////////////////////////////////////////
47
inline LVector2d LVector3d::get_xy(void) const;

2479 6 get_xz 0 4 3463 17 LVector3d::get_xz 0 1 619 321
////////////////////////////////////////////////////////////////////
//     Function: LVector3::get_xz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first and last components of this vector.
////////////////////////////////////////////////////////////////////
47
inline LVector2d LVector3d::get_xz(void) const;

2480 6 get_yz 0 4 3463 17 LVector3d::get_yz 0 1 620 315
////////////////////////////////////////////////////////////////////
//     Function: LVector3::get_yz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               last two components of this vector.
////////////////////////////////////////////////////////////////////
47
inline LVector2d LVector3d::get_yz(void) const;

2481 10 operator - 0 68 3463 21 LVector3d::operator - 0 1 621 0
51
inline LVector3d LVector3d::operator -(void) const;

2482 10 operator + 0 4 3463 21 LVector3d::operator + 0 2 622 623 0
141
inline LVecBase3d LVector3d::operator +(LVecBase3d const &other) const;
inline LVector3d LVector3d::operator +(LVector3d const &other) const;

2483 10 operator - 0 4 3463 21 LVector3d::operator - 0 2 624 625 0
141
inline LVecBase3d LVector3d::operator -(LVecBase3d const &other) const;
inline LVector3d LVector3d::operator -(LVector3d const &other) const;

2484 5 cross 0 4 3463 16 LVector3d::cross 0 1 626 214
////////////////////////////////////////////////////////////////////
//     Function: LVector3::cross
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
65
inline LVector3d LVector3d::cross(LVecBase3d const &other) const;

2485 7 project 0 4 3463 18 LVector3d::project 0 1 627 389
////////////////////////////////////////////////////////////////////
//     Function: LVector3::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
////////////////////////////////////////////////////////////////////
66
inline LVector3d LVector3d::project(LVecBase3d const &onto) const;

2486 9 angle_rad 0 4 3463 20 LVector3d::angle_rad 0 1 628 385
////////////////////////////////////////////////////////////////////
//     Function: LVector::angle_rad
//       Access: Published
//  Description: Returns the unsigned angle between this vector and
//               the other one, expressed in radians.  Both vectors
//               should be initially normalized.
////////////////////////////////////////////////////////////////////
65
inline double LVector3d::angle_rad(LVector3d const &other) const;

2487 9 angle_deg 0 4 3463 20 LVector3d::angle_deg 0 1 629 376
////////////////////////////////////////////////////////////////////
//     Function: LVector::angle_deg
//       Access: Published
//  Description: Returns the angle between this vector and the other
//               one, expressed in degrees.  Both vectors should be
//               initially normalized.
////////////////////////////////////////////////////////////////////
65
inline double LVector3d::angle_deg(LVector3d const &other) const;

2488 16 signed_angle_rad 0 4 3463 27 LVector3d::signed_angle_rad 0 1 630 548
////////////////////////////////////////////////////////////////////
//     Function: LVector::signed_angle_rad
//       Access: Published
//  Description: returns the signed angle between two vectors.
//               The angle is positive if the rotation from this
//               vector to other is clockwise when looking in the
//               direction of the ref vector.
//
//               Vectors (except the ref vector) should be initially
//               normalized.
////////////////////////////////////////////////////////////////////
94
inline double LVector3d::signed_angle_rad(LVector3d const &other, LVector3d const &ref) const;

2489 16 signed_angle_deg 0 4 3463 27 LVector3d::signed_angle_deg 0 1 631 549
////////////////////////////////////////////////////////////////////
//     Function: LVector::signed_angle_deg
//       Access: Published
//  Description: Returns the signed angle between two vectors. 
//               The angle is positive if the rotation from this
//               vector to other is clockwise when looking in the
//               direction of the ref vector.
//
//               Vectors (except the ref vector) should be initially
//               normalized.
////////////////////////////////////////////////////////////////////
94
inline double LVector3d::signed_angle_deg(LVector3d const &other, LVector3d const &ref) const;

2490 18 relative_angle_rad 0 4 3463 29 LVector3d::relative_angle_rad 0 1 632 266
////////////////////////////////////////////////////////////////////
//     Function: LVector::relative_angle_rad
//       Access: Published
//  Description: This method is deprecated.  Do not use.
////////////////////////////////////////////////////////////////////
74
inline double LVector3d::relative_angle_rad(LVector3d const &other) const;

2491 18 relative_angle_deg 0 4 3463 29 LVector3d::relative_angle_deg 0 1 633 266
////////////////////////////////////////////////////////////////////
//     Function: LVector::relative_angle_deg
//       Access: Published
//  Description: This method is deprecated.  Do not use.
////////////////////////////////////////////////////////////////////
74
inline double LVector3d::relative_angle_deg(LVector3d const &other) const;

2492 10 operator * 0 4 3463 21 LVector3d::operator * 0 1 634 0
60
inline LVector3d LVector3d::operator *(double scalar) const;

2493 10 operator / 0 4 3463 21 LVector3d::operator / 0 1 635 0
60
inline LVector3d LVector3d::operator /(double scalar) const;

2494 2 up 0 4 3463 13 LVector3d::up 0 1 636 291
////////////////////////////////////////////////////////////////////
//     Function: LVector3::up
//       Access: Published, Static
//  Description: Returns the up vector for the given coordinate
//               system.
////////////////////////////////////////////////////////////////////
74
static inline LVector3d LVector3d::up(CoordinateSystem cs = ::CS_default);

2495 5 right 0 4 3463 16 LVector3d::right 0 1 637 297
////////////////////////////////////////////////////////////////////
//     Function: LVector3::right
//       Access: Published, Static
//  Description: Returns the right vector for the given coordinate
//               system.
////////////////////////////////////////////////////////////////////
77
static inline LVector3d LVector3d::right(CoordinateSystem cs = ::CS_default);

2496 7 forward 0 4 3463 18 LVector3d::forward 0 1 638 301
////////////////////////////////////////////////////////////////////
//     Function: LVector3::forward
//       Access: Published, Static
//  Description: Returns the forward vector for the given coordinate
//               system.
////////////////////////////////////////////////////////////////////
79
static inline LVector3d LVector3d::forward(CoordinateSystem cs = ::CS_default);

2497 4 down 0 4 3463 15 LVector3d::down 0 1 639 295
////////////////////////////////////////////////////////////////////
//     Function: LVector3::down
//       Access: Published, Static
//  Description: Returns the down vector for the given coordinate
//               system.
////////////////////////////////////////////////////////////////////
76
static inline LVector3d LVector3d::down(CoordinateSystem cs = ::CS_default);

2498 4 left 0 4 3463 15 LVector3d::left 0 1 640 295
////////////////////////////////////////////////////////////////////
//     Function: LVector3::left
//       Access: Published, Static
//  Description: Returns the left vector for the given coordinate
//               system.
////////////////////////////////////////////////////////////////////
76
static inline LVector3d LVector3d::left(CoordinateSystem cs = ::CS_default);

2499 4 back 0 4 3463 15 LVector3d::back 0 1 641 295
////////////////////////////////////////////////////////////////////
//     Function: LVector3::back
//       Access: Published, Static
//  Description: Returns the back vector for the given coordinate
//               system.
////////////////////////////////////////////////////////////////////
76
static inline LVector3d LVector3d::back(CoordinateSystem cs = ::CS_default);

2500 3 rfu 0 4 3463 14 LVector3d::rfu 0 1 642 523
//  INLINE_LINMATH static FLOATNAME(LVector3) & rfu(FLOATTYPE right,

////////////////////////////////////////////////////////////////////
//     Function: LVector3::rfu
//       Access: Published, Static
//  Description: Returns a vector that is described by its right,
//               forward, and up components, in whatever way the
//               coordinate system represents that vector.
////////////////////////////////////////////////////////////////////
//INLINE_LINMATH FLOATNAME(LVector3) &FLOATNAME(LVector3)::
112
static inline LVector3d LVector3d::rfu(double right, double fwd, double up, CoordinateSystem cs = ::CS_default);

2501 8 __repr__ 0 4 3463 19 LVector3d::__repr__ 0 1 643 0
46
inline string LVector3d::__repr__(void) const;

2502 14 get_class_type 0 4 3463 25 LVector3d::get_class_type 0 1 644 0
50
static TypeHandle LVector3d::get_class_type(void);

2503 10 ~LVector3d 0 4 3463 21 LVector3d::~LVector3d 0 0 0
28
LVector3d::~LVector3d(void);

2504 9 LVector3i 0 4 3464 20 LVector3i::LVector3i 0 5 645 646 647 648 649 1121
////////////////////////////////////////////////////////////////////
//     Function: LVector3::Default Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
242
inline LVector3i::LVector3i(void);
inline LVector3i::LVector3i(LVecBase3i const &copy);
inline LVector3i::LVector3i(int fill_value);
inline LVector3i::LVector3i(int x, int y, int z);
inline LVector3i::LVector3i(LVecBase2i const &copy, int z);

2505 10 operator = 0 4 3464 21 LVector3i::operator = 0 2 650 651 462
////////////////////////////////////////////////////////////////////
//     Function: LVector3::Copy Assignment Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::Copy Fill Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
121
inline LVector3i &LVector3i::operator =(LVecBase3i const &copy);
inline LVector3i &LVector3i::operator =(int fill_value);

2506 11 __getattr__ 0 4 3464 22 LVector3i::__getattr__ 0 1 652 0
87
inline PyObject *LVector3i::__getattr__(PyObject *self, string const &attr_name) const;

2507 11 __setattr__ 0 4 3464 22 LVector3i::__setattr__ 0 1 653 0
93
inline int LVector3i::__setattr__(PyObject *self, string const &attr_name, PyObject *assign);

2508 4 zero 0 4 3464 15 LVector3i::zero 0 1 654 261
////////////////////////////////////////////////////////////////////
//     Function: LVector3::zero Named Constructor
//       Access: Published
//  Description: Returns a zero-length vector.
////////////////////////////////////////////////////////////////////
53
static inline LVector3i const &LVector3i::zero(void);

2509 6 unit_x 0 4 3464 17 LVector3i::unit_x 0 1 655 258
////////////////////////////////////////////////////////////////////
//     Function: LVector3::unit_x Named Constructor
//       Access: Published
//  Description: Returns a unit X vector.
////////////////////////////////////////////////////////////////////
55
static inline LVector3i const &LVector3i::unit_x(void);

2510 6 unit_y 0 4 3464 17 LVector3i::unit_y 0 1 656 258
////////////////////////////////////////////////////////////////////
//     Function: LVector3::unit_y Named Constructor
//       Access: Published
//  Description: Returns a unit Y vector.
////////////////////////////////////////////////////////////////////
55
static inline LVector3i const &LVector3i::unit_y(void);

2511 6 unit_z 0 4 3464 17 LVector3i::unit_z 0 1 657 258
////////////////////////////////////////////////////////////////////
//     Function: LVector3::unit_z Named Constructor
//       Access: Published
//  Description: Returns a unit Z vector.
////////////////////////////////////////////////////////////////////
55
static inline LVector3i const &LVector3i::unit_z(void);

2512 6 get_xy 0 4 3464 17 LVector3i::get_xy 0 1 658 316
////////////////////////////////////////////////////////////////////
//     Function: LVector3::get_xy
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first two components of this vector.
////////////////////////////////////////////////////////////////////
47
inline LVector2i LVector3i::get_xy(void) const;

2513 6 get_xz 0 4 3464 17 LVector3i::get_xz 0 1 659 321
////////////////////////////////////////////////////////////////////
//     Function: LVector3::get_xz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first and last components of this vector.
////////////////////////////////////////////////////////////////////
47
inline LVector2i LVector3i::get_xz(void) const;

2514 6 get_yz 0 4 3464 17 LVector3i::get_yz 0 1 660 315
////////////////////////////////////////////////////////////////////
//     Function: LVector3::get_yz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               last two components of this vector.
////////////////////////////////////////////////////////////////////
47
inline LVector2i LVector3i::get_yz(void) const;

2515 10 operator - 0 68 3464 21 LVector3i::operator - 0 1 661 0
51
inline LVector3i LVector3i::operator -(void) const;

2516 10 operator + 0 4 3464 21 LVector3i::operator + 0 2 662 663 0
141
inline LVecBase3i LVector3i::operator +(LVecBase3i const &other) const;
inline LVector3i LVector3i::operator +(LVector3i const &other) const;

2517 10 operator - 0 4 3464 21 LVector3i::operator - 0 2 664 665 0
141
inline LVecBase3i LVector3i::operator -(LVecBase3i const &other) const;
inline LVector3i LVector3i::operator -(LVector3i const &other) const;

2518 5 cross 0 4 3464 16 LVector3i::cross 0 1 666 214
////////////////////////////////////////////////////////////////////
//     Function: LVector3::cross
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
65
inline LVector3i LVector3i::cross(LVecBase3i const &other) const;

2519 10 operator * 0 4 3464 21 LVector3i::operator * 0 1 667 0
57
inline LVector3i LVector3i::operator *(int scalar) const;

2520 10 operator / 0 4 3464 21 LVector3i::operator / 0 1 668 0
57
inline LVector3i LVector3i::operator /(int scalar) const;

2521 2 up 0 4 3464 13 LVector3i::up 0 1 669 291
////////////////////////////////////////////////////////////////////
//     Function: LVector3::up
//       Access: Published, Static
//  Description: Returns the up vector for the given coordinate
//               system.
////////////////////////////////////////////////////////////////////
74
static inline LVector3i LVector3i::up(CoordinateSystem cs = ::CS_default);

2522 5 right 0 4 3464 16 LVector3i::right 0 1 670 297
////////////////////////////////////////////////////////////////////
//     Function: LVector3::right
//       Access: Published, Static
//  Description: Returns the right vector for the given coordinate
//               system.
////////////////////////////////////////////////////////////////////
77
static inline LVector3i LVector3i::right(CoordinateSystem cs = ::CS_default);

2523 7 forward 0 4 3464 18 LVector3i::forward 0 1 671 301
////////////////////////////////////////////////////////////////////
//     Function: LVector3::forward
//       Access: Published, Static
//  Description: Returns the forward vector for the given coordinate
//               system.
////////////////////////////////////////////////////////////////////
79
static inline LVector3i LVector3i::forward(CoordinateSystem cs = ::CS_default);

2524 4 down 0 4 3464 15 LVector3i::down 0 1 672 295
////////////////////////////////////////////////////////////////////
//     Function: LVector3::down
//       Access: Published, Static
//  Description: Returns the down vector for the given coordinate
//               system.
////////////////////////////////////////////////////////////////////
76
static inline LVector3i LVector3i::down(CoordinateSystem cs = ::CS_default);

2525 4 left 0 4 3464 15 LVector3i::left 0 1 673 295
////////////////////////////////////////////////////////////////////
//     Function: LVector3::left
//       Access: Published, Static
//  Description: Returns the left vector for the given coordinate
//               system.
////////////////////////////////////////////////////////////////////
76
static inline LVector3i LVector3i::left(CoordinateSystem cs = ::CS_default);

2526 4 back 0 4 3464 15 LVector3i::back 0 1 674 295
////////////////////////////////////////////////////////////////////
//     Function: LVector3::back
//       Access: Published, Static
//  Description: Returns the back vector for the given coordinate
//               system.
////////////////////////////////////////////////////////////////////
76
static inline LVector3i LVector3i::back(CoordinateSystem cs = ::CS_default);

2527 3 rfu 0 4 3464 14 LVector3i::rfu 0 1 675 523
//  INLINE_LINMATH static FLOATNAME(LVector3) & rfu(FLOATTYPE right,

////////////////////////////////////////////////////////////////////
//     Function: LVector3::rfu
//       Access: Published, Static
//  Description: Returns a vector that is described by its right,
//               forward, and up components, in whatever way the
//               coordinate system represents that vector.
////////////////////////////////////////////////////////////////////
//INLINE_LINMATH FLOATNAME(LVector3) &FLOATNAME(LVector3)::
103
static inline LVector3i LVector3i::rfu(int right, int fwd, int up, CoordinateSystem cs = ::CS_default);

2528 8 __repr__ 0 4 3464 19 LVector3i::__repr__ 0 1 676 0
46
inline string LVector3i::__repr__(void) const;

2529 14 get_class_type 0 4 3464 25 LVector3i::get_class_type 0 1 677 0
50
static TypeHandle LVector3i::get_class_type(void);

2530 10 ~LVector3i 0 4 3464 21 LVector3i::~LVector3i 0 0 0
28
LVector3i::~LVector3i(void);

2531 8 LPoint3f 0 4 3465 18 LPoint3f::LPoint3f 0 5 678 679 680 681 682 1104
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
242
inline LPoint3f::LPoint3f(void);
inline LPoint3f::LPoint3f(LVecBase3f const &copy);
inline LPoint3f::LPoint3f(float fill_value);
inline LPoint3f::LPoint3f(float x, float y, float z);
inline LPoint3f::LPoint3f(LVecBase2f const &copy, float z);

2532 10 operator = 0 4 3465 20 LPoint3f::operator = 0 2 683 684 454
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Copy Fill Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
119
inline LPoint3f &LPoint3f::operator =(LVecBase3f const &copy);
inline LPoint3f &LPoint3f::operator =(float fill_value);

2533 11 __getattr__ 0 4 3465 21 LPoint3f::__getattr__ 0 1 685 0
86
inline PyObject *LPoint3f::__getattr__(PyObject *self, string const &attr_name) const;

2534 11 __setattr__ 0 4 3465 21 LPoint3f::__setattr__ 0 1 686 0
92
inline int LPoint3f::__setattr__(PyObject *self, string const &attr_name, PyObject *assign);

2535 4 zero 0 4 3465 14 LPoint3f::zero 0 1 687 256
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length point.
////////////////////////////////////////////////////////////////////
51
static inline LPoint3f const &LPoint3f::zero(void);

2536 6 unit_x 0 4 3465 16 LPoint3f::unit_x 0 1 688 253
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X point.
////////////////////////////////////////////////////////////////////
53
static inline LPoint3f const &LPoint3f::unit_x(void);

2537 6 unit_y 0 4 3465 16 LPoint3f::unit_y 0 1 689 253
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y point.
////////////////////////////////////////////////////////////////////
53
static inline LPoint3f const &LPoint3f::unit_y(void);

2538 6 unit_z 0 4 3465 16 LPoint3f::unit_z 0 1 690 253
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::unit_z Named Constructor
//       Access: Public
//  Description: Returns a unit Z point.
////////////////////////////////////////////////////////////////////
53
static inline LPoint3f const &LPoint3f::unit_z(void);

2539 6 get_xy 0 4 3465 16 LPoint3f::get_xy 0 1 691 315
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::get_xy
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first two components of this vector.
////////////////////////////////////////////////////////////////////
45
inline LPoint2f LPoint3f::get_xy(void) const;

2540 6 get_xz 0 4 3465 16 LPoint3f::get_xz 0 1 692 320
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::get_xz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first and last components of this vector.
////////////////////////////////////////////////////////////////////
45
inline LPoint2f LPoint3f::get_xz(void) const;

2541 6 get_yz 0 4 3465 16 LPoint3f::get_yz 0 1 693 314
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::get_yz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               last two components of this vector.
////////////////////////////////////////////////////////////////////
45
inline LPoint2f LPoint3f::get_yz(void) const;

2542 10 operator - 0 68 3465 20 LPoint3f::operator - 0 1 694 0
49
inline LPoint3f LPoint3f::operator -(void) const;

2543 10 operator + 0 4 3465 20 LPoint3f::operator + 0 2 695 696 0
138
inline LVecBase3f LPoint3f::operator +(LVecBase3f const &other) const;
inline LPoint3f LPoint3f::operator +(LVector3f const &other) const;

2544 10 operator - 0 4 3465 20 LPoint3f::operator - 0 3 697 698 699 0
206
inline LVecBase3f LPoint3f::operator -(LVecBase3f const &other) const;
inline LVector3f LPoint3f::operator -(LPoint3f const &other) const;
inline LPoint3f LPoint3f::operator -(LVector3f const &other) const;

2545 5 cross 0 4 3465 15 LPoint3f::cross 0 1 700 210
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::cross
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
63
inline LPoint3f LPoint3f::cross(LVecBase3f const &other) const;

2546 7 project 0 4 3465 17 LPoint3f::project 0 1 701 388
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
////////////////////////////////////////////////////////////////////
64
inline LPoint3f LPoint3f::project(LVecBase3f const &onto) const;

2547 10 operator * 0 4 3465 20 LPoint3f::operator * 0 1 702 0
57
inline LPoint3f LPoint3f::operator *(float scalar) const;

2548 10 operator / 0 4 3465 20 LPoint3f::operator / 0 1 703 0
57
inline LPoint3f LPoint3f::operator /(float scalar) const;

2549 6 origin 0 4 3465 16 LPoint3f::origin 0 1 704 440
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::origin
//       Access: Public, Static
//  Description: Returns the origin of the indicated coordinate
//               system.  This is always 0, 0, 0 with all of our
//               existing coordinate systems; it's hard to imagine it
//               ever being different.
////////////////////////////////////////////////////////////////////
83
static inline LPoint3f const &LPoint3f::origin(CoordinateSystem cs = ::CS_default);

2550 3 rfu 0 4 3465 13 LPoint3f::rfu 0 1 705 383
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::rfu
//       Access: Public, Static
//  Description: Returns a point described by right, forward, up
//               displacements from the origin, wherever that maps to
//               in the given coordinate system.
////////////////////////////////////////////////////////////////////
107
static inline LPoint3f LPoint3f::rfu(float right, float fwd, float up, CoordinateSystem cs = ::CS_default);

2551 8 __repr__ 0 4 3465 18 LPoint3f::__repr__ 0 1 706 0
45
inline string LPoint3f::__repr__(void) const;

2552 14 get_class_type 0 4 3465 24 LPoint3f::get_class_type 0 1 707 0
49
static TypeHandle LPoint3f::get_class_type(void);

2553 9 ~LPoint3f 0 4 3465 19 LPoint3f::~LPoint3f 0 0 0
26
LPoint3f::~LPoint3f(void);

2554 8 LPoint3d 0 4 3466 18 LPoint3d::LPoint3d 0 5 708 709 710 711 712 1104
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
247
inline LPoint3d::LPoint3d(void);
inline LPoint3d::LPoint3d(LVecBase3d const &copy);
inline LPoint3d::LPoint3d(double fill_value);
inline LPoint3d::LPoint3d(double x, double y, double z);
inline LPoint3d::LPoint3d(LVecBase2d const &copy, double z);

2555 10 operator = 0 4 3466 20 LPoint3d::operator = 0 2 713 714 454
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Copy Fill Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
120
inline LPoint3d &LPoint3d::operator =(LVecBase3d const &copy);
inline LPoint3d &LPoint3d::operator =(double fill_value);

2556 11 __getattr__ 0 4 3466 21 LPoint3d::__getattr__ 0 1 715 0
86
inline PyObject *LPoint3d::__getattr__(PyObject *self, string const &attr_name) const;

2557 11 __setattr__ 0 4 3466 21 LPoint3d::__setattr__ 0 1 716 0
92
inline int LPoint3d::__setattr__(PyObject *self, string const &attr_name, PyObject *assign);

2558 4 zero 0 4 3466 14 LPoint3d::zero 0 1 717 256
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length point.
////////////////////////////////////////////////////////////////////
51
static inline LPoint3d const &LPoint3d::zero(void);

2559 6 unit_x 0 4 3466 16 LPoint3d::unit_x 0 1 718 253
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X point.
////////////////////////////////////////////////////////////////////
53
static inline LPoint3d const &LPoint3d::unit_x(void);

2560 6 unit_y 0 4 3466 16 LPoint3d::unit_y 0 1 719 253
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y point.
////////////////////////////////////////////////////////////////////
53
static inline LPoint3d const &LPoint3d::unit_y(void);

2561 6 unit_z 0 4 3466 16 LPoint3d::unit_z 0 1 720 253
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::unit_z Named Constructor
//       Access: Public
//  Description: Returns a unit Z point.
////////////////////////////////////////////////////////////////////
53
static inline LPoint3d const &LPoint3d::unit_z(void);

2562 6 get_xy 0 4 3466 16 LPoint3d::get_xy 0 1 721 315
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::get_xy
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first two components of this vector.
////////////////////////////////////////////////////////////////////
45
inline LPoint2d LPoint3d::get_xy(void) const;

2563 6 get_xz 0 4 3466 16 LPoint3d::get_xz 0 1 722 320
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::get_xz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first and last components of this vector.
////////////////////////////////////////////////////////////////////
45
inline LPoint2d LPoint3d::get_xz(void) const;

2564 6 get_yz 0 4 3466 16 LPoint3d::get_yz 0 1 723 314
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::get_yz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               last two components of this vector.
////////////////////////////////////////////////////////////////////
45
inline LPoint2d LPoint3d::get_yz(void) const;

2565 10 operator - 0 68 3466 20 LPoint3d::operator - 0 1 724 0
49
inline LPoint3d LPoint3d::operator -(void) const;

2566 10 operator + 0 4 3466 20 LPoint3d::operator + 0 2 725 726 0
138
inline LVecBase3d LPoint3d::operator +(LVecBase3d const &other) const;
inline LPoint3d LPoint3d::operator +(LVector3d const &other) const;

2567 10 operator - 0 4 3466 20 LPoint3d::operator - 0 3 727 728 729 0
206
inline LVecBase3d LPoint3d::operator -(LVecBase3d const &other) const;
inline LVector3d LPoint3d::operator -(LPoint3d const &other) const;
inline LPoint3d LPoint3d::operator -(LVector3d const &other) const;

2568 5 cross 0 4 3466 15 LPoint3d::cross 0 1 730 210
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::cross
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
63
inline LPoint3d LPoint3d::cross(LVecBase3d const &other) const;

2569 7 project 0 4 3466 17 LPoint3d::project 0 1 731 388
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
////////////////////////////////////////////////////////////////////
64
inline LPoint3d LPoint3d::project(LVecBase3d const &onto) const;

2570 10 operator * 0 4 3466 20 LPoint3d::operator * 0 1 732 0
58
inline LPoint3d LPoint3d::operator *(double scalar) const;

2571 10 operator / 0 4 3466 20 LPoint3d::operator / 0 1 733 0
58
inline LPoint3d LPoint3d::operator /(double scalar) const;

2572 6 origin 0 4 3466 16 LPoint3d::origin 0 1 734 440
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::origin
//       Access: Public, Static
//  Description: Returns the origin of the indicated coordinate
//               system.  This is always 0, 0, 0 with all of our
//               existing coordinate systems; it's hard to imagine it
//               ever being different.
////////////////////////////////////////////////////////////////////
83
static inline LPoint3d const &LPoint3d::origin(CoordinateSystem cs = ::CS_default);

2573 3 rfu 0 4 3466 13 LPoint3d::rfu 0 1 735 383
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::rfu
//       Access: Public, Static
//  Description: Returns a point described by right, forward, up
//               displacements from the origin, wherever that maps to
//               in the given coordinate system.
////////////////////////////////////////////////////////////////////
110
static inline LPoint3d LPoint3d::rfu(double right, double fwd, double up, CoordinateSystem cs = ::CS_default);

2574 8 __repr__ 0 4 3466 18 LPoint3d::__repr__ 0 1 736 0
45
inline string LPoint3d::__repr__(void) const;

2575 14 get_class_type 0 4 3466 24 LPoint3d::get_class_type 0 1 737 0
49
static TypeHandle LPoint3d::get_class_type(void);

2576 9 ~LPoint3d 0 4 3466 19 LPoint3d::~LPoint3d 0 0 0
26
LPoint3d::~LPoint3d(void);

2577 8 LPoint3i 0 4 3467 18 LPoint3i::LPoint3i 0 5 738 739 740 741 742 1104
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
232
inline LPoint3i::LPoint3i(void);
inline LPoint3i::LPoint3i(LVecBase3i const &copy);
inline LPoint3i::LPoint3i(int fill_value);
inline LPoint3i::LPoint3i(int x, int y, int z);
inline LPoint3i::LPoint3i(LVecBase2i const &copy, int z);

2578 10 operator = 0 4 3467 20 LPoint3i::operator = 0 2 743 744 454
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Copy Fill Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
117
inline LPoint3i &LPoint3i::operator =(LVecBase3i const &copy);
inline LPoint3i &LPoint3i::operator =(int fill_value);

2579 11 __getattr__ 0 4 3467 21 LPoint3i::__getattr__ 0 1 745 0
86
inline PyObject *LPoint3i::__getattr__(PyObject *self, string const &attr_name) const;

2580 11 __setattr__ 0 4 3467 21 LPoint3i::__setattr__ 0 1 746 0
92
inline int LPoint3i::__setattr__(PyObject *self, string const &attr_name, PyObject *assign);

2581 4 zero 0 4 3467 14 LPoint3i::zero 0 1 747 256
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length point.
////////////////////////////////////////////////////////////////////
51
static inline LPoint3i const &LPoint3i::zero(void);

2582 6 unit_x 0 4 3467 16 LPoint3i::unit_x 0 1 748 253
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X point.
////////////////////////////////////////////////////////////////////
53
static inline LPoint3i const &LPoint3i::unit_x(void);

2583 6 unit_y 0 4 3467 16 LPoint3i::unit_y 0 1 749 253
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y point.
////////////////////////////////////////////////////////////////////
53
static inline LPoint3i const &LPoint3i::unit_y(void);

2584 6 unit_z 0 4 3467 16 LPoint3i::unit_z 0 1 750 253
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::unit_z Named Constructor
//       Access: Public
//  Description: Returns a unit Z point.
////////////////////////////////////////////////////////////////////
53
static inline LPoint3i const &LPoint3i::unit_z(void);

2585 6 get_xy 0 4 3467 16 LPoint3i::get_xy 0 1 751 315
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::get_xy
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first two components of this vector.
////////////////////////////////////////////////////////////////////
45
inline LPoint2i LPoint3i::get_xy(void) const;

2586 6 get_xz 0 4 3467 16 LPoint3i::get_xz 0 1 752 320
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::get_xz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first and last components of this vector.
////////////////////////////////////////////////////////////////////
45
inline LPoint2i LPoint3i::get_xz(void) const;

2587 6 get_yz 0 4 3467 16 LPoint3i::get_yz 0 1 753 314
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::get_yz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               last two components of this vector.
////////////////////////////////////////////////////////////////////
45
inline LPoint2i LPoint3i::get_yz(void) const;

2588 10 operator - 0 68 3467 20 LPoint3i::operator - 0 1 754 0
49
inline LPoint3i LPoint3i::operator -(void) const;

2589 10 operator + 0 4 3467 20 LPoint3i::operator + 0 2 755 756 0
138
inline LVecBase3i LPoint3i::operator +(LVecBase3i const &other) const;
inline LPoint3i LPoint3i::operator +(LVector3i const &other) const;

2590 10 operator - 0 4 3467 20 LPoint3i::operator - 0 3 757 758 759 0
206
inline LVecBase3i LPoint3i::operator -(LVecBase3i const &other) const;
inline LVector3i LPoint3i::operator -(LPoint3i const &other) const;
inline LPoint3i LPoint3i::operator -(LVector3i const &other) const;

2591 5 cross 0 4 3467 15 LPoint3i::cross 0 1 760 210
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::cross
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
63
inline LPoint3i LPoint3i::cross(LVecBase3i const &other) const;

2592 10 operator * 0 4 3467 20 LPoint3i::operator * 0 1 761 0
55
inline LPoint3i LPoint3i::operator *(int scalar) const;

2593 10 operator / 0 4 3467 20 LPoint3i::operator / 0 1 762 0
55
inline LPoint3i LPoint3i::operator /(int scalar) const;

2594 6 origin 0 4 3467 16 LPoint3i::origin 0 1 763 440
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::origin
//       Access: Public, Static
//  Description: Returns the origin of the indicated coordinate
//               system.  This is always 0, 0, 0 with all of our
//               existing coordinate systems; it's hard to imagine it
//               ever being different.
////////////////////////////////////////////////////////////////////
83
static inline LPoint3i const &LPoint3i::origin(CoordinateSystem cs = ::CS_default);

2595 3 rfu 0 4 3467 13 LPoint3i::rfu 0 1 764 383
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::rfu
//       Access: Public, Static
//  Description: Returns a point described by right, forward, up
//               displacements from the origin, wherever that maps to
//               in the given coordinate system.
////////////////////////////////////////////////////////////////////
101
static inline LPoint3i LPoint3i::rfu(int right, int fwd, int up, CoordinateSystem cs = ::CS_default);

2596 8 __repr__ 0 4 3467 18 LPoint3i::__repr__ 0 1 765 0
45
inline string LPoint3i::__repr__(void) const;

2597 14 get_class_type 0 4 3467 24 LPoint3i::get_class_type 0 1 766 0
49
static TypeHandle LPoint3i::get_class_type(void);

2598 9 ~LPoint3i 0 4 3467 19 LPoint3i::~LPoint3i 0 0 0
26
LPoint3i::~LPoint3i(void);

2599 10 LVecBase4f 0 4 3468 22 LVecBase4f::LVecBase4f 0 8 767 768 769 770 771 772 773 774 1980
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Default Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Constructor
//       Access: Published
//  Description: Constructs an LVecBase4 from an LPoint3.  The w
//               coordinate is set to 1.0.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Constructor
//       Access: Published
//  Description: Constructs an LVecBase4 from an LVector3.  The w
//               coordinate is set to 0.0.
////////////////////////////////////////////////////////////////////
445
inline LVecBase4f::LVecBase4f(void);
inline LVecBase4f::LVecBase4f(LVecBase4f const &copy);
inline LVecBase4f::LVecBase4f(UnalignedLVecBase4f const &copy);
inline LVecBase4f::LVecBase4f(float fill_value);
inline LVecBase4f::LVecBase4f(float x, float y, float z, float w);
inline LVecBase4f::LVecBase4f(LVecBase3f const &copy, float w);
inline LVecBase4f::LVecBase4f(LPoint3f const &point);
inline LVecBase4f::LVecBase4f(LVector3f const &vector);

2600 10 operator = 0 4 3468 22 LVecBase4f::operator = 0 3 775 776 777 703
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Copy Assignment Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Fill Assignment Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
203
inline LVecBase4f &LVecBase4f::operator =(LVecBase4f const &copy);
inline LVecBase4f &LVecBase4f::operator =(UnalignedLVecBase4f const &copy);
inline LVecBase4f &LVecBase4f::operator =(float fill_value);

2601 12 operator new 0 4 3468 24 LVecBase4f::operator new 0 1 778 0
114
inline void *LVecBase4f::operator new(size_t size);
inline void *LVecBase4f::operator new(size_t size, void *ptr);

2602 15 operator delete 0 4 3468 27 LVecBase4f::operator delete 0 0 0
108
inline void LVecBase4f::operator delete(void *ptr);
inline void LVecBase4f::operator delete(void *, void *);

2603 12 validate_ptr 0 4 3468 24 LVecBase4f::validate_ptr 0 0 0
61
static inline bool LVecBase4f::validate_ptr(void const *ptr);

2604 4 zero 0 4 3468 16 LVecBase4f::zero 0 1 779 262
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::zero Named Constructor
//       Access: Published
//  Description: Returns a zero-length vector.
////////////////////////////////////////////////////////////////////
55
static inline LVecBase4f const &LVecBase4f::zero(void);

2605 6 unit_x 0 4 3468 18 LVecBase4f::unit_x 0 1 780 259
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::unit_x Named Constructor
//       Access: Published
//  Description: Returns a unit X vector.
////////////////////////////////////////////////////////////////////
57
static inline LVecBase4f const &LVecBase4f::unit_x(void);

2606 6 unit_y 0 4 3468 18 LVecBase4f::unit_y 0 1 781 259
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::unit_y Named Constructor
//       Access: Published
//  Description: Returns a unit Y vector.
////////////////////////////////////////////////////////////////////
57
static inline LVecBase4f const &LVecBase4f::unit_y(void);

2607 6 unit_z 0 4 3468 18 LVecBase4f::unit_z 0 1 782 259
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::unit_z Named Constructor
//       Access: Published
//  Description: Returns a unit Z vector.
////////////////////////////////////////////////////////////////////
57
static inline LVecBase4f const &LVecBase4f::unit_z(void);

2608 6 unit_w 0 4 3468 18 LVecBase4f::unit_w 0 1 783 259
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::unit_w Named Constructor
//       Access: Published
//  Description: Returns a unit W vector.
////////////////////////////////////////////////////////////////////
57
static inline LVecBase4f const &LVecBase4f::unit_w(void);

2609 11 ~LVecBase4f 0 4 3468 23 LVecBase4f::~LVecBase4f 0 0 220
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
37
inline LVecBase4f::~LVecBase4f(void);

2610 10 __reduce__ 0 4 3468 22 LVecBase4f::__reduce__ 0 1 784 0
62
inline PyObject *LVecBase4f::__reduce__(PyObject *self) const;

2611 11 __getattr__ 0 4 3468 23 LVecBase4f::__getattr__ 0 1 785 0
88
inline PyObject *LVecBase4f::__getattr__(PyObject *self, string const &attr_name) const;

2612 11 __setattr__ 0 4 3468 23 LVecBase4f::__setattr__ 0 1 786 0
94
inline int LVecBase4f::__setattr__(PyObject *self, string const &attr_name, PyObject *assign);

2613 11 operator [] 0 4 3468 23 LVecBase4f::operator [] 0 2 787 788 227
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Indexing Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
96
inline float LVecBase4f::operator [](int i) const;
inline float &LVecBase4f::operator [](int i);

2614 4 size 0 4 3468 16 LVecBase4f::size 0 1 789 274
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::size
//       Access: Published, Static
//  Description: Returns 4: the number of components of a LVecBase4.
////////////////////////////////////////////////////////////////////
41
static inline int LVecBase4f::size(void);

2615 6 is_nan 0 4 3468 18 LVecBase4f::is_nan 0 1 790 311
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::is_nan
//       Access: Published
//  Description: Returns true if any component of the vector is
//               not-a-number, false otherwise.
////////////////////////////////////////////////////////////////////
43
inline bool LVecBase4f::is_nan(void) const;

2616 8 get_cell 0 4 3468 20 LVecBase4f::get_cell 0 1 791 218
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_cell
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
47
inline float LVecBase4f::get_cell(int i) const;

2617 5 get_x 0 4 3468 17 LVecBase4f::get_x 0 1 792 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_x
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
43
inline float LVecBase4f::get_x(void) const;

2618 5 get_y 0 4 3468 17 LVecBase4f::get_y 0 1 793 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_y
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
43
inline float LVecBase4f::get_y(void) const;

2619 5 get_z 0 4 3468 17 LVecBase4f::get_z 0 1 794 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_z
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
43
inline float LVecBase4f::get_z(void) const;

2620 5 get_w 0 4 3468 17 LVecBase4f::get_w 0 1 795 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_w
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
43
inline float LVecBase4f::get_w(void) const;

2621 8 set_cell 0 4 3468 20 LVecBase4f::set_cell 0 1 796 218
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_cell
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
53
inline void LVecBase4f::set_cell(int i, float value);

2622 5 set_x 0 4 3468 17 LVecBase4f::set_x 0 1 797 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_x
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
43
inline void LVecBase4f::set_x(float value);

2623 5 set_y 0 4 3468 17 LVecBase4f::set_y 0 1 798 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_y
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
43
inline void LVecBase4f::set_y(float value);

2624 5 set_z 0 4 3468 17 LVecBase4f::set_z 0 1 799 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_z
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
43
inline void LVecBase4f::set_z(float value);

2625 5 set_w 0 4 3468 17 LVecBase4f::set_w 0 1 800 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_w
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
43
inline void LVecBase4f::set_w(float value);

2626 11 add_to_cell 0 4 3468 23 LVecBase4f::add_to_cell 0 1 801 377
// These next functions add to an existing value.
// i.e. foo.set_x(foo.get_x() + value)
// These are useful to reduce overhead in scripting
// languages:

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_to_cell
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
56
inline void LVecBase4f::add_to_cell(int i, float value);

2627 5 add_x 0 4 3468 17 LVecBase4f::add_x 0 1 802 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_x
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
43
inline void LVecBase4f::add_x(float value);

2628 5 add_y 0 4 3468 17 LVecBase4f::add_y 0 1 803 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_y
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
43
inline void LVecBase4f::add_y(float value);

2629 5 add_z 0 4 3468 17 LVecBase4f::add_z 0 1 804 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_z
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
43
inline void LVecBase4f::add_z(float value);

2630 5 add_w 0 4 3468 17 LVecBase4f::add_w 0 1 805 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_w
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
43
inline void LVecBase4f::add_w(float value);

2631 8 get_data 0 4 3468 20 LVecBase4f::get_data 0 1 806 401
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_data
//       Access: Published
//  Description: Returns the address of the first of the four data
//               elements in the vector.  The remaining elements
//               occupy the next positions consecutively in memory.
////////////////////////////////////////////////////////////////////
53
inline float const *LVecBase4f::get_data(void) const;

2632 18 get_num_components 0 4 3468 30 LVecBase4f::get_num_components 0 1 807 280
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_num_components
//       Access: Published
//  Description: Returns the number of elements in the vector, four.
////////////////////////////////////////////////////////////////////
54
inline int LVecBase4f::get_num_components(void) const;

2633 12 extract_data 0 4 3468 24 LVecBase4f::extract_data 0 0 0
46
inline void LVecBase4f::extract_data(float *);

2634 4 fill 0 4 3468 16 LVecBase4f::fill 0 1 808 364
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::fill
//       Access: Published
//  Description: Sets each element of the vector to the indicated
//               fill_value.  This is particularly useful for
//               initializing to zero.
////////////////////////////////////////////////////////////////////
47
inline void LVecBase4f::fill(float fill_value);

2635 3 set 0 4 3468 15 LVecBase4f::set 0 1 809 213
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
64
inline void LVecBase4f::set(float x, float y, float z, float w);

2636 3 dot 0 4 3468 15 LVecBase4f::dot 0 1 810 213
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::dot
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
60
inline float LVecBase4f::dot(LVecBase4f const &other) const;

2637 14 length_squared 0 4 3468 26 LVecBase4f::length_squared 0 1 811 300
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::length_squared
//       Access: Published
//  Description: Returns the square of the vector's length, cheap and
//               easy.
////////////////////////////////////////////////////////////////////
52
inline float LVecBase4f::length_squared(void) const;

2638 6 length 0 4 3468 18 LVecBase4f::length 0 1 812 295
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::length
//       Access: Published
//  Description: Returns the length of the vector, by the Pythagorean
//               theorem.
////////////////////////////////////////////////////////////////////
44
inline float LVecBase4f::length(void) const;

2639 9 normalize 0 4 3468 21 LVecBase4f::normalize 0 1 813 367
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::normalize
//       Access: Published
//  Description: Normalizes the vector in place.  Returns true if the
//               vector was normalized, false if it was a zero-length
//               vector.
////////////////////////////////////////////////////////////////////
40
inline bool LVecBase4f::normalize(void);

2640 7 project 0 4 3468 19 LVecBase4f::project 0 1 814 390
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
////////////////////////////////////////////////////////////////////
68
inline LVecBase4f LVecBase4f::project(LVecBase4f const &onto) const;

2641 10 operator < 0 4 3468 22 LVecBase4f::operator < 0 1 815 0
66
inline bool LVecBase4f::operator <(LVecBase4f const &other) const;

2642 11 operator == 0 4 3468 23 LVecBase4f::operator == 0 1 816 0
67
inline bool LVecBase4f::operator ==(LVecBase4f const &other) const;

2643 11 operator != 0 4 3468 23 LVecBase4f::operator != 0 1 817 0
67
inline bool LVecBase4f::operator !=(LVecBase4f const &other) const;

2644 10 compare_to 0 4 3468 22 LVecBase4f::compare_to 0 2 818 819 827
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::compare_to
//       Access: Published
//  Description: This flavor of compare_to uses a default threshold
//               value based on the numeric type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::compare_to
//       Access: Published
//  Description: Sorts vectors lexicographically, componentwise.
//               Returns a number less than 0 if this vector sorts
//               before the other one, greater than zero if it sorts
//               after, 0 if they are equivalent (within the indicated
//               tolerance).
////////////////////////////////////////////////////////////////////
148
inline int LVecBase4f::compare_to(LVecBase4f const &other) const;
inline int LVecBase4f::compare_to(LVecBase4f const &other, float threshold) const;

2645 8 get_hash 0 4 3468 20 LVecBase4f::get_hash 0 2 820 821 516
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////
106
inline size_t LVecBase4f::get_hash(void) const;
inline size_t LVecBase4f::get_hash(float threshold) const;

2646 8 add_hash 0 4 3468 20 LVecBase4f::add_hash 0 2 822 823 516
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////
126
inline size_t LVecBase4f::add_hash(size_t hash) const;
inline size_t LVecBase4f::add_hash(size_t hash, float threshold) const;

2647 13 generate_hash 0 4 3468 25 LVecBase4f::generate_hash 0 2 824 825 546
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::generate_hash
//       Access: Published
//  Description: Adds the vector to the indicated hash generator.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::generate_hash
//       Access: Published
//  Description: Adds the vector to the indicated hash generator.
////////////////////////////////////////////////////////////////////
170
inline void LVecBase4f::generate_hash(ChecksumHashGenerator &hashgen) const;
inline void LVecBase4f::generate_hash(ChecksumHashGenerator &hashgen, float threshold) const;

2648 10 operator - 0 68 3468 22 LVecBase4f::operator - 0 1 826 0
53
inline LVecBase4f LVecBase4f::operator -(void) const;

2649 10 operator + 0 4 3468 22 LVecBase4f::operator + 0 1 827 0
72
inline LVecBase4f LVecBase4f::operator +(LVecBase4f const &other) const;

2650 10 operator - 0 4 3468 22 LVecBase4f::operator - 0 1 828 0
72
inline LVecBase4f LVecBase4f::operator -(LVecBase4f const &other) const;

2651 10 operator * 0 4 3468 22 LVecBase4f::operator * 0 1 829 0
61
inline LVecBase4f LVecBase4f::operator *(float scalar) const;

2652 10 operator / 0 4 3468 22 LVecBase4f::operator / 0 1 830 0
61
inline LVecBase4f LVecBase4f::operator /(float scalar) const;

2653 11 operator += 0 4 3468 23 LVecBase4f::operator += 0 1 831 0
61
inline void LVecBase4f::operator +=(LVecBase4f const &other);

2654 11 operator -= 0 4 3468 23 LVecBase4f::operator -= 0 1 832 0
61
inline void LVecBase4f::operator -=(LVecBase4f const &other);

2655 11 operator *= 0 4 3468 23 LVecBase4f::operator *= 0 1 833 0
50
inline void LVecBase4f::operator *=(float scalar);

2656 11 operator /= 0 4 3468 23 LVecBase4f::operator /= 0 1 834 0
50
inline void LVecBase4f::operator /=(float scalar);

2657 18 componentwise_mult 0 4 3468 30 LVecBase4f::componentwise_mult 0 1 835 228
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::componentwise_mult
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
68
inline void LVecBase4f::componentwise_mult(LVecBase4f const &other);

2658 7 __pow__ 0 4 3468 19 LVecBase4f::__pow__ 0 1 836 0
60
inline LVecBase4f LVecBase4f::__pow__(float exponent) const;

2659 8 __ipow__ 0 4 3468 20 LVecBase4f::__ipow__ 0 1 837 0
70
inline PyObject *LVecBase4f::__ipow__(PyObject *self, float exponent);

2660 4 fmax 0 4 3468 16 LVecBase4f::fmax 0 1 838 214
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::fmax
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
66
inline LVecBase4f LVecBase4f::fmax(LVecBase4f const &other) const;

2661 4 fmin 0 4 3468 16 LVecBase4f::fmin 0 1 839 214
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::fmin
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
66
inline LVecBase4f LVecBase4f::fmin(LVecBase4f const &other) const;

2662 12 almost_equal 0 4 3468 24 LVecBase4f::almost_equal 0 2 840 841 662
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::almost_equal
//       Access: Published
//  Description: Returns true if two vectors are memberwise equal
//               within a specified tolerance.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::almost_equal
//       Access: Published
//  Description: Returns true if two vectors are memberwise equal
//               within a default tolerance based on the numeric type.
////////////////////////////////////////////////////////////////////
154
inline bool LVecBase4f::almost_equal(LVecBase4f const &other, float threshold) const;
inline bool LVecBase4f::almost_equal(LVecBase4f const &other) const;

2663 6 output 0 4 3468 18 LVecBase4f::output 0 1 842 216
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::output
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
51
inline void LVecBase4f::output(ostream &out) const;

2664 8 __repr__ 0 4 3468 20 LVecBase4f::__repr__ 0 1 843 0
47
inline string LVecBase4f::__repr__(void) const;

2665 20 write_datagram_fixed 0 4 3468 32 LVecBase4f::write_datagram_fixed 0 1 844 642
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::write_datagram_fixed
//       Access: Published
//  Description: Writes the vector to the Datagram using add_float32()
//               or add_float64(), depending on the type of floats in
//               the vector, regardless of the setting of
//               Datagram::set_stdfloat_double().  This is appropriate
//               when you want to write a fixed-width value to the
//               datagram, especially when you are not writing a bam
//               file.
////////////////////////////////////////////////////////////////////
74
inline void LVecBase4f::write_datagram_fixed(Datagram &destination) const;

2666 19 read_datagram_fixed 0 4 3468 31 LVecBase4f::read_datagram_fixed 0 1 845 348
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::read_datagram_fixed
//       Access: Published
//  Description: Reads the vector from the Datagram using get_float32()
//               or get_float64().  See write_datagram_fixed().
////////////////////////////////////////////////////////////////////
70
inline void LVecBase4f::read_datagram_fixed(DatagramIterator &source);

2667 14 write_datagram 0 4 3468 26 LVecBase4f::write_datagram 0 1 846 464
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::write_datagram
//       Access: Published
//  Description: Writes the vector to the Datagram using
//               add_stdfloat().  This is appropriate when you want to
//               write the vector using the standard width setting,
//               especially when you are writing a bam file.
////////////////////////////////////////////////////////////////////
68
inline void LVecBase4f::write_datagram(Datagram &destination) const;

2668 13 read_datagram 0 4 3468 25 LVecBase4f::read_datagram 0 1 847 280
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::read_datagram
//       Access: Published
//  Description: Reads the vector from the Datagram using get_stdfloat().
////////////////////////////////////////////////////////////////////
64
inline void LVecBase4f::read_datagram(DatagramIterator &source);

2669 14 get_class_type 0 4 3468 26 LVecBase4f::get_class_type 0 1 848 0
51
static TypeHandle LVecBase4f::get_class_type(void);

2670 19 UnalignedLVecBase4f 0 4 3470 40 UnalignedLVecBase4f::UnalignedLVecBase4f 0 4 849 850 851 852 932
////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
294
inline UnalignedLVecBase4f::UnalignedLVecBase4f(void);
inline UnalignedLVecBase4f::UnalignedLVecBase4f(LVecBase4f const &copy);
inline UnalignedLVecBase4f::UnalignedLVecBase4f(UnalignedLVecBase4f const &copy);
inline UnalignedLVecBase4f::UnalignedLVecBase4f(float x, float y, float z, float w);

2671 10 operator = 0 4 3470 31 UnalignedLVecBase4f::operator = 0 2 853 854 482
////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
178
inline UnalignedLVecBase4f &UnalignedLVecBase4f::operator =(LVecBase4f const &copy);
inline UnalignedLVecBase4f &UnalignedLVecBase4f::operator =(UnalignedLVecBase4f const &copy);

2672 3 set 0 4 3470 24 UnalignedLVecBase4f::set 0 1 855 222
////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::set
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
73
inline void UnalignedLVecBase4f::set(float x, float y, float z, float w);

2673 11 operator [] 0 4 3470 32 UnalignedLVecBase4f::operator [] 0 2 856 857 233
////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Indexing Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
114
inline float UnalignedLVecBase4f::operator [](int i) const;
inline float &UnalignedLVecBase4f::operator [](int i);

2674 4 size 0 4 3470 25 UnalignedLVecBase4f::size 0 1 858 280
////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::size
//       Access: Public, Static
//  Description: Returns 4: the number of components of a LVecBase4.
////////////////////////////////////////////////////////////////////
50
static inline int UnalignedLVecBase4f::size(void);

2675 8 get_data 0 4 3470 29 UnalignedLVecBase4f::get_data 0 1 859 408
////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::get_data
//       Access: Public
//  Description: Returns the address of the first of the three data
//               elements in the vector.  The remaining elements
//               occupy the next positions consecutively in memory.
////////////////////////////////////////////////////////////////////
62
inline float const *UnalignedLVecBase4f::get_data(void) const;

2676 18 get_num_components 0 4 3470 39 UnalignedLVecBase4f::get_num_components 0 1 860 283
////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::get_num_components
//       Access: Public
//  Description: Returns the number of elements in the vector, 4.
////////////////////////////////////////////////////////////////////
63
inline int UnalignedLVecBase4f::get_num_components(void) const;

2677 14 get_class_type 0 4 3470 35 UnalignedLVecBase4f::get_class_type 0 1 861 0
60
static TypeHandle UnalignedLVecBase4f::get_class_type(void);

2678 20 ~UnalignedLVecBase4f 0 4 3470 41 UnalignedLVecBase4f::~UnalignedLVecBase4f 0 0 0
48
UnalignedLVecBase4f::~UnalignedLVecBase4f(void);

2679 10 LVecBase4d 0 4 3472 22 LVecBase4d::LVecBase4d 0 8 862 863 864 865 866 867 868 869 1980
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Default Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Constructor
//       Access: Published
//  Description: Constructs an LVecBase4 from an LPoint3.  The w
//               coordinate is set to 1.0.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Constructor
//       Access: Published
//  Description: Constructs an LVecBase4 from an LVector3.  The w
//               coordinate is set to 0.0.
////////////////////////////////////////////////////////////////////
451
inline LVecBase4d::LVecBase4d(void);
inline LVecBase4d::LVecBase4d(LVecBase4d const &copy);
inline LVecBase4d::LVecBase4d(UnalignedLVecBase4d const &copy);
inline LVecBase4d::LVecBase4d(double fill_value);
inline LVecBase4d::LVecBase4d(double x, double y, double z, double w);
inline LVecBase4d::LVecBase4d(LVecBase3d const &copy, double w);
inline LVecBase4d::LVecBase4d(LPoint3d const &point);
inline LVecBase4d::LVecBase4d(LVector3d const &vector);

2680 10 operator = 0 4 3472 22 LVecBase4d::operator = 0 3 870 871 872 703
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Copy Assignment Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Fill Assignment Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
204
inline LVecBase4d &LVecBase4d::operator =(LVecBase4d const &copy);
inline LVecBase4d &LVecBase4d::operator =(UnalignedLVecBase4d const &copy);
inline LVecBase4d &LVecBase4d::operator =(double fill_value);

2681 12 operator new 0 4 3472 24 LVecBase4d::operator new 0 1 873 0
114
inline void *LVecBase4d::operator new(size_t size);
inline void *LVecBase4d::operator new(size_t size, void *ptr);

2682 15 operator delete 0 4 3472 27 LVecBase4d::operator delete 0 0 0
108
inline void LVecBase4d::operator delete(void *ptr);
inline void LVecBase4d::operator delete(void *, void *);

2683 12 validate_ptr 0 4 3472 24 LVecBase4d::validate_ptr 0 0 0
61
static inline bool LVecBase4d::validate_ptr(void const *ptr);

2684 4 zero 0 4 3472 16 LVecBase4d::zero 0 1 874 262
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::zero Named Constructor
//       Access: Published
//  Description: Returns a zero-length vector.
////////////////////////////////////////////////////////////////////
55
static inline LVecBase4d const &LVecBase4d::zero(void);

2685 6 unit_x 0 4 3472 18 LVecBase4d::unit_x 0 1 875 259
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::unit_x Named Constructor
//       Access: Published
//  Description: Returns a unit X vector.
////////////////////////////////////////////////////////////////////
57
static inline LVecBase4d const &LVecBase4d::unit_x(void);

2686 6 unit_y 0 4 3472 18 LVecBase4d::unit_y 0 1 876 259
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::unit_y Named Constructor
//       Access: Published
//  Description: Returns a unit Y vector.
////////////////////////////////////////////////////////////////////
57
static inline LVecBase4d const &LVecBase4d::unit_y(void);

2687 6 unit_z 0 4 3472 18 LVecBase4d::unit_z 0 1 877 259
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::unit_z Named Constructor
//       Access: Published
//  Description: Returns a unit Z vector.
////////////////////////////////////////////////////////////////////
57
static inline LVecBase4d const &LVecBase4d::unit_z(void);

2688 6 unit_w 0 4 3472 18 LVecBase4d::unit_w 0 1 878 259
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::unit_w Named Constructor
//       Access: Published
//  Description: Returns a unit W vector.
////////////////////////////////////////////////////////////////////
57
static inline LVecBase4d const &LVecBase4d::unit_w(void);

2689 11 ~LVecBase4d 0 4 3472 23 LVecBase4d::~LVecBase4d 0 0 220
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
37
inline LVecBase4d::~LVecBase4d(void);

2690 10 __reduce__ 0 4 3472 22 LVecBase4d::__reduce__ 0 1 879 0
62
inline PyObject *LVecBase4d::__reduce__(PyObject *self) const;

2691 11 __getattr__ 0 4 3472 23 LVecBase4d::__getattr__ 0 1 880 0
88
inline PyObject *LVecBase4d::__getattr__(PyObject *self, string const &attr_name) const;

2692 11 __setattr__ 0 4 3472 23 LVecBase4d::__setattr__ 0 1 881 0
94
inline int LVecBase4d::__setattr__(PyObject *self, string const &attr_name, PyObject *assign);

2693 11 operator [] 0 4 3472 23 LVecBase4d::operator [] 0 2 882 883 227
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Indexing Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
98
inline double LVecBase4d::operator [](int i) const;
inline double &LVecBase4d::operator [](int i);

2694 4 size 0 4 3472 16 LVecBase4d::size 0 1 884 274
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::size
//       Access: Published, Static
//  Description: Returns 4: the number of components of a LVecBase4.
////////////////////////////////////////////////////////////////////
41
static inline int LVecBase4d::size(void);

2695 6 is_nan 0 4 3472 18 LVecBase4d::is_nan 0 1 885 311
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::is_nan
//       Access: Published
//  Description: Returns true if any component of the vector is
//               not-a-number, false otherwise.
////////////////////////////////////////////////////////////////////
43
inline bool LVecBase4d::is_nan(void) const;

2696 8 get_cell 0 4 3472 20 LVecBase4d::get_cell 0 1 886 218
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_cell
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
48
inline double LVecBase4d::get_cell(int i) const;

2697 5 get_x 0 4 3472 17 LVecBase4d::get_x 0 1 887 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_x
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
44
inline double LVecBase4d::get_x(void) const;

2698 5 get_y 0 4 3472 17 LVecBase4d::get_y 0 1 888 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_y
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
44
inline double LVecBase4d::get_y(void) const;

2699 5 get_z 0 4 3472 17 LVecBase4d::get_z 0 1 889 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_z
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
44
inline double LVecBase4d::get_z(void) const;

2700 5 get_w 0 4 3472 17 LVecBase4d::get_w 0 1 890 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_w
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
44
inline double LVecBase4d::get_w(void) const;

2701 8 set_cell 0 4 3472 20 LVecBase4d::set_cell 0 1 891 218
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_cell
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
54
inline void LVecBase4d::set_cell(int i, double value);

2702 5 set_x 0 4 3472 17 LVecBase4d::set_x 0 1 892 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_x
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
44
inline void LVecBase4d::set_x(double value);

2703 5 set_y 0 4 3472 17 LVecBase4d::set_y 0 1 893 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_y
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
44
inline void LVecBase4d::set_y(double value);

2704 5 set_z 0 4 3472 17 LVecBase4d::set_z 0 1 894 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_z
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
44
inline void LVecBase4d::set_z(double value);

2705 5 set_w 0 4 3472 17 LVecBase4d::set_w 0 1 895 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_w
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
44
inline void LVecBase4d::set_w(double value);

2706 11 add_to_cell 0 4 3472 23 LVecBase4d::add_to_cell 0 1 896 377
// These next functions add to an existing value.
// i.e. foo.set_x(foo.get_x() + value)
// These are useful to reduce overhead in scripting
// languages:

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_to_cell
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
57
inline void LVecBase4d::add_to_cell(int i, double value);

2707 5 add_x 0 4 3472 17 LVecBase4d::add_x 0 1 897 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_x
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
44
inline void LVecBase4d::add_x(double value);

2708 5 add_y 0 4 3472 17 LVecBase4d::add_y 0 1 898 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_y
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
44
inline void LVecBase4d::add_y(double value);

2709 5 add_z 0 4 3472 17 LVecBase4d::add_z 0 1 899 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_z
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
44
inline void LVecBase4d::add_z(double value);

2710 5 add_w 0 4 3472 17 LVecBase4d::add_w 0 1 900 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_w
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
44
inline void LVecBase4d::add_w(double value);

2711 8 get_data 0 4 3472 20 LVecBase4d::get_data 0 1 901 401
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_data
//       Access: Published
//  Description: Returns the address of the first of the four data
//               elements in the vector.  The remaining elements
//               occupy the next positions consecutively in memory.
////////////////////////////////////////////////////////////////////
54
inline double const *LVecBase4d::get_data(void) const;

2712 18 get_num_components 0 4 3472 30 LVecBase4d::get_num_components 0 1 902 280
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_num_components
//       Access: Published
//  Description: Returns the number of elements in the vector, four.
////////////////////////////////////////////////////////////////////
54
inline int LVecBase4d::get_num_components(void) const;

2713 12 extract_data 0 4 3472 24 LVecBase4d::extract_data 0 0 0
46
inline void LVecBase4d::extract_data(float *);

2714 4 fill 0 4 3472 16 LVecBase4d::fill 0 1 903 364
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::fill
//       Access: Published
//  Description: Sets each element of the vector to the indicated
//               fill_value.  This is particularly useful for
//               initializing to zero.
////////////////////////////////////////////////////////////////////
48
inline void LVecBase4d::fill(double fill_value);

2715 3 set 0 4 3472 15 LVecBase4d::set 0 1 904 213
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
68
inline void LVecBase4d::set(double x, double y, double z, double w);

2716 3 dot 0 4 3472 15 LVecBase4d::dot 0 1 905 213
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::dot
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
61
inline double LVecBase4d::dot(LVecBase4d const &other) const;

2717 14 length_squared 0 4 3472 26 LVecBase4d::length_squared 0 1 906 300
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::length_squared
//       Access: Published
//  Description: Returns the square of the vector's length, cheap and
//               easy.
////////////////////////////////////////////////////////////////////
53
inline double LVecBase4d::length_squared(void) const;

2718 6 length 0 4 3472 18 LVecBase4d::length 0 1 907 295
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::length
//       Access: Published
//  Description: Returns the length of the vector, by the Pythagorean
//               theorem.
////////////////////////////////////////////////////////////////////
45
inline double LVecBase4d::length(void) const;

2719 9 normalize 0 4 3472 21 LVecBase4d::normalize 0 1 908 367
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::normalize
//       Access: Published
//  Description: Normalizes the vector in place.  Returns true if the
//               vector was normalized, false if it was a zero-length
//               vector.
////////////////////////////////////////////////////////////////////
40
inline bool LVecBase4d::normalize(void);

2720 7 project 0 4 3472 19 LVecBase4d::project 0 1 909 390
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
////////////////////////////////////////////////////////////////////
68
inline LVecBase4d LVecBase4d::project(LVecBase4d const &onto) const;

2721 10 operator < 0 4 3472 22 LVecBase4d::operator < 0 1 910 0
66
inline bool LVecBase4d::operator <(LVecBase4d const &other) const;

2722 11 operator == 0 4 3472 23 LVecBase4d::operator == 0 1 911 0
67
inline bool LVecBase4d::operator ==(LVecBase4d const &other) const;

2723 11 operator != 0 4 3472 23 LVecBase4d::operator != 0 1 912 0
67
inline bool LVecBase4d::operator !=(LVecBase4d const &other) const;

2724 10 compare_to 0 4 3472 22 LVecBase4d::compare_to 0 2 913 914 827
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::compare_to
//       Access: Published
//  Description: This flavor of compare_to uses a default threshold
//               value based on the numeric type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::compare_to
//       Access: Published
//  Description: Sorts vectors lexicographically, componentwise.
//               Returns a number less than 0 if this vector sorts
//               before the other one, greater than zero if it sorts
//               after, 0 if they are equivalent (within the indicated
//               tolerance).
////////////////////////////////////////////////////////////////////
149
inline int LVecBase4d::compare_to(LVecBase4d const &other) const;
inline int LVecBase4d::compare_to(LVecBase4d const &other, double threshold) const;

2725 8 get_hash 0 4 3472 20 LVecBase4d::get_hash 0 2 915 916 516
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////
107
inline size_t LVecBase4d::get_hash(void) const;
inline size_t LVecBase4d::get_hash(double threshold) const;

2726 8 add_hash 0 4 3472 20 LVecBase4d::add_hash 0 2 917 918 516
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////
127
inline size_t LVecBase4d::add_hash(size_t hash) const;
inline size_t LVecBase4d::add_hash(size_t hash, double threshold) const;

2727 13 generate_hash 0 4 3472 25 LVecBase4d::generate_hash 0 2 919 920 546
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::generate_hash
//       Access: Published
//  Description: Adds the vector to the indicated hash generator.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::generate_hash
//       Access: Published
//  Description: Adds the vector to the indicated hash generator.
////////////////////////////////////////////////////////////////////
171
inline void LVecBase4d::generate_hash(ChecksumHashGenerator &hashgen) const;
inline void LVecBase4d::generate_hash(ChecksumHashGenerator &hashgen, double threshold) const;

2728 10 operator - 0 68 3472 22 LVecBase4d::operator - 0 1 921 0
53
inline LVecBase4d LVecBase4d::operator -(void) const;

2729 10 operator + 0 4 3472 22 LVecBase4d::operator + 0 1 922 0
72
inline LVecBase4d LVecBase4d::operator +(LVecBase4d const &other) const;

2730 10 operator - 0 4 3472 22 LVecBase4d::operator - 0 1 923 0
72
inline LVecBase4d LVecBase4d::operator -(LVecBase4d const &other) const;

2731 10 operator * 0 4 3472 22 LVecBase4d::operator * 0 1 924 0
62
inline LVecBase4d LVecBase4d::operator *(double scalar) const;

2732 10 operator / 0 4 3472 22 LVecBase4d::operator / 0 1 925 0
62
inline LVecBase4d LVecBase4d::operator /(double scalar) const;

2733 11 operator += 0 4 3472 23 LVecBase4d::operator += 0 1 926 0
61
inline void LVecBase4d::operator +=(LVecBase4d const &other);

2734 11 operator -= 0 4 3472 23 LVecBase4d::operator -= 0 1 927 0
61
inline void LVecBase4d::operator -=(LVecBase4d const &other);

2735 11 operator *= 0 4 3472 23 LVecBase4d::operator *= 0 1 928 0
51
inline void LVecBase4d::operator *=(double scalar);

2736 11 operator /= 0 4 3472 23 LVecBase4d::operator /= 0 1 929 0
51
inline void LVecBase4d::operator /=(double scalar);

2737 18 componentwise_mult 0 4 3472 30 LVecBase4d::componentwise_mult 0 1 930 228
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::componentwise_mult
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
68
inline void LVecBase4d::componentwise_mult(LVecBase4d const &other);

2738 7 __pow__ 0 4 3472 19 LVecBase4d::__pow__ 0 1 931 0
61
inline LVecBase4d LVecBase4d::__pow__(double exponent) const;

2739 8 __ipow__ 0 4 3472 20 LVecBase4d::__ipow__ 0 1 932 0
71
inline PyObject *LVecBase4d::__ipow__(PyObject *self, double exponent);

2740 4 fmax 0 4 3472 16 LVecBase4d::fmax 0 1 933 214
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::fmax
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
66
inline LVecBase4d LVecBase4d::fmax(LVecBase4d const &other) const;

2741 4 fmin 0 4 3472 16 LVecBase4d::fmin 0 1 934 214
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::fmin
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
66
inline LVecBase4d LVecBase4d::fmin(LVecBase4d const &other) const;

2742 12 almost_equal 0 4 3472 24 LVecBase4d::almost_equal 0 2 935 936 662
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::almost_equal
//       Access: Published
//  Description: Returns true if two vectors are memberwise equal
//               within a specified tolerance.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::almost_equal
//       Access: Published
//  Description: Returns true if two vectors are memberwise equal
//               within a default tolerance based on the numeric type.
////////////////////////////////////////////////////////////////////
155
inline bool LVecBase4d::almost_equal(LVecBase4d const &other, double threshold) const;
inline bool LVecBase4d::almost_equal(LVecBase4d const &other) const;

2743 6 output 0 4 3472 18 LVecBase4d::output 0 1 937 216
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::output
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
51
inline void LVecBase4d::output(ostream &out) const;

2744 8 __repr__ 0 4 3472 20 LVecBase4d::__repr__ 0 1 938 0
47
inline string LVecBase4d::__repr__(void) const;

2745 20 write_datagram_fixed 0 4 3472 32 LVecBase4d::write_datagram_fixed 0 1 939 642
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::write_datagram_fixed
//       Access: Published
//  Description: Writes the vector to the Datagram using add_float32()
//               or add_float64(), depending on the type of floats in
//               the vector, regardless of the setting of
//               Datagram::set_stdfloat_double().  This is appropriate
//               when you want to write a fixed-width value to the
//               datagram, especially when you are not writing a bam
//               file.
////////////////////////////////////////////////////////////////////
74
inline void LVecBase4d::write_datagram_fixed(Datagram &destination) const;

2746 19 read_datagram_fixed 0 4 3472 31 LVecBase4d::read_datagram_fixed 0 1 940 348
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::read_datagram_fixed
//       Access: Published
//  Description: Reads the vector from the Datagram using get_float32()
//               or get_float64().  See write_datagram_fixed().
////////////////////////////////////////////////////////////////////
70
inline void LVecBase4d::read_datagram_fixed(DatagramIterator &source);

2747 14 write_datagram 0 4 3472 26 LVecBase4d::write_datagram 0 1 941 464
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::write_datagram
//       Access: Published
//  Description: Writes the vector to the Datagram using
//               add_stdfloat().  This is appropriate when you want to
//               write the vector using the standard width setting,
//               especially when you are writing a bam file.
////////////////////////////////////////////////////////////////////
68
inline void LVecBase4d::write_datagram(Datagram &destination) const;

2748 13 read_datagram 0 4 3472 25 LVecBase4d::read_datagram 0 1 942 280
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::read_datagram
//       Access: Published
//  Description: Reads the vector from the Datagram using get_stdfloat().
////////////////////////////////////////////////////////////////////
64
inline void LVecBase4d::read_datagram(DatagramIterator &source);

2749 14 get_class_type 0 4 3472 26 LVecBase4d::get_class_type 0 1 943 0
51
static TypeHandle LVecBase4d::get_class_type(void);

2750 19 UnalignedLVecBase4d 0 4 3474 40 UnalignedLVecBase4d::UnalignedLVecBase4d 0 4 944 945 946 947 932
////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
298
inline UnalignedLVecBase4d::UnalignedLVecBase4d(void);
inline UnalignedLVecBase4d::UnalignedLVecBase4d(LVecBase4d const &copy);
inline UnalignedLVecBase4d::UnalignedLVecBase4d(UnalignedLVecBase4d const &copy);
inline UnalignedLVecBase4d::UnalignedLVecBase4d(double x, double y, double z, double w);

2751 10 operator = 0 4 3474 31 UnalignedLVecBase4d::operator = 0 2 948 949 482
////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
178
inline UnalignedLVecBase4d &UnalignedLVecBase4d::operator =(LVecBase4d const &copy);
inline UnalignedLVecBase4d &UnalignedLVecBase4d::operator =(UnalignedLVecBase4d const &copy);

2752 3 set 0 4 3474 24 UnalignedLVecBase4d::set 0 1 950 222
////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::set
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
77
inline void UnalignedLVecBase4d::set(double x, double y, double z, double w);

2753 11 operator [] 0 4 3474 32 UnalignedLVecBase4d::operator [] 0 2 951 952 233
////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Indexing Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
116
inline double UnalignedLVecBase4d::operator [](int i) const;
inline double &UnalignedLVecBase4d::operator [](int i);

2754 4 size 0 4 3474 25 UnalignedLVecBase4d::size 0 1 953 280
////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::size
//       Access: Public, Static
//  Description: Returns 4: the number of components of a LVecBase4.
////////////////////////////////////////////////////////////////////
50
static inline int UnalignedLVecBase4d::size(void);

2755 8 get_data 0 4 3474 29 UnalignedLVecBase4d::get_data 0 1 954 408
////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::get_data
//       Access: Public
//  Description: Returns the address of the first of the three data
//               elements in the vector.  The remaining elements
//               occupy the next positions consecutively in memory.
////////////////////////////////////////////////////////////////////
63
inline double const *UnalignedLVecBase4d::get_data(void) const;

2756 18 get_num_components 0 4 3474 39 UnalignedLVecBase4d::get_num_components 0 1 955 283
////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::get_num_components
//       Access: Public
//  Description: Returns the number of elements in the vector, 4.
////////////////////////////////////////////////////////////////////
63
inline int UnalignedLVecBase4d::get_num_components(void) const;

2757 14 get_class_type 0 4 3474 35 UnalignedLVecBase4d::get_class_type 0 1 956 0
60
static TypeHandle UnalignedLVecBase4d::get_class_type(void);

2758 20 ~UnalignedLVecBase4d 0 4 3474 41 UnalignedLVecBase4d::~UnalignedLVecBase4d 0 0 0
48
UnalignedLVecBase4d::~UnalignedLVecBase4d(void);

2759 10 LVecBase4i 0 4 3476 22 LVecBase4i::LVecBase4i 0 8 957 958 959 960 961 962 963 964 1980
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Default Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Constructor
//       Access: Published
//  Description: Constructs an LVecBase4 from an LPoint3.  The w
//               coordinate is set to 1.0.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Constructor
//       Access: Published
//  Description: Constructs an LVecBase4 from an LVector3.  The w
//               coordinate is set to 0.0.
////////////////////////////////////////////////////////////////////
433
inline LVecBase4i::LVecBase4i(void);
inline LVecBase4i::LVecBase4i(LVecBase4i const &copy);
inline LVecBase4i::LVecBase4i(UnalignedLVecBase4i const &copy);
inline LVecBase4i::LVecBase4i(int fill_value);
inline LVecBase4i::LVecBase4i(int x, int y, int z, int w);
inline LVecBase4i::LVecBase4i(LVecBase3i const &copy, int w);
inline LVecBase4i::LVecBase4i(LPoint3i const &point);
inline LVecBase4i::LVecBase4i(LVector3i const &vector);

2760 10 operator = 0 4 3476 22 LVecBase4i::operator = 0 3 965 966 967 703
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Copy Assignment Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Fill Assignment Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
201
inline LVecBase4i &LVecBase4i::operator =(LVecBase4i const &copy);
inline LVecBase4i &LVecBase4i::operator =(UnalignedLVecBase4i const &copy);
inline LVecBase4i &LVecBase4i::operator =(int fill_value);

2761 12 operator new 0 4 3476 24 LVecBase4i::operator new 0 1 968 0
114
inline void *LVecBase4i::operator new(size_t size);
inline void *LVecBase4i::operator new(size_t size, void *ptr);

2762 15 operator delete 0 4 3476 27 LVecBase4i::operator delete 0 0 0
108
inline void LVecBase4i::operator delete(void *ptr);
inline void LVecBase4i::operator delete(void *, void *);

2763 12 validate_ptr 0 4 3476 24 LVecBase4i::validate_ptr 0 0 0
61
static inline bool LVecBase4i::validate_ptr(void const *ptr);

2764 4 zero 0 4 3476 16 LVecBase4i::zero 0 1 969 262
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::zero Named Constructor
//       Access: Published
//  Description: Returns a zero-length vector.
////////////////////////////////////////////////////////////////////
55
static inline LVecBase4i const &LVecBase4i::zero(void);

2765 6 unit_x 0 4 3476 18 LVecBase4i::unit_x 0 1 970 259
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::unit_x Named Constructor
//       Access: Published
//  Description: Returns a unit X vector.
////////////////////////////////////////////////////////////////////
57
static inline LVecBase4i const &LVecBase4i::unit_x(void);

2766 6 unit_y 0 4 3476 18 LVecBase4i::unit_y 0 1 971 259
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::unit_y Named Constructor
//       Access: Published
//  Description: Returns a unit Y vector.
////////////////////////////////////////////////////////////////////
57
static inline LVecBase4i const &LVecBase4i::unit_y(void);

2767 6 unit_z 0 4 3476 18 LVecBase4i::unit_z 0 1 972 259
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::unit_z Named Constructor
//       Access: Published
//  Description: Returns a unit Z vector.
////////////////////////////////////////////////////////////////////
57
static inline LVecBase4i const &LVecBase4i::unit_z(void);

2768 6 unit_w 0 4 3476 18 LVecBase4i::unit_w 0 1 973 259
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::unit_w Named Constructor
//       Access: Published
//  Description: Returns a unit W vector.
////////////////////////////////////////////////////////////////////
57
static inline LVecBase4i const &LVecBase4i::unit_w(void);

2769 11 ~LVecBase4i 0 4 3476 23 LVecBase4i::~LVecBase4i 0 0 220
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
37
inline LVecBase4i::~LVecBase4i(void);

2770 10 __reduce__ 0 4 3476 22 LVecBase4i::__reduce__ 0 1 974 0
62
inline PyObject *LVecBase4i::__reduce__(PyObject *self) const;

2771 11 __getattr__ 0 4 3476 23 LVecBase4i::__getattr__ 0 1 975 0
88
inline PyObject *LVecBase4i::__getattr__(PyObject *self, string const &attr_name) const;

2772 11 __setattr__ 0 4 3476 23 LVecBase4i::__setattr__ 0 1 976 0
94
inline int LVecBase4i::__setattr__(PyObject *self, string const &attr_name, PyObject *assign);

2773 11 operator [] 0 4 3476 23 LVecBase4i::operator [] 0 2 977 978 227
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Indexing Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
92
inline int LVecBase4i::operator [](int i) const;
inline int &LVecBase4i::operator [](int i);

2774 4 size 0 4 3476 16 LVecBase4i::size 0 1 979 274
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::size
//       Access: Published, Static
//  Description: Returns 4: the number of components of a LVecBase4.
////////////////////////////////////////////////////////////////////
41
static inline int LVecBase4i::size(void);

2775 6 is_nan 0 4 3476 18 LVecBase4i::is_nan 0 1 980 311
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::is_nan
//       Access: Published
//  Description: Returns true if any component of the vector is
//               not-a-number, false otherwise.
////////////////////////////////////////////////////////////////////
43
inline bool LVecBase4i::is_nan(void) const;

2776 8 get_cell 0 4 3476 20 LVecBase4i::get_cell 0 1 981 218
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_cell
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
45
inline int LVecBase4i::get_cell(int i) const;

2777 5 get_x 0 4 3476 17 LVecBase4i::get_x 0 1 982 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_x
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
41
inline int LVecBase4i::get_x(void) const;

2778 5 get_y 0 4 3476 17 LVecBase4i::get_y 0 1 983 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_y
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
41
inline int LVecBase4i::get_y(void) const;

2779 5 get_z 0 4 3476 17 LVecBase4i::get_z 0 1 984 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_z
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
41
inline int LVecBase4i::get_z(void) const;

2780 5 get_w 0 4 3476 17 LVecBase4i::get_w 0 1 985 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_w
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
41
inline int LVecBase4i::get_w(void) const;

2781 8 set_cell 0 4 3476 20 LVecBase4i::set_cell 0 1 986 218
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_cell
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
51
inline void LVecBase4i::set_cell(int i, int value);

2782 5 set_x 0 4 3476 17 LVecBase4i::set_x 0 1 987 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_x
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
41
inline void LVecBase4i::set_x(int value);

2783 5 set_y 0 4 3476 17 LVecBase4i::set_y 0 1 988 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_y
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
41
inline void LVecBase4i::set_y(int value);

2784 5 set_z 0 4 3476 17 LVecBase4i::set_z 0 1 989 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_z
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
41
inline void LVecBase4i::set_z(int value);

2785 5 set_w 0 4 3476 17 LVecBase4i::set_w 0 1 990 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_w
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
41
inline void LVecBase4i::set_w(int value);

2786 11 add_to_cell 0 4 3476 23 LVecBase4i::add_to_cell 0 1 991 377
// These next functions add to an existing value.
// i.e. foo.set_x(foo.get_x() + value)
// These are useful to reduce overhead in scripting
// languages:

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_to_cell
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
54
inline void LVecBase4i::add_to_cell(int i, int value);

2787 5 add_x 0 4 3476 17 LVecBase4i::add_x 0 1 992 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_x
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
41
inline void LVecBase4i::add_x(int value);

2788 5 add_y 0 4 3476 17 LVecBase4i::add_y 0 1 993 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_y
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
41
inline void LVecBase4i::add_y(int value);

2789 5 add_z 0 4 3476 17 LVecBase4i::add_z 0 1 994 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_z
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
41
inline void LVecBase4i::add_z(int value);

2790 5 add_w 0 4 3476 17 LVecBase4i::add_w 0 1 995 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_w
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
41
inline void LVecBase4i::add_w(int value);

2791 8 get_data 0 4 3476 20 LVecBase4i::get_data 0 1 996 401
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_data
//       Access: Published
//  Description: Returns the address of the first of the four data
//               elements in the vector.  The remaining elements
//               occupy the next positions consecutively in memory.
////////////////////////////////////////////////////////////////////
51
inline int const *LVecBase4i::get_data(void) const;

2792 18 get_num_components 0 4 3476 30 LVecBase4i::get_num_components 0 1 997 280
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_num_components
//       Access: Published
//  Description: Returns the number of elements in the vector, four.
////////////////////////////////////////////////////////////////////
54
inline int LVecBase4i::get_num_components(void) const;

2793 12 extract_data 0 4 3476 24 LVecBase4i::extract_data 0 0 0
46
inline void LVecBase4i::extract_data(float *);

2794 4 fill 0 4 3476 16 LVecBase4i::fill 0 1 998 364
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::fill
//       Access: Published
//  Description: Sets each element of the vector to the indicated
//               fill_value.  This is particularly useful for
//               initializing to zero.
////////////////////////////////////////////////////////////////////
45
inline void LVecBase4i::fill(int fill_value);

2795 3 set 0 4 3476 15 LVecBase4i::set 0 1 999 213
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
56
inline void LVecBase4i::set(int x, int y, int z, int w);

2796 3 dot 0 4 3476 15 LVecBase4i::dot 0 1 1000 213
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::dot
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
58
inline int LVecBase4i::dot(LVecBase4i const &other) const;

2797 14 length_squared 0 4 3476 26 LVecBase4i::length_squared 0 1 1001 300
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::length_squared
//       Access: Published
//  Description: Returns the square of the vector's length, cheap and
//               easy.
////////////////////////////////////////////////////////////////////
50
inline int LVecBase4i::length_squared(void) const;

2798 10 operator < 0 4 3476 22 LVecBase4i::operator < 0 1 1002 0
66
inline bool LVecBase4i::operator <(LVecBase4i const &other) const;

2799 11 operator == 0 4 3476 23 LVecBase4i::operator == 0 1 1003 0
67
inline bool LVecBase4i::operator ==(LVecBase4i const &other) const;

2800 11 operator != 0 4 3476 23 LVecBase4i::operator != 0 1 1004 0
67
inline bool LVecBase4i::operator !=(LVecBase4i const &other) const;

2801 10 compare_to 0 4 3476 22 LVecBase4i::compare_to 0 1 1005 321
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::compare_to
//       Access: Published
//  Description: This flavor of compare_to uses a default threshold
//               value based on the numeric type.
////////////////////////////////////////////////////////////////////
65
inline int LVecBase4i::compare_to(LVecBase4i const &other) const;

2802 8 get_hash 0 4 3476 20 LVecBase4i::get_hash 0 1 1006 257
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////
47
inline size_t LVecBase4i::get_hash(void) const;

2803 8 add_hash 0 4 3476 20 LVecBase4i::add_hash 0 1 1007 257
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////
54
inline size_t LVecBase4i::add_hash(size_t hash) const;

2804 13 generate_hash 0 4 3476 25 LVecBase4i::generate_hash 0 1 1008 272
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::generate_hash
//       Access: Published
//  Description: Adds the vector to the indicated hash generator.
////////////////////////////////////////////////////////////////////
76
inline void LVecBase4i::generate_hash(ChecksumHashGenerator &hashgen) const;

2805 10 operator - 0 68 3476 22 LVecBase4i::operator - 0 1 1009 0
53
inline LVecBase4i LVecBase4i::operator -(void) const;

2806 10 operator + 0 4 3476 22 LVecBase4i::operator + 0 1 1010 0
72
inline LVecBase4i LVecBase4i::operator +(LVecBase4i const &other) const;

2807 10 operator - 0 4 3476 22 LVecBase4i::operator - 0 1 1011 0
72
inline LVecBase4i LVecBase4i::operator -(LVecBase4i const &other) const;

2808 10 operator * 0 4 3476 22 LVecBase4i::operator * 0 1 1012 0
59
inline LVecBase4i LVecBase4i::operator *(int scalar) const;

2809 10 operator / 0 4 3476 22 LVecBase4i::operator / 0 1 1013 0
59
inline LVecBase4i LVecBase4i::operator /(int scalar) const;

2810 11 operator += 0 4 3476 23 LVecBase4i::operator += 0 1 1014 0
61
inline void LVecBase4i::operator +=(LVecBase4i const &other);

2811 11 operator -= 0 4 3476 23 LVecBase4i::operator -= 0 1 1015 0
61
inline void LVecBase4i::operator -=(LVecBase4i const &other);

2812 11 operator *= 0 4 3476 23 LVecBase4i::operator *= 0 1 1016 0
48
inline void LVecBase4i::operator *=(int scalar);

2813 11 operator /= 0 4 3476 23 LVecBase4i::operator /= 0 1 1017 0
48
inline void LVecBase4i::operator /=(int scalar);

2814 18 componentwise_mult 0 4 3476 30 LVecBase4i::componentwise_mult 0 1 1018 228
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::componentwise_mult
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
68
inline void LVecBase4i::componentwise_mult(LVecBase4i const &other);

2815 7 __pow__ 0 4 3476 19 LVecBase4i::__pow__ 0 1 1019 0
58
inline LVecBase4i LVecBase4i::__pow__(int exponent) const;

2816 8 __ipow__ 0 4 3476 20 LVecBase4i::__ipow__ 0 1 1020 0
68
inline PyObject *LVecBase4i::__ipow__(PyObject *self, int exponent);

2817 4 fmax 0 4 3476 16 LVecBase4i::fmax 0 1 1021 214
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::fmax
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
66
inline LVecBase4i LVecBase4i::fmax(LVecBase4i const &other) const;

2818 4 fmin 0 4 3476 16 LVecBase4i::fmin 0 1 1022 214
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::fmin
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
66
inline LVecBase4i LVecBase4i::fmin(LVecBase4i const &other) const;

2819 12 almost_equal 0 4 3476 24 LVecBase4i::almost_equal 0 2 1023 1024 662
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::almost_equal
//       Access: Published
//  Description: Returns true if two vectors are memberwise equal
//               within a specified tolerance.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::almost_equal
//       Access: Published
//  Description: Returns true if two vectors are memberwise equal
//               within a default tolerance based on the numeric type.
////////////////////////////////////////////////////////////////////
152
inline bool LVecBase4i::almost_equal(LVecBase4i const &other, int threshold) const;
inline bool LVecBase4i::almost_equal(LVecBase4i const &other) const;

2820 6 output 0 4 3476 18 LVecBase4i::output 0 1 1025 216
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::output
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
51
inline void LVecBase4i::output(ostream &out) const;

2821 8 __repr__ 0 4 3476 20 LVecBase4i::__repr__ 0 1 1026 0
47
inline string LVecBase4i::__repr__(void) const;

2822 20 write_datagram_fixed 0 4 3476 32 LVecBase4i::write_datagram_fixed 0 1 1027 642
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::write_datagram_fixed
//       Access: Published
//  Description: Writes the vector to the Datagram using add_float32()
//               or add_float64(), depending on the type of floats in
//               the vector, regardless of the setting of
//               Datagram::set_stdfloat_double().  This is appropriate
//               when you want to write a fixed-width value to the
//               datagram, especially when you are not writing a bam
//               file.
////////////////////////////////////////////////////////////////////
74
inline void LVecBase4i::write_datagram_fixed(Datagram &destination) const;

2823 19 read_datagram_fixed 0 4 3476 31 LVecBase4i::read_datagram_fixed 0 1 1028 348
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::read_datagram_fixed
//       Access: Published
//  Description: Reads the vector from the Datagram using get_float32()
//               or get_float64().  See write_datagram_fixed().
////////////////////////////////////////////////////////////////////
70
inline void LVecBase4i::read_datagram_fixed(DatagramIterator &source);

2824 14 write_datagram 0 4 3476 26 LVecBase4i::write_datagram 0 1 1029 464
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::write_datagram
//       Access: Published
//  Description: Writes the vector to the Datagram using
//               add_stdfloat().  This is appropriate when you want to
//               write the vector using the standard width setting,
//               especially when you are writing a bam file.
////////////////////////////////////////////////////////////////////
68
inline void LVecBase4i::write_datagram(Datagram &destination) const;

2825 13 read_datagram 0 4 3476 25 LVecBase4i::read_datagram 0 1 1030 280
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::read_datagram
//       Access: Published
//  Description: Reads the vector from the Datagram using get_stdfloat().
////////////////////////////////////////////////////////////////////
64
inline void LVecBase4i::read_datagram(DatagramIterator &source);

2826 14 get_class_type 0 4 3476 26 LVecBase4i::get_class_type 0 1 1031 0
51
static TypeHandle LVecBase4i::get_class_type(void);

2827 19 UnalignedLVecBase4i 0 4 3478 40 UnalignedLVecBase4i::UnalignedLVecBase4i 0 4 1032 1033 1034 1035 932
////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
286
inline UnalignedLVecBase4i::UnalignedLVecBase4i(void);
inline UnalignedLVecBase4i::UnalignedLVecBase4i(LVecBase4i const &copy);
inline UnalignedLVecBase4i::UnalignedLVecBase4i(UnalignedLVecBase4i const &copy);
inline UnalignedLVecBase4i::UnalignedLVecBase4i(int x, int y, int z, int w);

2828 10 operator = 0 4 3478 31 UnalignedLVecBase4i::operator = 0 2 1036 1037 482
////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
178
inline UnalignedLVecBase4i &UnalignedLVecBase4i::operator =(LVecBase4i const &copy);
inline UnalignedLVecBase4i &UnalignedLVecBase4i::operator =(UnalignedLVecBase4i const &copy);

2829 3 set 0 4 3478 24 UnalignedLVecBase4i::set 0 1 1038 222
////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::set
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
65
inline void UnalignedLVecBase4i::set(int x, int y, int z, int w);

2830 11 operator [] 0 4 3478 32 UnalignedLVecBase4i::operator [] 0 2 1039 1040 233
////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Indexing Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
110
inline int UnalignedLVecBase4i::operator [](int i) const;
inline int &UnalignedLVecBase4i::operator [](int i);

2831 4 size 0 4 3478 25 UnalignedLVecBase4i::size 0 1 1041 280
////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::size
//       Access: Public, Static
//  Description: Returns 4: the number of components of a LVecBase4.
////////////////////////////////////////////////////////////////////
50
static inline int UnalignedLVecBase4i::size(void);

2832 8 get_data 0 4 3478 29 UnalignedLVecBase4i::get_data 0 1 1042 408
////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::get_data
//       Access: Public
//  Description: Returns the address of the first of the three data
//               elements in the vector.  The remaining elements
//               occupy the next positions consecutively in memory.
////////////////////////////////////////////////////////////////////
60
inline int const *UnalignedLVecBase4i::get_data(void) const;

2833 18 get_num_components 0 4 3478 39 UnalignedLVecBase4i::get_num_components 0 1 1043 283
////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::get_num_components
//       Access: Public
//  Description: Returns the number of elements in the vector, 4.
////////////////////////////////////////////////////////////////////
63
inline int UnalignedLVecBase4i::get_num_components(void) const;

2834 14 get_class_type 0 4 3478 35 UnalignedLVecBase4i::get_class_type 0 1 1044 0
60
static TypeHandle UnalignedLVecBase4i::get_class_type(void);

2835 20 ~UnalignedLVecBase4i 0 4 3478 41 UnalignedLVecBase4i::~UnalignedLVecBase4i 0 0 0
48
UnalignedLVecBase4i::~UnalignedLVecBase4i(void);

2836 9 LVector4f 0 4 3480 20 LVector4f::LVector4f 0 5 1045 1046 1047 1048 1049 1109
////////////////////////////////////////////////////////////////////
//     Function: LVector4::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector4::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector4::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector4::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector4::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
261
inline LVector4f::LVector4f(void);
inline LVector4f::LVector4f(LVecBase4f const &copy);
inline LVector4f::LVector4f(float fill_value);
inline LVector4f::LVector4f(float x, float y, float z, float w);
inline LVector4f::LVector4f(LVecBase3f const &copy, float w);

2837 10 operator = 0 4 3480 21 LVector4f::operator = 0 2 1050 1051 456
////////////////////////////////////////////////////////////////////
//     Function: LVector4::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector4::Copy Fill Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
123
inline LVector4f &LVector4f::operator =(LVecBase4f const &copy);
inline LVector4f &LVector4f::operator =(float fill_value);

2838 11 __getattr__ 0 4 3480 22 LVector4f::__getattr__ 0 1 1052 0
87
inline PyObject *LVector4f::__getattr__(PyObject *self, string const &attr_name) const;

2839 11 __setattr__ 0 4 3480 22 LVector4f::__setattr__ 0 1 1053 0
93
inline int LVector4f::__setattr__(PyObject *self, string const &attr_name, PyObject *assign);

2840 4 zero 0 4 3480 15 LVector4f::zero 0 1 1054 258
////////////////////////////////////////////////////////////////////
//     Function: LVector4::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length vector.
////////////////////////////////////////////////////////////////////
53
static inline LVector4f const &LVector4f::zero(void);

2841 6 unit_x 0 4 3480 17 LVector4f::unit_x 0 1 1055 255
////////////////////////////////////////////////////////////////////
//     Function: LVector4::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X vector.
////////////////////////////////////////////////////////////////////
55
static inline LVector4f const &LVector4f::unit_x(void);

2842 6 unit_y 0 4 3480 17 LVector4f::unit_y 0 1 1056 255
////////////////////////////////////////////////////////////////////
//     Function: LVector4::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y vector.
////////////////////////////////////////////////////////////////////
55
static inline LVector4f const &LVector4f::unit_y(void);

2843 6 unit_z 0 4 3480 17 LVector4f::unit_z 0 1 1057 255
////////////////////////////////////////////////////////////////////
//     Function: LVector4::unit_z Named Constructor
//       Access: Public
//  Description: Returns a unit Z vector.
////////////////////////////////////////////////////////////////////
55
static inline LVector4f const &LVector4f::unit_z(void);

2844 6 unit_w 0 4 3480 17 LVector4f::unit_w 0 1 1058 255
////////////////////////////////////////////////////////////////////
//     Function: LVector4::unit_w Named Constructor
//       Access: Public
//  Description: Returns a unit W vector.
////////////////////////////////////////////////////////////////////
55
static inline LVector4f const &LVector4f::unit_w(void);

2845 10 operator - 0 68 3480 21 LVector4f::operator - 0 1 1059 0
51
inline LVector4f LVector4f::operator -(void) const;

2846 10 operator + 0 4 3480 21 LVector4f::operator + 0 2 1060 1061 0
141
inline LVecBase4f LVector4f::operator +(LVecBase4f const &other) const;
inline LVector4f LVector4f::operator +(LVector4f const &other) const;

2847 10 operator - 0 4 3480 21 LVector4f::operator - 0 2 1062 1063 0
141
inline LVecBase4f LVector4f::operator -(LVecBase4f const &other) const;
inline LVector4f LVector4f::operator -(LVector4f const &other) const;

2848 10 operator * 0 4 3480 21 LVector4f::operator * 0 1 1064 0
59
inline LVector4f LVector4f::operator *(float scalar) const;

2849 10 operator / 0 4 3480 21 LVector4f::operator / 0 1 1065 0
59
inline LVector4f LVector4f::operator /(float scalar) const;

2850 7 project 0 4 3480 18 LVector4f::project 0 1 1066 389
////////////////////////////////////////////////////////////////////
//     Function: LVector4::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
////////////////////////////////////////////////////////////////////
66
inline LVector4f LVector4f::project(LVecBase4f const &onto) const;

2851 8 __repr__ 0 4 3480 19 LVector4f::__repr__ 0 1 1067 0
46
inline string LVector4f::__repr__(void) const;

2852 14 get_class_type 0 4 3480 25 LVector4f::get_class_type 0 1 1068 0
50
static TypeHandle LVector4f::get_class_type(void);

2853 10 ~LVector4f 0 4 3480 21 LVector4f::~LVector4f 0 0 0
28
LVector4f::~LVector4f(void);

2854 9 LVector4d 0 4 3481 20 LVector4d::LVector4d 0 5 1069 1070 1071 1072 1073 1109
////////////////////////////////////////////////////////////////////
//     Function: LVector4::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector4::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector4::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector4::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector4::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
267
inline LVector4d::LVector4d(void);
inline LVector4d::LVector4d(LVecBase4d const &copy);
inline LVector4d::LVector4d(double fill_value);
inline LVector4d::LVector4d(double x, double y, double z, double w);
inline LVector4d::LVector4d(LVecBase3d const &copy, double w);

2855 10 operator = 0 4 3481 21 LVector4d::operator = 0 2 1074 1075 456
////////////////////////////////////////////////////////////////////
//     Function: LVector4::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector4::Copy Fill Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
124
inline LVector4d &LVector4d::operator =(LVecBase4d const &copy);
inline LVector4d &LVector4d::operator =(double fill_value);

2856 11 __getattr__ 0 4 3481 22 LVector4d::__getattr__ 0 1 1076 0
87
inline PyObject *LVector4d::__getattr__(PyObject *self, string const &attr_name) const;

2857 11 __setattr__ 0 4 3481 22 LVector4d::__setattr__ 0 1 1077 0
93
inline int LVector4d::__setattr__(PyObject *self, string const &attr_name, PyObject *assign);

2858 4 zero 0 4 3481 15 LVector4d::zero 0 1 1078 258
////////////////////////////////////////////////////////////////////
//     Function: LVector4::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length vector.
////////////////////////////////////////////////////////////////////
53
static inline LVector4d const &LVector4d::zero(void);

2859 6 unit_x 0 4 3481 17 LVector4d::unit_x 0 1 1079 255
////////////////////////////////////////////////////////////////////
//     Function: LVector4::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X vector.
////////////////////////////////////////////////////////////////////
55
static inline LVector4d const &LVector4d::unit_x(void);

2860 6 unit_y 0 4 3481 17 LVector4d::unit_y 0 1 1080 255
////////////////////////////////////////////////////////////////////
//     Function: LVector4::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y vector.
////////////////////////////////////////////////////////////////////
55
static inline LVector4d const &LVector4d::unit_y(void);

2861 6 unit_z 0 4 3481 17 LVector4d::unit_z 0 1 1081 255
////////////////////////////////////////////////////////////////////
//     Function: LVector4::unit_z Named Constructor
//       Access: Public
//  Description: Returns a unit Z vector.
////////////////////////////////////////////////////////////////////
55
static inline LVector4d const &LVector4d::unit_z(void);

2862 6 unit_w 0 4 3481 17 LVector4d::unit_w 0 1 1082 255
////////////////////////////////////////////////////////////////////
//     Function: LVector4::unit_w Named Constructor
//       Access: Public
//  Description: Returns a unit W vector.
////////////////////////////////////////////////////////////////////
55
static inline LVector4d const &LVector4d::unit_w(void);

2863 10 operator - 0 68 3481 21 LVector4d::operator - 0 1 1083 0
51
inline LVector4d LVector4d::operator -(void) const;

2864 10 operator + 0 4 3481 21 LVector4d::operator + 0 2 1084 1085 0
141
inline LVecBase4d LVector4d::operator +(LVecBase4d const &other) const;
inline LVector4d LVector4d::operator +(LVector4d const &other) const;

2865 10 operator - 0 4 3481 21 LVector4d::operator - 0 2 1086 1087 0
141
inline LVecBase4d LVector4d::operator -(LVecBase4d const &other) const;
inline LVector4d LVector4d::operator -(LVector4d const &other) const;

2866 10 operator * 0 4 3481 21 LVector4d::operator * 0 1 1088 0
60
inline LVector4d LVector4d::operator *(double scalar) const;

2867 10 operator / 0 4 3481 21 LVector4d::operator / 0 1 1089 0
60
inline LVector4d LVector4d::operator /(double scalar) const;

2868 7 project 0 4 3481 18 LVector4d::project 0 1 1090 389
////////////////////////////////////////////////////////////////////
//     Function: LVector4::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
////////////////////////////////////////////////////////////////////
66
inline LVector4d LVector4d::project(LVecBase4d const &onto) const;

2869 8 __repr__ 0 4 3481 19 LVector4d::__repr__ 0 1 1091 0
46
inline string LVector4d::__repr__(void) const;

2870 14 get_class_type 0 4 3481 25 LVector4d::get_class_type 0 1 1092 0
50
static TypeHandle LVector4d::get_class_type(void);

2871 10 ~LVector4d 0 4 3481 21 LVector4d::~LVector4d 0 0 0
28
LVector4d::~LVector4d(void);

2872 9 LVector4i 0 4 3482 20 LVector4i::LVector4i 0 5 1093 1094 1095 1096 1097 1109
////////////////////////////////////////////////////////////////////
//     Function: LVector4::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector4::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector4::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector4::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector4::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
249
inline LVector4i::LVector4i(void);
inline LVector4i::LVector4i(LVecBase4i const &copy);
inline LVector4i::LVector4i(int fill_value);
inline LVector4i::LVector4i(int x, int y, int z, int w);
inline LVector4i::LVector4i(LVecBase3i const &copy, int w);

2873 10 operator = 0 4 3482 21 LVector4i::operator = 0 2 1098 1099 456
////////////////////////////////////////////////////////////////////
//     Function: LVector4::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector4::Copy Fill Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
121
inline LVector4i &LVector4i::operator =(LVecBase4i const &copy);
inline LVector4i &LVector4i::operator =(int fill_value);

2874 11 __getattr__ 0 4 3482 22 LVector4i::__getattr__ 0 1 1100 0
87
inline PyObject *LVector4i::__getattr__(PyObject *self, string const &attr_name) const;

2875 11 __setattr__ 0 4 3482 22 LVector4i::__setattr__ 0 1 1101 0
93
inline int LVector4i::__setattr__(PyObject *self, string const &attr_name, PyObject *assign);

2876 4 zero 0 4 3482 15 LVector4i::zero 0 1 1102 258
////////////////////////////////////////////////////////////////////
//     Function: LVector4::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length vector.
////////////////////////////////////////////////////////////////////
53
static inline LVector4i const &LVector4i::zero(void);

2877 6 unit_x 0 4 3482 17 LVector4i::unit_x 0 1 1103 255
////////////////////////////////////////////////////////////////////
//     Function: LVector4::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X vector.
////////////////////////////////////////////////////////////////////
55
static inline LVector4i const &LVector4i::unit_x(void);

2878 6 unit_y 0 4 3482 17 LVector4i::unit_y 0 1 1104 255
////////////////////////////////////////////////////////////////////
//     Function: LVector4::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y vector.
////////////////////////////////////////////////////////////////////
55
static inline LVector4i const &LVector4i::unit_y(void);

2879 6 unit_z 0 4 3482 17 LVector4i::unit_z 0 1 1105 255
////////////////////////////////////////////////////////////////////
//     Function: LVector4::unit_z Named Constructor
//       Access: Public
//  Description: Returns a unit Z vector.
////////////////////////////////////////////////////////////////////
55
static inline LVector4i const &LVector4i::unit_z(void);

2880 6 unit_w 0 4 3482 17 LVector4i::unit_w 0 1 1106 255
////////////////////////////////////////////////////////////////////
//     Function: LVector4::unit_w Named Constructor
//       Access: Public
//  Description: Returns a unit W vector.
////////////////////////////////////////////////////////////////////
55
static inline LVector4i const &LVector4i::unit_w(void);

2881 10 operator - 0 68 3482 21 LVector4i::operator - 0 1 1107 0
51
inline LVector4i LVector4i::operator -(void) const;

2882 10 operator + 0 4 3482 21 LVector4i::operator + 0 2 1108 1109 0
141
inline LVecBase4i LVector4i::operator +(LVecBase4i const &other) const;
inline LVector4i LVector4i::operator +(LVector4i const &other) const;

2883 10 operator - 0 4 3482 21 LVector4i::operator - 0 2 1110 1111 0
141
inline LVecBase4i LVector4i::operator -(LVecBase4i const &other) const;
inline LVector4i LVector4i::operator -(LVector4i const &other) const;

2884 10 operator * 0 4 3482 21 LVector4i::operator * 0 1 1112 0
57
inline LVector4i LVector4i::operator *(int scalar) const;

2885 10 operator / 0 4 3482 21 LVector4i::operator / 0 1 1113 0
57
inline LVector4i LVector4i::operator /(int scalar) const;

2886 8 __repr__ 0 4 3482 19 LVector4i::__repr__ 0 1 1114 0
46
inline string LVector4i::__repr__(void) const;

2887 14 get_class_type 0 4 3482 25 LVector4i::get_class_type 0 1 1115 0
50
static TypeHandle LVector4i::get_class_type(void);

2888 10 ~LVector4i 0 4 3482 21 LVector4i::~LVector4i 0 0 0
28
LVector4i::~LVector4i(void);

2889 8 LPoint4f 0 4 3483 18 LPoint4f::LPoint4f 0 5 1116 1117 1118 1119 1120 1104
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
251
inline LPoint4f::LPoint4f(void);
inline LPoint4f::LPoint4f(LVecBase4f const &copy);
inline LPoint4f::LPoint4f(float fill_value);
inline LPoint4f::LPoint4f(float x, float y, float z, float w);
inline LPoint4f::LPoint4f(LVecBase3f const &copy, float w);

2890 10 operator = 0 4 3483 20 LPoint4f::operator = 0 2 1121 1122 454
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Copy Fill Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
119
inline LPoint4f &LPoint4f::operator =(LVecBase4f const &copy);
inline LPoint4f &LPoint4f::operator =(float fill_value);

2891 11 __getattr__ 0 4 3483 21 LPoint4f::__getattr__ 0 1 1123 0
86
inline PyObject *LPoint4f::__getattr__(PyObject *self, string const &attr_name) const;

2892 11 __setattr__ 0 4 3483 21 LPoint4f::__setattr__ 0 1 1124 0
92
inline int LPoint4f::__setattr__(PyObject *self, string const &attr_name, PyObject *assign);

2893 4 zero 0 4 3483 14 LPoint4f::zero 0 1 1125 256
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length point.
////////////////////////////////////////////////////////////////////
51
static inline LPoint4f const &LPoint4f::zero(void);

2894 6 unit_x 0 4 3483 16 LPoint4f::unit_x 0 1 1126 253
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X point.
////////////////////////////////////////////////////////////////////
53
static inline LPoint4f const &LPoint4f::unit_x(void);

2895 6 unit_y 0 4 3483 16 LPoint4f::unit_y 0 1 1127 253
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y point.
////////////////////////////////////////////////////////////////////
53
static inline LPoint4f const &LPoint4f::unit_y(void);

2896 6 unit_z 0 4 3483 16 LPoint4f::unit_z 0 1 1128 253
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::unit_z Named Constructor
//       Access: Public
//  Description: Returns a unit Z point.
////////////////////////////////////////////////////////////////////
53
static inline LPoint4f const &LPoint4f::unit_z(void);

2897 6 unit_w 0 4 3483 16 LPoint4f::unit_w 0 1 1129 253
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::unit_w Named Constructor
//       Access: Public
//  Description: Returns a unit W point.
////////////////////////////////////////////////////////////////////
53
static inline LPoint4f const &LPoint4f::unit_w(void);

2898 10 operator - 0 68 3483 20 LPoint4f::operator - 0 1 1130 0
49
inline LPoint4f LPoint4f::operator -(void) const;

2899 10 operator + 0 4 3483 20 LPoint4f::operator + 0 2 1131 1132 0
138
inline LVecBase4f LPoint4f::operator +(LVecBase4f const &other) const;
inline LPoint4f LPoint4f::operator +(LVector4f const &other) const;

2900 10 operator - 0 4 3483 20 LPoint4f::operator - 0 3 1133 1134 1135 0
206
inline LVecBase4f LPoint4f::operator -(LVecBase4f const &other) const;
inline LVector4f LPoint4f::operator -(LPoint4f const &other) const;
inline LPoint4f LPoint4f::operator -(LVector4f const &other) const;

2901 10 operator * 0 4 3483 20 LPoint4f::operator * 0 1 1136 0
57
inline LPoint4f LPoint4f::operator *(float scalar) const;

2902 10 operator / 0 4 3483 20 LPoint4f::operator / 0 1 1137 0
57
inline LPoint4f LPoint4f::operator /(float scalar) const;

2903 7 project 0 4 3483 17 LPoint4f::project 0 1 1138 388
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
////////////////////////////////////////////////////////////////////
64
inline LPoint4f LPoint4f::project(LVecBase4f const &onto) const;

2904 8 __repr__ 0 4 3483 18 LPoint4f::__repr__ 0 1 1139 0
45
inline string LPoint4f::__repr__(void) const;

2905 14 get_class_type 0 4 3483 24 LPoint4f::get_class_type 0 1 1140 0
49
static TypeHandle LPoint4f::get_class_type(void);

2906 9 ~LPoint4f 0 4 3483 19 LPoint4f::~LPoint4f 0 0 0
26
LPoint4f::~LPoint4f(void);

2907 8 LPoint4d 0 4 3484 18 LPoint4d::LPoint4d 0 5 1141 1142 1143 1144 1145 1104
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
257
inline LPoint4d::LPoint4d(void);
inline LPoint4d::LPoint4d(LVecBase4d const &copy);
inline LPoint4d::LPoint4d(double fill_value);
inline LPoint4d::LPoint4d(double x, double y, double z, double w);
inline LPoint4d::LPoint4d(LVecBase3d const &copy, double w);

2908 10 operator = 0 4 3484 20 LPoint4d::operator = 0 2 1146 1147 454
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Copy Fill Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
120
inline LPoint4d &LPoint4d::operator =(LVecBase4d const &copy);
inline LPoint4d &LPoint4d::operator =(double fill_value);

2909 11 __getattr__ 0 4 3484 21 LPoint4d::__getattr__ 0 1 1148 0
86
inline PyObject *LPoint4d::__getattr__(PyObject *self, string const &attr_name) const;

2910 11 __setattr__ 0 4 3484 21 LPoint4d::__setattr__ 0 1 1149 0
92
inline int LPoint4d::__setattr__(PyObject *self, string const &attr_name, PyObject *assign);

2911 4 zero 0 4 3484 14 LPoint4d::zero 0 1 1150 256
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length point.
////////////////////////////////////////////////////////////////////
51
static inline LPoint4d const &LPoint4d::zero(void);

2912 6 unit_x 0 4 3484 16 LPoint4d::unit_x 0 1 1151 253
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X point.
////////////////////////////////////////////////////////////////////
53
static inline LPoint4d const &LPoint4d::unit_x(void);

2913 6 unit_y 0 4 3484 16 LPoint4d::unit_y 0 1 1152 253
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y point.
////////////////////////////////////////////////////////////////////
53
static inline LPoint4d const &LPoint4d::unit_y(void);

2914 6 unit_z 0 4 3484 16 LPoint4d::unit_z 0 1 1153 253
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::unit_z Named Constructor
//       Access: Public
//  Description: Returns a unit Z point.
////////////////////////////////////////////////////////////////////
53
static inline LPoint4d const &LPoint4d::unit_z(void);

2915 6 unit_w 0 4 3484 16 LPoint4d::unit_w 0 1 1154 253
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::unit_w Named Constructor
//       Access: Public
//  Description: Returns a unit W point.
////////////////////////////////////////////////////////////////////
53
static inline LPoint4d const &LPoint4d::unit_w(void);

2916 10 operator - 0 68 3484 20 LPoint4d::operator - 0 1 1155 0
49
inline LPoint4d LPoint4d::operator -(void) const;

2917 10 operator + 0 4 3484 20 LPoint4d::operator + 0 2 1156 1157 0
138
inline LVecBase4d LPoint4d::operator +(LVecBase4d const &other) const;
inline LPoint4d LPoint4d::operator +(LVector4d const &other) const;

2918 10 operator - 0 4 3484 20 LPoint4d::operator - 0 3 1158 1159 1160 0
206
inline LVecBase4d LPoint4d::operator -(LVecBase4d const &other) const;
inline LVector4d LPoint4d::operator -(LPoint4d const &other) const;
inline LPoint4d LPoint4d::operator -(LVector4d const &other) const;

2919 10 operator * 0 4 3484 20 LPoint4d::operator * 0 1 1161 0
58
inline LPoint4d LPoint4d::operator *(double scalar) const;

2920 10 operator / 0 4 3484 20 LPoint4d::operator / 0 1 1162 0
58
inline LPoint4d LPoint4d::operator /(double scalar) const;

2921 7 project 0 4 3484 17 LPoint4d::project 0 1 1163 388
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
////////////////////////////////////////////////////////////////////
64
inline LPoint4d LPoint4d::project(LVecBase4d const &onto) const;

2922 8 __repr__ 0 4 3484 18 LPoint4d::__repr__ 0 1 1164 0
45
inline string LPoint4d::__repr__(void) const;

2923 14 get_class_type 0 4 3484 24 LPoint4d::get_class_type 0 1 1165 0
49
static TypeHandle LPoint4d::get_class_type(void);

2924 9 ~LPoint4d 0 4 3484 19 LPoint4d::~LPoint4d 0 0 0
26
LPoint4d::~LPoint4d(void);

2925 8 LPoint4i 0 4 3485 18 LPoint4i::LPoint4i 0 5 1166 1167 1168 1169 1170 1104
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
239
inline LPoint4i::LPoint4i(void);
inline LPoint4i::LPoint4i(LVecBase4i const &copy);
inline LPoint4i::LPoint4i(int fill_value);
inline LPoint4i::LPoint4i(int x, int y, int z, int w);
inline LPoint4i::LPoint4i(LVecBase3i const &copy, int w);

2926 10 operator = 0 4 3485 20 LPoint4i::operator = 0 2 1171 1172 454
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Copy Fill Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
117
inline LPoint4i &LPoint4i::operator =(LVecBase4i const &copy);
inline LPoint4i &LPoint4i::operator =(int fill_value);

2927 11 __getattr__ 0 4 3485 21 LPoint4i::__getattr__ 0 1 1173 0
86
inline PyObject *LPoint4i::__getattr__(PyObject *self, string const &attr_name) const;

2928 11 __setattr__ 0 4 3485 21 LPoint4i::__setattr__ 0 1 1174 0
92
inline int LPoint4i::__setattr__(PyObject *self, string const &attr_name, PyObject *assign);

2929 4 zero 0 4 3485 14 LPoint4i::zero 0 1 1175 256
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length point.
////////////////////////////////////////////////////////////////////
51
static inline LPoint4i const &LPoint4i::zero(void);

2930 6 unit_x 0 4 3485 16 LPoint4i::unit_x 0 1 1176 253
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X point.
////////////////////////////////////////////////////////////////////
53
static inline LPoint4i const &LPoint4i::unit_x(void);

2931 6 unit_y 0 4 3485 16 LPoint4i::unit_y 0 1 1177 253
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y point.
////////////////////////////////////////////////////////////////////
53
static inline LPoint4i const &LPoint4i::unit_y(void);

2932 6 unit_z 0 4 3485 16 LPoint4i::unit_z 0 1 1178 253
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::unit_z Named Constructor
//       Access: Public
//  Description: Returns a unit Z point.
////////////////////////////////////////////////////////////////////
53
static inline LPoint4i const &LPoint4i::unit_z(void);

2933 6 unit_w 0 4 3485 16 LPoint4i::unit_w 0 1 1179 253
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::unit_w Named Constructor
//       Access: Public
//  Description: Returns a unit W point.
////////////////////////////////////////////////////////////////////
53
static inline LPoint4i const &LPoint4i::unit_w(void);

2934 10 operator - 0 68 3485 20 LPoint4i::operator - 0 1 1180 0
49
inline LPoint4i LPoint4i::operator -(void) const;

2935 10 operator + 0 4 3485 20 LPoint4i::operator + 0 2 1181 1182 0
138
inline LVecBase4i LPoint4i::operator +(LVecBase4i const &other) const;
inline LPoint4i LPoint4i::operator +(LVector4i const &other) const;

2936 10 operator - 0 4 3485 20 LPoint4i::operator - 0 3 1183 1184 1185 0
206
inline LVecBase4i LPoint4i::operator -(LVecBase4i const &other) const;
inline LVector4i LPoint4i::operator -(LPoint4i const &other) const;
inline LPoint4i LPoint4i::operator -(LVector4i const &other) const;

2937 10 operator * 0 4 3485 20 LPoint4i::operator * 0 1 1186 0
55
inline LPoint4i LPoint4i::operator *(int scalar) const;

2938 10 operator / 0 4 3485 20 LPoint4i::operator / 0 1 1187 0
55
inline LPoint4i LPoint4i::operator /(int scalar) const;

2939 8 __repr__ 0 4 3485 18 LPoint4i::__repr__ 0 1 1188 0
45
inline string LPoint4i::__repr__(void) const;

2940 14 get_class_type 0 4 3485 24 LPoint4i::get_class_type 0 1 1189 0
49
static TypeHandle LPoint4i::get_class_type(void);

2941 9 ~LPoint4i 0 4 3485 19 LPoint4i::~LPoint4i 0 0 0
26
LPoint4i::~LPoint4i(void);

2942 11 operator [] 0 4 3488 27 LMatrix3f::Row::operator [] 0 2 1290 1291 225
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Row::operator []
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
104
inline float LMatrix3f::Row::operator [](int i) const;
inline float &LMatrix3f::Row::operator [](int i);

2943 4 size 0 4 3488 20 LMatrix3f::Row::size 0 1 1292 274
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Row::size
//       Access: Published, Static
//  Description: Returns 3: the number of columns of a LMatrix3.
////////////////////////////////////////////////////////////////////
45
static inline int LMatrix3f::Row::size(void);

2944 4 ~Row 0 4 3488 20 LMatrix3f::Row::~Row 0 0 0
27
LMatrix3f::Row::~Row(void);

2945 11 operator [] 0 4 3489 28 LMatrix3f::CRow::operator [] 0 1 1293 0
55
inline float LMatrix3f::CRow::operator [](int i) const;

2946 4 size 0 4 3489 21 LMatrix3f::CRow::size 0 1 1294 275
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::CRow::size
//       Access: Published, Static
//  Description: Returns 3: the number of columns of a LMatrix3.
////////////////////////////////////////////////////////////////////
46
static inline int LMatrix3f::CRow::size(void);

2947 5 ~CRow 0 4 3489 22 LMatrix3f::CRow::~CRow 0 0 0
29
LMatrix3f::CRow::~CRow(void);

2948 9 LMatrix3f 0 4 3486 20 LMatrix3f::LMatrix3f 0 3 1190 1191 1192 677
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Default Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
215
inline LMatrix3f::LMatrix3f(void);
inline LMatrix3f::LMatrix3f(LMatrix3f const &other);
inline LMatrix3f::LMatrix3f(float e00, float e01, float e02, float e10, float e11, float e12, float e20, float e21, float e22);

2949 10 operator = 0 4 3486 21 LMatrix3f::operator = 0 2 1193 1194 468
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Copy Assignment Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Fill Assignment Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
123
inline LMatrix3f &LMatrix3f::operator =(LMatrix3f const &other);
inline LMatrix3f &LMatrix3f::operator =(float fill_value);

2950 12 operator new 0 4 3486 23 LMatrix3f::operator new 0 1 1195 0
112
inline void *LMatrix3f::operator new(size_t size);
inline void *LMatrix3f::operator new(size_t size, void *ptr);

2951 15 operator delete 0 4 3486 26 LMatrix3f::operator delete 0 0 0
106
inline void LMatrix3f::operator delete(void *ptr);
inline void LMatrix3f::operator delete(void *, void *);

2952 12 validate_ptr 0 4 3486 23 LMatrix3f::validate_ptr 0 0 0
60
static inline bool LMatrix3f::validate_ptr(void const *ptr);

2953 10 __reduce__ 0 4 3486 21 LMatrix3f::__reduce__ 0 1 1196 0
61
inline PyObject *LMatrix3f::__reduce__(PyObject *self) const;

2954 4 fill 0 4 3486 15 LMatrix3f::fill 0 1 1197 391
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::fill
//       Access: Published
//  Description: Sets each element of the matrix to the indicated
//               fill_value.  This is of questionable value, but is
//               sometimes useful when initializing to zero.
////////////////////////////////////////////////////////////////////
39
void LMatrix3f::fill(float fill_value);

2955 3 set 0 4 3486 14 LMatrix3f::set 0 1 1198 212
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
126
inline void LMatrix3f::set(float e00, float e01, float e02, float e10, float e11, float e12, float e20, float e21, float e22);

2956 7 set_row 0 4 3486 18 LMatrix3f::set_row 0 2 1199 1200 636
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set_row
//       Access: Published
//  Description: Replaces the indicated row of the matrix from a
//               three-component vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set_row
//       Access: Published
//  Description: Replaces the indicated row of the matrix from a
//               two-component vector, ignoring the last column.
////////////////////////////////////////////////////////////////////
123
inline void LMatrix3f::set_row(int row, LVecBase3f const &v);
inline void LMatrix3f::set_row(int row, LVecBase2f const &v);

2957 7 set_col 0 4 3486 18 LMatrix3f::set_col 0 2 1201 1202 645
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set_column
//       Access: Published
//  Description: Replaces the indicated column of the matrix from a
//               three-component vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set_column
//       Access: Published
//  Description: Replaces the indicated column of the matrix from a
//               two-component vector, ignoring the last row.
////////////////////////////////////////////////////////////////////
123
inline void LMatrix3f::set_col(int col, LVecBase3f const &v);
inline void LMatrix3f::set_col(int col, LVecBase2f const &v);

2958 7 get_row 0 4 3486 18 LMatrix3f::get_row 0 2 1203 1204 638
// these versions inline better

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_row
//       Access: Published
//  Description: Returns the indicated row of the matrix as a
//               three-component vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_row
//       Access: Published
//  Description: Stores the indicated row of the matrix as a
//               three-component vector.
////////////////////////////////////////////////////////////////////
123
inline LVecBase3f LMatrix3f::get_row(int row) const;
inline void LMatrix3f::get_row(LVecBase3f &result_vec, int row) const;

2959 7 get_col 0 4 3486 18 LMatrix3f::get_col 0 1 1205 305
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_col
//       Access: Published
//  Description: Returns the indicated column of the matrix as a
//               three-component vector.
////////////////////////////////////////////////////////////////////
52
inline LVecBase3f LMatrix3f::get_col(int col) const;

2960 8 get_row2 0 4 3486 19 LMatrix3f::get_row2 0 1 1206 327
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_row2
//       Access: Published
//  Description: Returns the indicated row of the matrix as a
//               two-component vector, ignoring the last column.
////////////////////////////////////////////////////////////////////
53
inline LVecBase2f LMatrix3f::get_row2(int row) const;

2961 8 get_col2 0 4 3486 19 LMatrix3f::get_col2 0 1 1207 327
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_col2
//       Access: Published
//  Description: Returns the indicated column of the matrix as a
//               two-component vector, ignoring the last row.
////////////////////////////////////////////////////////////////////
53
inline LVecBase2f LMatrix3f::get_col2(int col) const;

2962 11 operator () 0 4 3486 22 LMatrix3f::operator () 0 2 1208 1209 226
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Indexing operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
116
inline float &LMatrix3f::operator ()(int row, int col);
inline float LMatrix3f::operator ()(int row, int col) const;

2963 11 operator [] 0 4 3486 22 LMatrix3f::operator [] 0 2 1210 1211 0
112
inline LMatrix3f::CRow LMatrix3f::operator [](int i) const;
inline LMatrix3f::Row LMatrix3f::operator [](int i);

2964 4 size 0 4 3486 15 LMatrix3f::size 0 1 1212 266
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::size
//       Access: Published, Static
//  Description: Returns 3: the number of rows of a LMatrix3.
////////////////////////////////////////////////////////////////////
40
static inline int LMatrix3f::size(void);

2965 6 is_nan 0 4 3486 17 LMatrix3f::is_nan 0 1 1213 310
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::is_nan
//       Access: Published
//  Description: Returns true if any component of the matrix is
//               not-a-number, false otherwise.
////////////////////////////////////////////////////////////////////
42
inline bool LMatrix3f::is_nan(void) const;

2966 11 is_identity 0 4 3486 22 LMatrix3f::is_identity 0 1 1214 314
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::is_identity
//       Access: Public
//  Description: Returns true if this is (close enough to) the
//               identity matrix, false otherwise.
////////////////////////////////////////////////////////////////////
47
inline bool LMatrix3f::is_identity(void) const;

2967 8 get_cell 0 4 3486 19 LMatrix3f::get_cell 0 1 1215 261
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_cell
//       Access: Published
//  Description: Returns a particular element of the matrix.
////////////////////////////////////////////////////////////////////
57
inline float LMatrix3f::get_cell(int row, int col) const;

2968 8 set_cell 0 4 3486 19 LMatrix3f::set_cell 0 1 1216 261
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set_cell
//       Access: Published
//  Description: Changes a particular element of the matrix.
////////////////////////////////////////////////////////////////////
63
inline void LMatrix3f::set_cell(int row, int col, float value);

2969 8 get_data 0 4 3486 19 LMatrix3f::get_data 0 1 1217 401
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_data
//       Access: Published
//  Description: Returns the address of the first of the nine data
//               elements in the matrix.  The remaining elements
//               occupy the next eight positions in row-major order.
////////////////////////////////////////////////////////////////////
52
inline float const *LMatrix3f::get_data(void) const;

2970 18 get_num_components 0 4 3486 29 LMatrix3f::get_num_components 0 1 1218 279
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_num_components
//       Access: Published
//  Description: Returns the number of elements in the matrix, nine.
////////////////////////////////////////////////////////////////////
53
inline int LMatrix3f::get_num_components(void) const;

2971 10 operator < 0 4 3486 21 LMatrix3f::operator < 0 1 1219 0
64
inline bool LMatrix3f::operator <(LMatrix3f const &other) const;

2972 11 operator == 0 4 3486 22 LMatrix3f::operator == 0 1 1220 0
65
inline bool LMatrix3f::operator ==(LMatrix3f const &other) const;

2973 11 operator != 0 4 3486 22 LMatrix3f::operator != 0 1 1221 0
65
inline bool LMatrix3f::operator !=(LMatrix3f const &other) const;

2974 10 compare_to 0 4 3486 21 LMatrix3f::compare_to 0 2 1222 1223 826
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::compare_to
//       Access: Published
//  Description: This flavor of compare_to uses a default threshold
//               value based on the numeric type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::compare_to
//       Access: Published
//  Description: Sorts matrices lexicographically, componentwise.
//               Returns a number less than 0 if this matrix sorts
//               before the other one, greater than zero if it sorts
//               after, 0 if they are equivalent (within the indicated
//               tolerance).
////////////////////////////////////////////////////////////////////
137
inline int LMatrix3f::compare_to(LMatrix3f const &other) const;
int LMatrix3f::compare_to(LMatrix3f const &other, float threshold) const;

2975 8 get_hash 0 4 3486 19 LMatrix3f::get_hash 0 2 1224 1225 514
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////
104
inline size_t LMatrix3f::get_hash(void) const;
inline size_t LMatrix3f::get_hash(float threshold) const;

2976 8 add_hash 0 4 3486 19 LMatrix3f::add_hash 0 2 1226 1227 514
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////
124
inline size_t LMatrix3f::add_hash(size_t hash) const;
inline size_t LMatrix3f::add_hash(size_t hash, float threshold) const;

2977 5 xform 0 4 3486 16 LMatrix3f::xform 0 1 1228 256
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform
//       Access: Published
//  Description: 3-component vector or point times matrix.
////////////////////////////////////////////////////////////////////
62
inline LVecBase3f LMatrix3f::xform(LVecBase3f const &v) const;

2978 11 xform_point 0 4 3486 22 LMatrix3f::xform_point 0 1 1229 403
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_point
//       Access: Published
//  Description: The matrix transforms a 2-component point (including
//               translation component) and returns the result.  This
//               assumes the matrix is an affine transform.
////////////////////////////////////////////////////////////////////
68
inline LVecBase2f LMatrix3f::xform_point(LVecBase2f const &v) const;

2979 9 xform_vec 0 4 3486 20 LMatrix3f::xform_vec 0 2 1230 1231 849
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_vec
//       Access: Published
//  Description: The matrix transforms a 2-component vector (without
//               translation component) and returns the result.  This
//               assumes the matrix is an affine transform.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_vec
//       Access: Published
//  Description: The matrix transforms a 3-component vector and
//               returns the result.  This assumes the matrix is an
//               orthonormal transform.
//
//               In practice, this is the same computation as xform().
////////////////////////////////////////////////////////////////////
133
inline LVecBase2f LMatrix3f::xform_vec(LVecBase2f const &v) const;
inline LVecBase3f LMatrix3f::xform_vec(LVecBase3f const &v) const;

2980 17 xform_vec_general 0 4 3486 28 LMatrix3f::xform_vec_general 0 1 1232 389
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_vec_general
//       Access: Published
//  Description: The matrix transforms a 3-component vector (without
//               translation component) and returns the result, as a
//               fully general operation.
////////////////////////////////////////////////////////////////////
74
inline LVecBase3f LMatrix3f::xform_vec_general(LVecBase3f const &v) const;

2981 14 xform_in_place 0 4 3486 25 LMatrix3f::xform_in_place 0 1 1233 265
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_in_place
//       Access: Published
//  Description: 3-component vector or point times matrix.
////////////////////////////////////////////////////////////////////
59
inline void LMatrix3f::xform_in_place(LVecBase3f &v) const;

2982 20 xform_point_in_place 0 4 3486 31 LMatrix3f::xform_point_in_place 0 1 1234 389
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_point_in_place
//       Access: Published
//  Description: The matrix transforms a 2-component point (including
//               translation component).  This assumes the matrix is
//               an affine transform.
////////////////////////////////////////////////////////////////////
65
inline void LMatrix3f::xform_point_in_place(LVecBase2f &v) const;

2983 18 xform_vec_in_place 0 4 3486 29 LMatrix3f::xform_vec_in_place 0 2 1235 1236 804
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_vec_in_place
//       Access: Published
//  Description: The matrix transforms a 2-component vector (without
//               translation component).  This assumes the matrix is
//               an affine transform.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_vec_in_place
//       Access: Published
//  Description: The matrix transforms a 3-component vector.  This
//               assumes the matrix is an orthonormal transform.
//
//               In practice, this is the same computation as xform().
////////////////////////////////////////////////////////////////////
127
inline void LMatrix3f::xform_vec_in_place(LVecBase2f &v) const;
inline void LMatrix3f::xform_vec_in_place(LVecBase3f &v) const;

2984 26 xform_vec_general_in_place 0 4 3486 37 LMatrix3f::xform_vec_general_in_place 0 1 1237 358
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_vec_general_in_place
//       Access: Published
//  Description: The matrix transforms a 3-component vector (without
//               translation component), as a fully general operation.
////////////////////////////////////////////////////////////////////
71
inline void LMatrix3f::xform_vec_general_in_place(LVecBase3f &v) const;

2985 8 multiply 0 4 3486 19 LMatrix3f::multiply 0 1 1238 52
// this = other1 * other2

// this = other1 * other2
82
inline void LMatrix3f::multiply(LMatrix3f const &other1, LMatrix3f const &other2);

2986 10 operator * 0 4 3486 21 LMatrix3f::operator * 0 2 1239 1240 0
129
inline LMatrix3f LMatrix3f::operator *(LMatrix3f const &other) const;
inline LMatrix3f LMatrix3f::operator *(float scalar) const;

2987 10 operator / 0 4 3486 21 LMatrix3f::operator / 0 1 1241 0
59
inline LMatrix3f LMatrix3f::operator /(float scalar) const;

2988 11 operator += 0 4 3486 22 LMatrix3f::operator += 0 1 1242 278
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix += matrix
//       Access: Published
//  Description: Performs a memberwise addition between two matrices.
////////////////////////////////////////////////////////////////////
65
inline LMatrix3f &LMatrix3f::operator +=(LMatrix3f const &other);

2989 11 operator -= 0 4 3486 22 LMatrix3f::operator -= 0 1 1243 281
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix -= matrix
//       Access: Published
//  Description: Performs a memberwise subtraction between two matrices.
////////////////////////////////////////////////////////////////////
65
inline LMatrix3f &LMatrix3f::operator -=(LMatrix3f const &other);

2990 11 operator *= 0 4 3486 22 LMatrix3f::operator *= 0 2 1244 1245 481
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix *= matrix
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix *= scalar
//       Access: Published
//  Description: Performs a memberwise scale.
////////////////////////////////////////////////////////////////////
121
inline LMatrix3f &LMatrix3f::operator *=(LMatrix3f const &other);
inline LMatrix3f &LMatrix3f::operator *=(float scalar);

2991 11 operator /= 0 4 3486 22 LMatrix3f::operator /= 0 1 1246 254
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix /= scalar
//       Access: Published
//  Description: Performs a memberwise scale.
////////////////////////////////////////////////////////////////////
55
inline LMatrix3f &LMatrix3f::operator /=(float scalar);

2992 18 componentwise_mult 0 4 3486 29 LMatrix3f::componentwise_mult 0 1 1247 227
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::componentwise_mult
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
66
inline void LMatrix3f::componentwise_mult(LMatrix3f const &other);

2993 11 determinant 0 4 3486 22 LMatrix3f::determinant 0 1 1248 259
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::determinant
//       Access: Published
//  Description: Returns the determinant of the matrix.
////////////////////////////////////////////////////////////////////
48
inline float LMatrix3f::determinant(void) const;

2994 14 transpose_from 0 4 3486 25 LMatrix3f::transpose_from 0 1 1249 223
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::transpose_from
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
62
inline void LMatrix3f::transpose_from(LMatrix3f const &other);

2995 18 transpose_in_place 0 4 3486 29 LMatrix3f::transpose_in_place 0 1 1250 227
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::transpose_in_place
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
48
inline void LMatrix3f::transpose_in_place(void);

2996 11 invert_from 0 4 3486 22 LMatrix3f::invert_from 0 1 1251 808
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::invert_from
//       Access: Published
//  Description: Computes the inverse of the other matrix, and stores
//               the result in this matrix.  This is a fully general
//               operation and makes no assumptions about the type of
//               transform represented by the matrix.
//
//               The other matrix must be a different object than this
//               matrix.  However, if you need to invert a matrix in
//               place, see invert_in_place.
//
//               The return value is true if the matrix was
//               successfully inverted, false if there was a
//               singularity.
////////////////////////////////////////////////////////////////////
59
inline bool LMatrix3f::invert_from(LMatrix3f const &other);

2997 15 invert_in_place 0 4 3486 26 LMatrix3f::invert_in_place 0 1 1252 364
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::invert_in_place
//       Access: Published
//  Description: Inverts the current matrix.  Returns true if the
//               inverse is successful, false if the matrix was
//               singular.
////////////////////////////////////////////////////////////////////
45
inline bool LMatrix3f::invert_in_place(void);

2998 21 invert_transpose_from 0 4 3486 32 LMatrix3f::invert_transpose_from 0 2 1253 1254 698
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::invert_transpose_from
//       Access: Published
//  Description: Simultaneously computes the inverse of the indicated
//               matrix, and then the transpose of that inverse.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::invert_transpose_from
//       Access: Published
//  Description: Simultaneously computes the inverse of the indicated
//               matrix, and then the transpose of that inverse.
////////////////////////////////////////////////////////////////////
139
inline bool LMatrix3f::invert_transpose_from(LMatrix3f const &other);
inline bool LMatrix3f::invert_transpose_from(LMatrix4f const &other);

2999 9 ident_mat 0 4 3486 20 LMatrix3f::ident_mat 0 1 1255 391
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::ident_mat
//       Access: Published, Static
//  Description: Returns an identity matrix.
//
//               This function definition must appear first, since
//               some inline functions below take advantage of it.
////////////////////////////////////////////////////////////////////
58
static inline LMatrix3f const &LMatrix3f::ident_mat(void);

3000 17 set_translate_mat 0 4 3486 28 LMatrix3f::set_translate_mat 0 1 1256 306
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_translate_mat
//       Access: Published
//  Description: Fills mat with a matrix that applies the indicated
//               translation.
////////////////////////////////////////////////////////////////////
66
inline void LMatrix3f::set_translate_mat(LVecBase2f const &trans);

3001 14 set_rotate_mat 0 4 3486 25 LMatrix3f::set_rotate_mat 0 2 1257 1258 694
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_rotate_mat
//       Access: Published
//  Description: Fills mat with a matrix that rotates by the given
//               angle in degrees counterclockwise.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_rotate_mat
//       Access: Published
//  Description: Fills mat with a matrix that rotates by the given
//               angle in degrees counterclockwise about the indicated
//               vector.
////////////////////////////////////////////////////////////////////
156
inline void LMatrix3f::set_rotate_mat(float angle);
void LMatrix3f::set_rotate_mat(float angle, LVecBase3f const &axis, CoordinateSystem cs = ::CS_default);

3002 13 set_scale_mat 0 4 3486 24 LMatrix3f::set_scale_mat 0 2 1259 1260 644
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_scale_mat
//       Access: Published
//  Description: Fills mat with a matrix that applies the indicated
//               scale in each of the two axes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_scale_mat
//       Access: Published
//  Description: Fills mat with a matrix that applies the indicated
//               scale in each of the three axes.
////////////////////////////////////////////////////////////////////
125
inline void LMatrix3f::set_scale_mat(LVecBase2f const &scale);
inline void LMatrix3f::set_scale_mat(LVecBase3f const &scale);

3003 13 translate_mat 0 4 3486 24 LMatrix3f::translate_mat 0 2 1261 1262 608
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::translate_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               translation.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::translate_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               translation.
////////////////////////////////////////////////////////////////////
144
static inline LMatrix3f LMatrix3f::translate_mat(LVecBase2f const &trans);
static inline LMatrix3f LMatrix3f::translate_mat(float tx, float ty);

3004 10 rotate_mat 0 4 3486 21 LMatrix3f::rotate_mat 0 2 1263 1264 671
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat
//       Access: Published, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat
//       Access: Published, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise about the indicated vector.
////////////////////////////////////////////////////////////////////
179
static inline LMatrix3f LMatrix3f::rotate_mat(float angle);
static inline LMatrix3f LMatrix3f::rotate_mat(float angle, LVecBase3f const &axis, CoordinateSystem cs = ::CS_default);

3005 9 scale_mat 0 4 3486 20 LMatrix3f::scale_mat 0 4 1265 1266 1267 1268 1278
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the two axes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the two axes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the three axes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the three axes.
////////////////////////////////////////////////////////////////////
283
static inline LMatrix3f LMatrix3f::scale_mat(LVecBase2f const &scale);
static inline LMatrix3f LMatrix3f::scale_mat(float sx, float sy);
static inline LMatrix3f LMatrix3f::scale_mat(LVecBase3f const &scale);
static inline LMatrix3f LMatrix3f::scale_mat(float sx, float sy, float sz);

3006 23 set_rotate_mat_normaxis 0 4 3486 34 LMatrix3f::set_rotate_mat_normaxis 0 1 1269 412
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_rotate_mat_normaxis
//       Access: Published
//  Description: Fills mat with a matrix that rotates by the given
//               angle in degrees counterclockwise about the indicated
//               vector.  Assumes axis has been normalized.
////////////////////////////////////////////////////////////////////
113
void LMatrix3f::set_rotate_mat_normaxis(float angle, LVecBase3f const &axis, CoordinateSystem cs = ::CS_default);

3007 19 rotate_mat_normaxis 0 4 3486 30 LMatrix3f::rotate_mat_normaxis 0 1 1270 408
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat_normaxis
//       Access: Published, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise about the indicated vector.
//               Assumes axis has been normalized.
////////////////////////////////////////////////////////////////////
128
static inline LMatrix3f LMatrix3f::rotate_mat_normaxis(float angle, LVecBase3f const &axis, CoordinateSystem cs = ::CS_default);

3008 13 set_shear_mat 0 4 3486 24 LMatrix3f::set_shear_mat 0 1 1271 324
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_shear_mat
//       Access: Published
//  Description: Fills mat with a matrix that applies the indicated
//               shear in each of the three planes.
////////////////////////////////////////////////////////////////////
98
inline void LMatrix3f::set_shear_mat(LVecBase3f const &shear, CoordinateSystem cs = ::CS_default);

3009 9 shear_mat 0 4 3486 20 LMatrix3f::shear_mat 0 2 1272 1273 644
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::shear_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               shear in each of the three planes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::shear_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               shear in each of the three planes.
////////////////////////////////////////////////////////////////////
224
static inline LMatrix3f LMatrix3f::shear_mat(LVecBase3f const &shear, CoordinateSystem cs = ::CS_default);
static inline LMatrix3f LMatrix3f::shear_mat(float shxy, float shxz, float shyz, CoordinateSystem cs = ::CS_default);

3010 19 set_scale_shear_mat 0 4 3486 30 LMatrix3f::set_scale_shear_mat 0 1 1274 312
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_scale_shear_mat
//       Access: Published
//  Description: Fills mat with a matrix that applies the indicated
//               scale and shear.
////////////////////////////////////////////////////////////////////
122
void LMatrix3f::set_scale_shear_mat(LVecBase3f const &scale, LVecBase3f const &shear, CoordinateSystem cs = ::CS_default);

3011 15 scale_shear_mat 0 4 3486 26 LMatrix3f::scale_shear_mat 0 2 1275 1276 620
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_shear_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               scale and shear.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_shear_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               scale and shear.
////////////////////////////////////////////////////////////////////
291
static inline LMatrix3f LMatrix3f::scale_shear_mat(LVecBase3f const &scale, LVecBase3f const &shear, CoordinateSystem cs = ::CS_default);
static inline LMatrix3f LMatrix3f::scale_shear_mat(float sx, float sy, float sz, float shxy, float shxz, float shyz, CoordinateSystem cs = ::CS_default);

3012 11 convert_mat 0 4 3486 22 LMatrix3f::convert_mat 0 1 1277 350
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::convert_mat
//       Access: Published, Static
//  Description: Returns a matrix that transforms from the indicated
//               coordinate system to the indicated coordinate system.
////////////////////////////////////////////////////////////////////
91
static LMatrix3f const &LMatrix3f::convert_mat(CoordinateSystem from, CoordinateSystem to);

3013 12 almost_equal 0 4 3486 23 LMatrix3f::almost_equal 0 2 1278 1279 662
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::almost_equal
//       Access: Published
//  Description: Returns true if two matrices are memberwise equal
//               within a default tolerance based on the numeric type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::almost_equal
//       Access: Published
//  Description: Returns true if two matrices are memberwise equal
//               within a specified tolerance.
////////////////////////////////////////////////////////////////////
143
bool LMatrix3f::almost_equal(LMatrix3f const &other, float threshold) const;
inline bool LMatrix3f::almost_equal(LMatrix3f const &other) const;

3014 6 output 0 4 3486 17 LMatrix3f::output 0 1 1280 215
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::output
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
43
void LMatrix3f::output(ostream &out) const;

3015 5 write 0 4 3486 16 LMatrix3f::write 0 1 1281 214
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::write
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
64
void LMatrix3f::write(ostream &out, int indent_level = 0) const;

3016 8 __repr__ 0 4 3486 19 LMatrix3f::__repr__ 0 1 1282 0
46
inline string LMatrix3f::__repr__(void) const;

3017 13 generate_hash 0 4 3486 24 LMatrix3f::generate_hash 0 2 1283 1284 544
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::generate_hash
//       Access: Published
//  Description: Adds the vector to the indicated hash generator.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::generate_hash
//       Access: Published
//  Description: Adds the vector to the indicated hash generator.
////////////////////////////////////////////////////////////////////
161
inline void LMatrix3f::generate_hash(ChecksumHashGenerator &hashgen) const;
void LMatrix3f::generate_hash(ChecksumHashGenerator &hashgen, float threshold) const;

3018 20 write_datagram_fixed 0 4 3486 31 LMatrix3f::write_datagram_fixed 0 1 1285 641
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::write_datagram_fixed
//       Access: Published
//  Description: Writes the matrix to the Datagram using add_float32()
//               or add_float64(), depending on the type of floats in
//               the matrix, regardless of the setting of
//               Datagram::set_stdfloat_double().  This is appropriate
//               when you want to write a fixed-width value to the
//               datagram, especially when you are not writing a bam
//               file.
////////////////////////////////////////////////////////////////////
66
void LMatrix3f::write_datagram_fixed(Datagram &destination) const;

3019 19 read_datagram_fixed 0 4 3486 30 LMatrix3f::read_datagram_fixed 0 1 1286 347
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::read_datagram_fixed
//       Access: Published
//  Description: Reads the matrix from the Datagram using get_float32()
//               or get_float64().  See write_datagram_fixed().
////////////////////////////////////////////////////////////////////
60
void LMatrix3f::read_datagram_fixed(DatagramIterator &scan);

3020 14 write_datagram 0 4 3486 25 LMatrix3f::write_datagram 0 1 1287 463
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::write_datagram
//       Access: Published
//  Description: Writes the matrix to the Datagram using
//               add_stdfloat().  This is appropriate when you want to
//               write the matrix using the standard width setting,
//               especially when you are writing a bam file.
////////////////////////////////////////////////////////////////////
60
void LMatrix3f::write_datagram(Datagram &destination) const;

3021 13 read_datagram 0 4 3486 24 LMatrix3f::read_datagram 0 1 1288 279
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::read_datagram
//       Access: Published
//  Description: Reads the matrix from the Datagram using get_stdfloat().
////////////////////////////////////////////////////////////////////
56
void LMatrix3f::read_datagram(DatagramIterator &source);

3022 14 get_class_type 0 4 3486 25 LMatrix3f::get_class_type 0 1 1289 0
50
static TypeHandle LMatrix3f::get_class_type(void);

3023 10 ~LMatrix3f 0 4 3486 21 LMatrix3f::~LMatrix3f 0 0 0
28
LMatrix3f::~LMatrix3f(void);

3024 9 transpose 0 1 0 9 transpose 0 4 1829 1830 1831 1832 0
191
inline LMatrix3f transpose(LMatrix3f const &a);
inline LMatrix4f transpose(LMatrix4f const &a);
inline LMatrix3d transpose(LMatrix3d const &a);
inline LMatrix4d transpose(LMatrix4d const &a);

3025 6 invert 0 1 0 6 invert 0 6 1833 1834 1835 1836 1837 1838 0
281
inline LMatrix3f invert(LMatrix3f const &a);
inline LMatrix4f invert(LMatrix4f const &a);
inline LMatrix3d invert(LMatrix3d const &a);
inline LMatrix4d invert(LMatrix4d const &a);
inline LQuaternionf invert(LQuaternionf const &a);
inline LQuaterniond invert(LQuaterniond const &a);

3026 11 operator [] 0 4 3492 27 LMatrix4f::Row::operator [] 0 2 1405 1406 225
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Row::operator []
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
104
inline float LMatrix4f::Row::operator [](int i) const;
inline float &LMatrix4f::Row::operator [](int i);

3027 4 size 0 4 3492 20 LMatrix4f::Row::size 0 1 1407 271
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Row::size
//       Access: Public, Static
//  Description: Returns 4: the number of columns of a LMatrix4.
////////////////////////////////////////////////////////////////////
45
static inline int LMatrix4f::Row::size(void);

3028 4 ~Row 0 4 3492 20 LMatrix4f::Row::~Row 0 0 0
27
LMatrix4f::Row::~Row(void);

3029 11 operator [] 0 4 3493 28 LMatrix4f::CRow::operator [] 0 1 1408 0
55
inline float LMatrix4f::CRow::operator [](int i) const;

3030 4 size 0 4 3493 21 LMatrix4f::CRow::size 0 1 1409 272
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::CRow::size
//       Access: Public, Static
//  Description: Returns 4: the number of columns of a LMatrix4.
////////////////////////////////////////////////////////////////////
46
static inline int LMatrix4f::CRow::size(void);

3031 5 ~CRow 0 4 3493 22 LMatrix4f::CRow::~CRow 0 0 0
29
LMatrix4f::CRow::~CRow(void);

3032 9 LMatrix4f 0 4 3490 20 LMatrix4f::LMatrix4f 0 6 1295 1296 1297 1298 1299 1300 1469
// Construct a 4x4 matrix given a 3x3 rotation matrix and an optional
// translation component.

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Constructor, upper 3x3
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Constructor, upper 3x3 plus translation
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
487
inline LMatrix4f::LMatrix4f(void);
inline LMatrix4f::LMatrix4f(LMatrix4f const &other);
inline LMatrix4f::LMatrix4f(UnalignedLMatrix4f const &other);
inline LMatrix4f::LMatrix4f(float e00, float e01, float e02, float e03, float e10, float e11, float e12, float e13, float e20, float e21, float e22, float e23, float e30, float e31, float e32, float e33);
inline LMatrix4f::LMatrix4f(LMatrix3f const &upper3);
inline LMatrix4f::LMatrix4f(LMatrix3f const &upper3, LVecBase3f const &trans);

3033 10 operator = 0 4 3490 21 LMatrix4f::operator = 0 3 1301 1302 1303 697
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Copy Assignment Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Fill Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
197
inline LMatrix4f &LMatrix4f::operator =(LMatrix4f const &other);
inline LMatrix4f &LMatrix4f::operator =(UnalignedLMatrix4f const &other);
inline LMatrix4f &LMatrix4f::operator =(float fill_value);

3034 12 operator new 0 4 3490 23 LMatrix4f::operator new 0 1 1304 0
112
inline void *LMatrix4f::operator new(size_t size);
inline void *LMatrix4f::operator new(size_t size, void *ptr);

3035 15 operator delete 0 4 3490 26 LMatrix4f::operator delete 0 0 0
106
inline void LMatrix4f::operator delete(void *ptr);
inline void LMatrix4f::operator delete(void *, void *);

3036 12 validate_ptr 0 4 3490 23 LMatrix4f::validate_ptr 0 0 0
60
static inline bool LMatrix4f::validate_ptr(void const *ptr);

3037 10 __reduce__ 0 4 3490 21 LMatrix4f::__reduce__ 0 1 1305 0
61
inline PyObject *LMatrix4f::__reduce__(PyObject *self) const;

3038 4 fill 0 4 3490 15 LMatrix4f::fill 0 1 1306 388
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::fill
//       Access: Public
//  Description: Sets each element of the matrix to the indicated
//               fill_value.  This is of questionable value, but is
//               sometimes useful when initializing to zero.
////////////////////////////////////////////////////////////////////
46
inline void LMatrix4f::fill(float fill_value);

3039 3 set 0 4 3490 14 LMatrix4f::set 0 1 1307 209
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
203
inline void LMatrix4f::set(float e00, float e01, float e02, float e03, float e10, float e11, float e12, float e13, float e20, float e21, float e22, float e23, float e30, float e31, float e32, float e33);

3040 11 set_upper_3 0 4 3490 22 LMatrix4f::set_upper_3 0 1 1308 294
// Get and set the upper 3x3 rotation matrix.

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_upper_3
//       Access: Public
//  Description: Sets the upper 3x3 submatrix.
////////////////////////////////////////////////////////////////////
60
inline void LMatrix4f::set_upper_3(LMatrix3f const &upper3);

3041 11 get_upper_3 0 4 3490 22 LMatrix4f::get_upper_3 0 1 1309 252
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_upper_3
//       Access: Public
//  Description: Retrieves the upper 3x3 submatrix.
////////////////////////////////////////////////////////////////////
52
inline LMatrix3f LMatrix4f::get_upper_3(void) const;

3042 7 set_row 0 4 3490 18 LMatrix4f::set_row 0 2 1310 1311 610
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_row
//       Access: Public
//  Description: Replaces the indicated row of the matrix.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_row
//       Access: Public
//  Description: Replaces the indicated row of the matrix with the
//               indicated 3-component vector, ignoring the last
//               column.
////////////////////////////////////////////////////////////////////
123
inline void LMatrix4f::set_row(int row, LVecBase4f const &v);
inline void LMatrix4f::set_row(int row, LVecBase3f const &v);

3043 7 set_col 0 4 3490 18 LMatrix4f::set_col 0 2 1312 1313 613
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_col
//       Access: Public
//  Description: Replaces the indicated column of the matrix.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_col
//       Access: Public
//  Description: Replaces the indicated column of the matrix with the
//               indicated 3-component vector, ignoring the last
//               row.
////////////////////////////////////////////////////////////////////
123
inline void LMatrix4f::set_col(int col, LVecBase4f const &v);
inline void LMatrix4f::set_col(int col, LVecBase3f const &v);

3044 7 get_row 0 4 3490 18 LMatrix4f::get_row 0 2 1314 1315 626
// these versions inline better

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_row
//       Access: Public
//  Description: Retrieves the indicated row of the matrix as a
//               4-component vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_row
//       Access: Public
//  Description: Stores the indicated row of the matrix as a
//               4-component vector.
////////////////////////////////////////////////////////////////////
123
inline LVecBase4f LMatrix4f::get_row(int row) const;
inline void LMatrix4f::get_row(LVecBase4f &result_vec, int row) const;

3045 7 get_col 0 4 3490 18 LMatrix4f::get_col 0 1 1316 300
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_col
//       Access: Public
//  Description: Retrieves the indicated column of the matrix as a
//               4-component vector.
////////////////////////////////////////////////////////////////////
52
inline LVecBase4f LMatrix4f::get_col(int col) const;

3046 8 get_row3 0 4 3490 19 LMatrix4f::get_row3 0 2 1317 1318 641
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_row3
//       Access: Public
//  Description: Retrieves the row column of the matrix as a
//               3-component vector, ignoring the last column.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_row3
//       Access: Public
//  Description: Stores the row column of the matrix as a
//               3-component vector, ignoring the last column.
////////////////////////////////////////////////////////////////////
125
inline LVecBase3f LMatrix4f::get_row3(int row) const;
inline void LMatrix4f::get_row3(LVecBase3f &result_vec, int row) const;

3047 8 get_col3 0 4 3490 19 LMatrix4f::get_col3 0 1 1319 324
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_col3
//       Access: Public
//  Description: Retrieves the indicated column of the matrix as a
//               3-component vector, ignoring the last row.
////////////////////////////////////////////////////////////////////
53
inline LVecBase3f LMatrix4f::get_col3(int col) const;

3048 11 operator () 0 4 3490 22 LMatrix4f::operator () 0 2 1320 1321 223
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Indexing operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
116
inline float &LMatrix4f::operator ()(int row, int col);
inline float LMatrix4f::operator ()(int row, int col) const;

3049 11 operator [] 0 4 3490 22 LMatrix4f::operator [] 0 2 1322 1323 0
112
inline LMatrix4f::CRow LMatrix4f::operator [](int i) const;
inline LMatrix4f::Row LMatrix4f::operator [](int i);

3050 4 size 0 4 3490 15 LMatrix4f::size 0 1 1324 263
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::size
//       Access: Public, Static
//  Description: Returns 4: the number of rows of a LMatrix4.
////////////////////////////////////////////////////////////////////
40
static inline int LMatrix4f::size(void);

3051 6 is_nan 0 4 3490 17 LMatrix4f::is_nan 0 1 1325 307
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::is_nan
//       Access: Public
//  Description: Returns true if any component of the matrix is
//               not-a-number, false otherwise.
////////////////////////////////////////////////////////////////////
42
inline bool LMatrix4f::is_nan(void) const;

3052 11 is_identity 0 4 3490 22 LMatrix4f::is_identity 0 1 1326 314
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::is_identity
//       Access: Public
//  Description: Returns true if this is (close enough to) the
//               identity matrix, false otherwise.
////////////////////////////////////////////////////////////////////
47
inline bool LMatrix4f::is_identity(void) const;

3053 8 get_cell 0 4 3490 19 LMatrix4f::get_cell 0 1 1327 258
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_cell
//       Access: Public
//  Description: Returns a particular element of the matrix.
////////////////////////////////////////////////////////////////////
57
inline float LMatrix4f::get_cell(int row, int col) const;

3054 8 set_cell 0 4 3490 19 LMatrix4f::set_cell 0 1 1328 258
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_cell
//       Access: Public
//  Description: Changes a particular element of the matrix.
////////////////////////////////////////////////////////////////////
63
inline void LMatrix4f::set_cell(int row, int col, float value);

3055 8 get_data 0 4 3490 19 LMatrix4f::get_data 0 1 1329 398
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_data
//       Access: Public
//  Description: Returns the address of the first of the nine data
//               elements in the matrix.  The remaining elements
//               occupy the next eight positions in row-major order.
////////////////////////////////////////////////////////////////////
52
inline float const *LMatrix4f::get_data(void) const;

3056 18 get_num_components 0 4 3490 29 LMatrix4f::get_num_components 0 1 1330 274
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_num_components
//       Access: Public
//  Description: Returns the number of elements in the matrix, 16.
////////////////////////////////////////////////////////////////////
53
inline int LMatrix4f::get_num_components(void) const;

3057 5 begin 0 4 3490 16 LMatrix4f::begin 0 2 1331 1332 634
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::begin
//       Access: Public
//  Description: Returns an iterator that may be used to traverse the
//               elements of the matrix, STL-style.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::begin
//       Access: Public
//  Description: Returns an iterator that may be used to traverse the
//               elements of the matrix, STL-style.
////////////////////////////////////////////////////////////////////
113
inline LMatrix4f::iterator LMatrix4f::begin(void);
inline LMatrix4f::const_iterator LMatrix4f::begin(void) const;

3058 3 end 0 4 3490 14 LMatrix4f::end 0 2 1333 1334 630
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::end
//       Access: Public
//  Description: Returns an iterator that may be used to traverse the
//               elements of the matrix, STL-style.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::end
//       Access: Public
//  Description: Returns an iterator that may be used to traverse the
//               elements of the matrix, STL-style.
////////////////////////////////////////////////////////////////////
109
inline LMatrix4f::iterator LMatrix4f::end(void);
inline LMatrix4f::const_iterator LMatrix4f::end(void) const;

3059 10 operator < 0 4 3490 21 LMatrix4f::operator < 0 1 1335 0
64
inline bool LMatrix4f::operator <(LMatrix4f const &other) const;

3060 11 operator == 0 4 3490 22 LMatrix4f::operator == 0 1 1336 0
65
inline bool LMatrix4f::operator ==(LMatrix4f const &other) const;

3061 11 operator != 0 4 3490 22 LMatrix4f::operator != 0 1 1337 0
65
inline bool LMatrix4f::operator !=(LMatrix4f const &other) const;

3062 10 compare_to 0 4 3490 21 LMatrix4f::compare_to 0 2 1338 1339 820
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::compare_to
//       Access: Public
//  Description: This flavor of compare_to uses a default threshold
//               value based on the numeric type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::compare_to
//       Access: Public
//  Description: Sorts matrices lexicographically, componentwise.
//               Returns a number less than 0 if this matrix sorts
//               before the other one, greater than zero if it sorts
//               after, 0 if they are equivalent (within the indicated
//               tolerance).
////////////////////////////////////////////////////////////////////
137
inline int LMatrix4f::compare_to(LMatrix4f const &other) const;
int LMatrix4f::compare_to(LMatrix4f const &other, float threshold) const;

3063 8 get_hash 0 4 3490 19 LMatrix4f::get_hash 0 2 1340 1341 508
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_hash
//       Access: Public
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_hash
//       Access: Public
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////
104
inline size_t LMatrix4f::get_hash(void) const;
inline size_t LMatrix4f::get_hash(float threshold) const;

3064 8 add_hash 0 4 3490 19 LMatrix4f::add_hash 0 2 1342 1343 508
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::add_hash
//       Access: Public
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::add_hash
//       Access: Public
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////
124
inline size_t LMatrix4f::add_hash(size_t hash) const;
inline size_t LMatrix4f::add_hash(size_t hash, float threshold) const;

3065 5 xform 0 4 3490 16 LMatrix4f::xform 0 1 1344 306
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform
//       Access: Public
//  Description: 4-component vector or point times matrix.  This is a
//               fully general operation.
////////////////////////////////////////////////////////////////////
62
inline LVecBase4f LMatrix4f::xform(LVecBase4f const &v) const;

3066 11 xform_point 0 4 3490 22 LMatrix4f::xform_point 0 1 1345 400
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_point
//       Access: Public
//  Description: The matrix transforms a 3-component point (including
//               translation component) and returns the result.  This
//               assumes the matrix is an affine transform.
////////////////////////////////////////////////////////////////////
68
inline LVecBase3f LMatrix4f::xform_point(LVecBase3f const &v) const;

3067 19 xform_point_general 0 4 3490 30 LMatrix4f::xform_point_general 0 1 1346 389
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_point_general
//       Access: Public
//  Description: The matrix transforms a 3-component point (including
//               translation component) and returns the result, as a
//               fully general operation.
////////////////////////////////////////////////////////////////////
76
inline LVecBase3f LMatrix4f::xform_point_general(LVecBase3f const &v) const;

3068 9 xform_vec 0 4 3490 20 LMatrix4f::xform_vec 0 1 1347 402
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_vec
//       Access: Public
//  Description: The matrix transforms a 3-component vector (without
//               translation component) and returns the result.  This
//               assumes the matrix is an orthonormal transform.
////////////////////////////////////////////////////////////////////
66
inline LVecBase3f LMatrix4f::xform_vec(LVecBase3f const &v) const;

3069 17 xform_vec_general 0 4 3490 28 LMatrix4f::xform_vec_general 0 1 1348 386
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_vec_general
//       Access: Public
//  Description: The matrix transforms a 3-component vector (without
//               translation component) and returns the result, as a
//               fully general operation.
////////////////////////////////////////////////////////////////////
74
inline LVecBase3f LMatrix4f::xform_vec_general(LVecBase3f const &v) const;

3070 14 xform_in_place 0 4 3490 25 LMatrix4f::xform_in_place 0 1 1349 315
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_in_place
//       Access: Public
//  Description: 4-component vector or point times matrix.  This is a
//               fully general operation.
////////////////////////////////////////////////////////////////////
59
inline void LMatrix4f::xform_in_place(LVecBase4f &v) const;

3071 20 xform_point_in_place 0 4 3490 31 LMatrix4f::xform_point_in_place 0 1 1350 386
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_point_in_place
//       Access: Public
//  Description: The matrix transforms a 3-component point (including
//               translation component).  This assumes the matrix is
//               an affine transform.
////////////////////////////////////////////////////////////////////
65
inline void LMatrix4f::xform_point_in_place(LVecBase3f &v) const;

3072 28 xform_point_general_in_place 0 4 3490 39 LMatrix4f::xform_point_general_in_place 0 1 1351 358
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_point_general_in_place
//       Access: Public
//  Description: The matrix transforms a 3-component point (including
//               translation component), as a fully general operation.
////////////////////////////////////////////////////////////////////
73
inline void LMatrix4f::xform_point_general_in_place(LVecBase3f &v) const;

3073 18 xform_vec_in_place 0 4 3490 29 LMatrix4f::xform_vec_in_place 0 1 1352 388
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_vec_in_place
//       Access: Public
//  Description: The matrix transforms a 3-component vector (without
//               translation component).  This assumes the matrix is
//               an orthonormal transform.
////////////////////////////////////////////////////////////////////
63
inline void LMatrix4f::xform_vec_in_place(LVecBase3f &v) const;

3074 26 xform_vec_general_in_place 0 4 3490 37 LMatrix4f::xform_vec_general_in_place 0 1 1353 355
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_vec_general_in_place
//       Access: Public
//  Description: The matrix transforms a 3-component vector (without
//               translation component), as a fully general operation.
////////////////////////////////////////////////////////////////////
71
inline void LMatrix4f::xform_vec_general_in_place(LVecBase3f &v) const;

3075 8 multiply 0 4 3490 19 LMatrix4f::multiply 0 1 1354 52
// this = other1 * other2

// this = other1 * other2
82
inline void LMatrix4f::multiply(LMatrix4f const &other1, LMatrix4f const &other2);

3076 10 operator * 0 4 3490 21 LMatrix4f::operator * 0 2 1355 1356 0
129
inline LMatrix4f LMatrix4f::operator *(LMatrix4f const &other) const;
inline LMatrix4f LMatrix4f::operator *(float scalar) const;

3077 10 operator / 0 4 3490 21 LMatrix4f::operator / 0 1 1357 0
59
inline LMatrix4f LMatrix4f::operator /(float scalar) const;

3078 11 operator += 0 4 3490 22 LMatrix4f::operator += 0 1 1358 275
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix += matrix
//       Access: Public
//  Description: Performs a memberwise addition between two matrices.
////////////////////////////////////////////////////////////////////
65
inline LMatrix4f &LMatrix4f::operator +=(LMatrix4f const &other);

3079 11 operator -= 0 4 3490 22 LMatrix4f::operator -= 0 1 1359 275
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix -= matrix
//       Access: Public
//  Description: Performs a memberwise addition between two matrices.
////////////////////////////////////////////////////////////////////
65
inline LMatrix4f &LMatrix4f::operator -=(LMatrix4f const &other);

3080 11 operator *= 0 4 3490 22 LMatrix4f::operator *= 0 2 1360 1361 446
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix *= matrix
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix *= scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
121
inline LMatrix4f &LMatrix4f::operator *=(LMatrix4f const &other);
inline LMatrix4f &LMatrix4f::operator *=(float scalar);

3081 11 operator /= 0 4 3490 22 LMatrix4f::operator /= 0 1 1362 222
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix /= scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
55
inline LMatrix4f &LMatrix4f::operator /=(float scalar);

3082 18 componentwise_mult 0 4 3490 29 LMatrix4f::componentwise_mult 0 1 1363 227
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::componentwise_mult
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
66
inline void LMatrix4f::componentwise_mult(LMatrix4f const &other);

3083 14 transpose_from 0 4 3490 25 LMatrix4f::transpose_from 0 1 1364 220
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::transpose_from
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
62
inline void LMatrix4f::transpose_from(LMatrix4f const &other);

3084 18 transpose_in_place 0 4 3490 29 LMatrix4f::transpose_in_place 0 1 1365 224
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::transpose_in_place
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
48
inline void LMatrix4f::transpose_in_place(void);

3085 11 invert_from 0 4 3490 22 LMatrix4f::invert_from 0 1 1366 803
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::invert_from
//       Access: Public
//  Description: Computes the inverse of the other matrix, and stores
//               the result in this matrix.  This is a fully general
//               operation and makes no assumptions about the type of
//               transform represented by the matrix.
//
//               The other matrix must be a different object than this
//               matrix.  However, if you need to invert a matrix in
//               place, see invert_in_place.
//
//               The return value is true if the matrix was
//               successfully inverted, false if the was a
//               singularity.
////////////////////////////////////////////////////////////////////
59
inline bool LMatrix4f::invert_from(LMatrix4f const &other);

3086 18 invert_affine_from 0 4 3490 29 LMatrix4f::invert_affine_from 0 1 1367 149
// bugbug: we could optimize this for rotation/scale/translation matrices
//         (transpose upper 3x3 and take negative of translation component)
66
inline bool LMatrix4f::invert_affine_from(LMatrix4f const &other);

3087 15 invert_in_place 0 4 3490 26 LMatrix4f::invert_in_place 0 1 1368 361
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::invert_in_place
//       Access: Public
//  Description: Inverts the current matrix.  Returns true if the
//               inverse is successful, false if the matrix was
//               singular.
////////////////////////////////////////////////////////////////////
45
inline bool LMatrix4f::invert_in_place(void);

3088 10 accumulate 0 4 3490 21 LMatrix4f::accumulate 0 1 1369 252
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::accumulate
//       Access: Public
//  Description: Computes (*this) += other * weight.
////////////////////////////////////////////////////////////////////
72
inline void LMatrix4f::accumulate(LMatrix4f const &other, float weight);

3089 9 ident_mat 0 4 3490 20 LMatrix4f::ident_mat 0 1 1370 388
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::ident_mat
//       Access: Public, Static
//  Description: Returns an identity matrix.
//
//               This function definition must appear first, since
//               some inline functions below take advantage of it.
////////////////////////////////////////////////////////////////////
58
static inline LMatrix4f const &LMatrix4f::ident_mat(void);

3090 8 ones_mat 0 4 3490 19 LMatrix4f::ones_mat 0 1 1371 258
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::ones_mat
//       Access: Public, Static
//  Description: Returns an matrix filled with ones.
////////////////////////////////////////////////////////////////////
57
static inline LMatrix4f const &LMatrix4f::ones_mat(void);

3091 9 zeros_mat 0 4 3490 20 LMatrix4f::zeros_mat 0 1 1372 260
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::zeros_mat
//       Access: Public, Static
//  Description: Returns an matrix filled with zeros.
////////////////////////////////////////////////////////////////////
58
static inline LMatrix4f const &LMatrix4f::zeros_mat(void);

3092 17 set_translate_mat 0 4 3490 28 LMatrix4f::set_translate_mat 0 1 1373 303
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_translate_mat
//       Access: Public
//  Description: Fills mat with a matrix that applies the indicated
//               translation.
////////////////////////////////////////////////////////////////////
66
inline void LMatrix4f::set_translate_mat(LVecBase3f const &trans);

3093 14 set_rotate_mat 0 4 3490 25 LMatrix4f::set_rotate_mat 0 1 1374 362
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_rotate_mat
//       Access: Public
//  Description: Sets mat to a matrix that rotates by the given angle
//               in degrees counterclockwise about the indicated
//               vector.
////////////////////////////////////////////////////////////////////
104
void LMatrix4f::set_rotate_mat(float angle, LVecBase3f const &axis, CoordinateSystem cs = ::CS_default);

3094 23 set_rotate_mat_normaxis 0 4 3490 34 LMatrix4f::set_rotate_mat_normaxis 0 1 1375 412
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_rotate_mat_normaxis
//       Access: Public
//  Description: Fills mat with a matrix that rotates by the given
//               angle in degrees counterclockwise about the indicated
//               vector.  Assumes axis has been prenormalized.
////////////////////////////////////////////////////////////////////
113
void LMatrix4f::set_rotate_mat_normaxis(float angle, LVecBase3f const &axis, CoordinateSystem cs = ::CS_default);

3095 13 set_scale_mat 0 4 3490 24 LMatrix4f::set_scale_mat 0 1 1376 319
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_scale_mat
//       Access: Public
//  Description: Fills mat with a matrix that applies the indicated
//               scale in each of the three axes.
////////////////////////////////////////////////////////////////////
62
inline void LMatrix4f::set_scale_mat(LVecBase3f const &scale);

3096 13 set_shear_mat 0 4 3490 24 LMatrix4f::set_shear_mat 0 1 1377 321
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_shear_mat
//       Access: Public
//  Description: Fills mat with a matrix that applies the indicated
//               shear in each of the three planes.
////////////////////////////////////////////////////////////////////
98
inline void LMatrix4f::set_shear_mat(LVecBase3f const &shear, CoordinateSystem cs = ::CS_default);

3097 19 set_scale_shear_mat 0 4 3490 30 LMatrix4f::set_scale_shear_mat 0 1 1378 317
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_scale_shear_mat
//       Access: Public, Static
//  Description: Fills mat with a matrix that applies the indicated
//               scale and shear.
////////////////////////////////////////////////////////////////////
129
inline void LMatrix4f::set_scale_shear_mat(LVecBase3f const &scale, LVecBase3f const &shear, CoordinateSystem cs = ::CS_default);

3098 13 translate_mat 0 4 3490 24 LMatrix4f::translate_mat 0 2 1379 1380 602
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::translate_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               translation.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::translate_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               translation.
////////////////////////////////////////////////////////////////////
154
static inline LMatrix4f LMatrix4f::translate_mat(LVecBase3f const &trans);
static inline LMatrix4f LMatrix4f::translate_mat(float tx, float ty, float tz);

3099 10 rotate_mat 0 4 3490 21 LMatrix4f::rotate_mat 0 1 1381 345
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat
//       Access: Public, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise about the indicated vector.
////////////////////////////////////////////////////////////////////
119
static inline LMatrix4f LMatrix4f::rotate_mat(float angle, LVecBase3f const &axis, CoordinateSystem cs = ::CS_default);

3100 19 rotate_mat_normaxis 0 4 3490 30 LMatrix4f::rotate_mat_normaxis 0 1 1382 408
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat_normaxis
//       Access: Public, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise about the indicated vector.
//               Assumes axis has been prenormalized.
////////////////////////////////////////////////////////////////////
128
static inline LMatrix4f LMatrix4f::rotate_mat_normaxis(float angle, LVecBase3f const &axis, CoordinateSystem cs = ::CS_default);

3101 9 scale_mat 0 4 3490 20 LMatrix4f::scale_mat 0 3 1383 1384 1385 934
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the three axes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the three axes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               uniform scale.
////////////////////////////////////////////////////////////////////
205
static inline LMatrix4f LMatrix4f::scale_mat(LVecBase3f const &scale);
static inline LMatrix4f LMatrix4f::scale_mat(float sx, float sy, float sz);
static inline LMatrix4f LMatrix4f::scale_mat(float scale);

3102 9 shear_mat 0 4 3490 20 LMatrix4f::shear_mat 0 2 1386 1387 638
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               shear in each of the three planes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               shear in each of the three planes.
////////////////////////////////////////////////////////////////////
224
static inline LMatrix4f LMatrix4f::shear_mat(LVecBase3f const &shear, CoordinateSystem cs = ::CS_default);
static inline LMatrix4f LMatrix4f::shear_mat(float shxy, float shxz, float shyz, CoordinateSystem cs = ::CS_default);

3103 15 scale_shear_mat 0 4 3490 26 LMatrix4f::scale_shear_mat 0 2 1388 1389 614
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale and shear.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale and shear.
////////////////////////////////////////////////////////////////////
291
static inline LMatrix4f LMatrix4f::scale_shear_mat(LVecBase3f const &scale, LVecBase3f const &shear, CoordinateSystem cs = ::CS_default);
static inline LMatrix4f LMatrix4f::scale_shear_mat(float sx, float sy, float sz, float shxy, float shxz, float shyz, CoordinateSystem cs = ::CS_default);

3104 13 y_to_z_up_mat 0 4 3490 24 LMatrix4f::y_to_z_up_mat 0 1 1390 339
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::y_to_z_up_mat
//       Access: Public, Static
//  Description: Returns a matrix that transforms from the Y-up
//               coordinate system to the Z-up coordinate system.
////////////////////////////////////////////////////////////////////
62
static inline LMatrix4f const &LMatrix4f::y_to_z_up_mat(void);

3105 13 z_to_y_up_mat 0 4 3490 24 LMatrix4f::z_to_y_up_mat 0 1 1391 339
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::z_to_y_up_mat
//       Access: Public, Static
//  Description: Returns a matrix that transforms from the Y-up
//               coordinate system to the Z-up coordinate system.
////////////////////////////////////////////////////////////////////
62
static inline LMatrix4f const &LMatrix4f::z_to_y_up_mat(void);

3106 11 convert_mat 0 4 3490 22 LMatrix4f::convert_mat 0 1 1392 347
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::convert_mat
//       Access: Public, Static
//  Description: Returns a matrix that transforms from the indicated
//               coordinate system to the indicated coordinate system.
////////////////////////////////////////////////////////////////////
91
static LMatrix4f const &LMatrix4f::convert_mat(CoordinateSystem from, CoordinateSystem to);

3107 12 almost_equal 0 4 3490 23 LMatrix4f::almost_equal 0 2 1393 1394 793
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::almost_equal
//       Access: Public
//  Description: Returns true if two matrices are memberwise equal
//               within a default tolerance based on the numeric type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::almost_equal
//       Access: Public
//  Description: Returns true if two matrices are memberwise equal
//               within a specified tolerance.  This is faster than
//               the equivalence operator as this doesn't have to
//               guarantee that it is transitive.
////////////////////////////////////////////////////////////////////
143
bool LMatrix4f::almost_equal(LMatrix4f const &other, float threshold) const;
inline bool LMatrix4f::almost_equal(LMatrix4f const &other) const;

3108 6 output 0 4 3490 17 LMatrix4f::output 0 1 1395 212
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::output
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
43
void LMatrix4f::output(ostream &out) const;

3109 5 write 0 4 3490 16 LMatrix4f::write 0 1 1396 211
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::write
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
64
void LMatrix4f::write(ostream &out, int indent_level = 0) const;

3110 8 __repr__ 0 4 3490 19 LMatrix4f::__repr__ 0 1 1397 0
46
inline string LMatrix4f::__repr__(void) const;

3111 13 generate_hash 0 4 3490 24 LMatrix4f::generate_hash 0 2 1398 1399 538
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::generate_hash
//       Access: Public
//  Description: Adds the vector to the indicated hash generator.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::generate_hash
//       Access: Public
//  Description: Adds the vector to the indicated hash generator.
////////////////////////////////////////////////////////////////////
157
inline void LMatrix4f::generate_hash(ChecksumHashGenerator &hashgen) const;
void LMatrix4f::generate_hash(ChecksumHashGenerator &hashgen, float scale) const;

3112 20 write_datagram_fixed 0 4 3490 31 LMatrix4f::write_datagram_fixed 0 1 1400 641
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::write_datagram_fixed
//       Access: Published
//  Description: Writes the matrix to the Datagram using add_float32()
//               or add_float64(), depending on the type of floats in
//               the matrix, regardless of the setting of
//               Datagram::set_stdfloat_double().  This is appropriate
//               when you want to write a fixed-width value to the
//               datagram, especially when you are not writing a bam
//               file.
////////////////////////////////////////////////////////////////////
66
void LMatrix4f::write_datagram_fixed(Datagram &destination) const;

3113 19 read_datagram_fixed 0 4 3490 30 LMatrix4f::read_datagram_fixed 0 1 1401 347
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::read_datagram_fixed
//       Access: Published
//  Description: Reads the matrix from the Datagram using get_float32()
//               or get_float64().  See write_datagram_fixed().
////////////////////////////////////////////////////////////////////
60
void LMatrix4f::read_datagram_fixed(DatagramIterator &scan);

3114 14 write_datagram 0 4 3490 25 LMatrix4f::write_datagram 0 1 1402 463
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::write_datagram
//       Access: Published
//  Description: Writes the matrix to the Datagram using
//               add_stdfloat().  This is appropriate when you want to
//               write the matrix using the standard width setting,
//               especially when you are writing a bam file.
////////////////////////////////////////////////////////////////////
60
void LMatrix4f::write_datagram(Datagram &destination) const;

3115 13 read_datagram 0 4 3490 24 LMatrix4f::read_datagram 0 1 1403 279
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::read_datagram
//       Access: Published
//  Description: Reads the matrix from the Datagram using get_stdfloat().
////////////////////////////////////////////////////////////////////
56
void LMatrix4f::read_datagram(DatagramIterator &source);

3116 14 get_class_type 0 4 3490 25 LMatrix4f::get_class_type 0 1 1404 0
50
static TypeHandle LMatrix4f::get_class_type(void);

3117 10 ~LMatrix4f 0 4 3490 21 LMatrix4f::~LMatrix4f 0 0 0
28
LMatrix4f::~LMatrix4f(void);

3118 18 UnalignedLMatrix4f 0 4 3494 38 UnalignedLMatrix4f::UnalignedLMatrix4f 0 4 1410 1411 1412 1413 928
////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
424
inline UnalignedLMatrix4f::UnalignedLMatrix4f(void);
inline UnalignedLMatrix4f::UnalignedLMatrix4f(LMatrix4f const &copy);
inline UnalignedLMatrix4f::UnalignedLMatrix4f(UnalignedLMatrix4f const &copy);
inline UnalignedLMatrix4f::UnalignedLMatrix4f(float e00, float e01, float e02, float e03, float e10, float e11, float e12, float e13, float e20, float e21, float e22, float e23, float e30, float e31, float e32, float e33);

3119 10 operator = 0 4 3494 30 UnalignedLMatrix4f::operator = 0 2 1414 1415 480
////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
172
inline UnalignedLMatrix4f &UnalignedLMatrix4f::operator =(LMatrix4f const &copy);
inline UnalignedLMatrix4f &UnalignedLMatrix4f::operator =(UnalignedLMatrix4f const &copy);

3120 3 set 0 4 3494 23 UnalignedLMatrix4f::set 0 1 1416 221
////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::set
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
212
inline void UnalignedLMatrix4f::set(float e00, float e01, float e02, float e03, float e10, float e11, float e12, float e13, float e20, float e21, float e22, float e23, float e30, float e31, float e32, float e33);

3121 11 operator () 0 4 3494 31 UnalignedLMatrix4f::operator () 0 2 1417 1418 235
////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::Indexing operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
134
inline float &UnalignedLMatrix4f::operator ()(int row, int col);
inline float UnalignedLMatrix4f::operator ()(int row, int col) const;

3122 8 get_data 0 4 3494 28 UnalignedLMatrix4f::get_data 0 1 1419 410
////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::get_data
//       Access: Published
//  Description: Returns the address of the first of the nine data
//               elements in the matrix.  The remaining elements
//               occupy the next eight positions in row-major order.
////////////////////////////////////////////////////////////////////
61
inline float const *UnalignedLMatrix4f::get_data(void) const;

3123 18 get_num_components 0 4 3494 38 UnalignedLMatrix4f::get_num_components 0 1 1420 291
////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::get_num_components
//       Access: Published
//  Description: Returns the number of elements in the matrix, sixteen.
////////////////////////////////////////////////////////////////////
62
inline int UnalignedLMatrix4f::get_num_components(void) const;

3124 14 get_class_type 0 4 3494 34 UnalignedLMatrix4f::get_class_type 0 1 1421 0
59
static TypeHandle UnalignedLMatrix4f::get_class_type(void);

3125 19 ~UnalignedLMatrix4f 0 4 3494 39 UnalignedLMatrix4f::~UnalignedLMatrix4f 0 0 0
46
UnalignedLMatrix4f::~UnalignedLMatrix4f(void);

3126 11 operator [] 0 4 3498 27 LMatrix3d::Row::operator [] 0 2 1522 1523 225
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Row::operator []
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
106
inline double LMatrix3d::Row::operator [](int i) const;
inline double &LMatrix3d::Row::operator [](int i);

3127 4 size 0 4 3498 20 LMatrix3d::Row::size 0 1 1524 274
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Row::size
//       Access: Published, Static
//  Description: Returns 3: the number of columns of a LMatrix3.
////////////////////////////////////////////////////////////////////
45
static inline int LMatrix3d::Row::size(void);

3128 4 ~Row 0 4 3498 20 LMatrix3d::Row::~Row 0 0 0
27
LMatrix3d::Row::~Row(void);

3129 11 operator [] 0 4 3499 28 LMatrix3d::CRow::operator [] 0 1 1525 0
56
inline double LMatrix3d::CRow::operator [](int i) const;

3130 4 size 0 4 3499 21 LMatrix3d::CRow::size 0 1 1526 275
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::CRow::size
//       Access: Published, Static
//  Description: Returns 3: the number of columns of a LMatrix3.
////////////////////////////////////////////////////////////////////
46
static inline int LMatrix3d::CRow::size(void);

3131 5 ~CRow 0 4 3499 22 LMatrix3d::CRow::~CRow 0 0 0
29
LMatrix3d::CRow::~CRow(void);

3132 9 LMatrix3d 0 4 3496 20 LMatrix3d::LMatrix3d 0 3 1422 1423 1424 677
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Default Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
224
inline LMatrix3d::LMatrix3d(void);
inline LMatrix3d::LMatrix3d(LMatrix3d const &other);
inline LMatrix3d::LMatrix3d(double e00, double e01, double e02, double e10, double e11, double e12, double e20, double e21, double e22);

3133 10 operator = 0 4 3496 21 LMatrix3d::operator = 0 2 1425 1426 468
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Copy Assignment Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Fill Assignment Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
124
inline LMatrix3d &LMatrix3d::operator =(LMatrix3d const &other);
inline LMatrix3d &LMatrix3d::operator =(double fill_value);

3134 12 operator new 0 4 3496 23 LMatrix3d::operator new 0 1 1427 0
112
inline void *LMatrix3d::operator new(size_t size);
inline void *LMatrix3d::operator new(size_t size, void *ptr);

3135 15 operator delete 0 4 3496 26 LMatrix3d::operator delete 0 0 0
106
inline void LMatrix3d::operator delete(void *ptr);
inline void LMatrix3d::operator delete(void *, void *);

3136 12 validate_ptr 0 4 3496 23 LMatrix3d::validate_ptr 0 0 0
60
static inline bool LMatrix3d::validate_ptr(void const *ptr);

3137 10 __reduce__ 0 4 3496 21 LMatrix3d::__reduce__ 0 1 1428 0
61
inline PyObject *LMatrix3d::__reduce__(PyObject *self) const;

3138 4 fill 0 4 3496 15 LMatrix3d::fill 0 1 1429 391
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::fill
//       Access: Published
//  Description: Sets each element of the matrix to the indicated
//               fill_value.  This is of questionable value, but is
//               sometimes useful when initializing to zero.
////////////////////////////////////////////////////////////////////
40
void LMatrix3d::fill(double fill_value);

3139 3 set 0 4 3496 14 LMatrix3d::set 0 1 1430 212
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
135
inline void LMatrix3d::set(double e00, double e01, double e02, double e10, double e11, double e12, double e20, double e21, double e22);

3140 7 set_row 0 4 3496 18 LMatrix3d::set_row 0 2 1431 1432 636
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set_row
//       Access: Published
//  Description: Replaces the indicated row of the matrix from a
//               three-component vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set_row
//       Access: Published
//  Description: Replaces the indicated row of the matrix from a
//               two-component vector, ignoring the last column.
////////////////////////////////////////////////////////////////////
123
inline void LMatrix3d::set_row(int row, LVecBase3d const &v);
inline void LMatrix3d::set_row(int row, LVecBase2d const &v);

3141 7 set_col 0 4 3496 18 LMatrix3d::set_col 0 2 1433 1434 645
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set_column
//       Access: Published
//  Description: Replaces the indicated column of the matrix from a
//               three-component vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set_column
//       Access: Published
//  Description: Replaces the indicated column of the matrix from a
//               two-component vector, ignoring the last row.
////////////////////////////////////////////////////////////////////
123
inline void LMatrix3d::set_col(int col, LVecBase3d const &v);
inline void LMatrix3d::set_col(int col, LVecBase2d const &v);

3142 7 get_row 0 4 3496 18 LMatrix3d::get_row 0 2 1435 1436 638
// these versions inline better

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_row
//       Access: Published
//  Description: Returns the indicated row of the matrix as a
//               three-component vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_row
//       Access: Published
//  Description: Stores the indicated row of the matrix as a
//               three-component vector.
////////////////////////////////////////////////////////////////////
123
inline LVecBase3d LMatrix3d::get_row(int row) const;
inline void LMatrix3d::get_row(LVecBase3d &result_vec, int row) const;

3143 7 get_col 0 4 3496 18 LMatrix3d::get_col 0 1 1437 305
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_col
//       Access: Published
//  Description: Returns the indicated column of the matrix as a
//               three-component vector.
////////////////////////////////////////////////////////////////////
52
inline LVecBase3d LMatrix3d::get_col(int col) const;

3144 8 get_row2 0 4 3496 19 LMatrix3d::get_row2 0 1 1438 327
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_row2
//       Access: Published
//  Description: Returns the indicated row of the matrix as a
//               two-component vector, ignoring the last column.
////////////////////////////////////////////////////////////////////
53
inline LVecBase2d LMatrix3d::get_row2(int row) const;

3145 8 get_col2 0 4 3496 19 LMatrix3d::get_col2 0 1 1439 327
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_col2
//       Access: Published
//  Description: Returns the indicated column of the matrix as a
//               two-component vector, ignoring the last row.
////////////////////////////////////////////////////////////////////
53
inline LVecBase2d LMatrix3d::get_col2(int col) const;

3146 11 operator () 0 4 3496 22 LMatrix3d::operator () 0 2 1440 1441 226
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Indexing operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
118
inline double &LMatrix3d::operator ()(int row, int col);
inline double LMatrix3d::operator ()(int row, int col) const;

3147 11 operator [] 0 4 3496 22 LMatrix3d::operator [] 0 2 1442 1443 0
112
inline LMatrix3d::CRow LMatrix3d::operator [](int i) const;
inline LMatrix3d::Row LMatrix3d::operator [](int i);

3148 4 size 0 4 3496 15 LMatrix3d::size 0 1 1444 266
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::size
//       Access: Published, Static
//  Description: Returns 3: the number of rows of a LMatrix3.
////////////////////////////////////////////////////////////////////
40
static inline int LMatrix3d::size(void);

3149 6 is_nan 0 4 3496 17 LMatrix3d::is_nan 0 1 1445 310
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::is_nan
//       Access: Published
//  Description: Returns true if any component of the matrix is
//               not-a-number, false otherwise.
////////////////////////////////////////////////////////////////////
42
inline bool LMatrix3d::is_nan(void) const;

3150 11 is_identity 0 4 3496 22 LMatrix3d::is_identity 0 1 1446 314
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::is_identity
//       Access: Public
//  Description: Returns true if this is (close enough to) the
//               identity matrix, false otherwise.
////////////////////////////////////////////////////////////////////
47
inline bool LMatrix3d::is_identity(void) const;

3151 8 get_cell 0 4 3496 19 LMatrix3d::get_cell 0 1 1447 261
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_cell
//       Access: Published
//  Description: Returns a particular element of the matrix.
////////////////////////////////////////////////////////////////////
58
inline double LMatrix3d::get_cell(int row, int col) const;

3152 8 set_cell 0 4 3496 19 LMatrix3d::set_cell 0 1 1448 261
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set_cell
//       Access: Published
//  Description: Changes a particular element of the matrix.
////////////////////////////////////////////////////////////////////
64
inline void LMatrix3d::set_cell(int row, int col, double value);

3153 8 get_data 0 4 3496 19 LMatrix3d::get_data 0 1 1449 401
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_data
//       Access: Published
//  Description: Returns the address of the first of the nine data
//               elements in the matrix.  The remaining elements
//               occupy the next eight positions in row-major order.
////////////////////////////////////////////////////////////////////
53
inline double const *LMatrix3d::get_data(void) const;

3154 18 get_num_components 0 4 3496 29 LMatrix3d::get_num_components 0 1 1450 279
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_num_components
//       Access: Published
//  Description: Returns the number of elements in the matrix, nine.
////////////////////////////////////////////////////////////////////
53
inline int LMatrix3d::get_num_components(void) const;

3155 10 operator < 0 4 3496 21 LMatrix3d::operator < 0 1 1451 0
64
inline bool LMatrix3d::operator <(LMatrix3d const &other) const;

3156 11 operator == 0 4 3496 22 LMatrix3d::operator == 0 1 1452 0
65
inline bool LMatrix3d::operator ==(LMatrix3d const &other) const;

3157 11 operator != 0 4 3496 22 LMatrix3d::operator != 0 1 1453 0
65
inline bool LMatrix3d::operator !=(LMatrix3d const &other) const;

3158 10 compare_to 0 4 3496 21 LMatrix3d::compare_to 0 2 1454 1455 826
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::compare_to
//       Access: Published
//  Description: This flavor of compare_to uses a default threshold
//               value based on the numeric type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::compare_to
//       Access: Published
//  Description: Sorts matrices lexicographically, componentwise.
//               Returns a number less than 0 if this matrix sorts
//               before the other one, greater than zero if it sorts
//               after, 0 if they are equivalent (within the indicated
//               tolerance).
////////////////////////////////////////////////////////////////////
138
inline int LMatrix3d::compare_to(LMatrix3d const &other) const;
int LMatrix3d::compare_to(LMatrix3d const &other, double threshold) const;

3159 8 get_hash 0 4 3496 19 LMatrix3d::get_hash 0 2 1456 1457 514
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////
105
inline size_t LMatrix3d::get_hash(void) const;
inline size_t LMatrix3d::get_hash(double threshold) const;

3160 8 add_hash 0 4 3496 19 LMatrix3d::add_hash 0 2 1458 1459 514
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////
125
inline size_t LMatrix3d::add_hash(size_t hash) const;
inline size_t LMatrix3d::add_hash(size_t hash, double threshold) const;

3161 5 xform 0 4 3496 16 LMatrix3d::xform 0 1 1460 256
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform
//       Access: Published
//  Description: 3-component vector or point times matrix.
////////////////////////////////////////////////////////////////////
62
inline LVecBase3d LMatrix3d::xform(LVecBase3d const &v) const;

3162 11 xform_point 0 4 3496 22 LMatrix3d::xform_point 0 1 1461 403
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_point
//       Access: Published
//  Description: The matrix transforms a 2-component point (including
//               translation component) and returns the result.  This
//               assumes the matrix is an affine transform.
////////////////////////////////////////////////////////////////////
68
inline LVecBase2d LMatrix3d::xform_point(LVecBase2d const &v) const;

3163 9 xform_vec 0 4 3496 20 LMatrix3d::xform_vec 0 2 1462 1463 849
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_vec
//       Access: Published
//  Description: The matrix transforms a 2-component vector (without
//               translation component) and returns the result.  This
//               assumes the matrix is an affine transform.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_vec
//       Access: Published
//  Description: The matrix transforms a 3-component vector and
//               returns the result.  This assumes the matrix is an
//               orthonormal transform.
//
//               In practice, this is the same computation as xform().
////////////////////////////////////////////////////////////////////
133
inline LVecBase2d LMatrix3d::xform_vec(LVecBase2d const &v) const;
inline LVecBase3d LMatrix3d::xform_vec(LVecBase3d const &v) const;

3164 17 xform_vec_general 0 4 3496 28 LMatrix3d::xform_vec_general 0 1 1464 389
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_vec_general
//       Access: Published
//  Description: The matrix transforms a 3-component vector (without
//               translation component) and returns the result, as a
//               fully general operation.
////////////////////////////////////////////////////////////////////
74
inline LVecBase3d LMatrix3d::xform_vec_general(LVecBase3d const &v) const;

3165 14 xform_in_place 0 4 3496 25 LMatrix3d::xform_in_place 0 1 1465 265
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_in_place
//       Access: Published
//  Description: 3-component vector or point times matrix.
////////////////////////////////////////////////////////////////////
59
inline void LMatrix3d::xform_in_place(LVecBase3d &v) const;

3166 20 xform_point_in_place 0 4 3496 31 LMatrix3d::xform_point_in_place 0 1 1466 389
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_point_in_place
//       Access: Published
//  Description: The matrix transforms a 2-component point (including
//               translation component).  This assumes the matrix is
//               an affine transform.
////////////////////////////////////////////////////////////////////
65
inline void LMatrix3d::xform_point_in_place(LVecBase2d &v) const;

3167 18 xform_vec_in_place 0 4 3496 29 LMatrix3d::xform_vec_in_place 0 2 1467 1468 804
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_vec_in_place
//       Access: Published
//  Description: The matrix transforms a 2-component vector (without
//               translation component).  This assumes the matrix is
//               an affine transform.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_vec_in_place
//       Access: Published
//  Description: The matrix transforms a 3-component vector.  This
//               assumes the matrix is an orthonormal transform.
//
//               In practice, this is the same computation as xform().
////////////////////////////////////////////////////////////////////
127
inline void LMatrix3d::xform_vec_in_place(LVecBase2d &v) const;
inline void LMatrix3d::xform_vec_in_place(LVecBase3d &v) const;

3168 26 xform_vec_general_in_place 0 4 3496 37 LMatrix3d::xform_vec_general_in_place 0 1 1469 358
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_vec_general_in_place
//       Access: Published
//  Description: The matrix transforms a 3-component vector (without
//               translation component), as a fully general operation.
////////////////////////////////////////////////////////////////////
71
inline void LMatrix3d::xform_vec_general_in_place(LVecBase3d &v) const;

3169 8 multiply 0 4 3496 19 LMatrix3d::multiply 0 1 1470 52
// this = other1 * other2

// this = other1 * other2
82
inline void LMatrix3d::multiply(LMatrix3d const &other1, LMatrix3d const &other2);

3170 10 operator * 0 4 3496 21 LMatrix3d::operator * 0 2 1471 1472 0
130
inline LMatrix3d LMatrix3d::operator *(LMatrix3d const &other) const;
inline LMatrix3d LMatrix3d::operator *(double scalar) const;

3171 10 operator / 0 4 3496 21 LMatrix3d::operator / 0 1 1473 0
60
inline LMatrix3d LMatrix3d::operator /(double scalar) const;

3172 11 operator += 0 4 3496 22 LMatrix3d::operator += 0 1 1474 278
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix += matrix
//       Access: Published
//  Description: Performs a memberwise addition between two matrices.
////////////////////////////////////////////////////////////////////
65
inline LMatrix3d &LMatrix3d::operator +=(LMatrix3d const &other);

3173 11 operator -= 0 4 3496 22 LMatrix3d::operator -= 0 1 1475 281
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix -= matrix
//       Access: Published
//  Description: Performs a memberwise subtraction between two matrices.
////////////////////////////////////////////////////////////////////
65
inline LMatrix3d &LMatrix3d::operator -=(LMatrix3d const &other);

3174 11 operator *= 0 4 3496 22 LMatrix3d::operator *= 0 2 1476 1477 481
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix *= matrix
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix *= scalar
//       Access: Published
//  Description: Performs a memberwise scale.
////////////////////////////////////////////////////////////////////
122
inline LMatrix3d &LMatrix3d::operator *=(LMatrix3d const &other);
inline LMatrix3d &LMatrix3d::operator *=(double scalar);

3175 11 operator /= 0 4 3496 22 LMatrix3d::operator /= 0 1 1478 254
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix /= scalar
//       Access: Published
//  Description: Performs a memberwise scale.
////////////////////////////////////////////////////////////////////
56
inline LMatrix3d &LMatrix3d::operator /=(double scalar);

3176 18 componentwise_mult 0 4 3496 29 LMatrix3d::componentwise_mult 0 1 1479 227
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::componentwise_mult
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
66
inline void LMatrix3d::componentwise_mult(LMatrix3d const &other);

3177 11 determinant 0 4 3496 22 LMatrix3d::determinant 0 1 1480 259
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::determinant
//       Access: Published
//  Description: Returns the determinant of the matrix.
////////////////////////////////////////////////////////////////////
49
inline double LMatrix3d::determinant(void) const;

3178 14 transpose_from 0 4 3496 25 LMatrix3d::transpose_from 0 1 1481 223
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::transpose_from
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
62
inline void LMatrix3d::transpose_from(LMatrix3d const &other);

3179 18 transpose_in_place 0 4 3496 29 LMatrix3d::transpose_in_place 0 1 1482 227
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::transpose_in_place
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
48
inline void LMatrix3d::transpose_in_place(void);

3180 11 invert_from 0 4 3496 22 LMatrix3d::invert_from 0 1 1483 808
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::invert_from
//       Access: Published
//  Description: Computes the inverse of the other matrix, and stores
//               the result in this matrix.  This is a fully general
//               operation and makes no assumptions about the type of
//               transform represented by the matrix.
//
//               The other matrix must be a different object than this
//               matrix.  However, if you need to invert a matrix in
//               place, see invert_in_place.
//
//               The return value is true if the matrix was
//               successfully inverted, false if there was a
//               singularity.
////////////////////////////////////////////////////////////////////
59
inline bool LMatrix3d::invert_from(LMatrix3d const &other);

3181 15 invert_in_place 0 4 3496 26 LMatrix3d::invert_in_place 0 1 1484 364
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::invert_in_place
//       Access: Published
//  Description: Inverts the current matrix.  Returns true if the
//               inverse is successful, false if the matrix was
//               singular.
////////////////////////////////////////////////////////////////////
45
inline bool LMatrix3d::invert_in_place(void);

3182 21 invert_transpose_from 0 4 3496 32 LMatrix3d::invert_transpose_from 0 2 1485 1486 698
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::invert_transpose_from
//       Access: Published
//  Description: Simultaneously computes the inverse of the indicated
//               matrix, and then the transpose of that inverse.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::invert_transpose_from
//       Access: Published
//  Description: Simultaneously computes the inverse of the indicated
//               matrix, and then the transpose of that inverse.
////////////////////////////////////////////////////////////////////
139
inline bool LMatrix3d::invert_transpose_from(LMatrix3d const &other);
inline bool LMatrix3d::invert_transpose_from(LMatrix4d const &other);

3183 9 ident_mat 0 4 3496 20 LMatrix3d::ident_mat 0 1 1487 391
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::ident_mat
//       Access: Published, Static
//  Description: Returns an identity matrix.
//
//               This function definition must appear first, since
//               some inline functions below take advantage of it.
////////////////////////////////////////////////////////////////////
58
static inline LMatrix3d const &LMatrix3d::ident_mat(void);

3184 17 set_translate_mat 0 4 3496 28 LMatrix3d::set_translate_mat 0 1 1488 306
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_translate_mat
//       Access: Published
//  Description: Fills mat with a matrix that applies the indicated
//               translation.
////////////////////////////////////////////////////////////////////
66
inline void LMatrix3d::set_translate_mat(LVecBase2d const &trans);

3185 14 set_rotate_mat 0 4 3496 25 LMatrix3d::set_rotate_mat 0 2 1489 1490 694
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_rotate_mat
//       Access: Published
//  Description: Fills mat with a matrix that rotates by the given
//               angle in degrees counterclockwise.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_rotate_mat
//       Access: Published
//  Description: Fills mat with a matrix that rotates by the given
//               angle in degrees counterclockwise about the indicated
//               vector.
////////////////////////////////////////////////////////////////////
158
inline void LMatrix3d::set_rotate_mat(double angle);
void LMatrix3d::set_rotate_mat(double angle, LVecBase3d const &axis, CoordinateSystem cs = ::CS_default);

3186 13 set_scale_mat 0 4 3496 24 LMatrix3d::set_scale_mat 0 2 1491 1492 644
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_scale_mat
//       Access: Published
//  Description: Fills mat with a matrix that applies the indicated
//               scale in each of the two axes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_scale_mat
//       Access: Published
//  Description: Fills mat with a matrix that applies the indicated
//               scale in each of the three axes.
////////////////////////////////////////////////////////////////////
125
inline void LMatrix3d::set_scale_mat(LVecBase2d const &scale);
inline void LMatrix3d::set_scale_mat(LVecBase3d const &scale);

3187 13 translate_mat 0 4 3496 24 LMatrix3d::translate_mat 0 2 1493 1494 608
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::translate_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               translation.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::translate_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               translation.
////////////////////////////////////////////////////////////////////
146
static inline LMatrix3d LMatrix3d::translate_mat(LVecBase2d const &trans);
static inline LMatrix3d LMatrix3d::translate_mat(double tx, double ty);

3188 10 rotate_mat 0 4 3496 21 LMatrix3d::rotate_mat 0 2 1495 1496 671
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat
//       Access: Published, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat
//       Access: Published, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise about the indicated vector.
////////////////////////////////////////////////////////////////////
181
static inline LMatrix3d LMatrix3d::rotate_mat(double angle);
static inline LMatrix3d LMatrix3d::rotate_mat(double angle, LVecBase3d const &axis, CoordinateSystem cs = ::CS_default);

3189 9 scale_mat 0 4 3496 20 LMatrix3d::scale_mat 0 4 1497 1498 1499 1500 1278
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the two axes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the two axes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the three axes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the three axes.
////////////////////////////////////////////////////////////////////
288
static inline LMatrix3d LMatrix3d::scale_mat(LVecBase2d const &scale);
static inline LMatrix3d LMatrix3d::scale_mat(double sx, double sy);
static inline LMatrix3d LMatrix3d::scale_mat(LVecBase3d const &scale);
static inline LMatrix3d LMatrix3d::scale_mat(double sx, double sy, double sz);

3190 23 set_rotate_mat_normaxis 0 4 3496 34 LMatrix3d::set_rotate_mat_normaxis 0 1 1501 412
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_rotate_mat_normaxis
//       Access: Published
//  Description: Fills mat with a matrix that rotates by the given
//               angle in degrees counterclockwise about the indicated
//               vector.  Assumes axis has been normalized.
////////////////////////////////////////////////////////////////////
114
void LMatrix3d::set_rotate_mat_normaxis(double angle, LVecBase3d const &axis, CoordinateSystem cs = ::CS_default);

3191 19 rotate_mat_normaxis 0 4 3496 30 LMatrix3d::rotate_mat_normaxis 0 1 1502 408
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat_normaxis
//       Access: Published, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise about the indicated vector.
//               Assumes axis has been normalized.
////////////////////////////////////////////////////////////////////
129
static inline LMatrix3d LMatrix3d::rotate_mat_normaxis(double angle, LVecBase3d const &axis, CoordinateSystem cs = ::CS_default);

3192 13 set_shear_mat 0 4 3496 24 LMatrix3d::set_shear_mat 0 1 1503 324
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_shear_mat
//       Access: Published
//  Description: Fills mat with a matrix that applies the indicated
//               shear in each of the three planes.
////////////////////////////////////////////////////////////////////
98
inline void LMatrix3d::set_shear_mat(LVecBase3d const &shear, CoordinateSystem cs = ::CS_default);

3193 9 shear_mat 0 4 3496 20 LMatrix3d::shear_mat 0 2 1504 1505 644
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::shear_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               shear in each of the three planes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::shear_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               shear in each of the three planes.
////////////////////////////////////////////////////////////////////
227
static inline LMatrix3d LMatrix3d::shear_mat(LVecBase3d const &shear, CoordinateSystem cs = ::CS_default);
static inline LMatrix3d LMatrix3d::shear_mat(double shxy, double shxz, double shyz, CoordinateSystem cs = ::CS_default);

3194 19 set_scale_shear_mat 0 4 3496 30 LMatrix3d::set_scale_shear_mat 0 1 1506 312
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_scale_shear_mat
//       Access: Published
//  Description: Fills mat with a matrix that applies the indicated
//               scale and shear.
////////////////////////////////////////////////////////////////////
122
void LMatrix3d::set_scale_shear_mat(LVecBase3d const &scale, LVecBase3d const &shear, CoordinateSystem cs = ::CS_default);

3195 15 scale_shear_mat 0 4 3496 26 LMatrix3d::scale_shear_mat 0 2 1507 1508 620
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_shear_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               scale and shear.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_shear_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               scale and shear.
////////////////////////////////////////////////////////////////////
297
static inline LMatrix3d LMatrix3d::scale_shear_mat(LVecBase3d const &scale, LVecBase3d const &shear, CoordinateSystem cs = ::CS_default);
static inline LMatrix3d LMatrix3d::scale_shear_mat(double sx, double sy, double sz, double shxy, double shxz, double shyz, CoordinateSystem cs = ::CS_default);

3196 11 convert_mat 0 4 3496 22 LMatrix3d::convert_mat 0 1 1509 350
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::convert_mat
//       Access: Published, Static
//  Description: Returns a matrix that transforms from the indicated
//               coordinate system to the indicated coordinate system.
////////////////////////////////////////////////////////////////////
91
static LMatrix3d const &LMatrix3d::convert_mat(CoordinateSystem from, CoordinateSystem to);

3197 12 almost_equal 0 4 3496 23 LMatrix3d::almost_equal 0 2 1510 1511 662
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::almost_equal
//       Access: Published
//  Description: Returns true if two matrices are memberwise equal
//               within a default tolerance based on the numeric type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::almost_equal
//       Access: Published
//  Description: Returns true if two matrices are memberwise equal
//               within a specified tolerance.
////////////////////////////////////////////////////////////////////
144
bool LMatrix3d::almost_equal(LMatrix3d const &other, double threshold) const;
inline bool LMatrix3d::almost_equal(LMatrix3d const &other) const;

3198 6 output 0 4 3496 17 LMatrix3d::output 0 1 1512 215
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::output
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
43
void LMatrix3d::output(ostream &out) const;

3199 5 write 0 4 3496 16 LMatrix3d::write 0 1 1513 214
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::write
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
64
void LMatrix3d::write(ostream &out, int indent_level = 0) const;

3200 8 __repr__ 0 4 3496 19 LMatrix3d::__repr__ 0 1 1514 0
46
inline string LMatrix3d::__repr__(void) const;

3201 13 generate_hash 0 4 3496 24 LMatrix3d::generate_hash 0 2 1515 1516 544
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::generate_hash
//       Access: Published
//  Description: Adds the vector to the indicated hash generator.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::generate_hash
//       Access: Published
//  Description: Adds the vector to the indicated hash generator.
////////////////////////////////////////////////////////////////////
162
inline void LMatrix3d::generate_hash(ChecksumHashGenerator &hashgen) const;
void LMatrix3d::generate_hash(ChecksumHashGenerator &hashgen, double threshold) const;

3202 20 write_datagram_fixed 0 4 3496 31 LMatrix3d::write_datagram_fixed 0 1 1517 641
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::write_datagram_fixed
//       Access: Published
//  Description: Writes the matrix to the Datagram using add_float32()
//               or add_float64(), depending on the type of floats in
//               the matrix, regardless of the setting of
//               Datagram::set_stdfloat_double().  This is appropriate
//               when you want to write a fixed-width value to the
//               datagram, especially when you are not writing a bam
//               file.
////////////////////////////////////////////////////////////////////
66
void LMatrix3d::write_datagram_fixed(Datagram &destination) const;

3203 19 read_datagram_fixed 0 4 3496 30 LMatrix3d::read_datagram_fixed 0 1 1518 347
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::read_datagram_fixed
//       Access: Published
//  Description: Reads the matrix from the Datagram using get_float32()
//               or get_float64().  See write_datagram_fixed().
////////////////////////////////////////////////////////////////////
60
void LMatrix3d::read_datagram_fixed(DatagramIterator &scan);

3204 14 write_datagram 0 4 3496 25 LMatrix3d::write_datagram 0 1 1519 463
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::write_datagram
//       Access: Published
//  Description: Writes the matrix to the Datagram using
//               add_stdfloat().  This is appropriate when you want to
//               write the matrix using the standard width setting,
//               especially when you are writing a bam file.
////////////////////////////////////////////////////////////////////
60
void LMatrix3d::write_datagram(Datagram &destination) const;

3205 13 read_datagram 0 4 3496 24 LMatrix3d::read_datagram 0 1 1520 279
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::read_datagram
//       Access: Published
//  Description: Reads the matrix from the Datagram using get_stdfloat().
////////////////////////////////////////////////////////////////////
56
void LMatrix3d::read_datagram(DatagramIterator &source);

3206 14 get_class_type 0 4 3496 25 LMatrix3d::get_class_type 0 1 1521 0
50
static TypeHandle LMatrix3d::get_class_type(void);

3207 10 ~LMatrix3d 0 4 3496 21 LMatrix3d::~LMatrix3d 0 0 0
28
LMatrix3d::~LMatrix3d(void);

3208 11 operator [] 0 4 3502 27 LMatrix4d::Row::operator [] 0 2 1637 1638 225
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Row::operator []
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
106
inline double LMatrix4d::Row::operator [](int i) const;
inline double &LMatrix4d::Row::operator [](int i);

3209 4 size 0 4 3502 20 LMatrix4d::Row::size 0 1 1639 271
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Row::size
//       Access: Public, Static
//  Description: Returns 4: the number of columns of a LMatrix4.
////////////////////////////////////////////////////////////////////
45
static inline int LMatrix4d::Row::size(void);

3210 4 ~Row 0 4 3502 20 LMatrix4d::Row::~Row 0 0 0
27
LMatrix4d::Row::~Row(void);

3211 11 operator [] 0 4 3503 28 LMatrix4d::CRow::operator [] 0 1 1640 0
56
inline double LMatrix4d::CRow::operator [](int i) const;

3212 4 size 0 4 3503 21 LMatrix4d::CRow::size 0 1 1641 272
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::CRow::size
//       Access: Public, Static
//  Description: Returns 4: the number of columns of a LMatrix4.
////////////////////////////////////////////////////////////////////
46
static inline int LMatrix4d::CRow::size(void);

3213 5 ~CRow 0 4 3503 22 LMatrix4d::CRow::~CRow 0 0 0
29
LMatrix4d::CRow::~CRow(void);

3214 9 LMatrix4d 0 4 3500 20 LMatrix4d::LMatrix4d 0 6 1527 1528 1529 1530 1531 1532 1469
// Construct a 4x4 matrix given a 3x3 rotation matrix and an optional
// translation component.

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Constructor, upper 3x3
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Constructor, upper 3x3 plus translation
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
503
inline LMatrix4d::LMatrix4d(void);
inline LMatrix4d::LMatrix4d(LMatrix4d const &other);
inline LMatrix4d::LMatrix4d(UnalignedLMatrix4d const &other);
inline LMatrix4d::LMatrix4d(double e00, double e01, double e02, double e03, double e10, double e11, double e12, double e13, double e20, double e21, double e22, double e23, double e30, double e31, double e32, double e33);
inline LMatrix4d::LMatrix4d(LMatrix3d const &upper3);
inline LMatrix4d::LMatrix4d(LMatrix3d const &upper3, LVecBase3d const &trans);

3215 10 operator = 0 4 3500 21 LMatrix4d::operator = 0 3 1533 1534 1535 697
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Copy Assignment Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Fill Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
198
inline LMatrix4d &LMatrix4d::operator =(LMatrix4d const &other);
inline LMatrix4d &LMatrix4d::operator =(UnalignedLMatrix4d const &other);
inline LMatrix4d &LMatrix4d::operator =(double fill_value);

3216 12 operator new 0 4 3500 23 LMatrix4d::operator new 0 1 1536 0
112
inline void *LMatrix4d::operator new(size_t size);
inline void *LMatrix4d::operator new(size_t size, void *ptr);

3217 15 operator delete 0 4 3500 26 LMatrix4d::operator delete 0 0 0
106
inline void LMatrix4d::operator delete(void *ptr);
inline void LMatrix4d::operator delete(void *, void *);

3218 12 validate_ptr 0 4 3500 23 LMatrix4d::validate_ptr 0 0 0
60
static inline bool LMatrix4d::validate_ptr(void const *ptr);

3219 10 __reduce__ 0 4 3500 21 LMatrix4d::__reduce__ 0 1 1537 0
61
inline PyObject *LMatrix4d::__reduce__(PyObject *self) const;

3220 4 fill 0 4 3500 15 LMatrix4d::fill 0 1 1538 388
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::fill
//       Access: Public
//  Description: Sets each element of the matrix to the indicated
//               fill_value.  This is of questionable value, but is
//               sometimes useful when initializing to zero.
////////////////////////////////////////////////////////////////////
47
inline void LMatrix4d::fill(double fill_value);

3221 3 set 0 4 3500 14 LMatrix4d::set 0 1 1539 209
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
219
inline void LMatrix4d::set(double e00, double e01, double e02, double e03, double e10, double e11, double e12, double e13, double e20, double e21, double e22, double e23, double e30, double e31, double e32, double e33);

3222 11 set_upper_3 0 4 3500 22 LMatrix4d::set_upper_3 0 1 1540 294
// Get and set the upper 3x3 rotation matrix.

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_upper_3
//       Access: Public
//  Description: Sets the upper 3x3 submatrix.
////////////////////////////////////////////////////////////////////
60
inline void LMatrix4d::set_upper_3(LMatrix3d const &upper3);

3223 11 get_upper_3 0 4 3500 22 LMatrix4d::get_upper_3 0 1 1541 252
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_upper_3
//       Access: Public
//  Description: Retrieves the upper 3x3 submatrix.
////////////////////////////////////////////////////////////////////
52
inline LMatrix3d LMatrix4d::get_upper_3(void) const;

3224 7 set_row 0 4 3500 18 LMatrix4d::set_row 0 2 1542 1543 610
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_row
//       Access: Public
//  Description: Replaces the indicated row of the matrix.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_row
//       Access: Public
//  Description: Replaces the indicated row of the matrix with the
//               indicated 3-component vector, ignoring the last
//               column.
////////////////////////////////////////////////////////////////////
123
inline void LMatrix4d::set_row(int row, LVecBase4d const &v);
inline void LMatrix4d::set_row(int row, LVecBase3d const &v);

3225 7 set_col 0 4 3500 18 LMatrix4d::set_col 0 2 1544 1545 613
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_col
//       Access: Public
//  Description: Replaces the indicated column of the matrix.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_col
//       Access: Public
//  Description: Replaces the indicated column of the matrix with the
//               indicated 3-component vector, ignoring the last
//               row.
////////////////////////////////////////////////////////////////////
123
inline void LMatrix4d::set_col(int col, LVecBase4d const &v);
inline void LMatrix4d::set_col(int col, LVecBase3d const &v);

3226 7 get_row 0 4 3500 18 LMatrix4d::get_row 0 2 1546 1547 626
// these versions inline better

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_row
//       Access: Public
//  Description: Retrieves the indicated row of the matrix as a
//               4-component vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_row
//       Access: Public
//  Description: Stores the indicated row of the matrix as a
//               4-component vector.
////////////////////////////////////////////////////////////////////
123
inline LVecBase4d LMatrix4d::get_row(int row) const;
inline void LMatrix4d::get_row(LVecBase4d &result_vec, int row) const;

3227 7 get_col 0 4 3500 18 LMatrix4d::get_col 0 1 1548 300
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_col
//       Access: Public
//  Description: Retrieves the indicated column of the matrix as a
//               4-component vector.
////////////////////////////////////////////////////////////////////
52
inline LVecBase4d LMatrix4d::get_col(int col) const;

3228 8 get_row3 0 4 3500 19 LMatrix4d::get_row3 0 2 1549 1550 641
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_row3
//       Access: Public
//  Description: Retrieves the row column of the matrix as a
//               3-component vector, ignoring the last column.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_row3
//       Access: Public
//  Description: Stores the row column of the matrix as a
//               3-component vector, ignoring the last column.
////////////////////////////////////////////////////////////////////
125
inline LVecBase3d LMatrix4d::get_row3(int row) const;
inline void LMatrix4d::get_row3(LVecBase3d &result_vec, int row) const;

3229 8 get_col3 0 4 3500 19 LMatrix4d::get_col3 0 1 1551 324
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_col3
//       Access: Public
//  Description: Retrieves the indicated column of the matrix as a
//               3-component vector, ignoring the last row.
////////////////////////////////////////////////////////////////////
53
inline LVecBase3d LMatrix4d::get_col3(int col) const;

3230 11 operator () 0 4 3500 22 LMatrix4d::operator () 0 2 1552 1553 223
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Indexing operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
118
inline double &LMatrix4d::operator ()(int row, int col);
inline double LMatrix4d::operator ()(int row, int col) const;

3231 11 operator [] 0 4 3500 22 LMatrix4d::operator [] 0 2 1554 1555 0
112
inline LMatrix4d::CRow LMatrix4d::operator [](int i) const;
inline LMatrix4d::Row LMatrix4d::operator [](int i);

3232 4 size 0 4 3500 15 LMatrix4d::size 0 1 1556 263
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::size
//       Access: Public, Static
//  Description: Returns 4: the number of rows of a LMatrix4.
////////////////////////////////////////////////////////////////////
40
static inline int LMatrix4d::size(void);

3233 6 is_nan 0 4 3500 17 LMatrix4d::is_nan 0 1 1557 307
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::is_nan
//       Access: Public
//  Description: Returns true if any component of the matrix is
//               not-a-number, false otherwise.
////////////////////////////////////////////////////////////////////
42
inline bool LMatrix4d::is_nan(void) const;

3234 11 is_identity 0 4 3500 22 LMatrix4d::is_identity 0 1 1558 314
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::is_identity
//       Access: Public
//  Description: Returns true if this is (close enough to) the
//               identity matrix, false otherwise.
////////////////////////////////////////////////////////////////////
47
inline bool LMatrix4d::is_identity(void) const;

3235 8 get_cell 0 4 3500 19 LMatrix4d::get_cell 0 1 1559 258
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_cell
//       Access: Public
//  Description: Returns a particular element of the matrix.
////////////////////////////////////////////////////////////////////
58
inline double LMatrix4d::get_cell(int row, int col) const;

3236 8 set_cell 0 4 3500 19 LMatrix4d::set_cell 0 1 1560 258
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_cell
//       Access: Public
//  Description: Changes a particular element of the matrix.
////////////////////////////////////////////////////////////////////
64
inline void LMatrix4d::set_cell(int row, int col, double value);

3237 8 get_data 0 4 3500 19 LMatrix4d::get_data 0 1 1561 398
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_data
//       Access: Public
//  Description: Returns the address of the first of the nine data
//               elements in the matrix.  The remaining elements
//               occupy the next eight positions in row-major order.
////////////////////////////////////////////////////////////////////
53
inline double const *LMatrix4d::get_data(void) const;

3238 18 get_num_components 0 4 3500 29 LMatrix4d::get_num_components 0 1 1562 274
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_num_components
//       Access: Public
//  Description: Returns the number of elements in the matrix, 16.
////////////////////////////////////////////////////////////////////
53
inline int LMatrix4d::get_num_components(void) const;

3239 5 begin 0 4 3500 16 LMatrix4d::begin 0 2 1563 1564 634
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::begin
//       Access: Public
//  Description: Returns an iterator that may be used to traverse the
//               elements of the matrix, STL-style.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::begin
//       Access: Public
//  Description: Returns an iterator that may be used to traverse the
//               elements of the matrix, STL-style.
////////////////////////////////////////////////////////////////////
113
inline LMatrix4d::iterator LMatrix4d::begin(void);
inline LMatrix4d::const_iterator LMatrix4d::begin(void) const;

3240 3 end 0 4 3500 14 LMatrix4d::end 0 2 1565 1566 630
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::end
//       Access: Public
//  Description: Returns an iterator that may be used to traverse the
//               elements of the matrix, STL-style.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::end
//       Access: Public
//  Description: Returns an iterator that may be used to traverse the
//               elements of the matrix, STL-style.
////////////////////////////////////////////////////////////////////
109
inline LMatrix4d::iterator LMatrix4d::end(void);
inline LMatrix4d::const_iterator LMatrix4d::end(void) const;

3241 10 operator < 0 4 3500 21 LMatrix4d::operator < 0 1 1567 0
64
inline bool LMatrix4d::operator <(LMatrix4d const &other) const;

3242 11 operator == 0 4 3500 22 LMatrix4d::operator == 0 1 1568 0
65
inline bool LMatrix4d::operator ==(LMatrix4d const &other) const;

3243 11 operator != 0 4 3500 22 LMatrix4d::operator != 0 1 1569 0
65
inline bool LMatrix4d::operator !=(LMatrix4d const &other) const;

3244 10 compare_to 0 4 3500 21 LMatrix4d::compare_to 0 2 1570 1571 820
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::compare_to
//       Access: Public
//  Description: This flavor of compare_to uses a default threshold
//               value based on the numeric type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::compare_to
//       Access: Public
//  Description: Sorts matrices lexicographically, componentwise.
//               Returns a number less than 0 if this matrix sorts
//               before the other one, greater than zero if it sorts
//               after, 0 if they are equivalent (within the indicated
//               tolerance).
////////////////////////////////////////////////////////////////////
138
inline int LMatrix4d::compare_to(LMatrix4d const &other) const;
int LMatrix4d::compare_to(LMatrix4d const &other, double threshold) const;

3245 8 get_hash 0 4 3500 19 LMatrix4d::get_hash 0 2 1572 1573 508
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_hash
//       Access: Public
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_hash
//       Access: Public
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////
105
inline size_t LMatrix4d::get_hash(void) const;
inline size_t LMatrix4d::get_hash(double threshold) const;

3246 8 add_hash 0 4 3500 19 LMatrix4d::add_hash 0 2 1574 1575 508
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::add_hash
//       Access: Public
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::add_hash
//       Access: Public
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////
125
inline size_t LMatrix4d::add_hash(size_t hash) const;
inline size_t LMatrix4d::add_hash(size_t hash, double threshold) const;

3247 5 xform 0 4 3500 16 LMatrix4d::xform 0 1 1576 306
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform
//       Access: Public
//  Description: 4-component vector or point times matrix.  This is a
//               fully general operation.
////////////////////////////////////////////////////////////////////
62
inline LVecBase4d LMatrix4d::xform(LVecBase4d const &v) const;

3248 11 xform_point 0 4 3500 22 LMatrix4d::xform_point 0 1 1577 400
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_point
//       Access: Public
//  Description: The matrix transforms a 3-component point (including
//               translation component) and returns the result.  This
//               assumes the matrix is an affine transform.
////////////////////////////////////////////////////////////////////
68
inline LVecBase3d LMatrix4d::xform_point(LVecBase3d const &v) const;

3249 19 xform_point_general 0 4 3500 30 LMatrix4d::xform_point_general 0 1 1578 389
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_point_general
//       Access: Public
//  Description: The matrix transforms a 3-component point (including
//               translation component) and returns the result, as a
//               fully general operation.
////////////////////////////////////////////////////////////////////
76
inline LVecBase3d LMatrix4d::xform_point_general(LVecBase3d const &v) const;

3250 9 xform_vec 0 4 3500 20 LMatrix4d::xform_vec 0 1 1579 402
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_vec
//       Access: Public
//  Description: The matrix transforms a 3-component vector (without
//               translation component) and returns the result.  This
//               assumes the matrix is an orthonormal transform.
////////////////////////////////////////////////////////////////////
66
inline LVecBase3d LMatrix4d::xform_vec(LVecBase3d const &v) const;

3251 17 xform_vec_general 0 4 3500 28 LMatrix4d::xform_vec_general 0 1 1580 386
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_vec_general
//       Access: Public
//  Description: The matrix transforms a 3-component vector (without
//               translation component) and returns the result, as a
//               fully general operation.
////////////////////////////////////////////////////////////////////
74
inline LVecBase3d LMatrix4d::xform_vec_general(LVecBase3d const &v) const;

3252 14 xform_in_place 0 4 3500 25 LMatrix4d::xform_in_place 0 1 1581 315
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_in_place
//       Access: Public
//  Description: 4-component vector or point times matrix.  This is a
//               fully general operation.
////////////////////////////////////////////////////////////////////
59
inline void LMatrix4d::xform_in_place(LVecBase4d &v) const;

3253 20 xform_point_in_place 0 4 3500 31 LMatrix4d::xform_point_in_place 0 1 1582 386
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_point_in_place
//       Access: Public
//  Description: The matrix transforms a 3-component point (including
//               translation component).  This assumes the matrix is
//               an affine transform.
////////////////////////////////////////////////////////////////////
65
inline void LMatrix4d::xform_point_in_place(LVecBase3d &v) const;

3254 28 xform_point_general_in_place 0 4 3500 39 LMatrix4d::xform_point_general_in_place 0 1 1583 358
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_point_general_in_place
//       Access: Public
//  Description: The matrix transforms a 3-component point (including
//               translation component), as a fully general operation.
////////////////////////////////////////////////////////////////////
73
inline void LMatrix4d::xform_point_general_in_place(LVecBase3d &v) const;

3255 18 xform_vec_in_place 0 4 3500 29 LMatrix4d::xform_vec_in_place 0 1 1584 388
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_vec_in_place
//       Access: Public
//  Description: The matrix transforms a 3-component vector (without
//               translation component).  This assumes the matrix is
//               an orthonormal transform.
////////////////////////////////////////////////////////////////////
63
inline void LMatrix4d::xform_vec_in_place(LVecBase3d &v) const;

3256 26 xform_vec_general_in_place 0 4 3500 37 LMatrix4d::xform_vec_general_in_place 0 1 1585 355
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_vec_general_in_place
//       Access: Public
//  Description: The matrix transforms a 3-component vector (without
//               translation component), as a fully general operation.
////////////////////////////////////////////////////////////////////
71
inline void LMatrix4d::xform_vec_general_in_place(LVecBase3d &v) const;

3257 8 multiply 0 4 3500 19 LMatrix4d::multiply 0 1 1586 52
// this = other1 * other2

// this = other1 * other2
82
inline void LMatrix4d::multiply(LMatrix4d const &other1, LMatrix4d const &other2);

3258 10 operator * 0 4 3500 21 LMatrix4d::operator * 0 2 1587 1588 0
130
inline LMatrix4d LMatrix4d::operator *(LMatrix4d const &other) const;
inline LMatrix4d LMatrix4d::operator *(double scalar) const;

3259 10 operator / 0 4 3500 21 LMatrix4d::operator / 0 1 1589 0
60
inline LMatrix4d LMatrix4d::operator /(double scalar) const;

3260 11 operator += 0 4 3500 22 LMatrix4d::operator += 0 1 1590 275
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix += matrix
//       Access: Public
//  Description: Performs a memberwise addition between two matrices.
////////////////////////////////////////////////////////////////////
65
inline LMatrix4d &LMatrix4d::operator +=(LMatrix4d const &other);

3261 11 operator -= 0 4 3500 22 LMatrix4d::operator -= 0 1 1591 275
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix -= matrix
//       Access: Public
//  Description: Performs a memberwise addition between two matrices.
////////////////////////////////////////////////////////////////////
65
inline LMatrix4d &LMatrix4d::operator -=(LMatrix4d const &other);

3262 11 operator *= 0 4 3500 22 LMatrix4d::operator *= 0 2 1592 1593 446
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix *= matrix
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix *= scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
122
inline LMatrix4d &LMatrix4d::operator *=(LMatrix4d const &other);
inline LMatrix4d &LMatrix4d::operator *=(double scalar);

3263 11 operator /= 0 4 3500 22 LMatrix4d::operator /= 0 1 1594 222
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix /= scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
56
inline LMatrix4d &LMatrix4d::operator /=(double scalar);

3264 18 componentwise_mult 0 4 3500 29 LMatrix4d::componentwise_mult 0 1 1595 227
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::componentwise_mult
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
66
inline void LMatrix4d::componentwise_mult(LMatrix4d const &other);

3265 14 transpose_from 0 4 3500 25 LMatrix4d::transpose_from 0 1 1596 220
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::transpose_from
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
62
inline void LMatrix4d::transpose_from(LMatrix4d const &other);

3266 18 transpose_in_place 0 4 3500 29 LMatrix4d::transpose_in_place 0 1 1597 224
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::transpose_in_place
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
48
inline void LMatrix4d::transpose_in_place(void);

3267 11 invert_from 0 4 3500 22 LMatrix4d::invert_from 0 1 1598 803
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::invert_from
//       Access: Public
//  Description: Computes the inverse of the other matrix, and stores
//               the result in this matrix.  This is a fully general
//               operation and makes no assumptions about the type of
//               transform represented by the matrix.
//
//               The other matrix must be a different object than this
//               matrix.  However, if you need to invert a matrix in
//               place, see invert_in_place.
//
//               The return value is true if the matrix was
//               successfully inverted, false if the was a
//               singularity.
////////////////////////////////////////////////////////////////////
59
inline bool LMatrix4d::invert_from(LMatrix4d const &other);

3268 18 invert_affine_from 0 4 3500 29 LMatrix4d::invert_affine_from 0 1 1599 149
// bugbug: we could optimize this for rotation/scale/translation matrices
//         (transpose upper 3x3 and take negative of translation component)
66
inline bool LMatrix4d::invert_affine_from(LMatrix4d const &other);

3269 15 invert_in_place 0 4 3500 26 LMatrix4d::invert_in_place 0 1 1600 361
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::invert_in_place
//       Access: Public
//  Description: Inverts the current matrix.  Returns true if the
//               inverse is successful, false if the matrix was
//               singular.
////////////////////////////////////////////////////////////////////
45
inline bool LMatrix4d::invert_in_place(void);

3270 10 accumulate 0 4 3500 21 LMatrix4d::accumulate 0 1 1601 252
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::accumulate
//       Access: Public
//  Description: Computes (*this) += other * weight.
////////////////////////////////////////////////////////////////////
73
inline void LMatrix4d::accumulate(LMatrix4d const &other, double weight);

3271 9 ident_mat 0 4 3500 20 LMatrix4d::ident_mat 0 1 1602 388
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::ident_mat
//       Access: Public, Static
//  Description: Returns an identity matrix.
//
//               This function definition must appear first, since
//               some inline functions below take advantage of it.
////////////////////////////////////////////////////////////////////
58
static inline LMatrix4d const &LMatrix4d::ident_mat(void);

3272 8 ones_mat 0 4 3500 19 LMatrix4d::ones_mat 0 1 1603 258
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::ones_mat
//       Access: Public, Static
//  Description: Returns an matrix filled with ones.
////////////////////////////////////////////////////////////////////
57
static inline LMatrix4d const &LMatrix4d::ones_mat(void);

3273 9 zeros_mat 0 4 3500 20 LMatrix4d::zeros_mat 0 1 1604 260
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::zeros_mat
//       Access: Public, Static
//  Description: Returns an matrix filled with zeros.
////////////////////////////////////////////////////////////////////
58
static inline LMatrix4d const &LMatrix4d::zeros_mat(void);

3274 17 set_translate_mat 0 4 3500 28 LMatrix4d::set_translate_mat 0 1 1605 303
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_translate_mat
//       Access: Public
//  Description: Fills mat with a matrix that applies the indicated
//               translation.
////////////////////////////////////////////////////////////////////
66
inline void LMatrix4d::set_translate_mat(LVecBase3d const &trans);

3275 14 set_rotate_mat 0 4 3500 25 LMatrix4d::set_rotate_mat 0 1 1606 362
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_rotate_mat
//       Access: Public
//  Description: Sets mat to a matrix that rotates by the given angle
//               in degrees counterclockwise about the indicated
//               vector.
////////////////////////////////////////////////////////////////////
105
void LMatrix4d::set_rotate_mat(double angle, LVecBase3d const &axis, CoordinateSystem cs = ::CS_default);

3276 23 set_rotate_mat_normaxis 0 4 3500 34 LMatrix4d::set_rotate_mat_normaxis 0 1 1607 412
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_rotate_mat_normaxis
//       Access: Public
//  Description: Fills mat with a matrix that rotates by the given
//               angle in degrees counterclockwise about the indicated
//               vector.  Assumes axis has been prenormalized.
////////////////////////////////////////////////////////////////////
114
void LMatrix4d::set_rotate_mat_normaxis(double angle, LVecBase3d const &axis, CoordinateSystem cs = ::CS_default);

3277 13 set_scale_mat 0 4 3500 24 LMatrix4d::set_scale_mat 0 1 1608 319
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_scale_mat
//       Access: Public
//  Description: Fills mat with a matrix that applies the indicated
//               scale in each of the three axes.
////////////////////////////////////////////////////////////////////
62
inline void LMatrix4d::set_scale_mat(LVecBase3d const &scale);

3278 13 set_shear_mat 0 4 3500 24 LMatrix4d::set_shear_mat 0 1 1609 321
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_shear_mat
//       Access: Public
//  Description: Fills mat with a matrix that applies the indicated
//               shear in each of the three planes.
////////////////////////////////////////////////////////////////////
98
inline void LMatrix4d::set_shear_mat(LVecBase3d const &shear, CoordinateSystem cs = ::CS_default);

3279 19 set_scale_shear_mat 0 4 3500 30 LMatrix4d::set_scale_shear_mat 0 1 1610 317
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_scale_shear_mat
//       Access: Public, Static
//  Description: Fills mat with a matrix that applies the indicated
//               scale and shear.
////////////////////////////////////////////////////////////////////
129
inline void LMatrix4d::set_scale_shear_mat(LVecBase3d const &scale, LVecBase3d const &shear, CoordinateSystem cs = ::CS_default);

3280 13 translate_mat 0 4 3500 24 LMatrix4d::translate_mat 0 2 1611 1612 602
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::translate_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               translation.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::translate_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               translation.
////////////////////////////////////////////////////////////////////
157
static inline LMatrix4d LMatrix4d::translate_mat(LVecBase3d const &trans);
static inline LMatrix4d LMatrix4d::translate_mat(double tx, double ty, double tz);

3281 10 rotate_mat 0 4 3500 21 LMatrix4d::rotate_mat 0 1 1613 345
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat
//       Access: Public, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise about the indicated vector.
////////////////////////////////////////////////////////////////////
120
static inline LMatrix4d LMatrix4d::rotate_mat(double angle, LVecBase3d const &axis, CoordinateSystem cs = ::CS_default);

3282 19 rotate_mat_normaxis 0 4 3500 30 LMatrix4d::rotate_mat_normaxis 0 1 1614 408
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat_normaxis
//       Access: Public, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise about the indicated vector.
//               Assumes axis has been prenormalized.
////////////////////////////////////////////////////////////////////
129
static inline LMatrix4d LMatrix4d::rotate_mat_normaxis(double angle, LVecBase3d const &axis, CoordinateSystem cs = ::CS_default);

3283 9 scale_mat 0 4 3500 20 LMatrix4d::scale_mat 0 3 1615 1616 1617 934
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the three axes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the three axes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               uniform scale.
////////////////////////////////////////////////////////////////////
209
static inline LMatrix4d LMatrix4d::scale_mat(LVecBase3d const &scale);
static inline LMatrix4d LMatrix4d::scale_mat(double sx, double sy, double sz);
static inline LMatrix4d LMatrix4d::scale_mat(double scale);

3284 9 shear_mat 0 4 3500 20 LMatrix4d::shear_mat 0 2 1618 1619 638
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               shear in each of the three planes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               shear in each of the three planes.
////////////////////////////////////////////////////////////////////
227
static inline LMatrix4d LMatrix4d::shear_mat(LVecBase3d const &shear, CoordinateSystem cs = ::CS_default);
static inline LMatrix4d LMatrix4d::shear_mat(double shxy, double shxz, double shyz, CoordinateSystem cs = ::CS_default);

3285 15 scale_shear_mat 0 4 3500 26 LMatrix4d::scale_shear_mat 0 2 1620 1621 614
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale and shear.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale and shear.
////////////////////////////////////////////////////////////////////
297
static inline LMatrix4d LMatrix4d::scale_shear_mat(LVecBase3d const &scale, LVecBase3d const &shear, CoordinateSystem cs = ::CS_default);
static inline LMatrix4d LMatrix4d::scale_shear_mat(double sx, double sy, double sz, double shxy, double shxz, double shyz, CoordinateSystem cs = ::CS_default);

3286 13 y_to_z_up_mat 0 4 3500 24 LMatrix4d::y_to_z_up_mat 0 1 1622 339
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::y_to_z_up_mat
//       Access: Public, Static
//  Description: Returns a matrix that transforms from the Y-up
//               coordinate system to the Z-up coordinate system.
////////////////////////////////////////////////////////////////////
62
static inline LMatrix4d const &LMatrix4d::y_to_z_up_mat(void);

3287 13 z_to_y_up_mat 0 4 3500 24 LMatrix4d::z_to_y_up_mat 0 1 1623 339
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::z_to_y_up_mat
//       Access: Public, Static
//  Description: Returns a matrix that transforms from the Y-up
//               coordinate system to the Z-up coordinate system.
////////////////////////////////////////////////////////////////////
62
static inline LMatrix4d const &LMatrix4d::z_to_y_up_mat(void);

3288 11 convert_mat 0 4 3500 22 LMatrix4d::convert_mat 0 1 1624 347
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::convert_mat
//       Access: Public, Static
//  Description: Returns a matrix that transforms from the indicated
//               coordinate system to the indicated coordinate system.
////////////////////////////////////////////////////////////////////
91
static LMatrix4d const &LMatrix4d::convert_mat(CoordinateSystem from, CoordinateSystem to);

3289 12 almost_equal 0 4 3500 23 LMatrix4d::almost_equal 0 2 1625 1626 793
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::almost_equal
//       Access: Public
//  Description: Returns true if two matrices are memberwise equal
//               within a default tolerance based on the numeric type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::almost_equal
//       Access: Public
//  Description: Returns true if two matrices are memberwise equal
//               within a specified tolerance.  This is faster than
//               the equivalence operator as this doesn't have to
//               guarantee that it is transitive.
////////////////////////////////////////////////////////////////////
144
bool LMatrix4d::almost_equal(LMatrix4d const &other, double threshold) const;
inline bool LMatrix4d::almost_equal(LMatrix4d const &other) const;

3290 6 output 0 4 3500 17 LMatrix4d::output 0 1 1627 212
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::output
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
43
void LMatrix4d::output(ostream &out) const;

3291 5 write 0 4 3500 16 LMatrix4d::write 0 1 1628 211
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::write
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
64
void LMatrix4d::write(ostream &out, int indent_level = 0) const;

3292 8 __repr__ 0 4 3500 19 LMatrix4d::__repr__ 0 1 1629 0
46
inline string LMatrix4d::__repr__(void) const;

3293 13 generate_hash 0 4 3500 24 LMatrix4d::generate_hash 0 2 1630 1631 538
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::generate_hash
//       Access: Public
//  Description: Adds the vector to the indicated hash generator.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::generate_hash
//       Access: Public
//  Description: Adds the vector to the indicated hash generator.
////////////////////////////////////////////////////////////////////
158
inline void LMatrix4d::generate_hash(ChecksumHashGenerator &hashgen) const;
void LMatrix4d::generate_hash(ChecksumHashGenerator &hashgen, double scale) const;

3294 20 write_datagram_fixed 0 4 3500 31 LMatrix4d::write_datagram_fixed 0 1 1632 641
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::write_datagram_fixed
//       Access: Published
//  Description: Writes the matrix to the Datagram using add_float32()
//               or add_float64(), depending on the type of floats in
//               the matrix, regardless of the setting of
//               Datagram::set_stdfloat_double().  This is appropriate
//               when you want to write a fixed-width value to the
//               datagram, especially when you are not writing a bam
//               file.
////////////////////////////////////////////////////////////////////
66
void LMatrix4d::write_datagram_fixed(Datagram &destination) const;

3295 19 read_datagram_fixed 0 4 3500 30 LMatrix4d::read_datagram_fixed 0 1 1633 347
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::read_datagram_fixed
//       Access: Published
//  Description: Reads the matrix from the Datagram using get_float32()
//               or get_float64().  See write_datagram_fixed().
////////////////////////////////////////////////////////////////////
60
void LMatrix4d::read_datagram_fixed(DatagramIterator &scan);

3296 14 write_datagram 0 4 3500 25 LMatrix4d::write_datagram 0 1 1634 463
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::write_datagram
//       Access: Published
//  Description: Writes the matrix to the Datagram using
//               add_stdfloat().  This is appropriate when you want to
//               write the matrix using the standard width setting,
//               especially when you are writing a bam file.
////////////////////////////////////////////////////////////////////
60
void LMatrix4d::write_datagram(Datagram &destination) const;

3297 13 read_datagram 0 4 3500 24 LMatrix4d::read_datagram 0 1 1635 279
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::read_datagram
//       Access: Published
//  Description: Reads the matrix from the Datagram using get_stdfloat().
////////////////////////////////////////////////////////////////////
56
void LMatrix4d::read_datagram(DatagramIterator &source);

3298 14 get_class_type 0 4 3500 25 LMatrix4d::get_class_type 0 1 1636 0
50
static TypeHandle LMatrix4d::get_class_type(void);

3299 10 ~LMatrix4d 0 4 3500 21 LMatrix4d::~LMatrix4d 0 0 0
28
LMatrix4d::~LMatrix4d(void);

3300 18 UnalignedLMatrix4d 0 4 3504 38 UnalignedLMatrix4d::UnalignedLMatrix4d 0 4 1642 1643 1644 1645 928
////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
440
inline UnalignedLMatrix4d::UnalignedLMatrix4d(void);
inline UnalignedLMatrix4d::UnalignedLMatrix4d(LMatrix4d const &copy);
inline UnalignedLMatrix4d::UnalignedLMatrix4d(UnalignedLMatrix4d const &copy);
inline UnalignedLMatrix4d::UnalignedLMatrix4d(double e00, double e01, double e02, double e03, double e10, double e11, double e12, double e13, double e20, double e21, double e22, double e23, double e30, double e31, double e32, double e33);

3301 10 operator = 0 4 3504 30 UnalignedLMatrix4d::operator = 0 2 1646 1647 480
////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
172
inline UnalignedLMatrix4d &UnalignedLMatrix4d::operator =(LMatrix4d const &copy);
inline UnalignedLMatrix4d &UnalignedLMatrix4d::operator =(UnalignedLMatrix4d const &copy);

3302 3 set 0 4 3504 23 UnalignedLMatrix4d::set 0 1 1648 221
////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::set
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
228
inline void UnalignedLMatrix4d::set(double e00, double e01, double e02, double e03, double e10, double e11, double e12, double e13, double e20, double e21, double e22, double e23, double e30, double e31, double e32, double e33);

3303 11 operator () 0 4 3504 31 UnalignedLMatrix4d::operator () 0 2 1649 1650 235
////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::Indexing operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
136
inline double &UnalignedLMatrix4d::operator ()(int row, int col);
inline double UnalignedLMatrix4d::operator ()(int row, int col) const;

3304 8 get_data 0 4 3504 28 UnalignedLMatrix4d::get_data 0 1 1651 410
////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::get_data
//       Access: Published
//  Description: Returns the address of the first of the nine data
//               elements in the matrix.  The remaining elements
//               occupy the next eight positions in row-major order.
////////////////////////////////////////////////////////////////////
62
inline double const *UnalignedLMatrix4d::get_data(void) const;

3305 18 get_num_components 0 4 3504 38 UnalignedLMatrix4d::get_num_components 0 1 1652 291
////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::get_num_components
//       Access: Published
//  Description: Returns the number of elements in the matrix, sixteen.
////////////////////////////////////////////////////////////////////
62
inline int UnalignedLMatrix4d::get_num_components(void) const;

3306 14 get_class_type 0 4 3504 34 UnalignedLMatrix4d::get_class_type 0 1 1653 0
59
static TypeHandle UnalignedLMatrix4d::get_class_type(void);

3307 19 ~UnalignedLMatrix4d 0 4 3504 39 UnalignedLMatrix4d::~UnalignedLMatrix4d 0 0 0
46
UnalignedLMatrix4d::~UnalignedLMatrix4d(void);

3308 10 operator * 0 1 0 10 operator * 0 24 1839 1840 1841 1842 1843 1844 1845 1846 1847 1848 1849 1850 1851 1852 1853 1854 1855 1856 1857 1858 1859 1860 1861 1862 0
1659
inline LVecBase3f operator *(LVecBase3f const &v, LMatrix3f const &m);
inline LVector3f operator *(LVector3f const &v, LMatrix3f const &m);
inline LPoint3f operator *(LPoint3f const &v, LMatrix3f const &m);
inline LVector2f operator *(LVector2f const &v, LMatrix3f const &m);
inline LPoint2f operator *(LPoint2f const &v, LMatrix3f const &m);
inline LVecBase4f operator *(LVecBase4f const &v, LMatrix4f const &m);
inline LPoint4f operator *(LPoint4f const &v, LMatrix4f const &m);
inline LVector4f operator *(LVector4f const &v, LMatrix4f const &m);
inline LVector3f operator *(LVector3f const &v, LMatrix4f const &m);
inline LPoint3f operator *(LPoint3f const &v, LMatrix4f const &m);
inline LVecBase3d operator *(LVecBase3d const &v, LMatrix3d const &m);
inline LVector3d operator *(LVector3d const &v, LMatrix3d const &m);
inline LPoint3d operator *(LPoint3d const &v, LMatrix3d const &m);
inline LVector2d operator *(LVector2d const &v, LMatrix3d const &m);
inline LPoint2d operator *(LPoint2d const &v, LMatrix3d const &m);
inline LVecBase4d operator *(LVecBase4d const &v, LMatrix4d const &m);
inline LPoint4d operator *(LPoint4d const &v, LMatrix4d const &m);
inline LVector4d operator *(LVector4d const &v, LMatrix4d const &m);
inline LVector3d operator *(LVector3d const &v, LMatrix4d const &m);
inline LPoint3d operator *(LPoint3d const &v, LMatrix4d const &m);
inline LMatrix3f operator *(LMatrix3f const &m, LQuaternionf const &q);
inline LMatrix4f operator *(LMatrix4f const &m, LQuaternionf const &q);
inline LMatrix3d operator *(LMatrix3d const &m, LQuaterniond const &q);
inline LMatrix4d operator *(LMatrix4d const &m, LQuaterniond const &q);

3309 11 operator *= 0 1 0 11 operator *= 0 16 1863 1864 1865 1866 1867 1868 1869 1870 1871 1872 1873 1874 1875 1876 1877 1878 0
941
inline void operator *=(LVecBase3f &v, LMatrix3f const &m);
inline void operator *=(LVector3f &v, LMatrix3f const &m);
inline void operator *=(LPoint3f &v, LMatrix3f const &m);
inline void operator *=(LVector2f &v, LMatrix3f const &m);
inline void operator *=(LPoint2f &v, LMatrix3f const &m);
inline void operator *=(LVecBase4f &v, LMatrix4f const &m);
inline void operator *=(LVector3f &v, LMatrix4f const &m);
inline void operator *=(LPoint3f &v, LMatrix4f const &m);
inline void operator *=(LVecBase3d &v, LMatrix3d const &m);
inline void operator *=(LVector3d &v, LMatrix3d const &m);
inline void operator *=(LPoint3d &v, LMatrix3d const &m);
inline void operator *=(LVector2d &v, LMatrix3d const &m);
inline void operator *=(LPoint2d &v, LMatrix3d const &m);
inline void operator *=(LVecBase4d &v, LMatrix4d const &m);
inline void operator *=(LVector3d &v, LMatrix4d const &m);
inline void operator *=(LPoint3d &v, LMatrix4d const &m);

3310 22 generic_write_datagram 0 1 0 22 generic_write_datagram 0 4 1879 1880 1881 1882 0
303
inline void generic_write_datagram(Datagram &dest, LMatrix3f const &value);
inline void generic_write_datagram(Datagram &dest, LMatrix4f const &value);
inline void generic_write_datagram(Datagram &dest, LMatrix3d const &value);
inline void generic_write_datagram(Datagram &dest, LMatrix4d const &value);

3311 21 generic_read_datagram 0 1 0 21 generic_read_datagram 0 4 1883 1884 1885 1886 0
319
inline void generic_read_datagram(LMatrix3f &result, DatagramIterator &source);
inline void generic_read_datagram(LMatrix4f &result, DatagramIterator &source);
inline void generic_read_datagram(LMatrix3d &result, DatagramIterator &source);
inline void generic_read_datagram(LMatrix4d &result, DatagramIterator &source);

3312 14 compose_matrix 0 1 0 14 compose_matrix 0 10 1887 1888 1889 1890 1891 1892 1893 1894 1895 1896 0
1498
inline void compose_matrix(LMatrix3f &mat, LVecBase3f const &scale, LVecBase3f const &shear, LVecBase3f const &hpr, CoordinateSystem cs = ::CS_default);
inline void compose_matrix(LMatrix4f &mat, LVecBase3f const &scale, LVecBase3f const &shear, LVecBase3f const &hpr, LVecBase3f const &translate, CoordinateSystem cs = ::CS_default);
inline void compose_matrix(LMatrix4f &mat, float const components[::num_matrix_components], CoordinateSystem cs = ::CS_default);
inline void compose_matrix(LMatrix3f &mat, LVecBase3f const &scale, LVecBase3f const &hpr, CoordinateSystem cs = ::CS_default);
inline void compose_matrix(LMatrix4f &mat, LVecBase3f const &scale, LVecBase3f const &hpr, LVecBase3f const &translate, CoordinateSystem cs = ::CS_default);
inline void compose_matrix(LMatrix3d &mat, LVecBase3d const &scale, LVecBase3d const &shear, LVecBase3d const &hpr, CoordinateSystem cs = ::CS_default);
inline void compose_matrix(LMatrix4d &mat, LVecBase3d const &scale, LVecBase3d const &shear, LVecBase3d const &hpr, LVecBase3d const &translate, CoordinateSystem cs = ::CS_default);
inline void compose_matrix(LMatrix4d &mat, double const components[::num_matrix_components], CoordinateSystem cs = ::CS_default);
inline void compose_matrix(LMatrix3d &mat, LVecBase3d const &scale, LVecBase3d const &hpr, CoordinateSystem cs = ::CS_default);
inline void compose_matrix(LMatrix4d &mat, LVecBase3d const &scale, LVecBase3d const &hpr, LVecBase3d const &translate, CoordinateSystem cs = ::CS_default);

3313 16 decompose_matrix 0 1 0 16 decompose_matrix 0 10 1897 1898 1899 1900 1901 1902 1903 1904 1905 1906 0
1422
inline bool decompose_matrix(LMatrix3f const &mat, LVecBase3f &scale, LVecBase3f &shear, LVecBase3f &hpr, CoordinateSystem cs = ::CS_default);
inline bool decompose_matrix(LMatrix4f const &mat, LVecBase3f &scale, LVecBase3f &shear, LVecBase3f &hpr, LVecBase3f &translate, CoordinateSystem cs = ::CS_default);
inline bool decompose_matrix(LMatrix4f const &mat, float components[::num_matrix_components], CoordinateSystem CS = ::CS_default);
inline bool decompose_matrix(LMatrix3f const &mat, LVecBase3f &scale, LVecBase3f &hpr, CoordinateSystem cs = ::CS_default);
inline bool decompose_matrix(LMatrix4f const &mat, LVecBase3f &scale, LVecBase3f &hpr, LVecBase3f &translate, CoordinateSystem cs = ::CS_default);
inline bool decompose_matrix(LMatrix3d const &mat, LVecBase3d &scale, LVecBase3d &shear, LVecBase3d &hpr, CoordinateSystem cs = ::CS_default);
inline bool decompose_matrix(LMatrix4d const &mat, LVecBase3d &scale, LVecBase3d &shear, LVecBase3d &hpr, LVecBase3d &translate, CoordinateSystem cs = ::CS_default);
inline bool decompose_matrix(LMatrix4d const &mat, double components[::num_matrix_components], CoordinateSystem CS = ::CS_default);
inline bool decompose_matrix(LMatrix3d const &mat, LVecBase3d &scale, LVecBase3d &hpr, CoordinateSystem cs = ::CS_default);
inline bool decompose_matrix(LMatrix4d const &mat, LVecBase3d &scale, LVecBase3d &hpr, LVecBase3d &translate, CoordinateSystem cs = ::CS_default);

3314 22 compose_matrix_old_hpr 0 1 0 22 compose_matrix_old_hpr 0 6 1907 1908 1909 1910 1911 1912 0
962
void compose_matrix_old_hpr(LMatrix3f &mat, LVecBase3f const &scale, LVecBase3f const &shear, LVecBase3f const &hpr, CoordinateSystem cs = ::CS_default);
inline void compose_matrix_old_hpr(LMatrix4f &mat, LVecBase3f const &scale, LVecBase3f const &shear, LVecBase3f const &hpr, LVecBase3f const &translate, CoordinateSystem cs = ::CS_default);
inline void compose_matrix_old_hpr(LMatrix4f &mat, float const components[::num_matrix_components], CoordinateSystem cs = ::CS_default);
void compose_matrix_old_hpr(LMatrix3d &mat, LVecBase3d const &scale, LVecBase3d const &shear, LVecBase3d const &hpr, CoordinateSystem cs = ::CS_default);
inline void compose_matrix_old_hpr(LMatrix4d &mat, LVecBase3d const &scale, LVecBase3d const &shear, LVecBase3d const &hpr, LVecBase3d const &translate, CoordinateSystem cs = ::CS_default);
inline void compose_matrix_old_hpr(LMatrix4d &mat, double const components[::num_matrix_components], CoordinateSystem cs = ::CS_default);

3315 24 decompose_matrix_old_hpr 0 1 0 24 decompose_matrix_old_hpr 0 6 1913 1914 1915 1916 1917 1918 0
914
bool decompose_matrix_old_hpr(LMatrix3f const &mat, LVecBase3f &scale, LVecBase3f &shear, LVecBase3f &hpr, CoordinateSystem cs = ::CS_default);
inline bool decompose_matrix_old_hpr(LMatrix4f const &mat, LVecBase3f &scale, LVecBase3f &shear, LVecBase3f &hpr, LVecBase3f &translate, CoordinateSystem cs = ::CS_default);
inline bool decompose_matrix_old_hpr(LMatrix4f const &mat, float components[::num_matrix_components], CoordinateSystem CS = ::CS_default);
bool decompose_matrix_old_hpr(LMatrix3d const &mat, LVecBase3d &scale, LVecBase3d &shear, LVecBase3d &hpr, CoordinateSystem cs = ::CS_default);
inline bool decompose_matrix_old_hpr(LMatrix4d const &mat, LVecBase3d &scale, LVecBase3d &shear, LVecBase3d &hpr, LVecBase3d &translate, CoordinateSystem cs = ::CS_default);
inline bool decompose_matrix_old_hpr(LMatrix4d const &mat, double components[::num_matrix_components], CoordinateSystem CS = ::CS_default);

3316 22 compose_matrix_new_hpr 0 1 0 22 compose_matrix_new_hpr 0 6 1919 1920 1921 1922 1923 1924 0
962
void compose_matrix_new_hpr(LMatrix3f &mat, LVecBase3f const &scale, LVecBase3f const &shear, LVecBase3f const &hpr, CoordinateSystem cs = ::CS_default);
inline void compose_matrix_new_hpr(LMatrix4f &mat, LVecBase3f const &scale, LVecBase3f const &shear, LVecBase3f const &hpr, LVecBase3f const &translate, CoordinateSystem cs = ::CS_default);
inline void compose_matrix_new_hpr(LMatrix4f &mat, float const components[::num_matrix_components], CoordinateSystem cs = ::CS_default);
void compose_matrix_new_hpr(LMatrix3d &mat, LVecBase3d const &scale, LVecBase3d const &shear, LVecBase3d const &hpr, CoordinateSystem cs = ::CS_default);
inline void compose_matrix_new_hpr(LMatrix4d &mat, LVecBase3d const &scale, LVecBase3d const &shear, LVecBase3d const &hpr, LVecBase3d const &translate, CoordinateSystem cs = ::CS_default);
inline void compose_matrix_new_hpr(LMatrix4d &mat, double const components[::num_matrix_components], CoordinateSystem cs = ::CS_default);

3317 24 decompose_matrix_new_hpr 0 1 0 24 decompose_matrix_new_hpr 0 6 1925 1926 1927 1928 1929 1930 0
914
bool decompose_matrix_new_hpr(LMatrix3f const &mat, LVecBase3f &scale, LVecBase3f &shear, LVecBase3f &hpr, CoordinateSystem cs = ::CS_default);
inline bool decompose_matrix_new_hpr(LMatrix4f const &mat, LVecBase3f &scale, LVecBase3f &shear, LVecBase3f &hpr, LVecBase3f &translate, CoordinateSystem cs = ::CS_default);
inline bool decompose_matrix_new_hpr(LMatrix4f const &mat, float components[::num_matrix_components], CoordinateSystem CS = ::CS_default);
bool decompose_matrix_new_hpr(LMatrix3d const &mat, LVecBase3d &scale, LVecBase3d &shear, LVecBase3d &hpr, CoordinateSystem cs = ::CS_default);
inline bool decompose_matrix_new_hpr(LMatrix4d const &mat, LVecBase3d &scale, LVecBase3d &shear, LVecBase3d &hpr, LVecBase3d &translate, CoordinateSystem cs = ::CS_default);
inline bool decompose_matrix_new_hpr(LMatrix4d const &mat, double components[::num_matrix_components], CoordinateSystem CS = ::CS_default);

3318 14 old_to_new_hpr 0 1 0 14 old_to_new_hpr 0 2 1931 1932 0
107
LVecBase3f old_to_new_hpr(LVecBase3f const &old_hpr);
LVecBase3d old_to_new_hpr(LVecBase3d const &old_hpr);

3319 14 new_to_old_hpr 0 1 0 14 new_to_old_hpr 0 2 1933 1934 0
107
LVecBase3f new_to_old_hpr(LVecBase3f const &new_hpr);
LVecBase3d new_to_old_hpr(LVecBase3d const &new_hpr);

3320 12 LQuaternionf 0 4 3506 26 LQuaternionf::LQuaternionf 0 4 1654 1655 1656 1657 904
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Default Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Copy Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Copy Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
233
inline LQuaternionf::LQuaternionf(void);
inline LQuaternionf::LQuaternionf(LVecBase4f const &copy);
inline LQuaternionf::LQuaternionf(float , LVecBase3f const &copy);
inline LQuaternionf::LQuaternionf(float , float , float , float );

3321 14 pure_imaginary 0 4 3506 28 LQuaternionf::pure_imaginary 0 1 1658 228
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::pure_imaginary_quat
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
68
static LQuaternionf LQuaternionf::pure_imaginary(LVector3f const &);

3322 9 conjugate 0 4 3506 23 LQuaternionf::conjugate 0 1 1659 265
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::conjugate
//       Access: Published
//  Description: Returns the complex conjugate of this quat.
////////////////////////////////////////////////////////////////////
56
inline LQuaternionf LQuaternionf::conjugate(void) const;

3323 5 xform 0 4 3506 19 LQuaternionf::xform 0 2 1660 1661 536
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::xform
//       Access: Published
//  Description: Transforms a 3-d vector by the indicated rotation
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::xform
//       Access: Published
//  Description: Transforms a 4-d vector by the indicated rotation
////////////////////////////////////////////////////////////////////
131
inline LVecBase3f LQuaternionf::xform(LVecBase3f const &v) const;
inline LVecBase4f LQuaternionf::xform(LVecBase4f const &v) const;

3324 8 multiply 0 4 3506 22 LQuaternionf::multiply 0 1 1662 255
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::multiply
//       Access: Published
//  Description: actual multiply call (non virtual)
////////////////////////////////////////////////////////////////////
74
inline LQuaternionf LQuaternionf::multiply(LQuaternionf const &rhs) const;

3325 10 operator - 0 68 3506 24 LQuaternionf::operator - 0 1 1663 0
57
inline LQuaternionf LQuaternionf::operator -(void) const;

3326 10 operator + 0 4 3506 24 LQuaternionf::operator + 0 1 1664 0
78
inline LQuaternionf LQuaternionf::operator +(LQuaternionf const &other) const;

3327 10 operator - 0 4 3506 24 LQuaternionf::operator - 0 1 1665 0
78
inline LQuaternionf LQuaternionf::operator -(LQuaternionf const &other) const;

3328 9 angle_rad 0 4 3506 23 LQuaternionf::angle_rad 0 1 1666 369
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::angle_rad
//       Access: Published
//  Description: Returns the angle between the orientation represented
//               by this quaternion and the other one, expressed in
//               radians.
////////////////////////////////////////////////////////////////////
70
inline float LQuaternionf::angle_rad(LQuaternionf const &other) const;

3329 9 angle_deg 0 4 3506 23 LQuaternionf::angle_deg 0 1 1667 369
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::angle_deg
//       Access: Published
//  Description: Returns the angle between the orientation represented
//               by this quaternion and the other one, expressed in
//               degrees.
////////////////////////////////////////////////////////////////////
70
inline float LQuaternionf::angle_deg(LQuaternionf const &other) const;

3330 10 operator * 0 4 3506 24 LQuaternionf::operator * 0 4 1668 1669 1670 1671 0
263
inline LQuaternionf LQuaternionf::operator *(float scalar) const;
inline LQuaternionf LQuaternionf::operator *(LQuaternionf const &) const;
inline LMatrix3f LQuaternionf::operator *(LMatrix3f const &);
inline LMatrix4f LQuaternionf::operator *(LMatrix4f const &);

3331 10 operator / 0 4 3506 24 LQuaternionf::operator / 0 1 1672 0
65
inline LQuaternionf LQuaternionf::operator /(float scalar) const;

3332 11 operator *= 0 4 3506 25 LQuaternionf::operator *= 0 1 1673 237
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Multiply Assignment Operator
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
69
inline LQuaternionf &LQuaternionf::operator *=(LQuaternionf const &);

3333 12 almost_equal 0 4 3506 26 LQuaternionf::almost_equal 0 2 1674 1675 668
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::almost_equal
//       Access: public
//  Description: Returns true if two quaternions are memberwise equal
//               within a default tolerance based on the numeric type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::almost_equal
//       Access: public
//  Description: Returns true if two quaternions are memberwise equal
//               within a specified tolerance.
////////////////////////////////////////////////////////////////////
162
inline bool LQuaternionf::almost_equal(LQuaternionf const &other) const;
inline bool LQuaternionf::almost_equal(LQuaternionf const &other, float threshold) const;

3334 17 is_same_direction 0 4 3506 31 LQuaternionf::is_same_direction 0 1 1676 374
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::is_same_direction
//       Access: public
//  Description: Returns true if two quaternions represent the same
//               rotation within a default tolerance based on the
//               numeric type.
////////////////////////////////////////////////////////////////////
77
inline bool LQuaternionf::is_same_direction(LQuaternionf const &other) const;

3335 21 almost_same_direction 0 4 3506 35 LQuaternionf::almost_same_direction 0 1 1677 337
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::almost_same_direction
//       Access: public
//  Description: Returns true if two quaternions represent the same
//               rotation within a specified tolerance.
////////////////////////////////////////////////////////////////////
98
inline bool LQuaternionf::almost_same_direction(LQuaternionf const &other, float threshold) const;

3336 6 output 0 4 3506 20 LQuaternionf::output 0 1 1678 215
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::output
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
50
inline void LQuaternionf::output(ostream &) const;

3337 17 extract_to_matrix 0 4 3506 31 LQuaternionf::extract_to_matrix 0 2 1679 1680 542
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::extract_to_matrix (LMatrix3)
//       Access: Public
//  Description: Based on the quat lib from VRPN.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::extract_to_matrix (LMatrix4)
//       Access: Public
//  Description: Based on the quat lib from VRPN.
////////////////////////////////////////////////////////////////////
115
void LQuaternionf::extract_to_matrix(LMatrix3f &m) const;
void LQuaternionf::extract_to_matrix(LMatrix4f &m) const;

3338 15 set_from_matrix 0 4 3506 29 LQuaternionf::set_from_matrix 0 2 1681 1682 729
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_from_matrix
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_from_matrix
//       Access: public
//  Description: Sets the quaternion according to the rotation
//               represented by the matrix.  Originally we tried an
//               algorithm presented by Do-While Jones, but that
//               turned out to be broken.  This is based on the quat
//               lib from UNC.
////////////////////////////////////////////////////////////////////
118
void LQuaternionf::set_from_matrix(LMatrix3f const &m);
inline void LQuaternionf::set_from_matrix(LMatrix4f const &m);

3339 7 set_hpr 0 4 3506 21 LQuaternionf::set_hpr 0 1 1683 368
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_hpr
//       Access: public
//  Description: Sets the quaternion as the unit quaternion that
//               is equivalent to these Euler angles.
//               (from Real-time Rendering, p.49)
////////////////////////////////////////////////////////////////////
86
void LQuaternionf::set_hpr(LVecBase3f const &hpr, CoordinateSystem cs = ::CS_default);

3340 7 get_hpr 0 4 3506 21 LQuaternionf::get_hpr 0 1 1684 296
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_hpr
//       Access: public
//  Description: Extracts the equivalent Euler angles from the unit
//               quaternion.
////////////////////////////////////////////////////////////////////
75
LVecBase3f LQuaternionf::get_hpr(CoordinateSystem cs = ::CS_default) const;

3341 8 get_axis 0 4 3506 22 LQuaternionf::get_axis 0 1 1685 432
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_axis
//       Access: Public
//  Description: This, along with get_angle(), returns the rotation
//               represented by the quaternion as an angle about an
//               arbitrary axis.  This returns the axis; it is not
//               normalized.
////////////////////////////////////////////////////////////////////
52
inline LVector3f LQuaternionf::get_axis(void) const;

3342 19 get_axis_normalized 0 4 3506 33 LQuaternionf::get_axis_normalized 0 1 1686 415
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_axis_normalized
//       Access: Public
//  Description: This, along with get_angle(), returns the rotation
//               represented by the quaternion as an angle about an
//               arbitrary axis.  This returns the normalized axis.
////////////////////////////////////////////////////////////////////
63
inline LVector3f LQuaternionf::get_axis_normalized(void) const;

3343 13 get_angle_rad 0 4 3506 27 LQuaternionf::get_angle_rad 0 1 1687 645
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_angle_rad
//       Access: Public
//  Description: This, along with get_axis(), returns the rotation
//               represented by the quaternion as an angle about an
//               arbitrary axis.  This returns the angle, in radians
//               counterclockwise about the axis.
//
//               It is necessary to ensure the quaternion has been
//               normalized (for instance, with a call to normalize())
//               before calling this method.
////////////////////////////////////////////////////////////////////
53
inline float LQuaternionf::get_angle_rad(void) const;

3344 9 get_angle 0 4 3506 23 LQuaternionf::get_angle 0 1 1688 641
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_angle
//       Access: Public
//  Description: This, along with get_axis(), returns the rotation
//               represented by the quaternion as an angle about an
//               arbitrary axis.  This returns the angle, in degrees
//               counterclockwise about the axis.
//
//               It is necessary to ensure the quaternion has been
//               normalized (for instance, with a call to normalize())
//               before calling this method.
////////////////////////////////////////////////////////////////////
49
inline float LQuaternionf::get_angle(void) const;

3345 23 set_from_axis_angle_rad 0 4 3506 37 LQuaternionf::set_from_axis_angle_rad 0 1 1689 324
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_from_axis_angle_rad
//       Access: Public
//  Description: angle_rad is the angle about the axis in radians.
//               axis must be normalized.
////////////////////////////////////////////////////////////////////
90
inline void LQuaternionf::set_from_axis_angle_rad(float angle_rad, LVector3f const &axis);

3346 19 set_from_axis_angle 0 4 3506 33 LQuaternionf::set_from_axis_angle 0 1 1690 324
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_from_axis_angle_deg
//       Access: Public
//  Description: angle_deg is the angle about the axis in degrees.
//               axis must be normalized.
////////////////////////////////////////////////////////////////////
86
inline void LQuaternionf::set_from_axis_angle(float angle_deg, LVector3f const &axis);

3347 6 get_up 0 4 3506 20 LQuaternionf::get_up 0 1 1691 315
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_up
//       Access: Public
//  Description: Returns the orientation represented by this
//               quaternion, expressed as an up vector.
////////////////////////////////////////////////////////////////////
80
inline LVector3f LQuaternionf::get_up(CoordinateSystem cs = ::CS_default) const;

3348 9 get_right 0 4 3506 23 LQuaternionf::get_right 0 1 1692 320
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_right
//       Access: Public
//  Description: Returns the orientation represented by this
//               quaternion, expressed as a right vector.
////////////////////////////////////////////////////////////////////
83
inline LVector3f LQuaternionf::get_right(CoordinateSystem cs = ::CS_default) const;

3349 11 get_forward 0 4 3506 25 LQuaternionf::get_forward 0 1 1693 324
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_forward
//       Access: Public
//  Description: Returns the orientation represented by this
//               quaternion, expressed as a forward vector.
////////////////////////////////////////////////////////////////////
85
inline LVector3f LQuaternionf::get_forward(CoordinateSystem cs = ::CS_default) const;

3350 5 get_r 0 4 3506 19 LQuaternionf::get_r 0 1 1694 214
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_r
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
45
inline float LQuaternionf::get_r(void) const;

3351 5 get_i 0 4 3506 19 LQuaternionf::get_i 0 1 1695 214
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_i
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
45
inline float LQuaternionf::get_i(void) const;

3352 5 get_j 0 4 3506 19 LQuaternionf::get_j 0 1 1696 214
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_j
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
45
inline float LQuaternionf::get_j(void) const;

3353 5 get_k 0 4 3506 19 LQuaternionf::get_k 0 1 1697 214
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_k
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
45
inline float LQuaternionf::get_k(void) const;

3354 5 set_r 0 4 3506 19 LQuaternionf::set_r 0 1 1698 214
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_r
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
41
inline void LQuaternionf::set_r(float r);

3355 5 set_i 0 4 3506 19 LQuaternionf::set_i 0 1 1699 214
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_i
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
41
inline void LQuaternionf::set_i(float i);

3356 5 set_j 0 4 3506 19 LQuaternionf::set_j 0 1 1700 214
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_j
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
41
inline void LQuaternionf::set_j(float j);

3357 5 set_k 0 4 3506 19 LQuaternionf::set_k 0 1 1701 214
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_k
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
41
inline void LQuaternionf::set_k(float k);

3358 9 normalize 0 4 3506 23 LQuaternionf::normalize 0 1 1702 218
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::normalize
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
42
inline bool LQuaternionf::normalize(void);

3359 14 conjugate_from 0 4 3506 28 LQuaternionf::conjugate_from 0 1 1703 817
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::conjugate_from
//       Access: Published
//  Description: Computes the conjugate of the other quat, and stores
//               the result in this quat.  This is a fully general
//               operation and makes no assumptions about the type of
//               transform represented by the quat.
//
//               The other quat must be a different object than this
//               quat.  However, if you need to get a conjugate of a
//               quat in place, see conjugate_in_place.
//
//               The return value is true if the quat was
//               successfully inverted, false if there was a
//               singularity.
////////////////////////////////////////////////////////////////////
68
inline bool LQuaternionf::conjugate_from(LQuaternionf const &other);

3360 18 conjugate_in_place 0 4 3506 32 LQuaternionf::conjugate_in_place 0 1 1704 379
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::conjugate_in_place
//       Access: Published
//  Description: Sets this to be the conjugate of the current quat.
//               Returns true if the successful, false if the quat
//               was singular.
////////////////////////////////////////////////////////////////////
51
inline bool LQuaternionf::conjugate_in_place(void);

3361 11 invert_from 0 4 3506 25 LQuaternionf::invert_from 0 1 1705 794
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::invert_from
//       Access: Public
//  Description: Computes the inverse of the other quat, and stores
//               the result in this quat.  This is a fully general
//               operation and makes no assumptions about the type of
//               transform represented by the quat.
//
//               The other quat must be a different object than this
//               quat.  However, if you need to invert a quat in
//               place, see invert_in_place.
//
//               The return value is true if the quat was
//               successfully inverted, false if there was a
//               singularity.
////////////////////////////////////////////////////////////////////
65
inline bool LQuaternionf::invert_from(LQuaternionf const &other);

3362 15 invert_in_place 0 4 3506 29 LQuaternionf::invert_in_place 0 1 1706 360
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::invert_in_place
//       Access: Public
//  Description: Inverts the current quat.  Returns true if the
//               inverse is successful, false if the quat was
//               singular.
////////////////////////////////////////////////////////////////////
48
inline bool LQuaternionf::invert_in_place(void);

3363 11 is_identity 0 4 3506 25 LQuaternionf::is_identity 0 1 1707 322
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::is_identity
//       Access: Public
//  Description: Returns true if this quaternion represents the
//               identity transformation: no rotation.
////////////////////////////////////////////////////////////////////
50
inline bool LQuaternionf::is_identity(void) const;

3364 18 is_almost_identity 0 4 3506 32 LQuaternionf::is_almost_identity 0 1 1708 341
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::is_almost_identity
//       Access: Public
//  Description: Returns true if this quaternion represents the
//               identity transformation within a given tolerance.
////////////////////////////////////////////////////////////////////
68
inline bool LQuaternionf::is_almost_identity(float tolerance) const;

3365 10 ident_quat 0 4 3506 24 LQuaternionf::ident_quat 0 1 1709 259
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::ident_quat
//       Access: Public, Static
//  Description: Returns an identity quaternion.
////////////////////////////////////////////////////////////////////
65
static inline LQuaternionf const &LQuaternionf::ident_quat(void);

3366 14 get_class_type 0 4 3506 28 LQuaternionf::get_class_type 0 1 1710 0
53
static TypeHandle LQuaternionf::get_class_type(void);

3367 13 ~LQuaternionf 0 4 3506 27 LQuaternionf::~LQuaternionf 0 0 0
34
LQuaternionf::~LQuaternionf(void);

3368 12 LQuaterniond 0 4 3507 26 LQuaterniond::LQuaterniond 0 4 1711 1712 1713 1714 904
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Default Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Copy Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Copy Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
238
inline LQuaterniond::LQuaterniond(void);
inline LQuaterniond::LQuaterniond(LVecBase4d const &copy);
inline LQuaterniond::LQuaterniond(double , LVecBase3d const &copy);
inline LQuaterniond::LQuaterniond(double , double , double , double );

3369 14 pure_imaginary 0 4 3507 28 LQuaterniond::pure_imaginary 0 1 1715 228
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::pure_imaginary_quat
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
68
static LQuaterniond LQuaterniond::pure_imaginary(LVector3d const &);

3370 9 conjugate 0 4 3507 23 LQuaterniond::conjugate 0 1 1716 265
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::conjugate
//       Access: Published
//  Description: Returns the complex conjugate of this quat.
////////////////////////////////////////////////////////////////////
56
inline LQuaterniond LQuaterniond::conjugate(void) const;

3371 5 xform 0 4 3507 19 LQuaterniond::xform 0 2 1717 1718 536
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::xform
//       Access: Published
//  Description: Transforms a 3-d vector by the indicated rotation
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::xform
//       Access: Published
//  Description: Transforms a 4-d vector by the indicated rotation
////////////////////////////////////////////////////////////////////
131
inline LVecBase3d LQuaterniond::xform(LVecBase3d const &v) const;
inline LVecBase4d LQuaterniond::xform(LVecBase4d const &v) const;

3372 8 multiply 0 4 3507 22 LQuaterniond::multiply 0 1 1719 255
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::multiply
//       Access: Published
//  Description: actual multiply call (non virtual)
////////////////////////////////////////////////////////////////////
74
inline LQuaterniond LQuaterniond::multiply(LQuaterniond const &rhs) const;

3373 10 operator - 0 68 3507 24 LQuaterniond::operator - 0 1 1720 0
57
inline LQuaterniond LQuaterniond::operator -(void) const;

3374 10 operator + 0 4 3507 24 LQuaterniond::operator + 0 1 1721 0
78
inline LQuaterniond LQuaterniond::operator +(LQuaterniond const &other) const;

3375 10 operator - 0 4 3507 24 LQuaterniond::operator - 0 1 1722 0
78
inline LQuaterniond LQuaterniond::operator -(LQuaterniond const &other) const;

3376 9 angle_rad 0 4 3507 23 LQuaterniond::angle_rad 0 1 1723 369
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::angle_rad
//       Access: Published
//  Description: Returns the angle between the orientation represented
//               by this quaternion and the other one, expressed in
//               radians.
////////////////////////////////////////////////////////////////////
71
inline double LQuaterniond::angle_rad(LQuaterniond const &other) const;

3377 9 angle_deg 0 4 3507 23 LQuaterniond::angle_deg 0 1 1724 369
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::angle_deg
//       Access: Published
//  Description: Returns the angle between the orientation represented
//               by this quaternion and the other one, expressed in
//               degrees.
////////////////////////////////////////////////////////////////////
71
inline double LQuaterniond::angle_deg(LQuaterniond const &other) const;

3378 10 operator * 0 4 3507 24 LQuaterniond::operator * 0 4 1725 1726 1727 1728 0
264
inline LQuaterniond LQuaterniond::operator *(double scalar) const;
inline LQuaterniond LQuaterniond::operator *(LQuaterniond const &) const;
inline LMatrix3d LQuaterniond::operator *(LMatrix3d const &);
inline LMatrix4d LQuaterniond::operator *(LMatrix4d const &);

3379 10 operator / 0 4 3507 24 LQuaterniond::operator / 0 1 1729 0
66
inline LQuaterniond LQuaterniond::operator /(double scalar) const;

3380 11 operator *= 0 4 3507 25 LQuaterniond::operator *= 0 1 1730 237
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Multiply Assignment Operator
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
69
inline LQuaterniond &LQuaterniond::operator *=(LQuaterniond const &);

3381 12 almost_equal 0 4 3507 26 LQuaterniond::almost_equal 0 2 1731 1732 668
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::almost_equal
//       Access: public
//  Description: Returns true if two quaternions are memberwise equal
//               within a default tolerance based on the numeric type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::almost_equal
//       Access: public
//  Description: Returns true if two quaternions are memberwise equal
//               within a specified tolerance.
////////////////////////////////////////////////////////////////////
163
inline bool LQuaterniond::almost_equal(LQuaterniond const &other) const;
inline bool LQuaterniond::almost_equal(LQuaterniond const &other, double threshold) const;

3382 17 is_same_direction 0 4 3507 31 LQuaterniond::is_same_direction 0 1 1733 374
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::is_same_direction
//       Access: public
//  Description: Returns true if two quaternions represent the same
//               rotation within a default tolerance based on the
//               numeric type.
////////////////////////////////////////////////////////////////////
77
inline bool LQuaterniond::is_same_direction(LQuaterniond const &other) const;

3383 21 almost_same_direction 0 4 3507 35 LQuaterniond::almost_same_direction 0 1 1734 337
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::almost_same_direction
//       Access: public
//  Description: Returns true if two quaternions represent the same
//               rotation within a specified tolerance.
////////////////////////////////////////////////////////////////////
99
inline bool LQuaterniond::almost_same_direction(LQuaterniond const &other, double threshold) const;

3384 6 output 0 4 3507 20 LQuaterniond::output 0 1 1735 215
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::output
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
50
inline void LQuaterniond::output(ostream &) const;

3385 17 extract_to_matrix 0 4 3507 31 LQuaterniond::extract_to_matrix 0 2 1736 1737 542
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::extract_to_matrix (LMatrix3)
//       Access: Public
//  Description: Based on the quat lib from VRPN.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::extract_to_matrix (LMatrix4)
//       Access: Public
//  Description: Based on the quat lib from VRPN.
////////////////////////////////////////////////////////////////////
115
void LQuaterniond::extract_to_matrix(LMatrix3d &m) const;
void LQuaterniond::extract_to_matrix(LMatrix4d &m) const;

3386 15 set_from_matrix 0 4 3507 29 LQuaterniond::set_from_matrix 0 2 1738 1739 729
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_from_matrix
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_from_matrix
//       Access: public
//  Description: Sets the quaternion according to the rotation
//               represented by the matrix.  Originally we tried an
//               algorithm presented by Do-While Jones, but that
//               turned out to be broken.  This is based on the quat
//               lib from UNC.
////////////////////////////////////////////////////////////////////
118
void LQuaterniond::set_from_matrix(LMatrix3d const &m);
inline void LQuaterniond::set_from_matrix(LMatrix4d const &m);

3387 7 set_hpr 0 4 3507 21 LQuaterniond::set_hpr 0 1 1740 368
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_hpr
//       Access: public
//  Description: Sets the quaternion as the unit quaternion that
//               is equivalent to these Euler angles.
//               (from Real-time Rendering, p.49)
////////////////////////////////////////////////////////////////////
86
void LQuaterniond::set_hpr(LVecBase3d const &hpr, CoordinateSystem cs = ::CS_default);

3388 7 get_hpr 0 4 3507 21 LQuaterniond::get_hpr 0 1 1741 296
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_hpr
//       Access: public
//  Description: Extracts the equivalent Euler angles from the unit
//               quaternion.
////////////////////////////////////////////////////////////////////
75
LVecBase3d LQuaterniond::get_hpr(CoordinateSystem cs = ::CS_default) const;

3389 8 get_axis 0 4 3507 22 LQuaterniond::get_axis 0 1 1742 432
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_axis
//       Access: Public
//  Description: This, along with get_angle(), returns the rotation
//               represented by the quaternion as an angle about an
//               arbitrary axis.  This returns the axis; it is not
//               normalized.
////////////////////////////////////////////////////////////////////
52
inline LVector3d LQuaterniond::get_axis(void) const;

3390 19 get_axis_normalized 0 4 3507 33 LQuaterniond::get_axis_normalized 0 1 1743 415
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_axis_normalized
//       Access: Public
//  Description: This, along with get_angle(), returns the rotation
//               represented by the quaternion as an angle about an
//               arbitrary axis.  This returns the normalized axis.
////////////////////////////////////////////////////////////////////
63
inline LVector3d LQuaterniond::get_axis_normalized(void) const;

3391 13 get_angle_rad 0 4 3507 27 LQuaterniond::get_angle_rad 0 1 1744 645
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_angle_rad
//       Access: Public
//  Description: This, along with get_axis(), returns the rotation
//               represented by the quaternion as an angle about an
//               arbitrary axis.  This returns the angle, in radians
//               counterclockwise about the axis.
//
//               It is necessary to ensure the quaternion has been
//               normalized (for instance, with a call to normalize())
//               before calling this method.
////////////////////////////////////////////////////////////////////
54
inline double LQuaterniond::get_angle_rad(void) const;

3392 9 get_angle 0 4 3507 23 LQuaterniond::get_angle 0 1 1745 641
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_angle
//       Access: Public
//  Description: This, along with get_axis(), returns the rotation
//               represented by the quaternion as an angle about an
//               arbitrary axis.  This returns the angle, in degrees
//               counterclockwise about the axis.
//
//               It is necessary to ensure the quaternion has been
//               normalized (for instance, with a call to normalize())
//               before calling this method.
////////////////////////////////////////////////////////////////////
50
inline double LQuaterniond::get_angle(void) const;

3393 23 set_from_axis_angle_rad 0 4 3507 37 LQuaterniond::set_from_axis_angle_rad 0 1 1746 324
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_from_axis_angle_rad
//       Access: Public
//  Description: angle_rad is the angle about the axis in radians.
//               axis must be normalized.
////////////////////////////////////////////////////////////////////
91
inline void LQuaterniond::set_from_axis_angle_rad(double angle_rad, LVector3d const &axis);

3394 19 set_from_axis_angle 0 4 3507 33 LQuaterniond::set_from_axis_angle 0 1 1747 324
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_from_axis_angle_deg
//       Access: Public
//  Description: angle_deg is the angle about the axis in degrees.
//               axis must be normalized.
////////////////////////////////////////////////////////////////////
87
inline void LQuaterniond::set_from_axis_angle(double angle_deg, LVector3d const &axis);

3395 6 get_up 0 4 3507 20 LQuaterniond::get_up 0 1 1748 315
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_up
//       Access: Public
//  Description: Returns the orientation represented by this
//               quaternion, expressed as an up vector.
////////////////////////////////////////////////////////////////////
80
inline LVector3d LQuaterniond::get_up(CoordinateSystem cs = ::CS_default) const;

3396 9 get_right 0 4 3507 23 LQuaterniond::get_right 0 1 1749 320
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_right
//       Access: Public
//  Description: Returns the orientation represented by this
//               quaternion, expressed as a right vector.
////////////////////////////////////////////////////////////////////
83
inline LVector3d LQuaterniond::get_right(CoordinateSystem cs = ::CS_default) const;

3397 11 get_forward 0 4 3507 25 LQuaterniond::get_forward 0 1 1750 324
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_forward
//       Access: Public
//  Description: Returns the orientation represented by this
//               quaternion, expressed as a forward vector.
////////////////////////////////////////////////////////////////////
85
inline LVector3d LQuaterniond::get_forward(CoordinateSystem cs = ::CS_default) const;

3398 5 get_r 0 4 3507 19 LQuaterniond::get_r 0 1 1751 214
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_r
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
46
inline double LQuaterniond::get_r(void) const;

3399 5 get_i 0 4 3507 19 LQuaterniond::get_i 0 1 1752 214
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_i
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
46
inline double LQuaterniond::get_i(void) const;

3400 5 get_j 0 4 3507 19 LQuaterniond::get_j 0 1 1753 214
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_j
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
46
inline double LQuaterniond::get_j(void) const;

3401 5 get_k 0 4 3507 19 LQuaterniond::get_k 0 1 1754 214
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_k
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
46
inline double LQuaterniond::get_k(void) const;

3402 5 set_r 0 4 3507 19 LQuaterniond::set_r 0 1 1755 214
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_r
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
42
inline void LQuaterniond::set_r(double r);

3403 5 set_i 0 4 3507 19 LQuaterniond::set_i 0 1 1756 214
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_i
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
42
inline void LQuaterniond::set_i(double i);

3404 5 set_j 0 4 3507 19 LQuaterniond::set_j 0 1 1757 214
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_j
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
42
inline void LQuaterniond::set_j(double j);

3405 5 set_k 0 4 3507 19 LQuaterniond::set_k 0 1 1758 214
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_k
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
42
inline void LQuaterniond::set_k(double k);

3406 9 normalize 0 4 3507 23 LQuaterniond::normalize 0 1 1759 218
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::normalize
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
42
inline bool LQuaterniond::normalize(void);

3407 14 conjugate_from 0 4 3507 28 LQuaterniond::conjugate_from 0 1 1760 817
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::conjugate_from
//       Access: Published
//  Description: Computes the conjugate of the other quat, and stores
//               the result in this quat.  This is a fully general
//               operation and makes no assumptions about the type of
//               transform represented by the quat.
//
//               The other quat must be a different object than this
//               quat.  However, if you need to get a conjugate of a
//               quat in place, see conjugate_in_place.
//
//               The return value is true if the quat was
//               successfully inverted, false if there was a
//               singularity.
////////////////////////////////////////////////////////////////////
68
inline bool LQuaterniond::conjugate_from(LQuaterniond const &other);

3408 18 conjugate_in_place 0 4 3507 32 LQuaterniond::conjugate_in_place 0 1 1761 379
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::conjugate_in_place
//       Access: Published
//  Description: Sets this to be the conjugate of the current quat.
//               Returns true if the successful, false if the quat
//               was singular.
////////////////////////////////////////////////////////////////////
51
inline bool LQuaterniond::conjugate_in_place(void);

3409 11 invert_from 0 4 3507 25 LQuaterniond::invert_from 0 1 1762 794
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::invert_from
//       Access: Public
//  Description: Computes the inverse of the other quat, and stores
//               the result in this quat.  This is a fully general
//               operation and makes no assumptions about the type of
//               transform represented by the quat.
//
//               The other quat must be a different object than this
//               quat.  However, if you need to invert a quat in
//               place, see invert_in_place.
//
//               The return value is true if the quat was
//               successfully inverted, false if there was a
//               singularity.
////////////////////////////////////////////////////////////////////
65
inline bool LQuaterniond::invert_from(LQuaterniond const &other);

3410 15 invert_in_place 0 4 3507 29 LQuaterniond::invert_in_place 0 1 1763 360
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::invert_in_place
//       Access: Public
//  Description: Inverts the current quat.  Returns true if the
//               inverse is successful, false if the quat was
//               singular.
////////////////////////////////////////////////////////////////////
48
inline bool LQuaterniond::invert_in_place(void);

3411 11 is_identity 0 4 3507 25 LQuaterniond::is_identity 0 1 1764 322
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::is_identity
//       Access: Public
//  Description: Returns true if this quaternion represents the
//               identity transformation: no rotation.
////////////////////////////////////////////////////////////////////
50
inline bool LQuaterniond::is_identity(void) const;

3412 18 is_almost_identity 0 4 3507 32 LQuaterniond::is_almost_identity 0 1 1765 341
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::is_almost_identity
//       Access: Public
//  Description: Returns true if this quaternion represents the
//               identity transformation within a given tolerance.
////////////////////////////////////////////////////////////////////
69
inline bool LQuaterniond::is_almost_identity(double tolerance) const;

3413 10 ident_quat 0 4 3507 24 LQuaterniond::ident_quat 0 1 1766 259
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::ident_quat
//       Access: Public, Static
//  Description: Returns an identity quaternion.
////////////////////////////////////////////////////////////////////
65
static inline LQuaterniond const &LQuaterniond::ident_quat(void);

3414 14 get_class_type 0 4 3507 28 LQuaterniond::get_class_type 0 1 1767 0
53
static TypeHandle LQuaterniond::get_class_type(void);

3415 13 ~LQuaterniond 0 4 3507 27 LQuaterniond::~LQuaterniond 0 0 0
34
LQuaterniond::~LQuaterniond(void);

3416 10 LRotationf 0 4 3508 22 LRotationf::LRotationf 0 8 1768 1769 1770 1771 1772 1773 1774 1775 1867
////////////////////////////////////////////////////////////////////
//     Function: LRotation::Default Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LRotation::Copy Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LRotation::Copy Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LRotation::Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LRotation::Constructor
//       Access: public
//  Description: lmatrix3
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LRotation::Constructor
//       Access: public
//  Description: lmatrix4
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LRotation::Constructor
//       Access: public
//  Description: axis + angle (in degrees)
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LRotation::Constructor
//       Access: public
//  Description: Sets the rotation from the given Euler angles.
////////////////////////////////////////////////////////////////////
420
inline LRotationf::LRotationf(void);
inline LRotationf::LRotationf(LQuaternionf const &);
inline LRotationf::LRotationf(LVecBase4f const &copy);
inline LRotationf::LRotationf(float , float , float , float );
inline LRotationf::LRotationf(LVector3f const &, float );
inline LRotationf::LRotationf(LMatrix3f const &);
inline LRotationf::LRotationf(LMatrix4f const &);
inline LRotationf::LRotationf(float , float , float );

3417 10 operator * 0 4 3508 22 LRotationf::operator * 0 3 1776 1777 1778 0
211
inline LRotationf LRotationf::operator *(float scalar) const;
inline LRotationf LRotationf::operator *(LRotationf const &other) const;
inline LQuaternionf LRotationf::operator *(LQuaternionf const &other) const;

3418 10 operator / 0 4 3508 22 LRotationf::operator / 0 1 1779 0
61
inline LRotationf LRotationf::operator /(float scalar) const;

3419 14 get_class_type 0 4 3508 26 LRotationf::get_class_type 0 1 1780 0
51
static TypeHandle LRotationf::get_class_type(void);

3420 11 ~LRotationf 0 4 3508 23 LRotationf::~LRotationf 0 0 0
30
LRotationf::~LRotationf(void);

3421 10 LRotationd 0 4 3509 22 LRotationd::LRotationd 0 8 1781 1782 1783 1784 1785 1786 1787 1788 1867
////////////////////////////////////////////////////////////////////
//     Function: LRotation::Default Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LRotation::Copy Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LRotation::Copy Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LRotation::Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LRotation::Constructor
//       Access: public
//  Description: lmatrix3
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LRotation::Constructor
//       Access: public
//  Description: lmatrix4
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LRotation::Constructor
//       Access: public
//  Description: axis + angle (in degrees)
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LRotation::Constructor
//       Access: public
//  Description: Sets the rotation from the given Euler angles.
////////////////////////////////////////////////////////////////////
428
inline LRotationd::LRotationd(void);
inline LRotationd::LRotationd(LQuaterniond const &);
inline LRotationd::LRotationd(LVecBase4d const &copy);
inline LRotationd::LRotationd(double , double , double , double );
inline LRotationd::LRotationd(LVector3d const &, double );
inline LRotationd::LRotationd(LMatrix3d const &);
inline LRotationd::LRotationd(LMatrix4d const &);
inline LRotationd::LRotationd(double , double , double );

3422 10 operator * 0 4 3509 22 LRotationd::operator * 0 3 1789 1790 1791 0
212
inline LRotationd LRotationd::operator *(double scalar) const;
inline LRotationd LRotationd::operator *(LRotationd const &other) const;
inline LQuaterniond LRotationd::operator *(LQuaterniond const &other) const;

3423 10 operator / 0 4 3509 22 LRotationd::operator / 0 1 1792 0
62
inline LRotationd LRotationd::operator /(double scalar) const;

3424 14 get_class_type 0 4 3509 26 LRotationd::get_class_type 0 1 1793 0
51
static TypeHandle LRotationd::get_class_type(void);

3425 11 ~LRotationd 0 4 3509 23 LRotationd::~LRotationd 0 0 0
30
LRotationd::~LRotationd(void);

3426 13 LOrientationf 0 4 3510 28 LOrientationf::LOrientationf 0 6 1794 1795 1796 1797 1798 1799 1380
////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Default Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Copy Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Constructor
//       Access: public
//  Description: vector + twist
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Constructor
//       Access: public
//  Description: matrix3
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Constructor
//       Access: public
//  Description: matrix4
////////////////////////////////////////////////////////////////////
346
inline LOrientationf::LOrientationf(void);
inline LOrientationf::LOrientationf(LQuaternionf const &);
inline LOrientationf::LOrientationf(float , float , float , float );
inline LOrientationf::LOrientationf(LVector3f const &, float );
inline LOrientationf::LOrientationf(LMatrix3f const &);
inline LOrientationf::LOrientationf(LMatrix4f const &);

3427 10 operator * 0 4 3510 25 LOrientationf::operator * 0 2 1800 1801 0
159
inline LOrientationf LOrientationf::operator *(LRotationf const &other) const;
inline LOrientationf LOrientationf::operator *(LQuaternionf const &other) const;

3428 14 get_class_type 0 4 3510 29 LOrientationf::get_class_type 0 1 1802 0
54
static TypeHandle LOrientationf::get_class_type(void);

3429 14 ~LOrientationf 0 4 3510 29 LOrientationf::~LOrientationf 0 0 0
36
LOrientationf::~LOrientationf(void);

3430 13 LOrientationd 0 4 3511 28 LOrientationd::LOrientationd 0 6 1803 1804 1805 1806 1807 1808 1380
////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Default Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Copy Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Constructor
//       Access: public
//  Description: vector + twist
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Constructor
//       Access: public
//  Description: matrix3
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Constructor
//       Access: public
//  Description: matrix4
////////////////////////////////////////////////////////////////////
350
inline LOrientationd::LOrientationd(void);
inline LOrientationd::LOrientationd(LQuaterniond const &);
inline LOrientationd::LOrientationd(double , double , double , double );
inline LOrientationd::LOrientationd(LVector3d const &, float );
inline LOrientationd::LOrientationd(LMatrix3d const &);
inline LOrientationd::LOrientationd(LMatrix4d const &);

3431 10 operator * 0 4 3511 25 LOrientationd::operator * 0 2 1809 1810 0
159
inline LOrientationd LOrientationd::operator *(LRotationd const &other) const;
inline LOrientationd LOrientationd::operator *(LQuaterniond const &other) const;

3432 14 get_class_type 0 4 3511 29 LOrientationd::get_class_type 0 1 1811 0
54
static TypeHandle LOrientationd::get_class_type(void);

3433 14 ~LOrientationd 0 4 3511 29 LOrientationd::~LOrientationd 0 0 0
36
LOrientationd::~LOrientationd(void);

3434 19 ConfigVariableColor 0 4 3582 40 ConfigVariableColor::ConfigVariableColor 0 3 1812 1813 1814 697
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableColor::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableColor::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableColor::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
370
inline ConfigVariableColor::ConfigVariableColor(string const &name);
inline ConfigVariableColor::ConfigVariableColor(string const &name, LColor const &default_value, string const &description = string(), int flags = 0);
inline ConfigVariableColor::ConfigVariableColor(string const &name, string const &default_value, string const &description = string(), int flags = 0);

3435 10 operator = 0 4 3582 31 ConfigVariableColor::operator = 0 1 1815 0
65
inline void ConfigVariableColor::operator =(LColor const &value);

3436 17 operator typecast 0 132 3582 38 ConfigVariableColor::operator typecast 0 1 1820 0
72
inline LColor const &ConfigVariableColor::operator typecast(void) const;

3437 11 operator [] 0 4 3582 32 ConfigVariableColor::operator [] 0 1 1816 0
65
inline PN_stdfloat ConfigVariableColor::operator [](int n) const;

3438 9 set_value 0 4 3582 30 ConfigVariableColor::set_value 0 1 1817 267
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableColor::set_value
//       Access: Published
//  Description: Reassigns the variable's local value.
////////////////////////////////////////////////////////////////////
64
inline void ConfigVariableColor::set_value(LColor const &value);

3439 9 get_value 0 4 3582 30 ConfigVariableColor::get_value 0 1 1818 259
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableColor::get_value
//       Access: Published
//  Description: Returns the variable's value.
////////////////////////////////////////////////////////////////////
64
inline LColor const &ConfigVariableColor::get_value(void) const;

3440 17 get_default_value 0 4 3582 38 ConfigVariableColor::get_default_value 0 1 1819 275
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableColor::get_default_value
//       Access: Published
//  Description: Returns the variable's default value.
////////////////////////////////////////////////////////////////////
65
inline LColor ConfigVariableColor::get_default_value(void) const;

3441 20 ~ConfigVariableColor 0 4 3582 41 ConfigVariableColor::~ConfigVariableColor 0 0 0
48
ConfigVariableColor::~ConfigVariableColor(void);

1934
1 0 0 7 7 3584 1946 0 229 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Default Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
2 0 0 7 7 3584 1946 0 226 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Copy Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 3585  
3 0 0 7 7 3584 1946 0 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 10 fill_value 1 3587  
4 0 0 7 7 3584 1946 0 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 1 x 1 3587  1 y 1 3587  
5 0 0 6 8 3584 0 0 234 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Copy Assignment Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3584  4 copy 1 3585  
6 0 0 6 8 3584 0 0 234 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Fill Assignment Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3584  10 fill_value 1 3587  
7 0 0 4 9 3590 0 0 0 2 4 this 3 3584  4 size 1 3588  
8 0 0 6 12 3585 0 0 262 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::zero Named Constructor
//       Access: Published
//  Description: Returns a zero-length vector.
//////////////////////////////////////////////////////////////////// 0 
9 0 0 6 13 3585 0 0 259 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::unit_x Named Constructor
//       Access: Published
//  Description: Returns a unit X vector.
//////////////////////////////////////////////////////////////////// 0 
10 0 0 6 14 3585 0 0 259 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::unit_y Named Constructor
//       Access: Published
//  Description: Returns a unit Y vector.
//////////////////////////////////////////////////////////////////// 0 
11 0 0 6 16 3591 0 0 0 1 4 this 3 3585  
12 0 0 6 17 3591 0 0 0 2 4 this 3 3585  9 attr_name 1 3594  
13 0 0 6 18 3595 0 0 0 3 4 this 3 3584  9 attr_name 1 3594  6 assign 1 3591  
14 0 0 4 19 3590 0 0 227 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Indexing Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 3584  1 i 1 3595  10 assign_val 1 3587  
15 0 0 6 19 3587 0 0 0 2 4 this 3 3585  1 i 1 3595  
16 0 0 6 20 3595 0 0 274 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::size
//       Access: Published, Static
//  Description: Returns 2: the number of components of a LVecBase2.
//////////////////////////////////////////////////////////////////// 0 
17 0 0 6 21 3596 0 0 311 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::is_nan
//       Access: Published
//  Description: Returns true if any component of the vector is
//               not-a-number, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3585  
18 0 0 6 22 3587 0 0 218 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_cell
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3585  1 i 1 3595  
19 0 0 6 23 3587 0 0 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_x
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 3585  
20 0 0 6 24 3587 0 0 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_y
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 3585  
21 0 0 4 25 3590 0 0 218 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::set_cell
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 3584  1 i 1 3595  5 value 1 3587  
22 0 0 4 26 3590 0 0 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::set_x
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3584  5 value 1 3587  
23 0 0 4 27 3590 0 0 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::set_y
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3584  5 value 1 3587  
24 0 0 4 28 3590 0 0 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::add_to_cell
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 3584  1 i 1 3595  5 value 1 3587  
25 0 0 4 29 3590 0 0 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::add_x
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3584  5 value 1 3587  
26 0 0 4 30 3590 0 0 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::add_y
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3584  5 value 1 3587  
27 0 0 4 31 3590 0 0 395 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_data
//       Access: Published
//  Description: Returns the address of the first of the two data
//               elements in the vector.  The next element
//               occupies the next position consecutively in memory.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3585  
28 0 0 6 32 3595 0 0 279 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_num_components
//       Access: Published
//  Description: Returns the number of elements in the vector, two.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3585  
29 0 0 4 33 3590 0 0 364 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::fill
//       Access: Published
//  Description: Sets each element of the vector to the indicated
//               fill_value.  This is particularly useful for
//               initializing to zero.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3584  10 fill_value 1 3587  
30 0 0 4 34 3590 0 0 213 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::set
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 3584  1 x 1 3587  1 y 1 3587  
31 0 0 6 35 3587 0 0 213 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::dot
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3585  5 other 1 3585  
32 0 0 6 36 3587 0 0 300 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::length_squared
//       Access: Published
//  Description: Returns the square of the vector's length, cheap and
//               easy.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3585  
33 0 0 6 37 3587 0 0 295 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::length
//       Access: Published
//  Description: Returns the length of the vector, by the Pythagorean
//               theorem.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3585  
34 0 0 6 38 3596 0 0 367 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::normalize
//       Access: Published
//  Description: Normalizes the vector in place.  Returns true if the
//               vector was normalized, false if it was a zero-length
//               vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3584  
35 0 0 7 39 3584 1946 0 390 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3585  4 onto 1 3585  
36 0 0 6 40 3596 0 0 0 2 4 this 3 3585  5 other 1 3585  
37 0 0 6 41 3596 0 0 0 2 4 this 3 3585  5 other 1 3585  
38 0 0 6 42 3596 0 0 0 2 4 this 3 3585  5 other 1 3585  
39 0 0 6 43 3595 0 0 321 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::compare_to
//       Access: Published
//  Description: This flavor of compare_to uses a default threshold
//               value based on the numeric type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3585  5 other 1 3585  
40 0 0 6 43 3595 0 0 504 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::compare_to
//       Access: Published
//  Description: Sorts vectors lexicographically, componentwise.
//               Returns a number less than 0 if this vector sorts
//               before the other one, greater than zero if it sorts
//               after, 0 if they are equivalent (within the indicated
//               tolerance).
//////////////////////////////////////////////////////////////////// 3 4 this 3 3585  5 other 1 3585  9 threshold 1 3587  
41 0 0 6 44 3588 0 0 257 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3585  
42 0 0 6 44 3588 0 0 257 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3585  9 threshold 1 3587  
43 0 0 6 45 3588 0 0 257 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3585  4 hash 1 3588  
44 0 0 6 45 3588 0 0 257 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3585  4 hash 1 3588  9 threshold 1 3587  
45 0 0 4 46 3590 0 0 272 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::generate_hash
//       Access: Published
//  Description: Adds the vector to the indicated hash generator.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3585  7 hashgen 1 3597  
46 0 0 4 46 3590 0 0 272 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::generate_hash
//       Access: Published
//  Description: Adds the vector to the indicated hash generator.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3585  7 hashgen 1 3597  9 threshold 1 3587  
47 0 0 7 47 3584 1946 0 0 1 4 this 3 3585  
48 0 0 7 48 3584 1946 0 0 2 4 this 3 3585  5 other 1 3585  
49 0 0 7 49 3584 1946 0 0 2 4 this 3 3585  5 other 1 3585  
50 0 0 7 50 3584 1946 0 0 2 4 this 3 3585  6 scalar 1 3587  
51 0 0 7 51 3584 1946 0 0 2 4 this 3 3585  6 scalar 1 3587  
52 0 0 6 52 3584 0 0 0 2 4 this 3 3584  5 other 1 3585  
53 0 0 6 53 3584 0 0 0 2 4 this 3 3584  5 other 1 3585  
54 0 0 6 54 3584 0 0 0 2 4 this 3 3584  6 scalar 1 3587  
55 0 0 6 55 3584 0 0 0 2 4 this 3 3584  6 scalar 1 3587  
56 0 0 4 56 3590 0 0 228 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::componentwise_mult
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3584  5 other 1 3585  
57 0 0 7 57 3584 1946 0 0 2 4 this 3 3585  8 exponent 1 3587  
58 0 0 6 58 3591 0 0 0 2 4 this 3 3584  8 exponent 1 3587  
59 0 0 7 59 3584 1946 0 214 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::fmax
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3585  5 other 1 3585  
60 0 0 7 60 3584 1946 0 214 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::fmin
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3585  5 other 1 3585  
61 0 0 6 61 3596 0 0 342 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::almost_equal
//       Access: Published
//  Description: Returns true if two vectors are memberwise equal
//               within a default tolerance based on the numeric type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3585  5 other 1 3585  
62 0 0 6 61 3596 0 0 318 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::almost_equal
//       Access: Published
//  Description: Returns true if two vectors are memberwise equal
//               within a specified tolerance.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3585  5 other 1 3585  9 threshold 1 3587  
63 0 0 4 62 3590 0 0 216 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::output
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3585  3 out 1 3599  
64 0 0 6 63 3594 0 0 0 1 4 this 3 3585  
65 0 0 4 64 3590 0 0 642 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::write_datagram_fixed
//       Access: Published
//  Description: Writes the vector to the Datagram using add_float32()
//               or add_float64(), depending on the type of floats in
//               the vector, regardless of the setting of
//               Datagram::set_stdfloat_double().  This is appropriate
//               when you want to write a fixed-width value to the
//               datagram, especially when you are not writing a bam
//               file.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3585  11 destination 1 3601  
66 0 0 4 65 3590 0 0 348 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::read_datagram_fixed
//       Access: Published
//  Description: Reads the vector from the Datagram using get_float32()
//               or get_float64().  See write_datagram_fixed().
//////////////////////////////////////////////////////////////////// 2 4 this 3 3584  6 source 1 3603  
67 0 0 4 66 3590 0 0 464 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::write_datagram
//       Access: Published
//  Description: Writes the vector to the Datagram using
//               add_stdfloat().  This is appropriate when you want to
//               write the vector using the standard width setting,
//               especially when you are writing a bam file.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3585  11 destination 1 3601  
68 0 0 4 67 3590 0 0 280 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::read_datagram
//       Access: Published
//  Description: Reads the vector from the Datagram using get_stdfloat().
//////////////////////////////////////////////////////////////////// 2 4 this 3 3584  6 source 1 3603  
69 0 0 7 68 3606 0 0 0 0 
70 0 0 7 71 3607 2008 0 229 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Default Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
71 0 0 7 71 3607 2008 0 226 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Copy Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 3608  
72 0 0 7 71 3607 2008 0 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 10 fill_value 1 3610  
73 0 0 7 71 3607 2008 0 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 1 x 1 3610  1 y 1 3610  
74 0 0 6 72 3607 0 0 234 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Copy Assignment Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3607  4 copy 1 3608  
75 0 0 6 72 3607 0 0 234 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Fill Assignment Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3607  10 fill_value 1 3610  
76 0 0 4 73 3590 0 0 0 2 4 this 3 3607  4 size 1 3588  
77 0 0 6 76 3608 0 0 262 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::zero Named Constructor
//       Access: Published
//  Description: Returns a zero-length vector.
//////////////////////////////////////////////////////////////////// 0 
78 0 0 6 77 3608 0 0 259 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::unit_x Named Constructor
//       Access: Published
//  Description: Returns a unit X vector.
//////////////////////////////////////////////////////////////////// 0 
79 0 0 6 78 3608 0 0 259 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::unit_y Named Constructor
//       Access: Published
//  Description: Returns a unit Y vector.
//////////////////////////////////////////////////////////////////// 0 
80 0 0 6 80 3591 0 0 0 1 4 this 3 3608  
81 0 0 6 81 3591 0 0 0 2 4 this 3 3608  9 attr_name 1 3594  
82 0 0 6 82 3595 0 0 0 3 4 this 3 3607  9 attr_name 1 3594  6 assign 1 3591  
83 0 0 4 83 3590 0 0 227 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Indexing Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 3607  1 i 1 3595  10 assign_val 1 3610  
84 0 0 6 83 3610 0 0 0 2 4 this 3 3608  1 i 1 3595  
85 0 0 6 84 3595 0 0 274 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::size
//       Access: Published, Static
//  Description: Returns 2: the number of components of a LVecBase2.
//////////////////////////////////////////////////////////////////// 0 
86 0 0 6 85 3596 0 0 311 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::is_nan
//       Access: Published
//  Description: Returns true if any component of the vector is
//               not-a-number, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3608  
87 0 0 6 86 3610 0 0 218 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_cell
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3608  1 i 1 3595  
88 0 0 6 87 3610 0 0 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_x
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 3608  
89 0 0 6 88 3610 0 0 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_y
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 3608  
90 0 0 4 89 3590 0 0 218 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::set_cell
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 3607  1 i 1 3595  5 value 1 3610  
91 0 0 4 90 3590 0 0 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::set_x
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3607  5 value 1 3610  
92 0 0 4 91 3590 0 0 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::set_y
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3607  5 value 1 3610  
93 0 0 4 92 3590 0 0 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::add_to_cell
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 3607  1 i 1 3595  5 value 1 3610  
94 0 0 4 93 3590 0 0 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::add_x
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3607  5 value 1 3610  
95 0 0 4 94 3590 0 0 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::add_y
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3607  5 value 1 3610  
96 0 0 4 95 3590 0 0 395 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_data
//       Access: Published
//  Description: Returns the address of the first of the two data
//               elements in the vector.  The next element
//               occupies the next position consecutively in memory.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3608  
97 0 0 6 96 3595 0 0 279 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_num_components
//       Access: Published
//  Description: Returns the number of elements in the vector, two.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3608  
98 0 0 4 97 3590 0 0 364 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::fill
//       Access: Published
//  Description: Sets each element of the vector to the indicated
//               fill_value.  This is particularly useful for
//               initializing to zero.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3607  10 fill_value 1 3610  
99 0 0 4 98 3590 0 0 213 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::set
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 3607  1 x 1 3610  1 y 1 3610  
100 0 0 6 99 3610 0 0 213 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::dot
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3608  5 other 1 3608  
101 0 0 6 100 3610 0 0 300 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::length_squared
//       Access: Published
//  Description: Returns the square of the vector's length, cheap and
//               easy.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3608  
102 0 0 6 101 3610 0 0 295 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::length
//       Access: Published
//  Description: Returns the length of the vector, by the Pythagorean
//               theorem.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3608  
103 0 0 6 102 3596 0 0 367 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::normalize
//       Access: Published
//  Description: Normalizes the vector in place.  Returns true if the
//               vector was normalized, false if it was a zero-length
//               vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3607  
104 0 0 7 103 3607 2008 0 390 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3608  4 onto 1 3608  
105 0 0 6 104 3596 0 0 0 2 4 this 3 3608  5 other 1 3608  
106 0 0 6 105 3596 0 0 0 2 4 this 3 3608  5 other 1 3608  
107 0 0 6 106 3596 0 0 0 2 4 this 3 3608  5 other 1 3608  
108 0 0 6 107 3595 0 0 321 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::compare_to
//       Access: Published
//  Description: This flavor of compare_to uses a default threshold
//               value based on the numeric type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3608  5 other 1 3608  
109 0 0 6 107 3595 0 0 504 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::compare_to
//       Access: Published
//  Description: Sorts vectors lexicographically, componentwise.
//               Returns a number less than 0 if this vector sorts
//               before the other one, greater than zero if it sorts
//               after, 0 if they are equivalent (within the indicated
//               tolerance).
//////////////////////////////////////////////////////////////////// 3 4 this 3 3608  5 other 1 3608  9 threshold 1 3610  
110 0 0 6 108 3588 0 0 257 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3608  
111 0 0 6 108 3588 0 0 257 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3608  9 threshold 1 3610  
112 0 0 6 109 3588 0 0 257 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3608  4 hash 1 3588  
113 0 0 6 109 3588 0 0 257 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3608  4 hash 1 3588  9 threshold 1 3610  
114 0 0 4 110 3590 0 0 272 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::generate_hash
//       Access: Published
//  Description: Adds the vector to the indicated hash generator.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3608  7 hashgen 1 3597  
115 0 0 4 110 3590 0 0 272 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::generate_hash
//       Access: Published
//  Description: Adds the vector to the indicated hash generator.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3608  7 hashgen 1 3597  9 threshold 1 3610  
116 0 0 7 111 3607 2008 0 0 1 4 this 3 3608  
117 0 0 7 112 3607 2008 0 0 2 4 this 3 3608  5 other 1 3608  
118 0 0 7 113 3607 2008 0 0 2 4 this 3 3608  5 other 1 3608  
119 0 0 7 114 3607 2008 0 0 2 4 this 3 3608  6 scalar 1 3610  
120 0 0 7 115 3607 2008 0 0 2 4 this 3 3608  6 scalar 1 3610  
121 0 0 6 116 3607 0 0 0 2 4 this 3 3607  5 other 1 3608  
122 0 0 6 117 3607 0 0 0 2 4 this 3 3607  5 other 1 3608  
123 0 0 6 118 3607 0 0 0 2 4 this 3 3607  6 scalar 1 3610  
124 0 0 6 119 3607 0 0 0 2 4 this 3 3607  6 scalar 1 3610  
125 0 0 4 120 3590 0 0 228 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::componentwise_mult
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3607  5 other 1 3608  
126 0 0 7 121 3607 2008 0 0 2 4 this 3 3608  8 exponent 1 3610  
127 0 0 6 122 3591 0 0 0 2 4 this 3 3607  8 exponent 1 3610  
128 0 0 7 123 3607 2008 0 214 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::fmax
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3608  5 other 1 3608  
129 0 0 7 124 3607 2008 0 214 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::fmin
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3608  5 other 1 3608  
130 0 0 6 125 3596 0 0 342 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::almost_equal
//       Access: Published
//  Description: Returns true if two vectors are memberwise equal
//               within a default tolerance based on the numeric type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3608  5 other 1 3608  
131 0 0 6 125 3596 0 0 318 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::almost_equal
//       Access: Published
//  Description: Returns true if two vectors are memberwise equal
//               within a specified tolerance.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3608  5 other 1 3608  9 threshold 1 3610  
132 0 0 4 126 3590 0 0 216 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::output
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3608  3 out 1 3599  
133 0 0 6 127 3594 0 0 0 1 4 this 3 3608  
134 0 0 4 128 3590 0 0 642 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::write_datagram_fixed
//       Access: Published
//  Description: Writes the vector to the Datagram using add_float32()
//               or add_float64(), depending on the type of floats in
//               the vector, regardless of the setting of
//               Datagram::set_stdfloat_double().  This is appropriate
//               when you want to write a fixed-width value to the
//               datagram, especially when you are not writing a bam
//               file.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3608  11 destination 1 3601  
135 0 0 4 129 3590 0 0 348 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::read_datagram_fixed
//       Access: Published
//  Description: Reads the vector from the Datagram using get_float32()
//               or get_float64().  See write_datagram_fixed().
//////////////////////////////////////////////////////////////////// 2 4 this 3 3607  6 source 1 3603  
136 0 0 4 130 3590 0 0 464 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::write_datagram
//       Access: Published
//  Description: Writes the vector to the Datagram using
//               add_stdfloat().  This is appropriate when you want to
//               write the vector using the standard width setting,
//               especially when you are writing a bam file.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3608  11 destination 1 3601  
137 0 0 4 131 3590 0 0 280 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::read_datagram
//       Access: Published
//  Description: Reads the vector from the Datagram using get_stdfloat().
//////////////////////////////////////////////////////////////////// 2 4 this 3 3607  6 source 1 3603  
138 0 0 7 132 3606 0 0 0 0 
139 0 0 7 135 3611 2070 0 229 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Default Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
140 0 0 7 135 3611 2070 0 226 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Copy Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 3612  
141 0 0 7 135 3611 2070 0 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 10 fill_value 1 3595  
142 0 0 7 135 3611 2070 0 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 1 x 1 3595  1 y 1 3595  
143 0 0 6 136 3611 0 0 234 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Copy Assignment Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3611  4 copy 1 3612  
144 0 0 6 136 3611 0 0 234 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Fill Assignment Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3611  10 fill_value 1 3595  
145 0 0 4 137 3590 0 0 0 2 4 this 3 3611  4 size 1 3588  
146 0 0 6 140 3612 0 0 262 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::zero Named Constructor
//       Access: Published
//  Description: Returns a zero-length vector.
//////////////////////////////////////////////////////////////////// 0 
147 0 0 6 141 3612 0 0 259 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::unit_x Named Constructor
//       Access: Published
//  Description: Returns a unit X vector.
//////////////////////////////////////////////////////////////////// 0 
148 0 0 6 142 3612 0 0 259 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::unit_y Named Constructor
//       Access: Published
//  Description: Returns a unit Y vector.
//////////////////////////////////////////////////////////////////// 0 
149 0 0 6 144 3591 0 0 0 1 4 this 3 3612  
150 0 0 6 145 3591 0 0 0 2 4 this 3 3612  9 attr_name 1 3594  
151 0 0 6 146 3595 0 0 0 3 4 this 3 3611  9 attr_name 1 3594  6 assign 1 3591  
152 0 0 4 147 3590 0 0 227 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Indexing Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 3611  1 i 1 3595  10 assign_val 1 3595  
153 0 0 6 147 3595 0 0 0 2 4 this 3 3612  1 i 1 3595  
154 0 0 6 148 3595 0 0 274 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::size
//       Access: Published, Static
//  Description: Returns 2: the number of components of a LVecBase2.
//////////////////////////////////////////////////////////////////// 0 
155 0 0 6 149 3596 0 0 311 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::is_nan
//       Access: Published
//  Description: Returns true if any component of the vector is
//               not-a-number, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3612  
156 0 0 6 150 3595 0 0 218 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_cell
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3612  1 i 1 3595  
157 0 0 6 151 3595 0 0 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_x
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 3612  
158 0 0 6 152 3595 0 0 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_y
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 3612  
159 0 0 4 153 3590 0 0 218 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::set_cell
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 3611  1 i 1 3595  5 value 1 3595  
160 0 0 4 154 3590 0 0 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::set_x
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3611  5 value 1 3595  
161 0 0 4 155 3590 0 0 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::set_y
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3611  5 value 1 3595  
162 0 0 4 156 3590 0 0 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::add_to_cell
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 3611  1 i 1 3595  5 value 1 3595  
163 0 0 4 157 3590 0 0 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::add_x
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3611  5 value 1 3595  
164 0 0 4 158 3590 0 0 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::add_y
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3611  5 value 1 3595  
165 0 0 4 159 3590 0 0 395 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_data
//       Access: Published
//  Description: Returns the address of the first of the two data
//               elements in the vector.  The next element
//               occupies the next position consecutively in memory.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3612  
166 0 0 6 160 3595 0 0 279 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_num_components
//       Access: Published
//  Description: Returns the number of elements in the vector, two.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3612  
167 0 0 4 161 3590 0 0 364 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::fill
//       Access: Published
//  Description: Sets each element of the vector to the indicated
//               fill_value.  This is particularly useful for
//               initializing to zero.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3611  10 fill_value 1 3595  
168 0 0 4 162 3590 0 0 213 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::set
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 3611  1 x 1 3595  1 y 1 3595  
169 0 0 6 163 3595 0 0 213 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::dot
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3612  5 other 1 3612  
170 0 0 6 164 3595 0 0 300 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::length_squared
//       Access: Published
//  Description: Returns the square of the vector's length, cheap and
//               easy.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3612  
171 0 0 6 165 3596 0 0 0 2 4 this 3 3612  5 other 1 3612  
172 0 0 6 166 3596 0 0 0 2 4 this 3 3612  5 other 1 3612  
173 0 0 6 167 3596 0 0 0 2 4 this 3 3612  5 other 1 3612  
174 0 0 6 168 3595 0 0 321 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::compare_to
//       Access: Published
//  Description: This flavor of compare_to uses a default threshold
//               value based on the numeric type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3612  5 other 1 3612  
175 0 0 6 169 3588 0 0 257 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3612  
176 0 0 6 170 3588 0 0 257 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3612  4 hash 1 3588  
177 0 0 4 171 3590 0 0 272 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::generate_hash
//       Access: Published
//  Description: Adds the vector to the indicated hash generator.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3612  7 hashgen 1 3597  
178 0 0 7 172 3611 2070 0 0 1 4 this 3 3612  
179 0 0 7 173 3611 2070 0 0 2 4 this 3 3612  5 other 1 3612  
180 0 0 7 174 3611 2070 0 0 2 4 this 3 3612  5 other 1 3612  
181 0 0 7 175 3611 2070 0 0 2 4 this 3 3612  6 scalar 1 3595  
182 0 0 7 176 3611 2070 0 0 2 4 this 3 3612  6 scalar 1 3595  
183 0 0 6 177 3611 0 0 0 2 4 this 3 3611  5 other 1 3612  
184 0 0 6 178 3611 0 0 0 2 4 this 3 3611  5 other 1 3612  
185 0 0 6 179 3611 0 0 0 2 4 this 3 3611  6 scalar 1 3595  
186 0 0 6 180 3611 0 0 0 2 4 this 3 3611  6 scalar 1 3595  
187 0 0 4 181 3590 0 0 228 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::componentwise_mult
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3611  5 other 1 3612  
188 0 0 7 182 3611 2070 0 0 2 4 this 3 3612  8 exponent 1 3595  
189 0 0 6 183 3591 0 0 0 2 4 this 3 3611  8 exponent 1 3595  
190 0 0 7 184 3611 2070 0 214 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::fmax
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3612  5 other 1 3612  
191 0 0 7 185 3611 2070 0 214 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::fmin
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3612  5 other 1 3612  
192 0 0 6 186 3596 0 0 342 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::almost_equal
//       Access: Published
//  Description: Returns true if two vectors are memberwise equal
//               within a default tolerance based on the numeric type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3612  5 other 1 3612  
193 0 0 6 186 3596 0 0 318 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::almost_equal
//       Access: Published
//  Description: Returns true if two vectors are memberwise equal
//               within a specified tolerance.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3612  5 other 1 3612  9 threshold 1 3595  
194 0 0 4 187 3590 0 0 216 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::output
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3612  3 out 1 3599  
195 0 0 6 188 3594 0 0 0 1 4 this 3 3612  
196 0 0 4 189 3590 0 0 642 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::write_datagram_fixed
//       Access: Published
//  Description: Writes the vector to the Datagram using add_float32()
//               or add_float64(), depending on the type of floats in
//               the vector, regardless of the setting of
//               Datagram::set_stdfloat_double().  This is appropriate
//               when you want to write a fixed-width value to the
//               datagram, especially when you are not writing a bam
//               file.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3612  11 destination 1 3601  
197 0 0 4 190 3590 0 0 348 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::read_datagram_fixed
//       Access: Published
//  Description: Reads the vector from the Datagram using get_float32()
//               or get_float64().  See write_datagram_fixed().
//////////////////////////////////////////////////////////////////// 2 4 this 3 3611  6 source 1 3603  
198 0 0 4 191 3590 0 0 464 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::write_datagram
//       Access: Published
//  Description: Writes the vector to the Datagram using
//               add_stdfloat().  This is appropriate when you want to
//               write the vector using the standard width setting,
//               especially when you are writing a bam file.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3612  11 destination 1 3601  
199 0 0 4 192 3590 0 0 280 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::read_datagram
//       Access: Published
//  Description: Reads the vector from the Datagram using get_stdfloat().
//////////////////////////////////////////////////////////////////// 2 4 this 3 3611  6 source 1 3603  
200 0 0 7 193 3606 0 0 0 0 
201 0 0 7 195 3614 2138 0 225 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::Default Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
202 0 0 7 195 3614 2138 0 222 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 3585  
203 0 0 7 195 3614 2138 0 217 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 10 fill_value 1 3587  
204 0 0 7 195 3614 2138 0 217 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 1 x 1 3587  1 y 1 3587  
205 0 0 6 196 3614 0 0 230 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3614  4 copy 1 3585  
206 0 0 6 196 3614 0 0 224 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::Copy Fill Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3614  10 fill_value 1 3587  
207 0 0 6 197 3591 0 0 0 2 4 this 3 3615  9 attr_name 1 3594  
208 0 0 6 198 3595 0 0 0 3 4 this 3 3614  9 attr_name 1 3594  6 assign 1 3591  
209 0 0 6 199 3615 0 0 258 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length vector.
//////////////////////////////////////////////////////////////////// 0 
210 0 0 6 200 3615 0 0 255 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X vector.
//////////////////////////////////////////////////////////////////// 0 
211 0 0 6 201 3615 0 0 255 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y vector.
//////////////////////////////////////////////////////////////////// 0 
212 0 0 7 202 3614 2138 0 0 1 4 this 3 3615  
213 0 0 7 203 3584 1946 0 0 2 4 this 3 3615  5 other 1 3585  
214 0 0 7 203 3614 2138 0 0 2 4 this 3 3615  5 other 1 3615  
215 0 0 7 204 3584 1946 0 0 2 4 this 3 3615  5 other 1 3585  
216 0 0 7 204 3614 2138 0 0 2 4 this 3 3615  5 other 1 3615  
217 0 0 7 205 3614 2138 0 0 2 4 this 3 3615  6 scalar 1 3587  
218 0 0 7 206 3614 2138 0 0 2 4 this 3 3615  6 scalar 1 3587  
219 0 0 7 207 3614 2138 0 389 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3615  4 onto 1 3585  
220 0 0 6 208 3587 0 0 321 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::signed_angle_rad
//       Access: Published
//  Description: returns the signed angled between two vectors. 
//               normalization is NOT necessary
//////////////////////////////////////////////////////////////////// 2 4 this 3 3615  5 other 1 3615  
221 0 0 6 209 3587 0 0 321 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::signed_angle_deg
//       Access: Published
//  Description: returns the signed angled between two vectors. 
//               normalization is NOT necessary
//////////////////////////////////////////////////////////////////// 2 4 this 3 3615  5 other 1 3615  
222 0 0 6 210 3594 0 0 0 1 4 this 3 3615  
223 0 0 7 211 3606 0 0 0 0 
224 0 0 7 214 3617 2156 0 225 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::Default Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
225 0 0 7 214 3617 2156 0 222 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 3608  
226 0 0 7 214 3617 2156 0 217 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 10 fill_value 1 3610  
227 0 0 7 214 3617 2156 0 217 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 1 x 1 3610  1 y 1 3610  
228 0 0 6 215 3617 0 0 230 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3617  4 copy 1 3608  
229 0 0 6 215 3617 0 0 224 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::Copy Fill Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3617  10 fill_value 1 3610  
230 0 0 6 216 3591 0 0 0 2 4 this 3 3618  9 attr_name 1 3594  
231 0 0 6 217 3595 0 0 0 3 4 this 3 3617  9 attr_name 1 3594  6 assign 1 3591  
232 0 0 6 218 3618 0 0 258 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length vector.
//////////////////////////////////////////////////////////////////// 0 
233 0 0 6 219 3618 0 0 255 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X vector.
//////////////////////////////////////////////////////////////////// 0 
234 0 0 6 220 3618 0 0 255 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y vector.
//////////////////////////////////////////////////////////////////// 0 
235 0 0 7 221 3617 2156 0 0 1 4 this 3 3618  
236 0 0 7 222 3607 2008 0 0 2 4 this 3 3618  5 other 1 3608  
237 0 0 7 222 3617 2156 0 0 2 4 this 3 3618  5 other 1 3618  
238 0 0 7 223 3607 2008 0 0 2 4 this 3 3618  5 other 1 3608  
239 0 0 7 223 3617 2156 0 0 2 4 this 3 3618  5 other 1 3618  
240 0 0 7 224 3617 2156 0 0 2 4 this 3 3618  6 scalar 1 3610  
241 0 0 7 225 3617 2156 0 0 2 4 this 3 3618  6 scalar 1 3610  
242 0 0 7 226 3617 2156 0 389 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3618  4 onto 1 3608  
243 0 0 6 227 3610 0 0 321 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::signed_angle_rad
//       Access: Published
//  Description: returns the signed angled between two vectors. 
//               normalization is NOT necessary
//////////////////////////////////////////////////////////////////// 2 4 this 3 3618  5 other 1 3618  
244 0 0 6 228 3610 0 0 321 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::signed_angle_deg
//       Access: Published
//  Description: returns the signed angled between two vectors. 
//               normalization is NOT necessary
//////////////////////////////////////////////////////////////////// 2 4 this 3 3618  5 other 1 3618  
245 0 0 6 229 3594 0 0 0 1 4 this 3 3618  
246 0 0 7 230 3606 0 0 0 0 
247 0 0 7 233 3620 2171 0 225 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::Default Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
248 0 0 7 233 3620 2171 0 222 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 3612  
249 0 0 7 233 3620 2171 0 217 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 10 fill_value 1 3595  
250 0 0 7 233 3620 2171 0 217 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 1 x 1 3595  1 y 1 3595  
251 0 0 6 234 3620 0 0 230 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3620  4 copy 1 3612  
252 0 0 6 234 3620 0 0 224 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::Copy Fill Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3620  10 fill_value 1 3595  
253 0 0 6 235 3591 0 0 0 2 4 this 3 3621  9 attr_name 1 3594  
254 0 0 6 236 3595 0 0 0 3 4 this 3 3620  9 attr_name 1 3594  6 assign 1 3591  
255 0 0 6 237 3621 0 0 258 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length vector.
//////////////////////////////////////////////////////////////////// 0 
256 0 0 6 238 3621 0 0 255 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X vector.
//////////////////////////////////////////////////////////////////// 0 
257 0 0 6 239 3621 0 0 255 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y vector.
//////////////////////////////////////////////////////////////////// 0 
258 0 0 7 240 3620 2171 0 0 1 4 this 3 3621  
259 0 0 7 241 3611 2070 0 0 2 4 this 3 3621  5 other 1 3612  
260 0 0 7 241 3620 2171 0 0 2 4 this 3 3621  5 other 1 3621  
261 0 0 7 242 3611 2070 0 0 2 4 this 3 3621  5 other 1 3612  
262 0 0 7 242 3620 2171 0 0 2 4 this 3 3621  5 other 1 3621  
263 0 0 7 243 3620 2171 0 0 2 4 this 3 3621  6 scalar 1 3595  
264 0 0 7 244 3620 2171 0 0 2 4 this 3 3621  6 scalar 1 3595  
265 0 0 6 245 3594 0 0 0 1 4 this 3 3621  
266 0 0 7 246 3606 0 0 0 0 
267 0 0 7 249 3623 2187 0 224 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Default Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
268 0 0 7 249 3623 2187 0 221 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 3585  
269 0 0 7 249 3623 2187 0 216 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 10 fill_value 1 3587  
270 0 0 7 249 3623 2187 0 216 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 1 x 1 3587  1 y 1 3587  
271 0 0 6 250 3623 0 0 229 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3623  4 copy 1 3585  
272 0 0 6 250 3623 0 0 223 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Copy Fill Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3623  10 fill_value 1 3587  
273 0 0 6 251 3591 0 0 0 2 4 this 3 3624  9 attr_name 1 3594  
274 0 0 6 252 3595 0 0 0 3 4 this 3 3623  9 attr_name 1 3594  6 assign 1 3591  
275 0 0 6 253 3624 0 0 256 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length point.
//////////////////////////////////////////////////////////////////// 0 
276 0 0 6 254 3624 0 0 253 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X point.
//////////////////////////////////////////////////////////////////// 0 
277 0 0 6 255 3624 0 0 253 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y point.
//////////////////////////////////////////////////////////////////// 0 
278 0 0 7 256 3623 2187 0 0 1 4 this 3 3624  
279 0 0 7 257 3584 1946 0 0 2 4 this 3 3624  5 other 1 3585  
280 0 0 7 257 3623 2187 0 0 2 4 this 3 3624  5 other 1 3615  
281 0 0 7 258 3614 2138 0 0 2 4 this 3 3624  5 other 1 3624  
282 0 0 7 258 3584 1946 0 0 2 4 this 3 3624  5 other 1 3585  
283 0 0 7 258 3623 2187 0 0 2 4 this 3 3624  5 other 1 3615  
284 0 0 7 259 3623 2187 0 0 2 4 this 3 3624  6 scalar 1 3587  
285 0 0 7 260 3623 2187 0 0 2 4 this 3 3624  6 scalar 1 3587  
286 0 0 7 261 3623 2187 0 388 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3624  4 onto 1 3585  
287 0 0 6 262 3594 0 0 0 1 4 this 3 3624  
288 0 0 7 263 3606 0 0 0 0 
289 0 0 7 266 3626 2203 0 224 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Default Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
290 0 0 7 266 3626 2203 0 221 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 3608  
291 0 0 7 266 3626 2203 0 216 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 10 fill_value 1 3610  
292 0 0 7 266 3626 2203 0 216 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 1 x 1 3610  1 y 1 3610  
293 0 0 6 267 3626 0 0 229 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3626  4 copy 1 3608  
294 0 0 6 267 3626 0 0 223 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Copy Fill Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3626  10 fill_value 1 3610  
295 0 0 6 268 3591 0 0 0 2 4 this 3 3627  9 attr_name 1 3594  
296 0 0 6 269 3595 0 0 0 3 4 this 3 3626  9 attr_name 1 3594  6 assign 1 3591  
297 0 0 6 270 3627 0 0 256 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length point.
//////////////////////////////////////////////////////////////////// 0 
298 0 0 6 271 3627 0 0 253 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X point.
//////////////////////////////////////////////////////////////////// 0 
299 0 0 6 272 3627 0 0 253 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y point.
//////////////////////////////////////////////////////////////////// 0 
300 0 0 7 273 3626 2203 0 0 1 4 this 3 3627  
301 0 0 7 274 3607 2008 0 0 2 4 this 3 3627  5 other 1 3608  
302 0 0 7 274 3626 2203 0 0 2 4 this 3 3627  5 other 1 3618  
303 0 0 7 275 3617 2156 0 0 2 4 this 3 3627  5 other 1 3627  
304 0 0 7 275 3607 2008 0 0 2 4 this 3 3627  5 other 1 3608  
305 0 0 7 275 3626 2203 0 0 2 4 this 3 3627  5 other 1 3618  
306 0 0 7 276 3626 2203 0 0 2 4 this 3 3627  6 scalar 1 3610  
307 0 0 7 277 3626 2203 0 0 2 4 this 3 3627  6 scalar 1 3610  
308 0 0 7 278 3626 2203 0 388 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3627  4 onto 1 3608  
309 0 0 6 279 3594 0 0 0 1 4 this 3 3627  
310 0 0 7 280 3606 0 0 0 0 
311 0 0 7 283 3629 2218 0 224 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Default Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
312 0 0 7 283 3629 2218 0 221 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 3612  
313 0 0 7 283 3629 2218 0 216 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 10 fill_value 1 3595  
314 0 0 7 283 3629 2218 0 216 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 1 x 1 3595  1 y 1 3595  
315 0 0 6 284 3629 0 0 229 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3629  4 copy 1 3612  
316 0 0 6 284 3629 0 0 223 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Copy Fill Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3629  10 fill_value 1 3595  
317 0 0 6 285 3591 0 0 0 2 4 this 3 3630  9 attr_name 1 3594  
318 0 0 6 286 3595 0 0 0 3 4 this 3 3629  9 attr_name 1 3594  6 assign 1 3591  
319 0 0 6 287 3630 0 0 256 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length point.
//////////////////////////////////////////////////////////////////// 0 
320 0 0 6 288 3630 0 0 253 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X point.
//////////////////////////////////////////////////////////////////// 0 
321 0 0 6 289 3630 0 0 253 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y point.
//////////////////////////////////////////////////////////////////// 0 
322 0 0 7 290 3629 2218 0 0 1 4 this 3 3630  
323 0 0 7 291 3611 2070 0 0 2 4 this 3 3630  5 other 1 3612  
324 0 0 7 291 3629 2218 0 0 2 4 this 3 3630  5 other 1 3621  
325 0 0 7 292 3620 2171 0 0 2 4 this 3 3630  5 other 1 3630  
326 0 0 7 292 3611 2070 0 0 2 4 this 3 3630  5 other 1 3612  
327 0 0 7 292 3629 2218 0 0 2 4 this 3 3630  5 other 1 3621  
328 0 0 7 293 3629 2218 0 0 2 4 this 3 3630  6 scalar 1 3595  
329 0 0 7 294 3629 2218 0 0 2 4 this 3 3630  6 scalar 1 3595  
330 0 0 6 295 3594 0 0 0 1 4 this 3 3630  
331 0 0 7 296 3606 0 0 0 0 
332 0 0 7 300 3632 2228 0 226 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Default Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
333 0 0 7 300 3632 2228 0 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 copy 1 3585  1 z 1 3587  
334 0 0 7 300 3632 2228 0 223 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 3633  
335 0 0 7 300 3632 2228 0 218 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 10 fill_value 1 3587  
336 0 0 7 300 3632 2228 0 218 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 3 1 x 1 3587  1 y 1 3587  1 z 1 3587  
337 0 0 6 301 3632 0 0 231 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3632  4 copy 1 3633  
338 0 0 6 301 3632 0 0 231 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Fill Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3632  10 fill_value 1 3587  
339 0 0 4 302 3590 0 0 0 2 4 this 3 3632  4 size 1 3588  
340 0 0 6 305 3633 0 0 259 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length vector.
//////////////////////////////////////////////////////////////////// 0 
341 0 0 6 306 3633 0 0 256 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X vector.
//////////////////////////////////////////////////////////////////// 0 
342 0 0 6 307 3633 0 0 256 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y vector.
//////////////////////////////////////////////////////////////////// 0 
343 0 0 6 308 3633 0 0 256 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::unit_z Named Constructor
//       Access: Public
//  Description: Returns a unit Z vector.
//////////////////////////////////////////////////////////////////// 0 
344 0 0 6 310 3591 0 0 0 1 4 this 3 3633  
345 0 0 6 311 3591 0 0 0 2 4 this 3 3633  9 attr_name 1 3594  
346 0 0 6 312 3595 0 0 0 3 4 this 3 3632  9 attr_name 1 3594  6 assign 1 3591  
347 0 0 4 313 3590 0 0 224 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Indexing Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 3632  1 i 1 3595  10 assign_val 1 3587  
348 0 0 6 313 3587 0 0 0 2 4 this 3 3633  1 i 1 3595  
349 0 0 6 314 3595 0 0 271 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::size
//       Access: Public, Static
//  Description: Returns 3: the number of components of a LVecBase3.
//////////////////////////////////////////////////////////////////// 0 
350 0 0 6 315 3596 0 0 308 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::is_nan
//       Access: Public
//  Description: Returns true if any component of the vector is
//               not-a-number, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3633  
351 0 0 6 316 3587 0 0 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_cell
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3633  1 i 1 3595  
352 0 0 6 317 3587 0 0 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_x
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 3633  
353 0 0 6 318 3587 0 0 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_y
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 3633  
354 0 0 6 319 3587 0 0 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_z
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 3633  
355 0 0 4 320 3590 0 0 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set_cell
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 3632  1 i 1 3595  5 value 1 3587  
356 0 0 4 321 3590 0 0 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set_x
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3632  5 value 1 3587  
357 0 0 4 322 3590 0 0 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set_y
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3632  5 value 1 3587  
358 0 0 4 323 3590 0 0 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set_z
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3632  5 value 1 3587  
359 0 0 7 324 3584 1946 0 317 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_xy
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first two components of this vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3633  
360 0 0 7 325 3584 1946 0 322 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_xz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first and last components of this vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3633  
361 0 0 7 326 3584 1946 0 316 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_yz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               last two components of this vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3633  
362 0 0 4 327 3590 0 0 218 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_to_cell
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 3632  1 i 1 3595  5 value 1 3587  
363 0 0 4 328 3590 0 0 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_x
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3632  5 value 1 3587  
364 0 0 4 329 3590 0 0 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_y
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3632  5 value 1 3587  
365 0 0 4 330 3590 0 0 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_z
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3632  5 value 1 3587  
366 0 0 4 331 3590 0 0 399 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_data
//       Access: Public
//  Description: Returns the address of the first of the three data
//               elements in the vector.  The remaining elements
//               occupy the next positions consecutively in memory.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3633  
367 0 0 6 332 3595 0 0 278 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_num_components
//       Access: Public
//  Description: Returns the number of elements in the vector, three.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3633  
368 0 0 4 333 3590 0 0 364 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::fill
//       Access: Published
//  Description: Sets each element of the vector to the indicated
//               fill_value.  This is particularly useful for
//               initializing to zero.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3632  10 fill_value 1 3587  
369 0 0 4 334 3590 0 0 213 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 4 4 this 3 3632  1 x 1 3587  1 y 1 3587  1 z 1 3587  
370 0 0 6 335 3587 0 0 213 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::dot
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3633  5 other 1 3633  
371 0 0 6 336 3587 0 0 300 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::length_squared
//       Access: Published
//  Description: Returns the square of the vector's length, cheap and
//               easy.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3633  
372 0 0 6 337 3587 0 0 295 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::length
//       Access: Published
//  Description: Returns the length of the vector, by the Pythagorean
//               theorem.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3633  
373 0 0 6 338 3596 0 0 367 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::normalize
//       Access: Published
//  Description: Normalizes the vector in place.  Returns true if the
//               vector was normalized, false if it was a zero-length
//               vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3632  
374 0 0 7 339 3632 2228 0 390 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3633  4 onto 1 3633  
375 0 0 7 340 3632 2228 0 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::cross
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3633  5 other 1 3633  
376 0 0 6 341 3596 0 0 0 2 4 this 3 3633  5 other 1 3633  
377 0 0 6 342 3596 0 0 0 2 4 this 3 3633  5 other 1 3633  
378 0 0 6 343 3596 0 0 0 2 4 this 3 3633  5 other 1 3633  
379 0 0 7 344 3632 2228 0 1030 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_standardized_hpr
//       Access: Published
//  Description: Try to un-spin the hpr to a standard form.  Like
//               all standards, someone decides between many
//               arbitrary possible standards.  This function assumes
//               that 0 and 360 are the same, as is 720 and
//               -360.  Also 180 and -180 are the same.  Another
//               example is -90 and 270.
//               Each element will be in the range -180.0 to 179.99999.
//               The original usage of this function is for human
//               readable output.
//
//               It doesn't work so well for asserting that foo_hpr 
//               is roughly equal to bar_hpr.  Try using
//               LQuaternionf::is_same_direction() for that.
//     See Also: get_standardized_rotation,
//               LQuaternion::is_same_direction
//////////////////////////////////////////////////////////////////// 1 4 this 3 3633  
380 0 0 6 345 3595 0 0 321 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::compare_to
//       Access: Published
//  Description: This flavor of compare_to uses a default threshold
//               value based on the numeric type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3633  5 other 1 3633  
381 0 0 6 345 3595 0 0 504 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::compare_to
//       Access: Published
//  Description: Sorts vectors lexicographically, componentwise.
//               Returns a number less than 0 if this vector sorts
//               before the other one, greater than zero if it sorts
//               after, 0 if they are equivalent (within the indicated
//               tolerance).
//////////////////////////////////////////////////////////////////// 3 4 this 3 3633  5 other 1 3633  9 threshold 1 3587  
382 0 0 6 346 3588 0 0 257 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3633  
383 0 0 6 346 3588 0 0 257 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3633  9 threshold 1 3587  
384 0 0 6 347 3588 0 0 257 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3633  4 hash 1 3588  
385 0 0 6 347 3588 0 0 257 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3633  4 hash 1 3588  9 threshold 1 3587  
386 0 0 4 348 3590 0 0 272 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::generate_hash
//       Access: Published
//  Description: Adds the vector to the indicated hash generator.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3633  7 hashgen 1 3597  
387 0 0 4 348 3590 0 0 272 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::generate_hash
//       Access: Published
//  Description: Adds the vector to the indicated hash generator.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3633  7 hashgen 1 3597  9 threshold 1 3587  
388 0 0 7 349 3632 2228 0 0 1 4 this 3 3633  
389 0 0 7 350 3632 2228 0 0 2 4 this 3 3633  5 other 1 3633  
390 0 0 7 351 3632 2228 0 0 2 4 this 3 3633  5 other 1 3633  
391 0 0 7 352 3632 2228 0 0 2 4 this 3 3633  6 scalar 1 3587  
392 0 0 7 353 3632 2228 0 0 2 4 this 3 3633  6 scalar 1 3587  
393 0 0 6 354 3632 0 0 0 2 4 this 3 3632  5 other 1 3633  
394 0 0 6 355 3632 0 0 0 2 4 this 3 3632  5 other 1 3633  
395 0 0 6 356 3632 0 0 0 2 4 this 3 3632  6 scalar 1 3587  
396 0 0 6 357 3632 0 0 0 2 4 this 3 3632  6 scalar 1 3587  
397 0 0 4 358 3590 0 0 228 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::componentwise_mult
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3632  5 other 1 3633  
398 0 0 7 359 3632 2228 0 0 2 4 this 3 3633  8 exponent 1 3587  
399 0 0 6 360 3591 0 0 0 2 4 this 3 3632  8 exponent 1 3587  
400 0 0 7 361 3632 2228 0 211 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::fmax
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3633  5 other 1 3633  
401 0 0 7 362 3632 2228 0 211 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::fmin
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3633  5 other 1 3633  
402 0 0 4 363 3590 0 0 241 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::cross product (with assignment)
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3632  5 other 1 3633  
403 0 0 6 364 3596 0 0 342 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::almost_equal
//       Access: Published
//  Description: Returns true if two vectors are memberwise equal
//               within a default tolerance based on the numeric type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3633  5 other 1 3633  
404 0 0 6 364 3596 0 0 318 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::almost_equal
//       Access: Published
//  Description: Returns true if two vectors are memberwise equal
//               within a specified tolerance.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3633  5 other 1 3633  9 threshold 1 3587  
405 0 0 4 365 3590 0 0 216 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::output
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3633  3 out 1 3599  
406 0 0 6 366 3594 0 0 0 1 4 this 3 3633  
407 0 0 4 367 3590 0 0 642 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::write_datagram_fixed
//       Access: Published
//  Description: Writes the vector to the Datagram using add_float32()
//               or add_float64(), depending on the type of floats in
//               the vector, regardless of the setting of
//               Datagram::set_stdfloat_double().  This is appropriate
//               when you want to write a fixed-width value to the
//               datagram, especially when you are not writing a bam
//               file.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3633  11 destination 1 3601  
408 0 0 4 368 3590 0 0 348 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::read_datagram_fixed
//       Access: Published
//  Description: Reads the vector from the Datagram using get_float32()
//               or get_float64().  See write_datagram_fixed().
//////////////////////////////////////////////////////////////////// 2 4 this 3 3632  6 source 1 3603  
409 0 0 4 369 3590 0 0 464 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::write_datagram
//       Access: Published
//  Description: Writes the vector to the Datagram using
//               add_stdfloat().  This is appropriate when you want to
//               write the vector using the standard width setting,
//               especially when you are writing a bam file.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3633  11 destination 1 3601  
410 0 0 4 370 3590 0 0 280 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::read_datagram
//       Access: Published
//  Description: Reads the vector from the Datagram using get_stdfloat().
//////////////////////////////////////////////////////////////////// 2 4 this 3 3632  6 source 1 3603  
411 0 0 7 371 3606 0 0 0 0 
412 0 0 7 374 3635 2300 0 226 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Default Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
413 0 0 7 374 3635 2300 0 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 copy 1 3608  1 z 1 3610  
414 0 0 7 374 3635 2300 0 223 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 3636  
415 0 0 7 374 3635 2300 0 218 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 10 fill_value 1 3610  
416 0 0 7 374 3635 2300 0 218 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 3 1 x 1 3610  1 y 1 3610  1 z 1 3610  
417 0 0 6 375 3635 0 0 231 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3635  4 copy 1 3636  
418 0 0 6 375 3635 0 0 231 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Fill Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3635  10 fill_value 1 3610  
419 0 0 4 376 3590 0 0 0 2 4 this 3 3635  4 size 1 3588  
420 0 0 6 379 3636 0 0 259 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length vector.
//////////////////////////////////////////////////////////////////// 0 
421 0 0 6 380 3636 0 0 256 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X vector.
//////////////////////////////////////////////////////////////////// 0 
422 0 0 6 381 3636 0 0 256 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y vector.
//////////////////////////////////////////////////////////////////// 0 
423 0 0 6 382 3636 0 0 256 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::unit_z Named Constructor
//       Access: Public
//  Description: Returns a unit Z vector.
//////////////////////////////////////////////////////////////////// 0 
424 0 0 6 384 3591 0 0 0 1 4 this 3 3636  
425 0 0 6 385 3591 0 0 0 2 4 this 3 3636  9 attr_name 1 3594  
426 0 0 6 386 3595 0 0 0 3 4 this 3 3635  9 attr_name 1 3594  6 assign 1 3591  
427 0 0 4 387 3590 0 0 224 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Indexing Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 3635  1 i 1 3595  10 assign_val 1 3610  
428 0 0 6 387 3610 0 0 0 2 4 this 3 3636  1 i 1 3595  
429 0 0 6 388 3595 0 0 271 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::size
//       Access: Public, Static
//  Description: Returns 3: the number of components of a LVecBase3.
//////////////////////////////////////////////////////////////////// 0 
430 0 0 6 389 3596 0 0 308 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::is_nan
//       Access: Public
//  Description: Returns true if any component of the vector is
//               not-a-number, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3636  
431 0 0 6 390 3610 0 0 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_cell
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3636  1 i 1 3595  
432 0 0 6 391 3610 0 0 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_x
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 3636  
433 0 0 6 392 3610 0 0 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_y
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 3636  
434 0 0 6 393 3610 0 0 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_z
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 3636  
435 0 0 4 394 3590 0 0 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set_cell
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 3635  1 i 1 3595  5 value 1 3610  
436 0 0 4 395 3590 0 0 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set_x
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3635  5 value 1 3610  
437 0 0 4 396 3590 0 0 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set_y
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3635  5 value 1 3610  
438 0 0 4 397 3590 0 0 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set_z
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3635  5 value 1 3610  
439 0 0 7 398 3607 2008 0 317 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_xy
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first two components of this vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3636  
440 0 0 7 399 3607 2008 0 322 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_xz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first and last components of this vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3636  
441 0 0 7 400 3607 2008 0 316 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_yz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               last two components of this vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3636  
442 0 0 4 401 3590 0 0 218 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_to_cell
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 3635  1 i 1 3595  5 value 1 3610  
443 0 0 4 402 3590 0 0 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_x
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3635  5 value 1 3610  
444 0 0 4 403 3590 0 0 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_y
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3635  5 value 1 3610  
445 0 0 4 404 3590 0 0 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_z
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3635  5 value 1 3610  
446 0 0 4 405 3590 0 0 399 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_data
//       Access: Public
//  Description: Returns the address of the first of the three data
//               elements in the vector.  The remaining elements
//               occupy the next positions consecutively in memory.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3636  
447 0 0 6 406 3595 0 0 278 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_num_components
//       Access: Public
//  Description: Returns the number of elements in the vector, three.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3636  
448 0 0 4 407 3590 0 0 364 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::fill
//       Access: Published
//  Description: Sets each element of the vector to the indicated
//               fill_value.  This is particularly useful for
//               initializing to zero.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3635  10 fill_value 1 3610  
449 0 0 4 408 3590 0 0 213 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 4 4 this 3 3635  1 x 1 3610  1 y 1 3610  1 z 1 3610  
450 0 0 6 409 3610 0 0 213 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::dot
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3636  5 other 1 3636  
451 0 0 6 410 3610 0 0 300 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::length_squared
//       Access: Published
//  Description: Returns the square of the vector's length, cheap and
//               easy.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3636  
452 0 0 6 411 3610 0 0 295 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::length
//       Access: Published
//  Description: Returns the length of the vector, by the Pythagorean
//               theorem.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3636  
453 0 0 6 412 3596 0 0 367 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::normalize
//       Access: Published
//  Description: Normalizes the vector in place.  Returns true if the
//               vector was normalized, false if it was a zero-length
//               vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3635  
454 0 0 7 413 3635 2300 0 390 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3636  4 onto 1 3636  
455 0 0 7 414 3635 2300 0 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::cross
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3636  5 other 1 3636  
456 0 0 6 415 3596 0 0 0 2 4 this 3 3636  5 other 1 3636  
457 0 0 6 416 3596 0 0 0 2 4 this 3 3636  5 other 1 3636  
458 0 0 6 417 3596 0 0 0 2 4 this 3 3636  5 other 1 3636  
459 0 0 7 418 3635 2300 0 1030 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_standardized_hpr
//       Access: Published
//  Description: Try to un-spin the hpr to a standard form.  Like
//               all standards, someone decides between many
//               arbitrary possible standards.  This function assumes
//               that 0 and 360 are the same, as is 720 and
//               -360.  Also 180 and -180 are the same.  Another
//               example is -90 and 270.
//               Each element will be in the range -180.0 to 179.99999.
//               The original usage of this function is for human
//               readable output.
//
//               It doesn't work so well for asserting that foo_hpr 
//               is roughly equal to bar_hpr.  Try using
//               LQuaternionf::is_same_direction() for that.
//     See Also: get_standardized_rotation,
//               LQuaternion::is_same_direction
//////////////////////////////////////////////////////////////////// 1 4 this 3 3636  
460 0 0 6 419 3595 0 0 321 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::compare_to
//       Access: Published
//  Description: This flavor of compare_to uses a default threshold
//               value based on the numeric type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3636  5 other 1 3636  
461 0 0 6 419 3595 0 0 504 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::compare_to
//       Access: Published
//  Description: Sorts vectors lexicographically, componentwise.
//               Returns a number less than 0 if this vector sorts
//               before the other one, greater than zero if it sorts
//               after, 0 if they are equivalent (within the indicated
//               tolerance).
//////////////////////////////////////////////////////////////////// 3 4 this 3 3636  5 other 1 3636  9 threshold 1 3610  
462 0 0 6 420 3588 0 0 257 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3636  
463 0 0 6 420 3588 0 0 257 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3636  9 threshold 1 3610  
464 0 0 6 421 3588 0 0 257 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3636  4 hash 1 3588  
465 0 0 6 421 3588 0 0 257 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3636  4 hash 1 3588  9 threshold 1 3610  
466 0 0 4 422 3590 0 0 272 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::generate_hash
//       Access: Published
//  Description: Adds the vector to the indicated hash generator.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3636  7 hashgen 1 3597  
467 0 0 4 422 3590 0 0 272 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::generate_hash
//       Access: Published
//  Description: Adds the vector to the indicated hash generator.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3636  7 hashgen 1 3597  9 threshold 1 3610  
468 0 0 7 423 3635 2300 0 0 1 4 this 3 3636  
469 0 0 7 424 3635 2300 0 0 2 4 this 3 3636  5 other 1 3636  
470 0 0 7 425 3635 2300 0 0 2 4 this 3 3636  5 other 1 3636  
471 0 0 7 426 3635 2300 0 0 2 4 this 3 3636  6 scalar 1 3610  
472 0 0 7 427 3635 2300 0 0 2 4 this 3 3636  6 scalar 1 3610  
473 0 0 6 428 3635 0 0 0 2 4 this 3 3635  5 other 1 3636  
474 0 0 6 429 3635 0 0 0 2 4 this 3 3635  5 other 1 3636  
475 0 0 6 430 3635 0 0 0 2 4 this 3 3635  6 scalar 1 3610  
476 0 0 6 431 3635 0 0 0 2 4 this 3 3635  6 scalar 1 3610  
477 0 0 4 432 3590 0 0 228 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::componentwise_mult
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3635  5 other 1 3636  
478 0 0 7 433 3635 2300 0 0 2 4 this 3 3636  8 exponent 1 3610  
479 0 0 6 434 3591 0 0 0 2 4 this 3 3635  8 exponent 1 3610  
480 0 0 7 435 3635 2300 0 211 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::fmax
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3636  5 other 1 3636  
481 0 0 7 436 3635 2300 0 211 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::fmin
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3636  5 other 1 3636  
482 0 0 4 437 3590 0 0 241 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::cross product (with assignment)
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3635  5 other 1 3636  
483 0 0 6 438 3596 0 0 342 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::almost_equal
//       Access: Published
//  Description: Returns true if two vectors are memberwise equal
//               within a default tolerance based on the numeric type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3636  5 other 1 3636  
484 0 0 6 438 3596 0 0 318 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::almost_equal
//       Access: Published
//  Description: Returns true if two vectors are memberwise equal
//               within a specified tolerance.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3636  5 other 1 3636  9 threshold 1 3610  
485 0 0 4 439 3590 0 0 216 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::output
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3636  3 out 1 3599  
486 0 0 6 440 3594 0 0 0 1 4 this 3 3636  
487 0 0 4 441 3590 0 0 642 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::write_datagram_fixed
//       Access: Published
//  Description: Writes the vector to the Datagram using add_float32()
//               or add_float64(), depending on the type of floats in
//               the vector, regardless of the setting of
//               Datagram::set_stdfloat_double().  This is appropriate
//               when you want to write a fixed-width value to the
//               datagram, especially when you are not writing a bam
//               file.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3636  11 destination 1 3601  
488 0 0 4 442 3590 0 0 348 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::read_datagram_fixed
//       Access: Published
//  Description: Reads the vector from the Datagram using get_float32()
//               or get_float64().  See write_datagram_fixed().
//////////////////////////////////////////////////////////////////// 2 4 this 3 3635  6 source 1 3603  
489 0 0 4 443 3590 0 0 464 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::write_datagram
//       Access: Published
//  Description: Writes the vector to the Datagram using
//               add_stdfloat().  This is appropriate when you want to
//               write the vector using the standard width setting,
//               especially when you are writing a bam file.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3636  11 destination 1 3601  
490 0 0 4 444 3590 0 0 280 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::read_datagram
//       Access: Published
//  Description: Reads the vector from the Datagram using get_stdfloat().
//////////////////////////////////////////////////////////////////// 2 4 this 3 3635  6 source 1 3603  
491 0 0 7 445 3606 0 0 0 0 
492 0 0 7 448 3638 2372 0 226 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Default Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
493 0 0 7 448 3638 2372 0 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 copy 1 3612  1 z 1 3595  
494 0 0 7 448 3638 2372 0 223 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 3639  
495 0 0 7 448 3638 2372 0 218 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 10 fill_value 1 3595  
496 0 0 7 448 3638 2372 0 218 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 3 1 x 1 3595  1 y 1 3595  1 z 1 3595  
497 0 0 6 449 3638 0 0 231 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3638  4 copy 1 3639  
498 0 0 6 449 3638 0 0 231 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Fill Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3638  10 fill_value 1 3595  
499 0 0 4 450 3590 0 0 0 2 4 this 3 3638  4 size 1 3588  
500 0 0 6 453 3639 0 0 259 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length vector.
//////////////////////////////////////////////////////////////////// 0 
501 0 0 6 454 3639 0 0 256 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X vector.
//////////////////////////////////////////////////////////////////// 0 
502 0 0 6 455 3639 0 0 256 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y vector.
//////////////////////////////////////////////////////////////////// 0 
503 0 0 6 456 3639 0 0 256 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::unit_z Named Constructor
//       Access: Public
//  Description: Returns a unit Z vector.
//////////////////////////////////////////////////////////////////// 0 
504 0 0 6 458 3591 0 0 0 1 4 this 3 3639  
505 0 0 6 459 3591 0 0 0 2 4 this 3 3639  9 attr_name 1 3594  
506 0 0 6 460 3595 0 0 0 3 4 this 3 3638  9 attr_name 1 3594  6 assign 1 3591  
507 0 0 4 461 3590 0 0 224 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Indexing Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 3638  1 i 1 3595  10 assign_val 1 3595  
508 0 0 6 461 3595 0 0 0 2 4 this 3 3639  1 i 1 3595  
509 0 0 6 462 3595 0 0 271 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::size
//       Access: Public, Static
//  Description: Returns 3: the number of components of a LVecBase3.
//////////////////////////////////////////////////////////////////// 0 
510 0 0 6 463 3596 0 0 308 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::is_nan
//       Access: Public
//  Description: Returns true if any component of the vector is
//               not-a-number, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3639  
511 0 0 6 464 3595 0 0 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_cell
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3639  1 i 1 3595  
512 0 0 6 465 3595 0 0 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_x
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 3639  
513 0 0 6 466 3595 0 0 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_y
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 3639  
514 0 0 6 467 3595 0 0 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_z
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 3639  
515 0 0 4 468 3590 0 0 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set_cell
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 3638  1 i 1 3595  5 value 1 3595  
516 0 0 4 469 3590 0 0 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set_x
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3638  5 value 1 3595  
517 0 0 4 470 3590 0 0 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set_y
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3638  5 value 1 3595  
518 0 0 4 471 3590 0 0 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set_z
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3638  5 value 1 3595  
519 0 0 7 472 3611 2070 0 317 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_xy
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first two components of this vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3639  
520 0 0 7 473 3611 2070 0 322 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_xz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first and last components of this vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3639  
521 0 0 7 474 3611 2070 0 316 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_yz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               last two components of this vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3639  
522 0 0 4 475 3590 0 0 218 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_to_cell
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 3638  1 i 1 3595  5 value 1 3595  
523 0 0 4 476 3590 0 0 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_x
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3638  5 value 1 3595  
524 0 0 4 477 3590 0 0 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_y
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3638  5 value 1 3595  
525 0 0 4 478 3590 0 0 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_z
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3638  5 value 1 3595  
526 0 0 4 479 3590 0 0 399 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_data
//       Access: Public
//  Description: Returns the address of the first of the three data
//               elements in the vector.  The remaining elements
//               occupy the next positions consecutively in memory.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3639  
527 0 0 6 480 3595 0 0 278 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_num_components
//       Access: Public
//  Description: Returns the number of elements in the vector, three.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3639  
528 0 0 4 481 3590 0 0 364 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::fill
//       Access: Published
//  Description: Sets each element of the vector to the indicated
//               fill_value.  This is particularly useful for
//               initializing to zero.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3638  10 fill_value 1 3595  
529 0 0 4 482 3590 0 0 213 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 4 4 this 3 3638  1 x 1 3595  1 y 1 3595  1 z 1 3595  
530 0 0 6 483 3595 0 0 213 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::dot
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3639  5 other 1 3639  
531 0 0 6 484 3595 0 0 300 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::length_squared
//       Access: Published
//  Description: Returns the square of the vector's length, cheap and
//               easy.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3639  
532 0 0 7 485 3638 2372 0 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::cross
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3639  5 other 1 3639  
533 0 0 6 486 3596 0 0 0 2 4 this 3 3639  5 other 1 3639  
534 0 0 6 487 3596 0 0 0 2 4 this 3 3639  5 other 1 3639  
535 0 0 6 488 3596 0 0 0 2 4 this 3 3639  5 other 1 3639  
536 0 0 7 489 3638 2372 0 1030 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_standardized_hpr
//       Access: Published
//  Description: Try to un-spin the hpr to a standard form.  Like
//               all standards, someone decides between many
//               arbitrary possible standards.  This function assumes
//               that 0 and 360 are the same, as is 720 and
//               -360.  Also 180 and -180 are the same.  Another
//               example is -90 and 270.
//               Each element will be in the range -180.0 to 179.99999.
//               The original usage of this function is for human
//               readable output.
//
//               It doesn't work so well for asserting that foo_hpr 
//               is roughly equal to bar_hpr.  Try using
//               LQuaternionf::is_same_direction() for that.
//     See Also: get_standardized_rotation,
//               LQuaternion::is_same_direction
//////////////////////////////////////////////////////////////////// 1 4 this 3 3639  
537 0 0 6 490 3595 0 0 321 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::compare_to
//       Access: Published
//  Description: This flavor of compare_to uses a default threshold
//               value based on the numeric type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3639  5 other 1 3639  
538 0 0 6 491 3588 0 0 257 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3639  
539 0 0 6 492 3588 0 0 257 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3639  4 hash 1 3588  
540 0 0 4 493 3590 0 0 272 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::generate_hash
//       Access: Published
//  Description: Adds the vector to the indicated hash generator.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3639  7 hashgen 1 3597  
541 0 0 7 494 3638 2372 0 0 1 4 this 3 3639  
542 0 0 7 495 3638 2372 0 0 2 4 this 3 3639  5 other 1 3639  
543 0 0 7 496 3638 2372 0 0 2 4 this 3 3639  5 other 1 3639  
544 0 0 7 497 3638 2372 0 0 2 4 this 3 3639  6 scalar 1 3595  
545 0 0 7 498 3638 2372 0 0 2 4 this 3 3639  6 scalar 1 3595  
546 0 0 6 499 3638 0 0 0 2 4 this 3 3638  5 other 1 3639  
547 0 0 6 500 3638 0 0 0 2 4 this 3 3638  5 other 1 3639  
548 0 0 6 501 3638 0 0 0 2 4 this 3 3638  6 scalar 1 3595  
549 0 0 6 502 3638 0 0 0 2 4 this 3 3638  6 scalar 1 3595  
550 0 0 4 503 3590 0 0 228 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::componentwise_mult
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3638  5 other 1 3639  
551 0 0 7 504 3638 2372 0 0 2 4 this 3 3639  8 exponent 1 3595  
552 0 0 6 505 3591 0 0 0 2 4 this 3 3638  8 exponent 1 3595  
553 0 0 7 506 3638 2372 0 211 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::fmax
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3639  5 other 1 3639  
554 0 0 7 507 3638 2372 0 211 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::fmin
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3639  5 other 1 3639  
555 0 0 4 508 3590 0 0 241 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::cross product (with assignment)
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3638  5 other 1 3639  
556 0 0 6 509 3596 0 0 342 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::almost_equal
//       Access: Published
//  Description: Returns true if two vectors are memberwise equal
//               within a default tolerance based on the numeric type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3639  5 other 1 3639  
557 0 0 6 509 3596 0 0 318 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::almost_equal
//       Access: Published
//  Description: Returns true if two vectors are memberwise equal
//               within a specified tolerance.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3639  5 other 1 3639  9 threshold 1 3595  
558 0 0 4 510 3590 0 0 216 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::output
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3639  3 out 1 3599  
559 0 0 6 511 3594 0 0 0 1 4 this 3 3639  
560 0 0 4 512 3590 0 0 642 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::write_datagram_fixed
//       Access: Published
//  Description: Writes the vector to the Datagram using add_float32()
//               or add_float64(), depending on the type of floats in
//               the vector, regardless of the setting of
//               Datagram::set_stdfloat_double().  This is appropriate
//               when you want to write a fixed-width value to the
//               datagram, especially when you are not writing a bam
//               file.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3639  11 destination 1 3601  
561 0 0 4 513 3590 0 0 348 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::read_datagram_fixed
//       Access: Published
//  Description: Reads the vector from the Datagram using get_float32()
//               or get_float64().  See write_datagram_fixed().
//////////////////////////////////////////////////////////////////// 2 4 this 3 3638  6 source 1 3603  
562 0 0 4 514 3590 0 0 464 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::write_datagram
//       Access: Published
//  Description: Writes the vector to the Datagram using
//               add_stdfloat().  This is appropriate when you want to
//               write the vector using the standard width setting,
//               especially when you are writing a bam file.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3639  11 destination 1 3601  
563 0 0 4 515 3590 0 0 280 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::read_datagram
//       Access: Published
//  Description: Reads the vector from the Datagram using get_stdfloat().
//////////////////////////////////////////////////////////////////// 2 4 this 3 3638  6 source 1 3603  
564 0 0 7 516 3606 0 0 0 0 
565 0 0 7 523 3641 2469 0 228 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::Default Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
566 0 0 7 523 3641 2469 0 220 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 copy 1 3585  1 z 1 3587  
567 0 0 7 523 3641 2469 0 225 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::Copy Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 3633  
568 0 0 7 523 3641 2469 0 220 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 10 fill_value 1 3587  
569 0 0 7 523 3641 2469 0 220 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 1 x 1 3587  1 y 1 3587  1 z 1 3587  
570 0 0 6 524 3641 0 0 233 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::Copy Assignment Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3641  4 copy 1 3633  
571 0 0 6 524 3641 0 0 227 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::Copy Fill Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3641  10 fill_value 1 3587  
572 0 0 6 525 3591 0 0 0 2 4 this 3 3642  9 attr_name 1 3594  
573 0 0 6 526 3595 0 0 0 3 4 this 3 3641  9 attr_name 1 3594  6 assign 1 3591  
574 0 0 6 527 3642 0 0 261 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::zero Named Constructor
//       Access: Published
//  Description: Returns a zero-length vector.
//////////////////////////////////////////////////////////////////// 0 
575 0 0 6 528 3642 0 0 258 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::unit_x Named Constructor
//       Access: Published
//  Description: Returns a unit X vector.
//////////////////////////////////////////////////////////////////// 0 
576 0 0 6 529 3642 0 0 258 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::unit_y Named Constructor
//       Access: Published
//  Description: Returns a unit Y vector.
//////////////////////////////////////////////////////////////////// 0 
577 0 0 6 530 3642 0 0 258 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::unit_z Named Constructor
//       Access: Published
//  Description: Returns a unit Z vector.
//////////////////////////////////////////////////////////////////// 0 
578 0 0 7 531 3614 2138 0 316 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::get_xy
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first two components of this vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3642  
579 0 0 7 532 3614 2138 0 321 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::get_xz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first and last components of this vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3642  
580 0 0 7 533 3614 2138 0 315 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::get_yz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               last two components of this vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3642  
581 0 0 7 534 3641 2469 0 0 1 4 this 3 3642  
582 0 0 7 535 3632 2228 0 0 2 4 this 3 3642  5 other 1 3633  
583 0 0 7 535 3641 2469 0 0 2 4 this 3 3642  5 other 1 3642  
584 0 0 7 536 3632 2228 0 0 2 4 this 3 3642  5 other 1 3633  
585 0 0 7 536 3641 2469 0 0 2 4 this 3 3642  5 other 1 3642  
586 0 0 7 537 3641 2469 0 214 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::cross
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3642  5 other 1 3633  
587 0 0 7 538 3641 2469 0 389 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3642  4 onto 1 3633  
588 0 0 6 539 3587 0 0 385 ////////////////////////////////////////////////////////////////////
//     Function: LVector::angle_rad
//       Access: Published
//  Description: Returns the unsigned angle between this vector and
//               the other one, expressed in radians.  Both vectors
//               should be initially normalized.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3642  5 other 1 3642  
589 0 0 6 540 3587 0 0 376 ////////////////////////////////////////////////////////////////////
//     Function: LVector::angle_deg
//       Access: Published
//  Description: Returns the angle between this vector and the other
//               one, expressed in degrees.  Both vectors should be
//               initially normalized.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3642  5 other 1 3642  
590 0 0 6 541 3587 0 0 548 ////////////////////////////////////////////////////////////////////
//     Function: LVector::signed_angle_rad
//       Access: Published
//  Description: returns the signed angle between two vectors.
//               The angle is positive if the rotation from this
//               vector to other is clockwise when looking in the
//               direction of the ref vector.
//
//               Vectors (except the ref vector) should be initially
//               normalized.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3642  5 other 1 3642  3 ref 1 3642  
591 0 0 6 542 3587 0 0 549 ////////////////////////////////////////////////////////////////////
//     Function: LVector::signed_angle_deg
//       Access: Published
//  Description: Returns the signed angle between two vectors. 
//               The angle is positive if the rotation from this
//               vector to other is clockwise when looking in the
//               direction of the ref vector.
//
//               Vectors (except the ref vector) should be initially
//               normalized.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3642  5 other 1 3642  3 ref 1 3642  
592 0 0 6 543 3587 0 0 266 ////////////////////////////////////////////////////////////////////
//     Function: LVector::relative_angle_rad
//       Access: Published
//  Description: This method is deprecated.  Do not use.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3642  5 other 1 3642  
593 0 0 6 544 3587 0 0 266 ////////////////////////////////////////////////////////////////////
//     Function: LVector::relative_angle_deg
//       Access: Published
//  Description: This method is deprecated.  Do not use.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3642  5 other 1 3642  
594 0 0 7 545 3641 2469 0 0 2 4 this 3 3642  6 scalar 1 3587  
595 0 0 7 546 3641 2469 0 0 2 4 this 3 3642  6 scalar 1 3587  
596 0 0 7 547 3641 2469 0 291 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::up
//       Access: Published, Static
//  Description: Returns the up vector for the given coordinate
//               system.
//////////////////////////////////////////////////////////////////// 1 2 cs 1 3461  
597 0 0 7 548 3641 2469 0 297 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::right
//       Access: Published, Static
//  Description: Returns the right vector for the given coordinate
//               system.
//////////////////////////////////////////////////////////////////// 1 2 cs 1 3461  
598 0 0 7 549 3641 2469 0 301 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::forward
//       Access: Published, Static
//  Description: Returns the forward vector for the given coordinate
//               system.
//////////////////////////////////////////////////////////////////// 1 2 cs 1 3461  
599 0 0 7 550 3641 2469 0 295 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::down
//       Access: Published, Static
//  Description: Returns the down vector for the given coordinate
//               system.
//////////////////////////////////////////////////////////////////// 1 2 cs 1 3461  
600 0 0 7 551 3641 2469 0 295 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::left
//       Access: Published, Static
//  Description: Returns the left vector for the given coordinate
//               system.
//////////////////////////////////////////////////////////////////// 1 2 cs 1 3461  
601 0 0 7 552 3641 2469 0 295 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::back
//       Access: Published, Static
//  Description: Returns the back vector for the given coordinate
//               system.
//////////////////////////////////////////////////////////////////// 1 2 cs 1 3461  
602 0 0 7 553 3641 2469 0 453 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::rfu
//       Access: Published, Static
//  Description: Returns a vector that is described by its right,
//               forward, and up components, in whatever way the
//               coordinate system represents that vector.
////////////////////////////////////////////////////////////////////
//INLINE_LINMATH FLOATNAME(LVector3) &FLOATNAME(LVector3):: 4 5 right 1 3587  3 fwd 1 3587  2 up 1 3587  2 cs 1 3461  
603 0 0 6 554 3594 0 0 0 1 4 this 3 3642  
604 0 0 7 555 3606 0 0 0 0 
605 0 0 7 558 3644 2503 0 228 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::Default Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
606 0 0 7 558 3644 2503 0 220 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 copy 1 3608  1 z 1 3610  
607 0 0 7 558 3644 2503 0 225 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::Copy Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 3636  
608 0 0 7 558 3644 2503 0 220 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 10 fill_value 1 3610  
609 0 0 7 558 3644 2503 0 220 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 1 x 1 3610  1 y 1 3610  1 z 1 3610  
610 0 0 6 559 3644 0 0 233 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::Copy Assignment Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3644  4 copy 1 3636  
611 0 0 6 559 3644 0 0 227 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::Copy Fill Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3644  10 fill_value 1 3610  
612 0 0 6 560 3591 0 0 0 2 4 this 3 3645  9 attr_name 1 3594  
613 0 0 6 561 3595 0 0 0 3 4 this 3 3644  9 attr_name 1 3594  6 assign 1 3591  
614 0 0 6 562 3645 0 0 261 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::zero Named Constructor
//       Access: Published
//  Description: Returns a zero-length vector.
//////////////////////////////////////////////////////////////////// 0 
615 0 0 6 563 3645 0 0 258 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::unit_x Named Constructor
//       Access: Published
//  Description: Returns a unit X vector.
//////////////////////////////////////////////////////////////////// 0 
616 0 0 6 564 3645 0 0 258 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::unit_y Named Constructor
//       Access: Published
//  Description: Returns a unit Y vector.
//////////////////////////////////////////////////////////////////// 0 
617 0 0 6 565 3645 0 0 258 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::unit_z Named Constructor
//       Access: Published
//  Description: Returns a unit Z vector.
//////////////////////////////////////////////////////////////////// 0 
618 0 0 7 566 3617 2156 0 316 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::get_xy
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first two components of this vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3645  
619 0 0 7 567 3617 2156 0 321 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::get_xz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first and last components of this vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3645  
620 0 0 7 568 3617 2156 0 315 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::get_yz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               last two components of this vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3645  
621 0 0 7 569 3644 2503 0 0 1 4 this 3 3645  
622 0 0 7 570 3635 2300 0 0 2 4 this 3 3645  5 other 1 3636  
623 0 0 7 570 3644 2503 0 0 2 4 this 3 3645  5 other 1 3645  
624 0 0 7 571 3635 2300 0 0 2 4 this 3 3645  5 other 1 3636  
625 0 0 7 571 3644 2503 0 0 2 4 this 3 3645  5 other 1 3645  
626 0 0 7 572 3644 2503 0 214 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::cross
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3645  5 other 1 3636  
627 0 0 7 573 3644 2503 0 389 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3645  4 onto 1 3636  
628 0 0 6 574 3610 0 0 385 ////////////////////////////////////////////////////////////////////
//     Function: LVector::angle_rad
//       Access: Published
//  Description: Returns the unsigned angle between this vector and
//               the other one, expressed in radians.  Both vectors
//               should be initially normalized.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3645  5 other 1 3645  
629 0 0 6 575 3610 0 0 376 ////////////////////////////////////////////////////////////////////
//     Function: LVector::angle_deg
//       Access: Published
//  Description: Returns the angle between this vector and the other
//               one, expressed in degrees.  Both vectors should be
//               initially normalized.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3645  5 other 1 3645  
630 0 0 6 576 3610 0 0 548 ////////////////////////////////////////////////////////////////////
//     Function: LVector::signed_angle_rad
//       Access: Published
//  Description: returns the signed angle between two vectors.
//               The angle is positive if the rotation from this
//               vector to other is clockwise when looking in the
//               direction of the ref vector.
//
//               Vectors (except the ref vector) should be initially
//               normalized.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3645  5 other 1 3645  3 ref 1 3645  
631 0 0 6 577 3610 0 0 549 ////////////////////////////////////////////////////////////////////
//     Function: LVector::signed_angle_deg
//       Access: Published
//  Description: Returns the signed angle between two vectors. 
//               The angle is positive if the rotation from this
//               vector to other is clockwise when looking in the
//               direction of the ref vector.
//
//               Vectors (except the ref vector) should be initially
//               normalized.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3645  5 other 1 3645  3 ref 1 3645  
632 0 0 6 578 3610 0 0 266 ////////////////////////////////////////////////////////////////////
//     Function: LVector::relative_angle_rad
//       Access: Published
//  Description: This method is deprecated.  Do not use.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3645  5 other 1 3645  
633 0 0 6 579 3610 0 0 266 ////////////////////////////////////////////////////////////////////
//     Function: LVector::relative_angle_deg
//       Access: Published
//  Description: This method is deprecated.  Do not use.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3645  5 other 1 3645  
634 0 0 7 580 3644 2503 0 0 2 4 this 3 3645  6 scalar 1 3610  
635 0 0 7 581 3644 2503 0 0 2 4 this 3 3645  6 scalar 1 3610  
636 0 0 7 582 3644 2503 0 291 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::up
//       Access: Published, Static
//  Description: Returns the up vector for the given coordinate
//               system.
//////////////////////////////////////////////////////////////////// 1 2 cs 1 3461  
637 0 0 7 583 3644 2503 0 297 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::right
//       Access: Published, Static
//  Description: Returns the right vector for the given coordinate
//               system.
//////////////////////////////////////////////////////////////////// 1 2 cs 1 3461  
638 0 0 7 584 3644 2503 0 301 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::forward
//       Access: Published, Static
//  Description: Returns the forward vector for the given coordinate
//               system.
//////////////////////////////////////////////////////////////////// 1 2 cs 1 3461  
639 0 0 7 585 3644 2503 0 295 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::down
//       Access: Published, Static
//  Description: Returns the down vector for the given coordinate
//               system.
//////////////////////////////////////////////////////////////////// 1 2 cs 1 3461  
640 0 0 7 586 3644 2503 0 295 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::left
//       Access: Published, Static
//  Description: Returns the left vector for the given coordinate
//               system.
//////////////////////////////////////////////////////////////////// 1 2 cs 1 3461  
641 0 0 7 587 3644 2503 0 295 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::back
//       Access: Published, Static
//  Description: Returns the back vector for the given coordinate
//               system.
//////////////////////////////////////////////////////////////////// 1 2 cs 1 3461  
642 0 0 7 588 3644 2503 0 453 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::rfu
//       Access: Published, Static
//  Description: Returns a vector that is described by its right,
//               forward, and up components, in whatever way the
//               coordinate system represents that vector.
////////////////////////////////////////////////////////////////////
//INLINE_LINMATH FLOATNAME(LVector3) &FLOATNAME(LVector3):: 4 5 right 1 3610  3 fwd 1 3610  2 up 1 3610  2 cs 1 3461  
643 0 0 6 589 3594 0 0 0 1 4 this 3 3645  
644 0 0 7 590 3606 0 0 0 0 
645 0 0 7 593 3647 2530 0 228 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::Default Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
646 0 0 7 593 3647 2530 0 220 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 copy 1 3612  1 z 1 3595  
647 0 0 7 593 3647 2530 0 225 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::Copy Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 3639  
648 0 0 7 593 3647 2530 0 220 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 10 fill_value 1 3595  
649 0 0 7 593 3647 2530 0 220 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 1 x 1 3595  1 y 1 3595  1 z 1 3595  
650 0 0 6 594 3647 0 0 233 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::Copy Assignment Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3647  4 copy 1 3639  
651 0 0 6 594 3647 0 0 227 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::Copy Fill Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3647  10 fill_value 1 3595  
652 0 0 6 595 3591 0 0 0 2 4 this 3 3648  9 attr_name 1 3594  
653 0 0 6 596 3595 0 0 0 3 4 this 3 3647  9 attr_name 1 3594  6 assign 1 3591  
654 0 0 6 597 3648 0 0 261 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::zero Named Constructor
//       Access: Published
//  Description: Returns a zero-length vector.
//////////////////////////////////////////////////////////////////// 0 
655 0 0 6 598 3648 0 0 258 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::unit_x Named Constructor
//       Access: Published
//  Description: Returns a unit X vector.
//////////////////////////////////////////////////////////////////// 0 
656 0 0 6 599 3648 0 0 258 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::unit_y Named Constructor
//       Access: Published
//  Description: Returns a unit Y vector.
//////////////////////////////////////////////////////////////////// 0 
657 0 0 6 600 3648 0 0 258 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::unit_z Named Constructor
//       Access: Published
//  Description: Returns a unit Z vector.
//////////////////////////////////////////////////////////////////// 0 
658 0 0 7 601 3620 2171 0 316 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::get_xy
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first two components of this vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3648  
659 0 0 7 602 3620 2171 0 321 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::get_xz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first and last components of this vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3648  
660 0 0 7 603 3620 2171 0 315 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::get_yz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               last two components of this vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3648  
661 0 0 7 604 3647 2530 0 0 1 4 this 3 3648  
662 0 0 7 605 3638 2372 0 0 2 4 this 3 3648  5 other 1 3639  
663 0 0 7 605 3647 2530 0 0 2 4 this 3 3648  5 other 1 3648  
664 0 0 7 606 3638 2372 0 0 2 4 this 3 3648  5 other 1 3639  
665 0 0 7 606 3647 2530 0 0 2 4 this 3 3648  5 other 1 3648  
666 0 0 7 607 3647 2530 0 214 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::cross
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3648  5 other 1 3639  
667 0 0 7 608 3647 2530 0 0 2 4 this 3 3648  6 scalar 1 3595  
668 0 0 7 609 3647 2530 0 0 2 4 this 3 3648  6 scalar 1 3595  
669 0 0 7 610 3647 2530 0 291 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::up
//       Access: Published, Static
//  Description: Returns the up vector for the given coordinate
//               system.
//////////////////////////////////////////////////////////////////// 1 2 cs 1 3461  
670 0 0 7 611 3647 2530 0 297 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::right
//       Access: Published, Static
//  Description: Returns the right vector for the given coordinate
//               system.
//////////////////////////////////////////////////////////////////// 1 2 cs 1 3461  
671 0 0 7 612 3647 2530 0 301 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::forward
//       Access: Published, Static
//  Description: Returns the forward vector for the given coordinate
//               system.
//////////////////////////////////////////////////////////////////// 1 2 cs 1 3461  
672 0 0 7 613 3647 2530 0 295 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::down
//       Access: Published, Static
//  Description: Returns the down vector for the given coordinate
//               system.
//////////////////////////////////////////////////////////////////// 1 2 cs 1 3461  
673 0 0 7 614 3647 2530 0 295 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::left
//       Access: Published, Static
//  Description: Returns the left vector for the given coordinate
//               system.
//////////////////////////////////////////////////////////////////// 1 2 cs 1 3461  
674 0 0 7 615 3647 2530 0 295 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::back
//       Access: Published, Static
//  Description: Returns the back vector for the given coordinate
//               system.
//////////////////////////////////////////////////////////////////// 1 2 cs 1 3461  
675 0 0 7 616 3647 2530 0 453 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::rfu
//       Access: Published, Static
//  Description: Returns a vector that is described by its right,
//               forward, and up components, in whatever way the
//               coordinate system represents that vector.
////////////////////////////////////////////////////////////////////
//INLINE_LINMATH FLOATNAME(LVector3) &FLOATNAME(LVector3):: 4 5 right 1 3595  3 fwd 1 3595  2 up 1 3595  2 cs 1 3461  
676 0 0 6 617 3594 0 0 0 1 4 this 3 3648  
677 0 0 7 618 3606 0 0 0 0 
678 0 0 7 621 3650 2553 0 224 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Default Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
679 0 0 7 621 3650 2553 0 219 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 copy 1 3585  1 z 1 3587  
680 0 0 7 621 3650 2553 0 221 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 3633  
681 0 0 7 621 3650 2553 0 216 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 10 fill_value 1 3587  
682 0 0 7 621 3650 2553 0 216 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 3 1 x 1 3587  1 y 1 3587  1 z 1 3587  
683 0 0 6 622 3650 0 0 229 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3650  4 copy 1 3633  
684 0 0 6 622 3650 0 0 223 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Copy Fill Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3650  10 fill_value 1 3587  
685 0 0 6 623 3591 0 0 0 2 4 this 3 3651  9 attr_name 1 3594  
686 0 0 6 624 3595 0 0 0 3 4 this 3 3650  9 attr_name 1 3594  6 assign 1 3591  
687 0 0 6 625 3651 0 0 256 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length point.
//////////////////////////////////////////////////////////////////// 0 
688 0 0 6 626 3651 0 0 253 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X point.
//////////////////////////////////////////////////////////////////// 0 
689 0 0 6 627 3651 0 0 253 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y point.
//////////////////////////////////////////////////////////////////// 0 
690 0 0 6 628 3651 0 0 253 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::unit_z Named Constructor
//       Access: Public
//  Description: Returns a unit Z point.
//////////////////////////////////////////////////////////////////// 0 
691 0 0 7 629 3623 2187 0 315 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::get_xy
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first two components of this vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3651  
692 0 0 7 630 3623 2187 0 320 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::get_xz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first and last components of this vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3651  
693 0 0 7 631 3623 2187 0 314 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::get_yz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               last two components of this vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3651  
694 0 0 7 632 3650 2553 0 0 1 4 this 3 3651  
695 0 0 7 633 3632 2228 0 0 2 4 this 3 3651  5 other 1 3633  
696 0 0 7 633 3650 2553 0 0 2 4 this 3 3651  5 other 1 3642  
697 0 0 7 634 3641 2469 0 0 2 4 this 3 3651  5 other 1 3651  
698 0 0 7 634 3632 2228 0 0 2 4 this 3 3651  5 other 1 3633  
699 0 0 7 634 3650 2553 0 0 2 4 this 3 3651  5 other 1 3642  
700 0 0 7 635 3650 2553 0 210 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::cross
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3651  5 other 1 3633  
701 0 0 7 636 3650 2553 0 388 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3651  4 onto 1 3633  
702 0 0 7 637 3650 2553 0 0 2 4 this 3 3651  6 scalar 1 3587  
703 0 0 7 638 3650 2553 0 0 2 4 this 3 3651  6 scalar 1 3587  
704 0 0 6 639 3651 0 0 440 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::origin
//       Access: Public, Static
//  Description: Returns the origin of the indicated coordinate
//               system.  This is always 0, 0, 0 with all of our
//               existing coordinate systems; it's hard to imagine it
//               ever being different.
//////////////////////////////////////////////////////////////////// 1 2 cs 1 3461  
705 0 0 7 640 3650 2553 0 383 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::rfu
//       Access: Public, Static
//  Description: Returns a point described by right, forward, up
//               displacements from the origin, wherever that maps to
//               in the given coordinate system.
//////////////////////////////////////////////////////////////////// 4 5 right 1 3587  3 fwd 1 3587  2 up 1 3587  2 cs 1 3461  
706 0 0 6 641 3594 0 0 0 1 4 this 3 3651  
707 0 0 7 642 3606 0 0 0 0 
708 0 0 7 645 3653 2576 0 224 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Default Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
709 0 0 7 645 3653 2576 0 219 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 copy 1 3608  1 z 1 3610  
710 0 0 7 645 3653 2576 0 221 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 3636  
711 0 0 7 645 3653 2576 0 216 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 10 fill_value 1 3610  
712 0 0 7 645 3653 2576 0 216 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 3 1 x 1 3610  1 y 1 3610  1 z 1 3610  
713 0 0 6 646 3653 0 0 229 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3653  4 copy 1 3636  
714 0 0 6 646 3653 0 0 223 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Copy Fill Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3653  10 fill_value 1 3610  
715 0 0 6 647 3591 0 0 0 2 4 this 3 3654  9 attr_name 1 3594  
716 0 0 6 648 3595 0 0 0 3 4 this 3 3653  9 attr_name 1 3594  6 assign 1 3591  
717 0 0 6 649 3654 0 0 256 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length point.
//////////////////////////////////////////////////////////////////// 0 
718 0 0 6 650 3654 0 0 253 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X point.
//////////////////////////////////////////////////////////////////// 0 
719 0 0 6 651 3654 0 0 253 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y point.
//////////////////////////////////////////////////////////////////// 0 
720 0 0 6 652 3654 0 0 253 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::unit_z Named Constructor
//       Access: Public
//  Description: Returns a unit Z point.
//////////////////////////////////////////////////////////////////// 0 
721 0 0 7 653 3626 2203 0 315 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::get_xy
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first two components of this vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3654  
722 0 0 7 654 3626 2203 0 320 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::get_xz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first and last components of this vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3654  
723 0 0 7 655 3626 2203 0 314 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::get_yz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               last two components of this vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3654  
724 0 0 7 656 3653 2576 0 0 1 4 this 3 3654  
725 0 0 7 657 3635 2300 0 0 2 4 this 3 3654  5 other 1 3636  
726 0 0 7 657 3653 2576 0 0 2 4 this 3 3654  5 other 1 3645  
727 0 0 7 658 3644 2503 0 0 2 4 this 3 3654  5 other 1 3654  
728 0 0 7 658 3635 2300 0 0 2 4 this 3 3654  5 other 1 3636  
729 0 0 7 658 3653 2576 0 0 2 4 this 3 3654  5 other 1 3645  
730 0 0 7 659 3653 2576 0 210 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::cross
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3654  5 other 1 3636  
731 0 0 7 660 3653 2576 0 388 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3654  4 onto 1 3636  
732 0 0 7 661 3653 2576 0 0 2 4 this 3 3654  6 scalar 1 3610  
733 0 0 7 662 3653 2576 0 0 2 4 this 3 3654  6 scalar 1 3610  
734 0 0 6 663 3654 0 0 440 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::origin
//       Access: Public, Static
//  Description: Returns the origin of the indicated coordinate
//               system.  This is always 0, 0, 0 with all of our
//               existing coordinate systems; it's hard to imagine it
//               ever being different.
//////////////////////////////////////////////////////////////////// 1 2 cs 1 3461  
735 0 0 7 664 3653 2576 0 383 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::rfu
//       Access: Public, Static
//  Description: Returns a point described by right, forward, up
//               displacements from the origin, wherever that maps to
//               in the given coordinate system.
//////////////////////////////////////////////////////////////////// 4 5 right 1 3610  3 fwd 1 3610  2 up 1 3610  2 cs 1 3461  
736 0 0 6 665 3594 0 0 0 1 4 this 3 3654  
737 0 0 7 666 3606 0 0 0 0 
738 0 0 7 669 3656 2598 0 224 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Default Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
739 0 0 7 669 3656 2598 0 219 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 copy 1 3612  1 z 1 3595  
740 0 0 7 669 3656 2598 0 221 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 3639  
741 0 0 7 669 3656 2598 0 216 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 10 fill_value 1 3595  
742 0 0 7 669 3656 2598 0 216 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 3 1 x 1 3595  1 y 1 3595  1 z 1 3595  
743 0 0 6 670 3656 0 0 229 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3656  4 copy 1 3639  
744 0 0 6 670 3656 0 0 223 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Copy Fill Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3656  10 fill_value 1 3595  
745 0 0 6 671 3591 0 0 0 2 4 this 3 3657  9 attr_name 1 3594  
746 0 0 6 672 3595 0 0 0 3 4 this 3 3656  9 attr_name 1 3594  6 assign 1 3591  
747 0 0 6 673 3657 0 0 256 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length point.
//////////////////////////////////////////////////////////////////// 0 
748 0 0 6 674 3657 0 0 253 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X point.
//////////////////////////////////////////////////////////////////// 0 
749 0 0 6 675 3657 0 0 253 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y point.
//////////////////////////////////////////////////////////////////// 0 
750 0 0 6 676 3657 0 0 253 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::unit_z Named Constructor
//       Access: Public
//  Description: Returns a unit Z point.
//////////////////////////////////////////////////////////////////// 0 
751 0 0 7 677 3629 2218 0 315 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::get_xy
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first two components of this vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3657  
752 0 0 7 678 3629 2218 0 320 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::get_xz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first and last components of this vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3657  
753 0 0 7 679 3629 2218 0 314 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::get_yz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               last two components of this vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3657  
754 0 0 7 680 3656 2598 0 0 1 4 this 3 3657  
755 0 0 7 681 3638 2372 0 0 2 4 this 3 3657  5 other 1 3639  
756 0 0 7 681 3656 2598 0 0 2 4 this 3 3657  5 other 1 3648  
757 0 0 7 682 3647 2530 0 0 2 4 this 3 3657  5 other 1 3657  
758 0 0 7 682 3638 2372 0 0 2 4 this 3 3657  5 other 1 3639  
759 0 0 7 682 3656 2598 0 0 2 4 this 3 3657  5 other 1 3648  
760 0 0 7 683 3656 2598 0 210 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::cross
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3657  5 other 1 3639  
761 0 0 7 684 3656 2598 0 0 2 4 this 3 3657  6 scalar 1 3595  
762 0 0 7 685 3656 2598 0 0 2 4 this 3 3657  6 scalar 1 3595  
763 0 0 6 686 3657 0 0 440 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::origin
//       Access: Public, Static
//  Description: Returns the origin of the indicated coordinate
//               system.  This is always 0, 0, 0 with all of our
//               existing coordinate systems; it's hard to imagine it
//               ever being different.
//////////////////////////////////////////////////////////////////// 1 2 cs 1 3461  
764 0 0 7 687 3656 2598 0 383 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::rfu
//       Access: Public, Static
//  Description: Returns a point described by right, forward, up
//               displacements from the origin, wherever that maps to
//               in the given coordinate system.
//////////////////////////////////////////////////////////////////// 4 5 right 1 3595  3 fwd 1 3595  2 up 1 3595  2 cs 1 3461  
765 0 0 6 688 3594 0 0 0 1 4 this 3 3657  
766 0 0 7 689 3606 0 0 0 0 
767 0 0 7 693 3659 2609 0 229 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Default Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
768 0 0 7 693 3659 2609 0 312 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Constructor
//       Access: Published
//  Description: Constructs an LVecBase4 from an LPoint3.  The w
//               coordinate is set to 1.0.
//////////////////////////////////////////////////////////////////// 1 5 point 1 3651  
769 0 0 7 693 3659 2609 0 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 copy 1 3633  1 w 1 3587  
770 0 0 7 693 3659 2609 0 226 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Copy Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 3660  
771 0 0 7 693 3659 2609 0 313 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Constructor
//       Access: Published
//  Description: Constructs an LVecBase4 from an LVector3.  The w
//               coordinate is set to 0.0.
//////////////////////////////////////////////////////////////////// 1 6 vector 1 3642  
772 0 0 7 693 3659 2609 0 223 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 3662  
773 0 0 7 693 3659 2609 0 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 10 fill_value 1 3587  
774 0 0 7 693 3659 2609 0 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 4 1 x 1 3587  1 y 1 3587  1 z 1 3587  1 w 1 3587  
775 0 0 6 694 3659 0 0 234 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Copy Assignment Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3659  4 copy 1 3660  
776 0 0 6 694 3659 0 0 231 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3659  4 copy 1 3662  
777 0 0 6 694 3659 0 0 234 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Fill Assignment Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3659  10 fill_value 1 3587  
778 0 0 4 695 3590 0 0 0 2 4 this 3 3659  4 size 1 3588  
779 0 0 6 698 3660 0 0 262 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::zero Named Constructor
//       Access: Published
//  Description: Returns a zero-length vector.
//////////////////////////////////////////////////////////////////// 0 
780 0 0 6 699 3660 0 0 259 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::unit_x Named Constructor
//       Access: Published
//  Description: Returns a unit X vector.
//////////////////////////////////////////////////////////////////// 0 
781 0 0 6 700 3660 0 0 259 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::unit_y Named Constructor
//       Access: Published
//  Description: Returns a unit Y vector.
//////////////////////////////////////////////////////////////////// 0 
782 0 0 6 701 3660 0 0 259 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::unit_z Named Constructor
//       Access: Published
//  Description: Returns a unit Z vector.
//////////////////////////////////////////////////////////////////// 0 
783 0 0 6 702 3660 0 0 259 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::unit_w Named Constructor
//       Access: Published
//  Description: Returns a unit W vector.
//////////////////////////////////////////////////////////////////// 0 
784 0 0 6 704 3591 0 0 0 1 4 this 3 3660  
785 0 0 6 705 3591 0 0 0 2 4 this 3 3660  9 attr_name 1 3594  
786 0 0 6 706 3595 0 0 0 3 4 this 3 3659  9 attr_name 1 3594  6 assign 1 3591  
787 0 0 4 707 3590 0 0 227 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Indexing Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 3659  1 i 1 3595  10 assign_val 1 3587  
788 0 0 6 707 3587 0 0 0 2 4 this 3 3660  1 i 1 3595  
789 0 0 6 708 3595 0 0 274 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::size
//       Access: Published, Static
//  Description: Returns 4: the number of components of a LVecBase4.
//////////////////////////////////////////////////////////////////// 0 
790 0 0 6 709 3596 0 0 311 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::is_nan
//       Access: Published
//  Description: Returns true if any component of the vector is
//               not-a-number, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3660  
791 0 0 6 710 3587 0 0 218 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_cell
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3660  1 i 1 3595  
792 0 0 6 711 3587 0 0 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_x
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 3660  
793 0 0 6 712 3587 0 0 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_y
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 3660  
794 0 0 6 713 3587 0 0 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_z
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 3660  
795 0 0 6 714 3587 0 0 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_w
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 3660  
796 0 0 4 715 3590 0 0 218 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_cell
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 3659  1 i 1 3595  5 value 1 3587  
797 0 0 4 716 3590 0 0 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_x
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3659  5 value 1 3587  
798 0 0 4 717 3590 0 0 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_y
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3659  5 value 1 3587  
799 0 0 4 718 3590 0 0 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_z
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3659  5 value 1 3587  
800 0 0 4 719 3590 0 0 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_w
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3659  5 value 1 3587  
801 0 0 4 720 3590 0 0 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_to_cell
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 3659  1 i 1 3595  5 value 1 3587  
802 0 0 4 721 3590 0 0 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_x
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3659  5 value 1 3587  
803 0 0 4 722 3590 0 0 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_y
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3659  5 value 1 3587  
804 0 0 4 723 3590 0 0 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_z
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3659  5 value 1 3587  
805 0 0 4 724 3590 0 0 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_w
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3659  5 value 1 3587  
806 0 0 4 725 3590 0 0 401 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_data
//       Access: Published
//  Description: Returns the address of the first of the four data
//               elements in the vector.  The remaining elements
//               occupy the next positions consecutively in memory.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3660  
807 0 0 6 726 3595 0 0 280 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_num_components
//       Access: Published
//  Description: Returns the number of elements in the vector, four.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3660  
808 0 0 4 728 3590 0 0 364 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::fill
//       Access: Published
//  Description: Sets each element of the vector to the indicated
//               fill_value.  This is particularly useful for
//               initializing to zero.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3659  10 fill_value 1 3587  
809 0 0 4 729 3590 0 0 213 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 5 4 this 3 3659  1 x 1 3587  1 y 1 3587  1 z 1 3587  1 w 1 3587  
810 0 0 6 730 3587 0 0 213 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::dot
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3660  5 other 1 3660  
811 0 0 6 731 3587 0 0 300 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::length_squared
//       Access: Published
//  Description: Returns the square of the vector's length, cheap and
//               easy.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3660  
812 0 0 6 732 3587 0 0 295 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::length
//       Access: Published
//  Description: Returns the length of the vector, by the Pythagorean
//               theorem.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3660  
813 0 0 6 733 3596 0 0 367 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::normalize
//       Access: Published
//  Description: Normalizes the vector in place.  Returns true if the
//               vector was normalized, false if it was a zero-length
//               vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3659  
814 0 0 7 734 3659 2609 0 390 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3660  4 onto 1 3660  
815 0 0 6 735 3596 0 0 0 2 4 this 3 3660  5 other 1 3660  
816 0 0 6 736 3596 0 0 0 2 4 this 3 3660  5 other 1 3660  
817 0 0 6 737 3596 0 0 0 2 4 this 3 3660  5 other 1 3660  
818 0 0 6 738 3595 0 0 321 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::compare_to
//       Access: Published
//  Description: This flavor of compare_to uses a default threshold
//               value based on the numeric type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3660  5 other 1 3660  
819 0 0 6 738 3595 0 0 504 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::compare_to
//       Access: Published
//  Description: Sorts vectors lexicographically, componentwise.
//               Returns a number less than 0 if this vector sorts
//               before the other one, greater than zero if it sorts
//               after, 0 if they are equivalent (within the indicated
//               tolerance).
//////////////////////////////////////////////////////////////////// 3 4 this 3 3660  5 other 1 3660  9 threshold 1 3587  
820 0 0 6 739 3588 0 0 257 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3660  
821 0 0 6 739 3588 0 0 257 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3660  9 threshold 1 3587  
822 0 0 6 740 3588 0 0 257 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3660  4 hash 1 3588  
823 0 0 6 740 3588 0 0 257 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3660  4 hash 1 3588  9 threshold 1 3587  
824 0 0 4 741 3590 0 0 272 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::generate_hash
//       Access: Published
//  Description: Adds the vector to the indicated hash generator.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3660  7 hashgen 1 3597  
825 0 0 4 741 3590 0 0 272 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::generate_hash
//       Access: Published
//  Description: Adds the vector to the indicated hash generator.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3660  7 hashgen 1 3597  9 threshold 1 3587  
826 0 0 7 742 3659 2609 0 0 1 4 this 3 3660  
827 0 0 7 743 3659 2609 0 0 2 4 this 3 3660  5 other 1 3660  
828 0 0 7 744 3659 2609 0 0 2 4 this 3 3660  5 other 1 3660  
829 0 0 7 745 3659 2609 0 0 2 4 this 3 3660  6 scalar 1 3587  
830 0 0 7 746 3659 2609 0 0 2 4 this 3 3660  6 scalar 1 3587  
831 0 0 6 747 3659 0 0 0 2 4 this 3 3659  5 other 1 3660  
832 0 0 6 748 3659 0 0 0 2 4 this 3 3659  5 other 1 3660  
833 0 0 6 749 3659 0 0 0 2 4 this 3 3659  6 scalar 1 3587  
834 0 0 6 750 3659 0 0 0 2 4 this 3 3659  6 scalar 1 3587  
835 0 0 4 751 3590 0 0 228 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::componentwise_mult
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3659  5 other 1 3660  
836 0 0 7 752 3659 2609 0 0 2 4 this 3 3660  8 exponent 1 3587  
837 0 0 6 753 3591 0 0 0 2 4 this 3 3659  8 exponent 1 3587  
838 0 0 7 754 3659 2609 0 214 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::fmax
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3660  5 other 1 3660  
839 0 0 7 755 3659 2609 0 214 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::fmin
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3660  5 other 1 3660  
840 0 0 6 756 3596 0 0 342 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::almost_equal
//       Access: Published
//  Description: Returns true if two vectors are memberwise equal
//               within a default tolerance based on the numeric type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3660  5 other 1 3660  
841 0 0 6 756 3596 0 0 318 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::almost_equal
//       Access: Published
//  Description: Returns true if two vectors are memberwise equal
//               within a specified tolerance.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3660  5 other 1 3660  9 threshold 1 3587  
842 0 0 4 757 3590 0 0 216 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::output
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3660  3 out 1 3599  
843 0 0 6 758 3594 0 0 0 1 4 this 3 3660  
844 0 0 4 759 3590 0 0 642 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::write_datagram_fixed
//       Access: Published
//  Description: Writes the vector to the Datagram using add_float32()
//               or add_float64(), depending on the type of floats in
//               the vector, regardless of the setting of
//               Datagram::set_stdfloat_double().  This is appropriate
//               when you want to write a fixed-width value to the
//               datagram, especially when you are not writing a bam
//               file.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3660  11 destination 1 3601  
845 0 0 4 760 3590 0 0 348 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::read_datagram_fixed
//       Access: Published
//  Description: Reads the vector from the Datagram using get_float32()
//               or get_float64().  See write_datagram_fixed().
//////////////////////////////////////////////////////////////////// 2 4 this 3 3659  6 source 1 3603  
846 0 0 4 761 3590 0 0 464 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::write_datagram
//       Access: Published
//  Description: Writes the vector to the Datagram using
//               add_stdfloat().  This is appropriate when you want to
//               write the vector using the standard width setting,
//               especially when you are writing a bam file.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3660  11 destination 1 3601  
847 0 0 4 762 3590 0 0 280 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::read_datagram
//       Access: Published
//  Description: Reads the vector from the Datagram using get_stdfloat().
//////////////////////////////////////////////////////////////////// 2 4 this 3 3659  6 source 1 3603  
848 0 0 7 763 3606 0 0 0 0 
849 0 0 7 766 3664 2678 0 235 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Default Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
850 0 0 7 766 3664 2678 0 232 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 3660  
851 0 0 7 766 3664 2678 0 232 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 3662  
852 0 0 7 766 3664 2678 0 227 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 4 1 x 1 3587  1 y 1 3587  1 z 1 3587  1 w 1 3587  
853 0 0 6 767 3664 0 0 240 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3664  4 copy 1 3660  
854 0 0 6 767 3664 0 0 240 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3664  4 copy 1 3662  
855 0 0 4 768 3590 0 0 222 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::set
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 5 4 this 3 3664  1 x 1 3587  1 y 1 3587  1 z 1 3587  1 w 1 3587  
856 0 0 4 769 3590 0 0 233 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Indexing Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 3664  1 i 1 3595  10 assign_val 1 3587  
857 0 0 6 769 3587 0 0 0 2 4 this 3 3662  1 i 1 3595  
858 0 0 6 770 3595 0 0 280 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::size
//       Access: Public, Static
//  Description: Returns 4: the number of components of a LVecBase4.
//////////////////////////////////////////////////////////////////// 0 
859 0 0 4 771 3590 0 0 408 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::get_data
//       Access: Public
//  Description: Returns the address of the first of the three data
//               elements in the vector.  The remaining elements
//               occupy the next positions consecutively in memory.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3662  
860 0 0 6 772 3595 0 0 283 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::get_num_components
//       Access: Public
//  Description: Returns the number of elements in the vector, 4.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3662  
861 0 0 7 773 3606 0 0 0 0 
862 0 0 7 777 3665 2689 0 229 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Default Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
863 0 0 7 777 3665 2689 0 312 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Constructor
//       Access: Published
//  Description: Constructs an LVecBase4 from an LPoint3.  The w
//               coordinate is set to 1.0.
//////////////////////////////////////////////////////////////////// 1 5 point 1 3654  
864 0 0 7 777 3665 2689 0 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 copy 1 3636  1 w 1 3610  
865 0 0 7 777 3665 2689 0 226 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Copy Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 3666  
866 0 0 7 777 3665 2689 0 313 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Constructor
//       Access: Published
//  Description: Constructs an LVecBase4 from an LVector3.  The w
//               coordinate is set to 0.0.
//////////////////////////////////////////////////////////////////// 1 6 vector 1 3645  
867 0 0 7 777 3665 2689 0 223 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 3668  
868 0 0 7 777 3665 2689 0 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 10 fill_value 1 3610  
869 0 0 7 777 3665 2689 0 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 4 1 x 1 3610  1 y 1 3610  1 z 1 3610  1 w 1 3610  
870 0 0 6 778 3665 0 0 234 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Copy Assignment Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3665  4 copy 1 3666  
871 0 0 6 778 3665 0 0 231 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3665  4 copy 1 3668  
872 0 0 6 778 3665 0 0 234 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Fill Assignment Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3665  10 fill_value 1 3610  
873 0 0 4 779 3590 0 0 0 2 4 this 3 3665  4 size 1 3588  
874 0 0 6 782 3666 0 0 262 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::zero Named Constructor
//       Access: Published
//  Description: Returns a zero-length vector.
//////////////////////////////////////////////////////////////////// 0 
875 0 0 6 783 3666 0 0 259 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::unit_x Named Constructor
//       Access: Published
//  Description: Returns a unit X vector.
//////////////////////////////////////////////////////////////////// 0 
876 0 0 6 784 3666 0 0 259 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::unit_y Named Constructor
//       Access: Published
//  Description: Returns a unit Y vector.
//////////////////////////////////////////////////////////////////// 0 
877 0 0 6 785 3666 0 0 259 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::unit_z Named Constructor
//       Access: Published
//  Description: Returns a unit Z vector.
//////////////////////////////////////////////////////////////////// 0 
878 0 0 6 786 3666 0 0 259 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::unit_w Named Constructor
//       Access: Published
//  Description: Returns a unit W vector.
//////////////////////////////////////////////////////////////////// 0 
879 0 0 6 788 3591 0 0 0 1 4 this 3 3666  
880 0 0 6 789 3591 0 0 0 2 4 this 3 3666  9 attr_name 1 3594  
881 0 0 6 790 3595 0 0 0 3 4 this 3 3665  9 attr_name 1 3594  6 assign 1 3591  
882 0 0 4 791 3590 0 0 227 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Indexing Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 3665  1 i 1 3595  10 assign_val 1 3610  
883 0 0 6 791 3610 0 0 0 2 4 this 3 3666  1 i 1 3595  
884 0 0 6 792 3595 0 0 274 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::size
//       Access: Published, Static
//  Description: Returns 4: the number of components of a LVecBase4.
//////////////////////////////////////////////////////////////////// 0 
885 0 0 6 793 3596 0 0 311 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::is_nan
//       Access: Published
//  Description: Returns true if any component of the vector is
//               not-a-number, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3666  
886 0 0 6 794 3610 0 0 218 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_cell
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3666  1 i 1 3595  
887 0 0 6 795 3610 0 0 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_x
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 3666  
888 0 0 6 796 3610 0 0 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_y
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 3666  
889 0 0 6 797 3610 0 0 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_z
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 3666  
890 0 0 6 798 3610 0 0 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_w
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 3666  
891 0 0 4 799 3590 0 0 218 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_cell
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 3665  1 i 1 3595  5 value 1 3610  
892 0 0 4 800 3590 0 0 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_x
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3665  5 value 1 3610  
893 0 0 4 801 3590 0 0 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_y
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3665  5 value 1 3610  
894 0 0 4 802 3590 0 0 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_z
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3665  5 value 1 3610  
895 0 0 4 803 3590 0 0 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_w
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3665  5 value 1 3610  
896 0 0 4 804 3590 0 0 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_to_cell
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 3665  1 i 1 3595  5 value 1 3610  
897 0 0 4 805 3590 0 0 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_x
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3665  5 value 1 3610  
898 0 0 4 806 3590 0 0 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_y
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3665  5 value 1 3610  
899 0 0 4 807 3590 0 0 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_z
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3665  5 value 1 3610  
900 0 0 4 808 3590 0 0 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_w
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3665  5 value 1 3610  
901 0 0 4 809 3590 0 0 401 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_data
//       Access: Published
//  Description: Returns the address of the first of the four data
//               elements in the vector.  The remaining elements
//               occupy the next positions consecutively in memory.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3666  
902 0 0 6 810 3595 0 0 280 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_num_components
//       Access: Published
//  Description: Returns the number of elements in the vector, four.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3666  
903 0 0 4 812 3590 0 0 364 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::fill
//       Access: Published
//  Description: Sets each element of the vector to the indicated
//               fill_value.  This is particularly useful for
//               initializing to zero.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3665  10 fill_value 1 3610  
904 0 0 4 813 3590 0 0 213 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 5 4 this 3 3665  1 x 1 3610  1 y 1 3610  1 z 1 3610  1 w 1 3610  
905 0 0 6 814 3610 0 0 213 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::dot
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3666  5 other 1 3666  
906 0 0 6 815 3610 0 0 300 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::length_squared
//       Access: Published
//  Description: Returns the square of the vector's length, cheap and
//               easy.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3666  
907 0 0 6 816 3610 0 0 295 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::length
//       Access: Published
//  Description: Returns the length of the vector, by the Pythagorean
//               theorem.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3666  
908 0 0 6 817 3596 0 0 367 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::normalize
//       Access: Published
//  Description: Normalizes the vector in place.  Returns true if the
//               vector was normalized, false if it was a zero-length
//               vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3665  
909 0 0 7 818 3665 2689 0 390 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3666  4 onto 1 3666  
910 0 0 6 819 3596 0 0 0 2 4 this 3 3666  5 other 1 3666  
911 0 0 6 820 3596 0 0 0 2 4 this 3 3666  5 other 1 3666  
912 0 0 6 821 3596 0 0 0 2 4 this 3 3666  5 other 1 3666  
913 0 0 6 822 3595 0 0 321 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::compare_to
//       Access: Published
//  Description: This flavor of compare_to uses a default threshold
//               value based on the numeric type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3666  5 other 1 3666  
914 0 0 6 822 3595 0 0 504 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::compare_to
//       Access: Published
//  Description: Sorts vectors lexicographically, componentwise.
//               Returns a number less than 0 if this vector sorts
//               before the other one, greater than zero if it sorts
//               after, 0 if they are equivalent (within the indicated
//               tolerance).
//////////////////////////////////////////////////////////////////// 3 4 this 3 3666  5 other 1 3666  9 threshold 1 3610  
915 0 0 6 823 3588 0 0 257 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3666  
916 0 0 6 823 3588 0 0 257 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3666  9 threshold 1 3610  
917 0 0 6 824 3588 0 0 257 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3666  4 hash 1 3588  
918 0 0 6 824 3588 0 0 257 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3666  4 hash 1 3588  9 threshold 1 3610  
919 0 0 4 825 3590 0 0 272 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::generate_hash
//       Access: Published
//  Description: Adds the vector to the indicated hash generator.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3666  7 hashgen 1 3597  
920 0 0 4 825 3590 0 0 272 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::generate_hash
//       Access: Published
//  Description: Adds the vector to the indicated hash generator.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3666  7 hashgen 1 3597  9 threshold 1 3610  
921 0 0 7 826 3665 2689 0 0 1 4 this 3 3666  
922 0 0 7 827 3665 2689 0 0 2 4 this 3 3666  5 other 1 3666  
923 0 0 7 828 3665 2689 0 0 2 4 this 3 3666  5 other 1 3666  
924 0 0 7 829 3665 2689 0 0 2 4 this 3 3666  6 scalar 1 3610  
925 0 0 7 830 3665 2689 0 0 2 4 this 3 3666  6 scalar 1 3610  
926 0 0 6 831 3665 0 0 0 2 4 this 3 3665  5 other 1 3666  
927 0 0 6 832 3665 0 0 0 2 4 this 3 3665  5 other 1 3666  
928 0 0 6 833 3665 0 0 0 2 4 this 3 3665  6 scalar 1 3610  
929 0 0 6 834 3665 0 0 0 2 4 this 3 3665  6 scalar 1 3610  
930 0 0 4 835 3590 0 0 228 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::componentwise_mult
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3665  5 other 1 3666  
931 0 0 7 836 3665 2689 0 0 2 4 this 3 3666  8 exponent 1 3610  
932 0 0 6 837 3591 0 0 0 2 4 this 3 3665  8 exponent 1 3610  
933 0 0 7 838 3665 2689 0 214 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::fmax
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3666  5 other 1 3666  
934 0 0 7 839 3665 2689 0 214 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::fmin
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3666  5 other 1 3666  
935 0 0 6 840 3596 0 0 342 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::almost_equal
//       Access: Published
//  Description: Returns true if two vectors are memberwise equal
//               within a default tolerance based on the numeric type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3666  5 other 1 3666  
936 0 0 6 840 3596 0 0 318 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::almost_equal
//       Access: Published
//  Description: Returns true if two vectors are memberwise equal
//               within a specified tolerance.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3666  5 other 1 3666  9 threshold 1 3610  
937 0 0 4 841 3590 0 0 216 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::output
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3666  3 out 1 3599  
938 0 0 6 842 3594 0 0 0 1 4 this 3 3666  
939 0 0 4 843 3590 0 0 642 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::write_datagram_fixed
//       Access: Published
//  Description: Writes the vector to the Datagram using add_float32()
//               or add_float64(), depending on the type of floats in
//               the vector, regardless of the setting of
//               Datagram::set_stdfloat_double().  This is appropriate
//               when you want to write a fixed-width value to the
//               datagram, especially when you are not writing a bam
//               file.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3666  11 destination 1 3601  
940 0 0 4 844 3590 0 0 348 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::read_datagram_fixed
//       Access: Published
//  Description: Reads the vector from the Datagram using get_float32()
//               or get_float64().  See write_datagram_fixed().
//////////////////////////////////////////////////////////////////// 2 4 this 3 3665  6 source 1 3603  
941 0 0 4 845 3590 0 0 464 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::write_datagram
//       Access: Published
//  Description: Writes the vector to the Datagram using
//               add_stdfloat().  This is appropriate when you want to
//               write the vector using the standard width setting,
//               especially when you are writing a bam file.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3666  11 destination 1 3601  
942 0 0 4 846 3590 0 0 280 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::read_datagram
//       Access: Published
//  Description: Reads the vector from the Datagram using get_stdfloat().
//////////////////////////////////////////////////////////////////// 2 4 this 3 3665  6 source 1 3603  
943 0 0 7 847 3606 0 0 0 0 
944 0 0 7 850 3670 2758 0 235 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Default Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
945 0 0 7 850 3670 2758 0 232 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 3666  
946 0 0 7 850 3670 2758 0 232 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 3668  
947 0 0 7 850 3670 2758 0 227 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 4 1 x 1 3610  1 y 1 3610  1 z 1 3610  1 w 1 3610  
948 0 0 6 851 3670 0 0 240 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3670  4 copy 1 3666  
949 0 0 6 851 3670 0 0 240 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3670  4 copy 1 3668  
950 0 0 4 852 3590 0 0 222 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::set
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 5 4 this 3 3670  1 x 1 3610  1 y 1 3610  1 z 1 3610  1 w 1 3610  
951 0 0 4 853 3590 0 0 233 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Indexing Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 3670  1 i 1 3595  10 assign_val 1 3610  
952 0 0 6 853 3610 0 0 0 2 4 this 3 3668  1 i 1 3595  
953 0 0 6 854 3595 0 0 280 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::size
//       Access: Public, Static
//  Description: Returns 4: the number of components of a LVecBase4.
//////////////////////////////////////////////////////////////////// 0 
954 0 0 4 855 3590 0 0 408 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::get_data
//       Access: Public
//  Description: Returns the address of the first of the three data
//               elements in the vector.  The remaining elements
//               occupy the next positions consecutively in memory.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3668  
955 0 0 6 856 3595 0 0 283 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::get_num_components
//       Access: Public
//  Description: Returns the number of elements in the vector, 4.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3668  
956 0 0 7 857 3606 0 0 0 0 
957 0 0 7 861 3671 2769 0 229 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Default Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
958 0 0 7 861 3671 2769 0 312 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Constructor
//       Access: Published
//  Description: Constructs an LVecBase4 from an LPoint3.  The w
//               coordinate is set to 1.0.
//////////////////////////////////////////////////////////////////// 1 5 point 1 3657  
959 0 0 7 861 3671 2769 0 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 copy 1 3639  1 w 1 3595  
960 0 0 7 861 3671 2769 0 226 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Copy Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 3672  
961 0 0 7 861 3671 2769 0 313 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Constructor
//       Access: Published
//  Description: Constructs an LVecBase4 from an LVector3.  The w
//               coordinate is set to 0.0.
//////////////////////////////////////////////////////////////////// 1 6 vector 1 3648  
962 0 0 7 861 3671 2769 0 223 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 3674  
963 0 0 7 861 3671 2769 0 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 10 fill_value 1 3595  
964 0 0 7 861 3671 2769 0 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 4 1 x 1 3595  1 y 1 3595  1 z 1 3595  1 w 1 3595  
965 0 0 6 862 3671 0 0 234 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Copy Assignment Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3671  4 copy 1 3672  
966 0 0 6 862 3671 0 0 231 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3671  4 copy 1 3674  
967 0 0 6 862 3671 0 0 234 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Fill Assignment Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3671  10 fill_value 1 3595  
968 0 0 4 863 3590 0 0 0 2 4 this 3 3671  4 size 1 3588  
969 0 0 6 866 3672 0 0 262 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::zero Named Constructor
//       Access: Published
//  Description: Returns a zero-length vector.
//////////////////////////////////////////////////////////////////// 0 
970 0 0 6 867 3672 0 0 259 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::unit_x Named Constructor
//       Access: Published
//  Description: Returns a unit X vector.
//////////////////////////////////////////////////////////////////// 0 
971 0 0 6 868 3672 0 0 259 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::unit_y Named Constructor
//       Access: Published
//  Description: Returns a unit Y vector.
//////////////////////////////////////////////////////////////////// 0 
972 0 0 6 869 3672 0 0 259 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::unit_z Named Constructor
//       Access: Published
//  Description: Returns a unit Z vector.
//////////////////////////////////////////////////////////////////// 0 
973 0 0 6 870 3672 0 0 259 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::unit_w Named Constructor
//       Access: Published
//  Description: Returns a unit W vector.
//////////////////////////////////////////////////////////////////// 0 
974 0 0 6 872 3591 0 0 0 1 4 this 3 3672  
975 0 0 6 873 3591 0 0 0 2 4 this 3 3672  9 attr_name 1 3594  
976 0 0 6 874 3595 0 0 0 3 4 this 3 3671  9 attr_name 1 3594  6 assign 1 3591  
977 0 0 4 875 3590 0 0 227 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Indexing Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 3671  1 i 1 3595  10 assign_val 1 3595  
978 0 0 6 875 3595 0 0 0 2 4 this 3 3672  1 i 1 3595  
979 0 0 6 876 3595 0 0 274 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::size
//       Access: Published, Static
//  Description: Returns 4: the number of components of a LVecBase4.
//////////////////////////////////////////////////////////////////// 0 
980 0 0 6 877 3596 0 0 311 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::is_nan
//       Access: Published
//  Description: Returns true if any component of the vector is
//               not-a-number, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3672  
981 0 0 6 878 3595 0 0 218 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_cell
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3672  1 i 1 3595  
982 0 0 6 879 3595 0 0 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_x
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 3672  
983 0 0 6 880 3595 0 0 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_y
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 3672  
984 0 0 6 881 3595 0 0 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_z
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 3672  
985 0 0 6 882 3595 0 0 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_w
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 3672  
986 0 0 4 883 3590 0 0 218 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_cell
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 3671  1 i 1 3595  5 value 1 3595  
987 0 0 4 884 3590 0 0 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_x
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3671  5 value 1 3595  
988 0 0 4 885 3590 0 0 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_y
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3671  5 value 1 3595  
989 0 0 4 886 3590 0 0 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_z
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3671  5 value 1 3595  
990 0 0 4 887 3590 0 0 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_w
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3671  5 value 1 3595  
991 0 0 4 888 3590 0 0 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_to_cell
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 3671  1 i 1 3595  5 value 1 3595  
992 0 0 4 889 3590 0 0 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_x
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3671  5 value 1 3595  
993 0 0 4 890 3590 0 0 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_y
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3671  5 value 1 3595  
994 0 0 4 891 3590 0 0 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_z
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3671  5 value 1 3595  
995 0 0 4 892 3590 0 0 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_w
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3671  5 value 1 3595  
996 0 0 4 893 3590 0 0 401 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_data
//       Access: Published
//  Description: Returns the address of the first of the four data
//               elements in the vector.  The remaining elements
//               occupy the next positions consecutively in memory.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3672  
997 0 0 6 894 3595 0 0 280 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_num_components
//       Access: Published
//  Description: Returns the number of elements in the vector, four.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3672  
998 0 0 4 896 3590 0 0 364 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::fill
//       Access: Published
//  Description: Sets each element of the vector to the indicated
//               fill_value.  This is particularly useful for
//               initializing to zero.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3671  10 fill_value 1 3595  
999 0 0 4 897 3590 0 0 213 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 5 4 this 3 3671  1 x 1 3595  1 y 1 3595  1 z 1 3595  1 w 1 3595  
1000 0 0 6 898 3595 0 0 213 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::dot
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3672  5 other 1 3672  
1001 0 0 6 899 3595 0 0 300 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::length_squared
//       Access: Published
//  Description: Returns the square of the vector's length, cheap and
//               easy.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3672  
1002 0 0 6 900 3596 0 0 0 2 4 this 3 3672  5 other 1 3672  
1003 0 0 6 901 3596 0 0 0 2 4 this 3 3672  5 other 1 3672  
1004 0 0 6 902 3596 0 0 0 2 4 this 3 3672  5 other 1 3672  
1005 0 0 6 903 3595 0 0 321 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::compare_to
//       Access: Published
//  Description: This flavor of compare_to uses a default threshold
//               value based on the numeric type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3672  5 other 1 3672  
1006 0 0 6 904 3588 0 0 257 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3672  
1007 0 0 6 905 3588 0 0 257 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3672  4 hash 1 3588  
1008 0 0 4 906 3590 0 0 272 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::generate_hash
//       Access: Published
//  Description: Adds the vector to the indicated hash generator.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3672  7 hashgen 1 3597  
1009 0 0 7 907 3671 2769 0 0 1 4 this 3 3672  
1010 0 0 7 908 3671 2769 0 0 2 4 this 3 3672  5 other 1 3672  
1011 0 0 7 909 3671 2769 0 0 2 4 this 3 3672  5 other 1 3672  
1012 0 0 7 910 3671 2769 0 0 2 4 this 3 3672  6 scalar 1 3595  
1013 0 0 7 911 3671 2769 0 0 2 4 this 3 3672  6 scalar 1 3595  
1014 0 0 6 912 3671 0 0 0 2 4 this 3 3671  5 other 1 3672  
1015 0 0 6 913 3671 0 0 0 2 4 this 3 3671  5 other 1 3672  
1016 0 0 6 914 3671 0 0 0 2 4 this 3 3671  6 scalar 1 3595  
1017 0 0 6 915 3671 0 0 0 2 4 this 3 3671  6 scalar 1 3595  
1018 0 0 4 916 3590 0 0 228 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::componentwise_mult
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3671  5 other 1 3672  
1019 0 0 7 917 3671 2769 0 0 2 4 this 3 3672  8 exponent 1 3595  
1020 0 0 6 918 3591 0 0 0 2 4 this 3 3671  8 exponent 1 3595  
1021 0 0 7 919 3671 2769 0 214 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::fmax
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3672  5 other 1 3672  
1022 0 0 7 920 3671 2769 0 214 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::fmin
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3672  5 other 1 3672  
1023 0 0 6 921 3596 0 0 342 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::almost_equal
//       Access: Published
//  Description: Returns true if two vectors are memberwise equal
//               within a default tolerance based on the numeric type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3672  5 other 1 3672  
1024 0 0 6 921 3596 0 0 318 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::almost_equal
//       Access: Published
//  Description: Returns true if two vectors are memberwise equal
//               within a specified tolerance.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3672  5 other 1 3672  9 threshold 1 3595  
1025 0 0 4 922 3590 0 0 216 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::output
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3672  3 out 1 3599  
1026 0 0 6 923 3594 0 0 0 1 4 this 3 3672  
1027 0 0 4 924 3590 0 0 642 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::write_datagram_fixed
//       Access: Published
//  Description: Writes the vector to the Datagram using add_float32()
//               or add_float64(), depending on the type of floats in
//               the vector, regardless of the setting of
//               Datagram::set_stdfloat_double().  This is appropriate
//               when you want to write a fixed-width value to the
//               datagram, especially when you are not writing a bam
//               file.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3672  11 destination 1 3601  
1028 0 0 4 925 3590 0 0 348 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::read_datagram_fixed
//       Access: Published
//  Description: Reads the vector from the Datagram using get_float32()
//               or get_float64().  See write_datagram_fixed().
//////////////////////////////////////////////////////////////////// 2 4 this 3 3671  6 source 1 3603  
1029 0 0 4 926 3590 0 0 464 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::write_datagram
//       Access: Published
//  Description: Writes the vector to the Datagram using
//               add_stdfloat().  This is appropriate when you want to
//               write the vector using the standard width setting,
//               especially when you are writing a bam file.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3672  11 destination 1 3601  
1030 0 0 4 927 3590 0 0 280 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::read_datagram
//       Access: Published
//  Description: Reads the vector from the Datagram using get_stdfloat().
//////////////////////////////////////////////////////////////////// 2 4 this 3 3671  6 source 1 3603  
1031 0 0 7 928 3606 0 0 0 0 
1032 0 0 7 931 3676 2835 0 235 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Default Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
1033 0 0 7 931 3676 2835 0 232 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 3672  
1034 0 0 7 931 3676 2835 0 232 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 3674  
1035 0 0 7 931 3676 2835 0 227 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 4 1 x 1 3595  1 y 1 3595  1 z 1 3595  1 w 1 3595  
1036 0 0 6 932 3676 0 0 240 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3676  4 copy 1 3672  
1037 0 0 6 932 3676 0 0 240 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3676  4 copy 1 3674  
1038 0 0 4 933 3590 0 0 222 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::set
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 5 4 this 3 3676  1 x 1 3595  1 y 1 3595  1 z 1 3595  1 w 1 3595  
1039 0 0 4 934 3590 0 0 233 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Indexing Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 3676  1 i 1 3595  10 assign_val 1 3595  
1040 0 0 6 934 3595 0 0 0 2 4 this 3 3674  1 i 1 3595  
1041 0 0 6 935 3595 0 0 280 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::size
//       Access: Public, Static
//  Description: Returns 4: the number of components of a LVecBase4.
//////////////////////////////////////////////////////////////////// 0 
1042 0 0 4 936 3590 0 0 408 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::get_data
//       Access: Public
//  Description: Returns the address of the first of the three data
//               elements in the vector.  The remaining elements
//               occupy the next positions consecutively in memory.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3674  
1043 0 0 6 937 3595 0 0 283 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::get_num_components
//       Access: Public
//  Description: Returns the number of elements in the vector, 4.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3674  
1044 0 0 7 938 3606 0 0 0 0 
1045 0 0 7 941 3677 2853 0 225 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::Default Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
1046 0 0 7 941 3677 2853 0 220 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 copy 1 3633  1 w 1 3587  
1047 0 0 7 941 3677 2853 0 222 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 3660  
1048 0 0 7 941 3677 2853 0 217 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 10 fill_value 1 3587  
1049 0 0 7 941 3677 2853 0 217 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 4 1 x 1 3587  1 y 1 3587  1 z 1 3587  1 w 1 3587  
1050 0 0 6 942 3677 0 0 230 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3677  4 copy 1 3660  
1051 0 0 6 942 3677 0 0 224 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::Copy Fill Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3677  10 fill_value 1 3587  
1052 0 0 6 943 3591 0 0 0 2 4 this 3 3678  9 attr_name 1 3594  
1053 0 0 6 944 3595 0 0 0 3 4 this 3 3677  9 attr_name 1 3594  6 assign 1 3591  
1054 0 0 6 945 3678 0 0 258 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length vector.
//////////////////////////////////////////////////////////////////// 0 
1055 0 0 6 946 3678 0 0 255 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X vector.
//////////////////////////////////////////////////////////////////// 0 
1056 0 0 6 947 3678 0 0 255 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y vector.
//////////////////////////////////////////////////////////////////// 0 
1057 0 0 6 948 3678 0 0 255 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::unit_z Named Constructor
//       Access: Public
//  Description: Returns a unit Z vector.
//////////////////////////////////////////////////////////////////// 0 
1058 0 0 6 949 3678 0 0 255 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::unit_w Named Constructor
//       Access: Public
//  Description: Returns a unit W vector.
//////////////////////////////////////////////////////////////////// 0 
1059 0 0 7 950 3677 2853 0 0 1 4 this 3 3678  
1060 0 0 7 951 3659 2609 0 0 2 4 this 3 3678  5 other 1 3660  
1061 0 0 7 951 3677 2853 0 0 2 4 this 3 3678  5 other 1 3678  
1062 0 0 7 952 3659 2609 0 0 2 4 this 3 3678  5 other 1 3660  
1063 0 0 7 952 3677 2853 0 0 2 4 this 3 3678  5 other 1 3678  
1064 0 0 7 953 3677 2853 0 0 2 4 this 3 3678  6 scalar 1 3587  
1065 0 0 7 954 3677 2853 0 0 2 4 this 3 3678  6 scalar 1 3587  
1066 0 0 7 955 3677 2853 0 389 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3678  4 onto 1 3660  
1067 0 0 6 956 3594 0 0 0 1 4 this 3 3678  
1068 0 0 7 957 3606 0 0 0 0 
1069 0 0 7 960 3680 2871 0 225 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::Default Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
1070 0 0 7 960 3680 2871 0 220 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 copy 1 3636  1 w 1 3610  
1071 0 0 7 960 3680 2871 0 222 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 3666  
1072 0 0 7 960 3680 2871 0 217 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 10 fill_value 1 3610  
1073 0 0 7 960 3680 2871 0 217 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 4 1 x 1 3610  1 y 1 3610  1 z 1 3610  1 w 1 3610  
1074 0 0 6 961 3680 0 0 230 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3680  4 copy 1 3666  
1075 0 0 6 961 3680 0 0 224 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::Copy Fill Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3680  10 fill_value 1 3610  
1076 0 0 6 962 3591 0 0 0 2 4 this 3 3681  9 attr_name 1 3594  
1077 0 0 6 963 3595 0 0 0 3 4 this 3 3680  9 attr_name 1 3594  6 assign 1 3591  
1078 0 0 6 964 3681 0 0 258 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length vector.
//////////////////////////////////////////////////////////////////// 0 
1079 0 0 6 965 3681 0 0 255 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X vector.
//////////////////////////////////////////////////////////////////// 0 
1080 0 0 6 966 3681 0 0 255 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y vector.
//////////////////////////////////////////////////////////////////// 0 
1081 0 0 6 967 3681 0 0 255 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::unit_z Named Constructor
//       Access: Public
//  Description: Returns a unit Z vector.
//////////////////////////////////////////////////////////////////// 0 
1082 0 0 6 968 3681 0 0 255 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::unit_w Named Constructor
//       Access: Public
//  Description: Returns a unit W vector.
//////////////////////////////////////////////////////////////////// 0 
1083 0 0 7 969 3680 2871 0 0 1 4 this 3 3681  
1084 0 0 7 970 3665 2689 0 0 2 4 this 3 3681  5 other 1 3666  
1085 0 0 7 970 3680 2871 0 0 2 4 this 3 3681  5 other 1 3681  
1086 0 0 7 971 3665 2689 0 0 2 4 this 3 3681  5 other 1 3666  
1087 0 0 7 971 3680 2871 0 0 2 4 this 3 3681  5 other 1 3681  
1088 0 0 7 972 3680 2871 0 0 2 4 this 3 3681  6 scalar 1 3610  
1089 0 0 7 973 3680 2871 0 0 2 4 this 3 3681  6 scalar 1 3610  
1090 0 0 7 974 3680 2871 0 389 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3681  4 onto 1 3666  
1091 0 0 6 975 3594 0 0 0 1 4 this 3 3681  
1092 0 0 7 976 3606 0 0 0 0 
1093 0 0 7 979 3683 2888 0 225 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::Default Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
1094 0 0 7 979 3683 2888 0 220 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 copy 1 3639  1 w 1 3595  
1095 0 0 7 979 3683 2888 0 222 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 3672  
1096 0 0 7 979 3683 2888 0 217 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 10 fill_value 1 3595  
1097 0 0 7 979 3683 2888 0 217 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 4 1 x 1 3595  1 y 1 3595  1 z 1 3595  1 w 1 3595  
1098 0 0 6 980 3683 0 0 230 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3683  4 copy 1 3672  
1099 0 0 6 980 3683 0 0 224 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::Copy Fill Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3683  10 fill_value 1 3595  
1100 0 0 6 981 3591 0 0 0 2 4 this 3 3684  9 attr_name 1 3594  
1101 0 0 6 982 3595 0 0 0 3 4 this 3 3683  9 attr_name 1 3594  6 assign 1 3591  
1102 0 0 6 983 3684 0 0 258 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length vector.
//////////////////////////////////////////////////////////////////// 0 
1103 0 0 6 984 3684 0 0 255 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X vector.
//////////////////////////////////////////////////////////////////// 0 
1104 0 0 6 985 3684 0 0 255 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y vector.
//////////////////////////////////////////////////////////////////// 0 
1105 0 0 6 986 3684 0 0 255 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::unit_z Named Constructor
//       Access: Public
//  Description: Returns a unit Z vector.
//////////////////////////////////////////////////////////////////// 0 
1106 0 0 6 987 3684 0 0 255 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::unit_w Named Constructor
//       Access: Public
//  Description: Returns a unit W vector.
//////////////////////////////////////////////////////////////////// 0 
1107 0 0 7 988 3683 2888 0 0 1 4 this 3 3684  
1108 0 0 7 989 3671 2769 0 0 2 4 this 3 3684  5 other 1 3672  
1109 0 0 7 989 3683 2888 0 0 2 4 this 3 3684  5 other 1 3684  
1110 0 0 7 990 3671 2769 0 0 2 4 this 3 3684  5 other 1 3672  
1111 0 0 7 990 3683 2888 0 0 2 4 this 3 3684  5 other 1 3684  
1112 0 0 7 991 3683 2888 0 0 2 4 this 3 3684  6 scalar 1 3595  
1113 0 0 7 992 3683 2888 0 0 2 4 this 3 3684  6 scalar 1 3595  
1114 0 0 6 993 3594 0 0 0 1 4 this 3 3684  
1115 0 0 7 994 3606 0 0 0 0 
1116 0 0 7 997 3686 2906 0 224 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Default Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
1117 0 0 7 997 3686 2906 0 219 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 copy 1 3633  1 w 1 3587  
1118 0 0 7 997 3686 2906 0 221 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 3660  
1119 0 0 7 997 3686 2906 0 216 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 10 fill_value 1 3587  
1120 0 0 7 997 3686 2906 0 216 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 4 1 x 1 3587  1 y 1 3587  1 z 1 3587  1 w 1 3587  
1121 0 0 6 998 3686 0 0 229 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3686  4 copy 1 3660  
1122 0 0 6 998 3686 0 0 223 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Copy Fill Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3686  10 fill_value 1 3587  
1123 0 0 6 999 3591 0 0 0 2 4 this 3 3687  9 attr_name 1 3594  
1124 0 0 6 1000 3595 0 0 0 3 4 this 3 3686  9 attr_name 1 3594  6 assign 1 3591  
1125 0 0 6 1001 3687 0 0 256 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length point.
//////////////////////////////////////////////////////////////////// 0 
1126 0 0 6 1002 3687 0 0 253 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X point.
//////////////////////////////////////////////////////////////////// 0 
1127 0 0 6 1003 3687 0 0 253 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y point.
//////////////////////////////////////////////////////////////////// 0 
1128 0 0 6 1004 3687 0 0 253 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::unit_z Named Constructor
//       Access: Public
//  Description: Returns a unit Z point.
//////////////////////////////////////////////////////////////////// 0 
1129 0 0 6 1005 3687 0 0 253 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::unit_w Named Constructor
//       Access: Public
//  Description: Returns a unit W point.
//////////////////////////////////////////////////////////////////// 0 
1130 0 0 7 1006 3686 2906 0 0 1 4 this 3 3687  
1131 0 0 7 1007 3659 2609 0 0 2 4 this 3 3687  5 other 1 3660  
1132 0 0 7 1007 3686 2906 0 0 2 4 this 3 3687  5 other 1 3678  
1133 0 0 7 1008 3677 2853 0 0 2 4 this 3 3687  5 other 1 3687  
1134 0 0 7 1008 3659 2609 0 0 2 4 this 3 3687  5 other 1 3660  
1135 0 0 7 1008 3686 2906 0 0 2 4 this 3 3687  5 other 1 3678  
1136 0 0 7 1009 3686 2906 0 0 2 4 this 3 3687  6 scalar 1 3587  
1137 0 0 7 1010 3686 2906 0 0 2 4 this 3 3687  6 scalar 1 3587  
1138 0 0 7 1011 3686 2906 0 388 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3687  4 onto 1 3660  
1139 0 0 6 1012 3594 0 0 0 1 4 this 3 3687  
1140 0 0 7 1013 3606 0 0 0 0 
1141 0 0 7 1016 3689 2924 0 224 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Default Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
1142 0 0 7 1016 3689 2924 0 219 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 copy 1 3636  1 w 1 3610  
1143 0 0 7 1016 3689 2924 0 221 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 3666  
1144 0 0 7 1016 3689 2924 0 216 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 10 fill_value 1 3610  
1145 0 0 7 1016 3689 2924 0 216 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 4 1 x 1 3610  1 y 1 3610  1 z 1 3610  1 w 1 3610  
1146 0 0 6 1017 3689 0 0 229 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3689  4 copy 1 3666  
1147 0 0 6 1017 3689 0 0 223 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Copy Fill Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3689  10 fill_value 1 3610  
1148 0 0 6 1018 3591 0 0 0 2 4 this 3 3690  9 attr_name 1 3594  
1149 0 0 6 1019 3595 0 0 0 3 4 this 3 3689  9 attr_name 1 3594  6 assign 1 3591  
1150 0 0 6 1020 3690 0 0 256 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length point.
//////////////////////////////////////////////////////////////////// 0 
1151 0 0 6 1021 3690 0 0 253 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X point.
//////////////////////////////////////////////////////////////////// 0 
1152 0 0 6 1022 3690 0 0 253 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y point.
//////////////////////////////////////////////////////////////////// 0 
1153 0 0 6 1023 3690 0 0 253 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::unit_z Named Constructor
//       Access: Public
//  Description: Returns a unit Z point.
//////////////////////////////////////////////////////////////////// 0 
1154 0 0 6 1024 3690 0 0 253 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::unit_w Named Constructor
//       Access: Public
//  Description: Returns a unit W point.
//////////////////////////////////////////////////////////////////// 0 
1155 0 0 7 1025 3689 2924 0 0 1 4 this 3 3690  
1156 0 0 7 1026 3665 2689 0 0 2 4 this 3 3690  5 other 1 3666  
1157 0 0 7 1026 3689 2924 0 0 2 4 this 3 3690  5 other 1 3681  
1158 0 0 7 1027 3680 2871 0 0 2 4 this 3 3690  5 other 1 3690  
1159 0 0 7 1027 3665 2689 0 0 2 4 this 3 3690  5 other 1 3666  
1160 0 0 7 1027 3689 2924 0 0 2 4 this 3 3690  5 other 1 3681  
1161 0 0 7 1028 3689 2924 0 0 2 4 this 3 3690  6 scalar 1 3610  
1162 0 0 7 1029 3689 2924 0 0 2 4 this 3 3690  6 scalar 1 3610  
1163 0 0 7 1030 3689 2924 0 388 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3690  4 onto 1 3666  
1164 0 0 6 1031 3594 0 0 0 1 4 this 3 3690  
1165 0 0 7 1032 3606 0 0 0 0 
1166 0 0 7 1035 3692 2941 0 224 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Default Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
1167 0 0 7 1035 3692 2941 0 219 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 copy 1 3639  1 w 1 3595  
1168 0 0 7 1035 3692 2941 0 221 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 3672  
1169 0 0 7 1035 3692 2941 0 216 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 10 fill_value 1 3595  
1170 0 0 7 1035 3692 2941 0 216 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 4 1 x 1 3595  1 y 1 3595  1 z 1 3595  1 w 1 3595  
1171 0 0 6 1036 3692 0 0 229 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3692  4 copy 1 3672  
1172 0 0 6 1036 3692 0 0 223 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Copy Fill Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3692  10 fill_value 1 3595  
1173 0 0 6 1037 3591 0 0 0 2 4 this 3 3693  9 attr_name 1 3594  
1174 0 0 6 1038 3595 0 0 0 3 4 this 3 3692  9 attr_name 1 3594  6 assign 1 3591  
1175 0 0 6 1039 3693 0 0 256 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length point.
//////////////////////////////////////////////////////////////////// 0 
1176 0 0 6 1040 3693 0 0 253 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X point.
//////////////////////////////////////////////////////////////////// 0 
1177 0 0 6 1041 3693 0 0 253 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y point.
//////////////////////////////////////////////////////////////////// 0 
1178 0 0 6 1042 3693 0 0 253 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::unit_z Named Constructor
//       Access: Public
//  Description: Returns a unit Z point.
//////////////////////////////////////////////////////////////////// 0 
1179 0 0 6 1043 3693 0 0 253 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::unit_w Named Constructor
//       Access: Public
//  Description: Returns a unit W point.
//////////////////////////////////////////////////////////////////// 0 
1180 0 0 7 1044 3692 2941 0 0 1 4 this 3 3693  
1181 0 0 7 1045 3671 2769 0 0 2 4 this 3 3693  5 other 1 3672  
1182 0 0 7 1045 3692 2941 0 0 2 4 this 3 3693  5 other 1 3684  
1183 0 0 7 1046 3683 2888 0 0 2 4 this 3 3693  5 other 1 3693  
1184 0 0 7 1046 3671 2769 0 0 2 4 this 3 3693  5 other 1 3672  
1185 0 0 7 1046 3692 2941 0 0 2 4 this 3 3693  5 other 1 3684  
1186 0 0 7 1047 3692 2941 0 0 2 4 this 3 3693  6 scalar 1 3595  
1187 0 0 7 1048 3692 2941 0 0 2 4 this 3 3693  6 scalar 1 3595  
1188 0 0 6 1049 3594 0 0 0 1 4 this 3 3693  
1189 0 0 7 1050 3606 0 0 0 0 
1190 0 0 7 1062 3695 3023 0 228 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Default Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
1191 0 0 7 1062 3695 3023 0 225 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Copy Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 5 other 1 3696  
1192 0 0 7 1062 3695 3023 0 220 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 9 3 e00 1 3587  3 e01 1 3587  3 e02 1 3587  3 e10 1 3587  3 e11 1 3587  3 e12 1 3587  3 e20 1 3587  3 e21 1 3587  3 e22 1 3587  
1193 0 0 6 1063 3695 0 0 233 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Copy Assignment Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3695  5 other 1 3696  
1194 0 0 6 1063 3695 0 0 233 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Fill Assignment Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3695  10 fill_value 1 3587  
1195 0 0 4 1064 3590 0 0 0 2 4 this 3 3695  4 size 1 3588  
1196 0 0 6 1067 3591 0 0 0 1 4 this 3 3696  
1197 0 0 4 1068 3590 0 0 391 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::fill
//       Access: Published
//  Description: Sets each element of the matrix to the indicated
//               fill_value.  This is of questionable value, but is
//               sometimes useful when initializing to zero.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3695  10 fill_value 1 3587  
1198 0 0 4 1069 3590 0 0 212 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 10 4 this 3 3695  3 e00 1 3587  3 e01 1 3587  3 e02 1 3587  3 e10 1 3587  3 e11 1 3587  3 e12 1 3587  3 e20 1 3587  3 e21 1 3587  3 e22 1 3587  
1199 0 0 4 1070 3590 0 0 329 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set_row
//       Access: Published
//  Description: Replaces the indicated row of the matrix from a
//               two-component vector, ignoring the last column.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3695  3 row 1 3595  1 v 1 3585  
1200 0 0 4 1070 3590 0 0 305 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set_row
//       Access: Published
//  Description: Replaces the indicated row of the matrix from a
//               three-component vector.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3695  3 row 1 3595  1 v 1 3633  
1201 0 0 4 1071 3590 0 0 332 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set_column
//       Access: Published
//  Description: Replaces the indicated column of the matrix from a
//               two-component vector, ignoring the last row.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3695  3 col 1 3595  1 v 1 3585  
1202 0 0 4 1071 3590 0 0 311 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set_column
//       Access: Published
//  Description: Replaces the indicated column of the matrix from a
//               three-component vector.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3695  3 col 1 3595  1 v 1 3633  
1203 0 0 4 1072 3590 0 0 301 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_row
//       Access: Published
//  Description: Stores the indicated row of the matrix as a
//               three-component vector.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3696  10 result_vec 1 3632  3 row 1 3595  
1204 0 0 7 1072 3632 2228 0 302 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_row
//       Access: Published
//  Description: Returns the indicated row of the matrix as a
//               three-component vector.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3696  3 row 1 3595  
1205 0 0 7 1073 3632 2228 0 305 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_col
//       Access: Published
//  Description: Returns the indicated column of the matrix as a
//               three-component vector.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3696  3 col 1 3595  
1206 0 0 7 1074 3584 1946 0 327 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_row2
//       Access: Published
//  Description: Returns the indicated row of the matrix as a
//               two-component vector, ignoring the last column.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3696  3 row 1 3595  
1207 0 0 7 1075 3584 1946 0 327 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_col2
//       Access: Published
//  Description: Returns the indicated column of the matrix as a
//               two-component vector, ignoring the last row.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3696  3 col 1 3595  
1208 0 0 4 1076 3590 0 0 226 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Indexing operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 3695  3 row 1 3595  3 col 1 3595  
1209 0 0 6 1076 3587 0 0 0 3 4 this 3 3696  3 row 1 3595  3 col 1 3595  
1210 0 0 7 1077 3698 2944 0 0 2 4 this 3 3695  1 i 1 3595  
1211 0 0 7 1077 3699 2947 0 0 2 4 this 3 3696  1 i 1 3595  
1212 0 0 6 1078 3595 0 0 266 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::size
//       Access: Published, Static
//  Description: Returns 3: the number of rows of a LMatrix3.
//////////////////////////////////////////////////////////////////// 0 
1213 0 0 6 1079 3596 0 0 310 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::is_nan
//       Access: Published
//  Description: Returns true if any component of the matrix is
//               not-a-number, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3696  
1214 0 0 6 1080 3596 0 0 314 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::is_identity
//       Access: Public
//  Description: Returns true if this is (close enough to) the
//               identity matrix, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3696  
1215 0 0 6 1081 3587 0 0 261 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_cell
//       Access: Published
//  Description: Returns a particular element of the matrix.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3696  3 row 1 3595  3 col 1 3595  
1216 0 0 4 1082 3590 0 0 261 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set_cell
//       Access: Published
//  Description: Changes a particular element of the matrix.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3695  3 row 1 3595  3 col 1 3595  5 value 1 3587  
1217 0 0 4 1083 3590 0 0 401 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_data
//       Access: Published
//  Description: Returns the address of the first of the nine data
//               elements in the matrix.  The remaining elements
//               occupy the next eight positions in row-major order.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3696  
1218 0 0 6 1084 3595 0 0 279 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_num_components
//       Access: Published
//  Description: Returns the number of elements in the matrix, nine.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3696  
1219 0 0 6 1085 3596 0 0 0 2 4 this 3 3696  5 other 1 3696  
1220 0 0 6 1086 3596 0 0 0 2 4 this 3 3696  5 other 1 3696  
1221 0 0 6 1087 3596 0 0 0 2 4 this 3 3696  5 other 1 3696  
1222 0 0 6 1088 3595 0 0 320 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::compare_to
//       Access: Published
//  Description: This flavor of compare_to uses a default threshold
//               value based on the numeric type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3696  5 other 1 3696  
1223 0 0 6 1088 3595 0 0 504 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::compare_to
//       Access: Published
//  Description: Sorts matrices lexicographically, componentwise.
//               Returns a number less than 0 if this matrix sorts
//               before the other one, greater than zero if it sorts
//               after, 0 if they are equivalent (within the indicated
//               tolerance).
//////////////////////////////////////////////////////////////////// 3 4 this 3 3696  5 other 1 3696  9 threshold 1 3587  
1224 0 0 6 1089 3588 0 0 256 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3696  
1225 0 0 6 1089 3588 0 0 256 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3696  9 threshold 1 3587  
1226 0 0 6 1090 3588 0 0 256 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3696  4 hash 1 3588  
1227 0 0 6 1090 3588 0 0 256 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3696  4 hash 1 3588  9 threshold 1 3587  
1228 0 0 7 1091 3632 2228 0 256 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform
//       Access: Published
//  Description: 3-component vector or point times matrix.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3696  1 v 1 3633  
1229 0 0 7 1092 3584 1946 0 403 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_point
//       Access: Published
//  Description: The matrix transforms a 2-component point (including
//               translation component) and returns the result.  This
//               assumes the matrix is an affine transform.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3696  1 v 1 3585  
1230 0 0 7 1093 3584 1946 0 400 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_vec
//       Access: Published
//  Description: The matrix transforms a 2-component vector (without
//               translation component) and returns the result.  This
//               assumes the matrix is an affine transform.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3696  1 v 1 3585  
1231 0 0 7 1093 3632 2228 0 447 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_vec
//       Access: Published
//  Description: The matrix transforms a 3-component vector and
//               returns the result.  This assumes the matrix is an
//               orthonormal transform.
//
//               In practice, this is the same computation as xform().
//////////////////////////////////////////////////////////////////// 2 4 this 3 3696  1 v 1 3633  
1232 0 0 7 1094 3632 2228 0 389 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_vec_general
//       Access: Published
//  Description: The matrix transforms a 3-component vector (without
//               translation component) and returns the result, as a
//               fully general operation.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3696  1 v 1 3633  
1233 0 0 4 1095 3590 0 0 265 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_in_place
//       Access: Published
//  Description: 3-component vector or point times matrix.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3696  1 v 1 3632  
1234 0 0 4 1096 3590 0 0 389 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_point_in_place
//       Access: Published
//  Description: The matrix transforms a 2-component point (including
//               translation component).  This assumes the matrix is
//               an affine transform.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3696  1 v 1 3584  
1235 0 0 4 1097 3590 0 0 386 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_vec_in_place
//       Access: Published
//  Description: The matrix transforms a 2-component vector (without
//               translation component).  This assumes the matrix is
//               an affine transform.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3696  1 v 1 3584  
1236 0 0 4 1097 3590 0 0 416 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_vec_in_place
//       Access: Published
//  Description: The matrix transforms a 3-component vector.  This
//               assumes the matrix is an orthonormal transform.
//
//               In practice, this is the same computation as xform().
//////////////////////////////////////////////////////////////////// 2 4 this 3 3696  1 v 1 3632  
1237 0 0 4 1098 3590 0 0 358 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_vec_general_in_place
//       Access: Published
//  Description: The matrix transforms a 3-component vector (without
//               translation component), as a fully general operation.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3696  1 v 1 3632  
1238 0 0 4 1099 3590 0 0 25 // this = other1 * other2 3 4 this 3 3695  6 other1 1 3696  6 other2 1 3696  
1239 0 0 7 1100 3695 3023 0 0 2 4 this 3 3696  5 other 1 3696  
1240 0 0 7 1100 3695 3023 0 0 2 4 this 3 3696  6 scalar 1 3587  
1241 0 0 7 1101 3695 3023 0 0 2 4 this 3 3696  6 scalar 1 3587  
1242 0 0 6 1102 3695 0 0 278 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix += matrix
//       Access: Published
//  Description: Performs a memberwise addition between two matrices.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3695  5 other 1 3696  
1243 0 0 6 1103 3695 0 0 281 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix -= matrix
//       Access: Published
//  Description: Performs a memberwise subtraction between two matrices.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3695  5 other 1 3696  
1244 0 0 6 1104 3695 0 0 225 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix *= matrix
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3695  5 other 1 3696  
1245 0 0 6 1104 3695 0 0 254 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix *= scalar
//       Access: Published
//  Description: Performs a memberwise scale.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3695  6 scalar 1 3587  
1246 0 0 6 1105 3695 0 0 254 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix /= scalar
//       Access: Published
//  Description: Performs a memberwise scale.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3695  6 scalar 1 3587  
1247 0 0 4 1106 3590 0 0 227 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::componentwise_mult
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3695  5 other 1 3696  
1248 0 0 6 1107 3587 0 0 259 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::determinant
//       Access: Published
//  Description: Returns the determinant of the matrix.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3696  
1249 0 0 4 1108 3590 0 0 223 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::transpose_from
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3695  5 other 1 3696  
1250 0 0 4 1109 3590 0 0 227 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::transpose_in_place
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 3695  
1251 0 0 6 1110 3596 0 0 808 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::invert_from
//       Access: Published
//  Description: Computes the inverse of the other matrix, and stores
//               the result in this matrix.  This is a fully general
//               operation and makes no assumptions about the type of
//               transform represented by the matrix.
//
//               The other matrix must be a different object than this
//               matrix.  However, if you need to invert a matrix in
//               place, see invert_in_place.
//
//               The return value is true if the matrix was
//               successfully inverted, false if there was a
//               singularity.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3695  5 other 1 3696  
1252 0 0 6 1111 3596 0 0 364 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::invert_in_place
//       Access: Published
//  Description: Inverts the current matrix.  Returns true if the
//               inverse is successful, false if the matrix was
//               singular.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3695  
1253 0 0 6 1112 3596 0 0 348 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::invert_transpose_from
//       Access: Published
//  Description: Simultaneously computes the inverse of the indicated
//               matrix, and then the transpose of that inverse.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3695  5 other 1 3696  
1254 0 0 6 1112 3596 0 0 348 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::invert_transpose_from
//       Access: Published
//  Description: Simultaneously computes the inverse of the indicated
//               matrix, and then the transpose of that inverse.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3695  5 other 1 3700  
1255 0 0 6 1113 3696 0 0 391 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::ident_mat
//       Access: Published, Static
//  Description: Returns an identity matrix.
//
//               This function definition must appear first, since
//               some inline functions below take advantage of it.
//////////////////////////////////////////////////////////////////// 0 
1256 0 0 4 1114 3590 0 0 306 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_translate_mat
//       Access: Published
//  Description: Fills mat with a matrix that applies the indicated
//               translation.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3695  5 trans 1 3585  
1257 0 0 4 1115 3590 0 0 324 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_rotate_mat
//       Access: Published
//  Description: Fills mat with a matrix that rotates by the given
//               angle in degrees counterclockwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3695  5 angle 1 3587  
1258 0 0 4 1115 3590 0 0 368 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_rotate_mat
//       Access: Published
//  Description: Fills mat with a matrix that rotates by the given
//               angle in degrees counterclockwise about the indicated
//               vector.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3695  5 angle 1 3587  4 axis 1 3633  2 cs 1 3461  
1259 0 0 4 1116 3590 0 0 320 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_scale_mat
//       Access: Published
//  Description: Fills mat with a matrix that applies the indicated
//               scale in each of the two axes.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3695  5 scale 1 3585  
1260 0 0 4 1116 3590 0 0 322 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_scale_mat
//       Access: Published
//  Description: Fills mat with a matrix that applies the indicated
//               scale in each of the three axes.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3695  5 scale 1 3633  
1261 0 0 7 1117 3695 3023 0 303 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::translate_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               translation.
//////////////////////////////////////////////////////////////////// 1 5 trans 1 3585  
1262 0 0 7 1117 3695 3023 0 303 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::translate_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               translation.
//////////////////////////////////////////////////////////////////// 2 2 tx 1 3587  2 ty 1 3587  
1263 0 0 7 1118 3695 3023 0 321 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat
//       Access: Published, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise.
//////////////////////////////////////////////////////////////////// 1 5 angle 1 3587  
1264 0 0 7 1118 3695 3023 0 348 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat
//       Access: Published, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise about the indicated vector.
//////////////////////////////////////////////////////////////////// 3 5 angle 1 3587  4 axis 1 3633  2 cs 1 3461  
1265 0 0 7 1119 3695 3023 0 317 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the two axes.
//////////////////////////////////////////////////////////////////// 1 5 scale 1 3585  
1266 0 0 7 1119 3695 3023 0 319 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the three axes.
//////////////////////////////////////////////////////////////////// 1 5 scale 1 3633  
1267 0 0 7 1119 3695 3023 0 317 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the two axes.
//////////////////////////////////////////////////////////////////// 2 2 sx 1 3587  2 sy 1 3587  
1268 0 0 7 1119 3695 3023 0 319 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the three axes.
//////////////////////////////////////////////////////////////////// 3 2 sx 1 3587  2 sy 1 3587  2 sz 1 3587  
1269 0 0 4 1120 3590 0 0 412 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_rotate_mat_normaxis
//       Access: Published
//  Description: Fills mat with a matrix that rotates by the given
//               angle in degrees counterclockwise about the indicated
//               vector.  Assumes axis has been normalized.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3695  5 angle 1 3587  4 axis 1 3633  2 cs 1 3461  
1270 0 0 7 1121 3695 3023 0 408 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat_normaxis
//       Access: Published, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise about the indicated vector.
//               Assumes axis has been normalized.
//////////////////////////////////////////////////////////////////// 3 5 angle 1 3587  4 axis 1 3633  2 cs 1 3461  
1271 0 0 4 1122 3590 0 0 324 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_shear_mat
//       Access: Published
//  Description: Fills mat with a matrix that applies the indicated
//               shear in each of the three planes.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3695  5 shear 1 3633  2 cs 1 3461  
1272 0 0 7 1123 3695 3023 0 321 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::shear_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               shear in each of the three planes.
//////////////////////////////////////////////////////////////////// 2 5 shear 1 3633  2 cs 1 3461  
1273 0 0 7 1123 3695 3023 0 321 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::shear_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               shear in each of the three planes.
//////////////////////////////////////////////////////////////////// 4 4 shxy 1 3587  4 shxz 1 3587  4 shyz 1 3587  2 cs 1 3461  
1274 0 0 4 1124 3590 0 0 312 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_scale_shear_mat
//       Access: Published
//  Description: Fills mat with a matrix that applies the indicated
//               scale and shear.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3695  5 scale 1 3633  5 shear 1 3633  2 cs 1 3461  
1275 0 0 7 1125 3695 3023 0 309 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_shear_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               scale and shear.
//////////////////////////////////////////////////////////////////// 3 5 scale 1 3633  5 shear 1 3633  2 cs 1 3461  
1276 0 0 7 1125 3695 3023 0 309 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_shear_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               scale and shear.
//////////////////////////////////////////////////////////////////// 7 2 sx 1 3587  2 sy 1 3587  2 sz 1 3587  4 shxy 1 3587  4 shxz 1 3587  4 shyz 1 3587  2 cs 1 3461  
1277 0 0 6 1126 3696 0 0 350 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::convert_mat
//       Access: Published, Static
//  Description: Returns a matrix that transforms from the indicated
//               coordinate system to the indicated coordinate system.
//////////////////////////////////////////////////////////////////// 2 4 from 1 3461  2 to 1 3461  
1278 0 0 6 1127 3596 0 0 342 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::almost_equal
//       Access: Published
//  Description: Returns true if two matrices are memberwise equal
//               within a default tolerance based on the numeric type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3696  5 other 1 3696  
1279 0 0 6 1127 3596 0 0 318 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::almost_equal
//       Access: Published
//  Description: Returns true if two matrices are memberwise equal
//               within a specified tolerance.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3696  5 other 1 3696  9 threshold 1 3587  
1280 0 0 4 1128 3590 0 0 215 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::output
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3696  3 out 1 3599  
1281 0 0 4 1129 3590 0 0 214 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::write
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 3696  3 out 1 3599  12 indent_level 1 3595  
1282 0 0 6 1130 3594 0 0 0 1 4 this 3 3696  
1283 0 0 4 1131 3590 0 0 271 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::generate_hash
//       Access: Published
//  Description: Adds the vector to the indicated hash generator.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3696  7 hashgen 1 3597  
1284 0 0 4 1131 3590 0 0 271 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::generate_hash
//       Access: Published
//  Description: Adds the vector to the indicated hash generator.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3696  7 hashgen 1 3597  9 threshold 1 3587  
1285 0 0 4 1132 3590 0 0 641 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::write_datagram_fixed
//       Access: Published
//  Description: Writes the matrix to the Datagram using add_float32()
//               or add_float64(), depending on the type of floats in
//               the matrix, regardless of the setting of
//               Datagram::set_stdfloat_double().  This is appropriate
//               when you want to write a fixed-width value to the
//               datagram, especially when you are not writing a bam
//               file.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3696  11 destination 1 3601  
1286 0 0 4 1133 3590 0 0 347 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::read_datagram_fixed
//       Access: Published
//  Description: Reads the matrix from the Datagram using get_float32()
//               or get_float64().  See write_datagram_fixed().
//////////////////////////////////////////////////////////////////// 2 4 this 3 3695  4 scan 1 3603  
1287 0 0 4 1134 3590 0 0 463 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::write_datagram
//       Access: Published
//  Description: Writes the matrix to the Datagram using
//               add_stdfloat().  This is appropriate when you want to
//               write the matrix using the standard width setting,
//               especially when you are writing a bam file.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3696  11 destination 1 3601  
1288 0 0 4 1135 3590 0 0 279 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::read_datagram
//       Access: Published
//  Description: Reads the matrix from the Datagram using get_stdfloat().
//////////////////////////////////////////////////////////////////// 2 4 this 3 3695  6 source 1 3603  
1289 0 0 7 1136 3606 0 0 0 0 
1290 0 0 4 1055 3590 0 0 225 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Row::operator []
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 3698  1 i 1 3595  10 assign_val 1 3587  
1291 0 0 6 1055 3587 0 0 0 2 4 this 3 3702  1 i 1 3595  
1292 0 0 6 1056 3595 0 0 274 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Row::size
//       Access: Published, Static
//  Description: Returns 3: the number of columns of a LMatrix3.
//////////////////////////////////////////////////////////////////// 0 
1293 0 0 6 1059 3587 0 0 0 2 4 this 3 3704  1 i 1 3595  
1294 0 0 6 1060 3595 0 0 275 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::CRow::size
//       Access: Published, Static
//  Description: Returns 3: the number of columns of a LMatrix3.
//////////////////////////////////////////////////////////////////// 0 
1295 0 0 7 1150 3706 3117 0 225 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Default Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
1296 0 0 7 1150 3706 3117 0 228 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Constructor, upper 3x3
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 6 upper3 1 3696  
1297 0 0 7 1150 3706 3117 0 245 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Constructor, upper 3x3 plus translation
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 6 upper3 1 3696  5 trans 1 3633  
1298 0 0 7 1150 3706 3117 0 222 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 5 other 1 3700  
1299 0 0 7 1150 3706 3117 0 225 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Copy Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 5 other 1 3707  
1300 0 0 7 1150 3706 3117 0 217 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 16 3 e00 1 3587  3 e01 1 3587  3 e02 1 3587  3 e03 1 3587  3 e10 1 3587  3 e11 1 3587  3 e12 1 3587  3 e13 1 3587  3 e20 1 3587  3 e21 1 3587  3 e22 1 3587  3 e23 1 3587  3 e30 1 3587  3 e31 1 3587  3 e32 1 3587  3 e33 1 3587  
1301 0 0 6 1151 3706 0 0 230 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3706  5 other 1 3700  
1302 0 0 6 1151 3706 0 0 233 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Copy Assignment Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3706  5 other 1 3707  
1303 0 0 6 1151 3706 0 0 230 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Fill Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3706  10 fill_value 1 3587  
1304 0 0 4 1152 3590 0 0 0 2 4 this 3 3706  4 size 1 3588  
1305 0 0 6 1155 3591 0 0 0 1 4 this 3 3700  
1306 0 0 4 1156 3590 0 0 388 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::fill
//       Access: Public
//  Description: Sets each element of the matrix to the indicated
//               fill_value.  This is of questionable value, but is
//               sometimes useful when initializing to zero.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3706  10 fill_value 1 3587  
1307 0 0 4 1157 3590 0 0 209 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 17 4 this 3 3706  3 e00 1 3587  3 e01 1 3587  3 e02 1 3587  3 e03 1 3587  3 e10 1 3587  3 e11 1 3587  3 e12 1 3587  3 e13 1 3587  3 e20 1 3587  3 e21 1 3587  3 e22 1 3587  3 e23 1 3587  3 e30 1 3587  3 e31 1 3587  3 e32 1 3587  3 e33 1 3587  
1308 0 0 4 1158 3590 0 0 247 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_upper_3
//       Access: Public
//  Description: Sets the upper 3x3 submatrix.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3706  6 upper3 1 3696  
1309 0 0 7 1159 3695 3023 0 252 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_upper_3
//       Access: Public
//  Description: Retrieves the upper 3x3 submatrix.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3700  
1310 0 0 4 1160 3590 0 0 353 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_row
//       Access: Public
//  Description: Replaces the indicated row of the matrix with the
//               indicated 3-component vector, ignoring the last
//               column.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3706  3 row 1 3595  1 v 1 3633  
1311 0 0 4 1160 3590 0 0 255 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_row
//       Access: Public
//  Description: Replaces the indicated row of the matrix.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3706  3 row 1 3595  1 v 1 3660  
1312 0 0 4 1161 3590 0 0 353 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_col
//       Access: Public
//  Description: Replaces the indicated column of the matrix with the
//               indicated 3-component vector, ignoring the last
//               row.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3706  3 col 1 3595  1 v 1 3633  
1313 0 0 4 1161 3590 0 0 258 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_col
//       Access: Public
//  Description: Replaces the indicated column of the matrix.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3706  3 col 1 3595  1 v 1 3660  
1314 0 0 4 1162 3590 0 0 294 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_row
//       Access: Public
//  Description: Stores the indicated row of the matrix as a
//               4-component vector.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3700  10 result_vec 1 3659  3 row 1 3595  
1315 0 0 7 1162 3659 2609 0 297 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_row
//       Access: Public
//  Description: Retrieves the indicated row of the matrix as a
//               4-component vector.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3700  3 row 1 3595  
1316 0 0 7 1163 3659 2609 0 300 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_col
//       Access: Public
//  Description: Retrieves the indicated column of the matrix as a
//               4-component vector.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3700  3 col 1 3595  
1317 0 0 4 1164 3590 0 0 318 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_row3
//       Access: Public
//  Description: Stores the row column of the matrix as a
//               3-component vector, ignoring the last column.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3700  10 result_vec 1 3632  3 row 1 3595  
1318 0 0 7 1164 3632 2228 0 321 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_row3
//       Access: Public
//  Description: Retrieves the row column of the matrix as a
//               3-component vector, ignoring the last column.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3700  3 row 1 3595  
1319 0 0 7 1165 3632 2228 0 324 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_col3
//       Access: Public
//  Description: Retrieves the indicated column of the matrix as a
//               3-component vector, ignoring the last row.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3700  3 col 1 3595  
1320 0 0 4 1166 3590 0 0 223 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Indexing operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 3706  3 row 1 3595  3 col 1 3595  
1321 0 0 6 1166 3587 0 0 0 3 4 this 3 3700  3 row 1 3595  3 col 1 3595  
1322 0 0 7 1167 3709 3028 0 0 2 4 this 3 3706  1 i 1 3595  
1323 0 0 7 1167 3710 3031 0 0 2 4 this 3 3700  1 i 1 3595  
1324 0 0 6 1168 3595 0 0 263 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::size
//       Access: Public, Static
//  Description: Returns 4: the number of rows of a LMatrix4.
//////////////////////////////////////////////////////////////////// 0 
1325 0 0 6 1169 3596 0 0 307 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::is_nan
//       Access: Public
//  Description: Returns true if any component of the matrix is
//               not-a-number, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3700  
1326 0 0 6 1170 3596 0 0 314 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::is_identity
//       Access: Public
//  Description: Returns true if this is (close enough to) the
//               identity matrix, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3700  
1327 0 0 6 1171 3587 0 0 258 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_cell
//       Access: Public
//  Description: Returns a particular element of the matrix.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3700  3 row 1 3595  3 col 1 3595  
1328 0 0 4 1172 3590 0 0 258 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_cell
//       Access: Public
//  Description: Changes a particular element of the matrix.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3706  3 row 1 3595  3 col 1 3595  5 value 1 3587  
1329 0 0 4 1173 3590 0 0 398 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_data
//       Access: Public
//  Description: Returns the address of the first of the nine data
//               elements in the matrix.  The remaining elements
//               occupy the next eight positions in row-major order.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3700  
1330 0 0 6 1174 3595 0 0 274 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_num_components
//       Access: Public
//  Description: Returns the number of elements in the matrix, 16.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3700  
1331 0 0 4 1175 3590 0 0 316 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::begin
//       Access: Public
//  Description: Returns an iterator that may be used to traverse the
//               elements of the matrix, STL-style.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3706  
1332 0 0 4 1175 3590 0 0 316 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::begin
//       Access: Public
//  Description: Returns an iterator that may be used to traverse the
//               elements of the matrix, STL-style.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3700  
1333 0 0 4 1176 3590 0 0 314 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::end
//       Access: Public
//  Description: Returns an iterator that may be used to traverse the
//               elements of the matrix, STL-style.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3706  
1334 0 0 4 1176 3590 0 0 314 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::end
//       Access: Public
//  Description: Returns an iterator that may be used to traverse the
//               elements of the matrix, STL-style.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3700  
1335 0 0 6 1177 3596 0 0 0 2 4 this 3 3700  5 other 1 3700  
1336 0 0 6 1178 3596 0 0 0 2 4 this 3 3700  5 other 1 3700  
1337 0 0 6 1179 3596 0 0 0 2 4 this 3 3700  5 other 1 3700  
1338 0 0 6 1180 3595 0 0 317 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::compare_to
//       Access: Public
//  Description: This flavor of compare_to uses a default threshold
//               value based on the numeric type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3700  5 other 1 3700  
1339 0 0 6 1180 3595 0 0 501 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::compare_to
//       Access: Public
//  Description: Sorts matrices lexicographically, componentwise.
//               Returns a number less than 0 if this matrix sorts
//               before the other one, greater than zero if it sorts
//               after, 0 if they are equivalent (within the indicated
//               tolerance).
//////////////////////////////////////////////////////////////////// 3 4 this 3 3700  5 other 1 3700  9 threshold 1 3587  
1340 0 0 6 1181 3588 0 0 253 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_hash
//       Access: Public
//  Description: Returns a suitable hash for phash_map.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3700  
1341 0 0 6 1181 3588 0 0 253 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_hash
//       Access: Public
//  Description: Returns a suitable hash for phash_map.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3700  9 threshold 1 3587  
1342 0 0 6 1182 3588 0 0 253 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::add_hash
//       Access: Public
//  Description: Adds the vector into the running hash.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3700  4 hash 1 3588  
1343 0 0 6 1182 3588 0 0 253 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::add_hash
//       Access: Public
//  Description: Adds the vector into the running hash.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3700  4 hash 1 3588  9 threshold 1 3587  
1344 0 0 7 1183 3659 2609 0 306 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform
//       Access: Public
//  Description: 4-component vector or point times matrix.  This is a
//               fully general operation.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3700  1 v 1 3660  
1345 0 0 7 1184 3632 2228 0 400 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_point
//       Access: Public
//  Description: The matrix transforms a 3-component point (including
//               translation component) and returns the result.  This
//               assumes the matrix is an affine transform.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3700  1 v 1 3633  
1346 0 0 7 1185 3632 2228 0 389 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_point_general
//       Access: Public
//  Description: The matrix transforms a 3-component point (including
//               translation component) and returns the result, as a
//               fully general operation.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3700  1 v 1 3633  
1347 0 0 7 1186 3632 2228 0 402 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_vec
//       Access: Public
//  Description: The matrix transforms a 3-component vector (without
//               translation component) and returns the result.  This
//               assumes the matrix is an orthonormal transform.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3700  1 v 1 3633  
1348 0 0 7 1187 3632 2228 0 386 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_vec_general
//       Access: Public
//  Description: The matrix transforms a 3-component vector (without
//               translation component) and returns the result, as a
//               fully general operation.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3700  1 v 1 3633  
1349 0 0 4 1188 3590 0 0 315 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_in_place
//       Access: Public
//  Description: 4-component vector or point times matrix.  This is a
//               fully general operation.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3700  1 v 1 3659  
1350 0 0 4 1189 3590 0 0 386 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_point_in_place
//       Access: Public
//  Description: The matrix transforms a 3-component point (including
//               translation component).  This assumes the matrix is
//               an affine transform.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3700  1 v 1 3632  
1351 0 0 4 1190 3590 0 0 358 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_point_general_in_place
//       Access: Public
//  Description: The matrix transforms a 3-component point (including
//               translation component), as a fully general operation.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3700  1 v 1 3632  
1352 0 0 4 1191 3590 0 0 388 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_vec_in_place
//       Access: Public
//  Description: The matrix transforms a 3-component vector (without
//               translation component).  This assumes the matrix is
//               an orthonormal transform.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3700  1 v 1 3632  
1353 0 0 4 1192 3590 0 0 355 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_vec_general_in_place
//       Access: Public
//  Description: The matrix transforms a 3-component vector (without
//               translation component), as a fully general operation.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3700  1 v 1 3632  
1354 0 0 4 1193 3590 0 0 25 // this = other1 * other2 3 4 this 3 3706  6 other1 1 3700  6 other2 1 3700  
1355 0 0 7 1194 3706 3117 0 0 2 4 this 3 3700  5 other 1 3700  
1356 0 0 7 1194 3706 3117 0 0 2 4 this 3 3700  6 scalar 1 3587  
1357 0 0 7 1195 3706 3117 0 0 2 4 this 3 3700  6 scalar 1 3587  
1358 0 0 6 1196 3706 0 0 275 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix += matrix
//       Access: Public
//  Description: Performs a memberwise addition between two matrices.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3706  5 other 1 3700  
1359 0 0 6 1197 3706 0 0 275 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix -= matrix
//       Access: Public
//  Description: Performs a memberwise addition between two matrices.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3706  5 other 1 3700  
1360 0 0 6 1198 3706 0 0 222 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix *= matrix
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3706  5 other 1 3700  
1361 0 0 6 1198 3706 0 0 222 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix *= scalar
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3706  6 scalar 1 3587  
1362 0 0 6 1199 3706 0 0 222 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix /= scalar
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3706  6 scalar 1 3587  
1363 0 0 4 1200 3590 0 0 227 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::componentwise_mult
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3706  5 other 1 3700  
1364 0 0 4 1201 3590 0 0 220 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::transpose_from
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3706  5 other 1 3700  
1365 0 0 4 1202 3590 0 0 224 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::transpose_in_place
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 3706  
1366 0 0 6 1203 3596 0 0 803 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::invert_from
//       Access: Public
//  Description: Computes the inverse of the other matrix, and stores
//               the result in this matrix.  This is a fully general
//               operation and makes no assumptions about the type of
//               transform represented by the matrix.
//
//               The other matrix must be a different object than this
//               matrix.  However, if you need to invert a matrix in
//               place, see invert_in_place.
//
//               The return value is true if the matrix was
//               successfully inverted, false if the was a
//               singularity.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3706  5 other 1 3700  
1367 0 0 6 1204 3596 0 0 149 // bugbug: we could optimize this for rotation/scale/translation matrices
//         (transpose upper 3x3 and take negative of translation component) 2 4 this 3 3706  5 other 1 3700  
1368 0 0 6 1205 3596 0 0 361 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::invert_in_place
//       Access: Public
//  Description: Inverts the current matrix.  Returns true if the
//               inverse is successful, false if the matrix was
//               singular.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3706  
1369 0 0 4 1206 3590 0 0 252 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::accumulate
//       Access: Public
//  Description: Computes (*this) += other * weight.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3706  5 other 1 3700  6 weight 1 3587  
1370 0 0 6 1207 3700 0 0 388 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::ident_mat
//       Access: Public, Static
//  Description: Returns an identity matrix.
//
//               This function definition must appear first, since
//               some inline functions below take advantage of it.
//////////////////////////////////////////////////////////////////// 0 
1371 0 0 6 1208 3700 0 0 258 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::ones_mat
//       Access: Public, Static
//  Description: Returns an matrix filled with ones.
//////////////////////////////////////////////////////////////////// 0 
1372 0 0 6 1209 3700 0 0 260 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::zeros_mat
//       Access: Public, Static
//  Description: Returns an matrix filled with zeros.
//////////////////////////////////////////////////////////////////// 0 
1373 0 0 4 1210 3590 0 0 303 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_translate_mat
//       Access: Public
//  Description: Fills mat with a matrix that applies the indicated
//               translation.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3706  5 trans 1 3633  
1374 0 0 4 1211 3590 0 0 362 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_rotate_mat
//       Access: Public
//  Description: Sets mat to a matrix that rotates by the given angle
//               in degrees counterclockwise about the indicated
//               vector.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3706  5 angle 1 3587  4 axis 1 3633  2 cs 1 3461  
1375 0 0 4 1212 3590 0 0 412 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_rotate_mat_normaxis
//       Access: Public
//  Description: Fills mat with a matrix that rotates by the given
//               angle in degrees counterclockwise about the indicated
//               vector.  Assumes axis has been prenormalized.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3706  5 angle 1 3587  4 axis 1 3633  2 cs 1 3461  
1376 0 0 4 1213 3590 0 0 319 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_scale_mat
//       Access: Public
//  Description: Fills mat with a matrix that applies the indicated
//               scale in each of the three axes.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3706  5 scale 1 3633  
1377 0 0 4 1214 3590 0 0 321 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_shear_mat
//       Access: Public
//  Description: Fills mat with a matrix that applies the indicated
//               shear in each of the three planes.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3706  5 shear 1 3633  2 cs 1 3461  
1378 0 0 4 1215 3590 0 0 317 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_scale_shear_mat
//       Access: Public, Static
//  Description: Fills mat with a matrix that applies the indicated
//               scale and shear.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3706  5 scale 1 3633  5 shear 1 3633  2 cs 1 3461  
1379 0 0 7 1216 3706 3117 0 300 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::translate_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               translation.
//////////////////////////////////////////////////////////////////// 1 5 trans 1 3633  
1380 0 0 7 1216 3706 3117 0 300 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::translate_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               translation.
//////////////////////////////////////////////////////////////////// 3 2 tx 1 3587  2 ty 1 3587  2 tz 1 3587  
1381 0 0 7 1217 3706 3117 0 345 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat
//       Access: Public, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise about the indicated vector.
//////////////////////////////////////////////////////////////////// 3 5 angle 1 3587  4 axis 1 3633  2 cs 1 3461  
1382 0 0 7 1218 3706 3117 0 408 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat_normaxis
//       Access: Public, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise about the indicated vector.
//               Assumes axis has been prenormalized.
//////////////////////////////////////////////////////////////////// 3 5 angle 1 3587  4 axis 1 3633  2 cs 1 3461  
1383 0 0 7 1219 3706 3117 0 316 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the three axes.
//////////////////////////////////////////////////////////////////// 1 5 scale 1 3633  
1384 0 0 7 1219 3706 3117 0 298 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               uniform scale.
//////////////////////////////////////////////////////////////////// 1 5 scale 1 3587  
1385 0 0 7 1219 3706 3117 0 316 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the three axes.
//////////////////////////////////////////////////////////////////// 3 2 sx 1 3587  2 sy 1 3587  2 sz 1 3587  
1386 0 0 7 1220 3706 3117 0 318 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               shear in each of the three planes.
//////////////////////////////////////////////////////////////////// 2 5 shear 1 3633  2 cs 1 3461  
1387 0 0 7 1220 3706 3117 0 318 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               shear in each of the three planes.
//////////////////////////////////////////////////////////////////// 4 4 shxy 1 3587  4 shxz 1 3587  4 shyz 1 3587  2 cs 1 3461  
1388 0 0 7 1221 3706 3117 0 306 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale and shear.
//////////////////////////////////////////////////////////////////// 3 5 scale 1 3633  5 shear 1 3633  2 cs 1 3461  
1389 0 0 7 1221 3706 3117 0 306 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale and shear.
//////////////////////////////////////////////////////////////////// 7 2 sx 1 3587  2 sy 1 3587  2 sz 1 3587  4 shxy 1 3587  4 shxz 1 3587  4 shyz 1 3587  2 cs 1 3461  
1390 0 0 6 1222 3700 0 0 339 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::y_to_z_up_mat
//       Access: Public, Static
//  Description: Returns a matrix that transforms from the Y-up
//               coordinate system to the Z-up coordinate system.
//////////////////////////////////////////////////////////////////// 0 
1391 0 0 6 1223 3700 0 0 339 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::z_to_y_up_mat
//       Access: Public, Static
//  Description: Returns a matrix that transforms from the Y-up
//               coordinate system to the Z-up coordinate system.
//////////////////////////////////////////////////////////////////// 0 
1392 0 0 6 1224 3700 0 0 347 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::convert_mat
//       Access: Public, Static
//  Description: Returns a matrix that transforms from the indicated
//               coordinate system to the indicated coordinate system.
//////////////////////////////////////////////////////////////////// 2 4 from 1 3461  2 to 1 3461  
1393 0 0 6 1225 3596 0 0 339 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::almost_equal
//       Access: Public
//  Description: Returns true if two matrices are memberwise equal
//               within a default tolerance based on the numeric type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3700  5 other 1 3700  
1394 0 0 6 1225 3596 0 0 452 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::almost_equal
//       Access: Public
//  Description: Returns true if two matrices are memberwise equal
//               within a specified tolerance.  This is faster than
//               the equivalence operator as this doesn't have to
//               guarantee that it is transitive.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3700  5 other 1 3700  9 threshold 1 3587  
1395 0 0 4 1226 3590 0 0 212 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::output
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3700  3 out 1 3599  
1396 0 0 4 1227 3590 0 0 211 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::write
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 3700  3 out 1 3599  12 indent_level 1 3595  
1397 0 0 6 1228 3594 0 0 0 1 4 this 3 3700  
1398 0 0 4 1229 3590 0 0 268 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::generate_hash
//       Access: Public
//  Description: Adds the vector to the indicated hash generator.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3700  7 hashgen 1 3597  
1399 0 0 4 1229 3590 0 0 268 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::generate_hash
//       Access: Public
//  Description: Adds the vector to the indicated hash generator.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3700  7 hashgen 1 3597  5 scale 1 3587  
1400 0 0 4 1230 3590 0 0 641 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::write_datagram_fixed
//       Access: Published
//  Description: Writes the matrix to the Datagram using add_float32()
//               or add_float64(), depending on the type of floats in
//               the matrix, regardless of the setting of
//               Datagram::set_stdfloat_double().  This is appropriate
//               when you want to write a fixed-width value to the
//               datagram, especially when you are not writing a bam
//               file.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3700  11 destination 1 3601  
1401 0 0 4 1231 3590 0 0 347 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::read_datagram_fixed
//       Access: Published
//  Description: Reads the matrix from the Datagram using get_float32()
//               or get_float64().  See write_datagram_fixed().
//////////////////////////////////////////////////////////////////// 2 4 this 3 3706  4 scan 1 3603  
1402 0 0 4 1232 3590 0 0 463 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::write_datagram
//       Access: Published
//  Description: Writes the matrix to the Datagram using
//               add_stdfloat().  This is appropriate when you want to
//               write the matrix using the standard width setting,
//               especially when you are writing a bam file.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3700  11 destination 1 3601  
1403 0 0 4 1233 3590 0 0 279 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::read_datagram
//       Access: Published
//  Description: Reads the matrix from the Datagram using get_stdfloat().
//////////////////////////////////////////////////////////////////// 2 4 this 3 3706  6 source 1 3603  
1404 0 0 7 1234 3606 0 0 0 0 
1405 0 0 4 1143 3590 0 0 225 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Row::operator []
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 3709  1 i 1 3595  10 assign_val 1 3587  
1406 0 0 6 1143 3587 0 0 0 2 4 this 3 3711  1 i 1 3595  
1407 0 0 6 1144 3595 0 0 271 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Row::size
//       Access: Public, Static
//  Description: Returns 4: the number of columns of a LMatrix4.
//////////////////////////////////////////////////////////////////// 0 
1408 0 0 6 1147 3587 0 0 0 2 4 this 3 3713  1 i 1 3595  
1409 0 0 6 1148 3595 0 0 272 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::CRow::size
//       Access: Public, Static
//  Description: Returns 4: the number of columns of a LMatrix4.
//////////////////////////////////////////////////////////////////// 0 
1410 0 0 7 1238 3715 3125 0 234 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::Default Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
1411 0 0 7 1238 3715 3125 0 231 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 3700  
1412 0 0 7 1238 3715 3125 0 231 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 3707  
1413 0 0 7 1238 3715 3125 0 226 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 16 3 e00 1 3587  3 e01 1 3587  3 e02 1 3587  3 e03 1 3587  3 e10 1 3587  3 e11 1 3587  3 e12 1 3587  3 e13 1 3587  3 e20 1 3587  3 e21 1 3587  3 e22 1 3587  3 e23 1 3587  3 e30 1 3587  3 e31 1 3587  3 e32 1 3587  3 e33 1 3587  
1414 0 0 6 1239 3715 0 0 239 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3715  4 copy 1 3700  
1415 0 0 6 1239 3715 0 0 239 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3715  4 copy 1 3707  
1416 0 0 4 1240 3590 0 0 221 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::set
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 17 4 this 3 3715  3 e00 1 3587  3 e01 1 3587  3 e02 1 3587  3 e03 1 3587  3 e10 1 3587  3 e11 1 3587  3 e12 1 3587  3 e13 1 3587  3 e20 1 3587  3 e21 1 3587  3 e22 1 3587  3 e23 1 3587  3 e30 1 3587  3 e31 1 3587  3 e32 1 3587  3 e33 1 3587  
1417 0 0 4 1241 3590 0 0 235 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::Indexing operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 3715  3 row 1 3595  3 col 1 3595  
1418 0 0 6 1241 3587 0 0 0 3 4 this 3 3707  3 row 1 3595  3 col 1 3595  
1419 0 0 4 1242 3590 0 0 410 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::get_data
//       Access: Published
//  Description: Returns the address of the first of the nine data
//               elements in the matrix.  The remaining elements
//               occupy the next eight positions in row-major order.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3707  
1420 0 0 6 1243 3595 0 0 291 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::get_num_components
//       Access: Published
//  Description: Returns the number of elements in the matrix, sixteen.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3707  
1421 0 0 7 1244 3606 0 0 0 0 
1422 0 0 7 1256 3716 3207 0 228 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Default Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
1423 0 0 7 1256 3716 3207 0 225 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Copy Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 5 other 1 3717  
1424 0 0 7 1256 3716 3207 0 220 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 9 3 e00 1 3610  3 e01 1 3610  3 e02 1 3610  3 e10 1 3610  3 e11 1 3610  3 e12 1 3610  3 e20 1 3610  3 e21 1 3610  3 e22 1 3610  
1425 0 0 6 1257 3716 0 0 233 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Copy Assignment Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3716  5 other 1 3717  
1426 0 0 6 1257 3716 0 0 233 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Fill Assignment Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3716  10 fill_value 1 3610  
1427 0 0 4 1258 3590 0 0 0 2 4 this 3 3716  4 size 1 3588  
1428 0 0 6 1261 3591 0 0 0 1 4 this 3 3717  
1429 0 0 4 1262 3590 0 0 391 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::fill
//       Access: Published
//  Description: Sets each element of the matrix to the indicated
//               fill_value.  This is of questionable value, but is
//               sometimes useful when initializing to zero.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3716  10 fill_value 1 3610  
1430 0 0 4 1263 3590 0 0 212 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 10 4 this 3 3716  3 e00 1 3610  3 e01 1 3610  3 e02 1 3610  3 e10 1 3610  3 e11 1 3610  3 e12 1 3610  3 e20 1 3610  3 e21 1 3610  3 e22 1 3610  
1431 0 0 4 1264 3590 0 0 329 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set_row
//       Access: Published
//  Description: Replaces the indicated row of the matrix from a
//               two-component vector, ignoring the last column.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3716  3 row 1 3595  1 v 1 3608  
1432 0 0 4 1264 3590 0 0 305 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set_row
//       Access: Published
//  Description: Replaces the indicated row of the matrix from a
//               three-component vector.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3716  3 row 1 3595  1 v 1 3636  
1433 0 0 4 1265 3590 0 0 332 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set_column
//       Access: Published
//  Description: Replaces the indicated column of the matrix from a
//               two-component vector, ignoring the last row.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3716  3 col 1 3595  1 v 1 3608  
1434 0 0 4 1265 3590 0 0 311 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set_column
//       Access: Published
//  Description: Replaces the indicated column of the matrix from a
//               three-component vector.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3716  3 col 1 3595  1 v 1 3636  
1435 0 0 4 1266 3590 0 0 301 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_row
//       Access: Published
//  Description: Stores the indicated row of the matrix as a
//               three-component vector.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3717  10 result_vec 1 3635  3 row 1 3595  
1436 0 0 7 1266 3635 2300 0 302 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_row
//       Access: Published
//  Description: Returns the indicated row of the matrix as a
//               three-component vector.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3717  3 row 1 3595  
1437 0 0 7 1267 3635 2300 0 305 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_col
//       Access: Published
//  Description: Returns the indicated column of the matrix as a
//               three-component vector.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3717  3 col 1 3595  
1438 0 0 7 1268 3607 2008 0 327 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_row2
//       Access: Published
//  Description: Returns the indicated row of the matrix as a
//               two-component vector, ignoring the last column.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3717  3 row 1 3595  
1439 0 0 7 1269 3607 2008 0 327 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_col2
//       Access: Published
//  Description: Returns the indicated column of the matrix as a
//               two-component vector, ignoring the last row.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3717  3 col 1 3595  
1440 0 0 4 1270 3590 0 0 226 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Indexing operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 3716  3 row 1 3595  3 col 1 3595  
1441 0 0 6 1270 3610 0 0 0 3 4 this 3 3717  3 row 1 3595  3 col 1 3595  
1442 0 0 7 1271 3719 3128 0 0 2 4 this 3 3716  1 i 1 3595  
1443 0 0 7 1271 3720 3131 0 0 2 4 this 3 3717  1 i 1 3595  
1444 0 0 6 1272 3595 0 0 266 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::size
//       Access: Published, Static
//  Description: Returns 3: the number of rows of a LMatrix3.
//////////////////////////////////////////////////////////////////// 0 
1445 0 0 6 1273 3596 0 0 310 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::is_nan
//       Access: Published
//  Description: Returns true if any component of the matrix is
//               not-a-number, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3717  
1446 0 0 6 1274 3596 0 0 314 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::is_identity
//       Access: Public
//  Description: Returns true if this is (close enough to) the
//               identity matrix, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3717  
1447 0 0 6 1275 3610 0 0 261 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_cell
//       Access: Published
//  Description: Returns a particular element of the matrix.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3717  3 row 1 3595  3 col 1 3595  
1448 0 0 4 1276 3590 0 0 261 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set_cell
//       Access: Published
//  Description: Changes a particular element of the matrix.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3716  3 row 1 3595  3 col 1 3595  5 value 1 3610  
1449 0 0 4 1277 3590 0 0 401 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_data
//       Access: Published
//  Description: Returns the address of the first of the nine data
//               elements in the matrix.  The remaining elements
//               occupy the next eight positions in row-major order.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3717  
1450 0 0 6 1278 3595 0 0 279 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_num_components
//       Access: Published
//  Description: Returns the number of elements in the matrix, nine.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3717  
1451 0 0 6 1279 3596 0 0 0 2 4 this 3 3717  5 other 1 3717  
1452 0 0 6 1280 3596 0 0 0 2 4 this 3 3717  5 other 1 3717  
1453 0 0 6 1281 3596 0 0 0 2 4 this 3 3717  5 other 1 3717  
1454 0 0 6 1282 3595 0 0 320 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::compare_to
//       Access: Published
//  Description: This flavor of compare_to uses a default threshold
//               value based on the numeric type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3717  5 other 1 3717  
1455 0 0 6 1282 3595 0 0 504 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::compare_to
//       Access: Published
//  Description: Sorts matrices lexicographically, componentwise.
//               Returns a number less than 0 if this matrix sorts
//               before the other one, greater than zero if it sorts
//               after, 0 if they are equivalent (within the indicated
//               tolerance).
//////////////////////////////////////////////////////////////////// 3 4 this 3 3717  5 other 1 3717  9 threshold 1 3610  
1456 0 0 6 1283 3588 0 0 256 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3717  
1457 0 0 6 1283 3588 0 0 256 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3717  9 threshold 1 3610  
1458 0 0 6 1284 3588 0 0 256 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3717  4 hash 1 3588  
1459 0 0 6 1284 3588 0 0 256 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3717  4 hash 1 3588  9 threshold 1 3610  
1460 0 0 7 1285 3635 2300 0 256 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform
//       Access: Published
//  Description: 3-component vector or point times matrix.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3717  1 v 1 3636  
1461 0 0 7 1286 3607 2008 0 403 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_point
//       Access: Published
//  Description: The matrix transforms a 2-component point (including
//               translation component) and returns the result.  This
//               assumes the matrix is an affine transform.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3717  1 v 1 3608  
1462 0 0 7 1287 3607 2008 0 400 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_vec
//       Access: Published
//  Description: The matrix transforms a 2-component vector (without
//               translation component) and returns the result.  This
//               assumes the matrix is an affine transform.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3717  1 v 1 3608  
1463 0 0 7 1287 3635 2300 0 447 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_vec
//       Access: Published
//  Description: The matrix transforms a 3-component vector and
//               returns the result.  This assumes the matrix is an
//               orthonormal transform.
//
//               In practice, this is the same computation as xform().
//////////////////////////////////////////////////////////////////// 2 4 this 3 3717  1 v 1 3636  
1464 0 0 7 1288 3635 2300 0 389 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_vec_general
//       Access: Published
//  Description: The matrix transforms a 3-component vector (without
//               translation component) and returns the result, as a
//               fully general operation.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3717  1 v 1 3636  
1465 0 0 4 1289 3590 0 0 265 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_in_place
//       Access: Published
//  Description: 3-component vector or point times matrix.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3717  1 v 1 3635  
1466 0 0 4 1290 3590 0 0 389 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_point_in_place
//       Access: Published
//  Description: The matrix transforms a 2-component point (including
//               translation component).  This assumes the matrix is
//               an affine transform.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3717  1 v 1 3607  
1467 0 0 4 1291 3590 0 0 386 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_vec_in_place
//       Access: Published
//  Description: The matrix transforms a 2-component vector (without
//               translation component).  This assumes the matrix is
//               an affine transform.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3717  1 v 1 3607  
1468 0 0 4 1291 3590 0 0 416 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_vec_in_place
//       Access: Published
//  Description: The matrix transforms a 3-component vector.  This
//               assumes the matrix is an orthonormal transform.
//
//               In practice, this is the same computation as xform().
//////////////////////////////////////////////////////////////////// 2 4 this 3 3717  1 v 1 3635  
1469 0 0 4 1292 3590 0 0 358 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_vec_general_in_place
//       Access: Published
//  Description: The matrix transforms a 3-component vector (without
//               translation component), as a fully general operation.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3717  1 v 1 3635  
1470 0 0 4 1293 3590 0 0 25 // this = other1 * other2 3 4 this 3 3716  6 other1 1 3717  6 other2 1 3717  
1471 0 0 7 1294 3716 3207 0 0 2 4 this 3 3717  5 other 1 3717  
1472 0 0 7 1294 3716 3207 0 0 2 4 this 3 3717  6 scalar 1 3610  
1473 0 0 7 1295 3716 3207 0 0 2 4 this 3 3717  6 scalar 1 3610  
1474 0 0 6 1296 3716 0 0 278 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix += matrix
//       Access: Published
//  Description: Performs a memberwise addition between two matrices.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3716  5 other 1 3717  
1475 0 0 6 1297 3716 0 0 281 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix -= matrix
//       Access: Published
//  Description: Performs a memberwise subtraction between two matrices.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3716  5 other 1 3717  
1476 0 0 6 1298 3716 0 0 225 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix *= matrix
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3716  5 other 1 3717  
1477 0 0 6 1298 3716 0 0 254 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix *= scalar
//       Access: Published
//  Description: Performs a memberwise scale.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3716  6 scalar 1 3610  
1478 0 0 6 1299 3716 0 0 254 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix /= scalar
//       Access: Published
//  Description: Performs a memberwise scale.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3716  6 scalar 1 3610  
1479 0 0 4 1300 3590 0 0 227 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::componentwise_mult
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3716  5 other 1 3717  
1480 0 0 6 1301 3610 0 0 259 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::determinant
//       Access: Published
//  Description: Returns the determinant of the matrix.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3717  
1481 0 0 4 1302 3590 0 0 223 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::transpose_from
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3716  5 other 1 3717  
1482 0 0 4 1303 3590 0 0 227 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::transpose_in_place
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 3716  
1483 0 0 6 1304 3596 0 0 808 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::invert_from
//       Access: Published
//  Description: Computes the inverse of the other matrix, and stores
//               the result in this matrix.  This is a fully general
//               operation and makes no assumptions about the type of
//               transform represented by the matrix.
//
//               The other matrix must be a different object than this
//               matrix.  However, if you need to invert a matrix in
//               place, see invert_in_place.
//
//               The return value is true if the matrix was
//               successfully inverted, false if there was a
//               singularity.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3716  5 other 1 3717  
1484 0 0 6 1305 3596 0 0 364 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::invert_in_place
//       Access: Published
//  Description: Inverts the current matrix.  Returns true if the
//               inverse is successful, false if the matrix was
//               singular.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3716  
1485 0 0 6 1306 3596 0 0 348 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::invert_transpose_from
//       Access: Published
//  Description: Simultaneously computes the inverse of the indicated
//               matrix, and then the transpose of that inverse.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3716  5 other 1 3717  
1486 0 0 6 1306 3596 0 0 348 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::invert_transpose_from
//       Access: Published
//  Description: Simultaneously computes the inverse of the indicated
//               matrix, and then the transpose of that inverse.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3716  5 other 1 3721  
1487 0 0 6 1307 3717 0 0 391 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::ident_mat
//       Access: Published, Static
//  Description: Returns an identity matrix.
//
//               This function definition must appear first, since
//               some inline functions below take advantage of it.
//////////////////////////////////////////////////////////////////// 0 
1488 0 0 4 1308 3590 0 0 306 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_translate_mat
//       Access: Published
//  Description: Fills mat with a matrix that applies the indicated
//               translation.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3716  5 trans 1 3608  
1489 0 0 4 1309 3590 0 0 324 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_rotate_mat
//       Access: Published
//  Description: Fills mat with a matrix that rotates by the given
//               angle in degrees counterclockwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3716  5 angle 1 3610  
1490 0 0 4 1309 3590 0 0 368 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_rotate_mat
//       Access: Published
//  Description: Fills mat with a matrix that rotates by the given
//               angle in degrees counterclockwise about the indicated
//               vector.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3716  5 angle 1 3610  4 axis 1 3636  2 cs 1 3461  
1491 0 0 4 1310 3590 0 0 320 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_scale_mat
//       Access: Published
//  Description: Fills mat with a matrix that applies the indicated
//               scale in each of the two axes.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3716  5 scale 1 3608  
1492 0 0 4 1310 3590 0 0 322 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_scale_mat
//       Access: Published
//  Description: Fills mat with a matrix that applies the indicated
//               scale in each of the three axes.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3716  5 scale 1 3636  
1493 0 0 7 1311 3716 3207 0 303 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::translate_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               translation.
//////////////////////////////////////////////////////////////////// 1 5 trans 1 3608  
1494 0 0 7 1311 3716 3207 0 303 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::translate_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               translation.
//////////////////////////////////////////////////////////////////// 2 2 tx 1 3610  2 ty 1 3610  
1495 0 0 7 1312 3716 3207 0 321 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat
//       Access: Published, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise.
//////////////////////////////////////////////////////////////////// 1 5 angle 1 3610  
1496 0 0 7 1312 3716 3207 0 348 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat
//       Access: Published, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise about the indicated vector.
//////////////////////////////////////////////////////////////////// 3 5 angle 1 3610  4 axis 1 3636  2 cs 1 3461  
1497 0 0 7 1313 3716 3207 0 317 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the two axes.
//////////////////////////////////////////////////////////////////// 1 5 scale 1 3608  
1498 0 0 7 1313 3716 3207 0 319 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the three axes.
//////////////////////////////////////////////////////////////////// 1 5 scale 1 3636  
1499 0 0 7 1313 3716 3207 0 317 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the two axes.
//////////////////////////////////////////////////////////////////// 2 2 sx 1 3610  2 sy 1 3610  
1500 0 0 7 1313 3716 3207 0 319 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the three axes.
//////////////////////////////////////////////////////////////////// 3 2 sx 1 3610  2 sy 1 3610  2 sz 1 3610  
1501 0 0 4 1314 3590 0 0 412 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_rotate_mat_normaxis
//       Access: Published
//  Description: Fills mat with a matrix that rotates by the given
//               angle in degrees counterclockwise about the indicated
//               vector.  Assumes axis has been normalized.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3716  5 angle 1 3610  4 axis 1 3636  2 cs 1 3461  
1502 0 0 7 1315 3716 3207 0 408 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat_normaxis
//       Access: Published, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise about the indicated vector.
//               Assumes axis has been normalized.
//////////////////////////////////////////////////////////////////// 3 5 angle 1 3610  4 axis 1 3636  2 cs 1 3461  
1503 0 0 4 1316 3590 0 0 324 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_shear_mat
//       Access: Published
//  Description: Fills mat with a matrix that applies the indicated
//               shear in each of the three planes.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3716  5 shear 1 3636  2 cs 1 3461  
1504 0 0 7 1317 3716 3207 0 321 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::shear_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               shear in each of the three planes.
//////////////////////////////////////////////////////////////////// 2 5 shear 1 3636  2 cs 1 3461  
1505 0 0 7 1317 3716 3207 0 321 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::shear_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               shear in each of the three planes.
//////////////////////////////////////////////////////////////////// 4 4 shxy 1 3610  4 shxz 1 3610  4 shyz 1 3610  2 cs 1 3461  
1506 0 0 4 1318 3590 0 0 312 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_scale_shear_mat
//       Access: Published
//  Description: Fills mat with a matrix that applies the indicated
//               scale and shear.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3716  5 scale 1 3636  5 shear 1 3636  2 cs 1 3461  
1507 0 0 7 1319 3716 3207 0 309 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_shear_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               scale and shear.
//////////////////////////////////////////////////////////////////// 3 5 scale 1 3636  5 shear 1 3636  2 cs 1 3461  
1508 0 0 7 1319 3716 3207 0 309 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_shear_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               scale and shear.
//////////////////////////////////////////////////////////////////// 7 2 sx 1 3610  2 sy 1 3610  2 sz 1 3610  4 shxy 1 3610  4 shxz 1 3610  4 shyz 1 3610  2 cs 1 3461  
1509 0 0 6 1320 3717 0 0 350 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::convert_mat
//       Access: Published, Static
//  Description: Returns a matrix that transforms from the indicated
//               coordinate system to the indicated coordinate system.
//////////////////////////////////////////////////////////////////// 2 4 from 1 3461  2 to 1 3461  
1510 0 0 6 1321 3596 0 0 342 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::almost_equal
//       Access: Published
//  Description: Returns true if two matrices are memberwise equal
//               within a default tolerance based on the numeric type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3717  5 other 1 3717  
1511 0 0 6 1321 3596 0 0 318 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::almost_equal
//       Access: Published
//  Description: Returns true if two matrices are memberwise equal
//               within a specified tolerance.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3717  5 other 1 3717  9 threshold 1 3610  
1512 0 0 4 1322 3590 0 0 215 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::output
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3717  3 out 1 3599  
1513 0 0 4 1323 3590 0 0 214 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::write
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 3717  3 out 1 3599  12 indent_level 1 3595  
1514 0 0 6 1324 3594 0 0 0 1 4 this 3 3717  
1515 0 0 4 1325 3590 0 0 271 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::generate_hash
//       Access: Published
//  Description: Adds the vector to the indicated hash generator.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3717  7 hashgen 1 3597  
1516 0 0 4 1325 3590 0 0 271 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::generate_hash
//       Access: Published
//  Description: Adds the vector to the indicated hash generator.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3717  7 hashgen 1 3597  9 threshold 1 3610  
1517 0 0 4 1326 3590 0 0 641 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::write_datagram_fixed
//       Access: Published
//  Description: Writes the matrix to the Datagram using add_float32()
//               or add_float64(), depending on the type of floats in
//               the matrix, regardless of the setting of
//               Datagram::set_stdfloat_double().  This is appropriate
//               when you want to write a fixed-width value to the
//               datagram, especially when you are not writing a bam
//               file.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3717  11 destination 1 3601  
1518 0 0 4 1327 3590 0 0 347 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::read_datagram_fixed
//       Access: Published
//  Description: Reads the matrix from the Datagram using get_float32()
//               or get_float64().  See write_datagram_fixed().
//////////////////////////////////////////////////////////////////// 2 4 this 3 3716  4 scan 1 3603  
1519 0 0 4 1328 3590 0 0 463 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::write_datagram
//       Access: Published
//  Description: Writes the matrix to the Datagram using
//               add_stdfloat().  This is appropriate when you want to
//               write the matrix using the standard width setting,
//               especially when you are writing a bam file.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3717  11 destination 1 3601  
1520 0 0 4 1329 3590 0 0 279 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::read_datagram
//       Access: Published
//  Description: Reads the matrix from the Datagram using get_stdfloat().
//////////////////////////////////////////////////////////////////// 2 4 this 3 3716  6 source 1 3603  
1521 0 0 7 1330 3606 0 0 0 0 
1522 0 0 4 1249 3590 0 0 225 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Row::operator []
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 3719  1 i 1 3595  10 assign_val 1 3610  
1523 0 0 6 1249 3610 0 0 0 2 4 this 3 3723  1 i 1 3595  
1524 0 0 6 1250 3595 0 0 274 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Row::size
//       Access: Published, Static
//  Description: Returns 3: the number of columns of a LMatrix3.
//////////////////////////////////////////////////////////////////// 0 
1525 0 0 6 1253 3610 0 0 0 2 4 this 3 3725  1 i 1 3595  
1526 0 0 6 1254 3595 0 0 275 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::CRow::size
//       Access: Published, Static
//  Description: Returns 3: the number of columns of a LMatrix3.
//////////////////////////////////////////////////////////////////// 0 
1527 0 0 7 1342 3727 3299 0 225 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Default Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
1528 0 0 7 1342 3727 3299 0 228 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Constructor, upper 3x3
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 6 upper3 1 3717  
1529 0 0 7 1342 3727 3299 0 245 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Constructor, upper 3x3 plus translation
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 6 upper3 1 3717  5 trans 1 3636  
1530 0 0 7 1342 3727 3299 0 222 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 5 other 1 3721  
1531 0 0 7 1342 3727 3299 0 225 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Copy Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 5 other 1 3728  
1532 0 0 7 1342 3727 3299 0 217 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 16 3 e00 1 3610  3 e01 1 3610  3 e02 1 3610  3 e03 1 3610  3 e10 1 3610  3 e11 1 3610  3 e12 1 3610  3 e13 1 3610  3 e20 1 3610  3 e21 1 3610  3 e22 1 3610  3 e23 1 3610  3 e30 1 3610  3 e31 1 3610  3 e32 1 3610  3 e33 1 3610  
1533 0 0 6 1343 3727 0 0 230 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3727  5 other 1 3721  
1534 0 0 6 1343 3727 0 0 233 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Copy Assignment Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3727  5 other 1 3728  
1535 0 0 6 1343 3727 0 0 230 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Fill Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3727  10 fill_value 1 3610  
1536 0 0 4 1344 3590 0 0 0 2 4 this 3 3727  4 size 1 3588  
1537 0 0 6 1347 3591 0 0 0 1 4 this 3 3721  
1538 0 0 4 1348 3590 0 0 388 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::fill
//       Access: Public
//  Description: Sets each element of the matrix to the indicated
//               fill_value.  This is of questionable value, but is
//               sometimes useful when initializing to zero.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3727  10 fill_value 1 3610  
1539 0 0 4 1349 3590 0 0 209 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 17 4 this 3 3727  3 e00 1 3610  3 e01 1 3610  3 e02 1 3610  3 e03 1 3610  3 e10 1 3610  3 e11 1 3610  3 e12 1 3610  3 e13 1 3610  3 e20 1 3610  3 e21 1 3610  3 e22 1 3610  3 e23 1 3610  3 e30 1 3610  3 e31 1 3610  3 e32 1 3610  3 e33 1 3610  
1540 0 0 4 1350 3590 0 0 247 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_upper_3
//       Access: Public
//  Description: Sets the upper 3x3 submatrix.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3727  6 upper3 1 3717  
1541 0 0 7 1351 3716 3207 0 252 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_upper_3
//       Access: Public
//  Description: Retrieves the upper 3x3 submatrix.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3721  
1542 0 0 4 1352 3590 0 0 353 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_row
//       Access: Public
//  Description: Replaces the indicated row of the matrix with the
//               indicated 3-component vector, ignoring the last
//               column.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3727  3 row 1 3595  1 v 1 3636  
1543 0 0 4 1352 3590 0 0 255 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_row
//       Access: Public
//  Description: Replaces the indicated row of the matrix.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3727  3 row 1 3595  1 v 1 3666  
1544 0 0 4 1353 3590 0 0 353 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_col
//       Access: Public
//  Description: Replaces the indicated column of the matrix with the
//               indicated 3-component vector, ignoring the last
//               row.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3727  3 col 1 3595  1 v 1 3636  
1545 0 0 4 1353 3590 0 0 258 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_col
//       Access: Public
//  Description: Replaces the indicated column of the matrix.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3727  3 col 1 3595  1 v 1 3666  
1546 0 0 4 1354 3590 0 0 294 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_row
//       Access: Public
//  Description: Stores the indicated row of the matrix as a
//               4-component vector.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3721  10 result_vec 1 3665  3 row 1 3595  
1547 0 0 7 1354 3665 2689 0 297 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_row
//       Access: Public
//  Description: Retrieves the indicated row of the matrix as a
//               4-component vector.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3721  3 row 1 3595  
1548 0 0 7 1355 3665 2689 0 300 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_col
//       Access: Public
//  Description: Retrieves the indicated column of the matrix as a
//               4-component vector.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3721  3 col 1 3595  
1549 0 0 4 1356 3590 0 0 318 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_row3
//       Access: Public
//  Description: Stores the row column of the matrix as a
//               3-component vector, ignoring the last column.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3721  10 result_vec 1 3635  3 row 1 3595  
1550 0 0 7 1356 3635 2300 0 321 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_row3
//       Access: Public
//  Description: Retrieves the row column of the matrix as a
//               3-component vector, ignoring the last column.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3721  3 row 1 3595  
1551 0 0 7 1357 3635 2300 0 324 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_col3
//       Access: Public
//  Description: Retrieves the indicated column of the matrix as a
//               3-component vector, ignoring the last row.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3721  3 col 1 3595  
1552 0 0 4 1358 3590 0 0 223 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Indexing operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 3727  3 row 1 3595  3 col 1 3595  
1553 0 0 6 1358 3610 0 0 0 3 4 this 3 3721  3 row 1 3595  3 col 1 3595  
1554 0 0 7 1359 3730 3210 0 0 2 4 this 3 3727  1 i 1 3595  
1555 0 0 7 1359 3731 3213 0 0 2 4 this 3 3721  1 i 1 3595  
1556 0 0 6 1360 3595 0 0 263 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::size
//       Access: Public, Static
//  Description: Returns 4: the number of rows of a LMatrix4.
//////////////////////////////////////////////////////////////////// 0 
1557 0 0 6 1361 3596 0 0 307 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::is_nan
//       Access: Public
//  Description: Returns true if any component of the matrix is
//               not-a-number, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3721  
1558 0 0 6 1362 3596 0 0 314 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::is_identity
//       Access: Public
//  Description: Returns true if this is (close enough to) the
//               identity matrix, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3721  
1559 0 0 6 1363 3610 0 0 258 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_cell
//       Access: Public
//  Description: Returns a particular element of the matrix.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3721  3 row 1 3595  3 col 1 3595  
1560 0 0 4 1364 3590 0 0 258 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_cell
//       Access: Public
//  Description: Changes a particular element of the matrix.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3727  3 row 1 3595  3 col 1 3595  5 value 1 3610  
1561 0 0 4 1365 3590 0 0 398 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_data
//       Access: Public
//  Description: Returns the address of the first of the nine data
//               elements in the matrix.  The remaining elements
//               occupy the next eight positions in row-major order.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3721  
1562 0 0 6 1366 3595 0 0 274 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_num_components
//       Access: Public
//  Description: Returns the number of elements in the matrix, 16.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3721  
1563 0 0 4 1367 3590 0 0 316 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::begin
//       Access: Public
//  Description: Returns an iterator that may be used to traverse the
//               elements of the matrix, STL-style.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3727  
1564 0 0 4 1367 3590 0 0 316 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::begin
//       Access: Public
//  Description: Returns an iterator that may be used to traverse the
//               elements of the matrix, STL-style.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3721  
1565 0 0 4 1368 3590 0 0 314 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::end
//       Access: Public
//  Description: Returns an iterator that may be used to traverse the
//               elements of the matrix, STL-style.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3727  
1566 0 0 4 1368 3590 0 0 314 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::end
//       Access: Public
//  Description: Returns an iterator that may be used to traverse the
//               elements of the matrix, STL-style.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3721  
1567 0 0 6 1369 3596 0 0 0 2 4 this 3 3721  5 other 1 3721  
1568 0 0 6 1370 3596 0 0 0 2 4 this 3 3721  5 other 1 3721  
1569 0 0 6 1371 3596 0 0 0 2 4 this 3 3721  5 other 1 3721  
1570 0 0 6 1372 3595 0 0 317 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::compare_to
//       Access: Public
//  Description: This flavor of compare_to uses a default threshold
//               value based on the numeric type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3721  5 other 1 3721  
1571 0 0 6 1372 3595 0 0 501 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::compare_to
//       Access: Public
//  Description: Sorts matrices lexicographically, componentwise.
//               Returns a number less than 0 if this matrix sorts
//               before the other one, greater than zero if it sorts
//               after, 0 if they are equivalent (within the indicated
//               tolerance).
//////////////////////////////////////////////////////////////////// 3 4 this 3 3721  5 other 1 3721  9 threshold 1 3610  
1572 0 0 6 1373 3588 0 0 253 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_hash
//       Access: Public
//  Description: Returns a suitable hash for phash_map.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3721  
1573 0 0 6 1373 3588 0 0 253 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_hash
//       Access: Public
//  Description: Returns a suitable hash for phash_map.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3721  9 threshold 1 3610  
1574 0 0 6 1374 3588 0 0 253 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::add_hash
//       Access: Public
//  Description: Adds the vector into the running hash.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3721  4 hash 1 3588  
1575 0 0 6 1374 3588 0 0 253 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::add_hash
//       Access: Public
//  Description: Adds the vector into the running hash.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3721  4 hash 1 3588  9 threshold 1 3610  
1576 0 0 7 1375 3665 2689 0 306 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform
//       Access: Public
//  Description: 4-component vector or point times matrix.  This is a
//               fully general operation.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3721  1 v 1 3666  
1577 0 0 7 1376 3635 2300 0 400 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_point
//       Access: Public
//  Description: The matrix transforms a 3-component point (including
//               translation component) and returns the result.  This
//               assumes the matrix is an affine transform.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3721  1 v 1 3636  
1578 0 0 7 1377 3635 2300 0 389 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_point_general
//       Access: Public
//  Description: The matrix transforms a 3-component point (including
//               translation component) and returns the result, as a
//               fully general operation.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3721  1 v 1 3636  
1579 0 0 7 1378 3635 2300 0 402 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_vec
//       Access: Public
//  Description: The matrix transforms a 3-component vector (without
//               translation component) and returns the result.  This
//               assumes the matrix is an orthonormal transform.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3721  1 v 1 3636  
1580 0 0 7 1379 3635 2300 0 386 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_vec_general
//       Access: Public
//  Description: The matrix transforms a 3-component vector (without
//               translation component) and returns the result, as a
//               fully general operation.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3721  1 v 1 3636  
1581 0 0 4 1380 3590 0 0 315 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_in_place
//       Access: Public
//  Description: 4-component vector or point times matrix.  This is a
//               fully general operation.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3721  1 v 1 3665  
1582 0 0 4 1381 3590 0 0 386 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_point_in_place
//       Access: Public
//  Description: The matrix transforms a 3-component point (including
//               translation component).  This assumes the matrix is
//               an affine transform.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3721  1 v 1 3635  
1583 0 0 4 1382 3590 0 0 358 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_point_general_in_place
//       Access: Public
//  Description: The matrix transforms a 3-component point (including
//               translation component), as a fully general operation.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3721  1 v 1 3635  
1584 0 0 4 1383 3590 0 0 388 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_vec_in_place
//       Access: Public
//  Description: The matrix transforms a 3-component vector (without
//               translation component).  This assumes the matrix is
//               an orthonormal transform.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3721  1 v 1 3635  
1585 0 0 4 1384 3590 0 0 355 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_vec_general_in_place
//       Access: Public
//  Description: The matrix transforms a 3-component vector (without
//               translation component), as a fully general operation.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3721  1 v 1 3635  
1586 0 0 4 1385 3590 0 0 25 // this = other1 * other2 3 4 this 3 3727  6 other1 1 3721  6 other2 1 3721  
1587 0 0 7 1386 3727 3299 0 0 2 4 this 3 3721  5 other 1 3721  
1588 0 0 7 1386 3727 3299 0 0 2 4 this 3 3721  6 scalar 1 3610  
1589 0 0 7 1387 3727 3299 0 0 2 4 this 3 3721  6 scalar 1 3610  
1590 0 0 6 1388 3727 0 0 275 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix += matrix
//       Access: Public
//  Description: Performs a memberwise addition between two matrices.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3727  5 other 1 3721  
1591 0 0 6 1389 3727 0 0 275 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix -= matrix
//       Access: Public
//  Description: Performs a memberwise addition between two matrices.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3727  5 other 1 3721  
1592 0 0 6 1390 3727 0 0 222 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix *= matrix
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3727  5 other 1 3721  
1593 0 0 6 1390 3727 0 0 222 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix *= scalar
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3727  6 scalar 1 3610  
1594 0 0 6 1391 3727 0 0 222 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix /= scalar
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3727  6 scalar 1 3610  
1595 0 0 4 1392 3590 0 0 227 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::componentwise_mult
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3727  5 other 1 3721  
1596 0 0 4 1393 3590 0 0 220 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::transpose_from
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3727  5 other 1 3721  
1597 0 0 4 1394 3590 0 0 224 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::transpose_in_place
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 3727  
1598 0 0 6 1395 3596 0 0 803 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::invert_from
//       Access: Public
//  Description: Computes the inverse of the other matrix, and stores
//               the result in this matrix.  This is a fully general
//               operation and makes no assumptions about the type of
//               transform represented by the matrix.
//
//               The other matrix must be a different object than this
//               matrix.  However, if you need to invert a matrix in
//               place, see invert_in_place.
//
//               The return value is true if the matrix was
//               successfully inverted, false if the was a
//               singularity.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3727  5 other 1 3721  
1599 0 0 6 1396 3596 0 0 149 // bugbug: we could optimize this for rotation/scale/translation matrices
//         (transpose upper 3x3 and take negative of translation component) 2 4 this 3 3727  5 other 1 3721  
1600 0 0 6 1397 3596 0 0 361 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::invert_in_place
//       Access: Public
//  Description: Inverts the current matrix.  Returns true if the
//               inverse is successful, false if the matrix was
//               singular.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3727  
1601 0 0 4 1398 3590 0 0 252 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::accumulate
//       Access: Public
//  Description: Computes (*this) += other * weight.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3727  5 other 1 3721  6 weight 1 3610  
1602 0 0 6 1399 3721 0 0 388 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::ident_mat
//       Access: Public, Static
//  Description: Returns an identity matrix.
//
//               This function definition must appear first, since
//               some inline functions below take advantage of it.
//////////////////////////////////////////////////////////////////// 0 
1603 0 0 6 1400 3721 0 0 258 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::ones_mat
//       Access: Public, Static
//  Description: Returns an matrix filled with ones.
//////////////////////////////////////////////////////////////////// 0 
1604 0 0 6 1401 3721 0 0 260 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::zeros_mat
//       Access: Public, Static
//  Description: Returns an matrix filled with zeros.
//////////////////////////////////////////////////////////////////// 0 
1605 0 0 4 1402 3590 0 0 303 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_translate_mat
//       Access: Public
//  Description: Fills mat with a matrix that applies the indicated
//               translation.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3727  5 trans 1 3636  
1606 0 0 4 1403 3590 0 0 362 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_rotate_mat
//       Access: Public
//  Description: Sets mat to a matrix that rotates by the given angle
//               in degrees counterclockwise about the indicated
//               vector.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3727  5 angle 1 3610  4 axis 1 3636  2 cs 1 3461  
1607 0 0 4 1404 3590 0 0 412 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_rotate_mat_normaxis
//       Access: Public
//  Description: Fills mat with a matrix that rotates by the given
//               angle in degrees counterclockwise about the indicated
//               vector.  Assumes axis has been prenormalized.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3727  5 angle 1 3610  4 axis 1 3636  2 cs 1 3461  
1608 0 0 4 1405 3590 0 0 319 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_scale_mat
//       Access: Public
//  Description: Fills mat with a matrix that applies the indicated
//               scale in each of the three axes.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3727  5 scale 1 3636  
1609 0 0 4 1406 3590 0 0 321 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_shear_mat
//       Access: Public
//  Description: Fills mat with a matrix that applies the indicated
//               shear in each of the three planes.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3727  5 shear 1 3636  2 cs 1 3461  
1610 0 0 4 1407 3590 0 0 317 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_scale_shear_mat
//       Access: Public, Static
//  Description: Fills mat with a matrix that applies the indicated
//               scale and shear.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3727  5 scale 1 3636  5 shear 1 3636  2 cs 1 3461  
1611 0 0 7 1408 3727 3299 0 300 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::translate_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               translation.
//////////////////////////////////////////////////////////////////// 1 5 trans 1 3636  
1612 0 0 7 1408 3727 3299 0 300 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::translate_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               translation.
//////////////////////////////////////////////////////////////////// 3 2 tx 1 3610  2 ty 1 3610  2 tz 1 3610  
1613 0 0 7 1409 3727 3299 0 345 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat
//       Access: Public, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise about the indicated vector.
//////////////////////////////////////////////////////////////////// 3 5 angle 1 3610  4 axis 1 3636  2 cs 1 3461  
1614 0 0 7 1410 3727 3299 0 408 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat_normaxis
//       Access: Public, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise about the indicated vector.
//               Assumes axis has been prenormalized.
//////////////////////////////////////////////////////////////////// 3 5 angle 1 3610  4 axis 1 3636  2 cs 1 3461  
1615 0 0 7 1411 3727 3299 0 316 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the three axes.
//////////////////////////////////////////////////////////////////// 1 5 scale 1 3636  
1616 0 0 7 1411 3727 3299 0 298 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               uniform scale.
//////////////////////////////////////////////////////////////////// 1 5 scale 1 3610  
1617 0 0 7 1411 3727 3299 0 316 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the three axes.
//////////////////////////////////////////////////////////////////// 3 2 sx 1 3610  2 sy 1 3610  2 sz 1 3610  
1618 0 0 7 1412 3727 3299 0 318 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               shear in each of the three planes.
//////////////////////////////////////////////////////////////////// 2 5 shear 1 3636  2 cs 1 3461  
1619 0 0 7 1412 3727 3299 0 318 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               shear in each of the three planes.
//////////////////////////////////////////////////////////////////// 4 4 shxy 1 3610  4 shxz 1 3610  4 shyz 1 3610  2 cs 1 3461  
1620 0 0 7 1413 3727 3299 0 306 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale and shear.
//////////////////////////////////////////////////////////////////// 3 5 scale 1 3636  5 shear 1 3636  2 cs 1 3461  
1621 0 0 7 1413 3727 3299 0 306 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale and shear.
//////////////////////////////////////////////////////////////////// 7 2 sx 1 3610  2 sy 1 3610  2 sz 1 3610  4 shxy 1 3610  4 shxz 1 3610  4 shyz 1 3610  2 cs 1 3461  
1622 0 0 6 1414 3721 0 0 339 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::y_to_z_up_mat
//       Access: Public, Static
//  Description: Returns a matrix that transforms from the Y-up
//               coordinate system to the Z-up coordinate system.
//////////////////////////////////////////////////////////////////// 0 
1623 0 0 6 1415 3721 0 0 339 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::z_to_y_up_mat
//       Access: Public, Static
//  Description: Returns a matrix that transforms from the Y-up
//               coordinate system to the Z-up coordinate system.
//////////////////////////////////////////////////////////////////// 0 
1624 0 0 6 1416 3721 0 0 347 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::convert_mat
//       Access: Public, Static
//  Description: Returns a matrix that transforms from the indicated
//               coordinate system to the indicated coordinate system.
//////////////////////////////////////////////////////////////////// 2 4 from 1 3461  2 to 1 3461  
1625 0 0 6 1417 3596 0 0 339 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::almost_equal
//       Access: Public
//  Description: Returns true if two matrices are memberwise equal
//               within a default tolerance based on the numeric type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3721  5 other 1 3721  
1626 0 0 6 1417 3596 0 0 452 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::almost_equal
//       Access: Public
//  Description: Returns true if two matrices are memberwise equal
//               within a specified tolerance.  This is faster than
//               the equivalence operator as this doesn't have to
//               guarantee that it is transitive.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3721  5 other 1 3721  9 threshold 1 3610  
1627 0 0 4 1418 3590 0 0 212 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::output
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3721  3 out 1 3599  
1628 0 0 4 1419 3590 0 0 211 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::write
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 3721  3 out 1 3599  12 indent_level 1 3595  
1629 0 0 6 1420 3594 0 0 0 1 4 this 3 3721  
1630 0 0 4 1421 3590 0 0 268 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::generate_hash
//       Access: Public
//  Description: Adds the vector to the indicated hash generator.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3721  7 hashgen 1 3597  
1631 0 0 4 1421 3590 0 0 268 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::generate_hash
//       Access: Public
//  Description: Adds the vector to the indicated hash generator.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3721  7 hashgen 1 3597  5 scale 1 3610  
1632 0 0 4 1422 3590 0 0 641 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::write_datagram_fixed
//       Access: Published
//  Description: Writes the matrix to the Datagram using add_float32()
//               or add_float64(), depending on the type of floats in
//               the matrix, regardless of the setting of
//               Datagram::set_stdfloat_double().  This is appropriate
//               when you want to write a fixed-width value to the
//               datagram, especially when you are not writing a bam
//               file.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3721  11 destination 1 3601  
1633 0 0 4 1423 3590 0 0 347 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::read_datagram_fixed
//       Access: Published
//  Description: Reads the matrix from the Datagram using get_float32()
//               or get_float64().  See write_datagram_fixed().
//////////////////////////////////////////////////////////////////// 2 4 this 3 3727  4 scan 1 3603  
1634 0 0 4 1424 3590 0 0 463 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::write_datagram
//       Access: Published
//  Description: Writes the matrix to the Datagram using
//               add_stdfloat().  This is appropriate when you want to
//               write the matrix using the standard width setting,
//               especially when you are writing a bam file.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3721  11 destination 1 3601  
1635 0 0 4 1425 3590 0 0 279 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::read_datagram
//       Access: Published
//  Description: Reads the matrix from the Datagram using get_stdfloat().
//////////////////////////////////////////////////////////////////// 2 4 this 3 3727  6 source 1 3603  
1636 0 0 7 1426 3606 0 0 0 0 
1637 0 0 4 1335 3590 0 0 225 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Row::operator []
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 3730  1 i 1 3595  10 assign_val 1 3610  
1638 0 0 6 1335 3610 0 0 0 2 4 this 3 3732  1 i 1 3595  
1639 0 0 6 1336 3595 0 0 271 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Row::size
//       Access: Public, Static
//  Description: Returns 4: the number of columns of a LMatrix4.
//////////////////////////////////////////////////////////////////// 0 
1640 0 0 6 1339 3610 0 0 0 2 4 this 3 3734  1 i 1 3595  
1641 0 0 6 1340 3595 0 0 272 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::CRow::size
//       Access: Public, Static
//  Description: Returns 4: the number of columns of a LMatrix4.
//////////////////////////////////////////////////////////////////// 0 
1642 0 0 7 1430 3736 3307 0 234 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::Default Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
1643 0 0 7 1430 3736 3307 0 231 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 3721  
1644 0 0 7 1430 3736 3307 0 231 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 3728  
1645 0 0 7 1430 3736 3307 0 226 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 16 3 e00 1 3610  3 e01 1 3610  3 e02 1 3610  3 e03 1 3610  3 e10 1 3610  3 e11 1 3610  3 e12 1 3610  3 e13 1 3610  3 e20 1 3610  3 e21 1 3610  3 e22 1 3610  3 e23 1 3610  3 e30 1 3610  3 e31 1 3610  3 e32 1 3610  3 e33 1 3610  
1646 0 0 6 1431 3736 0 0 239 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3736  4 copy 1 3721  
1647 0 0 6 1431 3736 0 0 239 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3736  4 copy 1 3728  
1648 0 0 4 1432 3590 0 0 221 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::set
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 17 4 this 3 3736  3 e00 1 3610  3 e01 1 3610  3 e02 1 3610  3 e03 1 3610  3 e10 1 3610  3 e11 1 3610  3 e12 1 3610  3 e13 1 3610  3 e20 1 3610  3 e21 1 3610  3 e22 1 3610  3 e23 1 3610  3 e30 1 3610  3 e31 1 3610  3 e32 1 3610  3 e33 1 3610  
1649 0 0 4 1433 3590 0 0 235 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::Indexing operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 3736  3 row 1 3595  3 col 1 3595  
1650 0 0 6 1433 3610 0 0 0 3 4 this 3 3728  3 row 1 3595  3 col 1 3595  
1651 0 0 4 1434 3590 0 0 410 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::get_data
//       Access: Published
//  Description: Returns the address of the first of the nine data
//               elements in the matrix.  The remaining elements
//               occupy the next eight positions in row-major order.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3728  
1652 0 0 6 1435 3595 0 0 291 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::get_num_components
//       Access: Published
//  Description: Returns the number of elements in the matrix, sixteen.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3728  
1653 0 0 7 1436 3606 0 0 0 0 
1654 0 0 7 1451 3737 3367 0 228 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Default Constructor
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
1655 0 0 7 1451 3737 3367 0 225 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Copy Constructor
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 3660  
1656 0 0 7 1451 3737 3367 0 225 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Copy Constructor
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 2 6 param0 0 3587  4 copy 1 3633  
1657 0 0 7 1451 3737 3367 0 220 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Constructor
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 4 6 param0 0 3587  6 param1 0 3587  6 param2 0 3587  6 param3 0 3587  
1658 0 0 7 1452 3737 3367 0 228 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::pure_imaginary_quat
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 1 6 param0 0 3642  
1659 0 0 7 1453 3737 3367 0 265 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::conjugate
//       Access: Published
//  Description: Returns the complex conjugate of this quat.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3738  
1660 0 0 7 1454 3632 2228 0 267 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::xform
//       Access: Published
//  Description: Transforms a 3-d vector by the indicated rotation
//////////////////////////////////////////////////////////////////// 2 4 this 3 3738  1 v 1 3633  
1661 0 0 7 1454 3659 2609 0 267 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::xform
//       Access: Published
//  Description: Transforms a 4-d vector by the indicated rotation
//////////////////////////////////////////////////////////////////// 2 4 this 3 3738  1 v 1 3660  
1662 0 0 7 1455 3737 3367 0 255 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::multiply
//       Access: Published
//  Description: actual multiply call (non virtual)
//////////////////////////////////////////////////////////////////// 2 4 this 3 3738  3 rhs 1 3738  
1663 0 0 7 1456 3737 3367 0 0 1 4 this 3 3738  
1664 0 0 7 1457 3737 3367 0 0 2 4 this 3 3738  5 other 1 3738  
1665 0 0 7 1458 3737 3367 0 0 2 4 this 3 3738  5 other 1 3738  
1666 0 0 6 1459 3587 0 0 369 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::angle_rad
//       Access: Published
//  Description: Returns the angle between the orientation represented
//               by this quaternion and the other one, expressed in
//               radians.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3738  5 other 1 3738  
1667 0 0 6 1460 3587 0 0 369 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::angle_deg
//       Access: Published
//  Description: Returns the angle between the orientation represented
//               by this quaternion and the other one, expressed in
//               degrees.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3738  5 other 1 3738  
1668 0 0 7 1461 3695 3023 0 0 2 4 this 3 3737  6 param0 0 3696  
1669 0 0 7 1461 3706 3117 0 0 2 4 this 3 3737  6 param0 0 3700  
1670 0 0 7 1461 3737 3367 0 0 2 4 this 3 3738  6 param0 0 3738  
1671 0 0 7 1461 3737 3367 0 0 2 4 this 3 3738  6 scalar 1 3587  
1672 0 0 7 1462 3737 3367 0 0 2 4 this 3 3738  6 scalar 1 3587  
1673 0 0 6 1463 3737 0 0 237 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Multiply Assignment Operator
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3737  6 param0 0 3738  
1674 0 0 6 1464 3596 0 0 345 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::almost_equal
//       Access: public
//  Description: Returns true if two quaternions are memberwise equal
//               within a default tolerance based on the numeric type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3738  5 other 1 3738  
1675 0 0 6 1464 3596 0 0 321 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::almost_equal
//       Access: public
//  Description: Returns true if two quaternions are memberwise equal
//               within a specified tolerance.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3738  5 other 1 3738  9 threshold 1 3587  
1676 0 0 6 1465 3596 0 0 374 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::is_same_direction
//       Access: public
//  Description: Returns true if two quaternions represent the same
//               rotation within a default tolerance based on the
//               numeric type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3738  5 other 1 3738  
1677 0 0 6 1466 3596 0 0 337 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::almost_same_direction
//       Access: public
//  Description: Returns true if two quaternions represent the same
//               rotation within a specified tolerance.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3738  5 other 1 3738  9 threshold 1 3587  
1678 0 0 4 1467 3590 0 0 215 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::output
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3738  6 param0 0 3599  
1679 0 0 4 1468 3590 0 0 270 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::extract_to_matrix (LMatrix3)
//       Access: Public
//  Description: Based on the quat lib from VRPN.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3738  1 m 1 3695  
1680 0 0 4 1468 3590 0 0 270 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::extract_to_matrix (LMatrix4)
//       Access: Public
//  Description: Based on the quat lib from VRPN.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3738  1 m 1 3706  
1681 0 0 4 1469 3590 0 0 503 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_from_matrix
//       Access: public
//  Description: Sets the quaternion according to the rotation
//               represented by the matrix.  Originally we tried an
//               algorithm presented by Do-While Jones, but that
//               turned out to be broken.  This is based on the quat
//               lib from UNC.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3737  1 m 1 3696  
1682 0 0 4 1469 3590 0 0 224 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_from_matrix
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3737  1 m 1 3700  
1683 0 0 4 1470 3590 0 0 368 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_hpr
//       Access: public
//  Description: Sets the quaternion as the unit quaternion that
//               is equivalent to these Euler angles.
//               (from Real-time Rendering, p.49)
//////////////////////////////////////////////////////////////////// 3 4 this 3 3737  3 hpr 1 3633  2 cs 1 3461  
1684 0 0 7 1471 3632 2228 0 296 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_hpr
//       Access: public
//  Description: Extracts the equivalent Euler angles from the unit
//               quaternion.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3738  2 cs 1 3461  
1685 0 0 7 1472 3641 2469 0 432 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_axis
//       Access: Public
//  Description: This, along with get_angle(), returns the rotation
//               represented by the quaternion as an angle about an
//               arbitrary axis.  This returns the axis; it is not
//               normalized.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3738  
1686 0 0 7 1473 3641 2469 0 415 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_axis_normalized
//       Access: Public
//  Description: This, along with get_angle(), returns the rotation
//               represented by the quaternion as an angle about an
//               arbitrary axis.  This returns the normalized axis.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3738  
1687 0 0 6 1474 3587 0 0 645 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_angle_rad
//       Access: Public
//  Description: This, along with get_axis(), returns the rotation
//               represented by the quaternion as an angle about an
//               arbitrary axis.  This returns the angle, in radians
//               counterclockwise about the axis.
//
//               It is necessary to ensure the quaternion has been
//               normalized (for instance, with a call to normalize())
//               before calling this method.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3738  
1688 0 0 6 1475 3587 0 0 641 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_angle
//       Access: Public
//  Description: This, along with get_axis(), returns the rotation
//               represented by the quaternion as an angle about an
//               arbitrary axis.  This returns the angle, in degrees
//               counterclockwise about the axis.
//
//               It is necessary to ensure the quaternion has been
//               normalized (for instance, with a call to normalize())
//               before calling this method.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3738  
1689 0 0 4 1476 3590 0 0 324 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_from_axis_angle_rad
//       Access: Public
//  Description: angle_rad is the angle about the axis in radians.
//               axis must be normalized.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3737  9 angle_rad 1 3587  4 axis 1 3642  
1690 0 0 4 1477 3590 0 0 324 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_from_axis_angle_deg
//       Access: Public
//  Description: angle_deg is the angle about the axis in degrees.
//               axis must be normalized.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3737  9 angle_deg 1 3587  4 axis 1 3642  
1691 0 0 7 1478 3641 2469 0 315 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_up
//       Access: Public
//  Description: Returns the orientation represented by this
//               quaternion, expressed as an up vector.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3738  2 cs 1 3461  
1692 0 0 7 1479 3641 2469 0 320 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_right
//       Access: Public
//  Description: Returns the orientation represented by this
//               quaternion, expressed as a right vector.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3738  2 cs 1 3461  
1693 0 0 7 1480 3641 2469 0 324 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_forward
//       Access: Public
//  Description: Returns the orientation represented by this
//               quaternion, expressed as a forward vector.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3738  2 cs 1 3461  
1694 0 0 6 1481 3587 0 0 214 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_r
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 3738  
1695 0 0 6 1482 3587 0 0 214 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_i
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 3738  
1696 0 0 6 1483 3587 0 0 214 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_j
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 3738  
1697 0 0 6 1484 3587 0 0 214 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_k
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 3738  
1698 0 0 4 1485 3590 0 0 214 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_r
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3737  1 r 1 3587  
1699 0 0 4 1486 3590 0 0 214 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_i
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3737  1 i 1 3587  
1700 0 0 4 1487 3590 0 0 214 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_j
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3737  1 j 1 3587  
1701 0 0 4 1488 3590 0 0 214 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_k
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3737  1 k 1 3587  
1702 0 0 6 1489 3596 0 0 218 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::normalize
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 3737  
1703 0 0 6 1490 3596 0 0 817 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::conjugate_from
//       Access: Published
//  Description: Computes the conjugate of the other quat, and stores
//               the result in this quat.  This is a fully general
//               operation and makes no assumptions about the type of
//               transform represented by the quat.
//
//               The other quat must be a different object than this
//               quat.  However, if you need to get a conjugate of a
//               quat in place, see conjugate_in_place.
//
//               The return value is true if the quat was
//               successfully inverted, false if there was a
//               singularity.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3737  5 other 1 3738  
1704 0 0 6 1491 3596 0 0 379 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::conjugate_in_place
//       Access: Published
//  Description: Sets this to be the conjugate of the current quat.
//               Returns true if the successful, false if the quat
//               was singular.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3737  
1705 0 0 6 1492 3596 0 0 794 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::invert_from
//       Access: Public
//  Description: Computes the inverse of the other quat, and stores
//               the result in this quat.  This is a fully general
//               operation and makes no assumptions about the type of
//               transform represented by the quat.
//
//               The other quat must be a different object than this
//               quat.  However, if you need to invert a quat in
//               place, see invert_in_place.
//
//               The return value is true if the quat was
//               successfully inverted, false if there was a
//               singularity.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3737  5 other 1 3738  
1706 0 0 6 1493 3596 0 0 360 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::invert_in_place
//       Access: Public
//  Description: Inverts the current quat.  Returns true if the
//               inverse is successful, false if the quat was
//               singular.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3737  
1707 0 0 6 1494 3596 0 0 322 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::is_identity
//       Access: Public
//  Description: Returns true if this quaternion represents the
//               identity transformation: no rotation.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3738  
1708 0 0 6 1495 3596 0 0 341 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::is_almost_identity
//       Access: Public
//  Description: Returns true if this quaternion represents the
//               identity transformation within a given tolerance.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3738  9 tolerance 1 3587  
1709 0 0 6 1496 3738 0 0 259 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::ident_quat
//       Access: Public, Static
//  Description: Returns an identity quaternion.
//////////////////////////////////////////////////////////////////// 0 
1710 0 0 7 1497 3606 0 0 0 0 
1711 0 0 7 1500 3740 3415 0 228 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Default Constructor
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
1712 0 0 7 1500 3740 3415 0 225 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Copy Constructor
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 3666  
1713 0 0 7 1500 3740 3415 0 225 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Copy Constructor
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 2 6 param0 0 3610  4 copy 1 3636  
1714 0 0 7 1500 3740 3415 0 220 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Constructor
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 4 6 param0 0 3610  6 param1 0 3610  6 param2 0 3610  6 param3 0 3610  
1715 0 0 7 1501 3740 3415 0 228 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::pure_imaginary_quat
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 1 6 param0 0 3645  
1716 0 0 7 1502 3740 3415 0 265 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::conjugate
//       Access: Published
//  Description: Returns the complex conjugate of this quat.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3741  
1717 0 0 7 1503 3635 2300 0 267 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::xform
//       Access: Published
//  Description: Transforms a 3-d vector by the indicated rotation
//////////////////////////////////////////////////////////////////// 2 4 this 3 3741  1 v 1 3636  
1718 0 0 7 1503 3665 2689 0 267 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::xform
//       Access: Published
//  Description: Transforms a 4-d vector by the indicated rotation
//////////////////////////////////////////////////////////////////// 2 4 this 3 3741  1 v 1 3666  
1719 0 0 7 1504 3740 3415 0 255 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::multiply
//       Access: Published
//  Description: actual multiply call (non virtual)
//////////////////////////////////////////////////////////////////// 2 4 this 3 3741  3 rhs 1 3741  
1720 0 0 7 1505 3740 3415 0 0 1 4 this 3 3741  
1721 0 0 7 1506 3740 3415 0 0 2 4 this 3 3741  5 other 1 3741  
1722 0 0 7 1507 3740 3415 0 0 2 4 this 3 3741  5 other 1 3741  
1723 0 0 6 1508 3610 0 0 369 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::angle_rad
//       Access: Published
//  Description: Returns the angle between the orientation represented
//               by this quaternion and the other one, expressed in
//               radians.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3741  5 other 1 3741  
1724 0 0 6 1509 3610 0 0 369 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::angle_deg
//       Access: Published
//  Description: Returns the angle between the orientation represented
//               by this quaternion and the other one, expressed in
//               degrees.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3741  5 other 1 3741  
1725 0 0 7 1510 3716 3207 0 0 2 4 this 3 3740  6 param0 0 3717  
1726 0 0 7 1510 3727 3299 0 0 2 4 this 3 3740  6 param0 0 3721  
1727 0 0 7 1510 3740 3415 0 0 2 4 this 3 3741  6 param0 0 3741  
1728 0 0 7 1510 3740 3415 0 0 2 4 this 3 3741  6 scalar 1 3610  
1729 0 0 7 1511 3740 3415 0 0 2 4 this 3 3741  6 scalar 1 3610  
1730 0 0 6 1512 3740 0 0 237 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Multiply Assignment Operator
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3740  6 param0 0 3741  
1731 0 0 6 1513 3596 0 0 345 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::almost_equal
//       Access: public
//  Description: Returns true if two quaternions are memberwise equal
//               within a default tolerance based on the numeric type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3741  5 other 1 3741  
1732 0 0 6 1513 3596 0 0 321 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::almost_equal
//       Access: public
//  Description: Returns true if two quaternions are memberwise equal
//               within a specified tolerance.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3741  5 other 1 3741  9 threshold 1 3610  
1733 0 0 6 1514 3596 0 0 374 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::is_same_direction
//       Access: public
//  Description: Returns true if two quaternions represent the same
//               rotation within a default tolerance based on the
//               numeric type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3741  5 other 1 3741  
1734 0 0 6 1515 3596 0 0 337 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::almost_same_direction
//       Access: public
//  Description: Returns true if two quaternions represent the same
//               rotation within a specified tolerance.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3741  5 other 1 3741  9 threshold 1 3610  
1735 0 0 4 1516 3590 0 0 215 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::output
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3741  6 param0 0 3599  
1736 0 0 4 1517 3590 0 0 270 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::extract_to_matrix (LMatrix3)
//       Access: Public
//  Description: Based on the quat lib from VRPN.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3741  1 m 1 3716  
1737 0 0 4 1517 3590 0 0 270 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::extract_to_matrix (LMatrix4)
//       Access: Public
//  Description: Based on the quat lib from VRPN.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3741  1 m 1 3727  
1738 0 0 4 1518 3590 0 0 503 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_from_matrix
//       Access: public
//  Description: Sets the quaternion according to the rotation
//               represented by the matrix.  Originally we tried an
//               algorithm presented by Do-While Jones, but that
//               turned out to be broken.  This is based on the quat
//               lib from UNC.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3740  1 m 1 3717  
1739 0 0 4 1518 3590 0 0 224 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_from_matrix
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3740  1 m 1 3721  
1740 0 0 4 1519 3590 0 0 368 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_hpr
//       Access: public
//  Description: Sets the quaternion as the unit quaternion that
//               is equivalent to these Euler angles.
//               (from Real-time Rendering, p.49)
//////////////////////////////////////////////////////////////////// 3 4 this 3 3740  3 hpr 1 3636  2 cs 1 3461  
1741 0 0 7 1520 3635 2300 0 296 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_hpr
//       Access: public
//  Description: Extracts the equivalent Euler angles from the unit
//               quaternion.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3741  2 cs 1 3461  
1742 0 0 7 1521 3644 2503 0 432 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_axis
//       Access: Public
//  Description: This, along with get_angle(), returns the rotation
//               represented by the quaternion as an angle about an
//               arbitrary axis.  This returns the axis; it is not
//               normalized.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3741  
1743 0 0 7 1522 3644 2503 0 415 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_axis_normalized
//       Access: Public
//  Description: This, along with get_angle(), returns the rotation
//               represented by the quaternion as an angle about an
//               arbitrary axis.  This returns the normalized axis.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3741  
1744 0 0 6 1523 3610 0 0 645 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_angle_rad
//       Access: Public
//  Description: This, along with get_axis(), returns the rotation
//               represented by the quaternion as an angle about an
//               arbitrary axis.  This returns the angle, in radians
//               counterclockwise about the axis.
//
//               It is necessary to ensure the quaternion has been
//               normalized (for instance, with a call to normalize())
//               before calling this method.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3741  
1745 0 0 6 1524 3610 0 0 641 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_angle
//       Access: Public
//  Description: This, along with get_axis(), returns the rotation
//               represented by the quaternion as an angle about an
//               arbitrary axis.  This returns the angle, in degrees
//               counterclockwise about the axis.
//
//               It is necessary to ensure the quaternion has been
//               normalized (for instance, with a call to normalize())
//               before calling this method.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3741  
1746 0 0 4 1525 3590 0 0 324 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_from_axis_angle_rad
//       Access: Public
//  Description: angle_rad is the angle about the axis in radians.
//               axis must be normalized.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3740  9 angle_rad 1 3610  4 axis 1 3645  
1747 0 0 4 1526 3590 0 0 324 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_from_axis_angle_deg
//       Access: Public
//  Description: angle_deg is the angle about the axis in degrees.
//               axis must be normalized.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3740  9 angle_deg 1 3610  4 axis 1 3645  
1748 0 0 7 1527 3644 2503 0 315 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_up
//       Access: Public
//  Description: Returns the orientation represented by this
//               quaternion, expressed as an up vector.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3741  2 cs 1 3461  
1749 0 0 7 1528 3644 2503 0 320 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_right
//       Access: Public
//  Description: Returns the orientation represented by this
//               quaternion, expressed as a right vector.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3741  2 cs 1 3461  
1750 0 0 7 1529 3644 2503 0 324 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_forward
//       Access: Public
//  Description: Returns the orientation represented by this
//               quaternion, expressed as a forward vector.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3741  2 cs 1 3461  
1751 0 0 6 1530 3610 0 0 214 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_r
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 3741  
1752 0 0 6 1531 3610 0 0 214 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_i
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 3741  
1753 0 0 6 1532 3610 0 0 214 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_j
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 3741  
1754 0 0 6 1533 3610 0 0 214 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_k
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 3741  
1755 0 0 4 1534 3590 0 0 214 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_r
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3740  1 r 1 3610  
1756 0 0 4 1535 3590 0 0 214 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_i
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3740  1 i 1 3610  
1757 0 0 4 1536 3590 0 0 214 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_j
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3740  1 j 1 3610  
1758 0 0 4 1537 3590 0 0 214 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_k
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3740  1 k 1 3610  
1759 0 0 6 1538 3596 0 0 218 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::normalize
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 3740  
1760 0 0 6 1539 3596 0 0 817 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::conjugate_from
//       Access: Published
//  Description: Computes the conjugate of the other quat, and stores
//               the result in this quat.  This is a fully general
//               operation and makes no assumptions about the type of
//               transform represented by the quat.
//
//               The other quat must be a different object than this
//               quat.  However, if you need to get a conjugate of a
//               quat in place, see conjugate_in_place.
//
//               The return value is true if the quat was
//               successfully inverted, false if there was a
//               singularity.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3740  5 other 1 3741  
1761 0 0 6 1540 3596 0 0 379 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::conjugate_in_place
//       Access: Published
//  Description: Sets this to be the conjugate of the current quat.
//               Returns true if the successful, false if the quat
//               was singular.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3740  
1762 0 0 6 1541 3596 0 0 794 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::invert_from
//       Access: Public
//  Description: Computes the inverse of the other quat, and stores
//               the result in this quat.  This is a fully general
//               operation and makes no assumptions about the type of
//               transform represented by the quat.
//
//               The other quat must be a different object than this
//               quat.  However, if you need to invert a quat in
//               place, see invert_in_place.
//
//               The return value is true if the quat was
//               successfully inverted, false if there was a
//               singularity.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3740  5 other 1 3741  
1763 0 0 6 1542 3596 0 0 360 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::invert_in_place
//       Access: Public
//  Description: Inverts the current quat.  Returns true if the
//               inverse is successful, false if the quat was
//               singular.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3740  
1764 0 0 6 1543 3596 0 0 322 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::is_identity
//       Access: Public
//  Description: Returns true if this quaternion represents the
//               identity transformation: no rotation.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3741  
1765 0 0 6 1544 3596 0 0 341 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::is_almost_identity
//       Access: Public
//  Description: Returns true if this quaternion represents the
//               identity transformation within a given tolerance.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3741  9 tolerance 1 3610  
1766 0 0 6 1545 3741 0 0 259 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::ident_quat
//       Access: Public, Static
//  Description: Returns an identity quaternion.
//////////////////////////////////////////////////////////////////// 0 
1767 0 0 7 1546 3606 0 0 0 0 
1768 0 0 7 1549 3743 3420 0 226 ////////////////////////////////////////////////////////////////////
//     Function: LRotation::Default Constructor
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
1769 0 0 7 1549 3743 3420 0 227 ////////////////////////////////////////////////////////////////////
//     Function: LRotation::Constructor
//       Access: public
//  Description: lmatrix3
//////////////////////////////////////////////////////////////////// 1 6 param0 0 3696  
1770 0 0 7 1549 3743 3420 0 227 ////////////////////////////////////////////////////////////////////
//     Function: LRotation::Constructor
//       Access: public
//  Description: lmatrix4
//////////////////////////////////////////////////////////////////// 1 6 param0 0 3700  
1771 0 0 7 1549 3743 3420 0 223 ////////////////////////////////////////////////////////////////////
//     Function: LRotation::Copy Constructor
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 1 6 param0 0 3738  
1772 0 0 7 1549 3743 3420 0 223 ////////////////////////////////////////////////////////////////////
//     Function: LRotation::Copy Constructor
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 3660  
1773 0 0 7 1549 3743 3420 0 244 ////////////////////////////////////////////////////////////////////
//     Function: LRotation::Constructor
//       Access: public
//  Description: axis + angle (in degrees)
//////////////////////////////////////////////////////////////////// 2 6 param0 0 3642  6 param1 0 3587  
1774 0 0 7 1549 3743 3420 0 265 ////////////////////////////////////////////////////////////////////
//     Function: LRotation::Constructor
//       Access: public
//  Description: Sets the rotation from the given Euler angles.
//////////////////////////////////////////////////////////////////// 3 6 param0 0 3587  6 param1 0 3587  6 param2 0 3587  
1775 0 0 7 1549 3743 3420 0 218 ////////////////////////////////////////////////////////////////////
//     Function: LRotation::Constructor
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 4 6 param0 0 3587  6 param1 0 3587  6 param2 0 3587  6 param3 0 3587  
1776 0 0 7 1550 3737 3367 0 0 2 4 this 3 3744  5 other 1 3738  
1777 0 0 7 1550 3743 3420 0 0 2 4 this 3 3744  5 other 1 3744  
1778 0 0 7 1550 3743 3420 0 0 2 4 this 3 3744  6 scalar 1 3587  
1779 0 0 7 1551 3743 3420 0 0 2 4 this 3 3744  6 scalar 1 3587  
1780 0 0 7 1552 3606 0 0 0 0 
1781 0 0 7 1555 3746 3425 0 226 ////////////////////////////////////////////////////////////////////
//     Function: LRotation::Default Constructor
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
1782 0 0 7 1555 3746 3425 0 227 ////////////////////////////////////////////////////////////////////
//     Function: LRotation::Constructor
//       Access: public
//  Description: lmatrix3
//////////////////////////////////////////////////////////////////// 1 6 param0 0 3717  
1783 0 0 7 1555 3746 3425 0 227 ////////////////////////////////////////////////////////////////////
//     Function: LRotation::Constructor
//       Access: public
//  Description: lmatrix4
//////////////////////////////////////////////////////////////////// 1 6 param0 0 3721  
1784 0 0 7 1555 3746 3425 0 223 ////////////////////////////////////////////////////////////////////
//     Function: LRotation::Copy Constructor
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 1 6 param0 0 3741  
1785 0 0 7 1555 3746 3425 0 223 ////////////////////////////////////////////////////////////////////
//     Function: LRotation::Copy Constructor
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 3666  
1786 0 0 7 1555 3746 3425 0 244 ////////////////////////////////////////////////////////////////////
//     Function: LRotation::Constructor
//       Access: public
//  Description: axis + angle (in degrees)
//////////////////////////////////////////////////////////////////// 2 6 param0 0 3645  6 param1 0 3610  
1787 0 0 7 1555 3746 3425 0 265 ////////////////////////////////////////////////////////////////////
//     Function: LRotation::Constructor
//       Access: public
//  Description: Sets the rotation from the given Euler angles.
//////////////////////////////////////////////////////////////////// 3 6 param0 0 3610  6 param1 0 3610  6 param2 0 3610  
1788 0 0 7 1555 3746 3425 0 218 ////////////////////////////////////////////////////////////////////
//     Function: LRotation::Constructor
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 4 6 param0 0 3610  6 param1 0 3610  6 param2 0 3610  6 param3 0 3610  
1789 0 0 7 1556 3740 3415 0 0 2 4 this 3 3747  5 other 1 3741  
1790 0 0 7 1556 3746 3425 0 0 2 4 this 3 3747  5 other 1 3747  
1791 0 0 7 1556 3746 3425 0 0 2 4 this 3 3747  6 scalar 1 3610  
1792 0 0 7 1557 3746 3425 0 0 2 4 this 3 3747  6 scalar 1 3610  
1793 0 0 7 1558 3606 0 0 0 0 
1794 0 0 7 1561 3749 3429 0 229 ////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Default Constructor
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
1795 0 0 7 1561 3749 3429 0 229 ////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Constructor
//       Access: public
//  Description: matrix3
//////////////////////////////////////////////////////////////////// 1 6 param0 0 3696  
1796 0 0 7 1561 3749 3429 0 229 ////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Constructor
//       Access: public
//  Description: matrix4
//////////////////////////////////////////////////////////////////// 1 6 param0 0 3700  
1797 0 0 7 1561 3749 3429 0 226 ////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Copy Constructor
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 1 6 param0 0 3738  
1798 0 0 7 1561 3749 3429 0 236 ////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Constructor
//       Access: public
//  Description: vector + twist
//////////////////////////////////////////////////////////////////// 2 6 param0 0 3642  6 param1 0 3587  
1799 0 0 7 1561 3749 3429 0 221 ////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Constructor
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 4 6 param0 0 3587  6 param1 0 3587  6 param2 0 3587  6 param3 0 3587  
1800 0 0 7 1562 3749 3429 0 0 2 4 this 3 3750  5 other 1 3738  
1801 0 0 7 1562 3749 3429 0 0 2 4 this 3 3750  5 other 1 3744  
1802 0 0 7 1563 3606 0 0 0 0 
1803 0 0 7 1566 3752 3433 0 229 ////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Default Constructor
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
1804 0 0 7 1566 3752 3433 0 229 ////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Constructor
//       Access: public
//  Description: matrix3
//////////////////////////////////////////////////////////////////// 1 6 param0 0 3717  
1805 0 0 7 1566 3752 3433 0 229 ////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Constructor
//       Access: public
//  Description: matrix4
//////////////////////////////////////////////////////////////////// 1 6 param0 0 3721  
1806 0 0 7 1566 3752 3433 0 226 ////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Copy Constructor
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 1 6 param0 0 3741  
1807 0 0 7 1566 3752 3433 0 236 ////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Constructor
//       Access: public
//  Description: vector + twist
//////////////////////////////////////////////////////////////////// 2 6 param0 0 3645  6 param1 0 3587  
1808 0 0 7 1566 3752 3433 0 221 ////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Constructor
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 4 6 param0 0 3610  6 param1 0 3610  6 param2 0 3610  6 param3 0 3610  
1809 0 0 7 1567 3752 3433 0 0 2 4 this 3 3753  5 other 1 3741  
1810 0 0 7 1567 3752 3433 0 0 2 4 this 3 3753  5 other 1 3747  
1811 0 0 7 1568 3606 0 0 0 0 
1812 0 0 7 1642 3755 3441 0 231 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableColor::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 name 1 3594  
1813 0 0 7 1642 3755 3441 0 231 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableColor::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 4 4 name 1 3594  13 default_value 1 3756  11 description 1 3594  5 flags 1 3595  
1814 0 0 7 1642 3755 3441 0 231 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableColor::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 4 4 name 1 3594  13 default_value 1 3594  11 description 1 3594  5 flags 1 3595  
1815 0 0 6 1643 3755 0 0 0 2 4 this 3 3755  5 value 1 3756  
1816 0 0 6 1645 3760 0 0 0 2 4 this 3 3758  1 n 1 3595  
1817 0 0 4 1646 3590 0 0 267 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableColor::set_value
//       Access: Published
//  Description: Reassigns the variable's local value.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3755  5 value 1 3756  
1818 0 0 6 1647 3756 0 0 259 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableColor::get_value
//       Access: Published
//  Description: Returns the variable's value.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3758  
1819 0 0 7 1648 3761 0 0 275 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableColor::get_default_value
//       Access: Published
//  Description: Returns the variable's default value.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3758  
1820 0 0 6 1644 3756 0 0 0 1 4 this 3 3758  
1821 0 0 6 3 3610 0 0 0 1 1 f 1 3610  
1822 0 0 6 3 3587 0 0 0 1 1 f 1 3587  
1823 0 0 6 4 3610 0 0 0 1 1 f 1 3610  
1824 0 0 6 4 3587 0 0 0 1 1 f 1 3587  
1825 0 0 6 518 3461 0 0 0 0 
1826 0 0 6 519 3461 0 0 0 1 3 str 1 3594  
1827 0 0 6 520 3594 0 0 0 1 2 cs 1 3461  
1828 0 0 6 521 3596 0 0 0 1 2 cs 1 3461  
1829 0 0 7 1138 3716 3207 0 0 1 1 a 1 3717  
1830 0 0 7 1138 3695 3023 0 0 1 1 a 1 3696  
1831 0 0 7 1138 3727 3299 0 0 1 1 a 1 3721  
1832 0 0 7 1138 3706 3117 0 0 1 1 a 1 3700  
1833 0 0 7 1139 3716 3207 0 0 1 1 a 1 3717  
1834 0 0 7 1139 3695 3023 0 0 1 1 a 1 3696  
1835 0 0 7 1139 3727 3299 0 0 1 1 a 1 3721  
1836 0 0 7 1139 3706 3117 0 0 1 1 a 1 3700  
1837 0 0 7 1139 3740 3415 0 0 1 1 a 1 3741  
1838 0 0 7 1139 3737 3367 0 0 1 1 a 1 3738  
1839 0 0 7 1438 3716 3207 0 0 2 1 m 1 3717  1 q 1 3741  
1840 0 0 7 1438 3695 3023 0 0 2 1 m 1 3696  1 q 1 3738  
1841 0 0 7 1438 3727 3299 0 0 2 1 m 1 3721  1 q 1 3741  
1842 0 0 7 1438 3706 3117 0 0 2 1 m 1 3700  1 q 1 3738  
1843 0 0 7 1438 3626 2203 0 0 2 1 v 1 3627  1 m 1 3717  
1844 0 0 7 1438 3623 2187 0 0 2 1 v 1 3624  1 m 1 3696  
1845 0 0 7 1438 3653 2576 0 0 2 1 v 1 3654  1 m 1 3717  
1846 0 0 7 1438 3653 2576 0 0 2 1 v 1 3654  1 m 1 3721  
1847 0 0 7 1438 3650 2553 0 0 2 1 v 1 3651  1 m 1 3696  
1848 0 0 7 1438 3650 2553 0 0 2 1 v 1 3651  1 m 1 3700  
1849 0 0 7 1438 3689 2924 0 0 2 1 v 1 3690  1 m 1 3721  
1850 0 0 7 1438 3686 2906 0 0 2 1 v 1 3687  1 m 1 3700  
1851 0 0 7 1438 3635 2300 0 0 2 1 v 1 3636  1 m 1 3717  
1852 0 0 7 1438 3632 2228 0 0 2 1 v 1 3633  1 m 1 3696  
1853 0 0 7 1438 3665 2689 0 0 2 1 v 1 3666  1 m 1 3721  
1854 0 0 7 1438 3659 2609 0 0 2 1 v 1 3660  1 m 1 3700  
1855 0 0 7 1438 3617 2156 0 0 2 1 v 1 3618  1 m 1 3717  
1856 0 0 7 1438 3614 2138 0 0 2 1 v 1 3615  1 m 1 3696  
1857 0 0 7 1438 3644 2503 0 0 2 1 v 1 3645  1 m 1 3717  
1858 0 0 7 1438 3644 2503 0 0 2 1 v 1 3645  1 m 1 3721  
1859 0 0 7 1438 3641 2469 0 0 2 1 v 1 3642  1 m 1 3696  
1860 0 0 7 1438 3641 2469 0 0 2 1 v 1 3642  1 m 1 3700  
1861 0 0 7 1438 3680 2871 0 0 2 1 v 1 3681  1 m 1 3721  
1862 0 0 7 1438 3677 2853 0 0 2 1 v 1 3678  1 m 1 3700  
1863 0 0 4 1439 3590 0 0 0 2 1 v 1 3626  1 m 1 3717  
1864 0 0 4 1439 3590 0 0 0 2 1 v 1 3623  1 m 1 3696  
1865 0 0 4 1439 3590 0 0 0 2 1 v 1 3653  1 m 1 3717  
1866 0 0 4 1439 3590 0 0 0 2 1 v 1 3653  1 m 1 3721  
1867 0 0 4 1439 3590 0 0 0 2 1 v 1 3650  1 m 1 3696  
1868 0 0 4 1439 3590 0 0 0 2 1 v 1 3650  1 m 1 3700  
1869 0 0 4 1439 3590 0 0 0 2 1 v 1 3635  1 m 1 3717  
1870 0 0 4 1439 3590 0 0 0 2 1 v 1 3632  1 m 1 3696  
1871 0 0 4 1439 3590 0 0 0 2 1 v 1 3665  1 m 1 3721  
1872 0 0 4 1439 3590 0 0 0 2 1 v 1 3659  1 m 1 3700  
1873 0 0 4 1439 3590 0 0 0 2 1 v 1 3617  1 m 1 3717  
1874 0 0 4 1439 3590 0 0 0 2 1 v 1 3614  1 m 1 3696  
1875 0 0 4 1439 3590 0 0 0 2 1 v 1 3644  1 m 1 3717  
1876 0 0 4 1439 3590 0 0 0 2 1 v 1 3644  1 m 1 3721  
1877 0 0 4 1439 3590 0 0 0 2 1 v 1 3641  1 m 1 3696  
1878 0 0 4 1439 3590 0 0 0 2 1 v 1 3641  1 m 1 3700  
1879 0 0 4 1440 3590 0 0 0 2 4 dest 1 3601  5 value 1 3717  
1880 0 0 4 1440 3590 0 0 0 2 4 dest 1 3601  5 value 1 3696  
1881 0 0 4 1440 3590 0 0 0 2 4 dest 1 3601  5 value 1 3721  
1882 0 0 4 1440 3590 0 0 0 2 4 dest 1 3601  5 value 1 3700  
1883 0 0 4 1441 3590 0 0 0 2 6 result 1 3716  6 source 1 3603  
1884 0 0 4 1441 3590 0 0 0 2 6 result 1 3695  6 source 1 3603  
1885 0 0 4 1441 3590 0 0 0 2 6 result 1 3727  6 source 1 3603  
1886 0 0 4 1441 3590 0 0 0 2 6 result 1 3706  6 source 1 3603  
1887 0 0 4 1442 3590 0 0 0 4 3 mat 1 3716  5 scale 1 3636  3 hpr 1 3636  2 cs 1 3461  
1888 0 0 4 1442 3590 0 0 0 5 3 mat 1 3716  5 scale 1 3636  5 shear 1 3636  3 hpr 1 3636  2 cs 1 3461  
1889 0 0 4 1442 3590 0 0 0 4 3 mat 1 3695  5 scale 1 3633  3 hpr 1 3633  2 cs 1 3461  
1890 0 0 4 1442 3590 0 0 0 5 3 mat 1 3695  5 scale 1 3633  5 shear 1 3633  3 hpr 1 3633  2 cs 1 3461  
1891 0 0 4 1442 3590 0 0 0 5 3 mat 1 3727  5 scale 1 3636  3 hpr 1 3636  9 translate 1 3636  2 cs 1 3461  
1892 0 0 4 1442 3590 0 0 0 6 3 mat 1 3727  5 scale 1 3636  5 shear 1 3636  3 hpr 1 3636  9 translate 1 3636  2 cs 1 3461  
1893 0 0 4 1442 3590 0 0 0 3 3 mat 1 3727  10 components 1 3762  2 cs 1 3461  
1894 0 0 4 1442 3590 0 0 0 5 3 mat 1 3706  5 scale 1 3633  3 hpr 1 3633  9 translate 1 3633  2 cs 1 3461  
1895 0 0 4 1442 3590 0 0 0 6 3 mat 1 3706  5 scale 1 3633  5 shear 1 3633  3 hpr 1 3633  9 translate 1 3633  2 cs 1 3461  
1896 0 0 4 1442 3590 0 0 0 3 3 mat 1 3706  10 components 1 3764  2 cs 1 3461  
1897 0 0 6 1443 3596 0 0 0 4 3 mat 1 3717  5 scale 1 3635  3 hpr 1 3635  2 cs 1 3461  
1898 0 0 6 1443 3596 0 0 0 5 3 mat 1 3717  5 scale 1 3635  5 shear 1 3635  3 hpr 1 3635  2 cs 1 3461  
1899 0 0 6 1443 3596 0 0 0 4 3 mat 1 3696  5 scale 1 3632  3 hpr 1 3632  2 cs 1 3461  
1900 0 0 6 1443 3596 0 0 0 5 3 mat 1 3696  5 scale 1 3632  5 shear 1 3632  3 hpr 1 3632  2 cs 1 3461  
1901 0 0 6 1443 3596 0 0 0 5 3 mat 1 3721  5 scale 1 3635  3 hpr 1 3635  9 translate 1 3635  2 cs 1 3461  
1902 0 0 6 1443 3596 0 0 0 6 3 mat 1 3721  5 scale 1 3635  5 shear 1 3635  3 hpr 1 3635  9 translate 1 3635  2 cs 1 3461  
1903 0 0 6 1443 3596 0 0 0 3 3 mat 1 3721  10 components 1 3766  2 CS 1 3461  
1904 0 0 6 1443 3596 0 0 0 5 3 mat 1 3700  5 scale 1 3632  3 hpr 1 3632  9 translate 1 3632  2 cs 1 3461  
1905 0 0 6 1443 3596 0 0 0 6 3 mat 1 3700  5 scale 1 3632  5 shear 1 3632  3 hpr 1 3632  9 translate 1 3632  2 cs 1 3461  
1906 0 0 6 1443 3596 0 0 0 3 3 mat 1 3700  10 components 1 3767  2 CS 1 3461  
1907 0 0 4 1444 3590 0 0 0 5 3 mat 1 3716  5 scale 1 3636  5 shear 1 3636  3 hpr 1 3636  2 cs 1 3461  
1908 0 0 4 1444 3590 0 0 0 5 3 mat 1 3695  5 scale 1 3633  5 shear 1 3633  3 hpr 1 3633  2 cs 1 3461  
1909 0 0 4 1444 3590 0 0 0 6 3 mat 1 3727  5 scale 1 3636  5 shear 1 3636  3 hpr 1 3636  9 translate 1 3636  2 cs 1 3461  
1910 0 0 4 1444 3590 0 0 0 3 3 mat 1 3727  10 components 1 3762  2 cs 1 3461  
1911 0 0 4 1444 3590 0 0 0 6 3 mat 1 3706  5 scale 1 3633  5 shear 1 3633  3 hpr 1 3633  9 translate 1 3633  2 cs 1 3461  
1912 0 0 4 1444 3590 0 0 0 3 3 mat 1 3706  10 components 1 3764  2 cs 1 3461  
1913 0 0 6 1445 3596 0 0 0 5 3 mat 1 3717  5 scale 1 3635  5 shear 1 3635  3 hpr 1 3635  2 cs 1 3461  
1914 0 0 6 1445 3596 0 0 0 5 3 mat 1 3696  5 scale 1 3632  5 shear 1 3632  3 hpr 1 3632  2 cs 1 3461  
1915 0 0 6 1445 3596 0 0 0 6 3 mat 1 3721  5 scale 1 3635  5 shear 1 3635  3 hpr 1 3635  9 translate 1 3635  2 cs 1 3461  
1916 0 0 6 1445 3596 0 0 0 3 3 mat 1 3721  10 components 1 3766  2 CS 1 3461  
1917 0 0 6 1445 3596 0 0 0 6 3 mat 1 3700  5 scale 1 3632  5 shear 1 3632  3 hpr 1 3632  9 translate 1 3632  2 cs 1 3461  
1918 0 0 6 1445 3596 0 0 0 3 3 mat 1 3700  10 components 1 3767  2 CS 1 3461  
1919 0 0 4 1446 3590 0 0 0 5 3 mat 1 3716  5 scale 1 3636  5 shear 1 3636  3 hpr 1 3636  2 cs 1 3461  
1920 0 0 4 1446 3590 0 0 0 5 3 mat 1 3695  5 scale 1 3633  5 shear 1 3633  3 hpr 1 3633  2 cs 1 3461  
1921 0 0 4 1446 3590 0 0 0 6 3 mat 1 3727  5 scale 1 3636  5 shear 1 3636  3 hpr 1 3636  9 translate 1 3636  2 cs 1 3461  
1922 0 0 4 1446 3590 0 0 0 3 3 mat 1 3727  10 components 1 3762  2 cs 1 3461  
1923 0 0 4 1446 3590 0 0 0 6 3 mat 1 3706  5 scale 1 3633  5 shear 1 3633  3 hpr 1 3633  9 translate 1 3633  2 cs 1 3461  
1924 0 0 4 1446 3590 0 0 0 3 3 mat 1 3706  10 components 1 3764  2 cs 1 3461  
1925 0 0 6 1447 3596 0 0 0 5 3 mat 1 3717  5 scale 1 3635  5 shear 1 3635  3 hpr 1 3635  2 cs 1 3461  
1926 0 0 6 1447 3596 0 0 0 5 3 mat 1 3696  5 scale 1 3632  5 shear 1 3632  3 hpr 1 3632  2 cs 1 3461  
1927 0 0 6 1447 3596 0 0 0 6 3 mat 1 3721  5 scale 1 3635  5 shear 1 3635  3 hpr 1 3635  9 translate 1 3635  2 cs 1 3461  
1928 0 0 6 1447 3596 0 0 0 3 3 mat 1 3721  10 components 1 3766  2 CS 1 3461  
1929 0 0 6 1447 3596 0 0 0 6 3 mat 1 3700  5 scale 1 3632  5 shear 1 3632  3 hpr 1 3632  9 translate 1 3632  2 cs 1 3461  
1930 0 0 6 1447 3596 0 0 0 3 3 mat 1 3700  10 components 1 3767  2 CS 1 3461  
1931 0 0 7 1448 3635 2300 0 0 1 7 old_hpr 1 3636  
1932 0 0 7 1448 3632 2228 0 0 1 7 old_hpr 1 3633  
1933 0 0 7 1449 3635 2300 0 0 1 7 new_hpr 1 3636  
1934 0 0 7 1449 3632 2228 0 0 1 7 new_hpr 1 3633  
326
3442 11 MathNumbers 0 141313 11 MathNumbers 11 MathNumbers 0 0 0 0 1935 0 0 0 0 0 0 0 0

3443 10 LVecBase2f 0 26625 10 LVecBase2f 10 LVecBase2f 0 0 0 1 1938 1946 0 60 1939 1940 1941 1942 1943 1944 1945 1947 1948 1949 1950 1951 1952 1953 1954 1955 1956 1957 1958 1959 1960 1961 1962 1963 1964 1965 1966 1967 1968 1969 1970 1971 1972 1973 1974 1975 1976 1977 1978 1979 1980 1981 1982 1983 1984 1985 1986 1987 1988 1989 1990 1991 1992 1993 1994 1995 1996 1997 1998 1999 0 0 0 0 1 3444 263
////////////////////////////////////////////////////////////////////
//       Class : LVecBase2
// Description : This is the base class for all two-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

3444 0 0 794624 12 LVecBase2f:: 0 3443 0 0 0 0 0 0 0 0 0 2 14 num_components 26 LVecBase2f::num_components 0
2 6 is_int 18 LVecBase2f::is_int 0
0 0 0

3445 10 LVecBase2d 0 26625 10 LVecBase2d 10 LVecBase2d 0 0 0 1 2000 2008 0 60 2001 2002 2003 2004 2005 2006 2007 2009 2010 2011 2012 2013 2014 2015 2016 2017 2018 2019 2020 2021 2022 2023 2024 2025 2026 2027 2028 2029 2030 2031 2032 2033 2034 2035 2036 2037 2038 2039 2040 2041 2042 2043 2044 2045 2046 2047 2048 2049 2050 2051 2052 2053 2054 2055 2056 2057 2058 2059 2060 2061 0 0 0 0 1 3446 263
////////////////////////////////////////////////////////////////////
//       Class : LVecBase2
// Description : This is the base class for all two-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

3446 0 0 794624 12 LVecBase2d:: 0 3445 0 0 0 0 0 0 0 0 0 2 14 num_components 26 LVecBase2d::num_components 0
2 6 is_int 18 LVecBase2d::is_int 0
0 0 0

3447 10 LVecBase2i 0 26625 10 LVecBase2i 10 LVecBase2i 0 0 0 1 2062 2070 0 57 2063 2064 2065 2066 2067 2068 2069 2071 2072 2073 2074 2075 2076 2077 2078 2079 2080 2081 2082 2083 2084 2085 2086 2087 2088 2089 2090 2091 2092 2093 2094 2095 2096 2097 2098 2099 2100 2101 2102 2103 2104 2105 2106 2107 2108 2109 2110 2111 2112 2113 2114 2115 2116 2117 2118 2119 2120 0 0 0 0 1 3448 263
////////////////////////////////////////////////////////////////////
//       Class : LVecBase2
// Description : This is the base class for all two-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

3448 0 0 794624 12 LVecBase2i:: 0 3447 0 0 0 0 0 0 0 0 0 2 14 num_components 26 LVecBase2i::num_components 0
2 6 is_int 18 LVecBase2i::is_int 0
1 0 0

3449 9 LVector2f 0 141313 9 LVector2f 9 LVector2f 0 0 0 1 2121 2138 0 16 2122 2123 2124 2125 2126 2127 2128 2129 2130 2131 2132 2133 2134 2135 2136 2137 0 0 1 0 3443 0 0 0 0 219
////////////////////////////////////////////////////////////////////
//       Class : LVector2
// Description : This is a two-component vector offset.
////////////////////////////////////////////////////////////////////

3450 9 LVector2d 0 141313 9 LVector2d 9 LVector2d 0 0 0 1 2139 2156 0 16 2140 2141 2142 2143 2144 2145 2146 2147 2148 2149 2150 2151 2152 2153 2154 2155 0 0 1 0 3445 0 0 0 0 219
////////////////////////////////////////////////////////////////////
//       Class : LVector2
// Description : This is a two-component vector offset.
////////////////////////////////////////////////////////////////////

3451 9 LVector2i 0 141313 9 LVector2i 9 LVector2i 0 0 0 1 2157 2171 0 13 2158 2159 2160 2161 2162 2163 2164 2165 2166 2167 2168 2169 2170 0 0 1 0 3447 0 0 0 0 219
////////////////////////////////////////////////////////////////////
//       Class : LVector2
// Description : This is a two-component vector offset.
////////////////////////////////////////////////////////////////////

3452 8 LPoint2f 0 141313 8 LPoint2f 8 LPoint2f 0 0 0 1 2172 2187 0 14 2173 2174 2175 2176 2177 2178 2179 2180 2181 2182 2183 2184 2185 2186 0 0 1 0 3443 0 0 0 0 219
////////////////////////////////////////////////////////////////////
//       Class : LPoint2
// Description : This is a two-component point in space.
////////////////////////////////////////////////////////////////////

3453 8 LPoint2d 0 141313 8 LPoint2d 8 LPoint2d 0 0 0 1 2188 2203 0 14 2189 2190 2191 2192 2193 2194 2195 2196 2197 2198 2199 2200 2201 2202 0 0 1 0 3445 0 0 0 0 219
////////////////////////////////////////////////////////////////////
//       Class : LPoint2
// Description : This is a two-component point in space.
////////////////////////////////////////////////////////////////////

3454 8 LPoint2i 0 141313 8 LPoint2i 8 LPoint2i 0 0 0 1 2204 2218 0 13 2205 2206 2207 2208 2209 2210 2211 2212 2213 2214 2215 2216 2217 0 0 1 0 3447 0 0 0 0 219
////////////////////////////////////////////////////////////////////
//       Class : LPoint2
// Description : This is a two-component point in space.
////////////////////////////////////////////////////////////////////

3455 10 LVecBase3f 0 26625 10 LVecBase3f 10 LVecBase3f 0 0 0 1 2219 2228 0 70 2220 2221 2222 2223 2224 2225 2226 2227 2229 2230 2231 2232 2233 2234 2235 2236 2237 2238 2239 2240 2241 2242 2243 2244 2245 2246 2247 2248 2249 2250 2251 2252 2253 2254 2255 2256 2257 2258 2259 2260 2261 2262 2263 2264 2265 2266 2267 2268 2269 2270 2271 2272 2273 2274 2275 2276 2277 2278 2279 2280 2281 2282 2283 2284 2285 2286 2287 2288 2289 2290 0 0 0 0 1 3456 265
////////////////////////////////////////////////////////////////////
//       Class : LVecBase3
// Description : This is the base class for all three-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

3456 0 0 794624 12 LVecBase3f:: 0 3455 0 0 0 0 0 0 0 0 0 2 14 num_components 26 LVecBase3f::num_components 0
3 6 is_int 18 LVecBase3f::is_int 0
0 0 0

3457 10 LVecBase3d 0 26625 10 LVecBase3d 10 LVecBase3d 0 0 0 1 2291 2300 0 70 2292 2293 2294 2295 2296 2297 2298 2299 2301 2302 2303 2304 2305 2306 2307 2308 2309 2310 2311 2312 2313 2314 2315 2316 2317 2318 2319 2320 2321 2322 2323 2324 2325 2326 2327 2328 2329 2330 2331 2332 2333 2334 2335 2336 2337 2338 2339 2340 2341 2342 2343 2344 2345 2346 2347 2348 2349 2350 2351 2352 2353 2354 2355 2356 2357 2358 2359 2360 2361 2362 0 0 0 0 1 3458 265
////////////////////////////////////////////////////////////////////
//       Class : LVecBase3
// Description : This is the base class for all three-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

3458 0 0 794624 12 LVecBase3d:: 0 3457 0 0 0 0 0 0 0 0 0 2 14 num_components 26 LVecBase3d::num_components 0
3 6 is_int 18 LVecBase3d::is_int 0
0 0 0

3459 10 LVecBase3i 0 26625 10 LVecBase3i 10 LVecBase3i 0 0 0 1 2363 2372 0 67 2364 2365 2366 2367 2368 2369 2370 2371 2373 2374 2375 2376 2377 2378 2379 2380 2381 2382 2383 2384 2385 2386 2387 2388 2389 2390 2391 2392 2393 2394 2395 2396 2397 2398 2399 2400 2401 2402 2403 2404 2405 2406 2407 2408 2409 2410 2411 2412 2413 2414 2415 2416 2417 2418 2419 2420 2421 2422 2423 2424 2425 2426 2427 2428 2429 2430 2431 0 0 0 0 1 3460 265
////////////////////////////////////////////////////////////////////
//       Class : LVecBase3
// Description : This is the base class for all three-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

3460 0 0 794624 12 LVecBase3i:: 0 3459 0 0 0 0 0 0 0 0 0 2 14 num_components 26 LVecBase3i::num_components 0
3 6 is_int 18 LVecBase3i::is_int 0
1 0 0

3461 16 CoordinateSystem 0 532481 16 CoordinateSystem 16 CoordinateSystem 0 0 0 0 0 0 0 0 0 0 6 10 CS_default 10 CS_default 213
// The CS_default entry does not refer to a particular coordinate
// system, but rather to the value stored in
// default_coordinate_system, which in turn is loaded from the
// config variable "coordinate-system".
0 12 CS_zup_right 12 CS_zup_right 0
1 12 CS_yup_right 12 CS_yup_right 0
2 11 CS_zup_left 11 CS_zup_left 0
3 11 CS_yup_left 11 CS_yup_left 0
4 10 CS_invalid 10 CS_invalid 155
// CS_invalid is not a coordinate system at all.  It can be used in
// user-input processing code to indicate a contradictory coordinate
// system request.
5 0 0

3462 9 LVector3f 0 141313 9 LVector3f 9 LVector3f 0 0 0 1 2436 2469 0 32 2437 2438 2439 2440 2441 2442 2443 2444 2445 2446 2447 2448 2449 2450 2451 2452 2453 2454 2455 2456 2457 2458 2459 2460 2461 2462 2463 2464 2465 2466 2467 2468 0 0 1 0 3455 0 0 0 0 598
////////////////////////////////////////////////////////////////////
//       Class : LVector3
// Description : This is a three-component vector distance (as opposed
//               to a three-component point, which represents a
//               particular point in space).  Some of the methods are
//               slightly different between LPoint3 and LVector3; in
//               particular, subtraction of two points yields a
//               vector, while addition of a vector and a point yields
//               a point.
////////////////////////////////////////////////////////////////////

3463 9 LVector3d 0 141313 9 LVector3d 9 LVector3d 0 0 0 1 2470 2503 0 32 2471 2472 2473 2474 2475 2476 2477 2478 2479 2480 2481 2482 2483 2484 2485 2486 2487 2488 2489 2490 2491 2492 2493 2494 2495 2496 2497 2498 2499 2500 2501 2502 0 0 1 0 3457 0 0 0 0 598
////////////////////////////////////////////////////////////////////
//       Class : LVector3
// Description : This is a three-component vector distance (as opposed
//               to a three-component point, which represents a
//               particular point in space).  Some of the methods are
//               slightly different between LPoint3 and LVector3; in
//               particular, subtraction of two points yields a
//               vector, while addition of a vector and a point yields
//               a point.
////////////////////////////////////////////////////////////////////

3464 9 LVector3i 0 141313 9 LVector3i 9 LVector3i 0 0 0 1 2504 2530 0 25 2505 2506 2507 2508 2509 2510 2511 2512 2513 2514 2515 2516 2517 2518 2519 2520 2521 2522 2523 2524 2525 2526 2527 2528 2529 0 0 1 0 3459 0 0 0 0 598
////////////////////////////////////////////////////////////////////
//       Class : LVector3
// Description : This is a three-component vector distance (as opposed
//               to a three-component point, which represents a
//               particular point in space).  Some of the methods are
//               slightly different between LPoint3 and LVector3; in
//               particular, subtraction of two points yields a
//               vector, while addition of a vector and a point yields
//               a point.
////////////////////////////////////////////////////////////////////

3465 8 LPoint3f 0 141313 8 LPoint3f 8 LPoint3f 0 0 0 1 2531 2553 0 21 2532 2533 2534 2535 2536 2537 2538 2539 2540 2541 2542 2543 2544 2545 2546 2547 2548 2549 2550 2551 2552 0 0 1 0 3455 0 0 0 0 596
////////////////////////////////////////////////////////////////////
//       Class : LPoint3
// Description : This is a three-component point in space (as opposed
//               to a three-component vector, which represents a
//               direction and a distance).  Some of the methods are
//               slightly different between LPoint3 and LVector3; in
//               particular, subtraction of two points yields a
//               vector, while addition of a vector and a point yields
//               a point.
////////////////////////////////////////////////////////////////////

3466 8 LPoint3d 0 141313 8 LPoint3d 8 LPoint3d 0 0 0 1 2554 2576 0 21 2555 2556 2557 2558 2559 2560 2561 2562 2563 2564 2565 2566 2567 2568 2569 2570 2571 2572 2573 2574 2575 0 0 1 0 3457 0 0 0 0 596
////////////////////////////////////////////////////////////////////
//       Class : LPoint3
// Description : This is a three-component point in space (as opposed
//               to a three-component vector, which represents a
//               direction and a distance).  Some of the methods are
//               slightly different between LPoint3 and LVector3; in
//               particular, subtraction of two points yields a
//               vector, while addition of a vector and a point yields
//               a point.
////////////////////////////////////////////////////////////////////

3467 8 LPoint3i 0 141313 8 LPoint3i 8 LPoint3i 0 0 0 1 2577 2598 0 20 2578 2579 2580 2581 2582 2583 2584 2585 2586 2587 2588 2589 2590 2591 2592 2593 2594 2595 2596 2597 0 0 1 0 3459 0 0 0 0 596
////////////////////////////////////////////////////////////////////
//       Class : LPoint3
// Description : This is a three-component point in space (as opposed
//               to a three-component vector, which represents a
//               direction and a distance).  Some of the methods are
//               slightly different between LPoint3 and LVector3; in
//               particular, subtraction of two points yields a
//               vector, while addition of a vector and a point yields
//               a point.
////////////////////////////////////////////////////////////////////

3468 10 LVecBase4f 0 26625 10 LVecBase4f 10 LVecBase4f 0 0 0 1 2599 2609 0 69 2600 2601 2602 2603 2604 2605 2606 2607 2608 2610 2611 2612 2613 2614 2615 2616 2617 2618 2619 2620 2621 2622 2623 2624 2625 2626 2627 2628 2629 2630 2631 2632 2633 2634 2635 2636 2637 2638 2639 2640 2641 2642 2643 2644 2645 2646 2647 2648 2649 2650 2651 2652 2653 2654 2655 2656 2657 2658 2659 2660 2661 2662 2663 2664 2665 2666 2667 2668 2669 0 0 0 0 1 3469 265
////////////////////////////////////////////////////////////////////
//       Class : LVecBase4
// Description : This is the base class for all three-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

3469 0 0 794624 12 LVecBase4f:: 0 3468 0 0 0 0 0 0 0 0 0 2 14 num_components 26 LVecBase4f::num_components 0
4 6 is_int 18 LVecBase4f::is_int 0
0 0 0

3470 19 UnalignedLVecBase4f 0 141313 19 UnalignedLVecBase4f 19 UnalignedLVecBase4f 0 0 0 1 2670 2678 0 7 2671 2672 2673 2674 2675 2676 2677 0 0 0 0 1 3471 675
////////////////////////////////////////////////////////////////////
//       Class : UnalignedLVecBase4
// Description : This is an "unaligned" LVecBase4.  It has no
//               functionality other than to store numbers, and it
//               will pack them in as tightly as possible, avoiding
//               any SSE2 alignment requirements shared by the primary
//               LVecBase4 class.
//
//               Use it only when you need to pack numbers tightly
//               without respect to alignment, and then copy it to a
//               proper LVecBase4 to get actual use from it.
////////////////////////////////////////////////////////////////////

3471 0 0 794624 21 UnalignedLVecBase4f:: 0 3470 0 0 0 0 0 0 0 0 0 2 14 num_components 35 UnalignedLVecBase4f::num_components 0
4 6 is_int 27 UnalignedLVecBase4f::is_int 0
0 0 0

3472 10 LVecBase4d 0 26625 10 LVecBase4d 10 LVecBase4d 0 0 0 1 2679 2689 0 69 2680 2681 2682 2683 2684 2685 2686 2687 2688 2690 2691 2692 2693 2694 2695 2696 2697 2698 2699 2700 2701 2702 2703 2704 2705 2706 2707 2708 2709 2710 2711 2712 2713 2714 2715 2716 2717 2718 2719 2720 2721 2722 2723 2724 2725 2726 2727 2728 2729 2730 2731 2732 2733 2734 2735 2736 2737 2738 2739 2740 2741 2742 2743 2744 2745 2746 2747 2748 2749 0 0 0 0 1 3473 265
////////////////////////////////////////////////////////////////////
//       Class : LVecBase4
// Description : This is the base class for all three-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

3473 0 0 794624 12 LVecBase4d:: 0 3472 0 0 0 0 0 0 0 0 0 2 14 num_components 26 LVecBase4d::num_components 0
4 6 is_int 18 LVecBase4d::is_int 0
0 0 0

3474 19 UnalignedLVecBase4d 0 141313 19 UnalignedLVecBase4d 19 UnalignedLVecBase4d 0 0 0 1 2750 2758 0 7 2751 2752 2753 2754 2755 2756 2757 0 0 0 0 1 3475 675
////////////////////////////////////////////////////////////////////
//       Class : UnalignedLVecBase4
// Description : This is an "unaligned" LVecBase4.  It has no
//               functionality other than to store numbers, and it
//               will pack them in as tightly as possible, avoiding
//               any SSE2 alignment requirements shared by the primary
//               LVecBase4 class.
//
//               Use it only when you need to pack numbers tightly
//               without respect to alignment, and then copy it to a
//               proper LVecBase4 to get actual use from it.
////////////////////////////////////////////////////////////////////

3475 0 0 794624 21 UnalignedLVecBase4d:: 0 3474 0 0 0 0 0 0 0 0 0 2 14 num_components 35 UnalignedLVecBase4d::num_components 0
4 6 is_int 27 UnalignedLVecBase4d::is_int 0
0 0 0

3476 10 LVecBase4i 0 26625 10 LVecBase4i 10 LVecBase4i 0 0 0 1 2759 2769 0 66 2760 2761 2762 2763 2764 2765 2766 2767 2768 2770 2771 2772 2773 2774 2775 2776 2777 2778 2779 2780 2781 2782 2783 2784 2785 2786 2787 2788 2789 2790 2791 2792 2793 2794 2795 2796 2797 2798 2799 2800 2801 2802 2803 2804 2805 2806 2807 2808 2809 2810 2811 2812 2813 2814 2815 2816 2817 2818 2819 2820 2821 2822 2823 2824 2825 2826 0 0 0 0 1 3477 265
////////////////////////////////////////////////////////////////////
//       Class : LVecBase4
// Description : This is the base class for all three-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

3477 0 0 794624 12 LVecBase4i:: 0 3476 0 0 0 0 0 0 0 0 0 2 14 num_components 26 LVecBase4i::num_components 0
4 6 is_int 18 LVecBase4i::is_int 0
1 0 0

3478 19 UnalignedLVecBase4i 0 141313 19 UnalignedLVecBase4i 19 UnalignedLVecBase4i 0 0 0 1 2827 2835 0 7 2828 2829 2830 2831 2832 2833 2834 0 0 0 0 1 3479 675
////////////////////////////////////////////////////////////////////
//       Class : UnalignedLVecBase4
// Description : This is an "unaligned" LVecBase4.  It has no
//               functionality other than to store numbers, and it
//               will pack them in as tightly as possible, avoiding
//               any SSE2 alignment requirements shared by the primary
//               LVecBase4 class.
//
//               Use it only when you need to pack numbers tightly
//               without respect to alignment, and then copy it to a
//               proper LVecBase4 to get actual use from it.
////////////////////////////////////////////////////////////////////

3479 0 0 794624 21 UnalignedLVecBase4i:: 0 3478 0 0 0 0 0 0 0 0 0 2 14 num_components 35 UnalignedLVecBase4i::num_components 0
4 6 is_int 27 UnalignedLVecBase4i::is_int 0
1 0 0

3480 9 LVector4f 0 141313 9 LVector4f 9 LVector4f 0 0 0 1 2836 2853 0 16 2837 2838 2839 2840 2841 2842 2843 2844 2845 2846 2847 2848 2849 2850 2851 2852 0 0 1 0 3468 0 0 0 0 222
////////////////////////////////////////////////////////////////////
//       Class : LVector4
// Description : This is a four-component vector distance.
////////////////////////////////////////////////////////////////////

3481 9 LVector4d 0 141313 9 LVector4d 9 LVector4d 0 0 0 1 2854 2871 0 16 2855 2856 2857 2858 2859 2860 2861 2862 2863 2864 2865 2866 2867 2868 2869 2870 0 0 1 0 3472 0 0 0 0 222
////////////////////////////////////////////////////////////////////
//       Class : LVector4
// Description : This is a four-component vector distance.
////////////////////////////////////////////////////////////////////

3482 9 LVector4i 0 141313 9 LVector4i 9 LVector4i 0 0 0 1 2872 2888 0 15 2873 2874 2875 2876 2877 2878 2879 2880 2881 2882 2883 2884 2885 2886 2887 0 0 1 0 3476 0 0 0 0 222
////////////////////////////////////////////////////////////////////
//       Class : LVector4
// Description : This is a four-component vector distance.
////////////////////////////////////////////////////////////////////

3483 8 LPoint4f 0 141313 8 LPoint4f 8 LPoint4f 0 0 0 1 2889 2906 0 16 2890 2891 2892 2893 2894 2895 2896 2897 2898 2899 2900 2901 2902 2903 2904 2905 0 0 1 0 3468 0 0 0 0 220
////////////////////////////////////////////////////////////////////
//       Class : LPoint4
// Description : This is a four-component point in space.
////////////////////////////////////////////////////////////////////

3484 8 LPoint4d 0 141313 8 LPoint4d 8 LPoint4d 0 0 0 1 2907 2924 0 16 2908 2909 2910 2911 2912 2913 2914 2915 2916 2917 2918 2919 2920 2921 2922 2923 0 0 1 0 3472 0 0 0 0 220
////////////////////////////////////////////////////////////////////
//       Class : LPoint4
// Description : This is a four-component point in space.
////////////////////////////////////////////////////////////////////

3485 8 LPoint4i 0 141313 8 LPoint4i 8 LPoint4i 0 0 0 1 2925 2941 0 15 2926 2927 2928 2929 2930 2931 2932 2933 2934 2935 2936 2937 2938 2939 2940 0 0 1 0 3476 0 0 0 0 220
////////////////////////////////////////////////////////////////////
//       Class : LPoint4
// Description : This is a four-component point in space.
////////////////////////////////////////////////////////////////////

3486 9 LMatrix3f 0 141313 9 LMatrix3f 9 LMatrix3f 0 0 0 1 2948 3023 0 74 2949 2950 2951 2952 2953 2954 2955 2956 2957 2958 2959 2960 2961 2962 2963 2964 2965 2966 2967 2968 2969 2970 2971 2972 2973 2974 2975 2976 2977 2978 2979 2980 2981 2982 2983 2984 2985 2986 2987 2988 2989 2990 2991 2992 2993 2994 2995 2996 2997 2998 2999 3000 3001 3002 3003 3004 3005 3006 3007 3008 3009 3010 3011 3012 3013 3014 3015 3016 3017 3018 3019 3020 3021 3022 4 3768 3769 3770 3771 0 0 0 3 3487 3488 3489 462
////////////////////////////////////////////////////////////////////
//       Class : LMatrix3
// Description : This is a 3-by-3 transform matrix.  It typically will
//               represent either a rotation-and-scale (no
//               translation) matrix in 3-d, or a full affine matrix
//               (rotation, scale, translation) in 2-d, e.g. for a
//               texture matrix.
////////////////////////////////////////////////////////////////////

3487 0 0 794624 11 LMatrix3f:: 0 3486 0 0 0 0 0 0 0 0 0 2 14 num_components 25 LMatrix3f::num_components 0
9 6 is_int 17 LMatrix3f::is_int 0
0 0 0

3488 3 Row 0 403457 14 LMatrix3f::Row 14 LMatrix3f::Row 3486 0 0 0 2944 0 2 2942 2943 0 0 0 0 0 66
// These helper classes are used to support two-level operator [].

3489 4 CRow 0 403457 15 LMatrix3f::CRow 15 LMatrix3f::CRow 3486 0 0 0 2947 0 2 2945 2946 0 0 0 0 0 0

3490 9 LMatrix4f 0 141313 9 LMatrix4f 9 LMatrix4f 0 0 0 1 3032 3117 0 84 3033 3034 3035 3036 3037 3038 3039 3040 3041 3042 3043 3044 3045 3046 3047 3048 3049 3050 3051 3052 3053 3054 3055 3056 3057 3058 3059 3060 3061 3062 3063 3064 3065 3066 3067 3068 3069 3070 3071 3072 3073 3074 3075 3076 3077 3078 3079 3080 3081 3082 3083 3084 3085 3086 3087 3088 3089 3090 3091 3092 3093 3094 3095 3096 3097 3098 3099 3100 3101 3102 3103 3104 3105 3106 3107 3108 3109 3110 3111 3112 3113 3114 3115 3116 3 3772 3773 3774 0 0 0 3 3491 3492 3493 215
////////////////////////////////////////////////////////////////////
//       Class : LMatrix4
// Description : This is a 4-by-4 transform matrix.
////////////////////////////////////////////////////////////////////

3491 0 0 794624 11 LMatrix4f:: 0 3490 0 0 0 0 0 0 0 0 0 2 14 num_components 25 LMatrix4f::num_components 0
16 6 is_int 17 LMatrix4f::is_int 0
0 0 0

3492 3 Row 0 403457 14 LMatrix4f::Row 14 LMatrix4f::Row 3490 0 0 0 3028 0 2 3026 3027 0 0 0 0 0 66
// These helper classes are used to support two-level operator [].

3493 4 CRow 0 403457 15 LMatrix4f::CRow 15 LMatrix4f::CRow 3490 0 0 0 3031 0 2 3029 3030 0 0 0 0 0 0

3494 18 UnalignedLMatrix4f 0 141313 18 UnalignedLMatrix4f 18 UnalignedLMatrix4f 0 0 0 1 3118 3125 0 6 3119 3120 3121 3122 3123 3124 0 0 0 0 1 3495 671
////////////////////////////////////////////////////////////////////
//       Class : UnalignedLMatrix4
// Description : This is an "unaligned" LMatrix4.  It has no
//               functionality other than to store numbers, and it
//               will pack them in as tightly as possible, avoiding
//               any SSE2 alignment requirements shared by the primary
//               LMatrix4 class.
//
//               Use it only when you need to pack numbers tightly
//               without respect to alignment, and then copy it to a
//               proper LMatrix4 to get actual use from it.
////////////////////////////////////////////////////////////////////

3495 0 0 794624 20 UnalignedLMatrix4f:: 0 3494 0 0 0 0 0 0 0 0 0 1 14 num_components 34 UnalignedLMatrix4f::num_components 0
16 0 0

3496 9 LMatrix3d 0 141313 9 LMatrix3d 9 LMatrix3d 0 0 0 1 3132 3207 0 74 3133 3134 3135 3136 3137 3138 3139 3140 3141 3142 3143 3144 3145 3146 3147 3148 3149 3150 3151 3152 3153 3154 3155 3156 3157 3158 3159 3160 3161 3162 3163 3164 3165 3166 3167 3168 3169 3170 3171 3172 3173 3174 3175 3176 3177 3178 3179 3180 3181 3182 3183 3184 3185 3186 3187 3188 3189 3190 3191 3192 3193 3194 3195 3196 3197 3198 3199 3200 3201 3202 3203 3204 3205 3206 4 3775 3776 3777 3778 0 0 0 3 3497 3498 3499 462
////////////////////////////////////////////////////////////////////
//       Class : LMatrix3
// Description : This is a 3-by-3 transform matrix.  It typically will
//               represent either a rotation-and-scale (no
//               translation) matrix in 3-d, or a full affine matrix
//               (rotation, scale, translation) in 2-d, e.g. for a
//               texture matrix.
////////////////////////////////////////////////////////////////////

3497 0 0 794624 11 LMatrix3d:: 0 3496 0 0 0 0 0 0 0 0 0 2 14 num_components 25 LMatrix3d::num_components 0
9 6 is_int 17 LMatrix3d::is_int 0
0 0 0

3498 3 Row 0 403457 14 LMatrix3d::Row 14 LMatrix3d::Row 3496 0 0 0 3128 0 2 3126 3127 0 0 0 0 0 66
// These helper classes are used to support two-level operator [].

3499 4 CRow 0 403457 15 LMatrix3d::CRow 15 LMatrix3d::CRow 3496 0 0 0 3131 0 2 3129 3130 0 0 0 0 0 0

3500 9 LMatrix4d 0 141313 9 LMatrix4d 9 LMatrix4d 0 0 0 1 3214 3299 0 84 3215 3216 3217 3218 3219 3220 3221 3222 3223 3224 3225 3226 3227 3228 3229 3230 3231 3232 3233 3234 3235 3236 3237 3238 3239 3240 3241 3242 3243 3244 3245 3246 3247 3248 3249 3250 3251 3252 3253 3254 3255 3256 3257 3258 3259 3260 3261 3262 3263 3264 3265 3266 3267 3268 3269 3270 3271 3272 3273 3274 3275 3276 3277 3278 3279 3280 3281 3282 3283 3284 3285 3286 3287 3288 3289 3290 3291 3292 3293 3294 3295 3296 3297 3298 3 3779 3780 3781 0 0 0 3 3501 3502 3503 215
////////////////////////////////////////////////////////////////////
//       Class : LMatrix4
// Description : This is a 4-by-4 transform matrix.
////////////////////////////////////////////////////////////////////

3501 0 0 794624 11 LMatrix4d:: 0 3500 0 0 0 0 0 0 0 0 0 2 14 num_components 25 LMatrix4d::num_components 0
16 6 is_int 17 LMatrix4d::is_int 0
0 0 0

3502 3 Row 0 403457 14 LMatrix4d::Row 14 LMatrix4d::Row 3500 0 0 0 3210 0 2 3208 3209 0 0 0 0 0 66
// These helper classes are used to support two-level operator [].

3503 4 CRow 0 403457 15 LMatrix4d::CRow 15 LMatrix4d::CRow 3500 0 0 0 3213 0 2 3211 3212 0 0 0 0 0 0

3504 18 UnalignedLMatrix4d 0 141313 18 UnalignedLMatrix4d 18 UnalignedLMatrix4d 0 0 0 1 3300 3307 0 6 3301 3302 3303 3304 3305 3306 0 0 0 0 1 3505 671
////////////////////////////////////////////////////////////////////
//       Class : UnalignedLMatrix4
// Description : This is an "unaligned" LMatrix4.  It has no
//               functionality other than to store numbers, and it
//               will pack them in as tightly as possible, avoiding
//               any SSE2 alignment requirements shared by the primary
//               LMatrix4 class.
//
//               Use it only when you need to pack numbers tightly
//               without respect to alignment, and then copy it to a
//               proper LMatrix4 to get actual use from it.
////////////////////////////////////////////////////////////////////

3505 0 0 794624 20 UnalignedLMatrix4d:: 0 3504 0 0 0 0 0 0 0 0 0 1 14 num_components 34 UnalignedLMatrix4d::num_components 0
16 0 0

3506 12 LQuaternionf 0 141313 12 LQuaternionf 12 LQuaternionf 0 0 0 1 3320 3367 0 46 3321 3322 3323 3324 3325 3326 3327 3328 3329 3330 3331 3332 3333 3334 3335 3336 3337 3338 3339 3340 3341 3342 3343 3344 3345 3346 3347 3348 3349 3350 3351 3352 3353 3354 3355 3356 3357 3358 3359 3360 3361 3362 3363 3364 3365 3366 0 0 1 0 3468 0 0 0 0 228
////////////////////////////////////////////////////////////////////
//       Class : FLOATNAME(LQuaternion)
// Description : This is the base quaternion class
////////////////////////////////////////////////////////////////////

3507 12 LQuaterniond 0 141313 12 LQuaterniond 12 LQuaterniond 0 0 0 1 3368 3415 0 46 3369 3370 3371 3372 3373 3374 3375 3376 3377 3378 3379 3380 3381 3382 3383 3384 3385 3386 3387 3388 3389 3390 3391 3392 3393 3394 3395 3396 3397 3398 3399 3400 3401 3402 3403 3404 3405 3406 3407 3408 3409 3410 3411 3412 3413 3414 0 0 1 0 3472 0 0 0 0 228
////////////////////////////////////////////////////////////////////
//       Class : FLOATNAME(LQuaternion)
// Description : This is the base quaternion class
////////////////////////////////////////////////////////////////////

3508 10 LRotationf 0 141313 10 LRotationf 10 LRotationf 0 0 0 1 3416 3420 0 3 3417 3418 3419 0 0 1 0 3506 0 0 0 0 240
////////////////////////////////////////////////////////////////////////
//       Class : LRotation
// Description : This is a unit quaternion representing a rotation.
////////////////////////////////////////////////////////////////////////

3509 10 LRotationd 0 141313 10 LRotationd 10 LRotationd 0 0 0 1 3421 3425 0 3 3422 3423 3424 0 0 1 0 3507 0 0 0 0 240
////////////////////////////////////////////////////////////////////////
//       Class : LRotation
// Description : This is a unit quaternion representing a rotation.
////////////////////////////////////////////////////////////////////////

3510 13 LOrientationf 0 141313 13 LOrientationf 13 LOrientationf 0 0 0 1 3426 3429 0 2 3427 3428 0 0 1 0 3506 0 0 0 0 247
////////////////////////////////////////////////////////////////////////
//       Class : LOrientation
// Description : This is a unit quaternion representing an orientation.
////////////////////////////////////////////////////////////////////////

3511 13 LOrientationd 0 141313 13 LOrientationd 13 LOrientationd 0 0 0 1 3430 3433 0 2 3431 3432 0 0 1 0 3507 0 0 0 0 247
////////////////////////////////////////////////////////////////////////
//       Class : LOrientation
// Description : This is a unit quaternion representing an orientation.
////////////////////////////////////////////////////////////////////////

3512 8 LVertexf 0 2105345 8 LVertexf 8 LVertexf 0 0 3465 0 0 0 0 0 0 0 0 0 0

3513 8 LNormalf 0 2105345 8 LNormalf 8 LNormalf 0 0 3462 0 0 0 0 0 0 0 0 0 0

3514 10 LTexCoordf 0 2105345 10 LTexCoordf 10 LTexCoordf 0 0 3452 0 0 0 0 0 0 0 0 0 0

3515 11 LTexCoord3f 0 2105345 11 LTexCoord3f 11 LTexCoord3f 0 0 3465 0 0 0 0 0 0 0 0 0 0

3516 7 LColorf 0 2105345 7 LColorf 7 LColorf 0 0 3468 0 0 0 0 0 0 0 0 0 0

3517 10 LRGBColorf 0 2105345 10 LRGBColorf 10 LRGBColorf 0 0 3455 0 0 0 0 0 0 0 0 0 0

3518 8 LVertexd 0 2105345 8 LVertexd 8 LVertexd 0 0 3466 0 0 0 0 0 0 0 0 0 0

3519 8 LNormald 0 2105345 8 LNormald 8 LNormald 0 0 3463 0 0 0 0 0 0 0 0 0 0

3520 10 LTexCoordd 0 2105345 10 LTexCoordd 10 LTexCoordd 0 0 3453 0 0 0 0 0 0 0 0 0 0

3521 11 LTexCoord3d 0 2105345 11 LTexCoord3d 11 LTexCoord3d 0 0 3466 0 0 0 0 0 0 0 0 0 0

3522 7 LColord 0 2105345 7 LColord 7 LColord 0 0 3472 0 0 0 0 0 0 0 0 0 0

3523 10 LRGBColord 0 2105345 10 LRGBColord 10 LRGBColord 0 0 3457 0 0 0 0 0 0 0 0 0 0

3524 5 Mat4F 0 2105345 5 Mat4F 5 Mat4F 0 0 3490 0 0 0 0 0 0 0 0 0 0

3525 5 Mat3F 0 2105345 5 Mat3F 5 Mat3F 0 0 3486 0 0 0 0 0 0 0 0 0 0

3526 7 VBase4F 0 2105345 7 VBase4F 7 VBase4F 0 0 3468 0 0 0 0 0 0 0 0 0 0

3527 5 Vec4F 0 2105345 5 Vec4F 5 Vec4F 0 0 3480 0 0 0 0 0 0 0 0 0 0

3528 7 Point4F 0 2105345 7 Point4F 7 Point4F 0 0 3483 0 0 0 0 0 0 0 0 0 0

3529 7 VBase3F 0 2105345 7 VBase3F 7 VBase3F 0 0 3455 0 0 0 0 0 0 0 0 0 0

3530 5 Vec3F 0 2105345 5 Vec3F 5 Vec3F 0 0 3462 0 0 0 0 0 0 0 0 0 0

3531 7 Point3F 0 2105345 7 Point3F 7 Point3F 0 0 3465 0 0 0 0 0 0 0 0 0 0

3532 7 VBase2F 0 2105345 7 VBase2F 7 VBase2F 0 0 3443 0 0 0 0 0 0 0 0 0 0

3533 5 Vec2F 0 2105345 5 Vec2F 5 Vec2F 0 0 3449 0 0 0 0 0 0 0 0 0 0

3534 7 Point2F 0 2105345 7 Point2F 7 Point2F 0 0 3452 0 0 0 0 0 0 0 0 0 0

3535 5 QuatF 0 2105345 5 QuatF 5 QuatF 0 0 3506 0 0 0 0 0 0 0 0 0 0

3536 5 Mat4D 0 2105345 5 Mat4D 5 Mat4D 0 0 3500 0 0 0 0 0 0 0 0 0 0

3537 5 Mat3D 0 2105345 5 Mat3D 5 Mat3D 0 0 3496 0 0 0 0 0 0 0 0 0 0

3538 7 VBase4D 0 2105345 7 VBase4D 7 VBase4D 0 0 3472 0 0 0 0 0 0 0 0 0 0

3539 5 Vec4D 0 2105345 5 Vec4D 5 Vec4D 0 0 3481 0 0 0 0 0 0 0 0 0 0

3540 7 Point4D 0 2105345 7 Point4D 7 Point4D 0 0 3484 0 0 0 0 0 0 0 0 0 0

3541 7 VBase3D 0 2105345 7 VBase3D 7 VBase3D 0 0 3457 0 0 0 0 0 0 0 0 0 0

3542 5 Vec3D 0 2105345 5 Vec3D 5 Vec3D 0 0 3463 0 0 0 0 0 0 0 0 0 0

3543 7 Point3D 0 2105345 7 Point3D 7 Point3D 0 0 3466 0 0 0 0 0 0 0 0 0 0

3544 7 VBase2D 0 2105345 7 VBase2D 7 VBase2D 0 0 3445 0 0 0 0 0 0 0 0 0 0

3545 5 Vec2D 0 2105345 5 Vec2D 5 Vec2D 0 0 3450 0 0 0 0 0 0 0 0 0 0

3546 7 Point2D 0 2105345 7 Point2D 7 Point2D 0 0 3453 0 0 0 0 0 0 0 0 0 0

3547 5 QuatD 0 2105345 5 QuatD 5 QuatD 0 0 3507 0 0 0 0 0 0 0 0 0 0

3548 9 LVecBase2 0 2105345 9 LVecBase2 9 LVecBase2 0 0 3443 0 0 0 0 0 0 0 0 0 0

3549 7 LPoint2 0 2105345 7 LPoint2 7 LPoint2 0 0 3452 0 0 0 0 0 0 0 0 0 0

3550 8 LVector2 0 2105345 8 LVector2 8 LVector2 0 0 3449 0 0 0 0 0 0 0 0 0 0

3551 9 LVecBase3 0 2105345 9 LVecBase3 9 LVecBase3 0 0 3455 0 0 0 0 0 0 0 0 0 0

3552 7 LPoint3 0 2105345 7 LPoint3 7 LPoint3 0 0 3465 0 0 0 0 0 0 0 0 0 0

3553 8 LVector3 0 2105345 8 LVector3 8 LVector3 0 0 3462 0 0 0 0 0 0 0 0 0 0

3554 9 LVecBase4 0 2105345 9 LVecBase4 9 LVecBase4 0 0 3468 0 0 0 0 0 0 0 0 0 0

3555 7 LPoint4 0 2105345 7 LPoint4 7 LPoint4 0 0 3483 0 0 0 0 0 0 0 0 0 0

3556 8 LVector4 0 2105345 8 LVector4 8 LVector4 0 0 3480 0 0 0 0 0 0 0 0 0 0

3557 11 LQuaternion 0 2105345 11 LQuaternion 11 LQuaternion 0 0 3506 0 0 0 0 0 0 0 0 0 0

3558 9 LRotation 0 2105345 9 LRotation 9 LRotation 0 0 3508 0 0 0 0 0 0 0 0 0 0

3559 12 LOrientation 0 2105345 12 LOrientation 12 LOrientation 0 0 3510 0 0 0 0 0 0 0 0 0 0

3560 8 LMatrix3 0 2105345 8 LMatrix3 8 LMatrix3 0 0 3486 0 0 0 0 0 0 0 0 0 0

3561 8 LMatrix4 0 2105345 8 LMatrix4 8 LMatrix4 0 0 3490 0 0 0 0 0 0 0 0 0 0

3562 7 LVertex 0 2105345 7 LVertex 7 LVertex 0 0 3512 0 0 0 0 0 0 0 0 0 0

3563 7 LNormal 0 2105345 7 LNormal 7 LNormal 0 0 3513 0 0 0 0 0 0 0 0 0 0

3564 9 LTexCoord 0 2105345 9 LTexCoord 9 LTexCoord 0 0 3514 0 0 0 0 0 0 0 0 0 0

3565 10 LTexCoord3 0 2105345 10 LTexCoord3 10 LTexCoord3 0 0 3515 0 0 0 0 0 0 0 0 0 0

3566 6 LColor 0 2105345 6 LColor 6 LColor 0 0 3516 0 0 0 0 0 0 0 0 0 0

3567 9 LRGBColor 0 2105345 9 LRGBColor 9 LRGBColor 0 0 3517 0 0 0 0 0 0 0 0 0 0

3568 18 UnalignedLVecBase4 0 2105345 18 UnalignedLVecBase4 18 UnalignedLVecBase4 0 0 3470 0 0 0 0 0 0 0 0 0 0

3569 17 UnalignedLMatrix4 0 2105345 17 UnalignedLMatrix4 17 UnalignedLMatrix4 0 0 3494 0 0 0 0 0 0 0 0 0 0

3570 4 Mat4 0 2105345 4 Mat4 4 Mat4 0 0 3490 0 0 0 0 0 0 0 0 0 0

3571 4 Mat3 0 2105345 4 Mat3 4 Mat3 0 0 3486 0 0 0 0 0 0 0 0 0 0

3572 6 VBase4 0 2105345 6 VBase4 6 VBase4 0 0 3468 0 0 0 0 0 0 0 0 0 0

3573 4 Vec4 0 2105345 4 Vec4 4 Vec4 0 0 3480 0 0 0 0 0 0 0 0 0 0

3574 6 Point4 0 2105345 6 Point4 6 Point4 0 0 3483 0 0 0 0 0 0 0 0 0 0

3575 6 VBase3 0 2105345 6 VBase3 6 VBase3 0 0 3455 0 0 0 0 0 0 0 0 0 0

3576 4 Vec3 0 2105345 4 Vec3 4 Vec3 0 0 3462 0 0 0 0 0 0 0 0 0 0

3577 6 Point3 0 2105345 6 Point3 6 Point3 0 0 3465 0 0 0 0 0 0 0 0 0 0

3578 6 VBase2 0 2105345 6 VBase2 6 VBase2 0 0 3443 0 0 0 0 0 0 0 0 0 0

3579 4 Vec2 0 2105345 4 Vec2 4 Vec2 0 0 3449 0 0 0 0 0 0 0 0 0 0

3580 6 Point2 0 2105345 6 Point2 6 Point2 0 0 3452 0 0 0 0 0 0 0 0 0 0

3581 4 Quat 0 2105345 4 Quat 4 Quat 0 0 3506 0 0 0 0 0 0 0 0 0 0

3582 19 ConfigVariableColor 0 141313 19 ConfigVariableColor 19 ConfigVariableColor 0 0 0 1 3434 3441 0 5 3435 3437 3438 3439 3440 0 1 3436 1 0 3583 0 0 0 0 868
////////////////////////////////////////////////////////////////////
//       Class : ConfigVariableColor
// Description : This is a convenience class to specialize
//               ConfigVariable as a set of floating-point types
//               representing a color value.
//
//               It interprets the color differently depending on
//               how many words were specified: if only one, it
//               is interpreted as a shade of gray with alpha 1.
//               If two values were specified, a grayscale and
//               alpha pair.  If three, a set of R, G, B values
//               with alpha 1, and if four, a complete RGBA color.
//
//               This isn't defined in dtool because it relies on
//               the LColor class, which is defined in linmath.
////////////////////////////////////////////////////////////////////

3583 14 ConfigVariable 0 2049 14 ConfigVariable 14 ConfigVariable 0 0 0 0 0 0 0 0 0 0 0 0 709
////////////////////////////////////////////////////////////////////
//       Class : ConfigVariable
// Description : This is a generic, untyped ConfigVariable.  It is
//               also the base class for the typed ConfigVariables,
//               and contains all of the code common to
//               ConfigVariables of all types (except
//               ConfigVariableList, which is a bit of a special
//               case).
//
//               Mostly, this class serves as a thin wrapper around
//               ConfigVariableCore and/or ConfigDeclaration, more or
//               less duplicating the interface presented there.
////////////////////////////////////////////////////////////////////

3584 12 LVecBase2f * 0 8576 12 LVecBase2f * 12 LVecBase2f * 0 0 3443 0 0 0 0 0 0 0 0 0 0

3585 18 LVecBase2f const * 0 8576 18 LVecBase2f const * 18 LVecBase2f const * 0 0 3586 0 0 0 0 0 0 0 0 0 0

3586 16 LVecBase2f const 0 8832 16 LVecBase2f const 16 LVecBase2f const 0 0 3443 0 0 0 0 0 0 0 0 0 0

3587 5 float 0 8194 5 float 5 float 0 2 0 0 0 0 0 0 0 0 0 0 0

3588 6 size_t 0 2105344 6 size_t 6 size_t 0 0 3589 0 0 0 0 0 0 0 0 0 0

3589 17 unsigned long int 0 8214 17 unsigned long int 17 unsigned long int 0 1 0 0 0 0 0 0 0 0 0 0 0

3590 4 void 0 8194 4 void 4 void 0 6 0 0 0 0 0 0 0 0 0 0 0

3591 10 PyObject * 0 8576 10 PyObject * 10 PyObject * 0 0 3592 0 0 0 0 0 0 0 0 0 0

3592 8 PyObject 0 2105344 8 PyObject 8 PyObject 0 0 3593 0 0 0 0 0 0 0 0 0 0

3593 7 _object 0 1024 7 _object 7 _object 0 0 0 0 0 0 0 0 0 0 0 0 0

3594 13 atomic string 0 2 13 atomic string 13 atomic string 0 7 0 0 0 0 0 0 0 0 0 0 0

3595 3 int 0 8194 3 int 3 int 0 1 0 0 0 0 0 0 0 0 0 0 0

3596 4 bool 0 8194 4 bool 4 bool 0 4 0 0 0 0 0 0 0 0 0 0 0

3597 23 ChecksumHashGenerator * 0 8576 23 ChecksumHashGenerator * 23 ChecksumHashGenerator * 0 0 3598 0 0 0 0 0 0 0 0 0 0

3598 21 ChecksumHashGenerator 0 2048 21 ChecksumHashGenerator 21 ChecksumHashGenerator 0 0 0 0 0 0 0 0 0 0 0 0 339
////////////////////////////////////////////////////////////////////
//       Class : ChecksumHashGenerator
// Description : This is a specific kind of HashGenerator that simply
//               adds up all of the ints.  Nothing fancy, and pretty
//               quick.
////////////////////////////////////////////////////////////////////

3599 9 ostream * 0 8576 9 ostream * 9 ostream * 0 0 3600 0 0 0 0 0 0 0 0 0 0

3600 7 ostream 0 2048 7 ostream 7 ostream 0 0 0 0 0 0 0 0 0 0 0 0 0

3601 10 Datagram * 0 8576 10 Datagram * 10 Datagram * 0 0 3602 0 0 0 0 0 0 0 0 0 0

3602 8 Datagram 0 2048 8 Datagram 8 Datagram 0 0 0 0 0 0 0 0 0 0 0 0 900
////////////////////////////////////////////////////////////////////
//       Class : Datagram
// Description : An ordered list of data elements, formatted in memory
//               for transmission over a socket or writing to a data
//               file.
//
//               Data elements should be added one at a time, in
//               order, to the Datagram.  The nature and contents of
//               the data elements are totally up to the user.  When a
//               Datagram has been transmitted and received, its data
//               elements may be extracted using a DatagramIterator;
//               it is up to the caller to know the correct type of
//               each data element in order.
//
//               A Datagram is itself headerless; it is simply a
//               collection of data elements.
////////////////////////////////////////////////////////////////////

3603 18 DatagramIterator * 0 8576 18 DatagramIterator * 18 DatagramIterator * 0 0 3604 0 0 0 0 0 0 0 0 0 0

3604 16 DatagramIterator 0 2048 16 DatagramIterator 16 DatagramIterator 0 0 0 0 0 0 0 0 0 0 0 0 438
////////////////////////////////////////////////////////////////////
//       Class : DatagramIterator
// Description : A class to retrieve the individual data elements
//               previously stored in a Datagram.  Elements may be
//               retrieved one at a time; it is up to the caller to
//               know the correct type and order of each element.
////////////////////////////////////////////////////////////////////

3605 10 TypeHandle 0 2048 10 TypeHandle 10 TypeHandle 0 0 0 0 0 0 0 0 0 0 0 0 1098
////////////////////////////////////////////////////////////////////
//       Class : TypeHandle
// Description : TypeHandle is the identifier used to differentiate
//               C++ class types.  Any C++ classes that inherit from
//               some base class, and must be differentiated at run
//               time, should store a static TypeHandle object that
//               can be queried through a static member function
//               named get_class_type().  Most of the time, it is also
//               desirable to inherit from TypedObject, which provides
//               some virtual functions to return the TypeHandle for a
//               particular instance.
//
//               At its essence, a TypeHandle is simply a unique
//               identifier that is assigned by the TypeRegistry.  The
//               TypeRegistry stores a tree of TypeHandles, so that
//               ancestry of a particular type may be queried, and the
//               type name may be retrieved for run-time display.
////////////////////////////////////////////////////////////////////

3606 12 TypeHandle * 0 8576 12 TypeHandle * 12 TypeHandle * 0 0 3605 0 0 0 0 0 0 0 0 0 0

3607 12 LVecBase2d * 0 8576 12 LVecBase2d * 12 LVecBase2d * 0 0 3445 0 0 0 0 0 0 0 0 0 0

3608 18 LVecBase2d const * 0 8576 18 LVecBase2d const * 18 LVecBase2d const * 0 0 3609 0 0 0 0 0 0 0 0 0 0

3609 16 LVecBase2d const 0 8832 16 LVecBase2d const 16 LVecBase2d const 0 0 3445 0 0 0 0 0 0 0 0 0 0

3610 6 double 0 8194 6 double 6 double 0 3 0 0 0 0 0 0 0 0 0 0 0

3611 12 LVecBase2i * 0 8576 12 LVecBase2i * 12 LVecBase2i * 0 0 3447 0 0 0 0 0 0 0 0 0 0

3612 18 LVecBase2i const * 0 8576 18 LVecBase2i const * 18 LVecBase2i const * 0 0 3613 0 0 0 0 0 0 0 0 0 0

3613 16 LVecBase2i const 0 8832 16 LVecBase2i const 16 LVecBase2i const 0 0 3447 0 0 0 0 0 0 0 0 0 0

3614 11 LVector2f * 0 8576 11 LVector2f * 11 LVector2f * 0 0 3449 0 0 0 0 0 0 0 0 0 0

3615 17 LVector2f const * 0 8576 17 LVector2f const * 17 LVector2f const * 0 0 3616 0 0 0 0 0 0 0 0 0 0

3616 15 LVector2f const 0 8832 15 LVector2f const 15 LVector2f const 0 0 3449 0 0 0 0 0 0 0 0 0 0

3617 11 LVector2d * 0 8576 11 LVector2d * 11 LVector2d * 0 0 3450 0 0 0 0 0 0 0 0 0 0

3618 17 LVector2d const * 0 8576 17 LVector2d const * 17 LVector2d const * 0 0 3619 0 0 0 0 0 0 0 0 0 0

3619 15 LVector2d const 0 8832 15 LVector2d const 15 LVector2d const 0 0 3450 0 0 0 0 0 0 0 0 0 0

3620 11 LVector2i * 0 8576 11 LVector2i * 11 LVector2i * 0 0 3451 0 0 0 0 0 0 0 0 0 0

3621 17 LVector2i const * 0 8576 17 LVector2i const * 17 LVector2i const * 0 0 3622 0 0 0 0 0 0 0 0 0 0

3622 15 LVector2i const 0 8832 15 LVector2i const 15 LVector2i const 0 0 3451 0 0 0 0 0 0 0 0 0 0

3623 10 LPoint2f * 0 8576 10 LPoint2f * 10 LPoint2f * 0 0 3452 0 0 0 0 0 0 0 0 0 0

3624 16 LPoint2f const * 0 8576 16 LPoint2f const * 16 LPoint2f const * 0 0 3625 0 0 0 0 0 0 0 0 0 0

3625 14 LPoint2f const 0 8832 14 LPoint2f const 14 LPoint2f const 0 0 3452 0 0 0 0 0 0 0 0 0 0

3626 10 LPoint2d * 0 8576 10 LPoint2d * 10 LPoint2d * 0 0 3453 0 0 0 0 0 0 0 0 0 0

3627 16 LPoint2d const * 0 8576 16 LPoint2d const * 16 LPoint2d const * 0 0 3628 0 0 0 0 0 0 0 0 0 0

3628 14 LPoint2d const 0 8832 14 LPoint2d const 14 LPoint2d const 0 0 3453 0 0 0 0 0 0 0 0 0 0

3629 10 LPoint2i * 0 8576 10 LPoint2i * 10 LPoint2i * 0 0 3454 0 0 0 0 0 0 0 0 0 0

3630 16 LPoint2i const * 0 8576 16 LPoint2i const * 16 LPoint2i const * 0 0 3631 0 0 0 0 0 0 0 0 0 0

3631 14 LPoint2i const 0 8832 14 LPoint2i const 14 LPoint2i const 0 0 3454 0 0 0 0 0 0 0 0 0 0

3632 12 LVecBase3f * 0 8576 12 LVecBase3f * 12 LVecBase3f * 0 0 3455 0 0 0 0 0 0 0 0 0 0

3633 18 LVecBase3f const * 0 8576 18 LVecBase3f const * 18 LVecBase3f const * 0 0 3634 0 0 0 0 0 0 0 0 0 0

3634 16 LVecBase3f const 0 8832 16 LVecBase3f const 16 LVecBase3f const 0 0 3455 0 0 0 0 0 0 0 0 0 0

3635 12 LVecBase3d * 0 8576 12 LVecBase3d * 12 LVecBase3d * 0 0 3457 0 0 0 0 0 0 0 0 0 0

3636 18 LVecBase3d const * 0 8576 18 LVecBase3d const * 18 LVecBase3d const * 0 0 3637 0 0 0 0 0 0 0 0 0 0

3637 16 LVecBase3d const 0 8832 16 LVecBase3d const 16 LVecBase3d const 0 0 3457 0 0 0 0 0 0 0 0 0 0

3638 12 LVecBase3i * 0 8576 12 LVecBase3i * 12 LVecBase3i * 0 0 3459 0 0 0 0 0 0 0 0 0 0

3639 18 LVecBase3i const * 0 8576 18 LVecBase3i const * 18 LVecBase3i const * 0 0 3640 0 0 0 0 0 0 0 0 0 0

3640 16 LVecBase3i const 0 8832 16 LVecBase3i const 16 LVecBase3i const 0 0 3459 0 0 0 0 0 0 0 0 0 0

3641 11 LVector3f * 0 8576 11 LVector3f * 11 LVector3f * 0 0 3462 0 0 0 0 0 0 0 0 0 0

3642 17 LVector3f const * 0 8576 17 LVector3f const * 17 LVector3f const * 0 0 3643 0 0 0 0 0 0 0 0 0 0

3643 15 LVector3f const 0 8832 15 LVector3f const 15 LVector3f const 0 0 3462 0 0 0 0 0 0 0 0 0 0

3644 11 LVector3d * 0 8576 11 LVector3d * 11 LVector3d * 0 0 3463 0 0 0 0 0 0 0 0 0 0

3645 17 LVector3d const * 0 8576 17 LVector3d const * 17 LVector3d const * 0 0 3646 0 0 0 0 0 0 0 0 0 0

3646 15 LVector3d const 0 8832 15 LVector3d const 15 LVector3d const 0 0 3463 0 0 0 0 0 0 0 0 0 0

3647 11 LVector3i * 0 8576 11 LVector3i * 11 LVector3i * 0 0 3464 0 0 0 0 0 0 0 0 0 0

3648 17 LVector3i const * 0 8576 17 LVector3i const * 17 LVector3i const * 0 0 3649 0 0 0 0 0 0 0 0 0 0

3649 15 LVector3i const 0 8832 15 LVector3i const 15 LVector3i const 0 0 3464 0 0 0 0 0 0 0 0 0 0

3650 10 LPoint3f * 0 8576 10 LPoint3f * 10 LPoint3f * 0 0 3465 0 0 0 0 0 0 0 0 0 0

3651 16 LPoint3f const * 0 8576 16 LPoint3f const * 16 LPoint3f const * 0 0 3652 0 0 0 0 0 0 0 0 0 0

3652 14 LPoint3f const 0 8832 14 LPoint3f const 14 LPoint3f const 0 0 3465 0 0 0 0 0 0 0 0 0 0

3653 10 LPoint3d * 0 8576 10 LPoint3d * 10 LPoint3d * 0 0 3466 0 0 0 0 0 0 0 0 0 0

3654 16 LPoint3d const * 0 8576 16 LPoint3d const * 16 LPoint3d const * 0 0 3655 0 0 0 0 0 0 0 0 0 0

3655 14 LPoint3d const 0 8832 14 LPoint3d const 14 LPoint3d const 0 0 3466 0 0 0 0 0 0 0 0 0 0

3656 10 LPoint3i * 0 8576 10 LPoint3i * 10 LPoint3i * 0 0 3467 0 0 0 0 0 0 0 0 0 0

3657 16 LPoint3i const * 0 8576 16 LPoint3i const * 16 LPoint3i const * 0 0 3658 0 0 0 0 0 0 0 0 0 0

3658 14 LPoint3i const 0 8832 14 LPoint3i const 14 LPoint3i const 0 0 3467 0 0 0 0 0 0 0 0 0 0

3659 12 LVecBase4f * 0 8576 12 LVecBase4f * 12 LVecBase4f * 0 0 3468 0 0 0 0 0 0 0 0 0 0

3660 18 LVecBase4f const * 0 8576 18 LVecBase4f const * 18 LVecBase4f const * 0 0 3661 0 0 0 0 0 0 0 0 0 0

3661 16 LVecBase4f const 0 8832 16 LVecBase4f const 16 LVecBase4f const 0 0 3468 0 0 0 0 0 0 0 0 0 0

3662 27 UnalignedLVecBase4f const * 0 8576 27 UnalignedLVecBase4f const * 27 UnalignedLVecBase4f const * 0 0 3663 0 0 0 0 0 0 0 0 0 0

3663 25 UnalignedLVecBase4f const 0 8832 25 UnalignedLVecBase4f const 25 UnalignedLVecBase4f const 0 0 3470 0 0 0 0 0 0 0 0 0 0

3664 21 UnalignedLVecBase4f * 0 8576 21 UnalignedLVecBase4f * 21 UnalignedLVecBase4f * 0 0 3470 0 0 0 0 0 0 0 0 0 0

3665 12 LVecBase4d * 0 8576 12 LVecBase4d * 12 LVecBase4d * 0 0 3472 0 0 0 0 0 0 0 0 0 0

3666 18 LVecBase4d const * 0 8576 18 LVecBase4d const * 18 LVecBase4d const * 0 0 3667 0 0 0 0 0 0 0 0 0 0

3667 16 LVecBase4d const 0 8832 16 LVecBase4d const 16 LVecBase4d const 0 0 3472 0 0 0 0 0 0 0 0 0 0

3668 27 UnalignedLVecBase4d const * 0 8576 27 UnalignedLVecBase4d const * 27 UnalignedLVecBase4d const * 0 0 3669 0 0 0 0 0 0 0 0 0 0

3669 25 UnalignedLVecBase4d const 0 8832 25 UnalignedLVecBase4d const 25 UnalignedLVecBase4d const 0 0 3474 0 0 0 0 0 0 0 0 0 0

3670 21 UnalignedLVecBase4d * 0 8576 21 UnalignedLVecBase4d * 21 UnalignedLVecBase4d * 0 0 3474 0 0 0 0 0 0 0 0 0 0

3671 12 LVecBase4i * 0 8576 12 LVecBase4i * 12 LVecBase4i * 0 0 3476 0 0 0 0 0 0 0 0 0 0

3672 18 LVecBase4i const * 0 8576 18 LVecBase4i const * 18 LVecBase4i const * 0 0 3673 0 0 0 0 0 0 0 0 0 0

3673 16 LVecBase4i const 0 8832 16 LVecBase4i const 16 LVecBase4i const 0 0 3476 0 0 0 0 0 0 0 0 0 0

3674 27 UnalignedLVecBase4i const * 0 8576 27 UnalignedLVecBase4i const * 27 UnalignedLVecBase4i const * 0 0 3675 0 0 0 0 0 0 0 0 0 0

3675 25 UnalignedLVecBase4i const 0 8832 25 UnalignedLVecBase4i const 25 UnalignedLVecBase4i const 0 0 3478 0 0 0 0 0 0 0 0 0 0

3676 21 UnalignedLVecBase4i * 0 8576 21 UnalignedLVecBase4i * 21 UnalignedLVecBase4i * 0 0 3478 0 0 0 0 0 0 0 0 0 0

3677 11 LVector4f * 0 8576 11 LVector4f * 11 LVector4f * 0 0 3480 0 0 0 0 0 0 0 0 0 0

3678 17 LVector4f const * 0 8576 17 LVector4f const * 17 LVector4f const * 0 0 3679 0 0 0 0 0 0 0 0 0 0

3679 15 LVector4f const 0 8832 15 LVector4f const 15 LVector4f const 0 0 3480 0 0 0 0 0 0 0 0 0 0

3680 11 LVector4d * 0 8576 11 LVector4d * 11 LVector4d * 0 0 3481 0 0 0 0 0 0 0 0 0 0

3681 17 LVector4d const * 0 8576 17 LVector4d const * 17 LVector4d const * 0 0 3682 0 0 0 0 0 0 0 0 0 0

3682 15 LVector4d const 0 8832 15 LVector4d const 15 LVector4d const 0 0 3481 0 0 0 0 0 0 0 0 0 0

3683 11 LVector4i * 0 8576 11 LVector4i * 11 LVector4i * 0 0 3482 0 0 0 0 0 0 0 0 0 0

3684 17 LVector4i const * 0 8576 17 LVector4i const * 17 LVector4i const * 0 0 3685 0 0 0 0 0 0 0 0 0 0

3685 15 LVector4i const 0 8832 15 LVector4i const 15 LVector4i const 0 0 3482 0 0 0 0 0 0 0 0 0 0

3686 10 LPoint4f * 0 8576 10 LPoint4f * 10 LPoint4f * 0 0 3483 0 0 0 0 0 0 0 0 0 0

3687 16 LPoint4f const * 0 8576 16 LPoint4f const * 16 LPoint4f const * 0 0 3688 0 0 0 0 0 0 0 0 0 0

3688 14 LPoint4f const 0 8832 14 LPoint4f const 14 LPoint4f const 0 0 3483 0 0 0 0 0 0 0 0 0 0

3689 10 LPoint4d * 0 8576 10 LPoint4d * 10 LPoint4d * 0 0 3484 0 0 0 0 0 0 0 0 0 0

3690 16 LPoint4d const * 0 8576 16 LPoint4d const * 16 LPoint4d const * 0 0 3691 0 0 0 0 0 0 0 0 0 0

3691 14 LPoint4d const 0 8832 14 LPoint4d const 14 LPoint4d const 0 0 3484 0 0 0 0 0 0 0 0 0 0

3692 10 LPoint4i * 0 8576 10 LPoint4i * 10 LPoint4i * 0 0 3485 0 0 0 0 0 0 0 0 0 0

3693 16 LPoint4i const * 0 8576 16 LPoint4i const * 16 LPoint4i const * 0 0 3694 0 0 0 0 0 0 0 0 0 0

3694 14 LPoint4i const 0 8832 14 LPoint4i const 14 LPoint4i const 0 0 3485 0 0 0 0 0 0 0 0 0 0

3695 11 LMatrix3f * 0 8576 11 LMatrix3f * 11 LMatrix3f * 0 0 3486 0 0 0 0 0 0 0 0 0 0

3696 17 LMatrix3f const * 0 8576 17 LMatrix3f const * 17 LMatrix3f const * 0 0 3697 0 0 0 0 0 0 0 0 0 0

3697 15 LMatrix3f const 0 8832 15 LMatrix3f const 15 LMatrix3f const 0 0 3486 0 0 0 0 0 0 0 0 0 0

3698 5 Row * 0 8576 16 LMatrix3f::Row * 16 LMatrix3f::Row * 0 0 3488 0 0 0 0 0 0 0 0 0 0

3699 6 CRow * 0 8576 17 LMatrix3f::CRow * 17 LMatrix3f::CRow * 0 0 3489 0 0 0 0 0 0 0 0 0 0

3700 17 LMatrix4f const * 0 8576 17 LMatrix4f const * 17 LMatrix4f const * 0 0 3701 0 0 0 0 0 0 0 0 0 0

3701 15 LMatrix4f const 0 8832 15 LMatrix4f const 15 LMatrix4f const 0 0 3490 0 0 0 0 0 0 0 0 0 0

3702 11 Row const * 0 8576 22 LMatrix3f::Row const * 22 LMatrix3f::Row const * 0 0 3703 0 0 0 0 0 0 0 0 0 0

3703 9 Row const 0 8832 20 LMatrix3f::Row const 20 LMatrix3f::Row const 0 0 3488 0 0 0 0 0 0 0 0 0 0

3704 12 CRow const * 0 8576 23 LMatrix3f::CRow const * 23 LMatrix3f::CRow const * 0 0 3705 0 0 0 0 0 0 0 0 0 0

3705 10 CRow const 0 8832 21 LMatrix3f::CRow const 21 LMatrix3f::CRow const 0 0 3489 0 0 0 0 0 0 0 0 0 0

3706 11 LMatrix4f * 0 8576 11 LMatrix4f * 11 LMatrix4f * 0 0 3490 0 0 0 0 0 0 0 0 0 0

3707 26 UnalignedLMatrix4f const * 0 8576 26 UnalignedLMatrix4f const * 26 UnalignedLMatrix4f const * 0 0 3708 0 0 0 0 0 0 0 0 0 0

3708 24 UnalignedLMatrix4f const 0 8832 24 UnalignedLMatrix4f const 24 UnalignedLMatrix4f const 0 0 3494 0 0 0 0 0 0 0 0 0 0

3709 5 Row * 0 8576 16 LMatrix4f::Row * 16 LMatrix4f::Row * 0 0 3492 0 0 0 0 0 0 0 0 0 0

3710 6 CRow * 0 8576 17 LMatrix4f::CRow * 17 LMatrix4f::CRow * 0 0 3493 0 0 0 0 0 0 0 0 0 0

3711 11 Row const * 0 8576 22 LMatrix4f::Row const * 22 LMatrix4f::Row const * 0 0 3712 0 0 0 0 0 0 0 0 0 0

3712 9 Row const 0 8832 20 LMatrix4f::Row const 20 LMatrix4f::Row const 0 0 3492 0 0 0 0 0 0 0 0 0 0

3713 12 CRow const * 0 8576 23 LMatrix4f::CRow const * 23 LMatrix4f::CRow const * 0 0 3714 0 0 0 0 0 0 0 0 0 0

3714 10 CRow const 0 8832 21 LMatrix4f::CRow const 21 LMatrix4f::CRow const 0 0 3493 0 0 0 0 0 0 0 0 0 0

3715 20 UnalignedLMatrix4f * 0 8576 20 UnalignedLMatrix4f * 20 UnalignedLMatrix4f * 0 0 3494 0 0 0 0 0 0 0 0 0 0

3716 11 LMatrix3d * 0 8576 11 LMatrix3d * 11 LMatrix3d * 0 0 3496 0 0 0 0 0 0 0 0 0 0

3717 17 LMatrix3d const * 0 8576 17 LMatrix3d const * 17 LMatrix3d const * 0 0 3718 0 0 0 0 0 0 0 0 0 0

3718 15 LMatrix3d const 0 8832 15 LMatrix3d const 15 LMatrix3d const 0 0 3496 0 0 0 0 0 0 0 0 0 0

3719 5 Row * 0 8576 16 LMatrix3d::Row * 16 LMatrix3d::Row * 0 0 3498 0 0 0 0 0 0 0 0 0 0

3720 6 CRow * 0 8576 17 LMatrix3d::CRow * 17 LMatrix3d::CRow * 0 0 3499 0 0 0 0 0 0 0 0 0 0

3721 17 LMatrix4d const * 0 8576 17 LMatrix4d const * 17 LMatrix4d const * 0 0 3722 0 0 0 0 0 0 0 0 0 0

3722 15 LMatrix4d const 0 8832 15 LMatrix4d const 15 LMatrix4d const 0 0 3500 0 0 0 0 0 0 0 0 0 0

3723 11 Row const * 0 8576 22 LMatrix3d::Row const * 22 LMatrix3d::Row const * 0 0 3724 0 0 0 0 0 0 0 0 0 0

3724 9 Row const 0 8832 20 LMatrix3d::Row const 20 LMatrix3d::Row const 0 0 3498 0 0 0 0 0 0 0 0 0 0

3725 12 CRow const * 0 8576 23 LMatrix3d::CRow const * 23 LMatrix3d::CRow const * 0 0 3726 0 0 0 0 0 0 0 0 0 0

3726 10 CRow const 0 8832 21 LMatrix3d::CRow const 21 LMatrix3d::CRow const 0 0 3499 0 0 0 0 0 0 0 0 0 0

3727 11 LMatrix4d * 0 8576 11 LMatrix4d * 11 LMatrix4d * 0 0 3500 0 0 0 0 0 0 0 0 0 0

3728 26 UnalignedLMatrix4d const * 0 8576 26 UnalignedLMatrix4d const * 26 UnalignedLMatrix4d const * 0 0 3729 0 0 0 0 0 0 0 0 0 0

3729 24 UnalignedLMatrix4d const 0 8832 24 UnalignedLMatrix4d const 24 UnalignedLMatrix4d const 0 0 3504 0 0 0 0 0 0 0 0 0 0

3730 5 Row * 0 8576 16 LMatrix4d::Row * 16 LMatrix4d::Row * 0 0 3502 0 0 0 0 0 0 0 0 0 0

3731 6 CRow * 0 8576 17 LMatrix4d::CRow * 17 LMatrix4d::CRow * 0 0 3503 0 0 0 0 0 0 0 0 0 0

3732 11 Row const * 0 8576 22 LMatrix4d::Row const * 22 LMatrix4d::Row const * 0 0 3733 0 0 0 0 0 0 0 0 0 0

3733 9 Row const 0 8832 20 LMatrix4d::Row const 20 LMatrix4d::Row const 0 0 3502 0 0 0 0 0 0 0 0 0 0

3734 12 CRow const * 0 8576 23 LMatrix4d::CRow const * 23 LMatrix4d::CRow const * 0 0 3735 0 0 0 0 0 0 0 0 0 0

3735 10 CRow const 0 8832 21 LMatrix4d::CRow const 21 LMatrix4d::CRow const 0 0 3503 0 0 0 0 0 0 0 0 0 0

3736 20 UnalignedLMatrix4d * 0 8576 20 UnalignedLMatrix4d * 20 UnalignedLMatrix4d * 0 0 3504 0 0 0 0 0 0 0 0 0 0

3737 14 LQuaternionf * 0 8576 14 LQuaternionf * 14 LQuaternionf * 0 0 3506 0 0 0 0 0 0 0 0 0 0

3738 20 LQuaternionf const * 0 8576 20 LQuaternionf const * 20 LQuaternionf const * 0 0 3739 0 0 0 0 0 0 0 0 0 0

3739 18 LQuaternionf const 0 8832 18 LQuaternionf const 18 LQuaternionf const 0 0 3506 0 0 0 0 0 0 0 0 0 0

3740 14 LQuaterniond * 0 8576 14 LQuaterniond * 14 LQuaterniond * 0 0 3507 0 0 0 0 0 0 0 0 0 0

3741 20 LQuaterniond const * 0 8576 20 LQuaterniond const * 20 LQuaterniond const * 0 0 3742 0 0 0 0 0 0 0 0 0 0

3742 18 LQuaterniond const 0 8832 18 LQuaterniond const 18 LQuaterniond const 0 0 3507 0 0 0 0 0 0 0 0 0 0

3743 12 LRotationf * 0 8576 12 LRotationf * 12 LRotationf * 0 0 3508 0 0 0 0 0 0 0 0 0 0

3744 18 LRotationf const * 0 8576 18 LRotationf const * 18 LRotationf const * 0 0 3745 0 0 0 0 0 0 0 0 0 0

3745 16 LRotationf const 0 8832 16 LRotationf const 16 LRotationf const 0 0 3508 0 0 0 0 0 0 0 0 0 0

3746 12 LRotationd * 0 8576 12 LRotationd * 12 LRotationd * 0 0 3509 0 0 0 0 0 0 0 0 0 0

3747 18 LRotationd const * 0 8576 18 LRotationd const * 18 LRotationd const * 0 0 3748 0 0 0 0 0 0 0 0 0 0

3748 16 LRotationd const 0 8832 16 LRotationd const 16 LRotationd const 0 0 3509 0 0 0 0 0 0 0 0 0 0

3749 15 LOrientationf * 0 8576 15 LOrientationf * 15 LOrientationf * 0 0 3510 0 0 0 0 0 0 0 0 0 0

3750 21 LOrientationf const * 0 8576 21 LOrientationf const * 21 LOrientationf const * 0 0 3751 0 0 0 0 0 0 0 0 0 0

3751 19 LOrientationf const 0 8832 19 LOrientationf const 19 LOrientationf const 0 0 3510 0 0 0 0 0 0 0 0 0 0

3752 15 LOrientationd * 0 8576 15 LOrientationd * 15 LOrientationd * 0 0 3511 0 0 0 0 0 0 0 0 0 0

3753 21 LOrientationd const * 0 8576 21 LOrientationd const * 21 LOrientationd const * 0 0 3754 0 0 0 0 0 0 0 0 0 0

3754 19 LOrientationd const 0 8832 19 LOrientationd const 19 LOrientationd const 0 0 3511 0 0 0 0 0 0 0 0 0 0

3755 21 ConfigVariableColor * 0 8576 21 ConfigVariableColor * 21 ConfigVariableColor * 0 0 3582 0 0 0 0 0 0 0 0 0 0

3756 14 LColor const * 0 8576 14 LColor const * 14 LColor const * 0 0 3757 0 0 0 0 0 0 0 0 0 0

3757 12 LColor const 0 8832 12 LColor const 12 LColor const 0 0 3566 0 0 0 0 0 0 0 0 0 0

3758 27 ConfigVariableColor const * 0 8576 27 ConfigVariableColor const * 27 ConfigVariableColor const * 0 0 3759 0 0 0 0 0 0 0 0 0 0

3759 25 ConfigVariableColor const 0 8832 25 ConfigVariableColor const 25 ConfigVariableColor const 0 0 3582 0 0 0 0 0 0 0 0 0 0

3760 11 PN_stdfloat 0 2105344 11 PN_stdfloat 11 PN_stdfloat 0 0 3587 0 0 0 0 0 0 0 0 0 0

3761 8 LColor * 0 8576 8 LColor * 8 LColor * 0 0 3566 0 0 0 0 0 0 0 0 0 0

3762 38 double const [::num_matrix_components] 0 4202496 38 double const [::num_matrix_components] 38 double const [::num_matrix_components] 0 0 3763 12 0 0 0 0 0 0 0 0 0 0

3763 12 double const 0 8832 12 double const 12 double const 0 0 3610 0 0 0 0 0 0 0 0 0 0

3764 37 float const [::num_matrix_components] 0 4202496 37 float const [::num_matrix_components] 37 float const [::num_matrix_components] 0 0 3765 12 0 0 0 0 0 0 0 0 0 0

3765 11 float const 0 8832 11 float const 11 float const 0 0 3587 0 0 0 0 0 0 0 0 0 0

3766 32 double [::num_matrix_components] 0 4202496 32 double [::num_matrix_components] 32 double [::num_matrix_components] 0 0 3610 12 0 0 0 0 0 0 0 0 0 0

3767 31 float [::num_matrix_components] 0 4202496 31 float [::num_matrix_components] 31 float [::num_matrix_components] 0 0 3587 12 0 0 0 0 0 0 0 0 0 0

0
0
14
3768 0 0 1052 8 get_rows 4 size 7 get_row 
3769 0 0 1052 8 get_cols 4 size 7 get_col 
3770 0 0 1052 9 get_col2s 4 size 8 get_col2 
3771 0 0 1052 9 get_row2s 4 size 8 get_row2 
3772 0 0 1140 8 get_rows 4 size 7 get_row 
3773 0 0 1140 8 get_cols 4 size 7 get_col 
3774 0 0 1140 9 get_row3s 4 size 8 get_row3 
3775 0 0 1246 8 get_rows 4 size 7 get_row 
3776 0 0 1246 8 get_cols 4 size 7 get_col 
3777 0 0 1246 9 get_col2s 4 size 8 get_col2 
3778 0 0 1246 9 get_row2s 4 size 8 get_row2 
3779 0 0 1332 8 get_rows 4 size 7 get_row 
3780 0 0 1332 8 get_cols 4 size 7 get_col 
3781 0 0 1332 9 get_row3s 4 size 8 get_row3 
