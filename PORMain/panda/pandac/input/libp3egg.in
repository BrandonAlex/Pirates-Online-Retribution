1412104602
2 2
8 libp3egg 4 hhEq 11 panda3d.egg 
958
1022 11 EggUserData 0 4 1980 24 EggUserData::EggUserData 0 2 1 2 934
// Filename: eggUserData.I
// Created by:  drose (03Jun03)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggUserData::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggUserData::Copy constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
96
inline EggUserData::EggUserData(void);
inline EggUserData::EggUserData(EggUserData const &copy);

1023 10 operator = 0 4 1980 23 EggUserData::operator = 0 1 3 233
////////////////////////////////////////////////////////////////////
//     Function: EggUserData::Copy assignment operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
69
inline EggUserData &EggUserData::operator =(EggUserData const &copy);

1024 14 get_class_type 0 4 1980 27 EggUserData::get_class_type 0 1 4 0
52
static TypeHandle EggUserData::get_class_type(void);

1025 9 EggObject 0 4 1982 20 EggObject::EggObject 0 2 5 6 449
////////////////////////////////////////////////////////////////////
//     Function: EggObject::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggObject::Copy constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
72
EggObject::EggObject(void);
EggObject::EggObject(EggObject const &copy);

1026 10 operator = 0 4 1982 21 EggObject::operator = 0 1 7 234
////////////////////////////////////////////////////////////////////
//     Function: EggObject::Copy assignment operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
56
EggObject &EggObject::operator =(EggObject const &copy);

1027 13 set_user_data 0 4 1982 24 EggObject::set_user_data 0 1 8 1201
////////////////////////////////////////////////////////////////////
//     Function: EggObject::set_user_data
//       Access: Published
//  Description: Sets the user data associated with this object.  This
//               may be any EggUserData-derived object.  The egg
//               library will do nothing with this pointer, except to
//               hold its reference count and return the pointer on
//               request.
//
//               The EggObject maintains multiple different
//               EggUserData pointers, one for each unique type (as
//               reported by get_type()).  If you know that only one
//               type of EggUserData object will be added in your
//               application, you may use the query functions that
//               accept no parameters, but it is recommended that in
//               general you pass in the type of your particular user
//               data, to allow multiple applications to coexist in
//               the same egg data.
//
//               This pointer is also copied by the copy assignment
//               operator and copy constructor.
////////////////////////////////////////////////////////////////////
54
void EggObject::set_user_data(EggUserData *user_data);

1028 13 get_user_data 0 4 1982 24 EggObject::get_user_data 0 2 9 10 699
////////////////////////////////////////////////////////////////////
//     Function: EggObject::get_user_data
//       Access: Published
//  Description: Returns the user data pointer most recently stored on
//               this object, or NULL if nothing was previously
//               stored.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggObject::get_user_data
//       Access: Published
//  Description: Returns the user data pointer of the indicated type,
//               if it exists, or NULL if it does not.
////////////////////////////////////////////////////////////////////
112
EggUserData *EggObject::get_user_data(void) const;
EggUserData *EggObject::get_user_data(TypeHandle type) const;

1029 13 has_user_data 0 4 1982 24 EggObject::has_user_data 0 2 11 12 694
////////////////////////////////////////////////////////////////////
//     Function: EggObject::has_user_data
//       Access: Published
//  Description: Returns true if a generic user data pointer has
//               recently been set and not yet cleared, false
//               otherwise.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggObject::has_user_data
//       Access: Published
//  Description: Returns true if the user data pointer of the
//               indicated type has been set, false otherwise.
////////////////////////////////////////////////////////////////////
96
bool EggObject::has_user_data(void) const;
bool EggObject::has_user_data(TypeHandle type) const;

1030 15 clear_user_data 0 4 1982 26 EggObject::clear_user_data 0 2 13 14 553
////////////////////////////////////////////////////////////////////
//     Function: EggObject::clear_user_data
//       Access: Published
//  Description: Removes *all* user data pointers from the node.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggObject::clear_user_data
//       Access: Published
//  Description: Removes the user data pointer of the indicated type.
////////////////////////////////////////////////////////////////////
88
void EggObject::clear_user_data(void);
void EggObject::clear_user_data(TypeHandle type);

1031 14 get_class_type 0 4 1982 25 EggObject::get_class_type 0 1 15 0
50
static TypeHandle EggObject::get_class_type(void);

1032 19 upcast_to_EggObject 0 12 1983 35 EggNamedObject::upcast_to_EggObject 0 1 22 39
upcast from EggNamedObject to EggObject
53
EggObject *EggNamedObject::upcast_to_EggObject(void);

1033 26 downcast_to_EggNamedObject 0 12 1982 37 EggObject::downcast_to_EggNamedObject 0 1 23 41
downcast from EggObject to EggNamedObject
60
EggNamedObject *EggObject::downcast_to_EggNamedObject(void);

1034 17 upcast_to_Namable 0 12 1983 33 EggNamedObject::upcast_to_Namable 0 1 24 37
upcast from EggNamedObject to Namable
49
Namable *EggNamedObject::upcast_to_Namable(void);

1035 26 downcast_to_EggNamedObject 0 12 1984 35 Namable::downcast_to_EggNamedObject 0 1 25 39
downcast from Namable to EggNamedObject
58
EggNamedObject *Namable::downcast_to_EggNamedObject(void);

1036 14 EggNamedObject 0 4 1983 30 EggNamedObject::EggNamedObject 0 3 16 17 18 943
// Filename: eggNamedObject.I
// Created by:  drose (10Feb99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggNamedObject::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggNamedObject::Copy constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
146
inline EggNamedObject::EggNamedObject(basic_string< char > const &name = (""));
inline EggNamedObject::EggNamedObject(EggNamedObject const &copy);

1037 10 operator = 0 4 1983 26 EggNamedObject::operator = 0 1 19 236
////////////////////////////////////////////////////////////////////
//     Function: EggNamedObject::Copy assignment operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
78
inline EggNamedObject &EggNamedObject::operator =(EggNamedObject const &copy);

1038 6 output 0 4 1983 22 EggNamedObject::output 0 1 20 219
////////////////////////////////////////////////////////////////////
//     Function: EggNamedObject::output
//       Access: Public
//  Description: 
////////////////////////////////////////////////////////////////////
48
void EggNamedObject::output(ostream &out) const;

1039 14 get_class_type 0 4 1983 30 EggNamedObject::get_class_type 0 1 21 0
55
static TypeHandle EggNamedObject::get_class_type(void);

1040 15 ~EggNamedObject 0 4 1983 31 EggNamedObject::~EggNamedObject 0 0 0
38
EggNamedObject::~EggNamedObject(void);

1041 10 operator = 0 4 1985 19 EggNode::operator = 0 1 26 229
////////////////////////////////////////////////////////////////////
//     Function: EggNode::Copy assignment operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
57
inline EggNode &EggNode::operator =(EggNode const &copy);

1042 10 get_parent 0 4 1985 19 EggNode::get_parent 0 1 27 215
////////////////////////////////////////////////////////////////////
//     Function: EggNode::get_parent
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
53
inline EggGroupNode *EggNode::get_parent(void) const;

1043 9 get_depth 0 4 1985 18 EggNode::get_depth 0 1 28 297
////////////////////////////////////////////////////////////////////
//     Function: EggNode::get_depth
//       Access: Public
//  Description: Returns the number of nodes above this node in the
//               egg hierarchy.
////////////////////////////////////////////////////////////////////
42
inline int EggNode::get_depth(void) const;

1044 17 is_under_instance 0 4 1985 26 EggNode::is_under_instance 0 1 29 366
////////////////////////////////////////////////////////////////////
//     Function: EggNode::is_under_instance
//       Access: Public
//  Description: Returns true if there is an <Instance> node somewhere
//               in the egg tree at or above this node, false
//               otherwise.
////////////////////////////////////////////////////////////////////
51
inline bool EggNode::is_under_instance(void) const;

1045 18 is_under_transform 0 4 1985 27 EggNode::is_under_transform 0 1 30 368
////////////////////////////////////////////////////////////////////
//     Function: EggNode::is_under_transform
//       Access: Public
//  Description: Returns true if there is a <Transform> entry somewhere
//               in the egg tree at or above this node, false
//               otherwise.
////////////////////////////////////////////////////////////////////
52
inline bool EggNode::is_under_transform(void) const;

1046 14 is_local_coord 0 4 1985 23 EggNode::is_local_coord 0 1 31 443
////////////////////////////////////////////////////////////////////
//     Function: EggNode::is_local_coord
//       Access: Public
//  Description: Returns true if this node's vertices are not in the
//               global coordinate space.  This will be the case if
//               there was an <Instance> node under a transform at or
//               above this node.
////////////////////////////////////////////////////////////////////
48
inline bool EggNode::is_local_coord(void) const;

1047 16 get_vertex_frame 0 4 1985 25 EggNode::get_vertex_frame 0 1 32 1112
////////////////////////////////////////////////////////////////////
//     Function: EggNode::get_vertex_frame
//       Access: Public
//  Description: Returns the coordinate frame of the vertices
//               referenced by primitives at or under this node.  This
//               is not the same as get_node_frame().
//
//               Generally, vertices in an egg file are stored in the
//               global coordinate space, regardless of the transforms
//               defined at each node.  Thus, get_vertex_frame() will
//               usually return the identity transform (global
//               coordinate space).  However, primitives under an
//               <Instance> entry reference their vertices in the
//               coordinate system under effect at the time of the
//               <Instance>.  Thus, nodes under an <Instance> entry
//               may return this non-identity matrix.
//
//               Specifically, this may return a non-identity matrix
//               only if is_local_coord() is true.
////////////////////////////////////////////////////////////////////
62
inline LMatrix4d const &EggNode::get_vertex_frame(void) const;

1048 14 get_node_frame 0 4 1985 23 EggNode::get_node_frame 0 1 33 372
////////////////////////////////////////////////////////////////////
//     Function: EggNode::get_node_frame
//       Access: Public
//  Description: Returns the coordinate frame of the node itself.
//               This is simply the net product of all transformations
//               up to the root.
////////////////////////////////////////////////////////////////////
60
inline LMatrix4d const &EggNode::get_node_frame(void) const;

1049 20 get_vertex_frame_inv 0 4 1985 29 EggNode::get_vertex_frame_inv 0 1 34 333
////////////////////////////////////////////////////////////////////
//     Function: EggNode::get_vertex_frame_inv
//       Access: Public
//  Description: Returns the inverse of the matrix returned by
//               get_vertex_frame().  See get_vertex_frame().
////////////////////////////////////////////////////////////////////
66
inline LMatrix4d const &EggNode::get_vertex_frame_inv(void) const;

1050 18 get_node_frame_inv 0 4 1985 27 EggNode::get_node_frame_inv 0 1 35 327
////////////////////////////////////////////////////////////////////
//     Function: EggNode::get_node_frame_inv
//       Access: Public
//  Description: Returns the inverse of the matrix returned by
//               get_node_frame().  See get_node_frame().
////////////////////////////////////////////////////////////////////
64
inline LMatrix4d const &EggNode::get_node_frame_inv(void) const;

1051 18 get_vertex_to_node 0 4 1985 27 EggNode::get_vertex_to_node 0 1 36 503
////////////////////////////////////////////////////////////////////
//     Function: EggNode::get_vertex_to_node
//       Access: Public
//  Description: Returns the transformation matrix suitable for
//               converting the vertices as read from the egg file
//               into the coordinate space of the node.  This is the
//               same thing as:
//
//               get_vertex_frame() * get_node_frame_inv()
//
////////////////////////////////////////////////////////////////////
64
inline LMatrix4d const &EggNode::get_vertex_to_node(void) const;

1052 18 get_node_to_vertex 0 4 1985 27 EggNode::get_node_to_vertex 0 1 37 535
////////////////////////////////////////////////////////////////////
//     Function: EggNode::get_node_to_vertex
//       Access: Public
//  Description: Returns the transformation matrix suitable for
//               converting vertices in the coordinate space of the
//               node to the appropriate coordinate space for storing
//               in the egg file.  This is the same thing as:
//
//               get_node_frame() * get_vertex_frame_inv()
//
////////////////////////////////////////////////////////////////////
64
inline LMatrix4d const &EggNode::get_node_to_vertex(void) const;

1053 20 get_vertex_frame_ptr 0 4 1985 29 EggNode::get_vertex_frame_ptr 0 1 38 366
////////////////////////////////////////////////////////////////////
//     Function: EggNode::get_vertex_frame_ptr
//       Access: Public
//  Description: Returns either a NULL pointer or a unique pointer
//               shared by nodes with the same get_vertex_frame()
//               matrix.
////////////////////////////////////////////////////////////////////
66
inline LMatrix4d const *EggNode::get_vertex_frame_ptr(void) const;

1054 18 get_node_frame_ptr 0 4 1985 27 EggNode::get_node_frame_ptr 0 1 39 362
////////////////////////////////////////////////////////////////////
//     Function: EggNode::get_node_frame_ptr
//       Access: Public
//  Description: Returns either a NULL pointer or a unique pointer
//               shared by nodes with the same get_node_frame()
//               matrix.
////////////////////////////////////////////////////////////////////
64
inline LMatrix4d const *EggNode::get_node_frame_ptr(void) const;

1055 24 get_vertex_frame_inv_ptr 0 4 1985 33 EggNode::get_vertex_frame_inv_ptr 0 1 40 374
////////////////////////////////////////////////////////////////////
//     Function: EggNode::get_vertex_frame_inv_ptr
//       Access: Public
//  Description: Returns either a NULL pointer or a unique pointer
//               shared by nodes with the same get_vertex_frame_inv()
//               matrix.
////////////////////////////////////////////////////////////////////
70
inline LMatrix4d const *EggNode::get_vertex_frame_inv_ptr(void) const;

1056 22 get_node_frame_inv_ptr 0 4 1985 31 EggNode::get_node_frame_inv_ptr 0 1 41 370
////////////////////////////////////////////////////////////////////
//     Function: EggNode::get_node_frame_inv_ptr
//       Access: Public
//  Description: Returns either a NULL pointer or a unique pointer
//               shared by nodes with the same get_node_frame_inv()
//               matrix.
////////////////////////////////////////////////////////////////////
68
inline LMatrix4d const *EggNode::get_node_frame_inv_ptr(void) const;

1057 22 get_vertex_to_node_ptr 0 4 1985 31 EggNode::get_vertex_to_node_ptr 0 1 42 370
////////////////////////////////////////////////////////////////////
//     Function: EggNode::get_vertex_to_node_ptr
//       Access: Public
//  Description: Returns either a NULL pointer or a unique pointer
//               shared by nodes with the same get_vertex_to_node()
//               matrix.
////////////////////////////////////////////////////////////////////
68
inline LMatrix4d const *EggNode::get_vertex_to_node_ptr(void) const;

1058 22 get_node_to_vertex_ptr 0 4 1985 31 EggNode::get_node_to_vertex_ptr 0 1 43 370
////////////////////////////////////////////////////////////////////
//     Function: EggNode::get_node_to_vertex_ptr
//       Access: Public
//  Description: Returns either a NULL pointer or a unique pointer
//               shared by nodes with the same get_node_to_vertex()
//               matrix.
////////////////////////////////////////////////////////////////////
68
inline LMatrix4d const *EggNode::get_node_to_vertex_ptr(void) const;

1059 9 transform 0 4 1985 18 EggNode::transform 0 1 44 308
////////////////////////////////////////////////////////////////////
//     Function: EggNode::transform
//       Access: Public
//  Description: Applies the indicated transformation to the node and
//               all of its descendants.
////////////////////////////////////////////////////////////////////
53
inline void EggNode::transform(LMatrix4d const &mat);

1060 23 transform_vertices_only 0 4 1985 32 EggNode::transform_vertices_only 0 1 45 476
////////////////////////////////////////////////////////////////////
//     Function: EggNode::transform_vertices_only
//       Access: Public
//  Description: Applies the indicated transformation only to vertices
//               that appear in global space within vertex pools at
//               this node and below.  Joints and other transforms are
//               not affected, nor are local vertices.
////////////////////////////////////////////////////////////////////
67
inline void EggNode::transform_vertices_only(LMatrix4d const &mat);

1061 18 flatten_transforms 0 4 1985 27 EggNode::flatten_transforms 0 1 46 699
////////////////////////////////////////////////////////////////////
//     Function: EggNode::flatten_transforms
//       Access: Public
//  Description: Removes any transform and instance records from this
//               node in the scene graph and below.  If an instance
//               node is encountered, removes the instance and applies
//               the transform to its vertices, duplicating vertices
//               if necessary.
//
//               Since this function may result in duplicated
//               vertices, it may be a good idea to call
//               remove_unused_vertices() after calling this.
////////////////////////////////////////////////////////////////////
46
inline void EggNode::flatten_transforms(void);

1062 13 apply_texmats 0 4 1985 22 EggNode::apply_texmats 0 1 47 398
////////////////////////////////////////////////////////////////////
//     Function: EggNode::apply_texmats
//       Access: Public
//  Description: Applies the texture matrices to the UV's of the
//               vertices that reference them, and then removes the
//               texture matrices from the textures themselves.
////////////////////////////////////////////////////////////////////
34
void EggNode::apply_texmats(void);

1063 11 rename_node 0 4 1985 20 EggNode::rename_node 0 1 48 254
////////////////////////////////////////////////////////////////////
//     Function: EggNode::rename_node
//       Access: Published
//  Description: Rename by stripping out the prefix
////////////////////////////////////////////////////////////////////
70
int EggNode::rename_node(vector< basic_string< char > > strip_prefix);

1064 8 is_joint 0 6 1985 17 EggNode::is_joint 0 1 49 504
////////////////////////////////////////////////////////////////////
//     Function: EggNode::is_joint
//       Access: Public, Virtual
//  Description: Returns true if this particular node represents a
//               <Joint> entry or not.  This is a handy thing to know
//               since Joints are sorted to the end of their sibling
//               list when writing an egg file.  See
//               EggGroupNode::write().
////////////////////////////////////////////////////////////////////
43
virtual bool EggNode::is_joint(void) const;

1065 14 is_anim_matrix 0 6 1985 23 EggNode::is_anim_matrix 0 1 50 341
////////////////////////////////////////////////////////////////////
//     Function: EggNode::is_anim_matrix
//       Access: Public, Virtual
//  Description: Returns true if this node represents a table of
//               animation transformation data, false otherwise.
////////////////////////////////////////////////////////////////////
49
virtual bool EggNode::is_anim_matrix(void) const;

1066 20 determine_alpha_mode 0 6 1985 29 EggNode::determine_alpha_mode 0 1 51 549
////////////////////////////////////////////////////////////////////
//     Function: EggNode::determine_alpha_mode
//       Access: Public, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               or EggPrimitive or some such object at this level or
//               above this node that has an alpha_mode other than
//               AM_unspecified.  Returns a valid EggRenderMode pointer
//               if one is found, or NULL otherwise.
////////////////////////////////////////////////////////////////////
59
virtual EggRenderMode *EggNode::determine_alpha_mode(void);

1067 26 determine_depth_write_mode 0 6 1985 35 EggNode::determine_depth_write_mode 0 1 52 561
////////////////////////////////////////////////////////////////////
//     Function: EggNode::determine_depth_write_mode
//       Access: Public, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               or EggPrimitive or some such object at this level or
//               above this node that has a depth_write_mode other than
//               DWM_unspecified.  Returns a valid EggRenderMode pointer
//               if one is found, or NULL otherwise.
////////////////////////////////////////////////////////////////////
65
virtual EggRenderMode *EggNode::determine_depth_write_mode(void);

1068 25 determine_depth_test_mode 0 6 1985 34 EggNode::determine_depth_test_mode 0 1 53 559
////////////////////////////////////////////////////////////////////
//     Function: EggNode::determine_depth_test_mode
//       Access: Public, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               or EggPrimitive or some such object at this level or
//               above this node that has a depth_test_mode other than
//               DTM_unspecified.  Returns a valid EggRenderMode pointer
//               if one is found, or NULL otherwise.
////////////////////////////////////////////////////////////////////
64
virtual EggRenderMode *EggNode::determine_depth_test_mode(void);

1069 25 determine_visibility_mode 0 6 1985 34 EggNode::determine_visibility_mode 0 1 54 558
////////////////////////////////////////////////////////////////////
//     Function: EggNode::determine_visibility_mode
//       Access: Public, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               or EggPrimitive or some such object at this level or
//               above this node that has a visibility_mode other than
//               VM_unspecified.  Returns a valid EggRenderMode pointer
//               if one is found, or NULL otherwise.
////////////////////////////////////////////////////////////////////
64
virtual EggRenderMode *EggNode::determine_visibility_mode(void);

1070 22 determine_depth_offset 0 6 1985 31 EggNode::determine_depth_offset 0 1 55 535
////////////////////////////////////////////////////////////////////
//     Function: EggNode::determine_depth_offset
//       Access: Public, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               or EggPrimitive or some such object at this level or
//               above this node that has a depth_offset specified.
//               Returns a valid EggRenderMode pointer if one is found,
//               or NULL otherwise.
////////////////////////////////////////////////////////////////////
61
virtual EggRenderMode *EggNode::determine_depth_offset(void);

1071 20 determine_draw_order 0 6 1985 29 EggNode::determine_draw_order 0 1 56 531
////////////////////////////////////////////////////////////////////
//     Function: EggNode::determine_draw_order
//       Access: Public, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               or EggPrimitive or some such object at this level or
//               above this node that has a draw_order specified.
//               Returns a valid EggRenderMode pointer if one is found,
//               or NULL otherwise.
////////////////////////////////////////////////////////////////////
59
virtual EggRenderMode *EggNode::determine_draw_order(void);

1072 13 determine_bin 0 6 1985 22 EggNode::determine_bin 0 1 57 518
////////////////////////////////////////////////////////////////////
//     Function: EggNode::determine_bin
//       Access: Public, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               or EggPrimitive or some such object at this level or
//               above this node that has a bin specified.  Returns a
//               valid EggRenderMode pointer if one is found, or NULL
//               otherwise.
////////////////////////////////////////////////////////////////////
52
virtual EggRenderMode *EggNode::determine_bin(void);

1073 17 determine_indexed 0 6 1985 26 EggNode::determine_indexed 0 1 58 615
////////////////////////////////////////////////////////////////////
//     Function: EggNode::determine_indexed
//       Access: Public, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               at this level or above that has the "indexed" scalar
//               set.  Returns the value of the indexed scalar if it
//               is found, or false if it is not.
//
//               In other words, returns true if the "indexed" flag is
//               in effect for the indicated node, false otherwise.
////////////////////////////////////////////////////////////////////
46
virtual bool EggNode::determine_indexed(void);

1074 15 determine_decal 0 6 1985 24 EggNode::determine_decal 0 1 59 603
////////////////////////////////////////////////////////////////////
//     Function: EggNode::determine_decal
//       Access: Public, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               at this level or above that has the "decal" flag
//               set.  Returns the value of the decal flag if it
//               is found, or false if it is not.
//
//               In other words, returns true if the "decal" flag is
//               in effect for the indicated node, false otherwise.
////////////////////////////////////////////////////////////////////
44
virtual bool EggNode::determine_decal(void);

1075 5 write 0 6 1985 14 EggNode::write 0 1 60 0
70
virtual void EggNode::write(ostream &out, int indent_level) const = 0;

1076 9 parse_egg 0 4 1985 18 EggNode::parse_egg 0 1 61 575
////////////////////////////////////////////////////////////////////
//     Function: EggNode::parse_egg
//       Access: Public
//  Description: Parses the egg syntax given in the indicate string as
//               if it had been read from the egg file within this
//               object's definition.  Updates the object accordingly.
//               Returns true if successful, false if there was some
//               parse error or if the object does not support this
//               functionality.
////////////////////////////////////////////////////////////////////
64
bool EggNode::parse_egg(basic_string< char > const &egg_syntax);

1077 20 test_under_integrity 0 4 1985 29 EggNode::test_under_integrity 0 1 62 0
47
void EggNode::test_under_integrity(void) const;

1078 14 get_class_type 0 4 1985 23 EggNode::get_class_type 0 1 63 0
48
static TypeHandle EggNode::get_class_type(void);

1079 8 ~EggNode 0 4 1985 17 EggNode::~EggNode 0 0 0
24
EggNode::~EggNode(void);

1080 10 operator = 0 4 1986 23 EggAnimData::operator = 0 1 64 233
////////////////////////////////////////////////////////////////////
//     Function: EggAnimData::Copy assignment operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
69
inline EggAnimData &EggAnimData::operator =(EggAnimData const &copy);

1081 7 set_fps 0 4 1986 20 EggAnimData::set_fps 0 1 65 216
////////////////////////////////////////////////////////////////////
//     Function: EggAnimData::set_fps
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
46
inline void EggAnimData::set_fps(double type);

1082 9 clear_fps 0 4 1986 22 EggAnimData::clear_fps 0 1 66 218
////////////////////////////////////////////////////////////////////
//     Function: EggAnimData::clear_fps
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
41
inline void EggAnimData::clear_fps(void);

1083 7 has_fps 0 4 1986 20 EggAnimData::has_fps 0 1 67 216
////////////////////////////////////////////////////////////////////
//     Function: EggAnimData::has_fps
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
45
inline bool EggAnimData::has_fps(void) const;

1084 7 get_fps 0 4 1986 20 EggAnimData::get_fps 0 1 68 262
////////////////////////////////////////////////////////////////////
//     Function: EggAnimData::get_fps
//       Access: Public
//  Description: This is only valid if has_fps() returns true.
////////////////////////////////////////////////////////////////////
47
inline double EggAnimData::get_fps(void) const;

1085 10 clear_data 0 4 1986 23 EggAnimData::clear_data 0 1 69 259
////////////////////////////////////////////////////////////////////
//     Function: EggAnimData::clear_data
//       Access: Public
//  Description: Removes all data and empties the table.
////////////////////////////////////////////////////////////////////
42
inline void EggAnimData::clear_data(void);

1086 8 add_data 0 4 1986 21 EggAnimData::add_data 0 1 70 253
////////////////////////////////////////////////////////////////////
//     Function: EggAnimData::add_data
//       Access: Public
//  Description: Adds a single element to the table.
////////////////////////////////////////////////////////////////////
48
inline void EggAnimData::add_data(double value);

1087 8 get_size 0 4 1986 21 EggAnimData::get_size 0 1 71 262
////////////////////////////////////////////////////////////////////
//     Function: EggAnimData::get_size
//       Access: Public
//  Description: Returns the number of elements in the table.
////////////////////////////////////////////////////////////////////
45
inline int EggAnimData::get_size(void) const;

1088 8 quantize 0 4 1986 21 EggAnimData::quantize 0 1 72 303
////////////////////////////////////////////////////////////////////
//     Function: EggAnimData::quantize
//       Access: Public
//  Description: Rounds each element of the table to the nearest
//               multiple of quantum.
////////////////////////////////////////////////////////////////////
43
void EggAnimData::quantize(double quantum);

1089 14 get_class_type 0 4 1986 27 EggAnimData::get_class_type 0 1 73 0
52
static TypeHandle EggAnimData::get_class_type(void);

1090 12 ~EggAnimData 0 4 1986 25 EggAnimData::~EggAnimData 0 0 0
32
EggAnimData::~EggAnimData(void);

1091 14 EggAnimPreload 0 4 1987 30 EggAnimPreload::EggAnimPreload 0 3 74 75 76 943
// Filename: eggAnimPreload.I
// Created by:  drose (06Aug08)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggAnimPreload::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggAnimPreload::Copy constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
146
inline EggAnimPreload::EggAnimPreload(basic_string< char > const &name = (""));
inline EggAnimPreload::EggAnimPreload(EggAnimPreload const &copy);

1092 10 operator = 0 4 1987 26 EggAnimPreload::operator = 0 1 77 236
////////////////////////////////////////////////////////////////////
//     Function: EggAnimPreload::Copy assignment operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
78
inline EggAnimPreload &EggAnimPreload::operator =(EggAnimPreload const &copy);

1093 7 set_fps 0 4 1987 23 EggAnimPreload::set_fps 0 1 78 219
////////////////////////////////////////////////////////////////////
//     Function: EggAnimPreload::set_fps
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
48
inline void EggAnimPreload::set_fps(double fps);

1094 9 clear_fps 0 4 1987 25 EggAnimPreload::clear_fps 0 1 79 221
////////////////////////////////////////////////////////////////////
//     Function: EggAnimPreload::clear_fps
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
44
inline void EggAnimPreload::clear_fps(void);

1095 7 has_fps 0 4 1987 23 EggAnimPreload::has_fps 0 1 80 219
////////////////////////////////////////////////////////////////////
//     Function: EggAnimPreload::has_fps
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
48
inline bool EggAnimPreload::has_fps(void) const;

1096 7 get_fps 0 4 1987 23 EggAnimPreload::get_fps 0 1 81 265
////////////////////////////////////////////////////////////////////
//     Function: EggAnimPreload::get_fps
//       Access: Public
//  Description: This is only valid if has_fps() returns true.
////////////////////////////////////////////////////////////////////
50
inline double EggAnimPreload::get_fps(void) const;

1097 14 set_num_frames 0 4 1987 30 EggAnimPreload::set_num_frames 0 1 82 226
////////////////////////////////////////////////////////////////////
//     Function: EggAnimPreload::set_num_frames
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
59
inline void EggAnimPreload::set_num_frames(int num_frames);

1098 16 clear_num_frames 0 4 1987 32 EggAnimPreload::clear_num_frames 0 1 83 228
////////////////////////////////////////////////////////////////////
//     Function: EggAnimPreload::clear_num_frames
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
51
inline void EggAnimPreload::clear_num_frames(void);

1099 14 has_num_frames 0 4 1987 30 EggAnimPreload::has_num_frames 0 1 84 226
////////////////////////////////////////////////////////////////////
//     Function: EggAnimPreload::has_num_frames
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
55
inline bool EggAnimPreload::has_num_frames(void) const;

1100 14 get_num_frames 0 4 1987 30 EggAnimPreload::get_num_frames 0 1 85 279
////////////////////////////////////////////////////////////////////
//     Function: EggAnimPreload::get_num_frames
//       Access: Public
//  Description: This is only valid if has_num_frames() returns true.
////////////////////////////////////////////////////////////////////
54
inline int EggAnimPreload::get_num_frames(void) const;

1101 14 get_class_type 0 4 1987 30 EggAnimPreload::get_class_type 0 1 86 0
55
static TypeHandle EggAnimPreload::get_class_type(void);

1102 15 ~EggAnimPreload 0 4 1987 31 EggAnimPreload::~EggAnimPreload 0 0 0
38
EggAnimPreload::~EggAnimPreload(void);

1103 20 upcast_to_MemoryBase 0 12 1988 35 EggAttributes::upcast_to_MemoryBase 0 1 107 39
upcast from EggAttributes to MemoryBase
54
MemoryBase *EggAttributes::upcast_to_MemoryBase(void);

1104 25 downcast_to_EggAttributes 0 12 1989 37 MemoryBase::downcast_to_EggAttributes 0 1 108 41
downcast from MemoryBase to EggAttributes
59
EggAttributes *MemoryBase::downcast_to_EggAttributes(void);

1105 13 EggAttributes 0 4 1988 28 EggAttributes::EggAttributes 0 2 87 88 457
////////////////////////////////////////////////////////////////////
//     Function: EggAttributes::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggAttributes::Copy constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
92
EggAttributes::EggAttributes(void);
EggAttributes::EggAttributes(EggAttributes const &copy);

1106 10 operator = 0 4 1988 25 EggAttributes::operator = 0 1 89 238
////////////////////////////////////////////////////////////////////
//     Function: EggAttributes::Copy assignment operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
68
EggAttributes &EggAttributes::operator =(EggAttributes const &copy);

1107 14 ~EggAttributes 0 6 1988 29 EggAttributes::~EggAttributes 0 0 233
////////////////////////////////////////////////////////////////////
//     Function: EggAttributes::Destructor
//       Access: Published, Virtual
//  Description:
////////////////////////////////////////////////////////////////////
44
virtual EggAttributes::~EggAttributes(void);

1108 10 has_normal 0 4 1988 25 EggAttributes::has_normal 0 1 90 713
// Filename: eggAttributes.I
// Created by:  drose (16Jan99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggAttributes::has_normal
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
50
inline bool EggAttributes::has_normal(void) const;

1109 10 get_normal 0 4 1988 25 EggAttributes::get_normal 0 1 91 224
////////////////////////////////////////////////////////////////////
//     Function: EggAttributes::get_normal
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
62
inline LVector3d const &EggAttributes::get_normal(void) const;

1110 10 set_normal 0 4 1988 25 EggAttributes::set_normal 0 1 92 224
////////////////////////////////////////////////////////////////////
//     Function: EggAttributes::set_normal
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
63
inline void EggAttributes::set_normal(LVector3d const &normal);

1111 12 clear_normal 0 4 1988 27 EggAttributes::clear_normal 0 1 93 226
////////////////////////////////////////////////////////////////////
//     Function: EggAttributes::clear_normal
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
46
inline void EggAttributes::clear_normal(void);

1112 14 matches_normal 0 4 1988 29 EggAttributes::matches_normal 0 1 94 345
////////////////////////////////////////////////////////////////////
//     Function: EggAttributes::matches_normal
//       Access: Published
//  Description: Returns true if this normal matches that of the other
//               EggAttributes object, include the morph list.
////////////////////////////////////////////////////////////////////
76
inline bool EggAttributes::matches_normal(EggAttributes const &other) const;

1113 11 copy_normal 0 4 1988 26 EggAttributes::copy_normal 0 1 95 376
////////////////////////////////////////////////////////////////////
//     Function: EggAttributes::copy_normal
//       Access: Published
//  Description: Sets this normal to be the same as the other's,
//               include morphs.  If the other has no normal, this
//               clears the normal.
////////////////////////////////////////////////////////////////////
67
inline void EggAttributes::copy_normal(EggAttributes const &other);

1114 9 has_color 0 4 1988 24 EggAttributes::has_color 0 1 96 223
////////////////////////////////////////////////////////////////////
//     Function: EggAttributes::has_color
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
49
inline bool EggAttributes::has_color(void) const;

1115 9 get_color 0 4 1988 24 EggAttributes::get_color 0 1 97 333
////////////////////////////////////////////////////////////////////
//     Function: EggAttributes::get_color
//       Access: Published
//  Description: Returns the color set on this particular attribute.
//               If there is no color set, returns white.
////////////////////////////////////////////////////////////////////
55
inline LVecBase4f EggAttributes::get_color(void) const;

1116 9 set_color 0 4 1988 24 EggAttributes::set_color 0 1 98 214
////////////////////////////////////////////////////////////////////
//     Function: EggAttributes::
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
62
inline void EggAttributes::set_color(LVecBase4f const &Color);

1117 11 clear_color 0 4 1988 26 EggAttributes::clear_color 0 1 99 214
////////////////////////////////////////////////////////////////////
//     Function: EggAttributes::
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
45
inline void EggAttributes::clear_color(void);

1118 13 matches_color 0 4 1988 28 EggAttributes::matches_color 0 1 100 343
////////////////////////////////////////////////////////////////////
//     Function: EggAttributes::matches_color
//       Access: Published
//  Description: Returns true if this color matches that of the other
//               EggAttributes object, include the morph list.
////////////////////////////////////////////////////////////////////
75
inline bool EggAttributes::matches_color(EggAttributes const &other) const;

1119 10 copy_color 0 4 1988 25 EggAttributes::copy_color 0 1 101 372
////////////////////////////////////////////////////////////////////
//     Function: EggAttributes::copy_color
//       Access: Published
//  Description: Sets this color to be the same as the other's,
//               include morphs.  If the other has no color, this
//               clears the color.
////////////////////////////////////////////////////////////////////
66
inline void EggAttributes::copy_color(EggAttributes const &other);

1120 5 write 0 4 1988 20 EggAttributes::write 0 1 102 304
////////////////////////////////////////////////////////////////////
//     Function: EggAttributes::write
//       Access: Published
//  Description: Writes the attributes to the indicated output stream in
//               Egg format.
////////////////////////////////////////////////////////////////////
64
void EggAttributes::write(ostream &out, int indent_level) const;

1121 15 sorts_less_than 0 4 1988 30 EggAttributes::sorts_less_than 0 1 103 399
////////////////////////////////////////////////////////////////////
//     Function: EggAttributes::sorts_less_than
//       Access: Published
//  Description: An ordering operator to compare two vertices for
//               sorting order.  This imposes an arbitrary ordering
//               useful to identify unique vertices.
////////////////////////////////////////////////////////////////////
77
inline bool EggAttributes::sorts_less_than(EggAttributes const &other) const;

1122 10 compare_to 0 4 1988 25 EggAttributes::compare_to 0 1 104 394
////////////////////////////////////////////////////////////////////
//     Function: EggAttributes::compare_to
//       Access: Published
//  Description: An ordering operator to compare two vertices for
//               sorting order.  This imposes an arbitrary ordering
//               useful to identify unique vertices.
////////////////////////////////////////////////////////////////////
64
int EggAttributes::compare_to(EggAttributes const &other) const;

1123 9 transform 0 4 1988 24 EggAttributes::transform 0 1 105 312
////////////////////////////////////////////////////////////////////
//     Function: EggAttributes::transform
//       Access: Published, Virtual
//  Description: Applies the indicated transformation matrix to the
//               attributes.
////////////////////////////////////////////////////////////////////
52
void EggAttributes::transform(LMatrix4d const &mat);

1124 12 get_dnormals 0 20 1988 27 EggAttributes::get_dnormals 0 1 109 74
getter for EggMorphList< EggMorph< LVector3d > > EggAttributes::_dnormals;
85
EggMorphList< EggMorph< LVector3d > > const &EggAttributes::get_dnormals(void) const;

1125 10 get_drgbas 0 20 1988 25 EggAttributes::get_drgbas 0 1 110 72
getter for EggMorphList< EggMorph< LVector4f > > EggAttributes::_drgbas;
83
EggMorphList< EggMorph< LVector4f > > const &EggAttributes::get_drgbas(void) const;

1126 14 get_class_type 0 4 1988 29 EggAttributes::get_class_type 0 1 106 0
54
static TypeHandle EggAttributes::get_class_type(void);

1127 11 EggVertexUV 0 4 1992 24 EggVertexUV::EggVertexUV 0 3 111 112 113 681
////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::Copy Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
211
EggVertexUV::EggVertexUV(basic_string< char > const &name, LPoint2d const &uv);
EggVertexUV::EggVertexUV(basic_string< char > const &name, LPoint3d const &uvw);
EggVertexUV::EggVertexUV(EggVertexUV const &copy);

1128 10 operator = 0 4 1992 23 EggVertexUV::operator = 0 1 114 237
////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::Copy Assignment Operator
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
62
EggVertexUV &EggVertexUV::operator =(EggVertexUV const &copy);

1129 11 filter_name 0 4 1992 24 EggVertexUV::filter_name 0 1 115 998
// Filename: eggVertexUV.I
// Created by:  drose (20Jul04)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::filter_name
//       Access: Published, Static
//  Description: Returns the actual name that should be set for a
//               given name string.  Usually this is the same string
//               that is input, but for historical reasons the texture
//               coordinate name "default" is mapped to the empty
//               string.
////////////////////////////////////////////////////////////////////
94
static inline basic_string< char > EggVertexUV::filter_name(basic_string< char > const &name);

1130 8 set_name 0 4 1992 21 EggVertexUV::set_name 0 1 116 220
////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::set_name
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
68
inline void EggVertexUV::set_name(basic_string< char > const &name);

1131 18 get_num_dimensions 0 4 1992 31 EggVertexUV::get_num_dimensions 0 1 117 401
////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::get_num_dimensions
//       Access: Published
//  Description: Returns the number of components of the texture
//               coordinate set.  This is either 2 (the normal case)
//               or 3 (for a 3-d texture coordinate).
////////////////////////////////////////////////////////////////////
55
inline int EggVertexUV::get_num_dimensions(void) const;

1132 5 has_w 0 4 1992 18 EggVertexUV::has_w 0 1 118 369
////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::has_w
//       Access: Published
//  Description: Returns true if the texture coordinate has a third, w
//               component, false if it is just a normal 2-d texture
//               coordinate.
////////////////////////////////////////////////////////////////////
43
inline bool EggVertexUV::has_w(void) const;

1133 6 get_uv 0 4 1992 19 EggVertexUV::get_uv 0 1 119 302
////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::get_uv
//       Access: Published
//  Description: Returns the texture coordinate pair, if
//               get_num_dimensions() is 2.
////////////////////////////////////////////////////////////////////
48
inline LPoint2d EggVertexUV::get_uv(void) const;

1134 7 get_uvw 0 4 1992 20 EggVertexUV::get_uvw 0 1 120 435
////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::get_uvw
//       Access: Published
//  Description: Returns the texture coordinate triple, if
//               get_num_dimensions() is 3.  This is also legal to
//               call if get_num_dimensions() is 2 (but the last
//               dimension will be zero).
////////////////////////////////////////////////////////////////////
56
inline LPoint3d const &EggVertexUV::get_uvw(void) const;

1135 6 set_uv 0 4 1992 19 EggVertexUV::set_uv 0 1 121 372
////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::set_uv
//       Access: Published
//  Description: Sets the texture coordinate pair.  This makes the
//               texture coordinate a 2-d texture coordinate, which is
//               the usual case.
////////////////////////////////////////////////////////////////////
58
inline void EggVertexUV::set_uv(LPoint2d const &texCoord);

1136 7 set_uvw 0 4 1992 20 EggVertexUV::set_uvw 0 1 122 333
////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::set_uvw
//       Access: Published
//  Description: Sets the texture coordinate triple.  This makes the
//               texture coordinate a 3-d texture coordinate.
////////////////////////////////////////////////////////////////////
59
inline void EggVertexUV::set_uvw(LPoint3d const &texCoord);

1137 11 has_tangent 0 4 1992 24 EggVertexUV::has_tangent 0 1 123 223
////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::has_tangent
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
49
inline bool EggVertexUV::has_tangent(void) const;

1138 11 get_tangent 0 4 1992 24 EggVertexUV::get_tangent 0 1 124 223
////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::get_tangent
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
61
inline LVector3d const &EggVertexUV::get_tangent(void) const;

1139 11 set_tangent 0 4 1992 24 EggVertexUV::set_tangent 0 1 125 223
////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::set_tangent
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
63
inline void EggVertexUV::set_tangent(LVector3d const &tangent);

1140 13 clear_tangent 0 4 1992 26 EggVertexUV::clear_tangent 0 1 126 225
////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::clear_tangent
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
45
inline void EggVertexUV::clear_tangent(void);

1141 12 has_binormal 0 4 1992 25 EggVertexUV::has_binormal 0 1 127 224
////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::has_binormal
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
50
inline bool EggVertexUV::has_binormal(void) const;

1142 12 get_binormal 0 4 1992 25 EggVertexUV::get_binormal 0 1 128 224
////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::get_binormal
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
62
inline LVector3d const &EggVertexUV::get_binormal(void) const;

1143 12 set_binormal 0 4 1992 25 EggVertexUV::set_binormal 0 1 129 224
////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::set_binormal
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
65
inline void EggVertexUV::set_binormal(LVector3d const &binormal);

1144 14 clear_binormal 0 4 1992 27 EggVertexUV::clear_binormal 0 1 130 226
////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::clear_binormal
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
46
inline void EggVertexUV::clear_binormal(void);

1145 9 transform 0 4 1992 22 EggVertexUV::transform 0 1 131 400
////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::transform
//       Access: Published, Virtual
//  Description: Applies the indicated transformation matrix to the
//               UV's tangent and/or binormal.  This does nothing if
//               there is no tangent or binormal.
////////////////////////////////////////////////////////////////////
50
void EggVertexUV::transform(LMatrix4d const &mat);

1146 5 write 0 4 1992 18 EggVertexUV::write 0 1 132 215
////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::write
//       Access: Public
//  Description: 
////////////////////////////////////////////////////////////////////
62
void EggVertexUV::write(ostream &out, int indent_level) const;

1147 10 compare_to 0 4 1992 23 EggVertexUV::compare_to 0 1 133 389
////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::compare_to
//       Access: Public
//  Description: An ordering operator to compare two vertices for
//               sorting order.  This imposes an arbitrary ordering
//               useful to identify unique vertices.
////////////////////////////////////////////////////////////////////
60
int EggVertexUV::compare_to(EggVertexUV const &other) const;

1148 8 get_duvs 0 20 1992 21 EggVertexUV::get_duvs 0 1 135 68
getter for EggMorphList< EggMorph< LVector3d > > EggVertexUV::_duvs;
79
EggMorphList< EggMorph< LVector3d > > const &EggVertexUV::get_duvs(void) const;

1149 14 get_class_type 0 4 1992 27 EggVertexUV::get_class_type 0 1 134 0
52
static TypeHandle EggVertexUV::get_class_type(void);

1150 12 EggVertexAux 0 4 1993 26 EggVertexAux::EggVertexAux 0 2 136 137 457
////////////////////////////////////////////////////////////////////
//     Function: EggVertexAux::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggVertexAux::Copy Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
138
EggVertexAux::EggVertexAux(basic_string< char > const &name, LVecBase4d const &aux);
EggVertexAux::EggVertexAux(EggVertexAux const &copy);

1151 10 operator = 0 4 1993 24 EggVertexAux::operator = 0 1 138 238
////////////////////////////////////////////////////////////////////
//     Function: EggVertexAux::Copy Assignment Operator
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
65
EggVertexAux &EggVertexAux::operator =(EggVertexAux const &copy);

1152 8 set_name 0 4 1993 22 EggVertexAux::set_name 0 1 139 709
// Filename: eggVertexAux.I
// Created by:  jenes (15Nov11)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggVertexAux::set_name
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
69
inline void EggVertexAux::set_name(basic_string< char > const &name);

1153 7 get_aux 0 4 1993 21 EggVertexAux::get_aux 0 1 140 258
////////////////////////////////////////////////////////////////////
//     Function: EggVertexAux::get_aux
//       Access: Published
//  Description: Returns the auxiliary data quadruple.
////////////////////////////////////////////////////////////////////
59
inline LVecBase4d const &EggVertexAux::get_aux(void) const;

1154 7 set_aux 0 4 1993 21 EggVertexAux::set_aux 0 1 141 255
////////////////////////////////////////////////////////////////////
//     Function: EggVertexAux::set_aux
//       Access: Published
//  Description: Sets the auxiliary data quadruple.
////////////////////////////////////////////////////////////////////
57
inline void EggVertexAux::set_aux(LVecBase4d const &aux);

1155 5 write 0 4 1993 19 EggVertexAux::write 0 1 142 216
////////////////////////////////////////////////////////////////////
//     Function: EggVertexAux::write
//       Access: Public
//  Description: 
////////////////////////////////////////////////////////////////////
63
void EggVertexAux::write(ostream &out, int indent_level) const;

1156 10 compare_to 0 4 1993 24 EggVertexAux::compare_to 0 1 143 390
////////////////////////////////////////////////////////////////////
//     Function: EggVertexAux::compare_to
//       Access: Public
//  Description: An ordering operator to compare two vertices for
//               sorting order.  This imposes an arbitrary ordering
//               useful to identify unique vertices.
////////////////////////////////////////////////////////////////////
62
int EggVertexAux::compare_to(EggVertexAux const &other) const;

1157 14 get_class_type 0 4 1993 28 EggVertexAux::get_class_type 0 1 144 0
53
static TypeHandle EggVertexAux::get_class_type(void);

1158 19 upcast_to_EggObject 0 12 1994 30 EggVertex::upcast_to_EggObject 0 1 202 34
upcast from EggVertex to EggObject
48
EggObject *EggVertex::upcast_to_EggObject(void);

1159 21 downcast_to_EggVertex 0 12 1982 32 EggObject::downcast_to_EggVertex 0 1 203 36
downcast from EggObject to EggVertex
50
EggVertex *EggObject::downcast_to_EggVertex(void);

1160 23 upcast_to_EggAttributes 0 12 1994 34 EggVertex::upcast_to_EggAttributes 0 1 204 38
upcast from EggVertex to EggAttributes
56
EggAttributes *EggVertex::upcast_to_EggAttributes(void);

1161 21 downcast_to_EggVertex 0 12 1988 36 EggAttributes::downcast_to_EggVertex 0 1 205 40
downcast from EggAttributes to EggVertex
54
EggVertex *EggAttributes::downcast_to_EggVertex(void);

1162 9 EggVertex 0 4 1994 20 EggVertex::EggVertex 0 2 145 146 562
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggVertex::Copy constructor
//       Access: Published
//  Description: Copies all properties of the vertex except its vertex
//               pool, index number, and group membership.
////////////////////////////////////////////////////////////////////
72
EggVertex::EggVertex(void);
EggVertex::EggVertex(EggVertex const &copy);

1163 10 operator = 0 4 1994 21 EggVertex::operator = 0 1 147 347
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::Copy assignment operator
//       Access: Published
//  Description: Copies all properties of the vertex except its vertex
//               pool, index number, and group membership.
////////////////////////////////////////////////////////////////////
56
EggVertex &EggVertex::operator =(EggVertex const &copy);

1164 10 ~EggVertex 0 6 1994 21 EggVertex::~EggVertex 0 0 229
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::Destructor
//       Access: Published, Virtual
//  Description:
////////////////////////////////////////////////////////////////////
36
virtual EggVertex::~EggVertex(void);

1165 8 get_pool 0 4 1994 19 EggVertex::get_pool 0 1 148 847
// Filename: eggVertex.I
// Created by:  drose (16Jan99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::get_pool
//       Access: Published
//  Description: Returns the vertex pool this vertex belongs in.  This
//               may be NULL if the vertex has not been added to a
//               pool.
////////////////////////////////////////////////////////////////////
54
inline EggVertexPool *EggVertex::get_pool(void) const;

1166 20 is_forward_reference 0 4 1994 31 EggVertex::is_forward_reference 0 1 149 710
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::is_forward_reference
//       Access: Published
//  Description: Returns true if the vertex is a forward reference to
//               some vertex that hasn't been defined yet.  In this
//               case, the vertex may not have any properties filled
//               in yet.
//
//               This can only happen if you implicitly create a
//               vertex via EggVertexPool::get_forward_vertex().
//               Presumably, when the vertex pool is later filled in,
//               this vertex will be replaced with real data.
////////////////////////////////////////////////////////////////////
56
inline bool EggVertex::is_forward_reference(void) const;

1167 7 set_pos 0 4 1994 18 EggVertex::set_pos 0 4 150 151 152 153 1449
// The pos might have 1, 2, 3, or 4 dimensions.  That complicates
// things a bit.

// The pos might have 1, 2, 3, or 4 dimensions.  That complicates
// things a bit.

////////////////////////////////////////////////////////////////////
//     Function: EggVertex::set_pos
//       Access: Published
//  Description: Sets the vertex position.  This variant sets the
//               vertex to a one-dimensional value.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggVertex::set_pos
//       Access: Published
//  Description: Sets the vertex position.  This variant sets the
//               vertex to a two-dimensional value.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggVertex::set_pos
//       Access: Published
//  Description: Sets the vertex position.  This variant sets the
//               vertex to a three-dimensional value.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggVertex::set_pos
//       Access: Published
//  Description: Sets the vertex position.  This variant sets the
//               vertex to a four-dimensional value.
////////////////////////////////////////////////////////////////////
202
inline void EggVertex::set_pos(double pos);
inline void EggVertex::set_pos(LPoint2d const &pos);
inline void EggVertex::set_pos(LPoint3d const &pos);
inline void EggVertex::set_pos(LPoint4d const &pos);

1168 8 set_pos4 0 4 1994 19 EggVertex::set_pos4 0 1 154 600
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::set_pos4
//       Access: Published
//  Description: This special flavor of set_pos() sets the vertex as a
//               four-component value, but does not change the set
//               number of dimensions.  It's handy for retrieving the
//               vertex position via get_pos4, manipulating it, then
//               storing it back again, without worrying about the
//               number of dimensions it actually had.
////////////////////////////////////////////////////////////////////
53
inline void EggVertex::set_pos4(LPoint4d const &pos);

1169 18 get_num_dimensions 0 4 1994 29 EggVertex::get_num_dimensions 0 1 155 721
// get_pos[123] return the pos as the corresponding type.  It is an
// error to call any of these without first verifying that
// get_num_dimensions() matches the desired type.  However,
// get_pos4() may always be called; it returns the pos as a
// four-component point in homogeneous space (with a 1.0 in the last
// position if the pos has fewer than four components).

////////////////////////////////////////////////////////////////////
//     Function: EggVertex::get_num_dimensions
//       Access: Published
//  Description: Returns the number of dimensions the vertex uses.
//               Usually this will be 3, but it may be 1, 2, 3, or 4.
////////////////////////////////////////////////////////////////////
53
inline int EggVertex::get_num_dimensions(void) const;

1170 8 get_pos1 0 4 1994 19 EggVertex::get_pos1 0 1 156 703
// get_pos[123] return the pos as the corresponding type.  It is an
// error to call any of these without first verifying that
// get_num_dimensions() matches the desired type.  However,
// get_pos4() may always be called; it returns the pos as a
// four-component point in homogeneous space (with a 1.0 in the last
// position if the pos has fewer than four components).

////////////////////////////////////////////////////////////////////
//     Function: EggVertex::get_pos1
//       Access: Published
//  Description: Only valid if get_num_dimensions() returns 1.
//               Returns the position as a one-dimensional value.
////////////////////////////////////////////////////////////////////
46
inline double EggVertex::get_pos1(void) const;

1171 8 get_pos2 0 4 1994 19 EggVertex::get_pos2 0 1 157 330
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::get_pos2
//       Access: Published
//  Description: Only valid if get_num_dimensions() returns 2.
//               Returns the position as a two-dimensional value.
////////////////////////////////////////////////////////////////////
48
inline LPoint2d EggVertex::get_pos2(void) const;

1172 8 get_pos3 0 4 1994 19 EggVertex::get_pos3 0 1 158 332
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::get_pos3
//       Access: Published
//  Description: Valid if get_num_dimensions() returns 3 or 4.
//               Returns the position as a three-dimensional value.
////////////////////////////////////////////////////////////////////
48
inline LPoint3d EggVertex::get_pos3(void) const;

1173 8 get_pos4 0 4 1994 19 EggVertex::get_pos4 0 1 159 591
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::get_pos4
//       Access: Published
//  Description: This is always valid, regardless of the value of
//               get_num_dimensions.  It returns the position as a
//               four-dimensional value.  If the pos has fewer than
//               four dimensions, this value represents the pos
//               extended into four-dimensional homogenous space,
//               e.g. by adding 1 as the fourth component.
////////////////////////////////////////////////////////////////////
48
inline LPoint4d EggVertex::get_pos4(void) const;

1174 6 has_uv 0 4 1994 17 EggVertex::has_uv 0 2 160 161 922
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::has_uv
//       Access: Published
//  Description: Returns true if the vertex has an unnamed UV
//               coordinate pair, false otherwise.
//
//               This is the more restrictive interface, and is
//               generally useful only in the absence of
//               multitexturing; see has_uv(name) for the interface
//               that supports multitexturing.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggVertex::has_uv
//       Access: Published
//  Description: Returns true if the vertex has the named UV
//               coordinate pair, and the named UV coordinate pair is
//               2-d, false otherwise.
////////////////////////////////////////////////////////////////////
106
inline bool EggVertex::has_uv(void) const;
bool EggVertex::has_uv(basic_string< char > const &name) const;

1175 6 get_uv 0 4 1994 17 EggVertex::get_uv 0 2 162 163 968
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::get_uv
//       Access: Published
//  Description: Returns the unnamed UV coordinate pair on the
//               vertex.  It is an error to call this if has_uv() has
//               returned false.
//
//               This is the more restrictive interface, and is
//               generally useful only in the absence of
//               multitexturing; see get_uv(name) for the interface
//               that supports multitexturing.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggVertex::get_uv
//       Access: Published
//  Description: Returns the named UV coordinate pair on the vertex.
//               It is an error to call this if has_uv(name)
//               returned false.
////////////////////////////////////////////////////////////////////
114
inline LPoint2d EggVertex::get_uv(void) const;
LPoint2d EggVertex::get_uv(basic_string< char > const &name) const;

1176 6 set_uv 0 4 1994 17 EggVertex::set_uv 0 2 164 165 965
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::set_uv
//       Access: Published
//  Description: Replaces the unnamed UV coordinate pair on the vertex
//               with the indicated value.
//
//               This is the more restrictive interface, and is
//               generally useful only in the absence of
//               multitexturing; see set_uv(name, uv) for the
//               interface that supports multitexturing.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggVertex::set_uv
//       Access: Published
//  Description: Sets the indicated UV coordinate pair on the vertex.
//               This replaces any UV coordinate pair with the same
//               name already on the vertex, but preserves UV morphs.
////////////////////////////////////////////////////////////////////
140
inline void EggVertex::set_uv(LPoint2d const &texCoord);
void EggVertex::set_uv(basic_string< char > const &name, LPoint2d const &texCoord);

1177 8 clear_uv 0 4 1994 19 EggVertex::clear_uv 0 2 166 167 583
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::clear_uv
//       Access: Published
//  Description: Removes all UV coordinate pairs from the vertex.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggVertex::clear_uv
//       Access: Published
//  Description: Removes the named UV coordinate pair from the vertex,
//               along with any UV morphs.
///////////////////////////////////////////////////////////////////
98
inline void EggVertex::clear_uv(void);
void EggVertex::clear_uv(basic_string< char > const &name);

1178 7 has_uvw 0 4 1994 18 EggVertex::has_uvw 0 1 168 374
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::has_uvw
//       Access: Published
//  Description: Returns true if the vertex has the named UV
//               coordinate triple, and the named UV coordinate triple is
//               3-d, false otherwise.
////////////////////////////////////////////////////////////////////
64
bool EggVertex::has_uvw(basic_string< char > const &name) const;

1179 7 get_uvw 0 4 1994 18 EggVertex::get_uvw 0 1 169 366
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::get_uvw
//       Access: Published
//  Description: Returns the named UV coordinate triple on the vertex.
//               It is an error to call this if has_uvw(name)
//               returned false.
////////////////////////////////////////////////////////////////////
75
LPoint3d const &EggVertex::get_uvw(basic_string< char > const &name) const;

1180 7 set_uvw 0 4 1994 18 EggVertex::set_uvw 0 1 170 437
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::set_uvw
//       Access: Published
//  Description: Sets the indicated UV coordinate triple on the vertex.
//               This replaces any UV coordinate pair or triple with
//               the same name already on the vertex, but preserves UV
//               morphs.
////////////////////////////////////////////////////////////////////
84
void EggVertex::set_uvw(basic_string< char > const &name, LPoint3d const &texCoord);

1181 10 get_uv_obj 0 4 1994 21 EggVertex::get_uv_obj 0 1 171 584
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::get_uv_obj
//       Access: Published
//  Description: Returns the named EggVertexUV object, which defines
//               both the UV coordinate pair for this name and the UV
//               morphs.  This object might be shared between multiple
//               vertices.  You should not attempt to modify this
//               object; instead, call modify_uv_object to return a
//               modifiable pointer.
////////////////////////////////////////////////////////////////////
81
EggVertexUV const *EggVertex::get_uv_obj(basic_string< char > const &name) const;

1182 13 modify_uv_obj 0 4 1994 24 EggVertex::modify_uv_obj 0 1 172 462
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::modify_uv_obj
//       Access: Published
//  Description: Returns a modifiable pointer to the named EggVertexUV
//               object, which defines both the UV coordinate pair for
//               this name and the UV morphs.  Returns NULL if there
//               is no such named UV object.
////////////////////////////////////////////////////////////////////
72
EggVertexUV *EggVertex::modify_uv_obj(basic_string< char > const &name);

1183 10 set_uv_obj 0 4 1994 21 EggVertex::set_uv_obj 0 1 173 400
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::set_uv_obj
//       Access: Published
//  Description: Sets the indicated EggVertexUV on the vertex.
//               This replaces any UV coordinate pair with the same
//               name already on the vertex, including UV morphs.
////////////////////////////////////////////////////////////////////
51
void EggVertex::set_uv_obj(EggVertexUV *vertex_uv);

1184 7 has_aux 0 4 1994 18 EggVertex::has_aux 0 2 174 175 605
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::has_aux
//       Access: Published
//  Description: Returns true if the vertex has any auxiliary
//               data, false otherwise.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggVertex::has_aux
//       Access: Published
//  Description: Returns true if the vertex has the named
//               auxiliary data quadruple.
////////////////////////////////////////////////////////////////////
108
inline bool EggVertex::has_aux(void) const;
bool EggVertex::has_aux(basic_string< char > const &name) const;

1185 9 clear_aux 0 4 1994 20 EggVertex::clear_aux 0 2 176 177 533
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::clear_aux
//       Access: Published
//  Description: Removes all auxiliary data from the vertex.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggVertex::clear_aux
//       Access: Published
//  Description: Removes the named auxiliary data from the vertex.
///////////////////////////////////////////////////////////////////
100
inline void EggVertex::clear_aux(void);
void EggVertex::clear_aux(basic_string< char > const &name);

1186 7 get_aux 0 4 1994 18 EggVertex::get_aux 0 1 178 370
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::get_aux
//       Access: Published
//  Description: Returns the named auxiliary data quadruple on the
//               vertex. It is an error to call this if has_aux(name)
//               returned false.
////////////////////////////////////////////////////////////////////
77
LVecBase4d const &EggVertex::get_aux(basic_string< char > const &name) const;

1187 7 set_aux 0 4 1994 18 EggVertex::set_aux 0 1 179 385
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::set_aux
//       Access: Published
//  Description: Sets the indicated auxiliary data quadruple on the
//               vertex. This replaces any auxiliary data with the
//               same name already on the vertex.
////////////////////////////////////////////////////////////////////
81
void EggVertex::set_aux(basic_string< char > const &name, LVecBase4d const &aux);

1188 11 get_aux_obj 0 4 1994 22 EggVertex::get_aux_obj 0 1 180 542
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::get_aux_obj
//       Access: Published
//  Description: Returns the named EggVertexAux object, which defines
//               the auxiliary data for this name. This object might
//               be shared between multiple vertices.  You should not
//               attempt to modify this object; instead, call
//               modify_aux_object to return a modifiable pointer.
////////////////////////////////////////////////////////////////////
83
EggVertexAux const *EggVertex::get_aux_obj(basic_string< char > const &name) const;

1189 14 modify_aux_obj 0 4 1994 25 EggVertex::modify_aux_obj 0 1 181 437
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::modify_aux_obj
//       Access: Published
//  Description: Returns a modifiable pointer to the named EggVertexAux
//               object, which defines the auxiliary data for
//               this name.  Returns NULL if there is no such
//               named UV object.
////////////////////////////////////////////////////////////////////
74
EggVertexAux *EggVertex::modify_aux_obj(basic_string< char > const &name);

1190 11 set_aux_obj 0 4 1994 22 EggVertex::set_aux_obj 0 1 182 377
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::set_aux_obj
//       Access: Published
//  Description: Sets the indicated EggVertexAux on the vertex.
//               This replaces any auxiliary data with the same
//               name already on the vertex.
////////////////////////////////////////////////////////////////////
54
void EggVertex::set_aux_obj(EggVertexAux *vertex_aux);

1191 9 get_index 0 4 1994 20 EggVertex::get_index 0 1 183 292
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::get_index
//       Access: Published
//  Description: Returns the index number of the vertex within its
//               pool.
////////////////////////////////////////////////////////////////////
44
inline int EggVertex::get_index(void) const;

1192 18 set_external_index 0 4 1994 29 EggVertex::set_external_index 0 1 184 822
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::set_external_index
//       Access: Published
//  Description: Sets a special index number that is associated with
//               the EggVertex (but is not written to the egg file).
//               This number is not interpreted by any egg code; it is
//               simply maintained along with the vertex.  It *is*
//               used to differentiate otherwise identical vertices in
//               EggVertexPool::create_unique_vertex(), however.
//
//               The intention of this number is as an aid for file
//               converters, to associate an EggVertex back to the
//               index number of the original source vertex.
////////////////////////////////////////////////////////////////////
62
inline void EggVertex::set_external_index(int external_index);

1193 18 get_external_index 0 4 1994 29 EggVertex::get_external_index 0 1 185 320
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::get_external_index
//       Access: Published
//  Description: Returns the number set by set_external_index().  See
//               set_external_index().
////////////////////////////////////////////////////////////////////
53
inline int EggVertex::get_external_index(void) const;

1194 19 set_external_index2 0 4 1994 30 EggVertex::set_external_index2 0 1 186 506
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::set_external_index2
//       Access: Published
//  Description: Similar to set_external_index(), but this is a
//               different number which may be used for a different
//               purpose by the calling code.  The egg library does
//               not assign any meaning to this number or use it in
//               any way.
////////////////////////////////////////////////////////////////////
64
inline void EggVertex::set_external_index2(int external_index2);

1195 19 get_external_index2 0 4 1994 30 EggVertex::get_external_index2 0 1 187 323
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::get_external_index2
//       Access: Published
//  Description: Returns the number set by set_external_index2().  See
//               set_external_index2().
////////////////////////////////////////////////////////////////////
54
inline int EggVertex::get_external_index2(void) const;

1196 5 write 0 4 1994 16 EggVertex::write 0 1 188 296
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::write
//       Access: Published
//  Description: Writes the vertex to the indicated output stream in
//               Egg format.
////////////////////////////////////////////////////////////////////
60
void EggVertex::write(ostream &out, int indent_level) const;

1197 15 sorts_less_than 0 4 1994 26 EggVertex::sorts_less_than 0 1 189 395
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::sorts_less_than
//       Access: Published
//  Description: An ordering operator to compare two vertices for
//               sorting order.  This imposes an arbitrary ordering
//               useful to identify unique vertices.
////////////////////////////////////////////////////////////////////
69
inline bool EggVertex::sorts_less_than(EggVertex const &other) const;

1198 10 compare_to 0 4 1994 21 EggVertex::compare_to 0 1 190 1165
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::compare_to
//       Access: Published
//  Description: An ordering operator to compare two vertices for
//               sorting order.  This imposes an arbitrary ordering
//               useful to identify unique vertices.
//
//               Group membership is not considered in this
//               comparison.  This is somewhat problematic, but cannot
//               easily be helped, because considering group
//               membership would make it difficult to add and remove
//               groups from vertices.  It also makes it impossible to
//               meaningfully compare with a concrete EggVertex object
//               (which cannot have group memberships).
//
//               However, this is not altogether bad, because two
//               vertices that are identical in all other properties
//               should generally also be identical in group
//               memberships, else the vertices will tend to fly apart
//               when the joints animate.
////////////////////////////////////////////////////////////////////
56
int EggVertex::compare_to(EggVertex const &other) const;

1199 19 get_num_local_coord 0 4 1994 30 EggVertex::get_num_local_coord 0 1 191 384
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::get_num_local_coord
//       Access: Published
//  Description: Returns the number of primitives that own this vertex
//               whose vertices are interpreted to be in a local
//               coordinate system.
////////////////////////////////////////////////////////////////////
47
int EggVertex::get_num_local_coord(void) const;

1200 20 get_num_global_coord 0 4 1994 31 EggVertex::get_num_global_coord 0 1 192 382
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::get_num_global_coord
//       Access: Published
//  Description: Returns the number of primitives that own this vertex
//               whose vertices are interpreted in the global
//               coordinate system.
////////////////////////////////////////////////////////////////////
48
int EggVertex::get_num_global_coord(void) const;

1201 9 transform 0 4 1994 20 EggVertex::transform 0 1 193 304
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::transform
//       Access: Published, Virtual
//  Description: Applies the indicated transformation matrix to the
//               vertex.
////////////////////////////////////////////////////////////////////
48
void EggVertex::transform(LMatrix4d const &mat);

1202 8 has_gref 0 4 1994 19 EggVertex::has_gref 0 1 194 312
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::has_gref
//       Access: Published
//  Description: Returns true if the indicated group references this
//               vertex, false otherwise.
////////////////////////////////////////////////////////////////////
54
bool EggVertex::has_gref(EggGroup const *group) const;

1203 15 copy_grefs_from 0 4 1994 26 EggVertex::copy_grefs_from 0 1 195 725
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::copy_grefs_from
//       Access: Published
//  Description: Copies all the group references from the other vertex
//               onto this one.  This assigns the current vertex to
//               exactly the same groups, with exactly the same
//               memberships, as the given one.
//
//               Warning: only an EggVertex allocated from the free
//               store may have groups assigned to it.  Do not attempt
//               to call this on a temporary concrete EggVertex
//               object; a core dump will certainly result.
////////////////////////////////////////////////////////////////////
56
void EggVertex::copy_grefs_from(EggVertex const &other);

1204 11 clear_grefs 0 4 1994 22 EggVertex::clear_grefs 0 1 196 325
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::clear_grefs
//       Access: Published
//  Description: Removes all group references from the vertex, so that
//               it is not assigned to any group.
////////////////////////////////////////////////////////////////////
34
void EggVertex::clear_grefs(void);

1205 8 has_pref 0 4 1994 19 EggVertex::has_pref 0 1 197 338
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::has_pref
//       Access: Published
//  Description: Returns the number of times the vertex appears in the
//               indicated primitive, or 0 if it does not appear.
////////////////////////////////////////////////////////////////////
56
int EggVertex::has_pref(EggPrimitive const *prim) const;

1206 19 test_gref_integrity 0 4 1994 30 EggVertex::test_gref_integrity 0 1 198 0
48
void EggVertex::test_gref_integrity(void) const;

1207 19 test_pref_integrity 0 4 1994 30 EggVertex::test_pref_integrity 0 1 199 0
48
void EggVertex::test_pref_integrity(void) const;

1208 6 output 0 4 1994 17 EggVertex::output 0 1 200 227
// _DEBUG

////////////////////////////////////////////////////////////////////
//     Function: EggVertex::output
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
43
void EggVertex::output(ostream &out) const;

1209 9 get_dxyzs 0 20 1994 20 EggVertex::get_dxyzs 0 1 206 67
getter for EggMorphList< EggMorph< LVector3d > > EggVertex::_dxyzs;
78
EggMorphList< EggMorph< LVector3d > > const &EggVertex::get_dxyzs(void) const;

1210 14 get_class_type 0 4 1994 25 EggVertex::get_class_type 0 1 201 0
50
static TypeHandle EggVertex::get_class_type(void);

1211 13 EggVertexPool 0 4 1995 28 EggVertexPool::EggVertexPool 0 2 207 208 683
////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::Copy Constructor
//       Access: Public
//  Description: Copying a vertex pool is of questionable value, since
//               it will copy all of the vertices and assign new
//               pointers to them all. There will be no polygons
//               referring to the new vertices.
////////////////////////////////////////////////////////////////////
120
EggVertexPool::EggVertexPool(basic_string< char > const &name);
EggVertexPool::EggVertexPool(EggVertexPool const &copy);

1212 10 has_vertex 0 4 1995 25 EggVertexPool::has_vertex 0 1 209 878
// Filename: eggVertexPool.I
// Created by:  drose (16Jan99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::has_vertex
//       Access: Public
//  Description: Returns true if the indicated vertex has been defined
//               in the vertex pool, false otherwise.  This does not
//               include forward references.
////////////////////////////////////////////////////////////////////
55
inline bool EggVertexPool::has_vertex(int index) const;

1213 20 has_forward_vertices 0 4 1995 35 EggVertexPool::has_forward_vertices 0 1 210 386
////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::has_forward_vertices
//       Access: Published
//  Description: Returns true if any vertices in the pool are
//               undefined forward-reference vertices, false if all
//               vertices are defined.
////////////////////////////////////////////////////////////////////
53
bool EggVertexPool::has_forward_vertices(void) const;

1214 20 has_defined_vertices 0 4 1995 35 EggVertexPool::has_defined_vertices 0 1 211 383
////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::has_defined_vertices
//       Access: Published
//  Description: Returns true if any vertices in the pool are
//               fully defined vertices, false if all vertices are
//               forward references.
////////////////////////////////////////////////////////////////////
53
bool EggVertexPool::has_defined_vertices(void) const;

1215 10 get_vertex 0 4 1995 25 EggVertexPool::get_vertex 0 1 212 411
// Returns NULL if there is no such vertex.

////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::get_vertex
//       Access: Public
//  Description: Returns the vertex in the pool with the indicated
//               index number, or NULL if no vertices have that index
//               number.
////////////////////////////////////////////////////////////////////
54
EggVertex *EggVertexPool::get_vertex(int index) const;

1216 11 operator [] 0 4 1995 26 EggVertexPool::operator [] 0 1 213 418
// Returns NULL if there is no such vertex.

////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::indexing operator
//       Access: Public
//  Description: Returns the vertex in the pool with the indicated
//               index number, or NULL if no vertices have that index
//               number.
////////////////////////////////////////////////////////////////////
62
inline EggVertex *EggVertexPool::operator [](int index) const;

1217 18 get_forward_vertex 0 4 1995 33 EggVertexPool::get_forward_vertex 0 1 214 679
// Returns a forward reference if there is no such vertex.

////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::get_forward_vertex
//       Access: Public
//  Description: Returns the vertex in the pool with the indicated
//               index number.  If there is not a vertex in the pool
//               with the indicated index number, creates a special
//               forward-reference EggVertex that has no data, on the
//               assumption that the vertex pool has not yet been
//               fully read and more data will be available later.
////////////////////////////////////////////////////////////////////
56
EggVertex *EggVertexPool::get_forward_vertex(int index);

1218 17 get_highest_index 0 4 1995 32 EggVertexPool::get_highest_index 0 1 215 425
// Returns 0 if the pool is empty.

////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::get_highest_index
//       Access: Public
//  Description: Returns the highest index number used by any vertex
//               in the pool (except forward references).  Returns -1
//               if the pool is empty.
////////////////////////////////////////////////////////////////////
49
int EggVertexPool::get_highest_index(void) const;

1219 17 set_highest_index 0 4 1995 32 EggVertexPool::set_highest_index 0 1 216 589
// Returns 0 if the pool is empty.

////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::set_highest_index
//       Access: Public
//  Description: Artificially changes the "highest index number", so
//               that a newly created vertex will begin at this number
//               plus 1.  This can be used to default a vertex pool to
//               start counting at 1 (or any other index number),
//               instead of the default of 0.  Use with caution.
////////////////////////////////////////////////////////////////////
57
void EggVertexPool::set_highest_index(int highest_index);

1220 18 get_num_dimensions 0 4 1995 33 EggVertexPool::get_num_dimensions 0 1 217 319
////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::get_num_dimensions
//       Access: Public
//  Description: Returns the maximum number of dimensions used by any
//               vertex in the pool.
////////////////////////////////////////////////////////////////////
50
int EggVertexPool::get_num_dimensions(void) const;

1221 11 has_normals 0 6 1995 26 EggVertexPool::has_normals 0 1 218 326
////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::has_normals
//       Access: Public
//  Description: Returns true if any vertex in the pool has a normal
//               defined, false if none of them do.
////////////////////////////////////////////////////////////////////
52
virtual bool EggVertexPool::has_normals(void) const;

1222 10 has_colors 0 4 1995 25 EggVertexPool::has_colors 0 1 219 324
////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::has_colors
//       Access: Public
//  Description: Returns true if any vertex in the pool has a color
//               defined, false if none of them do.
////////////////////////////////////////////////////////////////////
43
bool EggVertexPool::has_colors(void) const;

1223 19 has_nonwhite_colors 0 4 1995 34 EggVertexPool::has_nonwhite_colors 0 1 220 403
////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::has_nonwhite_colors
//       Access: Public
//  Description: Returns true if any vertex in the pool has a color
//               defined other than white, false if no vertices have
//               colors, or if all colors are white.
////////////////////////////////////////////////////////////////////
52
bool EggVertexPool::has_nonwhite_colors(void) const;

1224 19 check_overall_color 0 4 1995 34 EggVertexPool::check_overall_color 0 0 686
////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::check_overall_color
//       Access: Public
//  Description: Scans the vertex pool for different colors on
//               different vertices.  If all vertices are the same
//               color, sets has_overall_color to true and fills the
//               color into overall_color.  If no vertices have any
//               color, set has_overall_color to true and fills white
//               into overall_color.  If at least two vertices have
//               different colors, sets has_overall_color to false.
////////////////////////////////////////////////////////////////////
98
void EggVertexPool::check_overall_color(bool &has_overall_color, LVecBase4f &overall_color) const;

1225 7 has_uvs 0 4 1995 22 EggVertexPool::has_uvs 0 1 221 318
////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::has_uvs
//       Access: Public
//  Description: Returns true if any vertex in the pool has a uv
//               defined, false if none of them do.
////////////////////////////////////////////////////////////////////
40
bool EggVertexPool::has_uvs(void) const;

1226 7 has_aux 0 4 1995 22 EggVertexPool::has_aux 0 1 222 328
////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::has_aux
//       Access: Public
//  Description: Returns true if any vertex in the pool has
//               auxiliary data defined, false if none of them do.
////////////////////////////////////////////////////////////////////
40
bool EggVertexPool::has_aux(void) const;

1227 12 get_uv_names 0 4 1995 27 EggVertexPool::get_uv_names 0 1 223 654
////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::get_uv_names
//       Access: Public
//  Description: Returns the list of UV names that are defined by any
//               vertices in the pool, as well as the subset of UV
//               names that actually define 3-d texture coordinates
//               ("uvw_names").  Also returns the subset of UV/UVW
//               names that define a tangent and binormal.  It is the
//               user's responsibility to clear both vectors before
//               calling this method.
////////////////////////////////////////////////////////////////////
167
void EggVertexPool::get_uv_names(vector< basic_string< char > > &uv_names, vector< basic_string< char > > &uvw_names, vector< basic_string< char > > &tbn_names) const;

1228 13 get_aux_names 0 4 1995 28 EggVertexPool::get_aux_names 0 1 224 328
////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::get_aux_names
//       Access: Public
//  Description: Returns the list of auxiliary data names that are
//               defined by any vertices in the pool.
////////////////////////////////////////////////////////////////////
83
void EggVertexPool::get_aux_names(vector< basic_string< char > > &aux_names) const;

1229 4 size 0 4 1995 19 EggVertexPool::size 0 1 225 261
////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::size()
//       Access: Public
//  Description: Returns the number of vertices in the pool.
////////////////////////////////////////////////////////////////////
45
unsigned int EggVertexPool::size(void) const;

1230 10 add_vertex 0 4 1995 25 EggVertexPool::add_vertex 0 2 226 227 1344
// add_vertex() adds a freshly-allocated vertex.  It is up to the
// user to allocate the vertex.

////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::add_vertex
//       Access: Public
//  Description: Adds the indicated vertex to the pool.  It is an
//               error if the vertex is already a member of this or
//               any other pool.  The vertex must have been allocated
//               from the free store; its pointer will now be owned by
//               the vertex pool.  If the index number is supplied,
//               tries to assign that index number; it is an error if
//               the index number is already in use.
//
//               It is possible that a forward reference to this
//               vertex was requested in the past; if so, the data
//               from the supplied vertex is copied onto the forward
//               reference, which becomes the actual vertex.  In this
//               case, a different pointer is saved (and returned)
//               than the one actually passed in.  In the usual case,
//               however, the vertex pointer passed in is the one that
//               is saved in the vertex pool and returned from this
//               method.
////////////////////////////////////////////////////////////////////
74
EggVertex *EggVertexPool::add_vertex(EggVertex *vertex, int index = (-1));

1231 15 make_new_vertex 0 4 1995 30 EggVertexPool::make_new_vertex 0 5 228 229 230 231 232 2770
// make_new_vertex() allocates and returns a new vertex from the
// pool.

// make_new_vertex() allocates and returns a new vertex from the
// pool.

////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::make_new_vertex()
//       Access: Public
//  Description: Allocates and returns a new vertex from the pool.
//               This is one of three ways to add new vertices to a
//               vertex pool.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::make_new_vertex()
//       Access: Public
//  Description: Allocates and returns a new vertex from the pool.
//               This is one of three ways to add new vertices to a
//               vertex pool.
//
//               This flavor of make_new_vertex() explicitly sets the
//               vertex position as it is allocated.  It does not
//               attempt to share vertices.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::make_new_vertex()
//       Access: Public
//  Description: Allocates and returns a new vertex from the pool.
//               This is one of three ways to add new vertices to a
//               vertex pool.
//
//               This flavor of make_new_vertex() explicitly sets the
//               vertex position as it is allocated.  It does not
//               attempt to share vertices.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::make_new_vertex()
//       Access: Public
//  Description: Allocates and returns a new vertex from the pool.
//               This is one of three ways to add new vertices to a
//               vertex pool.
//
//               This flavor of make_new_vertex() explicitly sets the
//               vertex position as it is allocated.  It does not
//               attempt to share vertices.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::make_new_vertex()
//       Access: Public
//  Description: Allocates and returns a new vertex from the pool.
//               This is one of three ways to add new vertices to a
//               vertex pool.
//
//               This flavor of make_new_vertex() explicitly sets the
//               vertex position as it is allocated.  It does not
//               attempt to share vertices.
////////////////////////////////////////////////////////////////////
330
inline EggVertex *EggVertexPool::make_new_vertex(void);
inline EggVertex *EggVertexPool::make_new_vertex(double pos);
inline EggVertex *EggVertexPool::make_new_vertex(LPoint2d const &pos);
inline EggVertex *EggVertexPool::make_new_vertex(LPoint3d const &pos);
inline EggVertex *EggVertexPool::make_new_vertex(LPoint4d const &pos);

1232 20 create_unique_vertex 0 4 1995 35 EggVertexPool::create_unique_vertex 0 1 233 616
// create_unique_vertex() creates a new vertex if there is not
// already one identical to the indicated vertex, or returns the
// existing one if there is.

////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::create_unique_vertex
//       Access: Public
//  Description: Creates a new vertex in the pool that is a copy of
//               the indicated one and returns it.  If there is
//               already a vertex in the pool like the indicated one,
//               simply returns that one.
////////////////////////////////////////////////////////////////////
70
EggVertex *EggVertexPool::create_unique_vertex(EggVertex const &copy);

1233 20 find_matching_vertex 0 4 1995 35 EggVertexPool::find_matching_vertex 0 1 234 636
// create_unique_vertex() creates a new vertex if there is not
// already one identical to the indicated vertex, or returns the
// existing one if there is.

////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::find_matching_vertex
//       Access: Public
//  Description: If the EggVertexPool already has a vertex matching
//               the indicated vertex, returns it; otherwise, returns
//               NULL.  This is similar to create_unique_vertex()
//               except that a new vertex is never created.
////////////////////////////////////////////////////////////////////
70
EggVertex *EggVertexPool::find_matching_vertex(EggVertex const &copy);

1234 13 remove_vertex 0 4 1995 28 EggVertexPool::remove_vertex 0 1 235 342
////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::remove_vertex
//       Access: Public
//  Description: Removes the vertex from the pool.  It is an error if
//               the vertex is not already a member of the pool.
////////////////////////////////////////////////////////////////////
53
void EggVertexPool::remove_vertex(EggVertex *vertex);

1235 22 remove_unused_vertices 0 4 1995 37 EggVertexPool::remove_unused_vertices 0 1 236 591
////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::remove_unused_vertices
//       Access: Public
//  Description: Removes all vertices from the pool that are not
//               referenced by at least one primitive.  Also collapses
//               together equivalent vertices, and renumbers all
//               vertices after the operation so their indices are
//               consecutive, beginning at zero.  Returns the number
//               of vertices removed.
////////////////////////////////////////////////////////////////////
48
int EggVertexPool::remove_unused_vertices(void);

1236 27 add_unused_vertices_to_prim 0 4 1995 42 EggVertexPool::add_unused_vertices_to_prim 0 1 237 355
////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::add_unused_vertices_to_prim
//       Access: Public
//  Description: Adds all of the unused vertices in this vertex pool
//               to the indicated primitive, in ascending order.
////////////////////////////////////////////////////////////////////
68
void EggVertexPool::add_unused_vertices_to_prim(EggPrimitive *prim);

1237 9 transform 0 4 1995 24 EggVertexPool::transform 0 1 238 733
////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::transform
//       Access: Public
//  Description: Applies the indicated transformation matrix to all
//               the vertices.  However, vertices that are attached to
//               primitives that believe their vertices are in a local
//               coordinate system are transformed only by the scale
//               and rotation component.  If a vertex happens to be
//               attached both to a local and a global primitive, and
//               the transformation includes a translation component,
//               the vertex will be split.
////////////////////////////////////////////////////////////////////
52
void EggVertexPool::transform(LMatrix4d const &mat);

1238 22 sort_by_external_index 0 4 1995 37 EggVertexPool::sort_by_external_index 0 1 239 457
////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::sort_by_external_index
//       Access: Published
//  Description: Re-orders (and re-numbers) the vertices in this
//               vertex pool so that they appear in increasing order
//               by the optional external_index that has been assigned
//               to each vertex.
////////////////////////////////////////////////////////////////////
49
void EggVertexPool::sort_by_external_index(void);

1239 14 get_class_type 0 4 1995 29 EggVertexPool::get_class_type 0 1 240 0
54
static TypeHandle EggVertexPool::get_class_type(void);

1240 12 EggGroupNode 0 4 1996 26 EggGroupNode::EggGroupNode 0 3 241 242 243 229
////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::Copy constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
122
EggGroupNode::EggGroupNode(basic_string< char > const &name = (""));
EggGroupNode::EggGroupNode(EggGroupNode const &copy);

1241 10 operator = 0 4 1996 24 EggGroupNode::operator = 0 1 244 237
////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::Copy assignment operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
65
EggGroupNode &EggGroupNode::operator =(EggGroupNode const &copy);

1242 5 empty 0 4 1996 19 EggGroupNode::empty 0 1 245 218
////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::empty
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
37
bool EggGroupNode::empty(void) const;

1243 4 size 0 4 1996 18 EggGroupNode::size 0 1 246 217
////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::size
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
44
unsigned int EggGroupNode::size(void) const;

1244 5 clear 0 4 1996 19 EggGroupNode::clear 0 1 247 218
////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::clear
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
31
void EggGroupNode::clear(void);

1245 15 get_first_child 0 4 1996 29 EggGroupNode::get_first_child 0 1 248 914
// This is an alternate way to traverse the list of children.  It is
// mainly provided for scripting code, which can't use the iterators
// defined above (they don't export through interrogate very well).
// These are, of course, non-thread-safe.

////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::get_first_child
//       Access: Published
//  Description: Returns the first child in the group's list of
//               children, or NULL if the list of children is empty.
//               Can be used with get_next_child() to return the
//               complete list of children without using the iterator
//               class; however, this is non-thread-safe, and so is
//               not recommended except for languages other than C++
//               which cannot use the iterators.
////////////////////////////////////////////////////////////////////
45
EggNode *EggGroupNode::get_first_child(void);

1246 14 get_next_child 0 4 1996 28 EggGroupNode::get_next_child 0 1 249 1106
// This is an alternate way to traverse the list of children.  It is
// mainly provided for scripting code, which can't use the iterators
// defined above (they don't export through interrogate very well).
// These are, of course, non-thread-safe.

////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::get_next_child
//       Access: Published
//  Description: Returns the next child in the group's list of
//               children since the last call to get_first_child() or
//               get_next_child(), or NULL if the last child has been
//               returned.  Can be used with get_first_child() to
//               return the complete list of children without using
//               the iterator class; however, this is non-thread-safe,
//               and so is not recommended except for languages other
//               than C++ which cannot use the iterators.
//
//               It is an error to call this without previously
//               calling get_first_child().
////////////////////////////////////////////////////////////////////
44
EggNode *EggGroupNode::get_next_child(void);

1247 12 get_children 0 4 1996 26 EggGroupNode::get_children 0 1 250 0
49
PyObject *EggGroupNode::get_children(void) const;

1248 9 add_child 0 4 1996 23 EggGroupNode::add_child 0 1 251 385
////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::add_child
//       Access: Published
//  Description: Adds the indicated child to the group and returns it.
//               If the child node is already a child of some other
//               node, removes it first.
////////////////////////////////////////////////////////////////////
48
EggNode *EggGroupNode::add_child(EggNode *node);

1249 12 remove_child 0 4 1996 26 EggGroupNode::remove_child 0 1 252 398
////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::remove_child
//       Access: Published
//  Description: Removes the indicated child node from the group and
//               returns it.  If the child was not already in the
//               group, does nothing and returns NULL.
////////////////////////////////////////////////////////////////////
63
PointerTo< EggNode > EggGroupNode::remove_child(EggNode *node);

1250 14 steal_children 0 4 1996 28 EggGroupNode::steal_children 0 1 253 416
////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::steal_children
//       Access: Published
//  Description: Moves all the children from the other node to this
//               one.  This is especially useful because the group
//               node copy assignment operator does not copy children.
////////////////////////////////////////////////////////////////////
55
void EggGroupNode::steal_children(EggGroupNode &other);

1251 10 find_child 0 4 1996 24 EggGroupNode::find_child 0 1 254 410
////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::find_child
//       Access: Published
//  Description: Returns the child of this node whose name is the
//               indicated string, or NULL if there is no child of
//               this node by that name.  Does not search recursively.
////////////////////////////////////////////////////////////////////
74
EggNode *EggGroupNode::find_child(basic_string< char > const &name) const;

1252 22 has_absolute_pathnames 0 4 1996 36 EggGroupNode::has_absolute_pathnames 0 1 255 416
////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::has_absolute_pathnames
//       Access: Published
//  Description: Returns true if any nodes at this level and below
//               include a reference to a file via an absolute
//               pathname, or false if all references are relative.
////////////////////////////////////////////////////////////////////
54
bool EggGroupNode::has_absolute_pathnames(void) const;

1253 17 resolve_filenames 0 4 1996 31 EggGroupNode::resolve_filenames 0 1 256 472
////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::resolve_filenames
//       Access: Published
//  Description: Walks the tree and attempts to resolve any filenames
//               encountered.  This looks up filenames along the
//               specified search path; it does not automatically
//               search the model_path for missing files.
////////////////////////////////////////////////////////////////////
68
void EggGroupNode::resolve_filenames(DSearchPath const &searchpath);

1254 15 force_filenames 0 4 1996 29 EggGroupNode::force_filenames 0 1 257 452
////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::force_filenames
//       Access: Published
//  Description: Similar to resolve_filenames, but each non-absolute
//               filename encountered is arbitrarily taken to be in
//               the indicated directory, whether or not the so-named
//               filename exists.
////////////////////////////////////////////////////////////////////
62
void EggGroupNode::force_filenames(Filename const &directory);

1255 23 reverse_vertex_ordering 0 4 1996 37 EggGroupNode::reverse_vertex_ordering 0 1 258 393
////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::reverse_vertex_ordering
//       Access: Published
//  Description: Reverses the vertex ordering of all polygons defined
//               at this node and below.  Does not change the surface
//               normals, if any.
////////////////////////////////////////////////////////////////////
49
void EggGroupNode::reverse_vertex_ordering(void);

1256 24 recompute_vertex_normals 0 4 1996 38 EggGroupNode::recompute_vertex_normals 0 2 259 260 1132
////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::recompute_vertex_normals
//       Access: Published
//  Description: Recomputes all the vertex normals for polygon
//               geometry at this group node and below so that they
//               accurately reflect the vertex positions.  A shared
//               edge between two polygons (even in different groups)
//               is considered smooth if the angle between the two
//               edges is less than threshold degrees.
//
//               This function also removes degenerate polygons that
//               do not have enough vertices to define a normal.  It
//               does not affect normals for other kinds of primitives
//               like Nurbs or Points.
//
//               This function does not remove or adjust vertices in
//               the vertex pool; it only adds new vertices with the
//               correct normals.  Thus, it is a good idea to call
//               remove_unused_vertices() after calling this.
////////////////////////////////////////////////////////////////////
98
void EggGroupNode::recompute_vertex_normals(double threshold, CoordinateSystem cs = (CS_default));

1257 25 recompute_polygon_normals 0 4 1996 39 EggGroupNode::recompute_polygon_normals 0 2 261 262 1077
////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::recompute_polygon_normals
//       Access: Published
//  Description: Recomputes all the polygon normals for polygon
//               geometry at this group node and below so that they
//               accurately reflect the vertex positions.  Normals are
//               removed from the vertices and defined only on
//               polygons, giving the geometry a faceted appearance.
//
//               This function also removes degenerate polygons that
//               do not have enough vertices to define a normal.  It
//               does not affect normals for other kinds of primitives
//               like Nurbs or Points.
//
//               This function does not remove or adjust vertices in
//               the vertex pool; it only adds new vertices with the
//               normals removed.  Thus, it is a good idea to call
//               remove_unused_vertices() after calling this.
////////////////////////////////////////////////////////////////////
81
void EggGroupNode::recompute_polygon_normals(CoordinateSystem cs = (CS_default));

1258 13 strip_normals 0 4 1996 27 EggGroupNode::strip_normals 0 1 263 606
////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::strip_normals
//       Access: Published
//  Description: Removes all normals from primitives, and the vertices
//               they reference, at this node and below.
//
//               This function does not remove or adjust vertices in
//               the vertex pool; it only adds new vertices with the
//               normal removed.  Thus, it is a good idea to call
//               remove_unused_vertices() after calling this.
////////////////////////////////////////////////////////////////////
39
void EggGroupNode::strip_normals(void);

1259 26 recompute_tangent_binormal 0 4 1996 40 EggGroupNode::recompute_tangent_binormal 0 2 264 265 1603
////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::recompute_tangent_binormal
//       Access: Published
//  Description: This function recomputes the tangent and binormal for
//               the named texture coordinate set for all vertices at
//               this level and below.  Use the empty string for the
//               default texture coordinate set.
//
//               It is necessary for each vertex to already have a
//               normal (or at least a polygon normal), as well as a
//               texture coordinate in the named texture coordinate
//               set, before calling this function.  You might precede
//               this with recompute_vertex_normals() to ensure that
//               the normals exist.
//
//               Like recompute_vertex_normals(), this function does
//               not remove or adjust vertices in the vertex pool; it
//               only adds new vertices with the new tangents and
//               binormals computed.  Thus, it is a good idea to call
//               remove_unused_vertices() after calling this.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::recompute_tangent_binormal
//       Access: Published
//  Description: This function recomputes the tangent and binormal for
//               the named texture coordinate sets.
//               Returns true if anything was done.
////////////////////////////////////////////////////////////////////
166
bool EggGroupNode::recompute_tangent_binormal(GlobPattern const &uv_name);
bool EggGroupNode::recompute_tangent_binormal(vector< basic_string< char > > const &names);

1260 31 recompute_tangent_binormal_auto 0 4 1996 45 EggGroupNode::recompute_tangent_binormal_auto 0 1 266 421
////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::recompute_tangent_binormal_auto
//       Access: Published
//  Description: This function recomputes the tangent and binormal for
//               any texture coordinate set that affects a normal map.
//               Returns true if anything was done.
////////////////////////////////////////////////////////////////////
57
bool EggGroupNode::recompute_tangent_binormal_auto(void);

1261 20 triangulate_polygons 0 4 1996 34 EggGroupNode::triangulate_polygons 0 1 267 772
////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::triangulate_polygons
//       Access: Published
//  Description: Replace all higher-order polygons at this point in
//               the scene graph and below with triangles.  Returns
//               the total number of new triangles produced, less
//               degenerate polygons removed.
//
//               If flags contains T_polygon and T_convex, both
//               concave and convex polygons will be subdivided into
//               triangles; with only T_polygon, only concave polygons
//               will be subdivided, and convex polygons will be
//               largely unchanged.
////////////////////////////////////////////////////////////////////
50
int EggGroupNode::triangulate_polygons(int flags);

1262 14 mesh_triangles 0 4 1996 28 EggGroupNode::mesh_triangles 0 1 268 318
////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::mesh_triangles
//       Access: Published
//  Description: Combine triangles together into triangle strips, at
//               this group and below.
////////////////////////////////////////////////////////////////////
45
void EggGroupNode::mesh_triangles(int flags);

1263 21 make_point_primitives 0 4 1996 35 EggGroupNode::make_point_primitives 0 1 269 382
////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::make_point_primitives
//       Access: Published
//  Description: Creates PointLight primitives to reference any
//               otherwise unreferences vertices discovered in this
//               group or below.
////////////////////////////////////////////////////////////////////
47
void EggGroupNode::make_point_primitives(void);

1264 12 rename_nodes 0 4 1996 26 EggGroupNode::rename_nodes 0 1 270 260
////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::rename_nodes
//       Access: Published
//  Description: Rename by stripping out the prefix
////////////////////////////////////////////////////////////////////
90
int EggGroupNode::rename_nodes(vector< basic_string< char > > strip_prefix, bool recurse);

1265 22 remove_unused_vertices 0 4 1996 36 EggGroupNode::remove_unused_vertices 0 1 271 1111
////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::remove_unused_vertices
//       Access: Published
//  Description: Removes all vertices from VertexPools within this
//               group or below that are not referenced by at least
//               one primitive.  Also collapses together equivalent
//               vertices, and renumbers all vertices after the
//               operation so their indices are consecutive, beginning
//               at zero.  Returns the total number of vertices
//               removed.
//
//               Note that this operates on the VertexPools within
//               this group level, without respect to primitives that
//               reference these vertices (unlike other functions like
//               strip_normals()).  It is therefore most useful to
//               call this on the EggData root, rather than on a
//               subgroup within the hierarchy, since a VertexPool may
//               appear anywhere in the hierarchy.
////////////////////////////////////////////////////////////////////
55
int EggGroupNode::remove_unused_vertices(bool recurse);

1266 25 remove_invalid_primitives 0 4 1996 39 EggGroupNode::remove_invalid_primitives 0 1 272 453
////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::remove_invalid_primitives
//       Access: Published
//  Description: Removes primitives at this level and below which
//               appear to be degenerate; e.g. polygons with fewer
//               than 3 vertices, etc.  Returns the number of
//               primitives removed.
////////////////////////////////////////////////////////////////////
58
int EggGroupNode::remove_invalid_primitives(bool recurse);

1267 23 clear_connected_shading 0 4 1996 37 EggGroupNode::clear_connected_shading 0 1 273 635
////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::clear_connected_shading
//       Access: Published
//  Description: Resets the connected_shading information on all
//               primitives at this node and below, so that it may be
//               accurately rederived by the next call to
//               get_connected_shading().
//
//               It may be a good idea to call
//               remove_unused_vertices() as well, to establish the
//               correct connectivity between common vertices.
////////////////////////////////////////////////////////////////////
49
void EggGroupNode::clear_connected_shading(void);

1268 21 get_connected_shading 0 4 1996 35 EggGroupNode::get_connected_shading 0 1 274 463
////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::get_connected_shading
//       Access: Published
//  Description: Queries the connected_shading information on all
//               primitives at this node and below, to ensure that it
//               has been completely filled in before we start mucking
//               around with vertices.
////////////////////////////////////////////////////////////////////
47
void EggGroupNode::get_connected_shading(void);

1269 16 unify_attributes 0 4 1996 30 EggGroupNode::unify_attributes 0 1 275 1614
////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::unify_attributes
//       Access: Published
//  Description: Applies per-vertex normal and color to all vertices,
//               if they are in fact per-vertex (and different for
//               each vertex), or moves them to the primitive if they
//               are all the same.
//
//               After this call, either the primitive will have
//               normals or its vertices will, but not both.  Ditto
//               for colors.
//
//               If use_connected_shading is true, each polygon is
//               considered in conjunction with all connected
//               polygons; otherwise, each polygon is considered
//               individually.
//
//               If allow_per_primitive is false, S_per_face or
//               S_overall will treated like S_per_vertex: normals and
//               colors will always be assigned to the vertices.  In
//               this case, there will never be per-primitive colors
//               or normals after this call returns.  On the other
//               hand, if allow_per_primitive is true, then S_per_face
//               means that normals and colors should be assigned to
//               the primitives, and removed from the vertices, as
//               described above.
//
//               This may create redundant vertices in the vertex
//               pool, so it may be a good idea to follow this up with
//               remove_unused_vertices().
////////////////////////////////////////////////////////////////////
104
void EggGroupNode::unify_attributes(bool use_connected_shading, bool allow_per_primitive, bool recurse);

1270 20 apply_last_attribute 0 4 1996 34 EggGroupNode::apply_last_attribute 0 1 276 768
////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::apply_last_attribute
//       Access: Published
//  Description: Sets the last vertex of the triangle (or each
//               component) to the primitive normal and/or color, if
//               the primitive is flat-shaded.  This reflects the
//               OpenGL convention of storing flat-shaded properties on
//               the last vertex, although it is not usually a
//               convention in Egg.
//
//               This may create redundant vertices in the vertex
//               pool, so it may be a good idea to follow this up with
//               remove_unused_vertices().
////////////////////////////////////////////////////////////////////
54
void EggGroupNode::apply_last_attribute(bool recurse);

1271 21 apply_first_attribute 0 4 1996 35 EggGroupNode::apply_first_attribute 0 1 277 772
////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::apply_first_attribute
//       Access: Published
//  Description: Sets the first vertex of the triangle (or each
//               component) to the primitive normal and/or color, if
//               the primitive is flat-shaded.  This reflects the
//               DirectX convention of storing flat-shaded properties on
//               the first vertex, although it is not usually a
//               convention in Egg.
//
//               This may create redundant vertices in the vertex
//               pool, so it may be a good idea to follow this up with
//               remove_unused_vertices().
////////////////////////////////////////////////////////////////////
55
void EggGroupNode::apply_first_attribute(bool recurse);

1272 25 post_apply_flat_attribute 0 4 1996 39 EggGroupNode::post_apply_flat_attribute 0 1 278 490
////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::post_apply_flat_attribute
//       Access: Published
//  Description: Intended as a followup to apply_last_attribute(),
//               this also sets an attribute on the first vertices of
//               the primitive, if they don't already have an
//               attribute set, just so they end up with *something*.
////////////////////////////////////////////////////////////////////
59
void EggGroupNode::post_apply_flat_attribute(bool recurse);

1273 14 has_primitives 0 6 1996 28 EggGroupNode::has_primitives 0 1 279 380
////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::has_primitives
//       Access: Published, Virtual
//  Description: Returns true if there are any primitives
//               (e.g. polygons) defined within this group or below,
//               false otherwise.
////////////////////////////////////////////////////////////////////
54
virtual bool EggGroupNode::has_primitives(void) const;

1274 20 joint_has_primitives 0 6 1996 34 EggGroupNode::joint_has_primitives 0 1 280 416
////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::joint_has_primitives
//       Access: Published, Virtual
//  Description: Returns true if there are any primitives
//               (e.g. polygons) defined within this group or below,
//               but the search does not include nested joints.
////////////////////////////////////////////////////////////////////
60
virtual bool EggGroupNode::joint_has_primitives(void) const;

1275 11 has_normals 0 6 1996 25 EggGroupNode::has_normals 0 1 281 417
////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::has_normals
//       Access: Published, Virtual
//  Description: Returns true if any of the primitives (e.g. polygons)
//               defined within this group or below have either face
//               or vertex normals defined, false otherwise.
////////////////////////////////////////////////////////////////////
51
virtual bool EggGroupNode::has_normals(void) const;

1276 8 is_right 0 4 1996 22 EggGroupNode::is_right 0 1 282 765
// Filename: eggGroupNode.I
// Created by:  drose (16Jan99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::is_right
//       Access: Private, Static
//  Description: Returns true if the 2-d v1 is to the right of v2.
////////////////////////////////////////////////////////////////////
84
static inline bool EggGroupNode::is_right(LVector2d const &v1, LVector2d const &v2);

1277 14 get_class_type 0 4 1996 28 EggGroupNode::get_class_type 0 1 283 0
53
static TypeHandle EggGroupNode::get_class_type(void);

1278 13 EggRenderMode 0 4 1998 28 EggRenderMode::EggRenderMode 0 2 284 285 940
// Filename: eggRenderMode.I
// Created by:  drose (20Jan99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
99
EggRenderMode::EggRenderMode(void);
inline EggRenderMode::EggRenderMode(EggRenderMode const &copy);

1279 10 operator = 0 4 1998 25 EggRenderMode::operator = 0 1 286 235
////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::Copy assignment operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
68
EggRenderMode &EggRenderMode::operator =(EggRenderMode const &copy);

1280 5 write 0 4 1998 20 EggRenderMode::write 0 1 287 301
////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::write
//       Access: Public
//  Description: Writes the attributes to the indicated output stream in
//               Egg format.
////////////////////////////////////////////////////////////////////
64
void EggRenderMode::write(ostream &out, int indent_level) const;

1281 14 set_alpha_mode 0 4 1998 29 EggRenderMode::set_alpha_mode 0 1 288 849
////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::set_alpha_mode
//       Access: Public
//  Description: Specifies precisely how the transparency for this
//               geometry should be achieved, or if it should be used.
//               The default, AM_unspecified, is to use transparency
//               if the geometry has a color whose alpha value is
//               non-1, or if it has a four-channel texture applied;
//               otherwise, AM_on forces transparency on, and AM_off
//               forces it off.  The other flavors of transparency are
//               specific ways to turn on transparency, which may or
//               may not be supported by a particular rendering
//               backend.
////////////////////////////////////////////////////////////////////
73
inline void EggRenderMode::set_alpha_mode(EggRenderMode::AlphaMode mode);

1282 14 get_alpha_mode 0 4 1998 29 EggRenderMode::get_alpha_mode 0 1 289 357
////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::get_alpha_mode
//       Access: Public
//  Description: Returns the alpha mode that was set, or
//               AM_unspecified if nothing was set.  See
//               set_alpha_mode().
////////////////////////////////////////////////////////////////////
74
inline EggRenderMode::AlphaMode EggRenderMode::get_alpha_mode(void) const;

1283 20 set_depth_write_mode 0 4 1998 35 EggRenderMode::set_depth_write_mode 0 1 290 412
////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::set_depth_write_mode
//       Access: Public
//  Description: Specifies whether writes should be made to the depth
//               buffer (assuming the rendering backend provides a
//               depth buffer) when rendering this geometry.
////////////////////////////////////////////////////////////////////
84
inline void EggRenderMode::set_depth_write_mode(EggRenderMode::DepthWriteMode mode);

1284 20 get_depth_write_mode 0 4 1998 35 EggRenderMode::get_depth_write_mode 0 1 291 376
////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::get_depth_write_mode
//       Access: Public
//  Description: Returns the depth_write mode that was set, or
//               DWM_unspecified if nothing was set.  See
//               set_depth_write_mode().
////////////////////////////////////////////////////////////////////
85
inline EggRenderMode::DepthWriteMode EggRenderMode::get_depth_write_mode(void) const;

1285 19 set_depth_test_mode 0 4 1998 34 EggRenderMode::set_depth_test_mode 0 1 292 521
////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::set_depth_test_mode
//       Access: Public
//  Description: Specifies whether this geometry should be tested
//               against the depth buffer when it is drawn (assuming
//               the rendering backend provides a depth buffer).  Note
//               that this is different, and independent from, the
//               depth_write mode.
////////////////////////////////////////////////////////////////////
82
inline void EggRenderMode::set_depth_test_mode(EggRenderMode::DepthTestMode mode);

1286 19 get_depth_test_mode 0 4 1998 34 EggRenderMode::get_depth_test_mode 0 1 293 373
////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::get_depth_test_mode
//       Access: Public
//  Description: Returns the depth_test mode that was set, or
//               DTM_unspecified if nothing was set.  See
//               set_depth_test_mode().
////////////////////////////////////////////////////////////////////
83
inline EggRenderMode::DepthTestMode EggRenderMode::get_depth_test_mode(void) const;

1287 19 set_visibility_mode 0 4 1998 34 EggRenderMode::set_visibility_mode 0 1 294 530
////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::set_visibility_mode
//       Access: Public
//  Description: Specifies whether this geometry is to be considered
//               normally visible, or hidden.  If it is hidden, it is
//               either not loaded into the scene graph at all, or
//               loaded as a "stashed" node, according to the setting
//               of egg-suppress-hidden.
////////////////////////////////////////////////////////////////////
83
inline void EggRenderMode::set_visibility_mode(EggRenderMode::VisibilityMode mode);

1288 19 get_visibility_mode 0 4 1998 34 EggRenderMode::get_visibility_mode 0 1 295 372
////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::get_visibility_mode
//       Access: Public
//  Description: Returns the visibility mode that was set, or
//               VM_unspecified if nothing was set.  See
//               set_visibility_mode().
////////////////////////////////////////////////////////////////////
84
inline EggRenderMode::VisibilityMode EggRenderMode::get_visibility_mode(void) const;

1289 16 set_depth_offset 0 4 1998 31 EggRenderMode::set_depth_offset 0 1 296 459
////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::set_depth_offset
//       Access: Public
//  Description: Sets the "depth-offset" flag associated with this
//               object.  This adds or subtracts an offset bias
//               into the depth buffer. See also DepthOffsetAttrib
//               and NodePath::set_depth_offset().
////////////////////////////////////////////////////////////////////
54
inline void EggRenderMode::set_depth_offset(int bias);

1290 16 get_depth_offset 0 4 1998 31 EggRenderMode::get_depth_offset 0 1 297 336
////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::get_depth_offset
//       Access: Public
//  Description: Returns the "depth-offset" flag as set for this
//               particular object.  See set_depth_offset().
////////////////////////////////////////////////////////////////////
55
inline int EggRenderMode::get_depth_offset(void) const;

1291 16 has_depth_offset 0 4 1998 31 EggRenderMode::has_depth_offset 0 1 298 348
////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::has_depth_offset
//       Access: Public
//  Description: Returns true if the depth-offset flag has been set for
//               this particular object.  See set_depth_offset().
////////////////////////////////////////////////////////////////////
56
inline bool EggRenderMode::has_depth_offset(void) const;

1292 18 clear_depth_offset 0 4 1998 33 EggRenderMode::clear_depth_offset 0 1 299 330
////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::clear_depth_offset
//       Access: Public
//  Description: Removes the depth-offset flag from this particular
//               object.  See set_depth_offset().
////////////////////////////////////////////////////////////////////
52
inline void EggRenderMode::clear_depth_offset(void);

1293 14 set_draw_order 0 4 1998 29 EggRenderMode::set_draw_order 0 1 300 534
////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::set_draw_order
//       Access: Public
//  Description: Sets the "draw-order" flag associated with this
//               object.  This specifies a particular order in which
//               objects of this type should be drawn, within the
//               specified bin.  If a bin is not explicitly specified,
//               "fixed" is used.  See also set_bin().
////////////////////////////////////////////////////////////////////
53
inline void EggRenderMode::set_draw_order(int order);

1294 14 get_draw_order 0 4 1998 29 EggRenderMode::get_draw_order 0 1 301 330
////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::get_draw_order
//       Access: Public
//  Description: Returns the "draw-order" flag as set for this
//               particular object.  See set_draw_order().
////////////////////////////////////////////////////////////////////
53
inline int EggRenderMode::get_draw_order(void) const;

1295 14 has_draw_order 0 4 1998 29 EggRenderMode::has_draw_order 0 1 302 342
////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::has_draw_order
//       Access: Public
//  Description: Returns true if the draw-order flag has been set for
//               this particular object.  See set_draw_order().
////////////////////////////////////////////////////////////////////
54
inline bool EggRenderMode::has_draw_order(void) const;

1296 16 clear_draw_order 0 4 1998 31 EggRenderMode::clear_draw_order 0 1 303 324
////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::clear_draw_order
//       Access: Public
//  Description: Removes the draw-order flag from this particular
//               object.  See set_draw_order().
////////////////////////////////////////////////////////////////////
50
inline void EggRenderMode::clear_draw_order(void);

1297 7 set_bin 0 4 1998 22 EggRenderMode::set_bin 0 1 304 691
////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::set_bin
//       Access: Public
//  Description: Sets the "bin" string for this particular object.
//               This names a particular bin in which the object
//               should be rendered.  The exact meaning of a bin is
//               implementation defined, but generally a GeomBin
//               matching each bin name must also be specifically
//               added to the rendering engine (e.g. the
//               CullTraverser) in use for this to work.  See also
//               set_draw_order().
////////////////////////////////////////////////////////////////////
68
inline void EggRenderMode::set_bin(basic_string< char > const &bin);

1298 7 get_bin 0 4 1998 22 EggRenderMode::get_bin 0 1 305 326
////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::get_bin
//       Access: Public
//  Description: Returns the bin name that has been set for this
//               particular object, if any.  See set_bin().
////////////////////////////////////////////////////////////////////
63
inline basic_string< char > EggRenderMode::get_bin(void) const;

1299 7 has_bin 0 4 1998 22 EggRenderMode::has_bin 0 1 306 319
////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::has_bin
//       Access: Public
//  Description: Returns true if a bin name has been set for this
//               particular object.  See set_bin().
////////////////////////////////////////////////////////////////////
47
inline bool EggRenderMode::has_bin(void) const;

1300 9 clear_bin 0 4 1998 24 EggRenderMode::clear_bin 0 1 307 315
////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::clear_bin
//       Access: Public
//  Description: Removes the bin name that was set for this particular
//               object.  See set_bin().
////////////////////////////////////////////////////////////////////
43
inline void EggRenderMode::clear_bin(void);

1301 11 operator == 0 4 1998 26 EggRenderMode::operator == 0 1 308 264
// Comparison operators are handy.

////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::Equality Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
66
bool EggRenderMode::operator ==(EggRenderMode const &other) const;

1302 11 operator != 0 4 1998 26 EggRenderMode::operator != 0 1 309 266
// Comparison operators are handy.

////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::Inequality Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
73
inline bool EggRenderMode::operator !=(EggRenderMode const &other) const;

1303 10 operator < 0 4 1998 25 EggRenderMode::operator < 0 1 310 228
////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::Ordering Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
65
bool EggRenderMode::operator <(EggRenderMode const &other) const;

1304 17 string_alpha_mode 0 4 1998 32 EggRenderMode::string_alpha_mode 0 1 311 413
////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::string_alpha_mode
//       Access: Public
//  Description: Returns the AlphaMode value associated with the given
//               string representation, or AM_unspecified if the string
//               does not match any known AlphaMode value.
////////////////////////////////////////////////////////////////////
101
static EggRenderMode::AlphaMode EggRenderMode::string_alpha_mode(basic_string< char > const &string);

1305 23 string_depth_write_mode 0 4 1998 38 EggRenderMode::string_depth_write_mode 0 1 312 447
////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::string_depth_write_mode
//       Access: Public
//  Description: Returns the DepthWriteMode value associated with the
//               given string representation, or DWM_unspecified if
//               the string does not match any known DepthWriteMode
//               value.
////////////////////////////////////////////////////////////////////
112
static EggRenderMode::DepthWriteMode EggRenderMode::string_depth_write_mode(basic_string< char > const &string);

1306 22 string_depth_test_mode 0 4 1998 37 EggRenderMode::string_depth_test_mode 0 1 313 444
////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::string_depth_test_mode
//       Access: Public
//  Description: Returns the DepthTestMode value associated with the
//               given string representation, or DTM_unspecified if
//               the string does not match any known DepthTestMode
//               value.
////////////////////////////////////////////////////////////////////
110
static EggRenderMode::DepthTestMode EggRenderMode::string_depth_test_mode(basic_string< char > const &string);

1307 22 string_visibility_mode 0 4 1998 37 EggRenderMode::string_visibility_mode 0 1 314 437
////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::string_visibility_mode
//       Access: Public
//  Description: Returns the HiddenMode value associated with the
//               given string representation, or VM_unspecified if
//               the string does not match any known HiddenMode
//               value.
////////////////////////////////////////////////////////////////////
111
static EggRenderMode::VisibilityMode EggRenderMode::string_visibility_mode(basic_string< char > const &string);

1308 14 get_class_type 0 4 1998 29 EggRenderMode::get_class_type 0 1 315 0
54
static TypeHandle EggRenderMode::get_class_type(void);

1309 14 ~EggRenderMode 0 4 1998 29 EggRenderMode::~EggRenderMode 0 0 0
36
EggRenderMode::~EggRenderMode(void);

1310 12 EggTransform 0 4 2003 26 EggTransform::EggTransform 0 2 316 317 449
////////////////////////////////////////////////////////////////////
//     Function: EggTransform::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggTransform::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
87
EggTransform::EggTransform(void);
EggTransform::EggTransform(EggTransform const &copy);

1311 10 operator = 0 4 2003 24 EggTransform::operator = 0 1 318 234
////////////////////////////////////////////////////////////////////
//     Function: EggTransform::Copy assignment operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
65
EggTransform &EggTransform::operator =(EggTransform const &copy);

1312 13 ~EggTransform 0 6 2003 27 EggTransform::~EggTransform 0 0 229
////////////////////////////////////////////////////////////////////
//     Function: EggTransform::Destructor
//       Access: Public, Virtual
//  Description:
////////////////////////////////////////////////////////////////////
42
virtual EggTransform::~EggTransform(void);

1313 15 clear_transform 0 4 2003 29 EggTransform::clear_transform 0 1 319 266
////////////////////////////////////////////////////////////////////
//     Function: EggTransform::clear_transform
//       Access: Public
//  Description: Resets the transform to empty, identity.
////////////////////////////////////////////////////////////////////
48
inline void EggTransform::clear_transform(void);

1314 15 add_translate2d 0 4 2003 29 EggTransform::add_translate2d 0 1 320 304
////////////////////////////////////////////////////////////////////
//     Function: EggTransform::add_translate2d
//       Access: Public
//  Description: Appends a 2-d translation operation to the current
//               transform.
////////////////////////////////////////////////////////////////////
63
void EggTransform::add_translate2d(LVector2d const &translate);

1315 15 add_translate3d 0 4 2003 29 EggTransform::add_translate3d 0 1 321 304
////////////////////////////////////////////////////////////////////
//     Function: EggTransform::add_translate3d
//       Access: Public
//  Description: Appends a 3-d translation operation to the current
//               transform.
////////////////////////////////////////////////////////////////////
63
void EggTransform::add_translate3d(LVector3d const &translate);

1316 12 add_rotate2d 0 4 2003 26 EggTransform::add_rotate2d 0 1 322 384
////////////////////////////////////////////////////////////////////
//     Function: EggTransform::add_rotate2d
//       Access: Public
//  Description: Appends a 2-d rotation to the current transform.  The
//               rotation angle is specified in degrees
//               counterclockwise about the origin.
////////////////////////////////////////////////////////////////////
46
void EggTransform::add_rotate2d(double angle);

1317 8 add_rotx 0 4 2003 22 EggTransform::add_rotx 0 1 323 391
////////////////////////////////////////////////////////////////////
//     Function: EggTransform::add_rotx
//       Access: Public
//  Description: Appends a rotation about the X axis to the current
//               transform.  The rotation angle is specified in
//               degrees counterclockwise about the axis.
////////////////////////////////////////////////////////////////////
42
void EggTransform::add_rotx(double angle);

1318 8 add_roty 0 4 2003 22 EggTransform::add_roty 0 1 324 391
////////////////////////////////////////////////////////////////////
//     Function: EggTransform::add_roty
//       Access: Public
//  Description: Appends a rotation about the Y axis to the current
//               transform.  The rotation angle is specified in
//               degrees counterclockwise about the axis.
////////////////////////////////////////////////////////////////////
42
void EggTransform::add_roty(double angle);

1319 8 add_rotz 0 4 2003 22 EggTransform::add_rotz 0 1 325 391
////////////////////////////////////////////////////////////////////
//     Function: EggTransform::add_rotz
//       Access: Public
//  Description: Appends a rotation about the Z axis to the current
//               transform.  The rotation angle is specified in
//               degrees counterclockwise about the axis.
////////////////////////////////////////////////////////////////////
42
void EggTransform::add_rotz(double angle);

1320 12 add_rotate3d 0 4 2003 26 EggTransform::add_rotate3d 0 2 326 327 811
////////////////////////////////////////////////////////////////////
//     Function: EggTransform::add_rotate3d
//       Access: Public
//  Description: Appends a 3-d rotation about an arbitrary axis to the
//               current transform.  The rotation angle is specified
//               in degrees counterclockwise about the axis.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggTransform::add_rotate3d
//       Access: Public
//  Description: Appends an arbitrary 3-d rotation to the current
//               transform, expressed as a quaternion.  This is
//               converted to axis-angle notation for the egg file.
////////////////////////////////////////////////////////////////////
128
void EggTransform::add_rotate3d(double angle, LVector3d const &axis);
void EggTransform::add_rotate3d(LQuaterniond const &quat);

1321 11 add_scale2d 0 4 2003 25 EggTransform::add_scale2d 0 1 328 301
////////////////////////////////////////////////////////////////////
//     Function: EggTransform::add_scale2d
//       Access: Public
//  Description: Appends a possibly non-uniform scale to the current
//               transform.
////////////////////////////////////////////////////////////////////
56
void EggTransform::add_scale2d(LVecBase2d const &scale);

1322 11 add_scale3d 0 4 2003 25 EggTransform::add_scale3d 0 1 329 301
////////////////////////////////////////////////////////////////////
//     Function: EggTransform::add_scale3d
//       Access: Public
//  Description: Appends a possibly non-uniform scale to the current
//               transform.
////////////////////////////////////////////////////////////////////
56
void EggTransform::add_scale3d(LVecBase3d const &scale);

1323 17 add_uniform_scale 0 4 2003 31 EggTransform::add_uniform_scale 0 1 330 277
////////////////////////////////////////////////////////////////////
//     Function: EggTransform::add_uniform_scale
//       Access: Public
//  Description: Appends a uniform scale to the current transform.
////////////////////////////////////////////////////////////////////
51
void EggTransform::add_uniform_scale(double scale);

1324 11 add_matrix3 0 4 2003 25 EggTransform::add_matrix3 0 1 331 296
////////////////////////////////////////////////////////////////////
//     Function: EggTransform::add_matrix3
//       Access: Public
//  Description: Appends an arbitrary 3x3 matrix to the current
//               transform.
////////////////////////////////////////////////////////////////////
60
inline void EggTransform::add_matrix3(LMatrix3d const &mat);

1325 11 add_matrix4 0 4 2003 25 EggTransform::add_matrix4 0 1 332 296
////////////////////////////////////////////////////////////////////
//     Function: EggTransform::add_matrix4
//       Access: Public
//  Description: Appends an arbitrary 4x4 matrix to the current
//               transform.
////////////////////////////////////////////////////////////////////
60
inline void EggTransform::add_matrix4(LMatrix4d const &mat);

1326 13 has_transform 0 4 2003 27 EggTransform::has_transform 0 1 333 432
////////////////////////////////////////////////////////////////////
//     Function: EggTransform::has_transform
//       Access: Public
//  Description: Returns true if the transform is nonempty, false if
//               it is empty (no transform components have been
//               added).  This is true for either a 2-d or a 3-d
//               transform.
////////////////////////////////////////////////////////////////////
52
inline bool EggTransform::has_transform(void) const;

1327 15 has_transform2d 0 4 2003 29 EggTransform::has_transform2d 0 1 334 632
////////////////////////////////////////////////////////////////////
//     Function: EggTransform::has_transform2d
//       Access: Public
//  Description: Returns true if the transform is specified as a 2-d
//               transform, e.g. with a 3x3 matrix, or false if it is
//               specified as a 3-d transform (with a 4x4 matrix), or
//               not specified at all.
//
//               Normally, EggTextures have a 2-d matrix (but
//               occasionally they use a 3-d matrix), and EggGroups
//               always have a 3-d matrix.
////////////////////////////////////////////////////////////////////
54
inline bool EggTransform::has_transform2d(void) const;

1328 15 set_transform2d 0 4 2003 29 EggTransform::set_transform2d 0 1 335 385
////////////////////////////////////////////////////////////////////
//     Function: EggTransform::set_transform2d
//       Access: Public
//  Description: Sets the overall transform as a 3x3 matrix.  This
//               completely replaces whatever componentwise transform
//               may have been defined.
////////////////////////////////////////////////////////////////////
64
inline void EggTransform::set_transform2d(LMatrix3d const &mat);

1329 15 has_transform3d 0 4 2003 29 EggTransform::has_transform3d 0 1 336 632
////////////////////////////////////////////////////////////////////
//     Function: EggTransform::has_transform3d
//       Access: Public
//  Description: Returns true if the transform is specified as a 3-d
//               transform, e.g. with a 4x4 matrix, or false if it is
//               specified as a 2-d transform (with a 2x2 matrix), or
//               not specified at all.
//
//               Normally, EggTextures have a 3-d matrix (but
//               occasionally they use a 3-d matrix), and EggGroups
//               always have a 3-d matrix.
////////////////////////////////////////////////////////////////////
54
inline bool EggTransform::has_transform3d(void) const;

1330 15 set_transform3d 0 4 2003 29 EggTransform::set_transform3d 0 1 337 385
////////////////////////////////////////////////////////////////////
//     Function: EggTransform::set_transform3d
//       Access: Public
//  Description: Sets the overall transform as a 4x4 matrix.  This
//               completely replaces whatever componentwise transform
//               may have been defined.
////////////////////////////////////////////////////////////////////
64
inline void EggTransform::set_transform3d(LMatrix4d const &mat);

1331 15 get_transform2d 0 4 2003 29 EggTransform::get_transform2d 0 1 338 348
////////////////////////////////////////////////////////////////////
//     Function: EggTransform::get_transform2d
//       Access: Public
//  Description: Returns the overall transform as a 3x3 matrix.  It is
//               an error to call this if has_transform3d() is true.
////////////////////////////////////////////////////////////////////
59
inline LMatrix3d EggTransform::get_transform2d(void) const;

1332 15 get_transform3d 0 4 2003 29 EggTransform::get_transform3d 0 1 339 450
////////////////////////////////////////////////////////////////////
//     Function: EggTransform::get_transform3d
//       Access: Public
//  Description: Returns the overall transform as a 4x4 matrix.  It is
//               valid to call this even if has_transform2d() is true;
//               in this case, the 3x3 transform will be expanded to a
//               4x4 matrix.
////////////////////////////////////////////////////////////////////
66
inline LMatrix4d const &EggTransform::get_transform3d(void) const;

1333 21 transform_is_identity 0 4 2003 35 EggTransform::transform_is_identity 0 1 340 318
////////////////////////////////////////////////////////////////////
//     Function: EggTransform::transform_is_identity
//       Access: Public
//  Description: Returns true if the described transform is identity,
//               false otherwise.
////////////////////////////////////////////////////////////////////
60
inline bool EggTransform::transform_is_identity(void) const;

1334 18 get_num_components 0 4 2003 32 EggTransform::get_num_components 0 1 341 306
////////////////////////////////////////////////////////////////////
//     Function: EggTransform::get_num_components
//       Access: Public
//  Description: Returns the number of components that make up the
//               transform.
////////////////////////////////////////////////////////////////////
56
inline int EggTransform::get_num_components(void) const;

1335 18 get_component_type 0 4 2003 32 EggTransform::get_component_type 0 1 342 267
////////////////////////////////////////////////////////////////////
//     Function: EggTransform::get_component_type
//       Access: Public
//  Description: Returns the type of the nth component.
////////////////////////////////////////////////////////////////////
81
inline EggTransform::ComponentType EggTransform::get_component_type(int n) const;

1336 20 get_component_number 0 4 2003 34 EggTransform::get_component_number 0 1 343 531
////////////////////////////////////////////////////////////////////
//     Function: EggTransform::get_component_number
//       Access: Public
//  Description: Returns the solitary number associated with the nth
//               component.  In the case of a rotation, this is the
//               angle in degrees to rotate; in the case of uniform
//               scale, this is the amount of the scale.  Other types
//               do not use this property.
////////////////////////////////////////////////////////////////////
62
inline double EggTransform::get_component_number(int n) const;

1337 18 get_component_vec2 0 4 2003 32 EggTransform::get_component_vec2 0 1 344 519
////////////////////////////////////////////////////////////////////
//     Function: EggTransform::get_component_vec2
//       Access: Public
//  Description: Returns the 2-component vector associated with the
//               nth component.  This may be the translate vector,
//               rotate axis, or non-uniform scale.  It is an error to
//               call this if the component type does not use a 2-d
//               vector property.
////////////////////////////////////////////////////////////////////
71
inline LVecBase2d const &EggTransform::get_component_vec2(int n) const;

1338 18 get_component_vec3 0 4 2003 32 EggTransform::get_component_vec3 0 1 345 519
////////////////////////////////////////////////////////////////////
//     Function: EggTransform::get_component_vec3
//       Access: Public
//  Description: Returns the 3-component vector associated with the
//               nth component.  This may be the translate vector,
//               rotate axis, or non-uniform scale.  It is an error to
//               call this if the component type does not use a 3-d
//               vector property.
////////////////////////////////////////////////////////////////////
71
inline LVecBase3d const &EggTransform::get_component_vec3(int n) const;

1339 18 get_component_mat3 0 4 2003 32 EggTransform::get_component_mat3 0 1 346 390
////////////////////////////////////////////////////////////////////
//     Function: EggTransform::get_component_mat3
//       Access: Public
//  Description: Returns the 3x3 matrix associated with the nth
//               component.  It is an error to call this if the
//               component type is not CT_matrix3.
////////////////////////////////////////////////////////////////////
70
inline LMatrix3d const &EggTransform::get_component_mat3(int n) const;

1340 18 get_component_mat4 0 4 2003 32 EggTransform::get_component_mat4 0 1 347 390
////////////////////////////////////////////////////////////////////
//     Function: EggTransform::get_component_mat4
//       Access: Public
//  Description: Returns the 4x4 matrix associated with the nth
//               component.  It is an error to call this if the
//               component type is not CT_matrix4.
////////////////////////////////////////////////////////////////////
70
inline LMatrix4d const &EggTransform::get_component_mat4(int n) const;

1341 5 write 0 4 2003 19 EggTransform::write 0 1 348 292
////////////////////////////////////////////////////////////////////
//     Function: EggTransform::write
//       Access: Public
//  Description: Writes the transform to the indicated stream in Egg
//               format.
////////////////////////////////////////////////////////////////////
98
void EggTransform::write(ostream &out, int indent_level, basic_string< char > const &label) const;

1342 9 make_copy 0 6 2005 29 EggSwitchCondition::make_copy 0 1 349 0
74
virtual EggSwitchCondition *EggSwitchCondition::make_copy(void) const = 0;

1343 5 write 0 6 2005 25 EggSwitchCondition::write 0 1 350 0
81
virtual void EggSwitchCondition::write(ostream &out, int indent_level) const = 0;

1344 9 transform 0 6 2005 29 EggSwitchCondition::transform 0 1 351 0
69
virtual void EggSwitchCondition::transform(LMatrix4d const &mat) = 0;

1345 14 get_class_type 0 4 2005 34 EggSwitchCondition::get_class_type 0 1 352 0
59
static TypeHandle EggSwitchCondition::get_class_type(void);

1346 19 ~EggSwitchCondition 0 4 2005 39 EggSwitchCondition::~EggSwitchCondition 0 0 0
46
EggSwitchCondition::~EggSwitchCondition(void);

1347 26 EggSwitchConditionDistance 0 4 2006 54 EggSwitchConditionDistance::EggSwitchConditionDistance 0 2 353 354 235
////////////////////////////////////////////////////////////////////
//     Function: EggSwitchConditionDistance::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
135
EggSwitchConditionDistance::EggSwitchConditionDistance(double switch_in, double switch_out, LPoint3d const &center, double fade = (0));

1348 8 get_fade 0 20 2006 36 EggSwitchConditionDistance::get_fade 0 1 356 52
getter for double EggSwitchConditionDistance::_fade;
56
double EggSwitchConditionDistance::get_fade(void) const;

1349 8 set_fade 0 36 2006 36 EggSwitchConditionDistance::set_fade 0 1 357 52
setter for double EggSwitchConditionDistance::_fade;
56
void EggSwitchConditionDistance::set_fade(double value);

1350 14 get_switch_out 0 20 2006 42 EggSwitchConditionDistance::get_switch_out 0 1 358 58
getter for double EggSwitchConditionDistance::_switch_out;
62
double EggSwitchConditionDistance::get_switch_out(void) const;

1351 14 set_switch_out 0 36 2006 42 EggSwitchConditionDistance::set_switch_out 0 1 359 58
setter for double EggSwitchConditionDistance::_switch_out;
62
void EggSwitchConditionDistance::set_switch_out(double value);

1352 13 get_switch_in 0 20 2006 41 EggSwitchConditionDistance::get_switch_in 0 1 360 57
getter for double EggSwitchConditionDistance::_switch_in;
61
double EggSwitchConditionDistance::get_switch_in(void) const;

1353 13 set_switch_in 0 36 2006 41 EggSwitchConditionDistance::set_switch_in 0 1 361 57
setter for double EggSwitchConditionDistance::_switch_in;
61
void EggSwitchConditionDistance::set_switch_in(double value);

1354 10 get_center 0 20 2006 38 EggSwitchConditionDistance::get_center 0 1 362 56
getter for LPoint3d EggSwitchConditionDistance::_center;
67
LPoint3d const &EggSwitchConditionDistance::get_center(void) const;

1355 14 get_class_type 0 4 2006 42 EggSwitchConditionDistance::get_class_type 0 1 355 0
67
static TypeHandle EggSwitchConditionDistance::get_class_type(void);

1356 27 ~EggSwitchConditionDistance 0 4 2006 55 EggSwitchConditionDistance::~EggSwitchConditionDistance 0 0 0
62
EggSwitchConditionDistance::~EggSwitchConditionDistance(void);

1357 22 upcast_to_EggGroupNode 0 12 2009 32 EggGroup::upcast_to_EggGroupNode 0 1 503 36
upcast from EggGroup to EggGroupNode
53
EggGroupNode *EggGroup::upcast_to_EggGroupNode(void);

1358 20 downcast_to_EggGroup 0 12 1996 34 EggGroupNode::downcast_to_EggGroup 0 1 504 38
downcast from EggGroupNode to EggGroup
51
EggGroup *EggGroupNode::downcast_to_EggGroup(void);

1359 23 upcast_to_EggRenderMode 0 12 2009 33 EggGroup::upcast_to_EggRenderMode 0 1 505 37
upcast from EggGroup to EggRenderMode
55
EggRenderMode *EggGroup::upcast_to_EggRenderMode(void);

1360 20 downcast_to_EggGroup 0 12 1998 35 EggRenderMode::downcast_to_EggGroup 0 1 506 39
downcast from EggRenderMode to EggGroup
52
EggGroup *EggRenderMode::downcast_to_EggGroup(void);

1361 22 upcast_to_EggTransform 0 12 2009 32 EggGroup::upcast_to_EggTransform 0 1 507 36
upcast from EggGroup to EggTransform
53
EggTransform *EggGroup::upcast_to_EggTransform(void);

1362 20 downcast_to_EggGroup 0 12 2003 34 EggTransform::downcast_to_EggGroup 0 1 508 38
downcast from EggTransform to EggGroup
51
EggGroup *EggTransform::downcast_to_EggGroup(void);

1363 8 EggGroup 0 4 2009 18 EggGroup::EggGroup 0 3 363 364 365 447
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggGroup::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
102
EggGroup::EggGroup(basic_string< char > const &name = (""));
EggGroup::EggGroup(EggGroup const &copy);

1364 10 operator = 0 4 2009 20 EggGroup::operator = 0 1 366 233
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::Copy assignment operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
53
EggGroup &EggGroup::operator =(EggGroup const &copy);

1365 9 ~EggGroup 0 6 2009 19 EggGroup::~EggGroup 0 0 219
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
34
virtual EggGroup::~EggGroup(void);

1366 5 write 0 6 2009 15 EggGroup::write 0 1 367 327
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::write
//       Access: Published, Virtual
//  Description: Writes the group and all of its children to the
//               indicated output stream in Egg format.
////////////////////////////////////////////////////////////////////
67
virtual void EggGroup::write(ostream &out, int indent_level) const;

1367 21 write_billboard_flags 0 4 2009 31 EggGroup::write_billboard_flags 0 1 368 326
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::write_billboard_flags
//       Access: Published
//  Description: Writes just the <Billboard> entry and related fields to
//               the indicated ostream.
////////////////////////////////////////////////////////////////////
75
void EggGroup::write_billboard_flags(ostream &out, int indent_level) const;

1368 19 write_collide_flags 0 4 2009 29 EggGroup::write_collide_flags 0 1 369 322
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::write_collide_flags
//       Access: Published
//  Description: Writes just the <Collide> entry and related fields to
//               the indicated ostream.
////////////////////////////////////////////////////////////////////
73
void EggGroup::write_collide_flags(ostream &out, int indent_level) const;

1369 17 write_model_flags 0 4 2009 27 EggGroup::write_model_flags 0 1 370 311
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::write_model_flags
//       Access: Published
//  Description: Writes the <Model> flag and related flags to the
//               indicated ostream.
////////////////////////////////////////////////////////////////////
71
void EggGroup::write_model_flags(ostream &out, int indent_level) const;

1370 18 write_switch_flags 0 4 2009 28 EggGroup::write_switch_flags 0 1 371 313
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::write_switch_flags
//       Access: Published
//  Description: Writes the <Switch> flag and related flags to the
//               indicated ostream.
////////////////////////////////////////////////////////////////////
72
void EggGroup::write_switch_flags(ostream &out, int indent_level) const;

1371 18 write_object_types 0 4 2009 28 EggGroup::write_object_types 0 1 372 317
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::write_object_types
//       Access: Published
//  Description: Writes just the <ObjectTypes> entries, if any, to the
//               indicated ostream.
////////////////////////////////////////////////////////////////////
72
void EggGroup::write_object_types(ostream &out, int indent_level) const;

1372 17 write_decal_flags 0 4 2009 27 EggGroup::write_decal_flags 0 1 373 272
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::write_decal_flags
//       Access: Published
//  Description: Writes the flags related to decaling, if any.
////////////////////////////////////////////////////////////////////
71
void EggGroup::write_decal_flags(ostream &out, int indent_level) const;

1373 10 write_tags 0 4 2009 20 EggGroup::write_tags 0 1 374 301
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::write_tags
//       Access: Published
//  Description: Writes just the <Tag> entries, if any, to the
//               indicated ostream.
////////////////////////////////////////////////////////////////////
64
void EggGroup::write_tags(ostream &out, int indent_level) const;

1374 17 write_render_mode 0 4 2009 27 EggGroup::write_render_mode 0 1 375 344
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::write_render_mode
//       Access: Published
//  Description: Writes the flags inherited from EggRenderMode and
//               similar flags that control obscure render effects.
////////////////////////////////////////////////////////////////////
71
void EggGroup::write_render_mode(ostream &out, int indent_level) const;

1375 8 is_joint 0 6 2009 18 EggGroup::is_joint 0 1 376 508
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::is_joint
//       Access: Published, Virtual
//  Description: Returns true if this particular node represents a
//               <Joint> entry or not.  This is a handy thing to know
//               since Joints are sorted to the end of their sibling
//               list when writing an egg file.  See
//               EggGroupNode::write().
////////////////////////////////////////////////////////////////////
44
virtual bool EggGroup::is_joint(void) const;

1376 20 determine_alpha_mode 0 6 2009 30 EggGroup::determine_alpha_mode 0 1 377 554
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::determine_alpha_mode
//       Access: Published, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               or EggPrimitive or some such object at this level or
//               above this group that has an alpha_mode other than
//               AM_unspecified.  Returns a valid EggRenderMode pointer
//               if one is found, or NULL otherwise.
////////////////////////////////////////////////////////////////////
60
virtual EggRenderMode *EggGroup::determine_alpha_mode(void);

1377 26 determine_depth_write_mode 0 6 2009 36 EggGroup::determine_depth_write_mode 0 1 378 566
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::determine_depth_write_mode
//       Access: Published, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               or EggPrimitive or some such object at this level or
//               above this group that has a depth_write_mode other
//               than DWM_unspecified.  Returns a valid EggRenderMode
//               pointer if one is found, or NULL otherwise.
////////////////////////////////////////////////////////////////////
66
virtual EggRenderMode *EggGroup::determine_depth_write_mode(void);

1378 25 determine_depth_test_mode 0 6 2009 35 EggGroup::determine_depth_test_mode 0 1 379 564
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::determine_depth_test_mode
//       Access: Published, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               or EggPrimitive or some such object at this level or
//               above this group that has a depth_test_mode other
//               than DTM_unspecified.  Returns a valid EggRenderMode
//               pointer if one is found, or NULL otherwise.
////////////////////////////////////////////////////////////////////
65
virtual EggRenderMode *EggGroup::determine_depth_test_mode(void);

1379 25 determine_visibility_mode 0 6 2009 35 EggGroup::determine_visibility_mode 0 1 380 563
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::determine_visibility_mode
//       Access: Published, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               or EggPrimitive or some such object at this level or
//               above this group that has a visibility_mode other
//               than VM_unspecified.  Returns a valid EggRenderMode
//               pointer if one is found, or NULL otherwise.
////////////////////////////////////////////////////////////////////
65
virtual EggRenderMode *EggGroup::determine_visibility_mode(void);

1380 22 determine_depth_offset 0 6 2009 32 EggGroup::determine_depth_offset 0 1 381 540
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::determine_depth_offset
//       Access: Published, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               or EggPrimitive or some such object at this level or
//               above this group that has a depth_offset specified.
//               Returns a valid EggRenderMode pointer if one is found,
//               or NULL otherwise.
////////////////////////////////////////////////////////////////////
62
virtual EggRenderMode *EggGroup::determine_depth_offset(void);

1381 20 determine_draw_order 0 6 2009 30 EggGroup::determine_draw_order 0 1 382 536
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::determine_draw_order
//       Access: Published, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               or EggPrimitive or some such object at this level or
//               above this group that has a draw_order specified.
//               Returns a valid EggRenderMode pointer if one is found,
//               or NULL otherwise.
////////////////////////////////////////////////////////////////////
60
virtual EggRenderMode *EggGroup::determine_draw_order(void);

1382 13 determine_bin 0 6 2009 23 EggGroup::determine_bin 0 1 383 523
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::determine_bin
//       Access: Published, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               or EggPrimitive or some such object at this level or
//               above this group that has a bin specified.  Returns a
//               valid EggRenderMode pointer if one is found, or NULL
//               otherwise.
////////////////////////////////////////////////////////////////////
53
virtual EggRenderMode *EggGroup::determine_bin(void);

1383 17 determine_indexed 0 6 2009 27 EggGroup::determine_indexed 0 1 384 619
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::determine_indexed
//       Access: Published, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               at this level or above that has the "indexed" scalar
//               set.  Returns the value of the indexed scalar if it
//               is found, or false if it is not.
//
//               In other words, returns true if the "indexed" flag is
//               in effect for the indicated node, false otherwise.
////////////////////////////////////////////////////////////////////
47
virtual bool EggGroup::determine_indexed(void);

1384 15 determine_decal 0 6 2009 25 EggGroup::determine_decal 0 1 385 607
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::determine_decal
//       Access: Published, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               at this level or above that has the "decal" flag
//               set.  Returns the value of the decal flag if it
//               is found, or false if it is not.
//
//               In other words, returns true if the "decal" flag is
//               in effect for the indicated node, false otherwise.
////////////////////////////////////////////////////////////////////
45
virtual bool EggGroup::determine_decal(void);

1385 14 set_group_type 0 4 2009 24 EggGroup::set_group_type 0 1 386 223
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_group_type
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
56
void EggGroup::set_group_type(EggGroup::GroupType type);

1386 14 get_group_type 0 4 2009 24 EggGroup::get_group_type 0 1 387 707
// Filename: eggGroup.I
// Created by:  drose (16Jan99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_group_type
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
64
inline EggGroup::GroupType EggGroup::get_group_type(void) const;

1387 16 is_instance_type 0 4 2009 26 EggGroup::is_instance_type 0 1 388 668
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::is_instance_type
//       Access: Published
//  Description: Returns true if this group is an instance type node;
//               i.e. it begins the root of a local coordinate space.
//               This is not related to instancing (multiple copies of
//               a node in a scene graph).
//
//               This also includes the case of the node including a
//               billboard flag without an explicit center, which
//               implicitly makes the node behave like an instance.
////////////////////////////////////////////////////////////////////
51
inline bool EggGroup::is_instance_type(void) const;

1388 18 set_billboard_type 0 4 2009 28 EggGroup::set_billboard_type 0 1 389 227
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_billboard_type
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
71
inline void EggGroup::set_billboard_type(EggGroup::BillboardType type);

1389 18 get_billboard_type 0 4 2009 28 EggGroup::get_billboard_type 0 1 390 227
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_billboard_type
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
72
inline EggGroup::BillboardType EggGroup::get_billboard_type(void) const;

1390 20 set_billboard_center 0 4 2009 30 EggGroup::set_billboard_center 0 1 391 1120
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_billboard_center
//       Access: Published
//  Description: Sets the point around which the billboard will
//               rotate, if this node contains a billboard
//               specification.
//
//               If a billboard type is given but no billboard_center
//               is specified, then the group node is treated as an
//               <Instance>, and the billboard rotates around the
//               origin.  If, however, a billboard_center is
//               specified, then the group node is *not* treated as an
//               <Instance>, and the billboard rotates around the
//               specified point.
//
//               The point is in the same coordinate system as the
//               vertices of this node: usually global, but possibly
//               local if there is an <Instance> somewhere above.
//               Specifically, this is the coordinate system defined
//               by get_vertex_frame().
////////////////////////////////////////////////////////////////////
77
inline void EggGroup::set_billboard_center(LPoint3d const &billboard_center);

1391 22 clear_billboard_center 0 4 2009 32 EggGroup::clear_billboard_center 0 1 392 231
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::clear_billboard_center
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
51
inline void EggGroup::clear_billboard_center(void);

1392 20 has_billboard_center 0 4 2009 30 EggGroup::has_billboard_center 0 1 393 229
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::has_billboard_center
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
55
inline bool EggGroup::has_billboard_center(void) const;

1393 20 get_billboard_center 0 4 2009 30 EggGroup::get_billboard_center 0 1 394 229
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_billboard_center
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
66
inline LPoint3d const &EggGroup::get_billboard_center(void) const;

1394 11 set_cs_type 0 4 2009 21 EggGroup::set_cs_type 0 1 395 220
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_cs_type
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
69
inline void EggGroup::set_cs_type(EggGroup::CollisionSolidType type);

1395 11 get_cs_type 0 4 2009 21 EggGroup::get_cs_type 0 1 396 220
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_cs_type
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
70
inline EggGroup::CollisionSolidType EggGroup::get_cs_type(void) const;

1396 17 set_collide_flags 0 4 2009 27 EggGroup::set_collide_flags 0 1 397 226
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_collide_flags
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
51
inline void EggGroup::set_collide_flags(int flags);

1397 17 get_collide_flags 0 4 2009 27 EggGroup::get_collide_flags 0 1 398 226
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_collide_flags
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
70
inline EggGroup::CollideFlags EggGroup::get_collide_flags(void) const;

1398 18 set_collision_name 0 4 2009 28 EggGroup::set_collision_name 0 1 399 227
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_collision_name
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
85
inline void EggGroup::set_collision_name(basic_string< char > const &collision_name);

1399 20 clear_collision_name 0 4 2009 30 EggGroup::clear_collision_name 0 1 400 229
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::clear_collision_name
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
49
inline void EggGroup::clear_collision_name(void);

1400 18 has_collision_name 0 4 2009 28 EggGroup::has_collision_name 0 1 401 227
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::has_collision_name
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
53
inline bool EggGroup::has_collision_name(void) const;

1401 18 get_collision_name 0 4 2009 28 EggGroup::get_collision_name 0 1 402 227
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_collision_name
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
76
inline basic_string< char > const &EggGroup::get_collision_name(void) const;

1402 12 set_dcs_type 0 4 2009 22 EggGroup::set_dcs_type 0 1 403 221
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_dcs_type
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
59
inline void EggGroup::set_dcs_type(EggGroup::DCSType type);

1403 12 get_dcs_type 0 4 2009 22 EggGroup::get_dcs_type 0 1 404 221
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_dcs_type
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
60
inline EggGroup::DCSType EggGroup::get_dcs_type(void) const;

1404 12 has_dcs_type 0 4 2009 22 EggGroup::has_dcs_type 0 1 405 316
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::has_dcs_type
//       Access: Published
//  Description: Returns true if the specified DCS type is not
//               DC_none and not DC_unspecified.
////////////////////////////////////////////////////////////////////
47
inline bool EggGroup::has_dcs_type(void) const;

1405 13 set_dart_type 0 4 2009 23 EggGroup::set_dart_type 0 1 406 222
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_dart_type
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
61
inline void EggGroup::set_dart_type(EggGroup::DartType type);

1406 13 get_dart_type 0 4 2009 23 EggGroup::get_dart_type 0 1 407 222
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_dart_type
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
62
inline EggGroup::DartType EggGroup::get_dart_type(void) const;

1407 15 set_switch_flag 0 4 2009 25 EggGroup::set_switch_flag 0 1 408 224
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_switch_flag
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
49
inline void EggGroup::set_switch_flag(bool flag);

1408 15 get_switch_flag 0 4 2009 25 EggGroup::get_switch_flag 0 1 409 224
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_switch_flag
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
50
inline bool EggGroup::get_switch_flag(void) const;

1409 14 set_switch_fps 0 4 2009 24 EggGroup::set_switch_fps 0 1 410 223
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_switch_fps
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
49
inline void EggGroup::set_switch_fps(double fps);

1410 14 get_switch_fps 0 4 2009 24 EggGroup::get_switch_fps 0 1 411 223
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_switch_fps
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
51
inline double EggGroup::get_switch_fps(void) const;

1411 15 add_object_type 0 4 2009 25 EggGroup::add_object_type 0 1 412 224
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::add_object_type
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
79
inline void EggGroup::add_object_type(basic_string< char > const &object_type);

1412 18 clear_object_types 0 4 2009 28 EggGroup::clear_object_types 0 1 413 227
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::clear_object_types
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
47
inline void EggGroup::clear_object_types(void);

1413 20 get_num_object_types 0 4 2009 30 EggGroup::get_num_object_types 0 1 414 229
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_num_object_types
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
54
inline int EggGroup::get_num_object_types(void) const;

1414 15 get_object_type 0 4 2009 25 EggGroup::get_object_type 0 1 415 224
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_object_type
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
71
inline basic_string< char > EggGroup::get_object_type(int index) const;

1415 15 has_object_type 0 4 2009 25 EggGroup::has_object_type 0 1 416 332
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::has_object_type
//       Access: Published
//  Description: Returns true if the indicated object type has been
//               added to the group, or false otherwise.
////////////////////////////////////////////////////////////////////
78
bool EggGroup::has_object_type(basic_string< char > const &object_type) const;

1416 18 remove_object_type 0 4 2009 28 EggGroup::remove_object_type 0 1 417 440
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::remove_object_type
//       Access: Published
//  Description: Removes the first instance of the indicated object
//               type from the group if it is present.  Returns true
//               if the object type was found and removed, false
//               otherwise.
////////////////////////////////////////////////////////////////////
75
bool EggGroup::remove_object_type(basic_string< char > const &object_type);

1417 14 set_model_flag 0 4 2009 24 EggGroup::set_model_flag 0 1 418 223
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_model_flag
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
48
inline void EggGroup::set_model_flag(bool flag);

1418 14 get_model_flag 0 4 2009 24 EggGroup::get_model_flag 0 1 419 223
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_model_flag
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
49
inline bool EggGroup::get_model_flag(void) const;

1419 16 set_texlist_flag 0 4 2009 26 EggGroup::set_texlist_flag 0 1 420 225
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_texlist_flag
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
50
inline void EggGroup::set_texlist_flag(bool flag);

1420 16 get_texlist_flag 0 4 2009 26 EggGroup::get_texlist_flag 0 1 421 225
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_texlist_flag
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
51
inline bool EggGroup::get_texlist_flag(void) const;

1421 14 set_nofog_flag 0 4 2009 24 EggGroup::set_nofog_flag 0 1 422 223
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_nofog_flag
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
48
inline void EggGroup::set_nofog_flag(bool flag);

1422 14 get_nofog_flag 0 4 2009 24 EggGroup::get_nofog_flag 0 1 423 223
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_nofog_flag
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
49
inline bool EggGroup::get_nofog_flag(void) const;

1423 14 set_decal_flag 0 4 2009 24 EggGroup::set_decal_flag 0 1 424 223
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_decal_flag
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
48
inline void EggGroup::set_decal_flag(bool flag);

1424 14 get_decal_flag 0 4 2009 24 EggGroup::get_decal_flag 0 1 425 223
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_decal_flag
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
49
inline bool EggGroup::get_decal_flag(void) const;

1425 15 set_direct_flag 0 4 2009 25 EggGroup::set_direct_flag 0 1 426 224
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_direct_flag
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
49
inline void EggGroup::set_direct_flag(bool flag);

1426 15 get_direct_flag 0 4 2009 25 EggGroup::get_direct_flag 0 1 427 224
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_direct_flag
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
50
inline bool EggGroup::get_direct_flag(void) const;

1427 15 set_portal_flag 0 4 2009 25 EggGroup::set_portal_flag 0 1 428 224
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_portal_flag
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
49
inline void EggGroup::set_portal_flag(bool flag);

1428 15 get_portal_flag 0 4 2009 25 EggGroup::get_portal_flag 0 1 429 224
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_portal_flag
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
50
inline bool EggGroup::get_portal_flag(void) const;

1429 17 set_occluder_flag 0 4 2009 27 EggGroup::set_occluder_flag 0 1 430 226
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_occluder_flag
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
51
inline void EggGroup::set_occluder_flag(bool flag);

1430 17 get_occluder_flag 0 4 2009 27 EggGroup::get_occluder_flag 0 1 431 226
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_occluder_flag
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
52
inline bool EggGroup::get_occluder_flag(void) const;

1431 18 set_polylight_flag 0 4 2009 28 EggGroup::set_polylight_flag 0 1 432 227
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_polylight_flag
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
52
inline void EggGroup::set_polylight_flag(bool flag);

1432 18 get_polylight_flag 0 4 2009 28 EggGroup::get_polylight_flag 0 1 433 227
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_polylight_flag
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
53
inline bool EggGroup::get_polylight_flag(void) const;

1433 16 set_indexed_flag 0 4 2009 26 EggGroup::set_indexed_flag 0 1 434 335
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_indexed_flag
//       Access: Published
//  Description: If this flag is true, geometry at this node and below
//               will be generated as indexed geometry.
////////////////////////////////////////////////////////////////////
50
inline void EggGroup::set_indexed_flag(bool flag);

1434 18 clear_indexed_flag 0 4 2009 28 EggGroup::clear_indexed_flag 0 1 435 227
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::clear_indexed_flag
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
47
inline void EggGroup::clear_indexed_flag(void);

1435 16 has_indexed_flag 0 4 2009 26 EggGroup::has_indexed_flag 0 1 436 225
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::has_indexed_flag
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
51
inline bool EggGroup::has_indexed_flag(void) const;

1436 16 get_indexed_flag 0 4 2009 26 EggGroup::get_indexed_flag 0 1 437 225
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_indexed_flag
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
51
inline bool EggGroup::get_indexed_flag(void) const;

1437 16 set_collide_mask 0 4 2009 26 EggGroup::set_collide_mask 0 1 438 225
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_collide_mask
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
73
inline void EggGroup::set_collide_mask(BitMask< unsigned int, 32 > mask);

1438 18 clear_collide_mask 0 4 2009 28 EggGroup::clear_collide_mask 0 1 439 227
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::clear_collide_mask
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
47
inline void EggGroup::clear_collide_mask(void);

1439 16 has_collide_mask 0 4 2009 26 EggGroup::has_collide_mask 0 1 440 225
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::has_collide_mask
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
51
inline bool EggGroup::has_collide_mask(void) const;

1440 16 get_collide_mask 0 4 2009 26 EggGroup::get_collide_mask 0 1 441 225
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_collide_mask
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
74
inline BitMask< unsigned int, 32 > EggGroup::get_collide_mask(void) const;

1441 21 set_from_collide_mask 0 4 2009 31 EggGroup::set_from_collide_mask 0 1 442 230
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_from_collide_mask
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
78
inline void EggGroup::set_from_collide_mask(BitMask< unsigned int, 32 > mask);

1442 23 clear_from_collide_mask 0 4 2009 33 EggGroup::clear_from_collide_mask 0 1 443 232
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::clear_from_collide_mask
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
52
inline void EggGroup::clear_from_collide_mask(void);

1443 21 has_from_collide_mask 0 4 2009 31 EggGroup::has_from_collide_mask 0 1 444 230
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::has_from_collide_mask
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
56
inline bool EggGroup::has_from_collide_mask(void) const;

1444 21 get_from_collide_mask 0 4 2009 31 EggGroup::get_from_collide_mask 0 1 445 230
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_from_collide_mask
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
79
inline BitMask< unsigned int, 32 > EggGroup::get_from_collide_mask(void) const;

1445 21 set_into_collide_mask 0 4 2009 31 EggGroup::set_into_collide_mask 0 1 446 230
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_into_collide_mask
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
78
inline void EggGroup::set_into_collide_mask(BitMask< unsigned int, 32 > mask);

1446 23 clear_into_collide_mask 0 4 2009 33 EggGroup::clear_into_collide_mask 0 1 447 232
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::clear_into_collide_mask
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
52
inline void EggGroup::clear_into_collide_mask(void);

1447 21 has_into_collide_mask 0 4 2009 31 EggGroup::has_into_collide_mask 0 1 448 230
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::has_into_collide_mask
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
56
inline bool EggGroup::has_into_collide_mask(void) const;

1448 21 get_into_collide_mask 0 4 2009 31 EggGroup::get_into_collide_mask 0 1 449 230
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_into_collide_mask
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
79
inline BitMask< unsigned int, 32 > EggGroup::get_into_collide_mask(void) const;

1449 14 set_blend_mode 0 4 2009 24 EggGroup::set_blend_mode 0 1 450 223
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_blend_mode
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
69
inline void EggGroup::set_blend_mode(EggGroup::BlendMode blend_mode);

1450 14 get_blend_mode 0 4 2009 24 EggGroup::get_blend_mode 0 1 451 223
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_blend_mode
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
64
inline EggGroup::BlendMode EggGroup::get_blend_mode(void) const;

1451 19 set_blend_operand_a 0 4 2009 29 EggGroup::set_blend_operand_a 0 1 452 228
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_blend_operand_a
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
82
inline void EggGroup::set_blend_operand_a(EggGroup::BlendOperand blend_operand_a);

1452 19 get_blend_operand_a 0 4 2009 29 EggGroup::get_blend_operand_a 0 1 453 228
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_blend_operand_a
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
72
inline EggGroup::BlendOperand EggGroup::get_blend_operand_a(void) const;

1453 19 set_blend_operand_b 0 4 2009 29 EggGroup::set_blend_operand_b 0 1 454 228
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_blend_operand_b
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
82
inline void EggGroup::set_blend_operand_b(EggGroup::BlendOperand blend_operand_b);

1454 19 get_blend_operand_b 0 4 2009 29 EggGroup::get_blend_operand_b 0 1 455 228
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_blend_operand_b
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
72
inline EggGroup::BlendOperand EggGroup::get_blend_operand_b(void) const;

1455 15 set_blend_color 0 4 2009 25 EggGroup::set_blend_color 0 1 456 224
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_blend_color
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
69
inline void EggGroup::set_blend_color(LVecBase4f const &blend_color);

1456 17 clear_blend_color 0 4 2009 27 EggGroup::clear_blend_color 0 1 457 265
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::clear_blend_color
//       Access: Published
//  Description: Removes the blend color specification.
////////////////////////////////////////////////////////////////////
46
inline void EggGroup::clear_blend_color(void);

1457 15 has_blend_color 0 4 2009 25 EggGroup::has_blend_color 0 1 458 310
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::has_blend_color
//       Access: Published
//  Description: Returns true if the blend color has been specified,
//               false otherwise.
////////////////////////////////////////////////////////////////////
50
inline bool EggGroup::has_blend_color(void) const;

1458 15 get_blend_color 0 4 2009 25 EggGroup::get_blend_color 0 1 459 324
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_blend_color
//       Access: Published
//  Description: Returns the blend color if one has been specified, or
//               (0, 0, 0, 0) if one has not.
////////////////////////////////////////////////////////////////////
63
inline LVecBase4f const &EggGroup::get_blend_color(void) const;

1459 7 set_lod 0 4 2009 17 EggGroup::set_lod 0 1 460 216
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_lod
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
61
inline void EggGroup::set_lod(EggSwitchCondition const &lod);

1460 9 clear_lod 0 4 2009 19 EggGroup::clear_lod 0 1 461 218
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::clear_lod
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
38
inline void EggGroup::clear_lod(void);

1461 7 has_lod 0 4 2009 17 EggGroup::has_lod 0 1 462 216
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::has_lod
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
42
inline bool EggGroup::has_lod(void) const;

1462 7 get_lod 0 4 2009 17 EggGroup::get_lod 0 1 463 216
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_lod
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
63
inline EggSwitchCondition const &EggGroup::get_lod(void) const;

1463 7 set_tag 0 4 2009 17 EggGroup::set_tag 0 1 464 878
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_tag
//       Access: Published
//  Description: Associates a user-defined value with a user-defined
//               key which is stored on the node.  This value has no
//               meaning to Panda; but it is stored indefinitely on
//               the node until it is requested again.  This value
//               will be copied to the PandaNode that is created for
//               this particular EggGroup if the egg file is loaded as
//               a scene.
//
//               Each unique key stores a different string value.
//               There is no effective limit on the number of
//               different keys that may be stored or on the length of
//               any one key's value.
////////////////////////////////////////////////////////////////////
98
inline void EggGroup::set_tag(basic_string< char > const &key, basic_string< char > const &value);

1464 7 get_tag 0 4 2009 17 EggGroup::get_tag 0 1 465 433
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_tag
//       Access: Published
//  Description: Retrieves the user-defined value that was previously
//               set on this node for the particular key, if any.  If
//               no value has been previously set, returns the empty
//               string.
////////////////////////////////////////////////////////////////////
85
inline basic_string< char > EggGroup::get_tag(basic_string< char > const &key) const;

1465 7 has_tag 0 4 2009 17 EggGroup::has_tag 0 1 466 404
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::has_tag
//       Access: Published
//  Description: Returns true if a value has been defined on this node
//               for the particular key (even if that value is the
//               empty string), or false if no value has been set.
////////////////////////////////////////////////////////////////////
69
inline bool EggGroup::has_tag(basic_string< char > const &key) const;

1466 9 clear_tag 0 4 2009 19 EggGroup::clear_tag 0 1 467 397
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::clear_tag
//       Access: Published
//  Description: Removes the value defined for this key on this
//               particular node.  After a call to clear_tag(),
//               has_tag() will return false for the indicated key.
////////////////////////////////////////////////////////////////////
65
inline void EggGroup::clear_tag(basic_string< char > const &key);

1467 16 get_default_pose 0 4 2009 26 EggGroup::get_default_pose 0 1 468 603
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_default_pose
//       Access: Published
//  Description: Returns a read-only accessor to the initial pose
//               transform.  This is the <DefaultPose> entry for a
//               Joint, and defines only the initial transform pose
//               for the unanimated joint; it has nothing to do with
//               the group's <Transform> entry, which defines the
//               (eventual) space of the group's vertices.
////////////////////////////////////////////////////////////////////
66
inline EggTransform const &EggGroup::get_default_pose(void) const;

1468 19 modify_default_pose 0 4 2009 29 EggGroup::modify_default_pose 0 1 469 605
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::modify_default_pose
//       Access: Published
//  Description: Returns a writable accessor to the initial pose
//               transform.  This is the <DefaultPose> entry for a
//               Joint, and defines only the initial transform pose
//               for the unanimated joint; it has nothing to do with
//               the group's <Transform> entry, which defines the
//               (eventual) space of the group's vertices.
////////////////////////////////////////////////////////////////////
57
inline EggTransform &EggGroup::modify_default_pose(void);

1469 16 set_default_pose 0 4 2009 26 EggGroup::set_default_pose 0 1 470 580
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_default_pose
//       Access: Published
//  Description: Replaces the initial pose transform.  This is the
//               <DefaultPose> entry for a Joint, and defines only the
//               initial transform pose for the unanimated joint; it
//               has nothing to do with the group's <Transform> entry,
//               which defines the (eventual) space of the group's
//               vertices.
////////////////////////////////////////////////////////////////////
70
inline void EggGroup::set_default_pose(EggTransform const &transform);

1470 18 clear_default_pose 0 4 2009 28 EggGroup::clear_default_pose 0 1 471 305
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::clear_default_pose
//       Access: Published
//  Description: Removes the initial pose transform.  See
//               set_default_pose().
////////////////////////////////////////////////////////////////////
47
inline void EggGroup::clear_default_pose(void);

1471 12 set_scroll_u 0 4 2009 22 EggGroup::set_scroll_u 0 1 472 0
57
inline void EggGroup::set_scroll_u(double const u_speed);

1472 12 set_scroll_v 0 4 2009 22 EggGroup::set_scroll_v 0 1 473 0
57
inline void EggGroup::set_scroll_v(double const v_speed);

1473 12 set_scroll_w 0 4 2009 22 EggGroup::set_scroll_w 0 1 474 0
57
inline void EggGroup::set_scroll_w(double const w_speed);

1474 12 set_scroll_r 0 4 2009 22 EggGroup::set_scroll_r 0 1 475 0
57
inline void EggGroup::set_scroll_r(double const r_speed);

1475 12 get_scroll_u 0 4 2009 22 EggGroup::get_scroll_u 0 1 476 0
49
inline double EggGroup::get_scroll_u(void) const;

1476 12 get_scroll_v 0 4 2009 22 EggGroup::get_scroll_v 0 1 477 0
49
inline double EggGroup::get_scroll_v(void) const;

1477 12 get_scroll_w 0 4 2009 22 EggGroup::get_scroll_w 0 1 478 0
49
inline double EggGroup::get_scroll_w(void) const;

1478 12 get_scroll_r 0 4 2009 22 EggGroup::get_scroll_r 0 1 479 0
49
inline double EggGroup::get_scroll_r(void) const;

1479 17 has_scrolling_uvs 0 4 2009 27 EggGroup::has_scrolling_uvs 0 1 480 0
46
inline bool EggGroup::has_scrolling_uvs(void);

1480 10 ref_vertex 0 4 2009 20 EggGroup::ref_vertex 0 2 481 482 467
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::ref_vertex
//       Access: Published
//  Description: Adds the vertex to the set of those referenced by the
//               group, at the indicated membership level.  If the
//               vertex is already being referenced, increases the
//               membership amount by the indicated amount.
////////////////////////////////////////////////////////////////////
68
void EggGroup::ref_vertex(EggVertex *vert, double membership = (1));

1481 12 unref_vertex 0 4 2009 22 EggGroup::unref_vertex 0 1 483 372
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::unref_vertex
//       Access: Published
//  Description: Removes the vertex from the set of those referenced
//               by the group.  Does nothing if the vertex is not
//               already reffed.
////////////////////////////////////////////////////////////////////
45
void EggGroup::unref_vertex(EggVertex *vert);

1482 18 unref_all_vertices 0 4 2009 28 EggGroup::unref_all_vertices 0 1 484 273
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::unref_all_vertices
//       Access: Published
//  Description: Removes all vertices from the reference list.
////////////////////////////////////////////////////////////////////
40
void EggGroup::unref_all_vertices(void);

1483 21 get_vertex_membership 0 4 2009 31 EggGroup::get_vertex_membership 0 1 485 390
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_vertex_membership
//       Access: Published
//  Description: Returns the amount of membership of the indicated
//               vertex in this group.  If the vertex is not reffed by
//               the group, returns 0.
////////////////////////////////////////////////////////////////////
68
double EggGroup::get_vertex_membership(EggVertex const *vert) const;

1484 21 set_vertex_membership 0 4 2009 31 EggGroup::set_vertex_membership 0 1 486 340
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_vertex_membership
//       Access: Published
//  Description: Explicitly sets the net membership of the indicated
//               vertex in this group to the given value.
////////////////////////////////////////////////////////////////////
73
void EggGroup::set_vertex_membership(EggVertex *vert, double membership);

1485 11 steal_vrefs 0 4 2009 21 EggGroup::steal_vrefs 0 1 487 450
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::steal_vrefs
//       Access: Published
//  Description: Moves all of the vertex references from the indicated
//               other group into this one.  If a given vertex was
//               previously shared by both groups, the relative
//               memberships will be summed.
////////////////////////////////////////////////////////////////////
44
void EggGroup::steal_vrefs(EggGroup *other);

1486 19 test_vref_integrity 0 4 2009 29 EggGroup::test_vref_integrity 0 1 488 0
47
void EggGroup::test_vref_integrity(void) const;

1487 13 add_group_ref 0 4 2009 23 EggGroup::add_group_ref 0 1 489 475
// _DEBUG

////////////////////////////////////////////////////////////////////
//     Function: EggGroup::add_group_ref
//       Access: Published
//  Description: Adds a new <Ref> entry to the group.  This declares
//               an internal reference to another node, and is used to
//               implement scene-graph instancing; it is only valid if
//               the group_type is GT_instance.
////////////////////////////////////////////////////////////////////
46
void EggGroup::add_group_ref(EggGroup *group);

1488 18 get_num_group_refs 0 4 2009 28 EggGroup::get_num_group_refs 0 1 490 321
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_num_group_refs
//       Access: Published
//  Description: Returns the number of <Ref> entries within this
//               group.  See add_group_ref().
////////////////////////////////////////////////////////////////////
45
int EggGroup::get_num_group_refs(void) const;

1489 13 get_group_ref 0 4 2009 23 EggGroup::get_group_ref 0 1 491 308
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_group_ref
//       Access: Published
//  Description: Returns the nth <Ref> entry within this group.  See
//               add_group_ref().
////////////////////////////////////////////////////////////////////
47
EggGroup *EggGroup::get_group_ref(int n) const;

1490 16 remove_group_ref 0 4 2009 26 EggGroup::remove_group_ref 0 1 492 311
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::remove_group_ref
//       Access: Published
//  Description: Removes the nth <Ref> entry within this group.  See
//               add_group_ref().
////////////////////////////////////////////////////////////////////
39
void EggGroup::remove_group_ref(int n);

1491 16 clear_group_refs 0 4 2009 26 EggGroup::clear_group_refs 0 1 493 315
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::clear_group_refs
//       Access: Published
//  Description: Removes all of the <Ref> entries within this group.
//               See add_group_ref().
////////////////////////////////////////////////////////////////////
38
void EggGroup::clear_group_refs(void);

1492 17 string_group_type 0 4 2009 27 EggGroup::string_group_type 0 1 494 415
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::string_group_type
//       Access: Published, Static
//  Description: Returns the GroupType value associated with the given
//               string representation, or GT_invalid if the string
//               does not match any known GroupType value.
////////////////////////////////////////////////////////////////////
91
static EggGroup::GroupType EggGroup::string_group_type(basic_string< char > const &strval);

1493 16 string_dart_type 0 4 2009 26 EggGroup::string_dart_type 0 1 495 409
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::string_dart_type
//       Access: Published, Static
//  Description: Returns the DartType value associated with the given
//               string representation, or DT_none if the string
//               does not match any known DartType value.
////////////////////////////////////////////////////////////////////
89
static EggGroup::DartType EggGroup::string_dart_type(basic_string< char > const &strval);

1494 15 string_dcs_type 0 4 2009 25 EggGroup::string_dcs_type 0 1 496 413
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::string_dcs_type
//       Access: Published, Static
//  Description: Returns the DCSType value associated with the given
//               string representation, or DC_unspecified if the
//               string does not match any known DCSType value.
////////////////////////////////////////////////////////////////////
87
static EggGroup::DCSType EggGroup::string_dcs_type(basic_string< char > const &strval);

1495 21 string_billboard_type 0 4 2009 31 EggGroup::string_billboard_type 0 1 497 424
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::string_billboard_type
//       Access: Published, Static
//  Description: Returns the BillboardType value associated with the
//               given string representation, or BT_none if the string
//               does not match any known BillboardType value.
////////////////////////////////////////////////////////////////////
99
static EggGroup::BillboardType EggGroup::string_billboard_type(basic_string< char > const &strval);

1496 14 string_cs_type 0 4 2009 24 EggGroup::string_cs_type 0 1 498 428
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::string_cs_type
//       Access: Published, Static
//  Description: Returns the CollisionSolidType value associated with the
//               given string representation, or CST_none if the string
//               does not match any known CollisionSolidType value.
////////////////////////////////////////////////////////////////////
97
static EggGroup::CollisionSolidType EggGroup::string_cs_type(basic_string< char > const &strval);

1497 20 string_collide_flags 0 4 2009 30 EggGroup::string_collide_flags 0 1 499 546
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::string_collide_flags
//       Access: Published, Static
//  Description: Returns the CollideFlags value associated with the
//               given string representation, or CF_none if the string
//               does not match any known CollideFlags value.  This
//               only recognizes a single keyword; it does not attempt
//               to parse a string of keywords.
////////////////////////////////////////////////////////////////////
97
static EggGroup::CollideFlags EggGroup::string_collide_flags(basic_string< char > const &strval);

1498 17 string_blend_mode 0 4 2009 27 EggGroup::string_blend_mode 0 1 500 406
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::string_blend_mode
//       Access: Published, Static
//  Description: Returns the BlendMode value associated with the
//               given string representation, or BM_none if the string
//               does not match any known BlendMode.
////////////////////////////////////////////////////////////////////
91
static EggGroup::BlendMode EggGroup::string_blend_mode(basic_string< char > const &strval);

1499 20 string_blend_operand 0 4 2009 30 EggGroup::string_blend_operand 0 1 501 415
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::string_blend_operand
//       Access: Published, Static
//  Description: Returns the BlendOperand value associated with the
//               given string representation, or BO_none if the string
//               does not match any known BlendOperand.
////////////////////////////////////////////////////////////////////
97
static EggGroup::BlendOperand EggGroup::string_blend_operand(basic_string< char > const &strval);

1500 14 get_class_type 0 4 2009 24 EggGroup::get_class_type 0 1 502 0
49
static TypeHandle EggGroup::get_class_type(void);

1501 6 EggBin 0 4 2018 14 EggBin::EggBin 0 4 509 510 511 512 668
////////////////////////////////////////////////////////////////////
//     Function: EggBin::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggBin::EggGroup copy constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggBin::Copy constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
130
EggBin::EggBin(basic_string< char > const &name = (""));
EggBin::EggBin(EggGroup const &copy);
EggBin::EggBin(EggBin const &copy);

1502 14 set_bin_number 0 4 2018 22 EggBin::set_bin_number 0 1 513 218
////////////////////////////////////////////////////////////////////
//     Function: EggBin::set_bin_number
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
44
void EggBin::set_bin_number(int bin_number);

1503 14 get_bin_number 0 4 2018 22 EggBin::get_bin_number 0 1 514 218
////////////////////////////////////////////////////////////////////
//     Function: EggBin::get_bin_number
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
39
int EggBin::get_bin_number(void) const;

1504 14 get_class_type 0 4 2018 22 EggBin::get_class_type 0 1 515 0
47
static TypeHandle EggBin::get_class_type(void);

1505 7 ~EggBin 0 4 2018 15 EggBin::~EggBin 0 0 0
22
EggBin::~EggBin(void);

1506 9 make_bins 0 4 2019 22 EggBinMaker::make_bins 0 1 516 460
////////////////////////////////////////////////////////////////////
//     Function: EggBinMaker::make_bins
//       Access: Public
//  Description: The main entry point to EggBinMaker.  Walks the egg
//               scene graph beginning at the indicated root node, and
//               moves all binnable nodes into EggBin objects.
//               Returns the number of EggBins created.
////////////////////////////////////////////////////////////////////
53
int EggBinMaker::make_bins(EggGroupNode *root_group);

1507 12 prepare_node 0 6 2019 25 EggBinMaker::prepare_node 0 1 517 419
////////////////////////////////////////////////////////////////////
//     Function: EggBinMaker::prepare_node
//       Access: Public, Virtual
//  Description: May be overridden in derived classes to perform some
//               setup work as each node is encountered.  This will be
//               called once for each node in the egg hierarchy.
////////////////////////////////////////////////////////////////////
54
virtual void EggBinMaker::prepare_node(EggNode *node);

1508 14 get_bin_number 0 6 2019 27 EggBinMaker::get_bin_number 0 1 518 0
65
virtual int EggBinMaker::get_bin_number(EggNode const *node) = 0;

1509 10 sorts_less 0 6 2019 23 EggBinMaker::sorts_less 0 1 519 669
////////////////////////////////////////////////////////////////////
//     Function: EggBinMaker::sorts_less
//       Access: Public, Virtual
//  Description: May be overridden in derived classes to create
//               additional bins within a particular bin number, based
//               on some arbitrary property of nodes.  This function
//               establishes an arbitrary but fixed ordering between
//               nodes; if two nodes do not sort to the same position,
//               different bins are created for each one (with the
//               same bin number on each bin).
////////////////////////////////////////////////////////////////////
89
virtual bool EggBinMaker::sorts_less(int bin_number, EggNode const *a, EggNode const *b);

1510 14 collapse_group 0 6 2019 27 EggBinMaker::collapse_group 0 1 520 398
////////////////////////////////////////////////////////////////////
//     Function: EggBinMaker::collapse_group
//       Access: Public, Virtual
//  Description: May be overridden in derived classes to specify
//               whether a particular group node, apparently
//               redundant, may be safely collapsed out.
////////////////////////////////////////////////////////////////////
80
virtual bool EggBinMaker::collapse_group(EggGroup const *group, int bin_number);

1511 12 get_bin_name 0 6 2019 25 EggBinMaker::get_bin_name 0 1 521 381
////////////////////////////////////////////////////////////////////
//     Function: EggBinMaker::get_bin_name
//       Access: Public, Virtual
//  Description: May be overridden in derived classes to define a name
//               for each new bin, based on its bin number, and a
//               sample child.
////////////////////////////////////////////////////////////////////
93
virtual basic_string< char > EggBinMaker::get_bin_name(int bin_number, EggNode const *child);

1512 8 make_bin 0 6 2019 21 EggBinMaker::make_bin 0 1 522 655
////////////////////////////////////////////////////////////////////
//     Function: EggBinMaker::make_bin
//       Access: Public, Virtual
//  Description: May be overridden in derived classes to construct a
//               new EggBin object (or some derived class, if needed),
//               and preload some initial data into as required.
//
//               child is an arbitrary child of the bin, and
//               collapse_from is the group the bin is being collapsed
//               with, if any (implying collapse_group() returned
//               true), or NULL if not.
////////////////////////////////////////////////////////////////////
113
virtual PointerTo< EggBin > EggBinMaker::make_bin(int bin_number, EggNode const *child, EggGroup *collapse_from);

1513 14 get_class_type 0 4 2019 27 EggBinMaker::get_class_type 0 1 523 0
52
static TypeHandle EggBinMaker::get_class_type(void);

1514 10 EggComment 0 4 2020 22 EggComment::EggComment 0 2 524 525 931
// Filename: eggComment.I
// Created by:  drose (20Jan99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggComment::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggComment::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
161
inline EggComment::EggComment(basic_string< char > const &node_name, basic_string< char > const &comment);
inline EggComment::EggComment(EggComment const &copy);

1515 10 operator = 0 4 2020 22 EggComment::operator = 0 2 526 527 545
// You can use the string operators to directly set and manipulate
// the comment.

////////////////////////////////////////////////////////////////////
//     Function: EggComment::Assignment operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggComment::Copy assignment operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
146
inline EggComment &EggComment::operator =(basic_string< char > const &comment);
inline EggComment &EggComment::operator =(EggComment const &copy);

1516 17 operator typecast 0 132 2020 29 EggComment::operator typecast 0 1 531 232
////////////////////////////////////////////////////////////////////
//     Function: EggComment::String typecast operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
77
inline basic_string< char > const &EggComment::operator typecast(void) const;

1517 11 set_comment 0 4 2020 23 EggComment::set_comment 0 1 528 262
// Or, you can set and get it explicitly.

////////////////////////////////////////////////////////////////////
//     Function: EggComment::set_comment
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
73
inline void EggComment::set_comment(basic_string< char > const &comment);

1518 11 get_comment 0 4 2020 23 EggComment::get_comment 0 1 529 219
////////////////////////////////////////////////////////////////////
//     Function: EggComment::set_comment
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
64
inline basic_string< char > EggComment::get_comment(void) const;

1519 14 get_class_type 0 4 2020 26 EggComment::get_class_type 0 1 530 0
51
static TypeHandle EggComment::get_class_type(void);

1520 11 ~EggComment 0 4 2020 23 EggComment::~EggComment 0 0 0
30
EggComment::~EggComment(void);

1521 10 operator = 0 4 2021 27 EggFilenameNode::operator = 0 1 532 237
////////////////////////////////////////////////////////////////////
//     Function: EggFilenameNode::Copy assignment operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
81
inline EggFilenameNode &EggFilenameNode::operator =(EggFilenameNode const &copy);

1522 21 get_default_extension 0 6 2021 38 EggFilenameNode::get_default_extension 0 1 533 297
////////////////////////////////////////////////////////////////////
//     Function: EggFilenameNode::get_default_extension
//       Access: Public, Virtual
//  Description: Returns the default extension for this filename type.
////////////////////////////////////////////////////////////////////
80
virtual basic_string< char > EggFilenameNode::get_default_extension(void) const;

1523 12 get_filename 0 4 2021 29 EggFilenameNode::get_filename 0 1 534 276
////////////////////////////////////////////////////////////////////
//     Function: EggFilenameNode::get_filename
//       Access: Public
//  Description: Returns a nonmodifiable reference to the filename.
////////////////////////////////////////////////////////////////////
65
inline Filename const &EggFilenameNode::get_filename(void) const;

1524 12 set_filename 0 4 2021 29 EggFilenameNode::set_filename 0 1 535 225
////////////////////////////////////////////////////////////////////
//     Function: EggFilenameNode::set_filename
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
68
inline void EggFilenameNode::set_filename(Filename const &filename);

1525 12 get_fullpath 0 4 2021 29 EggFilenameNode::get_fullpath 0 1 536 822
////////////////////////////////////////////////////////////////////
//     Function: EggFilenameNode::get_fullpath
//       Access: Public
//  Description: Returns the full pathname to the file, if it is
//               known; otherwise, returns the same thing as
//               get_filename().
//
//               This function simply returns whatever was set by the
//               last call to set_fullpath().  This string is not
//               written to the egg file; its main purpose is to
//               record the full path to a filename (for instance, a
//               texture filename) if it is known, for egg structures
//               that are generated in-memory and then immediately
//               converted to a scene graph.
////////////////////////////////////////////////////////////////////
65
inline Filename const &EggFilenameNode::get_fullpath(void) const;

1526 12 set_fullpath 0 4 2021 29 EggFilenameNode::set_fullpath 0 1 537 316
////////////////////////////////////////////////////////////////////
//     Function: EggFilenameNode::set_fullpath
//       Access: Public
//  Description: Records the full pathname to the file, for the
//               benefit of get_fullpath().
////////////////////////////////////////////////////////////////////
68
inline void EggFilenameNode::set_fullpath(Filename const &fullpath);

1527 14 get_class_type 0 4 2021 31 EggFilenameNode::get_class_type 0 1 538 0
56
static TypeHandle EggFilenameNode::get_class_type(void);

1528 16 ~EggFilenameNode 0 4 2021 33 EggFilenameNode::~EggFilenameNode 0 0 0
40
EggFilenameNode::~EggFilenameNode(void);

1529 25 upcast_to_EggFilenameNode 0 12 2022 37 EggTexture::upcast_to_EggFilenameNode 0 1 647 41
upcast from EggTexture to EggFilenameNode
61
EggFilenameNode *EggTexture::upcast_to_EggFilenameNode(void);

1530 22 downcast_to_EggTexture 0 12 2021 39 EggFilenameNode::downcast_to_EggTexture 0 1 648 43
downcast from EggFilenameNode to EggTexture
58
EggTexture *EggFilenameNode::downcast_to_EggTexture(void);

1531 23 upcast_to_EggRenderMode 0 12 2022 35 EggTexture::upcast_to_EggRenderMode 0 1 649 39
upcast from EggTexture to EggRenderMode
57
EggRenderMode *EggTexture::upcast_to_EggRenderMode(void);

1532 22 downcast_to_EggTexture 0 12 1998 37 EggRenderMode::downcast_to_EggTexture 0 1 650 41
downcast from EggRenderMode to EggTexture
56
EggTexture *EggRenderMode::downcast_to_EggTexture(void);

1533 22 upcast_to_EggTransform 0 12 2022 34 EggTexture::upcast_to_EggTransform 0 1 651 38
upcast from EggTexture to EggTransform
55
EggTransform *EggTexture::upcast_to_EggTransform(void);

1534 22 downcast_to_EggTexture 0 12 2003 36 EggTransform::downcast_to_EggTexture 0 1 652 40
downcast from EggTransform to EggTexture
55
EggTexture *EggTransform::downcast_to_EggTexture(void);

1535 10 EggTexture 0 4 2022 22 EggTexture::EggTexture 0 2 539 540 451
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggTexture::Copy constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
136
EggTexture::EggTexture(basic_string< char > const &tref_name, Filename const &filename);
EggTexture::EggTexture(EggTexture const &copy);

1536 10 operator = 0 4 2022 22 EggTexture::operator = 0 1 541 235
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::Copy assignment operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
59
EggTexture &EggTexture::operator =(EggTexture const &copy);

1537 11 ~EggTexture 0 6 2022 23 EggTexture::~EggTexture 0 0 230
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::Destructor
//       Access: Published, Virtual
//  Description:
////////////////////////////////////////////////////////////////////
38
virtual EggTexture::~EggTexture(void);

1538 5 write 0 6 2022 17 EggTexture::write 0 1 542 315
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::write
//       Access: Public, Virtual
//  Description: Writes the texture definition to the indicated output
//               stream in Egg format.
////////////////////////////////////////////////////////////////////
69
virtual void EggTexture::write(ostream &out, int indent_level) const;

1539 16 is_equivalent_to 0 4 2022 28 EggTexture::is_equivalent_to 0 1 543 1471
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::is_equivalent_to
//       Access: Published
//  Description: Returns true if the two textures are equivalent in
//               all relevant properties (according to eq), false
//               otherwise.
//
//               The Equivalence parameter, eq, should be set to the
//               bitwise OR of the following properties, according to
//               what you consider relevant:
//
//               EggTexture::E_basename:
//                 The basename part of the texture filename, without
//                 the directory prefix *or* the filename extension.
//
//               EggTexture::E_extension:
//                 The extension part of the texture filename.
//
//               EggTexture::E_dirname:
//                 The directory prefix of the texture filename.
//
//               EggTexture::E_complete_filename:
//                 The union of the above three; that is, the complete
//                 filename, with directory, basename, and extension.
//
//               EggTexture::E_transform:
//                 The texture matrix.
//
//               EggTexture::E_attributes:
//                 All remaining texture attributes (mode, mipmap,
//                 etc.) except TRef name.
//
//               EggTexture::E_tref_name:
//                 The TRef name.
////////////////////////////////////////////////////////////////////
73
bool EggTexture::is_equivalent_to(EggTexture const &other, int eq) const;

1540 15 sorts_less_than 0 4 2022 27 EggTexture::sorts_less_than 0 1 544 502
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::sorts_less_than
//       Access: Published
//  Description: An ordering operator to compare two textures for
//               sorting order.  This imposes an arbitrary ordering
//               useful to identify unique textures, according to the
//               indicated Equivalence factor.  See
//               is_equivalent_to().
////////////////////////////////////////////////////////////////////
72
bool EggTexture::sorts_less_than(EggTexture const &other, int eq) const;

1541 17 has_alpha_channel 0 4 2022 29 EggTexture::has_alpha_channel 0 1 545 537
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::has_alpha_channel
//       Access: Published
//  Description: Given the number of color components (channels) in
//               the image file as actually read from the disk, return
//               true if this texture seems to have an alpha channel
//               or not.  This depends on the EggTexture's format as
//               well as the number of channels.
////////////////////////////////////////////////////////////////////
61
bool EggTexture::has_alpha_channel(int num_components) const;

1542 16 set_texture_type 0 4 2022 28 EggTexture::set_texture_type 0 1 546 713
// Filename: eggTexture.I
// Created by:  drose (18Jan99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_texture_type
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
79
inline void EggTexture::set_texture_type(EggTexture::TextureType texture_type);

1543 16 get_texture_type 0 4 2022 28 EggTexture::get_texture_type 0 1 547 227
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_texture_type
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
72
inline EggTexture::TextureType EggTexture::get_texture_type(void) const;

1544 10 set_format 0 4 2022 22 EggTexture::set_format 0 1 548 221
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_format
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
62
inline void EggTexture::set_format(EggTexture::Format format);

1545 10 get_format 0 4 2022 22 EggTexture::get_format 0 1 549 221
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_format
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
61
inline EggTexture::Format EggTexture::get_format(void) const;

1546 20 set_compression_mode 0 4 2022 32 EggTexture::set_compression_mode 0 1 550 231
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_compression_mode
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
79
inline void EggTexture::set_compression_mode(EggTexture::CompressionMode mode);

1547 20 get_compression_mode 0 4 2022 32 EggTexture::get_compression_mode 0 1 551 231
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_compression_mode
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
80
inline EggTexture::CompressionMode EggTexture::get_compression_mode(void) const;

1548 13 set_wrap_mode 0 4 2022 25 EggTexture::set_wrap_mode 0 1 552 224
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_wrap_mode
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
65
inline void EggTexture::set_wrap_mode(EggTexture::WrapMode mode);

1549 13 get_wrap_mode 0 4 2022 25 EggTexture::get_wrap_mode 0 1 553 224
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_wrap_mode
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
66
inline EggTexture::WrapMode EggTexture::get_wrap_mode(void) const;

1550 10 set_wrap_u 0 4 2022 22 EggTexture::set_wrap_u 0 1 554 221
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_wrap_u
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
62
inline void EggTexture::set_wrap_u(EggTexture::WrapMode mode);

1551 10 get_wrap_u 0 4 2022 22 EggTexture::get_wrap_u 0 1 555 345
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_wrap_u
//       Access: Published
//  Description: Returns the amount specified for U wrap.  This may be
//               unspecified, even if there is an overall wrap value.
////////////////////////////////////////////////////////////////////
63
inline EggTexture::WrapMode EggTexture::get_wrap_u(void) const;

1552 16 determine_wrap_u 0 4 2022 28 EggTexture::determine_wrap_u 0 1 556 439
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::determine_wrap_u
//       Access: Published
//  Description: Determines the appropriate wrap in the U direction.
//               This is different from get_wrap_u() in that if the U
//               wrap is unspecified, it returns the overall wrap
//               value.
////////////////////////////////////////////////////////////////////
69
inline EggTexture::WrapMode EggTexture::determine_wrap_u(void) const;

1553 10 set_wrap_v 0 4 2022 22 EggTexture::set_wrap_v 0 1 557 221
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_wrap_v
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
62
inline void EggTexture::set_wrap_v(EggTexture::WrapMode mode);

1554 10 get_wrap_v 0 4 2022 22 EggTexture::get_wrap_v 0 1 558 345
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_wrap_v
//       Access: Published
//  Description: Returns the amount specified for V wrap.  This may be
//               unspecified, even if there is an overall wrap value.
////////////////////////////////////////////////////////////////////
63
inline EggTexture::WrapMode EggTexture::get_wrap_v(void) const;

1555 16 determine_wrap_v 0 4 2022 28 EggTexture::determine_wrap_v 0 1 559 439
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::determine_wrap_v
//       Access: Published
//  Description: Determines the appropriate wrap in the V direction.
//               This is different from get_wrap_v() in that if the V
//               wrap is unspecified, it returns the overall wrap
//               value.
////////////////////////////////////////////////////////////////////
69
inline EggTexture::WrapMode EggTexture::determine_wrap_v(void) const;

1556 10 set_wrap_w 0 4 2022 22 EggTexture::set_wrap_w 0 1 560 221
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_wrap_w
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
62
inline void EggTexture::set_wrap_w(EggTexture::WrapMode mode);

1557 10 get_wrap_w 0 4 2022 22 EggTexture::get_wrap_w 0 1 561 345
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_wrap_w
//       Access: Published
//  Description: Returns the amount specified for W wrap.  This may be
//               unspecified, even if there is an overall wrap value.
////////////////////////////////////////////////////////////////////
63
inline EggTexture::WrapMode EggTexture::get_wrap_w(void) const;

1558 16 determine_wrap_w 0 4 2022 28 EggTexture::determine_wrap_w 0 1 562 439
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::determine_wrap_w
//       Access: Published
//  Description: Determines the appropriate wrap in the W direction.
//               This is different from get_wrap_w() in that if the W
//               wrap is unspecified, it returns the overall wrap
//               value.
////////////////////////////////////////////////////////////////////
69
inline EggTexture::WrapMode EggTexture::determine_wrap_w(void) const;

1559 13 set_minfilter 0 4 2022 25 EggTexture::set_minfilter 0 1 563 224
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_minfilter
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
67
inline void EggTexture::set_minfilter(EggTexture::FilterType type);

1560 13 get_minfilter 0 4 2022 25 EggTexture::get_minfilter 0 1 564 224
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_minfilter
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
68
inline EggTexture::FilterType EggTexture::get_minfilter(void) const;

1561 13 set_magfilter 0 4 2022 25 EggTexture::set_magfilter 0 1 565 224
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_magfilter
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
67
inline void EggTexture::set_magfilter(EggTexture::FilterType type);

1562 13 get_magfilter 0 4 2022 25 EggTexture::get_magfilter 0 1 566 224
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_magfilter
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
68
inline EggTexture::FilterType EggTexture::get_magfilter(void) const;

1563 22 set_anisotropic_degree 0 4 2022 34 EggTexture::set_anisotropic_degree 0 1 567 381
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_anisotropic_degree
//       Access: Published
//  Description: Sets the degree of anisotropic filtering for this
//               texture.  1 is off; higher levels indicate filtering
//               in effect.
////////////////////////////////////////////////////////////////////
71
inline void EggTexture::set_anisotropic_degree(int anisotropic_degree);

1564 24 clear_anisotropic_degree 0 4 2022 36 EggTexture::clear_anisotropic_degree 0 1 568 321
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::clear_anisotropic_degree
//       Access: Published
//  Description: Removes the specification of anisotropic filtering
//               from the texture.
////////////////////////////////////////////////////////////////////
55
inline void EggTexture::clear_anisotropic_degree(void);

1565 22 has_anisotropic_degree 0 4 2022 34 EggTexture::has_anisotropic_degree 0 1 569 382
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::has_anisotropic_degree
//       Access: Published
//  Description: Returns true if a value for the anisotropic filtering
//               degree has been specified for this texture, false
//               otherwise.
////////////////////////////////////////////////////////////////////
59
inline bool EggTexture::has_anisotropic_degree(void) const;

1566 22 get_anisotropic_degree 0 4 2022 34 EggTexture::get_anisotropic_degree 0 1 570 386
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_anisotropic_degree
//       Access: Published
//  Description: Returns the anisotropic filtering degree that has
//               been specified for this texture, or 0 if nothing has
//               been specified.
////////////////////////////////////////////////////////////////////
58
inline int EggTexture::get_anisotropic_degree(void) const;

1567 12 set_env_type 0 4 2022 24 EggTexture::set_env_type 0 1 571 223
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_env_type
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
63
inline void EggTexture::set_env_type(EggTexture::EnvType type);

1568 12 get_env_type 0 4 2022 24 EggTexture::get_env_type 0 1 572 223
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_env_type
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
64
inline EggTexture::EnvType EggTexture::get_env_type(void) const;

1569 21 affects_polygon_alpha 0 4 2022 33 EggTexture::affects_polygon_alpha 0 1 573 415
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::affects_polygon_alpha
//       Access: Published
//  Description: Returns true if this texture's environment type or
//               combine mode allows the texture to have an effect on
//               the polygon's alpha values, false otherwise.
////////////////////////////////////////////////////////////////////
51
bool EggTexture::affects_polygon_alpha(void) const;

1570 16 set_combine_mode 0 4 2022 28 EggTexture::set_combine_mode 0 1 574 227
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_combine_mode
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
105
inline void EggTexture::set_combine_mode(EggTexture::CombineChannel channel, EggTexture::CombineMode cm);

1571 16 get_combine_mode 0 4 2022 28 EggTexture::get_combine_mode 0 1 575 227
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_combine_mode
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
102
inline EggTexture::CombineMode EggTexture::get_combine_mode(EggTexture::CombineChannel channel) const;

1572 18 set_combine_source 0 4 2022 30 EggTexture::set_combine_source 0 1 576 229
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_combine_source
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
116
inline void EggTexture::set_combine_source(EggTexture::CombineChannel channel, int n, EggTexture::CombineSource cs);

1573 18 get_combine_source 0 4 2022 30 EggTexture::get_combine_source 0 1 577 229
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_combine_source
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
113
inline EggTexture::CombineSource EggTexture::get_combine_source(EggTexture::CombineChannel channel, int n) const;

1574 19 set_combine_operand 0 4 2022 31 EggTexture::set_combine_operand 0 1 578 230
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_combine_operand
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
118
inline void EggTexture::set_combine_operand(EggTexture::CombineChannel channel, int n, EggTexture::CombineOperand co);

1575 19 get_combine_operand 0 4 2022 31 EggTexture::get_combine_operand 0 1 579 230
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_combine_operand
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
115
inline EggTexture::CombineOperand EggTexture::get_combine_operand(EggTexture::CombineChannel channel, int n) const;

1576 16 set_saved_result 0 4 2022 28 EggTexture::set_saved_result 0 1 580 1011
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_saved_result
//       Access: Published
//  Description: Sets the saved_result flag.  When this is true, the
//               output of this stage is not part of the normal
//               pipeline--that is, it will not be supplied as the
//               "previous" source for the next texture stage--but it
//               will instead be supplied as the "last_saved_result"
//               source for any future stages, until the next
//               TextureStage with a saved_result set true is
//               encountered.
//
//               This can be used to reuse the results of this texture
//               stage as input to more than one stage later in the
//               pipeline.
//
//               The last texture in the pipeline (the one with the
//               highest sort value) should not have this flag set.
////////////////////////////////////////////////////////////////////
60
inline void EggTexture::set_saved_result(bool saved_result);

1577 16 get_saved_result 0 4 2022 28 EggTexture::get_saved_result 0 1 581 322
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_saved_result
//       Access: Published
//  Description: Returns the current setting of the saved_result flag.
//               See set_saved_result().
////////////////////////////////////////////////////////////////////
53
inline bool EggTexture::get_saved_result(void) const;

1578 11 set_tex_gen 0 4 2022 23 EggTexture::set_tex_gen 0 1 582 222
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_tex_gen
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
64
inline void EggTexture::set_tex_gen(EggTexture::TexGen tex_gen);

1579 11 get_tex_gen 0 4 2022 23 EggTexture::get_tex_gen 0 1 583 222
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_tex_gen
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
62
inline EggTexture::TexGen EggTexture::get_tex_gen(void) const;

1580 17 set_quality_level 0 4 2022 29 EggTexture::set_quality_level 0 1 584 228
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_quality_level
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
82
inline void EggTexture::set_quality_level(EggTexture::QualityLevel quality_level);

1581 17 get_quality_level 0 4 2022 29 EggTexture::get_quality_level 0 1 585 228
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_quality_level
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
74
inline EggTexture::QualityLevel EggTexture::get_quality_level(void) const;

1582 14 set_stage_name 0 4 2022 26 EggTexture::set_stage_name 0 1 586 778
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_stage_name
//       Access: Published
//  Description: Specifies the particular TextureStage this texture
//               will be rendered on by name.  If this is omitted, the
//               texture will be rendered on the default TextureStage,
//               unless some other stage-specific property is
//               specificied, in which case the texture will be
//               rendered on a TextureStage with the same name as the
//               tref.  This is in support of multitexturing.
//
//               Each different TextureStage in the world must be
//               uniquely named.
////////////////////////////////////////////////////////////////////
79
inline void EggTexture::set_stage_name(basic_string< char > const &stage_name);

1583 16 clear_stage_name 0 4 2022 28 EggTexture::clear_stage_name 0 1 587 273
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::clear_stage_name
//       Access: Published
//  Description: Removes the named TextureStage specification.
////////////////////////////////////////////////////////////////////
47
inline void EggTexture::clear_stage_name(void);

1584 14 has_stage_name 0 4 2022 26 EggTexture::has_stage_name 0 1 588 336
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::has_stage_name
//       Access: Published
//  Description: Returns true if a stage name has been explicitly
//               specified for this texture, false otherwise.
////////////////////////////////////////////////////////////////////
51
inline bool EggTexture::has_stage_name(void) const;

1585 14 get_stage_name 0 4 2022 26 EggTexture::get_stage_name 0 1 589 392
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_stage_name
//       Access: Published
//  Description: Returns the stage name that has been specified for
//               this texture, or the tref name if no texture stage
//               has explicitly been specified.
////////////////////////////////////////////////////////////////////
74
inline basic_string< char > const &EggTexture::get_stage_name(void) const;

1586 12 set_priority 0 4 2022 24 EggTexture::set_priority 0 1 590 435
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_priority
//       Access: Published
//  Description: Sets the importance of this texture with respect to
//               other textures also applied on the same geometry.
//               This is only meaningful in the presence of
//               multitexturing.
////////////////////////////////////////////////////////////////////
51
inline void EggTexture::set_priority(int priority);

1587 14 clear_priority 0 4 2022 26 EggTexture::clear_priority 0 1 591 345
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::clear_priority
//       Access: Published
//  Description: Removes the specification of multitexture priority
//               from the texture.  The default priority value is 0.
////////////////////////////////////////////////////////////////////
45
inline void EggTexture::clear_priority(void);

1588 12 has_priority 0 4 2022 24 EggTexture::has_priority 0 1 592 371
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::has_priority
//       Access: Published
//  Description: Returns true if a priority value for multitexture
//               importance has been specified for the texture, false
//               otherwise.
////////////////////////////////////////////////////////////////////
49
inline bool EggTexture::has_priority(void) const;

1589 12 get_priority 0 4 2022 24 EggTexture::get_priority 0 1 593 386
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_priority
//       Access: Published
//  Description: Returns the multitexture importance value that has been
//               specified for the texture, or 0 if no priority value has
//               been specified.
////////////////////////////////////////////////////////////////////
48
inline int EggTexture::get_priority(void) const;

1590 9 set_color 0 4 2022 21 EggTexture::set_color 0 1 594 220
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_color
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
59
inline void EggTexture::set_color(LVecBase4f const &color);

1591 11 clear_color 0 4 2022 23 EggTexture::clear_color 0 1 595 222
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::clear_color
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
42
inline void EggTexture::clear_color(void);

1592 9 has_color 0 4 2022 21 EggTexture::has_color 0 1 596 303
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::has_color
//       Access: Published
//  Description: Returns true if a blend color has been
//               specified for the texture.
////////////////////////////////////////////////////////////////////
46
inline bool EggTexture::has_color(void) const;

1593 9 get_color 0 4 2022 21 EggTexture::get_color 0 1 597 315
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_color
//       Access: Published
//  Description: Returns the blend color if one has been
//               specified, or (0, 0, 0, 1) otherwise.
////////////////////////////////////////////////////////////////////
59
inline LVecBase4f const &EggTexture::get_color(void) const;

1594 16 set_border_color 0 4 2022 28 EggTexture::set_border_color 0 1 598 227
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_border_color
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
73
inline void EggTexture::set_border_color(LVecBase4f const &border_color);

1595 18 clear_border_color 0 4 2022 30 EggTexture::clear_border_color 0 1 599 229
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::clear_border_color
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
49
inline void EggTexture::clear_border_color(void);

1596 16 has_border_color 0 4 2022 28 EggTexture::has_border_color 0 1 600 311
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::has_border_color
//       Access: Published
//  Description: Returns true if a border color has been
//               specified for the texture.
////////////////////////////////////////////////////////////////////
53
inline bool EggTexture::has_border_color(void) const;

1597 16 get_border_color 0 4 2022 28 EggTexture::get_border_color 0 1 601 323
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_border_color
//       Access: Published
//  Description: Returns the border color if one has been
//               specified, or (0, 0, 0, 1) otherwise.
////////////////////////////////////////////////////////////////////
66
inline LVecBase4f const &EggTexture::get_border_color(void) const;

1598 11 set_uv_name 0 4 2022 23 EggTexture::set_uv_name 0 1 602 593
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_uv_name
//       Access: Published
//  Description: Specifies the named set of texture coordinates that
//               this texture will use when it is applied to geometry.
//               Geometry may have multiple sets of texture
//               coordinates defined, by name.
//
//               If this is not specified for a particular texture,
//               the default set of texture coordinates will be used.
////////////////////////////////////////////////////////////////////
73
inline void EggTexture::set_uv_name(basic_string< char > const &uv_name);

1599 13 clear_uv_name 0 4 2022 25 EggTexture::clear_uv_name 0 1 603 398
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::clear_uv_name
//       Access: Published
//  Description: Removes the restriction to a particular named set of
//               texture coordinates and restores the texture to using
//               the default texture coordinates.
////////////////////////////////////////////////////////////////////
44
inline void EggTexture::clear_uv_name(void);

1600 11 has_uv_name 0 4 2022 23 EggTexture::has_uv_name 0 1 604 336
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::has_uv_name
//       Access: Published
//  Description: Returns true if a texcoord name has been explicitly
//               specified for this texture, false otherwise.
////////////////////////////////////////////////////////////////////
48
inline bool EggTexture::has_uv_name(void) const;

1601 11 get_uv_name 0 4 2022 23 EggTexture::get_uv_name 0 1 605 395
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_uv_name
//       Access: Published
//  Description: Returns the texcoord name that has been specified for
//               this texture, or the empty string if no texcoord name
//               has explicitly been specified.
////////////////////////////////////////////////////////////////////
71
inline basic_string< char > const &EggTexture::get_uv_name(void) const;

1602 13 set_rgb_scale 0 4 2022 25 EggTexture::set_rgb_scale 0 1 606 493
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_rgb_scale
//       Access: Published
//  Description: Sets an additional factor that will scale all three
//               r, g, b components after the texture has been
//               applied.  This is used only when a combine mode is in
//               effect.
//
//               The only legal values are 1, 2, or 4.
////////////////////////////////////////////////////////////////////
53
inline void EggTexture::set_rgb_scale(int rgb_scale);

1603 15 clear_rgb_scale 0 4 2022 27 EggTexture::clear_rgb_scale 0 1 607 325
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::clear_rgb_scale
//       Access: Published
//  Description: Removes the rgb_scale from the texture and restores
//               it to the default value of 1.
////////////////////////////////////////////////////////////////////
46
inline void EggTexture::clear_rgb_scale(void);

1604 13 has_rgb_scale 0 4 2022 25 EggTexture::has_rgb_scale 0 1 608 323
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::has_rgb_scale
//       Access: Published
//  Description: Returns true if an rgb_scale has been specified for
//               the texture, false otherwise.
////////////////////////////////////////////////////////////////////
50
inline bool EggTexture::has_rgb_scale(void) const;

1605 13 get_rgb_scale 0 4 2022 25 EggTexture::get_rgb_scale 0 1 609 374
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_rgb_scale
//       Access: Published
//  Description: Returns the rgb_scale value that has been
//               specified for the texture, or 1 if no rgb_scale value
//               has been specified.
////////////////////////////////////////////////////////////////////
49
inline int EggTexture::get_rgb_scale(void) const;

1606 15 set_alpha_scale 0 4 2022 27 EggTexture::set_alpha_scale 0 1 610 468
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_alpha_scale
//       Access: Published
//  Description: Sets an additional factor that will scale the
//               alpha component after the texture has been applied.
//               This is used only when a combine mode is in effect.
//
//               The only legal values are 1, 2, or 4.
////////////////////////////////////////////////////////////////////
57
inline void EggTexture::set_alpha_scale(int alpha_scale);

1607 17 clear_alpha_scale 0 4 2022 29 EggTexture::clear_alpha_scale 0 1 611 329
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::clear_alpha_scale
//       Access: Published
//  Description: Removes the alpha_scale from the texture and restores
//               it to the default value of 1.
////////////////////////////////////////////////////////////////////
48
inline void EggTexture::clear_alpha_scale(void);

1608 15 has_alpha_scale 0 4 2022 27 EggTexture::has_alpha_scale 0 1 612 327
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::has_alpha_scale
//       Access: Published
//  Description: Returns true if an alpha_scale has been specified for
//               the texture, false otherwise.
////////////////////////////////////////////////////////////////////
52
inline bool EggTexture::has_alpha_scale(void) const;

1609 15 get_alpha_scale 0 4 2022 27 EggTexture::get_alpha_scale 0 1 613 380
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_alpha_scale
//       Access: Published
//  Description: Returns the alpha_scale value that has been
//               specified for the texture, or 1 if no alpha_scale
//               value has been specified.
////////////////////////////////////////////////////////////////////
51
inline int EggTexture::get_alpha_scale(void) const;

1610 18 set_alpha_filename 0 4 2022 30 EggTexture::set_alpha_filename 0 1 614 516
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_alpha_filename
//       Access: Published
//  Description: Specifies a separate file that will be loaded in with
//               the 1- or 3-component texture and applied as the
//               alpha channel.  This is useful when loading textures
//               from file formats that do not support alpha, for
//               instance jpg.
////////////////////////////////////////////////////////////////////
69
inline void EggTexture::set_alpha_filename(Filename const &filename);

1611 20 clear_alpha_filename 0 4 2022 32 EggTexture::clear_alpha_filename 0 1 615 231
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::clear_alpha_filename
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
51
inline void EggTexture::clear_alpha_filename(void);

1612 18 has_alpha_filename 0 4 2022 30 EggTexture::has_alpha_filename 0 1 616 381
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::has_alpha_filename
//       Access: Published
//  Description: Returns true if a separate file for the alpha
//               component has been applied, false otherwise.  See
//               set_alpha_filename().
////////////////////////////////////////////////////////////////////
55
inline bool EggTexture::has_alpha_filename(void) const;

1613 18 get_alpha_filename 0 4 2022 30 EggTexture::get_alpha_filename 0 1 617 419
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_alpha_filename
//       Access: Published
//  Description: Returns the separate file assigned for the alpha
//               channel.  It is an error to call this unless
//               has_alpha_filename() returns true.  See set_alpha_filename().
////////////////////////////////////////////////////////////////////
66
inline Filename const &EggTexture::get_alpha_filename(void) const;

1614 18 set_alpha_fullpath 0 4 2022 30 EggTexture::set_alpha_fullpath 0 1 618 326
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_alpha_fullpath
//       Access: Published
//  Description: Records the full pathname to the file, for the
//               benefit of get_alpha_fullpath().
////////////////////////////////////////////////////////////////////
69
inline void EggTexture::set_alpha_fullpath(Filename const &fullpath);

1615 18 get_alpha_fullpath 0 4 2022 30 EggTexture::get_alpha_fullpath 0 1 619 817
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_alpha_fullpath
//       Access: Published
//  Description: Returns the full pathname to the alpha file, if it is
//               known; otherwise, returns the same thing as
//               get_alpha_filename().
//
//               This function simply returns whatever was set by the
//               last call to set_alpha_fullpath().  This string is
//               not written to the egg file; its main purpose is to
//               record the full path to the alpha filename if it is
//               known, for egg structures that are generated
//               in-memory and then immediately converted to a scene
//               graph.
////////////////////////////////////////////////////////////////////
66
inline Filename const &EggTexture::get_alpha_fullpath(void) const;

1616 22 set_alpha_file_channel 0 4 2022 34 EggTexture::set_alpha_file_channel 0 1 620 742
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_alpha_file_channel
//       Access: Published
//  Description: If a separate alpha-file is specified, this indicates
//               which channel number should be extracted from this
//               file to derive the alpha channel for the final image.
//               The default is 0, which means the grayscale
//               combination of r, g, b.  Otherwise, this should be
//               the 1-based channel number, for instance 1, 2, or 3
//               for r, g, or b, respectively, or 4 for the alpha
//               channel of a four-component image.
////////////////////////////////////////////////////////////////////
71
inline void EggTexture::set_alpha_file_channel(int alpha_file_channel);

1617 24 clear_alpha_file_channel 0 4 2022 36 EggTexture::clear_alpha_file_channel 0 1 621 336
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::clear_alpha_file_channel
//       Access: Published
//  Description: Removes the specification of a particular channel to
//               use from the alpha-file image.
////////////////////////////////////////////////////////////////////
55
inline void EggTexture::clear_alpha_file_channel(void);

1618 22 has_alpha_file_channel 0 4 2022 34 EggTexture::has_alpha_file_channel 0 1 622 349
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::has_alpha_file_channel
//       Access: Published
//  Description: Returns true if a particular channel has been
//               specified for the alpha-file image, false otherwise.
////////////////////////////////////////////////////////////////////
59
inline bool EggTexture::has_alpha_file_channel(void) const;

1619 22 get_alpha_file_channel 0 4 2022 34 EggTexture::get_alpha_file_channel 0 1 623 435
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_alpha_file_channel
//       Access: Published
//  Description: Returns the particular channel that has been
//               specified for the alpha-file image, or 0 if no
//               channel has been specified.  See
//               set_alpha_file_channel().
////////////////////////////////////////////////////////////////////
58
inline int EggTexture::get_alpha_file_channel(void) const;

1620 13 set_multiview 0 4 2022 25 EggTexture::set_multiview 0 1 624 698
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_multiview
//       Access: Published
//  Description: Sets the multiview flag.
//
//               If multiview is true, the filename should contain a
//               hash mark ('#'), which will be filled in with the
//               view number; and a multiview texture will be defined
//               with a series of images, one for each view.
//
//               A multiview texture is most often used for stereo
//               textures, but other uses are also possible, such as
//               for texture animation.
////////////////////////////////////////////////////////////////////
54
inline void EggTexture::set_multiview(bool multiview);

1621 13 get_multiview 0 4 2022 25 EggTexture::get_multiview 0 1 625 313
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_multiview
//       Access: Published
//  Description: Returns the current setting of the multiview flag.
//               See set_multiview().
////////////////////////////////////////////////////////////////////
50
inline bool EggTexture::get_multiview(void) const;

1622 13 set_num_views 0 4 2022 25 EggTexture::set_num_views 0 1 626 456
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_num_views
//       Access: Published
//  Description: When loading a 3-D multiview texture, this parameter
//               is necessary to specify how many views will be
//               expected.  The z size is determined implicitly from
//               the number of images loaded.
////////////////////////////////////////////////////////////////////
53
inline void EggTexture::set_num_views(int num_views);

1623 15 clear_num_views 0 4 2022 27 EggTexture::clear_num_views 0 1 627 321
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::clear_num_views
//       Access: Published
//  Description: Removes the specification of the number of views
//               for a 3-D multiview texture.
////////////////////////////////////////////////////////////////////
46
inline void EggTexture::clear_num_views(void);

1624 13 has_num_views 0 4 2022 25 EggTexture::has_num_views 0 1 628 361
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::has_num_views
//       Access: Published
//  Description: Returns true if the number of views has been
//               specified for the 3-D multiview texture, false
//               otherwise.
////////////////////////////////////////////////////////////////////
50
inline bool EggTexture::has_num_views(void) const;

1625 13 get_num_views 0 4 2022 25 EggTexture::get_num_views 0 1 629 342
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_num_views
//       Access: Published
//  Description: Returns the specified number of views specified for
//               the 3-D multiview texture.  See set_num_views().
////////////////////////////////////////////////////////////////////
49
inline int EggTexture::get_num_views(void) const;

1626 16 set_read_mipmaps 0 4 2022 28 EggTexture::set_read_mipmaps 0 1 630 912
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_read_mipmaps
//       Access: Published
//  Description: Sets the read_mipmaps flag.
//
//               If read_mipmaps is true, the filename should contain
//               a hash mark ('#'), which will be filled in with the
//               mipmap level number; and the texture will be defined
//               with a series of images, one for each mipmap level.
//
//               If the filename is of a type that already requires a
//               hash mark, such as a cube map or a 3-d texture, then
//               the filename should now require two hash marks, and
//               the first one indicates the mipmap level number,
//               while the second indicates the face number or 3-d
//               level number.
////////////////////////////////////////////////////////////////////
60
inline void EggTexture::set_read_mipmaps(bool read_mipmaps);

1627 16 get_read_mipmaps 0 4 2022 28 EggTexture::get_read_mipmaps 0 1 631 322
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_read_mipmaps
//       Access: Published
//  Description: Returns the current setting of the read_mipmaps flag.
//               See set_read_mipmaps().
////////////////////////////////////////////////////////////////////
53
inline bool EggTexture::get_read_mipmaps(void) const;

1628 18 clear_multitexture 0 4 2022 30 EggTexture::clear_multitexture 0 1 632 437
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::clear_multitexture
//       Access: Published
//  Description: Resets the multitexture flags set by
//               multitexture_over().  After this call,
//               get_multitexture() will return false, and
//               get_multitexture_sort() will return 0.
////////////////////////////////////////////////////////////////////
42
void EggTexture::clear_multitexture(void);

1629 17 multitexture_over 0 4 2022 29 EggTexture::multitexture_over 0 1 633 771
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::multitexture_over
//       Access: Published
//  Description: Indicates that this texture should be layered on top
//               of the other texture.  This will guarantee that
//               this->get_multitexture_sort() >
//               other->get_multitexture_sort(), at least until
//               clear_multitexture() is called on either one.
//
//               The return value is true if successful, or false if
//               there is a failure because the other texture was
//               already layered on top of this one (or there is a
//               three- or more-way cycle).
////////////////////////////////////////////////////////////////////
54
bool EggTexture::multitexture_over(EggTexture *other);

1630 21 get_multitexture_sort 0 4 2022 33 EggTexture::get_multitexture_sort 0 1 634 628
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_multitexture_sort
//       Access: Published
//  Description: Returns an integer that represents the depth to which
//               this texture is layered on all other textures in the
//               egg file.  In general, if texture A is layered over
//               texture B, then sort(A) > sort(B).  If texture A is
//               never layered over any other texture, then sort(A) ==
//               0.  More than that is difficult to guarantee.
////////////////////////////////////////////////////////////////////
57
inline int EggTexture::get_multitexture_sort(void) const;

1631 19 string_texture_type 0 4 2022 31 EggTexture::string_texture_type 0 1 635 427
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::string_texture_type
//       Access: Published, Static
//  Description: Returns the Texture_ype value associated with the given
//               string representation, or TT_unspecified if the string
//               does not match any known TextureType value.
////////////////////////////////////////////////////////////////////
99
static EggTexture::TextureType EggTexture::string_texture_type(basic_string< char > const &string);

1632 13 string_format 0 4 2022 25 EggTexture::string_format 0 1 636 410
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::string_format
//       Access: Published, Static
//  Description: Returns the Format value associated with the given
//               string representation, or F_unspecified if the string
//               does not match any known Format value.
////////////////////////////////////////////////////////////////////
88
static EggTexture::Format EggTexture::string_format(basic_string< char > const &string);

1633 23 string_compression_mode 0 4 2022 35 EggTexture::string_compression_mode 0 1 637 435
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::string_compression_mode
//       Access: Published, Static
//  Description: Returns the CompressionMode value associated with the given
//               string representation, or CM_default if the string
//               does not match any known CompressionMode value.
////////////////////////////////////////////////////////////////////
107
static EggTexture::CompressionMode EggTexture::string_compression_mode(basic_string< char > const &string);

1634 16 string_wrap_mode 0 4 2022 28 EggTexture::string_wrap_mode 0 1 638 418
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::string_wrap_mode
//       Access: Published, Static
//  Description: Returns the WrapMode value associated with the given
//               string representation, or WM_unspecified if the string
//               does not match any known WrapMode value.
////////////////////////////////////////////////////////////////////
93
static EggTexture::WrapMode EggTexture::string_wrap_mode(basic_string< char > const &string);

1635 18 string_filter_type 0 4 2022 30 EggTexture::string_filter_type 0 1 639 424
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::string_filter_type
//       Access: Published, Static
//  Description: Returns the FilterType value associated with the given
//               string representation, or FT_unspecified if the string
//               does not match any known FilterType value.
////////////////////////////////////////////////////////////////////
97
static EggTexture::FilterType EggTexture::string_filter_type(basic_string< char > const &string);

1636 15 string_env_type 0 4 2022 27 EggTexture::string_env_type 0 1 640 415
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::string_env_type
//       Access: Published, Static
//  Description: Returns the EnvType value associated with the given
//               string representation, or ET_unspecified if the string
//               does not match any known EnvType value.
////////////////////////////////////////////////////////////////////
91
static EggTexture::EnvType EggTexture::string_env_type(basic_string< char > const &string);

1637 19 string_combine_mode 0 4 2022 31 EggTexture::string_combine_mode 0 1 641 427
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::string_combine_mode
//       Access: Published, Static
//  Description: Returns the CombineMode value associated with the given
//               string representation, or CM_unspecified if the string
//               does not match any known CombineMode value.
////////////////////////////////////////////////////////////////////
99
static EggTexture::CombineMode EggTexture::string_combine_mode(basic_string< char > const &string);

1638 21 string_combine_source 0 4 2022 33 EggTexture::string_combine_source 0 1 642 433
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::string_combine_source
//       Access: Published, Static
//  Description: Returns the CombineSource value associated with the given
//               string representation, or CS_unspecified if the string
//               does not match any known CombineSource value.
////////////////////////////////////////////////////////////////////
103
static EggTexture::CombineSource EggTexture::string_combine_source(basic_string< char > const &string);

1639 22 string_combine_operand 0 4 2022 34 EggTexture::string_combine_operand 0 1 643 436
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::string_combine_operand
//       Access: Published, Static
//  Description: Returns the CombineOperand value associated with the given
//               string representation, or CO_unspecified if the string
//               does not match any known CombineOperand value.
////////////////////////////////////////////////////////////////////
105
static EggTexture::CombineOperand EggTexture::string_combine_operand(basic_string< char > const &string);

1640 14 string_tex_gen 0 4 2022 26 EggTexture::string_tex_gen 0 1 644 412
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::string_tex_gen
//       Access: Published, Static
//  Description: Returns the TexGen value associated with the given
//               string representation, or ET_unspecified if the string
//               does not match any known TexGen value.
////////////////////////////////////////////////////////////////////
89
static EggTexture::TexGen EggTexture::string_tex_gen(basic_string< char > const &string);

1641 20 string_quality_level 0 4 2022 32 EggTexture::string_quality_level 0 1 645 418
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::string_quality_level
//       Access: Published, Static
//  Description: Returns the TexGen value associated with the given
//               string representation, or ET_unspecified if the string
//               does not match any known TexGen value.
////////////////////////////////////////////////////////////////////
101
static EggTexture::QualityLevel EggTexture::string_quality_level(basic_string< char > const &string);

1642 14 get_class_type 0 4 2022 26 EggTexture::get_class_type 0 1 646 0
51
static TypeHandle EggTexture::get_class_type(void);

1643 11 EggMaterial 0 4 2037 24 EggMaterial::EggMaterial 0 2 653 654 447
////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
115
EggMaterial::EggMaterial(basic_string< char > const &mref_name);
EggMaterial::EggMaterial(EggMaterial const &copy);

1644 16 is_equivalent_to 0 4 2037 29 EggMaterial::is_equivalent_to 0 1 655 784
////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::is_equivalent_to
//       Access: Public
//  Description: Returns true if the two materials are equivalent in
//               all relevant properties (according to eq), false
//               otherwise.
//
//               The Equivalence parameter, eq, should be set to the
//               bitwise OR of the following properties, according to
//               what you consider relevant:
//
//               EggMaterial::E_attributes:
//                 All material attributes (diff, spec,
//                 etc.) except MRef name.
//
//               EggMaterial::E_mref_name:
//                 The MRef name.
////////////////////////////////////////////////////////////////////
75
bool EggMaterial::is_equivalent_to(EggMaterial const &other, int eq) const;

1645 15 sorts_less_than 0 4 2037 28 EggMaterial::sorts_less_than 0 1 656 502
////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::sorts_less_than
//       Access: Public
//  Description: An ordering operator to compare two materials for
//               sorting order.  This imposes an arbitrary ordering
//               useful to identify unique materials, according to the
//               indicated Equivalence factor.  See
//               is_equivalent_to().
////////////////////////////////////////////////////////////////////
74
bool EggMaterial::sorts_less_than(EggMaterial const &other, int eq) const;

1646 8 set_diff 0 4 2037 21 EggMaterial::set_diff 0 1 657 704
// Filename: eggMaterial.I
// Created by:  drose (29Jan99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::set_diff
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
58
inline void EggMaterial::set_diff(LVecBase4f const &diff);

1647 10 clear_diff 0 4 2037 23 EggMaterial::clear_diff 0 1 658 219
////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::clear_diff
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
42
inline void EggMaterial::clear_diff(void);

1648 8 has_diff 0 4 2037 21 EggMaterial::has_diff 0 1 659 217
////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::has_diff
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
46
inline bool EggMaterial::has_diff(void) const;

1649 8 get_diff 0 4 2037 21 EggMaterial::get_diff 0 1 660 360
////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::get_diff
//       Access: Public
//  Description: It is legal to call this even if has_diff() returns
//               false.  If so, it simply returns the default diff
//               color.
////////////////////////////////////////////////////////////////////
52
inline LVecBase4f EggMaterial::get_diff(void) const;

1650 7 set_amb 0 4 2037 20 EggMaterial::set_amb 0 1 661 216
////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::set_amb
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
56
inline void EggMaterial::set_amb(LVecBase4f const &amb);

1651 9 clear_amb 0 4 2037 22 EggMaterial::clear_amb 0 1 662 218
////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::clear_amb
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
41
inline void EggMaterial::clear_amb(void);

1652 7 has_amb 0 4 2037 20 EggMaterial::has_amb 0 1 663 216
////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::has_amb
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
45
inline bool EggMaterial::has_amb(void) const;

1653 7 get_amb 0 4 2037 20 EggMaterial::get_amb 0 1 664 357
////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::get_amb
//       Access: Public
//  Description: It is legal to call this even if has_amb() returns
//               false.  If so, it simply returns the default amb
//               color.
////////////////////////////////////////////////////////////////////
51
inline LVecBase4f EggMaterial::get_amb(void) const;

1654 8 set_emit 0 4 2037 21 EggMaterial::set_emit 0 1 665 217
////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::set_emit
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
58
inline void EggMaterial::set_emit(LVecBase4f const &emit);

1655 10 clear_emit 0 4 2037 23 EggMaterial::clear_emit 0 1 666 219
////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::clear_emit
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
42
inline void EggMaterial::clear_emit(void);

1656 8 has_emit 0 4 2037 21 EggMaterial::has_emit 0 1 667 217
////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::has_emit
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
46
inline bool EggMaterial::has_emit(void) const;

1657 8 get_emit 0 4 2037 21 EggMaterial::get_emit 0 1 668 360
////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::get_emit
//       Access: Public
//  Description: It is legal to call this even if has_emit() returns
//               false.  If so, it simply returns the default emit
//               color.
////////////////////////////////////////////////////////////////////
52
inline LVecBase4f EggMaterial::get_emit(void) const;

1658 8 set_spec 0 4 2037 21 EggMaterial::set_spec 0 1 669 217
////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::set_spec
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
58
inline void EggMaterial::set_spec(LVecBase4f const &spec);

1659 10 clear_spec 0 4 2037 23 EggMaterial::clear_spec 0 1 670 219
////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::clear_spec
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
42
inline void EggMaterial::clear_spec(void);

1660 8 has_spec 0 4 2037 21 EggMaterial::has_spec 0 1 671 217
////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::has_spec
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
46
inline bool EggMaterial::has_spec(void) const;

1661 8 get_spec 0 4 2037 21 EggMaterial::get_spec 0 1 672 360
////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::get_spec
//       Access: Public
//  Description: It is legal to call this even if has_spec() returns
//               false.  If so, it simply returns the default spec
//               color.
////////////////////////////////////////////////////////////////////
52
inline LVecBase4f EggMaterial::get_spec(void) const;

1662 13 set_shininess 0 4 2037 26 EggMaterial::set_shininess 0 1 673 222
////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::set_shininess
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
57
inline void EggMaterial::set_shininess(double shininess);

1663 15 clear_shininess 0 4 2037 28 EggMaterial::clear_shininess 0 1 674 224
////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::clear_shininess
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
47
inline void EggMaterial::clear_shininess(void);

1664 13 has_shininess 0 4 2037 26 EggMaterial::has_shininess 0 1 675 222
////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::has_shininess
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
51
inline bool EggMaterial::has_shininess(void) const;

1665 13 get_shininess 0 4 2037 26 EggMaterial::get_shininess 0 1 676 222
////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::get_shininess
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
53
inline double EggMaterial::get_shininess(void) const;

1666 9 set_local 0 4 2037 22 EggMaterial::set_local 0 1 677 218
////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::set_local
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
47
inline void EggMaterial::set_local(bool local);

1667 11 clear_local 0 4 2037 24 EggMaterial::clear_local 0 1 678 220
////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::clear_local
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
43
inline void EggMaterial::clear_local(void);

1668 9 has_local 0 4 2037 22 EggMaterial::has_local 0 1 679 218
////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::has_local
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
47
inline bool EggMaterial::has_local(void) const;

1669 9 get_local 0 4 2037 22 EggMaterial::get_local 0 1 680 218
////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::get_local
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
47
inline bool EggMaterial::get_local(void) const;

1670 14 get_class_type 0 4 2037 27 EggMaterial::get_class_type 0 1 681 0
52
static TypeHandle EggMaterial::get_class_type(void);

1671 12 ~EggMaterial 0 4 2037 25 EggMaterial::~EggMaterial 0 0 0
32
EggMaterial::~EggMaterial(void);

1672 17 upcast_to_EggNode 0 12 2039 31 EggPrimitive::upcast_to_EggNode 0 1 734 35
upcast from EggPrimitive to EggNode
47
EggNode *EggPrimitive::upcast_to_EggNode(void);

1673 24 downcast_to_EggPrimitive 0 12 1985 33 EggNode::downcast_to_EggPrimitive 0 1 735 37
downcast from EggNode to EggPrimitive
54
EggPrimitive *EggNode::downcast_to_EggPrimitive(void);

1674 23 upcast_to_EggAttributes 0 12 2039 37 EggPrimitive::upcast_to_EggAttributes 0 1 736 41
upcast from EggPrimitive to EggAttributes
59
EggAttributes *EggPrimitive::upcast_to_EggAttributes(void);

1675 24 downcast_to_EggPrimitive 0 12 1988 39 EggAttributes::downcast_to_EggPrimitive 0 1 737 43
downcast from EggAttributes to EggPrimitive
60
EggPrimitive *EggAttributes::downcast_to_EggPrimitive(void);

1676 23 upcast_to_EggRenderMode 0 12 2039 37 EggPrimitive::upcast_to_EggRenderMode 0 1 738 41
upcast from EggPrimitive to EggRenderMode
59
EggRenderMode *EggPrimitive::upcast_to_EggRenderMode(void);

1677 24 downcast_to_EggPrimitive 0 12 1998 39 EggRenderMode::downcast_to_EggPrimitive 0 1 739 43
downcast from EggRenderMode to EggPrimitive
60
EggPrimitive *EggRenderMode::downcast_to_EggPrimitive(void);

1678 10 operator = 0 4 2039 24 EggPrimitive::operator = 0 1 682 237
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::Copy assignment operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
72
inline EggPrimitive &EggPrimitive::operator =(EggPrimitive const &copy);

1679 13 ~EggPrimitive 0 6 2039 27 EggPrimitive::~EggPrimitive 0 0 223
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
49
virtual inline EggPrimitive::~EggPrimitive(void);

1680 20 determine_alpha_mode 0 6 2039 34 EggPrimitive::determine_alpha_mode 0 1 683 562
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::determine_alpha_mode
//       Access: Published, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               or EggPrimitive or some such object at this level or
//               above this primitive that has an alpha_mode other than
//               AM_unspecified.  Returns a valid EggRenderMode pointer
//               if one is found, or NULL otherwise.
////////////////////////////////////////////////////////////////////
64
virtual EggRenderMode *EggPrimitive::determine_alpha_mode(void);

1681 26 determine_depth_write_mode 0 6 2039 40 EggPrimitive::determine_depth_write_mode 0 1 684 569
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::determine_depth_write_mode
//       Access: Published, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               or EggPrimitive or some such object at this level or
//               above this node that has a depth_write_mode other than
//               DWM_unspecified.  Returns a valid EggRenderMode pointer
//               if one is found, or NULL otherwise.
////////////////////////////////////////////////////////////////////
70
virtual EggRenderMode *EggPrimitive::determine_depth_write_mode(void);

1682 25 determine_depth_test_mode 0 6 2039 39 EggPrimitive::determine_depth_test_mode 0 1 685 567
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::determine_depth_test_mode
//       Access: Published, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               or EggPrimitive or some such object at this level or
//               above this node that has a depth_test_mode other than
//               DTM_unspecified.  Returns a valid EggRenderMode pointer
//               if one is found, or NULL otherwise.
////////////////////////////////////////////////////////////////////
69
virtual EggRenderMode *EggPrimitive::determine_depth_test_mode(void);

1683 25 determine_visibility_mode 0 6 2039 39 EggPrimitive::determine_visibility_mode 0 1 686 566
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::determine_visibility_mode
//       Access: Published, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               or EggPrimitive or some such object at this level or
//               above this node that has a visibility_mode other than
//               VM_unspecified.  Returns a valid EggRenderMode pointer
//               if one is found, or NULL otherwise.
////////////////////////////////////////////////////////////////////
69
virtual EggRenderMode *EggPrimitive::determine_visibility_mode(void);

1684 22 determine_depth_offset 0 6 2039 36 EggPrimitive::determine_depth_offset 0 1 687 548
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::determine_depth_offset
//       Access: Published, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               or EggPrimitive or some such object at this level or
//               above this primitive that has a depth_offset specified.
//               Returns a valid EggRenderMode pointer if one is found,
//               or NULL otherwise.
////////////////////////////////////////////////////////////////////
66
virtual EggRenderMode *EggPrimitive::determine_depth_offset(void);

1685 20 determine_draw_order 0 6 2039 34 EggPrimitive::determine_draw_order 0 1 688 544
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::determine_draw_order
//       Access: Published, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               or EggPrimitive or some such object at this level or
//               above this primitive that has a draw_order specified.
//               Returns a valid EggRenderMode pointer if one is found,
//               or NULL otherwise.
////////////////////////////////////////////////////////////////////
64
virtual EggRenderMode *EggPrimitive::determine_draw_order(void);

1686 13 determine_bin 0 6 2039 27 EggPrimitive::determine_bin 0 1 689 531
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::determine_bin
//       Access: Published, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               or EggPrimitive or some such object at this level or
//               above this primitive that has a bin specified.  Returns a
//               valid EggRenderMode pointer if one is found, or NULL
//               otherwise.
////////////////////////////////////////////////////////////////////
57
virtual EggRenderMode *EggPrimitive::determine_bin(void);

1687 13 get_sort_name 0 4 2039 27 EggPrimitive::get_sort_name 0 1 690 498
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::get_sort_name
//       Access: Published
//  Description: Returns the name of the primitive for the purposes of
//               sorting primitives into different groups, if there is
//               one.
//
//               Presently, this is defined as the primitive name
//               itself, unless it begins with a digit.
////////////////////////////////////////////////////////////////////
68
inline basic_string< char > EggPrimitive::get_sort_name(void) const;

1688 11 get_shading 0 6 2039 25 EggPrimitive::get_shading 0 1 691 1114
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::get_shading
//       Access: Published, Virtual
//  Description: Returns the shading properties apparent on this
//               particular primitive.  This returns S_per_vertex if
//               the vertices have colors or normals (and they are not
//               all the same values), or for a simple primitive,
//               S_overall otherwise.  A composite primitive may also
//               return S_per_face if the individual component
//               primitives have colors or normals that are not all
//               the same values.
//
//               To get the most accurate results, you should call
//               clear_shading() on all connected primitives (or on
//               all primitives in the egg file), followed by
//               get_shading() on each primitive.  You may find it
//               easiest to call these methods on the EggData root
//               node (they are defined on EggGroupNode).
////////////////////////////////////////////////////////////////////
68
virtual EggPrimitive::Shading EggPrimitive::get_shading(void) const;

1689 23 clear_connected_shading 0 4 2039 37 EggPrimitive::clear_connected_shading 0 1 692 385
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::clear_connected_shading
//       Access: Published
//  Description: Resets the connected_shading member in this
//               primitive, so that get_connected_shading() will
//               recompute a new value.
////////////////////////////////////////////////////////////////////
56
inline void EggPrimitive::clear_connected_shading(void);

1690 21 get_connected_shading 0 4 2039 35 EggPrimitive::get_connected_shading 0 1 693 852
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::get_connected_shading
//       Access: Published
//  Description: Determines what sort of shading properties this
//               primitive's connected neighbors have.
//
//               To get the most accurate results, you should first
//               call clear_connected_shading() on all connected
//               primitives (or on all primitives in the egg file).
//               It might also be a good idea to call
//               remove_unused_vertices() to ensure proper
//               connectivity.
//
//               You may find it easiest to call these other methods
//               on the EggData root node (they are defined on
//               EggGroupNode).
////////////////////////////////////////////////////////////////////
77
inline EggPrimitive::Shading EggPrimitive::get_connected_shading(void) const;

1691 11 set_texture 0 4 2039 25 EggPrimitive::set_texture 0 1 694 494
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::set_texture
//       Access: Published
//  Description: Replaces the current list of textures with the
//               indicated texture.
//
//               This method is deprecated and is used in support of
//               single-texturing only.  Please use the multitexture
//               variant add_texture instead.
////////////////////////////////////////////////////////////////////
59
inline void EggPrimitive::set_texture(EggTexture *texture);

1692 11 has_texture 0 4 2039 25 EggPrimitive::has_texture 0 2 695 696 843
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::has_texture
//       Access: Published
//  Description: Returns true if the primitive has any textures
//               specified, false otherwise.
//
//               This method is deprecated and is used in support of
//               single-texturing only.  New code should be written to
//               use the multitexture variants instead.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::has_texture
//       Access: Published
//  Description: Returns true if the primitive has the particular
//               indicated texture, false otherwise.
////////////////////////////////////////////////////////////////////
116
inline bool EggPrimitive::has_texture(void) const;
inline bool EggPrimitive::has_texture(EggTexture *texture) const;

1693 11 get_texture 0 4 2039 25 EggPrimitive::get_texture 0 2 697 698 850
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::get_texture
//       Access: Published
//  Description: Returns the first texture on the primitive, if any,
//               or NULL if there are no textures on the primitive.
//
//               This method is deprecated and is used in support of
//               single-texturing only.  New code should be written to
//               use the multitexture variants instead.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::get_texture
//       Access: Published
//  Description: Returns the nth texture that has been applied to the
//               primitive.
////////////////////////////////////////////////////////////////////
116
inline EggTexture *EggPrimitive::get_texture(void) const;
inline EggTexture *EggPrimitive::get_texture(int n) const;

1694 11 add_texture 0 4 2039 25 EggPrimitive::add_texture 0 1 699 549
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::add_texture
//       Access: Published
//  Description: Applies the indicated texture to the primitive.
//
//               Note that, in the case of multiple textures being
//               applied to a single primitive, the order in which the
//               textures are applied does not affect the rendering
//               order; use EggTexture::set_sort() to specify that.
////////////////////////////////////////////////////////////////////
59
inline void EggPrimitive::add_texture(EggTexture *texture);

1695 13 clear_texture 0 4 2039 27 EggPrimitive::clear_texture 0 1 700 268
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::clear_texture
//       Access: Published
//  Description: Removes any texturing from the primitive.
////////////////////////////////////////////////////////////////////
46
inline void EggPrimitive::clear_texture(void);

1696 16 get_num_textures 0 4 2039 30 EggPrimitive::get_num_textures 0 1 701 303
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::get_num_textures
//       Access: Published
//  Description: Returns the number of textures applied to the
//               primitive.
////////////////////////////////////////////////////////////////////
54
inline int EggPrimitive::get_num_textures(void) const;

1697 12 set_material 0 4 2039 26 EggPrimitive::set_material 0 1 702 274
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::set_material
//       Access: Published
//  Description: Applies the indicated material to the primitive.
////////////////////////////////////////////////////////////////////
62
inline void EggPrimitive::set_material(EggMaterial *material);

1698 14 clear_material 0 4 2039 28 EggPrimitive::clear_material 0 1 703 268
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::clear_material
//       Access: Published
//  Description: Removes any material from the primitive.
////////////////////////////////////////////////////////////////////
47
inline void EggPrimitive::clear_material(void);

1699 12 get_material 0 4 2039 26 EggPrimitive::get_material 0 1 704 326
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::get_material
//       Access: Published
//  Description: Returns a pointer to the applied material, or NULL if
//               there is no material applied.
////////////////////////////////////////////////////////////////////
59
inline EggMaterial *EggPrimitive::get_material(void) const;

1700 12 has_material 0 4 2039 26 EggPrimitive::has_material 0 1 705 406
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::has_material
//       Access: Published
//  Description: Returns true if the primitive is materiald (and
//               get_material() will return a real pointer), false
//               otherwise (and get_material() will return NULL).
////////////////////////////////////////////////////////////////////
51
inline bool EggPrimitive::has_material(void) const;

1701 14 set_bface_flag 0 4 2039 28 EggPrimitive::set_bface_flag 0 1 706 466
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::set_bface_flag
//       Access: Published
//  Description: Sets the backfacing flag of the polygon.  If this is
//               true, the polygon will be rendered so that both faces
//               are visible; if it is false, only the front face of
//               the polygon will be visible.
////////////////////////////////////////////////////////////////////
52
inline void EggPrimitive::set_bface_flag(bool flag);

1702 14 get_bface_flag 0 4 2039 28 EggPrimitive::get_bface_flag 0 1 707 313
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::get_bface_flag
//       Access: Published
//  Description: Retrieves the backfacing flag of the polygon.  See
//               set_bface_flag().
////////////////////////////////////////////////////////////////////
53
inline bool EggPrimitive::get_bface_flag(void) const;

1703 15 copy_attributes 0 4 2039 29 EggPrimitive::copy_attributes 0 2 708 709 616
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::copy_attributes
//       Access: Published
//  Description: Copies the rendering attributes from the indicated
//               primitive.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::copy_attributes
//       Access: Published
//  Description: Copies the rendering attributes from the indicated
//               primitive.
////////////////////////////////////////////////////////////////////
126
void EggPrimitive::copy_attributes(EggAttributes const &other);
void EggPrimitive::copy_attributes(EggPrimitive const &other);

1704 17 has_vertex_normal 0 4 2039 31 EggPrimitive::has_vertex_normal 0 1 710 588
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::has_vertex_normal
//       Access: Published
//  Description: Returns true if any vertex on the primitive has a
//               specific normal set, false otherwise.
//
//               If you call unify_attributes() first, this will also
//               return false even if all the vertices were set to the
//               same value (since unify_attributes() removes
//               redundant vertex properties).
////////////////////////////////////////////////////////////////////
49
bool EggPrimitive::has_vertex_normal(void) const;

1705 16 has_vertex_color 0 4 2039 30 EggPrimitive::has_vertex_color 0 1 711 586
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::has_vertex_color
//       Access: Published
//  Description: Returns true if any vertex on the primitive has a
//               specific color set, false otherwise.
//
//               If you call unify_attributes() first, this will also
//               return false even if all the vertices were set to the
//               same value (since unify_attributes() removes
//               redundant vertex properties).
////////////////////////////////////////////////////////////////////
48
bool EggPrimitive::has_vertex_color(void) const;

1706 16 unify_attributes 0 6 2039 30 EggPrimitive::unify_attributes 0 1 712 1216
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::unify_attributes
//       Access: Published, Virtual
//  Description: If the shading property is S_per_vertex, ensures that
//               all vertices have a normal and a color, and the
//               overall primitive does not.
//
//               If the shading property is S_per_face, and this is a
//               composite primitive, ensures that all components have
//               a normal and a color, and the vertices and overall
//               primitive do not.  (If this is a simple primitive,
//               S_per_face works the same as S_overall, below).
//
//               If the shading property is S_overall, ensures that no
//               vertices or components have a normal or a color, and
//               the overall primitive does (if any exists at all).
//
//               After this call, either the primitive will have
//               normals or its vertices will, but not both.  Ditto
//               for colors.
//
//               This may create redundant vertices in the vertex
//               pool.
////////////////////////////////////////////////////////////////////
75
virtual void EggPrimitive::unify_attributes(EggPrimitive::Shading shading);

1707 20 apply_last_attribute 0 6 2039 34 EggPrimitive::apply_last_attribute 0 1 713 689
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::apply_last_attribute
//       Access: Published, Virtual
//  Description: Sets the last vertex of the triangle (or each
//               component) to the primitive normal and/or color, if
//               the primitive is flat-shaded.  This reflects the
//               OpenGL convention of storing flat-shaded properties on
//               the last vertex, although it is not usually a
//               convention in Egg.
//
//               This may introduce redundant vertices to the vertex
//               pool.
////////////////////////////////////////////////////////////////////
54
virtual void EggPrimitive::apply_last_attribute(void);

1708 21 apply_first_attribute 0 6 2039 35 EggPrimitive::apply_first_attribute 0 1 714 693
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::apply_first_attribute
//       Access: Published, Virtual
//  Description: Sets the first vertex of the triangle (or each
//               component) to the primitive normal and/or color, if
//               the primitive is flat-shaded.  This reflects the
//               DirectX convention of storing flat-shaded properties on
//               the first vertex, although it is not usually a
//               convention in Egg.
//
//               This may introduce redundant vertices to the vertex
//               pool.
////////////////////////////////////////////////////////////////////
55
virtual void EggPrimitive::apply_first_attribute(void);

1709 25 post_apply_flat_attribute 0 6 2039 39 EggPrimitive::post_apply_flat_attribute 0 1 715 499
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::post_apply_flat_attribute
//       Access: Published, Virtual
//  Description: Intended as a followup to apply_last_attribute(),
//               this also sets an attribute on the first vertices of
//               the primitive, if they don't already have an
//               attribute set, just so they end up with *something*.
////////////////////////////////////////////////////////////////////
59
virtual void EggPrimitive::post_apply_flat_attribute(void);

1710 23 reverse_vertex_ordering 0 6 2039 37 EggPrimitive::reverse_vertex_ordering 0 1 716 481
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::reverse_vertex_ordering
//       Access: Published, Virtual
//  Description: Reverses the ordering of the vertices in this
//               primitive, if appropriate, in order to change the
//               direction the polygon appears to be facing.  Does not
//               adjust the surface normal, if any.
////////////////////////////////////////////////////////////////////
57
virtual void EggPrimitive::reverse_vertex_ordering(void);

1711 7 cleanup 0 6 2039 21 EggPrimitive::cleanup 0 1 717 550
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::cleanup
//       Access: Published, Virtual
//  Description: Cleans up modeling errors in whatever context this
//               makes sense.  For instance, for a polygon, this calls
//               remove_doubled_verts(true).  For a point, it calls
//               remove_nonunique_verts().  Returns true if the
//               primitive is valid, or false if it is degenerate.
////////////////////////////////////////////////////////////////////
41
virtual bool EggPrimitive::cleanup(void);

1712 20 remove_doubled_verts 0 4 2039 34 EggPrimitive::remove_doubled_verts 0 1 718 945
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::remove_doubled_verts
//       Access: Published
//  Description: Certain kinds of primitives, particularly polygons,
//               don't like to have the same vertex repeated
//               consecutively.  Unfortunately, some modeling programs
//               (like MultiGen) make this an easy mistake to make.
//
//               It's handy to have a function to remove these
//               redundant vertices.  If closed is true, it also
//               checks that the first and last vertices are not the
//               same.
//
//               This function identifies repeated vertices by
//               position only; it does not consider any other
//               properties, such as color or UV, significant in
//               differentiating vertices.
////////////////////////////////////////////////////////////////////
53
void EggPrimitive::remove_doubled_verts(bool closed);

1713 22 remove_nonunique_verts 0 4 2039 36 EggPrimitive::remove_nonunique_verts 0 1 719 541
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::remove_nonunique_verts
//       Access: Published
//  Description: Removes any multiple appearances of the same vertex
//               from the primitive.  This primarily makes sense for a
//               point primitive, which is really a collection of
//               points and which doesn't make sense to include the
//               same point twice, in any order.
////////////////////////////////////////////////////////////////////
48
void EggPrimitive::remove_nonunique_verts(void);

1714 14 has_primitives 0 6 2039 28 EggPrimitive::has_primitives 0 1 720 380
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::has_primitives
//       Access: Published, Virtual
//  Description: Returns true if there are any primitives
//               (e.g. polygons) defined within this group or below,
//               false otherwise.
////////////////////////////////////////////////////////////////////
54
virtual bool EggPrimitive::has_primitives(void) const;

1715 20 joint_has_primitives 0 6 2039 34 EggPrimitive::joint_has_primitives 0 1 721 416
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::joint_has_primitives
//       Access: Published, Virtual
//  Description: Returns true if there are any primitives
//               (e.g. polygons) defined within this group or below,
//               but the search does not include nested joints.
////////////////////////////////////////////////////////////////////
60
virtual bool EggPrimitive::joint_has_primitives(void) const;

1716 11 has_normals 0 6 2039 25 EggPrimitive::has_normals 0 1 722 417
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::has_normals
//       Access: Published, Virtual
//  Description: Returns true if any of the primitives (e.g. polygons)
//               defined within this group or below have either face
//               or vertex normals defined, false otherwise.
////////////////////////////////////////////////////////////////////
51
virtual bool EggPrimitive::has_normals(void) const;

1717 5 clear 0 4 2039 19 EggPrimitive::clear 0 1 723 266
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::clear
//       Access: Published
//  Description: Removes all of the vertices from the primitive.
////////////////////////////////////////////////////////////////////
38
inline void EggPrimitive::clear(void);

1718 10 add_vertex 0 4 2039 24 EggPrimitive::add_vertex 0 1 724 330
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::add_vertex
//       Access: Published
//  Description: Adds the indicated vertex to the end of the
//               primitive's list of vertices, and returns it.
////////////////////////////////////////////////////////////////////
55
EggVertex *EggPrimitive::add_vertex(EggVertex *vertex);

1719 13 remove_vertex 0 4 2039 27 EggPrimitive::remove_vertex 0 1 725 421
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::remove_vertex
//       Access: Published
//  Description: Removes the indicated vertex from the
//               primitive and returns it.  If the vertex was not
//               already in the primitive, does nothing and returns
//               NULL.
////////////////////////////////////////////////////////////////////
58
EggVertex *EggPrimitive::remove_vertex(EggVertex *vertex);

1720 13 copy_vertices 0 4 2039 27 EggPrimitive::copy_vertices 0 1 726 370
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::copy_vertices
//       Access: Published
//  Description: Replaces the current primitive's list of vertices
//               with a copy of the list of vertices on the other
//               primitive.
////////////////////////////////////////////////////////////////////
60
void EggPrimitive::copy_vertices(EggPrimitive const &other);

1721 16 get_num_vertices 0 4 2039 30 EggPrimitive::get_num_vertices 0 1 727 295
// These are shorthands if you don't want to use the iterators.

////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::get_num_vertices
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
54
inline int EggPrimitive::get_num_vertices(void) const;

1722 10 set_vertex 0 4 2039 24 EggPrimitive::set_vertex 0 1 728 510
// These are shorthands if you don't want to use the iterators.

////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::set_vertex
//       Access: Published
//  Description: Replaces a particular vertex based on its index
//               number in the list of vertices.  This is just a
//               convenience function for people who don't want to
//               mess with the iterators.
////////////////////////////////////////////////////////////////////
67
inline void EggPrimitive::set_vertex(int index, EggVertex *vertex);

1723 10 get_vertex 0 4 2039 24 EggPrimitive::get_vertex 0 1 729 277
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::get_vertex
//       Access: Published
//  Description: Returns a particular index based on its index number.
////////////////////////////////////////////////////////////////////
60
inline EggVertex *EggPrimitive::get_vertex(int index) const;

1724 8 get_pool 0 4 2039 22 EggPrimitive::get_pool 0 1 730 368
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::get_pool
//       Access: Published
//  Description: Returns the vertex pool associated with the vertices
//               of the primitive, or NULL if the primitive has no
//               vertices.
////////////////////////////////////////////////////////////////////
57
inline EggVertexPool *EggPrimitive::get_pool(void) const;

1725 5 write 0 6 2039 19 EggPrimitive::write 0 1 731 0
75
virtual void EggPrimitive::write(ostream &out, int indent_level) const = 0;

1726 19 test_vref_integrity 0 4 2039 33 EggPrimitive::test_vref_integrity 0 1 732 0
51
void EggPrimitive::test_vref_integrity(void) const;

1727 14 get_class_type 0 4 2039 28 EggPrimitive::get_class_type 0 1 733 0
53
static TypeHandle EggPrimitive::get_class_type(void);

1728 10 operator = 0 4 2041 33 EggCompositePrimitive::operator = 0 1 740 246
////////////////////////////////////////////////////////////////////
//     Function: EggCompositePrimitive::Copy assignment operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
99
inline EggCompositePrimitive &EggCompositePrimitive::operator =(EggCompositePrimitive const &copy);

1729 18 get_num_components 0 4 2041 41 EggCompositePrimitive::get_num_components 0 1 741 410
////////////////////////////////////////////////////////////////////
//     Function: EggCompositePrimitive::get_num_components
//       Access: Published
//  Description: Returns the number of individual component triangles
//               within the composite.  Each one of these might have a
//               different set of attributes.
////////////////////////////////////////////////////////////////////
65
inline int EggCompositePrimitive::get_num_components(void) const;

1730 13 get_component 0 4 2041 36 EggCompositePrimitive::get_component 0 2 742 743 616
////////////////////////////////////////////////////////////////////
//     Function: EggCompositePrimitive::get_component
//       Access: Published
//  Description: Returns the attributes for the nth component
//               triangle.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggCompositePrimitive::get_component
//       Access: Published
//  Description: Returns the attributes for the nth component
//               triangle.
////////////////////////////////////////////////////////////////////
145
inline EggAttributes const *EggCompositePrimitive::get_component(int i) const;
inline EggAttributes *EggCompositePrimitive::get_component(int i);

1731 13 set_component 0 4 2041 36 EggCompositePrimitive::set_component 0 1 744 307
////////////////////////////////////////////////////////////////////
//     Function: EggCompositePrimitive::set_component
//       Access: Published
//  Description: Changes the attributes for the nth component
//               triangle.
////////////////////////////////////////////////////////////////////
85
inline void EggCompositePrimitive::set_component(int i, EggAttributes const *attrib);

1732 16 triangulate_into 0 4 2041 39 EggCompositePrimitive::triangulate_into 0 1 745 678
////////////////////////////////////////////////////////////////////
//     Function: EggCompositePrimitive::triangulate_into
//       Access: Published
//  Description: Subdivides the composite primitive into triangles and
//               adds those triangles to the indicated container.
//               Does not remove the primitive from its existing
//               parent or modify it in any way.
//
//               Returns true if the triangulation is successful, or
//               false if there was some error (in which case the
//               container may contain some partial triangulation).
////////////////////////////////////////////////////////////////////
83
inline bool EggCompositePrimitive::triangulate_into(EggGroupNode *container) const;

1733 20 triangulate_in_place 0 4 2041 43 EggCompositePrimitive::triangulate_in_place 0 1 746 830
////////////////////////////////////////////////////////////////////
//     Function: EggCompositePrimitive::triangulate_in_place
//       Access: Published
//  Description: Subdivides the composite primitive into triangles and
//               adds those triangles to the parent group node in
//               place of the original primitive.  Returns a pointer
//               to the original primitive, which is likely about to
//               be destructed.
//
//               If convex_also is true, both concave and convex
//               polygons will be subdivided into triangles;
//               otherwise, only concave polygons will be subdivided,
//               and convex polygons will be copied unchanged into the
//               container.
////////////////////////////////////////////////////////////////////
85
PointerTo< EggCompositePrimitive > EggCompositePrimitive::triangulate_in_place(void);

1734 14 get_class_type 0 4 2041 37 EggCompositePrimitive::get_class_type 0 1 747 0
62
static TypeHandle EggCompositePrimitive::get_class_type(void);

1735 7 EggData 0 4 2042 16 EggData::EggData 0 2 748 749 922
// Filename: eggData.I
// Created by:  drose (11Feb99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggData::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggData::Copy constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
76
inline EggData::EggData(void);
inline EggData::EggData(EggData const &copy);

1736 10 operator = 0 4 2042 19 EggData::operator = 0 1 750 229
////////////////////////////////////////////////////////////////////
//     Function: EggData::Copy assignment operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
57
inline EggData &EggData::operator =(EggData const &copy);

1737 20 resolve_egg_filename 0 4 2042 29 EggData::resolve_egg_filename 0 2 751 752 479
////////////////////////////////////////////////////////////////////
//     Function: EggData::resolve_egg_filename
//       Access: Public, Static
//  Description: Looks for the indicated filename, first along the
//               indicated searchpath, and then along the model_path.
//               If found, updates the filename to the full path and
//               returns true; otherwise, returns false.
////////////////////////////////////////////////////////////////////
106
static bool EggData::resolve_egg_filename(Filename &egg_filename, DSearchPath const &searchpath = ((())));

1738 4 read 0 4 2042 13 EggData::read 0 3 753 754 755 1348
////////////////////////////////////////////////////////////////////
//     Function: EggData::read
//       Access: Public
//  Description: Opens the indicated filename and reads the egg data
//               contents from it.  Returns true if the file was
//               successfully opened and read, false if there were
//               some errors, in which case the data may be partially
//               read.
//
//               error is the output stream to which to write error
//               messages.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggData::read
//       Access: Public
//  Description: Parses the egg syntax contained in the indicated
//               input stream.  Returns true if the stream was a
//               completely valid egg file, false if there were some
//               errors, in which case the data may be partially read.
//
//               Before you call this routine, you should probably
//               call set_egg_filename() to set the name of the egg
//               file we're processing, if at all possible.  If there
//               is no such filename, you may set it to the empty
//               string.
////////////////////////////////////////////////////////////////////
121
bool EggData::read(Filename filename, basic_string< char > display_name = ((string())));
bool EggData::read(istream &in);

1739 5 merge 0 4 2042 14 EggData::merge 0 1 756 324
////////////////////////////////////////////////////////////////////
//     Function: EggData::merge
//       Access: Public
//  Description: Appends the other egg structure to the end of this
//               one.  The other egg structure is invalidated.
////////////////////////////////////////////////////////////////////
36
void EggData::merge(EggData &other);

1740 14 load_externals 0 4 2042 23 EggData::load_externals 0 3 757 758 759 1314
////////////////////////////////////////////////////////////////////
//     Function: EggData::load_externals
//       Access: Public
//  Description: Loads up all the egg files referenced by <File>
//               entries within the egg structure, and inserts their
//               contents in place of the <File> entries.  Searches
//               for files in the searchpath, if not found directly,
//               and writes error messages to the indicated output
//               stream.  Returns true if all externals were loaded
//               successfully, false otherwise.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggData::load_externals
//       Access: Public
//  Description: Loads up all the egg files referenced by <File>
//               entries within the egg structure, and inserts their
//               contents in place of the <File> entries.  Searches
//               for files in the searchpath, if not found directly,
//               and writes error messages to the indicated output
//               stream.  Returns true if all externals were loaded
//               successfully, false otherwise.
////////////////////////////////////////////////////////////////////
154
bool EggData::load_externals(DSearchPath const &searchpath = ((())));
bool EggData::load_externals(DSearchPath const &searchpath, BamCacheRecord *record);

1741 28 collapse_equivalent_textures 0 4 2042 37 EggData::collapse_equivalent_textures 0 1 760 608
////////////////////////////////////////////////////////////////////
//     Function: EggData::collapse_equivalent_textures
//       Access: Public
//  Description: Removes duplicate references to the same texture
//               image with the same properties.  Considers two
//               texture references with identical properties, but
//               different tref names, to be equivalent, and collapses
//               them, choosing one tref name to keep arbitrarily.
//               Returns the number of textures removed.
////////////////////////////////////////////////////////////////////
48
int EggData::collapse_equivalent_textures(void);

1742 29 collapse_equivalent_materials 0 4 2042 38 EggData::collapse_equivalent_materials 0 1 761 607
////////////////////////////////////////////////////////////////////
//     Function: EggData::collapse_equivalent_materials
//       Access: Public
//  Description: Removes duplicate references to the same material
//               with the same properties.  Considers two material
//               references with identical properties, but different
//               mref names, to be equivalent, and collapses them,
//               choosing one mref name to keep arbitrarily.  Returns
//               the number of materials removed.
////////////////////////////////////////////////////////////////////
49
int EggData::collapse_equivalent_materials(void);

1743 9 write_egg 0 4 2042 18 EggData::write_egg 0 2 762 763 532
////////////////////////////////////////////////////////////////////
//     Function: EggData::write_egg
//       Access: Public
//  Description: The main interface for writing complete egg files.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggData::write_egg
//       Access: Public
//  Description: The main interface for writing complete egg files.
////////////////////////////////////////////////////////////////////
82
bool EggData::write_egg(Filename filename);
bool EggData::write_egg(ostream &out);

1744 26 set_auto_resolve_externals 0 4 2042 35 EggData::set_auto_resolve_externals 0 1 764 399
////////////////////////////////////////////////////////////////////
//     Function: EggData::set_auto_resolve_externals
//       Access: Public
//  Description: Indicates whether the EggData object will
//               automatically resolve any external references when
//               read() is called.  The default is false.
////////////////////////////////////////////////////////////////////
62
inline void EggData::set_auto_resolve_externals(bool resolve);

1745 26 get_auto_resolve_externals 0 4 2042 35 EggData::get_auto_resolve_externals 0 1 765 399
////////////////////////////////////////////////////////////////////
//     Function: EggData::get_auto_resolve_externals
//       Access: Public
//  Description: Indicates whether the EggData object will
//               automatically resolve any external references when
//               read() is called.  The default is false.
////////////////////////////////////////////////////////////////////
60
inline bool EggData::get_auto_resolve_externals(void) const;

1746 31 original_had_absolute_pathnames 0 4 2042 40 EggData::original_had_absolute_pathnames 0 1 766 741
////////////////////////////////////////////////////////////////////
//     Function: EggData::original_had_absolute_pathnames
//       Access: Public
//  Description: Returns true if the data processed in the last call
//               to read() contained absolute pathnames, or false if
//               those pathnames were all relative.
//
//               This method is necessary because if
//               auto_resolve_externals() is in effect, it may modify
//               the pathnames to be absolute whether or not they were
//               as loaded from disk.  This method can be used to
//               query the state of the original egg file from disk.
////////////////////////////////////////////////////////////////////
65
inline bool EggData::original_had_absolute_pathnames(void) const;

1747 21 set_coordinate_system 0 4 2042 30 EggData::set_coordinate_system 0 1 767 403
////////////////////////////////////////////////////////////////////
//     Function: EggData::set_coordinate_system
//       Access: Public
//  Description: Changes the coordinate system of the EggData.  If the
//               coordinate system was previously different, this may
//               result in a conversion of the data.
////////////////////////////////////////////////////////////////////
63
void EggData::set_coordinate_system(CoordinateSystem coordsys);

1748 21 get_coordinate_system 0 4 2042 30 EggData::get_coordinate_system 0 1 768 307
////////////////////////////////////////////////////////////////////
//     Function: EggData::get_coordinate_system
//       Access: Public
//  Description: Returns the coordinate system in which the egg file
//               is defined.
////////////////////////////////////////////////////////////////////
67
inline CoordinateSystem EggData::get_coordinate_system(void) const;

1749 16 set_egg_filename 0 4 2042 25 EggData::set_egg_filename 0 1 769 392
////////////////////////////////////////////////////////////////////
//     Function: EggData::set_egg_filename
//       Access: Public
//  Description: Sets the filename--especially the directory part--in
//               which the egg file is considered to reside.  This is
//               also implicitly set by read().
////////////////////////////////////////////////////////////////////
68
inline void EggData::set_egg_filename(Filename const &egg_filename);

1750 16 get_egg_filename 0 4 2042 25 EggData::get_egg_filename 0 1 770 307
////////////////////////////////////////////////////////////////////
//     Function: EggData::get_egg_filename
//       Access: Public
//  Description: Returns the directory in which the egg file is
//               considered to reside.
////////////////////////////////////////////////////////////////////
61
inline Filename const &EggData::get_egg_filename(void) const;

1751 17 set_egg_timestamp 0 4 2042 26 EggData::set_egg_timestamp 0 1 771 379
////////////////////////////////////////////////////////////////////
//     Function: EggData::set_egg_timestamp
//       Access: Public
//  Description: Sets the timestamp of the egg file on disk, at the
//               time it was opened for reading.  This is also
//               implicitly set by read().
////////////////////////////////////////////////////////////////////
67
inline void EggData::set_egg_timestamp(unsigned int egg_timestamp);

1752 17 get_egg_timestamp 0 4 2042 26 EggData::get_egg_timestamp 0 1 772 385
////////////////////////////////////////////////////////////////////
//     Function: EggData::get_egg_timestamp
//       Access: Public
//  Description: Returns the timestamp of the egg file on disk, at the
//               time it was opened for reading, or 0 if this
//               information is not available.
////////////////////////////////////////////////////////////////////
59
inline unsigned int EggData::get_egg_timestamp(void) const;

1753 24 recompute_vertex_normals 0 4 2042 33 EggData::recompute_vertex_normals 0 1 773 1124
////////////////////////////////////////////////////////////////////
//     Function: EggData::recompute_vertex_normals
//       Access: Public
//  Description: Recomputes all the vertex normals for polygon
//               geometry at this group node and below so that they
//               accurately reflect the vertex positions.  A shared
//               edge between two polygons (even in different groups)
//               is considered smooth if the angle between the two
//               edges is less than threshold degrees.
//
//               This function also removes degenerate polygons that
//               do not have enough vertices to define a normal.  It
//               does not affect normals for other kinds of primitives
//               like Nurbs or Points.
//
//               This function does not remove or adjust vertices in
//               the vertex pool; it only adds new vertices with the
//               correct normals.  Thus, it is a good idea to call
//               remove_unused_vertices() after calling this.
////////////////////////////////////////////////////////////////////
64
inline void EggData::recompute_vertex_normals(double threshold);

1754 25 recompute_polygon_normals 0 4 2042 34 EggData::recompute_polygon_normals 0 1 774 1069
////////////////////////////////////////////////////////////////////
//     Function: EggData::recompute_polygon_normals
//       Access: Public
//  Description: Recomputes all the polygon normals for polygon
//               geometry at this group node and below so that they
//               accurately reflect the vertex positions.  Normals are
//               removed from the vertices and defined only on
//               polygons, giving the geometry a faceted appearance.
//
//               This function also removes degenerate polygons that
//               do not have enough vertices to define a normal.  It
//               does not affect normals for other kinds of primitives
//               like Nurbs or Points.
//
//               This function does not remove or adjust vertices in
//               the vertex pool; it only adds new vertices with the
//               normals removed.  Thus, it is a good idea to call
//               remove_unused_vertices() after calling this.
////////////////////////////////////////////////////////////////////
53
inline void EggData::recompute_polygon_normals(void);

1755 13 strip_normals 0 4 2042 22 EggData::strip_normals 0 1 775 598
////////////////////////////////////////////////////////////////////
//     Function: EggData::strip_normals
//       Access: Public
//  Description: Removes all normals from primitives, and the vertices
//               they reference, at this node and below.
//
//               This function does not remove or adjust vertices in
//               the vertex pool; it only adds new vertices with the
//               normal removed.  Thus, it is a good idea to call
//               remove_unused_vertices() after calling this.
////////////////////////////////////////////////////////////////////
41
inline void EggData::strip_normals(void);

1756 14 get_class_type 0 4 2042 23 EggData::get_class_type 0 1 776 0
48
static TypeHandle EggData::get_class_type(void);

1757 8 ~EggData 0 4 2042 17 EggData::~EggData 0 0 0
24
EggData::~EggData(void);

1758 19 EggCoordinateSystem 0 4 2043 40 EggCoordinateSystem::EggCoordinateSystem 0 3 777 778 779 958
// Filename: eggCoordinateSystem.I
// Created by:  drose (20Jan99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggCoordinateSystem::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggCoordinateSystem::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
169
inline EggCoordinateSystem::EggCoordinateSystem(CoordinateSystem value = (CS_default));
inline EggCoordinateSystem::EggCoordinateSystem(EggCoordinateSystem const &copy);

1759 9 set_value 0 4 2043 30 EggCoordinateSystem::set_value 0 1 780 226
////////////////////////////////////////////////////////////////////
//     Function: EggCoordinateSystem::set_value
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
67
inline void EggCoordinateSystem::set_value(CoordinateSystem value);

1760 9 get_value 0 4 2043 30 EggCoordinateSystem::get_value 0 1 781 226
////////////////////////////////////////////////////////////////////
//     Function: EggCoordinateSystem::set_value
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
67
inline CoordinateSystem EggCoordinateSystem::get_value(void) const;

1761 14 get_class_type 0 4 2043 35 EggCoordinateSystem::get_class_type 0 1 782 0
60
static TypeHandle EggCoordinateSystem::get_class_type(void);

1762 20 ~EggCoordinateSystem 0 4 2043 41 EggCoordinateSystem::~EggCoordinateSystem 0 0 0
48
EggCoordinateSystem::~EggCoordinateSystem(void);

1763 10 operator = 0 4 2044 20 EggCurve::operator = 0 1 783 230
////////////////////////////////////////////////////////////////////
//     Function: EggCurve::Copy assignment operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
60
inline EggCurve &EggCurve::operator =(EggCurve const &copy);

1764 10 set_subdiv 0 4 2044 20 EggCurve::set_subdiv 0 1 784 559
////////////////////////////////////////////////////////////////////
//     Function: EggCurve::set_subdiv
//       Access: Public
//  Description: Sets the number of subdivisions that will be
//               requested across the curve.  (This doesn't necessary
//               guarantee that this number of subdivisions will be
//               made; it's just a hint to any curve renderer or quick
//               tesselator.)  Set the number to 0 to disable the
//               hint.
////////////////////////////////////////////////////////////////////
45
inline void EggCurve::set_subdiv(int subdiv);

1765 10 get_subdiv 0 4 2044 20 EggCurve::get_subdiv 0 1 785 335
////////////////////////////////////////////////////////////////////
//     Function: EggCurve::get_subdiv
//       Access: Public
//  Description: Returns the requested number of subdivisions, or 0 if
//               no particular subdivisions have been requested.
////////////////////////////////////////////////////////////////////
44
inline int EggCurve::get_subdiv(void) const;

1766 14 set_curve_type 0 4 2044 24 EggCurve::set_curve_type 0 1 786 367
////////////////////////////////////////////////////////////////////
//     Function: EggCurve::set_curve_type
//       Access: Public
//  Description: Sets the type of the curve.  This is primarily used
//               as a hint to any code that may need to deal with this
//               curve.
////////////////////////////////////////////////////////////////////
63
inline void EggCurve::set_curve_type(EggCurve::CurveType type);

1767 14 get_curve_type 0 4 2044 24 EggCurve::get_curve_type 0 1 787 261
////////////////////////////////////////////////////////////////////
//     Function: EggCurve::get_curve_type
//       Access: Public
//  Description: Returns the indicated type of the curve.
////////////////////////////////////////////////////////////////////
64
inline EggCurve::CurveType EggCurve::get_curve_type(void) const;

1768 17 string_curve_type 0 4 2044 27 EggCurve::string_curve_type 0 1 788 412
////////////////////////////////////////////////////////////////////
//     Function: EggCurve::string_curve_type
//       Access: Public, Static
//  Description: Returns the CurveType value associated with the given
//               string representation, or CT_invalid if the string
//               does not match any known CurveType value.
////////////////////////////////////////////////////////////////////
91
static EggCurve::CurveType EggCurve::string_curve_type(basic_string< char > const &string);

1769 14 get_class_type 0 4 2044 24 EggCurve::get_class_type 0 1 789 0
49
static TypeHandle EggCurve::get_class_type(void);

1770 9 ~EggCurve 0 4 2044 19 EggCurve::~EggCurve 0 0 0
26
EggCurve::~EggCurve(void);

1771 20 EggExternalReference 0 4 2046 42 EggExternalReference::EggExternalReference 0 2 790 791 465
////////////////////////////////////////////////////////////////////
//     Function: EggExternalReference::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggExternalReference::Copy constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
198
EggExternalReference::EggExternalReference(basic_string< char > const &node_name, basic_string< char > const &filename);
EggExternalReference::EggExternalReference(EggExternalReference const &copy);

1772 10 operator = 0 4 2046 32 EggExternalReference::operator = 0 1 792 242
////////////////////////////////////////////////////////////////////
//     Function: EggExternalReference::Copy assignment operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
89
EggExternalReference &EggExternalReference::operator =(EggExternalReference const &copy);

1773 14 get_class_type 0 4 2046 36 EggExternalReference::get_class_type 0 1 793 0
61
static TypeHandle EggExternalReference::get_class_type(void);

1774 21 ~EggExternalReference 0 4 2046 43 EggExternalReference::~EggExternalReference 0 0 0
50
EggExternalReference::~EggExternalReference(void);

1775 5 clear 0 4 2047 24 EggNameUniquifier::clear 0 1 794 313
////////////////////////////////////////////////////////////////////
//     Function: EggNameUniquifier::clear
//       Access: Public
//  Description: Empties the table of used named and prepares the
//               Uniquifier for a new tree.
////////////////////////////////////////////////////////////////////
36
void EggNameUniquifier::clear(void);

1776 8 uniquify 0 4 2047 27 EggNameUniquifier::uniquify 0 1 795 269
////////////////////////////////////////////////////////////////////
//     Function: EggNameUniquifier::uniquify
//       Access: Public
//  Description: Begins the traversal from the indicated node.
////////////////////////////////////////////////////////////////////
48
void EggNameUniquifier::uniquify(EggNode *node);

1777 8 get_node 0 4 2047 27 EggNameUniquifier::get_node 0 1 796 341
////////////////////////////////////////////////////////////////////
//     Function: EggNameUniquifier::get_node
//       Access: Public
//  Description: Returns the node associated with the given category
//               and name, or NULL if the name has not been used.
////////////////////////////////////////////////////////////////////
115
EggNode *EggNameUniquifier::get_node(basic_string< char > const &category, basic_string< char > const &name) const;

1778 8 has_name 0 4 2047 27 EggNameUniquifier::has_name 0 1 797 332
////////////////////////////////////////////////////////////////////
//     Function: EggNameUniquifier::has_name
//       Access: Public
//  Description: Returns true if the name has been used for the
//               indicated category already, false otherwise.
////////////////////////////////////////////////////////////////////
111
bool EggNameUniquifier::has_name(basic_string< char > const &category, basic_string< char > const &name) const;

1779 8 add_name 0 4 2047 27 EggNameUniquifier::add_name 0 2 798 799 477
////////////////////////////////////////////////////////////////////
//     Function: EggNameUniquifier::add_name
//       Access: Public
//  Description: Adds the name to the indicated category.  This name
//               will not be used for any other egg node within this
//               category.  Returns true if the name was added, or
//               false if it was already in use for the category.
////////////////////////////////////////////////////////////////////
136
bool EggNameUniquifier::add_name(basic_string< char > const &category, basic_string< char > const &name, EggNode *node = ((void *)(0)));

1780 12 get_category 0 6 2047 31 EggNameUniquifier::get_category 0 1 800 0
80
virtual basic_string< char > EggNameUniquifier::get_category(EggNode *node) = 0;

1781 11 filter_name 0 6 2047 30 EggNameUniquifier::filter_name 0 1 801 487
////////////////////////////////////////////////////////////////////
//     Function: EggNameUniquifier::filter_name
//       Access: Public, Virtual
//  Description: Returns the name of the given node, or at least the
//               name it should be.  This provides a hook to adjust
//               the name before attempting to uniquify it, if
//               desired, for instance to remove invalid characters.
////////////////////////////////////////////////////////////////////
75
virtual basic_string< char > EggNameUniquifier::filter_name(EggNode *node);

1782 13 generate_name 0 6 2047 32 EggNameUniquifier::generate_name 0 1 802 682
////////////////////////////////////////////////////////////////////
//     Function: EggNameUniquifier::generate_name
//       Access: Public, Virtual
//  Description: Generates a new name for the given node when its
//               existing name clashes with some other node.  This
//               function will be called repeatedly, if necessary,
//               until it returns a name that actually is unique.
//
//               The category is the string returned by
//               get_category(), and index is a uniquely-generated
//               number that may be useful for synthesizing the name.
////////////////////////////////////////////////////////////////////
126
virtual basic_string< char > EggNameUniquifier::generate_name(EggNode *node, basic_string< char > const &category, int index);

1783 14 get_class_type 0 4 2047 33 EggNameUniquifier::get_class_type 0 1 803 0
58
static TypeHandle EggNameUniquifier::get_class_type(void);

1784 18 EggGroupUniquifier 0 4 2048 38 EggGroupUniquifier::EggGroupUniquifier 0 2 804 805 530
////////////////////////////////////////////////////////////////////
//     Function: EggGroupUniquifier::Constructor
//       Access: Public
//  Description: If filter_names is true, then the group names will be
//               coerced into a fairly safe, standard convention that
//               uses no characters other than a-z, A-Z, 0-9, and
//               underscore.  If filter_names is false, the group
//               names will be left unchanged.
////////////////////////////////////////////////////////////////////
64
EggGroupUniquifier::EggGroupUniquifier(bool filter_names = (1));

1785 14 get_class_type 0 4 2048 34 EggGroupUniquifier::get_class_type 0 1 806 0
59
static TypeHandle EggGroupUniquifier::get_class_type(void);

1786 19 ~EggGroupUniquifier 0 4 2048 39 EggGroupUniquifier::~EggGroupUniquifier 0 0 0
46
EggGroupUniquifier::~EggGroupUniquifier(void);

1787 7 EggLine 0 4 2049 16 EggLine::EggLine 0 3 807 808 809 922
// Filename: eggLine.I
// Created by:  drose (14Oct03)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggLine::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggLine::Copy constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
111
inline EggLine::EggLine(basic_string< char > const &name = (""));
inline EggLine::EggLine(EggLine const &copy);

1788 10 operator = 0 4 2049 19 EggLine::operator = 0 1 810 229
////////////////////////////////////////////////////////////////////
//     Function: EggLine::Copy assignment operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
57
inline EggLine &EggLine::operator =(EggLine const &copy);

1789 9 has_thick 0 4 2049 18 EggLine::has_thick 0 1 811 217
////////////////////////////////////////////////////////////////////
//     Function: EggLine::has_thick
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
43
inline bool EggLine::has_thick(void) const;

1790 9 get_thick 0 4 2049 18 EggLine::get_thick 0 1 812 328
////////////////////////////////////////////////////////////////////
//     Function: EggLine::get_thick
//       Access: Published
//  Description: Returns the thickness set on this particular line.
//               If there is no thickness set, returns 1.0.
////////////////////////////////////////////////////////////////////
45
inline double EggLine::get_thick(void) const;

1791 9 set_thick 0 4 2049 18 EggLine::set_thick 0 1 813 217
////////////////////////////////////////////////////////////////////
//     Function: EggLine::set_thick
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
45
inline void EggLine::set_thick(double thick);

1792 11 clear_thick 0 4 2049 20 EggLine::clear_thick 0 1 814 219
////////////////////////////////////////////////////////////////////
//     Function: EggLine::clear_thick
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
39
inline void EggLine::clear_thick(void);

1793 14 get_class_type 0 4 2049 23 EggLine::get_class_type 0 1 815 0
48
static TypeHandle EggLine::get_class_type(void);

1794 21 EggMaterialCollection 0 4 2050 44 EggMaterialCollection::EggMaterialCollection 0 2 816 817 467
////////////////////////////////////////////////////////////////////
//     Function: EggMaterialCollection::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggMaterialCollection::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
132
EggMaterialCollection::EggMaterialCollection(void);
EggMaterialCollection::EggMaterialCollection(EggMaterialCollection const &copy);

1795 10 operator = 0 4 2050 33 EggMaterialCollection::operator = 0 1 818 243
////////////////////////////////////////////////////////////////////
//     Function: EggMaterialCollection::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
92
EggMaterialCollection &EggMaterialCollection::operator =(EggMaterialCollection const &copy);

1796 22 ~EggMaterialCollection 0 4 2050 45 EggMaterialCollection::~EggMaterialCollection 0 0 229
////////////////////////////////////////////////////////////////////
//     Function: EggMaterialCollection::Destructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
52
EggMaterialCollection::~EggMaterialCollection(void);

1797 5 clear 0 4 2050 28 EggMaterialCollection::clear 0 1 819 267
////////////////////////////////////////////////////////////////////
//     Function: EggMaterialCollection::clear
//       Access: Public
//  Description: Removes all materials from the collection.
////////////////////////////////////////////////////////////////////
40
void EggMaterialCollection::clear(void);

1798 17 extract_materials 0 4 2050 40 EggMaterialCollection::extract_materials 0 1 820 483
////////////////////////////////////////////////////////////////////
//     Function: EggMaterialCollection::extract_materials
//       Access: Public
//  Description: Walks the egg hierarchy beginning at the indicated
//               node, and removes any EggMaterials encountered in the
//               hierarchy, adding them to the collection.  Returns
//               the number of EggMaterials encountered.
////////////////////////////////////////////////////////////////////
65
int EggMaterialCollection::extract_materials(EggGroupNode *node);

1799 19 find_used_materials 0 4 2050 42 EggMaterialCollection::find_used_materials 0 1 821 1402
////////////////////////////////////////////////////////////////////
//     Function: EggMaterialCollection::find_used_materials
//       Access: Public
//  Description: Walks the egg hierarchy beginning at the indicated
//               node, looking for materials that are referenced by
//               primitives but are not already members of the
//               collection, adding them to the collection.
//
//               If this is called following extract_materials(), it
//               can be used to pick up any additional material
//               references that appeared in the egg hierarchy (but
//               whose EggMaterial node was not actually part of the
//               hierarchy).
//
//               If this is called in lieu of extract_materials(), it
//               will fill up the collection with all of the
//               referenced materials (and only the referenced
//               materials), without destructively removing the
//               EggMaterials from the hierarchy.
//
//               This also has the side effect of incrementing the
//               internal usage count for a material in the collection
//               each time a material reference is encountered.  This
//               side effect is taken advantage of by
//               remove_unused_materials().
////////////////////////////////////////////////////////////////////
62
int EggMaterialCollection::find_used_materials(EggNode *node);

1800 23 remove_unused_materials 0 4 2050 46 EggMaterialCollection::remove_unused_materials 0 1 822 574
////////////////////////////////////////////////////////////////////
//     Function: EggMaterialCollection::remove_unused_materials
//       Access: Public
//  Description: Removes any materials from the collection that aren't
//               referenced by any primitives in the indicated egg
//               hierarchy.  This also, incidentally, adds materials to
//               the collection that had been referenced by primitives
//               but had not previously appeared in the collection.
////////////////////////////////////////////////////////////////////
67
void EggMaterialCollection::remove_unused_materials(EggNode *node);

1801 29 collapse_equivalent_materials 0 4 2050 52 EggMaterialCollection::collapse_equivalent_materials 0 2 823 824 1793
////////////////////////////////////////////////////////////////////
//     Function: EggMaterialCollection::collapse_equivalent_materials
//       Access: Public
//  Description: Walks through the collection and collapses together
//               any separate materials that are equivalent according
//               to the indicated equivalence factor, eq (see
//               EggMaterial::is_equivalent_to()).  The return value is
//               the number of materials removed.
//
//               This flavor of collapse_equivalent_materials()
//               automatically adjusts all the primitives in the egg
//               hierarchy to refer to the new material pointers.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggMaterialCollection::collapse_equivalent_materials
//       Access: Public
//  Description: Walks through the collection and collapses together
//               any separate materials that are equivalent according
//               to the indicated equivalence factor, eq (see
//               EggMaterial::is_equivalent_to()).  The return value is
//               the number of materials removed.
//
//               This flavor of collapse_equivalent_materials() does
//               not adjust any primitives in the egg hierarchy;
//               instead, it fills up the 'removed' map with an entry
//               for each removed material, mapping it back to the
//               equivalent retained material.  It's up to the user to
//               then call replace_materials() with this map, if
//               desired, to apply these changes to the egg hierarchy.
////////////////////////////////////////////////////////////////////
219
int EggMaterialCollection::collapse_equivalent_materials(int eq, EggGroupNode *node);
int EggMaterialCollection::collapse_equivalent_materials(int eq, map< PointerTo< EggMaterial >, PointerTo< EggMaterial > > &removed);

1802 17 replace_materials 0 4 2050 40 EggMaterialCollection::replace_materials 0 1 825 606
////////////////////////////////////////////////////////////////////
//     Function: EggMaterialCollection::replace_materials
//       Access: Public, Static
//  Description: Walks the egg hierarchy, changing out any reference
//               to a material appearing on the left side of the map
//               with its corresponding material on the right side.
//               This is most often done following a call to
//               collapse_equivalent_materials().  It does not directly
//               affect the Collection.
////////////////////////////////////////////////////////////////////
147
static void EggMaterialCollection::replace_materials(EggGroupNode *node, map< PointerTo< EggMaterial >, PointerTo< EggMaterial > > const &replace);

1803 14 uniquify_mrefs 0 4 2050 37 EggMaterialCollection::uniquify_mrefs 0 1 826 386
////////////////////////////////////////////////////////////////////
//     Function: EggMaterialCollection::uniquify_mrefs
//       Access: Public
//  Description: Guarantees that each material in the collection has a
//               unique MRef name.  This is essential before writing
//               an egg file.
////////////////////////////////////////////////////////////////////
49
void EggMaterialCollection::uniquify_mrefs(void);

1804 12 sort_by_mref 0 4 2050 35 EggMaterialCollection::sort_by_mref 0 1 827 406
////////////////////////////////////////////////////////////////////
//     Function: EggMaterialCollection::sort_by_mref
//       Access: Public
//  Description: Sorts all the materials into alphabetical order by
//               MRef name.  Subsequent operations using begin()/end()
//               will traverse in this sorted order.
////////////////////////////////////////////////////////////////////
47
void EggMaterialCollection::sort_by_mref(void);

1805 12 add_material 0 4 2050 35 EggMaterialCollection::add_material 0 1 828 413
////////////////////////////////////////////////////////////////////
//     Function: EggMaterialCollection::add_material
//       Access: Public
//  Description: Explicitly adds a new material to the collection.
//               Returns true if the material was added, false if it
//               was already there or if there was some error.
////////////////////////////////////////////////////////////////////
64
bool EggMaterialCollection::add_material(EggMaterial *material);

1806 15 remove_material 0 4 2050 38 EggMaterialCollection::remove_material 0 1 829 414
////////////////////////////////////////////////////////////////////
//     Function: EggMaterialCollection::remove_material
//       Access: Public
//  Description: Explicitly removes a material from the collection.
//               Returns true if the material was removed, false if it
//               wasn't there or if there was some error.
////////////////////////////////////////////////////////////////////
67
bool EggMaterialCollection::remove_material(EggMaterial *material);

1807 22 create_unique_material 0 4 2050 45 EggMaterialCollection::create_unique_material 0 1 830 700
// create_unique_material() creates a new material if there is not
// already one equivalent (according to eq, see
// EggMaterial::is_equivalent_to()) to the indicated material, or
// returns the existing one if there is.

////////////////////////////////////////////////////////////////////
//     Function: EggMaterialCollection::create_unique_material
//       Access: Public
//  Description: Creates a new material if there is not already one
//               equivalent (according to eq, see
//               EggMaterial::is_equivalent_to()) to the indicated
//               material, or returns the existing one if there is.
////////////////////////////////////////////////////////////////////
92
EggMaterial *EggMaterialCollection::create_unique_material(EggMaterial const &copy, int eq);

1808 9 find_mref 0 4 2050 32 EggMaterialCollection::find_mref 0 1 831 377
// Find a material with a particular MRef name.

////////////////////////////////////////////////////////////////////
//     Function: EggMaterialCollection::find_mref
//       Access: Public
//  Description: Returns the material with the indicated MRef name, or
//               NULL if no material matches.
////////////////////////////////////////////////////////////////////
91
EggMaterial *EggMaterialCollection::find_mref(basic_string< char > const &mref_name) const;

1809 10 EggPolygon 0 4 2051 22 EggPolygon::EggPolygon 0 3 832 833 834 937
// Filename: eggPolygon.I
// Created by:  drose (10Feb99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggPolygon::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggPolygon::Copy constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
126
inline EggPolygon::EggPolygon(basic_string< char > const &name = (""));
inline EggPolygon::EggPolygon(EggPolygon const &copy);

1810 10 operator = 0 4 2051 22 EggPolygon::operator = 0 1 835 235
////////////////////////////////////////////////////////////////////
//     Function: EggPolygon::Copy assignment operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
66
inline EggPolygon &EggPolygon::operator =(EggPolygon const &copy);

1811 16 calculate_normal 0 4 2051 28 EggPolygon::calculate_normal 0 2 836 837 678
////////////////////////////////////////////////////////////////////
//     Function: EggPolygon::calculate_normal
//       Access: Published
//  Description: Calculates the true polygon normal--the vector
//               pointing out of the front of the polygon--based on
//               the vertices.  This does not return or change the
//               polygon's normal as set via set_normal().
//
//               The return value is true if the normal is computed
//               correctly, or false if the polygon is degenerate and
//               does not have at least three noncollinear vertices.
////////////////////////////////////////////////////////////////////
95
bool EggPolygon::calculate_normal(LVector3d &result, CoordinateSystem cs = (CS_default)) const;

1812 9 is_planar 0 4 2051 21 EggPolygon::is_planar 0 1 838 327
////////////////////////////////////////////////////////////////////
//     Function: EggPolygon::is_planar
//       Access: Published
//  Description: Returns true if all of the polygon's vertices lie
//               within the same plane, false otherwise.
////////////////////////////////////////////////////////////////////
39
bool EggPolygon::is_planar(void) const;

1813 24 recompute_polygon_normal 0 4 2051 36 EggPolygon::recompute_polygon_normal 0 2 839 840 480
////////////////////////////////////////////////////////////////////
//     Function: EggPolygon::recompute_polygon_normal
//       Access: Published
//  Description: Recalculates the normal according to the order of the
//               vertices, and sets it.  Returns true if the normal is
//               computed correctly, or false if the polygon is
//               degenerate and does not have a normal.
////////////////////////////////////////////////////////////////////
85
inline bool EggPolygon::recompute_polygon_normal(CoordinateSystem cs = (CS_default));

1814 16 triangulate_into 0 4 2051 28 EggPolygon::triangulate_into 0 1 841 1053
////////////////////////////////////////////////////////////////////
//     Function: EggPolygon::triangulate_into
//       Access: Published
//  Description: Subdivides the polygon into triangles and adds each
//               one to the indicated container.  If the polygon is
//               already a triangle, adds an exact copy of the polygon
//               to the container.  Does not remove the polygon from
//               its existing parent or modify it in any way.
//
//               Returns true if the triangulation is successful, or
//               false if there was some error (in which case the
//               container may contain some partial triangulation).
//
//               If convex_also is true, both concave and convex
//               polygons will be subdivided into triangles;
//               otherwise, only concave polygons will be subdivided,
//               and convex polygons will be copied unchanged into the
//               container.
////////////////////////////////////////////////////////////////////
90
inline bool EggPolygon::triangulate_into(EggGroupNode *container, bool convex_also) const;

1815 20 triangulate_in_place 0 4 2051 32 EggPolygon::triangulate_in_place 0 1 842 786
////////////////////////////////////////////////////////////////////
//     Function: EggPolygon::triangulate_in_place
//       Access: Published
//  Description: Subdivides the polygon into triangles and adds those
//               triangles to the parent group node in place of the
//               original polygon.  Returns a pointer to the original
//               polygon, which is likely about to be destructed.
//
//               If convex_also is true, both concave and convex
//               polygons will be subdivided into triangles;
//               otherwise, only concave polygons will be subdivided,
//               and convex polygons will be copied unchanged into the
//               container.
////////////////////////////////////////////////////////////////////
75
PointerTo< EggPolygon > EggPolygon::triangulate_in_place(bool convex_also);

1816 14 get_class_type 0 4 2051 26 EggPolygon::get_class_type 0 1 843 0
51
static TypeHandle EggPolygon::get_class_type(void);

1817 11 ~EggPolygon 0 4 2051 23 EggPolygon::~EggPolygon 0 0 0
30
EggPolygon::~EggPolygon(void);

1818 13 EggNurbsCurve 0 4 2052 28 EggNurbsCurve::EggNurbsCurve 0 3 844 845 846 940
// Filename: eggNurbsCurve.I
// Created by:  drose (15Feb00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggNurbsCurve::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggNurbsCurve::Copy constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
141
inline EggNurbsCurve::EggNurbsCurve(basic_string< char > const &name = (""));
inline EggNurbsCurve::EggNurbsCurve(EggNurbsCurve const &copy);

1819 10 operator = 0 4 2052 25 EggNurbsCurve::operator = 0 1 847 235
////////////////////////////////////////////////////////////////////
//     Function: EggNurbsCurve::Copy assignment operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
75
inline EggNurbsCurve &EggNurbsCurve::operator =(EggNurbsCurve const &copy);

1820 5 setup 0 4 2052 20 EggNurbsCurve::setup 0 1 848 588
////////////////////////////////////////////////////////////////////
//     Function: EggNurbsCurve::setup
//       Access: Public
//  Description: Prepares a new curve definition with the indicated
//               order and number of knots.  This also implies a
//               particular number of vertices as well (the number of
//               knots minus the order), but it is up to the user to
//               add the correct number of vertices to the curve by
//               repeatedly calling push_back().
////////////////////////////////////////////////////////////////////
52
void EggNurbsCurve::setup(int order, int num_knots);

1821 9 set_order 0 4 2052 24 EggNurbsCurve::set_order 0 1 849 542
////////////////////////////////////////////////////////////////////
//     Function: EggNurbsCurve::set_order
//       Access: Public
//  Description: Directly changes the order to the indicated value
//               (which must be an integer in the range 1 <= order <=
//               4).  If possible, it is preferable to use the setup()
//               method instead of this method, since changing the
//               order directly may result in an invalid curve.
////////////////////////////////////////////////////////////////////
48
inline void EggNurbsCurve::set_order(int order);

1822 13 set_num_knots 0 4 2052 28 EggNurbsCurve::set_num_knots 0 1 850 665
////////////////////////////////////////////////////////////////////
//     Function: EggNurbsCurve::set_num_knots
//       Access: Public
//  Description: Directly changes the number of knots.  This will
//               either add zero-valued knots onto the end, or
//               truncate knot values from the end, depending on
//               whether the list is being increased or decreased.  If
//               possible, it is preferable to use the setup() method
//               instead of directly setting the number of knots, as
//               this may result in an invalid curve.
////////////////////////////////////////////////////////////////////
43
void EggNurbsCurve::set_num_knots(int num);

1823 8 set_knot 0 4 2052 23 EggNurbsCurve::set_knot 0 1 851 452
////////////////////////////////////////////////////////////////////
//     Function: EggNurbsCurve::set_knot
//       Access: Public
//  Description: Resets the value of the indicated knot as indicated.
//               k must be in the range 0 <= k < get_num_knots(),
//               and the value must be in the range get_knot(k - 1)
//               <= value <= get_knot(k + 1).
////////////////////////////////////////////////////////////////////
57
inline void EggNurbsCurve::set_knot(int k, double value);

1824 8 is_valid 0 4 2052 23 EggNurbsCurve::is_valid 0 1 852 458
////////////////////////////////////////////////////////////////////
//     Function: EggNurbsCurve::is_valid
//       Access: Public
//  Description: Returns true if the NURBS parameters are all
//               internally consistent (e.g. it has the right number
//               of vertices to match its number of knots and order in
//               each dimension), or false otherwise.
////////////////////////////////////////////////////////////////////
41
bool EggNurbsCurve::is_valid(void) const;

1825 9 get_order 0 4 2052 24 EggNurbsCurve::get_order 0 1 853 470
////////////////////////////////////////////////////////////////////
//     Function: EggNurbsCurve::get_order
//       Access: Public
//  Description: Returns the order of the curve.  The order is the
//               degree of the NURBS equation plus 1; for a typical
//               NURBS, the order is 4.  With this implementation of
//               NURBS, the order must be in the range [1, 4].
////////////////////////////////////////////////////////////////////
48
inline int EggNurbsCurve::get_order(void) const;

1826 10 get_degree 0 4 2052 25 EggNurbsCurve::get_degree 0 1 854 310
////////////////////////////////////////////////////////////////////
//     Function: EggNurbsCurve::get_degree
//       Access: Public
//  Description: Returns the degree of the curve.  For a typical
//               NURBS, the degree is 3.
////////////////////////////////////////////////////////////////////
49
inline int EggNurbsCurve::get_degree(void) const;

1827 13 get_num_knots 0 4 2052 28 EggNurbsCurve::get_num_knots 0 1 855 253
////////////////////////////////////////////////////////////////////
//     Function: EggNurbsCurve::get_num_knots
//       Access: Public
//  Description: Returns the number of knots.
////////////////////////////////////////////////////////////////////
52
inline int EggNurbsCurve::get_num_knots(void) const;

1828 11 get_num_cvs 0 4 2052 26 EggNurbsCurve::get_num_cvs 0 1 856 669
////////////////////////////////////////////////////////////////////
//     Function: EggNurbsCurve::get_num_cvs
//       Access: Public
//  Description: Returns the total number of control vertices that
//               *should* be defined for the curve.  This is
//               determined by the number of knots and the order, in
//               each direction; it does not necessarily reflect the
//               number of vertices that have actually been added to
//               the curve.  (However, if the number of vertices in
//               the curve are wrong, the curve is invalid.)
////////////////////////////////////////////////////////////////////
50
inline int EggNurbsCurve::get_num_cvs(void) const;

1829 9 is_closed 0 4 2052 24 EggNurbsCurve::is_closed 0 1 857 458
////////////////////////////////////////////////////////////////////
//     Function: EggNurbsCurve::is_closed
//       Access: Public
//  Description: Returns true if the curve appears to be closed.
//               Since the Egg syntax does not provide a means for
//               explicit indication of closure, this has to be
//               guessed at by examining the curve itself.
////////////////////////////////////////////////////////////////////
42
bool EggNurbsCurve::is_closed(void) const;

1830 8 get_knot 0 4 2052 23 EggNurbsCurve::get_knot 0 1 858 255
////////////////////////////////////////////////////////////////////
//     Function: EggNurbsCurve::get_knot
//       Access: Public
//  Description: Returns the nth knot value defined.
////////////////////////////////////////////////////////////////////
51
inline double EggNurbsCurve::get_knot(int k) const;

1831 14 get_class_type 0 4 2052 29 EggNurbsCurve::get_class_type 0 1 859 0
54
static TypeHandle EggNurbsCurve::get_class_type(void);

1832 14 ~EggNurbsCurve 0 4 2052 29 EggNurbsCurve::~EggNurbsCurve 0 0 0
36
EggNurbsCurve::~EggNurbsCurve(void);

1833 10 operator = 0 4 2053 22 EggSurface::operator = 0 1 860 232
////////////////////////////////////////////////////////////////////
//     Function: EggSurface::Copy assignment operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
66
inline EggSurface &EggSurface::operator =(EggSurface const &copy);

1834 12 set_u_subdiv 0 4 2053 24 EggSurface::set_u_subdiv 0 1 861 586
////////////////////////////////////////////////////////////////////
//     Function: EggSurface::set_u_subdiv
//       Access: Public
//  Description: Sets the number of subdivisions in the U direction
//               that will be requested across the surface.  (This
//               doesn't necessary guarantee that this number of
//               subdivisions will be made; it's just a hint to any
//               surface renderer or quick tesselator.)  Set the
//               number to 0 to disable the hint.
////////////////////////////////////////////////////////////////////
49
inline void EggSurface::set_u_subdiv(int subdiv);

1835 12 get_u_subdiv 0 4 2053 24 EggSurface::get_u_subdiv 0 1 862 375
////////////////////////////////////////////////////////////////////
//     Function: EggSurface::get_u_subdiv
//       Access: Public
//  Description: Returns the requested number of subdivisions in the U
//               direction, or 0 if no particular subdivisions have
//               been requested.
////////////////////////////////////////////////////////////////////
48
inline int EggSurface::get_u_subdiv(void) const;

1836 12 set_v_subdiv 0 4 2053 24 EggSurface::set_v_subdiv 0 1 863 586
////////////////////////////////////////////////////////////////////
//     Function: EggSurface::set_v_subdiv
//       Access: Public
//  Description: Sets the number of subdivisions in the U direction
//               that will be requested across the surface.  (This
//               doesn't necessary guarantee that this number of
//               subdivisions will be made; it's just a hint to any
//               surface renderer or quick tesselator.)  Set the
//               number to 0 to disable the hint.
////////////////////////////////////////////////////////////////////
49
inline void EggSurface::set_v_subdiv(int subdiv);

1837 12 get_v_subdiv 0 4 2053 24 EggSurface::get_v_subdiv 0 1 864 375
////////////////////////////////////////////////////////////////////
//     Function: EggSurface::get_v_subdiv
//       Access: Public
//  Description: Returns the requested number of subdivisions in the U
//               direction, or 0 if no particular subdivisions have
//               been requested.
////////////////////////////////////////////////////////////////////
48
inline int EggSurface::get_v_subdiv(void) const;

1838 14 get_class_type 0 4 2053 26 EggSurface::get_class_type 0 1 865 0
51
static TypeHandle EggSurface::get_class_type(void);

1839 11 ~EggSurface 0 4 2053 23 EggSurface::~EggSurface 0 0 0
30
EggSurface::~EggSurface(void);

1840 15 EggNurbsSurface 0 4 2054 32 EggNurbsSurface::EggNurbsSurface 0 3 866 867 868 946
// Filename: eggNurbsSurface.I
// Created by:  drose (15Feb00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::Copy constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
151
inline EggNurbsSurface::EggNurbsSurface(basic_string< char > const &name = (""));
inline EggNurbsSurface::EggNurbsSurface(EggNurbsSurface const &copy);

1841 10 operator = 0 4 2054 27 EggNurbsSurface::operator = 0 1 869 237
////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::Copy assignment operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
81
inline EggNurbsSurface &EggNurbsSurface::operator =(EggNurbsSurface const &copy);

1842 5 setup 0 4 2054 22 EggNurbsSurface::setup 0 1 870 647
////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::setup
//       Access: Public
//  Description: Prepares a new surface definition with the indicated
//               order and number of knots in each dimension.  This
//               also implies a particular number of vertices in each
//               dimension as well (the number of knots minus the
//               order), but it is up to the user to add the correct
//               number of vertices to the surface by repeatedly
//               calling push_back().
////////////////////////////////////////////////////////////////////
88
void EggNurbsSurface::setup(int u_order, int v_order, int num_u_knots, int num_v_knots);

1843 11 set_u_order 0 4 2054 28 EggNurbsSurface::set_u_order 0 1 871 586
////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::set_u_order
//       Access: Public
//  Description: Directly changes the order in the U direction to the
//               indicated value (which must be an integer in the
//               range 1 <= u_order <= 4).  If possible, it is
//               preferable to use the setup() method instead of this
//               method, since changing the order directly may result
//               in an invalid surface.
////////////////////////////////////////////////////////////////////
54
inline void EggNurbsSurface::set_u_order(int u_order);

1844 11 set_v_order 0 4 2054 28 EggNurbsSurface::set_v_order 0 1 872 586
////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::set_v_order
//       Access: Public
//  Description: Directly changes the order in the V direction to the
//               indicated value (which must be an integer in the
//               range 1 <= v_order <= 4).  If possible, it is
//               preferable to use the setup() method instead of this
//               method, since changing the order directly may result
//               in an invalid surface.
////////////////////////////////////////////////////////////////////
54
inline void EggNurbsSurface::set_v_order(int v_order);

1845 15 set_num_u_knots 0 4 2054 32 EggNurbsSurface::set_num_u_knots 0 1 873 690
////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::set_num_u_knots
//       Access: Public
//  Description: Directly changes the number of knots in the U
//               direction.  This will either add zero-valued knots
//               onto the end, or truncate knot values from the end,
//               depending on whether the list is being increased or
//               decreased.  If possible, it is preferable to use the
//               setup() method instead of directly setting the number
//               of knots, as this may result in an invalid surface.
////////////////////////////////////////////////////////////////////
47
void EggNurbsSurface::set_num_u_knots(int num);

1846 15 set_num_v_knots 0 4 2054 32 EggNurbsSurface::set_num_v_knots 0 1 874 690
////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::set_num_v_knots
//       Access: Public
//  Description: Directly changes the number of knots in the V
//               direction.  This will either add zero-valued knots
//               onto the end, or truncate knot values from the end,
//               depending on whether the list is being increased or
//               decreased.  If possible, it is preferable to use the
//               setup() method instead of directly setting the number
//               of knots, as this may result in an invalid surface.
////////////////////////////////////////////////////////////////////
47
void EggNurbsSurface::set_num_v_knots(int num);

1847 10 set_u_knot 0 4 2054 27 EggNurbsSurface::set_u_knot 0 1 875 462
////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::set_u_knot
//       Access: Public
//  Description: Resets the value of the indicated knot as indicated.
//               k must be in the range 0 <= k < get_num_u_knots(),
//               and the value must be in the range get_u_knot(k - 1)
//               <= value <= get_u_knot(k + 1).
////////////////////////////////////////////////////////////////////
61
inline void EggNurbsSurface::set_u_knot(int k, double value);

1848 10 set_v_knot 0 4 2054 27 EggNurbsSurface::set_v_knot 0 1 876 462
////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::set_v_knot
//       Access: Public
//  Description: Resets the value of the indicated knot as indicated.
//               k must be in the range 0 <= k < get_num_v_knots(),
//               and the value must be in the range get_v_knot(k - 1)
//               <= value <= get_v_knot(k + 1).
////////////////////////////////////////////////////////////////////
61
inline void EggNurbsSurface::set_v_knot(int k, double value);

1849 6 set_cv 0 4 2054 23 EggNurbsSurface::set_cv 0 1 877 456
////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::set_cv
//       Access: Public
//  Description: Redefines the control vertex associated with a
//               particular u, v coordinate pair.  This is just a
//               shorthand to access the EggPrimitive's normal vertex
//               assignment for a 2-d control vertex.
////////////////////////////////////////////////////////////////////
71
inline void EggNurbsSurface::set_cv(int ui, int vi, EggVertex *vertex);

1850 8 is_valid 0 4 2054 25 EggNurbsSurface::is_valid 0 1 878 460
////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::is_valid
//       Access: Public
//  Description: Returns true if the NURBS parameters are all
//               internally consistent (e.g. it has the right number
//               of vertices to match its number of knots and order in
//               each dimension), or false otherwise.
////////////////////////////////////////////////////////////////////
43
bool EggNurbsSurface::is_valid(void) const;

1851 11 get_u_order 0 4 2054 28 EggNurbsSurface::get_u_order 0 1 879 511
////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::get_u_order
//       Access: Public
//  Description: Returns the order of the surface in the U direction.
//               The order is the degree of the NURBS equation plus 1;
//               for a typical NURBS, the order is 4.  With this
//               implementation of NURBS, the order must be in the
//               range [1, 4].
////////////////////////////////////////////////////////////////////
52
inline int EggNurbsSurface::get_u_order(void) const;

1852 11 get_v_order 0 4 2054 28 EggNurbsSurface::get_v_order 0 1 880 511
////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::get_v_order
//       Access: Public
//  Description: Returns the order of the surface in the V direction.
//               The order is the degree of the NURBS equation plus 1;
//               for a typical NURBS, the order is 4.  With this
//               implementation of NURBS, the order must be in the
//               range [1, 4].
////////////////////////////////////////////////////////////////////
52
inline int EggNurbsSurface::get_v_order(void) const;

1853 12 get_u_degree 0 4 2054 29 EggNurbsSurface::get_u_degree 0 1 881 334
////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::get_u_degree
//       Access: Public
//  Description: Returns the degree of the surface in the U direction.
//               For a typical NURBS, the degree is 3.
////////////////////////////////////////////////////////////////////
53
inline int EggNurbsSurface::get_u_degree(void) const;

1854 12 get_v_degree 0 4 2054 29 EggNurbsSurface::get_v_degree 0 1 882 334
////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::get_v_degree
//       Access: Public
//  Description: Returns the degree of the surface in the V direction.
//               for a typical NURBS, the degree is 3.
////////////////////////////////////////////////////////////////////
53
inline int EggNurbsSurface::get_v_degree(void) const;

1855 15 get_num_u_knots 0 4 2054 32 EggNurbsSurface::get_num_u_knots 0 1 883 276
////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::get_num_u_knots
//       Access: Public
//  Description: Returns the number of knots in the U direction.
////////////////////////////////////////////////////////////////////
56
inline int EggNurbsSurface::get_num_u_knots(void) const;

1856 15 get_num_v_knots 0 4 2054 32 EggNurbsSurface::get_num_v_knots 0 1 884 276
////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::get_num_v_knots
//       Access: Public
//  Description: Returns the number of knots in the V direction.
////////////////////////////////////////////////////////////////////
56
inline int EggNurbsSurface::get_num_v_knots(void) const;

1857 13 get_num_u_cvs 0 4 2054 30 EggNurbsSurface::get_num_u_cvs 0 1 885 657
////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::get_num_u_cvs
//       Access: Public
//  Description: Returns the number of control vertices that should be
//               present in the U direction.  This is determined by
//               the number of knots and the order; it does not
//               necessarily reflect the number of vertices that have
//               actually been added to the surface.  (However, if the
//               number of vertices in the surface are wrong, the
//               surface is invalid.)
////////////////////////////////////////////////////////////////////
54
inline int EggNurbsSurface::get_num_u_cvs(void) const;

1858 13 get_num_v_cvs 0 4 2054 30 EggNurbsSurface::get_num_v_cvs 0 1 886 657
////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::get_num_v_cvs
//       Access: Public
//  Description: Returns the number of control vertices that should be
//               present in the V direction.  This is determined by
//               the number of knots and the order; it does not
//               necessarily reflect the number of vertices that have
//               actually been added to the surface.  (However, if the
//               number of vertices in the surface are wrong, the
//               surface is invalid.)
////////////////////////////////////////////////////////////////////
54
inline int EggNurbsSurface::get_num_v_cvs(void) const;

1859 11 get_num_cvs 0 4 2054 28 EggNurbsSurface::get_num_cvs 0 1 887 679
////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::get_num_cvs
//       Access: Public
//  Description: Returns the total number of control vertices that
//               *should* be defined for the surface.  This is
//               determined by the number of knots and the order, in
//               each direction; it does not necessarily reflect the
//               number of vertices that have actually been added to
//               the surface.  (However, if the number of vertices in
//               the surface are wrong, the surface is invalid.)
////////////////////////////////////////////////////////////////////
52
inline int EggNurbsSurface::get_num_cvs(void) const;

1860 11 get_u_index 0 4 2054 28 EggNurbsSurface::get_u_index 0 1 888 538
////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::get_u_index
//       Access: Public
//  Description: Returns the U index number of the given vertex within
//               the EggPrimitive's linear list of vertices.  An
//               EggNurbsSurface maps a linear list of vertices to its
//               2-d mesh; this returns the U index number that
//               corresponds to the nth vertex in the list.
////////////////////////////////////////////////////////////////////
64
inline int EggNurbsSurface::get_u_index(int vertex_index) const;

1861 11 get_v_index 0 4 2054 28 EggNurbsSurface::get_v_index 0 1 889 538
////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::get_v_index
//       Access: Public
//  Description: Returns the V index number of the given vertex within
//               the EggPrimitive's linear list of vertices.  An
//               EggNurbsSurface maps a linear list of vertices to its
//               2-d mesh; this returns the V index number that
//               corresponds to the nth vertex in the list.
////////////////////////////////////////////////////////////////////
64
inline int EggNurbsSurface::get_v_index(int vertex_index) const;

1862 16 get_vertex_index 0 4 2054 33 EggNurbsSurface::get_vertex_index 0 1 890 344
////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::get_vertex_index
//       Access: Public
//  Description: Returns the index number within the EggPrimitive's
//               list of the control vertex at position ui, vi.
////////////////////////////////////////////////////////////////////
67
inline int EggNurbsSurface::get_vertex_index(int ui, int vi) const;

1863 11 is_closed_u 0 4 2054 28 EggNurbsSurface::is_closed_u 0 1 891 503
////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::is_closed_u
//       Access: Public
//  Description: Returns true if the surface appears to be closed in
//               the U direction.  Since the Egg syntax does not
//               provide a means for explicit indication of closure,
//               this has to be guessed at by examining the surface
//               itself.
////////////////////////////////////////////////////////////////////
46
bool EggNurbsSurface::is_closed_u(void) const;

1864 11 is_closed_v 0 4 2054 28 EggNurbsSurface::is_closed_v 0 1 892 503
////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::is_closed_v
//       Access: Public
//  Description: Returns true if the surface appears to be closed in
//               the V direction.  Since the Egg syntax does not
//               provide a means for explicit indication of closure,
//               this has to be guessed at by examining the surface
//               itself.
////////////////////////////////////////////////////////////////////
46
bool EggNurbsSurface::is_closed_v(void) const;

1865 10 get_u_knot 0 4 2054 27 EggNurbsSurface::get_u_knot 0 1 893 295
////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::get_u_knot
//       Access: Public
//  Description: Returns the nth knot value defined in the U
//               direction.
////////////////////////////////////////////////////////////////////
55
inline double EggNurbsSurface::get_u_knot(int k) const;

1866 10 get_v_knot 0 4 2054 27 EggNurbsSurface::get_v_knot 0 1 894 295
////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::get_v_knot
//       Access: Public
//  Description: Returns the nth knot value defined in the V
//               direction.
////////////////////////////////////////////////////////////////////
55
inline double EggNurbsSurface::get_v_knot(int k) const;

1867 6 get_cv 0 4 2054 23 EggNurbsSurface::get_cv 0 1 895 294
////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::get_cv
//       Access: Public
//  Description: Returns the control vertex at the indicate U, V
//               position.
////////////////////////////////////////////////////////////////////
64
inline EggVertex *EggNurbsSurface::get_cv(int ui, int vi) const;

1868 21 get_curves_on_surface 0 20 2054 38 EggNurbsSurface::get_curves_on_surface 0 1 897 82
getter for list< PointerTo< EggNurbsCurve > > EggNurbsSurface::_curves_on_surface;
93
list< PointerTo< EggNurbsCurve > > const &EggNurbsSurface::get_curves_on_surface(void) const;

1869 9 get_trims 0 20 2054 26 EggNurbsSurface::get_trims 0 1 898 86
getter for list< list< list< PointerTo< EggNurbsCurve > > > > EggNurbsSurface::_trims;
97
list< list< list< PointerTo< EggNurbsCurve > > > > const &EggNurbsSurface::get_trims(void) const;

1870 14 get_class_type 0 4 2054 31 EggNurbsSurface::get_class_type 0 1 896 0
56
static TypeHandle EggNurbsSurface::get_class_type(void);

1871 16 ~EggNurbsSurface 0 4 2054 33 EggNurbsSurface::~EggNurbsSurface 0 0 0
40
EggNurbsSurface::~EggNurbsSurface(void);

1872 8 EggPatch 0 4 2057 18 EggPatch::EggPatch 0 3 899 900 901 931
// Filename: eggPatch.I
// Created by:  drose (27Apr12)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggPatch::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggPatch::Copy constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
116
inline EggPatch::EggPatch(basic_string< char > const &name = (""));
inline EggPatch::EggPatch(EggPatch const &copy);

1873 10 operator = 0 4 2057 20 EggPatch::operator = 0 1 902 233
////////////////////////////////////////////////////////////////////
//     Function: EggPatch::Copy assignment operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
60
inline EggPatch &EggPatch::operator =(EggPatch const &copy);

1874 14 get_class_type 0 4 2057 24 EggPatch::get_class_type 0 1 903 0
49
static TypeHandle EggPatch::get_class_type(void);

1875 9 ~EggPatch 0 4 2057 19 EggPatch::~EggPatch 0 0 0
26
EggPatch::~EggPatch(void);

1876 8 EggPoint 0 4 2058 18 EggPoint::EggPoint 0 3 904 905 906 925
// Filename: eggPoint.I
// Created by:  drose (15Dec99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggPoint::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggPoint::Copy constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
116
inline EggPoint::EggPoint(basic_string< char > const &name = (""));
inline EggPoint::EggPoint(EggPoint const &copy);

1877 10 operator = 0 4 2058 20 EggPoint::operator = 0 1 907 230
////////////////////////////////////////////////////////////////////
//     Function: EggPoint::Copy assignment operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
60
inline EggPoint &EggPoint::operator =(EggPoint const &copy);

1878 9 has_thick 0 4 2058 19 EggPoint::has_thick 0 1 908 218
////////////////////////////////////////////////////////////////////
//     Function: EggPoint::has_thick
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
44
inline bool EggPoint::has_thick(void) const;

1879 9 get_thick 0 4 2058 19 EggPoint::get_thick 0 1 909 330
////////////////////////////////////////////////////////////////////
//     Function: EggPoint::get_thick
//       Access: Published
//  Description: Returns the thickness set on this particular point.
//               If there is no thickness set, returns 1.0.
////////////////////////////////////////////////////////////////////
46
inline double EggPoint::get_thick(void) const;

1880 9 set_thick 0 4 2058 19 EggPoint::set_thick 0 1 910 218
////////////////////////////////////////////////////////////////////
//     Function: EggPoint::set_thick
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
46
inline void EggPoint::set_thick(double thick);

1881 11 clear_thick 0 4 2058 21 EggPoint::clear_thick 0 1 911 220
////////////////////////////////////////////////////////////////////
//     Function: EggPoint::clear_thick
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
40
inline void EggPoint::clear_thick(void);

1882 15 has_perspective 0 4 2058 25 EggPoint::has_perspective 0 1 912 224
////////////////////////////////////////////////////////////////////
//     Function: EggPoint::has_perspective
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
50
inline bool EggPoint::has_perspective(void) const;

1883 15 get_perspective 0 4 2058 25 EggPoint::get_perspective 0 1 913 370
////////////////////////////////////////////////////////////////////
//     Function: EggPoint::get_perspective
//       Access: Published
//  Description: Returns the perspective flag set on this particular
//               point.  If there is no perspective flag set, returns
//               false.
////////////////////////////////////////////////////////////////////
50
inline bool EggPoint::get_perspective(void) const;

1884 15 set_perspective 0 4 2058 25 EggPoint::set_perspective 0 1 914 224
////////////////////////////////////////////////////////////////////
//     Function: EggPoint::set_perspective
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
56
inline void EggPoint::set_perspective(bool perspective);

1885 17 clear_perspective 0 4 2058 27 EggPoint::clear_perspective 0 1 915 226
////////////////////////////////////////////////////////////////////
//     Function: EggPoint::clear_perspective
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
46
inline void EggPoint::clear_perspective(void);

1886 14 get_class_type 0 4 2058 24 EggPoint::get_class_type 0 1 916 0
49
static TypeHandle EggPoint::get_class_type(void);

1887 9 ~EggPoint 0 4 2058 19 EggPoint::~EggPoint 0 0 0
26
EggPoint::~EggPoint(void);

1888 15 EggPolysetMaker 0 4 2059 32 EggPolysetMaker::EggPolysetMaker 0 1 917 225
////////////////////////////////////////////////////////////////////
//     Function: EggPolysetMaker::Constructor
//       Access: Public
//  Description: 
////////////////////////////////////////////////////////////////////
39
EggPolysetMaker::EggPolysetMaker(void);

1889 14 set_properties 0 4 2059 31 EggPolysetMaker::set_properties 0 1 918 609
////////////////////////////////////////////////////////////////////
//     Function: EggPolysetMaker::set_properties
//       Access: Public
//  Description: Sets the set of properties that determines which
//               polygons are allowed to be grouped together into a
//               single polyset.  This is the bitwise 'or' of all the
//               properties that matter.  If this is 0, all polygons
//               (within a given group) will be lumped into a common
//               polyset regardless of their properties.
////////////////////////////////////////////////////////////////////
53
void EggPolysetMaker::set_properties(int properties);

1890 14 get_class_type 0 4 2059 31 EggPolysetMaker::get_class_type 0 1 919 0
56
static TypeHandle EggPolysetMaker::get_class_type(void);

1891 16 ~EggPolysetMaker 0 4 2059 33 EggPolysetMaker::~EggPolysetMaker 0 0 0
40
EggPolysetMaker::~EggPolysetMaker(void);

1892 17 EggPoolUniquifier 0 4 2062 36 EggPoolUniquifier::EggPoolUniquifier 0 1 920 226
////////////////////////////////////////////////////////////////////
//     Function: EggPoolUniquifier::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
43
EggPoolUniquifier::EggPoolUniquifier(void);

1893 14 get_class_type 0 4 2062 33 EggPoolUniquifier::get_class_type 0 1 921 0
58
static TypeHandle EggPoolUniquifier::get_class_type(void);

1894 18 ~EggPoolUniquifier 0 4 2062 37 EggPoolUniquifier::~EggPoolUniquifier 0 0 0
44
EggPoolUniquifier::~EggPoolUniquifier(void);

1895 12 EggSAnimData 0 4 2063 26 EggSAnimData::EggSAnimData 0 3 922 923 924 937
// Filename: eggSAnimData.I
// Created by:  drose (19Feb99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggSAnimData::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggSAnimData::Copy constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
136
inline EggSAnimData::EggSAnimData(basic_string< char > const &name = (""));
inline EggSAnimData::EggSAnimData(EggSAnimData const &copy);

1896 10 operator = 0 4 2063 24 EggSAnimData::operator = 0 1 925 234
////////////////////////////////////////////////////////////////////
//     Function: EggSAnimData::Copy assignment operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
72
inline EggSAnimData &EggSAnimData::operator =(EggSAnimData const &copy);

1897 12 get_num_rows 0 4 2063 26 EggSAnimData::get_num_rows 0 1 926 326
////////////////////////////////////////////////////////////////////
//     Function: EggSAnimData::get_num_rows
//       Access: Public
//  Description: Returns the number of rows in the table.  For an
//               SAnim table, each row has one column.
////////////////////////////////////////////////////////////////////
50
inline int EggSAnimData::get_num_rows(void) const;

1898 9 get_value 0 4 2063 23 EggSAnimData::get_value 0 1 927 329
////////////////////////////////////////////////////////////////////
//     Function: EggSAnimData::get_value
//       Access: Public
//  Description: Returns the value at the indicated row.  Row must be
//               in the range 0 <= row < get_num_rows().
////////////////////////////////////////////////////////////////////
53
inline double EggSAnimData::get_value(int row) const;

1899 9 set_value 0 4 2063 23 EggSAnimData::set_value 0 1 928 329
////////////////////////////////////////////////////////////////////
//     Function: EggSAnimData::set_value
//       Access: Public
//  Description: Changes the value at the indicated row.  Row must be
//               in the range 0 <= row < get_num_rows().
////////////////////////////////////////////////////////////////////
59
inline void EggSAnimData::set_value(int row, double value);

1900 8 optimize 0 4 2063 22 EggSAnimData::optimize 0 1 929 322
////////////////////////////////////////////////////////////////////
//     Function: EggSAnimData::optimize
//       Access: Public
//  Description: Optimizes the data by collapsing a long table of
//               duplicate values into a single value.
////////////////////////////////////////////////////////////////////
34
void EggSAnimData::optimize(void);

1901 14 get_class_type 0 4 2063 28 EggSAnimData::get_class_type 0 1 930 0
53
static TypeHandle EggSAnimData::get_class_type(void);

1902 13 ~EggSAnimData 0 4 2063 27 EggSAnimData::~EggSAnimData 0 0 0
34
EggSAnimData::~EggSAnimData(void);

1903 8 EggTable 0 4 2064 18 EggTable::EggTable 0 3 931 932 933 925
// Filename: eggTable.I
// Created by:  drose (19Feb99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggTable::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggTable::Copy constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
116
inline EggTable::EggTable(basic_string< char > const &name = (""));
inline EggTable::EggTable(EggTable const &copy);

1904 10 operator = 0 4 2064 20 EggTable::operator = 0 1 934 230
////////////////////////////////////////////////////////////////////
//     Function: EggTable::Copy assignment operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
60
inline EggTable &EggTable::operator =(EggTable const &copy);

1905 14 set_table_type 0 4 2064 24 EggTable::set_table_type 0 1 935 220
////////////////////////////////////////////////////////////////////
//     Function: EggTable::set_table_type
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
63
inline void EggTable::set_table_type(EggTable::TableType type);

1906 14 get_table_type 0 4 2064 24 EggTable::get_table_type 0 1 936 220
////////////////////////////////////////////////////////////////////
//     Function: EggTable::get_table_type
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
64
inline EggTable::TableType EggTable::get_table_type(void) const;

1907 13 has_transform 0 4 2064 23 EggTable::has_transform 0 1 937 313
////////////////////////////////////////////////////////////////////
//     Function: EggTable::has_transform
//       Access: Public
//  Description: Returns true if the table contains a transform
//               description, false otherwise.
////////////////////////////////////////////////////////////////////
41
bool EggTable::has_transform(void) const;

1908 17 string_table_type 0 4 2064 27 EggTable::string_table_type 0 1 938 412
////////////////////////////////////////////////////////////////////
//     Function: EggTable::string_table_type
//       Access: Public, Static
//  Description: Returns the TableType value associated with the given
//               string representation, or TT_invalid if the string
//               does not match any known TableType value.
////////////////////////////////////////////////////////////////////
91
static EggTable::TableType EggTable::string_table_type(basic_string< char > const &string);

1909 14 get_class_type 0 4 2064 24 EggTable::get_class_type 0 1 939 0
49
static TypeHandle EggTable::get_class_type(void);

1910 9 ~EggTable 0 4 2064 19 EggTable::~EggTable 0 0 0
26
EggTable::~EggTable(void);

1911 20 EggTextureCollection 0 4 2066 42 EggTextureCollection::EggTextureCollection 0 2 940 941 465
////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
127
EggTextureCollection::EggTextureCollection(void);
EggTextureCollection::EggTextureCollection(EggTextureCollection const &copy);

1912 10 operator = 0 4 2066 32 EggTextureCollection::operator = 0 1 942 242
////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
89
EggTextureCollection &EggTextureCollection::operator =(EggTextureCollection const &copy);

1913 21 ~EggTextureCollection 0 4 2066 43 EggTextureCollection::~EggTextureCollection 0 0 228
////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::Destructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
50
EggTextureCollection::~EggTextureCollection(void);

1914 5 clear 0 4 2066 27 EggTextureCollection::clear 0 1 943 265
////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::clear
//       Access: Public
//  Description: Removes all textures from the collection.
////////////////////////////////////////////////////////////////////
39
void EggTextureCollection::clear(void);

1915 16 extract_textures 0 4 2066 38 EggTextureCollection::extract_textures 0 1 944 479
////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::extract_textures
//       Access: Public
//  Description: Walks the egg hierarchy beginning at the indicated
//               node, and removes any EggTextures encountered in the
//               hierarchy, adding them to the collection.  Returns
//               the number of EggTextures encountered.
////////////////////////////////////////////////////////////////////
63
int EggTextureCollection::extract_textures(EggGroupNode *node);

1916 8 is_empty 0 4 2066 30 EggTextureCollection::is_empty 0 1 945 322
////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::is_empty
//       Access: Published
//  Description: Returns true if there are no EggTexures in the
//               collection, false otherwise.
////////////////////////////////////////////////////////////////////
48
bool EggTextureCollection::is_empty(void) const;

1917 16 get_num_textures 0 4 2066 38 EggTextureCollection::get_num_textures 0 1 946 290
////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::get_num_textures
//       Access: Published
//  Description: Returns the number of EggTextures in the collection.
////////////////////////////////////////////////////////////////////
55
int EggTextureCollection::get_num_textures(void) const;

1918 11 get_texture 0 4 2066 33 EggTextureCollection::get_texture 0 1 947 278
////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::get_texture
//       Access: Published
//  Description: Returns the nth EggTexture in the collection.
////////////////////////////////////////////////////////////////////
63
EggTexture *EggTextureCollection::get_texture(int index) const;

1919 18 find_used_textures 0 4 2066 40 EggTextureCollection::find_used_textures 0 1 948 1765
////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::find_used_textures
//       Access: Public
//  Description: Walks the egg hierarchy beginning at the indicated
//               node, looking for textures that are referenced by
//               primitives but are not already members of the
//               collection, adding them to the collection.
//
//               If this is called following extract_textures(), it
//               can be used to pick up any additional texture
//               references that appeared in the egg hierarchy (but
//               whose EggTexture node was not actually part of the
//               hierarchy).
//
//               If this is called in lieu of extract_textures(), it
//               will fill up the collection with all of the
//               referenced textures (and only the referenced
//               textures), without destructively removing the
//               EggTextures from the hierarchy.
//
//               This also has the side effect of incrementing the
//               internal usage count for a texture in the collection
//               each time a texture reference is encountered.  This
//               side effect is taken advantage of by
//               remove_unused_textures().
//
//               And one more side effect: this function identifies
//               the presence of multitexturing in the egg file, and
//               calls multitexture_over() on each texture
//               appropriately so that, after this call, you may
//               expect get_multitexture_sort() to return a reasonable
//               value for each texture.
////////////////////////////////////////////////////////////////////
60
int EggTextureCollection::find_used_textures(EggNode *node);

1920 22 remove_unused_textures 0 4 2066 44 EggTextureCollection::remove_unused_textures 0 1 949 570
////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::remove_unused_textures
//       Access: Public
//  Description: Removes any textures from the collection that aren't
//               referenced by any primitives in the indicated egg
//               hierarchy.  This also, incidentally, adds textures to
//               the collection that had been referenced by primitives
//               but had not previously appeared in the collection.
////////////////////////////////////////////////////////////////////
65
void EggTextureCollection::remove_unused_textures(EggNode *node);

1921 28 collapse_equivalent_textures 0 4 2066 50 EggTextureCollection::collapse_equivalent_textures 0 2 950 951 1777
////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::collapse_equivalent_textures
//       Access: Public
//  Description: Walks through the collection and collapses together
//               any separate textures that are equivalent according
//               to the indicated equivalence factor, eq (see
//               EggTexture::is_equivalent_to()).  The return value is
//               the number of textures removed.
//
//               This flavor of collapse_equivalent_textures()
//               automatically adjusts all the primitives in the egg
//               hierarchy to refer to the new texture pointers.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::collapse_equivalent_textures
//       Access: Public
//  Description: Walks through the collection and collapses together
//               any separate textures that are equivalent according
//               to the indicated equivalence factor, eq (see
//               EggTexture::is_equivalent_to()).  The return value is
//               the number of textures removed.
//
//               This flavor of collapse_equivalent_textures() does
//               not adjust any primitives in the egg hierarchy;
//               instead, it fills up the 'removed' map with an entry
//               for each removed texture, mapping it back to the
//               equivalent retained texture.  It's up to the user to
//               then call replace_textures() with this map, if
//               desired, to apply these changes to the egg hierarchy.
////////////////////////////////////////////////////////////////////
213
int EggTextureCollection::collapse_equivalent_textures(int eq, EggGroupNode *node);
int EggTextureCollection::collapse_equivalent_textures(int eq, map< PointerTo< EggTexture >, PointerTo< EggTexture > > &removed);

1922 16 replace_textures 0 4 2066 38 EggTextureCollection::replace_textures 0 1 952 601
////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::replace_textures
//       Access: Public, Static
//  Description: Walks the egg hierarchy, changing out any reference
//               to a texture appearing on the left side of the map
//               with its corresponding texture on the right side.
//               This is most often done following a call to
//               collapse_equivalent_textures().  It does not directly
//               affect the Collection.
////////////////////////////////////////////////////////////////////
143
static void EggTextureCollection::replace_textures(EggGroupNode *node, map< PointerTo< EggTexture >, PointerTo< EggTexture > > const &replace);

1923 14 uniquify_trefs 0 4 2066 36 EggTextureCollection::uniquify_trefs 0 1 953 384
////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::uniquify_trefs
//       Access: Public
//  Description: Guarantees that each texture in the collection has a
//               unique TRef name.  This is essential before writing
//               an egg file.
////////////////////////////////////////////////////////////////////
48
void EggTextureCollection::uniquify_trefs(void);

1924 12 sort_by_tref 0 4 2066 34 EggTextureCollection::sort_by_tref 0 1 954 404
////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::sort_by_tref
//       Access: Public
//  Description: Sorts all the textures into alphabetical order by
//               TRef name.  Subsequent operations using begin()/end()
//               will traverse in this sorted order.
////////////////////////////////////////////////////////////////////
46
void EggTextureCollection::sort_by_tref(void);

1925 16 sort_by_basename 0 4 2066 38 EggTextureCollection::sort_by_basename 0 1 955 471
////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::sort_by_basename
//       Access: Public
//  Description: Sorts all the textures into alphabetical order by
//               the basename part (including extension) of the
//               filename.  Subsequent operations using begin()/end()
//               will traverse in this sorted order.
////////////////////////////////////////////////////////////////////
50
void EggTextureCollection::sort_by_basename(void);

1926 11 operator [] 0 4 2066 33 EggTextureCollection::operator [] 0 1 956 278
////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::operator []
//       Access: Published
//  Description: Returns the nth EggTexture in the collection.
////////////////////////////////////////////////////////////////////
75
inline EggTexture *EggTextureCollection::operator [](unsigned int n) const;

1927 4 size 0 4 2066 26 EggTextureCollection::size 0 1 957 278
////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::size
//       Access: Published
//  Description: Returns the number of EggTextures in the collection.
////////////////////////////////////////////////////////////////////
59
inline unsigned int EggTextureCollection::size(void) const;

1928 11 add_texture 0 4 2066 33 EggTextureCollection::add_texture 0 1 958 409
////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::add_texture
//       Access: Public
//  Description: Explicitly adds a new texture to the collection.
//               Returns true if the texture was added, false if it
//               was already there or if there was some error.
////////////////////////////////////////////////////////////////////
60
bool EggTextureCollection::add_texture(EggTexture *texture);

1929 14 remove_texture 0 4 2066 36 EggTextureCollection::remove_texture 0 1 959 410
////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::remove_texture
//       Access: Public
//  Description: Explicitly removes a texture from the collection.
//               Returns true if the texture was removed, false if it
//               wasn't there or if there was some error.
////////////////////////////////////////////////////////////////////
63
bool EggTextureCollection::remove_texture(EggTexture *texture);

1930 21 create_unique_texture 0 4 2066 43 EggTextureCollection::create_unique_texture 0 1 960 691
// create_unique_texture() creates a new texture if there is not
// already one equivalent (according to eq, see
// EggTexture::is_equivalent_to()) to the indicated texture, or
// returns the existing one if there is.

////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::create_unique_texture
//       Access: Public
//  Description: Creates a new texture if there is not already one
//               equivalent (according to eq, see
//               EggTexture::is_equivalent_to()) to the indicated
//               texture, or returns the existing one if there is.
////////////////////////////////////////////////////////////////////
88
EggTexture *EggTextureCollection::create_unique_texture(EggTexture const &copy, int eq);

1931 9 find_tref 0 4 2066 31 EggTextureCollection::find_tref 0 1 961 373
// Find a texture with a particular TRef name.

////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::find_tref
//       Access: Public
//  Description: Returns the texture with the indicated TRef name, or
//               NULL if no texture matches.
////////////////////////////////////////////////////////////////////
89
EggTexture *EggTextureCollection::find_tref(basic_string< char > const &tref_name) const;

1932 13 find_filename 0 4 2066 35 EggTextureCollection::find_filename 0 1 962 375
// Find a texture with a particular filename.

////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::find_filename
//       Access: Public
//  Description: Returns the texture with the indicated filename, or
//               NULL if no texture matches.
////////////////////////////////////////////////////////////////////
80
EggTexture *EggTextureCollection::find_filename(Filename const &filename) const;

1933 14 EggTriangleFan 0 4 2067 30 EggTriangleFan::EggTriangleFan 0 3 963 964 965 949
// Filename: eggTriangleFan.I
// Created by:  drose (23Mar05)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggTriangleFan::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggTriangleFan::Copy constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
146
inline EggTriangleFan::EggTriangleFan(basic_string< char > const &name = (""));
inline EggTriangleFan::EggTriangleFan(EggTriangleFan const &copy);

1934 10 operator = 0 4 2067 26 EggTriangleFan::operator = 0 1 966 239
////////////////////////////////////////////////////////////////////
//     Function: EggTriangleFan::Copy assignment operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
78
inline EggTriangleFan &EggTriangleFan::operator =(EggTriangleFan const &copy);

1935 14 get_class_type 0 4 2067 30 EggTriangleFan::get_class_type 0 1 967 0
55
static TypeHandle EggTriangleFan::get_class_type(void);

1936 16 EggTriangleStrip 0 4 2068 34 EggTriangleStrip::EggTriangleStrip 0 3 968 969 970 955
// Filename: eggTriangleStrip.I
// Created by:  drose (13Mar05)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggTriangleStrip::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggTriangleStrip::Copy constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
156
inline EggTriangleStrip::EggTriangleStrip(basic_string< char > const &name = (""));
inline EggTriangleStrip::EggTriangleStrip(EggTriangleStrip const &copy);

1937 10 operator = 0 4 2068 28 EggTriangleStrip::operator = 0 1 971 241
////////////////////////////////////////////////////////////////////
//     Function: EggTriangleStrip::Copy assignment operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
84
inline EggTriangleStrip &EggTriangleStrip::operator =(EggTriangleStrip const &copy);

1938 14 get_class_type 0 4 2068 32 EggTriangleStrip::get_class_type 0 1 972 0
57
static TypeHandle EggTriangleStrip::get_class_type(void);

1939 11 EggXfmSAnim 0 4 2069 24 EggXfmSAnim::EggXfmSAnim 0 5 973 974 975 976 977 1258
// Filename: eggXfmSAnim.I
// Created by:  drose (19Feb99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::Copy constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::Conversion constructor
//       Access: Public
//  Description: Converts the older-style XfmAnim table to the
//               newer-style XfmSAnim table.
////////////////////////////////////////////////////////////////////
229
inline EggXfmSAnim::EggXfmSAnim(basic_string< char > const &name = (""), CoordinateSystem cs = (CS_default));
EggXfmSAnim::EggXfmSAnim(EggXfmAnimData const &convert_from);
inline EggXfmSAnim::EggXfmSAnim(EggXfmSAnim const &copy);

1940 10 operator = 0 4 2069 23 EggXfmSAnim::operator = 0 1 978 233
////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::Copy assignment operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
69
inline EggXfmSAnim &EggXfmSAnim::operator =(EggXfmSAnim const &copy);

1941 7 set_fps 0 4 2069 20 EggXfmSAnim::set_fps 0 1 979 216
////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::set_fps
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
45
inline void EggXfmSAnim::set_fps(double fps);

1942 9 clear_fps 0 4 2069 22 EggXfmSAnim::clear_fps 0 1 980 218
////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::clear_fps
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
41
inline void EggXfmSAnim::clear_fps(void);

1943 7 has_fps 0 4 2069 20 EggXfmSAnim::has_fps 0 1 981 216
////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::has_fps
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
45
inline bool EggXfmSAnim::has_fps(void) const;

1944 7 get_fps 0 4 2069 20 EggXfmSAnim::get_fps 0 1 982 262
////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::get_fps
//       Access: Public
//  Description: This is only valid if has_fps() returns true.
////////////////////////////////////////////////////////////////////
47
inline double EggXfmSAnim::get_fps(void) const;

1945 9 set_order 0 4 2069 22 EggXfmSAnim::set_order 0 1 983 218
////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::set_order
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
70
inline void EggXfmSAnim::set_order(basic_string< char > const &order);

1946 11 clear_order 0 4 2069 24 EggXfmSAnim::clear_order 0 1 984 220
////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::clear_order
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
43
inline void EggXfmSAnim::clear_order(void);

1947 9 has_order 0 4 2069 22 EggXfmSAnim::has_order 0 1 985 218
////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::has_order
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
47
inline bool EggXfmSAnim::has_order(void) const;

1948 9 get_order 0 4 2069 22 EggXfmSAnim::get_order 0 1 986 218
////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::get_order
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
70
inline basic_string< char > const &EggXfmSAnim::get_order(void) const;

1949 18 get_standard_order 0 4 2069 31 EggXfmSAnim::get_standard_order 0 1 987 448
////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::get_standard_order
//       Access: Public, Static
//  Description: Returns the standard order of matrix component
//               composition.  This is what the order string must be
//               set to in order to use set_value() or add_data()
//               successfully.
////////////////////////////////////////////////////////////////////
80
static inline basic_string< char > const &EggXfmSAnim::get_standard_order(void);

1950 21 get_coordinate_system 0 4 2069 34 EggXfmSAnim::get_coordinate_system 0 1 988 589
////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::get_coordinate_system
//       Access: Public
//  Description: Returns the coordinate system this table believes it
//               is defined within.  This should always match the
//               coordinate system of the EggData structure that owns
//               it.  It is necessary to store it here because the
//               meaning of the h, p, and r columns depends on the
//               coordinate system.
////////////////////////////////////////////////////////////////////
71
inline CoordinateSystem EggXfmSAnim::get_coordinate_system(void) const;

1951 8 optimize 0 4 2069 21 EggXfmSAnim::optimize 0 1 989 290
////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::optimize
//       Access: Public
//  Description: Optimizes the table by collapsing redundant
//               sub-tables.
////////////////////////////////////////////////////////////////////
33
void EggXfmSAnim::optimize(void);

1952 26 optimize_to_standard_order 0 4 2069 39 EggXfmSAnim::optimize_to_standard_order 0 1 990 512
////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::optimize_to_standard_order
//       Access: Public
//  Description: Optimizes the table by collapsing redundant
//               sub-tables, and simultaneously ensures that the order
//               string is the standard order (which is the same as
//               that supported by compose_matrix() and
//               decompose_matrix()).
////////////////////////////////////////////////////////////////////
51
void EggXfmSAnim::optimize_to_standard_order(void);

1953 9 normalize 0 4 2069 22 EggXfmSAnim::normalize 0 1 991 508
////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::normalize
//       Access: Public
//  Description: The inverse operation of optimize(), this ensures
//               that all the sub-tables have the same length by
//               duplicating rows as necessary.  This is needed before
//               doing operations like add_data() or set_value() on an
//               existing table.
////////////////////////////////////////////////////////////////////
34
void EggXfmSAnim::normalize(void);

1954 12 get_num_rows 0 4 2069 25 EggXfmSAnim::get_num_rows 0 1 992 528
////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::get_num_rows
//       Access: Public
//  Description: Returns the effective number of rows in the table.
//               This is actually the number of rows of the smallest
//               subtable larger than one row.  This is a convenience
//               function that treats the table of tables as if it
//               were a single table of matrices.
////////////////////////////////////////////////////////////////////
42
int EggXfmSAnim::get_num_rows(void) const;

1955 9 get_value 0 4 2069 22 EggXfmSAnim::get_value 0 1 993 639
////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::get_value
//       Access: Public
//  Description: Returns the value of the aggregate row of the table
//               as a matrix.  This is a convenience function that
//               treats the table of tables as if it were a single
//               table of matrices.  It is an error to call this if
//               any SAnimData children of this node have an improper
//               name (e.g. not a single letter, or not one of
//               "ijkabchprxyz").
////////////////////////////////////////////////////////////////////
59
void EggXfmSAnim::get_value(int row, LMatrix4d &mat) const;

1956 9 set_value 0 4 2069 22 EggXfmSAnim::set_value 0 1 994 716
////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::set_value
//       Access: Public
//  Description: Replaces the indicated row of the table with the
//               given matrix.
//
//               This function can only be called if all the
//               constraints of add_data(), below, are met.  Call
//               normalize() first if you are not sure.
//
//               The return value is true if the matrix can be
//               decomposed and stored as scale, shear, rotate, and
//               translate, or false otherwise.  The data is set in
//               either case.
////////////////////////////////////////////////////////////////////
59
bool EggXfmSAnim::set_value(int row, LMatrix4d const &mat);

1957 10 clear_data 0 4 2069 23 EggXfmSAnim::clear_data 0 1 995 316
////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::clear_data
//       Access: Public
//  Description: Removes all data from the table.  It does this by
//               removing all of its children.
////////////////////////////////////////////////////////////////////
42
inline void EggXfmSAnim::clear_data(void);

1958 8 add_data 0 4 2069 21 EggXfmSAnim::add_data 0 1 996 1669
////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::add_data
//       Access: Public
//  Description: Adds a new matrix to the table, by adding a new row
//               to each of the subtables.
//
//               This is a convenience function that
//               treats the table of tables as if it were a single
//               table of matrices.  It is an error to call this if
//               any SAnimData children of this node have an improper
//               name (e.g. not a single letter, or not one of
//               "ijkabchprxyz").
//
//               This function has the further requirement that all
//               nine of the subtables must exist and be of the same
//               length.  Furthermore, the order string must be the
//               standard order string, which matches the system
//               compose_matrix() and decompose_matrix() functions.
//
//               Thus, you probably cannot take an existing
//               EggXfmSAnim object and start adding matrices to the
//               end; you must clear out the original data first.  (As
//               a special exception, if no tables exist, they will be
//               created.)  The method normalize() will do this for
//               you on an existing EggXfmSAnim.
//
//               This function may fail silently if the matrix cannot
//               be decomposed into scale, shear, rotate, and
//               translate.  In this case, the closest approximation
//               is added to the table, and false is returned.
////////////////////////////////////////////////////////////////////
49
bool EggXfmSAnim::add_data(LMatrix4d const &mat);

1959 18 add_component_data 0 4 2069 31 EggXfmSAnim::add_component_data 0 2 997 998 639
////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::add_component_data
//       Access: Public
//  Description: Adds a new row to the named component (one of
//               matrix_component_letters) of the table.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::add_component_data
//       Access: Public
//  Description: Adds a new row to the indicated component (0-12) of
//               the table.
////////////////////////////////////////////////////////////////////
162
void EggXfmSAnim::add_component_data(basic_string< char > const &component_name, double value);
void EggXfmSAnim::add_component_data(int component, double value);

1960 18 compose_with_order 0 4 2069 31 EggXfmSAnim::compose_with_order 0 1 999 442
////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::compose_with_order
//       Access: Public, Static
//  Description: Composes a matrix out of the nine individual
//               components, respecting the order string.  The
//               components will be applied in the order indicated by
//               the string.
////////////////////////////////////////////////////////////////////
214
static void EggXfmSAnim::compose_with_order(LMatrix4d &mat, LVecBase3d const &scale, LVecBase3d const &shear, LVecBase3d const &hpr, LVecBase3d const &trans, basic_string< char > const &order, CoordinateSystem cs);

1961 14 get_class_type 0 4 2069 27 EggXfmSAnim::get_class_type 0 1 1000 0
52
static TypeHandle EggXfmSAnim::get_class_type(void);

1962 12 ~EggXfmSAnim 0 4 2069 25 EggXfmSAnim::~EggXfmSAnim 0 0 0
32
EggXfmSAnim::~EggXfmSAnim(void);

1963 14 EggXfmAnimData 0 4 2070 30 EggXfmAnimData::EggXfmAnimData 0 5 1001 1002 1003 1004 1005 1270
// Filename: eggXfmAnimData.I
// Created by:  drose (19Feb99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggXfmAnimData::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggXfmAnimData::Copy constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggXfmAnimData::Conversion constructor
//       Access: Public
//  Description: Converts the newer-style XfmSAnim table to the
//               older-style XfmAnim table.
////////////////////////////////////////////////////////////////////
247
inline EggXfmAnimData::EggXfmAnimData(basic_string< char > const &name = (""), CoordinateSystem cs = (CS_default));
EggXfmAnimData::EggXfmAnimData(EggXfmSAnim const &convert_from);
inline EggXfmAnimData::EggXfmAnimData(EggXfmAnimData const &copy);

1964 10 operator = 0 4 2070 26 EggXfmAnimData::operator = 0 1 1006 236
////////////////////////////////////////////////////////////////////
//     Function: EggXfmAnimData::Copy assignment operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
78
inline EggXfmAnimData &EggXfmAnimData::operator =(EggXfmAnimData const &copy);

1965 9 set_order 0 4 2070 25 EggXfmAnimData::set_order 0 1 1007 221
////////////////////////////////////////////////////////////////////
//     Function: EggXfmAnimData::set_order
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
73
inline void EggXfmAnimData::set_order(basic_string< char > const &order);

1966 11 clear_order 0 4 2070 27 EggXfmAnimData::clear_order 0 1 1008 223
////////////////////////////////////////////////////////////////////
//     Function: EggXfmAnimData::clear_order
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
46
inline void EggXfmAnimData::clear_order(void);

1967 9 has_order 0 4 2070 25 EggXfmAnimData::has_order 0 1 1009 221
////////////////////////////////////////////////////////////////////
//     Function: EggXfmAnimData::has_order
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
50
inline bool EggXfmAnimData::has_order(void) const;

1968 9 get_order 0 4 2070 25 EggXfmAnimData::get_order 0 1 1010 221
////////////////////////////////////////////////////////////////////
//     Function: EggXfmAnimData::get_order
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
73
inline basic_string< char > const &EggXfmAnimData::get_order(void) const;

1969 18 get_standard_order 0 4 2070 34 EggXfmAnimData::get_standard_order 0 1 1011 451
////////////////////////////////////////////////////////////////////
//     Function: EggXfmAnimData::get_standard_order
//       Access: Public, Static
//  Description: Returns the standard order of matrix component
//               composition.  This is what the order string must be
//               set to in order to use set_value() or add_data()
//               successfully.
////////////////////////////////////////////////////////////////////
83
static inline basic_string< char > const &EggXfmAnimData::get_standard_order(void);

1970 12 set_contents 0 4 2070 28 EggXfmAnimData::set_contents 0 1 1012 224
////////////////////////////////////////////////////////////////////
//     Function: EggXfmAnimData::set_contents
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
79
inline void EggXfmAnimData::set_contents(basic_string< char > const &contents);

1971 14 clear_contents 0 4 2070 30 EggXfmAnimData::clear_contents 0 1 1013 226
////////////////////////////////////////////////////////////////////
//     Function: EggXfmAnimData::clear_contents
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
49
inline void EggXfmAnimData::clear_contents(void);

1972 12 has_contents 0 4 2070 28 EggXfmAnimData::has_contents 0 1 1014 224
////////////////////////////////////////////////////////////////////
//     Function: EggXfmAnimData::has_contents
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
53
inline bool EggXfmAnimData::has_contents(void) const;

1973 12 get_contents 0 4 2070 28 EggXfmAnimData::get_contents 0 1 1015 224
////////////////////////////////////////////////////////////////////
//     Function: EggXfmAnimData::get_contents
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
76
inline basic_string< char > const &EggXfmAnimData::get_contents(void) const;

1974 21 get_coordinate_system 0 4 2070 37 EggXfmAnimData::get_coordinate_system 0 1 1016 592
////////////////////////////////////////////////////////////////////
//     Function: EggXfmAnimData::get_coordinate_system
//       Access: Public
//  Description: Returns the coordinate system this table believes it
//               is defined within.  This should always match the
//               coordinate system of the EggData structure that owns
//               it.  It is necessary to store it here because the
//               meaning of the h, p, and r columns depends on the
//               coordinate system.
////////////////////////////////////////////////////////////////////
74
inline CoordinateSystem EggXfmAnimData::get_coordinate_system(void) const;

1975 12 get_num_rows 0 4 2070 28 EggXfmAnimData::get_num_rows 0 1 1017 265
////////////////////////////////////////////////////////////////////
//     Function: EggXfmAnimData::get_num_rows
//       Access: Public
//  Description: Returns the number of rows in the table.
////////////////////////////////////////////////////////////////////
52
inline int EggXfmAnimData::get_num_rows(void) const;

1976 12 get_num_cols 0 4 2070 28 EggXfmAnimData::get_num_cols 0 1 1018 393
////////////////////////////////////////////////////////////////////
//     Function: EggXfmAnimData::get_num_cols
//       Access: Public
//  Description: Returns the number of columns in the table.  This is
//               set according to the "contents" string, which defines
//               the meaning of each column.
////////////////////////////////////////////////////////////////////
52
inline int EggXfmAnimData::get_num_cols(void) const;

1977 9 get_value 0 4 2070 25 EggXfmAnimData::get_value 0 2 1019 1020 839
////////////////////////////////////////////////////////////////////
//     Function: EggXfmAnimData::get_value
//       Access: Public
//  Description: Returns the value at the indicated row.  Row must be
//               in the range 0 <= row < get_num_rows(); col must be
//               in the range 0 <= col < get_num_cols().
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggXfmAnimData::get_value
//       Access: Public
//  Description: Returns the value of the aggregate row of the table
//               as a matrix.  This is a convenience function that
//               treats the 2-d table as if it were a single table of
//               matrices.
////////////////////////////////////////////////////////////////////
127
inline double EggXfmAnimData::get_value(int row, int col) const;
void EggXfmAnimData::get_value(int row, LMatrix4d &mat) const;

1978 14 get_class_type 0 4 2070 30 EggXfmAnimData::get_class_type 0 1 1021 0
55
static TypeHandle EggXfmAnimData::get_class_type(void);

1979 15 ~EggXfmAnimData 0 4 2070 31 EggXfmAnimData::~EggXfmAnimData 0 0 0
38
EggXfmAnimData::~EggXfmAnimData(void);

1021
1 14 Dtool_hhEqa5Wu 0 7 3 2071 0 14 Dtool_hhEqa5Wu 707 // Filename: eggUserData.I
// Created by:  drose (03Jun03)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggUserData::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
2 14 Dtool_hhEqEDMc 0 7 3 2071 0 14 Dtool_hhEqEDMc 225 ////////////////////////////////////////////////////////////////////
//     Function: EggUserData::Copy constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2072  
3 14 Dtool_hhEqDBa1 0 7 4 2071 0 14 Dtool_hhEqDBa1 233 ////////////////////////////////////////////////////////////////////
//     Function: EggUserData::Copy assignment operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2071  4 copy 1 2072  
4 14 Dtool_hhEqkdis 0 7 5 2075 0 14 Dtool_hhEqkdis 0 0 
5 14 Dtool_hhEqc5tZ 0 7 7 2076 0 14 Dtool_hhEqc5tZ 221 ////////////////////////////////////////////////////////////////////
//     Function: EggObject::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
6 14 Dtool_hhEq6VZo 0 7 7 2076 0 14 Dtool_hhEq6VZo 226 ////////////////////////////////////////////////////////////////////
//     Function: EggObject::Copy constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2077  
7 14 Dtool_hhEq43pX 0 7 8 2076 0 14 Dtool_hhEq43pX 234 ////////////////////////////////////////////////////////////////////
//     Function: EggObject::Copy assignment operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2076  4 copy 1 2077  
8 14 Dtool_hhEqi4s0 0 4 9 2079 0 14 Dtool_hhEqi4s0 1201 ////////////////////////////////////////////////////////////////////
//     Function: EggObject::set_user_data
//       Access: Published
//  Description: Sets the user data associated with this object.  This
//               may be any EggUserData-derived object.  The egg
//               library will do nothing with this pointer, except to
//               hold its reference count and return the pointer on
//               request.
//
//               The EggObject maintains multiple different
//               EggUserData pointers, one for each unique type (as
//               reported by get_type()).  If you know that only one
//               type of EggUserData object will be added in your
//               application, you may use the query functions that
//               accept no parameters, but it is recommended that in
//               general you pass in the type of your particular user
//               data, to allow multiple applications to coexist in
//               the same egg data.
//
//               This pointer is also copied by the copy assignment
//               operator and copy constructor.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2076  9 user_data 1 2071  
9 14 Dtool_hhEqWm2j 0 7 10 2071 0 14 Dtool_hhEqWm2j 366 ////////////////////////////////////////////////////////////////////
//     Function: EggObject::get_user_data
//       Access: Published
//  Description: Returns the user data pointer most recently stored on
//               this object, or NULL if nothing was previously
//               stored.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2077  
10 14 Dtool_hhEqTuxe 0 7 10 2071 0 14 Dtool_hhEqTuxe 331 ////////////////////////////////////////////////////////////////////
//     Function: EggObject::get_user_data
//       Access: Published
//  Description: Returns the user data pointer of the indicated type,
//               if it exists, or NULL if it does not.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2077  4 type 1 2075  
11 14 Dtool_hhEqibXq 0 6 11 2080 0 14 Dtool_hhEqibXq 361 ////////////////////////////////////////////////////////////////////
//     Function: EggObject::has_user_data
//       Access: Published
//  Description: Returns true if a generic user data pointer has
//               recently been set and not yet cleared, false
//               otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2077  
12 14 Dtool_hhEqvhRl 0 6 11 2080 0 14 Dtool_hhEqvhRl 331 ////////////////////////////////////////////////////////////////////
//     Function: EggObject::has_user_data
//       Access: Published
//  Description: Returns true if the user data pointer of the
//               indicated type has been set, false otherwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2077  4 type 1 2075  
13 14 Dtool_hhEq0OqA 0 4 12 2079 0 14 Dtool_hhEq0OqA 273 ////////////////////////////////////////////////////////////////////
//     Function: EggObject::clear_user_data
//       Access: Published
//  Description: Removes *all* user data pointers from the node.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2076  
14 14 Dtool_hhEqjTs3 0 4 12 2079 0 14 Dtool_hhEqjTs3 278 ////////////////////////////////////////////////////////////////////
//     Function: EggObject::clear_user_data
//       Access: Published
//  Description: Removes the user data pointer of the indicated type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2076  4 type 1 2075  
15 14 Dtool_hhEqL1Gc 0 7 13 2075 0 14 Dtool_hhEqL1Gc 0 0 
16 14 Dtool_hhEqzuI5 0 7 20 2083 1040 14 Dtool_hhEqzuI5 228 ////////////////////////////////////////////////////////////////////
//     Function: EggNamedObject::Copy constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2081  
17 14 Dtool_hhEq1nQw 0 7 20 2083 1040 14 Dtool_hhEq1nQw 713 // Filename: eggNamedObject.I
// Created by:  drose (10Feb99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggNamedObject::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 name 1 2084  
18 14 Dtool_hhEqFcLP 0 7 20 2083 1040 14 Dtool_hhEqFcLP 713 // Filename: eggNamedObject.I
// Created by:  drose (10Feb99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggNamedObject::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
19 14 Dtool_hhEqgt6J 0 7 21 2083 1040 14 Dtool_hhEqgt6J 236 ////////////////////////////////////////////////////////////////////
//     Function: EggNamedObject::Copy assignment operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2083  4 copy 1 2081  
20 14 Dtool_hhEqjJfG 0 4 22 2079 0 14 Dtool_hhEqjJfG 219 ////////////////////////////////////////////////////////////////////
//     Function: EggNamedObject::output
//       Access: Public
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 2081  3 out 1 2085  
21 14 Dtool_hhEqcBDe 0 7 23 2075 0 14 Dtool_hhEqcBDe 0 0 
22 14 Dtool_hhEqxcwm 0 7 15 2076 0 14 Dtool_hhEqxcwm 0 1 4 this 3 2083  
23 14 Dtool_hhEqd530 0 7 16 2083 1040 14 Dtool_hhEqd530 0 1 4 this 3 2076  
24 14 Dtool_hhEqQtFW 0 6 18 2087 0 14 Dtool_hhEqQtFW 0 1 4 this 3 2083  
25 14 Dtool_hhEq__2j 0 7 19 2083 1040 14 Dtool_hhEq__2j 0 1 4 this 3 2087  
26 14 Dtool_hhEqj5Y4 0 7 26 2088 1079 14 Dtool_hhEqj5Y4 229 ////////////////////////////////////////////////////////////////////
//     Function: EggNode::Copy assignment operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2088  4 copy 1 2089  
27 14 Dtool_hhEqcWNY 0 7 27 2091 1079 14 Dtool_hhEqcWNY 215 ////////////////////////////////////////////////////////////////////
//     Function: EggNode::get_parent
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2089  
28 14 Dtool_hhEqyhAk 0 6 28 2092 0 14 Dtool_hhEqyhAk 297 ////////////////////////////////////////////////////////////////////
//     Function: EggNode::get_depth
//       Access: Public
//  Description: Returns the number of nodes above this node in the
//               egg hierarchy.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2089  
29 14 Dtool_hhEq3MCH 0 6 29 2080 0 14 Dtool_hhEq3MCH 366 ////////////////////////////////////////////////////////////////////
//     Function: EggNode::is_under_instance
//       Access: Public
//  Description: Returns true if there is an <Instance> node somewhere
//               in the egg tree at or above this node, false
//               otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2089  
30 14 Dtool_hhEqaghw 0 6 30 2080 0 14 Dtool_hhEqaghw 368 ////////////////////////////////////////////////////////////////////
//     Function: EggNode::is_under_transform
//       Access: Public
//  Description: Returns true if there is a <Transform> entry somewhere
//               in the egg tree at or above this node, false
//               otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2089  
31 14 Dtool_hhEqyHkj 0 6 31 2080 0 14 Dtool_hhEqyHkj 443 ////////////////////////////////////////////////////////////////////
//     Function: EggNode::is_local_coord
//       Access: Public
//  Description: Returns true if this node's vertices are not in the
//               global coordinate space.  This will be the case if
//               there was an <Instance> node under a transform at or
//               above this node.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2089  
32 14 Dtool_hhEqtrwF 0 6 32 2093 0 14 Dtool_hhEqtrwF 1112 ////////////////////////////////////////////////////////////////////
//     Function: EggNode::get_vertex_frame
//       Access: Public
//  Description: Returns the coordinate frame of the vertices
//               referenced by primitives at or under this node.  This
//               is not the same as get_node_frame().
//
//               Generally, vertices in an egg file are stored in the
//               global coordinate space, regardless of the transforms
//               defined at each node.  Thus, get_vertex_frame() will
//               usually return the identity transform (global
//               coordinate space).  However, primitives under an
//               <Instance> entry reference their vertices in the
//               coordinate system under effect at the time of the
//               <Instance>.  Thus, nodes under an <Instance> entry
//               may return this non-identity matrix.
//
//               Specifically, this may return a non-identity matrix
//               only if is_local_coord() is true.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2089  
33 14 Dtool_hhEqsUiB 0 6 33 2093 0 14 Dtool_hhEqsUiB 372 ////////////////////////////////////////////////////////////////////
//     Function: EggNode::get_node_frame
//       Access: Public
//  Description: Returns the coordinate frame of the node itself.
//               This is simply the net product of all transformations
//               up to the root.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2089  
34 14 Dtool_hhEqN4KR 0 6 34 2093 0 14 Dtool_hhEqN4KR 333 ////////////////////////////////////////////////////////////////////
//     Function: EggNode::get_vertex_frame_inv
//       Access: Public
//  Description: Returns the inverse of the matrix returned by
//               get_vertex_frame().  See get_vertex_frame().
//////////////////////////////////////////////////////////////////// 1 4 this 3 2089  
35 14 Dtool_hhEqv1_V 0 6 35 2093 0 14 Dtool_hhEqv1_V 327 ////////////////////////////////////////////////////////////////////
//     Function: EggNode::get_node_frame_inv
//       Access: Public
//  Description: Returns the inverse of the matrix returned by
//               get_node_frame().  See get_node_frame().
//////////////////////////////////////////////////////////////////// 1 4 this 3 2089  
36 14 Dtool_hhEqXcNr 0 6 36 2093 0 14 Dtool_hhEqXcNr 503 ////////////////////////////////////////////////////////////////////
//     Function: EggNode::get_vertex_to_node
//       Access: Public
//  Description: Returns the transformation matrix suitable for
//               converting the vertices as read from the egg file
//               into the coordinate space of the node.  This is the
//               same thing as:
//
//               get_vertex_frame() * get_node_frame_inv()
//
//////////////////////////////////////////////////////////////////// 1 4 this 3 2089  
37 14 Dtool_hhEqNv_a 0 6 37 2093 0 14 Dtool_hhEqNv_a 535 ////////////////////////////////////////////////////////////////////
//     Function: EggNode::get_node_to_vertex
//       Access: Public
//  Description: Returns the transformation matrix suitable for
//               converting vertices in the coordinate space of the
//               node to the appropriate coordinate space for storing
//               in the egg file.  This is the same thing as:
//
//               get_node_frame() * get_vertex_frame_inv()
//
//////////////////////////////////////////////////////////////////// 1 4 this 3 2089  
38 14 Dtool_hhEqv1HP 0 6 38 2093 0 14 Dtool_hhEqv1HP 366 ////////////////////////////////////////////////////////////////////
//     Function: EggNode::get_vertex_frame_ptr
//       Access: Public
//  Description: Returns either a NULL pointer or a unique pointer
//               shared by nodes with the same get_vertex_frame()
//               matrix.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2089  
39 14 Dtool_hhEq_tqL 0 6 39 2093 0 14 Dtool_hhEq_tqL 362 ////////////////////////////////////////////////////////////////////
//     Function: EggNode::get_node_frame_ptr
//       Access: Public
//  Description: Returns either a NULL pointer or a unique pointer
//               shared by nodes with the same get_node_frame()
//               matrix.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2089  
40 14 Dtool_hhEq3nvZ 0 6 40 2093 0 14 Dtool_hhEq3nvZ 374 ////////////////////////////////////////////////////////////////////
//     Function: EggNode::get_vertex_frame_inv_ptr
//       Access: Public
//  Description: Returns either a NULL pointer or a unique pointer
//               shared by nodes with the same get_vertex_frame_inv()
//               matrix.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2089  
41 14 Dtool_hhEqKkmK 0 6 41 2093 0 14 Dtool_hhEqKkmK 370 ////////////////////////////////////////////////////////////////////
//     Function: EggNode::get_node_frame_inv_ptr
//       Access: Public
//  Description: Returns either a NULL pointer or a unique pointer
//               shared by nodes with the same get_node_frame_inv()
//               matrix.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2089  
42 14 Dtool_hhEqB_1f 0 6 42 2093 0 14 Dtool_hhEqB_1f 370 ////////////////////////////////////////////////////////////////////
//     Function: EggNode::get_vertex_to_node_ptr
//       Access: Public
//  Description: Returns either a NULL pointer or a unique pointer
//               shared by nodes with the same get_vertex_to_node()
//               matrix.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2089  
43 14 Dtool_hhEq3soP 0 6 43 2093 0 14 Dtool_hhEq3soP 370 ////////////////////////////////////////////////////////////////////
//     Function: EggNode::get_node_to_vertex_ptr
//       Access: Public
//  Description: Returns either a NULL pointer or a unique pointer
//               shared by nodes with the same get_node_to_vertex()
//               matrix.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2089  
44 14 Dtool_hhEqoQ8D 0 4 44 2079 0 14 Dtool_hhEqoQ8D 308 ////////////////////////////////////////////////////////////////////
//     Function: EggNode::transform
//       Access: Public
//  Description: Applies the indicated transformation to the node and
//               all of its descendants.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2088  3 mat 1 2093  
45 14 Dtool_hhEq2Yja 0 4 45 2079 0 14 Dtool_hhEq2Yja 476 ////////////////////////////////////////////////////////////////////
//     Function: EggNode::transform_vertices_only
//       Access: Public
//  Description: Applies the indicated transformation only to vertices
//               that appear in global space within vertex pools at
//               this node and below.  Joints and other transforms are
//               not affected, nor are local vertices.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2088  3 mat 1 2093  
46 14 Dtool_hhEq7nS3 0 4 46 2079 0 14 Dtool_hhEq7nS3 699 ////////////////////////////////////////////////////////////////////
//     Function: EggNode::flatten_transforms
//       Access: Public
//  Description: Removes any transform and instance records from this
//               node in the scene graph and below.  If an instance
//               node is encountered, removes the instance and applies
//               the transform to its vertices, duplicating vertices
//               if necessary.
//
//               Since this function may result in duplicated
//               vertices, it may be a good idea to call
//               remove_unused_vertices() after calling this.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2088  
47 14 Dtool_hhEqpzMK 0 4 47 2079 0 14 Dtool_hhEqpzMK 398 ////////////////////////////////////////////////////////////////////
//     Function: EggNode::apply_texmats
//       Access: Public
//  Description: Applies the texture matrices to the UV's of the
//               vertices that reference them, and then removes the
//               texture matrices from the textures themselves.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2088  
48 14 Dtool_hhEq_Twb 0 6 48 2092 0 14 Dtool_hhEq_Twb 254 ////////////////////////////////////////////////////////////////////
//     Function: EggNode::rename_node
//       Access: Published
//  Description: Rename by stripping out the prefix
//////////////////////////////////////////////////////////////////// 2 4 this 3 2088  12 strip_prefix 1 2096  
49 14 Dtool_hhEqHHnM 0 6 49 2080 0 14 Dtool_hhEqHHnM 504 ////////////////////////////////////////////////////////////////////
//     Function: EggNode::is_joint
//       Access: Public, Virtual
//  Description: Returns true if this particular node represents a
//               <Joint> entry or not.  This is a handy thing to know
//               since Joints are sorted to the end of their sibling
//               list when writing an egg file.  See
//               EggGroupNode::write().
//////////////////////////////////////////////////////////////////// 1 4 this 3 2089  
50 14 Dtool_hhEq82MW 0 6 50 2080 0 14 Dtool_hhEq82MW 341 ////////////////////////////////////////////////////////////////////
//     Function: EggNode::is_anim_matrix
//       Access: Public, Virtual
//  Description: Returns true if this node represents a table of
//               animation transformation data, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2089  
51 14 Dtool_hhEquPXv 0 6 51 2098 0 14 Dtool_hhEquPXv 549 ////////////////////////////////////////////////////////////////////
//     Function: EggNode::determine_alpha_mode
//       Access: Public, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               or EggPrimitive or some such object at this level or
//               above this node that has an alpha_mode other than
//               AM_unspecified.  Returns a valid EggRenderMode pointer
//               if one is found, or NULL otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2088  
52 14 Dtool_hhEqNEGB 0 6 52 2098 0 14 Dtool_hhEqNEGB 561 ////////////////////////////////////////////////////////////////////
//     Function: EggNode::determine_depth_write_mode
//       Access: Public, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               or EggPrimitive or some such object at this level or
//               above this node that has a depth_write_mode other than
//               DWM_unspecified.  Returns a valid EggRenderMode pointer
//               if one is found, or NULL otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2088  
53 14 Dtool_hhEqUWLJ 0 6 53 2098 0 14 Dtool_hhEqUWLJ 559 ////////////////////////////////////////////////////////////////////
//     Function: EggNode::determine_depth_test_mode
//       Access: Public, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               or EggPrimitive or some such object at this level or
//               above this node that has a depth_test_mode other than
//               DTM_unspecified.  Returns a valid EggRenderMode pointer
//               if one is found, or NULL otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2088  
54 14 Dtool_hhEqf8Wt 0 6 54 2098 0 14 Dtool_hhEqf8Wt 558 ////////////////////////////////////////////////////////////////////
//     Function: EggNode::determine_visibility_mode
//       Access: Public, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               or EggPrimitive or some such object at this level or
//               above this node that has a visibility_mode other than
//               VM_unspecified.  Returns a valid EggRenderMode pointer
//               if one is found, or NULL otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2088  
55 14 Dtool_hhEq61kv 0 6 55 2098 0 14 Dtool_hhEq61kv 535 ////////////////////////////////////////////////////////////////////
//     Function: EggNode::determine_depth_offset
//       Access: Public, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               or EggPrimitive or some such object at this level or
//               above this node that has a depth_offset specified.
//               Returns a valid EggRenderMode pointer if one is found,
//               or NULL otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2088  
56 14 Dtool_hhEqx2w6 0 6 56 2098 0 14 Dtool_hhEqx2w6 531 ////////////////////////////////////////////////////////////////////
//     Function: EggNode::determine_draw_order
//       Access: Public, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               or EggPrimitive or some such object at this level or
//               above this node that has a draw_order specified.
//               Returns a valid EggRenderMode pointer if one is found,
//               or NULL otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2088  
57 14 Dtool_hhEq6z27 0 6 57 2098 0 14 Dtool_hhEq6z27 518 ////////////////////////////////////////////////////////////////////
//     Function: EggNode::determine_bin
//       Access: Public, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               or EggPrimitive or some such object at this level or
//               above this node that has a bin specified.  Returns a
//               valid EggRenderMode pointer if one is found, or NULL
//               otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2088  
58 14 Dtool_hhEq6Ucg 0 6 58 2080 0 14 Dtool_hhEq6Ucg 615 ////////////////////////////////////////////////////////////////////
//     Function: EggNode::determine_indexed
//       Access: Public, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               at this level or above that has the "indexed" scalar
//               set.  Returns the value of the indexed scalar if it
//               is found, or false if it is not.
//
//               In other words, returns true if the "indexed" flag is
//               in effect for the indicated node, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2088  
59 14 Dtool_hhEqEwBk 0 6 59 2080 0 14 Dtool_hhEqEwBk 603 ////////////////////////////////////////////////////////////////////
//     Function: EggNode::determine_decal
//       Access: Public, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               at this level or above that has the "decal" flag
//               set.  Returns the value of the decal flag if it
//               is found, or false if it is not.
//
//               In other words, returns true if the "decal" flag is
//               in effect for the indicated node, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2088  
60 14 Dtool_hhEqIrWM 0 4 60 2079 0 14 Dtool_hhEqIrWM 0 3 4 this 3 2089  3 out 1 2085  12 indent_level 1 2092  
61 14 Dtool_hhEqZKVQ 0 6 61 2080 0 14 Dtool_hhEqZKVQ 575 ////////////////////////////////////////////////////////////////////
//     Function: EggNode::parse_egg
//       Access: Public
//  Description: Parses the egg syntax given in the indicate string as
//               if it had been read from the egg file within this
//               object's definition.  Updates the object accordingly.
//               Returns true if successful, false if there was some
//               parse error or if the object does not support this
//               functionality.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2088  10 egg_syntax 1 2084  
62 14 Dtool_hhEqp6_k 0 4 62 2079 0 14 Dtool_hhEqp6_k 0 1 4 this 3 2089  
63 14 Dtool_hhEqrFAL 0 7 63 2075 0 14 Dtool_hhEqrFAL 0 0 
64 14 Dtool_hhEqZZeu 0 7 66 2099 1090 14 Dtool_hhEqZZeu 233 ////////////////////////////////////////////////////////////////////
//     Function: EggAnimData::Copy assignment operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2099  4 copy 1 2100  
65 14 Dtool_hhEqgqhB 0 4 67 2079 0 14 Dtool_hhEqgqhB 216 ////////////////////////////////////////////////////////////////////
//     Function: EggAnimData::set_fps
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2099  4 type 1 2007  
66 14 Dtool_hhEqKf9p 0 4 68 2079 0 14 Dtool_hhEqKf9p 218 ////////////////////////////////////////////////////////////////////
//     Function: EggAnimData::clear_fps
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2099  
67 14 Dtool_hhEqJAtY 0 6 69 2080 0 14 Dtool_hhEqJAtY 216 ////////////////////////////////////////////////////////////////////
//     Function: EggAnimData::has_fps
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2100  
68 14 Dtool_hhEqRAYV 0 6 70 2007 0 14 Dtool_hhEqRAYV 262 ////////////////////////////////////////////////////////////////////
//     Function: EggAnimData::get_fps
//       Access: Public
//  Description: This is only valid if has_fps() returns true.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2100  
69 14 Dtool_hhEqML2y 0 4 71 2079 0 14 Dtool_hhEqML2y 259 ////////////////////////////////////////////////////////////////////
//     Function: EggAnimData::clear_data
//       Access: Public
//  Description: Removes all data and empties the table.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2099  
70 14 Dtool_hhEqAf6I 0 4 72 2079 0 14 Dtool_hhEqAf6I 253 ////////////////////////////////////////////////////////////////////
//     Function: EggAnimData::add_data
//       Access: Public
//  Description: Adds a single element to the table.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2099  5 value 1 2007  
71 14 Dtool_hhEqDiDs 0 6 73 2092 0 14 Dtool_hhEqDiDs 262 ////////////////////////////////////////////////////////////////////
//     Function: EggAnimData::get_size
//       Access: Public
//  Description: Returns the number of elements in the table.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2100  
72 14 Dtool_hhEqbri2 0 4 74 2079 0 14 Dtool_hhEqbri2 303 ////////////////////////////////////////////////////////////////////
//     Function: EggAnimData::quantize
//       Access: Public
//  Description: Rounds each element of the table to the nearest
//               multiple of quantum.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2099  7 quantum 1 2007  
73 14 Dtool_hhEq25FJ 0 7 75 2075 0 14 Dtool_hhEq25FJ 0 0 
74 14 Dtool_hhEq3GiB 0 7 78 2104 1102 14 Dtool_hhEq3GiB 228 ////////////////////////////////////////////////////////////////////
//     Function: EggAnimPreload::Copy constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2102  
75 14 Dtool_hhEqCh8o 0 7 78 2104 1102 14 Dtool_hhEqCh8o 713 // Filename: eggAnimPreload.I
// Created by:  drose (06Aug08)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggAnimPreload::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 name 1 2084  
76 14 Dtool_hhEq8Z3H 0 7 78 2104 1102 14 Dtool_hhEq8Z3H 713 // Filename: eggAnimPreload.I
// Created by:  drose (06Aug08)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggAnimPreload::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
77 14 Dtool_hhEqwGZ8 0 7 79 2104 1102 14 Dtool_hhEqwGZ8 236 ////////////////////////////////////////////////////////////////////
//     Function: EggAnimPreload::Copy assignment operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2104  4 copy 1 2102  
78 14 Dtool_hhEqJXBe 0 4 80 2079 0 14 Dtool_hhEqJXBe 219 ////////////////////////////////////////////////////////////////////
//     Function: EggAnimPreload::set_fps
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2104  3 fps 1 2007  
79 14 Dtool_hhEqHVnp 0 4 81 2079 0 14 Dtool_hhEqHVnp 221 ////////////////////////////////////////////////////////////////////
//     Function: EggAnimPreload::clear_fps
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2104  
80 14 Dtool_hhEqUOEv 0 6 82 2080 0 14 Dtool_hhEqUOEv 219 ////////////////////////////////////////////////////////////////////
//     Function: EggAnimPreload::has_fps
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2102  
81 14 Dtool_hhEq80Di 0 6 83 2007 0 14 Dtool_hhEq80Di 265 ////////////////////////////////////////////////////////////////////
//     Function: EggAnimPreload::get_fps
//       Access: Public
//  Description: This is only valid if has_fps() returns true.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2102  
82 14 Dtool_hhEqv4k5 0 4 84 2079 0 14 Dtool_hhEqv4k5 226 ////////////////////////////////////////////////////////////////////
//     Function: EggAnimPreload::set_num_frames
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2104  10 num_frames 1 2092  
83 14 Dtool_hhEq_5Yk 0 4 85 2079 0 14 Dtool_hhEq_5Yk 228 ////////////////////////////////////////////////////////////////////
//     Function: EggAnimPreload::clear_num_frames
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2104  
84 14 Dtool_hhEqh_YG 0 6 86 2080 0 14 Dtool_hhEqh_YG 226 ////////////////////////////////////////////////////////////////////
//     Function: EggAnimPreload::has_num_frames
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2102  
85 14 Dtool_hhEqeYX5 0 6 87 2092 0 14 Dtool_hhEqeYX5 279 ////////////////////////////////////////////////////////////////////
//     Function: EggAnimPreload::get_num_frames
//       Access: Public
//  Description: This is only valid if has_num_frames() returns true.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2102  
86 14 Dtool_hhEq3ayU 0 7 88 2075 0 14 Dtool_hhEq3ayU 0 0 
87 14 Dtool_hhEqhfwD 0 7 94 2105 1107 14 Dtool_hhEqhfwD 225 ////////////////////////////////////////////////////////////////////
//     Function: EggAttributes::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
88 14 Dtool_hhEqepOm 0 7 94 2105 1107 14 Dtool_hhEqepOm 230 ////////////////////////////////////////////////////////////////////
//     Function: EggAttributes::Copy constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2106  
89 14 Dtool_hhEqUF8y 0 6 95 2105 0 14 Dtool_hhEqUF8y 238 ////////////////////////////////////////////////////////////////////
//     Function: EggAttributes::Copy assignment operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2105  4 copy 1 2106  
90 14 Dtool_hhEqw9Eb 0 6 97 2080 0 14 Dtool_hhEqw9Eb 713 // Filename: eggAttributes.I
// Created by:  drose (16Jan99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggAttributes::has_normal
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2106  
91 14 Dtool_hhEqVCpK 0 6 98 2108 0 14 Dtool_hhEqVCpK 224 ////////////////////////////////////////////////////////////////////
//     Function: EggAttributes::get_normal
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2106  
92 14 Dtool_hhEqpRK6 0 4 99 2079 0 14 Dtool_hhEqpRK6 224 ////////////////////////////////////////////////////////////////////
//     Function: EggAttributes::set_normal
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2105  6 normal 1 2108  
93 14 Dtool_hhEqS6MT 0 4 100 2079 0 14 Dtool_hhEqS6MT 226 ////////////////////////////////////////////////////////////////////
//     Function: EggAttributes::clear_normal
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2105  
94 14 Dtool_hhEqiri2 0 6 101 2080 0 14 Dtool_hhEqiri2 345 ////////////////////////////////////////////////////////////////////
//     Function: EggAttributes::matches_normal
//       Access: Published
//  Description: Returns true if this normal matches that of the other
//               EggAttributes object, include the morph list.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2106  5 other 1 2106  
95 14 Dtool_hhEqTZ3E 0 4 102 2079 0 14 Dtool_hhEqTZ3E 376 ////////////////////////////////////////////////////////////////////
//     Function: EggAttributes::copy_normal
//       Access: Published
//  Description: Sets this normal to be the same as the other's,
//               include morphs.  If the other has no normal, this
//               clears the normal.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2105  5 other 1 2106  
96 14 Dtool_hhEqKFjr 0 6 103 2080 0 14 Dtool_hhEqKFjr 223 ////////////////////////////////////////////////////////////////////
//     Function: EggAttributes::has_color
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2106  
97 14 Dtool_hhEqXGJb 0 7 104 2112 0 14 Dtool_hhEqXGJb 333 ////////////////////////////////////////////////////////////////////
//     Function: EggAttributes::get_color
//       Access: Published
//  Description: Returns the color set on this particular attribute.
//               If there is no color set, returns white.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2106  
98 14 Dtool_hhEqFNlA 0 4 105 2079 0 14 Dtool_hhEqFNlA 214 ////////////////////////////////////////////////////////////////////
//     Function: EggAttributes::
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2105  5 Color 1 2113  
99 14 Dtool_hhEqfqMj 0 4 106 2079 0 14 Dtool_hhEqfqMj 214 ////////////////////////////////////////////////////////////////////
//     Function: EggAttributes::
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2105  
100 14 Dtool_hhEqDKr_ 0 6 107 2080 0 14 Dtool_hhEqDKr_ 343 ////////////////////////////////////////////////////////////////////
//     Function: EggAttributes::matches_color
//       Access: Published
//  Description: Returns true if this color matches that of the other
//               EggAttributes object, include the morph list.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2106  5 other 1 2106  
101 14 Dtool_hhEqPa3O 0 4 108 2079 0 14 Dtool_hhEqPa3O 372 ////////////////////////////////////////////////////////////////////
//     Function: EggAttributes::copy_color
//       Access: Published
//  Description: Sets this color to be the same as the other's,
//               include morphs.  If the other has no color, this
//               clears the color.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2105  5 other 1 2106  
102 14 Dtool_hhEqgbBE 0 4 109 2079 0 14 Dtool_hhEqgbBE 304 ////////////////////////////////////////////////////////////////////
//     Function: EggAttributes::write
//       Access: Published
//  Description: Writes the attributes to the indicated output stream in
//               Egg format.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2106  3 out 1 2085  12 indent_level 1 2092  
103 14 Dtool_hhEqOpUR 0 6 110 2080 0 14 Dtool_hhEqOpUR 399 ////////////////////////////////////////////////////////////////////
//     Function: EggAttributes::sorts_less_than
//       Access: Published
//  Description: An ordering operator to compare two vertices for
//               sorting order.  This imposes an arbitrary ordering
//               useful to identify unique vertices.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2106  5 other 1 2106  
104 14 Dtool_hhEqsaDm 0 6 111 2092 0 14 Dtool_hhEqsaDm 394 ////////////////////////////////////////////////////////////////////
//     Function: EggAttributes::compare_to
//       Access: Published
//  Description: An ordering operator to compare two vertices for
//               sorting order.  This imposes an arbitrary ordering
//               useful to identify unique vertices.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2106  5 other 1 2106  
105 14 Dtool_hhEqZnUo 0 4 112 2079 0 14 Dtool_hhEqZnUo 312 ////////////////////////////////////////////////////////////////////
//     Function: EggAttributes::transform
//       Access: Published, Virtual
//  Description: Applies the indicated transformation matrix to the
//               attributes.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2105  3 mat 1 2093  
106 14 Dtool_hhEqX9Yr 0 7 119 2075 0 14 Dtool_hhEqX9Yr 0 0 
107 14 Dtool_hhEqwJ97 0 6 92 2115 0 14 Dtool_hhEqwJ97 0 1 4 this 3 2105  
108 14 Dtool_hhEq0vEk 0 6 93 2105 0 14 Dtool_hhEq0vEk 0 1 4 this 3 2115  
109 14 Dtool_hhEqP4Um 0 6 114 2116 0 14 Dtool_hhEqP4Um 0 1 4 this 3 2106  
110 14 Dtool_hhEq7lZz 0 6 117 2118 0 14 Dtool_hhEq7lZz 0 1 4 this 3 2106  
111 14 Dtool_hhEqfgDe 0 7 121 2122 1040 14 Dtool_hhEqfgDe 229 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::Copy Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2120  
112 14 Dtool_hhEqrGLE 0 7 121 2122 1040 14 Dtool_hhEqrGLE 224 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 name 1 2084  2 uv 1 2123  
113 14 Dtool_hhEqdlNE 0 7 121 2122 1040 14 Dtool_hhEqdlNE 224 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 name 1 2084  3 uvw 1 2126  
114 14 Dtool_hhEqDsRd 0 7 122 2122 1040 14 Dtool_hhEqDsRd 237 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::Copy Assignment Operator
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 2122  4 copy 1 2120  
115 14 Dtool_hhEqwe3A 0 6 123 2084 0 14 Dtool_hhEqwe3A 998 // Filename: eggVertexUV.I
// Created by:  drose (20Jul04)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::filter_name
//       Access: Published, Static
//  Description: Returns the actual name that should be set for a
//               given name string.  Usually this is the same string
//               that is input, but for historical reasons the texture
//               coordinate name "default" is mapped to the empty
//               string.
//////////////////////////////////////////////////////////////////// 1 4 name 1 2084  
116 14 Dtool_hhEq_tuC 0 4 124 2079 0 14 Dtool_hhEq_tuC 220 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::set_name
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2122  4 name 1 2084  
117 14 Dtool_hhEqkls8 0 6 125 2092 0 14 Dtool_hhEqkls8 401 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::get_num_dimensions
//       Access: Published
//  Description: Returns the number of components of the texture
//               coordinate set.  This is either 2 (the normal case)
//               or 3 (for a 3-d texture coordinate).
//////////////////////////////////////////////////////////////////// 1 4 this 3 2120  
118 14 Dtool_hhEqI9Ho 0 6 126 2080 0 14 Dtool_hhEqI9Ho 369 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::has_w
//       Access: Published
//  Description: Returns true if the texture coordinate has a third, w
//               component, false if it is just a normal 2-d texture
//               coordinate.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2120  
119 14 Dtool_hhEqWnKk 0 7 127 2128 0 14 Dtool_hhEqWnKk 302 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::get_uv
//       Access: Published
//  Description: Returns the texture coordinate pair, if
//               get_num_dimensions() is 2.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2120  
120 14 Dtool_hhEqlXG_ 0 6 128 2126 0 14 Dtool_hhEqlXG_ 435 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::get_uvw
//       Access: Published
//  Description: Returns the texture coordinate triple, if
//               get_num_dimensions() is 3.  This is also legal to
//               call if get_num_dimensions() is 2 (but the last
//               dimension will be zero).
//////////////////////////////////////////////////////////////////// 1 4 this 3 2120  
121 14 Dtool_hhEqC1GK 0 4 129 2079 0 14 Dtool_hhEqC1GK 372 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::set_uv
//       Access: Published
//  Description: Sets the texture coordinate pair.  This makes the
//               texture coordinate a 2-d texture coordinate, which is
//               the usual case.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2122  8 texCoord 1 2123  
122 14 Dtool_hhEqjWDX 0 4 130 2079 0 14 Dtool_hhEqjWDX 333 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::set_uvw
//       Access: Published
//  Description: Sets the texture coordinate triple.  This makes the
//               texture coordinate a 3-d texture coordinate.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2122  8 texCoord 1 2126  
123 14 Dtool_hhEqHSNX 0 6 131 2080 0 14 Dtool_hhEqHSNX 223 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::has_tangent
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2120  
124 14 Dtool_hhEqvT4T 0 6 132 2108 0 14 Dtool_hhEqvT4T 223 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::get_tangent
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2120  
125 14 Dtool_hhEqt4TN 0 4 133 2079 0 14 Dtool_hhEqt4TN 223 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::set_tangent
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2122  7 tangent 1 2108  
126 14 Dtool_hhEqimjh 0 4 134 2079 0 14 Dtool_hhEqimjh 225 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::clear_tangent
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2122  
127 14 Dtool_hhEqSW5F 0 6 135 2080 0 14 Dtool_hhEqSW5F 224 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::has_binormal
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2120  
128 14 Dtool_hhEqsWkC 0 6 136 2108 0 14 Dtool_hhEqsWkC 224 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::get_binormal
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2120  
129 14 Dtool_hhEqMNOa 0 4 137 2079 0 14 Dtool_hhEqMNOa 224 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::set_binormal
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2122  8 binormal 1 2108  
130 14 Dtool_hhEqwfvM 0 4 138 2079 0 14 Dtool_hhEqwfvM 226 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::clear_binormal
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2122  
131 14 Dtool_hhEqL2C8 0 4 139 2079 0 14 Dtool_hhEqL2C8 400 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::transform
//       Access: Published, Virtual
//  Description: Applies the indicated transformation matrix to the
//               UV's tangent and/or binormal.  This does nothing if
//               there is no tangent or binormal.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2122  3 mat 1 2093  
132 14 Dtool_hhEqaahg 0 4 140 2079 0 14 Dtool_hhEqaahg 215 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::write
//       Access: Public
//  Description: 
//////////////////////////////////////////////////////////////////// 3 4 this 3 2120  3 out 1 2085  12 indent_level 1 2092  
133 14 Dtool_hhEqpA7a 0 6 141 2092 0 14 Dtool_hhEqpA7a 389 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::compare_to
//       Access: Public
//  Description: An ordering operator to compare two vertices for
//               sorting order.  This imposes an arbitrary ordering
//               useful to identify unique vertices.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2120  5 other 1 2120  
134 14 Dtool_hhEqBqeg 0 7 144 2075 0 14 Dtool_hhEqBqeg 0 0 
135 14 Dtool_hhEqnXa0 0 6 142 2116 0 14 Dtool_hhEqnXa0 0 1 4 this 3 2120  
136 14 Dtool_hhEqzrvg 0 7 146 2131 1040 14 Dtool_hhEqzrvg 230 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexAux::Copy Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2129  
137 14 Dtool_hhEqMAWc 0 7 146 2131 1040 14 Dtool_hhEqMAWc 225 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexAux::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 name 1 2084  3 aux 1 2132  
138 14 Dtool_hhEqDXPj 0 7 147 2131 1040 14 Dtool_hhEqDXPj 238 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexAux::Copy Assignment Operator
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 2131  4 copy 1 2129  
139 14 Dtool_hhEqWEWe 0 4 148 2079 0 14 Dtool_hhEqWEWe 709 // Filename: eggVertexAux.I
// Created by:  jenes (15Nov11)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggVertexAux::set_name
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2131  4 name 1 2084  
140 14 Dtool_hhEqV_Md 0 6 149 2132 0 14 Dtool_hhEqV_Md 258 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexAux::get_aux
//       Access: Published
//  Description: Returns the auxiliary data quadruple.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2129  
141 14 Dtool_hhEqLE5G 0 4 150 2079 0 14 Dtool_hhEqLE5G 255 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexAux::set_aux
//       Access: Published
//  Description: Sets the auxiliary data quadruple.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2131  3 aux 1 2132  
142 14 Dtool_hhEqLrOY 0 4 151 2079 0 14 Dtool_hhEqLrOY 216 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexAux::write
//       Access: Public
//  Description: 
//////////////////////////////////////////////////////////////////// 3 4 this 3 2129  3 out 1 2085  12 indent_level 1 2092  
143 14 Dtool_hhEqvcLJ 0 6 152 2092 0 14 Dtool_hhEqvcLJ 390 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexAux::compare_to
//       Access: Public
//  Description: An ordering operator to compare two vertices for
//               sorting order.  This imposes an arbitrary ordering
//               useful to identify unique vertices.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2129  5 other 1 2129  
144 14 Dtool_hhEqdWfV 0 7 153 2075 0 14 Dtool_hhEqdWfV 0 0 
145 14 Dtool_hhEqtjbY 0 7 159 2135 1164 14 Dtool_hhEqtjbY 221 ////////////////////////////////////////////////////////////////////
//     Function: EggVertex::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
146 14 Dtool_hhEqbgja 0 7 159 2135 1164 14 Dtool_hhEqbgja 339 ////////////////////////////////////////////////////////////////////
//     Function: EggVertex::Copy constructor
//       Access: Published
//  Description: Copies all properties of the vertex except its vertex
//               pool, index number, and group membership.
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2136  
147 14 Dtool_hhEqmaUY 0 7 160 2135 1164 14 Dtool_hhEqmaUY 347 ////////////////////////////////////////////////////////////////////
//     Function: EggVertex::Copy assignment operator
//       Access: Published
//  Description: Copies all properties of the vertex except its vertex
//               pool, index number, and group membership.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2135  4 copy 1 2136  
148 14 Dtool_hhEqz9Ky 0 7 162 2138 1079 14 Dtool_hhEqz9Ky 847 // Filename: eggVertex.I
// Created by:  drose (16Jan99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::get_pool
//       Access: Published
//  Description: Returns the vertex pool this vertex belongs in.  This
//               may be NULL if the vertex has not been added to a
//               pool.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2136  
149 14 Dtool_hhEqp_H_ 0 6 163 2080 0 14 Dtool_hhEqp_H_ 710 ////////////////////////////////////////////////////////////////////
//     Function: EggVertex::is_forward_reference
//       Access: Published
//  Description: Returns true if the vertex is a forward reference to
//               some vertex that hasn't been defined yet.  In this
//               case, the vertex may not have any properties filled
//               in yet.
//
//               This can only happen if you implicitly create a
//               vertex via EggVertexPool::get_forward_vertex().
//               Presumably, when the vertex pool is later filled in,
//               this vertex will be replaced with real data.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2136  
150 14 Dtool_hhEq2yZs 0 4 164 2079 0 14 Dtool_hhEq2yZs 318 ////////////////////////////////////////////////////////////////////
//     Function: EggVertex::set_pos
//       Access: Published
//  Description: Sets the vertex position.  This variant sets the
//               vertex to a two-dimensional value.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2135  3 pos 1 2123  
151 14 Dtool_hhEqW1At 0 4 164 2079 0 14 Dtool_hhEqW1At 320 ////////////////////////////////////////////////////////////////////
//     Function: EggVertex::set_pos
//       Access: Published
//  Description: Sets the vertex position.  This variant sets the
//               vertex to a three-dimensional value.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2135  3 pos 1 2126  
152 14 Dtool_hhEq25nt 0 4 164 2079 0 14 Dtool_hhEq25nt 319 ////////////////////////////////////////////////////////////////////
//     Function: EggVertex::set_pos
//       Access: Published
//  Description: Sets the vertex position.  This variant sets the
//               vertex to a four-dimensional value.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2135  3 pos 1 2139  
153 14 Dtool_hhEqZ6NP 0 4 164 2079 0 14 Dtool_hhEqZ6NP 318 ////////////////////////////////////////////////////////////////////
//     Function: EggVertex::set_pos
//       Access: Published
//  Description: Sets the vertex position.  This variant sets the
//               vertex to a one-dimensional value.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2135  3 pos 1 2007  
154 14 Dtool_hhEqPMSb 0 4 165 2079 0 14 Dtool_hhEqPMSb 600 ////////////////////////////////////////////////////////////////////
//     Function: EggVertex::set_pos4
//       Access: Published
//  Description: This special flavor of set_pos() sets the vertex as a
//               four-component value, but does not change the set
//               number of dimensions.  It's handy for retrieving the
//               vertex position via get_pos4, manipulating it, then
//               storing it back again, without worrying about the
//               number of dimensions it actually had.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2135  3 pos 1 2139  
155 14 Dtool_hhEqO31_ 0 6 166 2092 0 14 Dtool_hhEqO31_ 371 // get_pos[123] return the pos as the corresponding type.  It is an
// error to call any of these without first verifying that
// get_num_dimensions() matches the desired type.  However,
// get_pos4() may always be called; it returns the pos as a
// four-component point in homogeneous space (with a 1.0 in the last
// position if the pos has fewer than four components). 1 4 this 3 2136  
156 14 Dtool_hhEqJIBG 0 6 167 2007 0 14 Dtool_hhEqJIBG 371 // get_pos[123] return the pos as the corresponding type.  It is an
// error to call any of these without first verifying that
// get_num_dimensions() matches the desired type.  However,
// get_pos4() may always be called; it returns the pos as a
// four-component point in homogeneous space (with a 1.0 in the last
// position if the pos has fewer than four components). 1 4 this 3 2136  
157 14 Dtool_hhEqbHBN 0 7 168 2128 0 14 Dtool_hhEqbHBN 330 ////////////////////////////////////////////////////////////////////
//     Function: EggVertex::get_pos2
//       Access: Published
//  Description: Only valid if get_num_dimensions() returns 2.
//               Returns the position as a two-dimensional value.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2136  
158 14 Dtool_hhEqtGBU 0 7 169 2142 0 14 Dtool_hhEqtGBU 332 ////////////////////////////////////////////////////////////////////
//     Function: EggVertex::get_pos3
//       Access: Published
//  Description: Valid if get_num_dimensions() returns 3 or 4.
//               Returns the position as a three-dimensional value.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2136  
159 14 Dtool_hhEq_FBb 0 7 170 2143 0 14 Dtool_hhEq_FBb 591 ////////////////////////////////////////////////////////////////////
//     Function: EggVertex::get_pos4
//       Access: Published
//  Description: This is always valid, regardless of the value of
//               get_num_dimensions.  It returns the position as a
//               four-dimensional value.  If the pos has fewer than
//               four dimensions, this value represents the pos
//               extended into four-dimensional homogenous space,
//               e.g. by adding 1 as the fourth component.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2136  
160 14 Dtool_hhEqmIlN 0 6 171 2080 0 14 Dtool_hhEqmIlN 551 ////////////////////////////////////////////////////////////////////
//     Function: EggVertex::has_uv
//       Access: Published
//  Description: Returns true if the vertex has an unnamed UV
//               coordinate pair, false otherwise.
//
//               This is the more restrictive interface, and is
//               generally useful only in the absence of
//               multitexturing; see has_uv(name) for the interface
//               that supports multitexturing.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2136  
161 14 Dtool_hhEqKQRh 0 6 171 2080 0 14 Dtool_hhEqKQRh 369 ////////////////////////////////////////////////////////////////////
//     Function: EggVertex::has_uv
//       Access: Published
//  Description: Returns true if the vertex has the named UV
//               coordinate pair, and the named UV coordinate pair is
//               2-d, false otherwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2136  4 name 1 2084  
162 14 Dtool_hhEqaaFH 0 7 172 2128 0 14 Dtool_hhEqaaFH 604 ////////////////////////////////////////////////////////////////////
//     Function: EggVertex::get_uv
//       Access: Published
//  Description: Returns the unnamed UV coordinate pair on the
//               vertex.  It is an error to call this if has_uv() has
//               returned false.
//
//               This is the more restrictive interface, and is
//               generally useful only in the absence of
//               multitexturing; see get_uv(name) for the interface
//               that supports multitexturing.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2136  
163 14 Dtool_hhEq_Bxa 0 7 172 2128 0 14 Dtool_hhEq_Bxa 362 ////////////////////////////////////////////////////////////////////
//     Function: EggVertex::get_uv
//       Access: Published
//  Description: Returns the named UV coordinate pair on the vertex.
//               It is an error to call this if has_uv(name)
//               returned false.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2136  4 name 1 2084  
164 14 Dtool_hhEqAFVN 0 4 173 2079 0 14 Dtool_hhEqAFVN 556 ////////////////////////////////////////////////////////////////////
//     Function: EggVertex::set_uv
//       Access: Published
//  Description: Replaces the unnamed UV coordinate pair on the vertex
//               with the indicated value.
//
//               This is the more restrictive interface, and is
//               generally useful only in the absence of
//               multitexturing; see set_uv(name, uv) for the
//               interface that supports multitexturing.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2135  8 texCoord 1 2123  
165 14 Dtool_hhEqs1Zd 0 4 173 2079 0 14 Dtool_hhEqs1Zd 407 ////////////////////////////////////////////////////////////////////
//     Function: EggVertex::set_uv
//       Access: Published
//  Description: Sets the indicated UV coordinate pair on the vertex.
//               This replaces any UV coordinate pair with the same
//               name already on the vertex, but preserves UV morphs.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2135  4 name 1 2084  8 texCoord 1 2123  
166 14 Dtool_hhEqqW8Y 0 4 174 2079 0 14 Dtool_hhEqqW8Y 267 ////////////////////////////////////////////////////////////////////
//     Function: EggVertex::clear_uv
//       Access: Published
//  Description: Removes all UV coordinate pairs from the vertex.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2135  
167 14 Dtool_hhEqBuq9 0 4 174 2079 0 14 Dtool_hhEqBuq9 314 ////////////////////////////////////////////////////////////////////
//     Function: EggVertex::clear_uv
//       Access: Published
//  Description: Removes the named UV coordinate pair from the vertex,
//               along with any UV morphs.
/////////////////////////////////////////////////////////////////// 2 4 this 3 2135  4 name 1 2084  
168 14 Dtool_hhEqSUTE 0 6 175 2080 0 14 Dtool_hhEqSUTE 374 ////////////////////////////////////////////////////////////////////
//     Function: EggVertex::has_uvw
//       Access: Published
//  Description: Returns true if the vertex has the named UV
//               coordinate triple, and the named UV coordinate triple is
//               3-d, false otherwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2136  4 name 1 2084  
169 14 Dtool_hhEqvqz9 0 6 176 2126 0 14 Dtool_hhEqvqz9 366 ////////////////////////////////////////////////////////////////////
//     Function: EggVertex::get_uvw
//       Access: Published
//  Description: Returns the named UV coordinate triple on the vertex.
//               It is an error to call this if has_uvw(name)
//               returned false.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2136  4 name 1 2084  
170 14 Dtool_hhEqUOlT 0 4 177 2079 0 14 Dtool_hhEqUOlT 437 ////////////////////////////////////////////////////////////////////
//     Function: EggVertex::set_uvw
//       Access: Published
//  Description: Sets the indicated UV coordinate triple on the vertex.
//               This replaces any UV coordinate pair or triple with
//               the same name already on the vertex, but preserves UV
//               morphs.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2135  4 name 1 2084  8 texCoord 1 2126  
171 14 Dtool_hhEq_lz7 0 7 178 2120 0 14 Dtool_hhEq_lz7 584 ////////////////////////////////////////////////////////////////////
//     Function: EggVertex::get_uv_obj
//       Access: Published
//  Description: Returns the named EggVertexUV object, which defines
//               both the UV coordinate pair for this name and the UV
//               morphs.  This object might be shared between multiple
//               vertices.  You should not attempt to modify this
//               object; instead, call modify_uv_object to return a
//               modifiable pointer.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2136  4 name 1 2084  
172 14 Dtool_hhEqfsq4 0 7 179 2122 1040 14 Dtool_hhEqfsq4 462 ////////////////////////////////////////////////////////////////////
//     Function: EggVertex::modify_uv_obj
//       Access: Published
//  Description: Returns a modifiable pointer to the named EggVertexUV
//               object, which defines both the UV coordinate pair for
//               this name and the UV morphs.  Returns NULL if there
//               is no such named UV object.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2135  4 name 1 2084  
173 14 Dtool_hhEq37Oi 0 4 180 2079 0 14 Dtool_hhEq37Oi 400 ////////////////////////////////////////////////////////////////////
//     Function: EggVertex::set_uv_obj
//       Access: Published
//  Description: Sets the indicated EggVertexUV on the vertex.
//               This replaces any UV coordinate pair with the same
//               name already on the vertex, including UV morphs.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2135  9 vertex_uv 1 2122  
174 14 Dtool_hhEqoK0f 0 6 181 2080 0 14 Dtool_hhEqoK0f 302 ////////////////////////////////////////////////////////////////////
//     Function: EggVertex::has_aux
//       Access: Published
//  Description: Returns true if the vertex has any auxiliary
//               data, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2136  
175 14 Dtool_hhEqwKlY 0 6 181 2080 0 14 Dtool_hhEqwKlY 301 ////////////////////////////////////////////////////////////////////
//     Function: EggVertex::has_aux
//       Access: Published
//  Description: Returns true if the vertex has the named
//               auxiliary data quadruple.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2136  4 name 1 2084  
176 14 Dtool_hhEqbuVu 0 4 182 2079 0 14 Dtool_hhEqbuVu 263 ////////////////////////////////////////////////////////////////////
//     Function: EggVertex::clear_aux
//       Access: Published
//  Description: Removes all auxiliary data from the vertex.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2135  
177 14 Dtool_hhEq9_jG 0 4 182 2079 0 14 Dtool_hhEq9_jG 268 ////////////////////////////////////////////////////////////////////
//     Function: EggVertex::clear_aux
//       Access: Published
//  Description: Removes the named auxiliary data from the vertex.
/////////////////////////////////////////////////////////////////// 2 4 this 3 2135  4 name 1 2084  
178 14 Dtool_hhEqMYFS 0 6 183 2132 0 14 Dtool_hhEqMYFS 370 ////////////////////////////////////////////////////////////////////
//     Function: EggVertex::get_aux
//       Access: Published
//  Description: Returns the named auxiliary data quadruple on the
//               vertex. It is an error to call this if has_aux(name)
//               returned false.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2136  4 name 1 2084  
179 14 Dtool_hhEqssat 0 4 184 2079 0 14 Dtool_hhEqssat 385 ////////////////////////////////////////////////////////////////////
//     Function: EggVertex::set_aux
//       Access: Published
//  Description: Sets the indicated auxiliary data quadruple on the
//               vertex. This replaces any auxiliary data with the
//               same name already on the vertex.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2135  4 name 1 2084  3 aux 1 2132  
180 14 Dtool_hhEqxuPy 0 7 185 2129 0 14 Dtool_hhEqxuPy 542 ////////////////////////////////////////////////////////////////////
//     Function: EggVertex::get_aux_obj
//       Access: Published
//  Description: Returns the named EggVertexAux object, which defines
//               the auxiliary data for this name. This object might
//               be shared between multiple vertices.  You should not
//               attempt to modify this object; instead, call
//               modify_aux_object to return a modifiable pointer.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2136  4 name 1 2084  
181 14 Dtool_hhEq9jDu 0 7 186 2131 1040 14 Dtool_hhEq9jDu 437 ////////////////////////////////////////////////////////////////////
//     Function: EggVertex::modify_aux_obj
//       Access: Published
//  Description: Returns a modifiable pointer to the named EggVertexAux
//               object, which defines the auxiliary data for
//               this name.  Returns NULL if there is no such
//               named UV object.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2135  4 name 1 2084  
182 14 Dtool_hhEqlZBj 0 4 187 2079 0 14 Dtool_hhEqlZBj 377 ////////////////////////////////////////////////////////////////////
//     Function: EggVertex::set_aux_obj
//       Access: Published
//  Description: Sets the indicated EggVertexAux on the vertex.
//               This replaces any auxiliary data with the same
//               name already on the vertex.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2135  10 vertex_aux 1 2131  
183 14 Dtool_hhEqPXw_ 0 6 188 2092 0 14 Dtool_hhEqPXw_ 292 ////////////////////////////////////////////////////////////////////
//     Function: EggVertex::get_index
//       Access: Published
//  Description: Returns the index number of the vertex within its
//               pool.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2136  
184 14 Dtool_hhEqRa07 0 4 189 2079 0 14 Dtool_hhEqRa07 822 ////////////////////////////////////////////////////////////////////
//     Function: EggVertex::set_external_index
//       Access: Published
//  Description: Sets a special index number that is associated with
//               the EggVertex (but is not written to the egg file).
//               This number is not interpreted by any egg code; it is
//               simply maintained along with the vertex.  It *is*
//               used to differentiate otherwise identical vertices in
//               EggVertexPool::create_unique_vertex(), however.
//
//               The intention of this number is as an aid for file
//               converters, to associate an EggVertex back to the
//               index number of the original source vertex.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2135  14 external_index 1 2092  
185 14 Dtool_hhEqlfWC 0 6 190 2092 0 14 Dtool_hhEqlfWC 320 ////////////////////////////////////////////////////////////////////
//     Function: EggVertex::get_external_index
//       Access: Published
//  Description: Returns the number set by set_external_index().  See
//               set_external_index().
//////////////////////////////////////////////////////////////////// 1 4 this 3 2136  
186 14 Dtool_hhEqPNaK 0 4 191 2079 0 14 Dtool_hhEqPNaK 506 ////////////////////////////////////////////////////////////////////
//     Function: EggVertex::set_external_index2
//       Access: Published
//  Description: Similar to set_external_index(), but this is a
//               different number which may be used for a different
//               purpose by the calling code.  The egg library does
//               not assign any meaning to this number or use it in
//               any way.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2135  15 external_index2 1 2092  
187 14 Dtool_hhEq_8gn 0 6 192 2092 0 14 Dtool_hhEq_8gn 323 ////////////////////////////////////////////////////////////////////
//     Function: EggVertex::get_external_index2
//       Access: Published
//  Description: Returns the number set by set_external_index2().  See
//               set_external_index2().
//////////////////////////////////////////////////////////////////// 1 4 this 3 2136  
188 14 Dtool_hhEq3GP5 0 4 193 2079 0 14 Dtool_hhEq3GP5 296 ////////////////////////////////////////////////////////////////////
//     Function: EggVertex::write
//       Access: Published
//  Description: Writes the vertex to the indicated output stream in
//               Egg format.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2136  3 out 1 2085  12 indent_level 1 2092  
189 14 Dtool_hhEqBgJ_ 0 6 194 2080 0 14 Dtool_hhEqBgJ_ 395 ////////////////////////////////////////////////////////////////////
//     Function: EggVertex::sorts_less_than
//       Access: Published
//  Description: An ordering operator to compare two vertices for
//               sorting order.  This imposes an arbitrary ordering
//               useful to identify unique vertices.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2136  5 other 1 2136  
190 14 Dtool_hhEqZ_zx 0 6 195 2092 0 14 Dtool_hhEqZ_zx 1165 ////////////////////////////////////////////////////////////////////
//     Function: EggVertex::compare_to
//       Access: Published
//  Description: An ordering operator to compare two vertices for
//               sorting order.  This imposes an arbitrary ordering
//               useful to identify unique vertices.
//
//               Group membership is not considered in this
//               comparison.  This is somewhat problematic, but cannot
//               easily be helped, because considering group
//               membership would make it difficult to add and remove
//               groups from vertices.  It also makes it impossible to
//               meaningfully compare with a concrete EggVertex object
//               (which cannot have group memberships).
//
//               However, this is not altogether bad, because two
//               vertices that are identical in all other properties
//               should generally also be identical in group
//               memberships, else the vertices will tend to fly apart
//               when the joints animate.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2136  5 other 1 2136  
191 14 Dtool_hhEqQ2Pa 0 6 196 2092 0 14 Dtool_hhEqQ2Pa 384 ////////////////////////////////////////////////////////////////////
//     Function: EggVertex::get_num_local_coord
//       Access: Published
//  Description: Returns the number of primitives that own this vertex
//               whose vertices are interpreted to be in a local
//               coordinate system.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2136  
192 14 Dtool_hhEqTVqu 0 6 197 2092 0 14 Dtool_hhEqTVqu 382 ////////////////////////////////////////////////////////////////////
//     Function: EggVertex::get_num_global_coord
//       Access: Published
//  Description: Returns the number of primitives that own this vertex
//               whose vertices are interpreted in the global
//               coordinate system.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2136  
193 14 Dtool_hhEqHCW9 0 4 198 2079 0 14 Dtool_hhEqHCW9 304 ////////////////////////////////////////////////////////////////////
//     Function: EggVertex::transform
//       Access: Published, Virtual
//  Description: Applies the indicated transformation matrix to the
//               vertex.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2135  3 mat 1 2093  
194 14 Dtool_hhEqZsOw 0 6 199 2080 0 14 Dtool_hhEqZsOw 312 ////////////////////////////////////////////////////////////////////
//     Function: EggVertex::has_gref
//       Access: Published
//  Description: Returns true if the indicated group references this
//               vertex, false otherwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2136  5 group 1 2144  
195 14 Dtool_hhEq2kRg 0 4 200 2079 0 14 Dtool_hhEq2kRg 725 ////////////////////////////////////////////////////////////////////
//     Function: EggVertex::copy_grefs_from
//       Access: Published
//  Description: Copies all the group references from the other vertex
//               onto this one.  This assigns the current vertex to
//               exactly the same groups, with exactly the same
//               memberships, as the given one.
//
//               Warning: only an EggVertex allocated from the free
//               store may have groups assigned to it.  Do not attempt
//               to call this on a temporary concrete EggVertex
//               object; a core dump will certainly result.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2135  5 other 1 2136  
196 14 Dtool_hhEq1JbX 0 4 201 2079 0 14 Dtool_hhEq1JbX 325 ////////////////////////////////////////////////////////////////////
//     Function: EggVertex::clear_grefs
//       Access: Published
//  Description: Removes all group references from the vertex, so that
//               it is not assigned to any group.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2135  
197 14 Dtool_hhEqk0J_ 0 6 202 2092 0 14 Dtool_hhEqk0J_ 338 ////////////////////////////////////////////////////////////////////
//     Function: EggVertex::has_pref
//       Access: Published
//  Description: Returns the number of times the vertex appears in the
//               indicated primitive, or 0 if it does not appear.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2136  4 prim 1 2146  
198 14 Dtool_hhEqgTDr 0 4 203 2079 0 14 Dtool_hhEqgTDr 0 1 4 this 3 2136  
199 14 Dtool_hhEqhP_W 0 4 204 2079 0 14 Dtool_hhEqhP_W 0 1 4 this 3 2136  
200 14 Dtool_hhEqOrKC 0 4 205 2079 0 14 Dtool_hhEqOrKC 216 ////////////////////////////////////////////////////////////////////
//     Function: EggVertex::output
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2136  3 out 1 2085  
201 14 Dtool_hhEqGT9t 0 7 208 2075 0 14 Dtool_hhEqGT9t 0 0 
202 14 Dtool_hhEqKcUy 0 7 155 2076 0 14 Dtool_hhEqKcUy 0 1 4 this 3 2135  
203 14 Dtool_hhEqlnwr 0 7 156 2135 1164 14 Dtool_hhEqlnwr 0 1 4 this 3 2076  
204 14 Dtool_hhEqodNS 0 6 157 2105 0 14 Dtool_hhEqodNS 0 1 4 this 3 2135  
205 14 Dtool_hhEqTrUk 0 7 158 2135 1164 14 Dtool_hhEqTrUk 0 1 4 this 3 2105  
206 14 Dtool_hhEqTzXy 0 6 206 2116 0 14 Dtool_hhEqTzXy 0 1 4 this 3 2136  
207 14 Dtool_hhEqBdMA 0 7 210 2138 1079 14 Dtool_hhEqBdMA 459 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::Copy Constructor
//       Access: Public
//  Description: Copying a vertex pool is of questionable value, since
//               it will copy all of the vertices and assign new
//               pointers to them all. There will be no polygons
//               referring to the new vertices.
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2148  
208 14 Dtool_hhEqY_4J 0 7 210 2138 1079 14 Dtool_hhEqY_4J 222 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 name 1 2084  
209 14 Dtool_hhEqrRQ_ 0 6 211 2080 0 14 Dtool_hhEqrRQ_ 878 // Filename: eggVertexPool.I
// Created by:  drose (16Jan99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::has_vertex
//       Access: Public
//  Description: Returns true if the indicated vertex has been defined
//               in the vertex pool, false otherwise.  This does not
//               include forward references.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2148  5 index 1 2092  
210 14 Dtool_hhEqKc1J 0 6 212 2080 0 14 Dtool_hhEqKc1J 386 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::has_forward_vertices
//       Access: Published
//  Description: Returns true if any vertices in the pool are
//               undefined forward-reference vertices, false if all
//               vertices are defined.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2148  
211 14 Dtool_hhEqsCOx 0 6 213 2080 0 14 Dtool_hhEqsCOx 383 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::has_defined_vertices
//       Access: Published
//  Description: Returns true if any vertices in the pool are
//               fully defined vertices, false if all vertices are
//               forward references.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2148  
212 14 Dtool_hhEq_O2t 0 7 214 2135 1164 14 Dtool_hhEq_O2t 366 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::get_vertex
//       Access: Public
//  Description: Returns the vertex in the pool with the indicated
//               index number, or NULL if no vertices have that index
//               number.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2148  5 index 1 2092  
213 14 Dtool_hhEqGe06 0 7 215 2135 1164 14 Dtool_hhEqGe06 373 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::indexing operator
//       Access: Public
//  Description: Returns the vertex in the pool with the indicated
//               index number, or NULL if no vertices have that index
//               number.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2148  5 index 1 2092  
214 14 Dtool_hhEqB8Di 0 7 216 2135 1164 14 Dtool_hhEqB8Di 619 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::get_forward_vertex
//       Access: Public
//  Description: Returns the vertex in the pool with the indicated
//               index number.  If there is not a vertex in the pool
//               with the indicated index number, creates a special
//               forward-reference EggVertex that has no data, on the
//               assumption that the vertex pool has not yet been
//               fully read and more data will be available later.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2138  5 index 1 2092  
215 14 Dtool_hhEqX2qU 0 6 217 2092 0 14 Dtool_hhEqX2qU 389 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::get_highest_index
//       Access: Public
//  Description: Returns the highest index number used by any vertex
//               in the pool (except forward references).  Returns -1
//               if the pool is empty.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2148  
216 14 Dtool_hhEqm_MH 0 4 218 2079 0 14 Dtool_hhEqm_MH 553 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::set_highest_index
//       Access: Public
//  Description: Artificially changes the "highest index number", so
//               that a newly created vertex will begin at this number
//               plus 1.  This can be used to default a vertex pool to
//               start counting at 1 (or any other index number),
//               instead of the default of 0.  Use with caution.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2138  13 highest_index 1 2092  
217 14 Dtool_hhEqk7ro 0 6 219 2092 0 14 Dtool_hhEqk7ro 319 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::get_num_dimensions
//       Access: Public
//  Description: Returns the maximum number of dimensions used by any
//               vertex in the pool.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2148  
218 14 Dtool_hhEqtNSd 0 6 220 2080 0 14 Dtool_hhEqtNSd 326 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::has_normals
//       Access: Public
//  Description: Returns true if any vertex in the pool has a normal
//               defined, false if none of them do.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2148  
219 14 Dtool_hhEqfhjn 0 6 221 2080 0 14 Dtool_hhEqfhjn 324 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::has_colors
//       Access: Public
//  Description: Returns true if any vertex in the pool has a color
//               defined, false if none of them do.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2148  
220 14 Dtool_hhEq1q_C 0 6 222 2080 0 14 Dtool_hhEq1q_C 403 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::has_nonwhite_colors
//       Access: Public
//  Description: Returns true if any vertex in the pool has a color
//               defined other than white, false if no vertices have
//               colors, or if all colors are white.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2148  
221 14 Dtool_hhEqmTXK 0 6 224 2080 0 14 Dtool_hhEqmTXK 318 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::has_uvs
//       Access: Public
//  Description: Returns true if any vertex in the pool has a uv
//               defined, false if none of them do.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2148  
222 14 Dtool_hhEqoss6 0 6 225 2080 0 14 Dtool_hhEqoss6 328 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::has_aux
//       Access: Public
//  Description: Returns true if any vertex in the pool has
//               auxiliary data defined, false if none of them do.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2148  
223 14 Dtool_hhEqZ_MQ 0 4 226 2079 0 14 Dtool_hhEqZ_MQ 654 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::get_uv_names
//       Access: Public
//  Description: Returns the list of UV names that are defined by any
//               vertices in the pool, as well as the subset of UV
//               names that actually define 3-d texture coordinates
//               ("uvw_names").  Also returns the subset of UV/UVW
//               names that define a tangent and binormal.  It is the
//               user's responsibility to clear both vectors before
//               calling this method.
//////////////////////////////////////////////////////////////////// 4 4 this 3 2148  8 uv_names 1 2096  9 uvw_names 1 2096  9 tbn_names 1 2096  
224 14 Dtool_hhEqVCXp 0 4 227 2079 0 14 Dtool_hhEqVCXp 328 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::get_aux_names
//       Access: Public
//  Description: Returns the list of auxiliary data names that are
//               defined by any vertices in the pool.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2148  9 aux_names 1 2096  
225 14 Dtool_hhEq_u9p 0 6 228 2150 0 14 Dtool_hhEq_u9p 261 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::size()
//       Access: Public
//  Description: Returns the number of vertices in the pool.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2148  
226 14 Dtool_hhEqG7Zj 0 7 229 2135 1164 14 Dtool_hhEqG7Zj 1245 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::add_vertex
//       Access: Public
//  Description: Adds the indicated vertex to the pool.  It is an
//               error if the vertex is already a member of this or
//               any other pool.  The vertex must have been allocated
//               from the free store; its pointer will now be owned by
//               the vertex pool.  If the index number is supplied,
//               tries to assign that index number; it is an error if
//               the index number is already in use.
//
//               It is possible that a forward reference to this
//               vertex was requested in the past; if so, the data
//               from the supplied vertex is copied onto the forward
//               reference, which becomes the actual vertex.  In this
//               case, a different pointer is saved (and returned)
//               than the one actually passed in.  In the usual case,
//               however, the vertex pointer passed in is the one that
//               is saved in the vertex pool and returned from this
//               method.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2138  6 vertex 1 2135  5 index 1 2092  
227 14 Dtool_hhEqiMXH 0 7 229 2135 1164 14 Dtool_hhEqiMXH 1245 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::add_vertex
//       Access: Public
//  Description: Adds the indicated vertex to the pool.  It is an
//               error if the vertex is already a member of this or
//               any other pool.  The vertex must have been allocated
//               from the free store; its pointer will now be owned by
//               the vertex pool.  If the index number is supplied,
//               tries to assign that index number; it is an error if
//               the index number is already in use.
//
//               It is possible that a forward reference to this
//               vertex was requested in the past; if so, the data
//               from the supplied vertex is copied onto the forward
//               reference, which becomes the actual vertex.  In this
//               case, a different pointer is saved (and returned)
//               than the one actually passed in.  In the usual case,
//               however, the vertex pointer passed in is the one that
//               is saved in the vertex pool and returned from this
//               method.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2138  6 vertex 1 2135  
228 14 Dtool_hhEqPbgz 0 7 230 2135 1164 14 Dtool_hhEqPbgz 376 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::make_new_vertex()
//       Access: Public
//  Description: Allocates and returns a new vertex from the pool.
//               This is one of three ways to add new vertices to a
//               vertex pool.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2138  
229 14 Dtool_hhEqmAmN 0 7 230 2135 1164 14 Dtool_hhEqmAmN 559 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::make_new_vertex()
//       Access: Public
//  Description: Allocates and returns a new vertex from the pool.
//               This is one of three ways to add new vertices to a
//               vertex pool.
//
//               This flavor of make_new_vertex() explicitly sets the
//               vertex position as it is allocated.  It does not
//               attempt to share vertices.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2138  3 pos 1 2123  
230 14 Dtool_hhEq_DGR 0 7 230 2135 1164 14 Dtool_hhEq_DGR 559 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::make_new_vertex()
//       Access: Public
//  Description: Allocates and returns a new vertex from the pool.
//               This is one of three ways to add new vertices to a
//               vertex pool.
//
//               This flavor of make_new_vertex() explicitly sets the
//               vertex position as it is allocated.  It does not
//               attempt to share vertices.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2138  3 pos 1 2126  
231 14 Dtool_hhEqUCmU 0 7 230 2135 1164 14 Dtool_hhEqUCmU 559 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::make_new_vertex()
//       Access: Public
//  Description: Allocates and returns a new vertex from the pool.
//               This is one of three ways to add new vertices to a
//               vertex pool.
//
//               This flavor of make_new_vertex() explicitly sets the
//               vertex position as it is allocated.  It does not
//               attempt to share vertices.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2138  3 pos 1 2139  
232 14 Dtool_hhEqqB5d 0 7 230 2135 1164 14 Dtool_hhEqqB5d 559 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::make_new_vertex()
//       Access: Public
//  Description: Allocates and returns a new vertex from the pool.
//               This is one of three ways to add new vertices to a
//               vertex pool.
//
//               This flavor of make_new_vertex() explicitly sets the
//               vertex position as it is allocated.  It does not
//               attempt to share vertices.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2138  3 pos 1 2007  
233 14 Dtool_hhEq6VIP 0 7 231 2135 1164 14 Dtool_hhEq6VIP 458 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::create_unique_vertex
//       Access: Public
//  Description: Creates a new vertex in the pool that is a copy of
//               the indicated one and returns it.  If there is
//               already a vertex in the pool like the indicated one,
//               simply returns that one.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2138  4 copy 1 2136  
234 14 Dtool_hhEqxlGu 0 7 232 2135 1164 14 Dtool_hhEqxlGu 478 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::find_matching_vertex
//       Access: Public
//  Description: If the EggVertexPool already has a vertex matching
//               the indicated vertex, returns it; otherwise, returns
//               NULL.  This is similar to create_unique_vertex()
//               except that a new vertex is never created.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2138  4 copy 1 2136  
235 14 Dtool_hhEqJ0C_ 0 4 233 2079 0 14 Dtool_hhEqJ0C_ 342 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::remove_vertex
//       Access: Public
//  Description: Removes the vertex from the pool.  It is an error if
//               the vertex is not already a member of the pool.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2138  6 vertex 1 2135  
236 14 Dtool_hhEqrkZg 0 6 234 2092 0 14 Dtool_hhEqrkZg 591 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::remove_unused_vertices
//       Access: Public
//  Description: Removes all vertices from the pool that are not
//               referenced by at least one primitive.  Also collapses
//               together equivalent vertices, and renumbers all
//               vertices after the operation so their indices are
//               consecutive, beginning at zero.  Returns the number
//               of vertices removed.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2138  
237 14 Dtool_hhEqN9pt 0 4 235 2079 0 14 Dtool_hhEqN9pt 355 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::add_unused_vertices_to_prim
//       Access: Public
//  Description: Adds all of the unused vertices in this vertex pool
//               to the indicated primitive, in ascending order.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2138  4 prim 1 2151  
238 14 Dtool_hhEqh7hw 0 4 236 2079 0 14 Dtool_hhEqh7hw 733 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::transform
//       Access: Public
//  Description: Applies the indicated transformation matrix to all
//               the vertices.  However, vertices that are attached to
//               primitives that believe their vertices are in a local
//               coordinate system are transformed only by the scale
//               and rotation component.  If a vertex happens to be
//               attached both to a local and a global primitive, and
//               the transformation includes a translation component,
//               the vertex will be split.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2138  3 mat 1 2093  
239 14 Dtool_hhEqqRjk 0 4 237 2079 0 14 Dtool_hhEqqRjk 457 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::sort_by_external_index
//       Access: Published
//  Description: Re-orders (and re-numbers) the vertices in this
//               vertex pool so that they appear in increasing order
//               by the optional external_index that has been assigned
//               to each vertex.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2138  
240 14 Dtool_hhEqOYkz 0 7 238 2075 0 14 Dtool_hhEqOYkz 0 0 
241 14 Dtool_hhEqyaS_ 0 7 240 2091 1079 14 Dtool_hhEqyaS_ 229 ////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::Copy constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2152  
242 14 Dtool_hhEq7UZA 0 7 240 2091 1079 14 Dtool_hhEq7UZA 0 1 4 name 1 2084  
243 14 Dtool_hhEq0aiu 0 7 240 2091 1079 14 Dtool_hhEq0aiu 0 0 
244 14 Dtool_hhEqsatI 0 7 241 2091 1079 14 Dtool_hhEqsatI 237 ////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::Copy assignment operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2091  4 copy 1 2152  
245 14 Dtool_hhEqRZjf 0 6 242 2080 0 14 Dtool_hhEqRZjf 218 ////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::empty
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2152  
246 14 Dtool_hhEqn_u7 0 6 243 2150 0 14 Dtool_hhEqn_u7 217 ////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::size
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2152  
247 14 Dtool_hhEqdGRB 0 4 244 2079 0 14 Dtool_hhEqdGRB 218 ////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::clear
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2091  
248 14 Dtool_hhEqWCah 0 7 245 2088 1079 14 Dtool_hhEqWCah 665 ////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::get_first_child
//       Access: Published
//  Description: Returns the first child in the group's list of
//               children, or NULL if the list of children is empty.
//               Can be used with get_next_child() to return the
//               complete list of children without using the iterator
//               class; however, this is non-thread-safe, and so is
//               not recommended except for languages other than C++
//               which cannot use the iterators.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2091  
249 14 Dtool_hhEq7zBu 0 7 246 2088 1079 14 Dtool_hhEq7zBu 857 ////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::get_next_child
//       Access: Published
//  Description: Returns the next child in the group's list of
//               children since the last call to get_first_child() or
//               get_next_child(), or NULL if the last child has been
//               returned.  Can be used with get_first_child() to
//               return the complete list of children without using
//               the iterator class; however, this is non-thread-safe,
//               and so is not recommended except for languages other
//               than C++ which cannot use the iterators.
//
//               It is an error to call this without previously
//               calling get_first_child().
//////////////////////////////////////////////////////////////////// 1 4 this 3 2091  
250 14 Dtool_hhEqujQl 0 6 247 2154 0 14 Dtool_hhEqujQl 0 1 4 this 3 2152  
251 14 Dtool_hhEqQ_Zu 0 7 248 2088 1079 14 Dtool_hhEqQ_Zu 385 ////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::add_child
//       Access: Published
//  Description: Adds the indicated child to the group and returns it.
//               If the child node is already a child of some other
//               node, removes it first.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2091  4 node 1 2088  
252 14 Dtool_hhEqKOID 0 7 249 2088 1079 14 Dtool_hhEqKOID 398 ////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::remove_child
//       Access: Published
//  Description: Removes the indicated child node from the group and
//               returns it.  If the child was not already in the
//               group, does nothing and returns NULL.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2091  4 node 1 2088  
253 14 Dtool_hhEq0PPR 0 4 250 2079 0 14 Dtool_hhEq0PPR 416 ////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::steal_children
//       Access: Published
//  Description: Moves all the children from the other node to this
//               one.  This is especially useful because the group
//               node copy assignment operator does not copy children.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2091  5 other 1 2091  
254 14 Dtool_hhEqIxZU 0 7 251 2088 1079 14 Dtool_hhEqIxZU 410 ////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::find_child
//       Access: Published
//  Description: Returns the child of this node whose name is the
//               indicated string, or NULL if there is no child of
//               this node by that name.  Does not search recursively.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2152  4 name 1 2084  
255 14 Dtool_hhEqWpyO 0 6 252 2080 0 14 Dtool_hhEqWpyO 416 ////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::has_absolute_pathnames
//       Access: Published
//  Description: Returns true if any nodes at this level and below
//               include a reference to a file via an absolute
//               pathname, or false if all references are relative.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2152  
256 14 Dtool_hhEqQMtA 0 4 253 2079 0 14 Dtool_hhEqQMtA 472 ////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::resolve_filenames
//       Access: Published
//  Description: Walks the tree and attempts to resolve any filenames
//               encountered.  This looks up filenames along the
//               specified search path; it does not automatically
//               search the model_path for missing files.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2091  10 searchpath 1 2156  
257 14 Dtool_hhEqGIQc 0 4 254 2079 0 14 Dtool_hhEqGIQc 452 ////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::force_filenames
//       Access: Published
//  Description: Similar to resolve_filenames, but each non-absolute
//               filename encountered is arbitrarily taken to be in
//               the indicated directory, whether or not the so-named
//               filename exists.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2091  9 directory 1 2159  
258 14 Dtool_hhEq1ZhK 0 4 255 2079 0 14 Dtool_hhEq1ZhK 393 ////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::reverse_vertex_ordering
//       Access: Published
//  Description: Reverses the vertex ordering of all polygons defined
//               at this node and below.  Does not change the surface
//               normals, if any.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2091  
259 14 Dtool_hhEq_XGy 0 4 256 2079 0 14 Dtool_hhEq_XGy 1132 ////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::recompute_vertex_normals
//       Access: Published
//  Description: Recomputes all the vertex normals for polygon
//               geometry at this group node and below so that they
//               accurately reflect the vertex positions.  A shared
//               edge between two polygons (even in different groups)
//               is considered smooth if the angle between the two
//               edges is less than threshold degrees.
//
//               This function also removes degenerate polygons that
//               do not have enough vertices to define a normal.  It
//               does not affect normals for other kinds of primitives
//               like Nurbs or Points.
//
//               This function does not remove or adjust vertices in
//               the vertex pool; it only adds new vertices with the
//               correct normals.  Thus, it is a good idea to call
//               remove_unused_vertices() after calling this.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2091  9 threshold 1 2007  2 cs 1 2162  
260 14 Dtool_hhEqC1bM 0 4 256 2079 0 14 Dtool_hhEqC1bM 1132 ////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::recompute_vertex_normals
//       Access: Published
//  Description: Recomputes all the vertex normals for polygon
//               geometry at this group node and below so that they
//               accurately reflect the vertex positions.  A shared
//               edge between two polygons (even in different groups)
//               is considered smooth if the angle between the two
//               edges is less than threshold degrees.
//
//               This function also removes degenerate polygons that
//               do not have enough vertices to define a normal.  It
//               does not affect normals for other kinds of primitives
//               like Nurbs or Points.
//
//               This function does not remove or adjust vertices in
//               the vertex pool; it only adds new vertices with the
//               correct normals.  Thus, it is a good idea to call
//               remove_unused_vertices() after calling this.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2091  9 threshold 1 2007  
261 14 Dtool_hhEqxT4d 0 4 257 2079 0 14 Dtool_hhEqxT4d 1077 ////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::recompute_polygon_normals
//       Access: Published
//  Description: Recomputes all the polygon normals for polygon
//               geometry at this group node and below so that they
//               accurately reflect the vertex positions.  Normals are
//               removed from the vertices and defined only on
//               polygons, giving the geometry a faceted appearance.
//
//               This function also removes degenerate polygons that
//               do not have enough vertices to define a normal.  It
//               does not affect normals for other kinds of primitives
//               like Nurbs or Points.
//
//               This function does not remove or adjust vertices in
//               the vertex pool; it only adds new vertices with the
//               normals removed.  Thus, it is a good idea to call
//               remove_unused_vertices() after calling this.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2091  2 cs 1 2162  
262 14 Dtool_hhEqb2rf 0 4 257 2079 0 14 Dtool_hhEqb2rf 1077 ////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::recompute_polygon_normals
//       Access: Published
//  Description: Recomputes all the polygon normals for polygon
//               geometry at this group node and below so that they
//               accurately reflect the vertex positions.  Normals are
//               removed from the vertices and defined only on
//               polygons, giving the geometry a faceted appearance.
//
//               This function also removes degenerate polygons that
//               do not have enough vertices to define a normal.  It
//               does not affect normals for other kinds of primitives
//               like Nurbs or Points.
//
//               This function does not remove or adjust vertices in
//               the vertex pool; it only adds new vertices with the
//               normals removed.  Thus, it is a good idea to call
//               remove_unused_vertices() after calling this.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2091  
263 14 Dtool_hhEqtsfH 0 4 258 2079 0 14 Dtool_hhEqtsfH 606 ////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::strip_normals
//       Access: Published
//  Description: Removes all normals from primitives, and the vertices
//               they reference, at this node and below.
//
//               This function does not remove or adjust vertices in
//               the vertex pool; it only adds new vertices with the
//               normal removed.  Thus, it is a good idea to call
//               remove_unused_vertices() after calling this.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2091  
264 14 Dtool_hhEqd7eS 0 6 259 2080 0 14 Dtool_hhEqd7eS 1204 ////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::recompute_tangent_binormal
//       Access: Published
//  Description: This function recomputes the tangent and binormal for
//               the named texture coordinate set for all vertices at
//               this level and below.  Use the empty string for the
//               default texture coordinate set.
//
//               It is necessary for each vertex to already have a
//               normal (or at least a polygon normal), as well as a
//               texture coordinate in the named texture coordinate
//               set, before calling this function.  You might precede
//               this with recompute_vertex_normals() to ensure that
//               the normals exist.
//
//               Like recompute_vertex_normals(), this function does
//               not remove or adjust vertices in the vertex pool; it
//               only adds new vertices with the new tangents and
//               binormals computed.  Thus, it is a good idea to call
//               remove_unused_vertices() after calling this.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2091  7 uv_name 1 2163  
265 14 Dtool_hhEqyGU5 0 6 259 2080 0 14 Dtool_hhEqyGU5 397 ////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::recompute_tangent_binormal
//       Access: Published
//  Description: This function recomputes the tangent and binormal for
//               the named texture coordinate sets.
//               Returns true if anything was done.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2091  5 names 1 2166  
266 14 Dtool_hhEqWrV6 0 6 260 2080 0 14 Dtool_hhEqWrV6 421 ////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::recompute_tangent_binormal_auto
//       Access: Published
//  Description: This function recomputes the tangent and binormal for
//               any texture coordinate set that affects a normal map.
//               Returns true if anything was done.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2091  
267 14 Dtool_hhEq_se2 0 6 262 2092 0 14 Dtool_hhEq_se2 772 ////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::triangulate_polygons
//       Access: Published
//  Description: Replace all higher-order polygons at this point in
//               the scene graph and below with triangles.  Returns
//               the total number of new triangles produced, less
//               degenerate polygons removed.
//
//               If flags contains T_polygon and T_convex, both
//               concave and convex polygons will be subdivided into
//               triangles; with only T_polygon, only concave polygons
//               will be subdivided, and convex polygons will be
//               largely unchanged.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2091  5 flags 1 2092  
268 14 Dtool_hhEq0h9U 0 4 263 2079 0 14 Dtool_hhEq0h9U 318 ////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::mesh_triangles
//       Access: Published
//  Description: Combine triangles together into triangle strips, at
//               this group and below.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2091  5 flags 1 2092  
269 14 Dtool_hhEqbmcy 0 4 264 2079 0 14 Dtool_hhEqbmcy 382 ////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::make_point_primitives
//       Access: Published
//  Description: Creates PointLight primitives to reference any
//               otherwise unreferences vertices discovered in this
//               group or below.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2091  
270 14 Dtool_hhEqXEMS 0 6 265 2092 0 14 Dtool_hhEqXEMS 260 ////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::rename_nodes
//       Access: Published
//  Description: Rename by stripping out the prefix
//////////////////////////////////////////////////////////////////// 3 4 this 3 2091  12 strip_prefix 1 2096  7 recurse 1 2080  
271 14 Dtool_hhEqfhj6 0 6 266 2092 0 14 Dtool_hhEqfhj6 1111 ////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::remove_unused_vertices
//       Access: Published
//  Description: Removes all vertices from VertexPools within this
//               group or below that are not referenced by at least
//               one primitive.  Also collapses together equivalent
//               vertices, and renumbers all vertices after the
//               operation so their indices are consecutive, beginning
//               at zero.  Returns the total number of vertices
//               removed.
//
//               Note that this operates on the VertexPools within
//               this group level, without respect to primitives that
//               reference these vertices (unlike other functions like
//               strip_normals()).  It is therefore most useful to
//               call this on the EggData root, rather than on a
//               subgroup within the hierarchy, since a VertexPool may
//               appear anywhere in the hierarchy.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2091  7 recurse 1 2080  
272 14 Dtool_hhEqlgIl 0 6 267 2092 0 14 Dtool_hhEqlgIl 453 ////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::remove_invalid_primitives
//       Access: Published
//  Description: Removes primitives at this level and below which
//               appear to be degenerate; e.g. polygons with fewer
//               than 3 vertices, etc.  Returns the number of
//               primitives removed.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2091  7 recurse 1 2080  
273 14 Dtool_hhEqNnDZ 0 4 268 2079 0 14 Dtool_hhEqNnDZ 635 ////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::clear_connected_shading
//       Access: Published
//  Description: Resets the connected_shading information on all
//               primitives at this node and below, so that it may be
//               accurately rederived by the next call to
//               get_connected_shading().
//
//               It may be a good idea to call
//               remove_unused_vertices() as well, to establish the
//               correct connectivity between common vertices.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2091  
274 14 Dtool_hhEqVHnl 0 4 269 2079 0 14 Dtool_hhEqVHnl 463 ////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::get_connected_shading
//       Access: Published
//  Description: Queries the connected_shading information on all
//               primitives at this node and below, to ensure that it
//               has been completely filled in before we start mucking
//               around with vertices.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2091  
275 14 Dtool_hhEqsdwz 0 4 270 2079 0 14 Dtool_hhEqsdwz 1614 ////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::unify_attributes
//       Access: Published
//  Description: Applies per-vertex normal and color to all vertices,
//               if they are in fact per-vertex (and different for
//               each vertex), or moves them to the primitive if they
//               are all the same.
//
//               After this call, either the primitive will have
//               normals or its vertices will, but not both.  Ditto
//               for colors.
//
//               If use_connected_shading is true, each polygon is
//               considered in conjunction with all connected
//               polygons; otherwise, each polygon is considered
//               individually.
//
//               If allow_per_primitive is false, S_per_face or
//               S_overall will treated like S_per_vertex: normals and
//               colors will always be assigned to the vertices.  In
//               this case, there will never be per-primitive colors
//               or normals after this call returns.  On the other
//               hand, if allow_per_primitive is true, then S_per_face
//               means that normals and colors should be assigned to
//               the primitives, and removed from the vertices, as
//               described above.
//
//               This may create redundant vertices in the vertex
//               pool, so it may be a good idea to follow this up with
//               remove_unused_vertices().
//////////////////////////////////////////////////////////////////// 4 4 this 3 2091  21 use_connected_shading 1 2080  19 allow_per_primitive 1 2080  7 recurse 1 2080  
276 14 Dtool_hhEqdiHh 0 4 271 2079 0 14 Dtool_hhEqdiHh 768 ////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::apply_last_attribute
//       Access: Published
//  Description: Sets the last vertex of the triangle (or each
//               component) to the primitive normal and/or color, if
//               the primitive is flat-shaded.  This reflects the
//               OpenGL convention of storing flat-shaded properties on
//               the last vertex, although it is not usually a
//               convention in Egg.
//
//               This may create redundant vertices in the vertex
//               pool, so it may be a good idea to follow this up with
//               remove_unused_vertices().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2091  7 recurse 1 2080  
277 14 Dtool_hhEqm0yZ 0 4 272 2079 0 14 Dtool_hhEqm0yZ 772 ////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::apply_first_attribute
//       Access: Published
//  Description: Sets the first vertex of the triangle (or each
//               component) to the primitive normal and/or color, if
//               the primitive is flat-shaded.  This reflects the
//               DirectX convention of storing flat-shaded properties on
//               the first vertex, although it is not usually a
//               convention in Egg.
//
//               This may create redundant vertices in the vertex
//               pool, so it may be a good idea to follow this up with
//               remove_unused_vertices().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2091  7 recurse 1 2080  
278 14 Dtool_hhEqUq1z 0 4 273 2079 0 14 Dtool_hhEqUq1z 490 ////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::post_apply_flat_attribute
//       Access: Published
//  Description: Intended as a followup to apply_last_attribute(),
//               this also sets an attribute on the first vertices of
//               the primitive, if they don't already have an
//               attribute set, just so they end up with *something*.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2091  7 recurse 1 2080  
279 14 Dtool_hhEqsIZU 0 6 274 2080 0 14 Dtool_hhEqsIZU 380 ////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::has_primitives
//       Access: Published, Virtual
//  Description: Returns true if there are any primitives
//               (e.g. polygons) defined within this group or below,
//               false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2152  
280 14 Dtool_hhEqE4HK 0 6 275 2080 0 14 Dtool_hhEqE4HK 416 ////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::joint_has_primitives
//       Access: Published, Virtual
//  Description: Returns true if there are any primitives
//               (e.g. polygons) defined within this group or below,
//               but the search does not include nested joints.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2152  
281 14 Dtool_hhEq0QVV 0 6 276 2080 0 14 Dtool_hhEq0QVV 417 ////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::has_normals
//       Access: Published, Virtual
//  Description: Returns true if any of the primitives (e.g. polygons)
//               defined within this group or below have either face
//               or vertex normals defined, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2152  
282 14 Dtool_hhEqdAYG 0 6 277 2080 0 14 Dtool_hhEqdAYG 765 // Filename: eggGroupNode.I
// Created by:  drose (16Jan99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::is_right
//       Access: Private, Static
//  Description: Returns true if the 2-d v1 is to the right of v2.
//////////////////////////////////////////////////////////////////// 2 2 v1 1 2168  2 v2 1 2168  
283 14 Dtool_hhEql4Aq 0 7 278 2075 0 14 Dtool_hhEql4Aq 0 0 
284 14 Dtool_hhEqTDmL 0 7 280 2098 1309 14 Dtool_hhEqTDmL 222 ////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
285 14 Dtool_hhEqD72v 0 7 280 2098 1309 14 Dtool_hhEqD72v 716 // Filename: eggRenderMode.I
// Created by:  drose (20Jan99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2171  
286 14 Dtool_hhEqr5z0 0 6 281 2098 0 14 Dtool_hhEqr5z0 235 ////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::Copy assignment operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2098  4 copy 1 2171  
287 14 Dtool_hhEqtH5E 0 4 282 2079 0 14 Dtool_hhEqtH5E 301 ////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::write
//       Access: Public
//  Description: Writes the attributes to the indicated output stream in
//               Egg format.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2171  3 out 1 2085  12 indent_level 1 2092  
288 14 Dtool_hhEq7kse 0 4 287 2079 0 14 Dtool_hhEq7kse 849 ////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::set_alpha_mode
//       Access: Public
//  Description: Specifies precisely how the transparency for this
//               geometry should be achieved, or if it should be used.
//               The default, AM_unspecified, is to use transparency
//               if the geometry has a color whose alpha value is
//               non-1, or if it has a four-channel texture applied;
//               otherwise, AM_on forces transparency on, and AM_off
//               forces it off.  The other flavors of transparency are
//               specific ways to turn on transparency, which may or
//               may not be supported by a particular rendering
//               backend.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2098  4 mode 1 1999  
289 14 Dtool_hhEq3t3A 0 6 288 1999 0 14 Dtool_hhEq3t3A 357 ////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::get_alpha_mode
//       Access: Public
//  Description: Returns the alpha mode that was set, or
//               AM_unspecified if nothing was set.  See
//               set_alpha_mode().
//////////////////////////////////////////////////////////////////// 1 4 this 3 2171  
290 14 Dtool_hhEqCEUa 0 4 289 2079 0 14 Dtool_hhEqCEUa 412 ////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::set_depth_write_mode
//       Access: Public
//  Description: Specifies whether writes should be made to the depth
//               buffer (assuming the rendering backend provides a
//               depth buffer) when rendering this geometry.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2098  4 mode 1 2000  
291 14 Dtool_hhEqaHHZ 0 6 290 2000 0 14 Dtool_hhEqaHHZ 376 ////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::get_depth_write_mode
//       Access: Public
//  Description: Returns the depth_write mode that was set, or
//               DWM_unspecified if nothing was set.  See
//               set_depth_write_mode().
//////////////////////////////////////////////////////////////////// 1 4 this 3 2171  
292 14 Dtool_hhEqOa7S 0 4 291 2079 0 14 Dtool_hhEqOa7S 521 ////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::set_depth_test_mode
//       Access: Public
//  Description: Specifies whether this geometry should be tested
//               against the depth buffer when it is drawn (assuming
//               the rendering backend provides a depth buffer).  Note
//               that this is different, and independent from, the
//               depth_write mode.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2098  4 mode 1 2001  
293 14 Dtool_hhEqkkuX 0 6 292 2001 0 14 Dtool_hhEqkkuX 373 ////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::get_depth_test_mode
//       Access: Public
//  Description: Returns the depth_test mode that was set, or
//               DTM_unspecified if nothing was set.  See
//               set_depth_test_mode().
//////////////////////////////////////////////////////////////////// 1 4 this 3 2171  
294 14 Dtool_hhEqreNq 0 4 293 2079 0 14 Dtool_hhEqreNq 530 ////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::set_visibility_mode
//       Access: Public
//  Description: Specifies whether this geometry is to be considered
//               normally visible, or hidden.  If it is hidden, it is
//               either not loaded into the scene graph at all, or
//               loaded as a "stashed" node, according to the setting
//               of egg-suppress-hidden.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2098  4 mode 1 2002  
295 14 Dtool_hhEqta47 0 6 294 2002 0 14 Dtool_hhEqta47 372 ////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::get_visibility_mode
//       Access: Public
//  Description: Returns the visibility mode that was set, or
//               VM_unspecified if nothing was set.  See
//               set_visibility_mode().
//////////////////////////////////////////////////////////////////// 1 4 this 3 2171  
296 14 Dtool_hhEquxBz 0 4 295 2079 0 14 Dtool_hhEquxBz 459 ////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::set_depth_offset
//       Access: Public
//  Description: Sets the "depth-offset" flag associated with this
//               object.  This adds or subtracts an offset bias
//               into the depth buffer. See also DepthOffsetAttrib
//               and NodePath::set_depth_offset().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2098  4 bias 1 2092  
297 14 Dtool_hhEqScq9 0 6 296 2092 0 14 Dtool_hhEqScq9 336 ////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::get_depth_offset
//       Access: Public
//  Description: Returns the "depth-offset" flag as set for this
//               particular object.  See set_depth_offset().
//////////////////////////////////////////////////////////////////// 1 4 this 3 2171  
298 14 Dtool_hhEq0eEO 0 6 297 2080 0 14 Dtool_hhEq0eEO 348 ////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::has_depth_offset
//       Access: Public
//  Description: Returns true if the depth-offset flag has been set for
//               this particular object.  See set_depth_offset().
//////////////////////////////////////////////////////////////////// 1 4 this 3 2171  
299 14 Dtool_hhEq1yzp 0 4 298 2079 0 14 Dtool_hhEq1yzp 330 ////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::clear_depth_offset
//       Access: Public
//  Description: Removes the depth-offset flag from this particular
//               object.  See set_depth_offset().
//////////////////////////////////////////////////////////////////// 1 4 this 3 2098  
300 14 Dtool_hhEq1SSq 0 4 299 2079 0 14 Dtool_hhEq1SSq 534 ////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::set_draw_order
//       Access: Public
//  Description: Sets the "draw-order" flag associated with this
//               object.  This specifies a particular order in which
//               objects of this type should be drawn, within the
//               specified bin.  If a bin is not explicitly specified,
//               "fixed" is used.  See also set_bin().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2098  5 order 1 2092  
301 14 Dtool_hhEqY4RM 0 6 300 2092 0 14 Dtool_hhEqY4RM 330 ////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::get_draw_order
//       Access: Public
//  Description: Returns the "draw-order" flag as set for this
//               particular object.  See set_draw_order().
//////////////////////////////////////////////////////////////////// 1 4 this 3 2171  
302 14 Dtool_hhEqV5rc 0 6 301 2080 0 14 Dtool_hhEqV5rc 342 ////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::has_draw_order
//       Access: Public
//  Description: Returns true if the draw-order flag has been set for
//               this particular object.  See set_draw_order().
//////////////////////////////////////////////////////////////////// 1 4 this 3 2171  
303 14 Dtool_hhEqgDCN 0 4 302 2079 0 14 Dtool_hhEqgDCN 324 ////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::clear_draw_order
//       Access: Public
//  Description: Removes the draw-order flag from this particular
//               object.  See set_draw_order().
//////////////////////////////////////////////////////////////////// 1 4 this 3 2098  
304 14 Dtool_hhEqOpBx 0 4 303 2079 0 14 Dtool_hhEqOpBx 691 ////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::set_bin
//       Access: Public
//  Description: Sets the "bin" string for this particular object.
//               This names a particular bin in which the object
//               should be rendered.  The exact meaning of a bin is
//               implementation defined, but generally a GeomBin
//               matching each bin name must also be specifically
//               added to the rendering engine (e.g. the
//               CullTraverser) in use for this to work.  See also
//               set_draw_order().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2098  3 bin 1 2084  
305 14 Dtool_hhEqtssd 0 6 304 2084 0 14 Dtool_hhEqtssd 326 ////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::get_bin
//       Access: Public
//  Description: Returns the bin name that has been set for this
//               particular object, if any.  See set_bin().
//////////////////////////////////////////////////////////////////// 1 4 this 3 2171  
306 14 Dtool_hhEq6rGu 0 6 305 2080 0 14 Dtool_hhEq6rGu 319 ////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::has_bin
//       Access: Public
//  Description: Returns true if a bin name has been set for this
//               particular object.  See set_bin().
//////////////////////////////////////////////////////////////////// 1 4 this 3 2171  
307 14 Dtool_hhEqlrzU 0 4 306 2079 0 14 Dtool_hhEqlrzU 315 ////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::clear_bin
//       Access: Public
//  Description: Removes the bin name that was set for this particular
//               object.  See set_bin().
//////////////////////////////////////////////////////////////////// 1 4 this 3 2098  
308 14 Dtool_hhEqpyzm 0 6 307 2080 0 14 Dtool_hhEqpyzm 228 ////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::Equality Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2171  5 other 1 2171  
309 14 Dtool_hhEqV_Rm 0 6 308 2080 0 14 Dtool_hhEqV_Rm 230 ////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::Inequality Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2171  5 other 1 2171  
310 14 Dtool_hhEqT1ZU 0 6 309 2080 0 14 Dtool_hhEqT1ZU 228 ////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::Ordering Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2171  5 other 1 2171  
311 14 Dtool_hhEqX3lo 0 6 310 1999 0 14 Dtool_hhEqX3lo 413 ////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::string_alpha_mode
//       Access: Public
//  Description: Returns the AlphaMode value associated with the given
//               string representation, or AM_unspecified if the string
//               does not match any known AlphaMode value.
//////////////////////////////////////////////////////////////////// 1 6 string 1 2084  
312 14 Dtool_hhEqj8l7 0 6 311 2000 0 14 Dtool_hhEqj8l7 447 ////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::string_depth_write_mode
//       Access: Public
//  Description: Returns the DepthWriteMode value associated with the
//               given string representation, or DWM_unspecified if
//               the string does not match any known DepthWriteMode
//               value.
//////////////////////////////////////////////////////////////////// 1 6 string 1 2084  
313 14 Dtool_hhEqecqF 0 6 312 2001 0 14 Dtool_hhEqecqF 444 ////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::string_depth_test_mode
//       Access: Public
//  Description: Returns the DepthTestMode value associated with the
//               given string representation, or DTM_unspecified if
//               the string does not match any known DepthTestMode
//               value.
//////////////////////////////////////////////////////////////////// 1 6 string 1 2084  
314 14 Dtool_hhEqMsGH 0 6 313 2002 0 14 Dtool_hhEqMsGH 437 ////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::string_visibility_mode
//       Access: Public
//  Description: Returns the HiddenMode value associated with the
//               given string representation, or VM_unspecified if
//               the string does not match any known HiddenMode
//               value.
//////////////////////////////////////////////////////////////////// 1 6 string 1 2084  
315 14 Dtool_hhEqYBRs 0 7 314 2075 0 14 Dtool_hhEqYBRs 0 0 
316 14 Dtool_hhEqmgGu 0 7 317 2173 1312 14 Dtool_hhEqmgGu 221 ////////////////////////////////////////////////////////////////////
//     Function: EggTransform::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
317 14 Dtool_hhEqqhDZ 0 7 317 2173 1312 14 Dtool_hhEqqhDZ 226 ////////////////////////////////////////////////////////////////////
//     Function: EggTransform::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2174  
318 14 Dtool_hhEqQzqw 0 6 318 2173 0 14 Dtool_hhEqQzqw 234 ////////////////////////////////////////////////////////////////////
//     Function: EggTransform::Copy assignment operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2173  4 copy 1 2174  
319 14 Dtool_hhEqdMr5 0 4 320 2079 0 14 Dtool_hhEqdMr5 266 ////////////////////////////////////////////////////////////////////
//     Function: EggTransform::clear_transform
//       Access: Public
//  Description: Resets the transform to empty, identity.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2173  
320 14 Dtool_hhEqserh 0 4 321 2079 0 14 Dtool_hhEqserh 304 ////////////////////////////////////////////////////////////////////
//     Function: EggTransform::add_translate2d
//       Access: Public
//  Description: Appends a 2-d translation operation to the current
//               transform.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2173  9 translate 1 2168  
321 14 Dtool_hhEqdeDW 0 4 322 2079 0 14 Dtool_hhEqdeDW 304 ////////////////////////////////////////////////////////////////////
//     Function: EggTransform::add_translate3d
//       Access: Public
//  Description: Appends a 3-d translation operation to the current
//               transform.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2173  9 translate 1 2108  
322 14 Dtool_hhEqgbuR 0 4 323 2079 0 14 Dtool_hhEqgbuR 384 ////////////////////////////////////////////////////////////////////
//     Function: EggTransform::add_rotate2d
//       Access: Public
//  Description: Appends a 2-d rotation to the current transform.  The
//               rotation angle is specified in degrees
//               counterclockwise about the origin.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2173  5 angle 1 2007  
323 14 Dtool_hhEqi76M 0 4 324 2079 0 14 Dtool_hhEqi76M 391 ////////////////////////////////////////////////////////////////////
//     Function: EggTransform::add_rotx
//       Access: Public
//  Description: Appends a rotation about the X axis to the current
//               transform.  The rotation angle is specified in
//               degrees counterclockwise about the axis.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2173  5 angle 1 2007  
324 14 Dtool_hhEqiDrW 0 4 325 2079 0 14 Dtool_hhEqiDrW 391 ////////////////////////////////////////////////////////////////////
//     Function: EggTransform::add_roty
//       Access: Public
//  Description: Appends a rotation about the Y axis to the current
//               transform.  The rotation angle is specified in
//               degrees counterclockwise about the axis.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2173  5 angle 1 2007  
325 14 Dtool_hhEqiLcg 0 4 326 2079 0 14 Dtool_hhEqiLcg 391 ////////////////////////////////////////////////////////////////////
//     Function: EggTransform::add_rotz
//       Access: Public
//  Description: Appends a rotation about the Z axis to the current
//               transform.  The rotation angle is specified in
//               degrees counterclockwise about the axis.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2173  5 angle 1 2007  
326 14 Dtool_hhEqNSrS 0 4 327 2079 0 14 Dtool_hhEqNSrS 403 ////////////////////////////////////////////////////////////////////
//     Function: EggTransform::add_rotate3d
//       Access: Public
//  Description: Appends an arbitrary 3-d rotation to the current
//               transform, expressed as a quaternion.  This is
//               converted to axis-angle notation for the egg file.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2173  4 quat 1 2176  
327 14 Dtool_hhEq5cDY 0 4 327 2079 0 14 Dtool_hhEq5cDY 406 ////////////////////////////////////////////////////////////////////
//     Function: EggTransform::add_rotate3d
//       Access: Public
//  Description: Appends a 3-d rotation about an arbitrary axis to the
//               current transform.  The rotation angle is specified
//               in degrees counterclockwise about the axis.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2173  5 angle 1 2007  4 axis 1 2108  
328 14 Dtool_hhEq_EZa 0 4 328 2079 0 14 Dtool_hhEq_EZa 301 ////////////////////////////////////////////////////////////////////
//     Function: EggTransform::add_scale2d
//       Access: Public
//  Description: Appends a possibly non-uniform scale to the current
//               transform.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2173  5 scale 1 2179  
329 14 Dtool_hhEqnxdo 0 4 329 2079 0 14 Dtool_hhEqnxdo 301 ////////////////////////////////////////////////////////////////////
//     Function: EggTransform::add_scale3d
//       Access: Public
//  Description: Appends a possibly non-uniform scale to the current
//               transform.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2173  5 scale 1 2182  
330 14 Dtool_hhEqX0Zd 0 4 330 2079 0 14 Dtool_hhEqX0Zd 277 ////////////////////////////////////////////////////////////////////
//     Function: EggTransform::add_uniform_scale
//       Access: Public
//  Description: Appends a uniform scale to the current transform.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2173  5 scale 1 2007  
331 14 Dtool_hhEq4xVb 0 4 331 2079 0 14 Dtool_hhEq4xVb 296 ////////////////////////////////////////////////////////////////////
//     Function: EggTransform::add_matrix3
//       Access: Public
//  Description: Appends an arbitrary 3x3 matrix to the current
//               transform.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2173  3 mat 1 2185  
332 14 Dtool_hhEqyNWT 0 4 332 2079 0 14 Dtool_hhEqyNWT 296 ////////////////////////////////////////////////////////////////////
//     Function: EggTransform::add_matrix4
//       Access: Public
//  Description: Appends an arbitrary 4x4 matrix to the current
//               transform.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2173  3 mat 1 2093  
333 14 Dtool_hhEqICsz 0 6 333 2080 0 14 Dtool_hhEqICsz 432 ////////////////////////////////////////////////////////////////////
//     Function: EggTransform::has_transform
//       Access: Public
//  Description: Returns true if the transform is nonempty, false if
//               it is empty (no transform components have been
//               added).  This is true for either a 2-d or a 3-d
//               transform.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2174  
334 14 Dtool_hhEqAHYm 0 6 334 2080 0 14 Dtool_hhEqAHYm 632 ////////////////////////////////////////////////////////////////////
//     Function: EggTransform::has_transform2d
//       Access: Public
//  Description: Returns true if the transform is specified as a 2-d
//               transform, e.g. with a 3x3 matrix, or false if it is
//               specified as a 3-d transform (with a 4x4 matrix), or
//               not specified at all.
//
//               Normally, EggTextures have a 2-d matrix (but
//               occasionally they use a 3-d matrix), and EggGroups
//               always have a 3-d matrix.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2174  
335 14 Dtool_hhEqBcLy 0 4 335 2079 0 14 Dtool_hhEqBcLy 385 ////////////////////////////////////////////////////////////////////
//     Function: EggTransform::set_transform2d
//       Access: Public
//  Description: Sets the overall transform as a 3x3 matrix.  This
//               completely replaces whatever componentwise transform
//               may have been defined.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2173  3 mat 1 2185  
336 14 Dtool_hhEqKHQX 0 6 336 2080 0 14 Dtool_hhEqKHQX 632 ////////////////////////////////////////////////////////////////////
//     Function: EggTransform::has_transform3d
//       Access: Public
//  Description: Returns true if the transform is specified as a 3-d
//               transform, e.g. with a 4x4 matrix, or false if it is
//               specified as a 2-d transform (with a 2x2 matrix), or
//               not specified at all.
//
//               Normally, EggTextures have a 3-d matrix (but
//               occasionally they use a 3-d matrix), and EggGroups
//               always have a 3-d matrix.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2174  
337 14 Dtool_hhEqSfjm 0 4 337 2079 0 14 Dtool_hhEqSfjm 385 ////////////////////////////////////////////////////////////////////
//     Function: EggTransform::set_transform3d
//       Access: Public
//  Description: Sets the overall transform as a 4x4 matrix.  This
//               completely replaces whatever componentwise transform
//               may have been defined.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2173  3 mat 1 2093  
338 14 Dtool_hhEq_l37 0 7 338 2188 0 14 Dtool_hhEq_l37 348 ////////////////////////////////////////////////////////////////////
//     Function: EggTransform::get_transform2d
//       Access: Public
//  Description: Returns the overall transform as a 3x3 matrix.  It is
//               an error to call this if has_transform3d() is true.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2174  
339 14 Dtool_hhEqxlvs 0 6 339 2093 0 14 Dtool_hhEqxlvs 450 ////////////////////////////////////////////////////////////////////
//     Function: EggTransform::get_transform3d
//       Access: Public
//  Description: Returns the overall transform as a 4x4 matrix.  It is
//               valid to call this even if has_transform2d() is true;
//               in this case, the 3x3 transform will be expanded to a
//               4x4 matrix.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2174  
340 14 Dtool_hhEqDiCM 0 6 340 2080 0 14 Dtool_hhEqDiCM 318 ////////////////////////////////////////////////////////////////////
//     Function: EggTransform::transform_is_identity
//       Access: Public
//  Description: Returns true if the described transform is identity,
//               false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2174  
341 14 Dtool_hhEqn3Zw 0 6 342 2092 0 14 Dtool_hhEqn3Zw 306 ////////////////////////////////////////////////////////////////////
//     Function: EggTransform::get_num_components
//       Access: Public
//  Description: Returns the number of components that make up the
//               transform.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2174  
342 14 Dtool_hhEqUtyU 0 6 343 2004 0 14 Dtool_hhEqUtyU 267 ////////////////////////////////////////////////////////////////////
//     Function: EggTransform::get_component_type
//       Access: Public
//  Description: Returns the type of the nth component.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2174  1 n 1 2092  
343 14 Dtool_hhEqQrgR 0 6 344 2007 0 14 Dtool_hhEqQrgR 531 ////////////////////////////////////////////////////////////////////
//     Function: EggTransform::get_component_number
//       Access: Public
//  Description: Returns the solitary number associated with the nth
//               component.  In the case of a rotation, this is the
//               angle in degrees to rotate; in the case of uniform
//               scale, this is the amount of the scale.  Other types
//               do not use this property.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2174  1 n 1 2092  
344 14 Dtool_hhEqv2X0 0 6 345 2179 0 14 Dtool_hhEqv2X0 519 ////////////////////////////////////////////////////////////////////
//     Function: EggTransform::get_component_vec2
//       Access: Public
//  Description: Returns the 2-component vector associated with the
//               nth component.  This may be the translate vector,
//               rotate axis, or non-uniform scale.  It is an error to
//               call this if the component type does not use a 2-d
//               vector property.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2174  1 n 1 2092  
345 14 Dtool_hhEquWbb 0 6 346 2182 0 14 Dtool_hhEquWbb 519 ////////////////////////////////////////////////////////////////////
//     Function: EggTransform::get_component_vec3
//       Access: Public
//  Description: Returns the 3-component vector associated with the
//               nth component.  This may be the translate vector,
//               rotate axis, or non-uniform scale.  It is an error to
//               call this if the component type does not use a 3-d
//               vector property.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2174  1 n 1 2092  
346 14 Dtool_hhEqggA0 0 6 347 2185 0 14 Dtool_hhEqggA0 390 ////////////////////////////////////////////////////////////////////
//     Function: EggTransform::get_component_mat3
//       Access: Public
//  Description: Returns the 3x3 matrix associated with the nth
//               component.  It is an error to call this if the
//               component type is not CT_matrix3.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2174  1 n 1 2092  
347 14 Dtool_hhEqhADb 0 6 348 2093 0 14 Dtool_hhEqhADb 390 ////////////////////////////////////////////////////////////////////
//     Function: EggTransform::get_component_mat4
//       Access: Public
//  Description: Returns the 4x4 matrix associated with the nth
//               component.  It is an error to call this if the
//               component type is not CT_matrix4.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2174  1 n 1 2092  
348 14 Dtool_hhEqnJrv 0 4 349 2079 0 14 Dtool_hhEqnJrv 292 ////////////////////////////////////////////////////////////////////
//     Function: EggTransform::write
//       Access: Public
//  Description: Writes the transform to the indicated stream in Egg
//               format.
//////////////////////////////////////////////////////////////////// 4 4 this 3 2174  3 out 1 2085  12 indent_level 1 2092  5 label 1 2084  
349 14 Dtool_hhEqMAjk 0 7 351 2191 1346 14 Dtool_hhEqMAjk 0 1 4 this 3 2189  
350 14 Dtool_hhEqdfeb 0 4 352 2079 0 14 Dtool_hhEqdfeb 0 3 4 this 3 2189  3 out 1 2085  12 indent_level 1 2092  
351 14 Dtool_hhEqXbAk 0 4 353 2079 0 14 Dtool_hhEqXbAk 0 2 4 this 3 2191  3 mat 1 2093  
352 14 Dtool_hhEqgiFq 0 7 354 2075 0 14 Dtool_hhEqgiFq 0 0 
353 14 Dtool_hhEqemc2 0 7 357 2192 1356 14 Dtool_hhEqemc2 235 ////////////////////////////////////////////////////////////////////
//     Function: EggSwitchConditionDistance::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 4 9 switch_in 1 2007  10 switch_out 1 2007  6 center 1 2126  4 fade 1 2007  
354 14 Dtool_hhEq_Nir 0 7 357 2192 1356 14 Dtool_hhEq_Nir 235 ////////////////////////////////////////////////////////////////////
//     Function: EggSwitchConditionDistance::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 3 9 switch_in 1 2007  10 switch_out 1 2007  6 center 1 2126  
355 14 Dtool_hhEqq5Bf 0 7 371 2075 0 14 Dtool_hhEqq5Bf 0 0 
356 14 Dtool_hhEqO5L_ 0 6 359 2007 0 14 Dtool_hhEqO5L_ 0 1 4 this 3 2193  
357 14 Dtool_hhEq3UK1 0 4 360 2079 0 14 Dtool_hhEq3UK1 0 2 4 this 3 2192  5 value 1 2007  
358 14 Dtool_hhEqQD2H 0 6 362 2007 0 14 Dtool_hhEqQD2H 0 1 4 this 3 2193  
359 14 Dtool_hhEq1NkY 0 4 363 2079 0 14 Dtool_hhEq1NkY 0 2 4 this 3 2192  5 value 1 2007  
360 14 Dtool_hhEqird7 0 6 365 2007 0 14 Dtool_hhEqird7 0 1 4 this 3 2193  
361 14 Dtool_hhEqIshZ 0 4 366 2079 0 14 Dtool_hhEqIshZ 0 2 4 this 3 2192  5 value 1 2007  
362 14 Dtool_hhEqqtNt 0 6 369 2126 0 14 Dtool_hhEqqtNt 0 1 4 this 3 2193  
363 14 Dtool_hhEqGDad 0 7 388 2195 1365 14 Dtool_hhEqGDad 225 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::Copy Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2144  
364 14 Dtool_hhEqA1nz 0 7 388 2195 1365 14 Dtool_hhEqA1nz 220 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 name 1 2084  
365 14 Dtool_hhEqo0fE 0 7 388 2195 1365 14 Dtool_hhEqo0fE 220 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
366 14 Dtool_hhEq4lhn 0 7 389 2195 1365 14 Dtool_hhEq4lhn 233 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::Copy assignment operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2195  4 copy 1 2144  
367 14 Dtool_hhEq4Dn7 0 4 391 2079 0 14 Dtool_hhEq4Dn7 327 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::write
//       Access: Published, Virtual
//  Description: Writes the group and all of its children to the
//               indicated output stream in Egg format.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2144  3 out 1 2085  12 indent_level 1 2092  
368 14 Dtool_hhEqn03j 0 4 392 2079 0 14 Dtool_hhEqn03j 326 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::write_billboard_flags
//       Access: Published
//  Description: Writes just the <Billboard> entry and related fields to
//               the indicated ostream.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2144  3 out 1 2085  12 indent_level 1 2092  
369 14 Dtool_hhEqxbxc 0 4 393 2079 0 14 Dtool_hhEqxbxc 322 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::write_collide_flags
//       Access: Published
//  Description: Writes just the <Collide> entry and related fields to
//               the indicated ostream.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2144  3 out 1 2085  12 indent_level 1 2092  
370 14 Dtool_hhEqxeV_ 0 4 394 2079 0 14 Dtool_hhEqxeV_ 311 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::write_model_flags
//       Access: Published
//  Description: Writes the <Model> flag and related flags to the
//               indicated ostream.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2144  3 out 1 2085  12 indent_level 1 2092  
371 14 Dtool_hhEqsgHb 0 4 395 2079 0 14 Dtool_hhEqsgHb 313 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::write_switch_flags
//       Access: Published
//  Description: Writes the <Switch> flag and related flags to the
//               indicated ostream.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2144  3 out 1 2085  12 indent_level 1 2092  
372 14 Dtool_hhEq0xU5 0 4 396 2079 0 14 Dtool_hhEq0xU5 317 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::write_object_types
//       Access: Published
//  Description: Writes just the <ObjectTypes> entries, if any, to the
//               indicated ostream.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2144  3 out 1 2085  12 indent_level 1 2092  
373 14 Dtool_hhEqIFLx 0 4 397 2079 0 14 Dtool_hhEqIFLx 272 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::write_decal_flags
//       Access: Published
//  Description: Writes the flags related to decaling, if any.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2144  3 out 1 2085  12 indent_level 1 2092  
374 14 Dtool_hhEql6kP 0 4 398 2079 0 14 Dtool_hhEql6kP 301 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::write_tags
//       Access: Published
//  Description: Writes just the <Tag> entries, if any, to the
//               indicated ostream.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2144  3 out 1 2085  12 indent_level 1 2092  
375 14 Dtool_hhEqeW5J 0 4 399 2079 0 14 Dtool_hhEqeW5J 344 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::write_render_mode
//       Access: Published
//  Description: Writes the flags inherited from EggRenderMode and
//               similar flags that control obscure render effects.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2144  3 out 1 2085  12 indent_level 1 2092  
376 14 Dtool_hhEqwL5B 0 6 400 2080 0 14 Dtool_hhEqwL5B 508 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::is_joint
//       Access: Published, Virtual
//  Description: Returns true if this particular node represents a
//               <Joint> entry or not.  This is a handy thing to know
//               since Joints are sorted to the end of their sibling
//               list when writing an egg file.  See
//               EggGroupNode::write().
//////////////////////////////////////////////////////////////////// 1 4 this 3 2144  
377 14 Dtool_hhEqBkMb 0 6 401 2098 0 14 Dtool_hhEqBkMb 554 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::determine_alpha_mode
//       Access: Published, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               or EggPrimitive or some such object at this level or
//               above this group that has an alpha_mode other than
//               AM_unspecified.  Returns a valid EggRenderMode pointer
//               if one is found, or NULL otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2195  
378 14 Dtool_hhEqmFzS 0 6 402 2098 0 14 Dtool_hhEqmFzS 566 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::determine_depth_write_mode
//       Access: Published, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               or EggPrimitive or some such object at this level or
//               above this group that has a depth_write_mode other
//               than DWM_unspecified.  Returns a valid EggRenderMode
//               pointer if one is found, or NULL otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2195  
379 14 Dtool_hhEqTTlV 0 6 403 2098 0 14 Dtool_hhEqTTlV 564 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::determine_depth_test_mode
//       Access: Published, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               or EggPrimitive or some such object at this level or
//               above this group that has a depth_test_mode other
//               than DTM_unspecified.  Returns a valid EggRenderMode
//               pointer if one is found, or NULL otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2195  
380 14 Dtool_hhEqVd5a 0 6 404 2098 0 14 Dtool_hhEqVd5a 563 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::determine_visibility_mode
//       Access: Published, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               or EggPrimitive or some such object at this level or
//               above this group that has a visibility_mode other
//               than VM_unspecified.  Returns a valid EggRenderMode
//               pointer if one is found, or NULL otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2195  
381 14 Dtool_hhEqRcRh 0 6 405 2098 0 14 Dtool_hhEqRcRh 540 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::determine_depth_offset
//       Access: Published, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               or EggPrimitive or some such object at this level or
//               above this group that has a depth_offset specified.
//               Returns a valid EggRenderMode pointer if one is found,
//               or NULL otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2195  
382 14 Dtool_hhEq76XI 0 6 406 2098 0 14 Dtool_hhEq76XI 536 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::determine_draw_order
//       Access: Published, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               or EggPrimitive or some such object at this level or
//               above this group that has a draw_order specified.
//               Returns a valid EggRenderMode pointer if one is found,
//               or NULL otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2195  
383 14 Dtool_hhEqoQnq 0 6 407 2098 0 14 Dtool_hhEqoQnq 523 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::determine_bin
//       Access: Published, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               or EggPrimitive or some such object at this level or
//               above this group that has a bin specified.  Returns a
//               valid EggRenderMode pointer if one is found, or NULL
//               otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2195  
384 14 Dtool_hhEqJ8J_ 0 6 408 2080 0 14 Dtool_hhEqJ8J_ 619 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::determine_indexed
//       Access: Published, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               at this level or above that has the "indexed" scalar
//               set.  Returns the value of the indexed scalar if it
//               is found, or false if it is not.
//
//               In other words, returns true if the "indexed" flag is
//               in effect for the indicated node, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2195  
385 14 Dtool_hhEqeytv 0 6 409 2080 0 14 Dtool_hhEqeytv 607 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::determine_decal
//       Access: Published, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               at this level or above that has the "decal" flag
//               set.  Returns the value of the decal flag if it
//               is found, or false if it is not.
//
//               In other words, returns true if the "decal" flag is
//               in effect for the indicated node, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2195  
386 14 Dtool_hhEq_8Pb 0 4 410 2079 0 14 Dtool_hhEq_8Pb 223 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_group_type
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2195  4 type 1 2010  
387 14 Dtool_hhEqCug2 0 6 411 2010 0 14 Dtool_hhEqCug2 707 // Filename: eggGroup.I
// Created by:  drose (16Jan99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_group_type
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2144  
388 14 Dtool_hhEqrrYW 0 6 412 2080 0 14 Dtool_hhEqrrYW 668 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::is_instance_type
//       Access: Published
//  Description: Returns true if this group is an instance type node;
//               i.e. it begins the root of a local coordinate space.
//               This is not related to instancing (multiple copies of
//               a node in a scene graph).
//
//               This also includes the case of the node including a
//               billboard flag without an explicit center, which
//               implicitly makes the node behave like an instance.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2144  
389 14 Dtool_hhEqPYft 0 4 413 2079 0 14 Dtool_hhEqPYft 227 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_billboard_type
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2195  4 type 1 2012  
390 14 Dtool_hhEqUh7T 0 6 414 2012 0 14 Dtool_hhEqUh7T 227 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_billboard_type
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2144  
391 14 Dtool_hhEqVkAl 0 4 415 2079 0 14 Dtool_hhEqVkAl 1120 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_billboard_center
//       Access: Published
//  Description: Sets the point around which the billboard will
//               rotate, if this node contains a billboard
//               specification.
//
//               If a billboard type is given but no billboard_center
//               is specified, then the group node is treated as an
//               <Instance>, and the billboard rotates around the
//               origin.  If, however, a billboard_center is
//               specified, then the group node is *not* treated as an
//               <Instance>, and the billboard rotates around the
//               specified point.
//
//               The point is in the same coordinate system as the
//               vertices of this node: usually global, but possibly
//               local if there is an <Instance> somewhere above.
//               Specifically, this is the coordinate system defined
//               by get_vertex_frame().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2195  16 billboard_center 1 2126  
392 14 Dtool_hhEqx2ed 0 4 416 2079 0 14 Dtool_hhEqx2ed 231 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::clear_billboard_center
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2195  
393 14 Dtool_hhEqVHfQ 0 6 417 2080 0 14 Dtool_hhEqVHfQ 229 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::has_billboard_center
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2144  
394 14 Dtool_hhEqyHSo 0 6 418 2126 0 14 Dtool_hhEqyHSo 229 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_billboard_center
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2144  
395 14 Dtool_hhEqx6Vi 0 4 419 2079 0 14 Dtool_hhEqx6Vi 220 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_cs_type
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2195  4 type 1 2013  
396 14 Dtool_hhEqvaDZ 0 6 420 2013 0 14 Dtool_hhEqvaDZ 220 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_cs_type
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2144  
397 14 Dtool_hhEqGbxk 0 4 421 2079 0 14 Dtool_hhEqGbxk 226 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_collide_flags
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2195  5 flags 1 2092  
398 14 Dtool_hhEqB6er 0 6 422 2014 0 14 Dtool_hhEqB6er 226 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_collide_flags
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2144  
399 14 Dtool_hhEqf_or 0 4 423 2079 0 14 Dtool_hhEqf_or 227 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_collision_name
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2195  14 collision_name 1 2084  
400 14 Dtool_hhEq2IvZ 0 4 424 2079 0 14 Dtool_hhEq2IvZ 229 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::clear_collision_name
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2195  
401 14 Dtool_hhEqW1Ru 0 6 425 2080 0 14 Dtool_hhEqW1Ru 227 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::has_collision_name
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2144  
402 14 Dtool_hhEqs1EG 0 6 426 2084 0 14 Dtool_hhEqs1EG 227 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_collision_name
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2144  
403 14 Dtool_hhEq1BYb 0 4 427 2079 0 14 Dtool_hhEq1BYb 221 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_dcs_type
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2195  4 type 1 2011  
404 14 Dtool_hhEq6COw 0 6 428 2011 0 14 Dtool_hhEq6COw 221 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_dcs_type
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2144  
405 14 Dtool_hhEqfCbY 0 6 429 2080 0 14 Dtool_hhEqfCbY 316 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::has_dcs_type
//       Access: Published
//  Description: Returns true if the specified DCS type is not
//               DC_none and not DC_unspecified.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2144  
406 14 Dtool_hhEqf8q2 0 4 430 2079 0 14 Dtool_hhEqf8q2 222 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_dart_type
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2195  4 type 1 2015  
407 14 Dtool_hhEqLvy6 0 6 431 2015 0 14 Dtool_hhEqLvy6 222 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_dart_type
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2144  
408 14 Dtool_hhEq41Ux 0 4 432 2079 0 14 Dtool_hhEq41Ux 224 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_switch_flag
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2195  4 flag 1 2080  
409 14 Dtool_hhEq0H1c 0 6 433 2080 0 14 Dtool_hhEq0H1c 224 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_switch_flag
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2144  
410 14 Dtool_hhEqlCF0 0 4 434 2079 0 14 Dtool_hhEqlCF0 223 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_switch_fps
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2195  3 fps 1 2007  
411 14 Dtool_hhEq8G_G 0 6 435 2007 0 14 Dtool_hhEq8G_G 223 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_switch_fps
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2144  
412 14 Dtool_hhEqAKpq 0 4 436 2079 0 14 Dtool_hhEqAKpq 224 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::add_object_type
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2195  11 object_type 1 2084  
413 14 Dtool_hhEqLFHb 0 4 437 2079 0 14 Dtool_hhEqLFHb 227 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::clear_object_types
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2195  
414 14 Dtool_hhEqJ86I 0 6 438 2092 0 14 Dtool_hhEqJ86I 229 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_num_object_types
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2144  
415 14 Dtool_hhEqa9XK 0 6 439 2084 0 14 Dtool_hhEqa9XK 224 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_object_type
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2144  5 index 1 2092  
416 14 Dtool_hhEqZ76F 0 6 440 2080 0 14 Dtool_hhEqZ76F 332 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::has_object_type
//       Access: Published
//  Description: Returns true if the indicated object type has been
//               added to the group, or false otherwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2144  11 object_type 1 2084  
417 14 Dtool_hhEqOHD5 0 6 441 2080 0 14 Dtool_hhEqOHD5 440 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::remove_object_type
//       Access: Published
//  Description: Removes the first instance of the indicated object
//               type from the group if it is present.  Returns true
//               if the object type was found and removed, false
//               otherwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2195  11 object_type 1 2084  
418 14 Dtool_hhEqGIqq 0 4 442 2079 0 14 Dtool_hhEqGIqq 223 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_model_flag
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2195  4 flag 1 2080  
419 14 Dtool_hhEqT2IL 0 6 443 2080 0 14 Dtool_hhEqT2IL 223 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_model_flag
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2144  
420 14 Dtool_hhEqxoGr 0 4 444 2079 0 14 Dtool_hhEqxoGr 225 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_texlist_flag
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2195  4 flag 1 2080  
421 14 Dtool_hhEqPvu3 0 6 445 2080 0 14 Dtool_hhEqPvu3 225 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_texlist_flag
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2144  
422 14 Dtool_hhEqSunb 0 4 446 2079 0 14 Dtool_hhEqSunb 223 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_nofog_flag
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2195  4 flag 1 2080  
423 14 Dtool_hhEqA4F8 0 6 447 2080 0 14 Dtool_hhEqA4F8 223 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_nofog_flag
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2144  
424 14 Dtool_hhEq_rVD 0 4 448 2079 0 14 Dtool_hhEq_rVD 223 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_decal_flag
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2195  4 flag 1 2080  
425 14 Dtool_hhEqhgzj 0 6 449 2080 0 14 Dtool_hhEqhgzj 223 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_decal_flag
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2144  
426 14 Dtool_hhEq_U5j 0 4 450 2079 0 14 Dtool_hhEq_U5j 224 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_direct_flag
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2195  4 flag 1 2080  
427 14 Dtool_hhEqn6bP 0 6 451 2080 0 14 Dtool_hhEqn6bP 224 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_direct_flag
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2144  
428 14 Dtool_hhEqQTF_ 0 4 452 2079 0 14 Dtool_hhEqQTF_ 224 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_portal_flag
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2195  4 flag 1 2080  
429 14 Dtool_hhEqkFnp 0 6 453 2080 0 14 Dtool_hhEqkFnp 224 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_portal_flag
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2144  
430 14 Dtool_hhEqU_FO 0 4 454 2079 0 14 Dtool_hhEqU_FO 226 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_occluder_flag
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2195  4 flag 1 2080  
431 14 Dtool_hhEqnIc_ 0 6 455 2080 0 14 Dtool_hhEqnIc_ 226 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_occluder_flag
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2144  
432 14 Dtool_hhEqivYc 0 4 456 2079 0 14 Dtool_hhEqivYc 227 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_polylight_flag
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2195  4 flag 1 2080  
433 14 Dtool_hhEqVOiF 0 6 457 2080 0 14 Dtool_hhEqVOiF 227 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_polylight_flag
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2144  
434 14 Dtool_hhEqeROZ 0 4 458 2079 0 14 Dtool_hhEqeROZ 335 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_indexed_flag
//       Access: Published
//  Description: If this flag is true, geometry at this node and below
//               will be generated as indexed geometry.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2195  4 flag 1 2080  
435 14 Dtool_hhEq1pLz 0 4 459 2079 0 14 Dtool_hhEq1pLz 227 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::clear_indexed_flag
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2195  
436 14 Dtool_hhEq_iEO 0 6 460 2080 0 14 Dtool_hhEq_iEO 225 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::has_indexed_flag
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2144  
437 14 Dtool_hhEqUi3l 0 6 461 2080 0 14 Dtool_hhEqUi3l 225 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_indexed_flag
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2144  
438 14 Dtool_hhEq1gfh 0 4 462 2079 0 14 Dtool_hhEq1gfh 225 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_collide_mask
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2195  4 mask 1 2196  
439 14 Dtool_hhEqL2rQ 0 4 463 2079 0 14 Dtool_hhEqL2rQ 227 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::clear_collide_mask
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2195  
440 14 Dtool_hhEqhy6F 0 6 464 2080 0 14 Dtool_hhEqhy6F 225 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::has_collide_mask
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2144  
441 14 Dtool_hhEqGxtd 0 7 465 2196 0 14 Dtool_hhEqGxtd 225 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_collide_mask
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2144  
442 14 Dtool_hhEqUUte 0 4 466 2079 0 14 Dtool_hhEqUUte 230 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_from_collide_mask
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2195  4 mask 1 2196  
443 14 Dtool_hhEqzsDo 0 4 467 2079 0 14 Dtool_hhEqzsDo 232 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::clear_from_collide_mask
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2195  
444 14 Dtool_hhEqPGMA 0 6 468 2080 0 14 Dtool_hhEqPGMA 230 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::has_from_collide_mask
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2144  
445 14 Dtool_hhEqkHBY 0 7 469 2196 0 14 Dtool_hhEqkHBY 230 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_from_collide_mask
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2144  
446 14 Dtool_hhEqJQ9_ 0 4 470 2079 0 14 Dtool_hhEqJQ9_ 230 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_into_collide_mask
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2195  4 mask 1 2196  
447 14 Dtool_hhEqnw2o 0 4 471 2079 0 14 Dtool_hhEqnw2o 232 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::clear_into_collide_mask
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2195  
448 14 Dtool_hhEqFwdg 0 6 472 2080 0 14 Dtool_hhEqFwdg 230 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::has_into_collide_mask
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2144  
449 14 Dtool_hhEqgwQ4 0 7 473 2196 0 14 Dtool_hhEqgwQ4 230 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_into_collide_mask
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2144  
450 14 Dtool_hhEqd41w 0 4 474 2079 0 14 Dtool_hhEqd41w 223 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_blend_mode
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2195  10 blend_mode 1 2016  
451 14 Dtool_hhEqrtNy 0 6 475 2016 0 14 Dtool_hhEqrtNy 223 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_blend_mode
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2144  
452 14 Dtool_hhEqpJnY 0 4 476 2079 0 14 Dtool_hhEqpJnY 228 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_blend_operand_a
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2195  15 blend_operand_a 1 2017  
453 14 Dtool_hhEqHARo 0 6 477 2017 0 14 Dtool_hhEqHARo 228 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_blend_operand_a
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2144  
454 14 Dtool_hhEqhOn0 0 4 478 2079 0 14 Dtool_hhEqhOn0 228 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_blend_operand_b
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2195  15 blend_operand_b 1 2017  
455 14 Dtool_hhEqI9RE 0 6 479 2017 0 14 Dtool_hhEqI9RE 228 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_blend_operand_b
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2144  
456 14 Dtool_hhEqzp1m 0 4 480 2079 0 14 Dtool_hhEqzp1m 224 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_blend_color
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2195  11 blend_color 1 2113  
457 14 Dtool_hhEq5NwH 0 4 481 2079 0 14 Dtool_hhEq5NwH 265 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::clear_blend_color
//       Access: Published
//  Description: Removes the blend color specification.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2195  
458 14 Dtool_hhEqTtqa 0 6 482 2080 0 14 Dtool_hhEqTtqa 310 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::has_blend_color
//       Access: Published
//  Description: Returns true if the blend color has been specified,
//               false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2144  
459 14 Dtool_hhEqstdy 0 6 483 2113 0 14 Dtool_hhEqstdy 324 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_blend_color
//       Access: Published
//  Description: Returns the blend color if one has been specified, or
//               (0, 0, 0, 0) if one has not.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2144  
460 14 Dtool_hhEqIRO1 0 4 484 2079 0 14 Dtool_hhEqIRO1 216 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_lod
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2195  3 lod 1 2189  
461 14 Dtool_hhEqq3tX 0 4 485 2079 0 14 Dtool_hhEqq3tX 218 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::clear_lod
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2195  
462 14 Dtool_hhEqXcWg 0 6 486 2080 0 14 Dtool_hhEqXcWg 216 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::has_lod
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2144  
463 14 Dtool_hhEqKcL4 0 7 487 2189 0 14 Dtool_hhEqKcL4 216 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_lod
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2144  
464 14 Dtool_hhEqAteX 0 4 488 2079 0 14 Dtool_hhEqAteX 878 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_tag
//       Access: Published
//  Description: Associates a user-defined value with a user-defined
//               key which is stored on the node.  This value has no
//               meaning to Panda; but it is stored indefinitely on
//               the node until it is requested again.  This value
//               will be copied to the PandaNode that is created for
//               this particular EggGroup if the egg file is loaded as
//               a scene.
//
//               Each unique key stores a different string value.
//               There is no effective limit on the number of
//               different keys that may be stored or on the length of
//               any one key's value.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2195  3 key 1 2084  5 value 1 2084  
465 14 Dtool_hhEqezZY 0 6 489 2084 0 14 Dtool_hhEqezZY 433 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_tag
//       Access: Published
//  Description: Retrieves the user-defined value that was previously
//               set on this node for the particular key, if any.  If
//               no value has been previously set, returns the empty
//               string.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2144  3 key 1 2084  
466 14 Dtool_hhEq7ymA 0 6 490 2080 0 14 Dtool_hhEq7ymA 404 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::has_tag
//       Access: Published
//  Description: Returns true if a value has been defined on this node
//               for the particular key (even if that value is the
//               empty string), or false if no value has been set.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2144  3 key 1 2084  
467 14 Dtool_hhEq6Cat 0 4 491 2079 0 14 Dtool_hhEq6Cat 397 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::clear_tag
//       Access: Published
//  Description: Removes the value defined for this key on this
//               particular node.  After a call to clear_tag(),
//               has_tag() will return false for the indicated key.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2195  3 key 1 2084  
468 14 Dtool_hhEqDa06 0 6 492 2174 0 14 Dtool_hhEqDa06 603 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_default_pose
//       Access: Published
//  Description: Returns a read-only accessor to the initial pose
//               transform.  This is the <DefaultPose> entry for a
//               Joint, and defines only the initial transform pose
//               for the unanimated joint; it has nothing to do with
//               the group's <Transform> entry, which defines the
//               (eventual) space of the group's vertices.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2144  
469 14 Dtool_hhEqsMDk 0 6 493 2173 0 14 Dtool_hhEqsMDk 605 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::modify_default_pose
//       Access: Published
//  Description: Returns a writable accessor to the initial pose
//               transform.  This is the <DefaultPose> entry for a
//               Joint, and defines only the initial transform pose
//               for the unanimated joint; it has nothing to do with
//               the group's <Transform> entry, which defines the
//               (eventual) space of the group's vertices.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2195  
470 14 Dtool_hhEq9f2J 0 4 494 2079 0 14 Dtool_hhEq9f2J 580 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_default_pose
//       Access: Published
//  Description: Replaces the initial pose transform.  This is the
//               <DefaultPose> entry for a Joint, and defines only the
//               initial transform pose for the unanimated joint; it
//               has nothing to do with the group's <Transform> entry,
//               which defines the (eventual) space of the group's
//               vertices.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2195  9 transform 1 2174  
471 14 Dtool_hhEq0e90 0 4 495 2079 0 14 Dtool_hhEq0e90 305 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::clear_default_pose
//       Access: Published
//  Description: Removes the initial pose transform.  See
//               set_default_pose().
//////////////////////////////////////////////////////////////////// 1 4 this 3 2195  
472 14 Dtool_hhEqXeBY 0 4 496 2079 0 14 Dtool_hhEqXeBY 0 2 4 this 3 2195  7 u_speed 1 2007  
473 14 Dtool_hhEqXGyh 0 4 497 2079 0 14 Dtool_hhEqXGyh 0 2 4 this 3 2195  7 v_speed 1 2007  
474 14 Dtool_hhEqXOjr 0 4 498 2079 0 14 Dtool_hhEqXOjr 0 2 4 this 3 2195  7 w_speed 1 2007  
475 14 Dtool_hhEqWmv6 0 4 499 2079 0 14 Dtool_hhEqWmv6 0 2 4 this 3 2195  7 r_speed 1 2007  
476 14 Dtool_hhEqZV09 0 6 500 2007 0 14 Dtool_hhEqZV09 0 1 4 this 3 2144  
477 14 Dtool_hhEqadlH 0 6 501 2007 0 14 Dtool_hhEqadlH 0 1 4 this 3 2144  
478 14 Dtool_hhEqalWR 0 6 502 2007 0 14 Dtool_hhEqalWR 0 1 4 this 3 2144  
479 14 Dtool_hhEqZ9ig 0 6 503 2007 0 14 Dtool_hhEqZ9ig 0 1 4 this 3 2144  
480 14 Dtool_hhEqSS3d 0 6 504 2080 0 14 Dtool_hhEqSS3d 0 1 4 this 3 2195  
481 14 Dtool_hhEqHB62 0 4 505 2079 0 14 Dtool_hhEqHB62 467 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::ref_vertex
//       Access: Published
//  Description: Adds the vertex to the set of those referenced by the
//               group, at the indicated membership level.  If the
//               vertex is already being referenced, increases the
//               membership amount by the indicated amount.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2195  4 vert 1 2135  10 membership 1 2007  
482 14 Dtool_hhEql5JZ 0 4 505 2079 0 14 Dtool_hhEql5JZ 467 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::ref_vertex
//       Access: Published
//  Description: Adds the vertex to the set of those referenced by the
//               group, at the indicated membership level.  If the
//               vertex is already being referenced, increases the
//               membership amount by the indicated amount.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2195  4 vert 1 2135  
483 14 Dtool_hhEqEYVk 0 4 506 2079 0 14 Dtool_hhEqEYVk 372 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::unref_vertex
//       Access: Published
//  Description: Removes the vertex from the set of those referenced
//               by the group.  Does nothing if the vertex is not
//               already reffed.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2195  4 vert 1 2135  
484 14 Dtool_hhEq7o8l 0 4 507 2079 0 14 Dtool_hhEq7o8l 273 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::unref_all_vertices
//       Access: Published
//  Description: Removes all vertices from the reference list.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2195  
485 14 Dtool_hhEqu4_n 0 6 508 2007 0 14 Dtool_hhEqu4_n 390 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_vertex_membership
//       Access: Published
//  Description: Returns the amount of membership of the indicated
//               vertex in this group.  If the vertex is not reffed by
//               the group, returns 0.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2144  4 vert 1 2136  
486 14 Dtool_hhEqcwbO 0 4 509 2079 0 14 Dtool_hhEqcwbO 340 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_vertex_membership
//       Access: Published
//  Description: Explicitly sets the net membership of the indicated
//               vertex in this group to the given value.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2195  4 vert 1 2135  10 membership 1 2007  
487 14 Dtool_hhEquK6m 0 4 510 2079 0 14 Dtool_hhEquK6m 450 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::steal_vrefs
//       Access: Published
//  Description: Moves all of the vertex references from the indicated
//               other group into this one.  If a given vertex was
//               previously shared by both groups, the relative
//               memberships will be summed.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2195  5 other 1 2195  
488 14 Dtool_hhEqhtdv 0 4 511 2079 0 14 Dtool_hhEqhtdv 0 1 4 this 3 2144  
489 14 Dtool_hhEq93Zh 0 4 512 2079 0 14 Dtool_hhEq93Zh 464 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::add_group_ref
//       Access: Published
//  Description: Adds a new <Ref> entry to the group.  This declares
//               an internal reference to another node, and is used to
//               implement scene-graph instancing; it is only valid if
//               the group_type is GT_instance.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2195  5 group 1 2195  
490 14 Dtool_hhEqakcS 0 6 513 2092 0 14 Dtool_hhEqakcS 321 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_num_group_refs
//       Access: Published
//  Description: Returns the number of <Ref> entries within this
//               group.  See add_group_ref().
//////////////////////////////////////////////////////////////////// 1 4 this 3 2144  
491 14 Dtool_hhEqg97e 0 7 514 2195 1365 14 Dtool_hhEqg97e 308 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_group_ref
//       Access: Published
//  Description: Returns the nth <Ref> entry within this group.  See
//               add_group_ref().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2144  1 n 1 2092  
492 14 Dtool_hhEqaZFu 0 4 515 2079 0 14 Dtool_hhEqaZFu 311 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::remove_group_ref
//       Access: Published
//  Description: Removes the nth <Ref> entry within this group.  See
//               add_group_ref().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2195  1 n 1 2092  
493 14 Dtool_hhEqGl6H 0 4 516 2079 0 14 Dtool_hhEqGl6H 315 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::clear_group_refs
//       Access: Published
//  Description: Removes all of the <Ref> entries within this group.
//               See add_group_ref().
//////////////////////////////////////////////////////////////////// 1 4 this 3 2195  
494 14 Dtool_hhEq4npg 0 6 517 2010 0 14 Dtool_hhEq4npg 415 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::string_group_type
//       Access: Published, Static
//  Description: Returns the GroupType value associated with the given
//               string representation, or GT_invalid if the string
//               does not match any known GroupType value.
//////////////////////////////////////////////////////////////////// 1 6 strval 1 2084  
495 14 Dtool_hhEqHRvQ 0 6 518 2015 0 14 Dtool_hhEqHRvQ 409 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::string_dart_type
//       Access: Published, Static
//  Description: Returns the DartType value associated with the given
//               string representation, or DT_none if the string
//               does not match any known DartType value.
//////////////////////////////////////////////////////////////////// 1 6 strval 1 2084  
496 14 Dtool_hhEqSWba 0 6 519 2011 0 14 Dtool_hhEqSWba 413 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::string_dcs_type
//       Access: Published, Static
//  Description: Returns the DCSType value associated with the given
//               string representation, or DC_unspecified if the
//               string does not match any known DCSType value.
//////////////////////////////////////////////////////////////////// 1 6 strval 1 2084  
497 14 Dtool_hhEq5ugT 0 6 520 2012 0 14 Dtool_hhEq5ugT 424 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::string_billboard_type
//       Access: Published, Static
//  Description: Returns the BillboardType value associated with the
//               given string representation, or BT_none if the string
//               does not match any known BillboardType value.
//////////////////////////////////////////////////////////////////// 1 6 strval 1 2084  
498 14 Dtool_hhEqJTFH 0 6 521 2013 0 14 Dtool_hhEqJTFH 428 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::string_cs_type
//       Access: Published, Static
//  Description: Returns the CollisionSolidType value associated with the
//               given string representation, or CST_none if the string
//               does not match any known CollisionSolidType value.
//////////////////////////////////////////////////////////////////// 1 6 strval 1 2084  
499 14 Dtool_hhEqm6lB 0 6 522 2014 0 14 Dtool_hhEqm6lB 546 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::string_collide_flags
//       Access: Published, Static
//  Description: Returns the CollideFlags value associated with the
//               given string representation, or CF_none if the string
//               does not match any known CollideFlags value.  This
//               only recognizes a single keyword; it does not attempt
//               to parse a string of keywords.
//////////////////////////////////////////////////////////////////// 1 6 strval 1 2084  
500 14 Dtool_hhEqZVpI 0 6 523 2016 0 14 Dtool_hhEqZVpI 406 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::string_blend_mode
//       Access: Published, Static
//  Description: Returns the BlendMode value associated with the
//               given string representation, or BM_none if the string
//               does not match any known BlendMode.
//////////////////////////////////////////////////////////////////// 1 6 strval 1 2084  
501 14 Dtool_hhEq6SMq 0 6 524 2017 0 14 Dtool_hhEq6SMq 415 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::string_blend_operand
//       Access: Published, Static
//  Description: Returns the BlendOperand value associated with the
//               given string representation, or BO_none if the string
//               does not match any known BlendOperand.
//////////////////////////////////////////////////////////////////// 1 6 strval 1 2084  
502 14 Dtool_hhEqSfTP 0 7 525 2075 0 14 Dtool_hhEqSfTP 0 0 
503 14 Dtool_hhEqrm2D 0 7 374 2091 1079 14 Dtool_hhEqrm2D 0 1 4 this 3 2195  
504 14 Dtool_hhEqFwi7 0 7 375 2195 1365 14 Dtool_hhEqFwi7 0 1 4 this 3 2091  
505 14 Dtool_hhEqyqbi 0 6 376 2098 0 14 Dtool_hhEqyqbi 0 1 4 this 3 2195  
506 14 Dtool_hhEqj6hd 0 7 377 2195 1365 14 Dtool_hhEqj6hd 0 1 4 this 3 2098  
507 14 Dtool_hhEqo_zk 0 6 378 2173 0 14 Dtool_hhEqo_zk 0 1 4 this 3 2195  
508 14 Dtool_hhEqrQmh 0 7 379 2195 1365 14 Dtool_hhEqrQmh 0 1 4 this 3 2173  
509 14 Dtool_hhEqE04m 0 7 527 2200 1505 14 Dtool_hhEqE04m 220 ////////////////////////////////////////////////////////////////////
//     Function: EggBin::Copy constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2198  
510 14 Dtool_hhEq5VW_ 0 7 527 2200 1505 14 Dtool_hhEq5VW_ 229 ////////////////////////////////////////////////////////////////////
//     Function: EggBin::EggGroup copy constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2144  
511 14 Dtool_hhEqxysi 0 7 527 2200 1505 14 Dtool_hhEqxysi 215 ////////////////////////////////////////////////////////////////////
//     Function: EggBin::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 name 1 2084  
512 14 Dtool_hhEqcVXw 0 7 527 2200 1505 14 Dtool_hhEqcVXw 215 ////////////////////////////////////////////////////////////////////
//     Function: EggBin::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
513 14 Dtool_hhEq35b4 0 4 528 2079 0 14 Dtool_hhEq35b4 218 ////////////////////////////////////////////////////////////////////
//     Function: EggBin::set_bin_number
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2200  10 bin_number 1 2092  
514 14 Dtool_hhEq39QH 0 6 529 2092 0 14 Dtool_hhEq39QH 218 ////////////////////////////////////////////////////////////////////
//     Function: EggBin::get_bin_number
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2198  
515 14 Dtool_hhEqDJum 0 7 530 2075 0 14 Dtool_hhEqDJum 0 0 
516 14 Dtool_hhEq8q6p 0 6 533 2092 0 14 Dtool_hhEq8q6p 460 ////////////////////////////////////////////////////////////////////
//     Function: EggBinMaker::make_bins
//       Access: Public
//  Description: The main entry point to EggBinMaker.  Walks the egg
//               scene graph beginning at the indicated root node, and
//               moves all binnable nodes into EggBin objects.
//               Returns the number of EggBins created.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2201  10 root_group 1 2091  
517 14 Dtool_hhEqQ2a2 0 4 534 2079 0 14 Dtool_hhEqQ2a2 419 ////////////////////////////////////////////////////////////////////
//     Function: EggBinMaker::prepare_node
//       Access: Public, Virtual
//  Description: May be overridden in derived classes to perform some
//               setup work as each node is encountered.  This will be
//               called once for each node in the egg hierarchy.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2201  4 node 1 2088  
518 14 Dtool_hhEq_qCk 0 6 535 2092 0 14 Dtool_hhEq_qCk 0 2 4 this 3 2201  4 node 1 2089  
519 14 Dtool_hhEqZCvy 0 6 536 2080 0 14 Dtool_hhEqZCvy 669 ////////////////////////////////////////////////////////////////////
//     Function: EggBinMaker::sorts_less
//       Access: Public, Virtual
//  Description: May be overridden in derived classes to create
//               additional bins within a particular bin number, based
//               on some arbitrary property of nodes.  This function
//               establishes an arbitrary but fixed ordering between
//               nodes; if two nodes do not sort to the same position,
//               different bins are created for each one (with the
//               same bin number on each bin).
//////////////////////////////////////////////////////////////////// 4 4 this 3 2201  10 bin_number 1 2092  1 a 1 2089  1 b 1 2089  
520 14 Dtool_hhEqGhQi 0 6 537 2080 0 14 Dtool_hhEqGhQi 398 ////////////////////////////////////////////////////////////////////
//     Function: EggBinMaker::collapse_group
//       Access: Public, Virtual
//  Description: May be overridden in derived classes to specify
//               whether a particular group node, apparently
//               redundant, may be safely collapsed out.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2201  5 group 1 2144  10 bin_number 1 2092  
521 14 Dtool_hhEqHt3e 0 6 538 2084 0 14 Dtool_hhEqHt3e 381 ////////////////////////////////////////////////////////////////////
//     Function: EggBinMaker::get_bin_name
//       Access: Public, Virtual
//  Description: May be overridden in derived classes to define a name
//               for each new bin, based on its bin number, and a
//               sample child.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2201  10 bin_number 1 2092  5 child 1 2089  
522 14 Dtool_hhEqnETC 0 7 539 2200 1505 14 Dtool_hhEqnETC 655 ////////////////////////////////////////////////////////////////////
//     Function: EggBinMaker::make_bin
//       Access: Public, Virtual
//  Description: May be overridden in derived classes to construct a
//               new EggBin object (or some derived class, if needed),
//               and preload some initial data into as required.
//
//               child is an arbitrary child of the bin, and
//               collapse_from is the group the bin is being collapsed
//               with, if any (implying collapse_group() returned
//               true), or NULL if not.
//////////////////////////////////////////////////////////////////// 4 4 this 3 2201  10 bin_number 1 2092  5 child 1 2089  13 collapse_from 1 2195  
523 14 Dtool_hhEq_kc_ 0 7 540 2075 0 14 Dtool_hhEq_kc_ 0 0 
524 14 Dtool_hhEqljwn 0 7 542 2204 1520 14 Dtool_hhEqljwn 224 ////////////////////////////////////////////////////////////////////
//     Function: EggComment::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2202  
525 14 Dtool_hhEqPzAM 0 7 542 2204 1520 14 Dtool_hhEqPzAM 705 // Filename: eggComment.I
// Created by:  drose (20Jan99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggComment::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 9 node_name 1 2084  7 comment 1 2084  
526 14 Dtool_hhEqAmi9 0 7 543 2204 1520 14 Dtool_hhEqAmi9 232 ////////////////////////////////////////////////////////////////////
//     Function: EggComment::Copy assignment operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2204  4 copy 1 2202  
527 14 Dtool_hhEqokdP 0 7 543 2204 1520 14 Dtool_hhEqokdP 227 ////////////////////////////////////////////////////////////////////
//     Function: EggComment::Assignment operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2204  7 comment 1 2084  
528 14 Dtool_hhEq_5Ek 0 4 545 2079 0 14 Dtool_hhEq_5Ek 219 ////////////////////////////////////////////////////////////////////
//     Function: EggComment::set_comment
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2204  7 comment 1 2084  
529 14 Dtool_hhEqgAcI 0 6 546 2084 0 14 Dtool_hhEqgAcI 219 ////////////////////////////////////////////////////////////////////
//     Function: EggComment::set_comment
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2202  
530 14 Dtool_hhEqikvz 0 7 547 2075 0 14 Dtool_hhEqikvz 0 0 
531 14 Dtool_hhEqJt6A 0 6 544 2084 0 14 Dtool_hhEqJt6A 232 ////////////////////////////////////////////////////////////////////
//     Function: EggComment::String typecast operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2202  
532 14 Dtool_hhEq_1Ie 0 7 550 2205 1528 14 Dtool_hhEq_1Ie 237 ////////////////////////////////////////////////////////////////////
//     Function: EggFilenameNode::Copy assignment operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2205  4 copy 1 2206  
533 14 Dtool_hhEqXj7g 0 6 551 2084 0 14 Dtool_hhEqXj7g 297 ////////////////////////////////////////////////////////////////////
//     Function: EggFilenameNode::get_default_extension
//       Access: Public, Virtual
//  Description: Returns the default extension for this filename type.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2206  
534 14 Dtool_hhEqXJxZ 0 6 552 2159 0 14 Dtool_hhEqXJxZ 276 ////////////////////////////////////////////////////////////////////
//     Function: EggFilenameNode::get_filename
//       Access: Public
//  Description: Returns a nonmodifiable reference to the filename.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2206  
535 14 Dtool_hhEqA0g1 0 4 553 2079 0 14 Dtool_hhEqA0g1 225 ////////////////////////////////////////////////////////////////////
//     Function: EggFilenameNode::set_filename
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2205  8 filename 1 2159  
536 14 Dtool_hhEq8Thq 0 6 554 2159 0 14 Dtool_hhEq8Thq 822 ////////////////////////////////////////////////////////////////////
//     Function: EggFilenameNode::get_fullpath
//       Access: Public
//  Description: Returns the full pathname to the file, if it is
//               known; otherwise, returns the same thing as
//               get_filename().
//
//               This function simply returns whatever was set by the
//               last call to set_fullpath().  This string is not
//               written to the egg file; its main purpose is to
//               record the full path to a filename (for instance, a
//               texture filename) if it is known, for egg structures
//               that are generated in-memory and then immediately
//               converted to a scene graph.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2206  
537 14 Dtool_hhEqI1PG 0 4 555 2079 0 14 Dtool_hhEqI1PG 316 ////////////////////////////////////////////////////////////////////
//     Function: EggFilenameNode::set_fullpath
//       Access: Public
//  Description: Records the full pathname to the file, for the
//               benefit of get_fullpath().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2205  8 fullpath 1 2159  
538 14 Dtool_hhEqMHF_ 0 7 556 2075 0 14 Dtool_hhEqMHF_ 0 0 
539 14 Dtool_hhEqhng8 0 7 565 2210 1537 14 Dtool_hhEqhng8 227 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::Copy constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2208  
540 14 Dtool_hhEqzo9s 0 7 565 2210 1537 14 Dtool_hhEqzo9s 222 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 9 tref_name 1 2084  8 filename 1 2159  
541 14 Dtool_hhEq0TMq 0 7 566 2210 1537 14 Dtool_hhEq0TMq 235 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::Copy assignment operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2210  4 copy 1 2208  
542 14 Dtool_hhEqBpY9 0 4 568 2079 0 14 Dtool_hhEqBpY9 315 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::write
//       Access: Public, Virtual
//  Description: Writes the texture definition to the indicated output
//               stream in Egg format.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2208  3 out 1 2085  12 indent_level 1 2092  
543 14 Dtool_hhEqUj_f 0 6 570 2080 0 14 Dtool_hhEqUj_f 1471 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::is_equivalent_to
//       Access: Published
//  Description: Returns true if the two textures are equivalent in
//               all relevant properties (according to eq), false
//               otherwise.
//
//               The Equivalence parameter, eq, should be set to the
//               bitwise OR of the following properties, according to
//               what you consider relevant:
//
//               EggTexture::E_basename:
//                 The basename part of the texture filename, without
//                 the directory prefix *or* the filename extension.
//
//               EggTexture::E_extension:
//                 The extension part of the texture filename.
//
//               EggTexture::E_dirname:
//                 The directory prefix of the texture filename.
//
//               EggTexture::E_complete_filename:
//                 The union of the above three; that is, the complete
//                 filename, with directory, basename, and extension.
//
//               EggTexture::E_transform:
//                 The texture matrix.
//
//               EggTexture::E_attributes:
//                 All remaining texture attributes (mode, mipmap,
//                 etc.) except TRef name.
//
//               EggTexture::E_tref_name:
//                 The TRef name.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2208  5 other 1 2208  2 eq 1 2092  
544 14 Dtool_hhEqzib2 0 6 571 2080 0 14 Dtool_hhEqzib2 502 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::sorts_less_than
//       Access: Published
//  Description: An ordering operator to compare two textures for
//               sorting order.  This imposes an arbitrary ordering
//               useful to identify unique textures, according to the
//               indicated Equivalence factor.  See
//               is_equivalent_to().
//////////////////////////////////////////////////////////////////// 3 4 this 3 2208  5 other 1 2208  2 eq 1 2092  
545 14 Dtool_hhEqmUrS 0 6 572 2080 0 14 Dtool_hhEqmUrS 537 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::has_alpha_channel
//       Access: Published
//  Description: Given the number of color components (channels) in
//               the image file as actually read from the disk, return
//               true if this texture seems to have an alpha channel
//               or not.  This depends on the EggTexture's format as
//               well as the number of channels.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2208  14 num_components 1 2092  
546 14 Dtool_hhEqyubp 0 4 586 2079 0 14 Dtool_hhEqyubp 713 // Filename: eggTexture.I
// Created by:  drose (18Jan99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_texture_type
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2210  12 texture_type 1 2024  
547 14 Dtool_hhEqippZ 0 6 587 2024 0 14 Dtool_hhEqippZ 227 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_texture_type
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2208  
548 14 Dtool_hhEqN8dF 0 4 588 2079 0 14 Dtool_hhEqN8dF 221 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_format
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2210  6 format 1 2025  
549 14 Dtool_hhEqkehA 0 6 589 2025 0 14 Dtool_hhEqkehA 221 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_format
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2208  
550 14 Dtool_hhEquZpO 0 4 590 2079 0 14 Dtool_hhEquZpO 231 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_compression_mode
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2210  4 mode 1 2026  
551 14 Dtool_hhEqc1f8 0 6 591 2026 0 14 Dtool_hhEqc1f8 231 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_compression_mode
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2208  
552 14 Dtool_hhEqDsmU 0 4 592 2079 0 14 Dtool_hhEqDsmU 224 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_wrap_mode
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2210  4 mode 1 2027  
553 14 Dtool_hhEq8r0r 0 6 593 2027 0 14 Dtool_hhEq8r0r 224 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_wrap_mode
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2208  
554 14 Dtool_hhEqgtfQ 0 4 594 2079 0 14 Dtool_hhEqgtfQ 221 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_wrap_u
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2210  4 mode 1 2027  
555 14 Dtool_hhEqefXa 0 6 595 2027 0 14 Dtool_hhEqefXa 345 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_wrap_u
//       Access: Published
//  Description: Returns the amount specified for U wrap.  This may be
//               unspecified, even if there is an overall wrap value.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2208  
556 14 Dtool_hhEqHY2e 0 6 596 2027 0 14 Dtool_hhEqHY2e 439 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::determine_wrap_u
//       Access: Published
//  Description: Determines the appropriate wrap in the U direction.
//               This is different from get_wrap_u() in that if the U
//               wrap is unspecified, it returns the overall wrap
//               value.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2208  
557 14 Dtool_hhEqglQa 0 4 597 2079 0 14 Dtool_hhEqglQa 221 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_wrap_v
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2210  4 mode 1 2027  
558 14 Dtool_hhEqeXIk 0 6 598 2027 0 14 Dtool_hhEqeXIk 345 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_wrap_v
//       Access: Published
//  Description: Returns the amount specified for V wrap.  This may be
//               unspecified, even if there is an overall wrap value.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2208  
559 14 Dtool_hhEq9buP 0 6 599 2027 0 14 Dtool_hhEq9buP 439 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::determine_wrap_v
//       Access: Published
//  Description: Determines the appropriate wrap in the V direction.
//               This is different from get_wrap_v() in that if the V
//               wrap is unspecified, it returns the overall wrap
//               value.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2208  
560 14 Dtool_hhEqgdAk 0 4 600 2079 0 14 Dtool_hhEqgdAk 221 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_wrap_w
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2210  4 mode 1 2027  
561 14 Dtool_hhEqev5t 0 6 601 2027 0 14 Dtool_hhEqev5t 345 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_wrap_w
//       Access: Published
//  Description: Returns the amount specified for W wrap.  This may be
//               unspecified, even if there is an overall wrap value.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2208  
562 14 Dtool_hhEqrbmA 0 6 602 2027 0 14 Dtool_hhEqrbmA 439 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::determine_wrap_w
//       Access: Published
//  Description: Determines the appropriate wrap in the W direction.
//               This is different from get_wrap_w() in that if the W
//               wrap is unspecified, it returns the overall wrap
//               value.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2208  
563 14 Dtool_hhEqqq6L 0 4 603 2079 0 14 Dtool_hhEqqq6L 224 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_minfilter
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2210  4 type 1 2028  
564 14 Dtool_hhEqmUr5 0 6 604 2028 0 14 Dtool_hhEqmUr5 224 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_minfilter
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2208  
565 14 Dtool_hhEq6hL5 0 4 605 2079 0 14 Dtool_hhEq6hL5 224 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_magfilter
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2210  4 type 1 2028  
566 14 Dtool_hhEqsd7m 0 6 606 2028 0 14 Dtool_hhEqsd7m 224 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_magfilter
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2208  
567 14 Dtool_hhEqKwkc 0 4 607 2079 0 14 Dtool_hhEqKwkc 381 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_anisotropic_degree
//       Access: Published
//  Description: Sets the degree of anisotropic filtering for this
//               texture.  1 is off; higher levels indicate filtering
//               in effect.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2210  18 anisotropic_degree 1 2092  
568 14 Dtool_hhEqc_H7 0 4 608 2079 0 14 Dtool_hhEqc_H7 321 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::clear_anisotropic_degree
//       Access: Published
//  Description: Removes the specification of anisotropic filtering
//               from the texture.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2210  
569 14 Dtool_hhEqvvBL 0 6 609 2080 0 14 Dtool_hhEqvvBL 382 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::has_anisotropic_degree
//       Access: Published
//  Description: Returns true if a value for the anisotropic filtering
//               degree has been specified for this texture, false
//               otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2208  
570 14 Dtool_hhEqrl66 0 6 610 2092 0 14 Dtool_hhEqrl66 386 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_anisotropic_degree
//       Access: Published
//  Description: Returns the anisotropic filtering degree that has
//               been specified for this texture, or 0 if nothing has
//               been specified.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2208  
571 14 Dtool_hhEq5MIV 0 4 611 2079 0 14 Dtool_hhEq5MIV 223 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_env_type
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2210  4 type 1 2029  
572 14 Dtool_hhEqm3Xk 0 6 612 2029 0 14 Dtool_hhEqm3Xk 223 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_env_type
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2208  
573 14 Dtool_hhEq2l6J 0 6 613 2080 0 14 Dtool_hhEq2l6J 415 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::affects_polygon_alpha
//       Access: Published
//  Description: Returns true if this texture's environment type or
//               combine mode allows the texture to have an effect on
//               the polygon's alpha values, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2208  
574 14 Dtool_hhEqc01z 0 4 614 2079 0 14 Dtool_hhEqc01z 227 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_combine_mode
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 2210  7 channel 1 2031  2 cm 1 2030  
575 14 Dtool_hhEqmQoH 0 6 615 2030 0 14 Dtool_hhEqmQoH 227 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_combine_mode
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2208  7 channel 1 2031  
576 14 Dtool_hhEq0GKW 0 4 616 2079 0 14 Dtool_hhEq0GKW 229 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_combine_source
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 4 4 this 3 2210  7 channel 1 2031  1 n 1 2092  2 cs 1 2033  
577 14 Dtool_hhEq7qA3 0 6 617 2033 0 14 Dtool_hhEq7qA3 229 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_combine_source
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 2208  7 channel 1 2031  1 n 1 2092  
578 14 Dtool_hhEqBmvl 0 4 618 2079 0 14 Dtool_hhEqBmvl 230 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_combine_operand
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 4 4 this 3 2210  7 channel 1 2031  1 n 1 2092  2 co 1 2034  
579 14 Dtool_hhEqDf6C 0 6 619 2034 0 14 Dtool_hhEqDf6C 230 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_combine_operand
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 2208  7 channel 1 2031  1 n 1 2092  
580 14 Dtool_hhEq8Qj0 0 4 620 2079 0 14 Dtool_hhEq8Qj0 1011 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_saved_result
//       Access: Published
//  Description: Sets the saved_result flag.  When this is true, the
//               output of this stage is not part of the normal
//               pipeline--that is, it will not be supplied as the
//               "previous" source for the next texture stage--but it
//               will instead be supplied as the "last_saved_result"
//               source for any future stages, until the next
//               TextureStage with a saved_result set true is
//               encountered.
//
//               This can be used to reuse the results of this texture
//               stage as input to more than one stage later in the
//               pipeline.
//
//               The last texture in the pipeline (the one with the
//               highest sort value) should not have this flag set.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2210  12 saved_result 1 2080  
581 14 Dtool_hhEqm3S1 0 6 621 2080 0 14 Dtool_hhEqm3S1 322 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_saved_result
//       Access: Published
//  Description: Returns the current setting of the saved_result flag.
//               See set_saved_result().
//////////////////////////////////////////////////////////////////// 1 4 this 3 2208  
582 14 Dtool_hhEq2fGJ 0 4 622 2079 0 14 Dtool_hhEq2fGJ 222 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_tex_gen
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2210  7 tex_gen 1 2035  
583 14 Dtool_hhEqNv5D 0 6 623 2035 0 14 Dtool_hhEqNv5D 222 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_tex_gen
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2208  
584 14 Dtool_hhEqJp2q 0 4 624 2079 0 14 Dtool_hhEqJp2q 228 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_quality_level
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2210  13 quality_level 1 2036  
585 14 Dtool_hhEqDQFW 0 6 625 2036 0 14 Dtool_hhEqDQFW 228 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_quality_level
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2208  
586 14 Dtool_hhEqe7XX 0 4 626 2079 0 14 Dtool_hhEqe7XX 778 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_stage_name
//       Access: Published
//  Description: Specifies the particular TextureStage this texture
//               will be rendered on by name.  If this is omitted, the
//               texture will be rendered on the default TextureStage,
//               unless some other stage-specific property is
//               specificied, in which case the texture will be
//               rendered on a TextureStage with the same name as the
//               tref.  This is in support of multitexturing.
//
//               Each different TextureStage in the world must be
//               uniquely named.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2210  10 stage_name 1 2084  
587 14 Dtool_hhEqiXJB 0 4 627 2079 0 14 Dtool_hhEqiXJB 273 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::clear_stage_name
//       Access: Published
//  Description: Removes the named TextureStage specification.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2210  
588 14 Dtool_hhEqDGGJ 0 6 628 2080 0 14 Dtool_hhEqDGGJ 336 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::has_stage_name
//       Access: Published
//  Description: Returns true if a stage name has been explicitly
//               specified for this texture, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2208  
589 14 Dtool_hhEq2aA5 0 6 629 2084 0 14 Dtool_hhEq2aA5 392 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_stage_name
//       Access: Published
//  Description: Returns the stage name that has been specified for
//               this texture, or the tref name if no texture stage
//               has explicitly been specified.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2208  
590 14 Dtool_hhEqUObk 0 4 630 2079 0 14 Dtool_hhEqUObk 435 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_priority
//       Access: Published
//  Description: Sets the importance of this texture with respect to
//               other textures also applied on the same geometry.
//               This is only meaningful in the presence of
//               multitexturing.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2210  8 priority 1 2092  
591 14 Dtool_hhEqnuob 0 4 631 2079 0 14 Dtool_hhEqnuob 345 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::clear_priority
//       Access: Published
//  Description: Removes the specification of multitexture priority
//               from the texture.  The default priority value is 0.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2210  
592 14 Dtool_hhEqlRHd 0 6 632 2080 0 14 Dtool_hhEqlRHd 371 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::has_priority
//       Access: Published
//  Description: Returns true if a priority value for multitexture
//               importance has been specified for the texture, false
//               otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2208  
593 14 Dtool_hhEqlpBN 0 6 633 2092 0 14 Dtool_hhEqlpBN 386 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_priority
//       Access: Published
//  Description: Returns the multitexture importance value that has been
//               specified for the texture, or 0 if no priority value has
//               been specified.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2208  
594 14 Dtool_hhEq1PlD 0 4 634 2079 0 14 Dtool_hhEq1PlD 220 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_color
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2210  5 color 1 2113  
595 14 Dtool_hhEqlDQn 0 4 635 2079 0 14 Dtool_hhEqlDQn 222 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::clear_color
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2210  
596 14 Dtool_hhEqYqny 0 6 636 2080 0 14 Dtool_hhEqYqny 303 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::has_color
//       Access: Published
//  Description: Returns true if a blend color has been
//               specified for the texture.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2208  
597 14 Dtool_hhEqZ8gi 0 6 637 2113 0 14 Dtool_hhEqZ8gi 315 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_color
//       Access: Published
//  Description: Returns the blend color if one has been
//               specified, or (0, 0, 0, 1) otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2208  
598 14 Dtool_hhEqBnrh 0 4 638 2079 0 14 Dtool_hhEqBnrh 227 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_border_color
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2210  12 border_color 1 2113  
599 14 Dtool_hhEqlnCT 0 4 639 2079 0 14 Dtool_hhEqlnCT 229 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::clear_border_color
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2210  
600 14 Dtool_hhEq3XPC 0 6 640 2080 0 14 Dtool_hhEq3XPC 311 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::has_border_color
//       Access: Published
//  Description: Returns true if a border color has been
//               specified for the texture.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2208  
601 14 Dtool_hhEq67Jy 0 6 641 2113 0 14 Dtool_hhEq67Jy 323 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_border_color
//       Access: Published
//  Description: Returns the border color if one has been
//               specified, or (0, 0, 0, 1) otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2208  
602 14 Dtool_hhEqbLpF 0 4 642 2079 0 14 Dtool_hhEqbLpF 593 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_uv_name
//       Access: Published
//  Description: Specifies the named set of texture coordinates that
//               this texture will use when it is applied to geometry.
//               Geometry may have multiple sets of texture
//               coordinates defined, by name.
//
//               If this is not specified for a particular texture,
//               the default set of texture coordinates will be used.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2210  7 uv_name 1 2084  
603 14 Dtool_hhEqA8X4 0 4 643 2079 0 14 Dtool_hhEqA8X4 398 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::clear_uv_name
//       Access: Published
//  Description: Removes the restriction to a particular named set of
//               texture coordinates and restores the texture to using
//               the default texture coordinates.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2210  
604 14 Dtool_hhEqY3F6 0 6 644 2080 0 14 Dtool_hhEqY3F6 336 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::has_uv_name
//       Access: Published
//  Description: Returns true if a texcoord name has been explicitly
//               specified for this texture, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2208  
605 14 Dtool_hhEqSj_p 0 6 645 2084 0 14 Dtool_hhEqSj_p 395 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_uv_name
//       Access: Published
//  Description: Returns the texcoord name that has been specified for
//               this texture, or the empty string if no texcoord name
//               has explicitly been specified.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2208  
606 14 Dtool_hhEqypUu 0 4 646 2079 0 14 Dtool_hhEqypUu 493 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_rgb_scale
//       Access: Published
//  Description: Sets an additional factor that will scale all three
//               r, g, b components after the texture has been
//               applied.  This is used only when a combine mode is in
//               effect.
//
//               The only legal values are 1, 2, or 4.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2210  9 rgb_scale 1 2092  
607 14 Dtool_hhEqgzo5 0 4 647 2079 0 14 Dtool_hhEqgzo5 325 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::clear_rgb_scale
//       Access: Published
//  Description: Removes the rgb_scale from the texture and restores
//               it to the default value of 1.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2210  
608 14 Dtool_hhEqLbSS 0 6 648 2080 0 14 Dtool_hhEqLbSS 323 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::has_rgb_scale
//       Access: Published
//  Description: Returns true if an rgb_scale has been specified for
//               the texture, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2208  
609 14 Dtool_hhEqvnMC 0 6 649 2092 0 14 Dtool_hhEqvnMC 374 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_rgb_scale
//       Access: Published
//  Description: Returns the rgb_scale value that has been
//               specified for the texture, or 1 if no rgb_scale value
//               has been specified.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2208  
610 14 Dtool_hhEqIHVT 0 4 650 2079 0 14 Dtool_hhEqIHVT 468 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_alpha_scale
//       Access: Published
//  Description: Sets an additional factor that will scale the
//               alpha component after the texture has been applied.
//               This is used only when a combine mode is in effect.
//
//               The only legal values are 1, 2, or 4.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2210  11 alpha_scale 1 2092  
611 14 Dtool_hhEq2A36 0 4 651 2079 0 14 Dtool_hhEq2A36 329 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::clear_alpha_scale
//       Access: Published
//  Description: Removes the alpha_scale from the texture and restores
//               it to the default value of 1.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2210  
612 14 Dtool_hhEqjpwB 0 6 652 2080 0 14 Dtool_hhEqjpwB 327 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::has_alpha_scale
//       Access: Published
//  Description: Returns true if an alpha_scale has been specified for
//               the texture, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2208  
613 14 Dtool_hhEqoRrx 0 6 653 2092 0 14 Dtool_hhEqoRrx 380 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_alpha_scale
//       Access: Published
//  Description: Returns the alpha_scale value that has been
//               specified for the texture, or 1 if no alpha_scale
//               value has been specified.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2208  
614 14 Dtool_hhEqHJuv 0 4 654 2079 0 14 Dtool_hhEqHJuv 516 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_alpha_filename
//       Access: Published
//  Description: Specifies a separate file that will be loaded in with
//               the 1- or 3-component texture and applied as the
//               alpha channel.  This is useful when loading textures
//               from file formats that do not support alpha, for
//               instance jpg.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2210  8 filename 1 2159  
615 14 Dtool_hhEqdOt2 0 4 655 2079 0 14 Dtool_hhEqdOt2 231 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::clear_alpha_filename
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2210  
616 14 Dtool_hhEqHCpy 0 6 656 2080 0 14 Dtool_hhEqHCpy 381 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::has_alpha_filename
//       Access: Published
//  Description: Returns true if a separate file for the alpha
//               component has been applied, false otherwise.  See
//               set_alpha_filename().
//////////////////////////////////////////////////////////////////// 1 4 this 3 2208  
617 14 Dtool_hhEqUIki 0 6 657 2159 0 14 Dtool_hhEqUIki 419 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_alpha_filename
//       Access: Published
//  Description: Returns the separate file assigned for the alpha
//               channel.  It is an error to call this unless
//               has_alpha_filename() returns true.  See set_alpha_filename().
//////////////////////////////////////////////////////////////////// 1 4 this 3 2208  
618 14 Dtool_hhEqOxMH 0 4 658 2079 0 14 Dtool_hhEqOxMH 326 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_alpha_fullpath
//       Access: Published
//  Description: Records the full pathname to the file, for the
//               benefit of get_alpha_fullpath().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2210  8 fullpath 1 2159  
619 14 Dtool_hhEqDkA6 0 6 659 2159 0 14 Dtool_hhEqDkA6 817 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_alpha_fullpath
//       Access: Published
//  Description: Returns the full pathname to the alpha file, if it is
//               known; otherwise, returns the same thing as
//               get_alpha_filename().
//
//               This function simply returns whatever was set by the
//               last call to set_alpha_fullpath().  This string is
//               not written to the egg file; its main purpose is to
//               record the full path to the alpha filename if it is
//               known, for egg structures that are generated
//               in-memory and then immediately converted to a scene
//               graph.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2208  
620 14 Dtool_hhEqidkB 0 4 660 2079 0 14 Dtool_hhEqidkB 742 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_alpha_file_channel
//       Access: Published
//  Description: If a separate alpha-file is specified, this indicates
//               which channel number should be extracted from this
//               file to derive the alpha channel for the final image.
//               The default is 0, which means the grayscale
//               combination of r, g, b.  Otherwise, this should be
//               the 1-based channel number, for instance 1, 2, or 3
//               for r, g, or b, respectively, or 4 for the alpha
//               channel of a four-component image.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2210  18 alpha_file_channel 1 2092  
621 14 Dtool_hhEqXTSW 0 4 661 2079 0 14 Dtool_hhEqXTSW 336 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::clear_alpha_file_channel
//       Access: Published
//  Description: Removes the specification of a particular channel to
//               use from the alpha-file image.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2210  
622 14 Dtool_hhEqER_v 0 6 662 2080 0 14 Dtool_hhEqER_v 349 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::has_alpha_file_channel
//       Access: Published
//  Description: Returns true if a particular channel has been
//               specified for the alpha-file image, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2208  
623 14 Dtool_hhEqK55f 0 6 663 2092 0 14 Dtool_hhEqK55f 435 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_alpha_file_channel
//       Access: Published
//  Description: Returns the particular channel that has been
//               specified for the alpha-file image, or 0 if no
//               channel has been specified.  See
//               set_alpha_file_channel().
//////////////////////////////////////////////////////////////////// 1 4 this 3 2208  
624 14 Dtool_hhEqn7Pw 0 4 664 2079 0 14 Dtool_hhEqn7Pw 698 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_multiview
//       Access: Published
//  Description: Sets the multiview flag.
//
//               If multiview is true, the filename should contain a
//               hash mark ('#'), which will be filled in with the
//               view number; and a multiview texture will be defined
//               with a series of images, one for each view.
//
//               A multiview texture is most often used for stereo
//               textures, but other uses are also possible, such as
//               for texture animation.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2210  9 multiview 1 2080  
625 14 Dtool_hhEq1wWz 0 6 665 2080 0 14 Dtool_hhEq1wWz 313 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_multiview
//       Access: Published
//  Description: Returns the current setting of the multiview flag.
//               See set_multiview().
//////////////////////////////////////////////////////////////////// 1 4 this 3 2208  
626 14 Dtool_hhEqMdWq 0 4 666 2079 0 14 Dtool_hhEqMdWq 456 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_num_views
//       Access: Published
//  Description: When loading a 3-D multiview texture, this parameter
//               is necessary to specify how many views will be
//               expected.  The z size is determined implicitly from
//               the number of images loaded.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2210  9 num_views 1 2092  
627 14 Dtool_hhEqgMo2 0 4 667 2079 0 14 Dtool_hhEqgMo2 321 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::clear_num_views
//       Access: Published
//  Description: Removes the specification of the number of views
//               for a 3-D multiview texture.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2210  
628 14 Dtool_hhEqxXUO 0 6 668 2080 0 14 Dtool_hhEqxXUO 361 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::has_num_views
//       Access: Published
//  Description: Returns true if the number of views has been
//               specified for the 3-D multiview texture, false
//               otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2208  
629 14 Dtool_hhEq9RP_ 0 6 669 2092 0 14 Dtool_hhEq9RP_ 342 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_num_views
//       Access: Published
//  Description: Returns the specified number of views specified for
//               the 3-D multiview texture.  See set_num_views().
//////////////////////////////////////////////////////////////////// 1 4 this 3 2208  
630 14 Dtool_hhEqz4qj 0 4 670 2079 0 14 Dtool_hhEqz4qj 912 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_read_mipmaps
//       Access: Published
//  Description: Sets the read_mipmaps flag.
//
//               If read_mipmaps is true, the filename should contain
//               a hash mark ('#'), which will be filled in with the
//               mipmap level number; and the texture will be defined
//               with a series of images, one for each mipmap level.
//
//               If the filename is of a type that already requires a
//               hash mark, such as a cube map or a 3-d texture, then
//               the filename should now require two hash marks, and
//               the first one indicates the mipmap level number,
//               while the second indicates the face number or 3-d
//               level number.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2210  12 read_mipmaps 1 2080  
631 14 Dtool_hhEquJck 0 6 671 2080 0 14 Dtool_hhEquJck 322 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_read_mipmaps
//       Access: Published
//  Description: Returns the current setting of the read_mipmaps flag.
//               See set_read_mipmaps().
//////////////////////////////////////////////////////////////////// 1 4 this 3 2208  
632 14 Dtool_hhEqSUMy 0 4 672 2079 0 14 Dtool_hhEqSUMy 437 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::clear_multitexture
//       Access: Published
//  Description: Resets the multitexture flags set by
//               multitexture_over().  After this call,
//               get_multitexture() will return false, and
//               get_multitexture_sort() will return 0.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2210  
633 14 Dtool_hhEq3XDK 0 6 673 2080 0 14 Dtool_hhEq3XDK 771 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::multitexture_over
//       Access: Published
//  Description: Indicates that this texture should be layered on top
//               of the other texture.  This will guarantee that
//               this->get_multitexture_sort() >
//               other->get_multitexture_sort(), at least until
//               clear_multitexture() is called on either one.
//
//               The return value is true if successful, or false if
//               there is a failure because the other texture was
//               already layered on top of this one (or there is a
//               three- or more-way cycle).
//////////////////////////////////////////////////////////////////// 2 4 this 3 2210  5 other 1 2210  
634 14 Dtool_hhEqjbNS 0 6 674 2092 0 14 Dtool_hhEqjbNS 628 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_multitexture_sort
//       Access: Published
//  Description: Returns an integer that represents the depth to which
//               this texture is layered on all other textures in the
//               egg file.  In general, if texture A is layered over
//               texture B, then sort(A) > sort(B).  If texture A is
//               never layered over any other texture, then sort(A) ==
//               0.  More than that is difficult to guarantee.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2208  
635 14 Dtool_hhEq_TOq 0 6 675 2024 0 14 Dtool_hhEq_TOq 427 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::string_texture_type
//       Access: Published, Static
//  Description: Returns the Texture_ype value associated with the given
//               string representation, or TT_unspecified if the string
//               does not match any known TextureType value.
//////////////////////////////////////////////////////////////////// 1 6 string 1 2084  
636 14 Dtool_hhEq0Tc1 0 6 676 2025 0 14 Dtool_hhEq0Tc1 410 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::string_format
//       Access: Published, Static
//  Description: Returns the Format value associated with the given
//               string representation, or F_unspecified if the string
//               does not match any known Format value.
//////////////////////////////////////////////////////////////////// 1 6 string 1 2084  
637 14 Dtool_hhEqCmfX 0 6 677 2026 0 14 Dtool_hhEqCmfX 435 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::string_compression_mode
//       Access: Published, Static
//  Description: Returns the CompressionMode value associated with the given
//               string representation, or CM_default if the string
//               does not match any known CompressionMode value.
//////////////////////////////////////////////////////////////////// 1 6 string 1 2084  
638 14 Dtool_hhEq_IIf 0 6 678 2027 0 14 Dtool_hhEq_IIf 418 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::string_wrap_mode
//       Access: Published, Static
//  Description: Returns the WrapMode value associated with the given
//               string representation, or WM_unspecified if the string
//               does not match any known WrapMode value.
//////////////////////////////////////////////////////////////////// 1 6 string 1 2084  
639 14 Dtool_hhEq3nqW 0 6 679 2028 0 14 Dtool_hhEq3nqW 424 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::string_filter_type
//       Access: Published, Static
//  Description: Returns the FilterType value associated with the given
//               string representation, or FT_unspecified if the string
//               does not match any known FilterType value.
//////////////////////////////////////////////////////////////////// 1 6 string 1 2084  
640 14 Dtool_hhEq_bFc 0 6 680 2029 0 14 Dtool_hhEq_bFc 415 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::string_env_type
//       Access: Published, Static
//  Description: Returns the EnvType value associated with the given
//               string representation, or ET_unspecified if the string
//               does not match any known EnvType value.
//////////////////////////////////////////////////////////////////// 1 6 string 1 2084  
641 14 Dtool_hhEqjFLT 0 6 681 2030 0 14 Dtool_hhEqjFLT 427 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::string_combine_mode
//       Access: Published, Static
//  Description: Returns the CombineMode value associated with the given
//               string representation, or CM_unspecified if the string
//               does not match any known CombineMode value.
//////////////////////////////////////////////////////////////////// 1 6 string 1 2084  
642 14 Dtool_hhEqEKtK 0 6 682 2033 0 14 Dtool_hhEqEKtK 433 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::string_combine_source
//       Access: Published, Static
//  Description: Returns the CombineSource value associated with the given
//               string representation, or CS_unspecified if the string
//               does not match any known CombineSource value.
//////////////////////////////////////////////////////////////////// 1 6 string 1 2084  
643 14 Dtool_hhEqnTQ1 0 6 683 2034 0 14 Dtool_hhEqnTQ1 436 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::string_combine_operand
//       Access: Published, Static
//  Description: Returns the CombineOperand value associated with the given
//               string representation, or CO_unspecified if the string
//               does not match any known CombineOperand value.
//////////////////////////////////////////////////////////////////// 1 6 string 1 2084  
644 14 Dtool_hhEqyeH3 0 6 684 2035 0 14 Dtool_hhEqyeH3 412 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::string_tex_gen
//       Access: Published, Static
//  Description: Returns the TexGen value associated with the given
//               string representation, or ET_unspecified if the string
//               does not match any known TexGen value.
//////////////////////////////////////////////////////////////////// 1 6 string 1 2084  
645 14 Dtool_hhEq1vdm 0 6 685 2036 0 14 Dtool_hhEq1vdm 418 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::string_quality_level
//       Access: Published, Static
//  Description: Returns the TexGen value associated with the given
//               string representation, or ET_unspecified if the string
//               does not match any known TexGen value.
//////////////////////////////////////////////////////////////////// 1 6 string 1 2084  
646 14 Dtool_hhEqTKZT 0 7 686 2075 0 14 Dtool_hhEqTKZT 0 0 
647 14 Dtool_hhEqBT72 0 7 559 2205 1528 14 Dtool_hhEqBT72 0 1 4 this 3 2210  
648 14 Dtool_hhEqWvPr 0 7 560 2210 1537 14 Dtool_hhEqWvPr 0 1 4 this 3 2205  
649 14 Dtool_hhEq2rIs 0 6 561 2098 0 14 Dtool_hhEq2rIs 0 1 4 this 3 2210  
650 14 Dtool_hhEq5AMp 0 7 562 2210 1537 14 Dtool_hhEq5AMp 0 1 4 this 3 2098  
651 14 Dtool_hhEqQ2JC 0 6 563 2173 0 14 Dtool_hhEqQ2JC 0 1 4 this 3 2210  
652 14 Dtool_hhEqlj8D 0 7 564 2210 1537 14 Dtool_hhEqlj8D 0 1 4 this 3 2173  
653 14 Dtool_hhEq4BtE 0 7 688 2213 1671 14 Dtool_hhEq4BtE 225 ////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2211  
654 14 Dtool_hhEq9ThA 0 7 688 2213 1671 14 Dtool_hhEq9ThA 220 ////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 9 mref_name 1 2084  
655 14 Dtool_hhEq7WW0 0 6 690 2080 0 14 Dtool_hhEq7WW0 784 ////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::is_equivalent_to
//       Access: Public
//  Description: Returns true if the two materials are equivalent in
//               all relevant properties (according to eq), false
//               otherwise.
//
//               The Equivalence parameter, eq, should be set to the
//               bitwise OR of the following properties, according to
//               what you consider relevant:
//
//               EggMaterial::E_attributes:
//                 All material attributes (diff, spec,
//                 etc.) except MRef name.
//
//               EggMaterial::E_mref_name:
//                 The MRef name.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2211  5 other 1 2211  2 eq 1 2092  
656 14 Dtool_hhEqOiSX 0 6 691 2080 0 14 Dtool_hhEqOiSX 502 ////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::sorts_less_than
//       Access: Public
//  Description: An ordering operator to compare two materials for
//               sorting order.  This imposes an arbitrary ordering
//               useful to identify unique materials, according to the
//               indicated Equivalence factor.  See
//               is_equivalent_to().
//////////////////////////////////////////////////////////////////// 3 4 this 3 2211  5 other 1 2211  2 eq 1 2092  
657 14 Dtool_hhEq2XHn 0 4 692 2079 0 14 Dtool_hhEq2XHn 704 // Filename: eggMaterial.I
// Created by:  drose (29Jan99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::set_diff
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2213  4 diff 1 2113  
658 14 Dtool_hhEqpXQH 0 4 693 2079 0 14 Dtool_hhEqpXQH 219 ////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::clear_diff
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2213  
659 14 Dtool_hhEq5VsI 0 6 694 2080 0 14 Dtool_hhEq5VsI 217 ////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::has_diff
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2211  
660 14 Dtool_hhEqVUXF 0 7 695 2112 0 14 Dtool_hhEqVUXF 360 ////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::get_diff
//       Access: Public
//  Description: It is legal to call this even if has_diff() returns
//               false.  If so, it simply returns the default diff
//               color.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2211  
661 14 Dtool_hhEqkoW3 0 4 696 2079 0 14 Dtool_hhEqkoW3 216 ////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::set_amb
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2213  3 amb 1 2113  
662 14 Dtool_hhEqM1fj 0 4 697 2079 0 14 Dtool_hhEqM1fj 218 ////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::clear_amb
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2213  
663 14 Dtool_hhEqAF9W 0 6 698 2080 0 14 Dtool_hhEqAF9W 216 ////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::has_amb
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2211  
664 14 Dtool_hhEq6EmT 0 7 699 2112 0 14 Dtool_hhEq6EmT 357 ////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::get_amb
//       Access: Public
//  Description: It is legal to call this even if has_amb() returns
//               false.  If so, it simply returns the default amb
//               color.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2211  
665 14 Dtool_hhEqBinD 0 4 700 2079 0 14 Dtool_hhEqBinD 217 ////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::set_emit
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2213  4 emit 1 2113  
666 14 Dtool_hhEqho4b 0 4 701 2079 0 14 Dtool_hhEqho4b 219 ////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::clear_emit
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2213  
667 14 Dtool_hhEqQHMl 0 6 702 2080 0 14 Dtool_hhEqQHMl 217 ////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::has_emit
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2211  
668 14 Dtool_hhEq6G3h 0 7 703 2112 0 14 Dtool_hhEq6G3h 360 ////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::get_emit
//       Access: Public
//  Description: It is legal to call this even if has_emit() returns
//               false.  If so, it simply returns the default emit
//               color.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2211  
669 14 Dtool_hhEqLAce 0 4 704 2079 0 14 Dtool_hhEqLAce 217 ////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::set_spec
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2213  4 spec 1 2113  
670 14 Dtool_hhEq_Bc2 0 4 705 2079 0 14 Dtool_hhEq_Bc2 219 ////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::clear_spec
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2213  
671 14 Dtool_hhEqNpCA 0 6 706 2080 0 14 Dtool_hhEqNpCA 217 ////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::has_spec
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2211  
672 14 Dtool_hhEq0ot8 0 7 707 2112 0 14 Dtool_hhEq0ot8 360 ////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::get_spec
//       Access: Public
//  Description: It is legal to call this even if has_spec() returns
//               false.  If so, it simply returns the default spec
//               color.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2211  
673 14 Dtool_hhEqifeq 0 4 708 2079 0 14 Dtool_hhEqifeq 222 ////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::set_shininess
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2213  9 shininess 1 2007  
674 14 Dtool_hhEqNivw 0 4 709 2079 0 14 Dtool_hhEqNivw 224 ////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::clear_shininess
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2213  
675 14 Dtool_hhEqqZE6 0 6 710 2080 0 14 Dtool_hhEqqZE6 222 ////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::has_shininess
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2211  
676 14 Dtool_hhEq8bv2 0 6 711 2007 0 14 Dtool_hhEq8bv2 222 ////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::get_shininess
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2211  
677 14 Dtool_hhEqJOXd 0 4 712 2079 0 14 Dtool_hhEqJOXd 218 ////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::set_local
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2213  5 local 1 2080  
678 14 Dtool_hhEq0Bui 0 4 713 2079 0 14 Dtool_hhEq0Bui 220 ////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::clear_local
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2213  
679 14 Dtool_hhEqmJXP 0 6 714 2080 0 14 Dtool_hhEqmJXP 218 ////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::has_local
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2211  
680 14 Dtool_hhEqcKAM 0 6 715 2080 0 14 Dtool_hhEqcKAM 218 ////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::get_local
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2211  
681 14 Dtool_hhEq6GjJ 0 7 716 2075 0 14 Dtool_hhEq6GjJ 0 0 
682 14 Dtool_hhEqhJqk 0 7 726 2151 1679 14 Dtool_hhEqhJqk 237 ////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::Copy assignment operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2151  4 copy 1 2146  
683 14 Dtool_hhEq70HD 0 6 728 2098 0 14 Dtool_hhEq70HD 562 ////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::determine_alpha_mode
//       Access: Published, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               or EggPrimitive or some such object at this level or
//               above this primitive that has an alpha_mode other than
//               AM_unspecified.  Returns a valid EggRenderMode pointer
//               if one is found, or NULL otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2151  
684 14 Dtool_hhEq6tkm 0 6 729 2098 0 14 Dtool_hhEq6tkm 569 ////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::determine_depth_write_mode
//       Access: Published, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               or EggPrimitive or some such object at this level or
//               above this node that has a depth_write_mode other than
//               DWM_unspecified.  Returns a valid EggRenderMode pointer
//               if one is found, or NULL otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2151  
685 14 Dtool_hhEqIAv2 0 6 730 2098 0 14 Dtool_hhEqIAv2 567 ////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::determine_depth_test_mode
//       Access: Published, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               or EggPrimitive or some such object at this level or
//               above this node that has a depth_test_mode other than
//               DTM_unspecified.  Returns a valid EggRenderMode pointer
//               if one is found, or NULL otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2151  
686 14 Dtool_hhEqUKF_ 0 6 731 2098 0 14 Dtool_hhEqUKF_ 566 ////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::determine_visibility_mode
//       Access: Published, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               or EggPrimitive or some such object at this level or
//               above this node that has a visibility_mode other than
//               VM_unspecified.  Returns a valid EggRenderMode pointer
//               if one is found, or NULL otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2151  
687 14 Dtool_hhEqf3fD 0 6 732 2098 0 14 Dtool_hhEqf3fD 548 ////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::determine_depth_offset
//       Access: Published, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               or EggPrimitive or some such object at this level or
//               above this primitive that has a depth_offset specified.
//               Returns a valid EggRenderMode pointer if one is found,
//               or NULL otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2151  
688 14 Dtool_hhEqJZ7Z 0 6 733 2098 0 14 Dtool_hhEqJZ7Z 544 ////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::determine_draw_order
//       Access: Published, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               or EggPrimitive or some such object at this level or
//               above this primitive that has a draw_order specified.
//               Returns a valid EggRenderMode pointer if one is found,
//               or NULL otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2151  
689 14 Dtool_hhEqSQGc 0 6 734 2098 0 14 Dtool_hhEqSQGc 531 ////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::determine_bin
//       Access: Published, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               or EggPrimitive or some such object at this level or
//               above this primitive that has a bin specified.  Returns a
//               valid EggRenderMode pointer if one is found, or NULL
//               otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2151  
690 14 Dtool_hhEqAN7z 0 6 735 2084 0 14 Dtool_hhEqAN7z 498 ////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::get_sort_name
//       Access: Published
//  Description: Returns the name of the primitive for the purposes of
//               sorting primitives into different groups, if there is
//               one.
//
//               Presently, this is defined as the primitive name
//               itself, unless it begins with a digit.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2146  
691 14 Dtool_hhEqFdVA 0 6 736 2040 0 14 Dtool_hhEqFdVA 1114 ////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::get_shading
//       Access: Published, Virtual
//  Description: Returns the shading properties apparent on this
//               particular primitive.  This returns S_per_vertex if
//               the vertices have colors or normals (and they are not
//               all the same values), or for a simple primitive,
//               S_overall otherwise.  A composite primitive may also
//               return S_per_face if the individual component
//               primitives have colors or normals that are not all
//               the same values.
//
//               To get the most accurate results, you should call
//               clear_shading() on all connected primitives (or on
//               all primitives in the egg file), followed by
//               get_shading() on each primitive.  You may find it
//               easiest to call these methods on the EggData root
//               node (they are defined on EggGroupNode).
//////////////////////////////////////////////////////////////////// 1 4 this 3 2146  
692 14 Dtool_hhEqO_bp 0 4 737 2079 0 14 Dtool_hhEqO_bp 385 ////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::clear_connected_shading
//       Access: Published
//  Description: Resets the connected_shading member in this
//               primitive, so that get_connected_shading() will
//               recompute a new value.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2151  
693 14 Dtool_hhEq7_i5 0 6 738 2040 0 14 Dtool_hhEq7_i5 852 ////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::get_connected_shading
//       Access: Published
//  Description: Determines what sort of shading properties this
//               primitive's connected neighbors have.
//
//               To get the most accurate results, you should first
//               call clear_connected_shading() on all connected
//               primitives (or on all primitives in the egg file).
//               It might also be a good idea to call
//               remove_unused_vertices() to ensure proper
//               connectivity.
//
//               You may find it easiest to call these other methods
//               on the EggData root node (they are defined on
//               EggGroupNode).
//////////////////////////////////////////////////////////////////// 1 4 this 3 2146  
694 14 Dtool_hhEqxMIe 0 4 739 2079 0 14 Dtool_hhEqxMIe 494 ////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::set_texture
//       Access: Published
//  Description: Replaces the current list of textures with the
//               indicated texture.
//
//               This method is deprecated and is used in support of
//               single-texturing only.  Please use the multitexture
//               variant add_texture instead.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2151  7 texture 1 2210  
695 14 Dtool_hhEqCDRS 0 6 740 2080 0 14 Dtool_hhEqCDRS 515 ////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::has_texture
//       Access: Published
//  Description: Returns true if the primitive has any textures
//               specified, false otherwise.
//
//               This method is deprecated and is used in support of
//               single-texturing only.  New code should be written to
//               use the multitexture variants instead.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2146  
696 14 Dtool_hhEqnWlz 0 6 740 2080 0 14 Dtool_hhEqnWlz 326 ////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::has_texture
//       Access: Published
//  Description: Returns true if the primitive has the particular
//               indicated texture, false otherwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2146  7 texture 1 2210  
697 14 Dtool_hhEq2fun 0 7 741 2210 1537 14 Dtool_hhEq2fun 543 ////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::get_texture
//       Access: Published
//  Description: Returns the first texture on the primitive, if any,
//               or NULL if there are no textures on the primitive.
//
//               This method is deprecated and is used in support of
//               single-texturing only.  New code should be written to
//               use the multitexture variants instead.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2146  
698 14 Dtool_hhEqoFbC 0 7 741 2210 1537 14 Dtool_hhEqoFbC 305 ////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::get_texture
//       Access: Published
//  Description: Returns the nth texture that has been applied to the
//               primitive.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2146  1 n 1 2092  
699 14 Dtool_hhEqf0zv 0 4 742 2079 0 14 Dtool_hhEqf0zv 549 ////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::add_texture
//       Access: Published
//  Description: Applies the indicated texture to the primitive.
//
//               Note that, in the case of multiple textures being
//               applied to a single primitive, the order in which the
//               textures are applied does not affect the rendering
//               order; use EggTexture::set_sort() to specify that.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2151  7 texture 1 2210  
700 14 Dtool_hhEqhV0K 0 4 743 2079 0 14 Dtool_hhEqhV0K 268 ////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::clear_texture
//       Access: Published
//  Description: Removes any texturing from the primitive.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2151  
701 14 Dtool_hhEqL1FR 0 6 744 2092 0 14 Dtool_hhEqL1FR 303 ////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::get_num_textures
//       Access: Published
//  Description: Returns the number of textures applied to the
//               primitive.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2146  
702 14 Dtool_hhEqLGBt 0 4 745 2079 0 14 Dtool_hhEqLGBt 274 ////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::set_material
//       Access: Published
//  Description: Applies the indicated material to the primitive.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2151  8 material 1 2213  
703 14 Dtool_hhEq4kT7 0 4 746 2079 0 14 Dtool_hhEq4kT7 268 ////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::clear_material
//       Access: Published
//  Description: Removes any material from the primitive.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2151  
704 14 Dtool_hhEqElax 0 7 747 2213 1671 14 Dtool_hhEqElax 326 ////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::get_material
//       Access: Published
//  Description: Returns a pointer to the applied material, or NULL if
//               there is no material applied.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2146  
705 14 Dtool_hhEqYE8b 0 6 748 2080 0 14 Dtool_hhEqYE8b 406 ////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::has_material
//       Access: Published
//  Description: Returns true if the primitive is materiald (and
//               get_material() will return a real pointer), false
//               otherwise (and get_material() will return NULL).
//////////////////////////////////////////////////////////////////// 1 4 this 3 2146  
706 14 Dtool_hhEqeofj 0 4 749 2079 0 14 Dtool_hhEqeofj 466 ////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::set_bface_flag
//       Access: Published
//  Description: Sets the backfacing flag of the polygon.  If this is
//               true, the polygon will be rendered so that both faces
//               are visible; if it is false, only the front face of
//               the polygon will be visible.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2151  4 flag 1 2080  
707 14 Dtool_hhEqcCgN 0 6 750 2080 0 14 Dtool_hhEqcCgN 313 ////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::get_bface_flag
//       Access: Published
//  Description: Retrieves the backfacing flag of the polygon.  See
//               set_bface_flag().
//////////////////////////////////////////////////////////////////// 1 4 this 3 2146  
708 14 Dtool_hhEq8Cxv 0 4 751 2079 0 14 Dtool_hhEq8Cxv 307 ////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::copy_attributes
//       Access: Published
//  Description: Copies the rendering attributes from the indicated
//               primitive.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2151  5 other 1 2106  
709 14 Dtool_hhEqLo5X 0 4 751 2079 0 14 Dtool_hhEqLo5X 307 ////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::copy_attributes
//       Access: Published
//  Description: Copies the rendering attributes from the indicated
//               primitive.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2151  5 other 1 2146  
710 14 Dtool_hhEqgHBP 0 6 752 2080 0 14 Dtool_hhEqgHBP 588 ////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::has_vertex_normal
//       Access: Published
//  Description: Returns true if any vertex on the primitive has a
//               specific normal set, false otherwise.
//
//               If you call unify_attributes() first, this will also
//               return false even if all the vertices were set to the
//               same value (since unify_attributes() removes
//               redundant vertex properties).
//////////////////////////////////////////////////////////////////// 1 4 this 3 2146  
711 14 Dtool_hhEqzlJw 0 6 753 2080 0 14 Dtool_hhEqzlJw 586 ////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::has_vertex_color
//       Access: Published
//  Description: Returns true if any vertex on the primitive has a
//               specific color set, false otherwise.
//
//               If you call unify_attributes() first, this will also
//               return false even if all the vertices were set to the
//               same value (since unify_attributes() removes
//               redundant vertex properties).
//////////////////////////////////////////////////////////////////// 1 4 this 3 2146  
712 14 Dtool_hhEqLGjU 0 4 754 2079 0 14 Dtool_hhEqLGjU 1216 ////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::unify_attributes
//       Access: Published, Virtual
//  Description: If the shading property is S_per_vertex, ensures that
//               all vertices have a normal and a color, and the
//               overall primitive does not.
//
//               If the shading property is S_per_face, and this is a
//               composite primitive, ensures that all components have
//               a normal and a color, and the vertices and overall
//               primitive do not.  (If this is a simple primitive,
//               S_per_face works the same as S_overall, below).
//
//               If the shading property is S_overall, ensures that no
//               vertices or components have a normal or a color, and
//               the overall primitive does (if any exists at all).
//
//               After this call, either the primitive will have
//               normals or its vertices will, but not both.  Ditto
//               for colors.
//
//               This may create redundant vertices in the vertex
//               pool.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2151  7 shading 1 2040  
713 14 Dtool_hhEqKP88 0 4 755 2079 0 14 Dtool_hhEqKP88 689 ////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::apply_last_attribute
//       Access: Published, Virtual
//  Description: Sets the last vertex of the triangle (or each
//               component) to the primitive normal and/or color, if
//               the primitive is flat-shaded.  This reflects the
//               OpenGL convention of storing flat-shaded properties on
//               the last vertex, although it is not usually a
//               convention in Egg.
//
//               This may introduce redundant vertices to the vertex
//               pool.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2151  
714 14 Dtool_hhEqgkRY 0 4 756 2079 0 14 Dtool_hhEqgkRY 693 ////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::apply_first_attribute
//       Access: Published, Virtual
//  Description: Sets the first vertex of the triangle (or each
//               component) to the primitive normal and/or color, if
//               the primitive is flat-shaded.  This reflects the
//               DirectX convention of storing flat-shaded properties on
//               the first vertex, although it is not usually a
//               convention in Egg.
//
//               This may introduce redundant vertices to the vertex
//               pool.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2151  
715 14 Dtool_hhEq5FGb 0 4 757 2079 0 14 Dtool_hhEq5FGb 499 ////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::post_apply_flat_attribute
//       Access: Published, Virtual
//  Description: Intended as a followup to apply_last_attribute(),
//               this also sets an attribute on the first vertices of
//               the primitive, if they don't already have an
//               attribute set, just so they end up with *something*.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2151  
716 14 Dtool_hhEqGw4a 0 4 758 2079 0 14 Dtool_hhEqGw4a 481 ////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::reverse_vertex_ordering
//       Access: Published, Virtual
//  Description: Reverses the ordering of the vertices in this
//               primitive, if appropriate, in order to change the
//               direction the polygon appears to be facing.  Does not
//               adjust the surface normal, if any.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2151  
717 14 Dtool_hhEq0Gh8 0 6 759 2080 0 14 Dtool_hhEq0Gh8 550 ////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::cleanup
//       Access: Published, Virtual
//  Description: Cleans up modeling errors in whatever context this
//               makes sense.  For instance, for a polygon, this calls
//               remove_doubled_verts(true).  For a point, it calls
//               remove_nonunique_verts().  Returns true if the
//               primitive is valid, or false if it is degenerate.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2151  
718 14 Dtool_hhEqwSZ1 0 4 760 2079 0 14 Dtool_hhEqwSZ1 945 ////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::remove_doubled_verts
//       Access: Published
//  Description: Certain kinds of primitives, particularly polygons,
//               don't like to have the same vertex repeated
//               consecutively.  Unfortunately, some modeling programs
//               (like MultiGen) make this an easy mistake to make.
//
//               It's handy to have a function to remove these
//               redundant vertices.  If closed is true, it also
//               checks that the first and last vertices are not the
//               same.
//
//               This function identifies repeated vertices by
//               position only; it does not consider any other
//               properties, such as color or UV, significant in
//               differentiating vertices.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2151  6 closed 1 2080  
719 14 Dtool_hhEqIS4T 0 4 761 2079 0 14 Dtool_hhEqIS4T 541 ////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::remove_nonunique_verts
//       Access: Published
//  Description: Removes any multiple appearances of the same vertex
//               from the primitive.  This primarily makes sense for a
//               point primitive, which is really a collection of
//               points and which doesn't make sense to include the
//               same point twice, in any order.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2151  
720 14 Dtool_hhEqrzxk 0 6 762 2080 0 14 Dtool_hhEqrzxk 380 ////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::has_primitives
//       Access: Published, Virtual
//  Description: Returns true if there are any primitives
//               (e.g. polygons) defined within this group or below,
//               false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2146  
721 14 Dtool_hhEqXSfa 0 6 763 2080 0 14 Dtool_hhEqXSfa 416 ////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::joint_has_primitives
//       Access: Published, Virtual
//  Description: Returns true if there are any primitives
//               (e.g. polygons) defined within this group or below,
//               but the search does not include nested joints.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2146  
722 14 Dtool_hhEqF6tl 0 6 764 2080 0 14 Dtool_hhEqF6tl 417 ////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::has_normals
//       Access: Published, Virtual
//  Description: Returns true if any of the primitives (e.g. polygons)
//               defined within this group or below have either face
//               or vertex normals defined, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2146  
723 14 Dtool_hhEqctoR 0 4 765 2079 0 14 Dtool_hhEqctoR 266 ////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::clear
//       Access: Published
//  Description: Removes all of the vertices from the primitive.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2151  
724 14 Dtool_hhEqW8_c 0 7 766 2135 1164 14 Dtool_hhEqW8_c 330 ////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::add_vertex
//       Access: Published
//  Description: Adds the indicated vertex to the end of the
//               primitive's list of vertices, and returns it.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2151  6 vertex 1 2135  
725 14 Dtool_hhEq7qsK 0 7 767 2135 1164 14 Dtool_hhEq7qsK 421 ////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::remove_vertex
//       Access: Published
//  Description: Removes the indicated vertex from the
//               primitive and returns it.  If the vertex was not
//               already in the primitive, does nothing and returns
//               NULL.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2151  6 vertex 1 2135  
726 14 Dtool_hhEq_m4j 0 4 768 2079 0 14 Dtool_hhEq_m4j 370 ////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::copy_vertices
//       Access: Published
//  Description: Replaces the current primitive's list of vertices
//               with a copy of the list of vertices on the other
//               primitive.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2151  5 other 1 2146  
727 14 Dtool_hhEqkeY6 0 6 769 2092 0 14 Dtool_hhEqkeY6 230 ////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::get_num_vertices
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 2146  
728 14 Dtool_hhEq5Wo7 0 4 770 2079 0 14 Dtool_hhEq5Wo7 445 ////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::set_vertex
//       Access: Published
//  Description: Replaces a particular vertex based on its index
//               number in the list of vertices.  This is just a
//               convenience function for people who don't want to
//               mess with the iterators.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2151  5 index 1 2092  6 vertex 1 2135  
729 14 Dtool_hhEqFsKW 0 7 771 2135 1164 14 Dtool_hhEqFsKW 277 ////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::get_vertex
//       Access: Published
//  Description: Returns a particular index based on its index number.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2146  5 index 1 2092  
730 14 Dtool_hhEqm7xE 0 7 772 2138 1079 14 Dtool_hhEqm7xE 368 ////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::get_pool
//       Access: Published
//  Description: Returns the vertex pool associated with the vertices
//               of the primitive, or NULL if the primitive has no
//               vertices.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2146  
731 14 Dtool_hhEqCGI9 0 4 773 2079 0 14 Dtool_hhEqCGI9 0 3 4 this 3 2146  3 out 1 2085  12 indent_level 1 2092  
732 14 Dtool_hhEqG9YA 0 4 774 2079 0 14 Dtool_hhEqG9YA 0 1 4 this 3 2146  
733 14 Dtool_hhEq2RY6 0 7 775 2075 0 14 Dtool_hhEq2RY6 0 0 
734 14 Dtool_hhEq2w28 0 7 719 2088 1079 14 Dtool_hhEq2w28 0 1 4 this 3 2151  
735 14 Dtool_hhEqUoMZ 0 7 720 2151 1679 14 Dtool_hhEqUoMZ 0 1 4 this 3 2088  
736 14 Dtool_hhEq6ts2 0 6 721 2105 0 14 Dtool_hhEq6ts2 0 1 4 this 3 2151  
737 14 Dtool_hhEqcB04 0 7 722 2151 1679 14 Dtool_hhEqcB04 0 1 4 this 3 2105  
738 14 Dtool_hhEq9Jj3 0 6 723 2098 0 14 Dtool_hhEq9Jj3 0 1 4 this 3 2151  
739 14 Dtool_hhEqZds5 0 7 724 2151 1679 14 Dtool_hhEqZds5 0 1 4 this 3 2098  
740 14 Dtool_hhEqXTIC 0 7 777 2214 1679 14 Dtool_hhEqXTIC 246 ////////////////////////////////////////////////////////////////////
//     Function: EggCompositePrimitive::Copy assignment operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2214  4 copy 1 2215  
741 14 Dtool_hhEqwm0G 0 6 778 2092 0 14 Dtool_hhEqwm0G 410 ////////////////////////////////////////////////////////////////////
//     Function: EggCompositePrimitive::get_num_components
//       Access: Published
//  Description: Returns the number of individual component triangles
//               within the composite.  Each one of these might have a
//               different set of attributes.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2215  
742 14 Dtool_hhEqXohz 0 6 779 2105 0 14 Dtool_hhEqXohz 307 ////////////////////////////////////////////////////////////////////
//     Function: EggCompositePrimitive::get_component
//       Access: Published
//  Description: Returns the attributes for the nth component
//               triangle.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2214  1 i 1 2092  
743 14 Dtool_hhEq_Yun 0 6 779 2106 0 14 Dtool_hhEq_Yun 307 ////////////////////////////////////////////////////////////////////
//     Function: EggCompositePrimitive::get_component
//       Access: Published
//  Description: Returns the attributes for the nth component
//               triangle.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2215  1 i 1 2092  
744 14 Dtool_hhEqqTJg 0 4 780 2079 0 14 Dtool_hhEqqTJg 307 ////////////////////////////////////////////////////////////////////
//     Function: EggCompositePrimitive::set_component
//       Access: Published
//  Description: Changes the attributes for the nth component
//               triangle.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2214  1 i 1 2092  6 attrib 1 2106  
745 14 Dtool_hhEq81Mv 0 6 781 2080 0 14 Dtool_hhEq81Mv 678 ////////////////////////////////////////////////////////////////////
//     Function: EggCompositePrimitive::triangulate_into
//       Access: Published
//  Description: Subdivides the composite primitive into triangles and
//               adds those triangles to the indicated container.
//               Does not remove the primitive from its existing
//               parent or modify it in any way.
//
//               Returns true if the triangulation is successful, or
//               false if there was some error (in which case the
//               container may contain some partial triangulation).
//////////////////////////////////////////////////////////////////// 2 4 this 3 2215  9 container 1 2091  
746 14 Dtool_hhEq3sTt 0 7 782 2214 1679 14 Dtool_hhEq3sTt 830 ////////////////////////////////////////////////////////////////////
//     Function: EggCompositePrimitive::triangulate_in_place
//       Access: Published
//  Description: Subdivides the composite primitive into triangles and
//               adds those triangles to the parent group node in
//               place of the original primitive.  Returns a pointer
//               to the original primitive, which is likely about to
//               be destructed.
//
//               If convex_also is true, both concave and convex
//               polygons will be subdivided into triangles;
//               otherwise, only concave polygons will be subdivided,
//               and convex polygons will be copied unchanged into the
//               container.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2214  
747 14 Dtool_hhEqflzy 0 7 783 2075 0 14 Dtool_hhEqflzy 0 0 
748 14 Dtool_hhEq_Tjy 0 7 785 2217 1757 14 Dtool_hhEq_Tjy 699 // Filename: eggData.I
// Created by:  drose (11Feb99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggData::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
749 14 Dtool_hhEqYDEk 0 7 785 2217 1757 14 Dtool_hhEqYDEk 221 ////////////////////////////////////////////////////////////////////
//     Function: EggData::Copy constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2218  
750 14 Dtool_hhEqdsvy 0 7 786 2217 1757 14 Dtool_hhEqdsvy 229 ////////////////////////////////////////////////////////////////////
//     Function: EggData::Copy assignment operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2217  4 copy 1 2218  
751 14 Dtool_hhEqqWzm 0 6 787 2080 0 14 Dtool_hhEqqWzm 479 ////////////////////////////////////////////////////////////////////
//     Function: EggData::resolve_egg_filename
//       Access: Public, Static
//  Description: Looks for the indicated filename, first along the
//               indicated searchpath, and then along the model_path.
//               If found, updates the filename to the full path and
//               returns true; otherwise, returns false.
//////////////////////////////////////////////////////////////////// 2 12 egg_filename 1 2220  10 searchpath 1 2156  
752 14 Dtool_hhEq_5ZW 0 6 787 2080 0 14 Dtool_hhEq_5ZW 479 ////////////////////////////////////////////////////////////////////
//     Function: EggData::resolve_egg_filename
//       Access: Public, Static
//  Description: Looks for the indicated filename, first along the
//               indicated searchpath, and then along the model_path.
//               If found, updates the filename to the full path and
//               returns true; otherwise, returns false.
//////////////////////////////////////////////////////////////////// 1 12 egg_filename 1 2220  
753 14 Dtool_hhEqR9jy 0 6 788 2080 0 14 Dtool_hhEqR9jy 584 ////////////////////////////////////////////////////////////////////
//     Function: EggData::read
//       Access: Public
//  Description: Opens the indicated filename and reads the egg data
//               contents from it.  Returns true if the file was
//               successfully opened and read, false if there were
//               some errors, in which case the data may be partially
//               read.
//
//               error is the output stream to which to write error
//               messages.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2217  8 filename 1 2220  12 display_name 1 2084  
754 14 Dtool_hhEq8ZNq 0 6 788 2080 0 14 Dtool_hhEq8ZNq 584 ////////////////////////////////////////////////////////////////////
//     Function: EggData::read
//       Access: Public
//  Description: Opens the indicated filename and reads the egg data
//               contents from it.  Returns true if the file was
//               successfully opened and read, false if there were
//               some errors, in which case the data may be partially
//               read.
//
//               error is the output stream to which to write error
//               messages.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2217  8 filename 1 2220  
755 14 Dtool_hhEqluzF 0 6 788 2080 0 14 Dtool_hhEqluzF 762 ////////////////////////////////////////////////////////////////////
//     Function: EggData::read
//       Access: Public
//  Description: Parses the egg syntax contained in the indicated
//               input stream.  Returns true if the stream was a
//               completely valid egg file, false if there were some
//               errors, in which case the data may be partially read.
//
//               Before you call this routine, you should probably
//               call set_egg_filename() to set the name of the egg
//               file we're processing, if at all possible.  If there
//               is no such filename, you may set it to the empty
//               string.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2217  2 in 1 2221  
756 14 Dtool_hhEqvw2D 0 4 789 2079 0 14 Dtool_hhEqvw2D 324 ////////////////////////////////////////////////////////////////////
//     Function: EggData::merge
//       Access: Public
//  Description: Appends the other egg structure to the end of this
//               one.  The other egg structure is invalidated.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2217  5 other 1 2217  
757 14 Dtool_hhEqEkdE 0 6 790 2080 0 14 Dtool_hhEqEkdE 656 ////////////////////////////////////////////////////////////////////
//     Function: EggData::load_externals
//       Access: Public
//  Description: Loads up all the egg files referenced by <File>
//               entries within the egg structure, and inserts their
//               contents in place of the <File> entries.  Searches
//               for files in the searchpath, if not found directly,
//               and writes error messages to the indicated output
//               stream.  Returns true if all externals were loaded
//               successfully, false otherwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2217  10 searchpath 1 2156  
758 14 Dtool_hhEqlY7S 0 6 790 2080 0 14 Dtool_hhEqlY7S 656 ////////////////////////////////////////////////////////////////////
//     Function: EggData::load_externals
//       Access: Public
//  Description: Loads up all the egg files referenced by <File>
//               entries within the egg structure, and inserts their
//               contents in place of the <File> entries.  Searches
//               for files in the searchpath, if not found directly,
//               and writes error messages to the indicated output
//               stream.  Returns true if all externals were loaded
//               successfully, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2217  
759 14 Dtool_hhEqONYx 0 6 790 2080 0 14 Dtool_hhEqONYx 656 ////////////////////////////////////////////////////////////////////
//     Function: EggData::load_externals
//       Access: Public
//  Description: Loads up all the egg files referenced by <File>
//               entries within the egg structure, and inserts their
//               contents in place of the <File> entries.  Searches
//               for files in the searchpath, if not found directly,
//               and writes error messages to the indicated output
//               stream.  Returns true if all externals were loaded
//               successfully, false otherwise.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2217  10 searchpath 1 2156  6 record 1 2223  
760 14 Dtool_hhEqfumv 0 6 791 2092 0 14 Dtool_hhEqfumv 608 ////////////////////////////////////////////////////////////////////
//     Function: EggData::collapse_equivalent_textures
//       Access: Public
//  Description: Removes duplicate references to the same texture
//               image with the same properties.  Considers two
//               texture references with identical properties, but
//               different tref names, to be equivalent, and collapses
//               them, choosing one tref name to keep arbitrarily.
//               Returns the number of textures removed.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2217  
761 14 Dtool_hhEqGkhb 0 6 792 2092 0 14 Dtool_hhEqGkhb 607 ////////////////////////////////////////////////////////////////////
//     Function: EggData::collapse_equivalent_materials
//       Access: Public
//  Description: Removes duplicate references to the same material
//               with the same properties.  Considers two material
//               references with identical properties, but different
//               mref names, to be equivalent, and collapses them,
//               choosing one mref name to keep arbitrarily.  Returns
//               the number of materials removed.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2217  
762 14 Dtool_hhEqUZKh 0 6 793 2080 0 14 Dtool_hhEqUZKh 265 ////////////////////////////////////////////////////////////////////
//     Function: EggData::write_egg
//       Access: Public
//  Description: The main interface for writing complete egg files.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2217  8 filename 1 2220  
763 14 Dtool_hhEqOkbY 0 6 793 2080 0 14 Dtool_hhEqOkbY 265 ////////////////////////////////////////////////////////////////////
//     Function: EggData::write_egg
//       Access: Public
//  Description: The main interface for writing complete egg files.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2217  3 out 1 2085  
764 14 Dtool_hhEqkJsK 0 4 794 2079 0 14 Dtool_hhEqkJsK 399 ////////////////////////////////////////////////////////////////////
//     Function: EggData::set_auto_resolve_externals
//       Access: Public
//  Description: Indicates whether the EggData object will
//               automatically resolve any external references when
//               read() is called.  The default is false.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2217  7 resolve 1 2080  
765 14 Dtool_hhEqVTWc 0 6 795 2080 0 14 Dtool_hhEqVTWc 399 ////////////////////////////////////////////////////////////////////
//     Function: EggData::get_auto_resolve_externals
//       Access: Public
//  Description: Indicates whether the EggData object will
//               automatically resolve any external references when
//               read() is called.  The default is false.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2218  
766 14 Dtool_hhEqLqtE 0 6 796 2080 0 14 Dtool_hhEqLqtE 741 ////////////////////////////////////////////////////////////////////
//     Function: EggData::original_had_absolute_pathnames
//       Access: Public
//  Description: Returns true if the data processed in the last call
//               to read() contained absolute pathnames, or false if
//               those pathnames were all relative.
//
//               This method is necessary because if
//               auto_resolve_externals() is in effect, it may modify
//               the pathnames to be absolute whether or not they were
//               as loaded from disk.  This method can be used to
//               query the state of the original egg file from disk.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2218  
767 14 Dtool_hhEqwPUu 0 4 797 2079 0 14 Dtool_hhEqwPUu 403 ////////////////////////////////////////////////////////////////////
//     Function: EggData::set_coordinate_system
//       Access: Public
//  Description: Changes the coordinate system of the EggData.  If the
//               coordinate system was previously different, this may
//               result in a conversion of the data.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2217  8 coordsys 1 2162  
768 14 Dtool_hhEqW4K_ 0 6 798 2162 0 14 Dtool_hhEqW4K_ 307 ////////////////////////////////////////////////////////////////////
//     Function: EggData::get_coordinate_system
//       Access: Public
//  Description: Returns the coordinate system in which the egg file
//               is defined.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2218  
769 14 Dtool_hhEqgZ_q 0 4 799 2079 0 14 Dtool_hhEqgZ_q 392 ////////////////////////////////////////////////////////////////////
//     Function: EggData::set_egg_filename
//       Access: Public
//  Description: Sets the filename--especially the directory part--in
//               which the egg file is considered to reside.  This is
//               also implicitly set by read().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2217  12 egg_filename 1 2159  
770 14 Dtool_hhEqOvC5 0 6 800 2159 0 14 Dtool_hhEqOvC5 307 ////////////////////////////////////////////////////////////////////
//     Function: EggData::get_egg_filename
//       Access: Public
//  Description: Returns the directory in which the egg file is
//               considered to reside.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2218  
771 14 Dtool_hhEqdPWe 0 4 801 2079 0 14 Dtool_hhEqdPWe 379 ////////////////////////////////////////////////////////////////////
//     Function: EggData::set_egg_timestamp
//       Access: Public
//  Description: Sets the timestamp of the egg file on disk, at the
//               time it was opened for reading.  This is also
//               implicitly set by read().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2217  13 egg_timestamp 1 2150  
772 14 Dtool_hhEqCcmV 0 6 802 2150 0 14 Dtool_hhEqCcmV 385 ////////////////////////////////////////////////////////////////////
//     Function: EggData::get_egg_timestamp
//       Access: Public
//  Description: Returns the timestamp of the egg file on disk, at the
//               time it was opened for reading, or 0 if this
//               information is not available.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2218  
773 14 Dtool_hhEqHKMn 0 4 803 2079 0 14 Dtool_hhEqHKMn 1124 ////////////////////////////////////////////////////////////////////
//     Function: EggData::recompute_vertex_normals
//       Access: Public
//  Description: Recomputes all the vertex normals for polygon
//               geometry at this group node and below so that they
//               accurately reflect the vertex positions.  A shared
//               edge between two polygons (even in different groups)
//               is considered smooth if the angle between the two
//               edges is less than threshold degrees.
//
//               This function also removes degenerate polygons that
//               do not have enough vertices to define a normal.  It
//               does not affect normals for other kinds of primitives
//               like Nurbs or Points.
//
//               This function does not remove or adjust vertices in
//               the vertex pool; it only adds new vertices with the
//               correct normals.  Thus, it is a good idea to call
//               remove_unused_vertices() after calling this.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2217  9 threshold 1 2007  
774 14 Dtool_hhEqI60Q 0 4 804 2079 0 14 Dtool_hhEqI60Q 1069 ////////////////////////////////////////////////////////////////////
//     Function: EggData::recompute_polygon_normals
//       Access: Public
//  Description: Recomputes all the polygon normals for polygon
//               geometry at this group node and below so that they
//               accurately reflect the vertex positions.  Normals are
//               removed from the vertices and defined only on
//               polygons, giving the geometry a faceted appearance.
//
//               This function also removes degenerate polygons that
//               do not have enough vertices to define a normal.  It
//               does not affect normals for other kinds of primitives
//               like Nurbs or Points.
//
//               This function does not remove or adjust vertices in
//               the vertex pool; it only adds new vertices with the
//               normals removed.  Thus, it is a good idea to call
//               remove_unused_vertices() after calling this.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2217  
775 14 Dtool_hhEqMttE 0 4 805 2079 0 14 Dtool_hhEqMttE 598 ////////////////////////////////////////////////////////////////////
//     Function: EggData::strip_normals
//       Access: Public
//  Description: Removes all normals from primitives, and the vertices
//               they reference, at this node and below.
//
//               This function does not remove or adjust vertices in
//               the vertex pool; it only adds new vertices with the
//               normal removed.  Thus, it is a good idea to call
//               remove_unused_vertices() after calling this.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2217  
776 14 Dtool_hhEqDr_V 0 7 806 2075 0 14 Dtool_hhEqDr_V 0 0 
777 14 Dtool_hhEqYWbP 0 7 809 2225 1762 14 Dtool_hhEqYWbP 723 // Filename: eggCoordinateSystem.I
// Created by:  drose (20Jan99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggCoordinateSystem::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 5 value 1 2162  
778 14 Dtool_hhEq20iH 0 7 809 2225 1762 14 Dtool_hhEq20iH 723 // Filename: eggCoordinateSystem.I
// Created by:  drose (20Jan99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggCoordinateSystem::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
779 14 Dtool_hhEquEBs 0 7 809 2225 1762 14 Dtool_hhEquEBs 233 ////////////////////////////////////////////////////////////////////
//     Function: EggCoordinateSystem::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2226  
780 14 Dtool_hhEqIzaC 0 4 810 2079 0 14 Dtool_hhEqIzaC 226 ////////////////////////////////////////////////////////////////////
//     Function: EggCoordinateSystem::set_value
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2225  5 value 1 2162  
781 14 Dtool_hhEqXtH9 0 6 811 2162 0 14 Dtool_hhEqXtH9 226 ////////////////////////////////////////////////////////////////////
//     Function: EggCoordinateSystem::set_value
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2226  
782 14 Dtool_hhEq0Chp 0 7 812 2075 0 14 Dtool_hhEq0Chp 0 0 
783 14 Dtool_hhEq9d8E 0 7 815 2228 1770 14 Dtool_hhEq9d8E 230 ////////////////////////////////////////////////////////////////////
//     Function: EggCurve::Copy assignment operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2228  4 copy 1 2229  
784 14 Dtool_hhEq6saC 0 4 817 2079 0 14 Dtool_hhEq6saC 559 ////////////////////////////////////////////////////////////////////
//     Function: EggCurve::set_subdiv
//       Access: Public
//  Description: Sets the number of subdivisions that will be
//               requested across the curve.  (This doesn't necessary
//               guarantee that this number of subdivisions will be
//               made; it's just a hint to any curve renderer or quick
//               tesselator.)  Set the number to 0 to disable the
//               hint.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2228  6 subdiv 1 2092  
785 14 Dtool_hhEq_WHg 0 6 818 2092 0 14 Dtool_hhEq_WHg 335 ////////////////////////////////////////////////////////////////////
//     Function: EggCurve::get_subdiv
//       Access: Public
//  Description: Returns the requested number of subdivisions, or 0 if
//               no particular subdivisions have been requested.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2229  
786 14 Dtool_hhEqupv_ 0 4 819 2079 0 14 Dtool_hhEqupv_ 367 ////////////////////////////////////////////////////////////////////
//     Function: EggCurve::set_curve_type
//       Access: Public
//  Description: Sets the type of the curve.  This is primarily used
//               as a hint to any code that may need to deal with this
//               curve.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2228  4 type 1 2045  
787 14 Dtool_hhEq6DD5 0 6 820 2045 0 14 Dtool_hhEq6DD5 261 ////////////////////////////////////////////////////////////////////
//     Function: EggCurve::get_curve_type
//       Access: Public
//  Description: Returns the indicated type of the curve.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2229  
788 14 Dtool_hhEq5L8d 0 6 821 2045 0 14 Dtool_hhEq5L8d 412 ////////////////////////////////////////////////////////////////////
//     Function: EggCurve::string_curve_type
//       Access: Public, Static
//  Description: Returns the CurveType value associated with the given
//               string representation, or CT_invalid if the string
//               does not match any known CurveType value.
//////////////////////////////////////////////////////////////////// 1 6 string 1 2084  
789 14 Dtool_hhEqsThz 0 7 822 2075 0 14 Dtool_hhEqsThz 0 0 
790 14 Dtool_hhEq_0_W 0 7 825 2233 1774 14 Dtool_hhEq_0_W 234 ////////////////////////////////////////////////////////////////////
//     Function: EggExternalReference::Copy constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2231  
791 14 Dtool_hhEq8ySO 0 7 825 2233 1774 14 Dtool_hhEq8ySO 229 ////////////////////////////////////////////////////////////////////
//     Function: EggExternalReference::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 9 node_name 1 2084  8 filename 1 2084  
792 14 Dtool_hhEqmtLn 0 7 826 2233 1774 14 Dtool_hhEqmtLn 242 ////////////////////////////////////////////////////////////////////
//     Function: EggExternalReference::Copy assignment operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2233  4 copy 1 2231  
793 14 Dtool_hhEqp9UM 0 7 827 2075 0 14 Dtool_hhEqp9UM 0 0 
794 14 Dtool_hhEq8kwb 0 4 830 2079 0 14 Dtool_hhEq8kwb 313 ////////////////////////////////////////////////////////////////////
//     Function: EggNameUniquifier::clear
//       Access: Public
//  Description: Empties the table of used named and prepares the
//               Uniquifier for a new tree.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2234  
795 14 Dtool_hhEqeFPl 0 4 831 2079 0 14 Dtool_hhEqeFPl 269 ////////////////////////////////////////////////////////////////////
//     Function: EggNameUniquifier::uniquify
//       Access: Public
//  Description: Begins the traversal from the indicated node.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2234  4 node 1 2088  
796 14 Dtool_hhEqOi3s 0 7 832 2088 1079 14 Dtool_hhEqOi3s 341 ////////////////////////////////////////////////////////////////////
//     Function: EggNameUniquifier::get_node
//       Access: Public
//  Description: Returns the node associated with the given category
//               and name, or NULL if the name has not been used.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2235  8 category 1 2084  4 name 1 2084  
797 14 Dtool_hhEqXkGH 0 6 833 2080 0 14 Dtool_hhEqXkGH 332 ////////////////////////////////////////////////////////////////////
//     Function: EggNameUniquifier::has_name
//       Access: Public
//  Description: Returns true if the name has been used for the
//               indicated category already, false otherwise.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2235  8 category 1 2084  4 name 1 2084  
798 14 Dtool_hhEqEft2 0 6 834 2080 0 14 Dtool_hhEqEft2 477 ////////////////////////////////////////////////////////////////////
//     Function: EggNameUniquifier::add_name
//       Access: Public
//  Description: Adds the name to the indicated category.  This name
//               will not be used for any other egg node within this
//               category.  Returns true if the name was added, or
//               false if it was already in use for the category.
//////////////////////////////////////////////////////////////////// 4 4 this 3 2234  8 category 1 2084  4 name 1 2084  4 node 1 2088  
799 14 Dtool_hhEqYHHH 0 6 834 2080 0 14 Dtool_hhEqYHHH 477 ////////////////////////////////////////////////////////////////////
//     Function: EggNameUniquifier::add_name
//       Access: Public
//  Description: Adds the name to the indicated category.  This name
//               will not be used for any other egg node within this
//               category.  Returns true if the name was added, or
//               false if it was already in use for the category.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2234  8 category 1 2084  4 name 1 2084  
800 14 Dtool_hhEq3vi3 0 6 835 2084 0 14 Dtool_hhEq3vi3 0 2 4 this 3 2234  4 node 1 2088  
801 14 Dtool_hhEqEi4Q 0 6 836 2084 0 14 Dtool_hhEqEi4Q 487 ////////////////////////////////////////////////////////////////////
//     Function: EggNameUniquifier::filter_name
//       Access: Public, Virtual
//  Description: Returns the name of the given node, or at least the
//               name it should be.  This provides a hook to adjust
//               the name before attempting to uniquify it, if
//               desired, for instance to remove invalid characters.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2234  4 node 1 2088  
802 14 Dtool_hhEq1Kmh 0 6 837 2084 0 14 Dtool_hhEq1Kmh 682 ////////////////////////////////////////////////////////////////////
//     Function: EggNameUniquifier::generate_name
//       Access: Public, Virtual
//  Description: Generates a new name for the given node when its
//               existing name clashes with some other node.  This
//               function will be called repeatedly, if necessary,
//               until it returns a name that actually is unique.
//
//               The category is the string returned by
//               get_category(), and index is a uniquely-generated
//               number that may be useful for synthesizing the name.
//////////////////////////////////////////////////////////////////// 4 4 this 3 2234  4 node 1 2088  8 category 1 2084  5 index 1 2092  
803 14 Dtool_hhEqDsSt 0 7 838 2075 0 14 Dtool_hhEqDsSt 0 0 
804 14 Dtool_hhEq0C8Z 0 7 840 2237 1786 14 Dtool_hhEq0C8Z 530 ////////////////////////////////////////////////////////////////////
//     Function: EggGroupUniquifier::Constructor
//       Access: Public
//  Description: If filter_names is true, then the group names will be
//               coerced into a fairly safe, standard convention that
//               uses no characters other than a-z, A-Z, 0-9, and
//               underscore.  If filter_names is false, the group
//               names will be left unchanged.
//////////////////////////////////////////////////////////////////// 1 12 filter_names 1 2080  
805 14 Dtool_hhEq6jri 0 7 840 2237 1786 14 Dtool_hhEq6jri 530 ////////////////////////////////////////////////////////////////////
//     Function: EggGroupUniquifier::Constructor
//       Access: Public
//  Description: If filter_names is true, then the group names will be
//               coerced into a fairly safe, standard convention that
//               uses no characters other than a-z, A-Z, 0-9, and
//               underscore.  If filter_names is false, the group
//               names will be left unchanged.
//////////////////////////////////////////////////////////////////// 0 
806 14 Dtool_hhEqgoSO 0 7 841 2075 0 14 Dtool_hhEqgoSO 0 0 
807 14 Dtool_hhEqDrFz 0 7 844 2240 1679 14 Dtool_hhEqDrFz 221 ////////////////////////////////////////////////////////////////////
//     Function: EggLine::Copy constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2238  
808 14 Dtool_hhEqX4DQ 0 7 844 2240 1679 14 Dtool_hhEqX4DQ 699 // Filename: eggLine.I
// Created by:  drose (14Oct03)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggLine::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 name 1 2084  
809 14 Dtool_hhEqJipL 0 7 844 2240 1679 14 Dtool_hhEqJipL 699 // Filename: eggLine.I
// Created by:  drose (14Oct03)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggLine::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
810 14 Dtool_hhEqvLAZ 0 7 845 2240 1679 14 Dtool_hhEqvLAZ 229 ////////////////////////////////////////////////////////////////////
//     Function: EggLine::Copy assignment operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2240  4 copy 1 2238  
811 14 Dtool_hhEq0ujY 0 6 846 2080 0 14 Dtool_hhEq0ujY 217 ////////////////////////////////////////////////////////////////////
//     Function: EggLine::has_thick
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2238  
812 14 Dtool_hhEqyGRj 0 6 847 2007 0 14 Dtool_hhEqyGRj 328 ////////////////////////////////////////////////////////////////////
//     Function: EggLine::get_thick
//       Access: Published
//  Description: Returns the thickness set on this particular line.
//               If there is no thickness set, returns 1.0.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2238  
813 14 Dtool_hhEqxUAE 0 4 848 2079 0 14 Dtool_hhEqxUAE 217 ////////////////////////////////////////////////////////////////////
//     Function: EggLine::set_thick
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2240  5 thick 1 2007  
814 14 Dtool_hhEqf5MK 0 4 849 2079 0 14 Dtool_hhEqf5MK 219 ////////////////////////////////////////////////////////////////////
//     Function: EggLine::clear_thick
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2240  
815 14 Dtool_hhEqZ1pB 0 7 850 2075 0 14 Dtool_hhEqZ1pB 0 0 
816 14 Dtool_hhEq2_LL 0 7 852 2241 1796 14 Dtool_hhEq2_LL 230 ////////////////////////////////////////////////////////////////////
//     Function: EggMaterialCollection::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
817 14 Dtool_hhEqI3vE 0 7 852 2241 1796 14 Dtool_hhEqI3vE 235 ////////////////////////////////////////////////////////////////////
//     Function: EggMaterialCollection::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2242  
818 14 Dtool_hhEqEcH7 0 6 853 2241 0 14 Dtool_hhEqEcH7 243 ////////////////////////////////////////////////////////////////////
//     Function: EggMaterialCollection::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2241  4 copy 1 2242  
819 14 Dtool_hhEqUC81 0 4 855 2079 0 14 Dtool_hhEqUC81 267 ////////////////////////////////////////////////////////////////////
//     Function: EggMaterialCollection::clear
//       Access: Public
//  Description: Removes all materials from the collection.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2241  
820 14 Dtool_hhEqOymL 0 6 856 2092 0 14 Dtool_hhEqOymL 483 ////////////////////////////////////////////////////////////////////
//     Function: EggMaterialCollection::extract_materials
//       Access: Public
//  Description: Walks the egg hierarchy beginning at the indicated
//               node, and removes any EggMaterials encountered in the
//               hierarchy, adding them to the collection.  Returns
//               the number of EggMaterials encountered.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2241  4 node 1 2091  
821 14 Dtool_hhEqxG5C 0 6 857 2092 0 14 Dtool_hhEqxG5C 1402 ////////////////////////////////////////////////////////////////////
//     Function: EggMaterialCollection::find_used_materials
//       Access: Public
//  Description: Walks the egg hierarchy beginning at the indicated
//               node, looking for materials that are referenced by
//               primitives but are not already members of the
//               collection, adding them to the collection.
//
//               If this is called following extract_materials(), it
//               can be used to pick up any additional material
//               references that appeared in the egg hierarchy (but
//               whose EggMaterial node was not actually part of the
//               hierarchy).
//
//               If this is called in lieu of extract_materials(), it
//               will fill up the collection with all of the
//               referenced materials (and only the referenced
//               materials), without destructively removing the
//               EggMaterials from the hierarchy.
//
//               This also has the side effect of incrementing the
//               internal usage count for a material in the collection
//               each time a material reference is encountered.  This
//               side effect is taken advantage of by
//               remove_unused_materials().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2241  4 node 1 2088  
822 14 Dtool_hhEq74xc 0 4 858 2079 0 14 Dtool_hhEq74xc 574 ////////////////////////////////////////////////////////////////////
//     Function: EggMaterialCollection::remove_unused_materials
//       Access: Public
//  Description: Removes any materials from the collection that aren't
//               referenced by any primitives in the indicated egg
//               hierarchy.  This also, incidentally, adds materials to
//               the collection that had been referenced by primitives
//               but had not previously appeared in the collection.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2241  4 node 1 2088  
823 14 Dtool_hhEq8xlm 0 6 859 2092 0 14 Dtool_hhEq8xlm 756 ////////////////////////////////////////////////////////////////////
//     Function: EggMaterialCollection::collapse_equivalent_materials
//       Access: Public
//  Description: Walks through the collection and collapses together
//               any separate materials that are equivalent according
//               to the indicated equivalence factor, eq (see
//               EggMaterial::is_equivalent_to()).  The return value is
//               the number of materials removed.
//
//               This flavor of collapse_equivalent_materials()
//               automatically adjusts all the primitives in the egg
//               hierarchy to refer to the new material pointers.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2241  2 eq 1 2092  4 node 1 2091  
824 14 Dtool_hhEqV3rv 0 6 859 2092 0 14 Dtool_hhEqV3rv 1035 ////////////////////////////////////////////////////////////////////
//     Function: EggMaterialCollection::collapse_equivalent_materials
//       Access: Public
//  Description: Walks through the collection and collapses together
//               any separate materials that are equivalent according
//               to the indicated equivalence factor, eq (see
//               EggMaterial::is_equivalent_to()).  The return value is
//               the number of materials removed.
//
//               This flavor of collapse_equivalent_materials() does
//               not adjust any primitives in the egg hierarchy;
//               instead, it fills up the 'removed' map with an entry
//               for each removed material, mapping it back to the
//               equivalent retained material.  It's up to the user to
//               then call replace_materials() with this map, if
//               desired, to apply these changes to the egg hierarchy.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2241  2 eq 1 2092  7 removed 1 2244  
825 14 Dtool_hhEq0Vhs 0 4 860 2079 0 14 Dtool_hhEq0Vhs 606 ////////////////////////////////////////////////////////////////////
//     Function: EggMaterialCollection::replace_materials
//       Access: Public, Static
//  Description: Walks the egg hierarchy, changing out any reference
//               to a material appearing on the left side of the map
//               with its corresponding material on the right side.
//               This is most often done following a call to
//               collapse_equivalent_materials().  It does not directly
//               affect the Collection.
//////////////////////////////////////////////////////////////////// 2 4 node 1 2091  7 replace 1 2246  
826 14 Dtool_hhEqcBOS 0 4 861 2079 0 14 Dtool_hhEqcBOS 386 ////////////////////////////////////////////////////////////////////
//     Function: EggMaterialCollection::uniquify_mrefs
//       Access: Public
//  Description: Guarantees that each material in the collection has a
//               unique MRef name.  This is essential before writing
//               an egg file.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2241  
827 14 Dtool_hhEqs9_r 0 4 862 2079 0 14 Dtool_hhEqs9_r 406 ////////////////////////////////////////////////////////////////////
//     Function: EggMaterialCollection::sort_by_mref
//       Access: Public
//  Description: Sorts all the materials into alphabetical order by
//               MRef name.  Subsequent operations using begin()/end()
//               will traverse in this sorted order.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2241  
828 14 Dtool_hhEqJriL 0 6 863 2080 0 14 Dtool_hhEqJriL 413 ////////////////////////////////////////////////////////////////////
//     Function: EggMaterialCollection::add_material
//       Access: Public
//  Description: Explicitly adds a new material to the collection.
//               Returns true if the material was added, false if it
//               was already there or if there was some error.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2241  8 material 1 2213  
829 14 Dtool_hhEqzqxK 0 6 864 2080 0 14 Dtool_hhEqzqxK 414 ////////////////////////////////////////////////////////////////////
//     Function: EggMaterialCollection::remove_material
//       Access: Public
//  Description: Explicitly removes a material from the collection.
//               Returns true if the material was removed, false if it
//               wasn't there or if there was some error.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2241  8 material 1 2213  
830 14 Dtool_hhEqyOi1 0 7 865 2213 1671 14 Dtool_hhEqyOi1 477 ////////////////////////////////////////////////////////////////////
//     Function: EggMaterialCollection::create_unique_material
//       Access: Public
//  Description: Creates a new material if there is not already one
//               equivalent (according to eq, see
//               EggMaterial::is_equivalent_to()) to the indicated
//               material, or returns the existing one if there is.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2241  4 copy 1 2211  2 eq 1 2092  
831 14 Dtool_hhEqcDwq 0 7 866 2213 1671 14 Dtool_hhEqcDwq 328 ////////////////////////////////////////////////////////////////////
//     Function: EggMaterialCollection::find_mref
//       Access: Public
//  Description: Returns the material with the indicated MRef name, or
//               NULL if no material matches.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2242  9 mref_name 1 2084  
832 14 Dtool_hhEqXJZS 0 7 868 2250 1817 14 Dtool_hhEqXJZS 227 ////////////////////////////////////////////////////////////////////
//     Function: EggPolygon::Copy constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2248  
833 14 Dtool_hhEqUWBj 0 7 868 2250 1817 14 Dtool_hhEqUWBj 708 // Filename: eggPolygon.I
// Created by:  drose (10Feb99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggPolygon::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 name 1 2084  
834 14 Dtool_hhEqO3JE 0 7 868 2250 1817 14 Dtool_hhEqO3JE 708 // Filename: eggPolygon.I
// Created by:  drose (10Feb99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggPolygon::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
835 14 Dtool_hhEqG5ro 0 7 869 2250 1817 14 Dtool_hhEqG5ro 235 ////////////////////////////////////////////////////////////////////
//     Function: EggPolygon::Copy assignment operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2250  4 copy 1 2248  
836 14 Dtool_hhEq1KP0 0 6 870 2080 0 14 Dtool_hhEq1KP0 678 ////////////////////////////////////////////////////////////////////
//     Function: EggPolygon::calculate_normal
//       Access: Published
//  Description: Calculates the true polygon normal--the vector
//               pointing out of the front of the polygon--based on
//               the vertices.  This does not return or change the
//               polygon's normal as set via set_normal().
//
//               The return value is true if the normal is computed
//               correctly, or false if the polygon is degenerate and
//               does not have at least three noncollinear vertices.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2248  6 result 1 2251  2 cs 1 2162  
837 14 Dtool_hhEq7k0F 0 6 870 2080 0 14 Dtool_hhEq7k0F 678 ////////////////////////////////////////////////////////////////////
//     Function: EggPolygon::calculate_normal
//       Access: Published
//  Description: Calculates the true polygon normal--the vector
//               pointing out of the front of the polygon--based on
//               the vertices.  This does not return or change the
//               polygon's normal as set via set_normal().
//
//               The return value is true if the normal is computed
//               correctly, or false if the polygon is degenerate and
//               does not have at least three noncollinear vertices.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2248  6 result 1 2251  
838 14 Dtool_hhEqMiG7 0 6 871 2080 0 14 Dtool_hhEqMiG7 327 ////////////////////////////////////////////////////////////////////
//     Function: EggPolygon::is_planar
//       Access: Published
//  Description: Returns true if all of the polygon's vertices lie
//               within the same plane, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2248  
839 14 Dtool_hhEqPIIR 0 6 872 2080 0 14 Dtool_hhEqPIIR 480 ////////////////////////////////////////////////////////////////////
//     Function: EggPolygon::recompute_polygon_normal
//       Access: Published
//  Description: Recalculates the normal according to the order of the
//               vertices, and sets it.  Returns true if the normal is
//               computed correctly, or false if the polygon is
//               degenerate and does not have a normal.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2250  2 cs 1 2162  
840 14 Dtool_hhEq5vES 0 6 872 2080 0 14 Dtool_hhEq5vES 480 ////////////////////////////////////////////////////////////////////
//     Function: EggPolygon::recompute_polygon_normal
//       Access: Published
//  Description: Recalculates the normal according to the order of the
//               vertices, and sets it.  Returns true if the normal is
//               computed correctly, or false if the polygon is
//               degenerate and does not have a normal.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2250  
841 14 Dtool_hhEqMg0u 0 6 873 2080 0 14 Dtool_hhEqMg0u 1053 ////////////////////////////////////////////////////////////////////
//     Function: EggPolygon::triangulate_into
//       Access: Published
//  Description: Subdivides the polygon into triangles and adds each
//               one to the indicated container.  If the polygon is
//               already a triangle, adds an exact copy of the polygon
//               to the container.  Does not remove the polygon from
//               its existing parent or modify it in any way.
//
//               Returns true if the triangulation is successful, or
//               false if there was some error (in which case the
//               container may contain some partial triangulation).
//
//               If convex_also is true, both concave and convex
//               polygons will be subdivided into triangles;
//               otherwise, only concave polygons will be subdivided,
//               and convex polygons will be copied unchanged into the
//               container.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2248  9 container 1 2091  11 convex_also 1 2080  
842 14 Dtool_hhEqdd1f 0 7 874 2250 1817 14 Dtool_hhEqdd1f 786 ////////////////////////////////////////////////////////////////////
//     Function: EggPolygon::triangulate_in_place
//       Access: Published
//  Description: Subdivides the polygon into triangles and adds those
//               triangles to the parent group node in place of the
//               original polygon.  Returns a pointer to the original
//               polygon, which is likely about to be destructed.
//
//               If convex_also is true, both concave and convex
//               polygons will be subdivided into triangles;
//               otherwise, only concave polygons will be subdivided,
//               and convex polygons will be copied unchanged into the
//               container.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2250  11 convex_also 1 2080  
843 14 Dtool_hhEquGjd 0 7 875 2075 0 14 Dtool_hhEquGjd 0 0 
844 14 Dtool_hhEqSb5s 0 7 878 2254 1832 14 Dtool_hhEqSb5s 227 ////////////////////////////////////////////////////////////////////
//     Function: EggNurbsCurve::Copy constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2252  
845 14 Dtool_hhEqqKMX 0 7 878 2254 1832 14 Dtool_hhEqqKMX 711 // Filename: eggNurbsCurve.I
// Created by:  drose (15Feb00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggNurbsCurve::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 name 1 2084  
846 14 Dtool_hhEq8ypa 0 7 878 2254 1832 14 Dtool_hhEq8ypa 711 // Filename: eggNurbsCurve.I
// Created by:  drose (15Feb00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggNurbsCurve::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
847 14 Dtool_hhEqetUP 0 7 879 2254 1832 14 Dtool_hhEqetUP 235 ////////////////////////////////////////////////////////////////////
//     Function: EggNurbsCurve::Copy assignment operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2254  4 copy 1 2252  
848 14 Dtool_hhEq1I_P 0 4 880 2079 0 14 Dtool_hhEq1I_P 588 ////////////////////////////////////////////////////////////////////
//     Function: EggNurbsCurve::setup
//       Access: Public
//  Description: Prepares a new curve definition with the indicated
//               order and number of knots.  This also implies a
//               particular number of vertices as well (the number of
//               knots minus the order), but it is up to the user to
//               add the correct number of vertices to the curve by
//               repeatedly calling push_back().
//////////////////////////////////////////////////////////////////// 3 4 this 3 2254  5 order 1 2092  9 num_knots 1 2092  
849 14 Dtool_hhEq6zeh 0 4 881 2079 0 14 Dtool_hhEq6zeh 542 ////////////////////////////////////////////////////////////////////
//     Function: EggNurbsCurve::set_order
//       Access: Public
//  Description: Directly changes the order to the indicated value
//               (which must be an integer in the range 1 <= order <=
//               4).  If possible, it is preferable to use the setup()
//               method instead of this method, since changing the
//               order directly may result in an invalid curve.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2254  5 order 1 2092  
850 14 Dtool_hhEq_mS3 0 4 882 2079 0 14 Dtool_hhEq_mS3 665 ////////////////////////////////////////////////////////////////////
//     Function: EggNurbsCurve::set_num_knots
//       Access: Public
//  Description: Directly changes the number of knots.  This will
//               either add zero-valued knots onto the end, or
//               truncate knot values from the end, depending on
//               whether the list is being increased or decreased.  If
//               possible, it is preferable to use the setup() method
//               instead of directly setting the number of knots, as
//               this may result in an invalid curve.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2254  3 num 1 2092  
851 14 Dtool_hhEqsz1o 0 4 883 2079 0 14 Dtool_hhEqsz1o 452 ////////////////////////////////////////////////////////////////////
//     Function: EggNurbsCurve::set_knot
//       Access: Public
//  Description: Resets the value of the indicated knot as indicated.
//               k must be in the range 0 <= k < get_num_knots(),
//               and the value must be in the range get_knot(k - 1)
//               <= value <= get_knot(k + 1).
//////////////////////////////////////////////////////////////////// 3 4 this 3 2254  1 k 1 2092  5 value 1 2007  
852 14 Dtool_hhEqXgbF 0 6 884 2080 0 14 Dtool_hhEqXgbF 458 ////////////////////////////////////////////////////////////////////
//     Function: EggNurbsCurve::is_valid
//       Access: Public
//  Description: Returns true if the NURBS parameters are all
//               internally consistent (e.g. it has the right number
//               of vertices to match its number of knots and order in
//               each dimension), or false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2252  
853 14 Dtool_hhEqU0kx 0 6 885 2092 0 14 Dtool_hhEqU0kx 470 ////////////////////////////////////////////////////////////////////
//     Function: EggNurbsCurve::get_order
//       Access: Public
//  Description: Returns the order of the curve.  The order is the
//               degree of the NURBS equation plus 1; for a typical
//               NURBS, the order is 4.  With this implementation of
//               NURBS, the order must be in the range [1, 4].
//////////////////////////////////////////////////////////////////// 1 4 this 3 2252  
854 14 Dtool_hhEqa0DG 0 6 886 2092 0 14 Dtool_hhEqa0DG 310 ////////////////////////////////////////////////////////////////////
//     Function: EggNurbsCurve::get_degree
//       Access: Public
//  Description: Returns the degree of the curve.  For a typical
//               NURBS, the degree is 3.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2252  
855 14 Dtool_hhEqBXkq 0 6 887 2092 0 14 Dtool_hhEqBXkq 253 ////////////////////////////////////////////////////////////////////
//     Function: EggNurbsCurve::get_num_knots
//       Access: Public
//  Description: Returns the number of knots.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2252  
856 14 Dtool_hhEqyBqz 0 6 888 2092 0 14 Dtool_hhEqyBqz 669 ////////////////////////////////////////////////////////////////////
//     Function: EggNurbsCurve::get_num_cvs
//       Access: Public
//  Description: Returns the total number of control vertices that
//               *should* be defined for the curve.  This is
//               determined by the number of knots and the order, in
//               each direction; it does not necessarily reflect the
//               number of vertices that have actually been added to
//               the curve.  (However, if the number of vertices in
//               the curve are wrong, the curve is invalid.)
//////////////////////////////////////////////////////////////////// 1 4 this 3 2252  
857 14 Dtool_hhEq07Jv 0 6 889 2080 0 14 Dtool_hhEq07Jv 458 ////////////////////////////////////////////////////////////////////
//     Function: EggNurbsCurve::is_closed
//       Access: Public
//  Description: Returns true if the curve appears to be closed.
//               Since the Egg syntax does not provide a means for
//               explicit indication of closure, this has to be
//               guessed at by examining the curve itself.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2252  
858 14 Dtool_hhEqYx8U 0 6 890 2007 0 14 Dtool_hhEqYx8U 255 ////////////////////////////////////////////////////////////////////
//     Function: EggNurbsCurve::get_knot
//       Access: Public
//  Description: Returns the nth knot value defined.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2252  1 k 1 2092  
859 14 Dtool_hhEqTsQD 0 7 891 2075 0 14 Dtool_hhEqTsQD 0 0 
860 14 Dtool_hhEq6fZQ 0 7 894 2255 1839 14 Dtool_hhEq6fZQ 232 ////////////////////////////////////////////////////////////////////
//     Function: EggSurface::Copy assignment operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2255  4 copy 1 2256  
861 14 Dtool_hhEqD1tU 0 4 895 2079 0 14 Dtool_hhEqD1tU 586 ////////////////////////////////////////////////////////////////////
//     Function: EggSurface::set_u_subdiv
//       Access: Public
//  Description: Sets the number of subdivisions in the U direction
//               that will be requested across the surface.  (This
//               doesn't necessary guarantee that this number of
//               subdivisions will be made; it's just a hint to any
//               surface renderer or quick tesselator.)  Set the
//               number to 0 to disable the hint.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2255  6 subdiv 1 2092  
862 14 Dtool_hhEq1xT9 0 6 896 2092 0 14 Dtool_hhEq1xT9 375 ////////////////////////////////////////////////////////////////////
//     Function: EggSurface::get_u_subdiv
//       Access: Public
//  Description: Returns the requested number of subdivisions in the U
//               direction, or 0 if no particular subdivisions have
//               been requested.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2256  
863 14 Dtool_hhEqDplZ 0 4 897 2079 0 14 Dtool_hhEqDplZ 586 ////////////////////////////////////////////////////////////////////
//     Function: EggSurface::set_v_subdiv
//       Access: Public
//  Description: Sets the number of subdivisions in the U direction
//               that will be requested across the surface.  (This
//               doesn't necessary guarantee that this number of
//               subdivisions will be made; it's just a hint to any
//               surface renderer or quick tesselator.)  Set the
//               number to 0 to disable the hint.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2255  6 subdiv 1 2092  
864 14 Dtool_hhEq0VLC 0 6 898 2092 0 14 Dtool_hhEq0VLC 375 ////////////////////////////////////////////////////////////////////
//     Function: EggSurface::get_v_subdiv
//       Access: Public
//  Description: Returns the requested number of subdivisions in the U
//               direction, or 0 if no particular subdivisions have
//               been requested.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2256  
865 14 Dtool_hhEqjy4J 0 7 899 2075 0 14 Dtool_hhEqjy4J 0 0 
866 14 Dtool_hhEqIadg 0 7 902 2260 1871 14 Dtool_hhEqIadg 229 ////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::Copy constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2258  
867 14 Dtool_hhEqbHUr 0 7 902 2260 1871 14 Dtool_hhEqbHUr 715 // Filename: eggNurbsSurface.I
// Created by:  drose (15Feb00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 name 1 2084  
868 14 Dtool_hhEqR3mv 0 7 902 2260 1871 14 Dtool_hhEqR3mv 715 // Filename: eggNurbsSurface.I
// Created by:  drose (15Feb00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
869 14 Dtool_hhEqOEHi 0 7 903 2260 1871 14 Dtool_hhEqOEHi 237 ////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::Copy assignment operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2260  4 copy 1 2258  
870 14 Dtool_hhEqjYcB 0 4 904 2079 0 14 Dtool_hhEqjYcB 647 ////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::setup
//       Access: Public
//  Description: Prepares a new surface definition with the indicated
//               order and number of knots in each dimension.  This
//               also implies a particular number of vertices in each
//               dimension as well (the number of knots minus the
//               order), but it is up to the user to add the correct
//               number of vertices to the surface by repeatedly
//               calling push_back().
//////////////////////////////////////////////////////////////////// 5 4 this 3 2260  7 u_order 1 2092  7 v_order 1 2092  11 num_u_knots 1 2092  11 num_v_knots 1 2092  
871 14 Dtool_hhEqjytp 0 4 905 2079 0 14 Dtool_hhEqjytp 586 ////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::set_u_order
//       Access: Public
//  Description: Directly changes the order in the U direction to the
//               indicated value (which must be an integer in the
//               range 1 <= u_order <= 4).  If possible, it is
//               preferable to use the setup() method instead of this
//               method, since changing the order directly may result
//               in an invalid surface.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2260  7 u_order 1 2092  
872 14 Dtool_hhEqj6ez 0 4 906 2079 0 14 Dtool_hhEqj6ez 586 ////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::set_v_order
//       Access: Public
//  Description: Directly changes the order in the V direction to the
//               indicated value (which must be an integer in the
//               range 1 <= v_order <= 4).  If possible, it is
//               preferable to use the setup() method instead of this
//               method, since changing the order directly may result
//               in an invalid surface.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2260  7 v_order 1 2092  
873 14 Dtool_hhEqChzm 0 4 907 2079 0 14 Dtool_hhEqChzm 690 ////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::set_num_u_knots
//       Access: Public
//  Description: Directly changes the number of knots in the U
//               direction.  This will either add zero-valued knots
//               onto the end, or truncate knot values from the end,
//               depending on whether the list is being increased or
//               decreased.  If possible, it is preferable to use the
//               setup() method instead of directly setting the number
//               of knots, as this may result in an invalid surface.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2260  3 num 1 2092  
874 14 Dtool_hhEqiman 0 4 908 2079 0 14 Dtool_hhEqiman 690 ////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::set_num_v_knots
//       Access: Public
//  Description: Directly changes the number of knots in the V
//               direction.  This will either add zero-valued knots
//               onto the end, or truncate knot values from the end,
//               depending on whether the list is being increased or
//               decreased.  If possible, it is preferable to use the
//               setup() method instead of directly setting the number
//               of knots, as this may result in an invalid surface.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2260  3 num 1 2092  
875 14 Dtool_hhEqzDIS 0 4 909 2079 0 14 Dtool_hhEqzDIS 462 ////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::set_u_knot
//       Access: Public
//  Description: Resets the value of the indicated knot as indicated.
//               k must be in the range 0 <= k < get_num_u_knots(),
//               and the value must be in the range get_u_knot(k - 1)
//               <= value <= get_u_knot(k + 1).
//////////////////////////////////////////////////////////////////// 3 4 this 3 2260  1 k 1 2092  5 value 1 2007  
876 14 Dtool_hhEqzL7b 0 4 910 2079 0 14 Dtool_hhEqzL7b 462 ////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::set_v_knot
//       Access: Public
//  Description: Resets the value of the indicated knot as indicated.
//               k must be in the range 0 <= k < get_num_v_knots(),
//               and the value must be in the range get_v_knot(k - 1)
//               <= value <= get_v_knot(k + 1).
//////////////////////////////////////////////////////////////////// 3 4 this 3 2260  1 k 1 2092  5 value 1 2007  
877 14 Dtool_hhEqgvjX 0 4 911 2079 0 14 Dtool_hhEqgvjX 456 ////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::set_cv
//       Access: Public
//  Description: Redefines the control vertex associated with a
//               particular u, v coordinate pair.  This is just a
//               shorthand to access the EggPrimitive's normal vertex
//               assignment for a 2-d control vertex.
//////////////////////////////////////////////////////////////////// 4 4 this 3 2260  2 ui 1 2092  2 vi 1 2092  6 vertex 1 2135  
878 14 Dtool_hhEqCf_u 0 6 912 2080 0 14 Dtool_hhEqCf_u 460 ////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::is_valid
//       Access: Public
//  Description: Returns true if the NURBS parameters are all
//               internally consistent (e.g. it has the right number
//               of vertices to match its number of knots and order in
//               each dimension), or false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2258  
879 14 Dtool_hhEqDWLM 0 6 913 2092 0 14 Dtool_hhEqDWLM 511 ////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::get_u_order
//       Access: Public
//  Description: Returns the order of the surface in the U direction.
//               The order is the degree of the NURBS equation plus 1;
//               for a typical NURBS, the order is 4.  With this
//               implementation of NURBS, the order must be in the
//               range [1, 4].
//////////////////////////////////////////////////////////////////// 1 4 this 3 2258  
880 14 Dtool_hhEqDe8V 0 6 914 2092 0 14 Dtool_hhEqDe8V 511 ////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::get_v_order
//       Access: Public
//  Description: Returns the order of the surface in the V direction.
//               The order is the degree of the NURBS equation plus 1;
//               for a typical NURBS, the order is 4.  With this
//               implementation of NURBS, the order must be in the
//               range [1, 4].
//////////////////////////////////////////////////////////////////// 1 4 this 3 2258  
881 14 Dtool_hhEqcEe5 0 6 915 2092 0 14 Dtool_hhEqcEe5 334 ////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::get_u_degree
//       Access: Public
//  Description: Returns the degree of the surface in the U direction.
//               For a typical NURBS, the degree is 3.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2258  
882 14 Dtool_hhEqTMPD 0 6 916 2092 0 14 Dtool_hhEqTMPD 334 ////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::get_v_degree
//       Access: Public
//  Description: Returns the degree of the surface in the V direction.
//               for a typical NURBS, the degree is 3.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2258  
883 14 Dtool_hhEq4yej 0 6 917 2092 0 14 Dtool_hhEq4yej 276 ////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::get_num_u_knots
//       Access: Public
//  Description: Returns the number of knots in the U direction.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2258  
884 14 Dtool_hhEqY2Fk 0 6 918 2092 0 14 Dtool_hhEqY2Fk 276 ////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::get_num_v_knots
//       Access: Public
//  Description: Returns the number of knots in the V direction.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2258  
885 14 Dtool_hhEqhRDE 0 6 919 2092 0 14 Dtool_hhEqhRDE 657 ////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::get_num_u_cvs
//       Access: Public
//  Description: Returns the number of control vertices that should be
//               present in the U direction.  This is determined by
//               the number of knots and the order; it does not
//               necessarily reflect the number of vertices that have
//               actually been added to the surface.  (However, if the
//               number of vertices in the surface are wrong, the
//               surface is invalid.)
//////////////////////////////////////////////////////////////////// 1 4 this 3 2258  
886 14 Dtool_hhEqBUqE 0 6 920 2092 0 14 Dtool_hhEqBUqE 657 ////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::get_num_v_cvs
//       Access: Public
//  Description: Returns the number of control vertices that should be
//               present in the V direction.  This is determined by
//               the number of knots and the order; it does not
//               necessarily reflect the number of vertices that have
//               actually been added to the surface.  (However, if the
//               number of vertices in the surface are wrong, the
//               surface is invalid.)
//////////////////////////////////////////////////////////////////// 1 4 this 3 2258  
887 14 Dtool_hhEqX9VB 0 6 921 2092 0 14 Dtool_hhEqX9VB 679 ////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::get_num_cvs
//       Access: Public
//  Description: Returns the total number of control vertices that
//               *should* be defined for the surface.  This is
//               determined by the number of knots and the order, in
//               each direction; it does not necessarily reflect the
//               number of vertices that have actually been added to
//               the surface.  (However, if the number of vertices in
//               the surface are wrong, the surface is invalid.)
//////////////////////////////////////////////////////////////////// 1 4 this 3 2258  
888 14 Dtool_hhEqNE6h 0 6 922 2092 0 14 Dtool_hhEqNE6h 538 ////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::get_u_index
//       Access: Public
//  Description: Returns the U index number of the given vertex within
//               the EggPrimitive's linear list of vertices.  An
//               EggNurbsSurface maps a linear list of vertices to its
//               2-d mesh; this returns the U index number that
//               corresponds to the nth vertex in the list.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2258  12 vertex_index 1 2092  
889 14 Dtool_hhEqNMrr 0 6 923 2092 0 14 Dtool_hhEqNMrr 538 ////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::get_v_index
//       Access: Public
//  Description: Returns the V index number of the given vertex within
//               the EggPrimitive's linear list of vertices.  An
//               EggNurbsSurface maps a linear list of vertices to its
//               2-d mesh; this returns the V index number that
//               corresponds to the nth vertex in the list.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2258  12 vertex_index 1 2092  
890 14 Dtool_hhEqFchs 0 6 924 2092 0 14 Dtool_hhEqFchs 344 ////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::get_vertex_index
//       Access: Public
//  Description: Returns the index number within the EggPrimitive's
//               list of the control vertex at position ui, vi.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2258  2 ui 1 2092  2 vi 1 2092  
891 14 Dtool_hhEq7x_L 0 6 925 2080 0 14 Dtool_hhEq7x_L 503 ////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::is_closed_u
//       Access: Public
//  Description: Returns true if the surface appears to be closed in
//               the U direction.  Since the Egg syntax does not
//               provide a means for explicit indication of closure,
//               this has to be guessed at by examining the surface
//               itself.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2258  
892 14 Dtool_hhEqsx28 0 6 926 2080 0 14 Dtool_hhEqsx28 503 ////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::is_closed_v
//       Access: Public
//  Description: Returns true if the surface appears to be closed in
//               the V direction.  Since the Egg syntax does not
//               provide a means for explicit indication of closure,
//               this has to be guessed at by examining the surface
//               itself.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2258  
893 14 Dtool_hhEq3gZW 0 6 927 2007 0 14 Dtool_hhEq3gZW 295 ////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::get_u_knot
//       Access: Public
//  Description: Returns the nth knot value defined in the U
//               direction.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2258  1 k 1 2092  
894 14 Dtool_hhEq34Kg 0 6 928 2007 0 14 Dtool_hhEq34Kg 295 ////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::get_v_knot
//       Access: Public
//  Description: Returns the nth knot value defined in the V
//               direction.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2258  1 k 1 2092  
895 14 Dtool_hhEqvKm_ 0 7 929 2135 1164 14 Dtool_hhEqvKm_ 294 ////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::get_cv
//       Access: Public
//  Description: Returns the control vertex at the indicate U, V
//               position.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2258  2 ui 1 2092  2 vi 1 2092  
896 14 Dtool_hhEqnPAw 0 7 936 2075 0 14 Dtool_hhEqnPAw 0 0 
897 14 Dtool_hhEqULhN 0 6 931 2261 0 14 Dtool_hhEqULhN 0 1 4 this 3 2258  
898 14 Dtool_hhEqyjF0 0 6 934 2263 0 14 Dtool_hhEqyjF0 0 1 4 this 3 2258  
899 14 Dtool_hhEqIIcI 0 7 939 2267 1875 14 Dtool_hhEqIIcI 225 ////////////////////////////////////////////////////////////////////
//     Function: EggPatch::Copy constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2265  
900 14 Dtool_hhEqI803 0 7 939 2267 1875 14 Dtool_hhEqI803 704 // Filename: eggPatch.I
// Created by:  drose (27Apr12)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggPatch::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 name 1 2084  
901 14 Dtool_hhEqrHsI 0 7 939 2267 1875 14 Dtool_hhEqrHsI 704 // Filename: eggPatch.I
// Created by:  drose (27Apr12)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggPatch::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
902 14 Dtool_hhEqA918 0 7 940 2267 1875 14 Dtool_hhEqA918 233 ////////////////////////////////////////////////////////////////////
//     Function: EggPatch::Copy assignment operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2267  4 copy 1 2265  
903 14 Dtool_hhEqTZ6c 0 7 941 2075 0 14 Dtool_hhEqTZ6c 0 0 
904 14 Dtool_hhEquTpN 0 7 944 2270 1887 14 Dtool_hhEquTpN 222 ////////////////////////////////////////////////////////////////////
//     Function: EggPoint::Copy constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2268  
905 14 Dtool_hhEqWhKI 0 7 944 2270 1887 14 Dtool_hhEqWhKI 701 // Filename: eggPoint.I
// Created by:  drose (15Dec99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggPoint::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 name 1 2084  
906 14 Dtool_hhEqHYEZ 0 7 944 2270 1887 14 Dtool_hhEqHYEZ 701 // Filename: eggPoint.I
// Created by:  drose (15Dec99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggPoint::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
907 14 Dtool_hhEqxU3B 0 7 945 2270 1887 14 Dtool_hhEqxU3B 230 ////////////////////////////////////////////////////////////////////
//     Function: EggPoint::Copy assignment operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2270  4 copy 1 2268  
908 14 Dtool_hhEqYocj 0 6 946 2080 0 14 Dtool_hhEqYocj 218 ////////////////////////////////////////////////////////////////////
//     Function: EggPoint::has_thick
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2268  
909 14 Dtool_hhEq_pP7 0 6 947 2007 0 14 Dtool_hhEq_pP7 330 ////////////////////////////////////////////////////////////////////
//     Function: EggPoint::get_thick
//       Access: Published
//  Description: Returns the thickness set on this particular point.
//               If there is no thickness set, returns 1.0.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2268  
910 14 Dtool_hhEqOlOS 0 4 948 2079 0 14 Dtool_hhEqOlOS 218 ////////////////////////////////////////////////////////////////////
//     Function: EggPoint::set_thick
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2270  5 thick 1 2007  
911 14 Dtool_hhEqIAtY 0 4 949 2079 0 14 Dtool_hhEqIAtY 220 ////////////////////////////////////////////////////////////////////
//     Function: EggPoint::clear_thick
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2270  
912 14 Dtool_hhEq5O26 0 6 950 2080 0 14 Dtool_hhEq5O26 224 ////////////////////////////////////////////////////////////////////
//     Function: EggPoint::has_perspective
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2268  
913 14 Dtool_hhEqfOpS 0 6 951 2080 0 14 Dtool_hhEqfOpS 370 ////////////////////////////////////////////////////////////////////
//     Function: EggPoint::get_perspective
//       Access: Published
//  Description: Returns the perspective flag set on this particular
//               point.  If there is no perspective flag set, returns
//               false.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2268  
914 14 Dtool_hhEqYNHn 0 4 952 2079 0 14 Dtool_hhEqYNHn 224 ////////////////////////////////////////////////////////////////////
//     Function: EggPoint::set_perspective
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2270  11 perspective 1 2080  
915 14 Dtool_hhEqaKhD 0 4 953 2079 0 14 Dtool_hhEqaKhD 226 ////////////////////////////////////////////////////////////////////
//     Function: EggPoint::clear_perspective
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2270  
916 14 Dtool_hhEqmIlG 0 7 954 2075 0 14 Dtool_hhEqmIlG 0 0 
917 14 Dtool_hhEqS2yw 0 7 959 2271 1891 14 Dtool_hhEqS2yw 225 ////////////////////////////////////////////////////////////////////
//     Function: EggPolysetMaker::Constructor
//       Access: Public
//  Description: 
//////////////////////////////////////////////////////////////////// 0 
918 14 Dtool_hhEqlQny 0 4 960 2079 0 14 Dtool_hhEqlQny 609 ////////////////////////////////////////////////////////////////////
//     Function: EggPolysetMaker::set_properties
//       Access: Public
//  Description: Sets the set of properties that determines which
//               polygons are allowed to be grouped together into a
//               single polyset.  This is the bitwise 'or' of all the
//               properties that matter.  If this is 0, all polygons
//               (within a given group) will be lumped into a common
//               polyset regardless of their properties.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2271  10 properties 1 2092  
919 14 Dtool_hhEq9ANi 0 7 961 2075 0 14 Dtool_hhEq9ANi 0 0 
920 14 Dtool_hhEqI_S9 0 7 964 2272 1894 14 Dtool_hhEqI_S9 226 ////////////////////////////////////////////////////////////////////
//     Function: EggPoolUniquifier::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
921 14 Dtool_hhEqxbrf 0 7 965 2075 0 14 Dtool_hhEqxbrf 0 0 
922 14 Dtool_hhEqKf_r 0 7 968 2275 1902 14 Dtool_hhEqKf_r 226 ////////////////////////////////////////////////////////////////////
//     Function: EggSAnimData::Copy constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2273  
923 14 Dtool_hhEqaUFB 0 7 968 2275 1902 14 Dtool_hhEqaUFB 709 // Filename: eggSAnimData.I
// Created by:  drose (19Feb99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggSAnimData::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 name 1 2084  
924 14 Dtool_hhEqhDOv 0 7 968 2275 1902 14 Dtool_hhEqhDOv 709 // Filename: eggSAnimData.I
// Created by:  drose (19Feb99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggSAnimData::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
925 14 Dtool_hhEq9kyZ 0 7 969 2275 1902 14 Dtool_hhEq9kyZ 234 ////////////////////////////////////////////////////////////////////
//     Function: EggSAnimData::Copy assignment operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2275  4 copy 1 2273  
926 14 Dtool_hhEqpyvE 0 6 970 2092 0 14 Dtool_hhEqpyvE 326 ////////////////////////////////////////////////////////////////////
//     Function: EggSAnimData::get_num_rows
//       Access: Public
//  Description: Returns the number of rows in the table.  For an
//               SAnim table, each row has one column.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2273  
927 14 Dtool_hhEqtEEc 0 6 971 2007 0 14 Dtool_hhEqtEEc 329 ////////////////////////////////////////////////////////////////////
//     Function: EggSAnimData::get_value
//       Access: Public
//  Description: Returns the value at the indicated row.  Row must be
//               in the range 0 <= row < get_num_rows().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2273  3 row 1 2092  
928 14 Dtool_hhEqS9Mu 0 4 972 2079 0 14 Dtool_hhEqS9Mu 329 ////////////////////////////////////////////////////////////////////
//     Function: EggSAnimData::set_value
//       Access: Public
//  Description: Changes the value at the indicated row.  Row must be
//               in the range 0 <= row < get_num_rows().
//////////////////////////////////////////////////////////////////// 3 4 this 3 2275  3 row 1 2092  5 value 1 2007  
929 14 Dtool_hhEqL8bt 0 4 973 2079 0 14 Dtool_hhEqL8bt 322 ////////////////////////////////////////////////////////////////////
//     Function: EggSAnimData::optimize
//       Access: Public
//  Description: Optimizes the data by collapsing a long table of
//               duplicate values into a single value.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2275  
930 14 Dtool_hhEqmWjq 0 7 974 2075 0 14 Dtool_hhEqmWjq 0 0 
931 14 Dtool_hhEq4E8v 0 7 978 2278 1910 14 Dtool_hhEq4E8v 222 ////////////////////////////////////////////////////////////////////
//     Function: EggTable::Copy constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2276  
932 14 Dtool_hhEqTQ_y 0 7 978 2278 1910 14 Dtool_hhEqTQ_y 701 // Filename: eggTable.I
// Created by:  drose (19Feb99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggTable::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 name 1 2084  
933 14 Dtool_hhEqSp2D 0 7 978 2278 1910 14 Dtool_hhEqSp2D 701 // Filename: eggTable.I
// Created by:  drose (19Feb99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggTable::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
934 14 Dtool_hhEqxP6Z 0 7 979 2278 1910 14 Dtool_hhEqxP6Z 230 ////////////////////////////////////////////////////////////////////
//     Function: EggTable::Copy assignment operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2278  4 copy 1 2276  
935 14 Dtool_hhEq_8_9 0 4 980 2079 0 14 Dtool_hhEq_8_9 220 ////////////////////////////////////////////////////////////////////
//     Function: EggTable::set_table_type
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2278  4 type 1 2065  
936 14 Dtool_hhEqaj1_ 0 6 981 2065 0 14 Dtool_hhEqaj1_ 220 ////////////////////////////////////////////////////////////////////
//     Function: EggTable::get_table_type
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2276  
937 14 Dtool_hhEqZ_ev 0 6 982 2080 0 14 Dtool_hhEqZ_ev 313 ////////////////////////////////////////////////////////////////////
//     Function: EggTable::has_transform
//       Access: Public
//  Description: Returns true if the table contains a transform
//               description, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2276  
938 14 Dtool_hhEqg8gw 0 6 983 2065 0 14 Dtool_hhEqg8gw 412 ////////////////////////////////////////////////////////////////////
//     Function: EggTable::string_table_type
//       Access: Public, Static
//  Description: Returns the TableType value associated with the given
//               string representation, or TT_invalid if the string
//               does not match any known TableType value.
//////////////////////////////////////////////////////////////////// 1 6 string 1 2084  
939 14 Dtool_hhEqS_i1 0 7 984 2075 0 14 Dtool_hhEqS_i1 0 0 
940 14 Dtool_hhEqbU7L 0 7 987 2279 1913 14 Dtool_hhEqbU7L 229 ////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
941 14 Dtool_hhEq8vVa 0 7 987 2279 1913 14 Dtool_hhEq8vVa 234 ////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2280  
942 14 Dtool_hhEqw9Zk 0 6 988 2279 0 14 Dtool_hhEqw9Zk 242 ////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2279  4 copy 1 2280  
943 14 Dtool_hhEqGhyi 0 4 990 2079 0 14 Dtool_hhEqGhyi 265 ////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::clear
//       Access: Public
//  Description: Removes all textures from the collection.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2279  
944 14 Dtool_hhEqrcPl 0 6 991 2092 0 14 Dtool_hhEqrcPl 479 ////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::extract_textures
//       Access: Public
//  Description: Walks the egg hierarchy beginning at the indicated
//               node, and removes any EggTextures encountered in the
//               hierarchy, adding them to the collection.  Returns
//               the number of EggTextures encountered.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2279  4 node 1 2091  
945 14 Dtool_hhEq8UpD 0 6 992 2080 0 14 Dtool_hhEq8UpD 322 ////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::is_empty
//       Access: Published
//  Description: Returns true if there are no EggTexures in the
//               collection, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2280  
946 14 Dtool_hhEqsDuL 0 6 993 2092 0 14 Dtool_hhEqsDuL 290 ////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::get_num_textures
//       Access: Published
//  Description: Returns the number of EggTextures in the collection.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2280  
947 14 Dtool_hhEqWocW 0 7 994 2210 1537 14 Dtool_hhEqWocW 278 ////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::get_texture
//       Access: Published
//  Description: Returns the nth EggTexture in the collection.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2280  5 index 1 2092  
948 14 Dtool_hhEqKek0 0 6 995 2092 0 14 Dtool_hhEqKek0 1765 ////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::find_used_textures
//       Access: Public
//  Description: Walks the egg hierarchy beginning at the indicated
//               node, looking for textures that are referenced by
//               primitives but are not already members of the
//               collection, adding them to the collection.
//
//               If this is called following extract_textures(), it
//               can be used to pick up any additional texture
//               references that appeared in the egg hierarchy (but
//               whose EggTexture node was not actually part of the
//               hierarchy).
//
//               If this is called in lieu of extract_textures(), it
//               will fill up the collection with all of the
//               referenced textures (and only the referenced
//               textures), without destructively removing the
//               EggTextures from the hierarchy.
//
//               This also has the side effect of incrementing the
//               internal usage count for a texture in the collection
//               each time a texture reference is encountered.  This
//               side effect is taken advantage of by
//               remove_unused_textures().
//
//               And one more side effect: this function identifies
//               the presence of multitexturing in the egg file, and
//               calls multitexture_over() on each texture
//               appropriately so that, after this call, you may
//               expect get_multitexture_sort() to return a reasonable
//               value for each texture.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2279  4 node 1 2088  
949 14 Dtool_hhEq9oZ4 0 4 996 2079 0 14 Dtool_hhEq9oZ4 570 ////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::remove_unused_textures
//       Access: Public
//  Description: Removes any textures from the collection that aren't
//               referenced by any primitives in the indicated egg
//               hierarchy.  This also, incidentally, adds textures to
//               the collection that had been referenced by primitives
//               but had not previously appeared in the collection.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2279  4 node 1 2088  
950 14 Dtool_hhEqqFH7 0 6 997 2092 0 14 Dtool_hhEqqFH7 749 ////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::collapse_equivalent_textures
//       Access: Public
//  Description: Walks through the collection and collapses together
//               any separate textures that are equivalent according
//               to the indicated equivalence factor, eq (see
//               EggTexture::is_equivalent_to()).  The return value is
//               the number of textures removed.
//
//               This flavor of collapse_equivalent_textures()
//               automatically adjusts all the primitives in the egg
//               hierarchy to refer to the new texture pointers.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2279  2 eq 1 2092  4 node 1 2091  
951 14 Dtool_hhEqKhTa 0 6 997 2092 0 14 Dtool_hhEqKhTa 1026 ////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::collapse_equivalent_textures
//       Access: Public
//  Description: Walks through the collection and collapses together
//               any separate textures that are equivalent according
//               to the indicated equivalence factor, eq (see
//               EggTexture::is_equivalent_to()).  The return value is
//               the number of textures removed.
//
//               This flavor of collapse_equivalent_textures() does
//               not adjust any primitives in the egg hierarchy;
//               instead, it fills up the 'removed' map with an entry
//               for each removed texture, mapping it back to the
//               equivalent retained texture.  It's up to the user to
//               then call replace_textures() with this map, if
//               desired, to apply these changes to the egg hierarchy.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2279  2 eq 1 2092  7 removed 1 2282  
952 14 Dtool_hhEqeVh6 0 4 998 2079 0 14 Dtool_hhEqeVh6 601 ////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::replace_textures
//       Access: Public, Static
//  Description: Walks the egg hierarchy, changing out any reference
//               to a texture appearing on the left side of the map
//               with its corresponding texture on the right side.
//               This is most often done following a call to
//               collapse_equivalent_textures().  It does not directly
//               affect the Collection.
//////////////////////////////////////////////////////////////////// 2 4 node 1 2091  7 replace 1 2284  
953 14 Dtool_hhEqalB_ 0 4 999 2079 0 14 Dtool_hhEqalB_ 384 ////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::uniquify_trefs
//       Access: Public
//  Description: Guarantees that each texture in the collection has a
//               unique TRef name.  This is essential before writing
//               an egg file.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2279  
954 14 Dtool_hhEq1R_8 0 4 1000 2079 0 14 Dtool_hhEq1R_8 404 ////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::sort_by_tref
//       Access: Public
//  Description: Sorts all the textures into alphabetical order by
//               TRef name.  Subsequent operations using begin()/end()
//               will traverse in this sorted order.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2279  
955 14 Dtool_hhEqOnfn 0 4 1001 2079 0 14 Dtool_hhEqOnfn 471 ////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::sort_by_basename
//       Access: Public
//  Description: Sorts all the textures into alphabetical order by
//               the basename part (including extension) of the
//               filename.  Subsequent operations using begin()/end()
//               will traverse in this sorted order.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2279  
956 14 Dtool_hhEqWRbQ 0 7 1002 2210 1537 14 Dtool_hhEqWRbQ 278 ////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::operator []
//       Access: Published
//  Description: Returns the nth EggTexture in the collection.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2280  1 n 1 2150  
957 14 Dtool_hhEqiZRv 0 6 1003 2150 0 14 Dtool_hhEqiZRv 278 ////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::size
//       Access: Published
//  Description: Returns the number of EggTextures in the collection.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2280  
958 14 Dtool_hhEqTk2Y 0 6 1004 2080 0 14 Dtool_hhEqTk2Y 409 ////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::add_texture
//       Access: Public
//  Description: Explicitly adds a new texture to the collection.
//               Returns true if the texture was added, false if it
//               was already there or if there was some error.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2279  7 texture 1 2210  
959 14 Dtool_hhEqyDeK 0 6 1005 2080 0 14 Dtool_hhEqyDeK 410 ////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::remove_texture
//       Access: Public
//  Description: Explicitly removes a texture from the collection.
//               Returns true if the texture was removed, false if it
//               wasn't there or if there was some error.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2279  7 texture 1 2210  
960 14 Dtool_hhEqLULD 0 7 1006 2210 1537 14 Dtool_hhEqLULD 472 ////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::create_unique_texture
//       Access: Public
//  Description: Creates a new texture if there is not already one
//               equivalent (according to eq, see
//               EggTexture::is_equivalent_to()) to the indicated
//               texture, or returns the existing one if there is.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2279  4 copy 1 2208  2 eq 1 2092  
961 14 Dtool_hhEq4Tew 0 7 1007 2210 1537 14 Dtool_hhEq4Tew 325 ////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::find_tref
//       Access: Public
//  Description: Returns the texture with the indicated TRef name, or
//               NULL if no texture matches.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2280  9 tref_name 1 2084  
962 14 Dtool_hhEqQxLn 0 7 1008 2210 1537 14 Dtool_hhEqQxLn 328 ////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::find_filename
//       Access: Public
//  Description: Returns the texture with the indicated filename, or
//               NULL if no texture matches.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2280  8 filename 1 2159  
963 14 Dtool_hhEqngwy 0 7 1010 2288 1679 14 Dtool_hhEqngwy 231 ////////////////////////////////////////////////////////////////////
//     Function: EggTriangleFan::Copy constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2286  
964 14 Dtool_hhEqTlzZ 0 7 1010 2288 1679 14 Dtool_hhEqTlzZ 716 // Filename: eggTriangleFan.I
// Created by:  drose (23Mar05)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggTriangleFan::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 name 1 2084  
965 14 Dtool_hhEqHju4 0 7 1010 2288 1679 14 Dtool_hhEqHju4 716 // Filename: eggTriangleFan.I
// Created by:  drose (23Mar05)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggTriangleFan::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
966 14 Dtool_hhEq1N5q 0 7 1011 2288 1679 14 Dtool_hhEq1N5q 239 ////////////////////////////////////////////////////////////////////
//     Function: EggTriangleFan::Copy assignment operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2288  4 copy 1 2286  
967 14 Dtool_hhEqTtk9 0 7 1012 2075 0 14 Dtool_hhEqTtk9 0 0 
968 14 Dtool_hhEqzlST 0 7 1014 2291 1679 14 Dtool_hhEqzlST 233 ////////////////////////////////////////////////////////////////////
//     Function: EggTriangleStrip::Copy constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2289  
969 14 Dtool_hhEqx593 0 7 1014 2291 1679 14 Dtool_hhEqx593 720 // Filename: eggTriangleStrip.I
// Created by:  drose (13Mar05)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggTriangleStrip::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 name 1 2084  
970 14 Dtool_hhEqgo8R 0 7 1014 2291 1679 14 Dtool_hhEqgo8R 720 // Filename: eggTriangleStrip.I
// Created by:  drose (13Mar05)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggTriangleStrip::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
971 14 Dtool_hhEqVjYd 0 7 1015 2291 1679 14 Dtool_hhEqVjYd 241 ////////////////////////////////////////////////////////////////////
//     Function: EggTriangleStrip::Copy assignment operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2291  4 copy 1 2289  
972 14 Dtool_hhEqKwkg 0 7 1016 2075 0 14 Dtool_hhEqKwkg 0 0 
973 14 Dtool_hhEqRYEx 0 7 1018 2294 1962 14 Dtool_hhEqRYEx 322 ////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::Conversion constructor
//       Access: Public
//  Description: Converts the older-style XfmAnim table to the
//               newer-style XfmSAnim table.
//////////////////////////////////////////////////////////////////// 1 12 convert_from 1 2292  
974 14 Dtool_hhEqmYOa 0 7 1018 2294 1962 14 Dtool_hhEqmYOa 225 ////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::Copy constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2295  
975 14 Dtool_hhEqcgvp 0 7 1018 2294 1962 14 Dtool_hhEqcgvp 707 // Filename: eggXfmSAnim.I
// Created by:  drose (19Feb99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 name 1 2084  2 cs 1 2162  
976 14 Dtool_hhEq7lEE 0 7 1018 2294 1962 14 Dtool_hhEq7lEE 707 // Filename: eggXfmSAnim.I
// Created by:  drose (19Feb99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 name 1 2084  
977 14 Dtool_hhEqg0m6 0 7 1018 2294 1962 14 Dtool_hhEqg0m6 707 // Filename: eggXfmSAnim.I
// Created by:  drose (19Feb99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
978 14 Dtool_hhEqBbhs 0 7 1019 2294 1962 14 Dtool_hhEqBbhs 233 ////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::Copy assignment operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2294  4 copy 1 2295  
979 14 Dtool_hhEqsNjA 0 4 1020 2079 0 14 Dtool_hhEqsNjA 216 ////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::set_fps
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2294  3 fps 1 2007  
980 14 Dtool_hhEq6b_o 0 4 1021 2079 0 14 Dtool_hhEq6b_o 218 ////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::clear_fps
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2294  
981 14 Dtool_hhEqfhuX 0 6 1022 2080 0 14 Dtool_hhEqfhuX 216 ////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::has_fps
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2295  
982 14 Dtool_hhEqngbU 0 6 1023 2007 0 14 Dtool_hhEqngbU 262 ////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::get_fps
//       Access: Public
//  Description: This is only valid if has_fps() returns true.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2295  
983 14 Dtool_hhEqW2jL 0 4 1024 2079 0 14 Dtool_hhEqW2jL 218 ////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::set_order
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2294  5 order 1 2084  
984 14 Dtool_hhEqfUuB 0 4 1025 2079 0 14 Dtool_hhEqfUuB 220 ////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::clear_order
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2294  
985 14 Dtool_hhEq2pYT 0 6 1026 2080 0 14 Dtool_hhEq2pYT 218 ////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::has_order
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2295  
986 14 Dtool_hhEqcqDQ 0 6 1027 2084 0 14 Dtool_hhEqcqDQ 218 ////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::get_order
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2295  
987 14 Dtool_hhEqAIxi 0 6 1028 2084 0 14 Dtool_hhEqAIxi 448 ////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::get_standard_order
//       Access: Public, Static
//  Description: Returns the standard order of matrix component
//               composition.  This is what the order string must be
//               set to in order to use set_value() or add_data()
//               successfully.
//////////////////////////////////////////////////////////////////// 0 
988 14 Dtool_hhEqnUlS 0 6 1029 2162 0 14 Dtool_hhEqnUlS 589 ////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::get_coordinate_system
//       Access: Public
//  Description: Returns the coordinate system this table believes it
//               is defined within.  This should always match the
//               coordinate system of the EggData structure that owns
//               it.  It is necessary to store it here because the
//               meaning of the h, p, and r columns depends on the
//               coordinate system.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2295  
989 14 Dtool_hhEqqvPQ 0 4 1030 2079 0 14 Dtool_hhEqqvPQ 290 ////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::optimize
//       Access: Public
//  Description: Optimizes the table by collapsing redundant
//               sub-tables.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2294  
990 14 Dtool_hhEqga25 0 4 1031 2079 0 14 Dtool_hhEqga25 512 ////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::optimize_to_standard_order
//       Access: Public
//  Description: Optimizes the table by collapsing redundant
//               sub-tables, and simultaneously ensures that the order
//               string is the standard order (which is the same as
//               that supported by compose_matrix() and
//               decompose_matrix()).
//////////////////////////////////////////////////////////////////// 1 4 this 3 2294  
991 14 Dtool_hhEqsVux 0 4 1032 2079 0 14 Dtool_hhEqsVux 508 ////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::normalize
//       Access: Public
//  Description: The inverse operation of optimize(), this ensures
//               that all the sub-tables have the same length by
//               duplicating rows as necessary.  This is needed before
//               doing operations like add_data() or set_value() on an
//               existing table.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2294  
992 14 Dtool_hhEqXO7Q 0 6 1033 2092 0 14 Dtool_hhEqXO7Q 528 ////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::get_num_rows
//       Access: Public
//  Description: Returns the effective number of rows in the table.
//               This is actually the number of rows of the smallest
//               subtable larger than one row.  This is a convenience
//               function that treats the table of tables as if it
//               were a single table of matrices.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2295  
993 14 Dtool_hhEq4L7T 0 4 1034 2079 0 14 Dtool_hhEq4L7T 639 ////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::get_value
//       Access: Public
//  Description: Returns the value of the aggregate row of the table
//               as a matrix.  This is a convenience function that
//               treats the table of tables as if it were a single
//               table of matrices.  It is an error to call this if
//               any SAnimData children of this node have an improper
//               name (e.g. not a single letter, or not one of
//               "ijkabchprxyz").
//////////////////////////////////////////////////////////////////// 3 4 this 3 2295  3 row 1 2092  3 mat 1 2297  
994 14 Dtool_hhEqIeZX 0 6 1035 2080 0 14 Dtool_hhEqIeZX 716 ////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::set_value
//       Access: Public
//  Description: Replaces the indicated row of the table with the
//               given matrix.
//
//               This function can only be called if all the
//               constraints of add_data(), below, are met.  Call
//               normalize() first if you are not sure.
//
//               The return value is true if the matrix can be
//               decomposed and stored as scale, shear, rotate, and
//               translate, or false otherwise.  The data is set in
//               either case.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2294  3 row 1 2092  3 mat 1 2093  
995 14 Dtool_hhEq4n4x 0 4 1036 2079 0 14 Dtool_hhEq4n4x 316 ////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::clear_data
//       Access: Public
//  Description: Removes all data from the table.  It does this by
//               removing all of its children.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2294  
996 14 Dtool_hhEqCJDG 0 6 1037 2080 0 14 Dtool_hhEqCJDG 1669 ////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::add_data
//       Access: Public
//  Description: Adds a new matrix to the table, by adding a new row
//               to each of the subtables.
//
//               This is a convenience function that
//               treats the table of tables as if it were a single
//               table of matrices.  It is an error to call this if
//               any SAnimData children of this node have an improper
//               name (e.g. not a single letter, or not one of
//               "ijkabchprxyz").
//
//               This function has the further requirement that all
//               nine of the subtables must exist and be of the same
//               length.  Furthermore, the order string must be the
//               standard order string, which matches the system
//               compose_matrix() and decompose_matrix() functions.
//
//               Thus, you probably cannot take an existing
//               EggXfmSAnim object and start adding matrices to the
//               end; you must clear out the original data first.  (As
//               a special exception, if no tables exist, they will be
//               created.)  The method normalize() will do this for
//               you on an existing EggXfmSAnim.
//
//               This function may fail silently if the matrix cannot
//               be decomposed into scale, shear, rotate, and
//               translate.  In this case, the closest approximation
//               is added to the table, and false is returned.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2294  3 mat 1 2093  
997 14 Dtool_hhEqAOJJ 0 4 1038 2079 0 14 Dtool_hhEqAOJJ 330 ////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::add_component_data
//       Access: Public
//  Description: Adds a new row to the named component (one of
//               matrix_component_letters) of the table.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2294  14 component_name 1 2084  5 value 1 2007  
998 14 Dtool_hhEqXAkq 0 4 1038 2079 0 14 Dtool_hhEqXAkq 307 ////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::add_component_data
//       Access: Public
//  Description: Adds a new row to the indicated component (0-12) of
//               the table.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2294  9 component 1 2092  5 value 1 2007  
999 14 Dtool_hhEq3FmY 0 4 1039 2079 0 14 Dtool_hhEq3FmY 442 ////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::compose_with_order
//       Access: Public, Static
//  Description: Composes a matrix out of the nine individual
//               components, respecting the order string.  The
//               components will be applied in the order indicated by
//               the string.
//////////////////////////////////////////////////////////////////// 7 3 mat 1 2297  5 scale 1 2182  5 shear 1 2182  3 hpr 1 2182  5 trans 1 2182  5 order 1 2084  2 cs 1 2162  
1000 14 Dtool_hhEqm6HI 0 7 1040 2075 0 14 Dtool_hhEqm6HI 0 0 
1001 14 Dtool_hhEqb2RM 0 7 1043 2298 1979 14 Dtool_hhEqb2RM 228 ////////////////////////////////////////////////////////////////////
//     Function: EggXfmAnimData::Copy constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2292  
1002 14 Dtool_hhEqIOPW 0 7 1043 2298 1979 14 Dtool_hhEqIOPW 325 ////////////////////////////////////////////////////////////////////
//     Function: EggXfmAnimData::Conversion constructor
//       Access: Public
//  Description: Converts the newer-style XfmSAnim table to the
//               older-style XfmAnim table.
//////////////////////////////////////////////////////////////////// 1 12 convert_from 1 2295  
1003 14 Dtool_hhEq4g06 0 7 1043 2298 1979 14 Dtool_hhEq4g06 713 // Filename: eggXfmAnimData.I
// Created by:  drose (19Feb99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggXfmAnimData::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 name 1 2084  2 cs 1 2162  
1004 14 Dtool_hhEqwzqM 0 7 1043 2298 1979 14 Dtool_hhEqwzqM 713 // Filename: eggXfmAnimData.I
// Created by:  drose (19Feb99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggXfmAnimData::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 name 1 2084  
1005 14 Dtool_hhEq9omr 0 7 1043 2298 1979 14 Dtool_hhEq9omr 713 // Filename: eggXfmAnimData.I
// Created by:  drose (19Feb99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggXfmAnimData::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
1006 14 Dtool_hhEquTJ7 0 7 1044 2298 1979 14 Dtool_hhEquTJ7 236 ////////////////////////////////////////////////////////////////////
//     Function: EggXfmAnimData::Copy assignment operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2298  4 copy 1 2292  
1007 14 Dtool_hhEqQOOI 0 4 1045 2079 0 14 Dtool_hhEqQOOI 221 ////////////////////////////////////////////////////////////////////
//     Function: EggXfmAnimData::set_order
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2298  5 order 1 2084  
1008 14 Dtool_hhEqF43l 0 4 1046 2079 0 14 Dtool_hhEqF43l 223 ////////////////////////////////////////////////////////////////////
//     Function: EggXfmAnimData::clear_order
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2298  
1009 14 Dtool_hhEqpqB7 0 6 1047 2080 0 14 Dtool_hhEqpqB7 221 ////////////////////////////////////////////////////////////////////
//     Function: EggXfmAnimData::has_order
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2292  
1010 14 Dtool_hhEqxPBu 0 6 1048 2084 0 14 Dtool_hhEqxPBu 221 ////////////////////////////////////////////////////////////////////
//     Function: EggXfmAnimData::get_order
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2292  
1011 14 Dtool_hhEq4nKv 0 6 1049 2084 0 14 Dtool_hhEq4nKv 451 ////////////////////////////////////////////////////////////////////
//     Function: EggXfmAnimData::get_standard_order
//       Access: Public, Static
//  Description: Returns the standard order of matrix component
//               composition.  This is what the order string must be
//               set to in order to use set_value() or add_data()
//               successfully.
//////////////////////////////////////////////////////////////////// 0 
1012 14 Dtool_hhEqf_7y 0 4 1050 2079 0 14 Dtool_hhEqf_7y 224 ////////////////////////////////////////////////////////////////////
//     Function: EggXfmAnimData::set_contents
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2298  8 contents 1 2084  
1013 14 Dtool_hhEqCl5p 0 4 1051 2079 0 14 Dtool_hhEqCl5p 226 ////////////////////////////////////////////////////////////////////
//     Function: EggXfmAnimData::clear_contents
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2298  
1014 14 Dtool_hhEqjktg 0 6 1052 2080 0 14 Dtool_hhEqjktg 224 ////////////////////////////////////////////////////////////////////
//     Function: EggXfmAnimData::has_contents
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2292  
1015 14 Dtool_hhEqbBtT 0 6 1053 2084 0 14 Dtool_hhEqbBtT 224 ////////////////////////////////////////////////////////////////////
//     Function: EggXfmAnimData::get_contents
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2292  
1016 14 Dtool_hhEqFVWG 0 6 1054 2162 0 14 Dtool_hhEqFVWG 592 ////////////////////////////////////////////////////////////////////
//     Function: EggXfmAnimData::get_coordinate_system
//       Access: Public
//  Description: Returns the coordinate system this table believes it
//               is defined within.  This should always match the
//               coordinate system of the EggData structure that owns
//               it.  It is necessary to store it here because the
//               meaning of the h, p, and r columns depends on the
//               coordinate system.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2292  
1017 14 Dtool_hhEqjSnu 0 6 1055 2092 0 14 Dtool_hhEqjSnu 265 ////////////////////////////////////////////////////////////////////
//     Function: EggXfmAnimData::get_num_rows
//       Access: Public
//  Description: Returns the number of rows in the table.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2292  
1018 14 Dtool_hhEqf3hX 0 6 1056 2092 0 14 Dtool_hhEqf3hX 393 ////////////////////////////////////////////////////////////////////
//     Function: EggXfmAnimData::get_num_cols
//       Access: Public
//  Description: Returns the number of columns in the table.  This is
//               set according to the "contents" string, which defines
//               the meaning of each column.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2292  
1019 14 Dtool_hhEqNC28 0 4 1057 2079 0 14 Dtool_hhEqNC28 437 ////////////////////////////////////////////////////////////////////
//     Function: EggXfmAnimData::get_value
//       Access: Public
//  Description: Returns the value of the aggregate row of the table
//               as a matrix.  This is a convenience function that
//               treats the 2-d table as if it were a single table of
//               matrices.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2292  3 row 1 2092  3 mat 1 2297  
1020 14 Dtool_hhEq_V0v 0 6 1057 2007 0 14 Dtool_hhEq_V0v 400 ////////////////////////////////////////////////////////////////////
//     Function: EggXfmAnimData::get_value
//       Access: Public
//  Description: Returns the value at the indicated row.  Row must be
//               in the range 0 <= row < get_num_rows(); col must be
//               in the range 0 <= col < get_num_cols().
//////////////////////////////////////////////////////////////////// 3 4 this 3 2292  3 row 1 2092  3 col 1 2092  
1021 14 Dtool_hhEq0uoj 0 7 1058 2075 0 14 Dtool_hhEq0uoj 0 0 
320
1980 11 EggUserData 0 75777 11 EggUserData 11 EggUserData 0 0 0 1 1022 0 0 2 1023 1024 0 0 1 0 1981 0 0 0 0 632
////////////////////////////////////////////////////////////////////
//       Class : EggUserData
// Description : This is a base class for a user-defined data type to
//               extend egg structures in processing code.  The user
//               of the egg library may derive from EggUserData to
//               associate any arbitrary data with various egg
//               objects.
//
//               However, this data will not be written out to the
//               disk when the egg file is written; it is an in-memory
//               object only.
////////////////////////////////////////////////////////////////////

1981 19 TypedReferenceCount 0 2049 19 TypedReferenceCount 19 TypedReferenceCount 0 0 0 0 0 0 0 0 0 0 0 0 710
////////////////////////////////////////////////////////////////////
//       Class : TypedReferenceCount
// Description : A base class for things which need to inherit from
//               both TypedObject and from ReferenceCount.  It's
//               convenient to define this intermediate base class
//               instead of multiply inheriting from the two classes
//               each time they are needed, so that we can sensibly
//               pass around pointers to things which are both
//               TypedObjects and ReferenceCounters.
//               
//               See also TypedObject for detailed instructions.
////////////////////////////////////////////////////////////////////

1982 9 EggObject 0 75777 9 EggObject 9 EggObject 0 0 0 1 1025 0 0 6 1026 1027 1028 1029 1030 1031 0 0 1 0 1981 0 0 0 0 292
////////////////////////////////////////////////////////////////////
//       Class : EggObject
// Description : The highest-level base class in the egg directory.
//               (Almost) all things egg inherit from this.
////////////////////////////////////////////////////////////////////

1983 14 EggNamedObject 0 141313 14 EggNamedObject 14 EggNamedObject 0 0 0 1 1036 1040 0 3 1037 1038 1039 0 0 2 3 1982 1032 1033 3 1984 1034 1035 0 0 274
////////////////////////////////////////////////////////////////////
//       Class : EggNamedObject
// Description : This is a fairly low-level base class--any egg
//               object that has a name.
////////////////////////////////////////////////////////////////////

1984 7 Namable 0 2049 7 Namable 7 Namable 0 0 0 0 0 0 0 0 0 0 0 0 324
////////////////////////////////////////////////////////////////////
//       Class : Namable
// Description : A base class for all things which can have a name.
//               The name is either empty or nonempty, but it is never
//               NULL.
////////////////////////////////////////////////////////////////////

1985 7 EggNode 0 141313 7 EggNode 7 EggNode 0 0 0 0 1079 0 38 1041 1042 1043 1044 1045 1046 1047 1048 1049 1050 1051 1052 1053 1054 1055 1056 1057 1058 1059 1060 1061 1062 1063 1064 1065 1066 1067 1068 1069 1070 1071 1072 1073 1074 1075 1076 1077 1078 0 0 1 0 1983 0 0 0 0 409
////////////////////////////////////////////////////////////////////
//       Class : EggNode
// Description : A base class for things that may be directly added
//               into the egg hierarchy.  This includes groups,
//               joints, polygons, vertex pools, etc., but does not
//               include things like vertices.
////////////////////////////////////////////////////////////////////

1986 11 EggAnimData 0 141313 11 EggAnimData 11 EggAnimData 0 0 0 0 1090 0 10 1080 1081 1082 1083 1084 1085 1086 1087 1088 1089 0 0 1 0 1985 0 0 0 0 0

1987 14 EggAnimPreload 0 141313 14 EggAnimPreload 14 EggAnimPreload 0 0 0 1 1091 1102 0 10 1092 1093 1094 1095 1096 1097 1098 1099 1100 1101 0 0 1 0 1985 0 0 0 0 230
////////////////////////////////////////////////////////////////////
//       Class : EggAnimPreload
// Description : This corresponds to an <AnimPreload> entry.
////////////////////////////////////////////////////////////////////

1988 13 EggAttributes 0 26625 13 EggAttributes 13 EggAttributes 0 0 0 1 1105 1107 2 2300 2301 18 1106 1108 1109 1110 1111 1112 1113 1114 1115 1116 1117 1118 1119 1120 1121 1122 1123 1126 0 0 1 3 1989 1103 1104 0 0 606
////////////////////////////////////////////////////////////////////
//       Class : EggAttributes
// Description : The set of attributes that may be applied to vertices
//               as well as polygons, such as surface normal and
//               color.
//
//               This class cannot inherit from EggObject, because it
//               causes problems at the EggPolygon level with multiple
//               appearances of the EggObject base class.  And making
//               EggObject a virtual base class is just no fun.
////////////////////////////////////////////////////////////////////

1989 10 MemoryBase 0 2049 10 MemoryBase 10 MemoryBase 0 0 0 0 0 0 0 0 0 0 0 0 704
////////////////////////////////////////////////////////////////////
//       Class : MemoryBase
// Description : This class is intended to be the base class of all
//               objects in Panda that might be allocated and deleted
//               via the new and delete operators.  It redefines these
//               operators to provide some memory tracking support.
//
//               We used to try to override the global operator new
//               and delete methods, but that seems to cause problems
//               when including header files for C++-based system
//               libraries (such as are found on OSX).
////////////////////////////////////////////////////////////////////

1990 18 EggMorphVertexList 0 1050624 37 EggMorphList< EggMorph< LVector3d > > 37 EggMorphList< EggMorph< LVector3d > > 0 0 0 0 0 0 0 0 0 0 0 0 0

1991 17 EggMorphColorList 0 1050624 37 EggMorphList< EggMorph< LVector4f > > 37 EggMorphList< EggMorph< LVector4f > > 0 0 0 0 0 0 0 0 0 0 0 0 0

1992 11 EggVertexUV 0 75777 11 EggVertexUV 11 EggVertexUV 0 0 0 1 1127 1040 1 2302 21 1128 1129 1130 1131 1132 1133 1134 1135 1136 1137 1138 1139 1140 1141 1142 1143 1144 1145 1146 1147 1149 0 0 1 0 1983 0 0 0 0 406
////////////////////////////////////////////////////////////////////
//       Class : EggVertexUV
// Description : The set of UV's that may or may not be assigned to a
//               vertex.  To support multitexturing, there may be
//               multiple sets of UV's on a particular vertex, each
//               with its own name.
////////////////////////////////////////////////////////////////////

1993 12 EggVertexAux 0 75777 12 EggVertexAux 12 EggVertexAux 0 0 0 1 1150 1040 0 7 1151 1152 1153 1154 1155 1156 1157 0 0 1 0 1983 0 0 0 0 500
////////////////////////////////////////////////////////////////////
//       Class : EggVertexAux
// Description : The set of named auxiliary data that may or may not
//               be assigned to a vertex.  Panda will import this data
//               and create a custom column for it in the vertex data,
//               but will not otherwise interpret it.  Presumably, a
//               shader will process the data later.
////////////////////////////////////////////////////////////////////

1994 9 EggVertex 0 26625 9 EggVertex 9 EggVertex 0 0 0 1 1162 1164 1 2303 46 1163 1165 1166 1167 1168 1169 1170 1171 1172 1173 1174 1175 1176 1177 1178 1179 1180 1181 1182 1183 1184 1185 1186 1187 1188 1189 1190 1191 1192 1193 1194 1195 1196 1197 1198 1199 1200 1201 1202 1203 1204 1205 1206 1207 1208 1210 0 0 2 3 1982 1158 1159 3 1988 1160 1161 0 0 291
////////////////////////////////////////////////////////////////////
//       Class : EggVertex
// Description : Any one-, two-, three-, or four-component vertex,
//               possibly with attributes such as a normal.
////////////////////////////////////////////////////////////////////

1995 13 EggVertexPool 0 75777 13 EggVertexPool 13 EggVertexPool 0 0 0 1 1211 1079 0 28 1212 1213 1214 1215 1216 1217 1218 1219 1220 1221 1222 1223 1224 1225 1226 1227 1228 1229 1230 1231 1232 1233 1234 1235 1236 1237 1238 1239 0 0 1 0 1985 0 0 0 0 876
////////////////////////////////////////////////////////////////////
//       Class : EggVertexPool
// Description : A collection of vertices.  There may be any number of
//               vertex pools in a single egg structure.  The vertices
//               in a single pool need not necessarily have any
//               connection to each other, but it is necessary that
//               any one primitive (e.g. a polygon) must pull all its
//               vertices from the same pool.
//
//               An EggVertexPool is an STL-style container of
//               pointers to EggVertex's.  Functions add_vertex() and
//               remove_vertex() are provided to manipulate the list.
//               The list may also be operated on (read-only) via
//               iterators and begin()/end().
////////////////////////////////////////////////////////////////////

1996 12 EggGroupNode 0 75777 12 EggGroupNode 12 EggGroupNode 0 0 0 1 1240 1079 0 37 1241 1242 1243 1244 1245 1246 1247 1248 1249 1250 1251 1252 1253 1254 1255 1256 1257 1258 1259 1260 1261 1262 1263 1264 1265 1266 1267 1268 1269 1270 1271 1272 1273 1274 1275 1276 1277 0 0 1 0 1985 0 0 0 1 1997 712
////////////////////////////////////////////////////////////////////
//       Class : EggGroupNode
// Description : A base class for nodes in the hierarchy that are not
//               leaf nodes.  (See also EggGroup, which is
//               specifically the "<Group>" node in egg.)
//
//               An EggGroupNode is an STL-style container of pointers
//               to EggNodes, like a vector.  Functions
//               push_back()/pop_back() and insert()/erase() are
//               provided to manipulate the list.  The list may also
//               be operated on (read-only) via iterators and
//               begin()/end().
////////////////////////////////////////////////////////////////////

1997 16 TriangulateFlags 0 794624 30 EggGroupNode::TriangulateFlags 30 EggGroupNode::TriangulateFlags 1996 0 0 0 0 0 0 0 0 0 5 9 T_polygon 23 EggGroupNode::T_polygon 1 8 T_convex 22 EggGroupNode::T_convex 2 11 T_composite 25 EggGroupNode::T_composite 4 9 T_recurse 23 EggGroupNode::T_recurse 8 13 T_flat_shaded 27 EggGroupNode::T_flat_shaded 16 0 0

1998 13 EggRenderMode 0 141313 13 EggRenderMode 13 EggRenderMode 0 0 0 1 1278 1309 0 30 1279 1280 1281 1282 1283 1284 1285 1286 1287 1288 1289 1290 1291 1292 1293 1294 1295 1296 1297 1298 1299 1300 1301 1302 1303 1304 1305 1306 1307 1308 0 0 0 0 4 1999 2000 2001 2002 827
////////////////////////////////////////////////////////////////////
//       Class : EggRenderMode
// Description : This class stores miscellaneous rendering properties
//               that is associated with geometry, and which may be
//               set on the geometry primitive level, on the group
//               above it, or indirectly via a texture.  It's intended
//               to be a base class for egg objects that can have
//               these properties set.
//
//               This class cannot inherit from EggObject, because it
//               causes problems at the EggPolygon level with multiple
//               appearances of the EggObject base class.  And making
//               EggObject a virtual base class is just no fun.
////////////////////////////////////////////////////////////////////

1999 9 AlphaMode 0 794624 24 EggRenderMode::AlphaMode 24 EggRenderMode::AlphaMode 1998 0 0 0 0 0 0 0 0 0 9 14 AM_unspecified 29 EggRenderMode::AM_unspecified 0 6 AM_off 21 EggRenderMode::AM_off 1 5 AM_on 20 EggRenderMode::AM_on 2 8 AM_blend 23 EggRenderMode::AM_blend 3 19 AM_blend_no_occlude 34 EggRenderMode::AM_blend_no_occlude 4 5 AM_ms 20 EggRenderMode::AM_ms 5 10 AM_ms_mask 25 EggRenderMode::AM_ms_mask 6 9 AM_binary 24 EggRenderMode::AM_binary 7 7 AM_dual 22 EggRenderMode::AM_dual 8 0 0

2000 14 DepthWriteMode 0 794624 29 EggRenderMode::DepthWriteMode 29 EggRenderMode::DepthWriteMode 1998 0 0 0 0 0 0 0 0 0 3 15 DWM_unspecified 30 EggRenderMode::DWM_unspecified 0 7 DWM_off 22 EggRenderMode::DWM_off 1 6 DWM_on 21 EggRenderMode::DWM_on 2 0 0

2001 13 DepthTestMode 0 794624 28 EggRenderMode::DepthTestMode 28 EggRenderMode::DepthTestMode 1998 0 0 0 0 0 0 0 0 0 3 15 DTM_unspecified 30 EggRenderMode::DTM_unspecified 0 7 DTM_off 22 EggRenderMode::DTM_off 1 6 DTM_on 21 EggRenderMode::DTM_on 2 0 0

2002 14 VisibilityMode 0 794624 29 EggRenderMode::VisibilityMode 29 EggRenderMode::VisibilityMode 1998 0 0 0 0 0 0 0 0 0 3 14 VM_unspecified 29 EggRenderMode::VM_unspecified 0 9 VM_hidden 24 EggRenderMode::VM_hidden 1 9 VM_normal 24 EggRenderMode::VM_normal 2 0 0

2003 12 EggTransform 0 26625 12 EggTransform 12 EggTransform 0 0 0 1 1310 1312 0 30 1311 1313 1314 1315 1316 1317 1318 1319 1320 1321 1322 1323 1324 1325 1326 1327 1328 1329 1330 1331 1332 1333 1334 1335 1336 1337 1338 1339 1340 1341 0 0 0 0 1 2004 579
////////////////////////////////////////////////////////////////////
//       Class : EggTransform
// Description : This represents the <Transform> entry of a group
//               or texture node: a list of component transform
//               operations, applied in order, that describe a net
//               transform matrix.  
//
//               This may be either a 3-d transform, and therefore
//               described by a 4x4 matrix, or a 2-d transform,
//               described by a 3x3 matrix.
////////////////////////////////////////////////////////////////////

2004 13 ComponentType 0 794624 27 EggTransform::ComponentType 27 EggTransform::ComponentType 2003 0 0 0 0 0 0 0 0 0 13 10 CT_invalid 24 EggTransform::CT_invalid 0 14 CT_translate2d 28 EggTransform::CT_translate2d 1 14 CT_translate3d 28 EggTransform::CT_translate3d 2 11 CT_rotate2d 25 EggTransform::CT_rotate2d 3 7 CT_rotx 21 EggTransform::CT_rotx 4 7 CT_roty 21 EggTransform::CT_roty 5 7 CT_rotz 21 EggTransform::CT_rotz 6 11 CT_rotate3d 25 EggTransform::CT_rotate3d 7 10 CT_scale2d 24 EggTransform::CT_scale2d 8 10 CT_scale3d 24 EggTransform::CT_scale3d 9 16 CT_uniform_scale 30 EggTransform::CT_uniform_scale 10 10 CT_matrix3 24 EggTransform::CT_matrix3 11 10 CT_matrix4 24 EggTransform::CT_matrix4 12 0 0

2005 18 EggSwitchCondition 0 141313 18 EggSwitchCondition 18 EggSwitchCondition 0 0 0 0 1346 0 4 1342 1343 1344 1345 0 0 1 0 1982 0 0 0 0 610
////////////////////////////////////////////////////////////////////
//       Class : EggSwitchCondition
// Description : This corresponds to a <SwitchCondition> entry within
//               a group.  It indicates the condition at which a
//               level-of-detail is switched in or out.  This is
//               actually an abstract base class for potentially any
//               number of specific different kinds of switching
//               conditions; presently, only a <Distance> type is
//               actually supported.
////////////////////////////////////////////////////////////////////

2006 26 EggSwitchConditionDistance 0 141313 26 EggSwitchConditionDistance 26 EggSwitchConditionDistance 0 0 0 1 1347 1356 4 2304 2305 2306 2307 1 1355 0 0 1 0 2005 0 0 0 0 314
////////////////////////////////////////////////////////////////////
//       Class : EggSwitchConditionDistance
// Description : A SwitchCondition that switches the levels-of-detail
//               based on distance from the camera's eyepoint.
////////////////////////////////////////////////////////////////////

2007 6 double 0 8194 6 double 6 double 0 3 0 0 0 0 0 0 0 0 0 0 0

2008 8 LPoint3d 0 2048 8 LPoint3d 8 LPoint3d 0 0 0 0 0 0 0 0 0 0 0 0 1083
// Filename: lpoint3_src.h
// Created by:  drose (25Sep99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LPoint3
// Description : This is a three-component point in space (as opposed
//               to a three-component vector, which represents a
//               direction and a distance).  Some of the methods are
//               slightly different between LPoint3 and LVector3; in
//               particular, subtraction of two points yields a
//               vector, while addition of a vector and a point yields
//               a point.
////////////////////////////////////////////////////////////////////

2009 8 EggGroup 0 26625 8 EggGroup 8 EggGroup 0 0 0 1 1363 1365 0 136 1364 1366 1367 1368 1369 1370 1371 1372 1373 1374 1375 1376 1377 1378 1379 1380 1381 1382 1383 1384 1385 1386 1387 1388 1389 1390 1391 1392 1393 1394 1395 1396 1397 1398 1399 1400 1401 1402 1403 1404 1405 1406 1407 1408 1409 1410 1411 1412 1413 1414 1415 1416 1417 1418 1419 1420 1421 1422 1423 1424 1425 1426 1427 1428 1429 1430 1431 1432 1433 1434 1435 1436 1437 1438 1439 1440 1441 1442 1443 1444 1445 1446 1447 1448 1449 1450 1451 1452 1453 1454 1455 1456 1457 1458 1459 1460 1461 1462 1463 1464 1465 1466 1467 1468 1469 1470 1471 1472 1473 1474 1475 1476 1477 1478 1479 1480 1481 1482 1483 1484 1485 1486 1487 1488 1489 1490 1491 1492 1493 1494 1495 1496 1497 1498 1499 1500 2 2310 2311 0 3 3 1996 1357 1358 3 1998 1359 1360 3 2003 1361 1362 0 8 2010 2011 2012 2013 2014 2015 2016 2017 302
////////////////////////////////////////////////////////////////////
//       Class : EggGroup
// Description : The main glue of the egg hierarchy, this corresponds
//               to the <Group>, <Instance>, and <Joint> type nodes.
////////////////////////////////////////////////////////////////////

2010 9 GroupType 0 794624 19 EggGroup::GroupType 19 EggGroup::GroupType 2009 0 0 0 0 0 0 0 0 0 4 10 GT_invalid 20 EggGroup::GT_invalid -1 8 GT_group 18 EggGroup::GT_group 0 11 GT_instance 21 EggGroup::GT_instance 1 8 GT_joint 18 EggGroup::GT_joint 2 0 49
// These bits are all stored somewhere in _flags.

2011 7 DCSType 0 794624 17 EggGroup::DCSType 17 EggGroup::DCSType 2009 0 0 0 0 0 0 0 0 0 6 14 DC_unspecified 24 EggGroup::DC_unspecified 0 7 DC_none 17 EggGroup::DC_none 16 8 DC_local 18 EggGroup::DC_local 32 6 DC_net 16 EggGroup::DC_net 48 11 DC_no_touch 21 EggGroup::DC_no_touch 64 10 DC_default 20 EggGroup::DC_default 80 0 0

2012 13 BillboardType 0 794624 23 EggGroup::BillboardType 23 EggGroup::BillboardType 2009 0 0 0 0 0 0 0 0 0 4 7 BT_none 17 EggGroup::BT_none 0 7 BT_axis 17 EggGroup::BT_axis 32 24 BT_point_camera_relative 34 EggGroup::BT_point_camera_relative 64 23 BT_point_world_relative 33 EggGroup::BT_point_world_relative 128 0 0

2013 18 CollisionSolidType 0 794624 28 EggGroup::CollisionSolidType 28 EggGroup::CollisionSolidType 2009 0 0 0 0 0 0 0 0 0 9 8 CST_none 18 EggGroup::CST_none 0 9 CST_plane 19 EggGroup::CST_plane 65536 11 CST_polygon 21 EggGroup::CST_polygon 131072 11 CST_polyset 21 EggGroup::CST_polyset 196608 10 CST_sphere 20 EggGroup::CST_sphere 262144 8 CST_tube 18 EggGroup::CST_tube 327680 14 CST_inv_sphere 24 EggGroup::CST_inv_sphere 393216 7 CST_box 17 EggGroup::CST_box 458752 14 CST_floor_mesh 24 EggGroup::CST_floor_mesh 524288 0 0

2014 12 CollideFlags 0 794624 22 EggGroup::CollideFlags 22 EggGroup::CollideFlags 2009 0 0 0 0 0 0 0 0 0 9 7 CF_none 17 EggGroup::CF_none 0 10 CF_descend 20 EggGroup::CF_descend 1048576 8 CF_event 18 EggGroup::CF_event 2097152 7 CF_keep 17 EggGroup::CF_keep 4194304 8 CF_solid 18 EggGroup::CF_solid 8388608 9 CF_center 19 EggGroup::CF_center 16777216 12 CF_turnstile 22 EggGroup::CF_turnstile 33554432 8 CF_level 18 EggGroup::CF_level 67108864 13 CF_intangible 23 EggGroup::CF_intangible 134217728 0 0

2015 8 DartType 0 794624 18 EggGroup::DartType 18 EggGroup::DartType 2009 0 0 0 0 0 0 0 0 0 5 7 DT_none 17 EggGroup::DT_none 0 13 DT_structured 23 EggGroup::DT_structured 268435456 7 DT_sync 17 EggGroup::DT_sync 536870912 9 DT_nosync 19 EggGroup::DT_nosync 805306368 10 DT_default 20 EggGroup::DT_default 1073741824 0 0

2016 9 BlendMode 0 794624 19 EggGroup::BlendMode 19 EggGroup::BlendMode 2009 0 0 0 0 0 0 0 0 0 7 14 BM_unspecified 24 EggGroup::BM_unspecified 0 7 BM_none 17 EggGroup::BM_none 1 6 BM_add 16 EggGroup::BM_add 2 11 BM_subtract 21 EggGroup::BM_subtract 3 15 BM_inv_subtract 25 EggGroup::BM_inv_subtract 4 6 BM_min 16 EggGroup::BM_min 5 6 BM_max 16 EggGroup::BM_max 6 0 68
// These correspond to ColorBlendAttrib::Mode (but not numerically).

2017 12 BlendOperand 0 794624 22 EggGroup::BlendOperand 22 EggGroup::BlendOperand 2009 0 0 0 0 0 0 0 0 0 20 14 BO_unspecified 24 EggGroup::BO_unspecified 0 7 BO_zero 17 EggGroup::BO_zero 1 6 BO_one 16 EggGroup::BO_one 2 17 BO_incoming_color 27 EggGroup::BO_incoming_color 3 27 BO_one_minus_incoming_color 37 EggGroup::BO_one_minus_incoming_color 4 16 BO_fbuffer_color 26 EggGroup::BO_fbuffer_color 5 26 BO_one_minus_fbuffer_color 36 EggGroup::BO_one_minus_fbuffer_color 6 17 BO_incoming_alpha 27 EggGroup::BO_incoming_alpha 7 27 BO_one_minus_incoming_alpha 37 EggGroup::BO_one_minus_incoming_alpha 8 16 BO_fbuffer_alpha 26 EggGroup::BO_fbuffer_alpha 9 26 BO_one_minus_fbuffer_alpha 36 EggGroup::BO_one_minus_fbuffer_alpha 10 17 BO_constant_color 27 EggGroup::BO_constant_color 11 27 BO_one_minus_constant_color 37 EggGroup::BO_one_minus_constant_color 12 17 BO_constant_alpha 27 EggGroup::BO_constant_alpha 13 27 BO_one_minus_constant_alpha 37 EggGroup::BO_one_minus_constant_alpha 14 26 BO_incoming_color_saturate 36 EggGroup::BO_incoming_color_saturate 15 14 BO_color_scale 24 EggGroup::BO_color_scale 16 24 BO_one_minus_color_scale 34 EggGroup::BO_one_minus_color_scale 17 14 BO_alpha_scale 24 EggGroup::BO_alpha_scale 18 24 BO_one_minus_alpha_scale 34 EggGroup::BO_one_minus_alpha_scale 19 0 71
// These correspond to ColorBlendAttrib::Operand (but not numerically).

2018 6 EggBin 0 141313 6 EggBin 6 EggBin 0 0 0 1 1501 1505 0 3 1502 1503 1504 0 0 1 0 2009 0 0 0 0 462
////////////////////////////////////////////////////////////////////
//       Class : EggBin
// Description : A type of group node that holds related subnodes.
//               This is a special kind of node that will never be
//               read in from an egg file, but can only exist in the
//               egg scene graph if it is created via the use of an
//               EggBinMaker.
////////////////////////////////////////////////////////////////////

2019 11 EggBinMaker 0 75777 11 EggBinMaker 11 EggBinMaker 0 0 0 0 0 0 8 1506 1507 1508 1509 1510 1511 1512 1513 0 0 1 0 1982 0 0 0 0 401
////////////////////////////////////////////////////////////////////
//       Class : EggBinMaker
// Description : This is a handy class for collecting related nodes
//               together.  It is an abstract class; to use it you
//               must subclass off of it.  See the somewhat lengthy
//               comment above.
////////////////////////////////////////////////////////////////////

2020 10 EggComment 0 141313 10 EggComment 10 EggComment 0 0 0 1 1514 1520 0 4 1515 1517 1518 1519 0 1 1516 1 0 1985 0 0 0 0 263
////////////////////////////////////////////////////////////////////
//       Class : EggComment
// Description : A comment that appears in an egg file within a
//               <Comment> entry.
////////////////////////////////////////////////////////////////////

2021 15 EggFilenameNode 0 141313 15 EggFilenameNode 15 EggFilenameNode 0 0 0 0 1528 0 7 1521 1522 1523 1524 1525 1526 1527 0 0 1 0 1985 0 0 0 0 430
////////////////////////////////////////////////////////////////////
//       Class : EggFilenameNode
// Description : This is an egg node that contains a filename.  It
//               references a physical file relative to the directory
//               the egg file was loaded in.  It is a base class for
//               EggTexture and EggExternalReference.
////////////////////////////////////////////////////////////////////

2022 10 EggTexture 0 26625 10 EggTexture 10 EggTexture 0 0 0 1 1535 1537 0 106 1536 1538 1539 1540 1541 1542 1543 1544 1545 1546 1547 1548 1549 1550 1551 1552 1553 1554 1555 1556 1557 1558 1559 1560 1561 1562 1563 1564 1565 1566 1567 1568 1569 1570 1571 1572 1573 1574 1575 1576 1577 1578 1579 1580 1581 1582 1583 1584 1585 1586 1587 1588 1589 1590 1591 1592 1593 1594 1595 1596 1597 1598 1599 1600 1601 1602 1603 1604 1605 1606 1607 1608 1609 1610 1611 1612 1613 1614 1615 1616 1617 1618 1619 1620 1621 1622 1623 1624 1625 1626 1627 1628 1629 1630 1631 1632 1633 1634 1635 1636 1637 1638 1639 1640 1641 1642 0 0 3 3 2021 1529 1530 3 1998 1531 1532 3 2003 1533 1534 0 14 2023 2024 2025 2026 2027 2028 2029 2030 2031 2032 2033 2034 2035 2036 254
////////////////////////////////////////////////////////////////////
//       Class : EggTexture
// Description : Defines a texture map that may be applied to
//               geometry.
////////////////////////////////////////////////////////////////////

2023 11 Equivalence 0 794624 23 EggTexture::Equivalence 23 EggTexture::Equivalence 2022 0 0 0 0 0 0 0 0 0 7 10 E_basename 22 EggTexture::E_basename 1 11 E_extension 23 EggTexture::E_extension 2 9 E_dirname 21 EggTexture::E_dirname 4 19 E_complete_filename 31 EggTexture::E_complete_filename 7 11 E_transform 23 EggTexture::E_transform 8 12 E_attributes 24 EggTexture::E_attributes 16 11 E_tref_name 23 EggTexture::E_tref_name 32 0 0

2024 11 TextureType 0 794624 23 EggTexture::TextureType 23 EggTexture::TextureType 2022 0 0 0 0 0 0 0 0 0 5 14 TT_unspecified 26 EggTexture::TT_unspecified 0 13 TT_1d_texture 25 EggTexture::TT_1d_texture 1 13 TT_2d_texture 25 EggTexture::TT_2d_texture 2 13 TT_3d_texture 25 EggTexture::TT_3d_texture 3 11 TT_cube_map 23 EggTexture::TT_cube_map 4 0 0

2025 6 Format 0 794624 18 EggTexture::Format 18 EggTexture::Format 2022 0 0 0 0 0 0 0 0 0 19 13 F_unspecified 25 EggTexture::F_unspecified 0 6 F_rgba 18 EggTexture::F_rgba 1 6 F_rgbm 18 EggTexture::F_rgbm 2 8 F_rgba12 20 EggTexture::F_rgba12 3 7 F_rgba8 19 EggTexture::F_rgba8 4 7 F_rgba4 19 EggTexture::F_rgba4 5 7 F_rgba5 19 EggTexture::F_rgba5 6 5 F_rgb 17 EggTexture::F_rgb 7 7 F_rgb12 19 EggTexture::F_rgb12 8 6 F_rgb8 18 EggTexture::F_rgb8 9 6 F_rgb5 18 EggTexture::F_rgb5 10 8 F_rgb332 20 EggTexture::F_rgb332 11 5 F_red 17 EggTexture::F_red 12 7 F_green 19 EggTexture::F_green 13 6 F_blue 18 EggTexture::F_blue 14 7 F_alpha 19 EggTexture::F_alpha 15 11 F_luminance 23 EggTexture::F_luminance 16 17 F_luminance_alpha 29 EggTexture::F_luminance_alpha 17 21 F_luminance_alphamask 33 EggTexture::F_luminance_alphamask 18 0 0

2026 15 CompressionMode 0 794624 27 EggTexture::CompressionMode 27 EggTexture::CompressionMode 2022 0 0 0 0 0 0 0 0 0 9 10 CM_default 22 EggTexture::CM_default 0 6 CM_off 18 EggTexture::CM_off 1 5 CM_on 17 EggTexture::CM_on 2 7 CM_fxt1 19 EggTexture::CM_fxt1 3 7 CM_dxt1 19 EggTexture::CM_dxt1 4 7 CM_dxt2 19 EggTexture::CM_dxt2 5 7 CM_dxt3 19 EggTexture::CM_dxt3 6 7 CM_dxt4 19 EggTexture::CM_dxt4 7 7 CM_dxt5 19 EggTexture::CM_dxt5 8 0 0

2027 8 WrapMode 0 794624 20 EggTexture::WrapMode 20 EggTexture::WrapMode 2022 0 0 0 0 0 0 0 0 0 6 14 WM_unspecified 26 EggTexture::WM_unspecified 0 8 WM_clamp 20 EggTexture::WM_clamp 1 9 WM_repeat 21 EggTexture::WM_repeat 2 9 WM_mirror 21 EggTexture::WM_mirror 3 14 WM_mirror_once 26 EggTexture::WM_mirror_once 4 15 WM_border_color 27 EggTexture::WM_border_color 5 0 0

2028 10 FilterType 0 794624 22 EggTexture::FilterType 22 EggTexture::FilterType 2022 0 0 0 0 0 0 0 0 0 7 14 FT_unspecified 26 EggTexture::FT_unspecified 0 10 FT_nearest 22 EggTexture::FT_nearest 1 9 FT_linear 21 EggTexture::FT_linear 2 25 FT_nearest_mipmap_nearest 37 EggTexture::FT_nearest_mipmap_nearest 3 24 FT_linear_mipmap_nearest 36 EggTexture::FT_linear_mipmap_nearest 4 24 FT_nearest_mipmap_linear 36 EggTexture::FT_nearest_mipmap_linear 5 23 FT_linear_mipmap_linear 35 EggTexture::FT_linear_mipmap_linear 6 0 0

2029 7 EnvType 0 794624 19 EggTexture::EnvType 19 EggTexture::EnvType 2022 0 0 0 0 0 0 0 0 0 16 14 ET_unspecified 26 EggTexture::ET_unspecified 0 11 ET_modulate 23 EggTexture::ET_modulate 1 8 ET_decal 20 EggTexture::ET_decal 2 8 ET_blend 20 EggTexture::ET_blend 3 10 ET_replace 22 EggTexture::ET_replace 4 6 ET_add 18 EggTexture::ET_add 5 20 ET_blend_color_scale 32 EggTexture::ET_blend_color_scale 6 16 ET_modulate_glow 28 EggTexture::ET_modulate_glow 7 17 ET_modulate_gloss 29 EggTexture::ET_modulate_gloss 8 9 ET_normal 21 EggTexture::ET_normal 9 16 ET_normal_height 28 EggTexture::ET_normal_height 10 7 ET_glow 19 EggTexture::ET_glow 11 8 ET_gloss 20 EggTexture::ET_gloss 12 9 ET_height 21 EggTexture::ET_height 13 11 ET_selector 23 EggTexture::ET_selector 14 15 ET_normal_gloss 27 EggTexture::ET_normal_gloss 15 0 21
// "mipmap trilinear"

2030 11 CombineMode 0 794624 23 EggTexture::CombineMode 23 EggTexture::CombineMode 2022 0 0 0 0 0 0 0 0 0 9 14 CM_unspecified 26 EggTexture::CM_unspecified 0 10 CM_replace 22 EggTexture::CM_replace 1 11 CM_modulate 23 EggTexture::CM_modulate 2 6 CM_add 18 EggTexture::CM_add 3 13 CM_add_signed 25 EggTexture::CM_add_signed 4 14 CM_interpolate 26 EggTexture::CM_interpolate 5 11 CM_subtract 23 EggTexture::CM_subtract 6 11 CM_dot3_rgb 23 EggTexture::CM_dot3_rgb 7 12 CM_dot3_rgba 24 EggTexture::CM_dot3_rgba 8 0 0

2031 14 CombineChannel 0 794624 26 EggTexture::CombineChannel 26 EggTexture::CombineChannel 2022 0 0 0 0 0 0 0 0 0 3 6 CC_rgb 18 EggTexture::CC_rgb 0 8 CC_alpha 20 EggTexture::CC_alpha 1 15 CC_num_channels 27 EggTexture::CC_num_channels 2 0 0

2032 12 CombineIndex 0 794624 24 EggTexture::CombineIndex 24 EggTexture::CombineIndex 2022 0 0 0 0 0 0 0 0 0 1 14 CI_num_indices 26 EggTexture::CI_num_indices 3 0 0

2033 13 CombineSource 0 794624 25 EggTexture::CombineSource 25 EggTexture::CombineSource 2022 0 0 0 0 0 0 0 0 0 7 14 CS_unspecified 26 EggTexture::CS_unspecified 0 10 CS_texture 22 EggTexture::CS_texture 1 11 CS_constant 23 EggTexture::CS_constant 2 16 CS_primary_color 28 EggTexture::CS_primary_color 3 11 CS_previous 23 EggTexture::CS_previous 4 23 CS_constant_color_scale 35 EggTexture::CS_constant_color_scale 5 20 CS_last_saved_result 32 EggTexture::CS_last_saved_result 6 0 0

2034 14 CombineOperand 0 794624 26 EggTexture::CombineOperand 26 EggTexture::CombineOperand 2022 0 0 0 0 0 0 0 0 0 5 14 CO_unspecified 26 EggTexture::CO_unspecified 0 12 CO_src_color 24 EggTexture::CO_src_color 1 22 CO_one_minus_src_color 34 EggTexture::CO_one_minus_src_color 2 12 CO_src_alpha 24 EggTexture::CO_src_alpha 3 22 CO_one_minus_src_alpha 34 EggTexture::CO_one_minus_src_alpha 4 0 0

2035 6 TexGen 0 794624 18 EggTexture::TexGen 18 EggTexture::TexGen 2022 0 0 0 0 0 0 0 0 0 9 14 TG_unspecified 26 EggTexture::TG_unspecified 0 17 TG_eye_sphere_map 29 EggTexture::TG_eye_sphere_map 1 17 TG_world_cube_map 29 EggTexture::TG_world_cube_map 2 15 TG_eye_cube_map 27 EggTexture::TG_eye_cube_map 3 15 TG_world_normal 27 EggTexture::TG_world_normal 4 13 TG_eye_normal 25 EggTexture::TG_eye_normal 5 17 TG_world_position 29 EggTexture::TG_world_position 6 15 TG_eye_position 27 EggTexture::TG_eye_position 7 15 TG_point_sprite 27 EggTexture::TG_point_sprite 8 0 0

2036 12 QualityLevel 0 794624 24 EggTexture::QualityLevel 24 EggTexture::QualityLevel 2022 0 0 0 0 0 0 0 0 0 5 14 QL_unspecified 26 EggTexture::QL_unspecified 0 10 QL_default 22 EggTexture::QL_default 1 10 QL_fastest 22 EggTexture::QL_fastest 2 9 QL_normal 21 EggTexture::QL_normal 3 7 QL_best 19 EggTexture::QL_best 4 0 0

2037 11 EggMaterial 0 141313 11 EggMaterial 11 EggMaterial 0 0 0 1 1643 1671 0 27 1644 1645 1646 1647 1648 1649 1650 1651 1652 1653 1654 1655 1656 1657 1658 1659 1660 1661 1662 1663 1664 1665 1666 1667 1668 1669 1670 0 0 1 0 1985 0 0 0 1 2038 183
////////////////////////////////////////////////////////////////////
//       Class : EggMaterial
// Description :
////////////////////////////////////////////////////////////////////

2038 11 Equivalence 0 794624 24 EggMaterial::Equivalence 24 EggMaterial::Equivalence 2037 0 0 0 0 0 0 0 0 0 2 12 E_attributes 25 EggMaterial::E_attributes 1 11 E_mref_name 24 EggMaterial::E_mref_name 2 0 0

2039 12 EggPrimitive 0 26625 12 EggPrimitive 12 EggPrimitive 0 0 0 0 1679 0 49 1678 1680 1681 1682 1683 1684 1685 1686 1687 1688 1689 1690 1691 1692 1693 1694 1695 1696 1697 1698 1699 1700 1701 1702 1703 1704 1705 1706 1707 1708 1709 1710 1711 1712 1713 1714 1715 1716 1717 1718 1719 1720 1721 1722 1723 1724 1725 1726 1727 2 2312 2313 0 3 3 1985 1672 1673 3 1988 1674 1675 3 1998 1676 1677 0 1 2040 754
////////////////////////////////////////////////////////////////////
//       Class : EggPrimitive
// Description : A base class for any of a number of kinds of geometry
//               primitives: polygons, point lights, nurbs patches,
//               parametrics curves, etc.  Things with a set of
//               vertices and some rendering properties like color.
//
//               An EggPrimitive is an STL-style container of pointers
//               to EggVertex's.  In fact, it IS a vector, and can be
//               manipulated in all the ways that vectors can.
//               However, it is necessary that all vertices belong to
//               the same vertex pool.
////////////////////////////////////////////////////////////////////

2040 7 Shading 0 794624 21 EggPrimitive::Shading 21 EggPrimitive::Shading 2039 0 0 0 0 0 0 0 0 0 4 9 S_unknown 23 EggPrimitive::S_unknown 0 9 S_overall 23 EggPrimitive::S_overall 1 10 S_per_face 24 EggPrimitive::S_per_face 2 12 S_per_vertex 26 EggPrimitive::S_per_vertex 3 0 0

2041 21 EggCompositePrimitive 0 75777 21 EggCompositePrimitive 21 EggCompositePrimitive 0 0 0 0 1679 0 7 1728 1729 1730 1731 1732 1733 1734 1 2314 0 1 0 2039 0 0 0 0 414
////////////////////////////////////////////////////////////////////
//       Class : EggCompositePrimitive
// Description : The base class for primitives such as triangle strips
//               and triangle fans, which include several component
//               triangles, each of which might have its own color
//               and/or normal.
////////////////////////////////////////////////////////////////////

2042 7 EggData 0 141313 7 EggData 7 EggData 0 0 0 1 1735 1757 0 21 1736 1737 1738 1739 1740 1741 1742 1743 1744 1745 1746 1747 1748 1749 1750 1751 1752 1753 1754 1755 1756 0 0 1 0 1996 0 0 0 0 728
////////////////////////////////////////////////////////////////////
//       Class : EggData
// Description : This is the primary interface into all the egg data,
//               and the root of the egg file structure.  An EggData
//               structure corresponds exactly with an egg file on the
//               disk.
//
//               The EggData class inherits from EggGroupNode its
//               collection of children, which are accessed by using
//               the EggData itself as an STL container with begin()
//               and end() calls.  The children of the EggData class
//               are the toplevel nodes in the egg file.
////////////////////////////////////////////////////////////////////

2043 19 EggCoordinateSystem 0 141313 19 EggCoordinateSystem 19 EggCoordinateSystem 0 0 0 1 1758 1762 0 3 1759 1760 1761 0 0 1 0 1985 0 0 0 0 403
////////////////////////////////////////////////////////////////////
//       Class : EggCoordinateSystem
// Description : The <CoordinateSystem> entry at the top of an egg
//               file.  Don't confuse this with the enum
//               EggData::CoordinateSystem, which is the value
//               contained by this entry.
////////////////////////////////////////////////////////////////////

2044 8 EggCurve 0 141313 8 EggCurve 8 EggCurve 0 0 0 0 1770 0 7 1763 1764 1765 1766 1767 1768 1769 0 0 1 0 2039 0 0 0 1 2045 250
////////////////////////////////////////////////////////////////////
//       Class : EggCurve
// Description : A parametric curve of some kind.  See
//               EggNurbsCurve.
////////////////////////////////////////////////////////////////////

2045 9 CurveType 0 794624 19 EggCurve::CurveType 19 EggCurve::CurveType 2044 0 0 0 0 0 0 0 0 0 4 7 CT_none 17 EggCurve::CT_none 0 6 CT_xyz 16 EggCurve::CT_xyz 1 6 CT_hpr 16 EggCurve::CT_hpr 2 4 CT_t 14 EggCurve::CT_t 3 0 0

2046 20 EggExternalReference 0 141313 20 EggExternalReference 20 EggExternalReference 0 0 0 1 1771 1774 0 2 1772 1773 0 0 1 0 2021 0 0 0 0 289
////////////////////////////////////////////////////////////////////
//       Class : EggExternalReference
// Description : Defines a reference to another egg file which should
//               be inserted at this point.
////////////////////////////////////////////////////////////////////

2047 17 EggNameUniquifier 0 75777 17 EggNameUniquifier 17 EggNameUniquifier 0 0 0 0 0 0 9 1775 1776 1777 1778 1779 1780 1781 1782 1783 0 0 1 0 1982 0 0 0 0 407
////////////////////////////////////////////////////////////////////
//       Class : EggNameUniquifier
// Description : This is a handy class for guaranteeing unique node
//               names in an egg hierarchy.  It is an abstract class;
//               to use it you must subclass off of it.  See the
//               comment above.
////////////////////////////////////////////////////////////////////

2048 18 EggGroupUniquifier 0 141313 18 EggGroupUniquifier 18 EggGroupUniquifier 0 0 0 1 1784 1786 0 1 1785 0 0 1 0 2047 0 0 0 0 408
////////////////////////////////////////////////////////////////////
//       Class : EggGroupUniquifier
// Description : This is a specialization of EggNameUniquifier to
//               generate unique names for EggGroup nodes.  It's not
//               called automatically; you must invoke it yourself if
//               you want it.
////////////////////////////////////////////////////////////////////

2049 7 EggLine 0 75777 7 EggLine 7 EggLine 0 0 0 1 1787 1679 0 6 1788 1789 1790 1791 1792 1793 0 0 1 0 2041 0 0 0 0 279
////////////////////////////////////////////////////////////////////
//       Class : EggLine
// Description : A line segment, or a series of connected line
//               segments, defined by a <Line> entry.
////////////////////////////////////////////////////////////////////

2050 21 EggMaterialCollection 0 26625 21 EggMaterialCollection 21 EggMaterialCollection 0 0 0 1 1794 1796 0 13 1795 1797 1798 1799 1800 1801 1802 1803 1804 1805 1806 1807 1808 0 0 0 0 0 477
////////////////////////////////////////////////////////////////////
//       Class : EggMaterialCollection
// Description : This is a collection of materials by MRef name.  It
//               can extract the materials from an egg file and sort
//               them all together; it can also manage the creation of
//               unique materials and the assignment of unique MRef
//               names.
////////////////////////////////////////////////////////////////////

2051 10 EggPolygon 0 141313 10 EggPolygon 10 EggPolygon 0 0 0 1 1809 1817 0 7 1810 1811 1812 1813 1814 1815 1816 0 0 1 0 2039 0 0 0 0 200
////////////////////////////////////////////////////////////////////
//       Class : EggPolygon
// Description : A single polygon.
////////////////////////////////////////////////////////////////////

2052 13 EggNurbsCurve 0 141313 13 EggNurbsCurve 13 EggNurbsCurve 0 0 0 1 1818 1832 0 13 1819 1820 1821 1822 1823 1824 1825 1826 1827 1828 1829 1830 1831 1 2315 0 1 0 2044 0 0 0 0 211
////////////////////////////////////////////////////////////////////
//       Class : EggNurbsCurve
// Description : A parametric NURBS curve.
////////////////////////////////////////////////////////////////////

2053 10 EggSurface 0 141313 10 EggSurface 10 EggSurface 0 0 0 0 1839 0 6 1833 1834 1835 1836 1837 1838 0 0 1 0 2039 0 0 0 0 256
////////////////////////////////////////////////////////////////////
//       Class : EggSurface
// Description : A parametric surface of some kind.  See
//               EggNurbsSurface.
////////////////////////////////////////////////////////////////////

2054 15 EggNurbsSurface 0 141313 15 EggNurbsSurface 15 EggNurbsSurface 0 0 0 1 1840 1871 2 2308 2309 28 1841 1842 1843 1844 1845 1846 1847 1848 1849 1850 1851 1852 1853 1854 1855 1856 1857 1858 1859 1860 1861 1862 1863 1864 1865 1866 1867 1870 2 2316 2317 0 1 0 2053 0 0 0 0 215
////////////////////////////////////////////////////////////////////
//       Class : EggNurbsSurface
// Description : A parametric NURBS surface.
////////////////////////////////////////////////////////////////////

2055 34 list< PointerTo< EggNurbsCurve > > 0 2048 34 list< PointerTo< EggNurbsCurve > > 34 list< PointerTo< EggNurbsCurve > > 0 0 0 0 0 0 0 0 0 0 0 0 0

2056 50 list< list< list< PointerTo< EggNurbsCurve > > > > 0 2048 50 list< list< list< PointerTo< EggNurbsCurve > > > > 50 list< list< list< PointerTo< EggNurbsCurve > > > > 0 0 0 0 0 0 0 0 0 0 0 0 0

2057 8 EggPatch 0 141313 8 EggPatch 8 EggPatch 0 0 0 1 1872 1875 0 2 1873 1874 0 0 1 0 2039 0 0 0 0 283
////////////////////////////////////////////////////////////////////
//       Class : EggPatch
// Description : A single "patch", a special primitive to be rendered
//               only with a tessellation shader.
////////////////////////////////////////////////////////////////////

2058 8 EggPoint 0 141313 8 EggPoint 8 EggPoint 0 0 0 1 1876 1887 0 10 1877 1878 1879 1880 1881 1882 1883 1884 1885 1886 0 0 1 0 2039 0 0 0 0 282
////////////////////////////////////////////////////////////////////
//       Class : EggPoint
// Description : A single point, or a collection of points as defined
//               by a single <PointLight> entry.
////////////////////////////////////////////////////////////////////

2059 15 EggPolysetMaker 0 141313 15 EggPolysetMaker 15 EggPolysetMaker 0 0 0 1 1888 1891 0 2 1889 1890 0 0 1 0 2019 0 0 0 2 2060 2061 680
////////////////////////////////////////////////////////////////////
//       Class : EggPolysetMaker
// Description : A specialization on EggBinMaker for making polysets
//               that share the same basic rendering characteristic.
//               This really just defines the example functions
//               described in the leading comment to EggBinMaker.
//
//               It makes some common assumptions about how polysets
//               should be grouped; if these are not sufficient, you
//               can always rederive your own further specialization
//               of this class.
////////////////////////////////////////////////////////////////////

2060 9 BinNumber 0 794624 26 EggPolysetMaker::BinNumber 26 EggPolysetMaker::BinNumber 2059 0 0 0 0 0 0 0 0 0 2 7 BN_none 24 EggPolysetMaker::BN_none 0 10 BN_polyset 27 EggPolysetMaker::BN_polyset 1 0 75
// The BinNumber serves to identify why a particular EggBin was
// created.

2061 10 Properties 0 794624 27 EggPolysetMaker::Properties 27 EggPolysetMaker::Properties 2059 0 0 0 0 0 0 0 0 0 10 13 P_has_texture 30 EggPolysetMaker::P_has_texture 1 9 P_texture 26 EggPolysetMaker::P_texture 2 14 P_has_material 31 EggPolysetMaker::P_has_material 4 10 P_material 27 EggPolysetMaker::P_material 8 16 P_has_poly_color 33 EggPolysetMaker::P_has_poly_color 16 12 P_poly_color 29 EggPolysetMaker::P_poly_color 32 17 P_has_poly_normal 34 EggPolysetMaker::P_has_poly_normal 64 19 P_has_vertex_normal 36 EggPolysetMaker::P_has_vertex_normal 128 18 P_has_vertex_color 35 EggPolysetMaker::P_has_vertex_color 256 7 P_bface 24 EggPolysetMaker::P_bface 512 0 0

2062 17 EggPoolUniquifier 0 141313 17 EggPoolUniquifier 17 EggPoolUniquifier 0 0 0 1 1892 1894 0 1 1893 0 0 1 0 2047 0 0 0 0 476
////////////////////////////////////////////////////////////////////
//       Class : EggPoolUniquifier
// Description : This is a specialization of EggNameUniquifier to
//               generate unique names for textures, materials, and
//               vertex pools prior to writing out an egg file.  It's
//               automatically called by EggData prior to writing out
//               an egg file.
////////////////////////////////////////////////////////////////////

2063 12 EggSAnimData 0 141313 12 EggSAnimData 12 EggSAnimData 0 0 0 1 1895 1902 0 6 1896 1897 1898 1899 1900 1901 0 0 1 0 1986 0 0 0 0 363
////////////////////////////////////////////////////////////////////
//       Class : EggSAnimData
// Description : Corresponding to an <S$Anim> entry, this stores a
//               single column of numbers, for instance for a morph
//               target, or as one column in an EggXfmSAnim.
////////////////////////////////////////////////////////////////////

2064 8 EggTable 0 141313 8 EggTable 8 EggTable 0 0 0 1 1903 1910 0 6 1904 1905 1906 1907 1908 1909 0 0 1 0 1996 0 0 0 1 2065 540
////////////////////////////////////////////////////////////////////
//       Class : EggTable
// Description : This corresponds to a <Table> or a <Bundle> entry.
//               As such, it doesn't actually contain a table of
//               numbers, but it may be a parent to an EggSAnimData or
//               an EggXfmAnimData, which do.  It may also be a parent
//               to another <Table> or <Bundle>, establishing a
//               hierarchy of tables.
////////////////////////////////////////////////////////////////////

2065 9 TableType 0 794624 19 EggTable::TableType 19 EggTable::TableType 2064 0 0 0 0 0 0 0 0 0 3 10 TT_invalid 20 EggTable::TT_invalid 0 8 TT_table 18 EggTable::TT_table 1 9 TT_bundle 19 EggTable::TT_bundle 2 0 0

2066 20 EggTextureCollection 0 26625 20 EggTextureCollection 20 EggTextureCollection 0 0 0 1 1911 1913 0 20 1912 1914 1915 1916 1917 1918 1919 1920 1921 1922 1923 1924 1925 1926 1927 1928 1929 1930 1931 1932 1 2318 0 0 0 0 473
////////////////////////////////////////////////////////////////////
//       Class : EggTextureCollection
// Description : This is a collection of textures by TRef name.  It
//               can extract the textures from an egg file and sort
//               them all together; it can also manage the creation of
//               unique textures and the assignment of unique TRef
//               names.
////////////////////////////////////////////////////////////////////

2067 14 EggTriangleFan 0 75777 14 EggTriangleFan 14 EggTriangleFan 0 0 0 1 1933 1679 0 2 1934 1935 0 0 1 0 2041 0 0 0 0 347
////////////////////////////////////////////////////////////////////
//       Class : EggTriangleFan
// Description : A connected fan of triangles.  This does not
//               normally appear in an egg file; it is typically
//               generated as a result of meshing.
////////////////////////////////////////////////////////////////////

2068 16 EggTriangleStrip 0 75777 16 EggTriangleStrip 16 EggTriangleStrip 0 0 0 1 1936 1679 0 2 1937 1938 0 0 1 0 2041 0 0 0 0 351
////////////////////////////////////////////////////////////////////
//       Class : EggTriangleStrip
// Description : A connected strip of triangles.  This does not
//               normally appear in an egg file; it is typically
//               generated as a result of meshing.
////////////////////////////////////////////////////////////////////

2069 11 EggXfmSAnim 0 141313 11 EggXfmSAnim 11 EggXfmSAnim 0 0 0 1 1939 1962 0 22 1940 1941 1942 1943 1944 1945 1946 1947 1948 1949 1950 1951 1952 1953 1954 1955 1956 1957 1958 1959 1960 1961 0 0 1 0 1996 0 0 0 0 484
////////////////////////////////////////////////////////////////////
//       Class : EggXfmSAnim
// Description : This corresponds to an <Xfm$Anim_S$> entry, which is
//               a collection of up to nine <S$Anim> entries that
//               specify the nine components of a transformation.
//               It's implemented as a group that can contain
//               any number of EggSAnimData children.
////////////////////////////////////////////////////////////////////

2070 14 EggXfmAnimData 0 141313 14 EggXfmAnimData 14 EggXfmAnimData 0 0 0 1 1963 1979 0 15 1964 1965 1966 1967 1968 1969 1970 1971 1972 1973 1974 1975 1976 1977 1978 0 0 1 0 1986 0 0 0 0 497
////////////////////////////////////////////////////////////////////
//       Class : EggXfmAnimData
// Description : Corresponding to an <Xfm$Anim> entry, this stores a
//               two-dimensional table with up to nine columns, one
//               for each component of a transformation.  This is an
//               older syntax of egg anim table, not often used
//               currently--it's replaced by EggXfmSAnim.
////////////////////////////////////////////////////////////////////

2071 13 EggUserData * 0 8576 13 EggUserData * 13 EggUserData * 0 0 1980 0 0 0 0 0 0 0 0 0 0

2072 19 EggUserData const * 0 8576 19 EggUserData const * 19 EggUserData const * 0 0 2073 0 0 0 0 0 0 0 0 0 0

2073 17 EggUserData const 0 8832 17 EggUserData const 17 EggUserData const 0 0 1980 0 0 0 0 0 0 0 0 0 0

2074 10 TypeHandle 0 2048 10 TypeHandle 10 TypeHandle 0 0 0 0 0 0 0 0 0 0 0 0 1098
////////////////////////////////////////////////////////////////////
//       Class : TypeHandle
// Description : TypeHandle is the identifier used to differentiate
//               C++ class types.  Any C++ classes that inherit from
//               some base class, and must be differentiated at run
//               time, should store a static TypeHandle object that
//               can be queried through a static member function
//               named get_class_type().  Most of the time, it is also
//               desirable to inherit from TypedObject, which provides
//               some virtual functions to return the TypeHandle for a
//               particular instance.
//
//               At its essence, a TypeHandle is simply a unique
//               identifier that is assigned by the TypeRegistry.  The
//               TypeRegistry stores a tree of TypeHandles, so that
//               ancestry of a particular type may be queried, and the
//               type name may be retrieved for run-time display.
////////////////////////////////////////////////////////////////////

2075 12 TypeHandle * 0 8576 12 TypeHandle * 12 TypeHandle * 0 0 2074 0 0 0 0 0 0 0 0 0 0

2076 11 EggObject * 0 8576 11 EggObject * 11 EggObject * 0 0 1982 0 0 0 0 0 0 0 0 0 0

2077 17 EggObject const * 0 8576 17 EggObject const * 17 EggObject const * 0 0 2078 0 0 0 0 0 0 0 0 0 0

2078 15 EggObject const 0 8832 15 EggObject const 15 EggObject const 0 0 1982 0 0 0 0 0 0 0 0 0 0

2079 4 void 0 8194 4 void 4 void 0 6 0 0 0 0 0 0 0 0 0 0 0

2080 4 bool 0 8194 4 bool 4 bool 0 4 0 0 0 0 0 0 0 0 0 0 0

2081 22 EggNamedObject const * 0 8576 22 EggNamedObject const * 22 EggNamedObject const * 0 0 2082 0 0 0 0 0 0 0 0 0 0

2082 20 EggNamedObject const 0 8832 20 EggNamedObject const 20 EggNamedObject const 0 0 1983 0 0 0 0 0 0 0 0 0 0

2083 16 EggNamedObject * 0 8576 16 EggNamedObject * 16 EggNamedObject * 0 0 1983 0 0 0 0 0 0 0 0 0 0

2084 13 atomic string 0 2 13 atomic string 13 atomic string 0 7 0 0 0 0 0 0 0 0 0 0 0

2085 9 ostream * 0 8576 9 ostream * 9 ostream * 0 0 2086 0 0 0 0 0 0 0 0 0 0

2086 7 ostream 0 2048 7 ostream 7 ostream 0 0 0 0 0 0 0 0 0 0 0 0 0

2087 9 Namable * 0 8576 9 Namable * 9 Namable * 0 0 1984 0 0 0 0 0 0 0 0 0 0

2088 9 EggNode * 0 8576 9 EggNode * 9 EggNode * 0 0 1985 0 0 0 0 0 0 0 0 0 0

2089 15 EggNode const * 0 8576 15 EggNode const * 15 EggNode const * 0 0 2090 0 0 0 0 0 0 0 0 0 0

2090 13 EggNode const 0 8832 13 EggNode const 13 EggNode const 0 0 1985 0 0 0 0 0 0 0 0 0 0

2091 14 EggGroupNode * 0 8576 14 EggGroupNode * 14 EggGroupNode * 0 0 1996 0 0 0 0 0 0 0 0 0 0

2092 3 int 0 8194 3 int 3 int 0 1 0 0 0 0 0 0 0 0 0 0 0

2093 17 LMatrix4d const * 0 8576 17 LMatrix4d const * 17 LMatrix4d const * 0 0 2094 0 0 0 0 0 0 0 0 0 0

2094 15 LMatrix4d const 0 8832 15 LMatrix4d const 15 LMatrix4d const 0 0 2095 0 0 0 0 0 0 0 0 0 0

2095 9 LMatrix4d 0 2048 9 LMatrix4d 9 LMatrix4d 0 0 0 0 0 0 0 3 2319 2320 2321 0 0 0 0 215
////////////////////////////////////////////////////////////////////
//       Class : LMatrix4
// Description : This is a 4-by-4 transform matrix.
////////////////////////////////////////////////////////////////////

2096 32 vector< basic_string< char > > * 0 8576 32 vector< basic_string< char > > * 32 vector< basic_string< char > > * 0 0 2097 0 0 0 0 0 0 0 0 0 0

2097 13 vector_string 0 2048 30 vector< basic_string< char > > 30 vector< basic_string< char > > 0 0 0 0 0 0 0 0 0 0 0 0 0

2098 15 EggRenderMode * 0 8576 15 EggRenderMode * 15 EggRenderMode * 0 0 1998 0 0 0 0 0 0 0 0 0 0

2099 13 EggAnimData * 0 8576 13 EggAnimData * 13 EggAnimData * 0 0 1986 0 0 0 0 0 0 0 0 0 0

2100 19 EggAnimData const * 0 8576 19 EggAnimData const * 19 EggAnimData const * 0 0 2101 0 0 0 0 0 0 0 0 0 0

2101 17 EggAnimData const 0 8832 17 EggAnimData const 17 EggAnimData const 0 0 1986 0 0 0 0 0 0 0 0 0 0

2102 22 EggAnimPreload const * 0 8576 22 EggAnimPreload const * 22 EggAnimPreload const * 0 0 2103 0 0 0 0 0 0 0 0 0 0

2103 20 EggAnimPreload const 0 8832 20 EggAnimPreload const 20 EggAnimPreload const 0 0 1987 0 0 0 0 0 0 0 0 0 0

2104 16 EggAnimPreload * 0 8576 16 EggAnimPreload * 16 EggAnimPreload * 0 0 1987 0 0 0 0 0 0 0 0 0 0

2105 15 EggAttributes * 0 8576 15 EggAttributes * 15 EggAttributes * 0 0 1988 0 0 0 0 0 0 0 0 0 0

2106 21 EggAttributes const * 0 8576 21 EggAttributes const * 21 EggAttributes const * 0 0 2107 0 0 0 0 0 0 0 0 0 0

2107 19 EggAttributes const 0 8832 19 EggAttributes const 19 EggAttributes const 0 0 1988 0 0 0 0 0 0 0 0 0 0

2108 17 LVector3d const * 0 8576 17 LVector3d const * 17 LVector3d const * 0 0 2109 0 0 0 0 0 0 0 0 0 0

2109 15 LVector3d const 0 8832 15 LVector3d const 15 LVector3d const 0 0 2110 0 0 0 0 0 0 0 0 0 0

2110 9 LVector3d 0 2048 9 LVector3d 9 LVector3d 0 0 0 0 0 0 0 0 0 0 0 0 1086
// Filename: lvector3_src.h
// Created by:  drose (24Sep99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LVector3
// Description : This is a three-component vector distance (as opposed
//               to a three-component point, which represents a
//               particular point in space).  Some of the methods are
//               slightly different between LPoint3 and LVector3; in
//               particular, subtraction of two points yields a
//               vector, while addition of a vector and a point yields
//               a point.
////////////////////////////////////////////////////////////////////

2111 10 LVecBase4f 0 2048 10 LVecBase4f 10 LVecBase4f 0 0 0 0 0 0 0 0 0 0 0 0 265
////////////////////////////////////////////////////////////////////
//       Class : LVecBase4
// Description : This is the base class for all three-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

2112 12 LVecBase4f * 0 8576 12 LVecBase4f * 12 LVecBase4f * 0 0 2111 0 0 0 0 0 0 0 0 0 0

2113 18 LVecBase4f const * 0 8576 18 LVecBase4f const * 18 LVecBase4f const * 0 0 2114 0 0 0 0 0 0 0 0 0 0

2114 16 LVecBase4f const 0 8832 16 LVecBase4f const 16 LVecBase4f const 0 0 2111 0 0 0 0 0 0 0 0 0 0

2115 12 MemoryBase * 0 8576 12 MemoryBase * 12 MemoryBase * 0 0 1989 0 0 0 0 0 0 0 0 0 0

2116 45 EggMorphList< EggMorph< LVector3d > > const * 0 8576 45 EggMorphList< EggMorph< LVector3d > > const * 45 EggMorphList< EggMorph< LVector3d > > const * 0 0 2117 0 0 0 0 0 0 0 0 0 0

2117 43 EggMorphList< EggMorph< LVector3d > > const 0 8832 43 EggMorphList< EggMorph< LVector3d > > const 43 EggMorphList< EggMorph< LVector3d > > const 0 0 1990 0 0 0 0 0 0 0 0 0 0

2118 45 EggMorphList< EggMorph< LVector4f > > const * 0 8576 45 EggMorphList< EggMorph< LVector4f > > const * 45 EggMorphList< EggMorph< LVector4f > > const * 0 0 2119 0 0 0 0 0 0 0 0 0 0

2119 43 EggMorphList< EggMorph< LVector4f > > const 0 8832 43 EggMorphList< EggMorph< LVector4f > > const 43 EggMorphList< EggMorph< LVector4f > > const 0 0 1991 0 0 0 0 0 0 0 0 0 0

2120 19 EggVertexUV const * 0 8576 19 EggVertexUV const * 19 EggVertexUV const * 0 0 2121 0 0 0 0 0 0 0 0 0 0

2121 17 EggVertexUV const 0 8832 17 EggVertexUV const 17 EggVertexUV const 0 0 1992 0 0 0 0 0 0 0 0 0 0

2122 13 EggVertexUV * 0 8576 13 EggVertexUV * 13 EggVertexUV * 0 0 1992 0 0 0 0 0 0 0 0 0 0

2123 16 LPoint2d const * 0 8576 16 LPoint2d const * 16 LPoint2d const * 0 0 2124 0 0 0 0 0 0 0 0 0 0

2124 14 LPoint2d const 0 8832 14 LPoint2d const 14 LPoint2d const 0 0 2125 0 0 0 0 0 0 0 0 0 0

2125 8 LPoint2d 0 2048 8 LPoint2d 8 LPoint2d 0 0 0 0 0 0 0 0 0 0 0 0 706
// Filename: lpoint2_src.h
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LPoint2
// Description : This is a two-component point in space.
////////////////////////////////////////////////////////////////////

2126 16 LPoint3d const * 0 8576 16 LPoint3d const * 16 LPoint3d const * 0 0 2127 0 0 0 0 0 0 0 0 0 0

2127 14 LPoint3d const 0 8832 14 LPoint3d const 14 LPoint3d const 0 0 2008 0 0 0 0 0 0 0 0 0 0

2128 10 LPoint2d * 0 8576 10 LPoint2d * 10 LPoint2d * 0 0 2125 0 0 0 0 0 0 0 0 0 0

2129 20 EggVertexAux const * 0 8576 20 EggVertexAux const * 20 EggVertexAux const * 0 0 2130 0 0 0 0 0 0 0 0 0 0

2130 18 EggVertexAux const 0 8832 18 EggVertexAux const 18 EggVertexAux const 0 0 1993 0 0 0 0 0 0 0 0 0 0

2131 14 EggVertexAux * 0 8576 14 EggVertexAux * 14 EggVertexAux * 0 0 1993 0 0 0 0 0 0 0 0 0 0

2132 18 LVecBase4d const * 0 8576 18 LVecBase4d const * 18 LVecBase4d const * 0 0 2133 0 0 0 0 0 0 0 0 0 0

2133 16 LVecBase4d const 0 8832 16 LVecBase4d const 16 LVecBase4d const 0 0 2134 0 0 0 0 0 0 0 0 0 0

2134 10 LVecBase4d 0 2048 10 LVecBase4d 10 LVecBase4d 0 0 0 0 0 0 0 0 0 0 0 0 265
////////////////////////////////////////////////////////////////////
//       Class : LVecBase4
// Description : This is the base class for all three-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

2135 11 EggVertex * 0 8576 11 EggVertex * 11 EggVertex * 0 0 1994 0 0 0 0 0 0 0 0 0 0

2136 17 EggVertex const * 0 8576 17 EggVertex const * 17 EggVertex const * 0 0 2137 0 0 0 0 0 0 0 0 0 0

2137 15 EggVertex const 0 8832 15 EggVertex const 15 EggVertex const 0 0 1994 0 0 0 0 0 0 0 0 0 0

2138 15 EggVertexPool * 0 8576 15 EggVertexPool * 15 EggVertexPool * 0 0 1995 0 0 0 0 0 0 0 0 0 0

2139 16 LPoint4d const * 0 8576 16 LPoint4d const * 16 LPoint4d const * 0 0 2140 0 0 0 0 0 0 0 0 0 0

2140 14 LPoint4d const 0 8832 14 LPoint4d const 14 LPoint4d const 0 0 2141 0 0 0 0 0 0 0 0 0 0

2141 8 LPoint4d 0 2048 8 LPoint4d 8 LPoint4d 0 0 0 0 0 0 0 0 0 0 0 0 707
// Filename: lpoint4_src.h
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LPoint4
// Description : This is a four-component point in space.
////////////////////////////////////////////////////////////////////

2142 10 LPoint3d * 0 8576 10 LPoint3d * 10 LPoint3d * 0 0 2008 0 0 0 0 0 0 0 0 0 0

2143 10 LPoint4d * 0 8576 10 LPoint4d * 10 LPoint4d * 0 0 2141 0 0 0 0 0 0 0 0 0 0

2144 16 EggGroup const * 0 8576 16 EggGroup const * 16 EggGroup const * 0 0 2145 0 0 0 0 0 0 0 0 0 0

2145 14 EggGroup const 0 8832 14 EggGroup const 14 EggGroup const 0 0 2009 0 0 0 0 0 0 0 0 0 0

2146 20 EggPrimitive const * 0 8576 20 EggPrimitive const * 20 EggPrimitive const * 0 0 2147 0 0 0 0 0 0 0 0 0 0

2147 18 EggPrimitive const 0 8832 18 EggPrimitive const 18 EggPrimitive const 0 0 2039 0 0 0 0 0 0 0 0 0 0

2148 21 EggVertexPool const * 0 8576 21 EggVertexPool const * 21 EggVertexPool const * 0 0 2149 0 0 0 0 0 0 0 0 0 0

2149 19 EggVertexPool const 0 8832 19 EggVertexPool const 19 EggVertexPool const 0 0 1995 0 0 0 0 0 0 0 0 0 0

2150 12 unsigned int 0 8198 12 unsigned int 12 unsigned int 0 1 0 0 0 0 0 0 0 0 0 0 0

2151 14 EggPrimitive * 0 8576 14 EggPrimitive * 14 EggPrimitive * 0 0 2039 0 0 0 0 0 0 0 0 0 0

2152 20 EggGroupNode const * 0 8576 20 EggGroupNode const * 20 EggGroupNode const * 0 0 2153 0 0 0 0 0 0 0 0 0 0

2153 18 EggGroupNode const 0 8832 18 EggGroupNode const 18 EggGroupNode const 0 0 1996 0 0 0 0 0 0 0 0 0 0

2154 10 PyObject * 0 8576 10 PyObject * 10 PyObject * 0 0 2155 0 0 0 0 0 0 0 0 0 0

2155 8 PyObject 0 2048 8 PyObject 8 PyObject 0 0 0 0 0 0 0 0 0 0 0 0 0

2156 19 DSearchPath const * 0 8576 19 DSearchPath const * 19 DSearchPath const * 0 0 2157 0 0 0 0 0 0 0 0 0 0

2157 17 DSearchPath const 0 8832 17 DSearchPath const 17 DSearchPath const 0 0 2158 0 0 0 0 0 0 0 0 0 0

2158 11 DSearchPath 0 2048 11 DSearchPath 11 DSearchPath 0 0 0 0 0 0 0 1 2322 0 0 0 0 551
///////////////////////////////////////////////////////////////////
//       Class : DSearchPath
// Description : This class stores a list of directories that can be
//               searched, in order, to locate a particular file.  It
//               is normally constructed by passing it a traditional
//               searchpath-style string, e.g. a list of directory
//               names delimited by spaces or colons, but it can also
//               be built up explicitly.
////////////////////////////////////////////////////////////////////

2159 16 Filename const * 0 8576 16 Filename const * 16 Filename const * 0 0 2160 0 0 0 0 0 0 0 0 0 0

2160 14 Filename const 0 8832 14 Filename const 14 Filename const 0 0 2161 0 0 0 0 0 0 0 0 0 0

2161 8 Filename 0 2048 8 Filename 8 Filename 0 0 0 0 0 0 0 0 0 0 0 0 869
////////////////////////////////////////////////////////////////////
//       Class : Filename
// Description : The name of a file, such as a texture file or an Egg
//               file.  Stores the full pathname, and includes
//               functions for extracting out the directory prefix
//               part and the file extension and stuff.
//
//               A Filename is also aware of the mapping between the
//               Unix-like filename convention we use internally, and
//               the local OS's specific filename convention, and it
//               knows how to perform basic OS-specific I/O, like
//               testing for file existence and searching a
//               searchpath, as well as the best way to open an
//               fstream for reading or writing.
////////////////////////////////////////////////////////////////////

2162 16 CoordinateSystem 0 532480 16 CoordinateSystem 16 CoordinateSystem 0 0 0 0 0 0 0 0 0 0 6 10 CS_default 10 CS_default 0 12 CS_zup_right 12 CS_zup_right 1 12 CS_yup_right 12 CS_yup_right 2 11 CS_zup_left 11 CS_zup_left 3 11 CS_yup_left 11 CS_yup_left 4 10 CS_invalid 10 CS_invalid 5 0 0

2163 19 GlobPattern const * 0 8576 19 GlobPattern const * 19 GlobPattern const * 0 0 2164 0 0 0 0 0 0 0 0 0 0

2164 17 GlobPattern const 0 8832 17 GlobPattern const 17 GlobPattern const 0 0 2165 0 0 0 0 0 0 0 0 0 0

2165 11 GlobPattern 0 2048 11 GlobPattern 11 GlobPattern 0 0 0 0 0 0 0 0 0 0 0 0 859
////////////////////////////////////////////////////////////////////
//       Class : GlobPattern
// Description : This class can be used to test for string matches
//               against standard Unix-shell filename globbing
//               conventions.  It serves as a portable standin for the
//               Posix fnmatch() call.
//
//               A GlobPattern is given a pattern string, which can
//               contain operators like *, ?, and [].  Then it can be
//               tested against any number of candidate strings; for
//               each candidate, it will indicate whether the string
//               matches the pattern or not.  It can be used, for
//               example, to scan a directory for all files matching a
//               particular pattern.
////////////////////////////////////////////////////////////////////

2166 38 vector< basic_string< char > > const * 0 8576 38 vector< basic_string< char > > const * 38 vector< basic_string< char > > const * 0 0 2167 0 0 0 0 0 0 0 0 0 0

2167 36 vector< basic_string< char > > const 0 8832 36 vector< basic_string< char > > const 36 vector< basic_string< char > > const 0 0 2097 0 0 0 0 0 0 0 0 0 0

2168 17 LVector2d const * 0 8576 17 LVector2d const * 17 LVector2d const * 0 0 2169 0 0 0 0 0 0 0 0 0 0

2169 15 LVector2d const 0 8832 15 LVector2d const 15 LVector2d const 0 0 2170 0 0 0 0 0 0 0 0 0 0

2170 9 LVector2d 0 2048 9 LVector2d 9 LVector2d 0 0 0 0 0 0 0 0 0 0 0 0 707
// Filename: lvector2_src.h
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LVector2
// Description : This is a two-component vector offset.
////////////////////////////////////////////////////////////////////

2171 21 EggRenderMode const * 0 8576 21 EggRenderMode const * 21 EggRenderMode const * 0 0 2172 0 0 0 0 0 0 0 0 0 0

2172 19 EggRenderMode const 0 8832 19 EggRenderMode const 19 EggRenderMode const 0 0 1998 0 0 0 0 0 0 0 0 0 0

2173 14 EggTransform * 0 8576 14 EggTransform * 14 EggTransform * 0 0 2003 0 0 0 0 0 0 0 0 0 0

2174 20 EggTransform const * 0 8576 20 EggTransform const * 20 EggTransform const * 0 0 2175 0 0 0 0 0 0 0 0 0 0

2175 18 EggTransform const 0 8832 18 EggTransform const 18 EggTransform const 0 0 2003 0 0 0 0 0 0 0 0 0 0

2176 20 LQuaterniond const * 0 8576 20 LQuaterniond const * 20 LQuaterniond const * 0 0 2177 0 0 0 0 0 0 0 0 0 0

2177 18 LQuaterniond const 0 8832 18 LQuaterniond const 18 LQuaterniond const 0 0 2178 0 0 0 0 0 0 0 0 0 0

2178 12 LQuaterniond 0 2048 12 LQuaterniond 12 LQuaterniond 0 0 0 0 0 0 0 0 0 0 0 0 719
// Filename: lquaternion_src.h
// Created by:  frang (06Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : FLOATNAME(LQuaternion)
// Description : This is the base quaternion class
////////////////////////////////////////////////////////////////////

2179 18 LVecBase2d const * 0 8576 18 LVecBase2d const * 18 LVecBase2d const * 0 0 2180 0 0 0 0 0 0 0 0 0 0

2180 16 LVecBase2d const 0 8832 16 LVecBase2d const 16 LVecBase2d const 0 0 2181 0 0 0 0 0 0 0 0 0 0

2181 10 LVecBase2d 0 2048 10 LVecBase2d 10 LVecBase2d 0 0 0 0 0 0 0 0 0 0 0 0 752
// Filename: lvecBase2_src.h
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LVecBase2
// Description : This is the base class for all two-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

2182 18 LVecBase3d const * 0 8576 18 LVecBase3d const * 18 LVecBase3d const * 0 0 2183 0 0 0 0 0 0 0 0 0 0

2183 16 LVecBase3d const 0 8832 16 LVecBase3d const 16 LVecBase3d const 0 0 2184 0 0 0 0 0 0 0 0 0 0

2184 10 LVecBase3d 0 2048 10 LVecBase3d 10 LVecBase3d 0 0 0 0 0 0 0 0 0 0 0 0 754
// Filename: lvecBase3_src.h
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LVecBase3
// Description : This is the base class for all three-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

2185 17 LMatrix3d const * 0 8576 17 LMatrix3d const * 17 LMatrix3d const * 0 0 2186 0 0 0 0 0 0 0 0 0 0

2186 15 LMatrix3d const 0 8832 15 LMatrix3d const 15 LMatrix3d const 0 0 2187 0 0 0 0 0 0 0 0 0 0

2187 9 LMatrix3d 0 2048 9 LMatrix3d 9 LMatrix3d 0 0 0 0 0 0 0 4 2323 2324 2325 2326 0 0 0 0 462
////////////////////////////////////////////////////////////////////
//       Class : LMatrix3
// Description : This is a 3-by-3 transform matrix.  It typically will
//               represent either a rotation-and-scale (no
//               translation) matrix in 3-d, or a full affine matrix
//               (rotation, scale, translation) in 2-d, e.g. for a
//               texture matrix.
////////////////////////////////////////////////////////////////////

2188 11 LMatrix3d * 0 8576 11 LMatrix3d * 11 LMatrix3d * 0 0 2187 0 0 0 0 0 0 0 0 0 0

2189 26 EggSwitchCondition const * 0 8576 26 EggSwitchCondition const * 26 EggSwitchCondition const * 0 0 2190 0 0 0 0 0 0 0 0 0 0

2190 24 EggSwitchCondition const 0 8832 24 EggSwitchCondition const 24 EggSwitchCondition const 0 0 2005 0 0 0 0 0 0 0 0 0 0

2191 20 EggSwitchCondition * 0 8576 20 EggSwitchCondition * 20 EggSwitchCondition * 0 0 2005 0 0 0 0 0 0 0 0 0 0

2192 28 EggSwitchConditionDistance * 0 8576 28 EggSwitchConditionDistance * 28 EggSwitchConditionDistance * 0 0 2006 0 0 0 0 0 0 0 0 0 0

2193 34 EggSwitchConditionDistance const * 0 8576 34 EggSwitchConditionDistance const * 34 EggSwitchConditionDistance const * 0 0 2194 0 0 0 0 0 0 0 0 0 0

2194 32 EggSwitchConditionDistance const 0 8832 32 EggSwitchConditionDistance const 32 EggSwitchConditionDistance const 0 0 2006 0 0 0 0 0 0 0 0 0 0

2195 10 EggGroup * 0 8576 10 EggGroup * 10 EggGroup * 0 0 2009 0 0 0 0 0 0 0 0 0 0

2196 29 BitMask< unsigned int, 32 > * 0 8576 29 BitMask< unsigned int, 32 > * 29 BitMask< unsigned int, 32 > * 0 0 2197 0 0 0 0 0 0 0 0 0 0

2197 9 BitMask32 0 2048 27 BitMask< unsigned int, 32 > 27 BitMask< unsigned int, 32 > 0 0 0 0 0 0 0 0 0 0 0 0 0

2198 14 EggBin const * 0 8576 14 EggBin const * 14 EggBin const * 0 0 2199 0 0 0 0 0 0 0 0 0 0

2199 12 EggBin const 0 8832 12 EggBin const 12 EggBin const 0 0 2018 0 0 0 0 0 0 0 0 0 0

2200 8 EggBin * 0 8576 8 EggBin * 8 EggBin * 0 0 2018 0 0 0 0 0 0 0 0 0 0

2201 13 EggBinMaker * 0 8576 13 EggBinMaker * 13 EggBinMaker * 0 0 2019 0 0 0 0 0 0 0 0 0 0

2202 18 EggComment const * 0 8576 18 EggComment const * 18 EggComment const * 0 0 2203 0 0 0 0 0 0 0 0 0 0

2203 16 EggComment const 0 8832 16 EggComment const 16 EggComment const 0 0 2020 0 0 0 0 0 0 0 0 0 0

2204 12 EggComment * 0 8576 12 EggComment * 12 EggComment * 0 0 2020 0 0 0 0 0 0 0 0 0 0

2205 17 EggFilenameNode * 0 8576 17 EggFilenameNode * 17 EggFilenameNode * 0 0 2021 0 0 0 0 0 0 0 0 0 0

2206 23 EggFilenameNode const * 0 8576 23 EggFilenameNode const * 23 EggFilenameNode const * 0 0 2207 0 0 0 0 0 0 0 0 0 0

2207 21 EggFilenameNode const 0 8832 21 EggFilenameNode const 21 EggFilenameNode const 0 0 2021 0 0 0 0 0 0 0 0 0 0

2208 18 EggTexture const * 0 8576 18 EggTexture const * 18 EggTexture const * 0 0 2209 0 0 0 0 0 0 0 0 0 0

2209 16 EggTexture const 0 8832 16 EggTexture const 16 EggTexture const 0 0 2022 0 0 0 0 0 0 0 0 0 0

2210 12 EggTexture * 0 8576 12 EggTexture * 12 EggTexture * 0 0 2022 0 0 0 0 0 0 0 0 0 0

2211 19 EggMaterial const * 0 8576 19 EggMaterial const * 19 EggMaterial const * 0 0 2212 0 0 0 0 0 0 0 0 0 0

2212 17 EggMaterial const 0 8832 17 EggMaterial const 17 EggMaterial const 0 0 2037 0 0 0 0 0 0 0 0 0 0

2213 13 EggMaterial * 0 8576 13 EggMaterial * 13 EggMaterial * 0 0 2037 0 0 0 0 0 0 0 0 0 0

2214 23 EggCompositePrimitive * 0 8576 23 EggCompositePrimitive * 23 EggCompositePrimitive * 0 0 2041 0 0 0 0 0 0 0 0 0 0

2215 29 EggCompositePrimitive const * 0 8576 29 EggCompositePrimitive const * 29 EggCompositePrimitive const * 0 0 2216 0 0 0 0 0 0 0 0 0 0

2216 27 EggCompositePrimitive const 0 8832 27 EggCompositePrimitive const 27 EggCompositePrimitive const 0 0 2041 0 0 0 0 0 0 0 0 0 0

2217 9 EggData * 0 8576 9 EggData * 9 EggData * 0 0 2042 0 0 0 0 0 0 0 0 0 0

2218 15 EggData const * 0 8576 15 EggData const * 15 EggData const * 0 0 2219 0 0 0 0 0 0 0 0 0 0

2219 13 EggData const 0 8832 13 EggData const 13 EggData const 0 0 2042 0 0 0 0 0 0 0 0 0 0

2220 10 Filename * 0 8576 10 Filename * 10 Filename * 0 0 2161 0 0 0 0 0 0 0 0 0 0

2221 9 istream * 0 8576 9 istream * 9 istream * 0 0 2222 0 0 0 0 0 0 0 0 0 0

2222 7 istream 0 2048 7 istream 7 istream 0 0 0 0 0 0 0 0 0 0 0 0 0

2223 16 BamCacheRecord * 0 8576 16 BamCacheRecord * 16 BamCacheRecord * 0 0 2224 0 0 0 0 0 0 0 0 0 0

2224 14 BamCacheRecord 0 2048 14 BamCacheRecord 14 BamCacheRecord 0 0 0 0 0 0 0 0 0 0 0 0 469
////////////////////////////////////////////////////////////////////
//       Class : BamCacheRecord
// Description : An instance of this class is written to the front of
//               a Bam or Txo file to make the file a cached instance
//               of some other loadable resource.  This record
//               contains information needed to test the validity of
//               the cache.
////////////////////////////////////////////////////////////////////

2225 21 EggCoordinateSystem * 0 8576 21 EggCoordinateSystem * 21 EggCoordinateSystem * 0 0 2043 0 0 0 0 0 0 0 0 0 0

2226 27 EggCoordinateSystem const * 0 8576 27 EggCoordinateSystem const * 27 EggCoordinateSystem const * 0 0 2227 0 0 0 0 0 0 0 0 0 0

2227 25 EggCoordinateSystem const 0 8832 25 EggCoordinateSystem const 25 EggCoordinateSystem const 0 0 2043 0 0 0 0 0 0 0 0 0 0

2228 10 EggCurve * 0 8576 10 EggCurve * 10 EggCurve * 0 0 2044 0 0 0 0 0 0 0 0 0 0

2229 16 EggCurve const * 0 8576 16 EggCurve const * 16 EggCurve const * 0 0 2230 0 0 0 0 0 0 0 0 0 0

2230 14 EggCurve const 0 8832 14 EggCurve const 14 EggCurve const 0 0 2044 0 0 0 0 0 0 0 0 0 0

2231 28 EggExternalReference const * 0 8576 28 EggExternalReference const * 28 EggExternalReference const * 0 0 2232 0 0 0 0 0 0 0 0 0 0

2232 26 EggExternalReference const 0 8832 26 EggExternalReference const 26 EggExternalReference const 0 0 2046 0 0 0 0 0 0 0 0 0 0

2233 22 EggExternalReference * 0 8576 22 EggExternalReference * 22 EggExternalReference * 0 0 2046 0 0 0 0 0 0 0 0 0 0

2234 19 EggNameUniquifier * 0 8576 19 EggNameUniquifier * 19 EggNameUniquifier * 0 0 2047 0 0 0 0 0 0 0 0 0 0

2235 25 EggNameUniquifier const * 0 8576 25 EggNameUniquifier const * 25 EggNameUniquifier const * 0 0 2236 0 0 0 0 0 0 0 0 0 0

2236 23 EggNameUniquifier const 0 8832 23 EggNameUniquifier const 23 EggNameUniquifier const 0 0 2047 0 0 0 0 0 0 0 0 0 0

2237 20 EggGroupUniquifier * 0 8576 20 EggGroupUniquifier * 20 EggGroupUniquifier * 0 0 2048 0 0 0 0 0 0 0 0 0 0

2238 15 EggLine const * 0 8576 15 EggLine const * 15 EggLine const * 0 0 2239 0 0 0 0 0 0 0 0 0 0

2239 13 EggLine const 0 8832 13 EggLine const 13 EggLine const 0 0 2049 0 0 0 0 0 0 0 0 0 0

2240 9 EggLine * 0 8576 9 EggLine * 9 EggLine * 0 0 2049 0 0 0 0 0 0 0 0 0 0

2241 23 EggMaterialCollection * 0 8576 23 EggMaterialCollection * 23 EggMaterialCollection * 0 0 2050 0 0 0 0 0 0 0 0 0 0

2242 29 EggMaterialCollection const * 0 8576 29 EggMaterialCollection const * 29 EggMaterialCollection const * 0 0 2243 0 0 0 0 0 0 0 0 0 0

2243 27 EggMaterialCollection const 0 8832 27 EggMaterialCollection const 27 EggMaterialCollection const 0 0 2050 0 0 0 0 0 0 0 0 0 0

2244 59 map< PointerTo< EggMaterial >, PointerTo< EggMaterial > > * 0 8576 59 map< PointerTo< EggMaterial >, PointerTo< EggMaterial > > * 59 map< PointerTo< EggMaterial >, PointerTo< EggMaterial > > * 0 0 2245 0 0 0 0 0 0 0 0 0 0

2245 57 map< PointerTo< EggMaterial >, PointerTo< EggMaterial > > 0 2048 57 map< PointerTo< EggMaterial >, PointerTo< EggMaterial > > 57 map< PointerTo< EggMaterial >, PointerTo< EggMaterial > > 0 0 0 0 0 0 0 0 0 0 0 0 0

2246 65 map< PointerTo< EggMaterial >, PointerTo< EggMaterial > > const * 0 8576 65 map< PointerTo< EggMaterial >, PointerTo< EggMaterial > > const * 65 map< PointerTo< EggMaterial >, PointerTo< EggMaterial > > const * 0 0 2247 0 0 0 0 0 0 0 0 0 0

2247 63 map< PointerTo< EggMaterial >, PointerTo< EggMaterial > > const 0 8832 63 map< PointerTo< EggMaterial >, PointerTo< EggMaterial > > const 63 map< PointerTo< EggMaterial >, PointerTo< EggMaterial > > const 0 0 2245 0 0 0 0 0 0 0 0 0 0

2248 18 EggPolygon const * 0 8576 18 EggPolygon const * 18 EggPolygon const * 0 0 2249 0 0 0 0 0 0 0 0 0 0

2249 16 EggPolygon const 0 8832 16 EggPolygon const 16 EggPolygon const 0 0 2051 0 0 0 0 0 0 0 0 0 0

2250 12 EggPolygon * 0 8576 12 EggPolygon * 12 EggPolygon * 0 0 2051 0 0 0 0 0 0 0 0 0 0

2251 11 LVector3d * 0 8576 11 LVector3d * 11 LVector3d * 0 0 2110 0 0 0 0 0 0 0 0 0 0

2252 21 EggNurbsCurve const * 0 8576 21 EggNurbsCurve const * 21 EggNurbsCurve const * 0 0 2253 0 0 0 0 0 0 0 0 0 0

2253 19 EggNurbsCurve const 0 8832 19 EggNurbsCurve const 19 EggNurbsCurve const 0 0 2052 0 0 0 0 0 0 0 0 0 0

2254 15 EggNurbsCurve * 0 8576 15 EggNurbsCurve * 15 EggNurbsCurve * 0 0 2052 0 0 0 0 0 0 0 0 0 0

2255 12 EggSurface * 0 8576 12 EggSurface * 12 EggSurface * 0 0 2053 0 0 0 0 0 0 0 0 0 0

2256 18 EggSurface const * 0 8576 18 EggSurface const * 18 EggSurface const * 0 0 2257 0 0 0 0 0 0 0 0 0 0

2257 16 EggSurface const 0 8832 16 EggSurface const 16 EggSurface const 0 0 2053 0 0 0 0 0 0 0 0 0 0

2258 23 EggNurbsSurface const * 0 8576 23 EggNurbsSurface const * 23 EggNurbsSurface const * 0 0 2259 0 0 0 0 0 0 0 0 0 0

2259 21 EggNurbsSurface const 0 8832 21 EggNurbsSurface const 21 EggNurbsSurface const 0 0 2054 0 0 0 0 0 0 0 0 0 0

2260 17 EggNurbsSurface * 0 8576 17 EggNurbsSurface * 17 EggNurbsSurface * 0 0 2054 0 0 0 0 0 0 0 0 0 0

2261 42 list< PointerTo< EggNurbsCurve > > const * 0 8576 42 list< PointerTo< EggNurbsCurve > > const * 42 list< PointerTo< EggNurbsCurve > > const * 0 0 2262 0 0 0 0 0 0 0 0 0 0

2262 40 list< PointerTo< EggNurbsCurve > > const 0 8832 40 list< PointerTo< EggNurbsCurve > > const 40 list< PointerTo< EggNurbsCurve > > const 0 0 2055 0 0 0 0 0 0 0 0 0 0

2263 58 list< list< list< PointerTo< EggNurbsCurve > > > > const * 0 8576 58 list< list< list< PointerTo< EggNurbsCurve > > > > const * 58 list< list< list< PointerTo< EggNurbsCurve > > > > const * 0 0 2264 0 0 0 0 0 0 0 0 0 0

2264 56 list< list< list< PointerTo< EggNurbsCurve > > > > const 0 8832 56 list< list< list< PointerTo< EggNurbsCurve > > > > const 56 list< list< list< PointerTo< EggNurbsCurve > > > > const 0 0 2056 0 0 0 0 0 0 0 0 0 0

2265 16 EggPatch const * 0 8576 16 EggPatch const * 16 EggPatch const * 0 0 2266 0 0 0 0 0 0 0 0 0 0

2266 14 EggPatch const 0 8832 14 EggPatch const 14 EggPatch const 0 0 2057 0 0 0 0 0 0 0 0 0 0

2267 10 EggPatch * 0 8576 10 EggPatch * 10 EggPatch * 0 0 2057 0 0 0 0 0 0 0 0 0 0

2268 16 EggPoint const * 0 8576 16 EggPoint const * 16 EggPoint const * 0 0 2269 0 0 0 0 0 0 0 0 0 0

2269 14 EggPoint const 0 8832 14 EggPoint const 14 EggPoint const 0 0 2058 0 0 0 0 0 0 0 0 0 0

2270 10 EggPoint * 0 8576 10 EggPoint * 10 EggPoint * 0 0 2058 0 0 0 0 0 0 0 0 0 0

2271 17 EggPolysetMaker * 0 8576 17 EggPolysetMaker * 17 EggPolysetMaker * 0 0 2059 0 0 0 0 0 0 0 0 0 0

2272 19 EggPoolUniquifier * 0 8576 19 EggPoolUniquifier * 19 EggPoolUniquifier * 0 0 2062 0 0 0 0 0 0 0 0 0 0

2273 20 EggSAnimData const * 0 8576 20 EggSAnimData const * 20 EggSAnimData const * 0 0 2274 0 0 0 0 0 0 0 0 0 0

2274 18 EggSAnimData const 0 8832 18 EggSAnimData const 18 EggSAnimData const 0 0 2063 0 0 0 0 0 0 0 0 0 0

2275 14 EggSAnimData * 0 8576 14 EggSAnimData * 14 EggSAnimData * 0 0 2063 0 0 0 0 0 0 0 0 0 0

2276 16 EggTable const * 0 8576 16 EggTable const * 16 EggTable const * 0 0 2277 0 0 0 0 0 0 0 0 0 0

2277 14 EggTable const 0 8832 14 EggTable const 14 EggTable const 0 0 2064 0 0 0 0 0 0 0 0 0 0

2278 10 EggTable * 0 8576 10 EggTable * 10 EggTable * 0 0 2064 0 0 0 0 0 0 0 0 0 0

2279 22 EggTextureCollection * 0 8576 22 EggTextureCollection * 22 EggTextureCollection * 0 0 2066 0 0 0 0 0 0 0 0 0 0

2280 28 EggTextureCollection const * 0 8576 28 EggTextureCollection const * 28 EggTextureCollection const * 0 0 2281 0 0 0 0 0 0 0 0 0 0

2281 26 EggTextureCollection const 0 8832 26 EggTextureCollection const 26 EggTextureCollection const 0 0 2066 0 0 0 0 0 0 0 0 0 0

2282 57 map< PointerTo< EggTexture >, PointerTo< EggTexture > > * 0 8576 57 map< PointerTo< EggTexture >, PointerTo< EggTexture > > * 57 map< PointerTo< EggTexture >, PointerTo< EggTexture > > * 0 0 2283 0 0 0 0 0 0 0 0 0 0

2283 55 map< PointerTo< EggTexture >, PointerTo< EggTexture > > 0 2048 55 map< PointerTo< EggTexture >, PointerTo< EggTexture > > 55 map< PointerTo< EggTexture >, PointerTo< EggTexture > > 0 0 0 0 0 0 0 0 0 0 0 0 0

2284 63 map< PointerTo< EggTexture >, PointerTo< EggTexture > > const * 0 8576 63 map< PointerTo< EggTexture >, PointerTo< EggTexture > > const * 63 map< PointerTo< EggTexture >, PointerTo< EggTexture > > const * 0 0 2285 0 0 0 0 0 0 0 0 0 0

2285 61 map< PointerTo< EggTexture >, PointerTo< EggTexture > > const 0 8832 61 map< PointerTo< EggTexture >, PointerTo< EggTexture > > const 61 map< PointerTo< EggTexture >, PointerTo< EggTexture > > const 0 0 2283 0 0 0 0 0 0 0 0 0 0

2286 22 EggTriangleFan const * 0 8576 22 EggTriangleFan const * 22 EggTriangleFan const * 0 0 2287 0 0 0 0 0 0 0 0 0 0

2287 20 EggTriangleFan const 0 8832 20 EggTriangleFan const 20 EggTriangleFan const 0 0 2067 0 0 0 0 0 0 0 0 0 0

2288 16 EggTriangleFan * 0 8576 16 EggTriangleFan * 16 EggTriangleFan * 0 0 2067 0 0 0 0 0 0 0 0 0 0

2289 24 EggTriangleStrip const * 0 8576 24 EggTriangleStrip const * 24 EggTriangleStrip const * 0 0 2290 0 0 0 0 0 0 0 0 0 0

2290 22 EggTriangleStrip const 0 8832 22 EggTriangleStrip const 22 EggTriangleStrip const 0 0 2068 0 0 0 0 0 0 0 0 0 0

2291 18 EggTriangleStrip * 0 8576 18 EggTriangleStrip * 18 EggTriangleStrip * 0 0 2068 0 0 0 0 0 0 0 0 0 0

2292 22 EggXfmAnimData const * 0 8576 22 EggXfmAnimData const * 22 EggXfmAnimData const * 0 0 2293 0 0 0 0 0 0 0 0 0 0

2293 20 EggXfmAnimData const 0 8832 20 EggXfmAnimData const 20 EggXfmAnimData const 0 0 2070 0 0 0 0 0 0 0 0 0 0

2294 13 EggXfmSAnim * 0 8576 13 EggXfmSAnim * 13 EggXfmSAnim * 0 0 2069 0 0 0 0 0 0 0 0 0 0

2295 19 EggXfmSAnim const * 0 8576 19 EggXfmSAnim const * 19 EggXfmSAnim const * 0 0 2296 0 0 0 0 0 0 0 0 0 0

2296 17 EggXfmSAnim const 0 8832 17 EggXfmSAnim const 17 EggXfmSAnim const 0 0 2069 0 0 0 0 0 0 0 0 0 0

2297 11 LMatrix4d * 0 8576 11 LMatrix4d * 11 LMatrix4d * 0 0 2095 0 0 0 0 0 0 0 0 0 0

2298 16 EggXfmAnimData * 0 8576 16 EggXfmAnimData * 16 EggXfmAnimData * 0 0 2070 0 0 0 0 0 0 0 0 0 0

2299 6 string 0 2048 20 basic_string< char > 20 basic_string< char > 0 0 0 0 0 0 0 0 0 0 0 0 0

0
10
2300 9 _dnormals 0 2 1990 1124 0 24 EggAttributes::_dnormals 
2301 7 _drgbas 0 2 1991 1125 0 22 EggAttributes::_drgbas 
2302 5 _duvs 0 2 1990 1148 0 18 EggVertexUV::_duvs 
2303 6 _dxyzs 0 2 1990 1209 0 17 EggVertex::_dxyzs 
2304 5 _fade 0 6 2007 1348 1349 33 EggSwitchConditionDistance::_fade 
2305 11 _switch_out 0 6 2007 1350 1351 39 EggSwitchConditionDistance::_switch_out 
2306 10 _switch_in 0 6 2007 1352 1353 38 EggSwitchConditionDistance::_switch_in 
2307 7 _center 0 2 2008 1354 0 35 EggSwitchConditionDistance::_center 
2308 18 _curves_on_surface 0 2 2055 1868 0 35 EggNurbsSurface::_curves_on_surface 
2309 6 _trims 0 2 2056 1869 0 23 EggNurbsSurface::_trims 
17
2310 0 0 373 16 get_object_types 20 get_num_object_types 15 get_object_type 
2311 0 0 373 14 get_group_refs 18 get_num_group_refs 13 get_group_ref 
2312 0 0 718 12 get_textures 16 get_num_textures 11 get_texture 
2313 0 0 718 12 get_vertices 16 get_num_vertices 10 get_vertex 
2314 0 0 776 14 get_components 18 get_num_components 13 get_component 
2315 0 0 877 9 get_knots 13 get_num_knots 8 get_knot 
2316 0 0 901 11 get_u_knots 15 get_num_u_knots 10 get_u_knot 
2317 0 0 901 11 get_v_knots 15 get_num_v_knots 10 get_v_knot 
2318 0 0 986 12 get_textures 16 get_num_textures 11 get_texture 
2319 0 0 1116 8 get_rows 4 size 7 get_row 
2320 0 0 1116 8 get_cols 4 size 7 get_col 
2321 0 0 1116 9 get_row3s 4 size 8 get_row3 
2322 0 0 1403 15 get_directories 19 get_num_directories 13 get_directory 
2323 0 0 1507 8 get_rows 4 size 7 get_row 
2324 0 0 1507 8 get_cols 4 size 7 get_col 
2325 0 0 1507 9 get_col2s 4 size 8 get_col2 
2326 0 0 1507 9 get_row2s 4 size 8 get_row2 
