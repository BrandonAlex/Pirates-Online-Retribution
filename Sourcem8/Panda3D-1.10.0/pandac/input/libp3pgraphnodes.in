1436948182
2 3
16 libp3pgraphnodes 4 Bgt0 12 panda3d.core 
164
153 15 upcast_to_Light 0 12 317 26 LightNode::upcast_to_Light 0 1 4 30
upcast from LightNode to Light
40
Light *LightNode::upcast_to_Light(void);

154 21 downcast_to_LightNode 0 12 318 28 Light::downcast_to_LightNode 0 1 5 32
downcast from Light to LightNode
46
LightNode *Light::downcast_to_LightNode(void);

155 19 upcast_to_PandaNode 0 12 317 30 LightNode::upcast_to_PandaNode 0 1 6 34
upcast from LightNode to PandaNode
48
PandaNode *LightNode::upcast_to_PandaNode(void);

156 21 downcast_to_LightNode 0 12 319 32 PandaNode::downcast_to_LightNode 0 1 7 36
downcast from PandaNode to LightNode
50
LightNode *PandaNode::downcast_to_LightNode(void);

157 6 output 0 6 317 17 LightNode::output 0 1 1 312
// We have to explicitly publish these because they resolve the
// multiple inheritance.

////////////////////////////////////////////////////////////////////
//     Function: LightNode::output
//       Access: Public, Virtual
//  Description:
////////////////////////////////////////////////////////////////////
51
virtual void LightNode::output(ostream &out) const;

158 5 write 0 6 317 16 LightNode::write 0 1 2 221
////////////////////////////////////////////////////////////////////
//     Function: LightNode::write
//       Access: Public, Virtual
//  Description:
////////////////////////////////////////////////////////////////////
72
virtual void LightNode::write(ostream &out, int indent_level = 0) const;

159 14 get_class_type 0 4 317 25 LightNode::get_class_type 0 1 3 0
50
static TypeHandle LightNode::get_class_type(void);

160 10 ~LightNode 0 4 317 21 LightNode::~LightNode 0 0 0
28
LightNode::~LightNode(void);

161 12 AmbientLight 0 4 320 26 AmbientLight::AmbientLight 0 1 8 602
////////////////////////////////////////////////////////////////////
//     Function: AmbientLight::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: AmbientLight::Copy Constructor
//       Access: Protected
//  Description: Do not call the copy constructor directly; instead,
//               use make_copy() or copy_subgraph() to make a copy of
//               a node.
////////////////////////////////////////////////////////////////////
47
AmbientLight::AmbientLight(string const &name);

162 14 get_class_type 0 4 320 28 AmbientLight::get_class_type 0 1 9 0
53
static TypeHandle AmbientLight::get_class_type(void);

163 13 ~AmbientLight 0 4 320 27 AmbientLight::~AmbientLight 0 0 0
34
AmbientLight::~AmbientLight(void);

164 12 CallbackNode 0 4 321 26 CallbackNode::CallbackNode 0 1 10 455
////////////////////////////////////////////////////////////////////
//     Function: CallbackNode::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: CallbackNode::Copy Constructor
//       Access: Protected
//  Description:
////////////////////////////////////////////////////////////////////
47
CallbackNode::CallbackNode(string const &name);

165 17 set_cull_callback 0 4 321 31 CallbackNode::set_cull_callback 0 1 11 1677
////////////////////////////////////////////////////////////////////
//     Function: CallbackNode::set_cull_callback
//       Access: Published
//  Description: Sets the CallbackObject that will be notified when
//               this node is visited during the cull traversal.  This
//               callback will be made during the cull thread.
//
//               The cull traversal is responsible for determining
//               which nodes are visible and within the view frustum,
//               and for accumulating state and transform, and
//               generally building up the list of CullableObjects
//               that are to be eventually passed to the draw
//               traversal for rendering.
//
//               At the time the cull traversal callback is made, the
//               node has been determined to be visible and it has
//               passed the bounding-volume test, so it lies within
//               the view frustum.
//
//               The callback is passed an instance of a
//               NodeCullCallbackData, which contains pointers to the
//               CullTraverser and CullTraverserData--enough data to
//               examine the current node and its place within the
//               scene graph.  The callback *replaces* the normal cull
//               behavior, so if your callback does nothing, the cull
//               traversal will not continue below this node.  If you
//               wish the cull traversal to continue to visit this
//               node and below, you must call cbdata->upcall()
//               from your callback.
////////////////////////////////////////////////////////////////////
68
inline void CallbackNode::set_cull_callback(CallbackObject *object);

166 19 clear_cull_callback 0 4 321 33 CallbackNode::clear_cull_callback 0 1 12 317
////////////////////////////////////////////////////////////////////
//     Function: CallbackNode::clear_cull_callback
//       Access: Published
//  Description: Removes the callback set by an earlier call to
//               set_cull_callback().
////////////////////////////////////////////////////////////////////
52
inline void CallbackNode::clear_cull_callback(void);

167 17 get_cull_callback 0 4 321 31 CallbackNode::get_cull_callback 0 1 13 285
////////////////////////////////////////////////////////////////////
//     Function: CallbackNode::get_cull_callback
//       Access: Published
//  Description: Returns the CallbackObject set by set_cull_callback().
////////////////////////////////////////////////////////////////////
67
inline CallbackObject *CallbackNode::get_cull_callback(void) const;

168 17 set_draw_callback 0 4 321 31 CallbackNode::set_draw_callback 0 1 14 1477
////////////////////////////////////////////////////////////////////
//     Function: CallbackNode::set_draw_callback
//       Access: Published
//  Description: Sets the CallbackObject that will be notified when
//               this node is visited during the draw traversal.  This
//               callback will be made during the draw thread.
//
//               The draw traversal is responsible for actually
//               issuing the commands to the graphics engine to draw
//               primitives.  Its job is to walk through the list of
//               CullableObjects build up by the cull traversal, as
//               quickly as possible, issuing the appropriate commands
//               to draw each one.
//
//               At the time the draw traversal callback is made, the
//               graphics state has been loaded with the correct
//               modelview transform and render state, and the
//               primitives (if any) in this node are ready to be
//               drawn.
//
//               The callback is passed an instance of a
//               GeomDrawCallbackData, which contains pointers to the
//               current state and transform, as well as the current
//               GSG.  There is a Geom pointer as well, but it will
//               always be NULL to this callback, since the
//               CallbackNode does not itself contain any Geoms.
////////////////////////////////////////////////////////////////////
68
inline void CallbackNode::set_draw_callback(CallbackObject *object);

169 19 clear_draw_callback 0 4 321 33 CallbackNode::clear_draw_callback 0 1 15 317
////////////////////////////////////////////////////////////////////
//     Function: CallbackNode::clear_draw_callback
//       Access: Published
//  Description: Removes the callback set by an earlier call to
//               set_draw_callback().
////////////////////////////////////////////////////////////////////
52
inline void CallbackNode::clear_draw_callback(void);

170 17 get_draw_callback 0 4 321 31 CallbackNode::get_draw_callback 0 1 16 285
////////////////////////////////////////////////////////////////////
//     Function: CallbackNode::get_draw_callback
//       Access: Published
//  Description: Returns the CallbackObject set by set_draw_callback().
////////////////////////////////////////////////////////////////////
67
inline CallbackObject *CallbackNode::get_draw_callback(void) const;

171 14 get_class_type 0 4 321 28 CallbackNode::get_class_type 0 1 17 0
53
static TypeHandle CallbackNode::get_class_type(void);

172 13 ~CallbackNode 0 4 321 27 CallbackNode::~CallbackNode 0 0 0
34
CallbackNode::~CallbackNode(void);

173 11 ComputeNode 0 4 322 24 ComputeNode::ComputeNode 0 1 18 596
////////////////////////////////////////////////////////////////////
//     Function: ComputeNode::Constructor
//       Access: Published
//  Description: Creates a ComputeNode with the given name.  Use
//               add_dispatch and  also assign a shader using a
//               ShaderAttrib.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ComputeNode::Copy Constructor
//       Access: Protected
//  Description:
////////////////////////////////////////////////////////////////////
45
ComputeNode::ComputeNode(string const &name);

174 12 add_dispatch 0 4 322 25 ComputeNode::add_dispatch 0 2 19 20 906
////////////////////////////////////////////////////////////////////
//     Function: ComputeNode::add_dispatch
//       Access: Published
//  Description: Adds a dispatch command with the given number of
//               work groups in the X, Y, and Z dimensions.  Any
//               of these values may be set to 1 if the respective
//               dimension should not be used.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ComputeNode::add_dispatch
//       Access: Published
//  Description: Adds a dispatch command with the given number of
//               work groups in the X, Y, and Z dimensions.  Any
//               of these values may be set to 1 if the respective
//               dimension should not be used.
////////////////////////////////////////////////////////////////////
161
inline void ComputeNode::add_dispatch(LVecBase3i const &num_groups);
inline void ComputeNode::add_dispatch(int num_groups_x, int num_groups_y, int num_groups_z);

175 18 get_num_dispatches 0 4 322 31 ComputeNode::get_num_dispatches 0 1 21 320
////////////////////////////////////////////////////////////////////
//     Function: ComputeNode::get_num_dispatches
//       Access: Published
//  Description: Returns the number of times add_dispatch has been
//               called on this object.
////////////////////////////////////////////////////////////////////
55
inline int ComputeNode::get_num_dispatches(void) const;

176 12 get_dispatch 0 4 322 25 ComputeNode::get_dispatch 0 1 22 315
////////////////////////////////////////////////////////////////////
//     Function: ComputeNode::get_dispatch
//       Access: Published
//  Description: Returns the group counts of the nth dispatch
//               associated with this object.
////////////////////////////////////////////////////////////////////
64
inline LVecBase3i const &ComputeNode::get_dispatch(int i) const;

177 16 clear_dispatches 0 4 322 29 ComputeNode::clear_dispatches 0 1 23 259
////////////////////////////////////////////////////////////////////
//     Function: ComputeNode::clear_dispatches
//       Access: Published
//  Description: Removes all dispatch commands.
////////////////////////////////////////////////////////////////////
48
inline void ComputeNode::clear_dispatches(void);

178 14 get_class_type 0 4 322 27 ComputeNode::get_class_type 0 1 24 0
52
static TypeHandle ComputeNode::get_class_type(void);

179 12 ~ComputeNode 0 4 322 25 ComputeNode::~ComputeNode 0 0 0
32
ComputeNode::~ComputeNode(void);

180 15 upcast_to_Light 0 12 324 30 LightLensNode::upcast_to_Light 0 1 32 34
upcast from LightLensNode to Light
44
Light *LightLensNode::upcast_to_Light(void);

181 25 downcast_to_LightLensNode 0 12 318 32 Light::downcast_to_LightLensNode 0 1 33 36
downcast from Light to LightLensNode
54
LightLensNode *Light::downcast_to_LightLensNode(void);

182 16 upcast_to_Camera 0 12 324 31 LightLensNode::upcast_to_Camera 0 1 34 35
upcast from LightLensNode to Camera
46
Camera *LightLensNode::upcast_to_Camera(void);

183 25 downcast_to_LightLensNode 0 12 325 33 Camera::downcast_to_LightLensNode 0 1 35 37
downcast from Camera to LightLensNode
55
LightLensNode *Camera::downcast_to_LightLensNode(void);

184 14 ~LightLensNode 0 6 324 29 LightLensNode::~LightLensNode 0 0 224
////////////////////////////////////////////////////////////////////
//     Function: LightLensNode::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
44
virtual LightLensNode::~LightLensNode(void);

185 16 is_shadow_caster 0 4 324 31 LightLensNode::is_shadow_caster 0 1 25 312
////////////////////////////////////////////////////////////////////
//     Function: LightLensNode::is_shadow_caster
//       Access: Published
//  Description: Returns whether this light is configured to cast
//               shadows or not.
////////////////////////////////////////////////////////////////////
50
inline bool LightLensNode::is_shadow_caster(void);

186 17 set_shadow_caster 0 4 324 32 LightLensNode::set_shadow_caster 0 2 26 27 1202
////////////////////////////////////////////////////////////////////
//     Function: LightLensNode::set_shadow_caster
//       Access: Published
//  Description: Sets the flag indicating whether this light should
//               cast shadows or not. This is the variant without
//               buffer size, meaning that the current buffer size
//               will be kept (512x512 is the default).
//               Note that enabling shadows will require the shader
//               generator to be enabled on the scene.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LightLensNode::set_shadow_caster
//       Access: Published
//  Description: Sets the flag indicating whether this light should
//               cast shadows or not. The xsize and ysize parameters
//               specify the size of the shadow buffer that will be
//               set up, the sort parameter specifies the sort.
//               Note that enabling shadows will require the shader
//               generator to be enabled on the scene.
////////////////////////////////////////////////////////////////////
169
inline void LightLensNode::set_shadow_caster(bool caster);
inline void LightLensNode::set_shadow_caster(bool caster, int buffer_xsize, int buffer_ysize, int sort = -10);

187 17 get_shadow_buffer 0 4 324 32 LightLensNode::get_shadow_buffer 0 1 28 497
////////////////////////////////////////////////////////////////////
//     Function: LightLensNode::get_shadow_buffer
//       Access: Published
//  Description: Returns the buffer that has been constructed for
//               a given GSG, or NULL if no such buffer has (yet)
//               been constructed.  This should be used for
//               debugging only, you will not need to call this
//               normally.
////////////////////////////////////////////////////////////////////
92
inline GraphicsOutputBase *LightLensNode::get_shadow_buffer(GraphicsStateGuardianBase *gsg);

188 6 output 0 6 324 21 LightLensNode::output 0 1 29 316
// We have to explicitly publish these because they resolve the
// multiple inheritance.

////////////////////////////////////////////////////////////////////
//     Function: LightLensNode::output
//       Access: Public, Virtual
//  Description:
////////////////////////////////////////////////////////////////////
55
virtual void LightLensNode::output(ostream &out) const;

189 5 write 0 6 324 20 LightLensNode::write 0 1 30 225
////////////////////////////////////////////////////////////////////
//     Function: LightLensNode::write
//       Access: Public, Virtual
//  Description:
////////////////////////////////////////////////////////////////////
76
virtual void LightLensNode::write(ostream &out, int indent_level = 0) const;

190 14 get_class_type 0 4 324 29 LightLensNode::get_class_type 0 1 31 0
54
static TypeHandle LightLensNode::get_class_type(void);

191 16 DirectionalLight 0 4 326 34 DirectionalLight::DirectionalLight 0 1 36 610
////////////////////////////////////////////////////////////////////
//     Function: DirectionalLight::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: DirectionalLight::Copy Constructor
//       Access: Protected
//  Description: Do not call the copy constructor directly; instead,
//               use make_copy() or copy_subgraph() to make a copy of
//               a node.
////////////////////////////////////////////////////////////////////
55
DirectionalLight::DirectionalLight(string const &name);

192 18 set_specular_color 0 4 326 36 DirectionalLight::set_specular_color 0 1 37 311
////////////////////////////////////////////////////////////////////
//     Function: DirectionalLight::set_specular_color
//       Access: Public
//  Description: Sets the color of specular highlights generated by
//               the light.
////////////////////////////////////////////////////////////////////
70
inline void DirectionalLight::set_specular_color(LColor const &color);

193 9 get_point 0 4 326 27 DirectionalLight::get_point 0 1 38 652
////////////////////////////////////////////////////////////////////
//     Function: DirectionalLight::get_point
//       Access: Public
//  Description: Returns the point in space at which the light is
//               located.  This is local to the coordinate space in
//               which the light is assigned.
//
//               This actually has no bearing on the visual effect of
//               the light, since the light is rendered as if it were
//               infinitely far away.  This is only used to create a
//               visible representation of the light.
////////////////////////////////////////////////////////////////////
62
inline LPoint3 const &DirectionalLight::get_point(void) const;

194 9 set_point 0 4 326 27 DirectionalLight::set_point 0 1 39 278
////////////////////////////////////////////////////////////////////
//     Function: DirectionalLight::set_point
//       Access: Public
//  Description: Sets the point in space at which the light is located.
////////////////////////////////////////////////////////////////////
62
inline void DirectionalLight::set_point(LPoint3 const &point);

195 13 get_direction 0 4 326 31 DirectionalLight::get_direction 0 1 40 382
////////////////////////////////////////////////////////////////////
//     Function: DirectionalLight::get_direction
//       Access: Public
//  Description: Returns the direction in which the light is aimed.
//               This is local to the coordinate space in which the
//               light is assigned.
////////////////////////////////////////////////////////////////////
67
inline LVector3 const &DirectionalLight::get_direction(void) const;

196 13 set_direction 0 4 326 31 DirectionalLight::set_direction 0 1 41 275
////////////////////////////////////////////////////////////////////
//     Function: DirectionalLight::set_direction
//       Access: Public
//  Description: Sets the direction in which the light is aimed.
////////////////////////////////////////////////////////////////////
71
inline void DirectionalLight::set_direction(LVector3 const &direction);

197 14 get_class_type 0 4 326 32 DirectionalLight::get_class_type 0 1 42 0
57
static TypeHandle DirectionalLight::get_class_type(void);

198 17 ~DirectionalLight 0 4 326 35 DirectionalLight::~DirectionalLight 0 0 0
42
DirectionalLight::~DirectionalLight(void);

199 7 LODNode 0 4 327 16 LODNode::LODNode 0 1 43 445
////////////////////////////////////////////////////////////////////
//     Function: LODNode::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LODNode::Copy Constructor
//       Access: Protected
//  Description:
////////////////////////////////////////////////////////////////////
44
inline LODNode::LODNode(string const &name);

200 16 make_default_lod 0 4 327 25 LODNode::make_default_lod 0 1 44 334
////////////////////////////////////////////////////////////////////
//     Function: LODNode::make_default_lod
//       Access: Published, Static
//  Description: Creates a new LODNode of the type specified by the
//               default-lod-type config variable.
////////////////////////////////////////////////////////////////////
74
static PointerTo< LODNode > LODNode::make_default_lod(string const &name);

201 10 add_switch 0 4 327 19 LODNode::add_switch 0 1 45 669
////////////////////////////////////////////////////////////////////
//     Function: LODNode::add_switch
//       Access: Published
//  Description: Adds a switch range to the LODNode.  This implies
//               that the corresponding child node has been parented
//               to the node.
//
//               The sense of in vs. out distances is as if the object
//               were coming towards you from far away: it switches
//               "in" at the far distance, and switches "out" at the
//               close distance.  Thus, "in" should be larger than
//               "out".
////////////////////////////////////////////////////////////////////
65
inline void LODNode::add_switch(PN_stdfloat in, PN_stdfloat out);

202 10 set_switch 0 4 327 19 LODNode::set_switch 0 1 46 320
////////////////////////////////////////////////////////////////////
//     Function: LODNode::set_switch
//       Access: Published
//  Description: Changes the switching range of a particular child of
//               the LODNode.  See add_switch().
////////////////////////////////////////////////////////////////////
76
inline bool LODNode::set_switch(int index, PN_stdfloat in, PN_stdfloat out);

203 14 clear_switches 0 4 327 23 LODNode::clear_switches 0 1 47 389
////////////////////////////////////////////////////////////////////
//     Function: LODNode::clear_switches
//       Access: Published
//  Description: Removes the set of switching ranges for the LODNode,
//               presumably in conjunction with removing all of its
//               children.  See add_switch().
////////////////////////////////////////////////////////////////////
42
inline void LODNode::clear_switches(void);

204 16 get_num_switches 0 4 327 25 LODNode::get_num_switches 0 1 48 443
////////////////////////////////////////////////////////////////////
//     Function: LODNode::get_num_switches
//       Access: Published
//  Description: Returns the number of switch ranges added to the
//               LODNode.  This should correspond to the number of
//               children of the node in order for the LODNode to
//               function correctly.
////////////////////////////////////////////////////////////////////
49
inline int LODNode::get_num_switches(void) const;

205 6 get_in 0 4 327 15 LODNode::get_in 0 1 49 371
////////////////////////////////////////////////////////////////////
//     Function: LODNode::get_in
//       Access: Published
//  Description: Returns the "in" distance of the indicated switch
//               range.  This should be larger than the "out" distance
//               of the same range.
////////////////////////////////////////////////////////////////////
52
inline PN_stdfloat LODNode::get_in(int index) const;

206 7 get_out 0 4 327 16 LODNode::get_out 0 1 50 373
////////////////////////////////////////////////////////////////////
//     Function: LODNode::get_out
//       Access: Published
//  Description: Returns the "out" distance of the indicated switch
//               range.  This should be smaller than the "in" distance
//               of the same range.
////////////////////////////////////////////////////////////////////
53
inline PN_stdfloat LODNode::get_out(int index) const;

207 17 get_lowest_switch 0 4 327 26 LODNode::get_lowest_switch 0 1 51 480
////////////////////////////////////////////////////////////////////
//     Function: LODNode::get_lowest_switch
//       Access: Published
//  Description: Returns the index number of the child with the lowest
//               level of detail; that is, the one that is designed to
//               be seen from the farthest away.  This is usually the
//               first child, but it is not necessarily so.
////////////////////////////////////////////////////////////////////
50
inline int LODNode::get_lowest_switch(void) const;

208 18 get_highest_switch 0 4 327 27 LODNode::get_highest_switch 0 1 52 489
////////////////////////////////////////////////////////////////////
//     Function: LODNode::get_highest_switch
//       Access: Published
//  Description: Returns the index number of the child with the highest
//               level of detail; that is, the one that is designed to
//               be seen from the closest to the camera.  This is
//               usually the last child, but it is not necessarily so.
////////////////////////////////////////////////////////////////////
51
inline int LODNode::get_highest_switch(void) const;

209 12 force_switch 0 4 327 21 LODNode::force_switch 0 1 53 390
////////////////////////////////////////////////////////////////////
//     Function: LODNode::force_switch
//       Access: Published
//  Description: Forces the LODNode to show the indicated level
//               instead of the level that would normally be shown
//               based on the distance from the camera.
////////////////////////////////////////////////////////////////////
45
inline void LODNode::force_switch(int index);

210 18 clear_force_switch 0 4 327 27 LODNode::clear_force_switch 0 1 54 380
////////////////////////////////////////////////////////////////////
//     Function: LODNode::clear_force_switch
//       Access: Published
//  Description: Undoes the effect of a previous call to
//               force_switch() and releases the LODNode to once again
//               display the normal level.
////////////////////////////////////////////////////////////////////
46
inline void LODNode::clear_force_switch(void);

211 13 set_lod_scale 0 4 327 22 LODNode::set_lod_scale 0 1 55 445
//for performance tuning, increasing this value should improve performance
//at the cost of model quality

////////////////////////////////////////////////////////////////////
//     Function: LODNode::set_lod_scale
//       Access: Published
//  Description: Sets the multiplier for lod distances. A higher 
//               value means you'll see farther switchs than normal
////////////////////////////////////////////////////////////////////
54
inline void LODNode::set_lod_scale(PN_stdfloat value);

212 13 get_lod_scale 0 4 327 22 LODNode::get_lod_scale 0 1 56 262
////////////////////////////////////////////////////////////////////
//     Function: LODNode::get_lod_scale
//       Access: Published
//  Description: Returns the multiplier for lod distances
////////////////////////////////////////////////////////////////////
54
inline PN_stdfloat LODNode::get_lod_scale(void) const;

213 10 set_center 0 4 327 19 LODNode::set_center 0 1 57 408
////////////////////////////////////////////////////////////////////
//     Function: LODNode::set_center
//       Access: Published
//  Description: Specifies the center of the LOD.  This is the point
//               that is compared to the camera (in camera space) to
//               determine the particular LOD that should be chosen.
////////////////////////////////////////////////////////////////////
55
inline void LODNode::set_center(LPoint3 const &center);

214 10 get_center 0 4 327 19 LODNode::get_center 0 1 58 406
////////////////////////////////////////////////////////////////////
//     Function: LODNode::get_center
//       Access: Published
//  Description: Returns the center of the LOD.  This is the point
//               that is compared to the camera (in camera space) to
//               determine the particular LOD that should be chosen.
////////////////////////////////////////////////////////////////////
54
inline LPoint3 const &LODNode::get_center(void) const;

215 11 show_switch 0 4 327 20 LODNode::show_switch 0 2 59 60 1818
////////////////////////////////////////////////////////////////////
//     Function: LODNode::show_switch
//       Access: Published
//  Description: This is provided as a debugging aid.  show_switch()
//               will put the LODNode into a special mode where rather
//               than computing and drawing the appropriate level of
//               the LOD, a ring is drawn around the LODNode center
//               indicating the switch distances from the camera for
//               the indicated level, and the geometry of the
//               indicated level is drawn in wireframe.
//
//               Multiple different levels can be visualized this way
//               at once.  Call hide_switch() or hide_all_switches() to
//               undo this mode and restore the LODNode to its normal
//               behavior.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LODNode::show_switch
//       Access: Published
//  Description: This is provided as a debugging aid.  show_switch()
//               will put the LODNode into a special mode where rather
//               than computing and drawing the appropriate level of
//               the LOD, a ring is drawn around the LODNode center
//               indicating the switch distances from the camera for
//               the indicated level, and the geometry of the
//               indicated level is drawn in wireframe.
//
//               Multiple different levels can be visualized this way
//               at once.  Call hide_switch() or hide_all_switches() to
//               undo this mode and restore the LODNode to its normal
//               behavior.
////////////////////////////////////////////////////////////////////
96
void LODNode::show_switch(int index);
void LODNode::show_switch(int index, LColor const &color);

216 11 hide_switch 0 4 327 20 LODNode::hide_switch 0 1 61 262
////////////////////////////////////////////////////////////////////
//     Function: LODNode::hide_switch
//       Access: Published
//  Description: Disables a previous call to show_switch().
////////////////////////////////////////////////////////////////////
37
void LODNode::hide_switch(int index);

217 17 show_all_switches 0 4 327 26 LODNode::show_all_switches 0 1 62 267
////////////////////////////////////////////////////////////////////
//     Function: LODNode::show_all_switches
//       Access: Published
//  Description: Shows all levels in their default colors.
////////////////////////////////////////////////////////////////////
38
void LODNode::show_all_switches(void);

218 17 hide_all_switches 0 4 327 26 LODNode::hide_all_switches 0 1 63 303
////////////////////////////////////////////////////////////////////
//     Function: LODNode::hide_all_switches
//       Access: Published
//  Description: Hides all levels, restoring the LODNode to normal
//               operation.
////////////////////////////////////////////////////////////////////
38
void LODNode::hide_all_switches(void);

219 12 is_any_shown 0 4 327 21 LODNode::is_any_shown 0 1 64 400
////////////////////////////////////////////////////////////////////
//     Function: LODNode::is_any_shown
//       Access: Published
//  Description: Returns true if any switch has been shown with
//               show_switch(), indicating the LODNode is in debug
//               show mode; or false if it is in the normal mode.
////////////////////////////////////////////////////////////////////
46
inline bool LODNode::is_any_shown(void) const;

220 19 verify_child_bounds 0 4 327 28 LODNode::verify_child_bounds 0 1 65 549
////////////////////////////////////////////////////////////////////
//     Function: LODNode::verify_child_bounds
//       Access: Published
//  Description: Returns true if the bounding volumes for the geometry
//               of each fhild node entirely fits within the
//               switch_in radius for that child, or false otherwise.
//               It is almost always a mistake for the geometry of an
//               LOD level to be larger than its switch_in radius.
////////////////////////////////////////////////////////////////////
46
bool LODNode::verify_child_bounds(void) const;

221 14 get_class_type 0 4 327 23 LODNode::get_class_type 0 1 66 0
48
static TypeHandle LODNode::get_class_type(void);

222 8 ~LODNode 0 4 327 17 LODNode::~LODNode 0 0 0
24
LODNode::~LODNode(void);

223 11 FadeLODNode 0 4 328 24 FadeLODNode::FadeLODNode 0 1 67 453
////////////////////////////////////////////////////////////////////
//     Function: FadeLODNode::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: FadeLODNode::Copy Constructor
//       Access: Protected
//  Description:
////////////////////////////////////////////////////////////////////
45
FadeLODNode::FadeLODNode(string const &name);

224 13 set_fade_time 0 4 328 26 FadeLODNode::set_fade_time 0 1 68 270
////////////////////////////////////////////////////////////////////
//     Function: FadeLODNode::set_fade_time
//       Access: Published
//  Description: set the time taken to complete an LOD switch
////////////////////////////////////////////////////////////////////
54
inline void FadeLODNode::set_fade_time(PN_stdfloat t);

225 13 get_fade_time 0 4 328 26 FadeLODNode::get_fade_time 0 1 69 270
////////////////////////////////////////////////////////////////////
//     Function: FadeLODNode::get_fade_time
//       Access: Published
//  Description: get the time taken to complete an LOD switch
////////////////////////////////////////////////////////////////////
58
inline PN_stdfloat FadeLODNode::get_fade_time(void) const;

226 12 set_fade_bin 0 4 328 25 FadeLODNode::set_fade_bin 0 1 70 369
////////////////////////////////////////////////////////////////////
//     Function: FadeLODNode::set_fade_bin
//       Access: Published
//  Description: Specifies the cull bin and draw order that is
//               assigned to the fading part of the geometry during a
//               transition.
////////////////////////////////////////////////////////////////////
67
void FadeLODNode::set_fade_bin(string const &name, int draw_order);

227 17 get_fade_bin_name 0 4 328 30 FadeLODNode::get_fade_bin_name 0 1 71 340
////////////////////////////////////////////////////////////////////
//     Function: FadeLODNode::get_fade_bin_name
//       Access: Published
//  Description: Returns the cull bin that is assigned to the fading
//               part of the geometry during a transition.
////////////////////////////////////////////////////////////////////
64
inline string const &FadeLODNode::get_fade_bin_name(void) const;

228 23 get_fade_bin_draw_order 0 4 328 36 FadeLODNode::get_fade_bin_draw_order 0 1 72 391
////////////////////////////////////////////////////////////////////
//     Function: FadeLODNode::get_fade_bin_draw_order
//       Access: Published
//  Description: Returns the draw order that is assigned (along with
//               the bin name) to the fading part of the geometry
//               during a transition.
////////////////////////////////////////////////////////////////////
60
inline int FadeLODNode::get_fade_bin_draw_order(void) const;

229 23 set_fade_state_override 0 4 328 36 FadeLODNode::set_fade_state_override 0 1 73 460
////////////////////////////////////////////////////////////////////
//     Function: FadeLODNode::set_fade_state_override
//       Access: Published
//  Description: Specifies the override value that is applied to the
//               state changes necessary to apply the fade effect.
//               This should be larger than any attrib overrides on
//               the fading geometry.
////////////////////////////////////////////////////////////////////
56
void FadeLODNode::set_fade_state_override(int override);

230 23 get_fade_state_override 0 4 328 36 FadeLODNode::get_fade_state_override 0 1 74 458
////////////////////////////////////////////////////////////////////
//     Function: FadeLODNode::get_fade_state_override
//       Access: Published
//  Description: Returns the override value that is applied to the
//               state changes necessary to apply the fade effect.
//               This should be larger than any attrib overrides on
//               the fading geometry.
////////////////////////////////////////////////////////////////////
60
inline int FadeLODNode::get_fade_state_override(void) const;

231 14 get_class_type 0 4 328 27 FadeLODNode::get_class_type 0 1 75 0
52
static TypeHandle FadeLODNode::get_class_type(void);

232 12 ~FadeLODNode 0 4 328 25 FadeLODNode::~FadeLODNode 0 0 0
32
FadeLODNode::~FadeLODNode(void);

233 8 get_trav 0 4 329 30 NodeCullCallbackData::get_trav 0 1 76 457
////////////////////////////////////////////////////////////////////
//     Function: NodeCullCallbackData::get_trav
//       Access: Published
//  Description: Returns the CullTraverser in use at the time of the
//               callback.  This object contains data that does not
//               change during the traversal, such as the
//               DisplayRegion and Camera in use.
////////////////////////////////////////////////////////////////////
65
inline CullTraverser *NodeCullCallbackData::get_trav(void) const;

234 8 get_data 0 4 329 30 NodeCullCallbackData::get_data 0 1 77 486
////////////////////////////////////////////////////////////////////
//     Function: NodeCullCallbackData::get_data
//       Access: Published
//  Description: Returns the CullTraverserData in use at the time of the
//               callback.  This object contains data that changes at
//               each node of the traversal, such as the current node
//               and the current net transform to that node.
////////////////////////////////////////////////////////////////////
69
inline CullTraverserData &NodeCullCallbackData::get_data(void) const;

235 14 get_class_type 0 4 329 36 NodeCullCallbackData::get_class_type 0 1 78 0
61
static TypeHandle NodeCullCallbackData::get_class_type(void);

236 21 ~NodeCullCallbackData 0 4 329 43 NodeCullCallbackData::~NodeCullCallbackData 0 0 0
50
NodeCullCallbackData::~NodeCullCallbackData(void);

237 10 PointLight 0 4 331 22 PointLight::PointLight 0 1 79 598
////////////////////////////////////////////////////////////////////
//     Function: PointLight::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PointLight::Copy Constructor
//       Access: Protected
//  Description: Do not call the copy constructor directly; instead,
//               use make_copy() or copy_subgraph() to make a copy of
//               a node.
////////////////////////////////////////////////////////////////////
43
PointLight::PointLight(string const &name);

238 18 set_specular_color 0 4 331 30 PointLight::set_specular_color 0 1 80 305
////////////////////////////////////////////////////////////////////
//     Function: PointLight::set_specular_color
//       Access: Public
//  Description: Sets the color of specular highlights generated by
//               the light.
////////////////////////////////////////////////////////////////////
64
inline void PointLight::set_specular_color(LColor const &color);

239 15 set_attenuation 0 4 331 27 PointLight::set_attenuation 0 1 81 448
////////////////////////////////////////////////////////////////////
//     Function: PointLight::set_attenuation
//       Access: Public
//  Description: Sets the terms of the attenuation equation for the
//               light.  These are, in order, the constant, linear,
//               and quadratic terms based on the distance from the
//               point to the vertex.
////////////////////////////////////////////////////////////////////
70
inline void PointLight::set_attenuation(LVecBase3 const &attenuation);

240 9 get_point 0 4 331 21 PointLight::get_point 0 1 82 380
////////////////////////////////////////////////////////////////////
//     Function: PointLight::get_point
//       Access: Public
//  Description: Returns the point in space at which the light is
//               located.  This is local to the coordinate space in
//               which the light is assigned.
////////////////////////////////////////////////////////////////////
56
inline LPoint3 const &PointLight::get_point(void) const;

241 9 set_point 0 4 331 21 PointLight::set_point 0 1 83 272
////////////////////////////////////////////////////////////////////
//     Function: PointLight::set_point
//       Access: Public
//  Description: Sets the point in space at which the light is located.
////////////////////////////////////////////////////////////////////
56
inline void PointLight::set_point(LPoint3 const &point);

242 14 get_class_type 0 4 331 26 PointLight::get_class_type 0 1 84 0
51
static TypeHandle PointLight::get_class_type(void);

243 11 ~PointLight 0 4 331 23 PointLight::~PointLight 0 0 0
30
PointLight::~PointLight(void);

244 18 SelectiveChildNode 0 4 332 38 SelectiveChildNode::SelectiveChildNode 0 1 85 464
////////////////////////////////////////////////////////////////////
//     Function: SelectiveChildNode::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: SelectiveChildNode::Copy Constructor
//       Access: Protected
//  Description:
////////////////////////////////////////////////////////////////////
66
inline SelectiveChildNode::SelectiveChildNode(string const &name);

245 14 get_class_type 0 4 332 34 SelectiveChildNode::get_class_type 0 1 86 0
59
static TypeHandle SelectiveChildNode::get_class_type(void);

246 19 ~SelectiveChildNode 0 4 332 39 SelectiveChildNode::~SelectiveChildNode 0 0 0
46
SelectiveChildNode::~SelectiveChildNode(void);

247 28 upcast_to_SelectiveChildNode 0 12 333 42 SequenceNode::upcast_to_SelectiveChildNode 0 1 91 46
upcast from SequenceNode to SelectiveChildNode
69
SelectiveChildNode *SequenceNode::upcast_to_SelectiveChildNode(void);

248 24 downcast_to_SequenceNode 0 12 332 44 SelectiveChildNode::downcast_to_SequenceNode 0 1 92 48
downcast from SelectiveChildNode to SequenceNode
65
SequenceNode *SelectiveChildNode::downcast_to_SequenceNode(void);

249 23 upcast_to_AnimInterface 0 12 333 37 SequenceNode::upcast_to_AnimInterface 0 1 93 41
upcast from SequenceNode to AnimInterface
59
AnimInterface *SequenceNode::upcast_to_AnimInterface(void);

250 24 downcast_to_SequenceNode 0 12 334 39 AnimInterface::downcast_to_SequenceNode 0 1 94 43
downcast from AnimInterface to SequenceNode
60
SequenceNode *AnimInterface::downcast_to_SequenceNode(void);

251 12 SequenceNode 0 4 333 26 SequenceNode::SequenceNode 0 1 87 455
////////////////////////////////////////////////////////////////////
//     Function: SequenceNode::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: SequenceNode::Copy Constructor
//       Access: Protected
//  Description:
////////////////////////////////////////////////////////////////////
54
inline SequenceNode::SequenceNode(string const &name);

252 14 get_num_frames 0 6 333 28 SequenceNode::get_num_frames 0 1 88 580
////////////////////////////////////////////////////////////////////
//     Function: SequenceNode::get_num_frames
//       Access: Published, Virtual
//  Description: Returns the number of frames in the animation.  This
//               is a property of the animation and may not be
//               directly adjusted by the user (although it may change
//               without warning with certain kinds of animations,
//               since this is a virtual method that may be
//               overridden).
////////////////////////////////////////////////////////////////////
53
virtual int SequenceNode::get_num_frames(void) const;

253 14 set_frame_rate 0 4 333 28 SequenceNode::set_frame_rate 0 1 89 435
////////////////////////////////////////////////////////////////////
//     Function: SequenceNode::set_frame_rate
//       Access: Published
//  Description: Changes the advertised frame rate of the
//               SequenceNode.  This can be used in conjunction with
//               get_play_rate() to change the effective frame rate of
//               the node.
////////////////////////////////////////////////////////////////////
60
inline void SequenceNode::set_frame_rate(double frame_rate);

254 14 get_class_type 0 4 333 28 SequenceNode::get_class_type 0 1 90 0
53
static TypeHandle SequenceNode::get_class_type(void);

255 13 ~SequenceNode 0 4 333 27 SequenceNode::~SequenceNode 0 0 0
34
SequenceNode::~SequenceNode(void);

256 15 ShaderGenerator 0 4 335 32 ShaderGenerator::ShaderGenerator 0 1 95 450
////////////////////////////////////////////////////////////////////
//     Function: ShaderGenerator::Constructor
//       Access: Published
//  Description: Create a ShaderGenerator.  This has no state,
//               except possibly to cache certain results.
//               The parameter that must be passed is the GSG to
//               which the shader generator belongs.
////////////////////////////////////////////////////////////////////
91
ShaderGenerator::ShaderGenerator(GraphicsStateGuardianBase *gsg, GraphicsOutputBase *host);

257 17 synthesize_shader 0 6 335 34 ShaderGenerator::synthesize_shader 0 1 96 1448
////////////////////////////////////////////////////////////////////
//     Function: ShaderGenerator::synthesize_shader
//       Access: Published, Virtual
//  Description: This is the routine that implements the next-gen
//               fixed function pipeline by synthesizing a shader.
//               It also takes care of setting up any buffers
//               needed to produce the requested effects.
//
//               Currently supports:
//               - flat colors
//               - vertex colors
//               - lighting
//               - normal maps, but not multiple
//               - gloss maps, but not multiple
//               - glow maps, but not multiple
//               - materials, but not updates to materials
//               - 2D textures
//               - all texture stage modes, including combine modes
//               - color scale attrib
//               - light ramps (for cartoon shading)
//               - shadow mapping
//               - most texgen modes
//               - texmatrix
//               - 1D/2D/3D textures, cube textures, 2D tex arrays
//               - linear/exp/exp2 fog
//               - animation
//
//               Not yet supported:
//               - dot3_rgb and dot3_rgba combine modes
//
//               Potential optimizations
//               - omit attenuation calculations if attenuation off
//
////////////////////////////////////////////////////////////////////
134
virtual ConstPointerTo< ShaderAttrib > ShaderGenerator::synthesize_shader(RenderState const *rs, GeomVertexAnimationSpec const &anim);

258 14 get_class_type 0 4 335 31 ShaderGenerator::get_class_type 0 1 97 0
56
static TypeHandle ShaderGenerator::get_class_type(void);

259 9 Spotlight 0 4 337 20 Spotlight::Spotlight 0 1 98 596
////////////////////////////////////////////////////////////////////
//     Function: Spotlight::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Spotlight::Copy Constructor
//       Access: Protected
//  Description: Do not call the copy constructor directly; instead,
//               use make_copy() or copy_subgraph() to make a copy of
//               a node.
////////////////////////////////////////////////////////////////////
41
Spotlight::Spotlight(string const &name);

260 12 set_exponent 0 4 337 23 Spotlight::set_exponent 0 1 99 693
////////////////////////////////////////////////////////////////////
//     Function: Spotlight::set_exponent
//       Access: Public
//  Description: Sets the exponent that controls the amount of light
//               falloff from the center of the spotlight.  The light
//               is attenuated by the cosine of the angle between the
//               direction of the light and the direction of the point
//               being lighted, raised to the power of this exponent.
//               Thus, higher exponents result in a more focused light
//               source, regardless of the field-of-view of the lens.
////////////////////////////////////////////////////////////////////
58
inline void Spotlight::set_exponent(PN_stdfloat exponent);

261 18 set_specular_color 0 4 337 29 Spotlight::set_specular_color 0 1 100 304
////////////////////////////////////////////////////////////////////
//     Function: Spotlight::set_specular_color
//       Access: Public
//  Description: Sets the color of specular highlights generated by
//               the light.
////////////////////////////////////////////////////////////////////
63
inline void Spotlight::set_specular_color(LColor const &color);

262 15 set_attenuation 0 4 337 26 Spotlight::set_attenuation 0 1 101 447
////////////////////////////////////////////////////////////////////
//     Function: Spotlight::set_attenuation
//       Access: Public
//  Description: Sets the terms of the attenuation equation for the
//               light.  These are, in order, the constant, linear,
//               and quadratic terms based on the distance from the
//               point to the vertex.
////////////////////////////////////////////////////////////////////
69
inline void Spotlight::set_attenuation(LVecBase3 const &attenuation);

263 9 make_spot 0 4 337 20 Spotlight::make_spot 0 1 102 1015
////////////////////////////////////////////////////////////////////
//     Function: Spotlight::make_spot
//       Access: Published, Static
//  Description: Returns a newly-generated Texture that renders a
//               circular spot image as might be cast from the
//               spotlight.  This may be projected onto target
//               geometry (for instance, via
//               NodePath::project_texture()) instead of actually
//               enabling the light itself, as a cheesy way to make a
//               high-resolution spot appear on the geometry.
//
//               pixel_width specifies the height and width of the new
//               texture in pixels, full_radius is a value in the
//               range 0..1 that indicates the relative size of the
//               fully bright center spot, and fg and bg are the
//               colors of the interior and exterior of the spot,
//               respectively.
////////////////////////////////////////////////////////////////////
115
static PointerTo< Texture > Spotlight::make_spot(int pixel_width, PN_stdfloat full_radius, LColor &fg, LColor &bg);

264 14 get_class_type 0 4 337 25 Spotlight::get_class_type 0 1 103 0
50
static TypeHandle Spotlight::get_class_type(void);

265 10 ~Spotlight 0 4 337 21 Spotlight::~Spotlight 0 0 0
28
Spotlight::~Spotlight(void);

266 10 SwitchNode 0 4 338 22 SwitchNode::SwitchNode 0 1 104 451
////////////////////////////////////////////////////////////////////
//     Function: SwitchNode::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: SwitchNode::Copy Constructor
//       Access: Protected
//  Description:
////////////////////////////////////////////////////////////////////
50
inline SwitchNode::SwitchNode(string const &name);

267 17 set_visible_child 0 4 338 29 SwitchNode::set_visible_child 0 1 105 322
////////////////////////////////////////////////////////////////////
//     Function: SwitchNode::set_visible_child
//       Access: Published
//  Description: Specifies the particular child of this node, by
//               index, that will be visible.
////////////////////////////////////////////////////////////////////
53
inline void SwitchNode::set_visible_child(int index);

268 17 get_visible_child 0 6 338 29 SwitchNode::get_visible_child 0 1 106 292
////////////////////////////////////////////////////////////////////
//     Function: SwitchNode::get_visible_child
//       Access: Published, Virtual
//  Description: Returns the index of the child that should be visible.
////////////////////////////////////////////////////////////////////
54
virtual int SwitchNode::get_visible_child(void) const;

269 14 get_class_type 0 4 338 26 SwitchNode::get_class_type 0 1 107 0
51
static TypeHandle SwitchNode::get_class_type(void);

270 11 ~SwitchNode 0 4 338 23 SwitchNode::~SwitchNode 0 0 0
30
SwitchNode::~SwitchNode(void);

271 12 UvScrollNode 0 4 339 26 UvScrollNode::UvScrollNode 0 2 108 109 675
////////////////////////////////////////////////////////////////////
//     Function: UvScrollNode::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: UvScrollNode::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: UvScrollNode::Copy Constructor
//       Access: Protected
//  Description:
////////////////////////////////////////////////////////////////////
193
inline UvScrollNode::UvScrollNode(string const &name, PN_stdfloat u_speed, PN_stdfloat v_speed, PN_stdfloat w_speed, PN_stdfloat r_speed);
inline UvScrollNode::UvScrollNode(string const &name);

272 11 set_u_speed 0 4 339 25 UvScrollNode::set_u_speed 0 1 110 224
////////////////////////////////////////////////////////////////////
//     Function: UvScrollNode::set_u_speed
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
59
inline void UvScrollNode::set_u_speed(PN_stdfloat u_speed);

273 11 set_v_speed 0 4 339 25 UvScrollNode::set_v_speed 0 1 111 224
////////////////////////////////////////////////////////////////////
//     Function: UvScrollNode::set_v_speed
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
59
inline void UvScrollNode::set_v_speed(PN_stdfloat v_speed);

274 11 set_w_speed 0 4 339 25 UvScrollNode::set_w_speed 0 1 112 224
////////////////////////////////////////////////////////////////////
//     Function: UvScrollNode::set_w_speed
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
59
inline void UvScrollNode::set_w_speed(PN_stdfloat w_speed);

275 11 set_r_speed 0 4 339 25 UvScrollNode::set_r_speed 0 1 113 224
////////////////////////////////////////////////////////////////////
//     Function: UvScrollNode::set_r_speed
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
59
inline void UvScrollNode::set_r_speed(PN_stdfloat r_speed);

276 11 get_u_speed 0 4 339 25 UvScrollNode::get_u_speed 0 1 114 225
////////////////////////////////////////////////////////////////////
//     Function: UvSctrollNode::get_u_speed
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
57
inline PN_stdfloat UvScrollNode::get_u_speed(void) const;

277 11 get_v_speed 0 4 339 25 UvScrollNode::get_v_speed 0 1 115 224
////////////////////////////////////////////////////////////////////
//     Function: UvScrollNode::get_v_speed
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
57
inline PN_stdfloat UvScrollNode::get_v_speed(void) const;

278 11 get_w_speed 0 4 339 25 UvScrollNode::get_w_speed 0 1 116 224
////////////////////////////////////////////////////////////////////
//     Function: UvScrollNode::get_w_speed
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
57
inline PN_stdfloat UvScrollNode::get_w_speed(void) const;

279 11 get_r_speed 0 4 339 25 UvScrollNode::get_r_speed 0 1 117 225
////////////////////////////////////////////////////////////////////
//     Function: UvSctrollNode::get_r_speed
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
57
inline PN_stdfloat UvScrollNode::get_r_speed(void) const;

280 14 get_class_type 0 4 339 28 UvScrollNode::get_class_type 0 1 118 0
53
static TypeHandle UvScrollNode::get_class_type(void);

281 13 ~UvScrollNode 0 4 339 27 UvScrollNode::~UvScrollNode 0 0 0
34
UvScrollNode::~UvScrollNode(void);

282 18 SceneGraphAnalyzer 0 4 340 38 SceneGraphAnalyzer::SceneGraphAnalyzer 0 1 119 230
////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
45
SceneGraphAnalyzer::SceneGraphAnalyzer(void);

283 19 ~SceneGraphAnalyzer 0 4 340 39 SceneGraphAnalyzer::~SceneGraphAnalyzer 0 0 229
////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
46
SceneGraphAnalyzer::~SceneGraphAnalyzer(void);

284 12 set_lod_mode 0 4 340 32 SceneGraphAnalyzer::set_lod_mode 0 1 120 282
////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::set_lod_mode
//       Access: Published
//  Description: Specifies the mode in which LODNodes are analyzed.
////////////////////////////////////////////////////////////////////
83
inline void SceneGraphAnalyzer::set_lod_mode(SceneGraphAnalyzer::LodMode lod_mode);

285 12 get_lod_mode 0 4 340 32 SceneGraphAnalyzer::get_lod_mode 0 1 121 280
////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::get_lod_mode
//       Access: Published
//  Description: Returns the mode in which LODNodes are analyzed.
////////////////////////////////////////////////////////////////////
112
inline SceneGraphAnalyzer::LodMode SceneGraphAnalyzer::get_lod_mode(SceneGraphAnalyzer::LodMode lod_mode) const;

286 5 clear 0 4 340 25 SceneGraphAnalyzer::clear 0 1 122 310
////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::clear
//       Access: Published
//  Description: Resets all of the data in the analyzer in preparation
//               for a new run.
////////////////////////////////////////////////////////////////////
37
void SceneGraphAnalyzer::clear(void);

287 8 add_node 0 4 340 28 SceneGraphAnalyzer::add_node 0 1 123 522
////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::add_node
//       Access: Published
//  Description: Adds a new node to the set of data for analysis.
//               Normally, this would only be called once, and passed
//               the top of the scene graph, but it's possible to
//               repeatedly pass in subgraphs to get an analysis of
//               all the graphs together.
////////////////////////////////////////////////////////////////////
51
void SceneGraphAnalyzer::add_node(PandaNode *node);

288 5 write 0 4 340 25 SceneGraphAnalyzer::write 0 1 124 258
////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::write
//       Access: Published
//  Description: Describes all the data collected.
////////////////////////////////////////////////////////////////////
73
void SceneGraphAnalyzer::write(ostream &out, int indent_level = 0) const;

289 13 get_num_nodes 0 4 340 33 SceneGraphAnalyzer::get_num_nodes 0 1 125 233
////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::get_num_nodes
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
57
inline int SceneGraphAnalyzer::get_num_nodes(void) const;

290 17 get_num_instances 0 4 340 37 SceneGraphAnalyzer::get_num_instances 0 1 126 237
////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::get_num_instances
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
61
inline int SceneGraphAnalyzer::get_num_instances(void) const;

291 18 get_num_transforms 0 4 340 38 SceneGraphAnalyzer::get_num_transforms 0 1 127 238
////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::get_num_transforms
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
62
inline int SceneGraphAnalyzer::get_num_transforms(void) const;

292 26 get_num_nodes_with_attribs 0 4 340 46 SceneGraphAnalyzer::get_num_nodes_with_attribs 0 1 128 246
////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::get_num_nodes_with_attribs
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
70
inline int SceneGraphAnalyzer::get_num_nodes_with_attribs(void) const;

293 17 get_num_lod_nodes 0 4 340 37 SceneGraphAnalyzer::get_num_lod_nodes 0 1 129 237
////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::get_num_lod_nodes
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
61
inline int SceneGraphAnalyzer::get_num_lod_nodes(void) const;

294 18 get_num_geom_nodes 0 4 340 38 SceneGraphAnalyzer::get_num_geom_nodes 0 1 130 238
////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::get_num_geom_nodes
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
62
inline int SceneGraphAnalyzer::get_num_geom_nodes(void) const;

295 13 get_num_geoms 0 4 340 33 SceneGraphAnalyzer::get_num_geoms 0 1 131 233
////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::get_num_geoms
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
57
inline int SceneGraphAnalyzer::get_num_geoms(void) const;

296 25 get_num_geom_vertex_datas 0 4 340 45 SceneGraphAnalyzer::get_num_geom_vertex_datas 0 1 132 245
////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::get_num_geom_vertex_datas
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
69
inline int SceneGraphAnalyzer::get_num_geom_vertex_datas(void) const;

297 27 get_num_geom_vertex_formats 0 4 340 47 SceneGraphAnalyzer::get_num_geom_vertex_formats 0 1 133 247
////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::get_num_geom_vertex_formats
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
71
inline int SceneGraphAnalyzer::get_num_geom_vertex_formats(void) const;

298 20 get_vertex_data_size 0 4 340 40 SceneGraphAnalyzer::get_vertex_data_size 0 1 134 240
////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::get_vertex_data_size
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
64
inline int SceneGraphAnalyzer::get_vertex_data_size(void) const;

299 16 get_num_vertices 0 4 340 36 SceneGraphAnalyzer::get_num_vertices 0 1 135 236
////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::get_num_vertices
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
60
inline int SceneGraphAnalyzer::get_num_vertices(void) const;

300 15 get_num_normals 0 4 340 35 SceneGraphAnalyzer::get_num_normals 0 1 136 235
////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::get_num_normals
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
59
inline int SceneGraphAnalyzer::get_num_normals(void) const;

301 14 get_num_colors 0 4 340 34 SceneGraphAnalyzer::get_num_colors 0 1 137 234
////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::get_num_colors
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
58
inline int SceneGraphAnalyzer::get_num_colors(void) const;

302 17 get_num_texcoords 0 4 340 37 SceneGraphAnalyzer::get_num_texcoords 0 1 138 237
////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::get_num_texcoords
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
61
inline int SceneGraphAnalyzer::get_num_texcoords(void) const;

303 12 get_num_tris 0 4 340 32 SceneGraphAnalyzer::get_num_tris 0 1 139 232
////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::get_num_tris
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
56
inline int SceneGraphAnalyzer::get_num_tris(void) const;

304 13 get_num_lines 0 4 340 33 SceneGraphAnalyzer::get_num_lines 0 1 140 233
////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::get_num_lines
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
57
inline int SceneGraphAnalyzer::get_num_lines(void) const;

305 14 get_num_points 0 4 340 34 SceneGraphAnalyzer::get_num_points 0 1 141 234
////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::get_num_points
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
58
inline int SceneGraphAnalyzer::get_num_points(void) const;

306 15 get_num_patches 0 4 340 35 SceneGraphAnalyzer::get_num_patches 0 1 142 235
////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::get_num_patches
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
59
inline int SceneGraphAnalyzer::get_num_patches(void) const;

307 23 get_num_individual_tris 0 4 340 43 SceneGraphAnalyzer::get_num_individual_tris 0 1 143 243
////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::get_num_individual_tris
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
67
inline int SceneGraphAnalyzer::get_num_individual_tris(void) const;

308 17 get_num_tristrips 0 4 340 37 SceneGraphAnalyzer::get_num_tristrips 0 1 144 237
////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::get_num_tristrips
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
61
inline int SceneGraphAnalyzer::get_num_tristrips(void) const;

309 27 get_num_triangles_in_strips 0 4 340 47 SceneGraphAnalyzer::get_num_triangles_in_strips 0 1 145 247
////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::get_num_triangles_in_strips
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
71
inline int SceneGraphAnalyzer::get_num_triangles_in_strips(void) const;

310 15 get_num_trifans 0 4 340 35 SceneGraphAnalyzer::get_num_trifans 0 1 146 235
////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::get_num_trifans
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
59
inline int SceneGraphAnalyzer::get_num_trifans(void) const;

311 25 get_num_triangles_in_fans 0 4 340 45 SceneGraphAnalyzer::get_num_triangles_in_fans 0 1 147 245
////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::get_num_triangles_in_fans
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
69
inline int SceneGraphAnalyzer::get_num_triangles_in_fans(void) const;

312 27 get_num_vertices_in_patches 0 4 340 47 SceneGraphAnalyzer::get_num_vertices_in_patches 0 1 148 247
////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::get_num_vertices_in_patches
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
71
inline int SceneGraphAnalyzer::get_num_vertices_in_patches(void) const;

313 17 get_texture_bytes 0 4 340 37 SceneGraphAnalyzer::get_texture_bytes 0 1 149 237
////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::get_texture_bytes
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
61
inline int SceneGraphAnalyzer::get_texture_bytes(void) const;

314 20 get_num_long_normals 0 4 340 40 SceneGraphAnalyzer::get_num_long_normals 0 1 150 240
////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::get_num_long_normals
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
64
inline int SceneGraphAnalyzer::get_num_long_normals(void) const;

315 21 get_num_short_normals 0 4 340 41 SceneGraphAnalyzer::get_num_short_normals 0 1 151 241
////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::get_num_short_normals
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
65
inline int SceneGraphAnalyzer::get_num_short_normals(void) const;

316 23 get_total_normal_length 0 4 340 43 SceneGraphAnalyzer::get_total_normal_length 0 1 152 243
////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::get_total_normal_length
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
75
inline PN_stdfloat SceneGraphAnalyzer::get_total_normal_length(void) const;

152
1 0 0 4 8 346 0 0 222 ////////////////////////////////////////////////////////////////////
//     Function: LightNode::output
//       Access: Public, Virtual
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 342  3 out 1 344  
2 0 0 4 9 346 0 0 221 ////////////////////////////////////////////////////////////////////
//     Function: LightNode::write
//       Access: Public, Virtual
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 342  3 out 1 344  12 indent_level 1 347  
3 0 0 7 10 349 0 0 0 0 
4 0 0 6 3 351 0 0 0 1 4 this 3 350  
5 0 0 7 4 350 160 0 0 1 4 this 3 351  
6 0 0 7 6 352 0 0 0 1 4 this 3 350  
7 0 0 7 7 350 160 0 0 1 4 this 3 352  
8 0 0 7 13 354 163 0 224 ////////////////////////////////////////////////////////////////////
//     Function: AmbientLight::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 name 1 353  
9 0 0 7 14 349 0 0 0 0 
10 0 0 7 17 355 172 0 224 ////////////////////////////////////////////////////////////////////
//     Function: CallbackNode::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 name 1 353  
11 0 0 4 18 346 0 0 1677 ////////////////////////////////////////////////////////////////////
//     Function: CallbackNode::set_cull_callback
//       Access: Published
//  Description: Sets the CallbackObject that will be notified when
//               this node is visited during the cull traversal.  This
//               callback will be made during the cull thread.
//
//               The cull traversal is responsible for determining
//               which nodes are visible and within the view frustum,
//               and for accumulating state and transform, and
//               generally building up the list of CullableObjects
//               that are to be eventually passed to the draw
//               traversal for rendering.
//
//               At the time the cull traversal callback is made, the
//               node has been determined to be visible and it has
//               passed the bounding-volume test, so it lies within
//               the view frustum.
//
//               The callback is passed an instance of a
//               NodeCullCallbackData, which contains pointers to the
//               CullTraverser and CullTraverserData--enough data to
//               examine the current node and its place within the
//               scene graph.  The callback *replaces* the normal cull
//               behavior, so if your callback does nothing, the cull
//               traversal will not continue below this node.  If you
//               wish the cull traversal to continue to visit this
//               node and below, you must call cbdata->upcall()
//               from your callback.
//////////////////////////////////////////////////////////////////// 2 4 this 3 355  6 object 1 356  
12 0 0 4 19 346 0 0 317 ////////////////////////////////////////////////////////////////////
//     Function: CallbackNode::clear_cull_callback
//       Access: Published
//  Description: Removes the callback set by an earlier call to
//               set_cull_callback().
//////////////////////////////////////////////////////////////////// 1 4 this 3 355  
13 0 0 7 20 356 0 0 285 ////////////////////////////////////////////////////////////////////
//     Function: CallbackNode::get_cull_callback
//       Access: Published
//  Description: Returns the CallbackObject set by set_cull_callback().
//////////////////////////////////////////////////////////////////// 1 4 this 3 358  
14 0 0 4 21 346 0 0 1477 ////////////////////////////////////////////////////////////////////
//     Function: CallbackNode::set_draw_callback
//       Access: Published
//  Description: Sets the CallbackObject that will be notified when
//               this node is visited during the draw traversal.  This
//               callback will be made during the draw thread.
//
//               The draw traversal is responsible for actually
//               issuing the commands to the graphics engine to draw
//               primitives.  Its job is to walk through the list of
//               CullableObjects build up by the cull traversal, as
//               quickly as possible, issuing the appropriate commands
//               to draw each one.
//
//               At the time the draw traversal callback is made, the
//               graphics state has been loaded with the correct
//               modelview transform and render state, and the
//               primitives (if any) in this node are ready to be
//               drawn.
//
//               The callback is passed an instance of a
//               GeomDrawCallbackData, which contains pointers to the
//               current state and transform, as well as the current
//               GSG.  There is a Geom pointer as well, but it will
//               always be NULL to this callback, since the
//               CallbackNode does not itself contain any Geoms.
//////////////////////////////////////////////////////////////////// 2 4 this 3 355  6 object 1 356  
15 0 0 4 22 346 0 0 317 ////////////////////////////////////////////////////////////////////
//     Function: CallbackNode::clear_draw_callback
//       Access: Published
//  Description: Removes the callback set by an earlier call to
//               set_draw_callback().
//////////////////////////////////////////////////////////////////// 1 4 this 3 355  
16 0 0 7 23 356 0 0 285 ////////////////////////////////////////////////////////////////////
//     Function: CallbackNode::get_draw_callback
//       Access: Published
//  Description: Returns the CallbackObject set by set_draw_callback().
//////////////////////////////////////////////////////////////////// 1 4 this 3 358  
17 0 0 7 24 349 0 0 0 0 
18 0 0 7 27 360 179 0 366 ////////////////////////////////////////////////////////////////////
//     Function: ComputeNode::Constructor
//       Access: Published
//  Description: Creates a ComputeNode with the given name.  Use
//               add_dispatch and  also assign a shader using a
//               ShaderAttrib.
//////////////////////////////////////////////////////////////////// 1 4 name 1 353  
19 0 0 4 28 346 0 0 452 ////////////////////////////////////////////////////////////////////
//     Function: ComputeNode::add_dispatch
//       Access: Published
//  Description: Adds a dispatch command with the given number of
//               work groups in the X, Y, and Z dimensions.  Any
//               of these values may be set to 1 if the respective
//               dimension should not be used.
//////////////////////////////////////////////////////////////////// 2 4 this 3 360  10 num_groups 1 361  
20 0 0 4 28 346 0 0 452 ////////////////////////////////////////////////////////////////////
//     Function: ComputeNode::add_dispatch
//       Access: Published
//  Description: Adds a dispatch command with the given number of
//               work groups in the X, Y, and Z dimensions.  Any
//               of these values may be set to 1 if the respective
//               dimension should not be used.
//////////////////////////////////////////////////////////////////// 4 4 this 3 360  12 num_groups_x 1 347  12 num_groups_y 1 347  12 num_groups_z 1 347  
21 0 0 6 29 347 0 0 320 ////////////////////////////////////////////////////////////////////
//     Function: ComputeNode::get_num_dispatches
//       Access: Published
//  Description: Returns the number of times add_dispatch has been
//               called on this object.
//////////////////////////////////////////////////////////////////// 1 4 this 3 364  
22 0 0 6 30 361 0 0 315 ////////////////////////////////////////////////////////////////////
//     Function: ComputeNode::get_dispatch
//       Access: Published
//  Description: Returns the group counts of the nth dispatch
//               associated with this object.
//////////////////////////////////////////////////////////////////// 2 4 this 3 364  1 i 1 347  
23 0 0 4 31 346 0 0 259 ////////////////////////////////////////////////////////////////////
//     Function: ComputeNode::clear_dispatches
//       Access: Published
//  Description: Removes all dispatch commands.
//////////////////////////////////////////////////////////////////// 1 4 this 3 360  
24 0 0 7 32 349 0 0 0 0 
25 0 0 6 42 367 0 0 312 ////////////////////////////////////////////////////////////////////
//     Function: LightLensNode::is_shadow_caster
//       Access: Published
//  Description: Returns whether this light is configured to cast
//               shadows or not.
//////////////////////////////////////////////////////////////////// 1 4 this 3 366  
26 0 0 4 43 346 0 0 594 ////////////////////////////////////////////////////////////////////
//     Function: LightLensNode::set_shadow_caster
//       Access: Published
//  Description: Sets the flag indicating whether this light should
//               cast shadows or not. This is the variant without
//               buffer size, meaning that the current buffer size
//               will be kept (512x512 is the default).
//               Note that enabling shadows will require the shader
//               generator to be enabled on the scene.
//////////////////////////////////////////////////////////////////// 2 4 this 3 366  6 caster 1 367  
27 0 0 4 43 346 0 0 606 ////////////////////////////////////////////////////////////////////
//     Function: LightLensNode::set_shadow_caster
//       Access: Published
//  Description: Sets the flag indicating whether this light should
//               cast shadows or not. The xsize and ysize parameters
//               specify the size of the shadow buffer that will be
//               set up, the sort parameter specifies the sort.
//               Note that enabling shadows will require the shader
//               generator to be enabled on the scene.
//////////////////////////////////////////////////////////////////// 5 4 this 3 366  6 caster 1 367  12 buffer_xsize 1 347  12 buffer_ysize 1 347  4 sort 1 347  
28 0 0 7 44 371 0 0 497 ////////////////////////////////////////////////////////////////////
//     Function: LightLensNode::get_shadow_buffer
//       Access: Published
//  Description: Returns the buffer that has been constructed for
//               a given GSG, or NULL if no such buffer has (yet)
//               been constructed.  This should be used for
//               debugging only, you will not need to call this
//               normally.
//////////////////////////////////////////////////////////////////// 2 4 this 3 366  3 gsg 1 369  
29 0 0 4 45 346 0 0 226 ////////////////////////////////////////////////////////////////////
//     Function: LightLensNode::output
//       Access: Public, Virtual
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 372  3 out 1 344  
30 0 0 4 46 346 0 0 225 ////////////////////////////////////////////////////////////////////
//     Function: LightLensNode::write
//       Access: Public, Virtual
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 372  3 out 1 344  12 indent_level 1 347  
31 0 0 7 47 349 0 0 0 0 
32 0 0 6 36 351 0 0 0 1 4 this 3 366  
33 0 0 7 37 366 184 0 0 1 4 this 3 351  
34 0 0 7 39 374 0 0 0 1 4 this 3 366  
35 0 0 7 40 366 184 0 0 1 4 this 3 374  
36 0 0 7 49 375 198 0 228 ////////////////////////////////////////////////////////////////////
//     Function: DirectionalLight::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 name 1 353  
37 0 0 4 50 346 0 0 311 ////////////////////////////////////////////////////////////////////
//     Function: DirectionalLight::set_specular_color
//       Access: Public
//  Description: Sets the color of specular highlights generated by
//               the light.
//////////////////////////////////////////////////////////////////// 2 4 this 3 375  5 color 1 376  
38 0 0 6 51 383 0 0 652 ////////////////////////////////////////////////////////////////////
//     Function: DirectionalLight::get_point
//       Access: Public
//  Description: Returns the point in space at which the light is
//               located.  This is local to the coordinate space in
//               which the light is assigned.
//
//               This actually has no bearing on the visual effect of
//               the light, since the light is rendered as if it were
//               infinitely far away.  This is only used to create a
//               visible representation of the light.
//////////////////////////////////////////////////////////////////// 1 4 this 3 381  
39 0 0 4 52 346 0 0 278 ////////////////////////////////////////////////////////////////////
//     Function: DirectionalLight::set_point
//       Access: Public
//  Description: Sets the point in space at which the light is located.
//////////////////////////////////////////////////////////////////// 2 4 this 3 375  5 point 1 383  
40 0 0 6 53 387 0 0 382 ////////////////////////////////////////////////////////////////////
//     Function: DirectionalLight::get_direction
//       Access: Public
//  Description: Returns the direction in which the light is aimed.
//               This is local to the coordinate space in which the
//               light is assigned.
//////////////////////////////////////////////////////////////////// 1 4 this 3 381  
41 0 0 4 54 346 0 0 275 ////////////////////////////////////////////////////////////////////
//     Function: DirectionalLight::set_direction
//       Access: Public
//  Description: Sets the direction in which the light is aimed.
//////////////////////////////////////////////////////////////////// 2 4 this 3 375  9 direction 1 387  
42 0 0 7 55 349 0 0 0 0 
43 0 0 7 58 391 222 0 219 ////////////////////////////////////////////////////////////////////
//     Function: LODNode::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 name 1 353  
44 0 0 7 59 391 222 0 334 ////////////////////////////////////////////////////////////////////
//     Function: LODNode::make_default_lod
//       Access: Published, Static
//  Description: Creates a new LODNode of the type specified by the
//               default-lod-type config variable.
//////////////////////////////////////////////////////////////////// 1 4 name 1 353  
45 0 0 4 60 346 0 0 669 ////////////////////////////////////////////////////////////////////
//     Function: LODNode::add_switch
//       Access: Published
//  Description: Adds a switch range to the LODNode.  This implies
//               that the corresponding child node has been parented
//               to the node.
//
//               The sense of in vs. out distances is as if the object
//               were coming towards you from far away: it switches
//               "in" at the far distance, and switches "out" at the
//               close distance.  Thus, "in" should be larger than
//               "out".
//////////////////////////////////////////////////////////////////// 3 4 this 3 391  2 in 1 392  3 out 1 392  
46 0 0 6 61 367 0 0 320 ////////////////////////////////////////////////////////////////////
//     Function: LODNode::set_switch
//       Access: Published
//  Description: Changes the switching range of a particular child of
//               the LODNode.  See add_switch().
//////////////////////////////////////////////////////////////////// 4 4 this 3 391  5 index 1 347  2 in 1 392  3 out 1 392  
47 0 0 4 62 346 0 0 389 ////////////////////////////////////////////////////////////////////
//     Function: LODNode::clear_switches
//       Access: Published
//  Description: Removes the set of switching ranges for the LODNode,
//               presumably in conjunction with removing all of its
//               children.  See add_switch().
//////////////////////////////////////////////////////////////////// 1 4 this 3 391  
48 0 0 6 63 347 0 0 443 ////////////////////////////////////////////////////////////////////
//     Function: LODNode::get_num_switches
//       Access: Published
//  Description: Returns the number of switch ranges added to the
//               LODNode.  This should correspond to the number of
//               children of the node in order for the LODNode to
//               function correctly.
//////////////////////////////////////////////////////////////////// 1 4 this 3 394  
49 0 0 6 64 392 0 0 371 ////////////////////////////////////////////////////////////////////
//     Function: LODNode::get_in
//       Access: Published
//  Description: Returns the "in" distance of the indicated switch
//               range.  This should be larger than the "out" distance
//               of the same range.
//////////////////////////////////////////////////////////////////// 2 4 this 3 394  5 index 1 347  
50 0 0 6 65 392 0 0 373 ////////////////////////////////////////////////////////////////////
//     Function: LODNode::get_out
//       Access: Published
//  Description: Returns the "out" distance of the indicated switch
//               range.  This should be smaller than the "in" distance
//               of the same range.
//////////////////////////////////////////////////////////////////// 2 4 this 3 394  5 index 1 347  
51 0 0 6 66 347 0 0 480 ////////////////////////////////////////////////////////////////////
//     Function: LODNode::get_lowest_switch
//       Access: Published
//  Description: Returns the index number of the child with the lowest
//               level of detail; that is, the one that is designed to
//               be seen from the farthest away.  This is usually the
//               first child, but it is not necessarily so.
//////////////////////////////////////////////////////////////////// 1 4 this 3 394  
52 0 0 6 67 347 0 0 489 ////////////////////////////////////////////////////////////////////
//     Function: LODNode::get_highest_switch
//       Access: Published
//  Description: Returns the index number of the child with the highest
//               level of detail; that is, the one that is designed to
//               be seen from the closest to the camera.  This is
//               usually the last child, but it is not necessarily so.
//////////////////////////////////////////////////////////////////// 1 4 this 3 394  
53 0 0 4 68 346 0 0 390 ////////////////////////////////////////////////////////////////////
//     Function: LODNode::force_switch
//       Access: Published
//  Description: Forces the LODNode to show the indicated level
//               instead of the level that would normally be shown
//               based on the distance from the camera.
//////////////////////////////////////////////////////////////////// 2 4 this 3 391  5 index 1 347  
54 0 0 4 69 346 0 0 380 ////////////////////////////////////////////////////////////////////
//     Function: LODNode::clear_force_switch
//       Access: Published
//  Description: Undoes the effect of a previous call to
//               force_switch() and releases the LODNode to once again
//               display the normal level.
//////////////////////////////////////////////////////////////////// 1 4 this 3 391  
55 0 0 4 70 346 0 0 338 ////////////////////////////////////////////////////////////////////
//     Function: LODNode::set_lod_scale
//       Access: Published
//  Description: Sets the multiplier for lod distances. A higher 
//               value means you'll see farther switchs than normal
//////////////////////////////////////////////////////////////////// 2 4 this 3 391  5 value 1 392  
56 0 0 6 71 392 0 0 262 ////////////////////////////////////////////////////////////////////
//     Function: LODNode::get_lod_scale
//       Access: Published
//  Description: Returns the multiplier for lod distances
//////////////////////////////////////////////////////////////////// 1 4 this 3 394  
57 0 0 4 72 346 0 0 408 ////////////////////////////////////////////////////////////////////
//     Function: LODNode::set_center
//       Access: Published
//  Description: Specifies the center of the LOD.  This is the point
//               that is compared to the camera (in camera space) to
//               determine the particular LOD that should be chosen.
//////////////////////////////////////////////////////////////////// 2 4 this 3 391  6 center 1 383  
58 0 0 6 73 383 0 0 406 ////////////////////////////////////////////////////////////////////
//     Function: LODNode::get_center
//       Access: Published
//  Description: Returns the center of the LOD.  This is the point
//               that is compared to the camera (in camera space) to
//               determine the particular LOD that should be chosen.
//////////////////////////////////////////////////////////////////// 1 4 this 3 394  
59 0 0 4 74 346 0 0 908 ////////////////////////////////////////////////////////////////////
//     Function: LODNode::show_switch
//       Access: Published
//  Description: This is provided as a debugging aid.  show_switch()
//               will put the LODNode into a special mode where rather
//               than computing and drawing the appropriate level of
//               the LOD, a ring is drawn around the LODNode center
//               indicating the switch distances from the camera for
//               the indicated level, and the geometry of the
//               indicated level is drawn in wireframe.
//
//               Multiple different levels can be visualized this way
//               at once.  Call hide_switch() or hide_all_switches() to
//               undo this mode and restore the LODNode to its normal
//               behavior.
//////////////////////////////////////////////////////////////////// 2 4 this 3 391  5 index 1 347  
60 0 0 4 74 346 0 0 908 ////////////////////////////////////////////////////////////////////
//     Function: LODNode::show_switch
//       Access: Published
//  Description: This is provided as a debugging aid.  show_switch()
//               will put the LODNode into a special mode where rather
//               than computing and drawing the appropriate level of
//               the LOD, a ring is drawn around the LODNode center
//               indicating the switch distances from the camera for
//               the indicated level, and the geometry of the
//               indicated level is drawn in wireframe.
//
//               Multiple different levels can be visualized this way
//               at once.  Call hide_switch() or hide_all_switches() to
//               undo this mode and restore the LODNode to its normal
//               behavior.
//////////////////////////////////////////////////////////////////// 3 4 this 3 391  5 index 1 347  5 color 1 376  
61 0 0 4 75 346 0 0 262 ////////////////////////////////////////////////////////////////////
//     Function: LODNode::hide_switch
//       Access: Published
//  Description: Disables a previous call to show_switch().
//////////////////////////////////////////////////////////////////// 2 4 this 3 391  5 index 1 347  
62 0 0 4 76 346 0 0 267 ////////////////////////////////////////////////////////////////////
//     Function: LODNode::show_all_switches
//       Access: Published
//  Description: Shows all levels in their default colors.
//////////////////////////////////////////////////////////////////// 1 4 this 3 391  
63 0 0 4 77 346 0 0 303 ////////////////////////////////////////////////////////////////////
//     Function: LODNode::hide_all_switches
//       Access: Published
//  Description: Hides all levels, restoring the LODNode to normal
//               operation.
//////////////////////////////////////////////////////////////////// 1 4 this 3 391  
64 0 0 6 78 367 0 0 400 ////////////////////////////////////////////////////////////////////
//     Function: LODNode::is_any_shown
//       Access: Published
//  Description: Returns true if any switch has been shown with
//               show_switch(), indicating the LODNode is in debug
//               show mode; or false if it is in the normal mode.
//////////////////////////////////////////////////////////////////// 1 4 this 3 394  
65 0 0 6 79 367 0 0 549 ////////////////////////////////////////////////////////////////////
//     Function: LODNode::verify_child_bounds
//       Access: Published
//  Description: Returns true if the bounding volumes for the geometry
//               of each fhild node entirely fits within the
//               switch_in radius for that child, or false otherwise.
//               It is almost always a mistake for the geometry of an
//               LOD level to be larger than its switch_in radius.
//////////////////////////////////////////////////////////////////// 1 4 this 3 394  
66 0 0 7 80 349 0 0 0 0 
67 0 0 7 83 396 232 0 223 ////////////////////////////////////////////////////////////////////
//     Function: FadeLODNode::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 name 1 353  
68 0 0 4 84 346 0 0 270 ////////////////////////////////////////////////////////////////////
//     Function: FadeLODNode::set_fade_time
//       Access: Published
//  Description: set the time taken to complete an LOD switch
//////////////////////////////////////////////////////////////////// 2 4 this 3 396  1 t 1 392  
69 0 0 6 85 392 0 0 270 ////////////////////////////////////////////////////////////////////
//     Function: FadeLODNode::get_fade_time
//       Access: Published
//  Description: get the time taken to complete an LOD switch
//////////////////////////////////////////////////////////////////// 1 4 this 3 397  
70 0 0 4 86 346 0 0 369 ////////////////////////////////////////////////////////////////////
//     Function: FadeLODNode::set_fade_bin
//       Access: Published
//  Description: Specifies the cull bin and draw order that is
//               assigned to the fading part of the geometry during a
//               transition.
//////////////////////////////////////////////////////////////////// 3 4 this 3 396  4 name 1 353  10 draw_order 1 347  
71 0 0 6 87 353 0 0 340 ////////////////////////////////////////////////////////////////////
//     Function: FadeLODNode::get_fade_bin_name
//       Access: Published
//  Description: Returns the cull bin that is assigned to the fading
//               part of the geometry during a transition.
//////////////////////////////////////////////////////////////////// 1 4 this 3 397  
72 0 0 6 88 347 0 0 391 ////////////////////////////////////////////////////////////////////
//     Function: FadeLODNode::get_fade_bin_draw_order
//       Access: Published
//  Description: Returns the draw order that is assigned (along with
//               the bin name) to the fading part of the geometry
//               during a transition.
//////////////////////////////////////////////////////////////////// 1 4 this 3 397  
73 0 0 4 89 346 0 0 460 ////////////////////////////////////////////////////////////////////
//     Function: FadeLODNode::set_fade_state_override
//       Access: Published
//  Description: Specifies the override value that is applied to the
//               state changes necessary to apply the fade effect.
//               This should be larger than any attrib overrides on
//               the fading geometry.
//////////////////////////////////////////////////////////////////// 2 4 this 3 396  8 override 1 347  
74 0 0 6 90 347 0 0 458 ////////////////////////////////////////////////////////////////////
//     Function: FadeLODNode::get_fade_state_override
//       Access: Published
//  Description: Returns the override value that is applied to the
//               state changes necessary to apply the fade effect.
//               This should be larger than any attrib overrides on
//               the fading geometry.
//////////////////////////////////////////////////////////////////// 1 4 this 3 397  
75 0 0 7 91 349 0 0 0 0 
76 0 0 7 95 402 0 0 457 ////////////////////////////////////////////////////////////////////
//     Function: NodeCullCallbackData::get_trav
//       Access: Published
//  Description: Returns the CullTraverser in use at the time of the
//               callback.  This object contains data that does not
//               change during the traversal, such as the
//               DisplayRegion and Camera in use.
//////////////////////////////////////////////////////////////////// 1 4 this 3 400  
77 0 0 6 96 403 0 0 486 ////////////////////////////////////////////////////////////////////
//     Function: NodeCullCallbackData::get_data
//       Access: Published
//  Description: Returns the CullTraverserData in use at the time of the
//               callback.  This object contains data that changes at
//               each node of the traversal, such as the current node
//               and the current net transform to that node.
//////////////////////////////////////////////////////////////////// 1 4 this 3 400  
78 0 0 7 97 349 0 0 0 0 
79 0 0 7 100 405 243 0 222 ////////////////////////////////////////////////////////////////////
//     Function: PointLight::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 name 1 353  
80 0 0 4 101 346 0 0 305 ////////////////////////////////////////////////////////////////////
//     Function: PointLight::set_specular_color
//       Access: Public
//  Description: Sets the color of specular highlights generated by
//               the light.
//////////////////////////////////////////////////////////////////// 2 4 this 3 405  5 color 1 376  
81 0 0 4 102 346 0 0 448 ////////////////////////////////////////////////////////////////////
//     Function: PointLight::set_attenuation
//       Access: Public
//  Description: Sets the terms of the attenuation equation for the
//               light.  These are, in order, the constant, linear,
//               and quadratic terms based on the distance from the
//               point to the vertex.
//////////////////////////////////////////////////////////////////// 2 4 this 3 405  11 attenuation 1 406  
82 0 0 6 103 383 0 0 380 ////////////////////////////////////////////////////////////////////
//     Function: PointLight::get_point
//       Access: Public
//  Description: Returns the point in space at which the light is
//               located.  This is local to the coordinate space in
//               which the light is assigned.
//////////////////////////////////////////////////////////////////// 1 4 this 3 410  
83 0 0 4 104 346 0 0 272 ////////////////////////////////////////////////////////////////////
//     Function: PointLight::set_point
//       Access: Public
//  Description: Sets the point in space at which the light is located.
//////////////////////////////////////////////////////////////////// 2 4 this 3 405  5 point 1 383  
84 0 0 7 105 349 0 0 0 0 
85 0 0 7 108 412 246 0 227 ////////////////////////////////////////////////////////////////////
//     Function: SelectiveChildNode::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 name 1 353  
86 0 0 7 109 349 0 0 0 0 
87 0 0 7 117 413 255 0 224 ////////////////////////////////////////////////////////////////////
//     Function: SequenceNode::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 name 1 353  
88 0 0 6 118 347 0 0 580 ////////////////////////////////////////////////////////////////////
//     Function: SequenceNode::get_num_frames
//       Access: Published, Virtual
//  Description: Returns the number of frames in the animation.  This
//               is a property of the animation and may not be
//               directly adjusted by the user (although it may change
//               without warning with certain kinds of animations,
//               since this is a virtual method that may be
//               overridden).
//////////////////////////////////////////////////////////////////// 1 4 this 3 414  
89 0 0 4 119 346 0 0 435 ////////////////////////////////////////////////////////////////////
//     Function: SequenceNode::set_frame_rate
//       Access: Published
//  Description: Changes the advertised frame rate of the
//               SequenceNode.  This can be used in conjunction with
//               get_play_rate() to change the effective frame rate of
//               the node.
//////////////////////////////////////////////////////////////////// 2 4 this 3 413  10 frame_rate 1 416  
90 0 0 7 120 349 0 0 0 0 
91 0 0 7 112 412 246 0 0 1 4 this 3 413  
92 0 0 7 113 413 255 0 0 1 4 this 3 412  
93 0 0 6 115 417 0 0 0 1 4 this 3 413  
94 0 0 7 116 413 255 0 0 1 4 this 3 417  
95 0 0 7 124 418 0 0 450 ////////////////////////////////////////////////////////////////////
//     Function: ShaderGenerator::Constructor
//       Access: Published
//  Description: Create a ShaderGenerator.  This has no state,
//               except possibly to cache certain results.
//               The parameter that must be passed is the GSG to
//               which the shader generator belongs.
//////////////////////////////////////////////////////////////////// 2 3 gsg 1 369  4 host 1 371  
96 0 0 7 125 427 0 0 1448 ////////////////////////////////////////////////////////////////////
//     Function: ShaderGenerator::synthesize_shader
//       Access: Published, Virtual
//  Description: This is the routine that implements the next-gen
//               fixed function pipeline by synthesizing a shader.
//               It also takes care of setting up any buffers
//               needed to produce the requested effects.
//
//               Currently supports:
//               - flat colors
//               - vertex colors
//               - lighting
//               - normal maps, but not multiple
//               - gloss maps, but not multiple
//               - glow maps, but not multiple
//               - materials, but not updates to materials
//               - 2D textures
//               - all texture stage modes, including combine modes
//               - color scale attrib
//               - light ramps (for cartoon shading)
//               - shadow mapping
//               - most texgen modes
//               - texmatrix
//               - 1D/2D/3D textures, cube textures, 2D tex arrays
//               - linear/exp/exp2 fog
//               - animation
//
//               Not yet supported:
//               - dot3_rgb and dot3_rgba combine modes
//
//               Potential optimizations
//               - omit attenuation calculations if attenuation off
//
//////////////////////////////////////////////////////////////////// 3 4 this 3 418  2 rs 1 421  4 anim 1 424  
97 0 0 7 126 349 0 0 0 0 
98 0 0 7 128 428 265 0 221 ////////////////////////////////////////////////////////////////////
//     Function: Spotlight::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 name 1 353  
99 0 0 4 129 346 0 0 693 ////////////////////////////////////////////////////////////////////
//     Function: Spotlight::set_exponent
//       Access: Public
//  Description: Sets the exponent that controls the amount of light
//               falloff from the center of the spotlight.  The light
//               is attenuated by the cosine of the angle between the
//               direction of the light and the direction of the point
//               being lighted, raised to the power of this exponent.
//               Thus, higher exponents result in a more focused light
//               source, regardless of the field-of-view of the lens.
//////////////////////////////////////////////////////////////////// 2 4 this 3 428  8 exponent 1 392  
100 0 0 4 130 346 0 0 304 ////////////////////////////////////////////////////////////////////
//     Function: Spotlight::set_specular_color
//       Access: Public
//  Description: Sets the color of specular highlights generated by
//               the light.
//////////////////////////////////////////////////////////////////// 2 4 this 3 428  5 color 1 376  
101 0 0 4 131 346 0 0 447 ////////////////////////////////////////////////////////////////////
//     Function: Spotlight::set_attenuation
//       Access: Public
//  Description: Sets the terms of the attenuation equation for the
//               light.  These are, in order, the constant, linear,
//               and quadratic terms based on the distance from the
//               point to the vertex.
//////////////////////////////////////////////////////////////////// 2 4 this 3 428  11 attenuation 1 406  
102 0 0 7 132 431 0 0 1015 ////////////////////////////////////////////////////////////////////
//     Function: Spotlight::make_spot
//       Access: Published, Static
//  Description: Returns a newly-generated Texture that renders a
//               circular spot image as might be cast from the
//               spotlight.  This may be projected onto target
//               geometry (for instance, via
//               NodePath::project_texture()) instead of actually
//               enabling the light itself, as a cheesy way to make a
//               high-resolution spot appear on the geometry.
//
//               pixel_width specifies the height and width of the new
//               texture in pixels, full_radius is a value in the
//               range 0..1 that indicates the relative size of the
//               fully bright center spot, and fg and bg are the
//               colors of the interior and exterior of the spot,
//               respectively.
//////////////////////////////////////////////////////////////////// 4 11 pixel_width 1 347  11 full_radius 1 392  2 fg 1 430  2 bg 1 430  
103 0 0 7 133 349 0 0 0 0 
104 0 0 7 136 432 270 0 222 ////////////////////////////////////////////////////////////////////
//     Function: SwitchNode::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 name 1 353  
105 0 0 4 137 346 0 0 322 ////////////////////////////////////////////////////////////////////
//     Function: SwitchNode::set_visible_child
//       Access: Published
//  Description: Specifies the particular child of this node, by
//               index, that will be visible.
//////////////////////////////////////////////////////////////////// 2 4 this 3 432  5 index 1 347  
106 0 0 6 138 347 0 0 292 ////////////////////////////////////////////////////////////////////
//     Function: SwitchNode::get_visible_child
//       Access: Published, Virtual
//  Description: Returns the index of the child that should be visible.
//////////////////////////////////////////////////////////////////// 1 4 this 3 433  
107 0 0 7 139 349 0 0 0 0 
108 0 0 7 142 435 281 0 221 ////////////////////////////////////////////////////////////////////
//     Function: UvScrollNode::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 name 1 353  
109 0 0 7 142 435 281 0 221 ////////////////////////////////////////////////////////////////////
//     Function: UvScrollNode::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 5 4 name 1 353  7 u_speed 1 392  7 v_speed 1 392  7 w_speed 1 392  7 r_speed 1 392  
110 0 0 4 143 346 0 0 224 ////////////////////////////////////////////////////////////////////
//     Function: UvScrollNode::set_u_speed
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 435  7 u_speed 1 392  
111 0 0 4 144 346 0 0 224 ////////////////////////////////////////////////////////////////////
//     Function: UvScrollNode::set_v_speed
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 435  7 v_speed 1 392  
112 0 0 4 145 346 0 0 224 ////////////////////////////////////////////////////////////////////
//     Function: UvScrollNode::set_w_speed
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 435  7 w_speed 1 392  
113 0 0 4 146 346 0 0 224 ////////////////////////////////////////////////////////////////////
//     Function: UvScrollNode::set_r_speed
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 435  7 r_speed 1 392  
114 0 0 6 147 392 0 0 225 ////////////////////////////////////////////////////////////////////
//     Function: UvSctrollNode::get_u_speed
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 436  
115 0 0 6 148 392 0 0 224 ////////////////////////////////////////////////////////////////////
//     Function: UvScrollNode::get_v_speed
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 436  
116 0 0 6 149 392 0 0 224 ////////////////////////////////////////////////////////////////////
//     Function: UvScrollNode::get_w_speed
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 436  
117 0 0 6 150 392 0 0 225 ////////////////////////////////////////////////////////////////////
//     Function: UvSctrollNode::get_r_speed
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 436  
118 0 0 7 151 349 0 0 0 0 
119 0 0 7 154 438 283 0 230 ////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
120 0 0 4 157 346 0 0 282 ////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::set_lod_mode
//       Access: Published
//  Description: Specifies the mode in which LODNodes are analyzed.
//////////////////////////////////////////////////////////////////// 2 4 this 3 438  8 lod_mode 1 341  
121 0 0 6 158 341 0 0 280 ////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::get_lod_mode
//       Access: Published
//  Description: Returns the mode in which LODNodes are analyzed.
//////////////////////////////////////////////////////////////////// 2 4 this 3 439  8 lod_mode 1 341  
122 0 0 4 159 346 0 0 310 ////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::clear
//       Access: Published
//  Description: Resets all of the data in the analyzer in preparation
//               for a new run.
//////////////////////////////////////////////////////////////////// 1 4 this 3 438  
123 0 0 4 160 346 0 0 522 ////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::add_node
//       Access: Published
//  Description: Adds a new node to the set of data for analysis.
//               Normally, this would only be called once, and passed
//               the top of the scene graph, but it's possible to
//               repeatedly pass in subgraphs to get an analysis of
//               all the graphs together.
//////////////////////////////////////////////////////////////////// 2 4 this 3 438  4 node 1 352  
124 0 0 4 161 346 0 0 258 ////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::write
//       Access: Published
//  Description: Describes all the data collected.
//////////////////////////////////////////////////////////////////// 3 4 this 3 439  3 out 1 344  12 indent_level 1 347  
125 0 0 6 162 347 0 0 233 ////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::get_num_nodes
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 439  
126 0 0 6 163 347 0 0 237 ////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::get_num_instances
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 439  
127 0 0 6 164 347 0 0 238 ////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::get_num_transforms
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 439  
128 0 0 6 165 347 0 0 246 ////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::get_num_nodes_with_attribs
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 439  
129 0 0 6 166 347 0 0 237 ////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::get_num_lod_nodes
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 439  
130 0 0 6 167 347 0 0 238 ////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::get_num_geom_nodes
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 439  
131 0 0 6 168 347 0 0 233 ////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::get_num_geoms
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 439  
132 0 0 6 169 347 0 0 245 ////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::get_num_geom_vertex_datas
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 439  
133 0 0 6 170 347 0 0 247 ////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::get_num_geom_vertex_formats
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 439  
134 0 0 6 171 347 0 0 240 ////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::get_vertex_data_size
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 439  
135 0 0 6 172 347 0 0 236 ////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::get_num_vertices
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 439  
136 0 0 6 173 347 0 0 235 ////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::get_num_normals
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 439  
137 0 0 6 174 347 0 0 234 ////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::get_num_colors
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 439  
138 0 0 6 175 347 0 0 237 ////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::get_num_texcoords
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 439  
139 0 0 6 176 347 0 0 232 ////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::get_num_tris
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 439  
140 0 0 6 177 347 0 0 233 ////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::get_num_lines
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 439  
141 0 0 6 178 347 0 0 234 ////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::get_num_points
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 439  
142 0 0 6 179 347 0 0 235 ////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::get_num_patches
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 439  
143 0 0 6 180 347 0 0 243 ////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::get_num_individual_tris
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 439  
144 0 0 6 181 347 0 0 237 ////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::get_num_tristrips
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 439  
145 0 0 6 182 347 0 0 247 ////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::get_num_triangles_in_strips
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 439  
146 0 0 6 183 347 0 0 235 ////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::get_num_trifans
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 439  
147 0 0 6 184 347 0 0 245 ////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::get_num_triangles_in_fans
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 439  
148 0 0 6 185 347 0 0 247 ////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::get_num_vertices_in_patches
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 439  
149 0 0 6 186 347 0 0 237 ////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::get_texture_bytes
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 439  
150 0 0 6 187 347 0 0 240 ////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::get_num_long_normals
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 439  
151 0 0 6 188 347 0 0 241 ////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::get_num_short_normals
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 439  
152 0 0 6 189 392 0 0 243 ////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::get_total_normal_length
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 439  
124
317 9 LightNode 0 141313 9 LightNode 9 LightNode 0 0 0 0 160 0 3 157 158 159 0 0 2 3 318 153 154 3 319 155 156 0 0 360
////////////////////////////////////////////////////////////////////
//       Class : LightNode
// Description : A derivative of Light and of PandaNode.  All kinds of
//               Light except Spotlight (which must inherit from
//               LensNode instead) inherit from this class.
////////////////////////////////////////////////////////////////////

318 5 Light 0 2049 5 Light 5 Light 0 0 0 0 0 0 0 0 0 0 0 0 460
////////////////////////////////////////////////////////////////////
//       Class : Light
// Description : The abstract interface to all kinds of lights.  The
//               actual light objects also inherit from PandaNode, and
//               can therefore be added to the scene graph at some
//               arbitrary point to define the coordinate system of
//               effect.
////////////////////////////////////////////////////////////////////

319 9 PandaNode 0 2049 9 PandaNode 9 PandaNode 0 0 0 0 0 0 0 3 441 442 443 0 0 0 0 374
////////////////////////////////////////////////////////////////////
//       Class : PandaNode
// Description : A basic node of the scene graph or data graph.  This
//               is the base class of all specialized nodes, and also
//               serves as a generic node with no special properties.
////////////////////////////////////////////////////////////////////

320 12 AmbientLight 0 141313 12 AmbientLight 12 AmbientLight 0 0 0 1 161 163 0 1 162 0 0 1 0 317 0 0 0 0 407
////////////////////////////////////////////////////////////////////
//       Class : AmbientLight
// Description : A light source that seems to illuminate all points in
//               space at once.  This kind of light need not actually
//               be part of the scene graph, since it has no meaningful
//               position.
////////////////////////////////////////////////////////////////////

321 12 CallbackNode 0 141313 12 CallbackNode 12 CallbackNode 0 0 0 1 164 172 0 7 165 166 167 168 169 170 171 0 0 1 0 319 0 0 0 0 308
////////////////////////////////////////////////////////////////////
//       Class : CallbackNode
// Description : A special node that can issue arbitrary callbacks to
//               user code, either during the cull or draw traversals.
////////////////////////////////////////////////////////////////////

322 11 ComputeNode 0 141313 11 ComputeNode 11 ComputeNode 0 0 0 1 173 179 0 5 174 175 176 177 178 1 444 0 1 0 319 0 0 0 0 325
////////////////////////////////////////////////////////////////////
//       Class : ComputeNode
// Description : A special node, the sole purpose of which is to
//               invoke a dispatch operation on the assigned
//               compute shader.
////////////////////////////////////////////////////////////////////

323 11 LODNodeType 0 532481 11 LODNodeType 11 LODNodeType 0 0 0 0 0 0 0 0 0 0 2 7 LNT_pop 7 LNT_pop 0
0 8 LNT_fade 8 LNT_fade 0
1 0 0

324 13 LightLensNode 0 26625 13 LightLensNode 13 LightLensNode 0 0 0 0 184 0 6 185 186 187 188 189 190 0 0 2 3 318 180 181 3 325 182 183 0 0 433
////////////////////////////////////////////////////////////////////
//       Class : LightLensNode
// Description : A derivative of Light and of Camera. The name might
//               be misleading: it does not directly derive from
//               LensNode, but through the Camera class. The Camera
//               serves no purpose unless shadows are enabled.
////////////////////////////////////////////////////////////////////

325 6 Camera 0 2049 6 Camera 6 Camera 0 0 0 0 0 0 0 1 445 0 0 0 0 320
////////////////////////////////////////////////////////////////////
//       Class : Camera
// Description : A node that can be positioned around in the scene
//               graph to represent a point of view for rendering a
//               scene.
////////////////////////////////////////////////////////////////////

326 16 DirectionalLight 0 141313 16 DirectionalLight 16 DirectionalLight 0 0 0 1 191 198 0 6 192 193 194 195 196 197 0 0 1 0 324 0 0 0 0 288
////////////////////////////////////////////////////////////////////
//       Class : DirectionalLight
// Description : A light shining from infinitely far away in a
//               particular direction, like sunlight.
////////////////////////////////////////////////////////////////////

327 7 LODNode 0 141313 7 LODNode 7 LODNode 0 0 0 1 199 222 0 22 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 2 446 447 0 1 0 319 0 0 0 0 404
////////////////////////////////////////////////////////////////////
//       Class : LODNode
// Description : A Level-of-Detail node.  This selects only one of its
//               children for rendering, according to the distance
//               from the camera and the table indicated in the
//               associated LOD object.
////////////////////////////////////////////////////////////////////

328 11 FadeLODNode 0 141313 11 FadeLODNode 11 FadeLODNode 0 0 0 1 223 232 0 8 224 225 226 227 228 229 230 231 0 0 1 0 327 0 0 0 0 234
////////////////////////////////////////////////////////////////////
//       Class : FadeLODNode
// Description : A Level-of-Detail node with alpha based switching.
////////////////////////////////////////////////////////////////////

329 20 NodeCullCallbackData 0 141313 20 NodeCullCallbackData 20 NodeCullCallbackData 0 0 0 0 236 0 3 233 234 235 0 0 1 0 330 0 0 0 0 327
////////////////////////////////////////////////////////////////////
//       Class : NodeCullCallbackData
// Description : This kind of CallbackData is passed to the
//               CallbackObject added to
//               CallbackNode:set_cull_callback().
////////////////////////////////////////////////////////////////////

330 12 CallbackData 0 2049 12 CallbackData 12 CallbackData 0 0 0 0 0 0 0 0 0 0 0 0 610
////////////////////////////////////////////////////////////////////
//       Class : CallbackData
// Description : This is a generic data block that is passed along to
//               a CallbackObject when a callback is made.  It
//               contains data specific to the particular callback
//               type in question.
//
//               This is actually an abstract base class and contains
//               no data.  Specializations of this class will contain
//               the actual data relevant to each callback type.
////////////////////////////////////////////////////////////////////

331 10 PointLight 0 141313 10 PointLight 10 PointLight 0 0 0 1 237 243 0 5 238 239 240 241 242 0 0 1 0 324 0 0 0 0 280
////////////////////////////////////////////////////////////////////
//       Class : PointLight
// Description : A light originating from a single point in space, and
//               shining in all directions.
////////////////////////////////////////////////////////////////////

332 18 SelectiveChildNode 0 141313 18 SelectiveChildNode 18 SelectiveChildNode 0 0 0 1 244 246 0 1 245 0 0 1 0 319 0 0 0 0 306
////////////////////////////////////////////////////////////////////
//       Class : SelectiveChildNode
// Description : A base class for nodes like LODNode and SequenceNode
//               that select only one visible child at a time.
////////////////////////////////////////////////////////////////////

333 12 SequenceNode 0 141313 12 SequenceNode 12 SequenceNode 0 0 0 1 251 255 0 3 252 253 254 0 0 2 3 332 247 248 3 334 249 250 0 0 306
////////////////////////////////////////////////////////////////////
//       Class : SequenceNode
// Description : A node that automatically cycles through rendering
//               each one of its children according to its frame rate.
////////////////////////////////////////////////////////////////////

334 13 AnimInterface 0 2049 13 AnimInterface 13 AnimInterface 0 0 0 0 0 0 0 0 0 0 0 0 464
////////////////////////////////////////////////////////////////////
//       Class : AnimInterface
// Description : This is the fundamental interface for things that
//               have a play/loop/stop type interface for frame-based
//               animation, such as animated characters.  This is the
//               base class for AnimControl and other, similar
//               classes.
////////////////////////////////////////////////////////////////////

335 15 ShaderGenerator 0 75777 15 ShaderGenerator 15 ShaderGenerator 0 0 0 1 256 0 0 2 257 258 0 0 1 0 336 0 0 0 0 1610
////////////////////////////////////////////////////////////////////
//       Class : ShaderGenerator
// Description : The ShaderGenerator is a device that effectively
//               replaces the classic fixed function pipeline with
//               a 'next-gen' fixed function pipeline.  The next-gen
//               fixed function pipeline supports features like
//               normal mapping, gloss mapping, cartoon lighting,
//               and so forth.  It works by automatically generating
//               a shader from a given RenderState.
//
//               Currently, there is one ShaderGenerator object per
//               GraphicsStateGuardian.  It is our intent that in
//               time, people will write classes that derive from
//               ShaderGenerator but which yield slightly different
//               results.
//
//               The ShaderGenerator owes its existence to the
//               'Bamboo Team' at Carnegie Mellon's Entertainment
//               Technology Center.  This is a group of students
//               who, as a semester project, decided that next-gen
//               graphics should be accessible to everyone, even if
//               they don't know shader programming.  The group
//               consisted of:
//
//               Aaron Lo, Programmer
//               Heegun Lee, Programmer
//               Erin Fernandez, Artist/Tester
//               Joe Grubb, Artist/Tester
//               Ivan Ortega, Technical Artist/Tester
//
//               Thanks to them!
//
////////////////////////////////////////////////////////////////////

336 19 TypedReferenceCount 0 2049 19 TypedReferenceCount 19 TypedReferenceCount 0 0 0 0 0 0 0 0 0 0 0 0 710
////////////////////////////////////////////////////////////////////
//       Class : TypedReferenceCount
// Description : A base class for things which need to inherit from
//               both TypedObject and from ReferenceCount.  It's
//               convenient to define this intermediate base class
//               instead of multiply inheriting from the two classes
//               each time they are needed, so that we can sensibly
//               pass around pointers to things which are both
//               TypedObjects and ReferenceCounters.
//               
//               See also TypedObject for detailed instructions.
////////////////////////////////////////////////////////////////////

337 9 Spotlight 0 141313 9 Spotlight 9 Spotlight 0 0 0 1 259 265 0 5 260 261 262 263 264 0 0 1 0 324 0 0 0 0 682
////////////////////////////////////////////////////////////////////
//       Class : Spotlight
// Description : A light originating from a single point in space, and
//               shining in a particular direction, with a cone-shaped
//               falloff.
//
//               The Spotlight frustum is defined using a Lens, so it
//               can have any of the properties that a camera lens can
//               have.
//
//               Note that the class is named Spotlight instead of
//               SpotLight, because "spotlight" is a single English
//               word, instead of two words.
////////////////////////////////////////////////////////////////////

338 10 SwitchNode 0 141313 10 SwitchNode 10 SwitchNode 0 0 0 1 266 270 0 3 267 268 269 0 0 1 0 332 0 0 0 0 281
////////////////////////////////////////////////////////////////////
//       Class : SwitchNode
// Description : A node that renders only one of its children,
//               according to the user's indication.
////////////////////////////////////////////////////////////////////

339 12 UvScrollNode 0 141313 12 UvScrollNode 12 UvScrollNode 0 0 0 1 271 281 0 9 272 273 274 275 276 277 278 279 280 0 0 1 0 319 0 0 0 0 274
////////////////////////////////////////////////////////////////////
//       Class : UvScrollNode
// Description : This node is placed at key points within the scene
//               graph to animate uvs.
////////////////////////////////////////////////////////////////////

340 18 SceneGraphAnalyzer 0 26625 18 SceneGraphAnalyzer 18 SceneGraphAnalyzer 0 0 0 1 282 283 0 33 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 0 0 0 0 1 341 297
////////////////////////////////////////////////////////////////////
//       Class : SceneGraphAnalyzer
// Description : A handy class that can scrub over a scene graph and
//               collect interesting statistics on it.
////////////////////////////////////////////////////////////////////

341 7 LodMode 0 794624 27 SceneGraphAnalyzer::LodMode 27 SceneGraphAnalyzer::LodMode 340 0 0 0 0 0 0 0 0 0 4 9 LM_lowest 29 SceneGraphAnalyzer::LM_lowest 0
0 10 LM_highest 30 SceneGraphAnalyzer::LM_highest 0
1 6 LM_all 26 SceneGraphAnalyzer::LM_all 0
2 7 LM_none 27 SceneGraphAnalyzer::LM_none 0
3 0 0

342 17 LightNode const * 0 8576 17 LightNode const * 17 LightNode const * 0 0 343 0 0 0 0 0 0 0 0 0 0

343 15 LightNode const 0 8832 15 LightNode const 15 LightNode const 0 0 317 0 0 0 0 0 0 0 0 0 0

344 9 ostream * 0 8576 9 ostream * 9 ostream * 0 0 345 0 0 0 0 0 0 0 0 0 0

345 7 ostream 0 2048 7 ostream 7 ostream 0 0 0 0 0 0 0 0 0 0 0 0 0

346 4 void 0 8194 4 void 4 void 0 6 0 0 0 0 0 0 0 0 0 0 0

347 3 int 0 8194 3 int 3 int 0 1 0 0 0 0 0 0 0 0 0 0 0

348 10 TypeHandle 0 2048 10 TypeHandle 10 TypeHandle 0 0 0 0 0 0 0 0 0 0 0 0 1098
////////////////////////////////////////////////////////////////////
//       Class : TypeHandle
// Description : TypeHandle is the identifier used to differentiate
//               C++ class types.  Any C++ classes that inherit from
//               some base class, and must be differentiated at run
//               time, should store a static TypeHandle object that
//               can be queried through a static member function
//               named get_class_type().  Most of the time, it is also
//               desirable to inherit from TypedObject, which provides
//               some virtual functions to return the TypeHandle for a
//               particular instance.
//
//               At its essence, a TypeHandle is simply a unique
//               identifier that is assigned by the TypeRegistry.  The
//               TypeRegistry stores a tree of TypeHandles, so that
//               ancestry of a particular type may be queried, and the
//               type name may be retrieved for run-time display.
////////////////////////////////////////////////////////////////////

349 12 TypeHandle * 0 8576 12 TypeHandle * 12 TypeHandle * 0 0 348 0 0 0 0 0 0 0 0 0 0

350 11 LightNode * 0 8576 11 LightNode * 11 LightNode * 0 0 317 0 0 0 0 0 0 0 0 0 0

351 7 Light * 0 8576 7 Light * 7 Light * 0 0 318 0 0 0 0 0 0 0 0 0 0

352 11 PandaNode * 0 8576 11 PandaNode * 11 PandaNode * 0 0 319 0 0 0 0 0 0 0 0 0 0

353 13 atomic string 0 2 13 atomic string 13 atomic string 0 7 0 0 0 0 0 0 0 0 0 0 0

354 14 AmbientLight * 0 8576 14 AmbientLight * 14 AmbientLight * 0 0 320 0 0 0 0 0 0 0 0 0 0

355 14 CallbackNode * 0 8576 14 CallbackNode * 14 CallbackNode * 0 0 321 0 0 0 0 0 0 0 0 0 0

356 16 CallbackObject * 0 8576 16 CallbackObject * 16 CallbackObject * 0 0 357 0 0 0 0 0 0 0 0 0 0

357 14 CallbackObject 0 2048 14 CallbackObject 14 CallbackObject 0 0 0 0 0 0 0 0 0 0 0 0 527
////////////////////////////////////////////////////////////////////
//       Class : CallbackObject
// Description : This is a generic object that can be assigned to a
//               callback at various points in the rendering process.
//               This is actually a base class for a handful of
//               specialized callback object types.  You can also
//               subclass it yourself to make your own callback
//               handler.
////////////////////////////////////////////////////////////////////

358 20 CallbackNode const * 0 8576 20 CallbackNode const * 20 CallbackNode const * 0 0 359 0 0 0 0 0 0 0 0 0 0

359 18 CallbackNode const 0 8832 18 CallbackNode const 18 CallbackNode const 0 0 321 0 0 0 0 0 0 0 0 0 0

360 13 ComputeNode * 0 8576 13 ComputeNode * 13 ComputeNode * 0 0 322 0 0 0 0 0 0 0 0 0 0

361 18 LVecBase3i const * 0 8576 18 LVecBase3i const * 18 LVecBase3i const * 0 0 362 0 0 0 0 0 0 0 0 0 0

362 16 LVecBase3i const 0 8832 16 LVecBase3i const 16 LVecBase3i const 0 0 363 0 0 0 0 0 0 0 0 0 0

363 10 LVecBase3i 0 2048 10 LVecBase3i 10 LVecBase3i 0 0 0 0 0 0 0 0 0 0 0 0 265
////////////////////////////////////////////////////////////////////
//       Class : LVecBase3
// Description : This is the base class for all three-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

364 19 ComputeNode const * 0 8576 19 ComputeNode const * 19 ComputeNode const * 0 0 365 0 0 0 0 0 0 0 0 0 0

365 17 ComputeNode const 0 8832 17 ComputeNode const 17 ComputeNode const 0 0 322 0 0 0 0 0 0 0 0 0 0

366 15 LightLensNode * 0 8576 15 LightLensNode * 15 LightLensNode * 0 0 324 0 0 0 0 0 0 0 0 0 0

367 4 bool 0 8194 4 bool 4 bool 0 4 0 0 0 0 0 0 0 0 0 0 0

368 18 GraphicsOutputBase 0 2048 18 GraphicsOutputBase 18 GraphicsOutputBase 0 0 0 0 0 0 0 0 0 0 0 0 277
////////////////////////////////////////////////////////////////////
//       Class : GraphicsOutputBase
// Description : An abstract base class for GraphicsOutput, for all
//               the usual reasons.
////////////////////////////////////////////////////////////////////

369 27 GraphicsStateGuardianBase * 0 8576 27 GraphicsStateGuardianBase * 27 GraphicsStateGuardianBase * 0 0 370 0 0 0 0 0 0 0 0 0 0

370 25 GraphicsStateGuardianBase 0 2048 25 GraphicsStateGuardianBase 25 GraphicsStateGuardianBase 0 0 0 0 0 0 0 1 448 0 0 0 0 957
////////////////////////////////////////////////////////////////////
//       Class : GraphicsStateGuardianBase
// Description : This is a base class for the GraphicsStateGuardian
//               class, which is itself a base class for the various
//               GSG's for different platforms.  This class contains
//               all the function prototypes to support the
//               double-dispatch of GSG to geoms, transitions, etc.  It
//               lives in a separate class in its own package so we
//               can avoid circular build dependency problems.
//
//               GraphicsStateGuardians are not actually writable to
//               bam files, of course, but they may be passed as event
//               parameters, so they inherit from
//               TypedWritableReferenceCount instead of
//               TypedReferenceCount for that convenience.
////////////////////////////////////////////////////////////////////

371 20 GraphicsOutputBase * 0 8576 20 GraphicsOutputBase * 20 GraphicsOutputBase * 0 0 368 0 0 0 0 0 0 0 0 0 0

372 21 LightLensNode const * 0 8576 21 LightLensNode const * 21 LightLensNode const * 0 0 373 0 0 0 0 0 0 0 0 0 0

373 19 LightLensNode const 0 8832 19 LightLensNode const 19 LightLensNode const 0 0 324 0 0 0 0 0 0 0 0 0 0

374 8 Camera * 0 8576 8 Camera * 8 Camera * 0 0 325 0 0 0 0 0 0 0 0 0 0

375 18 DirectionalLight * 0 8576 18 DirectionalLight * 18 DirectionalLight * 0 0 326 0 0 0 0 0 0 0 0 0 0

376 14 LColor const * 0 8576 14 LColor const * 14 LColor const * 0 0 377 0 0 0 0 0 0 0 0 0 0

377 12 LColor const 0 8832 12 LColor const 12 LColor const 0 0 378 0 0 0 0 0 0 0 0 0 0

378 6 LColor 0 2105344 6 LColor 6 LColor 0 0 379 0 0 0 0 0 0 0 0 0 0

379 7 LColorf 0 2105344 7 LColorf 7 LColorf 0 0 380 0 0 0 0 0 0 0 0 0 0

380 10 LVecBase4f 0 2048 10 LVecBase4f 10 LVecBase4f 0 0 0 0 0 0 0 0 0 0 0 0 265
////////////////////////////////////////////////////////////////////
//       Class : LVecBase4
// Description : This is the base class for all three-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

381 24 DirectionalLight const * 0 8576 24 DirectionalLight const * 24 DirectionalLight const * 0 0 382 0 0 0 0 0 0 0 0 0 0

382 22 DirectionalLight const 0 8832 22 DirectionalLight const 22 DirectionalLight const 0 0 326 0 0 0 0 0 0 0 0 0 0

383 15 LPoint3 const * 0 8576 15 LPoint3 const * 15 LPoint3 const * 0 0 384 0 0 0 0 0 0 0 0 0 0

384 13 LPoint3 const 0 8832 13 LPoint3 const 13 LPoint3 const 0 0 385 0 0 0 0 0 0 0 0 0 0

385 7 LPoint3 0 2105344 7 LPoint3 7 LPoint3 0 0 386 0 0 0 0 0 0 0 0 0 0

386 8 LPoint3f 0 2048 8 LPoint3f 8 LPoint3f 0 0 0 0 0 0 0 0 0 0 0 0 596
////////////////////////////////////////////////////////////////////
//       Class : LPoint3
// Description : This is a three-component point in space (as opposed
//               to a three-component vector, which represents a
//               direction and a distance).  Some of the methods are
//               slightly different between LPoint3 and LVector3; in
//               particular, subtraction of two points yields a
//               vector, while addition of a vector and a point yields
//               a point.
////////////////////////////////////////////////////////////////////

387 16 LVector3 const * 0 8576 16 LVector3 const * 16 LVector3 const * 0 0 388 0 0 0 0 0 0 0 0 0 0

388 14 LVector3 const 0 8832 14 LVector3 const 14 LVector3 const 0 0 389 0 0 0 0 0 0 0 0 0 0

389 8 LVector3 0 2105344 8 LVector3 8 LVector3 0 0 390 0 0 0 0 0 0 0 0 0 0

390 9 LVector3f 0 2048 9 LVector3f 9 LVector3f 0 0 0 0 0 0 0 0 0 0 0 0 598
////////////////////////////////////////////////////////////////////
//       Class : LVector3
// Description : This is a three-component vector distance (as opposed
//               to a three-component point, which represents a
//               particular point in space).  Some of the methods are
//               slightly different between LPoint3 and LVector3; in
//               particular, subtraction of two points yields a
//               vector, while addition of a vector and a point yields
//               a point.
////////////////////////////////////////////////////////////////////

391 9 LODNode * 0 8576 9 LODNode * 9 LODNode * 0 0 327 0 0 0 0 0 0 0 0 0 0

392 11 PN_stdfloat 0 2105344 11 PN_stdfloat 11 PN_stdfloat 0 0 393 0 0 0 0 0 0 0 0 0 0

393 5 float 0 8194 5 float 5 float 0 2 0 0 0 0 0 0 0 0 0 0 0

394 15 LODNode const * 0 8576 15 LODNode const * 15 LODNode const * 0 0 395 0 0 0 0 0 0 0 0 0 0

395 13 LODNode const 0 8832 13 LODNode const 13 LODNode const 0 0 327 0 0 0 0 0 0 0 0 0 0

396 13 FadeLODNode * 0 8576 13 FadeLODNode * 13 FadeLODNode * 0 0 328 0 0 0 0 0 0 0 0 0 0

397 19 FadeLODNode const * 0 8576 19 FadeLODNode const * 19 FadeLODNode const * 0 0 398 0 0 0 0 0 0 0 0 0 0

398 17 FadeLODNode const 0 8832 17 FadeLODNode const 17 FadeLODNode const 0 0 328 0 0 0 0 0 0 0 0 0 0

399 13 CullTraverser 0 2048 13 CullTraverser 13 CullTraverser 0 0 0 0 0 0 0 0 0 0 0 0 512
////////////////////////////////////////////////////////////////////
//       Class : CullTraverser
// Description : This object performs a depth-first traversal of the
//               scene graph, with optional view-frustum culling,
//               collecting CullState and searching for GeomNodes.
//               Each renderable Geom encountered is passed along with
//               its associated RenderState to the CullHandler object.
////////////////////////////////////////////////////////////////////

400 28 NodeCullCallbackData const * 0 8576 28 NodeCullCallbackData const * 28 NodeCullCallbackData const * 0 0 401 0 0 0 0 0 0 0 0 0 0

401 26 NodeCullCallbackData const 0 8832 26 NodeCullCallbackData const 26 NodeCullCallbackData const 0 0 329 0 0 0 0 0 0 0 0 0 0

402 15 CullTraverser * 0 8576 15 CullTraverser * 15 CullTraverser * 0 0 399 0 0 0 0 0 0 0 0 0 0

403 19 CullTraverserData * 0 8576 19 CullTraverserData * 19 CullTraverserData * 0 0 404 0 0 0 0 0 0 0 0 0 0

404 17 CullTraverserData 0 2048 17 CullTraverserData 17 CullTraverserData 0 0 0 0 0 0 0 0 0 0 0 0 778
////////////////////////////////////////////////////////////////////
//       Class : CullTraverserData
// Description : This collects together the pieces of data that are
//               accumulated for each node while walking the scene
//               graph during the cull traversal.
//
//               Having this as a separate object simplifies the
//               parameter list to CullTraverser::r_traverse(), as
//               well as to other functions like
//               PandaNode::cull_callback().  It also makes it easier
//               to add cull parameters, and provides a place to
//               abstract out some of the cull behavior (like
//               view-frustum culling).
////////////////////////////////////////////////////////////////////

405 12 PointLight * 0 8576 12 PointLight * 12 PointLight * 0 0 331 0 0 0 0 0 0 0 0 0 0

406 17 LVecBase3 const * 0 8576 17 LVecBase3 const * 17 LVecBase3 const * 0 0 407 0 0 0 0 0 0 0 0 0 0

407 15 LVecBase3 const 0 8832 15 LVecBase3 const 15 LVecBase3 const 0 0 408 0 0 0 0 0 0 0 0 0 0

408 9 LVecBase3 0 2105344 9 LVecBase3 9 LVecBase3 0 0 409 0 0 0 0 0 0 0 0 0 0

409 10 LVecBase3f 0 2048 10 LVecBase3f 10 LVecBase3f 0 0 0 0 0 0 0 0 0 0 0 0 265
////////////////////////////////////////////////////////////////////
//       Class : LVecBase3
// Description : This is the base class for all three-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

410 18 PointLight const * 0 8576 18 PointLight const * 18 PointLight const * 0 0 411 0 0 0 0 0 0 0 0 0 0

411 16 PointLight const 0 8832 16 PointLight const 16 PointLight const 0 0 331 0 0 0 0 0 0 0 0 0 0

412 20 SelectiveChildNode * 0 8576 20 SelectiveChildNode * 20 SelectiveChildNode * 0 0 332 0 0 0 0 0 0 0 0 0 0

413 14 SequenceNode * 0 8576 14 SequenceNode * 14 SequenceNode * 0 0 333 0 0 0 0 0 0 0 0 0 0

414 20 SequenceNode const * 0 8576 20 SequenceNode const * 20 SequenceNode const * 0 0 415 0 0 0 0 0 0 0 0 0 0

415 18 SequenceNode const 0 8832 18 SequenceNode const 18 SequenceNode const 0 0 333 0 0 0 0 0 0 0 0 0 0

416 6 double 0 8194 6 double 6 double 0 3 0 0 0 0 0 0 0 0 0 0 0

417 15 AnimInterface * 0 8576 15 AnimInterface * 15 AnimInterface * 0 0 334 0 0 0 0 0 0 0 0 0 0

418 17 ShaderGenerator * 0 8576 17 ShaderGenerator * 17 ShaderGenerator * 0 0 335 0 0 0 0 0 0 0 0 0 0

419 18 ShaderAttrib const 0 8832 18 ShaderAttrib const 18 ShaderAttrib const 0 0 420 0 0 0 0 0 0 0 0 0 0

420 12 ShaderAttrib 0 2048 12 ShaderAttrib 12 ShaderAttrib 0 0 0 0 0 0 0 0 0 0 0 0 184
////////////////////////////////////////////////////////////////////
//       Class : ShaderAttrib
// Description :
////////////////////////////////////////////////////////////////////

421 19 RenderState const * 0 8576 19 RenderState const * 19 RenderState const * 0 0 422 0 0 0 0 0 0 0 0 0 0

422 17 RenderState const 0 8832 17 RenderState const 17 RenderState const 0 0 423 0 0 0 0 0 0 0 0 0 0

423 11 RenderState 0 2048 11 RenderState 11 RenderState 0 0 0 0 0 0 0 0 0 0 0 0 621
////////////////////////////////////////////////////////////////////
//       Class : RenderState
// Description : This represents a unique collection of RenderAttrib
//               objects that correspond to a particular renderable
//               state.
//
//               You should not attempt to create or modify a
//               RenderState object directly.  Instead, call one of
//               the make() functions to create one for you.  And
//               instead of modifying a RenderState object, create a
//               new one.
////////////////////////////////////////////////////////////////////

424 31 GeomVertexAnimationSpec const * 0 8576 31 GeomVertexAnimationSpec const * 31 GeomVertexAnimationSpec const * 0 0 425 0 0 0 0 0 0 0 0 0 0

425 29 GeomVertexAnimationSpec const 0 8832 29 GeomVertexAnimationSpec const 29 GeomVertexAnimationSpec const 0 0 426 0 0 0 0 0 0 0 0 0 0

426 23 GeomVertexAnimationSpec 0 2048 23 GeomVertexAnimationSpec 23 GeomVertexAnimationSpec 0 0 0 0 0 0 0 0 0 0 0 0 881
////////////////////////////////////////////////////////////////////
//       Class : GeomVertexAnimationSpec
// Description : This object describes how the vertex animation, if
//               any, represented in a GeomVertexData is encoded.
//
//               Vertex animation includes soft-skinned skeleton
//               animation and morphs (blend shapes), and might be
//               performed on the CPU by Panda, or passed down to the
//               graphics backed to be performed on the hardware
//               (depending on the hardware's advertised
//               capabilities).
//
//               Changing this setting doesn't by itself change the
//               way the animation is actually performed; this just
//               specifies how the vertices are set up to be animated.
////////////////////////////////////////////////////////////////////

427 20 ShaderAttrib const * 0 8576 20 ShaderAttrib const * 20 ShaderAttrib const * 0 0 419 0 0 0 0 0 0 0 0 0 0

428 11 Spotlight * 0 8576 11 Spotlight * 11 Spotlight * 0 0 337 0 0 0 0 0 0 0 0 0 0

429 7 Texture 0 2048 7 Texture 7 Texture 0 0 0 0 0 0 0 0 0 0 0 0 1051
////////////////////////////////////////////////////////////////////
//       Class : Texture
// Description : Represents a texture object, which is typically a
//               single 2-d image but may also represent a 1-d or 3-d
//               texture image, or the six 2-d faces of a cube map
//               texture.
//
//               A texture's image data might be stored in system RAM
//               (see get_ram_image()) or its image may be represented
//               in texture memory on one or more
//               GraphicsStateGuardians (see prepare()), or both.  The
//               typical usage pattern is that a texture is loaded
//               from an image file on disk, which copies its image
//               data into system RAM; then the first time the texture
//               is rendered its image data is copied to texture
//               memory (actually, to the graphics API), and the
//               system RAM image is automatically freed.
////////////////////////////////////////////////////////////////////

430 8 LColor * 0 8576 8 LColor * 8 LColor * 0 0 378 0 0 0 0 0 0 0 0 0 0

431 9 Texture * 0 8576 9 Texture * 9 Texture * 0 0 429 0 0 0 0 0 0 0 0 0 0

432 12 SwitchNode * 0 8576 12 SwitchNode * 12 SwitchNode * 0 0 338 0 0 0 0 0 0 0 0 0 0

433 18 SwitchNode const * 0 8576 18 SwitchNode const * 18 SwitchNode const * 0 0 434 0 0 0 0 0 0 0 0 0 0

434 16 SwitchNode const 0 8832 16 SwitchNode const 16 SwitchNode const 0 0 338 0 0 0 0 0 0 0 0 0 0

435 14 UvScrollNode * 0 8576 14 UvScrollNode * 14 UvScrollNode * 0 0 339 0 0 0 0 0 0 0 0 0 0

436 20 UvScrollNode const * 0 8576 20 UvScrollNode const * 20 UvScrollNode const * 0 0 437 0 0 0 0 0 0 0 0 0 0

437 18 UvScrollNode const 0 8832 18 UvScrollNode const 18 UvScrollNode const 0 0 339 0 0 0 0 0 0 0 0 0 0

438 20 SceneGraphAnalyzer * 0 8576 20 SceneGraphAnalyzer * 20 SceneGraphAnalyzer * 0 0 340 0 0 0 0 0 0 0 0 0 0

439 26 SceneGraphAnalyzer const * 0 8576 26 SceneGraphAnalyzer const * 26 SceneGraphAnalyzer const * 0 0 440 0 0 0 0 0 0 0 0 0 0

440 24 SceneGraphAnalyzer const 0 8832 24 SceneGraphAnalyzer const 24 SceneGraphAnalyzer const 0 0 340 0 0 0 0 0 0 0 0 0 0

0
0
8
441 0 0 5 11 get_parents 15 get_num_parents 10 get_parent 
442 0 0 5 12 get_children 16 get_num_children 9 get_child 
443 0 0 5 11 get_stashed 15 get_num_stashed 11 get_stashed 
444 0 0 26 14 get_dispatches 18 get_num_dispatches 12 get_dispatch 
445 0 0 38 19 get_display_regions 23 get_num_display_regions 18 get_display_region 
446 0 0 57 7 get_ins 16 get_num_switches 6 get_in 
447 0 0 57 8 get_outs 16 get_num_switches 7 get_out 
448 0 0 250 8 get_gsgs 12 get_num_gsgs 7 get_gsg 
