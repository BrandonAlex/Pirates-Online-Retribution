1436948332
2 3
11 libp3grutil 4 sM0l 12 panda3d.core 
222
243 9 CardMaker 0 4 465 20 CardMaker::CardMaker 0 1 1 218
////////////////////////////////////////////////////////////////////
//     Function: CardMaker::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
48
inline CardMaker::CardMaker(string const &name);

244 10 ~CardMaker 0 4 465 21 CardMaker::~CardMaker 0 0 217
////////////////////////////////////////////////////////////////////
//     Function: CardMaker::Destructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
35
inline CardMaker::~CardMaker(void);

245 5 reset 0 4 465 16 CardMaker::reset 0 1 2 265
////////////////////////////////////////////////////////////////////
//     Function: CardMaker::reset
//       Access: Public
//  Description: Resets all the parameters to their initial defaults.
////////////////////////////////////////////////////////////////////
28
void CardMaker::reset(void);

246 12 set_uv_range 0 4 465 23 CardMaker::set_uv_range 0 5 3 4 5 6 7 2410
////////////////////////////////////////////////////////////////////
//     Function: CardMaker::set_uv_range
//       Access: Public
//  Description: Sets the range of UV's that will be applied to the
//               vertices.  If set_has_uvs() is true (as it is by
//               default), the vertices will be generated with the
//               indicated range of UV's, which will be useful if a
//               texture is applied.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: CardMaker::set_uv_range
//       Access: Public
//  Description: Sets the range of UV's that will be applied to the
//               vertices.  If set_has_uvs() is true (as it is by
//               default), the vertices will be generated with the
//               indicated range of UV's, which will be useful if a
//               texture is applied.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: CardMaker::set_uv_range
//       Access: Public
//  Description: Sets the range of UV's that will be applied to the
//               vertices.  If set_has_uvs() is true (as it is by
//               default), the vertices will be generated with the
//               indicated range of UV's, which will be useful if a
//               texture is applied.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: CardMaker::set_uv_range
//       Access: Public
//  Description: Sets the range of UV's that will be applied to the
//               vertices.  If set_has_uvs() is true (as it is by
//               default), the vertices will be generated with the
//               indicated range of UV's, which will be useful if a
//               texture is applied.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: CardMaker::set_uv_range
//       Access: Public
//  Description: Sets the range of UV's that will be applied to the
//               vertices appropriately to show the non-pad region
//               of the texture.
////////////////////////////////////////////////////////////////////
440
void CardMaker::set_uv_range(LTexCoord const &ll, LTexCoord const &ur);
void CardMaker::set_uv_range(LTexCoord const &ll, LTexCoord const &lr, LTexCoord const &ur, LTexCoord const &ul);
void CardMaker::set_uv_range(LTexCoord3 const &ll, LTexCoord3 const &lr, LTexCoord3 const &ur, LTexCoord3 const &ul);
void CardMaker::set_uv_range(LVector4 const &x, LVector4 const &y, LVector4 const &z);
void CardMaker::set_uv_range(Texture const *tex);

247 17 set_uv_range_cube 0 4 465 28 CardMaker::set_uv_range_cube 0 1 8 336
////////////////////////////////////////////////////////////////////
//     Function: CardMaker::set_uv_range_cube
//       Access: Public
//  Description: Sets the range of UV's that will be applied to the
//               vertices appropriately for a cube-map face.
////////////////////////////////////////////////////////////////////
44
void CardMaker::set_uv_range_cube(int face);

248 11 set_has_uvs 0 4 465 22 CardMaker::set_has_uvs 0 1 9 313
////////////////////////////////////////////////////////////////////
//     Function: CardMaker::set_has_uvs
//       Access: Public
//  Description: Sets the flag indicating whether vertices will be
//               generated with UV's or not.
////////////////////////////////////////////////////////////////////
46
inline void CardMaker::set_has_uvs(bool flag);

249 14 set_has_3d_uvs 0 4 465 25 CardMaker::set_has_3d_uvs 0 1 10 468
////////////////////////////////////////////////////////////////////
//     Function: CardMaker::set_has_3d_uvs
//       Access: Public
//  Description: Sets the flag indicating whether vertices will be
//               generated with 3-component UVW's (true) or
//               2-component UV's (the default, false).  Normally,
//               this will be implicitly set by setting the uv_range.
////////////////////////////////////////////////////////////////////
49
inline void CardMaker::set_has_3d_uvs(bool flag);

250 9 set_frame 0 4 465 20 CardMaker::set_frame 0 3 11 12 13 733
////////////////////////////////////////////////////////////////////
//     Function: CardMaker::set_frame
//       Access: Public
//  Description: Sets the size of the card.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: CardMaker::set_frame
//       Access: Public
//  Description: Sets the size of the card.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: CardMaker::set_frame
//       Access: Public
//  Description: Sets the size of the card.
////////////////////////////////////////////////////////////////////
275
inline void CardMaker::set_frame(PN_stdfloat left, PN_stdfloat right, PN_stdfloat bottom, PN_stdfloat top);
inline void CardMaker::set_frame(LVecBase4 const &frame);
inline void CardMaker::set_frame(LVertex const &ll, LVertex const &lr, LVertex const &ur, LVertex const &ul);

251 25 set_frame_fullscreen_quad 0 4 465 36 CardMaker::set_frame_fullscreen_quad 0 1 14 387
////////////////////////////////////////////////////////////////////
//     Function: CardMaker::set_frame_fullscreen_quad
//       Access: Public
//  Description: Sets the card to (-1,1,-1,1), which is appropriate
//               if you plan to parent it to render2d and use it
//               as a fullscreen quad.
////////////////////////////////////////////////////////////////////
55
inline void CardMaker::set_frame_fullscreen_quad(void);

252 9 set_color 0 4 465 20 CardMaker::set_color 0 2 15 16 490
////////////////////////////////////////////////////////////////////
//     Function: CardMaker::set_color
//       Access: Public
//  Description: Sets the color of the card.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: CardMaker::set_color
//       Access: Public
//  Description: Sets the color of the card.
////////////////////////////////////////////////////////////////////
148
inline void CardMaker::set_color(PN_stdfloat r, PN_stdfloat g, PN_stdfloat b, PN_stdfloat a);
inline void CardMaker::set_color(LColor const &color);

253 15 set_has_normals 0 4 465 26 CardMaker::set_has_normals 0 1 17 657
////////////////////////////////////////////////////////////////////
//     Function: CardMaker::set_has_normals
//       Access: Public
//  Description: Sets the flag indicating whether vertices will be
//               generated with normals or not.  Normals are required
//               if you intend to enable lighting on the card, but are
//               just wasted space and bandwidth otherwise, so there
//               is a (slight) optimization for disabling them.  If
//               enabled, the normals will be generated perpendicular
//               to the card's face.
////////////////////////////////////////////////////////////////////
50
inline void CardMaker::set_has_normals(bool flag);

254 19 set_source_geometry 0 4 465 30 CardMaker::set_source_geometry 0 1 18 799
////////////////////////////////////////////////////////////////////
//     Function: CardMaker::set_source_geometry
//       Access: Published
//  Description: Sets a node that will be copied (and scaled and
//               translated) to generate the frame, instead of
//               generating a new polygon.  The node may contain
//               arbitrary geometry that describes a flat polygon
//               contained within the indicated left, right, bottom,
//               top frame.
//
//               When generate() is called, the geometry in this node
//               will be scaled and translated appropriately to give
//               it the size and aspect ratio specified by
//               set_frame().
////////////////////////////////////////////////////////////////////
84
inline void CardMaker::set_source_geometry(PandaNode *node, LVecBase4 const &frame);

255 21 clear_source_geometry 0 4 465 32 CardMaker::clear_source_geometry 0 1 19 320
////////////////////////////////////////////////////////////////////
//     Function: CardMaker::clear_source_geometry
//       Access: Published
//  Description: Removes the node specified by an earlier call to
//               set_source_geometry().
////////////////////////////////////////////////////////////////////
51
inline void CardMaker::clear_source_geometry(void);

256 8 generate 0 4 465 19 CardMaker::generate 0 1 20 290
////////////////////////////////////////////////////////////////////
//     Function: CardMaker::generate
//       Access: Public
//  Description: Generates a GeomNode that renders the specified
//               geometry.
////////////////////////////////////////////////////////////////////
49
PointerTo< PandaNode > CardMaker::generate(void);

257 12 FisheyeMaker 0 4 467 26 FisheyeMaker::FisheyeMaker 0 1 21 221
////////////////////////////////////////////////////////////////////
//     Function: FisheyeMaker::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
54
inline FisheyeMaker::FisheyeMaker(string const &name);

258 13 ~FisheyeMaker 0 4 467 27 FisheyeMaker::~FisheyeMaker 0 0 220
////////////////////////////////////////////////////////////////////
//     Function: FisheyeMaker::Destructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
41
inline FisheyeMaker::~FisheyeMaker(void);

259 5 reset 0 4 467 19 FisheyeMaker::reset 0 1 22 268
////////////////////////////////////////////////////////////////////
//     Function: FisheyeMaker::reset
//       Access: Public
//  Description: Resets all the parameters to their initial defaults.
////////////////////////////////////////////////////////////////////
31
void FisheyeMaker::reset(void);

260 7 set_fov 0 4 467 21 FisheyeMaker::set_fov 0 1 23 384
////////////////////////////////////////////////////////////////////
//     Function: FisheyeMaker::set_fov
//       Access: Public
//  Description: Specifies the field of view of the fisheye
//               projection.  A sphere map will have a 360-degree
//               field of view (and this is the default).
////////////////////////////////////////////////////////////////////
44
void FisheyeMaker::set_fov(PN_stdfloat fov);

261 16 set_num_vertices 0 4 467 30 FisheyeMaker::set_num_vertices 0 1 24 596
////////////////////////////////////////////////////////////////////
//     Function: FisheyeMaker::set_num_vertices
//       Access: Public
//  Description: Specifies the approximate number of vertices to be
//               used to generate the rose.  This is the approximate
//               number of vertices that will be located within the
//               rose's unit circle, not counting the inscribing
//               square (if any).  The actual number of vertices used
//               may be +/- 25% of this value.
////////////////////////////////////////////////////////////////////
61
inline void FisheyeMaker::set_num_vertices(int num_vertices);

262 20 set_square_inscribed 0 4 467 34 FisheyeMaker::set_square_inscribed 0 1 25 946
////////////////////////////////////////////////////////////////////
//     Function: FisheyeMaker::set_square_inscribed
//       Access: Public
//  Description: Sets the flag that indicates whether the rose should
//               be inscribed within a square.  When this is true, an
//               additional square is generated to inscribed the
//               circular rose, with the indicated "radius" (the sides
//               of the square will be 2 * square_radius).  The
//               texture coordinates of the square will uniformly map
//               to the back pole of the cube map.
//
//               This is mainly useful to provide a good uniform
//               background color for a sphere map so that it does not
//               have a sharp circular edge that might produce
//               artifacts due to numerical imprecision when mapping.
////////////////////////////////////////////////////////////////////
97
inline void FisheyeMaker::set_square_inscribed(bool square_inscribed, PN_stdfloat square_radius);

263 14 set_reflection 0 4 467 28 FisheyeMaker::set_reflection 0 1 26 614
////////////////////////////////////////////////////////////////////
//     Function: FisheyeMaker::set_reflection
//       Access: Public
//  Description: Sets the flag indicating whether the texture image
//               should be mirrored (true) or normal (false).  When
//               this is true, the 3-D texture coordinates will be
//               reversed so that the image is appropriate for a
//               reflection.  This is the best choice for generating a
//               sphere map from a cube map.  The default is false.
////////////////////////////////////////////////////////////////////
58
inline void FisheyeMaker::set_reflection(bool reflection);

264 8 generate 0 4 467 22 FisheyeMaker::generate 0 1 27 293
////////////////////////////////////////////////////////////////////
//     Function: FisheyeMaker::generate
//       Access: Public
//  Description: Generates a GeomNode that renders the specified
//               geometry.
////////////////////////////////////////////////////////////////////
52
PointerTo< PandaNode > FisheyeMaker::generate(void);

265 14 FrameRateMeter 0 4 468 30 FrameRateMeter::FrameRateMeter 0 1 28 226
////////////////////////////////////////////////////////////////////
//     Function: FrameRateMeter::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
51
FrameRateMeter::FrameRateMeter(string const &name);

266 12 setup_window 0 4 468 28 FrameRateMeter::setup_window 0 1 29 360
////////////////////////////////////////////////////////////////////
//     Function: FrameRateMeter::setup_window
//       Access: Published
//  Description: Sets up the frame rate meter to create a
//               DisplayRegion to render itself into the indicated
//               window.
////////////////////////////////////////////////////////////////////
58
void FrameRateMeter::setup_window(GraphicsOutput *window);

267 12 clear_window 0 4 468 28 FrameRateMeter::clear_window 0 1 30 300
////////////////////////////////////////////////////////////////////
//     Function: FrameRateMeter::clear_window
//       Access: Published
//  Description: Undoes the effect of a previous call to
//               setup_window().
////////////////////////////////////////////////////////////////////
40
void FrameRateMeter::clear_window(void);

268 10 get_window 0 4 468 26 FrameRateMeter::get_window 0 1 31 368
////////////////////////////////////////////////////////////////////
//     Function: FrameRateMeter::get_window
//       Access: Published
//  Description: Returns the GraphicsOutput that was passed to
//               setup_window(), or NULL if setup_window() has not
//               been called.
////////////////////////////////////////////////////////////////////
62
inline GraphicsOutput *FrameRateMeter::get_window(void) const;

269 18 get_display_region 0 4 468 34 FrameRateMeter::get_display_region 0 1 32 419
////////////////////////////////////////////////////////////////////
//     Function: FrameRateMeter::get_display_region
//       Access: Published
//  Description: Returns the DisplayRegion that the meter has created
//               to render itself into the window to setup_window(),
//               or NULL if setup_window() has not been called.
////////////////////////////////////////////////////////////////////
69
inline DisplayRegion *FrameRateMeter::get_display_region(void) const;

270 19 set_update_interval 0 4 468 35 FrameRateMeter::set_update_interval 0 1 33 537
////////////////////////////////////////////////////////////////////
//     Function: FrameRateMeter::set_update_interval
//       Access: Published
//  Description: Specifies the number of seconds that should elapse
//               between updates to the frame rate indication.  This
//               should be reasonably slow (e.g. 0.2 to 1.0) so that
//               the calculation of the frame rate text does not
//               itself dominate the frame rate.
////////////////////////////////////////////////////////////////////
72
inline void FrameRateMeter::set_update_interval(double update_interval);

271 19 get_update_interval 0 4 468 35 FrameRateMeter::get_update_interval 0 1 34 344
////////////////////////////////////////////////////////////////////
//     Function: FrameRateMeter::get_update_interval
//       Access: Published
//  Description: Returns the number of seconds that will elapse
//               between updates to the frame rate indication.
////////////////////////////////////////////////////////////////////
62
inline double FrameRateMeter::get_update_interval(void) const;

272 16 set_text_pattern 0 4 468 32 FrameRateMeter::set_text_pattern 0 1 35 442
////////////////////////////////////////////////////////////////////
//     Function: FrameRateMeter::set_text_pattern
//       Access: Published
//  Description: Sets the sprintf() pattern that is used to format the
//               text.  The string "%f" or some variant will be
//               replaced with the current frame rate in frames per
//               second.
////////////////////////////////////////////////////////////////////
73
inline void FrameRateMeter::set_text_pattern(string const &text_pattern);

273 16 get_text_pattern 0 4 468 32 FrameRateMeter::get_text_pattern 0 1 36 311
////////////////////////////////////////////////////////////////////
//     Function: FrameRateMeter::get_text_pattern
//       Access: Published
//  Description: Returns the sprintf() pattern that is used to format the
//               text.
////////////////////////////////////////////////////////////////////
66
inline string const &FrameRateMeter::get_text_pattern(void) const;

274 16 set_clock_object 0 4 468 32 FrameRateMeter::set_clock_object 0 1 37 404
////////////////////////////////////////////////////////////////////
//     Function: FrameRateMeter::set_clock_object
//       Access: Published
//  Description: Sets the clock that is used to determine the frame
//               rate.  The default is the application's global clock
//               (ClockObject::get_global_clock()).
////////////////////////////////////////////////////////////////////
72
inline void FrameRateMeter::set_clock_object(ClockObject *clock_object);

275 16 get_clock_object 0 4 468 32 FrameRateMeter::get_clock_object 0 1 38 308
////////////////////////////////////////////////////////////////////
//     Function: FrameRateMeter::get_clock_object
//       Access: Published
//  Description: Returns the clock that is used to determine the frame
//               rate.
////////////////////////////////////////////////////////////////////
65
inline ClockObject *FrameRateMeter::get_clock_object(void) const;

276 6 update 0 4 468 22 FrameRateMeter::update 0 1 39 442
////////////////////////////////////////////////////////////////////
//     Function: FrameRateMeter::update
//       Access: Published
//  Description: You can call this to explicitly force the
//               FrameRateMeter to update itself with the latest frame
//               rate information.  Normally, it is not necessary to
//               call this explicitly.
////////////////////////////////////////////////////////////////////
41
inline void FrameRateMeter::update(void);

277 14 get_class_type 0 4 468 30 FrameRateMeter::get_class_type 0 1 40 0
55
static TypeHandle FrameRateMeter::get_class_type(void);

278 13 GeoMipTerrain 0 4 470 28 GeoMipTerrain::GeoMipTerrain 0 1 41 225
////////////////////////////////////////////////////////////////////
//     Function: GeoMipTerrain::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
56
inline GeoMipTerrain::GeoMipTerrain(string const &name);

279 11 heightfield 0 4 470 26 GeoMipTerrain::heightfield 0 1 42 396
////////////////////////////////////////////////////////////////////
//     Function: GeoMipTerrain::heightfield
//       Access: Published
//  Description: Returns a reference to the heightfield (a PNMImage)
//               contained inside GeoMipTerrain.  You can use
//               the reference to alter the heightfield.
////////////////////////////////////////////////////////////////////
50
inline PNMImage &GeoMipTerrain::heightfield(void);

280 15 set_heightfield 0 4 470 30 GeoMipTerrain::set_heightfield 0 2 43 44 1024
////////////////////////////////////////////////////////////////////
//     Function: GeoMipTerrain::set_heightfield
//       Access: Published
//  Description: Loads the specified heightmap image file into
//               the heightfield. Returns true if succeeded, or
//               false if an error has occured.
//               If the heightmap is not a power of two plus one,
//               it is scaled up using a gaussian filter.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GeoMipTerrain::set_heightfield
//       Access: Published
//  Description: Loads the specified heightmap image file into
//               the heightfield. Returns true if succeeded, or
//               false if an error has occured.
//               If the heightmap is not a power of two plus one,
//               it is scaled up using a gaussian filter.
////////////////////////////////////////////////////////////////////
152
bool GeoMipTerrain::set_heightfield(Filename const &filename, PNMFileType *type = 0);
inline bool GeoMipTerrain::set_heightfield(PNMImage const &image);

281 9 color_map 0 4 470 24 GeoMipTerrain::color_map 0 1 45 390
////////////////////////////////////////////////////////////////////
//     Function: GeoMipTerrain::color_map
//       Access: Published
//  Description: Returns a reference to the color map (a PNMImage)
//               contained inside GeoMipTerrain.  You can use
//               the reference to alter the color map.
////////////////////////////////////////////////////////////////////
48
inline PNMImage &GeoMipTerrain::color_map(void);

282 13 set_color_map 0 4 470 28 GeoMipTerrain::set_color_map 0 4 46 47 48 49 511
////////////////////////////////////////////////////////////////////
//     Function: GeoMipTerrain::set_color_map
//       Access: Published
//  Description: Loads the specified image as color map. The next
//               time generate() is called, the terrain is painted
//               with this color map using the vertex color column.
//               Returns a boolean indicating whether the operation
//               has succeeded.
////////////////////////////////////////////////////////////////////
281
inline bool GeoMipTerrain::set_color_map(Filename const &filename, PNMFileType *type = 0);
inline bool GeoMipTerrain::set_color_map(PNMImage const &image);
inline bool GeoMipTerrain::set_color_map(Texture const *image);
inline bool GeoMipTerrain::set_color_map(string const &path);

283 13 has_color_map 0 4 470 28 GeoMipTerrain::has_color_map 0 1 50 269
////////////////////////////////////////////////////////////////////
//     Function: GeoMipTerrain::has_color_map
//       Access: Published
//  Description: Returns whether a color map has been set.
////////////////////////////////////////////////////////////////////
53
inline bool GeoMipTerrain::has_color_map(void) const;

284 15 clear_color_map 0 4 470 30 GeoMipTerrain::clear_color_map 0 1 51 251
////////////////////////////////////////////////////////////////////
//     Function: GeoMipTerrain::clear_color_map
//       Access: Published
//  Description: Clears the color map.
////////////////////////////////////////////////////////////////////
49
inline void GeoMipTerrain::clear_color_map(void);

285 22 calc_ambient_occlusion 0 4 470 37 GeoMipTerrain::calc_ambient_occlusion 0 1 52 533
////////////////////////////////////////////////////////////////////
//     Function: GeoMipTerrain::calc_ambient_occlusion
//       Access: Published
//  Description: Calculates an approximate for the ambient occlusion
//               and stores it in the color map, so that it will be
//               written to the vertex colors. Any existing color
//               map will be discarded.
//               You need to call this before generating the geometry.
////////////////////////////////////////////////////////////////////
141
void GeoMipTerrain::calc_ambient_occlusion(PN_stdfloat radius = 32, PN_stdfloat contrast = 2.0, PN_stdfloat brightness = 0.7500000000000001);

286 13 get_elevation 0 4 470 28 GeoMipTerrain::get_elevation 0 1 53 745
////////////////////////////////////////////////////////////////////
//     Function: GeoMipTerrain::get_elevation
//       Access: Published
//  Description: Fetches the elevation at (x, y), where the input
//               coordinate is specified in pixels. This ignores
//               the current LOD level and instead provides an
//               accurate number. Linear blending is used for
//               non-integral coordinates.
//               Terrain scale is NOT taken into account! To get
//               accurate normals, please multiply this with the
//               terrain Z scale!
//
//               trueElev = terr.get_elevation(x,y) * terr.get_sz();
////////////////////////////////////////////////////////////////////
56
double GeoMipTerrain::get_elevation(double x, double y);

287 10 get_normal 0 4 470 25 GeoMipTerrain::get_normal 0 2 54 55 1529
////////////////////////////////////////////////////////////////////
//     Function: GeoMipTerrain::get_normal
//       Access: Published
//  Description: Fetches the terrain normal at (x,y), where the input
//               coordinate is specified in pixels. This ignores the
//               current LOD level and instead provides an
//               accurate number.
//               Terrain scale is NOT taken into account! To get
//               accurate normals, please divide it by the
//               terrain scale and normalize it again!
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GeoMipTerrain::get_normal
//       Access: Published
//  Description: Fetches the terrain normal at (x, y), where the
//               input coordinate is specified in pixels. This
//               ignores the current LOD level and instead provides
//               an accurate number.
//               Terrain scale is NOT taken into account! To get
//               accurate normals, please divide it by the
//               terrain scale and normalize it again, like this:
//
//               LVector3 normal (terr.get_normal(x, y));
//               normal.set(normal.get_x() / root.get_sx(),
//                          normal.get_y() / root.get_sy(),
//                          normal.get_z() / root.get_sz());
//               normal.normalize();
////////////////////////////////////////////////////////////////////
152
LVector3 GeoMipTerrain::get_normal(int x, int y);
inline LVector3 GeoMipTerrain::get_normal(unsigned short int mx, unsigned short int my, int x, int y);

288 14 set_bruteforce 0 4 470 29 GeoMipTerrain::set_bruteforce 0 1 56 518
////////////////////////////////////////////////////////////////////
//     Function: GeoMipTerrain::set_bruteforce
//       Access: Published
//  Description: Sets a boolean specifying whether the terrain will
//               be rendered bruteforce. If the terrain is rendered
//               bruteforce, there will be no Level of Detail, and
//               the update() call will only update the
//               terrain if it is marked dirty.
////////////////////////////////////////////////////////////////////
51
inline void GeoMipTerrain::set_bruteforce(bool bf);

289 14 get_bruteforce 0 4 470 29 GeoMipTerrain::get_bruteforce 0 1 57 372
////////////////////////////////////////////////////////////////////
//     Function: GeoMipTerrain::get_bruteforce
//       Access: Published
//  Description: Returns a boolean whether the terrain is rendered
//               bruteforce or not. See set_bruteforce for more
//               information.
////////////////////////////////////////////////////////////////////
48
inline bool GeoMipTerrain::get_bruteforce(void);

290 16 set_auto_flatten 0 4 470 31 GeoMipTerrain::set_auto_flatten 0 1 58 473
////////////////////////////////////////////////////////////////////
//     Function: GeoMipTerrain::set_auto_flatten
//       Access: Private
//  Description: The terrain can be automatically flattened (using
//               flatten_light, flatten_medium, or flatten_strong)
//               after each update.  This only affects future
//               updates, it doesn't flatten the current terrain.
////////////////////////////////////////////////////////////////////
54
inline void GeoMipTerrain::set_auto_flatten(int mode);

291 15 set_focal_point 0 4 470 30 GeoMipTerrain::set_focal_point 0 6 59 60 61 62 63 64 935
// The focal point is the point at which the terrain will have the
// highest quality (lowest level of detail). Parts farther away from
// the focal point will have a lower quality (higher level of detail).
// The focal point is not taken in respect if bruteforce is set true.

////////////////////////////////////////////////////////////////////
//     Function: GeoMipTerrain::set_focal_point
//       Access: Published
//  Description: Sets the focal point.  GeoMipTerrain generates
//               high-resolution terrain around the focal point, and
//               progressively lower and lower resolution terrain
//               as you get farther away. If a point is supplied
//               and not a NodePath, make sure it's relative to
//               the terrain. Only the x and y coordinates of
//               the focal point are taken in respect.
////////////////////////////////////////////////////////////////////
377
inline void GeoMipTerrain::set_focal_point(LPoint2d const &fp);
inline void GeoMipTerrain::set_focal_point(LPoint2f const &fp);
inline void GeoMipTerrain::set_focal_point(LPoint3d const &fp);
inline void GeoMipTerrain::set_focal_point(LPoint3f const &fp);
inline void GeoMipTerrain::set_focal_point(double x, double y);
inline void GeoMipTerrain::set_focal_point(NodePath fnp);

292 15 get_focal_point 0 4 470 30 GeoMipTerrain::get_focal_point 0 1 65 394
////////////////////////////////////////////////////////////////////
//     Function: GeoMipTerrain::get_focal_point
//       Access: Published
//  Description: Returns the focal point, as a NodePath.
//               If you have set it to be just a point, it will
//               return an empty node at the focal position.
////////////////////////////////////////////////////////////////////
59
inline NodePath GeoMipTerrain::get_focal_point(void) const;

293 8 get_root 0 4 470 23 GeoMipTerrain::get_root 0 1 66 546
////////////////////////////////////////////////////////////////////
//     Function: GeoMipTerrain::get_root
//       Access: Published
//  Description: Returns the root of the terrain.  This is a
//               single PandaNode to which all the rest of the
//               terrain is parented.  The generate and update
//               operations replace the nodes which are parented
//               to this root, but they don't replace this root
//               itself.
////////////////////////////////////////////////////////////////////
52
inline NodePath GeoMipTerrain::get_root(void) const;

294 14 set_block_size 0 4 470 29 GeoMipTerrain::set_block_size 0 1 67 329
////////////////////////////////////////////////////////////////////
//     Function: GeoMipTerrain::set_block_size
//       Access: Published
//  Description: Sets the block size. If it is not a power of two,
//               the closest power of two is used.
////////////////////////////////////////////////////////////////////
68
inline void GeoMipTerrain::set_block_size(unsigned short int newbs);

295 14 get_block_size 0 4 470 29 GeoMipTerrain::get_block_size 0 1 68 249
////////////////////////////////////////////////////////////////////
//     Function: GeoMipTerrain::get_block_size
//       Access: Published
//  Description: Gets the block size.
////////////////////////////////////////////////////////////////////
62
inline unsigned short int GeoMipTerrain::get_block_size(void);

296 13 get_max_level 0 4 470 28 GeoMipTerrain::get_max_level 0 1 69 387
////////////////////////////////////////////////////////////////////
//     Function: GeoMipTerrain::get_max_level
//       Access: Published
//  Description: Returns the highest level possible for this block
//               size. When a block is at this level, it will be
//               the worst quality possible.
////////////////////////////////////////////////////////////////////
61
inline unsigned short int GeoMipTerrain::get_max_level(void);

297 13 set_min_level 0 4 470 28 GeoMipTerrain::set_min_level 0 1 70 518
////////////////////////////////////////////////////////////////////
//     Function: GeoMipTerrain::set_min_level
//       Access: Published
//  Description: Sets the minimum level of detail at which blocks
//               may be generated by generate() or update().
//               The default value is 0, which is the highest
//               quality. This value is also taken in respect when
//               generating the terrain bruteforce.
////////////////////////////////////////////////////////////////////
70
inline void GeoMipTerrain::set_min_level(unsigned short int minlevel);

298 13 get_min_level 0 4 470 28 GeoMipTerrain::get_min_level 0 1 71 425
////////////////////////////////////////////////////////////////////
//     Function: GeoMipTerrain::get_min_level
//       Access: Published
//  Description: Gets the minimum level of detail at which blocks
//               may be generated by generate() or update().
//               The default value is 0, which is the highest
//               quality.
////////////////////////////////////////////////////////////////////
61
inline unsigned short int GeoMipTerrain::get_min_level(void);

299 8 is_dirty 0 4 470 23 GeoMipTerrain::is_dirty 0 1 72 585
////////////////////////////////////////////////////////////////////
//     Function: GeoMipTerrain::is_dirty
//       Access: Published
//  Description: Returns a bool indicating whether the terrain is
//               marked 'dirty', that means the terrain has to be
//               regenerated on the next update() call, because
//               for instance the heightfield has changed.
//               Once the terrain has been regenerated, the dirty
//               flag automatically gets reset internally.
////////////////////////////////////////////////////////////////////
42
inline bool GeoMipTerrain::is_dirty(void);

300 10 set_factor 0 4 470 25 GeoMipTerrain::set_factor 0 1 73 633
////////////////////////////////////////////////////////////////////
//     Function: GeoMipTerrain::set_factor
//       Access: Published
//  Description: DEPRECATED method. Use set_near/far instead.
//               Sets the quality factor at which blocks must be
//               generated. The higher this level, the better
//               quality the terrain will be, but more expensive
//               to render. A value of 0 makes the terrain the
//               lowest quality possible, depending on blocksize.
//               The default value is 100.
////////////////////////////////////////////////////////////////////
58
inline void GeoMipTerrain::set_factor(PN_stdfloat factor);

301 12 set_near_far 0 4 470 27 GeoMipTerrain::set_near_far 0 1 74 275
////////////////////////////////////////////////////////////////////
//     Function: GeoMipTerrain::set_near_far
//       Access: Published
//  Description: Sets the near and far LOD distances in one call.
////////////////////////////////////////////////////////////////////
77
inline void GeoMipTerrain::set_near_far(double input_near, double input_far);

302 8 set_near 0 4 470 23 GeoMipTerrain::set_near 0 1 75 394
////////////////////////////////////////////////////////////////////
//     Function: GeoMipTerrain::set_near
//       Access: Published
//  Description: Sets the near LOD distance, at which the terrain
//               will be rendered at highest quality.
//               This distance is in the terrain's coordinate space!
////////////////////////////////////////////////////////////////////
55
inline void GeoMipTerrain::set_near(double input_near);

303 7 set_far 0 4 470 22 GeoMipTerrain::set_far 0 1 76 391
////////////////////////////////////////////////////////////////////
//     Function: GeoMipTerrain::set_far
//       Access: Published
//  Description: Sets the far LOD distance, at which the terrain
//               will be rendered at lowest quality.
//               This distance is in the terrain's coordinate space!
////////////////////////////////////////////////////////////////////
53
inline void GeoMipTerrain::set_far(double input_far);

304 19 get_block_node_path 0 4 470 34 GeoMipTerrain::get_block_node_path 0 1 77 724
////////////////////////////////////////////////////////////////////
//     Function: GeoMipTerrain::get_block_node_path
//       Access: Published
//  Description: Returns the NodePath of the specified block.
//               If auto-flatten is enabled and the node is
//               getting removed during the flattening process,
//               it will still return a NodePath with the
//               appropriate terrain chunk, but it will be in
//               a temporary scenegraph.
//               Please note that this returns a const object and
//               you can not modify the node. Modify the heightfield
//               instead.
////////////////////////////////////////////////////////////////////
103
inline NodePath const GeoMipTerrain::get_block_node_path(unsigned short int mx, unsigned short int my);

305 18 get_block_from_pos 0 4 470 33 GeoMipTerrain::get_block_from_pos 0 1 78 832
////////////////////////////////////////////////////////////////////
//     Function: GeoMipTerrain::get_block_from_pos
//       Access: Published
//  Description: Gets the coordinates of the block at the specified
//               position. This position must be relative to the
//               terrain, not to render. Returns an array containing
//               two values: the block x and the block y coords.
//               If the positions are out of range, the closest
//               block is taken.
//               Note that the VecBase returned does not represent
//               a vector, position, or rotation, but it contains
//               the block index of the block which you can use
//               in GeoMipTerrain::get_block_node_path.
////////////////////////////////////////////////////////////////////
71
inline LVecBase2 GeoMipTerrain::get_block_from_pos(double x, double y);

306 20 set_border_stitching 0 4 470 35 GeoMipTerrain::set_border_stitching 0 1 79 690
////////////////////////////////////////////////////////////////////
//     Function: GeoMipTerrain::set_border_stitching
//       Access: Published
//  Description: If this value is true, the LOD level at the
//               borders of the terrain will be 0. This is useful
//               if you have multiple terrains attached and you
//               want to stitch them together, to fix seams.
//               This setting also has effect when bruteforce is
//               enabled, although in that case you are probably
//               better off with setting the minlevels to the same
//               value.
////////////////////////////////////////////////////////////////////
64
inline void GeoMipTerrain::set_border_stitching(bool stitching);

307 20 get_border_stitching 0 4 470 35 GeoMipTerrain::get_border_stitching 0 1 80 336
////////////////////////////////////////////////////////////////////
//     Function: GeoMipTerrain::get_stitching
//       Access: Published
//  Description: Returns the current stitching setting. False by
//               default, unless set_stitching has been set.
////////////////////////////////////////////////////////////////////
54
inline bool GeoMipTerrain::get_border_stitching(void);

308 7 get_far 0 4 470 22 GeoMipTerrain::get_far 0 1 81 299
////////////////////////////////////////////////////////////////////
//     Function: GeoMipTerrain::get_far
//       Access: Published
//  Description: Returns the far LOD distance in the terrain coordinate
//               space
////////////////////////////////////////////////////////////////////
43
inline double GeoMipTerrain::get_far(void);

309 8 get_near 0 4 470 23 GeoMipTerrain::get_near 0 1 82 301
////////////////////////////////////////////////////////////////////
//     Function: GeoMipTerrain::get_near
//       Access: Published
//  Description: Returns the near LOD distance in the terrain coordinate
//               space
////////////////////////////////////////////////////////////////////
44
inline double GeoMipTerrain::get_near(void);

310 16 get_flatten_mode 0 4 470 31 GeoMipTerrain::get_flatten_mode 0 1 83 344
////////////////////////////////////////////////////////////////////
//     Function: GeoMipTerrain::get_flatten_mode
//       Access: Published
//  Description: Returns the automatic-flatten mode (e.g., off,
//               flatten_light, flatten_medium, or flatten_strong)
////////////////////////////////////////////////////////////////////
49
inline int GeoMipTerrain::get_flatten_mode(void);

311 16 make_slope_image 0 4 470 31 GeoMipTerrain::make_slope_image 0 1 84 888
////////////////////////////////////////////////////////////////////
//     Function: GeoMipTerrain::make_slope_image
//       Access: Published
//  Description: Returns a new grayscale image containing the slope
//               angles. A white pixel value means a vertical slope,
//               while a black pixel will mean that the terrain is
//               entirely flat at that pixel.
//               You can translate it to degrees by mapping the
//               greyscale values from 0 to 90 degrees.
//               The resulting image will have the same size as the
//               heightfield image.
//               The scale will be taken into respect -- meaning,
//               if you change the terrain scale, the slope image
//               will need to be regenerated in order to be correct.
////////////////////////////////////////////////////////////////////
47
PNMImage GeoMipTerrain::make_slope_image(void);

312 8 generate 0 4 470 23 GeoMipTerrain::generate 0 1 85 463
////////////////////////////////////////////////////////////////////
//     Function: GeoMipTerrain::generate
//       Access: Published
//  Description: (Re)generates the entire terrain, erasing the
//               current.
//               This call un-flattens the terrain, so make sure
//               you have set auto-flatten if you want to keep
//               your terrain flattened.
////////////////////////////////////////////////////////////////////
35
void GeoMipTerrain::generate(void);

313 6 update 0 4 470 21 GeoMipTerrain::update 0 1 86 790
////////////////////////////////////////////////////////////////////
//     Function: GeoMipTerrain::update
//       Access: Published
//  Description: Loops through all of the terrain blocks, and
//               checks whether they need to be updated.
//               If that is indeed the case, it regenerates the
//               mipmap. Returns a true when the terrain has
//               changed. Returns false when the terrain isn't
//               updated at all. If there is no terrain yet,
//               it generates the entire terrain.
//               This call un-flattens the terrain, so make sure
//               you have set auto-flatten if you want to keep
//               your terrain flattened.
////////////////////////////////////////////////////////////////////
33
bool GeoMipTerrain::update(void);

314 14 get_class_type 0 4 470 29 GeoMipTerrain::get_class_type 0 1 87 0
54
static TypeHandle GeoMipTerrain::get_class_type(void);

315 21 HeightfieldTesselator 0 4 473 44 HeightfieldTesselator::HeightfieldTesselator 0 1 88 233
////////////////////////////////////////////////////////////////////
//     Function: HeightfieldTesselator::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
72
inline HeightfieldTesselator::HeightfieldTesselator(string const &name);

316 22 ~HeightfieldTesselator 0 4 473 45 HeightfieldTesselator::~HeightfieldTesselator 0 0 232
////////////////////////////////////////////////////////////////////
//     Function: HeightfieldTesselator::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
59
inline HeightfieldTesselator::~HeightfieldTesselator(void);

317 11 heightfield 0 4 473 34 HeightfieldTesselator::heightfield 0 1 89 416
////////////////////////////////////////////////////////////////////
//     Function: HeightfieldTesselator::heightfield
//       Access: Published
//  Description: Returns a reference to the heightfield (a PNMImage)
//               contained inside the HeightfieldTesselator.  You
//               can use the reference to alter the heightfield.
////////////////////////////////////////////////////////////////////
58
inline PNMImage &HeightfieldTesselator::heightfield(void);

318 15 set_heightfield 0 4 473 38 HeightfieldTesselator::set_heightfield 0 1 90 317
////////////////////////////////////////////////////////////////////
//     Function: HeightfieldTesselator::set_heightfield
//       Access: Published
//  Description: Loads the specified greyscale image file into
//               the heightfield.
////////////////////////////////////////////////////////////////////
100
inline bool HeightfieldTesselator::set_heightfield(Filename const &filename, PNMFileType *type = 0);

319 14 set_poly_count 0 4 473 37 HeightfieldTesselator::set_poly_count 0 1 91 385
////////////////////////////////////////////////////////////////////
//     Function: HeightfieldTesselator::set_poly_count
//       Access: Public
//  Description: Sets the polygon-count target.  The tesselator
//               usually manages to come within about 20% of the
//               target, plus or minus.
////////////////////////////////////////////////////////////////////
57
inline void HeightfieldTesselator::set_poly_count(int n);

320 21 set_visibility_radius 0 4 473 44 HeightfieldTesselator::set_visibility_radius 0 1 92 677
////////////////////////////////////////////////////////////////////
//     Function: HeightfieldTesselator::set_visibility_radius
//       Access: Published
//  Description: Sets the visibility radius.  Polygons that
//               are completely outside the radius (relative to
//               the focal point) are cropped away.  The cropping
//               is imperfect (all approximations are conservative),
//               so this should be used in conjunction with a far
//               clipping plane, fog, or some other visibility
//               limiting mechanism.  The units are in pixels.
////////////////////////////////////////////////////////////////////
64
inline void HeightfieldTesselator::set_visibility_radius(int r);

321 15 set_focal_point 0 4 473 38 HeightfieldTesselator::set_focal_point 0 1 93 488
////////////////////////////////////////////////////////////////////
//     Function: HeightfieldTesselator::set_focal_point
//       Access: Published
//  Description: Sets the focal point.  The tesselator generates
//               high-resolution terrain around the focal point, and
//               progressively lower and lower resolution terrain
//               as you get farther away.  The units are in pixels.
////////////////////////////////////////////////////////////////////
65
inline void HeightfieldTesselator::set_focal_point(int x, int y);

322 20 set_horizontal_scale 0 4 473 43 HeightfieldTesselator::set_horizontal_scale 0 1 94 398
////////////////////////////////////////////////////////////////////
//     Function: HeightfieldTesselator::set_horizontal_scale
//       Access: Published
//  Description: Sets the horizontal scale.  The default scale is 1.0,
//               meaning that each pixel in the heightfield is
//               1x1 panda units wide.
////////////////////////////////////////////////////////////////////
66
inline void HeightfieldTesselator::set_horizontal_scale(double h);

323 18 set_vertical_scale 0 4 473 41 HeightfieldTesselator::set_vertical_scale 0 1 95 423
////////////////////////////////////////////////////////////////////
//     Function: HeightfieldTesselator::set_vertical_scale
//       Access: Published
//  Description: Sets the vertical scale.  The default scale is 255.0,
//               meaning that each as the gray value ranges from (0-1),
//               the elevation ranges from (0-255) feet.
////////////////////////////////////////////////////////////////////
64
inline void HeightfieldTesselator::set_vertical_scale(double v);

324 17 set_max_triangles 0 4 473 40 HeightfieldTesselator::set_max_triangles 0 1 96 272
////////////////////////////////////////////////////////////////////
//     Function: HeightfieldTesselator::set_max_triangles
//       Access: Published
//  Description: Sets the max triangles per geom.
////////////////////////////////////////////////////////////////////
60
inline void HeightfieldTesselator::set_max_triangles(int n);

325 13 get_elevation 0 4 473 36 HeightfieldTesselator::get_elevation 0 1 97 525
////////////////////////////////////////////////////////////////////
//     Function: HeightfieldTesselator::get_elevation
//       Access: Private
//  Description: Fetches the elevation at (x,y), where the input
//               coordinate is specified in pixels.  This ignores the
//               current tesselation level and instead provides an
//               accurate number.  Linear blending is used for 
//               non-integral coordinates.
////////////////////////////////////////////////////////////////////
64
double HeightfieldTesselator::get_elevation(double x, double y);

326 8 generate 0 4 473 31 HeightfieldTesselator::generate 0 1 98 346
////////////////////////////////////////////////////////////////////
//     Function: HeightfieldTesselator::generate
//       Access: Published
//  Description: Generates a tree of nodes that represents the
//               heightfield.  This can be reparented into the scene.
////////////////////////////////////////////////////////////////////
47
NodePath HeightfieldTesselator::generate(void);

327 8 LineSegs 0 4 474 18 LineSegs::LineSegs 0 1 99 649
////////////////////////////////////////////////////////////////////
//     Function: LineSegs::Constructor
//       Access: Public
//  Description: Constructs a LineSegs object, which can be used to
//               create any number of disconnected lines or points of
//               various thicknesses and colors through the visible
//               scene.  After creating the object, call move_to() and
//               draw_to() repeatedly to describe the path, then call
//               create() to create a GeomNode which will render the
//               described path.
////////////////////////////////////////////////////////////////////
49
LineSegs::LineSegs(string const &name = "lines");

328 9 ~LineSegs 0 4 474 19 LineSegs::~LineSegs 0 0 199
////////////////////////////////////////////////////////////////////
//     Function: LineSegs::Destructor
//       Access: Public
////////////////////////////////////////////////////////////////////
26
LineSegs::~LineSegs(void);

329 5 reset 0 4 474 15 LineSegs::reset 0 1 100 297
////////////////////////////////////////////////////////////////////
//     Function: LineSegs::reset
//       Access: Public
//  Description: Removes any lines in progress and resets to the
//               initial empty state.
////////////////////////////////////////////////////////////////////
27
void LineSegs::reset(void);

330 9 set_color 0 4 474 19 LineSegs::set_color 0 2 101 102 724
////////////////////////////////////////////////////////////////////
//     Function: LineSegs::set_color
//       Access: Public
//  Description: Establishes the color that will be assigned to all
//               vertices created by future calls to move_to() and
//               draw_to().
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LineSegs::set_color
//       Access: Public
//  Description: Establishes the color that will be assigned to all
//               vertices created by future calls to move_to() and
//               draw_to().
////////////////////////////////////////////////////////////////////
152
inline void LineSegs::set_color(PN_stdfloat r, PN_stdfloat g, PN_stdfloat b, PN_stdfloat a = 1.0);
inline void LineSegs::set_color(LColor const &color);

331 13 set_thickness 0 4 474 23 LineSegs::set_thickness 0 1 103 391
////////////////////////////////////////////////////////////////////
//     Function: LineSegs::set_thickness
//       Access: Public
//  Description: Establishes the line thickness or point size in
//               pixels that will be assigned to all lines and points
//               created by future calls to create().
////////////////////////////////////////////////////////////////////
55
inline void LineSegs::set_thickness(PN_stdfloat thick);

332 7 move_to 0 4 474 17 LineSegs::move_to 0 2 104 105 932
////////////////////////////////////////////////////////////////////
//     Function: LineSegs::move_to
//       Access: Public
//  Description: Moves the pen to the given point without drawing a
//               line.  When followed by draw_to(), this marks the
//               first point of a line segment; when followed by
//               move_to() or create(), this creates a single point.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LineSegs::move_to
//       Access: Public
//  Description: Moves the pen to the given point without drawing a
//               line.  When followed by draw_to(), this marks the
//               first point of a line segment; when followed by
//               move_to() or create(), this creates a single point.
////////////////////////////////////////////////////////////////////
119
inline void LineSegs::move_to(PN_stdfloat x, PN_stdfloat y, PN_stdfloat z);
void LineSegs::move_to(LVecBase3 const &v);

333 7 draw_to 0 4 474 17 LineSegs::draw_to 0 2 106 107 992
////////////////////////////////////////////////////////////////////
//     Function: LineSegs::draw_to
//       Access: Public
//  Description: Draws a line segment from the pen's last position
//               (the last call to move_to or draw_to) to the
//               indicated point.  move_to() and draw_to() only update
//               tables; the actual drawing is performed when create()
//               is called.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LineSegs::draw_to
//       Access: Public
//  Description: Draws a line segment from the pen's last position
//               (the last call to move_to or draw_to) to the
//               indicated point.  move_to() and draw_to() only update
//               tables; the actual drawing is performed when create()
//               is called.
////////////////////////////////////////////////////////////////////
119
inline void LineSegs::draw_to(PN_stdfloat x, PN_stdfloat y, PN_stdfloat z);
void LineSegs::draw_to(LVecBase3 const &v);

334 20 get_current_position 0 4 474 30 LineSegs::get_current_position 0 1 108 349
////////////////////////////////////////////////////////////////////
//     Function: LineSegs::get_current_position
//       Access: Public
//  Description: Returns the pen's current position.  The next call to
//               draw_to() will draw a line segment from this point.
////////////////////////////////////////////////////////////////////
52
LVertex const &LineSegs::get_current_position(void);

335 8 is_empty 0 4 474 18 LineSegs::is_empty 0 1 109 358
////////////////////////////////////////////////////////////////////
//     Function: LineSegs::empty
//       Access: Public
//  Description: Returns true if move_to() or draw_to() have not been
//               called since the last reset() or create(), false
//               otherwise.
////////////////////////////////////////////////////////////////////
30
bool LineSegs::is_empty(void);

336 6 create 0 4 474 16 LineSegs::create 0 2 110 111 1455
////////////////////////////////////////////////////////////////////
//     Function: LineSegs::create
//       Access: Public
//  Description: Creates a new GeomNode that will render the series of
//               line segments and points described via calls to
//               move_to() and draw_to().  The lines and points are
//               created with the color and thickness established by
//               calls to set_color() and set_thick().
//
//               If dynamic is true, the line segments will be created
//               with the dynamic Geom setting, optimizing them for
//               runtime vertex animation.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LineSegs::create
//       Access: Public
//  Description: Appends to an existing GeomNode a new Geom that
//               will render the series of line segments and points
//               described via calls to move_to() and draw_to().  The
//               lines and points are created with the color and
//               thickness established by calls to set_color() and
//               set_thick().
//
//               If dynamic is true, the line segments will be created
//               with the dynamic Geom setting, optimizing them for
//               runtime vertex animation.
////////////////////////////////////////////////////////////////////
118
inline GeomNode *LineSegs::create(bool dynamic = 0);
GeomNode *LineSegs::create(GeomNode *previous, bool dynamic = 0);

337 16 get_num_vertices 0 4 474 26 LineSegs::get_num_vertices 0 1 112 540
// Functions to move the line vertices after they have been created.

////////////////////////////////////////////////////////////////////
//     Function: LineSegs::get_num_vertices
//       Access: Public
//  Description: Returns the total number of line segment and point
//               vertices generated by the last call to create().  The
//               positions of these vertices may be read and adjusted
//               through get_vertex() and set_vertex().
////////////////////////////////////////////////////////////////////
50
inline int LineSegs::get_num_vertices(void) const;

338 10 get_vertex 0 4 474 20 LineSegs::get_vertex 0 1 113 513
////////////////////////////////////////////////////////////////////
//     Function: LineSegs::get_vertex
//       Access: Public
//  Description: Returns the nth point or vertex of the line segment
//               sequence generated by the last call to create().  The
//               first move_to() generates vertex 0; subsequent
//               move_to() and draw_to() calls generate consecutively
//               higher vertex numbers.
////////////////////////////////////////////////////////////////////
42
LVertex LineSegs::get_vertex(int n) const;

339 10 set_vertex 0 4 474 20 LineSegs::set_vertex 0 2 114 115 1024
////////////////////////////////////////////////////////////////////
//     Function: LineSegs::set_vertex
//       Access: Public
//  Description: Moves the nth point or vertex of the line segment
//               sequence generated by the last call to create().  The
//               first move_to() generates vertex 0; subsequent
//               move_to() and draw_to() calls generate consecutively
//               higher vertex numbers.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LineSegs::set_vertex
//       Access: Public
//  Description: Moves the nth point or vertex of the line segment
//               sequence generated by the last call to create().  The
//               first move_to() generates vertex 0; subsequent
//               move_to() and draw_to() calls generate consecutively
//               higher vertex numbers.
////////////////////////////////////////////////////////////////////
145
void LineSegs::set_vertex(int n, LVertex const &vert);
inline void LineSegs::set_vertex(int vertex, PN_stdfloat x, PN_stdfloat y, PN_stdfloat z);

340 16 get_vertex_color 0 4 474 26 LineSegs::get_vertex_color 0 1 116 268
////////////////////////////////////////////////////////////////////
//     Function: LineSegs::get_vertex_color
//       Access: Public
//  Description: Returns the color of the nth point or vertex.
////////////////////////////////////////////////////////////////////
52
LColor LineSegs::get_vertex_color(int vertex) const;

341 16 set_vertex_color 0 4 474 26 LineSegs::set_vertex_color 0 2 117 118 622
////////////////////////////////////////////////////////////////////
//     Function: LineSegs::set_vertex_color
//       Access: Public
//  Description: Changes the vertex color of the nth point or vertex.
//               See set_vertex().
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LineSegs::set_vertex_color
//       Access: Public
//  Description: Changes the vertex color of the nth point or vertex.
//               See set_vertex().
////////////////////////////////////////////////////////////////////
179
void LineSegs::set_vertex_color(int vertex, LColor const &c);
inline void LineSegs::set_vertex_color(int vertex, PN_stdfloat r, PN_stdfloat g, PN_stdfloat b, PN_stdfloat a = 1.0);

342 10 MeshDrawer 0 4 475 22 MeshDrawer::MeshDrawer 0 1 119 263
////////////////////////////////////////////////////////////////////
//     Function: MeshDrawer::Constructor
//       Access: Published
//  Description: Creates the MeshDrawer low level system.
////////////////////////////////////////////////////////////////////
36
inline MeshDrawer::MeshDrawer(void);

343 10 set_budget 0 4 475 22 MeshDrawer::set_budget 0 1 120 385
////////////////////////////////////////////////////////////////////
//     Function: MeshDrawer::set_budget
//       Access: Published
//  Description: Sets the total triangle budget of the drawer.
//               This will not be exceeded.  Don't set some thing too 
//               large because it will be slow
////////////////////////////////////////////////////////////////////
47
inline void MeshDrawer::set_budget(int budget);

344 10 get_budget 0 4 475 22 MeshDrawer::get_budget 0 1 121 268
////////////////////////////////////////////////////////////////////
//     Function: MeshDrawer::get_budget()
//       Access: Published
//  Description: Gets the total triangle budget of the drawer
////////////////////////////////////////////////////////////////////
40
inline int MeshDrawer::get_budget(void);

345 8 get_root 0 4 475 20 MeshDrawer::get_root 0 1 122 424
////////////////////////////////////////////////////////////////////
//     Function: MeshDrawer::get_root
//       Access: Published
//  Description: Returns the root NodePath.  You should use this node
//               to reparent mesh drawer onto the scene
//               might also want to disable depth draw or enable
//               transparency.
////////////////////////////////////////////////////////////////////
43
inline NodePath MeshDrawer::get_root(void);

346 5 begin 0 4 475 17 MeshDrawer::begin 0 1 123 367
////////////////////////////////////////////////////////////////////
//     Function: MeshDrawer::begin
//       Access: Published
//  Description: Pass the current camera node and the root node.
//               Passing the camera is required to generate
//               bill boards that face it.
////////////////////////////////////////////////////////////////////
57
void MeshDrawer::begin(NodePath camera, NodePath render);

347 3 tri 0 4 475 15 MeshDrawer::tri 0 1 124 258
////////////////////////////////////////////////////////////////////
//     Function: MeshDrawer::tri
//       Access: Published
//  Description: Draws a triangle with the given parameters.
////////////////////////////////////////////////////////////////////
211
inline void MeshDrawer::tri(LVector3 const &v1, LVector4 const &c1, LVector2 const &uv1, LVector3 const &v2, LVector4 const &c2, LVector2 const &uv2, LVector3 const &v3, LVector4 const &c3, LVector2 const &uv3);

348 8 particle 0 4 475 20 MeshDrawer::particle 0 1 125 385
////////////////////////////////////////////////////////////////////
//     Function: MeshDrawer::particle
//       Access: Published
//  Description: Draws a particle that is sort of like a bill board
//               but has an extra rotation component.
//               Frame contains u,v,u-size,v-size quadruple.
////////////////////////////////////////////////////////////////////
133
void MeshDrawer::particle(LVector3 const &pos, LVector4 const &frame, PN_stdfloat size, LVector4 const &color, PN_stdfloat rotation);

349 16 blended_particle 0 4 475 28 MeshDrawer::blended_particle 0 1 126 400
////////////////////////////////////////////////////////////////////
//     Function: MeshDrawer::blended_particle
//       Access: Published
//  Description: Works just like particle but accepts 2 frames and
//               a blend (from 0 to 1) component between them
//               Frame contains u,v,u-size,v-size quadruple.
////////////////////////////////////////////////////////////////////
185
void MeshDrawer::blended_particle(LVector3 const &pos, LVector4 const &frame1, LVector4 const &frame2, PN_stdfloat blend, PN_stdfloat size, LVector4 const &color, PN_stdfloat rotation);

350 9 billboard 0 4 475 21 MeshDrawer::billboard 0 1 127 380
////////////////////////////////////////////////////////////////////
//     Function: MeshDrawer::billboard
//       Access: Published
//  Description: Draws a billboard - particle with no rotation.
//               Billboards always face the camera.
//               Frame contains u,v,u-size,v-size quadruple.
////////////////////////////////////////////////////////////////////
112
void MeshDrawer::billboard(LVector3 const &pos, LVector4 const &frame, PN_stdfloat size, LVector4 const &color);

351 7 segment 0 4 475 19 MeshDrawer::segment 0 1 128 367
////////////////////////////////////////////////////////////////////
//     Function: MeshDrawer::segment
//       Access: Published
//  Description: Draws a segment a line with a thickness. That has
//               billboarding effect.
//               Frame contains u,v,u-size,v-size quadruple.
////////////////////////////////////////////////////////////////////
139
void MeshDrawer::segment(LVector3 const &start, LVector3 const &stop, LVector4 const &frame, PN_stdfloat thickness, LVector4 const &color);

352 13 cross_segment 0 4 475 25 MeshDrawer::cross_segment 0 1 129 503
////////////////////////////////////////////////////////////////////
//     Function: MeshDrawer::cross_segment
//       Access: Published
//  Description: Draws a segment a line with a thickness.  This
//               segment does not use the bill boarding behavior
//               and instead draws 2 planes in a cross.
//               Stars at start and ends at stop.
//               Frame contains u,v,u-size,v-size quadruple.
////////////////////////////////////////////////////////////////////
145
void MeshDrawer::cross_segment(LVector3 const &start, LVector3 const &stop, LVector4 const &frame, PN_stdfloat thickness, LVector4 const &color);

353 14 uneven_segment 0 4 475 26 MeshDrawer::uneven_segment 0 1 130 426
////////////////////////////////////////////////////////////////////
//     Function: MeshDrawer::uneven_segment
//       Access: Published
//  Description: Draws a segment a line with different thickness
//               and color on both sides.
//               Stars at start and ends at stop.
//               Frame contains u,v,u-size,v-size quadruple.
////////////////////////////////////////////////////////////////////
214
void MeshDrawer::uneven_segment(LVector3 const &start, LVector3 const &stop, LVector4 const &frame, PN_stdfloat thickness_start, LVector4 const &color_start, PN_stdfloat thickness_stop, LVector4 const &color_stop);

354 12 link_segment 0 4 475 24 MeshDrawer::link_segment 0 1 131 415
////////////////////////////////////////////////////////////////////
//     Function: MeshDrawer::link_segment
//       Access: Published
//  Description: Stars or continues linked segment.
//               Control position, frame, thickness and color with
//               parameters.
//               Frame contains u,v,u-size,v-size quadruple.
////////////////////////////////////////////////////////////////////
120
void MeshDrawer::link_segment(LVector3 const &pos, LVector4 const &frame, PN_stdfloat thickness, LVector4 const &color);

355 16 link_segment_end 0 4 475 28 MeshDrawer::link_segment_end 0 1 132 433
////////////////////////////////////////////////////////////////////
//     Function: MeshDrawer::link_segment_end
//       Access: Published
//  Description: Finish drawing linked segments, needs at least
//               two calls to link_segment before it can end
//               the linked segment.
//               Frame contains u,v,u-size,v-size quadruple.
////////////////////////////////////////////////////////////////////
80
void MeshDrawer::link_segment_end(LVector4 const &frame, LVector4 const &color);

356 9 explosion 0 4 475 21 MeshDrawer::explosion 0 1 133 333
////////////////////////////////////////////////////////////////////
//     Function: MeshDrawer::explosion
//       Access: Published
//  Description: Draws number of particles in a sphere like emitter.
//               Frame contains u,v,u-size,v-size quadruple.
////////////////////////////////////////////////////////////////////
156
void MeshDrawer::explosion(LVector3 const &pos, LVector4 const &frame, PN_stdfloat size, LVector4 const &color, int seed, int number, PN_stdfloat distance);

357 6 stream 0 4 475 18 MeshDrawer::stream 0 1 134 374
////////////////////////////////////////////////////////////////////
//     Function: MeshDrawer::stream
//       Access: Published
//  Description: Draws a number of particles in a big line with a
//               shift dictated by the offset.
//               Frame contains u,v,u-size,v-size quadruple.
////////////////////////////////////////////////////////////////////
165
void MeshDrawer::stream(LVector3 const &start, LVector3 const &stop, LVector4 const &frame, PN_stdfloat size, LVector4 const &color, int number, PN_stdfloat offset);

358 8 geometry 0 4 475 20 MeshDrawer::geometry 0 1 135 559
////////////////////////////////////////////////////////////////////
//     Function: MeshDrawer::geometry
//       Access: Published
//  Description: Draws the geometry that is inside this node path into
//               the MeshDrawer object.  This performs a similar
//               functions as RigidBodyCombiner but for very
//               dynamic situations that share the same texture
//               like physcal chunks of explosions.  
//               It can be a little slow 
////////////////////////////////////////////////////////////////////
41
void MeshDrawer::geometry(NodePath node);

359 3 end 0 4 475 15 MeshDrawer::end 0 1 136 293
////////////////////////////////////////////////////////////////////
//     Function: MeshDrawer::end
//       Access: Published
//  Description: Finish the drawing and clearing off the remaining
//               vertexes.  
////////////////////////////////////////////////////////////////////
27
void MeshDrawer::end(void);

360 14 get_class_type 0 4 475 26 MeshDrawer::get_class_type 0 1 137 0
51
static TypeHandle MeshDrawer::get_class_type(void);

361 12 MeshDrawer2D 0 4 476 26 MeshDrawer2D::MeshDrawer2D 0 1 138 267
////////////////////////////////////////////////////////////////////
//     Function: MeshDrawer2D::Constructor
//       Access: Published
//  Description: Creates the MeshDrawer2D low level system.
////////////////////////////////////////////////////////////////////
40
inline MeshDrawer2D::MeshDrawer2D(void);

362 10 set_budget 0 4 476 24 MeshDrawer2D::set_budget 0 1 139 269
////////////////////////////////////////////////////////////////////
//     Function: MeshDrawer2D::set_budget
//       Access: Published
//  Description: Sets the total triangle budget of the drawer.
////////////////////////////////////////////////////////////////////
49
inline void MeshDrawer2D::set_budget(int budget);

363 10 get_budget 0 4 476 24 MeshDrawer2D::get_budget 0 1 140 270
////////////////////////////////////////////////////////////////////
//     Function: MeshDrawer2D::get_budget()
//       Access: Published
//  Description: Gets the total triangle budget of the drawer
////////////////////////////////////////////////////////////////////
42
inline int MeshDrawer2D::get_budget(void);

364 8 get_root 0 4 476 22 MeshDrawer2D::get_root 0 1 141 248
////////////////////////////////////////////////////////////////////
//     Function: MeshDrawer2D::get_root
//       Access: Published
//  Description: Returns the root NodePath.
////////////////////////////////////////////////////////////////////
45
inline NodePath MeshDrawer2D::get_root(void);

365 8 quad_raw 0 4 476 22 MeshDrawer2D::quad_raw 0 1 142 286
////////////////////////////////////////////////////////////////////
//     Function: MeshDrawer2D::quad
//       Access: Published
//  Description: Draws a 2d rectangle.
//               Ignores the cliping rectangle
////////////////////////////////////////////////////////////////////
279
inline void MeshDrawer2D::quad_raw(LVector3 const &v1, LVector4 const &c1, LVector2 const &uv1, LVector3 const &v2, LVector4 const &c2, LVector2 const &uv2, LVector3 const &v3, LVector4 const &c3, LVector2 const &uv3, LVector3 const &v4, LVector4 const &c4, LVector2 const &uv4);

366 13 rectangle_raw 0 4 476 27 MeshDrawer2D::rectangle_raw 0 1 143 0
185
inline void MeshDrawer2D::rectangle_raw(PN_stdfloat x, PN_stdfloat y, PN_stdfloat w, PN_stdfloat h, PN_stdfloat u, PN_stdfloat v, PN_stdfloat us, PN_stdfloat vs, LVector4 const &color);

367 8 set_clip 0 4 476 22 MeshDrawer2D::set_clip 0 1 144 247
////////////////////////////////////////////////////////////////////
//     Function: MeshDrawer2D::set_budget
//       Access: Published
//  Description: Sets clipping rectangle
////////////////////////////////////////////////////////////////////
95
inline void MeshDrawer2D::set_clip(PN_stdfloat x, PN_stdfloat y, PN_stdfloat w, PN_stdfloat h);

368 9 rectangle 0 4 476 23 MeshDrawer2D::rectangle 0 1 145 258
////////////////////////////////////////////////////////////////////
//     Function: MeshDrawer2D::quad
//       Access: Published
//  Description: Draws a 2d rectangle, that can be cliped
////////////////////////////////////////////////////////////////////
181
inline void MeshDrawer2D::rectangle(PN_stdfloat x, PN_stdfloat y, PN_stdfloat w, PN_stdfloat h, PN_stdfloat u, PN_stdfloat v, PN_stdfloat us, PN_stdfloat vs, LVector4 const &color);

369 16 rectangle_border 0 4 476 30 MeshDrawer2D::rectangle_border 0 1 146 318
////////////////////////////////////////////////////////////////////
//     Function: MeshDrawer2D::quad
//       Access: Published
//  Description: Draws a 2d rectangle, with borders and corders, 
//               taken from the surrounding texture
////////////////////////////////////////////////////////////////////
305
void MeshDrawer2D::rectangle_border(PN_stdfloat x, PN_stdfloat y, PN_stdfloat w, PN_stdfloat h, PN_stdfloat r, PN_stdfloat t, PN_stdfloat l, PN_stdfloat b, PN_stdfloat tr, PN_stdfloat tt, PN_stdfloat tl, PN_stdfloat tb, PN_stdfloat u, PN_stdfloat v, PN_stdfloat us, PN_stdfloat vs, LVector4 const &color);

370 22 rectangle_border_tiled 0 4 476 36 MeshDrawer2D::rectangle_border_tiled 0 1 147 318
////////////////////////////////////////////////////////////////////
//     Function: MeshDrawer2D::quad
//       Access: Published
//  Description: Draws a 2d rectangle, with borders and corders, 
//               taken from the surrounding texture
////////////////////////////////////////////////////////////////////
311
void MeshDrawer2D::rectangle_border_tiled(PN_stdfloat x, PN_stdfloat y, PN_stdfloat w, PN_stdfloat h, PN_stdfloat r, PN_stdfloat t, PN_stdfloat l, PN_stdfloat b, PN_stdfloat tr, PN_stdfloat tt, PN_stdfloat tl, PN_stdfloat tb, PN_stdfloat u, PN_stdfloat v, PN_stdfloat us, PN_stdfloat vs, LVector4 const &color);

371 15 rectangle_tiled 0 4 476 29 MeshDrawer2D::rectangle_tiled 0 1 148 290
////////////////////////////////////////////////////////////////////
//     Function: MeshDrawer2D::quad
//       Access: Published
//  Description: Draws a tiled rectangle, size of tiles is in 
//               us and vs
////////////////////////////////////////////////////////////////////
180
void MeshDrawer2D::rectangle_tiled(PN_stdfloat x, PN_stdfloat y, PN_stdfloat w, PN_stdfloat h, PN_stdfloat u, PN_stdfloat v, PN_stdfloat us, PN_stdfloat vs, LVector4 const &color);

372 5 begin 0 4 476 19 MeshDrawer2D::begin 0 1 149 307
////////////////////////////////////////////////////////////////////
//     Function: MeshDrawer2D::begin
//       Access: Published
//  Description: Opens up the geom for drawing, don't forget to call
//               MeshDrawer2D::end()
////////////////////////////////////////////////////////////////////
31
void MeshDrawer2D::begin(void);

373 3 end 0 4 476 17 MeshDrawer2D::end 0 1 150 293
////////////////////////////////////////////////////////////////////
//     Function: MeshDrawer2D::end
//       Access: Published
//  Description: Finish the drawing and clearing off the remaining
//               vertexes.
////////////////////////////////////////////////////////////////////
29
void MeshDrawer2D::end(void);

374 14 get_class_type 0 4 476 28 MeshDrawer2D::get_class_type 0 1 151 0
53
static TypeHandle MeshDrawer2D::get_class_type(void);

375 12 MovieTexture 0 4 477 26 MovieTexture::MovieTexture 0 2 152 153 934
////////////////////////////////////////////////////////////////////
//     Function: MovieTexture::Constructor
//       Access: Published
//  Description: Creates a blank movie texture.  Movies must be 
//               added using do_read_one or do_load_one.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: MovieTexture::Constructor
//       Access: Published
//  Description: Creates a texture playing the specified movie.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: MovieTexture::Copy Constructor
//       Access: Protected
//  Description: Use MovieTexture::make_copy() to make a duplicate copy of
//               an existing MovieTexture.
////////////////////////////////////////////////////////////////////
94
MovieTexture::MovieTexture(string const &name);
MovieTexture::MovieTexture(MovieVideo *video);

376 16 get_video_length 0 4 477 30 MovieTexture::get_video_length 0 1 154 262
////////////////////////////////////////////////////////////////////
//     Function: MovieTexture::get_video_length
//       Access: Published
//  Description: Returns the length of the video.
////////////////////////////////////////////////////////////////////
57
inline double MovieTexture::get_video_length(void) const;

377 15 get_video_width 0 4 477 29 MovieTexture::get_video_width 0 1 155 463
////////////////////////////////////////////////////////////////////
//     Function: MovieTexture::get_video_width
//       Access: Published
//  Description: Returns the width in texels of the source video
//               stream.  This is not necessarily the width of the
//               actual texture, since the texture may have been
//               expanded to raise it to a power of 2.
////////////////////////////////////////////////////////////////////
53
inline int MovieTexture::get_video_width(void) const;

378 16 get_video_height 0 4 477 30 MovieTexture::get_video_height 0 1 156 466
////////////////////////////////////////////////////////////////////
//     Function: MovieTexture::get_video_height
//       Access: Published
//  Description: Returns the height in texels of the source video
//               stream.  This is not necessarily the height of the
//               actual texture, since the texture may have been
//               expanded to raise it to a power of 2.
////////////////////////////////////////////////////////////////////
54
inline int MovieTexture::get_video_height(void) const;

379 16 get_color_cursor 0 4 477 30 MovieTexture::get_color_cursor 0 1 157 386
////////////////////////////////////////////////////////////////////
//     Function: MovieTexture::get_color_cursor
//       Access: Published
//  Description: Returns the MovieVideoCursor that is feeding the
//               color channels for the indicated page, where 0 <=
//               page < get_num_pages().
////////////////////////////////////////////////////////////////////
66
inline MovieVideoCursor *MovieTexture::get_color_cursor(int page);

380 16 get_alpha_cursor 0 4 477 30 MovieTexture::get_alpha_cursor 0 1 158 385
////////////////////////////////////////////////////////////////////
//     Function: MovieTexture::get_alpha_cursor
//       Access: Published
//  Description: Returns the MovieVideoCursor that is feeding the
//               alpha channel for the indicated page, where 0 <=
//               page < get_num_pages().
////////////////////////////////////////////////////////////////////
66
inline MovieVideoCursor *MovieTexture::get_alpha_cursor(int page);

381 7 restart 0 4 477 21 MovieTexture::restart 0 1 159 400
////////////////////////////////////////////////////////////////////
//     Function: MovieTexture::restart
//       Access: Published
//  Description: Start playing the movie from where it was last
//               paused.  Has no effect if the movie is not paused,
//               or if the movie's cursor is already at the end.
////////////////////////////////////////////////////////////////////
33
void MovieTexture::restart(void);

382 4 stop 0 4 477 18 MovieTexture::stop 0 1 160 383
////////////////////////////////////////////////////////////////////
//     Function: MovieTexture::stop
//       Access: Published
//  Description: Stops a currently playing or looping movie right
//               where it is.  The movie's cursor remains frozen at
//               the point where it was stopped.
////////////////////////////////////////////////////////////////////
30
void MovieTexture::stop(void);

383 4 play 0 4 477 18 MovieTexture::play 0 1 161 253
////////////////////////////////////////////////////////////////////
//     Function: MovieTexture::play
//       Access: Published
//  Description: Plays the movie from the beginning.
////////////////////////////////////////////////////////////////////
30
void MovieTexture::play(void);

384 8 set_time 0 4 477 22 MovieTexture::set_time 0 1 162 246
////////////////////////////////////////////////////////////////////
//     Function: MovieTexture::set_time
//       Access: Published
//  Description: Sets the movie's cursor.
////////////////////////////////////////////////////////////////////
38
void MovieTexture::set_time(double t);

385 8 get_time 0 4 477 22 MovieTexture::get_time 0 1 163 565
////////////////////////////////////////////////////////////////////
//     Function: MovieTexture::get_time
//       Access: Published
//  Description: Returns the current value of the movie's cursor.
//               If the movie's loop count is greater than one, then
//               its length is effectively multiplied for the
//               purposes of this function.  In other words, 
//               the return value will be in the range 0.0 
//               to (length * loopcount).
////////////////////////////////////////////////////////////////////
42
double MovieTexture::get_time(void) const;

386 8 set_loop 0 4 477 22 MovieTexture::set_loop 0 1 164 335
////////////////////////////////////////////////////////////////////
//     Function: MovieTexture::set_loop
//       Access: Published
//  Description: If true, sets the movie's loop count to 1 billion.
//               If false, sets the movie's loop count to one.
////////////////////////////////////////////////////////////////////
41
void MovieTexture::set_loop(bool enable);

387 8 get_loop 0 4 477 22 MovieTexture::get_loop 0 1 165 298
////////////////////////////////////////////////////////////////////
//     Function: MovieTexture::get_loop
//       Access: Published
//  Description: Returns true if the movie's loop count is not equal
//               to one.
////////////////////////////////////////////////////////////////////
40
bool MovieTexture::get_loop(void) const;

388 14 set_loop_count 0 4 477 28 MovieTexture::set_loop_count 0 1 166 277
////////////////////////////////////////////////////////////////////
//     Function: MovieTexture::set_loop_count
//       Access: Published
//  Description: Sets the movie's loop count to the desired value.
////////////////////////////////////////////////////////////////////
45
void MovieTexture::set_loop_count(int count);

389 14 get_loop_count 0 4 477 28 MovieTexture::get_loop_count 0 1 167 259
////////////////////////////////////////////////////////////////////
//     Function: MovieTexture::get_loop_count
//       Access: Published
//  Description: Returns the movie's loop count.
////////////////////////////////////////////////////////////////////
45
int MovieTexture::get_loop_count(void) const;

390 13 set_play_rate 0 4 477 27 MovieTexture::set_play_rate 0 1 168 412
////////////////////////////////////////////////////////////////////
//     Function: MovieTexture::set_play_rate
//       Access: Published
//  Description: Sets the movie's play-rate.  This is the speed at
//               which the movie's cursor advances.  The default is
//               to advance 1.0 movie-seconds per real-time second.
////////////////////////////////////////////////////////////////////
51
void MovieTexture::set_play_rate(double play_rate);

391 13 get_play_rate 0 4 477 27 MovieTexture::get_play_rate 0 1 169 254
////////////////////////////////////////////////////////////////////
//     Function: MovieTexture::get_play_rate
//       Access: Published
//  Description: Gets the movie's play-rate.
////////////////////////////////////////////////////////////////////
47
double MovieTexture::get_play_rate(void) const;

392 10 is_playing 0 4 477 24 MovieTexture::is_playing 0 1 170 272
////////////////////////////////////////////////////////////////////
//     Function: MovieTexture::is_playing
//       Access: Published
//  Description: Returns true if the movie's cursor is advancing.
////////////////////////////////////////////////////////////////////
42
bool MovieTexture::is_playing(void) const;

393 14 synchronize_to 0 4 477 28 MovieTexture::synchronize_to 0 1 171 375
////////////////////////////////////////////////////////////////////
//     Function: MovieTexture::synchronize_to
//       Access: Published
//  Description: Synchronize this texture to a sound.  Typically,
//               you would load the texture and the sound from the
//               same AVI file.
////////////////////////////////////////////////////////////////////
53
void MovieTexture::synchronize_to(AudioSound *sound);

394 13 unsynchronize 0 4 477 27 MovieTexture::unsynchronize 0 1 172 259
////////////////////////////////////////////////////////////////////
//     Function: MovieTexture::unsynchronize
//       Access: Published
//  Description: Stop synchronizing with a sound.
////////////////////////////////////////////////////////////////////
39
void MovieTexture::unsynchronize(void);

395 14 get_class_type 0 4 477 28 MovieTexture::get_class_type 0 1 173 0
53
static TypeHandle MovieTexture::get_class_type(void);

396 15 MultitexReducer 0 4 479 32 MultitexReducer::MultitexReducer 0 1 174 0
39
MultitexReducer::MultitexReducer(void);

397 16 ~MultitexReducer 0 4 479 33 MultitexReducer::~MultitexReducer 0 0 0
40
MultitexReducer::~MultitexReducer(void);

398 5 clear 0 4 479 22 MultitexReducer::clear 0 1 175 0
34
void MultitexReducer::clear(void);

399 4 scan 0 4 479 21 MultitexReducer::scan 0 3 176 177 178 2112
////////////////////////////////////////////////////////////////////
//     Function: MultitexReducer::scan
//       Access: Published
//  Description: Starts scanning the hierarchy beginning at the
//               indicated node.  Any GeomNodes discovered in the
//               hierarchy with multitexture will be added to internal
//               structures in the MultitexReducer so that a future
//               call to flatten() will operate on all of these at
//               once.
//
//               This version of this method does not accumulate state
//               from the parents of the indicated node; thus, only
//               multitexture effects that have been applied at node
//               and below will be considered.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: MultitexReducer::scan
//       Access: Published
//  Description: Starts scanning the hierarchy beginning at the
//               indicated node.  Any GeomNodes discovered in the
//               hierarchy with multitexture will be added to internal
//               structures in the MultitexReducer so that a future
//               call to flatten() will operate on all of these at
//               once.
//
//               The second parameter represents the NodePath from
//               which to accumulate the state that is considered for
//               the multitexture.  Pass an empty NodePath to
//               accumulate all the state from the root of the graph,
//               or you may specify some other node here in order to
//               not consider nodes above that as contributing to the
//               state to be flattened.  This is particularly useful
//               if you have some texture stage which is applied
//               globally to a scene (for instance, a caustics
//               effect), which you don't want to be considered for
//               flattening by the MultitexReducer.
////////////////////////////////////////////////////////////////////
245
inline void MultitexReducer::scan(NodePath const &node);
inline void MultitexReducer::scan(NodePath const &node, NodePath const &state_from);
void MultitexReducer::scan(PandaNode *node, RenderState const *state, TransformState const *transform);

400 10 set_target 0 4 479 27 MultitexReducer::set_target 0 1 179 0
54
void MultitexReducer::set_target(TextureStage *stage);

401 12 set_use_geom 0 4 479 29 MultitexReducer::set_use_geom 0 1 180 0
50
void MultitexReducer::set_use_geom(bool use_geom);

402 17 set_allow_tex_mat 0 4 479 34 MultitexReducer::set_allow_tex_mat 0 1 181 0
60
void MultitexReducer::set_allow_tex_mat(bool allow_tex_mat);

403 7 flatten 0 4 479 24 MultitexReducer::flatten 0 1 182 0
54
void MultitexReducer::flatten(GraphicsOutput *window);

404 19 NodeVertexTransform 0 4 480 40 NodeVertexTransform::NodeVertexTransform 0 1 183 231
////////////////////////////////////////////////////////////////////
//     Function: NodeVertexTransform::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
97
NodeVertexTransform::NodeVertexTransform(PandaNode const *node, VertexTransform const *prev = 0);

405 8 get_node 0 4 480 29 NodeVertexTransform::get_node 0 1 184 305
////////////////////////////////////////////////////////////////////
//     Function: NodeVertexTransform::get_node
//       Access: Published
//  Description: Returns the PandaNode whose transform supplies this
//               object.
////////////////////////////////////////////////////////////////////
66
inline PandaNode const *NodeVertexTransform::get_node(void) const;

406 8 get_prev 0 4 480 29 NodeVertexTransform::get_prev 0 1 185 352
////////////////////////////////////////////////////////////////////
//     Function: NodeVertexTransform::get_prev
//       Access: Published
//  Description: Returns the VertexTransform object whose matrix will
//               be composed with the result of this node's transform.
////////////////////////////////////////////////////////////////////
72
inline VertexTransform const *NodeVertexTransform::get_prev(void) const;

407 14 get_class_type 0 4 480 35 NodeVertexTransform::get_class_type 0 1 186 0
60
static TypeHandle NodeVertexTransform::get_class_type(void);

408 20 ~NodeVertexTransform 0 4 480 41 NodeVertexTransform::~NodeVertexTransform 0 0 0
48
NodeVertexTransform::~NodeVertexTransform(void);

409 23 SceneGraphAnalyzerMeter 0 4 482 48 SceneGraphAnalyzerMeter::SceneGraphAnalyzerMeter 0 1 187 236
////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzerMeter::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
86
SceneGraphAnalyzerMeter::SceneGraphAnalyzerMeter(string const &name, PandaNode *node);

410 12 setup_window 0 4 482 37 SceneGraphAnalyzerMeter::setup_window 0 1 188 369
////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzerMeter::setup_window
//       Access: Published
//  Description: Sets up the frame rate meter to create a
//               DisplayRegion to render itself into the indicated
//               window.
////////////////////////////////////////////////////////////////////
67
void SceneGraphAnalyzerMeter::setup_window(GraphicsOutput *window);

411 12 clear_window 0 4 482 37 SceneGraphAnalyzerMeter::clear_window 0 1 189 309
////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzerMeter::clear_window
//       Access: Published
//  Description: Undoes the effect of a previous call to
//               setup_window().
////////////////////////////////////////////////////////////////////
49
void SceneGraphAnalyzerMeter::clear_window(void);

412 10 get_window 0 4 482 35 SceneGraphAnalyzerMeter::get_window 0 1 190 377
////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzerMeter::get_window
//       Access: Published
//  Description: Returns the GraphicsOutput that was passed to
//               setup_window(), or NULL if setup_window() has not
//               been called.
////////////////////////////////////////////////////////////////////
71
inline GraphicsOutput *SceneGraphAnalyzerMeter::get_window(void) const;

413 18 get_display_region 0 4 482 43 SceneGraphAnalyzerMeter::get_display_region 0 1 191 428
////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzerMeter::get_display_region
//       Access: Published
//  Description: Returns the DisplayRegion that the meter has created
//               to render itself into the window to setup_window(),
//               or NULL if setup_window() has not been called.
////////////////////////////////////////////////////////////////////
78
inline DisplayRegion *SceneGraphAnalyzerMeter::get_display_region(void) const;

414 19 set_update_interval 0 4 482 44 SceneGraphAnalyzerMeter::set_update_interval 0 1 192 535
////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzerMeter::set_update_interval
//       Access: Published
//  Description: Specifies the number of seconds that should elapse
//               between updates to the meter.  This should be
//               reasonably slow (e.g. 0.5 to 2.0) so that the
//               calculation of the scene graph analysis does not
//               itself dominate the frame rate.
////////////////////////////////////////////////////////////////////
81
inline void SceneGraphAnalyzerMeter::set_update_interval(double update_interval);

415 19 get_update_interval 0 4 482 44 SceneGraphAnalyzerMeter::get_update_interval 0 1 193 353
////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzerMeter::get_update_interval
//       Access: Published
//  Description: Returns the number of seconds that will elapse
//               between updates to the frame rate indication.
////////////////////////////////////////////////////////////////////
71
inline double SceneGraphAnalyzerMeter::get_update_interval(void) const;

416 8 set_node 0 4 482 33 SceneGraphAnalyzerMeter::set_node 0 1 194 262
////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzerMeter::set_node
//       Access: Published
//  Description: Sets the node to be analyzed.
////////////////////////////////////////////////////////////////////
63
inline void SceneGraphAnalyzerMeter::set_node(PandaNode *node);

417 8 get_node 0 4 482 33 SceneGraphAnalyzerMeter::get_node 0 1 195 265
////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzerMeter::get_node
//       Access: Published
//  Description: Returns the node to be analyzed.
////////////////////////////////////////////////////////////////////
64
inline PandaNode *SceneGraphAnalyzerMeter::get_node(void) const;

418 6 update 0 4 482 31 SceneGraphAnalyzerMeter::update 0 1 196 469
////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzerMeter::update
//       Access: Published
//  Description: You can call this to explicitly force the
//               SceneGraphAnalyzerMeter to update itself with the
//               latest scene graph analysis information.
//               Normally, it is not necessary to call this explicitly.
////////////////////////////////////////////////////////////////////
50
inline void SceneGraphAnalyzerMeter::update(void);

419 14 get_class_type 0 4 482 39 SceneGraphAnalyzerMeter::get_class_type 0 1 197 0
64
static TypeHandle SceneGraphAnalyzerMeter::get_class_type(void);

420 17 RigidBodyCombiner 0 4 483 36 RigidBodyCombiner::RigidBodyCombiner 0 1 198 465
////////////////////////////////////////////////////////////////////
//     Function: RigidBodyCombiner::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: RigidBodyCombiner::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
57
RigidBodyCombiner::RigidBodyCombiner(string const &name);

421 7 collect 0 4 483 26 RigidBodyCombiner::collect 0 1 199 1362
////////////////////////////////////////////////////////////////////
//     Function: RigidBodyCombiner::collect
//       Access: Published
//  Description: Walks through the entire subgraph of nodes rooted at
//               this node, accumulates all of the RenderAttribs and
//               Geoms below this node, flattening them into just one
//               Geom (or as few as possible, if there are multiple
//               different states).
//
//               Nodes that have transforms on them at the time of
//               collect(), or any ModelNodes with the
//               preserve_transform flag, will be identified as
//               "moving" nodes, and their transforms will be
//               monitored as they change in future frames and each
//               new transform directly applied to the vertices.
//               
//               This call must be made after adding any nodes to or
//               removing any nodes from the subgraph rooted at this
//               node.  It should not be made too often, as it is a
//               relatively expensive call.  If you need to hide
//               children of this node, consider scaling them to zero
//               (or very near zero), or moving them behind the
//               camera, instead.
////////////////////////////////////////////////////////////////////
38
void RigidBodyCombiner::collect(void);

422 18 get_internal_scene 0 4 483 37 RigidBodyCombiner::get_internal_scene 0 1 200 620
////////////////////////////////////////////////////////////////////
//     Function: RigidBodyCombiner::get_internal_scene
//       Access: Published
//  Description: Returns a special NodePath that represents the
//               internal node of this object.  This is the node that
//               is actually sent to the graphics card for rendering;
//               it contains the collection of the children of this
//               node into as few Geoms as possible.  
//
//               This node is filled up by the last call to collect().
////////////////////////////////////////////////////////////////////
53
NodePath RigidBodyCombiner::get_internal_scene(void);

423 14 get_class_type 0 4 483 33 RigidBodyCombiner::get_class_type 0 1 201 0
58
static TypeHandle RigidBodyCombiner::get_class_type(void);

424 18 ~RigidBodyCombiner 0 4 483 37 RigidBodyCombiner::~RigidBodyCombiner 0 0 0
44
RigidBodyCombiner::~RigidBodyCombiner(void);

425 23 upcast_to_CullTraverser 0 12 485 51 PipeOcclusionCullTraverser::upcast_to_CullTraverser 0 1 211 55
upcast from PipeOcclusionCullTraverser to CullTraverser
73
CullTraverser *PipeOcclusionCullTraverser::upcast_to_CullTraverser(void);

426 38 downcast_to_PipeOcclusionCullTraverser 0 12 486 53 CullTraverser::downcast_to_PipeOcclusionCullTraverser 0 1 212 57
downcast from CullTraverser to PipeOcclusionCullTraverser
88
PipeOcclusionCullTraverser *CullTraverser::downcast_to_PipeOcclusionCullTraverser(void);

427 21 upcast_to_CullHandler 0 12 485 49 PipeOcclusionCullTraverser::upcast_to_CullHandler 0 1 213 53
upcast from PipeOcclusionCullTraverser to CullHandler
69
CullHandler *PipeOcclusionCullTraverser::upcast_to_CullHandler(void);

428 38 downcast_to_PipeOcclusionCullTraverser 0 12 487 51 CullHandler::downcast_to_PipeOcclusionCullTraverser 0 1 214 55
downcast from CullHandler to PipeOcclusionCullTraverser
86
PipeOcclusionCullTraverser *CullHandler::downcast_to_PipeOcclusionCullTraverser(void);

429 26 PipeOcclusionCullTraverser 0 4 485 54 PipeOcclusionCullTraverser::PipeOcclusionCullTraverser 0 2 202 203 483
////////////////////////////////////////////////////////////////////
//     Function: PipeOcclusionCullTraverser::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PipeOcclusionCullTraverser::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
173
PipeOcclusionCullTraverser::PipeOcclusionCullTraverser(GraphicsOutput *host);
PipeOcclusionCullTraverser::PipeOcclusionCullTraverser(PipeOcclusionCullTraverser const &copy);

430 9 set_scene 0 6 485 37 PipeOcclusionCullTraverser::set_scene 0 1 204 245
////////////////////////////////////////////////////////////////////
//     Function: PipeOcclusionCullTraverser::set_scene
//       Access: Published, Virtual
//  Description:
////////////////////////////////////////////////////////////////////
135
virtual void PipeOcclusionCullTraverser::set_scene(SceneSetup *scene_setup, GraphicsStateGuardianBase *gsg, bool dr_incomplete_render);

431 12 end_traverse 0 6 485 40 PipeOcclusionCullTraverser::end_traverse 0 1 205 407
////////////////////////////////////////////////////////////////////
//     Function: PipeOcclusionCullTraverser::end_traverse
//       Access: Public, Virtual
//  Description: Should be called when the traverser has finished
//               traversing its scene, this gives it a chance to do
//               any necessary finalization.
////////////////////////////////////////////////////////////////////
60
virtual void PipeOcclusionCullTraverser::end_traverse(void);

432 10 get_buffer 0 4 485 38 PipeOcclusionCullTraverser::get_buffer 0 1 206 238
////////////////////////////////////////////////////////////////////
//     Function: PipeOcclusionCullTraverser::get_buffer
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
74
inline GraphicsOutput *PipeOcclusionCullTraverser::get_buffer(void) const;

433 11 get_texture 0 4 485 39 PipeOcclusionCullTraverser::get_texture 0 1 207 338
////////////////////////////////////////////////////////////////////
//     Function: PipeOcclusionCullTraverser::get_texture
//       Access: Published
//  Description: Returns a Texture that can be used to visualize the
//               efforts of the occlusion cull.
////////////////////////////////////////////////////////////////////
55
Texture *PipeOcclusionCullTraverser::get_texture(void);

434 18 set_occlusion_mask 0 4 485 46 PipeOcclusionCullTraverser::set_occlusion_mask 0 1 208 536
////////////////////////////////////////////////////////////////////
//     Function: PipeOcclusionCullTraverser::set_occlusion_mask
//       Access: Public
//  Description: Specifies the DrawMask that should be set on
//               occlusion polygons for this scene.  This identifies
//               the polygons that are to be treated as occluders.
//               Polygons that do not have this draw mask set will not
//               be considered occluders.
////////////////////////////////////////////////////////////////////
91
inline void PipeOcclusionCullTraverser::set_occlusion_mask(DrawMask const &occlusion_mask);

435 18 get_occlusion_mask 0 4 485 46 PipeOcclusionCullTraverser::get_occlusion_mask 0 1 209 331
////////////////////////////////////////////////////////////////////
//     Function: PipeOcclusionCullTraverser::get_occlusion_mask
//       Access: Public
//  Description: Returns the DrawMask for occlusion polygons.  See
//               set_occlusion_mask().
////////////////////////////////////////////////////////////////////
82
inline DrawMask const &PipeOcclusionCullTraverser::get_occlusion_mask(void) const;

436 14 get_class_type 0 4 485 42 PipeOcclusionCullTraverser::get_class_type 0 1 210 0
67
static TypeHandle PipeOcclusionCullTraverser::get_class_type(void);

437 27 ~PipeOcclusionCullTraverser 0 4 485 55 PipeOcclusionCullTraverser::~PipeOcclusionCullTraverser 0 0 0
62
PipeOcclusionCullTraverser::~PipeOcclusionCullTraverser(void);

438 9 PfmVizzer 0 4 488 20 PfmVizzer::PfmVizzer 0 1 215 526
////////////////////////////////////////////////////////////////////
//     Function: PfmVizzer::Constructor
//       Access: Published
//  Description: The PfmVizzer constructor receives a reference to a
//               PfmFile which it will operate on.  It does not keep
//               ownership of this reference; it is your
//               responsibility to ensure the PfmFile does not
//               destruct during the lifetime of the PfmVizzer.
////////////////////////////////////////////////////////////////////
35
PfmVizzer::PfmVizzer(PfmFile &pfm);

439 7 get_pfm 0 4 488 18 PfmVizzer::get_pfm 0 2 216 217 606
////////////////////////////////////////////////////////////////////
//     Function: PfmVizzer::get_pfm
//       Access: Published
//  Description: Returns the reference to the PfmFile manipulated by
//               this PfmVizzer.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PfmVizzer::get_pfm
//       Access: Published
//  Description: Returns the reference to the PfmFile manipulated by
//               this PfmVizzer.
////////////////////////////////////////////////////////////////////
95
inline PfmFile &PfmVizzer::get_pfm(void);
inline PfmFile const &PfmVizzer::get_pfm(void) const;

440 7 project 0 4 488 18 PfmVizzer::project 0 1 218 633
////////////////////////////////////////////////////////////////////
//     Function: PfmVizzer::project
//       Access: Published
//  Description: Adjusts each (x, y, z) point of the Pfm file by
//               projecting it through the indicated lens, converting
//               each point to a (u, v, w) texture coordinate.  The
//               resulting file can be generated to a mesh (with
//               set_vis_inverse(true) and generate_vis_mesh())
//               that will apply the lens distortion to an arbitrary
//               texture image.
////////////////////////////////////////////////////////////////////
73
void PfmVizzer::project(Lens const *lens, PfmFile const *undist_lut = 0);

441 7 extrude 0 4 488 18 PfmVizzer::extrude 0 1 219 707
////////////////////////////////////////////////////////////////////
//     Function: PfmVizzer::extrude
//       Access: Published
//  Description: Converts each (u, v, depth) point of the Pfm file to
//               an (x, y, z) point, by reversing project().  If the
//               original file is only a 1-d file, assumes that it is
//               a depth map with implicit (u, v) coordinates.
//
//               This method is only valid for a linear lens (e.g. a
//               PerspectiveLens or OrthographicLens).  Non-linear
//               lenses don't necessarily compute a sensible depth
//               coordinate.
////////////////////////////////////////////////////////////////////
42
void PfmVizzer::extrude(Lens const *lens);

442 15 set_vis_inverse 0 4 488 26 PfmVizzer::set_vis_inverse 0 1 220 771
////////////////////////////////////////////////////////////////////
//     Function: PfmVizzer::set_vis_inverse
//       Access: Published
//  Description: Sets the vis_inverse flag.  When this flag is true,
//               vis meshes and point clouds are generated with the
//               3-d depth value in the texture coordinates, and the
//               2-d index value in the vertex position.  When it is
//               false, meshes are generated normally, with the 3-d
//               depth value in the vertex position and the 2-d index
//               value in the texture coordinates.
//
//               This may be used in lieu of the lower-level
//               add_vis_column().
////////////////////////////////////////////////////////////////////
57
inline void PfmVizzer::set_vis_inverse(bool vis_inverse);

443 15 get_vis_inverse 0 4 488 26 PfmVizzer::get_vis_inverse 0 1 221 279
////////////////////////////////////////////////////////////////////
//     Function: PfmVizzer::get_vis_inverse
//       Access: Published
//  Description: Returns the vis_inverse flag.  See set_vis_inverse().
////////////////////////////////////////////////////////////////////
51
inline bool PfmVizzer::get_vis_inverse(void) const;

444 22 set_flat_texcoord_name 0 4 488 33 PfmVizzer::set_flat_texcoord_name 0 1 222 830
////////////////////////////////////////////////////////////////////
//     Function: PfmVizzer::set_flat_texcoord_name
//       Access: Published
//  Description: If the flat_texcoord_name is specified, it is the
//               name of an additional vertex column that will be
//               created for the "flat" texture coordinates, i.e. the
//               original 0..1 values that correspond to the 2-D index
//               position of each point in the original pfm file.
//
//               These are the same values that will be assigned to
//               the default texture coordinates if the vis_inverse
//               flag is *not* true.
//
//               This may be used in lieu of the lower-level
//               add_vis_column().
////////////////////////////////////////////////////////////////////
80
inline void PfmVizzer::set_flat_texcoord_name(InternalName *flat_texcoord_name);

445 24 clear_flat_texcoord_name 0 4 488 35 PfmVizzer::clear_flat_texcoord_name 0 1 223 446
////////////////////////////////////////////////////////////////////
//     Function: PfmVizzer::clear_flat_texcoord_name
//       Access: Published
//  Description: Resets the flat_texcoord_name to empty, so that
//               additional texture coordinates are not created.
//
//               This may be used in lieu of the lower-level
//               add_vis_column().
////////////////////////////////////////////////////////////////////
54
inline void PfmVizzer::clear_flat_texcoord_name(void);

446 22 get_flat_texcoord_name 0 4 488 33 PfmVizzer::get_flat_texcoord_name 0 1 224 295
////////////////////////////////////////////////////////////////////
//     Function: PfmVizzer::get_flat_texcoord_name
//       Access: Published
//  Description: Returns the flat_texcoord_name.  See set_flat_texcoord_name().
////////////////////////////////////////////////////////////////////
67
inline InternalName *PfmVizzer::get_flat_texcoord_name(void) const;

447 10 set_vis_2d 0 4 488 21 PfmVizzer::set_vis_2d 0 1 225 576
////////////////////////////////////////////////////////////////////
//     Function: PfmVizzer::set_vis_2d
//       Access: Published
//  Description: Sets the vis_2d flag.  When this flag is true,
//               only the first two (x, y) value of each depth point
//               is considered meaningful; the z component is ignored.
//               This is only relevant for generating visualizations.
//
//               This may be used in lieu of the lower-level
//               add_vis_column().
////////////////////////////////////////////////////////////////////
47
inline void PfmVizzer::set_vis_2d(bool vis_2d);

448 10 get_vis_2d 0 4 488 21 PfmVizzer::get_vis_2d 0 1 226 264
////////////////////////////////////////////////////////////////////
//     Function: PfmVizzer::get_vis_2d
//       Access: Published
//  Description: Returns the vis_2d flag.  See set_vis_2d().
////////////////////////////////////////////////////////////////////
46
inline bool PfmVizzer::get_vis_2d(void) const;

449 20 set_keep_beyond_lens 0 4 488 31 PfmVizzer::set_keep_beyond_lens 0 1 227 516
////////////////////////////////////////////////////////////////////
//     Function: PfmVizzer::set_keep_beyond_lens
//       Access: Published
//  Description: Sets the keep_beyond_lens flag.  When this flag is
//               true, points that fall outside of the normal lens
//               range in project() or in add_vis_column() will be
//               retained anyway; when it is false, these points will
//               be discarded.
////////////////////////////////////////////////////////////////////
67
inline void PfmVizzer::set_keep_beyond_lens(bool keep_beyond_lens);

450 20 get_keep_beyond_lens 0 4 488 31 PfmVizzer::get_keep_beyond_lens 0 1 228 311
////////////////////////////////////////////////////////////////////
//     Function: PfmVizzer::get_keep_beyond_lens
//       Access: Published
//  Description: Returns the keep_beyond_lens flag.  See
//               set_keep_beyond_lens().
////////////////////////////////////////////////////////////////////
56
inline bool PfmVizzer::get_keep_beyond_lens(void) const;

451 13 set_vis_blend 0 4 488 24 PfmVizzer::set_vis_blend 0 1 229 805
////////////////////////////////////////////////////////////////////
//     Function: PfmVizzer::set_vis_blend
//       Access: Published
//  Description: Specifies a blending map--a grayscale image--that
//               will be applied to the vertex color during
//               generate_vis_mesh() and generate_vis_points().  The
//               image size must exactly match the mesh size of the
//               PfmVizzer.
//
//               Ownership of the pointer is not kept by the PfmVizzer;
//               it is your responsibility to ensure it does not
//               destruct during the lifetime of the PfmVizzer (or at
//               least not before your subsequent call to
//               generate_vis_mesh()).
////////////////////////////////////////////////////////////////////
64
inline void PfmVizzer::set_vis_blend(PNMImage const *vis_blend);

452 15 clear_vis_blend 0 4 488 26 PfmVizzer::clear_vis_blend 0 1 230 305
////////////////////////////////////////////////////////////////////
//     Function: PfmVizzer::set_vis_blend
//       Access: Published
//  Description: Removes the blending map set by a prior call to
//               set_vis_blend().
////////////////////////////////////////////////////////////////////
45
inline void PfmVizzer::clear_vis_blend(void);

453 13 get_vis_blend 0 4 488 24 PfmVizzer::get_vis_blend 0 1 231 377
////////////////////////////////////////////////////////////////////
//     Function: PfmVizzer::get_vis_blend
//       Access: Published
//  Description: Returns the blending map set by the most recent call
//               to set_vis_blend(), or NULL if there is no blending
//               map in effect.
////////////////////////////////////////////////////////////////////
60
inline PNMImage const *PfmVizzer::get_vis_blend(void) const;

454 11 set_aux_pfm 0 4 488 22 PfmVizzer::set_aux_pfm 0 1 232 762
////////////////////////////////////////////////////////////////////
//     Function: PfmVizzer::set_aux_pfm
//       Access: Published
//  Description: Assigns an auxiliary PfmFile to this PfmVizzer.  This
//               file will be queried by column types
//               CT_aux_vertex1/2/3, but has no other meaning to the
//               vizzer.  This size of this PfmFile should exactly
//               match the base PfmFile.  No reference count is held
//               and no copy is made; the caller is responsible for
//               ensuring that the auxiliary PfmFile will persist
//               throughout the lifetime of the PfmVizzer it is
//               assigned to.
////////////////////////////////////////////////////////////////////
55
inline void PfmVizzer::set_aux_pfm(PfmFile const *pfm);

455 13 clear_aux_pfm 0 4 488 24 PfmVizzer::clear_aux_pfm 0 1 233 274
////////////////////////////////////////////////////////////////////
//     Function: PfmVizzer::clear_aux_pfm
//       Access: Published
//  Description: Removes the auxiliary PfmFile from this PfmVizzer.
////////////////////////////////////////////////////////////////////
43
inline void PfmVizzer::clear_aux_pfm(void);

456 11 get_aux_pfm 0 4 488 22 PfmVizzer::get_aux_pfm 0 1 234 438
////////////////////////////////////////////////////////////////////
//     Function: PfmVizzer::get_aux_pfm
//       Access: Published
//  Description: Returns the reference to the auxiliary PfmFile
//               queried by this PfmVizzer.  This contains the values
//               that will be reflected in CT_aux_vertex3 etc.  See
//               set_aux_pfm().
////////////////////////////////////////////////////////////////////
57
inline PfmFile const *PfmVizzer::get_aux_pfm(void) const;

457 17 clear_vis_columns 0 4 488 28 PfmVizzer::clear_vis_columns 0 1 235 372
////////////////////////////////////////////////////////////////////
//     Function: PfmVizzer::clear_vis_columns
//       Access: Published
//  Description: Removes all of the previously-added vis columns in
//               preparation for building a new list.  See
//               add_vis_column().
////////////////////////////////////////////////////////////////////
40
void PfmVizzer::clear_vis_columns(void);

458 14 add_vis_column 0 4 488 25 PfmVizzer::add_vis_column 0 1 236 1511
////////////////////////////////////////////////////////////////////
//     Function: PfmVizzer::add_vis_column
//       Access: Published
//  Description: Adds a new vis column specification to the list of
//               vertex data columns that will be generated at the
//               next call to generate_vis_points() or
//               generate_vis_mesh().  This advanced interface
//               supercedes the higher-level set_vis_inverse(),
//               set_flat_texcoord_name(), and set_vis_2d().
//
//               If you use this advanced interface, you must specify
//               explicitly the complete list of data columns to be
//               created in the resulting GeomVertexData, by calling
//               add_vis_column() each time.  For each column, you
//               specify the source of the column in the PFMFile, the
//               target column and name in the GeomVertexData, and an
//               optional transform matrix and/or lens to transform
//               and project the point before generating it.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PfmVizzer::add_vis_column
//       Access: Private, Static
//  Description: The private implementation of the public
//               add_vis_column(), this adds the column to the
//               indicated specific vector.
////////////////////////////////////////////////////////////////////
201
void PfmVizzer::add_vis_column(PfmVizzer::ColumnType source, PfmVizzer::ColumnType target, InternalName *name, TransformState const *transform = 0, Lens const *lens = 0, PfmFile const *undist_lut = 0);

459 19 generate_vis_points 0 4 488 30 PfmVizzer::generate_vis_points 0 1 237 445
////////////////////////////////////////////////////////////////////
//     Function: PfmVizzer::generate_vis_points
//       Access: Published
//  Description: Creates a point cloud with the points of the pfm as
//               3-d coordinates in space, and texture coordinates
//               ranging from 0 .. 1 based on the position within the
//               pfm grid.
////////////////////////////////////////////////////////////////////
52
NodePath PfmVizzer::generate_vis_points(void) const;

460 17 generate_vis_mesh 0 4 488 28 PfmVizzer::generate_vis_mesh 0 1 238 445
////////////////////////////////////////////////////////////////////
//     Function: PfmVizzer::generate_vis_mesh
//       Access: Published
//  Description: Creates a triangle mesh with the points of the pfm as
//               3-d coordinates in space, and texture coordinates
//               ranging from 0 .. 1 based on the position within the
//               pfm grid.
////////////////////////////////////////////////////////////////////
94
NodePath PfmVizzer::generate_vis_mesh(PfmVizzer::MeshFace face = ::PfmVizzer::MF_front) const;

461 23 calc_max_u_displacement 0 4 488 34 PfmVizzer::calc_max_u_displacement 0 1 239 474
////////////////////////////////////////////////////////////////////
//     Function: PfmVizzer::calc_max_u_displacement
//       Access: Published
//  Description: Computes the maximum amount of shift, in pixels
//               either left or right, of any pixel in the distortion
//               map.  This can be passed to make_displacement(); see
//               that function for more information.
////////////////////////////////////////////////////////////////////
54
double PfmVizzer::calc_max_u_displacement(void) const;

462 23 calc_max_v_displacement 0 4 488 34 PfmVizzer::calc_max_v_displacement 0 1 240 471
////////////////////////////////////////////////////////////////////
//     Function: PfmVizzer::calc_max_v_displacement
//       Access: Published
//  Description: Computes the maximum amount of shift, in pixels
//               either up or down, of any pixel in the distortion
//               map.  This can be passed to make_displacement(); see
//               that function for more information.
////////////////////////////////////////////////////////////////////
54
double PfmVizzer::calc_max_v_displacement(void) const;

463 17 make_displacement 0 4 488 28 PfmVizzer::make_displacement 0 2 241 242 2875
////////////////////////////////////////////////////////////////////
//     Function: PfmVizzer::make_displacement
//       Access: Published
//  Description: Assuming the underlying PfmFile is a 2-d distortion
//               mesh, with the U and V in the first two components
//               and the third component unused, this computes an
//               AfterEffects-style displacement map that represents
//               the same distortion.  The indicated PNMImage will be
//               filled in with a displacement map image, with
//               horizontal shift in the red channel and vertical
//               shift in the green channel, where a fully bright (or
//               fully black) pixel indicates a shift of max_u or
//               max_v pixels.
//
//               Use calc_max_u_displacement() and
//               calc_max_v_displacement() to compute suitable values
//               for max_u and max_v.
//
//               This generates an integer 16-bit displacement image.
//               It is a good idea, though not necessarily essential,
//               to check "Preserve RGB" in the interpret footage
//               section for each displacement image.  Set
//               for_32bit true if this is meant to be used in a
//               32-bit project file, and false if it is meant to be
//               used in a 16-bit project file.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PfmVizzer::make_displacement
//       Access: Published
//  Description: Assuming the underlying PfmFile is a 2-d distortion
//               mesh, with the U and V in the first two components
//               and the third component unused, this computes an
//               AfterEffects-style displacement map that represents
//               the same distortion.  The indicated PNMImage will be
//               filled in with a displacement map image, with
//               horizontal shift in the red channel and vertical
//               shift in the green channel, where a fully bright (or
//               fully black) pixel indicates a shift of max_u or
//               max_v pixels.
//
//               Use calc_max_u_displacement() and
//               calc_max_v_displacement() to compute suitable values
//               for max_u and max_v.
//
//               This generates a 32-bit floating-point displacement
//               image.  It is essential to check "Preserve RGB" in
//               the interpret footage section for each displacement
//               image.  Set for_32bit true if this is meant to
//               be used in a 32-bit project file, and false if it is
//               meant to be used in a 16-bit project file.
////////////////////////////////////////////////////////////////////
204
void PfmVizzer::make_displacement(PNMImage &result, double max_u, double max_v, bool for_32bit) const;
void PfmVizzer::make_displacement(PfmFile &result, double max_u, double max_v, bool for_32bit) const;

464 10 ~PfmVizzer 0 4 488 21 PfmVizzer::~PfmVizzer 0 0 0
28
PfmVizzer::~PfmVizzer(void);

242
1 0 0 7 3 492 244 0 218 ////////////////////////////////////////////////////////////////////
//     Function: CardMaker::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 name 1 491  
2 0 0 4 5 493 0 0 265 ////////////////////////////////////////////////////////////////////
//     Function: CardMaker::reset
//       Access: Public
//  Description: Resets all the parameters to their initial defaults.
//////////////////////////////////////////////////////////////////// 1 4 this 3 492  
3 0 0 4 6 493 0 0 508 ////////////////////////////////////////////////////////////////////
//     Function: CardMaker::set_uv_range
//       Access: Public
//  Description: Sets the range of UV's that will be applied to the
//               vertices.  If set_has_uvs() is true (as it is by
//               default), the vertices will be generated with the
//               indicated range of UV's, which will be useful if a
//               texture is applied.
//////////////////////////////////////////////////////////////////// 3 4 this 3 492  2 ll 1 494  2 ur 1 494  
4 0 0 4 6 493 0 0 508 ////////////////////////////////////////////////////////////////////
//     Function: CardMaker::set_uv_range
//       Access: Public
//  Description: Sets the range of UV's that will be applied to the
//               vertices.  If set_has_uvs() is true (as it is by
//               default), the vertices will be generated with the
//               indicated range of UV's, which will be useful if a
//               texture is applied.
//////////////////////////////////////////////////////////////////// 5 4 this 3 492  2 ll 1 494  2 lr 1 494  2 ur 1 494  2 ul 1 494  
5 0 0 4 6 493 0 0 508 ////////////////////////////////////////////////////////////////////
//     Function: CardMaker::set_uv_range
//       Access: Public
//  Description: Sets the range of UV's that will be applied to the
//               vertices.  If set_has_uvs() is true (as it is by
//               default), the vertices will be generated with the
//               indicated range of UV's, which will be useful if a
//               texture is applied.
//////////////////////////////////////////////////////////////////// 5 4 this 3 492  2 ll 1 499  2 lr 1 499  2 ur 1 499  2 ul 1 499  
6 0 0 4 6 493 0 0 508 ////////////////////////////////////////////////////////////////////
//     Function: CardMaker::set_uv_range
//       Access: Public
//  Description: Sets the range of UV's that will be applied to the
//               vertices.  If set_has_uvs() is true (as it is by
//               default), the vertices will be generated with the
//               indicated range of UV's, which will be useful if a
//               texture is applied.
//////////////////////////////////////////////////////////////////// 4 4 this 3 492  1 x 1 504  1 y 1 504  1 z 1 504  
7 0 0 4 6 493 0 0 370 ////////////////////////////////////////////////////////////////////
//     Function: CardMaker::set_uv_range
//       Access: Public
//  Description: Sets the range of UV's that will be applied to the
//               vertices appropriately to show the non-pad region
//               of the texture.
//////////////////////////////////////////////////////////////////// 2 4 this 3 492  3 tex 1 508  
8 0 0 4 7 493 0 0 336 ////////////////////////////////////////////////////////////////////
//     Function: CardMaker::set_uv_range_cube
//       Access: Public
//  Description: Sets the range of UV's that will be applied to the
//               vertices appropriately for a cube-map face.
//////////////////////////////////////////////////////////////////// 2 4 this 3 492  4 face 1 510  
9 0 0 4 8 493 0 0 313 ////////////////////////////////////////////////////////////////////
//     Function: CardMaker::set_has_uvs
//       Access: Public
//  Description: Sets the flag indicating whether vertices will be
//               generated with UV's or not.
//////////////////////////////////////////////////////////////////// 2 4 this 3 492  4 flag 1 511  
10 0 0 4 9 493 0 0 468 ////////////////////////////////////////////////////////////////////
//     Function: CardMaker::set_has_3d_uvs
//       Access: Public
//  Description: Sets the flag indicating whether vertices will be
//               generated with 3-component UVW's (true) or
//               2-component UV's (the default, false).  Normally,
//               this will be implicitly set by setting the uv_range.
//////////////////////////////////////////////////////////////////// 2 4 this 3 492  4 flag 1 511  
11 0 0 4 10 493 0 0 243 ////////////////////////////////////////////////////////////////////
//     Function: CardMaker::set_frame
//       Access: Public
//  Description: Sets the size of the card.
//////////////////////////////////////////////////////////////////// 2 4 this 3 492  5 frame 1 512  
12 0 0 4 10 493 0 0 243 ////////////////////////////////////////////////////////////////////
//     Function: CardMaker::set_frame
//       Access: Public
//  Description: Sets the size of the card.
//////////////////////////////////////////////////////////////////// 5 4 this 3 492  2 ll 1 516  2 lr 1 516  2 ur 1 516  2 ul 1 516  
13 0 0 4 10 493 0 0 243 ////////////////////////////////////////////////////////////////////
//     Function: CardMaker::set_frame
//       Access: Public
//  Description: Sets the size of the card.
//////////////////////////////////////////////////////////////////// 5 4 this 3 492  4 left 1 520  5 right 1 520  6 bottom 1 520  3 top 1 520  
14 0 0 4 11 493 0 0 387 ////////////////////////////////////////////////////////////////////
//     Function: CardMaker::set_frame_fullscreen_quad
//       Access: Public
//  Description: Sets the card to (-1,1,-1,1), which is appropriate
//               if you plan to parent it to render2d and use it
//               as a fullscreen quad.
//////////////////////////////////////////////////////////////////// 1 4 this 3 492  
15 0 0 4 12 493 0 0 0 2 4 this 3 492  5 color 1 522  
16 0 0 4 12 493 0 0 244 ////////////////////////////////////////////////////////////////////
//     Function: CardMaker::set_color
//       Access: Public
//  Description: Sets the color of the card.
//////////////////////////////////////////////////////////////////// 5 4 this 3 492  1 r 1 520  1 g 1 520  1 b 1 520  1 a 1 520  
17 0 0 4 13 493 0 0 657 ////////////////////////////////////////////////////////////////////
//     Function: CardMaker::set_has_normals
//       Access: Public
//  Description: Sets the flag indicating whether vertices will be
//               generated with normals or not.  Normals are required
//               if you intend to enable lighting on the card, but are
//               just wasted space and bandwidth otherwise, so there
//               is a (slight) optimization for disabling them.  If
//               enabled, the normals will be generated perpendicular
//               to the card's face.
//////////////////////////////////////////////////////////////////// 2 4 this 3 492  4 flag 1 511  
18 0 0 4 14 493 0 0 799 ////////////////////////////////////////////////////////////////////
//     Function: CardMaker::set_source_geometry
//       Access: Published
//  Description: Sets a node that will be copied (and scaled and
//               translated) to generate the frame, instead of
//               generating a new polygon.  The node may contain
//               arbitrary geometry that describes a flat polygon
//               contained within the indicated left, right, bottom,
//               top frame.
//
//               When generate() is called, the geometry in this node
//               will be scaled and translated appropriately to give
//               it the size and aspect ratio specified by
//               set_frame().
//////////////////////////////////////////////////////////////////// 3 4 this 3 492  4 node 1 526  5 frame 1 512  
19 0 0 4 15 493 0 0 320 ////////////////////////////////////////////////////////////////////
//     Function: CardMaker::clear_source_geometry
//       Access: Published
//  Description: Removes the node specified by an earlier call to
//               set_source_geometry().
//////////////////////////////////////////////////////////////////// 1 4 this 3 492  
20 0 0 7 16 526 0 0 290 ////////////////////////////////////////////////////////////////////
//     Function: CardMaker::generate
//       Access: Public
//  Description: Generates a GeomNode that renders the specified
//               geometry.
//////////////////////////////////////////////////////////////////// 1 4 this 3 492  
21 0 0 7 18 527 258 0 221 ////////////////////////////////////////////////////////////////////
//     Function: FisheyeMaker::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 name 1 491  
22 0 0 4 20 493 0 0 268 ////////////////////////////////////////////////////////////////////
//     Function: FisheyeMaker::reset
//       Access: Public
//  Description: Resets all the parameters to their initial defaults.
//////////////////////////////////////////////////////////////////// 1 4 this 3 527  
23 0 0 4 21 493 0 0 384 ////////////////////////////////////////////////////////////////////
//     Function: FisheyeMaker::set_fov
//       Access: Public
//  Description: Specifies the field of view of the fisheye
//               projection.  A sphere map will have a 360-degree
//               field of view (and this is the default).
//////////////////////////////////////////////////////////////////// 2 4 this 3 527  3 fov 1 520  
24 0 0 4 22 493 0 0 596 ////////////////////////////////////////////////////////////////////
//     Function: FisheyeMaker::set_num_vertices
//       Access: Public
//  Description: Specifies the approximate number of vertices to be
//               used to generate the rose.  This is the approximate
//               number of vertices that will be located within the
//               rose's unit circle, not counting the inscribing
//               square (if any).  The actual number of vertices used
//               may be +/- 25% of this value.
//////////////////////////////////////////////////////////////////// 2 4 this 3 527  12 num_vertices 1 510  
25 0 0 4 23 493 0 0 946 ////////////////////////////////////////////////////////////////////
//     Function: FisheyeMaker::set_square_inscribed
//       Access: Public
//  Description: Sets the flag that indicates whether the rose should
//               be inscribed within a square.  When this is true, an
//               additional square is generated to inscribed the
//               circular rose, with the indicated "radius" (the sides
//               of the square will be 2 * square_radius).  The
//               texture coordinates of the square will uniformly map
//               to the back pole of the cube map.
//
//               This is mainly useful to provide a good uniform
//               background color for a sphere map so that it does not
//               have a sharp circular edge that might produce
//               artifacts due to numerical imprecision when mapping.
//////////////////////////////////////////////////////////////////// 3 4 this 3 527  16 square_inscribed 1 511  13 square_radius 1 520  
26 0 0 4 24 493 0 0 614 ////////////////////////////////////////////////////////////////////
//     Function: FisheyeMaker::set_reflection
//       Access: Public
//  Description: Sets the flag indicating whether the texture image
//               should be mirrored (true) or normal (false).  When
//               this is true, the 3-D texture coordinates will be
//               reversed so that the image is appropriate for a
//               reflection.  This is the best choice for generating a
//               sphere map from a cube map.  The default is false.
//////////////////////////////////////////////////////////////////// 2 4 this 3 527  10 reflection 1 511  
27 0 0 7 25 526 0 0 293 ////////////////////////////////////////////////////////////////////
//     Function: FisheyeMaker::generate
//       Access: Public
//  Description: Generates a GeomNode that renders the specified
//               geometry.
//////////////////////////////////////////////////////////////////// 1 4 this 3 527  
28 0 0 7 28 528 0 0 226 ////////////////////////////////////////////////////////////////////
//     Function: FrameRateMeter::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 name 1 491  
29 0 0 4 29 493 0 0 360 ////////////////////////////////////////////////////////////////////
//     Function: FrameRateMeter::setup_window
//       Access: Published
//  Description: Sets up the frame rate meter to create a
//               DisplayRegion to render itself into the indicated
//               window.
//////////////////////////////////////////////////////////////////// 2 4 this 3 528  6 window 1 529  
30 0 0 4 30 493 0 0 300 ////////////////////////////////////////////////////////////////////
//     Function: FrameRateMeter::clear_window
//       Access: Published
//  Description: Undoes the effect of a previous call to
//               setup_window().
//////////////////////////////////////////////////////////////////// 1 4 this 3 528  
31 0 0 7 31 529 0 0 368 ////////////////////////////////////////////////////////////////////
//     Function: FrameRateMeter::get_window
//       Access: Published
//  Description: Returns the GraphicsOutput that was passed to
//               setup_window(), or NULL if setup_window() has not
//               been called.
//////////////////////////////////////////////////////////////////// 1 4 this 3 531  
32 0 0 7 32 534 0 0 419 ////////////////////////////////////////////////////////////////////
//     Function: FrameRateMeter::get_display_region
//       Access: Published
//  Description: Returns the DisplayRegion that the meter has created
//               to render itself into the window to setup_window(),
//               or NULL if setup_window() has not been called.
//////////////////////////////////////////////////////////////////// 1 4 this 3 531  
33 0 0 4 33 493 0 0 537 ////////////////////////////////////////////////////////////////////
//     Function: FrameRateMeter::set_update_interval
//       Access: Published
//  Description: Specifies the number of seconds that should elapse
//               between updates to the frame rate indication.  This
//               should be reasonably slow (e.g. 0.2 to 1.0) so that
//               the calculation of the frame rate text does not
//               itself dominate the frame rate.
//////////////////////////////////////////////////////////////////// 2 4 this 3 528  15 update_interval 1 535  
34 0 0 6 34 535 0 0 344 ////////////////////////////////////////////////////////////////////
//     Function: FrameRateMeter::get_update_interval
//       Access: Published
//  Description: Returns the number of seconds that will elapse
//               between updates to the frame rate indication.
//////////////////////////////////////////////////////////////////// 1 4 this 3 531  
35 0 0 4 35 493 0 0 442 ////////////////////////////////////////////////////////////////////
//     Function: FrameRateMeter::set_text_pattern
//       Access: Published
//  Description: Sets the sprintf() pattern that is used to format the
//               text.  The string "%f" or some variant will be
//               replaced with the current frame rate in frames per
//               second.
//////////////////////////////////////////////////////////////////// 2 4 this 3 528  12 text_pattern 1 491  
36 0 0 6 36 491 0 0 311 ////////////////////////////////////////////////////////////////////
//     Function: FrameRateMeter::get_text_pattern
//       Access: Published
//  Description: Returns the sprintf() pattern that is used to format the
//               text.
//////////////////////////////////////////////////////////////////// 1 4 this 3 531  
37 0 0 4 37 493 0 0 404 ////////////////////////////////////////////////////////////////////
//     Function: FrameRateMeter::set_clock_object
//       Access: Published
//  Description: Sets the clock that is used to determine the frame
//               rate.  The default is the application's global clock
//               (ClockObject::get_global_clock()).
//////////////////////////////////////////////////////////////////// 2 4 this 3 528  12 clock_object 1 536  
38 0 0 7 38 536 0 0 308 ////////////////////////////////////////////////////////////////////
//     Function: FrameRateMeter::get_clock_object
//       Access: Published
//  Description: Returns the clock that is used to determine the frame
//               rate.
//////////////////////////////////////////////////////////////////// 1 4 this 3 531  
39 0 0 4 39 493 0 0 442 ////////////////////////////////////////////////////////////////////
//     Function: FrameRateMeter::update
//       Access: Published
//  Description: You can call this to explicitly force the
//               FrameRateMeter to update itself with the latest frame
//               rate information.  Normally, it is not necessary to
//               call this explicitly.
//////////////////////////////////////////////////////////////////// 1 4 this 3 528  
40 0 0 7 40 539 0 0 0 0 
41 0 0 7 43 540 0 0 225 ////////////////////////////////////////////////////////////////////
//     Function: GeoMipTerrain::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 name 1 491  
42 0 0 6 44 541 0 0 396 ////////////////////////////////////////////////////////////////////
//     Function: GeoMipTerrain::heightfield
//       Access: Published
//  Description: Returns a reference to the heightfield (a PNMImage)
//               contained inside GeoMipTerrain.  You can use
//               the reference to alter the heightfield.
//////////////////////////////////////////////////////////////////// 1 4 this 3 540  
43 0 0 6 45 511 0 0 511 ////////////////////////////////////////////////////////////////////
//     Function: GeoMipTerrain::set_heightfield
//       Access: Published
//  Description: Loads the specified heightmap image file into
//               the heightfield. Returns true if succeeded, or
//               false if an error has occured.
//               If the heightmap is not a power of two plus one,
//               it is scaled up using a gaussian filter.
//////////////////////////////////////////////////////////////////// 3 4 this 3 540  8 filename 1 543  4 type 1 546  
44 0 0 6 45 511 0 0 511 ////////////////////////////////////////////////////////////////////
//     Function: GeoMipTerrain::set_heightfield
//       Access: Published
//  Description: Loads the specified heightmap image file into
//               the heightfield. Returns true if succeeded, or
//               false if an error has occured.
//               If the heightmap is not a power of two plus one,
//               it is scaled up using a gaussian filter.
//////////////////////////////////////////////////////////////////// 2 4 this 3 540  5 image 1 548  
45 0 0 6 46 541 0 0 390 ////////////////////////////////////////////////////////////////////
//     Function: GeoMipTerrain::color_map
//       Access: Published
//  Description: Returns a reference to the color map (a PNMImage)
//               contained inside GeoMipTerrain.  You can use
//               the reference to alter the color map.
//////////////////////////////////////////////////////////////////// 1 4 this 3 540  
46 0 0 6 47 511 0 0 511 ////////////////////////////////////////////////////////////////////
//     Function: GeoMipTerrain::set_color_map
//       Access: Published
//  Description: Loads the specified image as color map. The next
//               time generate() is called, the terrain is painted
//               with this color map using the vertex color column.
//               Returns a boolean indicating whether the operation
//               has succeeded.
//////////////////////////////////////////////////////////////////// 3 4 this 3 540  8 filename 1 543  4 type 1 546  
47 0 0 6 47 511 0 0 0 2 4 this 3 540  5 image 1 548  
48 0 0 6 47 511 0 0 0 2 4 this 3 540  5 image 1 508  
49 0 0 6 47 511 0 0 0 2 4 this 3 540  4 path 1 491  
50 0 0 6 48 511 0 0 269 ////////////////////////////////////////////////////////////////////
//     Function: GeoMipTerrain::has_color_map
//       Access: Published
//  Description: Returns whether a color map has been set.
//////////////////////////////////////////////////////////////////// 1 4 this 3 550  
51 0 0 4 49 493 0 0 251 ////////////////////////////////////////////////////////////////////
//     Function: GeoMipTerrain::clear_color_map
//       Access: Published
//  Description: Clears the color map.
//////////////////////////////////////////////////////////////////// 1 4 this 3 540  
52 0 0 4 50 493 0 0 533 ////////////////////////////////////////////////////////////////////
//     Function: GeoMipTerrain::calc_ambient_occlusion
//       Access: Published
//  Description: Calculates an approximate for the ambient occlusion
//               and stores it in the color map, so that it will be
//               written to the vertex colors. Any existing color
//               map will be discarded.
//               You need to call this before generating the geometry.
//////////////////////////////////////////////////////////////////// 4 4 this 3 540  6 radius 1 520  8 contrast 1 520  10 brightness 1 520  
53 0 0 6 51 535 0 0 745 ////////////////////////////////////////////////////////////////////
//     Function: GeoMipTerrain::get_elevation
//       Access: Published
//  Description: Fetches the elevation at (x, y), where the input
//               coordinate is specified in pixels. This ignores
//               the current LOD level and instead provides an
//               accurate number. Linear blending is used for
//               non-integral coordinates.
//               Terrain scale is NOT taken into account! To get
//               accurate normals, please multiply this with the
//               terrain Z scale!
//
//               trueElev = terr.get_elevation(x,y) * terr.get_sz();
//////////////////////////////////////////////////////////////////// 3 4 this 3 540  1 x 1 535  1 y 1 535  
54 0 0 7 52 554 0 0 909 ////////////////////////////////////////////////////////////////////
//     Function: GeoMipTerrain::get_normal
//       Access: Published
//  Description: Fetches the terrain normal at (x, y), where the
//               input coordinate is specified in pixels. This
//               ignores the current LOD level and instead provides
//               an accurate number.
//               Terrain scale is NOT taken into account! To get
//               accurate normals, please divide it by the
//               terrain scale and normalize it again, like this:
//
//               LVector3 normal (terr.get_normal(x, y));
//               normal.set(normal.get_x() / root.get_sx(),
//                          normal.get_y() / root.get_sy(),
//                          normal.get_z() / root.get_sz());
//               normal.normalize();
//////////////////////////////////////////////////////////////////// 3 4 this 3 540  1 x 1 510  1 y 1 510  
55 0 0 7 52 554 0 0 618 ////////////////////////////////////////////////////////////////////
//     Function: GeoMipTerrain::get_normal
//       Access: Published
//  Description: Fetches the terrain normal at (x,y), where the input
//               coordinate is specified in pixels. This ignores the
//               current LOD level and instead provides an
//               accurate number.
//               Terrain scale is NOT taken into account! To get
//               accurate normals, please divide it by the
//               terrain scale and normalize it again!
//////////////////////////////////////////////////////////////////// 5 4 this 3 540  2 mx 1 555  2 my 1 555  1 x 1 510  1 y 1 510  
56 0 0 4 53 493 0 0 518 ////////////////////////////////////////////////////////////////////
//     Function: GeoMipTerrain::set_bruteforce
//       Access: Published
//  Description: Sets a boolean specifying whether the terrain will
//               be rendered bruteforce. If the terrain is rendered
//               bruteforce, there will be no Level of Detail, and
//               the update() call will only update the
//               terrain if it is marked dirty.
//////////////////////////////////////////////////////////////////// 2 4 this 3 540  2 bf 1 511  
57 0 0 6 54 511 0 0 372 ////////////////////////////////////////////////////////////////////
//     Function: GeoMipTerrain::get_bruteforce
//       Access: Published
//  Description: Returns a boolean whether the terrain is rendered
//               bruteforce or not. See set_bruteforce for more
//               information.
//////////////////////////////////////////////////////////////////// 1 4 this 3 540  
58 0 0 4 56 493 0 0 473 ////////////////////////////////////////////////////////////////////
//     Function: GeoMipTerrain::set_auto_flatten
//       Access: Private
//  Description: The terrain can be automatically flattened (using
//               flatten_light, flatten_medium, or flatten_strong)
//               after each update.  This only affects future
//               updates, it doesn't flatten the current terrain.
//////////////////////////////////////////////////////////////////// 2 4 this 3 540  4 mode 1 510  
59 0 0 4 57 493 0 0 276 // The focal point is the point at which the terrain will have the
// highest quality (lowest level of detail). Parts farther away from
// the focal point will have a lower quality (higher level of detail).
// The focal point is not taken in respect if bruteforce is set true. 2 4 this 3 540  2 fp 1 556  
60 0 0 4 57 493 0 0 0 2 4 this 3 540  2 fp 1 559  
61 0 0 4 57 493 0 0 0 2 4 this 3 540  2 fp 1 561  
62 0 0 4 57 493 0 0 0 2 4 this 3 540  2 fp 1 564  
63 0 0 4 57 493 0 0 0 2 4 this 3 540  3 fnp 1 566  
64 0 0 4 57 493 0 0 657 ////////////////////////////////////////////////////////////////////
//     Function: GeoMipTerrain::set_focal_point
//       Access: Published
//  Description: Sets the focal point.  GeoMipTerrain generates
//               high-resolution terrain around the focal point, and
//               progressively lower and lower resolution terrain
//               as you get farther away. If a point is supplied
//               and not a NodePath, make sure it's relative to
//               the terrain. Only the x and y coordinates of
//               the focal point are taken in respect.
//////////////////////////////////////////////////////////////////// 3 4 this 3 540  1 x 1 535  1 y 1 535  
65 0 0 7 58 566 0 0 394 ////////////////////////////////////////////////////////////////////
//     Function: GeoMipTerrain::get_focal_point
//       Access: Published
//  Description: Returns the focal point, as a NodePath.
//               If you have set it to be just a point, it will
//               return an empty node at the focal position.
//////////////////////////////////////////////////////////////////// 1 4 this 3 550  
66 0 0 7 59 566 0 0 546 ////////////////////////////////////////////////////////////////////
//     Function: GeoMipTerrain::get_root
//       Access: Published
//  Description: Returns the root of the terrain.  This is a
//               single PandaNode to which all the rest of the
//               terrain is parented.  The generate and update
//               operations replace the nodes which are parented
//               to this root, but they don't replace this root
//               itself.
//////////////////////////////////////////////////////////////////// 1 4 this 3 550  
67 0 0 4 60 493 0 0 329 ////////////////////////////////////////////////////////////////////
//     Function: GeoMipTerrain::set_block_size
//       Access: Published
//  Description: Sets the block size. If it is not a power of two,
//               the closest power of two is used.
//////////////////////////////////////////////////////////////////// 2 4 this 3 540  5 newbs 1 555  
68 0 0 6 61 555 0 0 249 ////////////////////////////////////////////////////////////////////
//     Function: GeoMipTerrain::get_block_size
//       Access: Published
//  Description: Gets the block size.
//////////////////////////////////////////////////////////////////// 1 4 this 3 540  
69 0 0 6 62 555 0 0 387 ////////////////////////////////////////////////////////////////////
//     Function: GeoMipTerrain::get_max_level
//       Access: Published
//  Description: Returns the highest level possible for this block
//               size. When a block is at this level, it will be
//               the worst quality possible.
//////////////////////////////////////////////////////////////////// 1 4 this 3 540  
70 0 0 4 63 493 0 0 518 ////////////////////////////////////////////////////////////////////
//     Function: GeoMipTerrain::set_min_level
//       Access: Published
//  Description: Sets the minimum level of detail at which blocks
//               may be generated by generate() or update().
//               The default value is 0, which is the highest
//               quality. This value is also taken in respect when
//               generating the terrain bruteforce.
//////////////////////////////////////////////////////////////////// 2 4 this 3 540  8 minlevel 1 555  
71 0 0 6 64 555 0 0 425 ////////////////////////////////////////////////////////////////////
//     Function: GeoMipTerrain::get_min_level
//       Access: Published
//  Description: Gets the minimum level of detail at which blocks
//               may be generated by generate() or update().
//               The default value is 0, which is the highest
//               quality.
//////////////////////////////////////////////////////////////////// 1 4 this 3 540  
72 0 0 6 65 511 0 0 585 ////////////////////////////////////////////////////////////////////
//     Function: GeoMipTerrain::is_dirty
//       Access: Published
//  Description: Returns a bool indicating whether the terrain is
//               marked 'dirty', that means the terrain has to be
//               regenerated on the next update() call, because
//               for instance the heightfield has changed.
//               Once the terrain has been regenerated, the dirty
//               flag automatically gets reset internally.
//////////////////////////////////////////////////////////////////// 1 4 this 3 540  
73 0 0 4 66 493 0 0 633 ////////////////////////////////////////////////////////////////////
//     Function: GeoMipTerrain::set_factor
//       Access: Published
//  Description: DEPRECATED method. Use set_near/far instead.
//               Sets the quality factor at which blocks must be
//               generated. The higher this level, the better
//               quality the terrain will be, but more expensive
//               to render. A value of 0 makes the terrain the
//               lowest quality possible, depending on blocksize.
//               The default value is 100.
//////////////////////////////////////////////////////////////////// 2 4 this 3 540  6 factor 1 520  
74 0 0 4 67 493 0 0 275 ////////////////////////////////////////////////////////////////////
//     Function: GeoMipTerrain::set_near_far
//       Access: Published
//  Description: Sets the near and far LOD distances in one call.
//////////////////////////////////////////////////////////////////// 3 4 this 3 540  10 input_near 1 535  9 input_far 1 535  
75 0 0 4 68 493 0 0 394 ////////////////////////////////////////////////////////////////////
//     Function: GeoMipTerrain::set_near
//       Access: Published
//  Description: Sets the near LOD distance, at which the terrain
//               will be rendered at highest quality.
//               This distance is in the terrain's coordinate space!
//////////////////////////////////////////////////////////////////// 2 4 this 3 540  10 input_near 1 535  
76 0 0 4 69 493 0 0 391 ////////////////////////////////////////////////////////////////////
//     Function: GeoMipTerrain::set_far
//       Access: Published
//  Description: Sets the far LOD distance, at which the terrain
//               will be rendered at lowest quality.
//               This distance is in the terrain's coordinate space!
//////////////////////////////////////////////////////////////////// 2 4 this 3 540  9 input_far 1 535  
77 0 0 7 70 569 0 0 724 ////////////////////////////////////////////////////////////////////
//     Function: GeoMipTerrain::get_block_node_path
//       Access: Published
//  Description: Returns the NodePath of the specified block.
//               If auto-flatten is enabled and the node is
//               getting removed during the flattening process,
//               it will still return a NodePath with the
//               appropriate terrain chunk, but it will be in
//               a temporary scenegraph.
//               Please note that this returns a const object and
//               you can not modify the node. Modify the heightfield
//               instead.
//////////////////////////////////////////////////////////////////// 3 4 this 3 540  2 mx 1 555  2 my 1 555  
78 0 0 7 71 572 0 0 832 ////////////////////////////////////////////////////////////////////
//     Function: GeoMipTerrain::get_block_from_pos
//       Access: Published
//  Description: Gets the coordinates of the block at the specified
//               position. This position must be relative to the
//               terrain, not to render. Returns an array containing
//               two values: the block x and the block y coords.
//               If the positions are out of range, the closest
//               block is taken.
//               Note that the VecBase returned does not represent
//               a vector, position, or rotation, but it contains
//               the block index of the block which you can use
//               in GeoMipTerrain::get_block_node_path.
//////////////////////////////////////////////////////////////////// 3 4 this 3 540  1 x 1 535  1 y 1 535  
79 0 0 4 72 493 0 0 690 ////////////////////////////////////////////////////////////////////
//     Function: GeoMipTerrain::set_border_stitching
//       Access: Published
//  Description: If this value is true, the LOD level at the
//               borders of the terrain will be 0. This is useful
//               if you have multiple terrains attached and you
//               want to stitch them together, to fix seams.
//               This setting also has effect when bruteforce is
//               enabled, although in that case you are probably
//               better off with setting the minlevels to the same
//               value.
//////////////////////////////////////////////////////////////////// 2 4 this 3 540  9 stitching 1 511  
80 0 0 6 73 511 0 0 336 ////////////////////////////////////////////////////////////////////
//     Function: GeoMipTerrain::get_stitching
//       Access: Published
//  Description: Returns the current stitching setting. False by
//               default, unless set_stitching has been set.
//////////////////////////////////////////////////////////////////// 1 4 this 3 540  
81 0 0 6 74 535 0 0 299 ////////////////////////////////////////////////////////////////////
//     Function: GeoMipTerrain::get_far
//       Access: Published
//  Description: Returns the far LOD distance in the terrain coordinate
//               space
//////////////////////////////////////////////////////////////////// 1 4 this 3 540  
82 0 0 6 75 535 0 0 301 ////////////////////////////////////////////////////////////////////
//     Function: GeoMipTerrain::get_near
//       Access: Published
//  Description: Returns the near LOD distance in the terrain coordinate
//               space
//////////////////////////////////////////////////////////////////// 1 4 this 3 540  
83 0 0 6 76 510 0 0 344 ////////////////////////////////////////////////////////////////////
//     Function: GeoMipTerrain::get_flatten_mode
//       Access: Published
//  Description: Returns the automatic-flatten mode (e.g., off,
//               flatten_light, flatten_medium, or flatten_strong)
//////////////////////////////////////////////////////////////////// 1 4 this 3 540  
84 0 0 7 77 541 0 0 888 ////////////////////////////////////////////////////////////////////
//     Function: GeoMipTerrain::make_slope_image
//       Access: Published
//  Description: Returns a new grayscale image containing the slope
//               angles. A white pixel value means a vertical slope,
//               while a black pixel will mean that the terrain is
//               entirely flat at that pixel.
//               You can translate it to degrees by mapping the
//               greyscale values from 0 to 90 degrees.
//               The resulting image will have the same size as the
//               heightfield image.
//               The scale will be taken into respect -- meaning,
//               if you change the terrain scale, the slope image
//               will need to be regenerated in order to be correct.
//////////////////////////////////////////////////////////////////// 1 4 this 3 540  
85 0 0 4 78 493 0 0 463 ////////////////////////////////////////////////////////////////////
//     Function: GeoMipTerrain::generate
//       Access: Published
//  Description: (Re)generates the entire terrain, erasing the
//               current.
//               This call un-flattens the terrain, so make sure
//               you have set auto-flatten if you want to keep
//               your terrain flattened.
//////////////////////////////////////////////////////////////////// 1 4 this 3 540  
86 0 0 6 79 511 0 0 790 ////////////////////////////////////////////////////////////////////
//     Function: GeoMipTerrain::update
//       Access: Published
//  Description: Loops through all of the terrain blocks, and
//               checks whether they need to be updated.
//               If that is indeed the case, it regenerates the
//               mipmap. Returns a true when the terrain has
//               changed. Returns false when the terrain isn't
//               updated at all. If there is no terrain yet,
//               it generates the entire terrain.
//               This call un-flattens the terrain, so make sure
//               you have set auto-flatten if you want to keep
//               your terrain flattened.
//////////////////////////////////////////////////////////////////// 1 4 this 3 540  
87 0 0 7 80 539 0 0 0 0 
88 0 0 7 82 573 316 0 233 ////////////////////////////////////////////////////////////////////
//     Function: HeightfieldTesselator::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 name 1 491  
89 0 0 6 84 541 0 0 416 ////////////////////////////////////////////////////////////////////
//     Function: HeightfieldTesselator::heightfield
//       Access: Published
//  Description: Returns a reference to the heightfield (a PNMImage)
//               contained inside the HeightfieldTesselator.  You
//               can use the reference to alter the heightfield.
//////////////////////////////////////////////////////////////////// 1 4 this 3 573  
90 0 0 6 85 511 0 0 317 ////////////////////////////////////////////////////////////////////
//     Function: HeightfieldTesselator::set_heightfield
//       Access: Published
//  Description: Loads the specified greyscale image file into
//               the heightfield.
//////////////////////////////////////////////////////////////////// 3 4 this 3 573  8 filename 1 543  4 type 1 546  
91 0 0 4 86 493 0 0 385 ////////////////////////////////////////////////////////////////////
//     Function: HeightfieldTesselator::set_poly_count
//       Access: Public
//  Description: Sets the polygon-count target.  The tesselator
//               usually manages to come within about 20% of the
//               target, plus or minus.
//////////////////////////////////////////////////////////////////// 2 4 this 3 573  1 n 1 510  
92 0 0 4 87 493 0 0 677 ////////////////////////////////////////////////////////////////////
//     Function: HeightfieldTesselator::set_visibility_radius
//       Access: Published
//  Description: Sets the visibility radius.  Polygons that
//               are completely outside the radius (relative to
//               the focal point) are cropped away.  The cropping
//               is imperfect (all approximations are conservative),
//               so this should be used in conjunction with a far
//               clipping plane, fog, or some other visibility
//               limiting mechanism.  The units are in pixels.
//////////////////////////////////////////////////////////////////// 2 4 this 3 573  1 r 1 510  
93 0 0 4 88 493 0 0 488 ////////////////////////////////////////////////////////////////////
//     Function: HeightfieldTesselator::set_focal_point
//       Access: Published
//  Description: Sets the focal point.  The tesselator generates
//               high-resolution terrain around the focal point, and
//               progressively lower and lower resolution terrain
//               as you get farther away.  The units are in pixels.
//////////////////////////////////////////////////////////////////// 3 4 this 3 573  1 x 1 510  1 y 1 510  
94 0 0 4 89 493 0 0 398 ////////////////////////////////////////////////////////////////////
//     Function: HeightfieldTesselator::set_horizontal_scale
//       Access: Published
//  Description: Sets the horizontal scale.  The default scale is 1.0,
//               meaning that each pixel in the heightfield is
//               1x1 panda units wide.
//////////////////////////////////////////////////////////////////// 2 4 this 3 573  1 h 1 535  
95 0 0 4 90 493 0 0 423 ////////////////////////////////////////////////////////////////////
//     Function: HeightfieldTesselator::set_vertical_scale
//       Access: Published
//  Description: Sets the vertical scale.  The default scale is 255.0,
//               meaning that each as the gray value ranges from (0-1),
//               the elevation ranges from (0-255) feet.
//////////////////////////////////////////////////////////////////// 2 4 this 3 573  1 v 1 535  
96 0 0 4 91 493 0 0 272 ////////////////////////////////////////////////////////////////////
//     Function: HeightfieldTesselator::set_max_triangles
//       Access: Published
//  Description: Sets the max triangles per geom.
//////////////////////////////////////////////////////////////////// 2 4 this 3 573  1 n 1 510  
97 0 0 6 92 535 0 0 525 ////////////////////////////////////////////////////////////////////
//     Function: HeightfieldTesselator::get_elevation
//       Access: Private
//  Description: Fetches the elevation at (x,y), where the input
//               coordinate is specified in pixels.  This ignores the
//               current tesselation level and instead provides an
//               accurate number.  Linear blending is used for 
//               non-integral coordinates.
//////////////////////////////////////////////////////////////////// 3 4 this 3 573  1 x 1 535  1 y 1 535  
98 0 0 7 93 566 0 0 346 ////////////////////////////////////////////////////////////////////
//     Function: HeightfieldTesselator::generate
//       Access: Published
//  Description: Generates a tree of nodes that represents the
//               heightfield.  This can be reparented into the scene.
//////////////////////////////////////////////////////////////////// 1 4 this 3 573  
99 0 0 7 95 574 328 0 649 ////////////////////////////////////////////////////////////////////
//     Function: LineSegs::Constructor
//       Access: Public
//  Description: Constructs a LineSegs object, which can be used to
//               create any number of disconnected lines or points of
//               various thicknesses and colors through the visible
//               scene.  After creating the object, call move_to() and
//               draw_to() repeatedly to describe the path, then call
//               create() to create a GeomNode which will render the
//               described path.
//////////////////////////////////////////////////////////////////// 1 4 name 1 491  
100 0 0 4 97 493 0 0 297 ////////////////////////////////////////////////////////////////////
//     Function: LineSegs::reset
//       Access: Public
//  Description: Removes any lines in progress and resets to the
//               initial empty state.
//////////////////////////////////////////////////////////////////// 1 4 this 3 574  
101 0 0 4 98 493 0 0 361 ////////////////////////////////////////////////////////////////////
//     Function: LineSegs::set_color
//       Access: Public
//  Description: Establishes the color that will be assigned to all
//               vertices created by future calls to move_to() and
//               draw_to().
//////////////////////////////////////////////////////////////////// 2 4 this 3 574  5 color 1 522  
102 0 0 4 98 493 0 0 361 ////////////////////////////////////////////////////////////////////
//     Function: LineSegs::set_color
//       Access: Public
//  Description: Establishes the color that will be assigned to all
//               vertices created by future calls to move_to() and
//               draw_to().
//////////////////////////////////////////////////////////////////// 5 4 this 3 574  1 r 1 520  1 g 1 520  1 b 1 520  1 a 1 520  
103 0 0 4 99 493 0 0 391 ////////////////////////////////////////////////////////////////////
//     Function: LineSegs::set_thickness
//       Access: Public
//  Description: Establishes the line thickness or point size in
//               pixels that will be assigned to all lines and points
//               created by future calls to create().
//////////////////////////////////////////////////////////////////// 2 4 this 3 574  5 thick 1 520  
104 0 0 4 100 493 0 0 465 ////////////////////////////////////////////////////////////////////
//     Function: LineSegs::move_to
//       Access: Public
//  Description: Moves the pen to the given point without drawing a
//               line.  When followed by draw_to(), this marks the
//               first point of a line segment; when followed by
//               move_to() or create(), this creates a single point.
//////////////////////////////////////////////////////////////////// 2 4 this 3 574  1 v 1 575  
105 0 0 4 100 493 0 0 465 ////////////////////////////////////////////////////////////////////
//     Function: LineSegs::move_to
//       Access: Public
//  Description: Moves the pen to the given point without drawing a
//               line.  When followed by draw_to(), this marks the
//               first point of a line segment; when followed by
//               move_to() or create(), this creates a single point.
//////////////////////////////////////////////////////////////////// 4 4 this 3 574  1 x 1 520  1 y 1 520  1 z 1 520  
106 0 0 4 101 493 0 0 495 ////////////////////////////////////////////////////////////////////
//     Function: LineSegs::draw_to
//       Access: Public
//  Description: Draws a line segment from the pen's last position
//               (the last call to move_to or draw_to) to the
//               indicated point.  move_to() and draw_to() only update
//               tables; the actual drawing is performed when create()
//               is called.
//////////////////////////////////////////////////////////////////// 2 4 this 3 574  1 v 1 575  
107 0 0 4 101 493 0 0 495 ////////////////////////////////////////////////////////////////////
//     Function: LineSegs::draw_to
//       Access: Public
//  Description: Draws a line segment from the pen's last position
//               (the last call to move_to or draw_to) to the
//               indicated point.  move_to() and draw_to() only update
//               tables; the actual drawing is performed when create()
//               is called.
//////////////////////////////////////////////////////////////////// 4 4 this 3 574  1 x 1 520  1 y 1 520  1 z 1 520  
108 0 0 6 102 516 0 0 349 ////////////////////////////////////////////////////////////////////
//     Function: LineSegs::get_current_position
//       Access: Public
//  Description: Returns the pen's current position.  The next call to
//               draw_to() will draw a line segment from this point.
//////////////////////////////////////////////////////////////////// 1 4 this 3 574  
109 0 0 6 103 511 0 0 358 ////////////////////////////////////////////////////////////////////
//     Function: LineSegs::empty
//       Access: Public
//  Description: Returns true if move_to() or draw_to() have not been
//               called since the last reset() or create(), false
//               otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 574  
110 0 0 7 104 580 0 0 745 ////////////////////////////////////////////////////////////////////
//     Function: LineSegs::create
//       Access: Public
//  Description: Appends to an existing GeomNode a new Geom that
//               will render the series of line segments and points
//               described via calls to move_to() and draw_to().  The
//               lines and points are created with the color and
//               thickness established by calls to set_color() and
//               set_thick().
//
//               If dynamic is true, the line segments will be created
//               with the dynamic Geom setting, optimizing them for
//               runtime vertex animation.
//////////////////////////////////////////////////////////////////// 3 4 this 3 574  8 previous 1 580  7 dynamic 1 511  
111 0 0 7 104 580 0 0 708 ////////////////////////////////////////////////////////////////////
//     Function: LineSegs::create
//       Access: Public
//  Description: Creates a new GeomNode that will render the series of
//               line segments and points described via calls to
//               move_to() and draw_to().  The lines and points are
//               created with the color and thickness established by
//               calls to set_color() and set_thick().
//
//               If dynamic is true, the line segments will be created
//               with the dynamic Geom setting, optimizing them for
//               runtime vertex animation.
//////////////////////////////////////////////////////////////////// 2 4 this 3 574  7 dynamic 1 511  
112 0 0 6 105 510 0 0 470 ////////////////////////////////////////////////////////////////////
//     Function: LineSegs::get_num_vertices
//       Access: Public
//  Description: Returns the total number of line segment and point
//               vertices generated by the last call to create().  The
//               positions of these vertices may be read and adjusted
//               through get_vertex() and set_vertex().
//////////////////////////////////////////////////////////////////// 1 4 this 3 581  
113 0 0 7 106 583 0 0 513 ////////////////////////////////////////////////////////////////////
//     Function: LineSegs::get_vertex
//       Access: Public
//  Description: Returns the nth point or vertex of the line segment
//               sequence generated by the last call to create().  The
//               first move_to() generates vertex 0; subsequent
//               move_to() and draw_to() calls generate consecutively
//               higher vertex numbers.
//////////////////////////////////////////////////////////////////// 2 4 this 3 581  1 n 1 510  
114 0 0 4 107 493 0 0 511 ////////////////////////////////////////////////////////////////////
//     Function: LineSegs::set_vertex
//       Access: Public
//  Description: Moves the nth point or vertex of the line segment
//               sequence generated by the last call to create().  The
//               first move_to() generates vertex 0; subsequent
//               move_to() and draw_to() calls generate consecutively
//               higher vertex numbers.
//////////////////////////////////////////////////////////////////// 3 4 this 3 574  1 n 1 510  4 vert 1 516  
115 0 0 4 107 493 0 0 511 ////////////////////////////////////////////////////////////////////
//     Function: LineSegs::set_vertex
//       Access: Public
//  Description: Moves the nth point or vertex of the line segment
//               sequence generated by the last call to create().  The
//               first move_to() generates vertex 0; subsequent
//               move_to() and draw_to() calls generate consecutively
//               higher vertex numbers.
//////////////////////////////////////////////////////////////////// 5 4 this 3 574  6 vertex 1 510  1 x 1 520  1 y 1 520  1 z 1 520  
116 0 0 7 108 584 0 0 268 ////////////////////////////////////////////////////////////////////
//     Function: LineSegs::get_vertex_color
//       Access: Public
//  Description: Returns the color of the nth point or vertex.
//////////////////////////////////////////////////////////////////// 2 4 this 3 581  6 vertex 1 510  
117 0 0 4 109 493 0 0 310 ////////////////////////////////////////////////////////////////////
//     Function: LineSegs::set_vertex_color
//       Access: Public
//  Description: Changes the vertex color of the nth point or vertex.
//               See set_vertex().
//////////////////////////////////////////////////////////////////// 3 4 this 3 574  6 vertex 1 510  1 c 1 522  
118 0 0 4 109 493 0 0 310 ////////////////////////////////////////////////////////////////////
//     Function: LineSegs::set_vertex_color
//       Access: Public
//  Description: Changes the vertex color of the nth point or vertex.
//               See set_vertex().
//////////////////////////////////////////////////////////////////// 6 4 this 3 574  6 vertex 1 510  1 r 1 520  1 g 1 520  1 b 1 520  1 a 1 520  
119 0 0 7 111 585 0 0 263 ////////////////////////////////////////////////////////////////////
//     Function: MeshDrawer::Constructor
//       Access: Published
//  Description: Creates the MeshDrawer low level system.
//////////////////////////////////////////////////////////////////// 0 
120 0 0 4 112 493 0 0 385 ////////////////////////////////////////////////////////////////////
//     Function: MeshDrawer::set_budget
//       Access: Published
//  Description: Sets the total triangle budget of the drawer.
//               This will not be exceeded.  Don't set some thing too 
//               large because it will be slow
//////////////////////////////////////////////////////////////////// 2 4 this 3 585  6 budget 1 510  
121 0 0 6 113 510 0 0 268 ////////////////////////////////////////////////////////////////////
//     Function: MeshDrawer::get_budget()
//       Access: Published
//  Description: Gets the total triangle budget of the drawer
//////////////////////////////////////////////////////////////////// 1 4 this 3 585  
122 0 0 7 114 566 0 0 424 ////////////////////////////////////////////////////////////////////
//     Function: MeshDrawer::get_root
//       Access: Published
//  Description: Returns the root NodePath.  You should use this node
//               to reparent mesh drawer onto the scene
//               might also want to disable depth draw or enable
//               transparency.
//////////////////////////////////////////////////////////////////// 1 4 this 3 585  
123 0 0 4 115 493 0 0 367 ////////////////////////////////////////////////////////////////////
//     Function: MeshDrawer::begin
//       Access: Published
//  Description: Pass the current camera node and the root node.
//               Passing the camera is required to generate
//               bill boards that face it.
//////////////////////////////////////////////////////////////////// 3 4 this 3 585  6 camera 1 566  6 render 1 566  
124 0 0 4 116 493 0 0 258 ////////////////////////////////////////////////////////////////////
//     Function: MeshDrawer::tri
//       Access: Published
//  Description: Draws a triangle with the given parameters.
//////////////////////////////////////////////////////////////////// 10 4 this 3 585  2 v1 1 586  2 c1 1 504  3 uv1 1 588  2 v2 1 586  2 c2 1 504  3 uv2 1 588  2 v3 1 586  2 c3 1 504  3 uv3 1 588  
125 0 0 4 117 493 0 0 385 ////////////////////////////////////////////////////////////////////
//     Function: MeshDrawer::particle
//       Access: Published
//  Description: Draws a particle that is sort of like a bill board
//               but has an extra rotation component.
//               Frame contains u,v,u-size,v-size quadruple.
//////////////////////////////////////////////////////////////////// 6 4 this 3 585  3 pos 1 586  5 frame 1 504  4 size 1 520  5 color 1 504  8 rotation 1 520  
126 0 0 4 118 493 0 0 400 ////////////////////////////////////////////////////////////////////
//     Function: MeshDrawer::blended_particle
//       Access: Published
//  Description: Works just like particle but accepts 2 frames and
//               a blend (from 0 to 1) component between them
//               Frame contains u,v,u-size,v-size quadruple.
//////////////////////////////////////////////////////////////////// 8 4 this 3 585  3 pos 1 586  6 frame1 1 504  6 frame2 1 504  5 blend 1 520  4 size 1 520  5 color 1 504  8 rotation 1 520  
127 0 0 4 119 493 0 0 380 ////////////////////////////////////////////////////////////////////
//     Function: MeshDrawer::billboard
//       Access: Published
//  Description: Draws a billboard - particle with no rotation.
//               Billboards always face the camera.
//               Frame contains u,v,u-size,v-size quadruple.
//////////////////////////////////////////////////////////////////// 5 4 this 3 585  3 pos 1 586  5 frame 1 504  4 size 1 520  5 color 1 504  
128 0 0 4 120 493 0 0 367 ////////////////////////////////////////////////////////////////////
//     Function: MeshDrawer::segment
//       Access: Published
//  Description: Draws a segment a line with a thickness. That has
//               billboarding effect.
//               Frame contains u,v,u-size,v-size quadruple.
//////////////////////////////////////////////////////////////////// 6 4 this 3 585  5 start 1 586  4 stop 1 586  5 frame 1 504  9 thickness 1 520  5 color 1 504  
129 0 0 4 121 493 0 0 503 ////////////////////////////////////////////////////////////////////
//     Function: MeshDrawer::cross_segment
//       Access: Published
//  Description: Draws a segment a line with a thickness.  This
//               segment does not use the bill boarding behavior
//               and instead draws 2 planes in a cross.
//               Stars at start and ends at stop.
//               Frame contains u,v,u-size,v-size quadruple.
//////////////////////////////////////////////////////////////////// 6 4 this 3 585  5 start 1 586  4 stop 1 586  5 frame 1 504  9 thickness 1 520  5 color 1 504  
130 0 0 4 122 493 0 0 426 ////////////////////////////////////////////////////////////////////
//     Function: MeshDrawer::uneven_segment
//       Access: Published
//  Description: Draws a segment a line with different thickness
//               and color on both sides.
//               Stars at start and ends at stop.
//               Frame contains u,v,u-size,v-size quadruple.
//////////////////////////////////////////////////////////////////// 8 4 this 3 585  5 start 1 586  4 stop 1 586  5 frame 1 504  15 thickness_start 1 520  11 color_start 1 504  14 thickness_stop 1 520  10 color_stop 1 504  
131 0 0 4 123 493 0 0 415 ////////////////////////////////////////////////////////////////////
//     Function: MeshDrawer::link_segment
//       Access: Published
//  Description: Stars or continues linked segment.
//               Control position, frame, thickness and color with
//               parameters.
//               Frame contains u,v,u-size,v-size quadruple.
//////////////////////////////////////////////////////////////////// 5 4 this 3 585  3 pos 1 586  5 frame 1 504  9 thickness 1 520  5 color 1 504  
132 0 0 4 124 493 0 0 433 ////////////////////////////////////////////////////////////////////
//     Function: MeshDrawer::link_segment_end
//       Access: Published
//  Description: Finish drawing linked segments, needs at least
//               two calls to link_segment before it can end
//               the linked segment.
//               Frame contains u,v,u-size,v-size quadruple.
//////////////////////////////////////////////////////////////////// 3 4 this 3 585  5 frame 1 504  5 color 1 504  
133 0 0 4 125 493 0 0 333 ////////////////////////////////////////////////////////////////////
//     Function: MeshDrawer::explosion
//       Access: Published
//  Description: Draws number of particles in a sphere like emitter.
//               Frame contains u,v,u-size,v-size quadruple.
//////////////////////////////////////////////////////////////////// 8 4 this 3 585  3 pos 1 586  5 frame 1 504  4 size 1 520  5 color 1 504  4 seed 1 510  6 number 1 510  8 distance 1 520  
134 0 0 4 126 493 0 0 374 ////////////////////////////////////////////////////////////////////
//     Function: MeshDrawer::stream
//       Access: Published
//  Description: Draws a number of particles in a big line with a
//               shift dictated by the offset.
//               Frame contains u,v,u-size,v-size quadruple.
//////////////////////////////////////////////////////////////////// 8 4 this 3 585  5 start 1 586  4 stop 1 586  5 frame 1 504  4 size 1 520  5 color 1 504  6 number 1 510  6 offset 1 520  
135 0 0 4 127 493 0 0 559 ////////////////////////////////////////////////////////////////////
//     Function: MeshDrawer::geometry
//       Access: Published
//  Description: Draws the geometry that is inside this node path into
//               the MeshDrawer object.  This performs a similar
//               functions as RigidBodyCombiner but for very
//               dynamic situations that share the same texture
//               like physcal chunks of explosions.  
//               It can be a little slow 
//////////////////////////////////////////////////////////////////// 2 4 this 3 585  4 node 1 566  
136 0 0 4 128 493 0 0 293 ////////////////////////////////////////////////////////////////////
//     Function: MeshDrawer::end
//       Access: Published
//  Description: Finish the drawing and clearing off the remaining
//               vertexes.  
//////////////////////////////////////////////////////////////////// 1 4 this 3 585  
137 0 0 7 129 539 0 0 0 0 
138 0 0 7 131 592 0 0 267 ////////////////////////////////////////////////////////////////////
//     Function: MeshDrawer2D::Constructor
//       Access: Published
//  Description: Creates the MeshDrawer2D low level system.
//////////////////////////////////////////////////////////////////// 0 
139 0 0 4 132 493 0 0 269 ////////////////////////////////////////////////////////////////////
//     Function: MeshDrawer2D::set_budget
//       Access: Published
//  Description: Sets the total triangle budget of the drawer.
//////////////////////////////////////////////////////////////////// 2 4 this 3 592  6 budget 1 510  
140 0 0 6 133 510 0 0 270 ////////////////////////////////////////////////////////////////////
//     Function: MeshDrawer2D::get_budget()
//       Access: Published
//  Description: Gets the total triangle budget of the drawer
//////////////////////////////////////////////////////////////////// 1 4 this 3 592  
141 0 0 7 134 566 0 0 248 ////////////////////////////////////////////////////////////////////
//     Function: MeshDrawer2D::get_root
//       Access: Published
//  Description: Returns the root NodePath.
//////////////////////////////////////////////////////////////////// 1 4 this 3 592  
142 0 0 4 135 493 0 0 286 ////////////////////////////////////////////////////////////////////
//     Function: MeshDrawer2D::quad
//       Access: Published
//  Description: Draws a 2d rectangle.
//               Ignores the cliping rectangle
//////////////////////////////////////////////////////////////////// 13 4 this 3 592  2 v1 1 586  2 c1 1 504  3 uv1 1 588  2 v2 1 586  2 c2 1 504  3 uv2 1 588  2 v3 1 586  2 c3 1 504  3 uv3 1 588  2 v4 1 586  2 c4 1 504  3 uv4 1 588  
143 0 0 4 136 493 0 0 0 10 4 this 3 592  1 x 1 520  1 y 1 520  1 w 1 520  1 h 1 520  1 u 1 520  1 v 1 520  2 us 1 520  2 vs 1 520  5 color 1 504  
144 0 0 4 137 493 0 0 247 ////////////////////////////////////////////////////////////////////
//     Function: MeshDrawer2D::set_budget
//       Access: Published
//  Description: Sets clipping rectangle
//////////////////////////////////////////////////////////////////// 5 4 this 3 592  1 x 1 520  1 y 1 520  1 w 1 520  1 h 1 520  
145 0 0 4 138 493 0 0 258 ////////////////////////////////////////////////////////////////////
//     Function: MeshDrawer2D::quad
//       Access: Published
//  Description: Draws a 2d rectangle, that can be cliped
//////////////////////////////////////////////////////////////////// 10 4 this 3 592  1 x 1 520  1 y 1 520  1 w 1 520  1 h 1 520  1 u 1 520  1 v 1 520  2 us 1 520  2 vs 1 520  5 color 1 504  
146 0 0 4 139 493 0 0 318 ////////////////////////////////////////////////////////////////////
//     Function: MeshDrawer2D::quad
//       Access: Published
//  Description: Draws a 2d rectangle, with borders and corders, 
//               taken from the surrounding texture
//////////////////////////////////////////////////////////////////// 18 4 this 3 592  1 x 1 520  1 y 1 520  1 w 1 520  1 h 1 520  1 r 1 520  1 t 1 520  1 l 1 520  1 b 1 520  2 tr 1 520  2 tt 1 520  2 tl 1 520  2 tb 1 520  1 u 1 520  1 v 1 520  2 us 1 520  2 vs 1 520  5 color 1 504  
147 0 0 4 140 493 0 0 318 ////////////////////////////////////////////////////////////////////
//     Function: MeshDrawer2D::quad
//       Access: Published
//  Description: Draws a 2d rectangle, with borders and corders, 
//               taken from the surrounding texture
//////////////////////////////////////////////////////////////////// 18 4 this 3 592  1 x 1 520  1 y 1 520  1 w 1 520  1 h 1 520  1 r 1 520  1 t 1 520  1 l 1 520  1 b 1 520  2 tr 1 520  2 tt 1 520  2 tl 1 520  2 tb 1 520  1 u 1 520  1 v 1 520  2 us 1 520  2 vs 1 520  5 color 1 504  
148 0 0 4 141 493 0 0 290 ////////////////////////////////////////////////////////////////////
//     Function: MeshDrawer2D::quad
//       Access: Published
//  Description: Draws a tiled rectangle, size of tiles is in 
//               us and vs
//////////////////////////////////////////////////////////////////// 10 4 this 3 592  1 x 1 520  1 y 1 520  1 w 1 520  1 h 1 520  1 u 1 520  1 v 1 520  2 us 1 520  2 vs 1 520  5 color 1 504  
149 0 0 4 142 493 0 0 307 ////////////////////////////////////////////////////////////////////
//     Function: MeshDrawer2D::begin
//       Access: Published
//  Description: Opens up the geom for drawing, don't forget to call
//               MeshDrawer2D::end()
//////////////////////////////////////////////////////////////////// 1 4 this 3 592  
150 0 0 4 143 493 0 0 293 ////////////////////////////////////////////////////////////////////
//     Function: MeshDrawer2D::end
//       Access: Published
//  Description: Finish the drawing and clearing off the remaining
//               vertexes.
//////////////////////////////////////////////////////////////////// 1 4 this 3 592  
151 0 0 7 144 539 0 0 0 0 
152 0 0 7 147 595 0 0 271 ////////////////////////////////////////////////////////////////////
//     Function: MovieTexture::Constructor
//       Access: Published
//  Description: Creates a texture playing the specified movie.
//////////////////////////////////////////////////////////////////// 1 5 video 1 593  
153 0 0 7 147 595 0 0 329 ////////////////////////////////////////////////////////////////////
//     Function: MovieTexture::Constructor
//       Access: Published
//  Description: Creates a blank movie texture.  Movies must be 
//               added using do_read_one or do_load_one.
//////////////////////////////////////////////////////////////////// 1 4 name 1 491  
154 0 0 6 148 535 0 0 262 ////////////////////////////////////////////////////////////////////
//     Function: MovieTexture::get_video_length
//       Access: Published
//  Description: Returns the length of the video.
//////////////////////////////////////////////////////////////////// 1 4 this 3 596  
155 0 0 6 149 510 0 0 463 ////////////////////////////////////////////////////////////////////
//     Function: MovieTexture::get_video_width
//       Access: Published
//  Description: Returns the width in texels of the source video
//               stream.  This is not necessarily the width of the
//               actual texture, since the texture may have been
//               expanded to raise it to a power of 2.
//////////////////////////////////////////////////////////////////// 1 4 this 3 596  
156 0 0 6 150 510 0 0 466 ////////////////////////////////////////////////////////////////////
//     Function: MovieTexture::get_video_height
//       Access: Published
//  Description: Returns the height in texels of the source video
//               stream.  This is not necessarily the height of the
//               actual texture, since the texture may have been
//               expanded to raise it to a power of 2.
//////////////////////////////////////////////////////////////////// 1 4 this 3 596  
157 0 0 7 151 599 0 0 386 ////////////////////////////////////////////////////////////////////
//     Function: MovieTexture::get_color_cursor
//       Access: Published
//  Description: Returns the MovieVideoCursor that is feeding the
//               color channels for the indicated page, where 0 <=
//               page < get_num_pages().
//////////////////////////////////////////////////////////////////// 2 4 this 3 595  4 page 1 510  
158 0 0 7 152 599 0 0 385 ////////////////////////////////////////////////////////////////////
//     Function: MovieTexture::get_alpha_cursor
//       Access: Published
//  Description: Returns the MovieVideoCursor that is feeding the
//               alpha channel for the indicated page, where 0 <=
//               page < get_num_pages().
//////////////////////////////////////////////////////////////////// 2 4 this 3 595  4 page 1 510  
159 0 0 4 153 493 0 0 400 ////////////////////////////////////////////////////////////////////
//     Function: MovieTexture::restart
//       Access: Published
//  Description: Start playing the movie from where it was last
//               paused.  Has no effect if the movie is not paused,
//               or if the movie's cursor is already at the end.
//////////////////////////////////////////////////////////////////// 1 4 this 3 595  
160 0 0 4 154 493 0 0 383 ////////////////////////////////////////////////////////////////////
//     Function: MovieTexture::stop
//       Access: Published
//  Description: Stops a currently playing or looping movie right
//               where it is.  The movie's cursor remains frozen at
//               the point where it was stopped.
//////////////////////////////////////////////////////////////////// 1 4 this 3 595  
161 0 0 4 155 493 0 0 253 ////////////////////////////////////////////////////////////////////
//     Function: MovieTexture::play
//       Access: Published
//  Description: Plays the movie from the beginning.
//////////////////////////////////////////////////////////////////// 1 4 this 3 595  
162 0 0 4 156 493 0 0 246 ////////////////////////////////////////////////////////////////////
//     Function: MovieTexture::set_time
//       Access: Published
//  Description: Sets the movie's cursor.
//////////////////////////////////////////////////////////////////// 2 4 this 3 595  1 t 1 535  
163 0 0 6 157 535 0 0 565 ////////////////////////////////////////////////////////////////////
//     Function: MovieTexture::get_time
//       Access: Published
//  Description: Returns the current value of the movie's cursor.
//               If the movie's loop count is greater than one, then
//               its length is effectively multiplied for the
//               purposes of this function.  In other words, 
//               the return value will be in the range 0.0 
//               to (length * loopcount).
//////////////////////////////////////////////////////////////////// 1 4 this 3 596  
164 0 0 4 158 493 0 0 335 ////////////////////////////////////////////////////////////////////
//     Function: MovieTexture::set_loop
//       Access: Published
//  Description: If true, sets the movie's loop count to 1 billion.
//               If false, sets the movie's loop count to one.
//////////////////////////////////////////////////////////////////// 2 4 this 3 595  6 enable 1 511  
165 0 0 6 159 511 0 0 298 ////////////////////////////////////////////////////////////////////
//     Function: MovieTexture::get_loop
//       Access: Published
//  Description: Returns true if the movie's loop count is not equal
//               to one.
//////////////////////////////////////////////////////////////////// 1 4 this 3 596  
166 0 0 4 160 493 0 0 277 ////////////////////////////////////////////////////////////////////
//     Function: MovieTexture::set_loop_count
//       Access: Published
//  Description: Sets the movie's loop count to the desired value.
//////////////////////////////////////////////////////////////////// 2 4 this 3 595  5 count 1 510  
167 0 0 6 161 510 0 0 259 ////////////////////////////////////////////////////////////////////
//     Function: MovieTexture::get_loop_count
//       Access: Published
//  Description: Returns the movie's loop count.
//////////////////////////////////////////////////////////////////// 1 4 this 3 596  
168 0 0 4 162 493 0 0 412 ////////////////////////////////////////////////////////////////////
//     Function: MovieTexture::set_play_rate
//       Access: Published
//  Description: Sets the movie's play-rate.  This is the speed at
//               which the movie's cursor advances.  The default is
//               to advance 1.0 movie-seconds per real-time second.
//////////////////////////////////////////////////////////////////// 2 4 this 3 595  9 play_rate 1 535  
169 0 0 6 163 535 0 0 254 ////////////////////////////////////////////////////////////////////
//     Function: MovieTexture::get_play_rate
//       Access: Published
//  Description: Gets the movie's play-rate.
//////////////////////////////////////////////////////////////////// 1 4 this 3 596  
170 0 0 6 164 511 0 0 272 ////////////////////////////////////////////////////////////////////
//     Function: MovieTexture::is_playing
//       Access: Published
//  Description: Returns true if the movie's cursor is advancing.
//////////////////////////////////////////////////////////////////// 1 4 this 3 596  
171 0 0 4 165 493 0 0 375 ////////////////////////////////////////////////////////////////////
//     Function: MovieTexture::synchronize_to
//       Access: Published
//  Description: Synchronize this texture to a sound.  Typically,
//               you would load the texture and the sound from the
//               same AVI file.
//////////////////////////////////////////////////////////////////// 2 4 this 3 595  5 sound 1 600  
172 0 0 4 166 493 0 0 259 ////////////////////////////////////////////////////////////////////
//     Function: MovieTexture::unsynchronize
//       Access: Published
//  Description: Stop synchronizing with a sound.
//////////////////////////////////////////////////////////////////// 1 4 this 3 595  
173 0 0 7 167 539 0 0 0 0 
174 0 0 7 169 602 397 0 0 0 
175 0 0 4 171 493 0 0 0 1 4 this 3 602  
176 0 0 4 172 493 0 0 820 ////////////////////////////////////////////////////////////////////
//     Function: MultitexReducer::scan
//       Access: Published
//  Description: Starts scanning the hierarchy beginning at the
//               indicated node.  Any GeomNodes discovered in the
//               hierarchy with multitexture will be added to internal
//               structures in the MultitexReducer so that a future
//               call to flatten() will operate on all of these at
//               once.
//
//               This version of this method does not accumulate state
//               from the parents of the indicated node; thus, only
//               multitexture effects that have been applied at node
//               and below will be considered.
//////////////////////////////////////////////////////////////////// 2 4 this 3 602  4 node 1 569  
177 0 0 4 172 493 0 0 1290 ////////////////////////////////////////////////////////////////////
//     Function: MultitexReducer::scan
//       Access: Published
//  Description: Starts scanning the hierarchy beginning at the
//               indicated node.  Any GeomNodes discovered in the
//               hierarchy with multitexture will be added to internal
//               structures in the MultitexReducer so that a future
//               call to flatten() will operate on all of these at
//               once.
//
//               The second parameter represents the NodePath from
//               which to accumulate the state that is considered for
//               the multitexture.  Pass an empty NodePath to
//               accumulate all the state from the root of the graph,
//               or you may specify some other node here in order to
//               not consider nodes above that as contributing to the
//               state to be flattened.  This is particularly useful
//               if you have some texture stage which is applied
//               globally to a scene (for instance, a caustics
//               effect), which you don't want to be considered for
//               flattening by the MultitexReducer.
//////////////////////////////////////////////////////////////////// 3 4 this 3 602  4 node 1 569  10 state_from 1 569  
178 0 0 4 172 493 0 0 0 4 4 this 3 602  4 node 1 526  5 state 1 603  9 transform 1 606  
179 0 0 4 173 493 0 0 0 2 4 this 3 602  5 stage 1 609  
180 0 0 4 174 493 0 0 0 2 4 this 3 602  8 use_geom 1 511  
181 0 0 4 175 493 0 0 0 2 4 this 3 602  13 allow_tex_mat 1 511  
182 0 0 4 176 493 0 0 0 2 4 this 3 602  6 window 1 529  
183 0 0 7 179 615 408 0 231 ////////////////////////////////////////////////////////////////////
//     Function: NodeVertexTransform::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 node 1 611  4 prev 1 613  
184 0 0 7 180 611 0 0 305 ////////////////////////////////////////////////////////////////////
//     Function: NodeVertexTransform::get_node
//       Access: Published
//  Description: Returns the PandaNode whose transform supplies this
//               object.
//////////////////////////////////////////////////////////////////// 1 4 this 3 616  
185 0 0 7 181 613 0 0 352 ////////////////////////////////////////////////////////////////////
//     Function: NodeVertexTransform::get_prev
//       Access: Published
//  Description: Returns the VertexTransform object whose matrix will
//               be composed with the result of this node's transform.
//////////////////////////////////////////////////////////////////// 1 4 this 3 616  
186 0 0 7 182 539 0 0 0 0 
187 0 0 7 185 618 0 0 236 ////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzerMeter::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 name 1 491  4 node 1 526  
188 0 0 4 186 493 0 0 369 ////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzerMeter::setup_window
//       Access: Published
//  Description: Sets up the frame rate meter to create a
//               DisplayRegion to render itself into the indicated
//               window.
//////////////////////////////////////////////////////////////////// 2 4 this 3 618  6 window 1 529  
189 0 0 4 187 493 0 0 309 ////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzerMeter::clear_window
//       Access: Published
//  Description: Undoes the effect of a previous call to
//               setup_window().
//////////////////////////////////////////////////////////////////// 1 4 this 3 618  
190 0 0 7 188 529 0 0 377 ////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzerMeter::get_window
//       Access: Published
//  Description: Returns the GraphicsOutput that was passed to
//               setup_window(), or NULL if setup_window() has not
//               been called.
//////////////////////////////////////////////////////////////////// 1 4 this 3 619  
191 0 0 7 189 534 0 0 428 ////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzerMeter::get_display_region
//       Access: Published
//  Description: Returns the DisplayRegion that the meter has created
//               to render itself into the window to setup_window(),
//               or NULL if setup_window() has not been called.
//////////////////////////////////////////////////////////////////// 1 4 this 3 619  
192 0 0 4 190 493 0 0 535 ////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzerMeter::set_update_interval
//       Access: Published
//  Description: Specifies the number of seconds that should elapse
//               between updates to the meter.  This should be
//               reasonably slow (e.g. 0.5 to 2.0) so that the
//               calculation of the scene graph analysis does not
//               itself dominate the frame rate.
//////////////////////////////////////////////////////////////////// 2 4 this 3 618  15 update_interval 1 535  
193 0 0 6 191 535 0 0 353 ////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzerMeter::get_update_interval
//       Access: Published
//  Description: Returns the number of seconds that will elapse
//               between updates to the frame rate indication.
//////////////////////////////////////////////////////////////////// 1 4 this 3 619  
194 0 0 4 192 493 0 0 262 ////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzerMeter::set_node
//       Access: Published
//  Description: Sets the node to be analyzed.
//////////////////////////////////////////////////////////////////// 2 4 this 3 618  4 node 1 526  
195 0 0 7 193 526 0 0 265 ////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzerMeter::get_node
//       Access: Published
//  Description: Returns the node to be analyzed.
//////////////////////////////////////////////////////////////////// 1 4 this 3 619  
196 0 0 4 194 493 0 0 469 ////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzerMeter::update
//       Access: Published
//  Description: You can call this to explicitly force the
//               SceneGraphAnalyzerMeter to update itself with the
//               latest scene graph analysis information.
//               Normally, it is not necessary to call this explicitly.
//////////////////////////////////////////////////////////////////// 1 4 this 3 618  
197 0 0 7 195 539 0 0 0 0 
198 0 0 7 198 621 424 0 229 ////////////////////////////////////////////////////////////////////
//     Function: RigidBodyCombiner::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 name 1 491  
199 0 0 4 199 493 0 0 1362 ////////////////////////////////////////////////////////////////////
//     Function: RigidBodyCombiner::collect
//       Access: Published
//  Description: Walks through the entire subgraph of nodes rooted at
//               this node, accumulates all of the RenderAttribs and
//               Geoms below this node, flattening them into just one
//               Geom (or as few as possible, if there are multiple
//               different states).
//
//               Nodes that have transforms on them at the time of
//               collect(), or any ModelNodes with the
//               preserve_transform flag, will be identified as
//               "moving" nodes, and their transforms will be
//               monitored as they change in future frames and each
//               new transform directly applied to the vertices.
//               
//               This call must be made after adding any nodes to or
//               removing any nodes from the subgraph rooted at this
//               node.  It should not be made too often, as it is a
//               relatively expensive call.  If you need to hide
//               children of this node, consider scaling them to zero
//               (or very near zero), or moving them behind the
//               camera, instead.
//////////////////////////////////////////////////////////////////// 1 4 this 3 621  
200 0 0 7 200 566 0 0 620 ////////////////////////////////////////////////////////////////////
//     Function: RigidBodyCombiner::get_internal_scene
//       Access: Published
//  Description: Returns a special NodePath that represents the
//               internal node of this object.  This is the node that
//               is actually sent to the graphics card for rendering;
//               it contains the collection of the children of this
//               node into as few Geoms as possible.  
//
//               This node is filled up by the last call to collect().
//////////////////////////////////////////////////////////////////// 1 4 this 3 621  
201 0 0 7 201 539 0 0 0 0 
202 0 0 7 210 622 437 0 238 ////////////////////////////////////////////////////////////////////
//     Function: PipeOcclusionCullTraverser::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 host 1 529  
203 0 0 7 210 622 437 0 243 ////////////////////////////////////////////////////////////////////
//     Function: PipeOcclusionCullTraverser::Copy Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 623  
204 0 0 4 211 493 0 0 245 ////////////////////////////////////////////////////////////////////
//     Function: PipeOcclusionCullTraverser::set_scene
//       Access: Published, Virtual
//  Description:
//////////////////////////////////////////////////////////////////// 4 4 this 3 622  11 scene_setup 1 625  3 gsg 1 627  20 dr_incomplete_render 1 511  
205 0 0 4 212 493 0 0 407 ////////////////////////////////////////////////////////////////////
//     Function: PipeOcclusionCullTraverser::end_traverse
//       Access: Public, Virtual
//  Description: Should be called when the traverser has finished
//               traversing its scene, this gives it a chance to do
//               any necessary finalization.
//////////////////////////////////////////////////////////////////// 1 4 this 3 622  
206 0 0 7 213 529 0 0 238 ////////////////////////////////////////////////////////////////////
//     Function: PipeOcclusionCullTraverser::get_buffer
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 623  
207 0 0 7 214 629 0 0 338 ////////////////////////////////////////////////////////////////////
//     Function: PipeOcclusionCullTraverser::get_texture
//       Access: Published
//  Description: Returns a Texture that can be used to visualize the
//               efforts of the occlusion cull.
//////////////////////////////////////////////////////////////////// 1 4 this 3 622  
208 0 0 4 215 493 0 0 536 ////////////////////////////////////////////////////////////////////
//     Function: PipeOcclusionCullTraverser::set_occlusion_mask
//       Access: Public
//  Description: Specifies the DrawMask that should be set on
//               occlusion polygons for this scene.  This identifies
//               the polygons that are to be treated as occluders.
//               Polygons that do not have this draw mask set will not
//               be considered occluders.
//////////////////////////////////////////////////////////////////// 2 4 this 3 622  14 occlusion_mask 1 630  
209 0 0 6 216 630 0 0 331 ////////////////////////////////////////////////////////////////////
//     Function: PipeOcclusionCullTraverser::get_occlusion_mask
//       Access: Public
//  Description: Returns the DrawMask for occlusion polygons.  See
//               set_occlusion_mask().
//////////////////////////////////////////////////////////////////// 1 4 this 3 623  
210 0 0 7 217 539 0 0 0 0 
211 0 0 7 205 635 0 0 0 1 4 this 3 622  
212 0 0 7 206 622 437 0 0 1 4 this 3 635  
213 0 0 6 208 636 0 0 0 1 4 this 3 622  
214 0 0 7 209 622 437 0 0 1 4 this 3 636  
215 0 0 7 220 639 464 0 526 ////////////////////////////////////////////////////////////////////
//     Function: PfmVizzer::Constructor
//       Access: Published
//  Description: The PfmVizzer constructor receives a reference to a
//               PfmFile which it will operate on.  It does not keep
//               ownership of this reference; it is your
//               responsibility to ensure the PfmFile does not
//               destruct during the lifetime of the PfmVizzer.
//////////////////////////////////////////////////////////////////// 1 3 pfm 1 637  
216 0 0 6 221 637 0 0 302 ////////////////////////////////////////////////////////////////////
//     Function: PfmVizzer::get_pfm
//       Access: Published
//  Description: Returns the reference to the PfmFile manipulated by
//               this PfmVizzer.
//////////////////////////////////////////////////////////////////// 1 4 this 3 639  
217 0 0 6 221 642 0 0 302 ////////////////////////////////////////////////////////////////////
//     Function: PfmVizzer::get_pfm
//       Access: Published
//  Description: Returns the reference to the PfmFile manipulated by
//               this PfmVizzer.
//////////////////////////////////////////////////////////////////// 1 4 this 3 640  
218 0 0 4 222 493 0 0 633 ////////////////////////////////////////////////////////////////////
//     Function: PfmVizzer::project
//       Access: Published
//  Description: Adjusts each (x, y, z) point of the Pfm file by
//               projecting it through the indicated lens, converting
//               each point to a (u, v, w) texture coordinate.  The
//               resulting file can be generated to a mesh (with
//               set_vis_inverse(true) and generate_vis_mesh())
//               that will apply the lens distortion to an arbitrary
//               texture image.
//////////////////////////////////////////////////////////////////// 3 4 this 3 639  4 lens 1 644  10 undist_lut 1 642  
219 0 0 4 223 493 0 0 707 ////////////////////////////////////////////////////////////////////
//     Function: PfmVizzer::extrude
//       Access: Published
//  Description: Converts each (u, v, depth) point of the Pfm file to
//               an (x, y, z) point, by reversing project().  If the
//               original file is only a 1-d file, assumes that it is
//               a depth map with implicit (u, v) coordinates.
//
//               This method is only valid for a linear lens (e.g. a
//               PerspectiveLens or OrthographicLens).  Non-linear
//               lenses don't necessarily compute a sensible depth
//               coordinate.
//////////////////////////////////////////////////////////////////// 2 4 this 3 639  4 lens 1 644  
220 0 0 4 224 493 0 0 771 ////////////////////////////////////////////////////////////////////
//     Function: PfmVizzer::set_vis_inverse
//       Access: Published
//  Description: Sets the vis_inverse flag.  When this flag is true,
//               vis meshes and point clouds are generated with the
//               3-d depth value in the texture coordinates, and the
//               2-d index value in the vertex position.  When it is
//               false, meshes are generated normally, with the 3-d
//               depth value in the vertex position and the 2-d index
//               value in the texture coordinates.
//
//               This may be used in lieu of the lower-level
//               add_vis_column().
//////////////////////////////////////////////////////////////////// 2 4 this 3 639  11 vis_inverse 1 511  
221 0 0 6 225 511 0 0 279 ////////////////////////////////////////////////////////////////////
//     Function: PfmVizzer::get_vis_inverse
//       Access: Published
//  Description: Returns the vis_inverse flag.  See set_vis_inverse().
//////////////////////////////////////////////////////////////////// 1 4 this 3 640  
222 0 0 4 226 493 0 0 830 ////////////////////////////////////////////////////////////////////
//     Function: PfmVizzer::set_flat_texcoord_name
//       Access: Published
//  Description: If the flat_texcoord_name is specified, it is the
//               name of an additional vertex column that will be
//               created for the "flat" texture coordinates, i.e. the
//               original 0..1 values that correspond to the 2-D index
//               position of each point in the original pfm file.
//
//               These are the same values that will be assigned to
//               the default texture coordinates if the vis_inverse
//               flag is *not* true.
//
//               This may be used in lieu of the lower-level
//               add_vis_column().
//////////////////////////////////////////////////////////////////// 2 4 this 3 639  18 flat_texcoord_name 1 647  
223 0 0 4 227 493 0 0 446 ////////////////////////////////////////////////////////////////////
//     Function: PfmVizzer::clear_flat_texcoord_name
//       Access: Published
//  Description: Resets the flat_texcoord_name to empty, so that
//               additional texture coordinates are not created.
//
//               This may be used in lieu of the lower-level
//               add_vis_column().
//////////////////////////////////////////////////////////////////// 1 4 this 3 639  
224 0 0 7 228 647 0 0 295 ////////////////////////////////////////////////////////////////////
//     Function: PfmVizzer::get_flat_texcoord_name
//       Access: Published
//  Description: Returns the flat_texcoord_name.  See set_flat_texcoord_name().
//////////////////////////////////////////////////////////////////// 1 4 this 3 640  
225 0 0 4 229 493 0 0 576 ////////////////////////////////////////////////////////////////////
//     Function: PfmVizzer::set_vis_2d
//       Access: Published
//  Description: Sets the vis_2d flag.  When this flag is true,
//               only the first two (x, y) value of each depth point
//               is considered meaningful; the z component is ignored.
//               This is only relevant for generating visualizations.
//
//               This may be used in lieu of the lower-level
//               add_vis_column().
//////////////////////////////////////////////////////////////////// 2 4 this 3 639  6 vis_2d 1 511  
226 0 0 6 230 511 0 0 264 ////////////////////////////////////////////////////////////////////
//     Function: PfmVizzer::get_vis_2d
//       Access: Published
//  Description: Returns the vis_2d flag.  See set_vis_2d().
//////////////////////////////////////////////////////////////////// 1 4 this 3 640  
227 0 0 4 231 493 0 0 516 ////////////////////////////////////////////////////////////////////
//     Function: PfmVizzer::set_keep_beyond_lens
//       Access: Published
//  Description: Sets the keep_beyond_lens flag.  When this flag is
//               true, points that fall outside of the normal lens
//               range in project() or in add_vis_column() will be
//               retained anyway; when it is false, these points will
//               be discarded.
//////////////////////////////////////////////////////////////////// 2 4 this 3 639  16 keep_beyond_lens 1 511  
228 0 0 6 232 511 0 0 311 ////////////////////////////////////////////////////////////////////
//     Function: PfmVizzer::get_keep_beyond_lens
//       Access: Published
//  Description: Returns the keep_beyond_lens flag.  See
//               set_keep_beyond_lens().
//////////////////////////////////////////////////////////////////// 1 4 this 3 640  
229 0 0 4 233 493 0 0 805 ////////////////////////////////////////////////////////////////////
//     Function: PfmVizzer::set_vis_blend
//       Access: Published
//  Description: Specifies a blending map--a grayscale image--that
//               will be applied to the vertex color during
//               generate_vis_mesh() and generate_vis_points().  The
//               image size must exactly match the mesh size of the
//               PfmVizzer.
//
//               Ownership of the pointer is not kept by the PfmVizzer;
//               it is your responsibility to ensure it does not
//               destruct during the lifetime of the PfmVizzer (or at
//               least not before your subsequent call to
//               generate_vis_mesh()).
//////////////////////////////////////////////////////////////////// 2 4 this 3 639  9 vis_blend 1 548  
230 0 0 4 234 493 0 0 305 ////////////////////////////////////////////////////////////////////
//     Function: PfmVizzer::set_vis_blend
//       Access: Published
//  Description: Removes the blending map set by a prior call to
//               set_vis_blend().
//////////////////////////////////////////////////////////////////// 1 4 this 3 639  
231 0 0 6 235 548 0 0 377 ////////////////////////////////////////////////////////////////////
//     Function: PfmVizzer::get_vis_blend
//       Access: Published
//  Description: Returns the blending map set by the most recent call
//               to set_vis_blend(), or NULL if there is no blending
//               map in effect.
//////////////////////////////////////////////////////////////////// 1 4 this 3 640  
232 0 0 4 236 493 0 0 762 ////////////////////////////////////////////////////////////////////
//     Function: PfmVizzer::set_aux_pfm
//       Access: Published
//  Description: Assigns an auxiliary PfmFile to this PfmVizzer.  This
//               file will be queried by column types
//               CT_aux_vertex1/2/3, but has no other meaning to the
//               vizzer.  This size of this PfmFile should exactly
//               match the base PfmFile.  No reference count is held
//               and no copy is made; the caller is responsible for
//               ensuring that the auxiliary PfmFile will persist
//               throughout the lifetime of the PfmVizzer it is
//               assigned to.
//////////////////////////////////////////////////////////////////// 2 4 this 3 639  3 pfm 1 642  
233 0 0 4 237 493 0 0 274 ////////////////////////////////////////////////////////////////////
//     Function: PfmVizzer::clear_aux_pfm
//       Access: Published
//  Description: Removes the auxiliary PfmFile from this PfmVizzer.
//////////////////////////////////////////////////////////////////// 1 4 this 3 639  
234 0 0 6 238 642 0 0 438 ////////////////////////////////////////////////////////////////////
//     Function: PfmVizzer::get_aux_pfm
//       Access: Published
//  Description: Returns the reference to the auxiliary PfmFile
//               queried by this PfmVizzer.  This contains the values
//               that will be reflected in CT_aux_vertex3 etc.  See
//               set_aux_pfm().
//////////////////////////////////////////////////////////////////// 1 4 this 3 640  
235 0 0 4 240 493 0 0 372 ////////////////////////////////////////////////////////////////////
//     Function: PfmVizzer::clear_vis_columns
//       Access: Published
//  Description: Removes all of the previously-added vis columns in
//               preparation for building a new list.  See
//               add_vis_column().
//////////////////////////////////////////////////////////////////// 1 4 this 3 639  
236 0 0 4 241 493 0 0 1131 ////////////////////////////////////////////////////////////////////
//     Function: PfmVizzer::add_vis_column
//       Access: Published
//  Description: Adds a new vis column specification to the list of
//               vertex data columns that will be generated at the
//               next call to generate_vis_points() or
//               generate_vis_mesh().  This advanced interface
//               supercedes the higher-level set_vis_inverse(),
//               set_flat_texcoord_name(), and set_vis_2d().
//
//               If you use this advanced interface, you must specify
//               explicitly the complete list of data columns to be
//               created in the resulting GeomVertexData, by calling
//               add_vis_column() each time.  For each column, you
//               specify the source of the column in the PFMFile, the
//               target column and name in the GeomVertexData, and an
//               optional transform matrix and/or lens to transform
//               and project the point before generating it.
//////////////////////////////////////////////////////////////////// 7 4 this 3 639  6 source 1 489  6 target 1 489  4 name 1 647  9 transform 1 606  4 lens 1 644  10 undist_lut 1 642  
237 0 0 7 242 566 0 0 445 ////////////////////////////////////////////////////////////////////
//     Function: PfmVizzer::generate_vis_points
//       Access: Published
//  Description: Creates a point cloud with the points of the pfm as
//               3-d coordinates in space, and texture coordinates
//               ranging from 0 .. 1 based on the position within the
//               pfm grid.
//////////////////////////////////////////////////////////////////// 1 4 this 3 640  
238 0 0 7 244 566 0 0 445 ////////////////////////////////////////////////////////////////////
//     Function: PfmVizzer::generate_vis_mesh
//       Access: Published
//  Description: Creates a triangle mesh with the points of the pfm as
//               3-d coordinates in space, and texture coordinates
//               ranging from 0 .. 1 based on the position within the
//               pfm grid.
//////////////////////////////////////////////////////////////////// 2 4 this 3 640  4 face 1 490  
239 0 0 6 245 535 0 0 474 ////////////////////////////////////////////////////////////////////
//     Function: PfmVizzer::calc_max_u_displacement
//       Access: Published
//  Description: Computes the maximum amount of shift, in pixels
//               either left or right, of any pixel in the distortion
//               map.  This can be passed to make_displacement(); see
//               that function for more information.
//////////////////////////////////////////////////////////////////// 1 4 this 3 640  
240 0 0 6 246 535 0 0 471 ////////////////////////////////////////////////////////////////////
//     Function: PfmVizzer::calc_max_v_displacement
//       Access: Published
//  Description: Computes the maximum amount of shift, in pixels
//               either up or down, of any pixel in the distortion
//               map.  This can be passed to make_displacement(); see
//               that function for more information.
//////////////////////////////////////////////////////////////////// 1 4 this 3 640  
241 0 0 4 247 493 0 0 1460 ////////////////////////////////////////////////////////////////////
//     Function: PfmVizzer::make_displacement
//       Access: Published
//  Description: Assuming the underlying PfmFile is a 2-d distortion
//               mesh, with the U and V in the first two components
//               and the third component unused, this computes an
//               AfterEffects-style displacement map that represents
//               the same distortion.  The indicated PNMImage will be
//               filled in with a displacement map image, with
//               horizontal shift in the red channel and vertical
//               shift in the green channel, where a fully bright (or
//               fully black) pixel indicates a shift of max_u or
//               max_v pixels.
//
//               Use calc_max_u_displacement() and
//               calc_max_v_displacement() to compute suitable values
//               for max_u and max_v.
//
//               This generates an integer 16-bit displacement image.
//               It is a good idea, though not necessarily essential,
//               to check "Preserve RGB" in the interpret footage
//               section for each displacement image.  Set
//               for_32bit true if this is meant to be used in a
//               32-bit project file, and false if it is meant to be
//               used in a 16-bit project file.
//////////////////////////////////////////////////////////////////// 5 4 this 3 640  6 result 1 541  5 max_u 1 535  5 max_v 1 535  9 for_32bit 1 511  
242 0 0 4 247 493 0 0 1413 ////////////////////////////////////////////////////////////////////
//     Function: PfmVizzer::make_displacement
//       Access: Published
//  Description: Assuming the underlying PfmFile is a 2-d distortion
//               mesh, with the U and V in the first two components
//               and the third component unused, this computes an
//               AfterEffects-style displacement map that represents
//               the same distortion.  The indicated PNMImage will be
//               filled in with a displacement map image, with
//               horizontal shift in the red channel and vertical
//               shift in the green channel, where a fully bright (or
//               fully black) pixel indicates a shift of max_u or
//               max_v pixels.
//
//               Use calc_max_u_displacement() and
//               calc_max_v_displacement() to compute suitable values
//               for max_u and max_v.
//
//               This generates a 32-bit floating-point displacement
//               image.  It is essential to check "Preserve RGB" in
//               the interpret footage section for each displacement
//               image.  Set for_32bit true if this is meant to
//               be used in a 32-bit project file, and false if it is
//               meant to be used in a 16-bit project file.
//////////////////////////////////////////////////////////////////// 5 4 this 3 640  6 result 1 637  5 max_u 1 535  5 max_v 1 535  9 for_32bit 1 511  
184
465 9 CardMaker 0 26625 9 CardMaker 9 CardMaker 0 0 0 1 243 244 0 12 245 246 247 248 249 250 251 252 253 254 255 256 0 0 1 0 466 0 0 0 0 350
////////////////////////////////////////////////////////////////////
//       Class : CardMaker
// Description : This class generates 2-d "cards", that is,
//               rectangular polygons, particularly useful for showing
//               textures etc. in the 2-d scene graph.
////////////////////////////////////////////////////////////////////

466 7 Namable 0 2049 7 Namable 7 Namable 0 0 0 0 0 0 0 0 0 0 0 0 324
////////////////////////////////////////////////////////////////////
//       Class : Namable
// Description : A base class for all things which can have a name.
//               The name is either empty or nonempty, but it is never
//               NULL.
////////////////////////////////////////////////////////////////////

467 12 FisheyeMaker 0 26625 12 FisheyeMaker 12 FisheyeMaker 0 0 0 1 257 258 0 6 259 260 261 262 263 264 0 0 1 0 466 0 0 0 0 743
////////////////////////////////////////////////////////////////////
//       Class : FisheyeMaker
// Description : This class is similar to CardMaker, but instead of
//               generating ordinary cards, it generates a circular
//               rose that represents the projection of a 3-D scene
//               through a fisheye lens.  The texture coordinates of
//               the rose are defined so that each 2-D vertex has a
//               3-D UVW that reflects the corresponding position in
//               3-D space of that particular vertex.
//
//               This class is particularly suited for converting cube
//               maps to sphere maps.
////////////////////////////////////////////////////////////////////

468 14 FrameRateMeter 0 75777 14 FrameRateMeter 14 FrameRateMeter 0 0 0 1 265 0 0 12 266 267 268 269 270 271 272 273 274 275 276 277 0 0 1 0 469 0 0 0 0 673
////////////////////////////////////////////////////////////////////
//       Class : FrameRateMeter
// Description : This is a special TextNode that automatically updates
//               itself with the current frame rate.  It can be placed
//               anywhere in the world where you'd like to see the
//               frame rate.
//
//               It also has a special mode in which it may be
//               attached directly to a channel or window.  If this is
//               done, it creates a DisplayRegion for itself and renders
//               itself in the upper-right-hand corner.
////////////////////////////////////////////////////////////////////

469 8 TextNode 0 2049 8 TextNode 8 TextNode 0 0 0 0 0 0 0 0 0 0 0 0 1336
////////////////////////////////////////////////////////////////////
//       Class : TextNode
// Description : The primary interface to this module.  This class
//               does basic text assembly; given a string of text and
//               a TextFont object, it creates a piece of geometry
//               that may be placed in the 3-d or 2-d world to
//               represent the indicated text.
//
//               The TextNode may be used in one of two ways.
//               Naively, it may simply be parented directly into the
//               scene graph and rendered as if it were a GeomNode; in
//               this mode, the actual polygon geometry that renders
//               the text is not directly visible or accessible, but
//               remains hidden within the TextNode.
//
//               The second way TextNode may be used is as a text
//               generator.  To use it in this way, do not parent the
//               TextNode to the scene graph; instead, set the
//               properties of the text and call generate() to return
//               an ordinary node, containing ordinary geometry, which
//               you may use however you like.  Each time you call
//               generate() a new node is returned.
////////////////////////////////////////////////////////////////////

470 13 GeoMipTerrain 0 75777 13 GeoMipTerrain 13 GeoMipTerrain 0 0 0 1 278 0 0 36 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 0 0 1 0 471 0 0 0 1 472 697
////////////////////////////////////////////////////////////////////
//       Class : GeoMipTerrain
// Description : GeoMipTerrain, meaning Panda3D GeoMipMapping, can convert
//               a heightfield image into a 3D terrain, consisting
//               of several GeomNodes. It uses the GeoMipMapping
//               algorithm, or Geometrical MipMapping, based on
//               the LOD (Level of Detail) algorithm. For more
//               information about the GeoMipMapping algoritm, see
//               this paper, written by Willem H. de Boer:
//               http://flipcode.com/articles/article_geomipmaps.pdf
////////////////////////////////////////////////////////////////////

471 11 TypedObject 0 2049 11 TypedObject 11 TypedObject 0 0 0 0 0 0 0 0 0 0 0 0 3561
////////////////////////////////////////////////////////////////////
//       Class : TypedObject
// Description : This is an abstract class that all classes which
//               use TypeHandle, and also provide virtual functions to
//               support polymorphism, should inherit from.  Each
//               derived class should define get_type(), which should
//               return the specific type of the derived class.
//               Inheriting from this automatically provides support
//               for is_of_type() and is_exact_type().
//
//               All classes that inherit directly or indirectly from
//               TypedObject should redefine get_type() and
//               force_init_type(), as shown below.  Some classes that
//               do not inherit from TypedObject may still declare
//               TypeHandles for themselves by defining methods called
//               get_class_type() and init_type().  Classes such as
//               these may serve as base classes, but the dynamic type
//               identification system will be limited.  Classes that
//               do not inherit from TypedObject need not define the
//               virtual functions get_type() and force_init_type()
//               (or any other virtual functions).
//
//               There is a specific layout for defining the
//               overrides from this class.  Keeping the definitions
//               formatted just like these examples will allow
//               someone in the future to use a sed (or similar)
//               script to make global changes, if necessary.  Avoid
//               rearranging the braces or the order of the functions
//               unless you're ready to change them in every file all
//               at once.
//
//               What follows are some examples that can be used in
//               new classes that you create.
//
//               @par In the class definition (.h file):
//               @code
//               public:
//                 static TypeHandle get_class_type() {
//                   return _type_handle;
//                 }
//                 static void init_type() {
//                   <<<BaseClassOne>>>::init_type();
//                   <<<BaseClassTwo>>>::init_type();
//                   <<<BaseClassN>>>::init_type();
//                   register_type(_type_handle, "<<<ThisClassStringName>>>",
//                                 <<<BaseClassOne>>>::get_class_type(),
//                                 <<<BaseClassTwo>>>::get_class_type(),
//                                 <<<BaseClassN>>>::get_class_type());
//                 }
//                 virtual TypeHandle get_type() const {
//                   return get_class_type();
//                 }
//                 virtual TypeHandle force_init_type() {init_type(); return get_class_type();}
//
//               private:
//                 static TypeHandle _type_handle;
//               @endcode
//
//               @par In the class .cxx file:
//               @code
//               TypeHandle <<<ThisClassStringName>>>::_type_handle;
//               @endcode
//
//               @par In the class config_<<<PackageName>>>.cxx file:
//               @code
//               ConfigureFn(config_<<<PackageName>>>) {
//                 <<<ClassOne>>>::init_type();
//                 <<<ClassTwo>>>::init_type();
//                 <<<ClassN>>>::init_type();
//               }
//               @endcode
////////////////////////////////////////////////////////////////////

472 15 AutoFlattenMode 0 794624 30 GeoMipTerrain::AutoFlattenMode 30 GeoMipTerrain::AutoFlattenMode 470 0 0 0 0 0 0 0 0 0 4 7 AFM_off 22 GeoMipTerrain::AFM_off 42
// FM_off: don't ever flatten the terrain.
0 9 AFM_light 24 GeoMipTerrain::AFM_light 58
// FM_light: the terrain is flattened using flatten_light.
1 10 AFM_medium 25 GeoMipTerrain::AFM_medium 60
// FM_medium: the terrain is flattened using flatten_medium.
2 10 AFM_strong 25 GeoMipTerrain::AFM_strong 60
// FM_strong: the terrain is flattened using flatten_strong.
3 0 108
// The flatten mode specifies whether the terrain nodes are flattened
// together after each terrain update.

473 21 HeightfieldTesselator 0 26625 21 HeightfieldTesselator 21 HeightfieldTesselator 0 0 0 1 315 316 0 10 317 318 319 320 321 322 323 324 325 326 0 0 1 0 466 0 0 0 0 0

474 8 LineSegs 0 26625 8 LineSegs 8 LineSegs 0 0 0 1 327 328 0 13 329 330 331 332 333 334 335 336 337 338 339 340 341 2 649 650 0 1 0 466 0 0 0 0 493
////////////////////////////////////////////////////////////////////
//       Class : LineSegs
// Description : Encapsulates creation of a series of connected or
//               disconnected line segments or points, for drawing
//               paths or rays.  This class doesn't attempt to be the
//               smartest it could possibly be; it's intended
//               primarily as a visualization and editing tool.
////////////////////////////////////////////////////////////////////

475 10 MeshDrawer 0 75777 10 MeshDrawer 10 MeshDrawer 0 0 0 1 342 0 0 18 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 0 0 1 0 471 0 0 0 0 988
////////////////////////////////////////////////////////////////////
//       Class : MeshDrawer
// Description : Mesh drawer creates a single geom object that can be
//               shaped with different draw commands.  This is an 
//               efficient way to render bunch of billboards, particles, 
//               fast changing triangles.  Its implemented by recycling 
//               same geom over and over again.  Max budget specifies 
//               how many triangles are allowed.  Some uses of this 
//               class can be : particle system, radar icons, health 
//               bars, 2d icons, 2d ui, bullets, missile trails.  Any 
//               that can be drawn with triangles can be drawn with 
//               this class.  At the low level this uses the 
//               GeomVertexRewriter's.  The internal geom consists of 
//               vertex, normal, uv and color channels.
////////////////////////////////////////////////////////////////////

476 12 MeshDrawer2D 0 75777 12 MeshDrawer2D 12 MeshDrawer2D 0 0 0 1 361 0 0 13 362 363 364 365 366 367 368 369 370 371 372 373 374 0 0 1 0 471 0 0 0 0 378
////////////////////////////////////////////////////////////////////
//       Class : MeshDrawer2D
// Description : This class allows the drawing of 2d objects -
//               mainly based on quads and rectangles.
//               Allows clipping and serverl high level UI theme
//               functions.
////////////////////////////////////////////////////////////////////

477 12 MovieTexture 0 75777 12 MovieTexture 12 MovieTexture 0 0 0 1 375 0 0 20 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 0 0 1 0 478 0 0 0 0 279
////////////////////////////////////////////////////////////////////
//       Class : MovieTexture
// Description : A texture that fetches video frames from an
//               underlying object of class Movie.
////////////////////////////////////////////////////////////////////

478 7 Texture 0 2049 7 Texture 7 Texture 0 0 0 0 0 0 0 0 0 0 0 0 1051
////////////////////////////////////////////////////////////////////
//       Class : Texture
// Description : Represents a texture object, which is typically a
//               single 2-d image but may also represent a 1-d or 3-d
//               texture image, or the six 2-d faces of a cube map
//               texture.
//
//               A texture's image data might be stored in system RAM
//               (see get_ram_image()) or its image may be represented
//               in texture memory on one or more
//               GraphicsStateGuardians (see prepare()), or both.  The
//               typical usage pattern is that a texture is loaded
//               from an image file on disk, which copies its image
//               data into system RAM; then the first time the texture
//               is rendered its image data is copied to texture
//               memory (actually, to the graphics API), and the
//               system RAM image is automatically freed.
////////////////////////////////////////////////////////////////////

479 15 MultitexReducer 0 26625 15 MultitexReducer 15 MultitexReducer 0 0 0 1 396 397 0 6 398 399 400 401 402 403 0 0 0 0 0 964
////////////////////////////////////////////////////////////////////
//       Class : MultitexReducer
// Description : This object presents an interface for generating new
//               texture images that represent the combined images
//               from one or more individual textures, reproducing 
//               certain kinds of multitexture effects without
//               depending on multitexture support in the hardware.
//
//               This also flattens out texture matrices and removes
//               extra texture coordinates from the Geoms.  It is thus
//               not a complete substitute for true multitexturing,
//               because it does not lend itself well to dynamic
//               animation of the textures once they have been
//               flattened.  It is, however, useful for "baking in" a
//               particular multitexture effect.
////////////////////////////////////////////////////////////////////

480 19 NodeVertexTransform 0 141313 19 NodeVertexTransform 19 NodeVertexTransform 0 0 0 1 404 408 0 3 405 406 407 0 0 1 0 481 0 0 0 0 523
////////////////////////////////////////////////////////////////////
//       Class : NodeVertexTransform
// Description : This VertexTransform gets its matrix from the
//               Transform stored on a node.  It can also compose its
//               node's transform with another VertexTransform,
//               allowing you to build up a chain of
//               NodeVertexTransforms that represent a list of
//               composed matrices.
////////////////////////////////////////////////////////////////////

481 15 VertexTransform 0 2049 15 VertexTransform 15 VertexTransform 0 0 0 0 0 0 0 0 0 0 0 0 558
////////////////////////////////////////////////////////////////////
//       Class : VertexTransform
// Description : This is an abstract base class that holds a pointer
//               to some transform, computed in some arbitrary way,
//               that is to be applied to vertices during rendering.
//               This is used to implement soft-skinned and animated
//               vertices.  Derived classes will define how the
//               transform is actually computed.
////////////////////////////////////////////////////////////////////

482 23 SceneGraphAnalyzerMeter 0 75777 23 SceneGraphAnalyzerMeter 23 SceneGraphAnalyzerMeter 0 0 0 1 409 0 0 10 410 411 412 413 414 415 416 417 418 419 0 0 1 0 469 0 0 0 0 720
////////////////////////////////////////////////////////////////////
//       Class : SceneGraphAnalyzerMeter
// Description : This is a special TextNode that automatically updates
//               itself with output from a SceneGraphAnalyzer instance.
//               It can be placed anywhere in the world where you'd like
//               to see the output from SceneGraphAnalyzer.
//
//               It also has a special mode in which it may be
//               attached directly to a channel or window.  If this is
//               done, it creates a DisplayRegion for itself and renders
//               itself in the upper-right-hand corner.
////////////////////////////////////////////////////////////////////

483 17 RigidBodyCombiner 0 141313 17 RigidBodyCombiner 17 RigidBodyCombiner 0 0 0 1 420 424 0 3 421 422 423 0 0 1 0 484 0 0 0 0 1335
////////////////////////////////////////////////////////////////////
//       Class : RigidBodyCombiner
// Description : This is a special node that combines multiple
//               independently-moving rigid nodes into one Geom
//               internally (or as few Geoms as possible), for the
//               purposes of improving rendering performance.
//
//               To use it, parent a number of moving objects to this
//               node and call collect().  A child node is identified
//               as "moving" if (a) it has a non-identity transform
//               initially, or (b) it is a ModelNode with the
//               preserve_transform flag set.  Any other nodes will be
//               considered static, and later transforms applied to
//               them will not be identified.
//
//               You should call collect() only at startup or if you
//               change the set of children; it is a relatively
//               expensive call.
//
//               Once you call collect(), you may change the
//               transforms on the child nodes freely without having
//               to call collect() again.
//
//               RenderEffects such as Billboards are not supported
//               below this node.
////////////////////////////////////////////////////////////////////

484 9 PandaNode 0 2049 9 PandaNode 9 PandaNode 0 0 0 0 0 0 0 3 651 652 653 0 0 0 0 374
////////////////////////////////////////////////////////////////////
//       Class : PandaNode
// Description : A basic node of the scene graph or data graph.  This
//               is the base class of all specialized nodes, and also
//               serves as a generic node with no special properties.
////////////////////////////////////////////////////////////////////

485 26 PipeOcclusionCullTraverser 0 141313 26 PipeOcclusionCullTraverser 26 PipeOcclusionCullTraverser 0 0 0 1 429 437 0 7 430 431 432 433 434 435 436 0 0 2 3 486 425 426 3 487 427 428 0 0 983
////////////////////////////////////////////////////////////////////
//       Class : PipeOcclusionCullTraverser
// Description : This specialization of CullTraverser uses the
//               graphics pipe itself to perform occlusion culling.
//               As such, it's likely to be inefficient (since it
//               interferes with the pipe's normal mode of rendering),
//               and is mainly useful to test other, CPU-based
//               occlusion algorithms.
//
//               This cannot be used in a multithreaded pipeline
//               environment where cull and draw are operating
//               simultaneously.
//
//               It can't be defined in the cull subdirectory, because
//               it needs access to GraphicsPipe and DisplayRegion and
//               other classes in display.  So we put it in grutil
//               instead, for lack of any better ideas.
////////////////////////////////////////////////////////////////////

486 13 CullTraverser 0 2049 13 CullTraverser 13 CullTraverser 0 0 0 0 0 0 0 0 0 0 0 0 512
////////////////////////////////////////////////////////////////////
//       Class : CullTraverser
// Description : This object performs a depth-first traversal of the
//               scene graph, with optional view-frustum culling,
//               collecting CullState and searching for GeomNodes.
//               Each renderable Geom encountered is passed along with
//               its associated RenderState to the CullHandler object.
////////////////////////////////////////////////////////////////////

487 11 CullHandler 0 2049 11 CullHandler 11 CullHandler 0 0 0 0 0 0 0 0 0 0 0 0 442
////////////////////////////////////////////////////////////////////
//       Class : CullHandler
// Description : This defines the abstract interface for an object
//               that receives Geoms identified by the CullTraverser.
//               By itself, it's not a particularly useful class; to
//               use it, derive from it and redefine record_object().
////////////////////////////////////////////////////////////////////

488 9 PfmVizzer 0 141313 9 PfmVizzer 9 PfmVizzer 0 0 0 1 438 464 0 25 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 0 0 0 0 2 489 490 272
////////////////////////////////////////////////////////////////////
//       Class : PfmVizzer
// Description : This class aids in the visualization and manipulation
//               of PfmFile objects.
////////////////////////////////////////////////////////////////////

489 10 ColumnType 0 794624 21 PfmVizzer::ColumnType 21 PfmVizzer::ColumnType 488 0 0 0 0 0 0 0 0 0 10 12 CT_texcoord2 23 PfmVizzer::CT_texcoord2 0
0 12 CT_texcoord3 23 PfmVizzer::CT_texcoord3 0
1 10 CT_vertex1 21 PfmVizzer::CT_vertex1 0
2 10 CT_vertex2 21 PfmVizzer::CT_vertex2 0
3 10 CT_vertex3 21 PfmVizzer::CT_vertex3 0
4 10 CT_normal3 21 PfmVizzer::CT_normal3 0
5 9 CT_blend1 20 PfmVizzer::CT_blend1 0
6 14 CT_aux_vertex1 25 PfmVizzer::CT_aux_vertex1 0
7 14 CT_aux_vertex2 25 PfmVizzer::CT_aux_vertex2 0
8 14 CT_aux_vertex3 25 PfmVizzer::CT_aux_vertex3 0
9 0 0

490 8 MeshFace 0 794624 19 PfmVizzer::MeshFace 19 PfmVizzer::MeshFace 488 0 0 0 0 0 0 0 0 0 3 8 MF_front 19 PfmVizzer::MF_front 0
1 7 MF_back 18 PfmVizzer::MF_back 0
2 7 MF_both 18 PfmVizzer::MF_both 0
3 0 0

491 13 atomic string 0 2 13 atomic string 13 atomic string 0 7 0 0 0 0 0 0 0 0 0 0 0

492 11 CardMaker * 0 8576 11 CardMaker * 11 CardMaker * 0 0 465 0 0 0 0 0 0 0 0 0 0

493 4 void 0 8194 4 void 4 void 0 6 0 0 0 0 0 0 0 0 0 0 0

494 17 LTexCoord const * 0 8576 17 LTexCoord const * 17 LTexCoord const * 0 0 495 0 0 0 0 0 0 0 0 0 0

495 15 LTexCoord const 0 8832 15 LTexCoord const 15 LTexCoord const 0 0 496 0 0 0 0 0 0 0 0 0 0

496 9 LTexCoord 0 2105344 9 LTexCoord 9 LTexCoord 0 0 497 0 0 0 0 0 0 0 0 0 0

497 10 LTexCoordf 0 2105344 10 LTexCoordf 10 LTexCoordf 0 0 498 0 0 0 0 0 0 0 0 0 0

498 8 LPoint2f 0 2048 8 LPoint2f 8 LPoint2f 0 0 0 0 0 0 0 0 0 0 0 0 219
////////////////////////////////////////////////////////////////////
//       Class : LPoint2
// Description : This is a two-component point in space.
////////////////////////////////////////////////////////////////////

499 18 LTexCoord3 const * 0 8576 18 LTexCoord3 const * 18 LTexCoord3 const * 0 0 500 0 0 0 0 0 0 0 0 0 0

500 16 LTexCoord3 const 0 8832 16 LTexCoord3 const 16 LTexCoord3 const 0 0 501 0 0 0 0 0 0 0 0 0 0

501 10 LTexCoord3 0 2105344 10 LTexCoord3 10 LTexCoord3 0 0 502 0 0 0 0 0 0 0 0 0 0

502 11 LTexCoord3f 0 2105344 11 LTexCoord3f 11 LTexCoord3f 0 0 503 0 0 0 0 0 0 0 0 0 0

503 8 LPoint3f 0 2048 8 LPoint3f 8 LPoint3f 0 0 0 0 0 0 0 0 0 0 0 0 596
////////////////////////////////////////////////////////////////////
//       Class : LPoint3
// Description : This is a three-component point in space (as opposed
//               to a three-component vector, which represents a
//               direction and a distance).  Some of the methods are
//               slightly different between LPoint3 and LVector3; in
//               particular, subtraction of two points yields a
//               vector, while addition of a vector and a point yields
//               a point.
////////////////////////////////////////////////////////////////////

504 16 LVector4 const * 0 8576 16 LVector4 const * 16 LVector4 const * 0 0 505 0 0 0 0 0 0 0 0 0 0

505 14 LVector4 const 0 8832 14 LVector4 const 14 LVector4 const 0 0 506 0 0 0 0 0 0 0 0 0 0

506 8 LVector4 0 2105344 8 LVector4 8 LVector4 0 0 507 0 0 0 0 0 0 0 0 0 0

507 9 LVector4f 0 2048 9 LVector4f 9 LVector4f 0 0 0 0 0 0 0 0 0 0 0 0 222
////////////////////////////////////////////////////////////////////
//       Class : LVector4
// Description : This is a four-component vector distance.
////////////////////////////////////////////////////////////////////

508 15 Texture const * 0 8576 15 Texture const * 15 Texture const * 0 0 509 0 0 0 0 0 0 0 0 0 0

509 13 Texture const 0 8832 13 Texture const 13 Texture const 0 0 478 0 0 0 0 0 0 0 0 0 0

510 3 int 0 8194 3 int 3 int 0 1 0 0 0 0 0 0 0 0 0 0 0

511 4 bool 0 8194 4 bool 4 bool 0 4 0 0 0 0 0 0 0 0 0 0 0

512 17 LVecBase4 const * 0 8576 17 LVecBase4 const * 17 LVecBase4 const * 0 0 513 0 0 0 0 0 0 0 0 0 0

513 15 LVecBase4 const 0 8832 15 LVecBase4 const 15 LVecBase4 const 0 0 514 0 0 0 0 0 0 0 0 0 0

514 9 LVecBase4 0 2105344 9 LVecBase4 9 LVecBase4 0 0 515 0 0 0 0 0 0 0 0 0 0

515 10 LVecBase4f 0 2048 10 LVecBase4f 10 LVecBase4f 0 0 0 0 0 0 0 0 0 0 0 0 265
////////////////////////////////////////////////////////////////////
//       Class : LVecBase4
// Description : This is the base class for all three-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

516 15 LVertex const * 0 8576 15 LVertex const * 15 LVertex const * 0 0 517 0 0 0 0 0 0 0 0 0 0

517 13 LVertex const 0 8832 13 LVertex const 13 LVertex const 0 0 518 0 0 0 0 0 0 0 0 0 0

518 7 LVertex 0 2105344 7 LVertex 7 LVertex 0 0 519 0 0 0 0 0 0 0 0 0 0

519 8 LVertexf 0 2105344 8 LVertexf 8 LVertexf 0 0 503 0 0 0 0 0 0 0 0 0 0

520 11 PN_stdfloat 0 2105344 11 PN_stdfloat 11 PN_stdfloat 0 0 521 0 0 0 0 0 0 0 0 0 0

521 5 float 0 8194 5 float 5 float 0 2 0 0 0 0 0 0 0 0 0 0 0

522 14 LColor const * 0 8576 14 LColor const * 14 LColor const * 0 0 523 0 0 0 0 0 0 0 0 0 0

523 12 LColor const 0 8832 12 LColor const 12 LColor const 0 0 524 0 0 0 0 0 0 0 0 0 0

524 6 LColor 0 2105344 6 LColor 6 LColor 0 0 525 0 0 0 0 0 0 0 0 0 0

525 7 LColorf 0 2105344 7 LColorf 7 LColorf 0 0 515 0 0 0 0 0 0 0 0 0 0

526 11 PandaNode * 0 8576 11 PandaNode * 11 PandaNode * 0 0 484 0 0 0 0 0 0 0 0 0 0

527 14 FisheyeMaker * 0 8576 14 FisheyeMaker * 14 FisheyeMaker * 0 0 467 0 0 0 0 0 0 0 0 0 0

528 16 FrameRateMeter * 0 8576 16 FrameRateMeter * 16 FrameRateMeter * 0 0 468 0 0 0 0 0 0 0 0 0 0

529 16 GraphicsOutput * 0 8576 16 GraphicsOutput * 16 GraphicsOutput * 0 0 530 0 0 0 0 0 0 0 0 0 0

530 14 GraphicsOutput 0 2048 14 GraphicsOutput 14 GraphicsOutput 0 0 0 0 0 0 0 2 654 655 0 0 0 0 1111
////////////////////////////////////////////////////////////////////
//       Class : GraphicsOutput
// Description : This is a base class for the various different
//               classes that represent the result of a frame of
//               rendering.  The most common kind of GraphicsOutput is
//               a GraphicsWindow, which is a real-time window on the
//               desktop, but another example is GraphicsBuffer, which
//               is an offscreen buffer.
//
//               The actual rendering, and anything associated with
//               the graphics context itself, is managed by the
//               associated GraphicsStateGuardian (which might output
//               to multiple GraphicsOutput objects).
//
//               GraphicsOutputs are not actually writable to bam
//               files, of course, but they may be passed as event
//               parameters, so they inherit from
//               TypedWritableReferenceCount instead of
//               TypedReferenceCount for that convenience.
////////////////////////////////////////////////////////////////////

531 22 FrameRateMeter const * 0 8576 22 FrameRateMeter const * 22 FrameRateMeter const * 0 0 532 0 0 0 0 0 0 0 0 0 0

532 20 FrameRateMeter const 0 8832 20 FrameRateMeter const 20 FrameRateMeter const 0 0 468 0 0 0 0 0 0 0 0 0 0

533 13 DisplayRegion 0 2048 13 DisplayRegion 13 DisplayRegion 0 0 0 0 0 0 0 0 0 0 0 0 677
////////////////////////////////////////////////////////////////////
//       Class : DisplayRegion
// Description : A rectangular subregion within a window for rendering
//               into.  Typically, there is one DisplayRegion that
//               covers the whole window, but you may also create
//               smaller DisplayRegions for having different regions
//               within the window that represent different scenes.
//               You may also stack up DisplayRegions like panes of
//               glass, usually for layering 2-d interfaces on top of
//               a 3-d scene.
////////////////////////////////////////////////////////////////////

534 15 DisplayRegion * 0 8576 15 DisplayRegion * 15 DisplayRegion * 0 0 533 0 0 0 0 0 0 0 0 0 0

535 6 double 0 8194 6 double 6 double 0 3 0 0 0 0 0 0 0 0 0 0 0

536 13 ClockObject * 0 8576 13 ClockObject * 13 ClockObject * 0 0 537 0 0 0 0 0 0 0 0 0 0

537 11 ClockObject 0 2048 11 ClockObject 11 ClockObject 0 0 0 0 0 0 0 0 0 0 0 0 1457
////////////////////////////////////////////////////////////////////
//       Class : ClockObject
// Description : A ClockObject keeps track of elapsed real time and
//               discrete time.  In normal mode, get_frame_time()
//               returns the time as of the last time tick() was
//               called.  This is the "discrete" time, and is usually
//               used to get the time as of, for instance, the
//               beginning of the current frame.
//
//               In other modes, as set by set_mode() or the
//               clock-mode config variable, get_frame_time() may
//               return other values to simulate different timing
//               effects, for instance to perform non-real-time
//               animation.  See set_mode().
//
//               In all modes, get_real_time() always returns the
//               elapsed real time in seconds since the ClockObject
//               was constructed, or since it was last reset.
//
//               You can create your own ClockObject whenever you want
//               to have your own local timer.  There is also a
//               default, global ClockObject intended to represent
//               global time for the application; this is normally set
//               up to tick every frame so that its get_frame_time()
//               will return the time for the current frame.
////////////////////////////////////////////////////////////////////

538 10 TypeHandle 0 2048 10 TypeHandle 10 TypeHandle 0 0 0 0 0 0 0 0 0 0 0 0 1098
////////////////////////////////////////////////////////////////////
//       Class : TypeHandle
// Description : TypeHandle is the identifier used to differentiate
//               C++ class types.  Any C++ classes that inherit from
//               some base class, and must be differentiated at run
//               time, should store a static TypeHandle object that
//               can be queried through a static member function
//               named get_class_type().  Most of the time, it is also
//               desirable to inherit from TypedObject, which provides
//               some virtual functions to return the TypeHandle for a
//               particular instance.
//
//               At its essence, a TypeHandle is simply a unique
//               identifier that is assigned by the TypeRegistry.  The
//               TypeRegistry stores a tree of TypeHandles, so that
//               ancestry of a particular type may be queried, and the
//               type name may be retrieved for run-time display.
////////////////////////////////////////////////////////////////////

539 12 TypeHandle * 0 8576 12 TypeHandle * 12 TypeHandle * 0 0 538 0 0 0 0 0 0 0 0 0 0

540 15 GeoMipTerrain * 0 8576 15 GeoMipTerrain * 15 GeoMipTerrain * 0 0 470 0 0 0 0 0 0 0 0 0 0

541 10 PNMImage * 0 8576 10 PNMImage * 10 PNMImage * 0 0 542 0 0 0 0 0 0 0 0 0 0

542 8 PNMImage 0 2048 8 PNMImage 8 PNMImage 0 0 0 0 0 0 0 0 0 0 0 0 2116
////////////////////////////////////////////////////////////////////
//       Class : PNMImage
// Description : The name of this class derives from the fact that we
//               originally implemented it as a layer on top of the
//               "pnm library", based on netpbm, which was built to
//               implement pbm, pgm, and pbm files, and is the
//               underlying support of a number of public-domain image
//               file converters.  Nowadays we are no longer derived
//               directly from the pnm library, mainly to allow
//               support of C++ iostreams instead of the C stdio FILE
//               interface.
//
//               Conceptually, a PNMImage is a two-dimensional array
//               of xels, which are the PNM-defined generic pixel
//               type.  Each xel may have a red, green, and blue
//               component, or (if the image is grayscale) a gray
//               component.  The image may be read in, the individual
//               xels manipulated, and written out again, or a black
//               image may be constructed from scratch.
//
//               A PNMImage has a color space and a maxval, the
//               combination of which defines how a floating-point
//               linear color value is encoded as an integer value in
//               memory.  The functions ending in _val operate on
//               encoded colors, whereas the regular ones work with
//               linear floating-point values.  All operations are
//               color space correct unless otherwise specified.
//
//               The image is of size XSize() by YSize() xels,
//               numbered from top to bottom, left to right, beginning
//               at zero.
//
//               Files can be specified by filename, or by an iostream
//               pointer.  The filename "-" refers to stdin or stdout.
//
//               This class is not inherently thread-safe; use it
//               from a single thread or protect access using a mutex.
////////////////////////////////////////////////////////////////////

543 16 Filename const * 0 8576 16 Filename const * 16 Filename const * 0 0 544 0 0 0 0 0 0 0 0 0 0

544 14 Filename const 0 8832 14 Filename const 14 Filename const 0 0 545 0 0 0 0 0 0 0 0 0 0

545 8 Filename 0 2048 8 Filename 8 Filename 0 0 0 0 0 0 0 0 0 0 0 0 869
////////////////////////////////////////////////////////////////////
//       Class : Filename
// Description : The name of a file, such as a texture file or an Egg
//               file.  Stores the full pathname, and includes
//               functions for extracting out the directory prefix
//               part and the file extension and stuff.
//
//               A Filename is also aware of the mapping between the
//               Unix-like filename convention we use internally, and
//               the local OS's specific filename convention, and it
//               knows how to perform basic OS-specific I/O, like
//               testing for file existence and searching a
//               searchpath, as well as the best way to open an
//               fstream for reading or writing.
////////////////////////////////////////////////////////////////////

546 13 PNMFileType * 0 8576 13 PNMFileType * 13 PNMFileType * 0 0 547 0 0 0 0 0 0 0 0 0 0

547 11 PNMFileType 0 2048 11 PNMFileType 11 PNMFileType 0 0 0 0 0 0 0 0 0 0 0 0 0

548 16 PNMImage const * 0 8576 16 PNMImage const * 16 PNMImage const * 0 0 549 0 0 0 0 0 0 0 0 0 0

549 14 PNMImage const 0 8832 14 PNMImage const 14 PNMImage const 0 0 542 0 0 0 0 0 0 0 0 0 0

550 21 GeoMipTerrain const * 0 8576 21 GeoMipTerrain const * 21 GeoMipTerrain const * 0 0 551 0 0 0 0 0 0 0 0 0 0

551 19 GeoMipTerrain const 0 8832 19 GeoMipTerrain const 19 GeoMipTerrain const 0 0 470 0 0 0 0 0 0 0 0 0 0

552 8 LVector3 0 2105344 8 LVector3 8 LVector3 0 0 553 0 0 0 0 0 0 0 0 0 0

553 9 LVector3f 0 2048 9 LVector3f 9 LVector3f 0 0 0 0 0 0 0 0 0 0 0 0 598
////////////////////////////////////////////////////////////////////
//       Class : LVector3
// Description : This is a three-component vector distance (as opposed
//               to a three-component point, which represents a
//               particular point in space).  Some of the methods are
//               slightly different between LPoint3 and LVector3; in
//               particular, subtraction of two points yields a
//               vector, while addition of a vector and a point yields
//               a point.
////////////////////////////////////////////////////////////////////

554 10 LVector3 * 0 8576 10 LVector3 * 10 LVector3 * 0 0 552 0 0 0 0 0 0 0 0 0 0

555 18 unsigned short int 0 8262 18 unsigned short int 18 unsigned short int 0 1 0 0 0 0 0 0 0 0 0 0 0

556 16 LPoint2d const * 0 8576 16 LPoint2d const * 16 LPoint2d const * 0 0 557 0 0 0 0 0 0 0 0 0 0

557 14 LPoint2d const 0 8832 14 LPoint2d const 14 LPoint2d const 0 0 558 0 0 0 0 0 0 0 0 0 0

558 8 LPoint2d 0 2048 8 LPoint2d 8 LPoint2d 0 0 0 0 0 0 0 0 0 0 0 0 219
////////////////////////////////////////////////////////////////////
//       Class : LPoint2
// Description : This is a two-component point in space.
////////////////////////////////////////////////////////////////////

559 16 LPoint2f const * 0 8576 16 LPoint2f const * 16 LPoint2f const * 0 0 560 0 0 0 0 0 0 0 0 0 0

560 14 LPoint2f const 0 8832 14 LPoint2f const 14 LPoint2f const 0 0 498 0 0 0 0 0 0 0 0 0 0

561 16 LPoint3d const * 0 8576 16 LPoint3d const * 16 LPoint3d const * 0 0 562 0 0 0 0 0 0 0 0 0 0

562 14 LPoint3d const 0 8832 14 LPoint3d const 14 LPoint3d const 0 0 563 0 0 0 0 0 0 0 0 0 0

563 8 LPoint3d 0 2048 8 LPoint3d 8 LPoint3d 0 0 0 0 0 0 0 0 0 0 0 0 596
////////////////////////////////////////////////////////////////////
//       Class : LPoint3
// Description : This is a three-component point in space (as opposed
//               to a three-component vector, which represents a
//               direction and a distance).  Some of the methods are
//               slightly different between LPoint3 and LVector3; in
//               particular, subtraction of two points yields a
//               vector, while addition of a vector and a point yields
//               a point.
////////////////////////////////////////////////////////////////////

564 16 LPoint3f const * 0 8576 16 LPoint3f const * 16 LPoint3f const * 0 0 565 0 0 0 0 0 0 0 0 0 0

565 14 LPoint3f const 0 8832 14 LPoint3f const 14 LPoint3f const 0 0 503 0 0 0 0 0 0 0 0 0 0

566 10 NodePath * 0 8576 10 NodePath * 10 NodePath * 0 0 567 0 0 0 0 0 0 0 0 0 0

567 8 NodePath 0 2048 8 NodePath 8 NodePath 0 0 0 0 0 0 0 2 656 657 0 0 0 0 1139
////////////////////////////////////////////////////////////////////
//       Class : NodePath
// Description : NodePath is the fundamental system for disambiguating
//               instances, and also provides a higher-level interface
//               for manipulating the scene graph.
//
//               A NodePath is a list of connected nodes from the root
//               of the graph to any sub-node.  Each NodePath
//               therefore uniquely describes one instance of a node.
//
//               NodePaths themselves are lightweight objects that may
//               easily be copied and passed by value.  Their data is
//               stored as a series of NodePathComponents that are
//               stored on the nodes.  Holding a NodePath will keep a
//               reference count to all the nodes in the path.
//               However, if any node in the path is removed or
//               reparented (perhaps through a different NodePath),
//               the NodePath will automatically be updated to reflect
//               the changes.
////////////////////////////////////////////////////////////////////

568 14 NodePath const 0 8832 14 NodePath const 14 NodePath const 0 0 567 0 0 0 0 0 0 0 0 0 0

569 16 NodePath const * 0 8576 16 NodePath const * 16 NodePath const * 0 0 568 0 0 0 0 0 0 0 0 0 0

570 9 LVecBase2 0 2105344 9 LVecBase2 9 LVecBase2 0 0 571 0 0 0 0 0 0 0 0 0 0

571 10 LVecBase2f 0 2048 10 LVecBase2f 10 LVecBase2f 0 0 0 0 0 0 0 0 0 0 0 0 263
////////////////////////////////////////////////////////////////////
//       Class : LVecBase2
// Description : This is the base class for all two-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

572 11 LVecBase2 * 0 8576 11 LVecBase2 * 11 LVecBase2 * 0 0 570 0 0 0 0 0 0 0 0 0 0

573 23 HeightfieldTesselator * 0 8576 23 HeightfieldTesselator * 23 HeightfieldTesselator * 0 0 473 0 0 0 0 0 0 0 0 0 0

574 10 LineSegs * 0 8576 10 LineSegs * 10 LineSegs * 0 0 474 0 0 0 0 0 0 0 0 0 0

575 17 LVecBase3 const * 0 8576 17 LVecBase3 const * 17 LVecBase3 const * 0 0 576 0 0 0 0 0 0 0 0 0 0

576 15 LVecBase3 const 0 8832 15 LVecBase3 const 15 LVecBase3 const 0 0 577 0 0 0 0 0 0 0 0 0 0

577 9 LVecBase3 0 2105344 9 LVecBase3 9 LVecBase3 0 0 578 0 0 0 0 0 0 0 0 0 0

578 10 LVecBase3f 0 2048 10 LVecBase3f 10 LVecBase3f 0 0 0 0 0 0 0 0 0 0 0 0 265
////////////////////////////////////////////////////////////////////
//       Class : LVecBase3
// Description : This is the base class for all three-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

579 8 GeomNode 0 2048 8 GeomNode 8 GeomNode 0 0 0 0 0 0 0 3 658 659 660 0 0 0 0 423
////////////////////////////////////////////////////////////////////
//       Class : GeomNode
// Description : A node that holds Geom objects, renderable pieces of
//               geometry.  This is the primary kind of leaf node in
//               the scene graph; almost all visible objects will be
//               contained in a GeomNode somewhere.
////////////////////////////////////////////////////////////////////

580 10 GeomNode * 0 8576 10 GeomNode * 10 GeomNode * 0 0 579 0 0 0 0 0 0 0 0 0 0

581 16 LineSegs const * 0 8576 16 LineSegs const * 16 LineSegs const * 0 0 582 0 0 0 0 0 0 0 0 0 0

582 14 LineSegs const 0 8832 14 LineSegs const 14 LineSegs const 0 0 474 0 0 0 0 0 0 0 0 0 0

583 9 LVertex * 0 8576 9 LVertex * 9 LVertex * 0 0 518 0 0 0 0 0 0 0 0 0 0

584 8 LColor * 0 8576 8 LColor * 8 LColor * 0 0 524 0 0 0 0 0 0 0 0 0 0

585 12 MeshDrawer * 0 8576 12 MeshDrawer * 12 MeshDrawer * 0 0 475 0 0 0 0 0 0 0 0 0 0

586 16 LVector3 const * 0 8576 16 LVector3 const * 16 LVector3 const * 0 0 587 0 0 0 0 0 0 0 0 0 0

587 14 LVector3 const 0 8832 14 LVector3 const 14 LVector3 const 0 0 552 0 0 0 0 0 0 0 0 0 0

588 16 LVector2 const * 0 8576 16 LVector2 const * 16 LVector2 const * 0 0 589 0 0 0 0 0 0 0 0 0 0

589 14 LVector2 const 0 8832 14 LVector2 const 14 LVector2 const 0 0 590 0 0 0 0 0 0 0 0 0 0

590 8 LVector2 0 2105344 8 LVector2 8 LVector2 0 0 591 0 0 0 0 0 0 0 0 0 0

591 9 LVector2f 0 2048 9 LVector2f 9 LVector2f 0 0 0 0 0 0 0 0 0 0 0 0 219
////////////////////////////////////////////////////////////////////
//       Class : LVector2
// Description : This is a two-component vector offset.
////////////////////////////////////////////////////////////////////

592 14 MeshDrawer2D * 0 8576 14 MeshDrawer2D * 14 MeshDrawer2D * 0 0 476 0 0 0 0 0 0 0 0 0 0

593 12 MovieVideo * 0 8576 12 MovieVideo * 12 MovieVideo * 0 0 594 0 0 0 0 0 0 0 0 0 0

594 10 MovieVideo 0 2048 10 MovieVideo 10 MovieVideo 0 0 0 0 0 0 0 0 0 0 0 0 676
////////////////////////////////////////////////////////////////////
//       Class : MovieVideo
// Description : A MovieVideo is actually any source that provides
//               a sequence of video frames.  That could include an
//               AVI file, a digital camera, or an internet TV station.
//
//               The difference between a MovieVideo and a
//               MovieVideoCursor is like the difference between a
//               filename and a file handle.  The MovieVideo just
//               indicates a particular movie.  The MovieVideoCursor
//               is what allows access.
////////////////////////////////////////////////////////////////////

595 14 MovieTexture * 0 8576 14 MovieTexture * 14 MovieTexture * 0 0 477 0 0 0 0 0 0 0 0 0 0

596 20 MovieTexture const * 0 8576 20 MovieTexture const * 20 MovieTexture const * 0 0 597 0 0 0 0 0 0 0 0 0 0

597 18 MovieTexture const 0 8832 18 MovieTexture const 18 MovieTexture const 0 0 477 0 0 0 0 0 0 0 0 0 0

598 16 MovieVideoCursor 0 2048 16 MovieVideoCursor 16 MovieVideoCursor 0 0 0 0 0 0 0 0 0 0 0 0 812
////////////////////////////////////////////////////////////////////
//       Class : MovieVideoCursor
// Description : A MovieVideo is actually any source that provides
//               a sequence of video frames.  That could include an
//               AVI file, a digital camera, or an internet TV station.
//               A MovieVideoCursor is a handle that lets you read
//               data sequentially from a MovieVideo.
//
//               Thread safety: each individual MovieVideoCursor
//               must be owned and accessed by a single thread.
//               It is OK for two different threads to open
//               the same file at the same time, as long as they
//               use separate MovieVideoCursor objects.
////////////////////////////////////////////////////////////////////

599 18 MovieVideoCursor * 0 8576 18 MovieVideoCursor * 18 MovieVideoCursor * 0 0 598 0 0 0 0 0 0 0 0 0 0

600 12 AudioSound * 0 8576 12 AudioSound * 12 AudioSound * 0 0 601 0 0 0 0 0 0 0 0 0 0

601 10 AudioSound 0 2048 10 AudioSound 10 AudioSound 0 0 0 0 0 0 0 0 0 0 0 0 0

602 17 MultitexReducer * 0 8576 17 MultitexReducer * 17 MultitexReducer * 0 0 479 0 0 0 0 0 0 0 0 0 0

603 19 RenderState const * 0 8576 19 RenderState const * 19 RenderState const * 0 0 604 0 0 0 0 0 0 0 0 0 0

604 17 RenderState const 0 8832 17 RenderState const 17 RenderState const 0 0 605 0 0 0 0 0 0 0 0 0 0

605 11 RenderState 0 2048 11 RenderState 11 RenderState 0 0 0 0 0 0 0 0 0 0 0 0 621
////////////////////////////////////////////////////////////////////
//       Class : RenderState
// Description : This represents a unique collection of RenderAttrib
//               objects that correspond to a particular renderable
//               state.
//
//               You should not attempt to create or modify a
//               RenderState object directly.  Instead, call one of
//               the make() functions to create one for you.  And
//               instead of modifying a RenderState object, create a
//               new one.
////////////////////////////////////////////////////////////////////

606 22 TransformState const * 0 8576 22 TransformState const * 22 TransformState const * 0 0 607 0 0 0 0 0 0 0 0 0 0

607 20 TransformState const 0 8832 20 TransformState const 20 TransformState const 0 0 608 0 0 0 0 0 0 0 0 0 0

608 14 TransformState 0 2048 14 TransformState 14 TransformState 0 0 0 0 0 0 0 0 0 0 0 0 1138
////////////////////////////////////////////////////////////////////
//       Class : TransformState
// Description : Indicates a coordinate-system transform on vertices.
//               TransformStates are the primary means for storing
//               transformations on the scene graph.
//
//               Transforms may be specified in one of two ways:
//               componentwise, with a pos-hpr-scale, or with an
//               arbitrary transform matrix.  If you specify a
//               transform componentwise, it will remember its
//               original components.
//
//               TransformState objects are managed very much like
//               RenderState objects.  They are immutable and
//               reference-counted automatically.
//
//               You should not attempt to create or modify a
//               TransformState object directly.  Instead, call one of
//               the make() functions to create one for you.  And
//               instead of modifying a TransformState object, create a
//               new one.
////////////////////////////////////////////////////////////////////

609 14 TextureStage * 0 8576 14 TextureStage * 14 TextureStage * 0 0 610 0 0 0 0 0 0 0 0 0 0

610 12 TextureStage 0 2048 12 TextureStage 12 TextureStage 0 0 0 0 0 0 0 0 0 0 0 0 600
////////////////////////////////////////////////////////////////////
//       Class : TextureStage
// Description : Defines the properties of a named stage of the
//               multitexture pipeline.  The TextureAttrib will
//               associated a number of these stages with Texture
//               objects, and the GSG will render geometry by sorting
//               all of the currently active TextureStages in order
//               and then issuing the appropriate rendering calls to
//               activate them.
////////////////////////////////////////////////////////////////////

611 17 PandaNode const * 0 8576 17 PandaNode const * 17 PandaNode const * 0 0 612 0 0 0 0 0 0 0 0 0 0

612 15 PandaNode const 0 8832 15 PandaNode const 15 PandaNode const 0 0 484 0 0 0 0 0 0 0 0 0 0

613 23 VertexTransform const * 0 8576 23 VertexTransform const * 23 VertexTransform const * 0 0 614 0 0 0 0 0 0 0 0 0 0

614 21 VertexTransform const 0 8832 21 VertexTransform const 21 VertexTransform const 0 0 481 0 0 0 0 0 0 0 0 0 0

615 21 NodeVertexTransform * 0 8576 21 NodeVertexTransform * 21 NodeVertexTransform * 0 0 480 0 0 0 0 0 0 0 0 0 0

616 27 NodeVertexTransform const * 0 8576 27 NodeVertexTransform const * 27 NodeVertexTransform const * 0 0 617 0 0 0 0 0 0 0 0 0 0

617 25 NodeVertexTransform const 0 8832 25 NodeVertexTransform const 25 NodeVertexTransform const 0 0 480 0 0 0 0 0 0 0 0 0 0

618 25 SceneGraphAnalyzerMeter * 0 8576 25 SceneGraphAnalyzerMeter * 25 SceneGraphAnalyzerMeter * 0 0 482 0 0 0 0 0 0 0 0 0 0

619 31 SceneGraphAnalyzerMeter const * 0 8576 31 SceneGraphAnalyzerMeter const * 31 SceneGraphAnalyzerMeter const * 0 0 620 0 0 0 0 0 0 0 0 0 0

620 29 SceneGraphAnalyzerMeter const 0 8832 29 SceneGraphAnalyzerMeter const 29 SceneGraphAnalyzerMeter const 0 0 482 0 0 0 0 0 0 0 0 0 0

621 19 RigidBodyCombiner * 0 8576 19 RigidBodyCombiner * 19 RigidBodyCombiner * 0 0 483 0 0 0 0 0 0 0 0 0 0

622 28 PipeOcclusionCullTraverser * 0 8576 28 PipeOcclusionCullTraverser * 28 PipeOcclusionCullTraverser * 0 0 485 0 0 0 0 0 0 0 0 0 0

623 34 PipeOcclusionCullTraverser const * 0 8576 34 PipeOcclusionCullTraverser const * 34 PipeOcclusionCullTraverser const * 0 0 624 0 0 0 0 0 0 0 0 0 0

624 32 PipeOcclusionCullTraverser const 0 8832 32 PipeOcclusionCullTraverser const 32 PipeOcclusionCullTraverser const 0 0 485 0 0 0 0 0 0 0 0 0 0

625 12 SceneSetup * 0 8576 12 SceneSetup * 12 SceneSetup * 0 0 626 0 0 0 0 0 0 0 0 0 0

626 10 SceneSetup 0 2048 10 SceneSetup 10 SceneSetup 0 0 0 0 0 0 0 0 0 0 0 0 331
////////////////////////////////////////////////////////////////////
//       Class : SceneSetup
// Description : This object holds the camera position, etc., and
//               other general setup information for rendering a
//               particular scene.
////////////////////////////////////////////////////////////////////

627 27 GraphicsStateGuardianBase * 0 8576 27 GraphicsStateGuardianBase * 27 GraphicsStateGuardianBase * 0 0 628 0 0 0 0 0 0 0 0 0 0

628 25 GraphicsStateGuardianBase 0 2048 25 GraphicsStateGuardianBase 25 GraphicsStateGuardianBase 0 0 0 0 0 0 0 1 661 0 0 0 0 957
////////////////////////////////////////////////////////////////////
//       Class : GraphicsStateGuardianBase
// Description : This is a base class for the GraphicsStateGuardian
//               class, which is itself a base class for the various
//               GSG's for different platforms.  This class contains
//               all the function prototypes to support the
//               double-dispatch of GSG to geoms, transitions, etc.  It
//               lives in a separate class in its own package so we
//               can avoid circular build dependency problems.
//
//               GraphicsStateGuardians are not actually writable to
//               bam files, of course, but they may be passed as event
//               parameters, so they inherit from
//               TypedWritableReferenceCount instead of
//               TypedReferenceCount for that convenience.
////////////////////////////////////////////////////////////////////

629 9 Texture * 0 8576 9 Texture * 9 Texture * 0 0 478 0 0 0 0 0 0 0 0 0 0

630 16 DrawMask const * 0 8576 16 DrawMask const * 16 DrawMask const * 0 0 631 0 0 0 0 0 0 0 0 0 0

631 14 DrawMask const 0 8832 14 DrawMask const 14 DrawMask const 0 0 632 0 0 0 0 0 0 0 0 0 0

632 8 DrawMask 0 2105344 8 DrawMask 8 DrawMask 0 0 633 0 0 0 0 0 0 0 0 0 0

633 9 BitMask32 0 2105344 9 BitMask32 9 BitMask32 0 0 634 0 0 0 0 0 0 0 0 0 0

634 24 BitMask< PN_uint32, 32 > 0 2048 24 BitMask< PN_uint32, 32 > 24 BitMask< PN_uint32, 32 > 0 0 0 0 0 0 0 0 0 0 0 0 0

635 15 CullTraverser * 0 8576 15 CullTraverser * 15 CullTraverser * 0 0 486 0 0 0 0 0 0 0 0 0 0

636 13 CullHandler * 0 8576 13 CullHandler * 13 CullHandler * 0 0 487 0 0 0 0 0 0 0 0 0 0

637 9 PfmFile * 0 8576 9 PfmFile * 9 PfmFile * 0 0 638 0 0 0 0 0 0 0 0 0 0

638 7 PfmFile 0 2048 7 PfmFile 7 PfmFile 0 0 0 0 0 0 0 0 0 0 0 0 355
////////////////////////////////////////////////////////////////////
//       Class : PfmFile
// Description : Defines a pfm file, a 2-d table of floating-point
//               numbers, either 3-component or 1-component, or with a
//               special extension, 2- or 4-component.
////////////////////////////////////////////////////////////////////

639 11 PfmVizzer * 0 8576 11 PfmVizzer * 11 PfmVizzer * 0 0 488 0 0 0 0 0 0 0 0 0 0

640 17 PfmVizzer const * 0 8576 17 PfmVizzer const * 17 PfmVizzer const * 0 0 641 0 0 0 0 0 0 0 0 0 0

641 15 PfmVizzer const 0 8832 15 PfmVizzer const 15 PfmVizzer const 0 0 488 0 0 0 0 0 0 0 0 0 0

642 15 PfmFile const * 0 8576 15 PfmFile const * 15 PfmFile const * 0 0 643 0 0 0 0 0 0 0 0 0 0

643 13 PfmFile const 0 8832 13 PfmFile const 13 PfmFile const 0 0 638 0 0 0 0 0 0 0 0 0 0

644 12 Lens const * 0 8576 12 Lens const * 12 Lens const * 0 0 645 0 0 0 0 0 0 0 0 0 0

645 10 Lens const 0 8832 10 Lens const 10 Lens const 0 0 646 0 0 0 0 0 0 0 0 0 0

646 4 Lens 0 2048 4 Lens 4 Lens 0 0 0 0 0 0 0 0 0 0 0 0 668
////////////////////////////////////////////////////////////////////
//       Class : Lens
// Description : A base class for any number of different kinds of
//               lenses, linear and otherwise.  Presently, this
//               includes perspective and orthographic lenses.
//
//               A Lens object is the main part of a Camera node,
//               which defines the fundamental interface to
//               point-of-view for rendering.  Lenses are also used in
//               other contexts, however; for instance, a Spotlight is
//               also defined using a lens.
////////////////////////////////////////////////////////////////////

647 14 InternalName * 0 8576 14 InternalName * 14 InternalName * 0 0 648 0 0 0 0 0 0 0 0 0 0

648 12 InternalName 0 2048 12 InternalName 12 InternalName 0 0 0 0 0 0 0 0 0 0 0 0 837
////////////////////////////////////////////////////////////////////
//       Class : InternalName
// Description : Encodes a string name in a hash table, mapping it to
//               a pointer.  This is used to tokenify names so they
//               may be used efficiently in low-level Panda
//               structures, for instance to differentiate the
//               multiple sets of texture coordinates that might be
//               stored on a Geom.
//
//               InternalNames are hierarchical, with the '.' used by
//               convention as a separator character.  You can
//               construct a single InternalName as a composition of
//               one or more other names, or by giving it a source
//               string directly.
////////////////////////////////////////////////////////////////////

0
0
13
649 0 0 94 12 get_vertices 16 get_num_vertices 10 get_vertex 
650 0 0 94 17 get_vertex_colors 16 get_num_vertices 16 get_vertex_color 
651 0 0 197 11 get_parents 15 get_num_parents 10 get_parent 
652 0 0 197 12 get_children 16 get_num_children 9 get_child 
653 0 0 197 11 get_stashed 15 get_num_stashed 11 get_stashed 
654 0 0 317 19 get_display_regions 23 get_num_display_regions 18 get_display_region 
655 0 0 317 26 get_active_display_regions 30 get_num_active_display_regions 25 get_active_display_region 
656 0 0 388 9 get_nodes 13 get_num_nodes 8 get_node 
657 0 0 388 13 get_ancestors 13 get_num_nodes 12 get_ancestor 
658 0 0 446 9 get_geoms 13 get_num_geoms 8 get_geom 
659 0 0 446 12 modify_geoms 13 get_num_geoms 11 modify_geom 
660 0 0 446 15 get_geom_states 13 get_num_geoms 14 get_geom_state 
661 0 0 595 8 get_gsgs 12 get_num_gsgs 7 get_gsg 
