1436948499
2 3
11 libp3egg2pg 4 KLrJ 11 panda3d.egg 
2
3 13 load_egg_file 0 1 0 13 load_egg_file 0 1 1 0
127
PointerTo< PandaNode > load_egg_file(Filename const &filename, CoordinateSystem cs = ::CS_default, BamCacheRecord *record = 0);

4 13 load_egg_data 0 1 0 13 load_egg_data 0 1 2 0
88
PointerTo< PandaNode > load_egg_data(EggData *data, CoordinateSystem cs = ::CS_default);

2
1 0 0 7 1 12 0 0 0 3 8 filename 1 6  2 cs 1 9  6 record 1 10  
2 0 0 7 2 12 0 0 0 2 4 data 1 13  2 cs 1 9  
10
5 9 PandaNode 0 2048 9 PandaNode 9 PandaNode 0 0 0 0 0 0 0 0 0 0 0 0 374
////////////////////////////////////////////////////////////////////
//       Class : PandaNode
// Description : A basic node of the scene graph or data graph.  This
//               is the base class of all specialized nodes, and also
//               serves as a generic node with no special properties.
////////////////////////////////////////////////////////////////////

6 16 Filename const * 0 8576 16 Filename const * 16 Filename const * 0 0 7 0 0 0 0 0 0 0 0 0 0

7 14 Filename const 0 8832 14 Filename const 14 Filename const 0 0 8 0 0 0 0 0 0 0 0 0 0

8 8 Filename 0 2048 8 Filename 8 Filename 0 0 0 0 0 0 0 0 0 0 0 0 869
////////////////////////////////////////////////////////////////////
//       Class : Filename
// Description : The name of a file, such as a texture file or an Egg
//               file.  Stores the full pathname, and includes
//               functions for extracting out the directory prefix
//               part and the file extension and stuff.
//
//               A Filename is also aware of the mapping between the
//               Unix-like filename convention we use internally, and
//               the local OS's specific filename convention, and it
//               knows how to perform basic OS-specific I/O, like
//               testing for file existence and searching a
//               searchpath, as well as the best way to open an
//               fstream for reading or writing.
////////////////////////////////////////////////////////////////////

9 16 CoordinateSystem 0 532480 16 CoordinateSystem 16 CoordinateSystem 0 0 0 0 0 0 0 0 0 0 6 10 CS_default 10 CS_default 213
// The CS_default entry does not refer to a particular coordinate
// system, but rather to the value stored in
// default_coordinate_system, which in turn is loaded from the
// config variable "coordinate-system".
0 12 CS_zup_right 12 CS_zup_right 0
1 12 CS_yup_right 12 CS_yup_right 0
2 11 CS_zup_left 11 CS_zup_left 0
3 11 CS_yup_left 11 CS_yup_left 0
4 10 CS_invalid 10 CS_invalid 155
// CS_invalid is not a coordinate system at all.  It can be used in
// user-input processing code to indicate a contradictory coordinate
// system request.
5 0 0

10 16 BamCacheRecord * 0 8576 16 BamCacheRecord * 16 BamCacheRecord * 0 0 11 0 0 0 0 0 0 0 0 0 0

11 14 BamCacheRecord 0 2048 14 BamCacheRecord 14 BamCacheRecord 0 0 0 0 0 0 0 0 0 0 0 0 469
////////////////////////////////////////////////////////////////////
//       Class : BamCacheRecord
// Description : An instance of this class is written to the front of
//               a Bam or Txo file to make the file a cached instance
//               of some other loadable resource.  This record
//               contains information needed to test the validity of
//               the cache.
////////////////////////////////////////////////////////////////////

12 11 PandaNode * 0 8576 11 PandaNode * 11 PandaNode * 0 0 5 0 0 0 0 0 0 0 0 0 0

13 9 EggData * 0 8576 9 EggData * 9 EggData * 0 0 14 0 0 0 0 0 0 0 0 0 0

14 7 EggData 0 2048 7 EggData 7 EggData 0 0 0 0 0 0 0 0 0 0 0 0 728
////////////////////////////////////////////////////////////////////
//       Class : EggData
// Description : This is the primary interface into all the egg data,
//               and the root of the egg file structure.  An EggData
//               structure corresponds exactly with an egg file on the
//               disk.
//
//               The EggData class inherits from EggGroupNode its
//               collection of children, which are accessed by using
//               the EggData itself as an STL container with begin()
//               and end() calls.  The children of the EggData class
//               are the toplevel nodes in the egg file.
////////////////////////////////////////////////////////////////////

0
0
0
